[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Hosting.ActivityExtensions : object {
    [ExtensionAttribute]
public static string GetSpanId(Activity activity);
    [ExtensionAttribute]
public static string GetTraceId(Activity activity);
    [ExtensionAttribute]
public static string GetParentId(Activity activity);
}
internal class Microsoft.AspNetCore.Hosting.ApplicationLifetime : object {
    private CancellationTokenSource _startedSource;
    private CancellationTokenSource _stoppingSource;
    private CancellationTokenSource _stoppedSource;
    private ILogger`1<ApplicationLifetime> _logger;
    public CancellationToken ApplicationStarted { get; }
    public CancellationToken ApplicationStopping { get; }
    public CancellationToken ApplicationStopped { get; }
    public ApplicationLifetime(ILogger`1<ApplicationLifetime> logger);
    public sealed virtual CancellationToken get_ApplicationStarted();
    public sealed virtual CancellationToken get_ApplicationStopping();
    public sealed virtual CancellationToken get_ApplicationStopped();
    public sealed virtual void StopApplication();
    public void NotifyStarted();
    public void NotifyStopped();
    private void ExecuteHandlers(CancellationTokenSource cancel);
}
public class Microsoft.AspNetCore.Hosting.Builder.ApplicationBuilderFactory : object {
    private IServiceProvider _serviceProvider;
    public ApplicationBuilderFactory(IServiceProvider serviceProvider);
    public sealed virtual IApplicationBuilder CreateBuilder(IFeatureCollection serverFeatures);
}
public interface Microsoft.AspNetCore.Hosting.Builder.IApplicationBuilderFactory {
    public abstract virtual IApplicationBuilder CreateBuilder(IFeatureCollection serverFeatures);
}
internal class Microsoft.AspNetCore.Hosting.ConfigureBuilder : object {
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    public MethodInfo MethodInfo { get; }
    public ConfigureBuilder(MethodInfo configure);
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    public Action`1<IApplicationBuilder> Build(object instance);
    private void Invoke(object instance, IApplicationBuilder builder);
}
internal class Microsoft.AspNetCore.Hosting.ConfigureContainerBuilder : object {
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Action`1<object>, Action`1<object>> <ConfigureContainerFilters>k__BackingField;
    public MethodInfo MethodInfo { get; }
    public Func`2<Action`1<object>, Action`1<object>> ConfigureContainerFilters { get; public set; }
    public ConfigureContainerBuilder(MethodInfo configureContainerMethod);
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
public Func`2<Action`1<object>, Action`1<object>> get_ConfigureContainerFilters();
    [CompilerGeneratedAttribute]
public void set_ConfigureContainerFilters(Func`2<Action`1<object>, Action`1<object>> value);
    public Action`1<object> Build(object instance);
    public Type GetContainerType();
    private void Invoke(object instance, object container);
    private void InvokeCore(object instance, object container);
}
internal class Microsoft.AspNetCore.Hosting.ConfigureServicesBuilder : object {
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Func`2<IServiceCollection, IServiceProvider>, Func`2<IServiceCollection, IServiceProvider>> <StartupServiceFilters>k__BackingField;
    public MethodInfo MethodInfo { get; }
    public Func`2<Func`2<IServiceCollection, IServiceProvider>, Func`2<IServiceCollection, IServiceProvider>> StartupServiceFilters { get; public set; }
    public ConfigureServicesBuilder(MethodInfo configureServices);
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
public Func`2<Func`2<IServiceCollection, IServiceProvider>, Func`2<IServiceCollection, IServiceProvider>> get_StartupServiceFilters();
    [CompilerGeneratedAttribute]
public void set_StartupServiceFilters(Func`2<Func`2<IServiceCollection, IServiceProvider>, Func`2<IServiceCollection, IServiceProvider>> value);
    public Func`2<IServiceCollection, IServiceProvider> Build(object instance);
    private IServiceProvider Invoke(object instance, IServiceCollection services);
    private IServiceProvider InvokeCore(object instance, IServiceCollection services);
}
internal class Microsoft.AspNetCore.Hosting.ConventionBasedStartup : object {
    private StartupMethods _methods;
    public ConventionBasedStartup(StartupMethods methods);
    public sealed virtual void Configure(IApplicationBuilder app);
    public sealed virtual IServiceProvider ConfigureServices(IServiceCollection services);
}
public class Microsoft.AspNetCore.Hosting.DelegateStartup : StartupBase`1<IServiceCollection> {
    private Action`1<IApplicationBuilder> _configureApp;
    public DelegateStartup(IServiceProviderFactory`1<IServiceCollection> factory, Action`1<IApplicationBuilder> configureApp);
    public virtual void Configure(IApplicationBuilder app);
}
internal class Microsoft.AspNetCore.Hosting.GenericWebHostApplicationLifetime : object {
    private IHostApplicationLifetime _applicationLifetime;
    public CancellationToken ApplicationStarted { get; }
    public CancellationToken ApplicationStopping { get; }
    public CancellationToken ApplicationStopped { get; }
    public GenericWebHostApplicationLifetime(IHostApplicationLifetime applicationLifetime);
    public sealed virtual CancellationToken get_ApplicationStarted();
    public sealed virtual CancellationToken get_ApplicationStopping();
    public sealed virtual CancellationToken get_ApplicationStopped();
    public sealed virtual void StopApplication();
}
internal class Microsoft.AspNetCore.Hosting.GenericWebHostBuilder : object {
    private IHostBuilder _builder;
    private IConfiguration _config;
    private object _startupKey;
    private AggregateException _hostingStartupErrors;
    private HostingStartupWebHostBuilder _hostingStartupWebHostBuilder;
    public GenericWebHostBuilder(IHostBuilder builder);
    private void ExecuteHostingStartups();
    public sealed virtual IWebHost Build();
    public sealed virtual IWebHostBuilder ConfigureAppConfiguration(Action`2<WebHostBuilderContext, IConfigurationBuilder> configureDelegate);
    public sealed virtual IWebHostBuilder ConfigureServices(Action`1<IServiceCollection> configureServices);
    public sealed virtual IWebHostBuilder ConfigureServices(Action`2<WebHostBuilderContext, IServiceCollection> configureServices);
    public sealed virtual IWebHostBuilder UseDefaultServiceProvider(Action`2<WebHostBuilderContext, ServiceProviderOptions> configure);
    public sealed virtual IWebHostBuilder UseStartup(Type startupType);
    private void UseStartup(Type startupType, HostBuilderContext context, IServiceCollection services);
    private void ConfigureContainer(HostBuilderContext context, TContainer container);
    public sealed virtual IWebHostBuilder Configure(Action`2<WebHostBuilderContext, IApplicationBuilder> configure);
    private WebHostBuilderContext GetWebHostBuilderContext(HostBuilderContext context);
    public sealed virtual string GetSetting(string key);
    public sealed virtual IWebHostBuilder UseSetting(string key, string value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(IConfigurationBuilder config);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_1(HostBuilderContext context, IConfigurationBuilder configurationBuilder);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_2(HostBuilderContext context, IServiceCollection services);
}
internal class Microsoft.AspNetCore.Hosting.GenericWebHostService : object {
    [CompilerGeneratedAttribute]
private GenericWebHostServiceOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IServer <Server>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <LifetimeLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticListener <DiagnosticListener>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpContextFactory <HttpContextFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IApplicationBuilderFactory <ApplicationBuilderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IStartupFilter> <StartupFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebHostEnvironment <HostingEnvironment>k__BackingField;
    public GenericWebHostServiceOptions Options { get; }
    public IServer Server { get; }
    public ILogger Logger { get; }
    public ILogger LifetimeLogger { get; }
    public DiagnosticListener DiagnosticListener { get; }
    public IHttpContextFactory HttpContextFactory { get; }
    public IApplicationBuilderFactory ApplicationBuilderFactory { get; }
    public IEnumerable`1<IStartupFilter> StartupFilters { get; }
    public IConfiguration Configuration { get; }
    public IWebHostEnvironment HostingEnvironment { get; }
    public GenericWebHostService(IOptions`1<GenericWebHostServiceOptions> options, IServer server, ILoggerFactory loggerFactory, DiagnosticListener diagnosticListener, IHttpContextFactory httpContextFactory, IApplicationBuilderFactory applicationBuilderFactory, IEnumerable`1<IStartupFilter> startupFilters, IConfiguration configuration, IWebHostEnvironment hostingEnvironment);
    [CompilerGeneratedAttribute]
public GenericWebHostServiceOptions get_Options();
    [CompilerGeneratedAttribute]
public IServer get_Server();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public ILogger get_LifetimeLogger();
    [CompilerGeneratedAttribute]
public DiagnosticListener get_DiagnosticListener();
    [CompilerGeneratedAttribute]
public IHttpContextFactory get_HttpContextFactory();
    [CompilerGeneratedAttribute]
public IApplicationBuilderFactory get_ApplicationBuilderFactory();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IStartupFilter> get_StartupFilters();
    [CompilerGeneratedAttribute]
public IConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public IWebHostEnvironment get_HostingEnvironment();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Hosting.GenericWebHostService/<StartAsync>d__31")]
public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    private RequestDelegate BuildErrorPageApplication(Exception exception);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Hosting.GenericWebHostService/<StopAsync>d__33")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
}
internal class Microsoft.AspNetCore.Hosting.GenericWebHostServiceOptions : object {
    [CompilerGeneratedAttribute]
private Action`1<IApplicationBuilder> <ConfigureApplication>k__BackingField;
    [CompilerGeneratedAttribute]
private WebHostOptions <WebHostOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private AggregateException <HostingStartupExceptions>k__BackingField;
    public Action`1<IApplicationBuilder> ConfigureApplication { get; public set; }
    public WebHostOptions WebHostOptions { get; public set; }
    public AggregateException HostingStartupExceptions { get; public set; }
    [CompilerGeneratedAttribute]
public Action`1<IApplicationBuilder> get_ConfigureApplication();
    [CompilerGeneratedAttribute]
public void set_ConfigureApplication(Action`1<IApplicationBuilder> value);
    [CompilerGeneratedAttribute]
public WebHostOptions get_WebHostOptions();
    [CompilerGeneratedAttribute]
public void set_WebHostOptions(WebHostOptions value);
    [CompilerGeneratedAttribute]
public AggregateException get_HostingStartupExceptions();
    [CompilerGeneratedAttribute]
public void set_HostingStartupExceptions(AggregateException value);
}
internal class Microsoft.AspNetCore.Hosting.HostedServiceExecutor : object {
    private IEnumerable`1<IHostedService> _services;
    private ILogger`1<HostedServiceExecutor> _logger;
    public HostedServiceExecutor(ILogger`1<HostedServiceExecutor> logger, IEnumerable`1<IHostedService> services);
    public Task StartAsync(CancellationToken token);
    public Task StopAsync(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Hosting.HostedServiceExecutor/<ExecuteAsync>d__5")]
private Task ExecuteAsync(Func`2<IHostedService, Task> callback, bool throwOnFirstFailure);
}
internal class Microsoft.AspNetCore.Hosting.HostingApplication : object {
    private RequestDelegate _application;
    private IHttpContextFactory _httpContextFactory;
    private DefaultHttpContextFactory _defaultHttpContextFactory;
    private HostingApplicationDiagnostics _diagnostics;
    public HostingApplication(RequestDelegate application, ILogger logger, DiagnosticListener diagnosticSource, IHttpContextFactory httpContextFactory);
    public sealed virtual Context CreateContext(IFeatureCollection contextFeatures);
    public sealed virtual Task ProcessRequestAsync(Context context);
    public sealed virtual void DisposeContext(Context context, Exception exception);
}
internal class Microsoft.AspNetCore.Hosting.HostingApplicationDiagnostics : object {
    private static double TimestampToTicks;
    private static string ActivityName;
    private static string ActivityStartKey;
    private static string ActivityStopKey;
    private static string DeprecatedDiagnosticsBeginRequestKey;
    private static string DeprecatedDiagnosticsEndRequestKey;
    private static string DiagnosticsUnhandledExceptionKey;
    private DiagnosticListener _diagnosticListener;
    private ILogger _logger;
    public HostingApplicationDiagnostics(ILogger logger, DiagnosticListener diagnosticListener);
    private static HostingApplicationDiagnostics();
    public void BeginRequest(HttpContext httpContext, Context context);
    public void RequestEnd(HttpContext httpContext, Exception exception, Context context);
    public void ContextDisposed(Context context);
    private void LogRequestStarting(HttpContext httpContext);
    private void LogRequestFinished(HttpContext httpContext, long startTimestamp, long currentTimestamp);
    private void RecordBeginRequestDiagnostics(HttpContext httpContext, long startTimestamp);
    private void RecordEndRequestDiagnostics(HttpContext httpContext, long currentTimestamp);
    private void RecordUnhandledExceptionDiagnostics(HttpContext httpContext, long currentTimestamp, Exception exception);
    private static void RecordRequestStartEventLog(HttpContext httpContext);
    private Activity StartActivity(HttpContext httpContext, Boolean& hasDiagnosticListener);
    private void StopActivity(HttpContext httpContext, Activity activity, bool hasDiagnosticListener);
    private Activity StartActivity(Activity activity, HttpContext httpContext);
    private void StopActivity(Activity activity, HttpContext httpContext);
}
internal class Microsoft.AspNetCore.Hosting.HostingEnvironment : object {
    [CompilerGeneratedAttribute]
private string <EnvironmentName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebRootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileProvider <WebRootFileProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentRootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileProvider <ContentRootFileProvider>k__BackingField;
    public string EnvironmentName { get; public set; }
    public string ApplicationName { get; public set; }
    public string WebRootPath { get; public set; }
    public IFileProvider WebRootFileProvider { get; public set; }
    public string ContentRootPath { get; public set; }
    public IFileProvider ContentRootFileProvider { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_EnvironmentName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnvironmentName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ApplicationName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ApplicationName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_WebRootPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WebRootPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IFileProvider get_WebRootFileProvider();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WebRootFileProvider(IFileProvider value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentRootPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentRootPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IFileProvider get_ContentRootFileProvider();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentRootFileProvider(IFileProvider value);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions : object {
    [ExtensionAttribute]
internal static void Initialize(IHostingEnvironment hostingEnvironment, string contentRootPath, WebHostOptions options);
    [ExtensionAttribute]
internal static void Initialize(IWebHostEnvironment hostingEnvironment, string contentRootPath, WebHostOptions options);
}
internal class Microsoft.AspNetCore.Hosting.HostingEventSource : EventSource {
    public static HostingEventSource Log;
    private IncrementingPollingCounter _requestsPerSecondCounter;
    private PollingCounter _totalRequestsCounter;
    private PollingCounter _failedRequestsCounter;
    private PollingCounter _currentRequestsCounter;
    private long _totalRequests;
    private long _currentRequests;
    private long _failedRequests;
    internal HostingEventSource(string eventSourceName);
    private static HostingEventSource();
    [EventAttribute("1")]
public void HostStart();
    [EventAttribute("2")]
public void HostStop();
    [EventAttribute("3")]
public void RequestStart(string method, string path);
    [EventAttribute("4")]
public void RequestStop();
    [EventAttribute("5")]
public void UnhandledException();
    internal void RequestFailed();
    protected virtual void OnEventCommand(EventCommandEventArgs command);
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__16_0();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__16_1();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__16_2();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__16_3();
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Hosting.HostingLoggerExtensions : object {
    [ExtensionAttribute]
public static IDisposable RequestScope(ILogger logger, HttpContext httpContext, Activity activity);
    [ExtensionAttribute]
public static void ApplicationError(ILogger logger, Exception exception);
    [ExtensionAttribute]
public static void HostingStartupAssemblyError(ILogger logger, Exception exception);
    [ExtensionAttribute]
public static void ApplicationError(ILogger logger, EventId eventId, string message, Exception exception);
    [ExtensionAttribute]
public static void Starting(ILogger logger);
    [ExtensionAttribute]
public static void Started(ILogger logger);
    [ExtensionAttribute]
public static void Shutdown(ILogger logger);
    [ExtensionAttribute]
public static void ServerShutdownException(ILogger logger, Exception ex);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Hosting.HostingRequestFinishedLog : object {
    internal static Func`3<object, Exception, string> Callback;
    private HttpContext _httpContext;
    private TimeSpan _elapsed;
    private string _cachedToString;
    public int Count { get; }
    public KeyValuePair`2<string, object> Item { get; }
    public HostingRequestFinishedLog(HttpContext httpContext, TimeSpan elapsed);
    private static HostingRequestFinishedLog();
    public sealed virtual int get_Count();
    public sealed virtual KeyValuePair`2<string, object> get_Item(int index);
    public virtual string ToString();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Hosting.HostingRequestFinishedLog/<GetEnumerator>d__10")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Hosting.HostingRequestStartingLog : object {
    internal static Func`3<object, Exception, string> Callback;
    private HttpRequest _request;
    private string _cachedToString;
    public int Count { get; }
    public KeyValuePair`2<string, object> Item { get; }
    public HostingRequestStartingLog(HttpContext httpContext);
    private static HostingRequestStartingLog();
    public sealed virtual int get_Count();
    public sealed virtual KeyValuePair`2<string, object> get_Item(int index);
    public virtual string ToString();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Hosting.HostingRequestStartingLog/<GetEnumerator>d__9")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.AspNetCore.Hosting.HostingStartupWebHostBuilder : object {
    private GenericWebHostBuilder _builder;
    private Action`2<WebHostBuilderContext, IConfigurationBuilder> _configureConfiguration;
    private Action`2<WebHostBuilderContext, IServiceCollection> _configureServices;
    public HostingStartupWebHostBuilder(GenericWebHostBuilder builder);
    public sealed virtual IWebHost Build();
    public sealed virtual IWebHostBuilder ConfigureAppConfiguration(Action`2<WebHostBuilderContext, IConfigurationBuilder> configureDelegate);
    public sealed virtual IWebHostBuilder ConfigureServices(Action`1<IServiceCollection> configureServices);
    public sealed virtual IWebHostBuilder ConfigureServices(Action`2<WebHostBuilderContext, IServiceCollection> configureServices);
    public sealed virtual string GetSetting(string key);
    public sealed virtual IWebHostBuilder UseSetting(string key, string value);
    public void ConfigureServices(WebHostBuilderContext context, IServiceCollection services);
    public void ConfigureAppConfiguration(WebHostBuilderContext context, IConfigurationBuilder builder);
    public sealed virtual IWebHostBuilder UseDefaultServiceProvider(Action`2<WebHostBuilderContext, ServiceProviderOptions> configure);
    public sealed virtual IWebHostBuilder Configure(Action`2<WebHostBuilderContext, IApplicationBuilder> configure);
    public sealed virtual IWebHostBuilder UseStartup(Type startupType);
}
internal interface Microsoft.AspNetCore.Hosting.ISupportsStartup {
    public abstract virtual IWebHostBuilder Configure(Action`2<WebHostBuilderContext, IApplicationBuilder> configure);
    public abstract virtual IWebHostBuilder UseStartup(Type startupType);
}
internal interface Microsoft.AspNetCore.Hosting.ISupportsUseDefaultServiceProvider {
    public abstract virtual IWebHostBuilder UseDefaultServiceProvider(Action`2<WebHostBuilderContext, ServiceProviderOptions> configure);
}
internal static class Microsoft.AspNetCore.Hosting.LoggerEventIds : object {
    public static int RequestStarting;
    public static int RequestFinished;
    public static int Starting;
    public static int Started;
    public static int Shutdown;
    public static int ApplicationStartupException;
    public static int ApplicationStoppingException;
    public static int ApplicationStoppedException;
    public static int HostedServiceStartException;
    public static int HostedServiceStopException;
    public static int HostingStartupAssemblyException;
    public static int ServerShutdownException;
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Hosting.MethodInfoExtensions : object {
    [ExtensionAttribute]
public static object InvokeWithoutWrappingExceptions(MethodInfo methodInfo, object obj, Object[] parameters);
}
internal static class Microsoft.AspNetCore.Hosting.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string WebHostBuilder_SingleInstance { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_WebHostBuilder_SingleInstance();
}
public class Microsoft.AspNetCore.Hosting.Server.Features.ServerAddressesFeature : object {
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Addresses>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreferHostingUrls>k__BackingField;
    public ICollection`1<string> Addresses { get; }
    public bool PreferHostingUrls { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<string> get_Addresses();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PreferHostingUrls();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PreferHostingUrls(bool value);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Hosting.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection Clone(IServiceCollection serviceCollection);
}
public abstract class Microsoft.AspNetCore.Hosting.StartupBase : object {
    public abstract virtual void Configure(IApplicationBuilder app);
    private sealed virtual override IServiceProvider Microsoft.AspNetCore.Hosting.IStartup.ConfigureServices(IServiceCollection services);
    public virtual void ConfigureServices(IServiceCollection services);
    public virtual IServiceProvider CreateServiceProvider(IServiceCollection services);
}
public abstract class Microsoft.AspNetCore.Hosting.StartupBase`1 : StartupBase {
    private IServiceProviderFactory`1<TBuilder> _factory;
    public StartupBase`1(IServiceProviderFactory`1<TBuilder> factory);
    public virtual IServiceProvider CreateServiceProvider(IServiceCollection services);
    public virtual void ConfigureContainer(TBuilder builder);
}
internal class Microsoft.AspNetCore.Hosting.StartupLoader : object {
    public static StartupMethods LoadMethods(IServiceProvider hostingServiceProvider, Type startupType, string environmentName);
    public static Type FindStartupType(string startupAssemblyName, string environmentName);
    internal static ConfigureBuilder FindConfigureDelegate(Type startupType, string environmentName);
    internal static ConfigureContainerBuilder FindConfigureContainerDelegate(Type startupType, string environmentName);
    internal static bool HasConfigureServicesIServiceProviderDelegate(Type startupType, string environmentName);
    internal static ConfigureServicesBuilder FindConfigureServicesDelegate(Type startupType, string environmentName);
    private static MethodInfo FindMethod(Type startupType, string methodName, string environmentName, Type returnType, bool required);
}
internal class Microsoft.AspNetCore.Hosting.StartupMethods : object {
    [CompilerGeneratedAttribute]
private object <StartupInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IServiceCollection, IServiceProvider> <ConfigureServicesDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IApplicationBuilder> <ConfigureDelegate>k__BackingField;
    public object StartupInstance { get; }
    public Func`2<IServiceCollection, IServiceProvider> ConfigureServicesDelegate { get; }
    public Action`1<IApplicationBuilder> ConfigureDelegate { get; }
    public StartupMethods(object instance, Action`1<IApplicationBuilder> configure, Func`2<IServiceCollection, IServiceProvider> configureServices);
    [CompilerGeneratedAttribute]
public object get_StartupInstance();
    [CompilerGeneratedAttribute]
public Func`2<IServiceCollection, IServiceProvider> get_ConfigureServicesDelegate();
    [CompilerGeneratedAttribute]
public Action`1<IApplicationBuilder> get_ConfigureDelegate();
}
internal class Microsoft.AspNetCore.Hosting.StaticWebAssets.StaticWebAssetsFileProvider : object {
    private static StringComparison FilePathComparison;
    [CompilerGeneratedAttribute]
private PhysicalFileProvider <InnerProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private PathString <BasePath>k__BackingField;
    public PhysicalFileProvider InnerProvider { get; }
    public PathString BasePath { get; }
    public StaticWebAssetsFileProvider(string pathPrefix, string contentRoot);
    private static StaticWebAssetsFileProvider();
    [CompilerGeneratedAttribute]
public PhysicalFileProvider get_InnerProvider();
    [CompilerGeneratedAttribute]
public PathString get_BasePath();
    public sealed virtual IDirectoryContents GetDirectoryContents(string subpath);
    public sealed virtual IFileInfo GetFileInfo(string subpath);
    public sealed virtual IChangeToken Watch(string filter);
    private static string NormalizePath(string path);
    private bool StartsWithBasePath(string subpath, PathString& rest);
}
public class Microsoft.AspNetCore.Hosting.StaticWebAssets.StaticWebAssetsLoader : object {
    internal static string StaticWebAssetsManifestName;
    public static void UseStaticWebAssets(IWebHostEnvironment environment, IConfiguration configuration);
    internal static void UseStaticWebAssetsCore(IWebHostEnvironment environment, Stream manifest);
    internal static Stream ResolveManifest(IWebHostEnvironment environment, IConfiguration configuration);
    private static string ResolveRelativeToAssembly(IWebHostEnvironment environment);
    internal static string GetAssemblyLocation(Assembly assembly);
}
internal static class Microsoft.AspNetCore.Hosting.StaticWebAssets.StaticWebAssetsReader : object {
    private static string ManifestRootElementName;
    private static string VersionAttributeName;
    private static string ContentRootElementName;
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Hosting.StaticWebAssets.StaticWebAssetsReader/<Parse>d__3")]
internal static IEnumerable`1<ContentRootMapping> Parse(Stream manifest);
    private static string ParseRequiredAttribute(XElement element, string attributeName);
}
internal class Microsoft.AspNetCore.Hosting.Views.ErrorPage : BaseView {
    [CompilerGeneratedAttribute]
private ErrorPageModel <Model>k__BackingField;
    public ErrorPageModel Model { get; public set; }
    public ErrorPage(ErrorPageModel model);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Hosting.Views.ErrorPage/<ExecuteAsync>d__0")]
public virtual Task ExecuteAsync();
    [CompilerGeneratedAttribute]
public ErrorPageModel get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(ErrorPageModel value);
}
internal class Microsoft.AspNetCore.Hosting.Views.ErrorPageModel : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ExceptionDetails> <ErrorDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowRuntimeDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuntimeDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuntimeArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClrVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentAssemblyVesion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperatingSystemDescription>k__BackingField;
    public IEnumerable`1<ExceptionDetails> ErrorDetails { get; public set; }
    public bool ShowRuntimeDetails { get; public set; }
    public string RuntimeDisplayName { get; public set; }
    public string RuntimeArchitecture { get; public set; }
    public string ClrVersion { get; public set; }
    public string CurrentAssemblyVesion { get; public set; }
    public string OperatingSystemDescription { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<ExceptionDetails> get_ErrorDetails();
    [CompilerGeneratedAttribute]
public void set_ErrorDetails(IEnumerable`1<ExceptionDetails> value);
    [CompilerGeneratedAttribute]
public bool get_ShowRuntimeDetails();
    [CompilerGeneratedAttribute]
public void set_ShowRuntimeDetails(bool value);
    [CompilerGeneratedAttribute]
public string get_RuntimeDisplayName();
    [CompilerGeneratedAttribute]
public void set_RuntimeDisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_RuntimeArchitecture();
    [CompilerGeneratedAttribute]
public void set_RuntimeArchitecture(string value);
    [CompilerGeneratedAttribute]
public string get_ClrVersion();
    [CompilerGeneratedAttribute]
public void set_ClrVersion(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentAssemblyVesion();
    [CompilerGeneratedAttribute]
public void set_CurrentAssemblyVesion(string value);
    [CompilerGeneratedAttribute]
public string get_OperatingSystemDescription();
    [CompilerGeneratedAttribute]
public void set_OperatingSystemDescription(string value);
}
internal class Microsoft.AspNetCore.Hosting.WebHost : object {
    private static string DeprecatedServerUrlsKey;
    private IServiceCollection _applicationServiceCollection;
    private IStartup _startup;
    private ApplicationLifetime _applicationLifetime;
    private HostedServiceExecutor _hostedServiceExecutor;
    private IServiceProvider _hostingServiceProvider;
    private WebHostOptions _options;
    private IConfiguration _config;
    private AggregateException _hostingStartupErrors;
    private IServiceProvider _applicationServices;
    private ExceptionDispatchInfo _applicationServicesException;
    private ILogger _logger;
    private bool _stopped;
    private bool _startedServer;
    [CompilerGeneratedAttribute]
private IServer <Server>k__BackingField;
    internal WebHostOptions Options { get; }
    private IServer Server { get; private set; }
    public IServiceProvider Services { get; }
    public IFeatureCollection ServerFeatures { get; }
    public WebHost(IServiceCollection appServices, IServiceProvider hostingServiceProvider, WebHostOptions options, IConfiguration config, AggregateException hostingStartupErrors);
    private static WebHost();
    internal WebHostOptions get_Options();
    [CompilerGeneratedAttribute]
private IServer get_Server();
    [CompilerGeneratedAttribute]
private void set_Server(IServer value);
    public sealed virtual IServiceProvider get_Services();
    public sealed virtual IFeatureCollection get_ServerFeatures();
    public void Initialize();
    public sealed virtual void Start();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Hosting.WebHost/<StartAsync>d__27")]
public virtual Task StartAsync(CancellationToken cancellationToken);
    private void EnsureApplicationServices();
    private void EnsureStartup();
    private RequestDelegate BuildApplication();
    private void EnsureServer();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Hosting.WebHost/<StopAsync>d__32")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Hosting.WebHost/<DisposeAsync>d__34")]
public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Hosting.WebHost/<DisposeServiceProviderAsync>d__35")]
private ValueTask DisposeServiceProviderAsync(IServiceProvider serviceProvider);
}
public class Microsoft.AspNetCore.Hosting.WebHostBuilder : object {
    private HostingEnvironment _hostingEnvironment;
    private Action`2<WebHostBuilderContext, IServiceCollection> _configureServices;
    private IConfiguration _config;
    private WebHostOptions _options;
    private WebHostBuilderContext _context;
    private bool _webHostBuilt;
    private Action`2<WebHostBuilderContext, IConfigurationBuilder> _configureAppConfigurationBuilder;
    public sealed virtual string GetSetting(string key);
    public sealed virtual IWebHostBuilder UseSetting(string key, string value);
    public sealed virtual IWebHostBuilder ConfigureServices(Action`1<IServiceCollection> configureServices);
    public sealed virtual IWebHostBuilder ConfigureServices(Action`2<WebHostBuilderContext, IServiceCollection> configureServices);
    public sealed virtual IWebHostBuilder ConfigureAppConfiguration(Action`2<WebHostBuilderContext, IConfigurationBuilder> configureDelegate);
    public sealed virtual IWebHost Build();
    private IServiceCollection BuildCommonServices(AggregateException& hostingStartupErrors);
    private void AddApplicationServices(IServiceCollection services, IServiceProvider hostingServiceProvider);
    private string ResolveContentRootPath(string contentRootPath, string basePath);
    [CompilerGeneratedAttribute]
internal static IServiceProvider <Build>g__GetProviderFromFactory|13_0(IServiceCollection collection);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions : object {
    [ExtensionAttribute]
public static IWebHostBuilder Configure(IWebHostBuilder hostBuilder, Action`1<IApplicationBuilder> configureApp);
    [ExtensionAttribute]
public static IWebHostBuilder Configure(IWebHostBuilder hostBuilder, Action`2<WebHostBuilderContext, IApplicationBuilder> configureApp);
    [ExtensionAttribute]
private static IWebHostBuilder Configure(IWebHostBuilder hostBuilder, Action`2<WebHostBuilderContext, IApplicationBuilder> configureApp, string startupAssemblyName);
    [ExtensionAttribute]
public static IWebHostBuilder UseStartup(IWebHostBuilder hostBuilder, Type startupType);
    [ExtensionAttribute]
public static IWebHostBuilder UseStartup(IWebHostBuilder hostBuilder);
    [ExtensionAttribute]
public static IWebHostBuilder UseDefaultServiceProvider(IWebHostBuilder hostBuilder, Action`1<ServiceProviderOptions> configure);
    [ExtensionAttribute]
public static IWebHostBuilder UseDefaultServiceProvider(IWebHostBuilder hostBuilder, Action`2<WebHostBuilderContext, ServiceProviderOptions> configure);
    [ExtensionAttribute]
public static IWebHostBuilder ConfigureAppConfiguration(IWebHostBuilder hostBuilder, Action`1<IConfigurationBuilder> configureDelegate);
    [ExtensionAttribute]
public static IWebHostBuilder ConfigureLogging(IWebHostBuilder hostBuilder, Action`1<ILoggingBuilder> configureLogging);
    [ExtensionAttribute]
public static IWebHostBuilder ConfigureLogging(IWebHostBuilder hostBuilder, Action`2<WebHostBuilderContext, ILoggingBuilder> configureLogging);
    [ExtensionAttribute]
public static IWebHostBuilder UseStaticWebAssets(IWebHostBuilder builder);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Hosting.WebHostExtensions : object {
    [ExtensionAttribute]
public static Task StopAsync(IWebHost host, TimeSpan timeout);
    [ExtensionAttribute]
public static void WaitForShutdown(IWebHost host);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Hosting.WebHostExtensions/<WaitForShutdownAsync>d__2")]
[ExtensionAttribute]
public static Task WaitForShutdownAsync(IWebHost host, CancellationToken token);
    [ExtensionAttribute]
public static void Run(IWebHost host);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Hosting.WebHostExtensions/<RunAsync>d__4")]
[ExtensionAttribute]
public static Task RunAsync(IWebHost host, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Hosting.WebHostExtensions/<RunAsync>d__5")]
[ExtensionAttribute]
private static Task RunAsync(IWebHost host, CancellationToken token, string startupMessage);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Hosting.WebHostExtensions/<WaitForTokenShutdownAsync>d__6")]
[ExtensionAttribute]
private static Task WaitForTokenShutdownAsync(IWebHost host, CancellationToken token);
}
internal class Microsoft.AspNetCore.Hosting.WebHostLifetime : object {
    private CancellationTokenSource _cts;
    private ManualResetEventSlim _resetEvent;
    private string _shutdownMessage;
    private bool _disposed;
    private bool _exitedGracefully;
    public WebHostLifetime(CancellationTokenSource cts, ManualResetEventSlim resetEvent, string shutdownMessage);
    internal void SetExitedGracefully();
    public sealed virtual void Dispose();
    private void CancelKeyPress(object sender, ConsoleCancelEventArgs eventArgs);
    private void ProcessExit(object sender, EventArgs eventArgs);
    private void Shutdown();
}
internal class Microsoft.AspNetCore.Hosting.WebHostOptions : object {
    [CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreventHostingStartup>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressStatusMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <HostingStartupAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <HostingStartupExcludeAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DetailedErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaptureStartupErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartupAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentRootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ShutdownTimeout>k__BackingField;
    public string ApplicationName { get; public set; }
    public bool PreventHostingStartup { get; public set; }
    public bool SuppressStatusMessages { get; public set; }
    public IReadOnlyList`1<string> HostingStartupAssemblies { get; public set; }
    public IReadOnlyList`1<string> HostingStartupExcludeAssemblies { get; public set; }
    public bool DetailedErrors { get; public set; }
    public bool CaptureStartupErrors { get; public set; }
    public string Environment { get; public set; }
    public string StartupAssembly { get; public set; }
    public string WebRoot { get; public set; }
    public string ContentRootPath { get; public set; }
    public TimeSpan ShutdownTimeout { get; public set; }
    public WebHostOptions(IConfiguration configuration);
    public WebHostOptions(IConfiguration configuration, string applicationNameFallback);
    [CompilerGeneratedAttribute]
public string get_ApplicationName();
    [CompilerGeneratedAttribute]
public void set_ApplicationName(string value);
    [CompilerGeneratedAttribute]
public bool get_PreventHostingStartup();
    [CompilerGeneratedAttribute]
public void set_PreventHostingStartup(bool value);
    [CompilerGeneratedAttribute]
public bool get_SuppressStatusMessages();
    [CompilerGeneratedAttribute]
public void set_SuppressStatusMessages(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_HostingStartupAssemblies();
    [CompilerGeneratedAttribute]
public void set_HostingStartupAssemblies(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_HostingStartupExcludeAssemblies();
    [CompilerGeneratedAttribute]
public void set_HostingStartupExcludeAssemblies(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_DetailedErrors();
    [CompilerGeneratedAttribute]
public void set_DetailedErrors(bool value);
    [CompilerGeneratedAttribute]
public bool get_CaptureStartupErrors();
    [CompilerGeneratedAttribute]
public void set_CaptureStartupErrors(bool value);
    [CompilerGeneratedAttribute]
public string get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(string value);
    [CompilerGeneratedAttribute]
public string get_StartupAssembly();
    [CompilerGeneratedAttribute]
public void set_StartupAssembly(string value);
    [CompilerGeneratedAttribute]
public string get_WebRoot();
    [CompilerGeneratedAttribute]
public void set_WebRoot(string value);
    [CompilerGeneratedAttribute]
public string get_ContentRootPath();
    [CompilerGeneratedAttribute]
public void set_ContentRootPath(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ShutdownTimeout();
    [CompilerGeneratedAttribute]
public void set_ShutdownTimeout(TimeSpan value);
    public IEnumerable`1<string> GetFinalHostingStartupAssemblies();
    private IReadOnlyList`1<string> Split(string value);
}
internal class Microsoft.AspNetCore.Hosting.WebHostUtilities : object {
    public static bool ParseBool(IConfiguration configuration, string key);
}
public class Microsoft.AspNetCore.Http.DefaultHttpContextFactory : object {
    private IHttpContextAccessor _httpContextAccessor;
    private FormOptions _formOptions;
    private IServiceScopeFactory _serviceScopeFactory;
    internal IHttpContextAccessor HttpContextAccessor { get; }
    public DefaultHttpContextFactory(IServiceProvider serviceProvider);
    internal IHttpContextAccessor get_HttpContextAccessor();
    public sealed virtual HttpContext Create(IFeatureCollection featureCollection);
    internal void Initialize(DefaultHttpContext httpContext, IFeatureCollection featureCollection);
    private DefaultHttpContext Initialize(DefaultHttpContext httpContext);
    public sealed virtual void Dispose(HttpContext httpContext);
    internal void Dispose(DefaultHttpContext httpContext);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.GenericHostWebHostBuilderExtensions : object {
    [ExtensionAttribute]
public static IHostBuilder ConfigureWebHost(IHostBuilder builder, Action`1<IWebHostBuilder> configure);
}
internal class Microsoft.Extensions.Internal.TypeNameHelper : object {
    private static char DefaultNestedTypeDelimiter;
    private static Dictionary`2<Type, string> _builtInTypeNames;
    private static TypeNameHelper();
    public static string GetTypeDisplayName(object item, bool fullName);
    public static string GetTypeDisplayName(Type type, bool fullName, bool includeGenericParameterNames, bool includeGenericParameters, char nestedTypeDelimiter);
    private static void ProcessType(StringBuilder builder, Type type, DisplayNameOptions& options);
    private static void ProcessArrayType(StringBuilder builder, Type type, DisplayNameOptions& options);
    private static void ProcessGenericType(StringBuilder builder, Type type, Type[] genericArguments, int length, DisplayNameOptions& options);
}
internal class Microsoft.Extensions.RazorViews.AttributeValue : object {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Literal>k__BackingField;
    public string Prefix { get; }
    public object Value { get; }
    public bool Literal { get; }
    public AttributeValue(string prefix, object value, bool literal);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public bool get_Literal();
    public static AttributeValue FromTuple(Tuple`3<string, object, bool> value);
    public static AttributeValue FromTuple(Tuple`3<string, string, bool> value);
    public static AttributeValue op_Implicit(Tuple`3<string, object, bool> value);
}
internal abstract class Microsoft.Extensions.RazorViews.BaseView : object {
    private static Encoding UTF8NoBOM;
    private Stack`1<TextWriter> _textWriterStack;
    [CompilerGeneratedAttribute]
private HttpContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpResponse <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlEncoder <HtmlEncoder>k__BackingField;
    [CompilerGeneratedAttribute]
private UrlEncoder <UrlEncoder>k__BackingField;
    [CompilerGeneratedAttribute]
private JavaScriptEncoder <JavaScriptEncoder>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AttributeValues>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AttributeEnding>k__BackingField;
    protected HttpContext Context { get; private set; }
    protected HttpRequest Request { get; private set; }
    protected HttpResponse Response { get; private set; }
    protected TextWriter Output { get; private set; }
    protected HtmlEncoder HtmlEncoder { get; protected set; }
    protected UrlEncoder UrlEncoder { get; protected set; }
    protected JavaScriptEncoder JavaScriptEncoder { get; protected set; }
    private List`1<string> AttributeValues { get; private set; }
    private string AttributeEnding { get; private set; }
    private static BaseView();
    [CompilerGeneratedAttribute]
protected HttpContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(HttpContext value);
    [CompilerGeneratedAttribute]
protected HttpRequest get_Request();
    [CompilerGeneratedAttribute]
private void set_Request(HttpRequest value);
    [CompilerGeneratedAttribute]
protected HttpResponse get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(HttpResponse value);
    [CompilerGeneratedAttribute]
protected TextWriter get_Output();
    [CompilerGeneratedAttribute]
private void set_Output(TextWriter value);
    [CompilerGeneratedAttribute]
protected HtmlEncoder get_HtmlEncoder();
    [CompilerGeneratedAttribute]
protected void set_HtmlEncoder(HtmlEncoder value);
    [CompilerGeneratedAttribute]
protected UrlEncoder get_UrlEncoder();
    [CompilerGeneratedAttribute]
protected void set_UrlEncoder(UrlEncoder value);
    [CompilerGeneratedAttribute]
protected JavaScriptEncoder get_JavaScriptEncoder();
    [CompilerGeneratedAttribute]
protected void set_JavaScriptEncoder(JavaScriptEncoder value);
    [AsyncStateMachineAttribute("Microsoft.Extensions.RazorViews.BaseView/<ExecuteAsync>d__30")]
public Task ExecuteAsync(Stream stream);
    [AsyncStateMachineAttribute("Microsoft.Extensions.RazorViews.BaseView/<ExecuteAsync>d__31")]
public Task ExecuteAsync(HttpContext context);
    public abstract virtual Task ExecuteAsync();
    protected virtual void PushWriter(TextWriter writer);
    protected virtual TextWriter PopWriter();
    protected void WriteLiteral(object value);
    protected void WriteLiteral(string value);
    [CompilerGeneratedAttribute]
private List`1<string> get_AttributeValues();
    [CompilerGeneratedAttribute]
private void set_AttributeValues(List`1<string> value);
    protected void WriteAttributeValue(string thingy, int startPostion, object value, int endValue, int dealyo, bool yesno);
    [CompilerGeneratedAttribute]
private string get_AttributeEnding();
    [CompilerGeneratedAttribute]
private void set_AttributeEnding(string value);
    protected void BeginWriteAttribute(string name, string begining, int startPosition, string ending, int endPosition, int thingy);
    protected void EndWriteAttribute();
    protected void WriteAttribute(string name, string leader, string trailer, AttributeValue[] values);
    protected void Write(HelperResult result);
    protected void Write(object value);
    protected void Write(string value);
    protected string HtmlEncodeAndReplaceLineBreaks(string input);
}
internal class Microsoft.Extensions.RazorViews.HelperResult : object {
    [CompilerGeneratedAttribute]
private Action`1<TextWriter> <WriteAction>k__BackingField;
    public Action`1<TextWriter> WriteAction { get; }
    public HelperResult(Action`1<TextWriter> action);
    [CompilerGeneratedAttribute]
public Action`1<TextWriter> get_WriteAction();
    public void WriteTo(TextWriter writer);
}
internal class Microsoft.Extensions.StackTrace.Sources.ExceptionDetails : object {
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<StackFrameSourceCodeInfo> <StackFrames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public Exception Error { get; public set; }
    public IEnumerable`1<StackFrameSourceCodeInfo> StackFrames { get; public set; }
    public string ErrorMessage { get; public set; }
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(Exception value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<StackFrameSourceCodeInfo> get_StackFrames();
    [CompilerGeneratedAttribute]
public void set_StackFrames(IEnumerable`1<StackFrameSourceCodeInfo> value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
}
internal class Microsoft.Extensions.StackTrace.Sources.ExceptionDetailsProvider : object {
    private IFileProvider _fileProvider;
    private int _sourceCodeLineCount;
    public ExceptionDetailsProvider(IFileProvider fileProvider, int sourceCodeLineCount);
    [IteratorStateMachineAttribute("Microsoft.Extensions.StackTrace.Sources.ExceptionDetailsProvider/<GetDetails>d__3")]
public IEnumerable`1<ExceptionDetails> GetDetails(Exception exception);
    private static IEnumerable`1<Exception> FlattenAndReverseExceptionTree(Exception ex);
    internal StackFrameSourceCodeInfo GetStackFrameSourceCodeInfo(string method, string filePath, int lineNumber);
    internal void ReadFrameContent(StackFrameSourceCodeInfo frame, IEnumerable`1<string> allLines, int errorStartLineNumberInFile, int errorEndLineNumberInFile);
    [IteratorStateMachineAttribute("Microsoft.Extensions.StackTrace.Sources.ExceptionDetailsProvider/<ReadLines>d__7")]
private static IEnumerable`1<string> ReadLines(IFileInfo fileInfo);
    [CompilerGeneratedAttribute]
private StackFrameSourceCodeInfo <GetDetails>b__3_0(StackFrameInfo frame);
}
internal class Microsoft.Extensions.StackTrace.Sources.MethodDisplayInfo : object {
    [CompilerGeneratedAttribute]
private string <DeclaringTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GenericArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ParameterDisplayInfo> <Parameters>k__BackingField;
    public string DeclaringTypeName { get; public set; }
    public string Name { get; public set; }
    public string GenericArguments { get; public set; }
    public string SubMethod { get; public set; }
    public IEnumerable`1<ParameterDisplayInfo> Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DeclaringTypeName();
    [CompilerGeneratedAttribute]
public void set_DeclaringTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_GenericArguments();
    [CompilerGeneratedAttribute]
public void set_GenericArguments(string value);
    [CompilerGeneratedAttribute]
public string get_SubMethod();
    [CompilerGeneratedAttribute]
public void set_SubMethod(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ParameterDisplayInfo> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(IEnumerable`1<ParameterDisplayInfo> value);
    public virtual string ToString();
}
internal class Microsoft.Extensions.StackTrace.Sources.ParameterDisplayInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public string Name { get; public set; }
    public string Type { get; public set; }
    public string Prefix { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    public virtual string ToString();
}
internal class Microsoft.Extensions.StackTrace.Sources.PortablePdbReader : object {
    private Dictionary`2<string, MetadataReaderProvider> _cache;
    public void PopulateStackFrame(StackFrameInfo frameInfo, MethodBase method, int IlOffset);
    private MetadataReader GetMetadataReader(string assemblyPath);
    private static string GetPdbPath(string assemblyPath);
    private static bool IsPortable(string pdbPath);
    public sealed virtual void Dispose();
}
internal class Microsoft.Extensions.StackTrace.Sources.StackFrameInfo : object {
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private StackFrame <StackFrame>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodDisplayInfo <MethodDisplayInfo>k__BackingField;
    public int LineNumber { get; public set; }
    public string FilePath { get; public set; }
    public StackFrame StackFrame { get; public set; }
    public MethodDisplayInfo MethodDisplayInfo { get; public set; }
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public StackFrame get_StackFrame();
    [CompilerGeneratedAttribute]
public void set_StackFrame(StackFrame value);
    [CompilerGeneratedAttribute]
public MethodDisplayInfo get_MethodDisplayInfo();
    [CompilerGeneratedAttribute]
public void set_MethodDisplayInfo(MethodDisplayInfo value);
}
internal class Microsoft.Extensions.StackTrace.Sources.StackFrameSourceCodeInfo : object {
    [CompilerGeneratedAttribute]
private string <Function>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PreContextLine>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <PreContextCode>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ContextCode>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <PostContextCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorDetails>k__BackingField;
    public string Function { get; public set; }
    public string File { get; public set; }
    public int Line { get; public set; }
    public int PreContextLine { get; public set; }
    public IEnumerable`1<string> PreContextCode { get; public set; }
    public IEnumerable`1<string> ContextCode { get; public set; }
    public IEnumerable`1<string> PostContextCode { get; public set; }
    public string ErrorDetails { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Function();
    [CompilerGeneratedAttribute]
public void set_Function(string value);
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public void set_File(string value);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(int value);
    [CompilerGeneratedAttribute]
public int get_PreContextLine();
    [CompilerGeneratedAttribute]
public void set_PreContextLine(int value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_PreContextCode();
    [CompilerGeneratedAttribute]
public void set_PreContextCode(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ContextCode();
    [CompilerGeneratedAttribute]
public void set_ContextCode(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_PostContextCode();
    [CompilerGeneratedAttribute]
public void set_PostContextCode(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_ErrorDetails();
    [CompilerGeneratedAttribute]
public void set_ErrorDetails(string value);
}
internal class Microsoft.Extensions.StackTrace.Sources.StackTraceHelper : object {
    public static IList`1<StackFrameInfo> GetFrames(Exception exception);
    internal static MethodDisplayInfo GetMethodDisplayString(MethodBase method);
    private static bool ShowInStackTrace(MethodBase method);
    private static bool TryResolveStateMachineMethod(MethodBase& method, Type& declaringType);
    private static bool HasStackTraceHiddenAttribute(MemberInfo memberInfo);
}
