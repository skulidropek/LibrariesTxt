public abstract class Microsoft.AspNetCore.Builder.EndpointBuilder : object {
    [CompilerGeneratedAttribute]
private RequestDelegate <RequestDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<object> <Metadata>k__BackingField;
    public RequestDelegate RequestDelegate { get; public set; }
    public string DisplayName { get; public set; }
    public IList`1<object> Metadata { get; }
    [CompilerGeneratedAttribute]
public RequestDelegate get_RequestDelegate();
    [CompilerGeneratedAttribute]
public void set_RequestDelegate(RequestDelegate value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public IList`1<object> get_Metadata();
    public abstract virtual Endpoint Build();
}
public class Microsoft.AspNetCore.Builder.Extensions.MapMiddleware : object {
    private RequestDelegate _next;
    private MapOptions _options;
    public MapMiddleware(RequestDelegate next, MapOptions options);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Builder.Extensions.MapMiddleware/<Invoke>d__3")]
public Task Invoke(HttpContext context);
}
public class Microsoft.AspNetCore.Builder.Extensions.MapOptions : object {
    [CompilerGeneratedAttribute]
private PathString <PathMatch>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestDelegate <Branch>k__BackingField;
    public PathString PathMatch { get; public set; }
    public RequestDelegate Branch { get; public set; }
    [CompilerGeneratedAttribute]
public PathString get_PathMatch();
    [CompilerGeneratedAttribute]
public void set_PathMatch(PathString value);
    [CompilerGeneratedAttribute]
public RequestDelegate get_Branch();
    [CompilerGeneratedAttribute]
public void set_Branch(RequestDelegate value);
}
public class Microsoft.AspNetCore.Builder.Extensions.MapWhenMiddleware : object {
    private RequestDelegate _next;
    private MapWhenOptions _options;
    public MapWhenMiddleware(RequestDelegate next, MapWhenOptions options);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Builder.Extensions.MapWhenMiddleware/<Invoke>d__3")]
public Task Invoke(HttpContext context);
}
public class Microsoft.AspNetCore.Builder.Extensions.MapWhenOptions : object {
    private Func`2<HttpContext, bool> _predicate;
    [CompilerGeneratedAttribute]
private RequestDelegate <Branch>k__BackingField;
    public Func`2<HttpContext, bool> Predicate { get; public set; }
    public RequestDelegate Branch { get; public set; }
    public Func`2<HttpContext, bool> get_Predicate();
    public void set_Predicate(Func`2<HttpContext, bool> value);
    [CompilerGeneratedAttribute]
public RequestDelegate get_Branch();
    [CompilerGeneratedAttribute]
public void set_Branch(RequestDelegate value);
}
public class Microsoft.AspNetCore.Builder.Extensions.UsePathBaseMiddleware : object {
    private RequestDelegate _next;
    private PathString _pathBase;
    public UsePathBaseMiddleware(RequestDelegate next, PathString pathBase);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Builder.Extensions.UsePathBaseMiddleware/<Invoke>d__3")]
public Task Invoke(HttpContext context);
}
public interface Microsoft.AspNetCore.Builder.IApplicationBuilder {
    public IServiceProvider ApplicationServices { get; public set; }
    public IFeatureCollection ServerFeatures { get; }
    public IDictionary`2<string, object> Properties { get; }
    public abstract virtual IServiceProvider get_ApplicationServices();
    public abstract virtual void set_ApplicationServices(IServiceProvider value);
    public abstract virtual IFeatureCollection get_ServerFeatures();
    public abstract virtual IDictionary`2<string, object> get_Properties();
    public abstract virtual IApplicationBuilder Use(Func`2<RequestDelegate, RequestDelegate> middleware);
    public abstract virtual IApplicationBuilder New();
    public abstract virtual RequestDelegate Build();
}
public interface Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
    public abstract virtual void Add(Action`1<EndpointBuilder> convention);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.MapExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder Map(IApplicationBuilder app, PathString pathMatch, Action`1<IApplicationBuilder> configuration);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.MapWhenExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder MapWhen(IApplicationBuilder app, Func`2<HttpContext, bool> predicate, Action`1<IApplicationBuilder> configuration);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.RunExtensions : object {
    [ExtensionAttribute]
public static void Run(IApplicationBuilder app, RequestDelegate handler);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.UseExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder Use(IApplicationBuilder app, Func`3<HttpContext, Func`1<Task>, Task> middleware);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.UseMiddlewareExtensions : object {
    internal static string InvokeMethodName;
    internal static string InvokeAsyncMethodName;
    private static MethodInfo GetServiceInfo;
    private static UseMiddlewareExtensions();
    [ExtensionAttribute]
public static IApplicationBuilder UseMiddleware(IApplicationBuilder app, Object[] args);
    [ExtensionAttribute]
public static IApplicationBuilder UseMiddleware(IApplicationBuilder app, Type middleware, Object[] args);
    private static IApplicationBuilder UseMiddlewareInterface(IApplicationBuilder app, Type middlewareType);
    private static Func`4<T, HttpContext, IServiceProvider, Task> Compile(MethodInfo methodInfo, ParameterInfo[] parameters);
    private static object GetService(IServiceProvider sp, Type type, Type middleware);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.UsePathBaseExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UsePathBase(IApplicationBuilder app, PathString pathBase);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.UseWhenExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseWhen(IApplicationBuilder app, Func`2<HttpContext, bool> predicate, Action`1<IApplicationBuilder> configuration);
}
public interface Microsoft.AspNetCore.Cors.Infrastructure.ICorsMetadata {
}
internal static class Microsoft.AspNetCore.Http.Abstractions.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string Exception_UseMiddlewareIServiceProviderNotAvailable { get; }
    internal static string Exception_UseMiddlewareNoInvokeMethod { get; }
    internal static string Exception_UseMiddlewareNonTaskReturnType { get; }
    internal static string Exception_UseMiddlewareNoParameters { get; }
    internal static string Exception_UseMiddleMutlipleInvokes { get; }
    internal static string Exception_PathMustStartWithSlash { get; }
    internal static string Exception_InvokeMiddlewareNoService { get; }
    internal static string Exception_InvokeDoesNotSupportRefOrOutParams { get; }
    internal static string Exception_PortMustBeGreaterThanZero { get; }
    internal static string Exception_UseMiddlewareNoMiddlewareFactory { get; }
    internal static string Exception_UseMiddlewareUnableToCreateMiddleware { get; }
    internal static string Exception_UseMiddlewareExplicitArgumentsNotSupported { get; }
    internal static string ArgumentCannotBeNullOrEmpty { get; }
    internal static string RouteValueDictionary_DuplicateKey { get; }
    internal static string RouteValueDictionary_DuplicatePropertyName { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_Exception_UseMiddlewareIServiceProviderNotAvailable();
    internal static string FormatException_UseMiddlewareIServiceProviderNotAvailable(object p0);
    internal static string get_Exception_UseMiddlewareNoInvokeMethod();
    internal static string FormatException_UseMiddlewareNoInvokeMethod(object p0, object p1, object p2);
    internal static string get_Exception_UseMiddlewareNonTaskReturnType();
    internal static string FormatException_UseMiddlewareNonTaskReturnType(object p0, object p1, object p2);
    internal static string get_Exception_UseMiddlewareNoParameters();
    internal static string FormatException_UseMiddlewareNoParameters(object p0, object p1, object p2);
    internal static string get_Exception_UseMiddleMutlipleInvokes();
    internal static string FormatException_UseMiddleMutlipleInvokes(object p0, object p1);
    internal static string get_Exception_PathMustStartWithSlash();
    internal static string FormatException_PathMustStartWithSlash(object p0);
    internal static string get_Exception_InvokeMiddlewareNoService();
    internal static string FormatException_InvokeMiddlewareNoService(object p0, object p1);
    internal static string get_Exception_InvokeDoesNotSupportRefOrOutParams();
    internal static string FormatException_InvokeDoesNotSupportRefOrOutParams(object p0);
    internal static string get_Exception_PortMustBeGreaterThanZero();
    internal static string get_Exception_UseMiddlewareNoMiddlewareFactory();
    internal static string FormatException_UseMiddlewareNoMiddlewareFactory(object p0);
    internal static string get_Exception_UseMiddlewareUnableToCreateMiddleware();
    internal static string FormatException_UseMiddlewareUnableToCreateMiddleware(object p0, object p1);
    internal static string get_Exception_UseMiddlewareExplicitArgumentsNotSupported();
    internal static string FormatException_UseMiddlewareExplicitArgumentsNotSupported(object p0);
    internal static string get_ArgumentCannotBeNullOrEmpty();
    internal static string get_RouteValueDictionary_DuplicateKey();
    internal static string FormatRouteValueDictionary_DuplicateKey(object p0, object p1);
    internal static string get_RouteValueDictionary_DuplicatePropertyName();
    internal static string FormatRouteValueDictionary_DuplicatePropertyName(object p0, object p1, object p2, object p3);
}
public abstract class Microsoft.AspNetCore.Http.ConnectionInfo : object {
    public string Id { get; public set; }
    public IPAddress RemoteIpAddress { get; public set; }
    public int RemotePort { get; public set; }
    public IPAddress LocalIpAddress { get; public set; }
    public int LocalPort { get; public set; }
    public X509Certificate2 ClientCertificate { get; public set; }
    public abstract virtual string get_Id();
    public abstract virtual void set_Id(string value);
    public abstract virtual IPAddress get_RemoteIpAddress();
    public abstract virtual void set_RemoteIpAddress(IPAddress value);
    public abstract virtual int get_RemotePort();
    public abstract virtual void set_RemotePort(int value);
    public abstract virtual IPAddress get_LocalIpAddress();
    public abstract virtual void set_LocalIpAddress(IPAddress value);
    public abstract virtual int get_LocalPort();
    public abstract virtual void set_LocalPort(int value);
    public abstract virtual X509Certificate2 get_ClientCertificate();
    public abstract virtual void set_ClientCertificate(X509Certificate2 value);
    public abstract virtual Task`1<X509Certificate2> GetClientCertificateAsync(CancellationToken cancellationToken);
}
public class Microsoft.AspNetCore.Http.CookieBuilder : object {
    internal static bool SuppressSameSiteNone;
    private string _name;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HttpOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private SameSiteMode <SameSite>k__BackingField;
    [CompilerGeneratedAttribute]
private CookieSecurePolicy <SecurePolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Expiration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <MaxAge>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEssential>k__BackingField;
    public string Name { get; public set; }
    public string Path { get; public set; }
    public string Domain { get; public set; }
    public bool HttpOnly { get; public set; }
    public SameSiteMode SameSite { get; public set; }
    public CookieSecurePolicy SecurePolicy { get; public set; }
    public Nullable`1<TimeSpan> Expiration { get; public set; }
    public Nullable`1<TimeSpan> MaxAge { get; public set; }
    public bool IsEssential { get; public set; }
    private static CookieBuilder();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Path();
    [CompilerGeneratedAttribute]
public virtual void set_Path(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Domain();
    [CompilerGeneratedAttribute]
public virtual void set_Domain(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_HttpOnly();
    [CompilerGeneratedAttribute]
public virtual void set_HttpOnly(bool value);
    [CompilerGeneratedAttribute]
public virtual SameSiteMode get_SameSite();
    [CompilerGeneratedAttribute]
public virtual void set_SameSite(SameSiteMode value);
    [CompilerGeneratedAttribute]
public virtual CookieSecurePolicy get_SecurePolicy();
    [CompilerGeneratedAttribute]
public virtual void set_SecurePolicy(CookieSecurePolicy value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<TimeSpan> get_Expiration();
    [CompilerGeneratedAttribute]
public virtual void set_Expiration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<TimeSpan> get_MaxAge();
    [CompilerGeneratedAttribute]
public virtual void set_MaxAge(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsEssential();
    [CompilerGeneratedAttribute]
public virtual void set_IsEssential(bool value);
    public CookieOptions Build(HttpContext context);
    public virtual CookieOptions Build(HttpContext context, DateTimeOffset expiresFrom);
}
public enum Microsoft.AspNetCore.Http.CookieSecurePolicy : Enum {
    public int value__;
    public static CookieSecurePolicy SameAsRequest;
    public static CookieSecurePolicy Always;
    public static CookieSecurePolicy None;
}
public class Microsoft.AspNetCore.Http.Endpoint : object {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private EndpointMetadataCollection <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestDelegate <RequestDelegate>k__BackingField;
    public string DisplayName { get; }
    public EndpointMetadataCollection Metadata { get; }
    public RequestDelegate RequestDelegate { get; }
    public Endpoint(RequestDelegate requestDelegate, EndpointMetadataCollection metadata, string displayName);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public EndpointMetadataCollection get_Metadata();
    [CompilerGeneratedAttribute]
public RequestDelegate get_RequestDelegate();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Http.EndpointHttpContextExtensions : object {
    [ExtensionAttribute]
public static Endpoint GetEndpoint(HttpContext context);
    [ExtensionAttribute]
public static void SetEndpoint(HttpContext context, Endpoint endpoint);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Http.EndpointMetadataCollection : object {
    public static EndpointMetadataCollection Empty;
    private Object[] _items;
    private ConcurrentDictionary`2<Type, Object[]> _cache;
    public object Item { get; }
    public int Count { get; }
    public EndpointMetadataCollection(IEnumerable`1<object> items);
    public EndpointMetadataCollection(Object[] items);
    private static EndpointMetadataCollection();
    public sealed virtual object get_Item(int index);
    public sealed virtual int get_Count();
    public T GetMetadata();
    private T GetMetadataSlow();
    public IReadOnlyList`1<T> GetOrderedMetadata();
    private T[] GetOrderedMetadataSlow();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public interface Microsoft.AspNetCore.Http.Features.IEndpointFeature {
    public Endpoint Endpoint { get; public set; }
    public abstract virtual Endpoint get_Endpoint();
    public abstract virtual void set_Endpoint(Endpoint value);
}
public interface Microsoft.AspNetCore.Http.Features.IRouteValuesFeature {
    public RouteValueDictionary RouteValues { get; public set; }
    public abstract virtual RouteValueDictionary get_RouteValues();
    public abstract virtual void set_RouteValues(RouteValueDictionary value);
}
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Http.FragmentString : ValueType {
    public static FragmentString Empty;
    private string _value;
    public string Value { get; }
    public bool HasValue { get; }
    public FragmentString(string value);
    private static FragmentString();
    public string get_Value();
    public bool get_HasValue();
    public virtual string ToString();
    public string ToUriComponent();
    public static FragmentString FromUriComponent(string uriComponent);
    public static FragmentString FromUriComponent(Uri uri);
    public sealed virtual bool Equals(FragmentString other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(FragmentString left, FragmentString right);
    public static bool op_Inequality(FragmentString left, FragmentString right);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Http.HeaderDictionaryExtensions : object {
    [ExtensionAttribute]
public static void Append(IHeaderDictionary headers, string key, StringValues value);
    [ExtensionAttribute]
public static void AppendCommaSeparatedValues(IHeaderDictionary headers, string key, String[] values);
    [ExtensionAttribute]
public static String[] GetCommaSeparatedValues(IHeaderDictionary headers, string key);
    [ExtensionAttribute]
public static void SetCommaSeparatedValues(IHeaderDictionary headers, string key, String[] values);
}
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.Http.HeaderSegment : ValueType {
    private StringSegment _formatting;
    private StringSegment _data;
    public StringSegment Formatting { get; }
    public StringSegment Data { get; }
    public HeaderSegment(StringSegment formatting, StringSegment data);
    public StringSegment get_Formatting();
    public StringSegment get_Data();
    public sealed virtual bool Equals(HeaderSegment other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(HeaderSegment left, HeaderSegment right);
    public static bool op_Inequality(HeaderSegment left, HeaderSegment right);
}
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.Http.HeaderSegmentCollection : ValueType {
    private StringValues _headers;
    public HeaderSegmentCollection(StringValues headers);
    public sealed virtual bool Equals(HeaderSegmentCollection other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(HeaderSegmentCollection left, HeaderSegmentCollection right);
    public static bool op_Inequality(HeaderSegmentCollection left, HeaderSegmentCollection right);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<HeaderSegment> System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Http.HeaderSegment>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Http.HostString : ValueType {
    private string _value;
    public string Value { get; }
    public bool HasValue { get; }
    public string Host { get; }
    public Nullable`1<int> Port { get; }
    public HostString(string value);
    public HostString(string host, int port);
    public string get_Value();
    public bool get_HasValue();
    public string get_Host();
    public Nullable`1<int> get_Port();
    public virtual string ToString();
    public string ToUriComponent();
    public static HostString FromUriComponent(string uriComponent);
    public static HostString FromUriComponent(Uri uri);
    public static bool MatchesAny(StringSegment value, IList`1<StringSegment> patterns);
    public sealed virtual bool Equals(HostString other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(HostString left, HostString right);
    public static bool op_Inequality(HostString left, HostString right);
    private static void GetParts(StringSegment value, StringSegment& host, StringSegment& port);
}
internal class Microsoft.AspNetCore.Http.HostStringHelper : object {
    private static Boolean[] SafeHostStringChars;
    private static HostStringHelper();
    public static bool IsSafeHostStringChar(char c);
}
public abstract class Microsoft.AspNetCore.Http.HttpContext : object {
    public IFeatureCollection Features { get; }
    public HttpRequest Request { get; }
    public HttpResponse Response { get; }
    public ConnectionInfo Connection { get; }
    public WebSocketManager WebSockets { get; }
    public ClaimsPrincipal User { get; public set; }
    public IDictionary`2<object, object> Items { get; public set; }
    public IServiceProvider RequestServices { get; public set; }
    public CancellationToken RequestAborted { get; public set; }
    public string TraceIdentifier { get; public set; }
    public ISession Session { get; public set; }
    public abstract virtual IFeatureCollection get_Features();
    public abstract virtual HttpRequest get_Request();
    public abstract virtual HttpResponse get_Response();
    public abstract virtual ConnectionInfo get_Connection();
    public abstract virtual WebSocketManager get_WebSockets();
    public abstract virtual ClaimsPrincipal get_User();
    public abstract virtual void set_User(ClaimsPrincipal value);
    public abstract virtual IDictionary`2<object, object> get_Items();
    public abstract virtual void set_Items(IDictionary`2<object, object> value);
    public abstract virtual IServiceProvider get_RequestServices();
    public abstract virtual void set_RequestServices(IServiceProvider value);
    public abstract virtual CancellationToken get_RequestAborted();
    public abstract virtual void set_RequestAborted(CancellationToken value);
    public abstract virtual string get_TraceIdentifier();
    public abstract virtual void set_TraceIdentifier(string value);
    public abstract virtual ISession get_Session();
    public abstract virtual void set_Session(ISession value);
    public abstract virtual void Abort();
}
public static class Microsoft.AspNetCore.Http.HttpMethods : object {
    public static string Connect;
    public static string Delete;
    public static string Get;
    public static string Head;
    public static string Options;
    public static string Patch;
    public static string Post;
    public static string Put;
    public static string Trace;
    private static HttpMethods();
    public static bool IsConnect(string method);
    public static bool IsDelete(string method);
    public static bool IsGet(string method);
    public static bool IsHead(string method);
    public static bool IsOptions(string method);
    public static bool IsPatch(string method);
    public static bool IsPost(string method);
    public static bool IsPut(string method);
    public static bool IsTrace(string method);
}
public abstract class Microsoft.AspNetCore.Http.HttpRequest : object {
    [CompilerGeneratedAttribute]
private RouteValueDictionary <RouteValues>k__BackingField;
    public HttpContext HttpContext { get; }
    public string Method { get; public set; }
    public string Scheme { get; public set; }
    public bool IsHttps { get; public set; }
    public HostString Host { get; public set; }
    public PathString PathBase { get; public set; }
    public PathString Path { get; public set; }
    public QueryString QueryString { get; public set; }
    public IQueryCollection Query { get; public set; }
    public string Protocol { get; public set; }
    public IHeaderDictionary Headers { get; }
    public IRequestCookieCollection Cookies { get; public set; }
    public Nullable`1<long> ContentLength { get; public set; }
    public string ContentType { get; public set; }
    public Stream Body { get; public set; }
    public PipeReader BodyReader { get; }
    public bool HasFormContentType { get; }
    public IFormCollection Form { get; public set; }
    public RouteValueDictionary RouteValues { get; public set; }
    public abstract virtual HttpContext get_HttpContext();
    public abstract virtual string get_Method();
    public abstract virtual void set_Method(string value);
    public abstract virtual string get_Scheme();
    public abstract virtual void set_Scheme(string value);
    public abstract virtual bool get_IsHttps();
    public abstract virtual void set_IsHttps(bool value);
    public abstract virtual HostString get_Host();
    public abstract virtual void set_Host(HostString value);
    public abstract virtual PathString get_PathBase();
    public abstract virtual void set_PathBase(PathString value);
    public abstract virtual PathString get_Path();
    public abstract virtual void set_Path(PathString value);
    public abstract virtual QueryString get_QueryString();
    public abstract virtual void set_QueryString(QueryString value);
    public abstract virtual IQueryCollection get_Query();
    public abstract virtual void set_Query(IQueryCollection value);
    public abstract virtual string get_Protocol();
    public abstract virtual void set_Protocol(string value);
    public abstract virtual IHeaderDictionary get_Headers();
    public abstract virtual IRequestCookieCollection get_Cookies();
    public abstract virtual void set_Cookies(IRequestCookieCollection value);
    public abstract virtual Nullable`1<long> get_ContentLength();
    public abstract virtual void set_ContentLength(Nullable`1<long> value);
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
    public abstract virtual Stream get_Body();
    public abstract virtual void set_Body(Stream value);
    public virtual PipeReader get_BodyReader();
    public abstract virtual bool get_HasFormContentType();
    public abstract virtual IFormCollection get_Form();
    public abstract virtual void set_Form(IFormCollection value);
    public abstract virtual Task`1<IFormCollection> ReadFormAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public virtual RouteValueDictionary get_RouteValues();
    [CompilerGeneratedAttribute]
public virtual void set_RouteValues(RouteValueDictionary value);
}
public abstract class Microsoft.AspNetCore.Http.HttpResponse : object {
    private static Func`2<object, Task> _callbackDelegate;
    private static Func`2<object, Task> _disposeDelegate;
    private static Func`2<object, Task> _disposeAsyncDelegate;
    public HttpContext HttpContext { get; }
    public int StatusCode { get; public set; }
    public IHeaderDictionary Headers { get; }
    public Stream Body { get; public set; }
    public PipeWriter BodyWriter { get; }
    public Nullable`1<long> ContentLength { get; public set; }
    public string ContentType { get; public set; }
    public IResponseCookies Cookies { get; }
    public bool HasStarted { get; }
    private static HttpResponse();
    public abstract virtual HttpContext get_HttpContext();
    public abstract virtual int get_StatusCode();
    public abstract virtual void set_StatusCode(int value);
    public abstract virtual IHeaderDictionary get_Headers();
    public abstract virtual Stream get_Body();
    public abstract virtual void set_Body(Stream value);
    public virtual PipeWriter get_BodyWriter();
    public abstract virtual Nullable`1<long> get_ContentLength();
    public abstract virtual void set_ContentLength(Nullable`1<long> value);
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
    public abstract virtual IResponseCookies get_Cookies();
    public abstract virtual bool get_HasStarted();
    public abstract virtual void OnStarting(Func`2<object, Task> callback, object state);
    public virtual void OnStarting(Func`1<Task> callback);
    public abstract virtual void OnCompleted(Func`2<object, Task> callback, object state);
    public virtual void RegisterForDispose(IDisposable disposable);
    public virtual void RegisterForDisposeAsync(IAsyncDisposable disposable);
    public virtual void OnCompleted(Func`1<Task> callback);
    public virtual void Redirect(string location);
    public abstract virtual void Redirect(string location, bool permanent);
    public virtual Task StartAsync(CancellationToken cancellationToken);
    public virtual Task CompleteAsync();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Http.HttpResponseWritingExtensions : object {
    private static int UTF8MaxByteLength;
    [ExtensionAttribute]
public static Task WriteAsync(HttpResponse response, string text, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task WriteAsync(HttpResponse response, string text, Encoding encoding, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.HttpResponseWritingExtensions/<StartAndWriteAsyncAwaited>d__3")]
[ExtensionAttribute]
private static Task StartAndWriteAsyncAwaited(HttpResponse response, string text, Encoding encoding, CancellationToken cancellationToken, Task startAsyncTask);
    [ExtensionAttribute]
private static void Write(HttpResponse response, string text, Encoding encoding);
    private static int GetEncodingMaxByteSize(Encoding encoding);
    private static void WriteMultiSegmentEncoded(PipeWriter writer, string text, Encoding encoding, Span`1<byte> destination, int encodedLength, int minimumByteSize);
}
public interface Microsoft.AspNetCore.Http.IHttpContextAccessor {
    public HttpContext HttpContext { get; public set; }
    public abstract virtual HttpContext get_HttpContext();
    public abstract virtual void set_HttpContext(HttpContext value);
}
public interface Microsoft.AspNetCore.Http.IHttpContextFactory {
    public abstract virtual HttpContext Create(IFeatureCollection featureCollection);
    public abstract virtual void Dispose(HttpContext httpContext);
}
public interface Microsoft.AspNetCore.Http.IMiddleware {
    public abstract virtual Task InvokeAsync(HttpContext context, RequestDelegate next);
}
public interface Microsoft.AspNetCore.Http.IMiddlewareFactory {
    public abstract virtual IMiddleware Create(Type middlewareType);
    public abstract virtual void Release(IMiddleware middleware);
}
internal static class Microsoft.AspNetCore.Http.ParsingHelpers : object {
    public static StringValues GetHeader(IHeaderDictionary headers, string key);
    public static StringValues GetHeaderSplit(IHeaderDictionary headers, string key);
    public static StringValues GetHeaderUnmodified(IHeaderDictionary headers, string key);
    public static void SetHeaderJoined(IHeaderDictionary headers, string key, StringValues value);
    private static string QuoteIfNeeded(string value);
    private static string DeQuote(string value);
    public static void SetHeaderUnmodified(IHeaderDictionary headers, string key, Nullable`1<StringValues> values);
    public static void AppendHeaderJoined(IHeaderDictionary headers, string key, String[] values);
    public static void AppendHeaderUnmodified(IHeaderDictionary headers, string key, StringValues values);
}
[IsReadOnlyAttribute]
[TypeConverterAttribute("Microsoft.AspNetCore.Http.PathStringConverter")]
public class Microsoft.AspNetCore.Http.PathString : ValueType {
    public static PathString Empty;
    private string _value;
    public string Value { get; }
    public bool HasValue { get; }
    public PathString(string value);
    private static PathString();
    public string get_Value();
    public bool get_HasValue();
    public virtual string ToString();
    public string ToUriComponent();
    private static string ToEscapedUriComponent(string value, int i);
    public static PathString FromUriComponent(string uriComponent);
    public static PathString FromUriComponent(Uri uri);
    public bool StartsWithSegments(PathString other);
    public bool StartsWithSegments(PathString other, StringComparison comparisonType);
    public bool StartsWithSegments(PathString other, PathString& remaining);
    public bool StartsWithSegments(PathString other, StringComparison comparisonType, PathString& remaining);
    public bool StartsWithSegments(PathString other, PathString& matched, PathString& remaining);
    public bool StartsWithSegments(PathString other, StringComparison comparisonType, PathString& matched, PathString& remaining);
    public PathString Add(PathString other);
    public string Add(QueryString other);
    public sealed virtual bool Equals(PathString other);
    public bool Equals(PathString other, StringComparison comparisonType);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(PathString left, PathString right);
    public static bool op_Inequality(PathString left, PathString right);
    public static string op_Addition(string left, PathString right);
    public static string op_Addition(PathString left, string right);
    public static PathString op_Addition(PathString left, PathString right);
    public static string op_Addition(PathString left, QueryString right);
    public static PathString op_Implicit(string s);
    public static string op_Implicit(PathString path);
    internal static PathString ConvertFromString(string s);
}
internal class Microsoft.AspNetCore.Http.PathStringConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal static class Microsoft.AspNetCore.Http.PathStringHelper : object {
    private static UInt32[] ValidPathChars;
    private static PathStringHelper();
    public static bool IsValidPathChar(char c);
    public static bool IsPercentEncodedChar(string str, int index);
    private static bool AreFollowingTwoCharsHex(string str, int index);
    private static bool IsHexadecimalChar(char c);
}
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Http.QueryString : ValueType {
    public static QueryString Empty;
    private string _value;
    public string Value { get; }
    public bool HasValue { get; }
    public QueryString(string value);
    private static QueryString();
    public string get_Value();
    public bool get_HasValue();
    public virtual string ToString();
    public string ToUriComponent();
    public static QueryString FromUriComponent(string uriComponent);
    public static QueryString FromUriComponent(Uri uri);
    public static QueryString Create(string name, string value);
    public static QueryString Create(IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    public static QueryString Create(IEnumerable`1<KeyValuePair`2<string, StringValues>> parameters);
    public QueryString Add(QueryString other);
    public QueryString Add(string name, string value);
    public sealed virtual bool Equals(QueryString other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(QueryString left, QueryString right);
    public static bool op_Inequality(QueryString left, QueryString right);
    public static QueryString op_Addition(QueryString left, QueryString right);
    private static void AppendKeyValuePair(StringBuilder builder, string key, string value, bool first);
}
public class Microsoft.AspNetCore.Http.RequestDelegate : MulticastDelegate {
    public RequestDelegate(object object, IntPtr method);
    public virtual Task Invoke(HttpContext context);
    public virtual IAsyncResult BeginInvoke(HttpContext context, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Http.RequestTrailerExtensions : object {
    [ExtensionAttribute]
public static StringValues GetDeclaredTrailers(HttpRequest request);
    [ExtensionAttribute]
public static bool SupportsTrailers(HttpRequest request);
    [ExtensionAttribute]
public static bool CheckTrailersAvailable(HttpRequest request);
    [ExtensionAttribute]
public static StringValues GetTrailer(HttpRequest request, string trailerName);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Http.ResponseTrailerExtensions : object {
    [ExtensionAttribute]
public static void DeclareTrailer(HttpResponse response, string trailerName);
    [ExtensionAttribute]
public static bool SupportsTrailers(HttpResponse response);
    [ExtensionAttribute]
public static void AppendTrailer(HttpResponse response, string trailerName, StringValues trailerValues);
}
public static class Microsoft.AspNetCore.Http.StatusCodes : object {
    public static int Status100Continue;
    public static int Status101SwitchingProtocols;
    public static int Status102Processing;
    public static int Status200OK;
    public static int Status201Created;
    public static int Status202Accepted;
    public static int Status203NonAuthoritative;
    public static int Status204NoContent;
    public static int Status205ResetContent;
    public static int Status206PartialContent;
    public static int Status207MultiStatus;
    public static int Status208AlreadyReported;
    public static int Status226IMUsed;
    public static int Status300MultipleChoices;
    public static int Status301MovedPermanently;
    public static int Status302Found;
    public static int Status303SeeOther;
    public static int Status304NotModified;
    public static int Status305UseProxy;
    public static int Status306SwitchProxy;
    public static int Status307TemporaryRedirect;
    public static int Status308PermanentRedirect;
    public static int Status400BadRequest;
    public static int Status401Unauthorized;
    public static int Status402PaymentRequired;
    public static int Status403Forbidden;
    public static int Status404NotFound;
    public static int Status405MethodNotAllowed;
    public static int Status406NotAcceptable;
    public static int Status407ProxyAuthenticationRequired;
    public static int Status408RequestTimeout;
    public static int Status409Conflict;
    public static int Status410Gone;
    public static int Status411LengthRequired;
    public static int Status412PreconditionFailed;
    public static int Status413RequestEntityTooLarge;
    public static int Status413PayloadTooLarge;
    public static int Status414RequestUriTooLong;
    public static int Status414UriTooLong;
    public static int Status415UnsupportedMediaType;
    public static int Status416RequestedRangeNotSatisfiable;
    public static int Status416RangeNotSatisfiable;
    public static int Status417ExpectationFailed;
    public static int Status418ImATeapot;
    public static int Status419AuthenticationTimeout;
    public static int Status421MisdirectedRequest;
    public static int Status422UnprocessableEntity;
    public static int Status423Locked;
    public static int Status424FailedDependency;
    public static int Status426UpgradeRequired;
    public static int Status428PreconditionRequired;
    public static int Status429TooManyRequests;
    public static int Status431RequestHeaderFieldsTooLarge;
    public static int Status451UnavailableForLegalReasons;
    public static int Status500InternalServerError;
    public static int Status501NotImplemented;
    public static int Status502BadGateway;
    public static int Status503ServiceUnavailable;
    public static int Status504GatewayTimeout;
    public static int Status505HttpVersionNotsupported;
    public static int Status506VariantAlsoNegotiates;
    public static int Status507InsufficientStorage;
    public static int Status508LoopDetected;
    public static int Status510NotExtended;
    public static int Status511NetworkAuthenticationRequired;
}
public abstract class Microsoft.AspNetCore.Http.WebSocketManager : object {
    public bool IsWebSocketRequest { get; }
    public IList`1<string> WebSocketRequestedProtocols { get; }
    public abstract virtual bool get_IsWebSocketRequest();
    public abstract virtual IList`1<string> get_WebSocketRequestedProtocols();
    public virtual Task`1<WebSocket> AcceptWebSocketAsync();
    public abstract virtual Task`1<WebSocket> AcceptWebSocketAsync(string subProtocol);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Routing.RouteValueDictionary : object {
    private static int DefaultCapacity;
    internal KeyValuePair`2[] _arrayStorage;
    internal PropertyStorage _propertyStorage;
    private int _count;
    public object Item { get; public set; }
    public IEqualityComparer`1<string> Comparer { get; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly { get; }
    public ICollection`1<string> Keys { get; }
    private IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.Keys { get; }
    public ICollection`1<object> Values { get; }
    private IEnumerable`1<object> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.Values { get; }
    public RouteValueDictionary(object values);
    public static RouteValueDictionary FromArray(KeyValuePair`2[] items);
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public IEqualityComparer`1<string> get_Comparer();
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_IsReadOnly();
    public sealed virtual ICollection`1<string> get_Keys();
    private sealed virtual override IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.get_Keys();
    public sealed virtual ICollection`1<object> get_Values();
    private sealed virtual override IEnumerable`1<object> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Add(string key, object value);
    public sealed virtual void Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(KeyValuePair`2<string, object> item);
    public sealed virtual bool ContainsKey(string key);
    private bool ContainsKeyCore(string key);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(KeyValuePair`2<string, object> item);
    public sealed virtual bool Remove(string key);
    public bool Remove(string key, Object& value);
    public bool TryAdd(string key, object value);
    public sealed virtual bool TryGetValue(string key, Object& value);
    private bool TryGetValueSlow(string key, Object& value);
    private static void ThrowArgumentNullExceptionForKey();
    private void EnsureCapacity(int capacity);
    private void EnsureCapacitySlow(int capacity);
    private int FindIndex(string key);
    private bool TryFindItem(string key, Object& value);
    private bool ContainsKeyArray(string key);
    private bool ContainsKeyProperties(string key);
}
internal static class Microsoft.Extensions.Internal.ActivatorUtilities : object {
    private static MethodInfo GetServiceInfo;
    private static ActivatorUtilities();
    public static object CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters);
    public static ObjectFactory CreateFactory(Type instanceType, Type[] argumentTypes);
    public static T CreateInstance(IServiceProvider provider, Object[] parameters);
    public static T GetServiceOrCreateInstance(IServiceProvider provider);
    public static object GetServiceOrCreateInstance(IServiceProvider provider, Type type);
    private static MethodInfo GetMethodInfo(Expression`1<T> expr);
    private static object GetService(IServiceProvider sp, Type type, Type requiredBy, bool isDefaultParameterRequired);
    private static Expression BuildFactoryExpression(ConstructorInfo constructor, Nullable`1[] parameterMap, Expression serviceProvider, Expression factoryArgumentArray);
    private static void FindApplicableConstructor(Type instanceType, Type[] argumentTypes, ConstructorInfo& matchingConstructor, Nullable`1[]& parameterMap);
    private static bool TryFindMatchingConstructor(Type instanceType, Type[] argumentTypes, ConstructorInfo& matchingConstructor, Nullable`1[]& parameterMap);
    private static bool TryFindPreferredConstructor(Type instanceType, Type[] argumentTypes, ConstructorInfo& matchingConstructor, Nullable`1[]& parameterMap);
    private static bool TryCreateParameterMap(ParameterInfo[] constructorParameters, Type[] argumentTypes, Nullable`1[]& parameterMap);
    private static void ThrowMultipleCtorsMarkedWithAttributeException();
    private static void ThrowMarkedCtorDoesNotTakeAllProvidedArguments();
}
internal class Microsoft.Extensions.Internal.ActivatorUtilitiesConstructorAttribute : Attribute {
}
internal class Microsoft.Extensions.Internal.ObjectFactory : MulticastDelegate {
    public ObjectFactory(object object, IntPtr method);
    public virtual object Invoke(IServiceProvider serviceProvider, Object[] arguments);
    public virtual IAsyncResult BeginInvoke(IServiceProvider serviceProvider, Object[] arguments, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Extensions.Internal.ParameterDefaultValue : object {
    private static Type _nullable;
    private static ParameterDefaultValue();
    public static bool TryGetDefaultValue(ParameterInfo parameter, Object& defaultValue);
}
internal class Microsoft.Extensions.Internal.PropertyHelper : object {
    private static MethodInfo CallPropertyGetterOpenGenericMethod;
    private static MethodInfo CallPropertyGetterByReferenceOpenGenericMethod;
    private static MethodInfo CallNullSafePropertyGetterOpenGenericMethod;
    private static MethodInfo CallNullSafePropertyGetterByReferenceOpenGenericMethod;
    private static MethodInfo CallPropertySetterOpenGenericMethod;
    private static ConcurrentDictionary`2<Type, PropertyHelper[]> PropertiesCache;
    private static ConcurrentDictionary`2<Type, PropertyHelper[]> VisiblePropertiesCache;
    private static Type IsByRefLikeAttribute;
    private Action`2<object, object> _valueSetter;
    private Func`2<object, object> _valueGetter;
    [CompilerGeneratedAttribute]
private PropertyInfo <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public PropertyInfo Property { get; }
    public string Name { get; protected set; }
    public Func`2<object, object> ValueGetter { get; }
    public Action`2<object, object> ValueSetter { get; }
    public PropertyHelper(PropertyInfo property);
    private static PropertyHelper();
    [CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected virtual void set_Name(string value);
    public Func`2<object, object> get_ValueGetter();
    public Action`2<object, object> get_ValueSetter();
    public object GetValue(object instance);
    public void SetValue(object instance, object value);
    public static PropertyHelper[] GetProperties(TypeInfo typeInfo);
    public static PropertyHelper[] GetProperties(Type type);
    public static PropertyHelper[] GetVisibleProperties(TypeInfo typeInfo);
    public static PropertyHelper[] GetVisibleProperties(Type type);
    public static Func`2<object, object> MakeFastPropertyGetter(PropertyInfo propertyInfo);
    public static Func`2<object, object> MakeNullSafeFastPropertyGetter(PropertyInfo propertyInfo);
    private static Func`2<object, object> MakeFastPropertyGetter(PropertyInfo propertyInfo, MethodInfo propertyGetterWrapperMethod, MethodInfo propertyGetterByRefWrapperMethod);
    private static Func`2<object, object> MakeFastPropertyGetter(Type openGenericDelegateType, MethodInfo propertyGetMethod, MethodInfo openGenericWrapperMethod);
    public static Action`2<object, object> MakeFastPropertySetter(PropertyInfo propertyInfo);
    public static IDictionary`2<string, object> ObjectToDictionary(object value);
    private static PropertyHelper CreateInstance(PropertyInfo property);
    private static object CallPropertyGetter(Func`2<TDeclaringType, TValue> getter, object target);
    private static object CallPropertyGetterByReference(ByRefFunc`2<TDeclaringType, TValue> getter, object target);
    private static object CallNullSafePropertyGetter(Func`2<TDeclaringType, TValue> getter, object target);
    private static object CallNullSafePropertyGetterByReference(ByRefFunc`2<TDeclaringType, TValue> getter, object target);
    private static void CallPropertySetter(Action`2<TDeclaringType, TValue> setter, object target, object value);
    protected static PropertyHelper[] GetVisibleProperties(Type type, Func`2<PropertyInfo, PropertyHelper> createPropertyHelper, ConcurrentDictionary`2<Type, PropertyHelper[]> allPropertiesCache, ConcurrentDictionary`2<Type, PropertyHelper[]> visiblePropertiesCache);
    protected static PropertyHelper[] GetProperties(Type type, Func`2<PropertyInfo, PropertyHelper> createPropertyHelper, ConcurrentDictionary`2<Type, PropertyHelper[]> cache);
    private static bool IsInterestingProperty(PropertyInfo property);
    private static bool IsRefStructProperty(PropertyInfo property);
}
