public class Microsoft.AspNetCore.Http.Connections.AvailableTransport : object {
    [CompilerGeneratedAttribute]
private string <Transport>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <TransferFormats>k__BackingField;
    public string Transport { get; public set; }
    public IList`1<string> TransferFormats { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Transport();
    [CompilerGeneratedAttribute]
public void set_Transport(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_TransferFormats();
    [CompilerGeneratedAttribute]
public void set_TransferFormats(IList`1<string> value);
}
public static class Microsoft.AspNetCore.Http.Connections.HttpTransports : object {
    public static HttpTransportType All;
    private static HttpTransports();
}
[FlagsAttribute]
public enum Microsoft.AspNetCore.Http.Connections.HttpTransportType : Enum {
    public int value__;
    public static HttpTransportType None;
    public static HttpTransportType WebSockets;
    public static HttpTransportType ServerSentEvents;
    public static HttpTransportType LongPolling;
}
public static class Microsoft.AspNetCore.Http.Connections.NegotiateProtocol : object {
    private static string ConnectionIdPropertyName;
    private static JsonEncodedText ConnectionIdPropertyNameBytes;
    private static string ConnectionTokenPropertyName;
    private static JsonEncodedText ConnectionTokenPropertyNameBytes;
    private static string UrlPropertyName;
    private static JsonEncodedText UrlPropertyNameBytes;
    private static string AccessTokenPropertyName;
    private static JsonEncodedText AccessTokenPropertyNameBytes;
    private static string AvailableTransportsPropertyName;
    private static JsonEncodedText AvailableTransportsPropertyNameBytes;
    private static string TransportPropertyName;
    private static JsonEncodedText TransportPropertyNameBytes;
    private static string TransferFormatsPropertyName;
    private static JsonEncodedText TransferFormatsPropertyNameBytes;
    private static string ErrorPropertyName;
    private static JsonEncodedText ErrorPropertyNameBytes;
    private static string NegotiateVersionPropertyName;
    private static JsonEncodedText NegotiateVersionPropertyNameBytes;
    private static ReadOnlySpan`1<byte> ProtocolVersionPropertyNameBytes { get; }
    private static NegotiateProtocol();
    private static ReadOnlySpan`1<byte> get_ProtocolVersionPropertyNameBytes();
    public static void WriteResponse(NegotiationResponse response, IBufferWriter`1<byte> output);
    public static NegotiationResponse ParseResponse(ReadOnlySpan`1<byte> content);
    [ObsoleteAttribute("This method is obsolete and will be removed in a future version. The recommended alternative is ParseResponse(ReadOnlySpan{byte}).")]
public static NegotiationResponse ParseResponse(Stream content);
    private static AvailableTransport ParseAvailableTransport(Utf8JsonReader& reader);
}
public class Microsoft.AspNetCore.Http.Connections.NegotiationResponse : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionToken>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<AvailableTransport> <AvailableTransports>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    public string Url { get; public set; }
    public string AccessToken { get; public set; }
    public string ConnectionId { get; public set; }
    public string ConnectionToken { get; public set; }
    public int Version { get; public set; }
    public IList`1<AvailableTransport> AvailableTransports { get; public set; }
    public string Error { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
public void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectionId();
    [CompilerGeneratedAttribute]
public void set_ConnectionId(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectionToken();
    [CompilerGeneratedAttribute]
public void set_ConnectionToken(string value);
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(int value);
    [CompilerGeneratedAttribute]
public IList`1<AvailableTransport> get_AvailableTransports();
    [CompilerGeneratedAttribute]
public void set_AvailableTransports(IList`1<AvailableTransport> value);
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
}
internal class Microsoft.AspNetCore.Internal.ReusableUtf8JsonWriter : object {
    [ThreadStaticAttribute]
private static ReusableUtf8JsonWriter _cachedInstance;
    private Utf8JsonWriter _writer;
    public ReusableUtf8JsonWriter(IBufferWriter`1<byte> stream);
    public static ReusableUtf8JsonWriter Get(IBufferWriter`1<byte> stream);
    public static void Return(ReusableUtf8JsonWriter writer);
    public Utf8JsonWriter GetJsonWriter();
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Internal.SystemTextJsonExtensions : object {
    [ExtensionAttribute]
public static bool CheckRead(Utf8JsonReader& reader);
    [ExtensionAttribute]
public static void EnsureObjectStart(Utf8JsonReader& reader);
    [ExtensionAttribute]
public static string GetTokenString(Utf8JsonReader& reader);
    public static string GetTokenString(JsonTokenType tokenType);
    [ExtensionAttribute]
public static void EnsureArrayStart(Utf8JsonReader& reader);
    [ExtensionAttribute]
public static bool ReadAsBoolean(Utf8JsonReader& reader, string propertyName);
    [ExtensionAttribute]
public static string ReadAsString(Utf8JsonReader& reader, string propertyName);
    [ExtensionAttribute]
public static Nullable`1<int> ReadAsInt32(Utf8JsonReader& reader, string propertyName);
}
internal class Microsoft.AspNetCore.Internal.Utf8BufferTextWriter : TextWriter {
    private static UTF8Encoding _utf8NoBom;
    private static int MaximumBytesPerUtf8Char;
    [ThreadStaticAttribute]
private static Utf8BufferTextWriter _cachedInstance;
    private Encoder _encoder;
    private IBufferWriter`1<byte> _bufferWriter;
    private Memory`1<byte> _memory;
    private int _memoryUsed;
    public Encoding Encoding { get; }
    private static Utf8BufferTextWriter();
    public virtual Encoding get_Encoding();
    public static Utf8BufferTextWriter Get(IBufferWriter`1<byte> bufferWriter);
    public static void Return(Utf8BufferTextWriter writer);
    public void SetWriter(IBufferWriter`1<byte> bufferWriter);
    public virtual void Write(Char[] buffer, int index, int count);
    public virtual void Write(Char[] buffer);
    public virtual void Write(char value);
    private void WriteMultiByteChar(char value);
    public virtual void Write(string value);
    private Span`1<byte> GetBuffer();
    private void EnsureBuffer();
    private void WriteInternal(ReadOnlySpan`1<char> buffer);
    public virtual void Flush();
    protected virtual void Dispose(bool disposing);
}
