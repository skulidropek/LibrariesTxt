[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.HstsBuilderExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseHsts(IApplicationBuilder app);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.HstsServicesExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddHsts(IServiceCollection services, Action`1<HstsOptions> configureOptions);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.HttpsPolicyBuilderExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseHttpsRedirection(IApplicationBuilder app);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.HttpsRedirectionServicesExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddHttpsRedirection(IServiceCollection services, Action`1<HttpsRedirectionOptions> configureOptions);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.HttpsPolicy.HstsLoggingExtensions : object {
    private static Action`2<ILogger, Exception> _notSecure;
    private static Action`3<ILogger, string, Exception> _excludedHost;
    private static Action`2<ILogger, Exception> _addingHstsHeader;
    private static HstsLoggingExtensions();
    [ExtensionAttribute]
public static void SkippingInsecure(ILogger logger);
    [ExtensionAttribute]
public static void SkippingExcludedHost(ILogger logger, string host);
    [ExtensionAttribute]
public static void AddingHstsHeader(ILogger logger);
}
public class Microsoft.AspNetCore.HttpsPolicy.HstsMiddleware : object {
    private static string IncludeSubDomains;
    private static string Preload;
    private RequestDelegate _next;
    private StringValues _strictTransportSecurityValue;
    private IList`1<string> _excludedHosts;
    private ILogger _logger;
    public HstsMiddleware(RequestDelegate next, IOptions`1<HstsOptions> options, ILoggerFactory loggerFactory);
    public HstsMiddleware(RequestDelegate next, IOptions`1<HstsOptions> options);
    public Task Invoke(HttpContext context);
    private bool IsHostExcluded(string host);
}
public class Microsoft.AspNetCore.HttpsPolicy.HstsOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <MaxAge>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeSubDomains>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Preload>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ExcludedHosts>k__BackingField;
    public TimeSpan MaxAge { get; public set; }
    public bool IncludeSubDomains { get; public set; }
    public bool Preload { get; public set; }
    public IList`1<string> ExcludedHosts { get; }
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxAge();
    [CompilerGeneratedAttribute]
public void set_MaxAge(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_IncludeSubDomains();
    [CompilerGeneratedAttribute]
public void set_IncludeSubDomains(bool value);
    [CompilerGeneratedAttribute]
public bool get_Preload();
    [CompilerGeneratedAttribute]
public void set_Preload(bool value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ExcludedHosts();
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.HttpsPolicy.HttpsLoggingExtensions : object {
    private static Action`3<ILogger, string, Exception> _redirectingToHttps;
    private static Action`3<ILogger, int, Exception> _portLoadedFromConfig;
    private static Action`2<ILogger, Exception> _failedToDeterminePort;
    private static Action`2<ILogger, Exception> _failedMultiplePorts;
    private static Action`3<ILogger, int, Exception> _portFromServer;
    private static HttpsLoggingExtensions();
    [ExtensionAttribute]
public static void RedirectingToHttps(ILogger logger, string redirect);
    [ExtensionAttribute]
public static void PortLoadedFromConfig(ILogger logger, int port);
    [ExtensionAttribute]
public static void FailedToDeterminePort(ILogger logger);
    [ExtensionAttribute]
public static void FailedMultiplePorts(ILogger logger);
    [ExtensionAttribute]
public static void PortFromServer(ILogger logger, int port);
}
public class Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionMiddleware : object {
    private static int PortNotFound;
    private RequestDelegate _next;
    private Lazy`1<int> _httpsPort;
    private int _statusCode;
    private IServerAddressesFeature _serverAddressesFeature;
    private IConfiguration _config;
    private ILogger _logger;
    public HttpsRedirectionMiddleware(RequestDelegate next, IOptions`1<HttpsRedirectionOptions> options, IConfiguration config, ILoggerFactory loggerFactory);
    public HttpsRedirectionMiddleware(RequestDelegate next, IOptions`1<HttpsRedirectionOptions> options, IConfiguration config, ILoggerFactory loggerFactory, IServerAddressesFeature serverAddressesFeature);
    public Task Invoke(HttpContext context);
    private int TryGetHttpsPort();
}
public class Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionOptions : object {
    [CompilerGeneratedAttribute]
private int <RedirectStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <HttpsPort>k__BackingField;
    public int RedirectStatusCode { get; public set; }
    public Nullable`1<int> HttpsPort { get; public set; }
    [CompilerGeneratedAttribute]
public int get_RedirectStatusCode();
    [CompilerGeneratedAttribute]
public void set_RedirectStatusCode(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_HttpsPort();
    [CompilerGeneratedAttribute]
public void set_HttpsPort(Nullable`1<int> value);
}
