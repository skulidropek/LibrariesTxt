[ExtensionAttribute]
public static class Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionExtensions : object {
    [ExtensionAttribute]
public static T GetProperty(ApiDescription apiDescription);
    [ExtensionAttribute]
public static void SetProperty(ApiDescription apiDescription, T value);
}
public class Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroup : object {
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ApiDescription> <Items>k__BackingField;
    public string GroupName { get; }
    public IReadOnlyList`1<ApiDescription> Items { get; }
    public ApiDescriptionGroup(string groupName, IReadOnlyList`1<ApiDescription> items);
    [CompilerGeneratedAttribute]
public string get_GroupName();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ApiDescription> get_Items();
}
public class Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroupCollection : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ApiDescriptionGroup> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    public IReadOnlyList`1<ApiDescriptionGroup> Items { get; }
    public int Version { get; }
    public ApiDescriptionGroupCollection(IReadOnlyList`1<ApiDescriptionGroup> items, int version);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ApiDescriptionGroup> get_Items();
    [CompilerGeneratedAttribute]
public int get_Version();
}
public class Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroupCollectionProvider : object {
    private IActionDescriptorCollectionProvider _actionDescriptorCollectionProvider;
    private IApiDescriptionProvider[] _apiDescriptionProviders;
    private ApiDescriptionGroupCollection _apiDescriptionGroups;
    public ApiDescriptionGroupCollection ApiDescriptionGroups { get; }
    public ApiDescriptionGroupCollectionProvider(IActionDescriptorCollectionProvider actionDescriptorCollectionProvider, IEnumerable`1<IApiDescriptionProvider> apiDescriptionProviders);
    public sealed virtual ApiDescriptionGroupCollection get_ApiDescriptionGroups();
    private ApiDescriptionGroupCollection GetCollection(ActionDescriptorCollection actionDescriptors);
}
internal class Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterContext : object {
    [CompilerGeneratedAttribute]
private ControllerActionDescriptor <ActionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private IModelMetadataProvider <MetadataProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ApiParameterDescription> <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<TemplatePart> <RouteParameters>k__BackingField;
    public ControllerActionDescriptor ActionDescriptor { get; }
    public IModelMetadataProvider MetadataProvider { get; }
    public IList`1<ApiParameterDescription> Results { get; }
    public IReadOnlyList`1<TemplatePart> RouteParameters { get; }
    public ApiParameterContext(IModelMetadataProvider metadataProvider, ControllerActionDescriptor actionDescriptor, IReadOnlyList`1<TemplatePart> routeParameters);
    [CompilerGeneratedAttribute]
public ControllerActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public IModelMetadataProvider get_MetadataProvider();
    [CompilerGeneratedAttribute]
public IList`1<ApiParameterDescription> get_Results();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<TemplatePart> get_RouteParameters();
}
internal class Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseTypeProvider : object {
    private IModelMetadataProvider _modelMetadataProvider;
    private IActionResultTypeMapper _mapper;
    private MvcOptions _mvcOptions;
    public ApiResponseTypeProvider(IModelMetadataProvider modelMetadataProvider, IActionResultTypeMapper mapper, MvcOptions mvcOptions);
    public ICollection`1<ApiResponseType> GetApiResponseTypes(ControllerActionDescriptor action);
    private static List`1<IApiResponseMetadataProvider> GetResponseMetadataAttributes(ControllerActionDescriptor action);
    private ICollection`1<ApiResponseType> GetApiResponseTypes(IReadOnlyList`1<IApiResponseMetadataProvider> responseMetadataAttributes, Type type, Type defaultErrorType);
    private void CalculateResponseFormats(ICollection`1<ApiResponseType> responseTypes, MediaTypeCollection declaredContentTypes);
    private Type GetDeclaredReturnType(ControllerActionDescriptor action);
    private Type GetRuntimeReturnType(Type declaredReturnType);
    private static bool IsClientError(int statusCode);
    private static bool HasSignificantMetadataProvider(IReadOnlyList`1<IApiResponseMetadataProvider> providers);
}
public class Microsoft.AspNetCore.Mvc.ApiExplorer.DefaultApiDescriptionProvider : object {
    private MvcOptions _mvcOptions;
    private ApiResponseTypeProvider _responseTypeProvider;
    private RouteOptions _routeOptions;
    private IInlineConstraintResolver _constraintResolver;
    private IModelMetadataProvider _modelMetadataProvider;
    public int Order { get; }
    public DefaultApiDescriptionProvider(IOptions`1<MvcOptions> optionsAccessor, IInlineConstraintResolver constraintResolver, IModelMetadataProvider modelMetadataProvider, IActionResultTypeMapper mapper, IOptions`1<RouteOptions> routeOptions);
    public sealed virtual int get_Order();
    public sealed virtual void OnProvidersExecuting(ApiDescriptionProviderContext context);
    public sealed virtual void OnProvidersExecuted(ApiDescriptionProviderContext context);
    private ApiDescription CreateApiDescription(ControllerActionDescriptor action, string httpMethod, string groupName);
    private IList`1<ApiParameterDescription> GetParameters(ApiParameterContext context);
    private void ProcessRouteParameters(ApiParameterContext context);
    internal static void ProcessIsRequired(ApiParameterContext context);
    internal static void ProcessParameterDefaultValue(ApiParameterContext context);
    private ApiParameterRouteInfo CreateRouteInfo(TemplatePart routeParameter);
    private IEnumerable`1<string> GetHttpMethods(ControllerActionDescriptor action);
    private RouteTemplate ParseTemplate(ControllerActionDescriptor action);
    private string GetRelativePath(RouteTemplate parsedTemplate);
    private IReadOnlyList`1<ApiRequestFormat> GetSupportedFormats(MediaTypeCollection contentTypes, Type type);
    private static MediaTypeCollection GetDeclaredContentTypes(IApiRequestMetadataProvider[] requestMetadataAttributes);
    private IApiRequestMetadataProvider[] GetRequestMetadataAttributes(ControllerActionDescriptor action);
}
public interface Microsoft.AspNetCore.Mvc.ApiExplorer.IApiDescriptionGroupCollectionProvider {
    public ApiDescriptionGroupCollection ApiDescriptionGroups { get; }
    public abstract virtual ApiDescriptionGroupCollection get_ApiDescriptionGroups();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.MvcApiExplorerMvcCoreBuilderExtensions : object {
    [ExtensionAttribute]
public static IMvcCoreBuilder AddApiExplorer(IMvcCoreBuilder builder);
    internal static void AddApiExplorerServices(IServiceCollection services);
}
