[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.ResponseCachingExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseResponseCaching(IApplicationBuilder app);
}
internal class Microsoft.AspNetCore.ResponseCaching.CachedResponse : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private IHeaderDictionary <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Body>k__BackingField;
    public DateTimeOffset Created { get; public set; }
    public int StatusCode { get; public set; }
    public IHeaderDictionary Headers { get; public set; }
    public Stream Body { get; public set; }
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(int value);
    [CompilerGeneratedAttribute]
public IHeaderDictionary get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(IHeaderDictionary value);
    [CompilerGeneratedAttribute]
public Stream get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(Stream value);
}
internal class Microsoft.AspNetCore.ResponseCaching.CachedVaryByRules : object {
    [CompilerGeneratedAttribute]
private string <VaryByKeyPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private StringValues <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private StringValues <QueryKeys>k__BackingField;
    public string VaryByKeyPrefix { get; public set; }
    public StringValues Headers { get; public set; }
    public StringValues QueryKeys { get; public set; }
    [CompilerGeneratedAttribute]
public string get_VaryByKeyPrefix();
    [CompilerGeneratedAttribute]
public void set_VaryByKeyPrefix(string value);
    [CompilerGeneratedAttribute]
public StringValues get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(StringValues value);
    [CompilerGeneratedAttribute]
public StringValues get_QueryKeys();
    [CompilerGeneratedAttribute]
public void set_QueryKeys(StringValues value);
}
internal static class Microsoft.AspNetCore.ResponseCaching.CacheEntryHelpers : object {
    internal static long EstimateCachedResponseSize(CachedResponse cachedResponse);
    internal static long EstimateCachedVaryByRulesySize(CachedVaryByRules cachedVaryByRules);
    internal static long EstimateStringValuesSize(StringValues stringValues);
}
internal class Microsoft.AspNetCore.ResponseCaching.FastGuid : object {
    private static Char[] s_encode32Chars;
    private static long NextId;
    private string _idString;
    [CompilerGeneratedAttribute]
private long <IdValue>k__BackingField;
    internal long IdValue { get; }
    internal string IdString { get; }
    private static FastGuid();
    internal FastGuid(long id);
    [CompilerGeneratedAttribute]
internal long get_IdValue();
    internal string get_IdString();
    internal static FastGuid NewGuid();
    private static string GenerateGuidString(FastGuid guid);
}
internal interface Microsoft.AspNetCore.ResponseCaching.IResponseCache {
    public abstract virtual IResponseCacheEntry Get(string key);
    public abstract virtual Task`1<IResponseCacheEntry> GetAsync(string key);
    public abstract virtual void Set(string key, IResponseCacheEntry entry, TimeSpan validFor);
    public abstract virtual Task SetAsync(string key, IResponseCacheEntry entry, TimeSpan validFor);
}
internal interface Microsoft.AspNetCore.ResponseCaching.IResponseCacheEntry {
}
internal interface Microsoft.AspNetCore.ResponseCaching.IResponseCachingKeyProvider {
    public abstract virtual string CreateBaseKey(ResponseCachingContext context);
    public abstract virtual string CreateStorageVaryByKey(ResponseCachingContext context);
    public abstract virtual IEnumerable`1<string> CreateLookupVaryByKeys(ResponseCachingContext context);
}
internal interface Microsoft.AspNetCore.ResponseCaching.IResponseCachingPolicyProvider {
    public abstract virtual bool AttemptResponseCaching(ResponseCachingContext context);
    public abstract virtual bool AllowCacheLookup(ResponseCachingContext context);
    public abstract virtual bool AllowCacheStorage(ResponseCachingContext context);
    public abstract virtual bool IsResponseCacheable(ResponseCachingContext context);
    public abstract virtual bool IsCachedEntryFresh(ResponseCachingContext context);
}
internal interface Microsoft.AspNetCore.ResponseCaching.ISystemClock {
    public DateTimeOffset UtcNow { get; }
    public abstract virtual DateTimeOffset get_UtcNow();
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.ResponseCaching.LoggerExtensions : object {
    private static Action`3<ILogger, string, Exception> _requestMethodNotCacheable;
    private static Action`2<ILogger, Exception> _requestWithAuthorizationNotCacheable;
    private static Action`2<ILogger, Exception> _requestWithNoCacheNotCacheable;
    private static Action`2<ILogger, Exception> _requestWithPragmaNoCacheNotCacheable;
    private static Action`3<ILogger, TimeSpan, Exception> _expirationMinFreshAdded;
    private static Action`4<ILogger, TimeSpan, TimeSpan, Exception> _expirationSharedMaxAgeExceeded;
    private static Action`4<ILogger, TimeSpan, TimeSpan, Exception> _expirationMustRevalidate;
    private static Action`5<ILogger, TimeSpan, TimeSpan, TimeSpan, Exception> _expirationMaxStaleSatisfied;
    private static Action`4<ILogger, TimeSpan, TimeSpan, Exception> _expirationMaxAgeExceeded;
    private static Action`4<ILogger, DateTimeOffset, DateTimeOffset, Exception> _expirationExpiresExceeded;
    private static Action`2<ILogger, Exception> _responseWithoutPublicNotCacheable;
    private static Action`2<ILogger, Exception> _responseWithNoStoreNotCacheable;
    private static Action`2<ILogger, Exception> _responseWithNoCacheNotCacheable;
    private static Action`2<ILogger, Exception> _responseWithSetCookieNotCacheable;
    private static Action`2<ILogger, Exception> _responseWithVaryStarNotCacheable;
    private static Action`2<ILogger, Exception> _responseWithPrivateNotCacheable;
    private static Action`3<ILogger, int, Exception> _responseWithUnsuccessfulStatusCodeNotCacheable;
    private static Action`2<ILogger, Exception> _notModifiedIfNoneMatchStar;
    private static Action`3<ILogger, EntityTagHeaderValue, Exception> _notModifiedIfNoneMatchMatched;
    private static Action`4<ILogger, DateTimeOffset, DateTimeOffset, Exception> _notModifiedIfModifiedSinceSatisfied;
    private static Action`2<ILogger, Exception> _notModifiedServed;
    private static Action`2<ILogger, Exception> _cachedResponseServed;
    private static Action`2<ILogger, Exception> _gatewayTimeoutServed;
    private static Action`2<ILogger, Exception> _noResponseServed;
    private static Action`4<ILogger, string, string, Exception> _varyByRulesUpdated;
    private static Action`2<ILogger, Exception> _responseCached;
    private static Action`2<ILogger, Exception> _responseNotCached;
    private static Action`2<ILogger, Exception> _responseContentLengthMismatchNotCached;
    private static Action`4<ILogger, TimeSpan, TimeSpan, Exception> _expirationInfiniteMaxStaleSatisfied;
    private static LoggerExtensions();
    [ExtensionAttribute]
internal static void RequestMethodNotCacheable(ILogger logger, string method);
    [ExtensionAttribute]
internal static void RequestWithAuthorizationNotCacheable(ILogger logger);
    [ExtensionAttribute]
internal static void RequestWithNoCacheNotCacheable(ILogger logger);
    [ExtensionAttribute]
internal static void RequestWithPragmaNoCacheNotCacheable(ILogger logger);
    [ExtensionAttribute]
internal static void ExpirationMinFreshAdded(ILogger logger, TimeSpan duration);
    [ExtensionAttribute]
internal static void ExpirationSharedMaxAgeExceeded(ILogger logger, TimeSpan age, TimeSpan sharedMaxAge);
    [ExtensionAttribute]
internal static void ExpirationMustRevalidate(ILogger logger, TimeSpan age, TimeSpan maxAge);
    [ExtensionAttribute]
internal static void ExpirationMaxStaleSatisfied(ILogger logger, TimeSpan age, TimeSpan maxAge, TimeSpan maxStale);
    [ExtensionAttribute]
internal static void ExpirationMaxAgeExceeded(ILogger logger, TimeSpan age, TimeSpan sharedMaxAge);
    [ExtensionAttribute]
internal static void ExpirationExpiresExceeded(ILogger logger, DateTimeOffset responseTime, DateTimeOffset expires);
    [ExtensionAttribute]
internal static void ResponseWithoutPublicNotCacheable(ILogger logger);
    [ExtensionAttribute]
internal static void ResponseWithNoStoreNotCacheable(ILogger logger);
    [ExtensionAttribute]
internal static void ResponseWithNoCacheNotCacheable(ILogger logger);
    [ExtensionAttribute]
internal static void ResponseWithSetCookieNotCacheable(ILogger logger);
    [ExtensionAttribute]
internal static void ResponseWithVaryStarNotCacheable(ILogger logger);
    [ExtensionAttribute]
internal static void ResponseWithPrivateNotCacheable(ILogger logger);
    [ExtensionAttribute]
internal static void ResponseWithUnsuccessfulStatusCodeNotCacheable(ILogger logger, int statusCode);
    [ExtensionAttribute]
internal static void NotModifiedIfNoneMatchStar(ILogger logger);
    [ExtensionAttribute]
internal static void NotModifiedIfNoneMatchMatched(ILogger logger, EntityTagHeaderValue etag);
    [ExtensionAttribute]
internal static void NotModifiedIfModifiedSinceSatisfied(ILogger logger, DateTimeOffset lastModified, DateTimeOffset ifModifiedSince);
    [ExtensionAttribute]
internal static void NotModifiedServed(ILogger logger);
    [ExtensionAttribute]
internal static void CachedResponseServed(ILogger logger);
    [ExtensionAttribute]
internal static void GatewayTimeoutServed(ILogger logger);
    [ExtensionAttribute]
internal static void NoResponseServed(ILogger logger);
    [ExtensionAttribute]
internal static void VaryByRulesUpdated(ILogger logger, string headers, string queryKeys);
    [ExtensionAttribute]
internal static void ResponseCached(ILogger logger);
    [ExtensionAttribute]
internal static void LogResponseNotCached(ILogger logger);
    [ExtensionAttribute]
internal static void ResponseContentLengthMismatchNotCached(ILogger logger);
    [ExtensionAttribute]
internal static void ExpirationInfiniteMaxStaleSatisfied(ILogger logger, TimeSpan age, TimeSpan maxAge);
}
internal class Microsoft.AspNetCore.ResponseCaching.MemoryCachedResponse : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private IHeaderDictionary <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Byte[]> <BodySegments>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BodyLength>k__BackingField;
    public DateTimeOffset Created { get; public set; }
    public int StatusCode { get; public set; }
    public IHeaderDictionary Headers { get; public set; }
    public List`1<Byte[]> BodySegments { get; public set; }
    public long BodyLength { get; public set; }
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(int value);
    [CompilerGeneratedAttribute]
public IHeaderDictionary get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(IHeaderDictionary value);
    [CompilerGeneratedAttribute]
public List`1<Byte[]> get_BodySegments();
    [CompilerGeneratedAttribute]
public void set_BodySegments(List`1<Byte[]> value);
    [CompilerGeneratedAttribute]
public long get_BodyLength();
    [CompilerGeneratedAttribute]
public void set_BodyLength(long value);
}
internal class Microsoft.AspNetCore.ResponseCaching.MemoryResponseCache : object {
    private IMemoryCache _cache;
    internal MemoryResponseCache(IMemoryCache cache);
    public sealed virtual IResponseCacheEntry Get(string key);
    public sealed virtual Task`1<IResponseCacheEntry> GetAsync(string key);
    public sealed virtual void Set(string key, IResponseCacheEntry entry, TimeSpan validFor);
    public sealed virtual Task SetAsync(string key, IResponseCacheEntry entry, TimeSpan validFor);
}
internal class Microsoft.AspNetCore.ResponseCaching.ResponseCachingContext : object {
    private Nullable`1<DateTimeOffset> _responseDate;
    private bool _parsedResponseDate;
    private Nullable`1<DateTimeOffset> _responseExpires;
    private bool _parsedResponseExpires;
    private Nullable`1<TimeSpan> _responseSharedMaxAge;
    private bool _parsedResponseSharedMaxAge;
    private Nullable`1<TimeSpan> _responseMaxAge;
    private bool _parsedResponseMaxAge;
    [CompilerGeneratedAttribute]
private HttpContext <HttpContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <ResponseTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <CachedEntryAge>k__BackingField;
    [CompilerGeneratedAttribute]
private CachedVaryByRules <CachedVaryByRules>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldCacheResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorageVaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <CachedResponseValidFor>k__BackingField;
    [CompilerGeneratedAttribute]
private CachedResponse <CachedResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResponseStarted>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <OriginalResponseStream>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseCachingStream <ResponseCachingStream>k__BackingField;
    [CompilerGeneratedAttribute]
private IHeaderDictionary <CachedResponseHeaders>k__BackingField;
    public HttpContext HttpContext { get; }
    public Nullable`1<DateTimeOffset> ResponseTime { get; internal set; }
    public Nullable`1<TimeSpan> CachedEntryAge { get; internal set; }
    public CachedVaryByRules CachedVaryByRules { get; public set; }
    internal ILogger Logger { get; }
    internal bool ShouldCacheResponse { get; internal set; }
    internal string BaseKey { get; internal set; }
    internal string StorageVaryKey { get; internal set; }
    internal TimeSpan CachedResponseValidFor { get; internal set; }
    internal CachedResponse CachedResponse { get; internal set; }
    internal bool ResponseStarted { get; internal set; }
    internal Stream OriginalResponseStream { get; internal set; }
    internal ResponseCachingStream ResponseCachingStream { get; internal set; }
    internal IHeaderDictionary CachedResponseHeaders { get; internal set; }
    internal Nullable`1<DateTimeOffset> ResponseDate { get; internal set; }
    internal Nullable`1<DateTimeOffset> ResponseExpires { get; }
    internal Nullable`1<TimeSpan> ResponseSharedMaxAge { get; }
    internal Nullable`1<TimeSpan> ResponseMaxAge { get; }
    internal ResponseCachingContext(HttpContext httpContext, ILogger logger);
    [CompilerGeneratedAttribute]
public HttpContext get_HttpContext();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_ResponseTime();
    [CompilerGeneratedAttribute]
internal void set_ResponseTime(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_CachedEntryAge();
    [CompilerGeneratedAttribute]
internal void set_CachedEntryAge(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public CachedVaryByRules get_CachedVaryByRules();
    [CompilerGeneratedAttribute]
public void set_CachedVaryByRules(CachedVaryByRules value);
    [CompilerGeneratedAttribute]
internal ILogger get_Logger();
    [CompilerGeneratedAttribute]
internal bool get_ShouldCacheResponse();
    [CompilerGeneratedAttribute]
internal void set_ShouldCacheResponse(bool value);
    [CompilerGeneratedAttribute]
internal string get_BaseKey();
    [CompilerGeneratedAttribute]
internal void set_BaseKey(string value);
    [CompilerGeneratedAttribute]
internal string get_StorageVaryKey();
    [CompilerGeneratedAttribute]
internal void set_StorageVaryKey(string value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_CachedResponseValidFor();
    [CompilerGeneratedAttribute]
internal void set_CachedResponseValidFor(TimeSpan value);
    [CompilerGeneratedAttribute]
internal CachedResponse get_CachedResponse();
    [CompilerGeneratedAttribute]
internal void set_CachedResponse(CachedResponse value);
    [CompilerGeneratedAttribute]
internal bool get_ResponseStarted();
    [CompilerGeneratedAttribute]
internal void set_ResponseStarted(bool value);
    [CompilerGeneratedAttribute]
internal Stream get_OriginalResponseStream();
    [CompilerGeneratedAttribute]
internal void set_OriginalResponseStream(Stream value);
    [CompilerGeneratedAttribute]
internal ResponseCachingStream get_ResponseCachingStream();
    [CompilerGeneratedAttribute]
internal void set_ResponseCachingStream(ResponseCachingStream value);
    [CompilerGeneratedAttribute]
internal IHeaderDictionary get_CachedResponseHeaders();
    [CompilerGeneratedAttribute]
internal void set_CachedResponseHeaders(IHeaderDictionary value);
    internal Nullable`1<DateTimeOffset> get_ResponseDate();
    internal void set_ResponseDate(Nullable`1<DateTimeOffset> value);
    internal Nullable`1<DateTimeOffset> get_ResponseExpires();
    internal Nullable`1<TimeSpan> get_ResponseSharedMaxAge();
    internal Nullable`1<TimeSpan> get_ResponseMaxAge();
}
public class Microsoft.AspNetCore.ResponseCaching.ResponseCachingFeature : object {
    private String[] _varyByQueryKeys;
    public String[] VaryByQueryKeys { get; public set; }
    public sealed virtual String[] get_VaryByQueryKeys();
    public sealed virtual void set_VaryByQueryKeys(String[] value);
}
internal class Microsoft.AspNetCore.ResponseCaching.ResponseCachingKeyProvider : object {
    private static char KeyDelimiter;
    private static char KeySubDelimiter;
    private ObjectPool`1<StringBuilder> _builderPool;
    private ResponseCachingOptions _options;
    internal ResponseCachingKeyProvider(ObjectPoolProvider poolProvider, IOptions`1<ResponseCachingOptions> options);
    private static ResponseCachingKeyProvider();
    public sealed virtual IEnumerable`1<string> CreateLookupVaryByKeys(ResponseCachingContext context);
    public sealed virtual string CreateBaseKey(ResponseCachingContext context);
    public sealed virtual string CreateStorageVaryByKey(ResponseCachingContext context);
}
public class Microsoft.AspNetCore.ResponseCaching.ResponseCachingMiddleware : object {
    private static TimeSpan DefaultExpirationTimeSpan;
    private static String[] HeadersToIncludeIn304;
    private RequestDelegate _next;
    private ResponseCachingOptions _options;
    private ILogger _logger;
    private IResponseCachingPolicyProvider _policyProvider;
    private IResponseCache _cache;
    private IResponseCachingKeyProvider _keyProvider;
    public ResponseCachingMiddleware(RequestDelegate next, IOptions`1<ResponseCachingOptions> options, ILoggerFactory loggerFactory, ObjectPoolProvider poolProvider);
    internal ResponseCachingMiddleware(RequestDelegate next, IOptions`1<ResponseCachingOptions> options, ILoggerFactory loggerFactory, IResponseCachingPolicyProvider policyProvider, IResponseCache cache, IResponseCachingKeyProvider keyProvider);
    private static ResponseCachingMiddleware();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.ResponseCaching.ResponseCachingMiddleware/<Invoke>d__10")]
public Task Invoke(HttpContext httpContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.ResponseCaching.ResponseCachingMiddleware/<TryServeCachedResponseAsync>d__11")]
internal Task`1<bool> TryServeCachedResponseAsync(ResponseCachingContext context, IResponseCacheEntry cacheEntry);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.ResponseCaching.ResponseCachingMiddleware/<TryServeFromCacheAsync>d__12")]
internal Task`1<bool> TryServeFromCacheAsync(ResponseCachingContext context);
    private bool OnFinalizeCacheHeaders(ResponseCachingContext context);
    internal void FinalizeCacheHeaders(ResponseCachingContext context);
    internal Task FinalizeCacheHeadersAsync(ResponseCachingContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.ResponseCaching.ResponseCachingMiddleware/<FinalizeCacheBodyAsync>d__16")]
internal Task FinalizeCacheBodyAsync(ResponseCachingContext context);
    private bool OnStartResponse(ResponseCachingContext context);
    internal void StartResponse(ResponseCachingContext context);
    internal Task StartResponseAsync(ResponseCachingContext context);
    internal static void AddResponseCachingFeature(HttpContext context);
    internal void ShimResponseStream(ResponseCachingContext context);
    internal static void RemoveResponseCachingFeature(HttpContext context);
    internal static void UnshimResponseStream(ResponseCachingContext context);
    internal static bool ContentIsNotModified(ResponseCachingContext context);
    internal static StringValues GetOrderCasingNormalizedStringValues(StringValues stringValues);
}
public class Microsoft.AspNetCore.ResponseCaching.ResponseCachingOptions : object {
    [CompilerGeneratedAttribute]
private long <SizeLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaximumBodySize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCaseSensitivePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private ISystemClock <SystemClock>k__BackingField;
    public long SizeLimit { get; public set; }
    public long MaximumBodySize { get; public set; }
    public bool UseCaseSensitivePaths { get; public set; }
    [EditorBrowsableAttribute("1")]
internal ISystemClock SystemClock { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_SizeLimit();
    [CompilerGeneratedAttribute]
public void set_SizeLimit(long value);
    [CompilerGeneratedAttribute]
public long get_MaximumBodySize();
    [CompilerGeneratedAttribute]
public void set_MaximumBodySize(long value);
    [CompilerGeneratedAttribute]
public bool get_UseCaseSensitivePaths();
    [CompilerGeneratedAttribute]
public void set_UseCaseSensitivePaths(bool value);
    [CompilerGeneratedAttribute]
internal ISystemClock get_SystemClock();
    [CompilerGeneratedAttribute]
internal void set_SystemClock(ISystemClock value);
}
internal class Microsoft.AspNetCore.ResponseCaching.ResponseCachingPolicyProvider : object {
    public virtual bool AttemptResponseCaching(ResponseCachingContext context);
    public virtual bool AllowCacheLookup(ResponseCachingContext context);
    public virtual bool AllowCacheStorage(ResponseCachingContext context);
    public virtual bool IsResponseCacheable(ResponseCachingContext context);
    public virtual bool IsCachedEntryFresh(ResponseCachingContext context);
}
internal class Microsoft.AspNetCore.ResponseCaching.ResponseCachingStream : Stream {
    private Stream _innerStream;
    private long _maxBufferSize;
    private int _segmentSize;
    private SegmentWriteStream _segmentWriteStream;
    private Action _startResponseCallback;
    private Func`1<Task> _startResponseCallbackAsync;
    [CompilerGeneratedAttribute]
private bool <BufferingEnabled>k__BackingField;
    internal bool BufferingEnabled { get; private set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal ResponseCachingStream(Stream innerStream, long maxBufferSize, int segmentSize, Action startResponseCallback, Func`1<Task> startResponseCallbackAsync);
    [CompilerGeneratedAttribute]
internal bool get_BufferingEnabled();
    [CompilerGeneratedAttribute]
private void set_BufferingEnabled(bool value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    internal Stream GetBufferStream();
    internal void DisableBuffering();
    public virtual void SetLength(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void Flush();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.ResponseCaching.ResponseCachingStream/<FlushAsync>d__27")]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.ResponseCaching.ResponseCachingStream/<WriteAsync>d__30")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
}
internal class Microsoft.AspNetCore.ResponseCaching.SegmentReadStream : Stream {
    private List`1<Byte[]> _segments;
    private long _length;
    private int _segmentIndex;
    private int _segmentOffset;
    private long _position;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal SegmentReadStream(List`1<Byte[]> segments, long length);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.ResponseCaching.SegmentReadStream/<CopyToAsync>d__26")]
public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
}
internal class Microsoft.AspNetCore.ResponseCaching.SegmentWriteStream : Stream {
    private List`1<Byte[]> _segments;
    private MemoryStream _bufferStream;
    private int _segmentSize;
    private long _length;
    private bool _closed;
    private bool _disposed;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal SegmentWriteStream(int segmentSize);
    internal List`1<Byte[]> GetSegments();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    private void DisposeMemoryStream();
    private void FinalizeSegments();
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
}
internal static class Microsoft.AspNetCore.ResponseCaching.StreamUtilities : object {
    [CompilerGeneratedAttribute]
private static int <BodySegmentSize>k__BackingField;
    internal static int BodySegmentSize { get; internal set; }
    private static StreamUtilities();
    [CompilerGeneratedAttribute]
internal static int get_BodySegmentSize();
    [CompilerGeneratedAttribute]
internal static void set_BodySegmentSize(int value);
    internal static IAsyncResult ToIAsyncResult(Task task, AsyncCallback callback, object state);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.ResponseCaching.StringBuilderExtensions : object {
    [ExtensionAttribute]
internal static StringBuilder AppendUpperInvariant(StringBuilder builder, string value);
}
internal class Microsoft.AspNetCore.ResponseCaching.SystemClock : object {
    public DateTimeOffset UtcNow { get; }
    public sealed virtual DateTimeOffset get_UtcNow();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ResponseCachingServicesExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddResponseCaching(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddResponseCaching(IServiceCollection services, Action`1<ResponseCachingOptions> configureOptions);
}
