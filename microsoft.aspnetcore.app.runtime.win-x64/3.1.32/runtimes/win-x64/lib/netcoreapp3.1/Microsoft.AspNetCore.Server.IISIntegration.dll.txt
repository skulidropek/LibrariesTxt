public class Microsoft.AspNetCore.Builder.IISOptions : object {
    [CompilerGeneratedAttribute]
private bool <AutomaticAuthentication>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForwardWindowsAuthentication>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForwardClientCertificate>k__BackingField;
    public bool AutomaticAuthentication { get; public set; }
    public string AuthenticationDisplayName { get; public set; }
    internal bool ForwardWindowsAuthentication { get; internal set; }
    public bool ForwardClientCertificate { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AutomaticAuthentication();
    [CompilerGeneratedAttribute]
public void set_AutomaticAuthentication(bool value);
    [CompilerGeneratedAttribute]
public string get_AuthenticationDisplayName();
    [CompilerGeneratedAttribute]
public void set_AuthenticationDisplayName(string value);
    [CompilerGeneratedAttribute]
internal bool get_ForwardWindowsAuthentication();
    [CompilerGeneratedAttribute]
internal void set_ForwardWindowsAuthentication(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForwardClientCertificate();
    [CompilerGeneratedAttribute]
public void set_ForwardClientCertificate(bool value);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Hosting.WebHostBuilderIISExtensions : object {
    private static string ServerPort;
    private static string ServerPath;
    private static string PairingToken;
    private static string IISAuth;
    private static string IISWebSockets;
    private static WebHostBuilderIISExtensions();
    [ExtensionAttribute]
public static IWebHostBuilder UseIISIntegration(IWebHostBuilder hostBuilder);
}
internal class Microsoft.AspNetCore.Server.IISIntegration.AuthenticationHandler : object {
    private WindowsPrincipal _user;
    private HttpContext _context;
    private AuthenticationScheme _scheme;
    public sealed virtual Task`1<AuthenticateResult> AuthenticateAsync();
    public sealed virtual Task ChallengeAsync(AuthenticationProperties properties);
    public sealed virtual Task ForbidAsync(AuthenticationProperties properties);
    public sealed virtual Task InitializeAsync(AuthenticationScheme scheme, HttpContext context);
}
internal class Microsoft.AspNetCore.Server.IISIntegration.ForwardedTlsConnectionFeature : object {
    private StringValues _header;
    private X509Certificate2 _certificate;
    private ILogger _logger;
    public X509Certificate2 ClientCertificate { get; public set; }
    public ForwardedTlsConnectionFeature(ILogger logger, StringValues header);
    public sealed virtual X509Certificate2 get_ClientCertificate();
    public sealed virtual void set_ClientCertificate(X509Certificate2 value);
    public sealed virtual Task`1<X509Certificate2> GetClientCertificateAsync(CancellationToken cancellationToken);
}
public class Microsoft.AspNetCore.Server.IISIntegration.IISDefaults : object {
    public static string AuthenticationScheme;
    public static string Negotiate;
    public static string Ntlm;
}
public class Microsoft.AspNetCore.Server.IISIntegration.IISHostingStartup : object {
    public sealed virtual void Configure(IWebHostBuilder builder);
}
public class Microsoft.AspNetCore.Server.IISIntegration.IISMiddleware : object {
    private static string MSAspNetCoreClientCert;
    private static string MSAspNetCoreToken;
    private static string MSAspNetCoreEvent;
    private static string MSAspNetCoreWinAuthToken;
    private static string ANCMShutdownEventHeaderValue;
    private static PathString ANCMRequestPath;
    private static Func`2<object, Task> ClearUserDelegate;
    private RequestDelegate _next;
    private IISOptions _options;
    private ILogger _logger;
    private string _pairingToken;
    private IHostApplicationLifetime _applicationLifetime;
    private bool _isWebsocketsSupported;
    public IISMiddleware(RequestDelegate next, ILoggerFactory loggerFactory, IOptions`1<IISOptions> options, string pairingToken, IAuthenticationSchemeProvider authentication, IHostApplicationLifetime applicationLifetime);
    public IISMiddleware(RequestDelegate next, ILoggerFactory loggerFactory, IOptions`1<IISOptions> options, string pairingToken, bool isWebsocketsSupported, IAuthenticationSchemeProvider authentication, IHostApplicationLifetime applicationLifetime);
    private static IISMiddleware();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.IISIntegration.IISMiddleware/<Invoke>d__15")]
public Task Invoke(HttpContext httpContext);
    private WindowsPrincipal GetUser(HttpContext context);
    private static Task ClearUser(object arg);
    [CompilerGeneratedAttribute]
private void <Invoke>b__15_0();
}
internal class Microsoft.AspNetCore.Server.IISIntegration.IISSetupFilter : object {
    private string _pairingToken;
    private PathString _pathBase;
    private bool _isWebsocketsSupported;
    internal IISSetupFilter(string pairingToken, PathString pathBase, bool isWebsocketsSupported);
    public sealed virtual Action`1<IApplicationBuilder> Configure(Action`1<IApplicationBuilder> next);
}
internal static class Microsoft.AspNetCore.Server.IISIntegration.NativeMethods : object {
    private static string KERNEL32;
    public static bool CloseHandle(IntPtr handle);
}
