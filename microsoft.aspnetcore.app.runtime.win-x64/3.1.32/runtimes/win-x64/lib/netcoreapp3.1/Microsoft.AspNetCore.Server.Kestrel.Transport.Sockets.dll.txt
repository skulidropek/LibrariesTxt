internal static class Microsoft.AspNetCore.Connections.CorrelationIdGenerator : object {
    private static Char[] s_encode32Chars;
    private static long _lastId;
    private static CorrelationIdGenerator();
    public static string GetNextId();
    private static string GenerateId(long id);
}
internal abstract class Microsoft.AspNetCore.Connections.TransportConnection : ConnectionContext {
    private IDictionary`2<object, object> _items;
    private string _connectionId;
    [CompilerGeneratedAttribute]
private EndPoint <LocalEndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private EndPoint <RemoteEndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryPool`1<byte> <MemoryPool>k__BackingField;
    [CompilerGeneratedAttribute]
private IDuplexPipe <Transport>k__BackingField;
    [CompilerGeneratedAttribute]
private IDuplexPipe <Application>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <ConnectionClosed>k__BackingField;
    private static Type IConnectionIdFeatureType;
    private static Type IConnectionTransportFeatureType;
    private static Type IConnectionItemsFeatureType;
    private static Type IMemoryPoolFeatureType;
    private static Type IConnectionLifetimeFeatureType;
    private object _currentIConnectionIdFeature;
    private object _currentIConnectionTransportFeature;
    private object _currentIConnectionItemsFeature;
    private object _currentIMemoryPoolFeature;
    private object _currentIConnectionLifetimeFeature;
    private int _featureRevision;
    private List`1<KeyValuePair`2<Type, object>> MaybeExtra;
    public EndPoint LocalEndPoint { get; public set; }
    public EndPoint RemoteEndPoint { get; public set; }
    public string ConnectionId { get; public set; }
    public IFeatureCollection Features { get; }
    public MemoryPool`1<byte> MemoryPool { get; }
    public IDuplexPipe Transport { get; public set; }
    public IDuplexPipe Application { get; public set; }
    public IDictionary`2<object, object> Items { get; public set; }
    public CancellationToken ConnectionClosed { get; public set; }
    private bool Microsoft.AspNetCore.Http.Features.IFeatureCollection.IsReadOnly { get; }
    private int Microsoft.AspNetCore.Http.Features.IFeatureCollection.Revision { get; }
    private object Microsoft.AspNetCore.Http.Features.IFeatureCollection.Item { get; private set; }
    private MemoryPool`1<byte> Microsoft.AspNetCore.Connections.Features.IMemoryPoolFeature.MemoryPool { get; }
    private IDuplexPipe Microsoft.AspNetCore.Connections.Features.IConnectionTransportFeature.Transport { get; private set; }
    private IDictionary`2<object, object> Microsoft.AspNetCore.Connections.Features.IConnectionItemsFeature.Items { get; private set; }
    private CancellationToken Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature.ConnectionClosed { get; private set; }
    private static TransportConnection();
    [CompilerGeneratedAttribute]
public virtual EndPoint get_LocalEndPoint();
    [CompilerGeneratedAttribute]
public virtual void set_LocalEndPoint(EndPoint value);
    [CompilerGeneratedAttribute]
public virtual EndPoint get_RemoteEndPoint();
    [CompilerGeneratedAttribute]
public virtual void set_RemoteEndPoint(EndPoint value);
    public virtual string get_ConnectionId();
    public virtual void set_ConnectionId(string value);
    public virtual IFeatureCollection get_Features();
    [CompilerGeneratedAttribute]
public virtual MemoryPool`1<byte> get_MemoryPool();
    [CompilerGeneratedAttribute]
public virtual IDuplexPipe get_Transport();
    [CompilerGeneratedAttribute]
public virtual void set_Transport(IDuplexPipe value);
    [CompilerGeneratedAttribute]
public IDuplexPipe get_Application();
    [CompilerGeneratedAttribute]
public void set_Application(IDuplexPipe value);
    public virtual IDictionary`2<object, object> get_Items();
    public virtual void set_Items(IDictionary`2<object, object> value);
    [CompilerGeneratedAttribute]
public virtual CancellationToken get_ConnectionClosed();
    [CompilerGeneratedAttribute]
public virtual void set_ConnectionClosed(CancellationToken value);
    public virtual void Abort(ConnectionAbortedException abortReason);
    private void FastReset();
    internal void ResetFeatureCollection();
    private object ExtraFeatureGet(Type key);
    private void ExtraFeatureSet(Type key, object value);
    private sealed virtual override bool Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_IsReadOnly();
    private sealed virtual override int Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_Revision();
    private sealed virtual override object Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_Item(Type key);
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IFeatureCollection.set_Item(Type key, object value);
    private sealed virtual override TFeature Microsoft.AspNetCore.Http.Features.IFeatureCollection.Get();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IFeatureCollection.Set(TFeature feature);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Connections.TransportConnection/<FastEnumerable>d__60")]
private IEnumerable`1<KeyValuePair`2<Type, object>> FastEnumerable();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<Type, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override MemoryPool`1<byte> Microsoft.AspNetCore.Connections.Features.IMemoryPoolFeature.get_MemoryPool();
    private sealed virtual override IDuplexPipe Microsoft.AspNetCore.Connections.Features.IConnectionTransportFeature.get_Transport();
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionTransportFeature.set_Transport(IDuplexPipe value);
    private sealed virtual override IDictionary`2<object, object> Microsoft.AspNetCore.Connections.Features.IConnectionItemsFeature.get_Items();
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionItemsFeature.set_Items(IDictionary`2<object, object> value);
    private sealed virtual override CancellationToken Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature.get_ConnectionClosed();
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature.set_ConnectionClosed(CancellationToken value);
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature.Abort();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Hosting.WebHostBuilderSocketExtensions : object {
    [ExtensionAttribute]
public static IWebHostBuilder UseSockets(IWebHostBuilder hostBuilder);
    [ExtensionAttribute]
public static IWebHostBuilder UseSockets(IWebHostBuilder hostBuilder, Action`1<SocketTransportOptions> configureOptions);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.BufferExtensions : object {
    [ExtensionAttribute]
public static ArraySegment`1<byte> GetArray(Memory`1<byte> memory);
    [ExtensionAttribute]
public static ArraySegment`1<byte> GetArray(ReadOnlyMemory`1<byte> memory);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.IOQueue : PipeScheduler {
    private ConcurrentQueue`1<Work> _workItems;
    private int _doingWork;
    public virtual void Schedule(Action`1<object> action, object state);
    private sealed virtual override void System.Threading.IThreadPoolWorkItem.Execute();
}
internal interface Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.ISocketsTrace {
    public abstract virtual void ConnectionReadFin(string connectionId);
    public abstract virtual void ConnectionWriteFin(string connectionId, string reason);
    public abstract virtual void ConnectionError(string connectionId, Exception ex);
    public abstract virtual void ConnectionReset(string connectionId);
    public abstract virtual void ConnectionPause(string connectionId);
    public abstract virtual void ConnectionResume(string connectionId);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketAwaitableEventArgs : SocketAsyncEventArgs {
    private static Action _callbackCompleted;
    private PipeScheduler _ioScheduler;
    private Action _callback;
    public bool IsCompleted { get; }
    public SocketAwaitableEventArgs(PipeScheduler ioScheduler);
    private static SocketAwaitableEventArgs();
    public SocketAwaitableEventArgs GetAwaiter();
    public bool get_IsCompleted();
    public int GetResult();
    public sealed virtual void OnCompleted(Action continuation);
    public sealed virtual void UnsafeOnCompleted(Action continuation);
    public void Complete();
    protected virtual void OnCompleted(SocketAsyncEventArgs _);
    [CompilerGeneratedAttribute]
internal static void <GetResult>g__ThrowSocketException|7_0(SocketError e);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection : TransportConnection {
    private static int MinAllocBufferSize;
    private static bool IsWindows;
    private static bool IsMacOS;
    private Socket _socket;
    private ISocketsTrace _trace;
    private SocketReceiver _receiver;
    private SocketSender _sender;
    private CancellationTokenSource _connectionClosedTokenSource;
    private object _shutdownLock;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _socketDisposed;
    private Exception modreq(System.Runtime.CompilerServices.IsVolatile) _shutdownReason;
    private Task _processingTask;
    private TaskCompletionSource`1<object> _waitForConnectionClosedTcs;
    private bool _connectionClosed;
    [CompilerGeneratedAttribute]
private MemoryPool`1<byte> <MemoryPool>k__BackingField;
    public PipeWriter Input { get; }
    public PipeReader Output { get; }
    public MemoryPool`1<byte> MemoryPool { get; }
    internal SocketConnection(Socket socket, MemoryPool`1<byte> memoryPool, PipeScheduler scheduler, ISocketsTrace trace, Nullable`1<long> maxReadBufferSize, Nullable`1<long> maxWriteBufferSize);
    private static SocketConnection();
    public PipeWriter get_Input();
    public PipeReader get_Output();
    [CompilerGeneratedAttribute]
public virtual MemoryPool`1<byte> get_MemoryPool();
    public void Start();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection/<StartAsync>d__23")]
private Task StartAsync();
    public virtual void Abort(ConnectionAbortedException abortReason);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection/<DisposeAsync>d__25")]
public virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection/<DoReceive>d__26")]
private Task DoReceive();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection/<ProcessReceives>d__27")]
private Task ProcessReceives();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection/<DoSend>d__28")]
private Task DoSend();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection/<ProcessSends>d__29")]
private Task ProcessSends();
    private void FireConnectionClosed();
    private void Shutdown(Exception shutdownReason);
    private void CancelConnectionClosedToken();
    private static bool IsConnectionResetError(SocketError errorCode);
    private static bool IsConnectionAbortError(SocketError errorCode);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketReceiver : SocketSenderReceiverBase {
    public SocketReceiver(Socket socket, PipeScheduler scheduler);
    public SocketAwaitableEventArgs WaitForDataAsync();
    public SocketAwaitableEventArgs ReceiveAsync(Memory`1<byte> buffer);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketSender : SocketSenderReceiverBase {
    private List`1<ArraySegment`1<byte>> _bufferList;
    public SocketSender(Socket socket, PipeScheduler scheduler);
    public SocketAwaitableEventArgs SendAsync(ReadOnlySequence`1& buffers);
    private SocketAwaitableEventArgs SendAsync(ReadOnlyMemory`1<byte> memory);
    private List`1<ArraySegment`1<byte>> GetBufferList(ReadOnlySequence`1& buffer);
}
internal abstract class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketSenderReceiverBase : object {
    protected Socket _socket;
    protected SocketAwaitableEventArgs _awaitableEventArgs;
    protected SocketSenderReceiverBase(Socket socket, PipeScheduler scheduler);
    public sealed virtual void Dispose();
}
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketsTrace : object {
    private static Action`3<ILogger, string, Exception> _connectionPause;
    private static Action`3<ILogger, string, Exception> _connectionResume;
    private static Action`3<ILogger, string, Exception> _connectionReadFin;
    private static Action`4<ILogger, string, string, Exception> _connectionWriteFin;
    private static Action`3<ILogger, string, Exception> _connectionError;
    private static Action`3<ILogger, string, Exception> _connectionReset;
    private ILogger _logger;
    public SocketsTrace(ILogger logger);
    private static SocketsTrace();
    public void ConnectionRead(string connectionId, int count);
    public sealed virtual void ConnectionReadFin(string connectionId);
    public sealed virtual void ConnectionWriteFin(string connectionId, string reason);
    public void ConnectionWrite(string connectionId, int count);
    public void ConnectionWriteCallback(string connectionId, int status);
    public sealed virtual void ConnectionError(string connectionId, Exception ex);
    public sealed virtual void ConnectionReset(string connectionId);
    public sealed virtual void ConnectionPause(string connectionId);
    public sealed virtual void ConnectionResume(string connectionId);
    public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketConnectionListener : object {
    private MemoryPool`1<byte> _memoryPool;
    private int _numSchedulers;
    private PipeScheduler[] _schedulers;
    private ISocketsTrace _trace;
    private Socket _listenSocket;
    private int _schedulerIndex;
    private SocketTransportOptions _options;
    [CompilerGeneratedAttribute]
private EndPoint <EndPoint>k__BackingField;
    public EndPoint EndPoint { get; private set; }
    internal SocketConnectionListener(EndPoint endpoint, SocketTransportOptions options, ISocketsTrace trace);
    [CompilerGeneratedAttribute]
public sealed virtual EndPoint get_EndPoint();
    [CompilerGeneratedAttribute]
private void set_EndPoint(EndPoint value);
    internal void Bind();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketConnectionListener/<AcceptAsync>d__13")]
public sealed virtual ValueTask`1<ConnectionContext> AcceptAsync(CancellationToken cancellationToken);
    public sealed virtual ValueTask UnbindAsync(CancellationToken cancellationToken);
    public sealed virtual ValueTask DisposeAsync();
}
internal static class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketsStrings : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string OnlyIPEndPointsSupported { get; }
    internal static string TransportAlreadyBound { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_OnlyIPEndPointsSupported();
    internal static string get_TransportAlreadyBound();
}
public class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketTransportFactory : object {
    private SocketTransportOptions _options;
    private SocketsTrace _trace;
    public SocketTransportFactory(IOptions`1<SocketTransportOptions> options, ILoggerFactory loggerFactory);
    public sealed virtual ValueTask`1<IConnectionListener> BindAsync(EndPoint endpoint, CancellationToken cancellationToken);
}
public class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketTransportOptions : object {
    [CompilerGeneratedAttribute]
private int <IOQueueCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxReadBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxWriteBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<MemoryPool`1<byte>> <MemoryPoolFactory>k__BackingField;
    public int IOQueueCount { get; public set; }
    public bool NoDelay { get; public set; }
    public Nullable`1<long> MaxReadBufferSize { get; public set; }
    public Nullable`1<long> MaxWriteBufferSize { get; public set; }
    internal Func`1<MemoryPool`1<byte>> MemoryPoolFactory { get; internal set; }
    [CompilerGeneratedAttribute]
public int get_IOQueueCount();
    [CompilerGeneratedAttribute]
public void set_IOQueueCount(int value);
    [CompilerGeneratedAttribute]
public bool get_NoDelay();
    [CompilerGeneratedAttribute]
public void set_NoDelay(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxReadBufferSize();
    [CompilerGeneratedAttribute]
public void set_MaxReadBufferSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxWriteBufferSize();
    [CompilerGeneratedAttribute]
public void set_MaxWriteBufferSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
internal Func`1<MemoryPool`1<byte>> get_MemoryPoolFactory();
    [CompilerGeneratedAttribute]
internal void set_MemoryPoolFactory(Func`1<MemoryPool`1<byte>> value);
}
internal class System.Buffers.DiagnosticMemoryPool : MemoryPool`1<byte> {
    private MemoryPool`1<byte> _pool;
    private bool _allowLateReturn;
    private bool _rentTracking;
    private object _syncObj;
    private HashSet`1<DiagnosticPoolBlock> _blocks;
    private List`1<Exception> _blockAccessExceptions;
    private TaskCompletionSource`1<object> _allBlocksReturned;
    private int _totalBlocks;
    private static int AnySize;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    public bool IsDisposed { get; private set; }
    public int MaxBufferSize { get; }
    public DiagnosticMemoryPool(MemoryPool`1<byte> pool, bool allowLateReturn, bool rentTracking);
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public virtual IMemoryOwner`1<byte> Rent(int size);
    public virtual int get_MaxBufferSize();
    internal void Return(DiagnosticPoolBlock block);
    internal void ReportException(Exception exception);
    protected virtual void Dispose(bool disposing);
    private void SetAllBlocksReturned();
    private AggregateException CreateAccessExceptions();
    [AsyncStateMachineAttribute("System.Buffers.DiagnosticMemoryPool/<WhenAllBlocksReturnedAsync>d__22")]
public Task WhenAllBlocksReturnedAsync(TimeSpan timeout);
}
internal class System.Buffers.DiagnosticPoolBlock : MemoryManager`1<byte> {
    private DiagnosticMemoryPool _pool;
    private IMemoryOwner`1<byte> _memoryOwner;
    private Nullable`1<MemoryHandle> _memoryHandle;
    private Memory`1<byte> _memory;
    private object _syncObj;
    private bool _isDisposed;
    private int _pinCount;
    [CompilerGeneratedAttribute]
private StackTrace <Leaser>k__BackingField;
    public Memory`1<byte> Memory { get; }
    public StackTrace Leaser { get; public set; }
    internal DiagnosticPoolBlock(DiagnosticMemoryPool pool, IMemoryOwner`1<byte> memoryOwner);
    public virtual Memory`1<byte> get_Memory();
    protected virtual void Dispose(bool disposing);
    public virtual Span`1<byte> GetSpan();
    public virtual MemoryHandle Pin(int byteOffset);
    protected virtual bool TryGetArray(ArraySegment`1& segment);
    public virtual void Unpin();
    [CompilerGeneratedAttribute]
public StackTrace get_Leaser();
    [CompilerGeneratedAttribute]
public void set_Leaser(StackTrace value);
    public void Track();
}
internal class System.Buffers.MemoryPoolBlock : object {
    private int _offset;
    private int _length;
    [CompilerGeneratedAttribute]
private SlabMemoryPool <Pool>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryPoolSlab <Slab>k__BackingField;
    [CompilerGeneratedAttribute]
private Memory`1<byte> <Memory>k__BackingField;
    public SlabMemoryPool Pool { get; }
    public MemoryPoolSlab Slab { get; }
    public Memory`1<byte> Memory { get; }
    internal MemoryPoolBlock(SlabMemoryPool pool, MemoryPoolSlab slab, int offset, int length);
    [CompilerGeneratedAttribute]
public SlabMemoryPool get_Pool();
    [CompilerGeneratedAttribute]
public MemoryPoolSlab get_Slab();
    [CompilerGeneratedAttribute]
public sealed virtual Memory`1<byte> get_Memory();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public void Lease();
}
internal class System.Buffers.MemoryPoolSlab : object {
    private GCHandle _gcHandle;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private IntPtr <NativePointer>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Array>k__BackingField;
    public bool IsActive { get; }
    public IntPtr NativePointer { get; private set; }
    public Byte[] Array { get; private set; }
    public MemoryPoolSlab(Byte[] data);
    public bool get_IsActive();
    [CompilerGeneratedAttribute]
public IntPtr get_NativePointer();
    [CompilerGeneratedAttribute]
private void set_NativePointer(IntPtr value);
    [CompilerGeneratedAttribute]
public Byte[] get_Array();
    [CompilerGeneratedAttribute]
private void set_Array(Byte[] value);
    public static MemoryPoolSlab Create(int length);
    protected void Dispose(bool disposing);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
}
internal class System.Buffers.MemoryPoolThrowHelper : object {
    public static void ThrowArgumentOutOfRangeException(int sourceLength, int offset);
    private static ArgumentOutOfRangeException GetArgumentOutOfRangeException(int sourceLength, int offset);
    public static void ThrowInvalidOperationException_PinCountZero(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_ReturningPinnedBlock(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_DoubleDispose();
    public static void ThrowInvalidOperationException_BlockDoubleDispose(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_BlockReturnedToDisposedPool(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_BlockIsBackedByDisposedSlab(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_DisposingPoolWithActiveBlocks(int returned, int total, DiagnosticPoolBlock[] blocks);
    public static void ThrowInvalidOperationException_BlocksWereNotReturnedInTime(int returned, int total, DiagnosticPoolBlock[] blocks);
    private static string GenerateMessage(string message, DiagnosticPoolBlock[] blocks);
    public static void ThrowArgumentOutOfRangeException_BufferRequestTooLarge(int maxSize);
    public static void ThrowObjectDisposedException(ExceptionArgument argument);
    private static ArgumentOutOfRangeException GetArgumentOutOfRangeException_BufferRequestTooLarge(int maxSize);
    private static ObjectDisposedException GetObjectDisposedException(ExceptionArgument argument);
    private static string GetArgumentName(ExceptionArgument argument);
}
internal class System.Buffers.SlabMemoryPool : MemoryPool`1<byte> {
    private static int _blockSize;
    private static int _blockCount;
    [CompilerGeneratedAttribute]
private int <MaxBufferSize>k__BackingField;
    private static int _slabLength;
    private ConcurrentQueue`1<MemoryPoolBlock> _blocks;
    private ConcurrentStack`1<MemoryPoolSlab> _slabs;
    private bool _isDisposed;
    private int _totalAllocatedBlocks;
    private object _disposeSync;
    private static int AnySize;
    public int MaxBufferSize { get; }
    public static int BlockSize { get; }
    private static SlabMemoryPool();
    [CompilerGeneratedAttribute]
public virtual int get_MaxBufferSize();
    public static int get_BlockSize();
    public virtual IMemoryOwner`1<byte> Rent(int size);
    private MemoryPoolBlock Lease();
    private MemoryPoolBlock AllocateSlab();
    internal void Return(MemoryPoolBlock block);
    internal void RefreshBlock(MemoryPoolSlab slab, int offset, int length);
    protected virtual void Dispose(bool disposing);
}
internal static class System.Buffers.SlabMemoryPoolFactory : object {
    public static MemoryPool`1<byte> Create();
    public static MemoryPool`1<byte> CreateSlabMemoryPool();
}
internal class System.IO.Pipelines.DuplexPipe : object {
    [CompilerGeneratedAttribute]
private PipeReader <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private PipeWriter <Output>k__BackingField;
    public PipeReader Input { get; }
    public PipeWriter Output { get; }
    public DuplexPipe(PipeReader reader, PipeWriter writer);
    [CompilerGeneratedAttribute]
public sealed virtual PipeReader get_Input();
    [CompilerGeneratedAttribute]
public sealed virtual PipeWriter get_Output();
    public static DuplexPipePair CreateConnectionPair(PipeOptions inputOptions, PipeOptions outputOptions);
}
