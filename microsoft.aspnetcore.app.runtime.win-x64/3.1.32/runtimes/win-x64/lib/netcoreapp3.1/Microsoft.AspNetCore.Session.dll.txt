[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.SessionMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseSession(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseSession(IApplicationBuilder app, SessionOptions options);
}
public class Microsoft.AspNetCore.Builder.SessionOptions : object {
    private CookieBuilder _cookieBuilder;
    [CompilerGeneratedAttribute]
private TimeSpan <IdleTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <IOTimeout>k__BackingField;
    public CookieBuilder Cookie { get; public set; }
    public TimeSpan IdleTimeout { get; public set; }
    public TimeSpan IOTimeout { get; public set; }
    public CookieBuilder get_Cookie();
    public void set_Cookie(CookieBuilder value);
    [CompilerGeneratedAttribute]
public TimeSpan get_IdleTimeout();
    [CompilerGeneratedAttribute]
public void set_IdleTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_IOTimeout();
    [CompilerGeneratedAttribute]
public void set_IOTimeout(TimeSpan value);
}
internal static class Microsoft.AspNetCore.Session.CookieProtection : object {
    internal static string Protect(IDataProtector protector, string data);
    internal static string Unprotect(IDataProtector protector, string protectedText, ILogger logger);
    private static string Pad(string text);
}
public class Microsoft.AspNetCore.Session.DistributedSession : object {
    private static RandomNumberGenerator CryptoRandom;
    private static int IdByteCount;
    private static byte SerializationRevision;
    private static int KeyLengthLimit;
    private IDistributedCache _cache;
    private string _sessionKey;
    private TimeSpan _idleTimeout;
    private TimeSpan _ioTimeout;
    private Func`1<bool> _tryEstablishSession;
    private ILogger _logger;
    private IDictionary`2<EncodedKey, Byte[]> _store;
    private bool _isModified;
    private bool _loaded;
    private bool _isAvailable;
    private bool _isNewSessionKey;
    private string _sessionId;
    private Byte[] _sessionIdBytes;
    public bool IsAvailable { get; }
    public string Id { get; }
    private Byte[] IdBytes { get; }
    public IEnumerable`1<string> Keys { get; }
    public DistributedSession(IDistributedCache cache, string sessionKey, TimeSpan idleTimeout, TimeSpan ioTimeout, Func`1<bool> tryEstablishSession, ILoggerFactory loggerFactory, bool isNewSessionKey);
    private static DistributedSession();
    public sealed virtual bool get_IsAvailable();
    public sealed virtual string get_Id();
    private Byte[] get_IdBytes();
    public sealed virtual IEnumerable`1<string> get_Keys();
    public sealed virtual bool TryGetValue(string key, Byte[]& value);
    public sealed virtual void Set(string key, Byte[] value);
    public sealed virtual void Remove(string key);
    public sealed virtual void Clear();
    private void Load();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Session.DistributedSession/<LoadAsync>d__31")]
public sealed virtual Task LoadAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Session.DistributedSession/<CommitAsync>d__32")]
public sealed virtual Task CommitAsync(CancellationToken cancellationToken);
    private void Serialize(Stream output);
    private void Deserialize(Stream content);
    private void SerializeNumAs2Bytes(Stream output, int num);
    private int DeserializeNumFrom2Bytes(Stream content);
    private void SerializeNumAs3Bytes(Stream output, int num);
    private int DeserializeNumFrom3Bytes(Stream content);
    private void SerializeNumAs4Bytes(Stream output, int num);
    private int DeserializeNumFrom4Bytes(Stream content);
    private Byte[] ReadBytes(Stream stream, int count);
}
public class Microsoft.AspNetCore.Session.DistributedSessionStore : object {
    private IDistributedCache _cache;
    private ILoggerFactory _loggerFactory;
    public DistributedSessionStore(IDistributedCache cache, ILoggerFactory loggerFactory);
    public sealed virtual ISession Create(string sessionKey, TimeSpan idleTimeout, TimeSpan ioTimeout, Func`1<bool> tryEstablishSession, bool isNewSessionKey);
}
internal class Microsoft.AspNetCore.Session.EncodedKey : object {
    private string _keyString;
    private Nullable`1<int> _hashCode;
    [CompilerGeneratedAttribute]
private Byte[] <KeyBytes>k__BackingField;
    internal string KeyString { get; }
    internal Byte[] KeyBytes { get; private set; }
    internal EncodedKey(string key);
    public EncodedKey(Byte[] key);
    internal string get_KeyString();
    [CompilerGeneratedAttribute]
internal Byte[] get_KeyBytes();
    [CompilerGeneratedAttribute]
private void set_KeyBytes(Byte[] value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public interface Microsoft.AspNetCore.Session.ISessionStore {
    public abstract virtual ISession Create(string sessionKey, TimeSpan idleTimeout, TimeSpan ioTimeout, Func`1<bool> tryEstablishSession, bool isNewSessionKey);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Session.NoOpSessionStore : object {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<EncodedKey> <Keys>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<Byte[]> <Values>k__BackingField;
    public Byte[] Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ICollection`1<EncodedKey> Keys { get; }
    public ICollection`1<Byte[]> Values { get; }
    public sealed virtual Byte[] get_Item(EncodedKey key);
    public sealed virtual void set_Item(EncodedKey key, Byte[] value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<EncodedKey> get_Keys();
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<Byte[]> get_Values();
    public sealed virtual void Add(KeyValuePair`2<EncodedKey, Byte[]> item);
    public sealed virtual void Add(EncodedKey key, Byte[] value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<EncodedKey, Byte[]> item);
    public sealed virtual bool ContainsKey(EncodedKey key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<KeyValuePair`2<EncodedKey, Byte[]>> GetEnumerator();
    public sealed virtual bool Remove(KeyValuePair`2<EncodedKey, Byte[]> item);
    public sealed virtual bool Remove(EncodedKey key);
    public sealed virtual bool TryGetValue(EncodedKey key, Byte[]& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class Microsoft.AspNetCore.Session.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string Exception_KeyLengthIsExceeded { get; }
    internal static string Exception_InvalidSessionEstablishment { get; }
    internal static string Exception_InvalidToSerializeIn2Bytes { get; }
    internal static string Exception_InvalidToSerializeIn3Bytes { get; }
    internal static string Exception_NumberShouldNotBeNegative { get; }
    internal static string ArgumentCannotBeNullOrEmpty { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_Exception_KeyLengthIsExceeded();
    internal static string FormatException_KeyLengthIsExceeded(object p0);
    internal static string get_Exception_InvalidSessionEstablishment();
    internal static string get_Exception_InvalidToSerializeIn2Bytes();
    internal static string get_Exception_InvalidToSerializeIn3Bytes();
    internal static string get_Exception_NumberShouldNotBeNegative();
    internal static string get_ArgumentCannotBeNullOrEmpty();
}
public static class Microsoft.AspNetCore.Session.SessionDefaults : object {
    public static string CookieName;
    public static string CookiePath;
    private static SessionDefaults();
}
public class Microsoft.AspNetCore.Session.SessionFeature : object {
    [CompilerGeneratedAttribute]
private ISession <Session>k__BackingField;
    public ISession Session { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ISession get_Session();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Session(ISession value);
}
public class Microsoft.AspNetCore.Session.SessionMiddleware : object {
    private static RandomNumberGenerator CryptoRandom;
    private static int SessionKeyLength;
    private static Func`1<bool> ReturnTrue;
    private RequestDelegate _next;
    private SessionOptions _options;
    private ILogger _logger;
    private ISessionStore _sessionStore;
    private IDataProtector _dataProtector;
    public SessionMiddleware(RequestDelegate next, ILoggerFactory loggerFactory, IDataProtectionProvider dataProtectionProvider, ISessionStore sessionStore, IOptions`1<SessionOptions> options);
    private static SessionMiddleware();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Session.SessionMiddleware/<Invoke>d__9")]
public Task Invoke(HttpContext context);
}
internal static class Microsoft.AspNetCore.Session.SipHash : object {
    internal static int GetHashCode(Byte[] bytes);
    private static ulong SipHash_2_4_UlongCast_ForcedInline(Byte[] bytes);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.SessionServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddSession(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddSession(IServiceCollection services, Action`1<SessionOptions> configure);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.Logging.LoggingExtensions : object {
    private static Action`2<ILogger, Exception> _errorClosingTheSession;
    private static Action`3<ILogger, string, Exception> _accessingExpiredSession;
    private static Action`4<ILogger, string, string, Exception> _sessionStarted;
    private static Action`5<ILogger, string, string, int, Exception> _sessionLoaded;
    private static Action`5<ILogger, string, string, int, Exception> _sessionStored;
    private static Action`3<ILogger, string, Exception> _sessionCacheReadException;
    private static Action`2<ILogger, Exception> _errorUnprotectingCookie;
    private static Action`2<ILogger, Exception> _sessionLoadingTimeout;
    private static Action`2<ILogger, Exception> _sessionCommitTimeout;
    private static Action`2<ILogger, Exception> _sessionCommitCanceled;
    private static Action`2<ILogger, Exception> _sessionRefreshTimeout;
    private static Action`2<ILogger, Exception> _sessionRefreshCanceled;
    private static LoggingExtensions();
    [ExtensionAttribute]
public static void ErrorClosingTheSession(ILogger logger, Exception exception);
    [ExtensionAttribute]
public static void AccessingExpiredSession(ILogger logger, string sessionKey);
    [ExtensionAttribute]
public static void SessionStarted(ILogger logger, string sessionKey, string sessionId);
    [ExtensionAttribute]
public static void SessionLoaded(ILogger logger, string sessionKey, string sessionId, int count);
    [ExtensionAttribute]
public static void SessionStored(ILogger logger, string sessionKey, string sessionId, int count);
    [ExtensionAttribute]
public static void SessionCacheReadException(ILogger logger, string sessionKey, Exception exception);
    [ExtensionAttribute]
public static void ErrorUnprotectingSessionCookie(ILogger logger, Exception exception);
    [ExtensionAttribute]
public static void SessionLoadingTimeout(ILogger logger);
    [ExtensionAttribute]
public static void SessionCommitTimeout(ILogger logger);
    [ExtensionAttribute]
public static void SessionCommitCanceled(ILogger logger);
    [ExtensionAttribute]
public static void SessionRefreshTimeout(ILogger logger);
    [ExtensionAttribute]
public static void SessionRefreshCanceled(ILogger logger);
}
