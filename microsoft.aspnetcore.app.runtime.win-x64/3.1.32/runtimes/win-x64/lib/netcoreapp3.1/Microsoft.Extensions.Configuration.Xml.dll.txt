internal static class Microsoft.Extensions.Configuration.Xml.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string Error_InvalidFilePath { get; }
    internal static string Error_KeyIsDuplicated { get; }
    internal static string Error_NamespaceIsNotSupported { get; }
    internal static string Error_UnsupportedNodeType { get; }
    internal static string Msg_LineInfo { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_Error_InvalidFilePath();
    internal static string get_Error_KeyIsDuplicated();
    internal static string FormatError_KeyIsDuplicated(object p0, object p1);
    internal static string get_Error_NamespaceIsNotSupported();
    internal static string FormatError_NamespaceIsNotSupported(object p0);
    internal static string get_Error_UnsupportedNodeType();
    internal static string FormatError_UnsupportedNodeType(object p0, object p1);
    internal static string get_Msg_LineInfo();
    internal static string FormatMsg_LineInfo(object p0, object p1);
}
public class Microsoft.Extensions.Configuration.Xml.XmlConfigurationProvider : FileConfigurationProvider {
    [CompilerGeneratedAttribute]
private XmlDocumentDecryptor <Decryptor>k__BackingField;
    internal XmlDocumentDecryptor Decryptor { get; internal set; }
    public XmlConfigurationProvider(XmlConfigurationSource source);
    [CompilerGeneratedAttribute]
internal XmlDocumentDecryptor get_Decryptor();
    [CompilerGeneratedAttribute]
internal void set_Decryptor(XmlDocumentDecryptor value);
    public virtual void Load(Stream stream);
}
public class Microsoft.Extensions.Configuration.Xml.XmlConfigurationSource : FileConfigurationSource {
    public virtual IConfigurationProvider Build(IConfigurationBuilder builder);
}
public class Microsoft.Extensions.Configuration.Xml.XmlDocumentDecryptor : object {
    public static XmlDocumentDecryptor Instance;
    private Func`2<XmlDocument, EncryptedXml> _encryptedXmlFactory;
    internal XmlDocumentDecryptor(Func`2<XmlDocument, EncryptedXml> encryptedXmlFactory);
    private static XmlDocumentDecryptor();
    private static bool ContainsEncryptedData(XmlDocument document);
    public XmlReader CreateDecryptingXmlReader(Stream input, XmlReaderSettings settings);
    protected virtual XmlReader DecryptDocumentAndCreateXmlReader(XmlDocument document);
    private static EncryptedXml DefaultEncryptedXmlFactory(XmlDocument document);
}
public class Microsoft.Extensions.Configuration.Xml.XmlStreamConfigurationProvider : StreamConfigurationProvider {
    private static string NameAttributeKey;
    public XmlStreamConfigurationProvider(XmlStreamConfigurationSource source);
    public static IDictionary`2<string, string> Read(Stream stream, XmlDocumentDecryptor decryptor);
    public virtual void Load(Stream stream);
    private static void SkipUntilRootElement(XmlReader reader);
    private static string GetLineInfo(XmlReader reader);
    private static void ProcessAttributes(XmlReader reader, Stack`1<string> prefixStack, IDictionary`2<string, string> data, Action`4<XmlReader, Stack`1<string>, IDictionary`2<string, string>, XmlWriter> act, XmlWriter writer);
    private static void AddNamePrefix(XmlReader reader, Stack`1<string> prefixStack, IDictionary`2<string, string> data, XmlWriter writer);
    private static void AddAttributePair(XmlReader reader, Stack`1<string> prefixStack, IDictionary`2<string, string> data, XmlWriter writer);
}
public class Microsoft.Extensions.Configuration.Xml.XmlStreamConfigurationSource : StreamConfigurationSource {
    public virtual IConfigurationProvider Build(IConfigurationBuilder builder);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Configuration.XmlConfigurationExtensions : object {
    [ExtensionAttribute]
public static IConfigurationBuilder AddXmlFile(IConfigurationBuilder builder, string path);
    [ExtensionAttribute]
public static IConfigurationBuilder AddXmlFile(IConfigurationBuilder builder, string path, bool optional);
    [ExtensionAttribute]
public static IConfigurationBuilder AddXmlFile(IConfigurationBuilder builder, string path, bool optional, bool reloadOnChange);
    [ExtensionAttribute]
public static IConfigurationBuilder AddXmlFile(IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange);
    [ExtensionAttribute]
public static IConfigurationBuilder AddXmlFile(IConfigurationBuilder builder, Action`1<XmlConfigurationSource> configureSource);
    [ExtensionAttribute]
public static IConfigurationBuilder AddXmlStream(IConfigurationBuilder builder, Stream stream);
}
