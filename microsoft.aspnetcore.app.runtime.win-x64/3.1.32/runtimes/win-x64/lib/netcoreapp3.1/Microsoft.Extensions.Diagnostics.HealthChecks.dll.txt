internal class Microsoft.Extensions.DependencyInjection.HealthChecksBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public IServiceCollection Services { get; }
    public HealthChecksBuilder(IServiceCollection services);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
    public sealed virtual IHealthChecksBuilder Add(HealthCheckRegistration registration);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.HealthChecksBuilderAddCheckExtensions : object {
    [ExtensionAttribute]
public static IHealthChecksBuilder AddCheck(IHealthChecksBuilder builder, string name, IHealthCheck instance, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddCheck(IHealthChecksBuilder builder, string name, IHealthCheck instance, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddCheck(IHealthChecksBuilder builder, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddCheck(IHealthChecksBuilder builder, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddTypeActivatedCheck(IHealthChecksBuilder builder, string name, Object[] args);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddTypeActivatedCheck(IHealthChecksBuilder builder, string name, Nullable`1<HealthStatus> failureStatus, Object[] args);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddTypeActivatedCheck(IHealthChecksBuilder builder, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Object[] args);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddTypeActivatedCheck(IHealthChecksBuilder builder, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, TimeSpan timeout, Object[] args);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions : object {
    [ExtensionAttribute]
public static IHealthChecksBuilder AddCheck(IHealthChecksBuilder builder, string name, Func`1<HealthCheckResult> check, IEnumerable`1<string> tags);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddCheck(IHealthChecksBuilder builder, string name, Func`1<HealthCheckResult> check, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddCheck(IHealthChecksBuilder builder, string name, Func`2<CancellationToken, HealthCheckResult> check, IEnumerable`1<string> tags);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddCheck(IHealthChecksBuilder builder, string name, Func`2<CancellationToken, HealthCheckResult> check, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddAsyncCheck(IHealthChecksBuilder builder, string name, Func`1<Task`1<HealthCheckResult>> check, IEnumerable`1<string> tags);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddAsyncCheck(IHealthChecksBuilder builder, string name, Func`1<Task`1<HealthCheckResult>> check, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddAsyncCheck(IHealthChecksBuilder builder, string name, Func`2<CancellationToken, Task`1<HealthCheckResult>> check, IEnumerable`1<string> tags);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddAsyncCheck(IHealthChecksBuilder builder, string name, Func`2<CancellationToken, Task`1<HealthCheckResult>> check, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.HealthCheckServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IHealthChecksBuilder AddHealthChecks(IServiceCollection services);
}
public interface Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
    public IServiceCollection Services { get; }
    public abstract virtual IHealthChecksBuilder Add(HealthCheckRegistration registration);
    public abstract virtual IServiceCollection get_Services();
}
internal class Microsoft.Extensions.Diagnostics.HealthChecks.DefaultHealthCheckService : HealthCheckService {
    private IServiceScopeFactory _scopeFactory;
    private IOptions`1<HealthCheckServiceOptions> _options;
    private ILogger`1<DefaultHealthCheckService> _logger;
    public DefaultHealthCheckService(IServiceScopeFactory scopeFactory, IOptions`1<HealthCheckServiceOptions> options, ILogger`1<DefaultHealthCheckService> logger);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Diagnostics.HealthChecks.DefaultHealthCheckService/<CheckHealthAsync>d__4")]
public virtual Task`1<HealthReport> CheckHealthAsync(Func`2<HealthCheckRegistration, bool> predicate, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Diagnostics.HealthChecks.DefaultHealthCheckService/<RunCheckAsync>d__5")]
private Task`1<HealthReportEntry> RunCheckAsync(IServiceScope scope, HealthCheckRegistration registration, CancellationToken cancellationToken);
    private static void ValidateRegistrations(IEnumerable`1<HealthCheckRegistration> registrations);
}
internal class Microsoft.Extensions.Diagnostics.HealthChecks.DelegateHealthCheck : object {
    private Func`2<CancellationToken, Task`1<HealthCheckResult>> _check;
    public DelegateHealthCheck(Func`2<CancellationToken, Task`1<HealthCheckResult>> check);
    public sealed virtual Task`1<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken);
}
internal class Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckLogScope : object {
    [CompilerGeneratedAttribute]
private string <HealthCheckName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Count>k__BackingField;
    public string HealthCheckName { get; }
    private int System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Count { get; }
    private KeyValuePair`2<string, object> System.Collections.Generic.IReadOnlyList<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Item { get; }
    public HealthCheckLogScope(string healthCheckName);
    [CompilerGeneratedAttribute]
public string get_HealthCheckName();
    [CompilerGeneratedAttribute]
private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_Count();
    private sealed virtual override KeyValuePair`2<string, object> System.Collections.Generic.IReadOnlyList<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_Item(int index);
    [IteratorStateMachineAttribute("Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckLogScope/<System-Collections-Generic-IEnumerable<System-Collections-Generic-KeyValuePair<System-String,System-Object>>-GetEnumerator>d__9")]
private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckPublisherHostedService : object {
    private HealthCheckService _healthCheckService;
    private IOptions`1<HealthCheckPublisherOptions> _options;
    private ILogger _logger;
    private IHealthCheckPublisher[] _publishers;
    private CancellationTokenSource _stopping;
    private Timer _timer;
    internal bool IsStopping { get; }
    internal bool IsTimerRunning { get; }
    public HealthCheckPublisherHostedService(HealthCheckService healthCheckService, IOptions`1<HealthCheckPublisherOptions> options, ILogger`1<HealthCheckPublisherHostedService> logger, IEnumerable`1<IHealthCheckPublisher> publishers);
    internal bool get_IsStopping();
    internal bool get_IsTimerRunning();
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckPublisherHostedService/<Timer_Tick>d__13")]
private void Timer_Tick(object state);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckPublisherHostedService/<RunAsync>d__14")]
internal Task RunAsync();
    [AsyncStateMachineAttribute("Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckPublisherHostedService/<RunAsyncCore>d__15")]
private Task RunAsyncCore(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckPublisherHostedService/<RunPublisherAsync>d__16")]
private Task RunPublisherAsync(IHealthCheckPublisher publisher, HealthReport report, CancellationToken cancellationToken);
}
public class Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckPublisherOptions : object {
    private TimeSpan _delay;
    private TimeSpan _period;
    [CompilerGeneratedAttribute]
private Func`2<HealthCheckRegistration, bool> <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    public TimeSpan Delay { get; public set; }
    public TimeSpan Period { get; public set; }
    public Func`2<HealthCheckRegistration, bool> Predicate { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public TimeSpan get_Delay();
    public void set_Delay(TimeSpan value);
    public TimeSpan get_Period();
    public void set_Period(TimeSpan value);
    [CompilerGeneratedAttribute]
public Func`2<HealthCheckRegistration, bool> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Func`2<HealthCheckRegistration, bool> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
}
public abstract class Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckService : object {
    public Task`1<HealthReport> CheckHealthAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<HealthReport> CheckHealthAsync(Func`2<HealthCheckRegistration, bool> predicate, CancellationToken cancellationToken);
}
public class Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckServiceOptions : object {
    [CompilerGeneratedAttribute]
private ICollection`1<HealthCheckRegistration> <Registrations>k__BackingField;
    public ICollection`1<HealthCheckRegistration> Registrations { get; }
    [CompilerGeneratedAttribute]
public ICollection`1<HealthCheckRegistration> get_Registrations();
}
internal static class Microsoft.Extensions.Internal.NonCapturingTimer : object {
    public static Timer Create(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);
}
internal class Microsoft.Extensions.Internal.ValueStopwatch : ValueType {
    private static double TimestampToTicks;
    private long _startTimestamp;
    public bool IsActive { get; }
    private ValueStopwatch(long startTimestamp);
    private static ValueStopwatch();
    public bool get_IsActive();
    public static ValueStopwatch StartNew();
    public TimeSpan GetElapsedTime();
}
