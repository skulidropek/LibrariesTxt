internal class Microsoft.Extensions.DependencyInjection.DefaultHttpClientBuilder : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public string Name { get; }
    public IServiceCollection Services { get; }
    public DefaultHttpClientBuilder(IServiceCollection services, string name);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions : object {
    [ExtensionAttribute]
public static IHttpClientBuilder ConfigureHttpClient(IHttpClientBuilder builder, Action`1<HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder ConfigureHttpClient(IHttpClientBuilder builder, Action`2<IServiceProvider, HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpMessageHandler(IHttpClientBuilder builder, Func`1<DelegatingHandler> configureHandler);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpMessageHandler(IHttpClientBuilder builder, Func`2<IServiceProvider, DelegatingHandler> configureHandler);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpMessageHandler(IHttpClientBuilder builder);
    [ExtensionAttribute]
public static IHttpClientBuilder ConfigurePrimaryHttpMessageHandler(IHttpClientBuilder builder, Func`1<HttpMessageHandler> configureHandler);
    [ExtensionAttribute]
public static IHttpClientBuilder ConfigurePrimaryHttpMessageHandler(IHttpClientBuilder builder, Func`2<IServiceProvider, HttpMessageHandler> configureHandler);
    [ExtensionAttribute]
public static IHttpClientBuilder ConfigurePrimaryHttpMessageHandler(IHttpClientBuilder builder);
    [ExtensionAttribute]
public static IHttpClientBuilder ConfigureHttpMessageHandlerBuilder(IHttpClientBuilder builder, Action`1<HttpMessageHandlerBuilder> configureBuilder);
    [ExtensionAttribute]
public static IHttpClientBuilder AddTypedClient(IHttpClientBuilder builder);
    [ExtensionAttribute]
internal static IHttpClientBuilder AddTypedClientCore(IHttpClientBuilder builder, bool validateSingleType);
    [ExtensionAttribute]
public static IHttpClientBuilder AddTypedClient(IHttpClientBuilder builder);
    [ExtensionAttribute]
internal static IHttpClientBuilder AddTypedClientCore(IHttpClientBuilder builder, bool validateSingleType);
    [ExtensionAttribute]
public static IHttpClientBuilder AddTypedClient(IHttpClientBuilder builder, Func`2<HttpClient, TClient> factory);
    [ExtensionAttribute]
internal static IHttpClientBuilder AddTypedClientCore(IHttpClientBuilder builder, Func`2<HttpClient, TClient> factory, bool validateSingleType);
    [ExtensionAttribute]
public static IHttpClientBuilder AddTypedClient(IHttpClientBuilder builder, Func`3<HttpClient, IServiceProvider, TClient> factory);
    [ExtensionAttribute]
internal static IHttpClientBuilder AddTypedClientCore(IHttpClientBuilder builder, Func`3<HttpClient, IServiceProvider, TClient> factory, bool validateSingleType);
    [ExtensionAttribute]
public static IHttpClientBuilder SetHandlerLifetime(IHttpClientBuilder builder, TimeSpan handlerLifetime);
    private static void ReserveClient(IHttpClientBuilder builder, Type type, string name, bool validateSingleType);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddHttpClient(IServiceCollection services);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name, Action`1<HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name, Action`2<IServiceProvider, HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, Action`1<HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, Action`2<IServiceProvider, HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, Action`1<HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, Action`2<IServiceProvider, HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name, Action`1<HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name, Action`2<IServiceProvider, HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name, Action`1<HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name, Action`2<IServiceProvider, HttpClient> configureClient);
}
internal class Microsoft.Extensions.DependencyInjection.HttpClientMappingRegistry : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Type> <NamedClientRegistrations>k__BackingField;
    public Dictionary`2<string, Type> NamedClientRegistrations { get; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Type> get_NamedClientRegistrations();
}
public interface Microsoft.Extensions.DependencyInjection.IHttpClientBuilder {
    public string Name { get; }
    public IServiceCollection Services { get; }
    public abstract virtual string get_Name();
    public abstract virtual IServiceCollection get_Services();
}
internal class Microsoft.Extensions.Http.ActiveHandlerTrackingEntry : object {
    private static TimerCallback _timerCallback;
    private object _lock;
    private bool _timerInitialized;
    private Timer _timer;
    private TimerCallback _callback;
    [CompilerGeneratedAttribute]
private LifetimeTrackingHttpMessageHandler <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceScope <Scope>k__BackingField;
    public LifetimeTrackingHttpMessageHandler Handler { get; private set; }
    public TimeSpan Lifetime { get; }
    public string Name { get; }
    public IServiceScope Scope { get; }
    public ActiveHandlerTrackingEntry(string name, LifetimeTrackingHttpMessageHandler handler, IServiceScope scope, TimeSpan lifetime);
    private static ActiveHandlerTrackingEntry();
    [CompilerGeneratedAttribute]
public LifetimeTrackingHttpMessageHandler get_Handler();
    [CompilerGeneratedAttribute]
private void set_Handler(LifetimeTrackingHttpMessageHandler value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Lifetime();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IServiceScope get_Scope();
    public void StartExpiryTimer(TimerCallback callback);
    private void StartExpiryTimerSlow(TimerCallback callback);
    private void Timer_Tick();
}
internal class Microsoft.Extensions.Http.DefaultHttpClientFactory : object {
    private static TimerCallback _cleanupCallback;
    private ILogger _logger;
    private IServiceProvider _services;
    private IServiceScopeFactory _scopeFactory;
    private IOptionsMonitor`1<HttpClientFactoryOptions> _optionsMonitor;
    private IHttpMessageHandlerBuilderFilter[] _filters;
    private Func`2<string, Lazy`1<ActiveHandlerTrackingEntry>> _entryFactory;
    private TimeSpan DefaultCleanupInterval;
    private Timer _cleanupTimer;
    private object _cleanupTimerLock;
    private object _cleanupActiveLock;
    internal ConcurrentDictionary`2<string, Lazy`1<ActiveHandlerTrackingEntry>> _activeHandlers;
    internal ConcurrentQueue`1<ExpiredHandlerTrackingEntry> _expiredHandlers;
    private TimerCallback _expiryCallback;
    public DefaultHttpClientFactory(IServiceProvider services, IServiceScopeFactory scopeFactory, ILoggerFactory loggerFactory, IOptionsMonitor`1<HttpClientFactoryOptions> optionsMonitor, IEnumerable`1<IHttpMessageHandlerBuilderFilter> filters);
    private static DefaultHttpClientFactory();
    public sealed virtual HttpClient CreateClient(string name);
    public sealed virtual HttpMessageHandler CreateHandler(string name);
    internal ActiveHandlerTrackingEntry CreateHandlerEntry(string name);
    internal void ExpiryTimer_Tick(object state);
    internal virtual void StartHandlerEntryTimer(ActiveHandlerTrackingEntry entry);
    internal virtual void StartCleanupTimer();
    internal virtual void StopCleanupTimer();
    internal void CleanupTimer_Tick();
    [CompilerGeneratedAttribute]
private Lazy`1<ActiveHandlerTrackingEntry> <.ctor>b__14_0(string name);
}
internal class Microsoft.Extensions.Http.DefaultHttpMessageHandlerBuilder : HttpMessageHandlerBuilder {
    private string _name;
    [CompilerGeneratedAttribute]
private HttpMessageHandler <PrimaryHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DelegatingHandler> <AdditionalHandlers>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <Services>k__BackingField;
    public string Name { get; public set; }
    public HttpMessageHandler PrimaryHandler { get; public set; }
    public IList`1<DelegatingHandler> AdditionalHandlers { get; }
    public IServiceProvider Services { get; }
    public DefaultHttpMessageHandlerBuilder(IServiceProvider services);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual HttpMessageHandler get_PrimaryHandler();
    [CompilerGeneratedAttribute]
public virtual void set_PrimaryHandler(HttpMessageHandler value);
    [CompilerGeneratedAttribute]
public virtual IList`1<DelegatingHandler> get_AdditionalHandlers();
    [CompilerGeneratedAttribute]
public virtual IServiceProvider get_Services();
    public virtual HttpMessageHandler Build();
}
internal class Microsoft.Extensions.Http.DefaultTypedHttpClientFactory`1 : object {
    private Cache<TClient> _cache;
    private IServiceProvider _services;
    public DefaultTypedHttpClientFactory`1(Cache<TClient> cache, IServiceProvider services);
    public sealed virtual TClient CreateClient(HttpClient httpClient);
}
internal class Microsoft.Extensions.Http.ExpiredHandlerTrackingEntry : object {
    private WeakReference _livenessTracker;
    [CompilerGeneratedAttribute]
private HttpMessageHandler <InnerHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceScope <Scope>k__BackingField;
    public bool CanDispose { get; }
    public HttpMessageHandler InnerHandler { get; }
    public string Name { get; }
    public IServiceScope Scope { get; }
    public ExpiredHandlerTrackingEntry(ActiveHandlerTrackingEntry other);
    public bool get_CanDispose();
    [CompilerGeneratedAttribute]
public HttpMessageHandler get_InnerHandler();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IServiceScope get_Scope();
}
public class Microsoft.Extensions.Http.HttpClientFactoryOptions : object {
    internal static TimeSpan MinimumHandlerLifetime;
    private TimeSpan _handlerLifetime;
    [CompilerGeneratedAttribute]
private IList`1<Action`1<HttpMessageHandlerBuilder>> <HttpMessageHandlerBuilderActions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Action`1<HttpClient>> <HttpClientActions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressHandlerScope>k__BackingField;
    public IList`1<Action`1<HttpMessageHandlerBuilder>> HttpMessageHandlerBuilderActions { get; }
    public IList`1<Action`1<HttpClient>> HttpClientActions { get; }
    public TimeSpan HandlerLifetime { get; public set; }
    public bool SuppressHandlerScope { get; public set; }
    private static HttpClientFactoryOptions();
    [CompilerGeneratedAttribute]
public IList`1<Action`1<HttpMessageHandlerBuilder>> get_HttpMessageHandlerBuilderActions();
    [CompilerGeneratedAttribute]
public IList`1<Action`1<HttpClient>> get_HttpClientActions();
    public TimeSpan get_HandlerLifetime();
    public void set_HandlerLifetime(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_SuppressHandlerScope();
    [CompilerGeneratedAttribute]
public void set_SuppressHandlerScope(bool value);
}
public abstract class Microsoft.Extensions.Http.HttpMessageHandlerBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <Services>k__BackingField;
    public string Name { get; public set; }
    public HttpMessageHandler PrimaryHandler { get; public set; }
    public IList`1<DelegatingHandler> AdditionalHandlers { get; }
    public IServiceProvider Services { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual HttpMessageHandler get_PrimaryHandler();
    public abstract virtual void set_PrimaryHandler(HttpMessageHandler value);
    public abstract virtual IList`1<DelegatingHandler> get_AdditionalHandlers();
    [CompilerGeneratedAttribute]
public virtual IServiceProvider get_Services();
    public abstract virtual HttpMessageHandler Build();
    protected internal static HttpMessageHandler CreateHandlerPipeline(HttpMessageHandler primaryHandler, IEnumerable`1<DelegatingHandler> additionalHandlers);
}
public interface Microsoft.Extensions.Http.IHttpMessageHandlerBuilderFilter {
    public abstract virtual Action`1<HttpMessageHandlerBuilder> Configure(Action`1<HttpMessageHandlerBuilder> next);
}
public interface Microsoft.Extensions.Http.ITypedHttpClientFactory`1 {
    public abstract virtual TClient CreateClient(HttpClient httpClient);
}
internal class Microsoft.Extensions.Http.LifetimeTrackingHttpMessageHandler : DelegatingHandler {
    public LifetimeTrackingHttpMessageHandler(HttpMessageHandler innerHandler);
    protected virtual void Dispose(bool disposing);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Extensions.Http.Logging.HttpHeadersLogValue : object {
    private Kind _kind;
    private string _formatted;
    private List`1<KeyValuePair`2<string, object>> _values;
    [CompilerGeneratedAttribute]
private HttpHeaders <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpHeaders <ContentHeaders>k__BackingField;
    public HttpHeaders Headers { get; }
    public HttpHeaders ContentHeaders { get; }
    private List`1<KeyValuePair`2<string, object>> Values { get; }
    public KeyValuePair`2<string, object> Item { get; }
    public int Count { get; }
    public HttpHeadersLogValue(Kind kind, HttpHeaders headers, HttpHeaders contentHeaders);
    [CompilerGeneratedAttribute]
public HttpHeaders get_Headers();
    [CompilerGeneratedAttribute]
public HttpHeaders get_ContentHeaders();
    private List`1<KeyValuePair`2<string, object>> get_Values();
    public sealed virtual KeyValuePair`2<string, object> get_Item(int index);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
public class Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler : DelegatingHandler {
    private ILogger _logger;
    public LoggingHttpMessageHandler(ILogger logger);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler/<SendAsync>d__2")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [DebuggerHiddenAttribute]
[CompilerGeneratedAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler : DelegatingHandler {
    private ILogger _logger;
    public LoggingScopeHttpMessageHandler(ILogger logger);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler/<SendAsync>d__2")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
internal class Microsoft.Extensions.Http.LoggingHttpMessageHandlerBuilderFilter : object {
    private ILoggerFactory _loggerFactory;
    public LoggingHttpMessageHandlerBuilderFilter(ILoggerFactory loggerFactory);
    public sealed virtual Action`1<HttpMessageHandlerBuilder> Configure(Action`1<HttpMessageHandlerBuilder> next);
}
internal static class Microsoft.Extensions.Http.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string HttpMessageHandlerBuilder_AdditionalHandlerIsNull { get; }
    internal static string HttpMessageHandlerBuilder_AdditionHandlerIsInvalid { get; }
    internal static string HttpMessageHandlerBuilder_PrimaryHandlerIsNull { get; }
    internal static string HandlerLifetime_InvalidValue { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_HttpMessageHandlerBuilder_AdditionalHandlerIsNull();
    internal static string FormatHttpMessageHandlerBuilder_AdditionalHandlerIsNull(object p0);
    internal static string get_HttpMessageHandlerBuilder_AdditionHandlerIsInvalid();
    internal static string FormatHttpMessageHandlerBuilder_AdditionHandlerIsInvalid(object p0, object p1, object p2, object p3, object p4);
    internal static string get_HttpMessageHandlerBuilder_PrimaryHandlerIsNull();
    internal static string FormatHttpMessageHandlerBuilder_PrimaryHandlerIsNull(object p0);
    internal static string get_HandlerLifetime_InvalidValue();
}
internal static class Microsoft.Extensions.Internal.NonCapturingTimer : object {
    public static Timer Create(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);
}
internal class Microsoft.Extensions.Internal.TypeNameHelper : object {
    private static char DefaultNestedTypeDelimiter;
    private static Dictionary`2<Type, string> _builtInTypeNames;
    private static TypeNameHelper();
    public static string GetTypeDisplayName(object item, bool fullName);
    public static string GetTypeDisplayName(Type type, bool fullName, bool includeGenericParameterNames, bool includeGenericParameters, char nestedTypeDelimiter);
    private static void ProcessType(StringBuilder builder, Type type, DisplayNameOptions& options);
    private static void ProcessArrayType(StringBuilder builder, Type type, DisplayNameOptions& options);
    private static void ProcessGenericType(StringBuilder builder, Type type, Type[] genericArguments, int length, DisplayNameOptions& options);
}
internal class Microsoft.Extensions.Internal.ValueStopwatch : ValueType {
    private static double TimestampToTicks;
    private long _startTimestamp;
    public bool IsActive { get; }
    private ValueStopwatch(long startTimestamp);
    private static ValueStopwatch();
    public bool get_IsActive();
    public static ValueStopwatch StartNew();
    public TimeSpan GetElapsedTime();
}
[ExtensionAttribute]
public static class System.Net.Http.HttpClientFactoryExtensions : object {
    [ExtensionAttribute]
public static HttpClient CreateClient(IHttpClientFactory factory);
}
[ExtensionAttribute]
public static class System.Net.Http.HttpMessageHandlerFactoryExtensions : object {
    [ExtensionAttribute]
public static HttpMessageHandler CreateHandler(IHttpMessageHandlerFactory factory);
}
public interface System.Net.Http.IHttpClientFactory {
    public abstract virtual HttpClient CreateClient(string name);
}
public interface System.Net.Http.IHttpMessageHandlerFactory {
    public abstract virtual HttpMessageHandler CreateHandler(string name);
}
