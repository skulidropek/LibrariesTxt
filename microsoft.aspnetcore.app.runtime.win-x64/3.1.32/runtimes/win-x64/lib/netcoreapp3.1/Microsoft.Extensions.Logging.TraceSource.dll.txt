internal class Microsoft.Extensions.Logging.TraceSource.TraceSourceLogger : object {
    private TraceSource _traceSource;
    public TraceSourceLogger(TraceSource traceSource);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    private static TraceEventType GetEventType(LogLevel logLevel);
    public sealed virtual IDisposable BeginScope(TState state);
}
[ProviderAliasAttribute("TraceSource")]
public class Microsoft.Extensions.Logging.TraceSource.TraceSourceLoggerProvider : object {
    private SourceSwitch _rootSourceSwitch;
    private TraceListener _rootTraceListener;
    private ConcurrentDictionary`2<string, TraceSource> _sources;
    private bool _disposed;
    public TraceSourceLoggerProvider(SourceSwitch rootSourceSwitch);
    public TraceSourceLoggerProvider(SourceSwitch rootSourceSwitch, TraceListener rootTraceListener);
    public sealed virtual ILogger CreateLogger(string name);
    private TraceSource GetOrAddTraceSource(string name);
    private TraceSource InitializeTraceSource(string traceSourceName);
    private static string ParentSourceName(string traceSourceName);
    private static bool HasDefaultListeners(TraceSource traceSource);
    private static bool HasDefaultSwitch(TraceSource traceSource);
    public sealed virtual void Dispose();
}
internal class Microsoft.Extensions.Logging.TraceSource.TraceSourceScope : object {
    private bool _isDisposed;
    public TraceSourceScope(object state);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.TraceSourceFactoryExtensions : object {
    [ExtensionAttribute]
public static ILoggingBuilder AddTraceSource(ILoggingBuilder builder, string switchName);
    [ExtensionAttribute]
public static ILoggingBuilder AddTraceSource(ILoggingBuilder builder, string switchName, TraceListener listener);
    [ExtensionAttribute]
public static ILoggingBuilder AddTraceSource(ILoggingBuilder builder, SourceSwitch sourceSwitch);
    [ExtensionAttribute]
public static ILoggingBuilder AddTraceSource(ILoggingBuilder builder, SourceSwitch sourceSwitch, TraceListener listener);
}
