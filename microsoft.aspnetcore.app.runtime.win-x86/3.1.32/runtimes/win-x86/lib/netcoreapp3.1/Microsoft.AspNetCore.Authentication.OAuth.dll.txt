[ExtensionAttribute]
public static class Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions : object {
    [ExtensionAttribute]
public static void MapJsonKey(ClaimActionCollection collection, string claimType, string jsonKey);
    [ExtensionAttribute]
public static void MapJsonKey(ClaimActionCollection collection, string claimType, string jsonKey, string valueType);
    [ExtensionAttribute]
public static void MapJsonSubKey(ClaimActionCollection collection, string claimType, string jsonKey, string subKey);
    [ExtensionAttribute]
public static void MapJsonSubKey(ClaimActionCollection collection, string claimType, string jsonKey, string subKey, string valueType);
    [ExtensionAttribute]
public static void MapCustomJson(ClaimActionCollection collection, string claimType, Func`2<JsonElement, string> resolver);
    [ExtensionAttribute]
public static void MapCustomJson(ClaimActionCollection collection, string claimType, string valueType, Func`2<JsonElement, string> resolver);
    [ExtensionAttribute]
public static void MapAll(ClaimActionCollection collection);
    [ExtensionAttribute]
public static void MapAllExcept(ClaimActionCollection collection, String[] exclusions);
    [ExtensionAttribute]
public static void DeleteClaim(ClaimActionCollection collection, string claimType);
    [ExtensionAttribute]
public static void DeleteClaims(ClaimActionCollection collection, String[] claimTypes);
}
public abstract class Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimAction : object {
    [CompilerGeneratedAttribute]
private string <ClaimType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueType>k__BackingField;
    public string ClaimType { get; }
    public string ValueType { get; }
    public ClaimAction(string claimType, string valueType);
    [CompilerGeneratedAttribute]
public string get_ClaimType();
    [CompilerGeneratedAttribute]
public string get_ValueType();
    public abstract virtual void Run(JsonElement userData, ClaimsIdentity identity, string issuer);
}
public class Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection : object {
    [CompilerGeneratedAttribute]
private IList`1<ClaimAction> <Actions>k__BackingField;
    private IList`1<ClaimAction> Actions { get; }
    [CompilerGeneratedAttribute]
private IList`1<ClaimAction> get_Actions();
    public void Clear();
    public void Remove(string claimType);
    public void Add(ClaimAction action);
    public sealed virtual IEnumerator`1<ClaimAction> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.AspNetCore.Authentication.OAuth.Claims.CustomJsonClaimAction : ClaimAction {
    [CompilerGeneratedAttribute]
private Func`2<JsonElement, string> <Resolver>k__BackingField;
    public Func`2<JsonElement, string> Resolver { get; }
    public CustomJsonClaimAction(string claimType, string valueType, Func`2<JsonElement, string> resolver);
    [CompilerGeneratedAttribute]
public Func`2<JsonElement, string> get_Resolver();
    public virtual void Run(JsonElement userData, ClaimsIdentity identity, string issuer);
}
public class Microsoft.AspNetCore.Authentication.OAuth.Claims.DeleteClaimAction : ClaimAction {
    public DeleteClaimAction(string claimType);
    public virtual void Run(JsonElement userData, ClaimsIdentity identity, string issuer);
}
public class Microsoft.AspNetCore.Authentication.OAuth.Claims.JsonKeyClaimAction : ClaimAction {
    [CompilerGeneratedAttribute]
private string <JsonKey>k__BackingField;
    public string JsonKey { get; }
    public JsonKeyClaimAction(string claimType, string valueType, string jsonKey);
    [CompilerGeneratedAttribute]
public string get_JsonKey();
    public virtual void Run(JsonElement userData, ClaimsIdentity identity, string issuer);
    private void AddClaim(string value, ClaimsIdentity identity, string issuer);
}
public class Microsoft.AspNetCore.Authentication.OAuth.Claims.JsonSubKeyClaimAction : JsonKeyClaimAction {
    [CompilerGeneratedAttribute]
private string <SubKey>k__BackingField;
    public string SubKey { get; }
    public JsonSubKeyClaimAction(string claimType, string valueType, string jsonKey, string subKey);
    [CompilerGeneratedAttribute]
public string get_SubKey();
    public virtual void Run(JsonElement userData, ClaimsIdentity identity, string issuer);
    private static string GetValue(JsonElement userData, string propertyName, string subProperty);
}
public class Microsoft.AspNetCore.Authentication.OAuth.Claims.MapAllClaimsAction : ClaimAction {
    public virtual void Run(JsonElement userData, ClaimsIdentity identity, string issuer);
}
public class Microsoft.AspNetCore.Authentication.OAuth.OAuthChallengeProperties : AuthenticationProperties {
    public static string ScopeKey;
    public ICollection`1<string> Scope { get; public set; }
    public OAuthChallengeProperties(IDictionary`2<string, string> items);
    public OAuthChallengeProperties(IDictionary`2<string, string> items, IDictionary`2<string, object> parameters);
    private static OAuthChallengeProperties();
    public ICollection`1<string> get_Scope();
    public void set_Scope(ICollection`1<string> value);
    public virtual void SetScope(String[] scopes);
}
public class Microsoft.AspNetCore.Authentication.OAuth.OAuthCodeExchangeContext : object {
    [CompilerGeneratedAttribute]
private AuthenticationProperties <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedirectUri>k__BackingField;
    public AuthenticationProperties Properties { get; }
    public string Code { get; }
    public string RedirectUri { get; }
    public OAuthCodeExchangeContext(AuthenticationProperties properties, string code, string redirectUri);
    [CompilerGeneratedAttribute]
public AuthenticationProperties get_Properties();
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public string get_RedirectUri();
}
public static class Microsoft.AspNetCore.Authentication.OAuth.OAuthConstants : object {
    public static string CodeVerifierKey;
    public static string CodeChallengeKey;
    public static string CodeChallengeMethodKey;
    public static string CodeChallengeMethodS256;
    private static OAuthConstants();
}
public class Microsoft.AspNetCore.Authentication.OAuth.OAuthCreatingTicketContext : ResultContext`1<OAuthOptions> {
    [CompilerGeneratedAttribute]
private JsonElement <User>k__BackingField;
    [CompilerGeneratedAttribute]
private OAuthTokenResponse <TokenResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpClient <Backchannel>k__BackingField;
    public JsonElement User { get; }
    public OAuthTokenResponse TokenResponse { get; }
    public string AccessToken { get; }
    public string TokenType { get; }
    public string RefreshToken { get; }
    public Nullable`1<TimeSpan> ExpiresIn { get; }
    public HttpClient Backchannel { get; }
    public ClaimsIdentity Identity { get; }
    public OAuthCreatingTicketContext(ClaimsPrincipal principal, AuthenticationProperties properties, HttpContext context, AuthenticationScheme scheme, OAuthOptions options, HttpClient backchannel, OAuthTokenResponse tokens, JsonElement user);
    [CompilerGeneratedAttribute]
public JsonElement get_User();
    [CompilerGeneratedAttribute]
public OAuthTokenResponse get_TokenResponse();
    public string get_AccessToken();
    public string get_TokenType();
    public string get_RefreshToken();
    public Nullable`1<TimeSpan> get_ExpiresIn();
    [CompilerGeneratedAttribute]
public HttpClient get_Backchannel();
    public ClaimsIdentity get_Identity();
    public void RunClaimActions();
    public void RunClaimActions(JsonElement userData);
}
public static class Microsoft.AspNetCore.Authentication.OAuth.OAuthDefaults : object {
    public static string DisplayName;
    private static OAuthDefaults();
}
public class Microsoft.AspNetCore.Authentication.OAuth.OAuthEvents : RemoteAuthenticationEvents {
    [CompilerGeneratedAttribute]
private Func`2<OAuthCreatingTicketContext, Task> <OnCreatingTicket>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<RedirectContext`1<OAuthOptions>, Task> <OnRedirectToAuthorizationEndpoint>k__BackingField;
    public Func`2<OAuthCreatingTicketContext, Task> OnCreatingTicket { get; public set; }
    public Func`2<RedirectContext`1<OAuthOptions>, Task> OnRedirectToAuthorizationEndpoint { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<OAuthCreatingTicketContext, Task> get_OnCreatingTicket();
    [CompilerGeneratedAttribute]
public void set_OnCreatingTicket(Func`2<OAuthCreatingTicketContext, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<RedirectContext`1<OAuthOptions>, Task> get_OnRedirectToAuthorizationEndpoint();
    [CompilerGeneratedAttribute]
public void set_OnRedirectToAuthorizationEndpoint(Func`2<RedirectContext`1<OAuthOptions>, Task> value);
    public virtual Task CreatingTicket(OAuthCreatingTicketContext context);
    public virtual Task RedirectToAuthorizationEndpoint(RedirectContext`1<OAuthOptions> context);
}
public class Microsoft.AspNetCore.Authentication.OAuth.OAuthHandler`1 : RemoteAuthenticationHandler`1<TOptions> {
    private static RandomNumberGenerator CryptoRandom;
    protected HttpClient Backchannel { get; }
    protected OAuthEvents Events { get; protected set; }
    public OAuthHandler`1(IOptionsMonitor`1<TOptions> options, ILoggerFactory logger, UrlEncoder encoder, ISystemClock clock);
    private static OAuthHandler`1();
    protected HttpClient get_Backchannel();
    protected OAuthEvents get_Events();
    protected void set_Events(OAuthEvents value);
    protected virtual Task`1<object> CreateEventsAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.OAuth.OAuthHandler`1/<HandleRemoteAuthenticateAsync>d__8")]
protected virtual Task`1<HandleRequestResult> HandleRemoteAuthenticateAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.OAuth.OAuthHandler`1/<ExchangeCodeAsync>d__9")]
protected virtual Task`1<OAuthTokenResponse> ExchangeCodeAsync(OAuthCodeExchangeContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.OAuth.OAuthHandler`1/<Display>d__10")]
private static Task`1<string> Display(HttpResponseMessage response);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.OAuth.OAuthHandler`1/<CreateTicketAsync>d__11")]
protected virtual Task`1<AuthenticationTicket> CreateTicketAsync(ClaimsIdentity identity, AuthenticationProperties properties, OAuthTokenResponse tokens);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.OAuth.OAuthHandler`1/<HandleChallengeAsync>d__12")]
protected virtual Task HandleChallengeAsync(AuthenticationProperties properties);
    protected virtual string BuildChallengeUrl(AuthenticationProperties properties, string redirectUri);
    protected virtual string FormatScope(IEnumerable`1<string> scopes);
    protected virtual string FormatScope();
}
public class Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions : RemoteAuthenticationOptions {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthorizationEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserInformationEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimActionCollection <ClaimActions>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private ISecureDataFormat`1<AuthenticationProperties> <StateDataFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsePkce>k__BackingField;
    public string ClientId { get; public set; }
    public string ClientSecret { get; public set; }
    public string AuthorizationEndpoint { get; public set; }
    public string TokenEndpoint { get; public set; }
    public string UserInformationEndpoint { get; public set; }
    public OAuthEvents Events { get; public set; }
    public ClaimActionCollection ClaimActions { get; }
    public ICollection`1<string> Scope { get; }
    public ISecureDataFormat`1<AuthenticationProperties> StateDataFormat { get; public set; }
    public bool UsePkce { get; public set; }
    public virtual void Validate();
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientSecret();
    [CompilerGeneratedAttribute]
public void set_ClientSecret(string value);
    [CompilerGeneratedAttribute]
public string get_AuthorizationEndpoint();
    [CompilerGeneratedAttribute]
public void set_AuthorizationEndpoint(string value);
    [CompilerGeneratedAttribute]
public string get_TokenEndpoint();
    [CompilerGeneratedAttribute]
public void set_TokenEndpoint(string value);
    [CompilerGeneratedAttribute]
public string get_UserInformationEndpoint();
    [CompilerGeneratedAttribute]
public void set_UserInformationEndpoint(string value);
    public OAuthEvents get_Events();
    public void set_Events(OAuthEvents value);
    [CompilerGeneratedAttribute]
public ClaimActionCollection get_ClaimActions();
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Scope();
    [CompilerGeneratedAttribute]
public ISecureDataFormat`1<AuthenticationProperties> get_StateDataFormat();
    [CompilerGeneratedAttribute]
public void set_StateDataFormat(ISecureDataFormat`1<AuthenticationProperties> value);
    [CompilerGeneratedAttribute]
public bool get_UsePkce();
    [CompilerGeneratedAttribute]
public void set_UsePkce(bool value);
}
public class Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse : object {
    [CompilerGeneratedAttribute]
private JsonDocument <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefreshToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpiresIn>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    public JsonDocument Response { get; public set; }
    public string AccessToken { get; public set; }
    public string TokenType { get; public set; }
    public string RefreshToken { get; public set; }
    public string ExpiresIn { get; public set; }
    public Exception Error { get; public set; }
    private OAuthTokenResponse(JsonDocument response);
    private OAuthTokenResponse(Exception error);
    public static OAuthTokenResponse Success(JsonDocument response);
    public static OAuthTokenResponse Failed(Exception error);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public JsonDocument get_Response();
    [CompilerGeneratedAttribute]
public void set_Response(JsonDocument value);
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
public void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
public string get_TokenType();
    [CompilerGeneratedAttribute]
public void set_TokenType(string value);
    [CompilerGeneratedAttribute]
public string get_RefreshToken();
    [CompilerGeneratedAttribute]
public void set_RefreshToken(string value);
    [CompilerGeneratedAttribute]
public string get_ExpiresIn();
    [CompilerGeneratedAttribute]
public void set_ExpiresIn(string value);
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(Exception value);
}
internal static class Microsoft.AspNetCore.Authentication.OAuth.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string Exception_OptionMustBeProvided { get; }
    internal static string Exception_ValidatorHandlerMismatch { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_Exception_OptionMustBeProvided();
    internal static string FormatException_OptionMustBeProvided(object p0);
    internal static string get_Exception_ValidatorHandlerMismatch();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.OAuthExtensions : object {
    [ExtensionAttribute]
public static AuthenticationBuilder AddOAuth(AuthenticationBuilder builder, string authenticationScheme, Action`1<OAuthOptions> configureOptions);
    [ExtensionAttribute]
public static AuthenticationBuilder AddOAuth(AuthenticationBuilder builder, string authenticationScheme, string displayName, Action`1<OAuthOptions> configureOptions);
    [ExtensionAttribute]
public static AuthenticationBuilder AddOAuth(AuthenticationBuilder builder, string authenticationScheme, Action`1<TOptions> configureOptions);
    [ExtensionAttribute]
public static AuthenticationBuilder AddOAuth(AuthenticationBuilder builder, string authenticationScheme, string displayName, Action`1<TOptions> configureOptions);
}
public class Microsoft.Extensions.DependencyInjection.OAuthPostConfigureOptions`2 : object {
    private IDataProtectionProvider _dp;
    public OAuthPostConfigureOptions`2(IDataProtectionProvider dataProtection);
    public sealed virtual void PostConfigure(string name, TOptions options);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.Logging.LoggingExtensions : object {
    private static Action`4<ILogger, string, string, Exception> _handleChallenge;
    private static LoggingExtensions();
    [ExtensionAttribute]
public static void HandleChallenge(ILogger logger, string location, string cookie);
}
