public class Microsoft.AspNetCore.Builder.ConnectionEndpointRouteBuilder : object {
    private IEndpointConventionBuilder _endpointConventionBuilder;
    internal ConnectionEndpointRouteBuilder(IEndpointConventionBuilder endpointConventionBuilder);
    public sealed virtual void Add(Action`1<EndpointBuilder> convention);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.ConnectionEndpointRouteBuilderExtensions : object {
    [ExtensionAttribute]
public static ConnectionEndpointRouteBuilder MapConnections(IEndpointRouteBuilder endpoints, string pattern, Action`1<IConnectionBuilder> configure);
    [ExtensionAttribute]
public static ConnectionEndpointRouteBuilder MapConnectionHandler(IEndpointRouteBuilder endpoints, string pattern);
    [ExtensionAttribute]
public static ConnectionEndpointRouteBuilder MapConnectionHandler(IEndpointRouteBuilder endpoints, string pattern, Action`1<HttpConnectionDispatcherOptions> configureOptions);
    [ExtensionAttribute]
public static ConnectionEndpointRouteBuilder MapConnections(IEndpointRouteBuilder endpoints, string pattern, HttpConnectionDispatcherOptions options, Action`1<IConnectionBuilder> configure);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.ConnectionsAppBuilderExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("This method is obsolete and will be removed in a future version. The recommended alternative is to use MapConnections or MapConnectionHandler<TConnectionHandler> inside Microsoft.AspNetCore.Builder.UseEndpoints(...).")]
public static IApplicationBuilder UseConnections(IApplicationBuilder app, Action`1<ConnectionsRouteBuilder> configure);
}
public class Microsoft.AspNetCore.Http.Connections.ConnectionOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <DisconnectTimeout>k__BackingField;
    public Nullable`1<TimeSpan> DisconnectTimeout { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_DisconnectTimeout();
    [CompilerGeneratedAttribute]
public void set_DisconnectTimeout(Nullable`1<TimeSpan> value);
}
public class Microsoft.AspNetCore.Http.Connections.ConnectionOptionsSetup : object {
    public static TimeSpan DefaultDisconectTimeout;
    private static ConnectionOptionsSetup();
    public sealed virtual void Configure(ConnectionOptions options);
}
[ObsoleteAttribute("This class is obsolete and will be removed in a future version. The recommended alternative is to use MapConnection and MapConnectionHandler<TConnectionHandler> inside Microsoft.AspNetCore.Builder.UseEndpoints(...).")]
public class Microsoft.AspNetCore.Http.Connections.ConnectionsRouteBuilder : object {
    private IEndpointRouteBuilder _endpoints;
    internal ConnectionsRouteBuilder(IEndpointRouteBuilder endpoints);
    public void MapConnections(PathString path, Action`1<IConnectionBuilder> configure);
    public void MapConnections(PathString path, HttpConnectionDispatcherOptions options, Action`1<IConnectionBuilder> configure);
    public void MapConnectionHandler(PathString path);
    public void MapConnectionHandler(PathString path, Action`1<HttpConnectionDispatcherOptions> configureOptions);
}
public interface Microsoft.AspNetCore.Http.Connections.Features.IHttpContextFeature {
    public HttpContext HttpContext { get; public set; }
    public abstract virtual HttpContext get_HttpContext();
    public abstract virtual void set_HttpContext(HttpContext value);
}
public interface Microsoft.AspNetCore.Http.Connections.Features.IHttpTransportFeature {
    public HttpTransportType TransportType { get; }
    public abstract virtual HttpTransportType get_TransportType();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Http.Connections.HttpConnectionContextExtensions : object {
    [ExtensionAttribute]
public static HttpContext GetHttpContext(ConnectionContext connection);
}
public class Microsoft.AspNetCore.Http.Connections.HttpConnectionDispatcherOptions : object {
    private static int DefaultPipeBufferSize;
    [CompilerGeneratedAttribute]
private IList`1<IAuthorizeData> <AuthorizationData>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpTransportType <Transports>k__BackingField;
    [CompilerGeneratedAttribute]
private WebSocketOptions <WebSockets>k__BackingField;
    [CompilerGeneratedAttribute]
private LongPollingOptions <LongPolling>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TransportMaxBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ApplicationMaxBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumProtocolVersion>k__BackingField;
    public IList`1<IAuthorizeData> AuthorizationData { get; }
    public HttpTransportType Transports { get; public set; }
    public WebSocketOptions WebSockets { get; }
    public LongPollingOptions LongPolling { get; }
    public long TransportMaxBufferSize { get; public set; }
    public long ApplicationMaxBufferSize { get; public set; }
    public int MinimumProtocolVersion { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<IAuthorizeData> get_AuthorizationData();
    [CompilerGeneratedAttribute]
public HttpTransportType get_Transports();
    [CompilerGeneratedAttribute]
public void set_Transports(HttpTransportType value);
    [CompilerGeneratedAttribute]
public WebSocketOptions get_WebSockets();
    [CompilerGeneratedAttribute]
public LongPollingOptions get_LongPolling();
    [CompilerGeneratedAttribute]
public long get_TransportMaxBufferSize();
    [CompilerGeneratedAttribute]
public void set_TransportMaxBufferSize(long value);
    [CompilerGeneratedAttribute]
public long get_ApplicationMaxBufferSize();
    [CompilerGeneratedAttribute]
public void set_ApplicationMaxBufferSize(long value);
    [CompilerGeneratedAttribute]
public int get_MinimumProtocolVersion();
    [CompilerGeneratedAttribute]
public void set_MinimumProtocolVersion(int value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Http.Connections.Internal.ConnectionLogScope : object {
    private string _cachedToString;
    [CompilerGeneratedAttribute]
private string <ConnectionId>k__BackingField;
    public string ConnectionId { get; public set; }
    public KeyValuePair`2<string, object> Item { get; }
    public int Count { get; }
    public ConnectionLogScope(string connectionId);
    [CompilerGeneratedAttribute]
public string get_ConnectionId();
    [CompilerGeneratedAttribute]
public void set_ConnectionId(string value);
    public sealed virtual KeyValuePair`2<string, object> get_Item(int index);
    public sealed virtual int get_Count();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.ConnectionLogScope/<GetEnumerator>d__10")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
internal class Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionContext : ConnectionContext {
    private static long _tenSeconds;
    private object _stateLock;
    private object _itemsLock;
    private object _heartbeatLock;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<Action`1<object>, object>> _heartbeatHandlers;
    private ILogger _logger;
    private PipeWriterStream _applicationStream;
    private IDuplexPipe _application;
    private IDictionary`2<object, object> _items;
    private CancellationTokenSource _sendCts;
    private bool _activeSend;
    private long _startedSendTime;
    private object _sendingLock;
    [CompilerGeneratedAttribute]
private CancellationToken <SendingToken>k__BackingField;
    private TaskCompletionSource`1<object> _disposeTcs;
    [CompilerGeneratedAttribute]
private CancellationTokenSource <Cancellation>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpTransportType <TransportType>k__BackingField;
    [CompilerGeneratedAttribute]
private SemaphoreSlim <WriteLock>k__BackingField;
    [CompilerGeneratedAttribute]
private Task <DisposeAndRemoveTask>k__BackingField;
    [CompilerGeneratedAttribute]
private Task <TransportTask>k__BackingField;
    [CompilerGeneratedAttribute]
private Task <PreviousPollTask>k__BackingField;
    [CompilerGeneratedAttribute]
private Task <ApplicationTask>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastSeenUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpConnectionStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionToken>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureCollection <Features>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <User>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasInherentKeepAlive>k__BackingField;
    [CompilerGeneratedAttribute]
private IDuplexPipe <Transport>k__BackingField;
    [CompilerGeneratedAttribute]
private TransferFormat <SupportedFormats>k__BackingField;
    [CompilerGeneratedAttribute]
private TransferFormat <ActiveFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpContext <HttpContext>k__BackingField;
    internal CancellationToken SendingToken { get; private set; }
    public CancellationTokenSource Cancellation { get; public set; }
    public HttpTransportType TransportType { get; public set; }
    public SemaphoreSlim WriteLock { get; }
    internal Task DisposeAndRemoveTask { get; internal set; }
    public Task TransportTask { get; public set; }
    public Task PreviousPollTask { get; public set; }
    public Task ApplicationTask { get; public set; }
    public DateTime LastSeenUtc { get; public set; }
    public Nullable`1<DateTime> LastSeenUtcIfInactive { get; }
    public HttpConnectionStatus Status { get; public set; }
    public string ConnectionId { get; public set; }
    internal string ConnectionToken { get; internal set; }
    public IFeatureCollection Features { get; }
    public ClaimsPrincipal User { get; public set; }
    public bool HasInherentKeepAlive { get; public set; }
    public IDictionary`2<object, object> Items { get; public set; }
    public IDuplexPipe Application { get; public set; }
    internal PipeWriterStream ApplicationStream { get; }
    public IDuplexPipe Transport { get; public set; }
    public TransferFormat SupportedFormats { get; public set; }
    public TransferFormat ActiveFormat { get; public set; }
    public HttpContext HttpContext { get; public set; }
    public HttpConnectionContext(string connectionId, string connectionToken, ILogger logger);
    internal HttpConnectionContext(string id, IDuplexPipe transport, IDuplexPipe application, ILogger logger);
    private static HttpConnectionContext();
    [CompilerGeneratedAttribute]
internal CancellationToken get_SendingToken();
    [CompilerGeneratedAttribute]
private void set_SendingToken(CancellationToken value);
    [CompilerGeneratedAttribute]
public CancellationTokenSource get_Cancellation();
    [CompilerGeneratedAttribute]
public void set_Cancellation(CancellationTokenSource value);
    [CompilerGeneratedAttribute]
public sealed virtual HttpTransportType get_TransportType();
    [CompilerGeneratedAttribute]
public void set_TransportType(HttpTransportType value);
    [CompilerGeneratedAttribute]
public SemaphoreSlim get_WriteLock();
    [CompilerGeneratedAttribute]
internal Task get_DisposeAndRemoveTask();
    [CompilerGeneratedAttribute]
internal void set_DisposeAndRemoveTask(Task value);
    [CompilerGeneratedAttribute]
public Task get_TransportTask();
    [CompilerGeneratedAttribute]
public void set_TransportTask(Task value);
    [CompilerGeneratedAttribute]
public Task get_PreviousPollTask();
    [CompilerGeneratedAttribute]
public void set_PreviousPollTask(Task value);
    [CompilerGeneratedAttribute]
public Task get_ApplicationTask();
    [CompilerGeneratedAttribute]
public void set_ApplicationTask(Task value);
    [CompilerGeneratedAttribute]
public DateTime get_LastSeenUtc();
    [CompilerGeneratedAttribute]
public void set_LastSeenUtc(DateTime value);
    public Nullable`1<DateTime> get_LastSeenUtcIfInactive();
    [CompilerGeneratedAttribute]
public HttpConnectionStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(HttpConnectionStatus value);
    [CompilerGeneratedAttribute]
public virtual string get_ConnectionId();
    [CompilerGeneratedAttribute]
public virtual void set_ConnectionId(string value);
    [CompilerGeneratedAttribute]
internal string get_ConnectionToken();
    [CompilerGeneratedAttribute]
internal void set_ConnectionToken(string value);
    [CompilerGeneratedAttribute]
public virtual IFeatureCollection get_Features();
    [CompilerGeneratedAttribute]
public sealed virtual ClaimsPrincipal get_User();
    [CompilerGeneratedAttribute]
public sealed virtual void set_User(ClaimsPrincipal value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasInherentKeepAlive();
    [CompilerGeneratedAttribute]
public void set_HasInherentKeepAlive(bool value);
    public virtual IDictionary`2<object, object> get_Items();
    public virtual void set_Items(IDictionary`2<object, object> value);
    public IDuplexPipe get_Application();
    public void set_Application(IDuplexPipe value);
    internal PipeWriterStream get_ApplicationStream();
    [CompilerGeneratedAttribute]
public virtual IDuplexPipe get_Transport();
    [CompilerGeneratedAttribute]
public virtual void set_Transport(IDuplexPipe value);
    [CompilerGeneratedAttribute]
public sealed virtual TransferFormat get_SupportedFormats();
    [CompilerGeneratedAttribute]
public void set_SupportedFormats(TransferFormat value);
    [CompilerGeneratedAttribute]
public sealed virtual TransferFormat get_ActiveFormat();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ActiveFormat(TransferFormat value);
    [CompilerGeneratedAttribute]
public sealed virtual HttpContext get_HttpContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HttpContext(HttpContext value);
    public sealed virtual void OnHeartbeat(Action`1<object> action, object state);
    public void TickHeartbeat();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionContext/<DisposeAsync>d__102")]
public Task DisposeAsync(bool closeGracefully);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionContext/<WaitOnTasks>d__103")]
private Task WaitOnTasks(Task applicationTask, Task transportTask, bool closeGracefully);
    internal bool TryActivatePersistentConnection(ConnectionDelegate connectionDelegate, IHttpTransport transport, ILogger dispatcherLogger);
    public bool TryActivateLongPollingConnection(ConnectionDelegate connectionDelegate, HttpContext nonClonedContext, TimeSpan pollTimeout, Task currentRequestTask, ILoggerFactory loggerFactory, ILogger dispatcherLogger);
    private void FailActivationUnsynchronized(HttpContext nonClonedContext, ILogger dispatcherLogger);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionContext/<CancelPreviousPoll>d__107")]
internal Task`1<bool> CancelPreviousPoll(HttpContext context);
    public void MarkInactive();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionContext/<ExecuteApplication>d__109")]
private Task ExecuteApplication(ConnectionDelegate connectionDelegate);
    internal void StartSendCancellation();
    internal void TryCancelSend(long currentTicks);
    internal void StopSendCancellation();
}
internal class Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher : object {
    private static AvailableTransport _webSocketAvailableTransport;
    private static AvailableTransport _serverSentEventsAvailableTransport;
    private static AvailableTransport _longPollingAvailableTransport;
    private HttpConnectionManager _manager;
    private ILoggerFactory _loggerFactory;
    private ILogger _logger;
    private static int _protocolVersion;
    public HttpConnectionDispatcher(HttpConnectionManager manager, ILoggerFactory loggerFactory);
    private static HttpConnectionDispatcher();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher/<ExecuteAsync>d__8")]
public Task ExecuteAsync(HttpContext context, HttpConnectionDispatcherOptions options, ConnectionDelegate connectionDelegate);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher/<ExecuteNegotiateAsync>d__9")]
public Task ExecuteNegotiateAsync(HttpContext context, HttpConnectionDispatcherOptions options);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher/<ExecuteAsync>d__10")]
private Task ExecuteAsync(HttpContext context, ConnectionDelegate connectionDelegate, HttpConnectionDispatcherOptions options, ConnectionLogScope logScope);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher/<DoPersistentConnection>d__11")]
private Task DoPersistentConnection(ConnectionDelegate connectionDelegate, IHttpTransport transport, HttpContext context, HttpConnectionContext connection);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher/<ProcessNegotiate>d__12")]
private Task ProcessNegotiate(HttpContext context, HttpConnectionDispatcherOptions options, ConnectionLogScope logScope);
    private void WriteNegotiatePayload(IBufferWriter`1<byte> writer, string connectionId, string connectionToken, HttpContext context, HttpConnectionDispatcherOptions options, int clientProtocolVersion, string error);
    private static bool ServerHasWebSockets(IFeatureCollection features);
    private static string GetConnectionToken(HttpContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher/<ProcessSend>d__16")]
private Task ProcessSend(HttpContext context, HttpConnectionDispatcherOptions options);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher/<ProcessDeleteAsync>d__17")]
private Task ProcessDeleteAsync(HttpContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher/<EnsureConnectionStateAsync>d__18")]
private Task`1<bool> EnsureConnectionStateAsync(HttpConnectionContext connection, HttpContext context, HttpTransportType transportType, HttpTransportType supportedTransports, ConnectionLogScope logScope, HttpConnectionDispatcherOptions options);
    private static void CloneUser(HttpContext newContext, HttpContext oldContext);
    private static HttpContext CloneHttpContext(HttpContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher/<GetConnectionAsync>d__21")]
private Task`1<HttpConnectionContext> GetConnectionAsync(HttpContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher/<GetOrCreateConnectionAsync>d__22")]
private Task`1<HttpConnectionContext> GetOrCreateConnectionAsync(HttpContext context, HttpConnectionDispatcherOptions options);
    private HttpConnectionContext CreateConnection(HttpConnectionDispatcherOptions options, int clientProtocolVersion);
}
internal class Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionManager : object {
    private static TimeSpan _heartbeatTickRate;
    private static RNGCryptoServiceProvider _keyGenerator;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<string, ValueTuple`2<HttpConnectionContext, ValueStopwatch>> _connections;
    private TimerAwaitable _nextHeartbeat;
    private ILogger`1<HttpConnectionManager> _logger;
    private ILogger`1<HttpConnectionContext> _connectionLogger;
    private bool _useSendTimeout;
    private TimeSpan _disconnectTimeout;
    public HttpConnectionManager(ILoggerFactory loggerFactory, IHostApplicationLifetime appLifetime);
    public HttpConnectionManager(ILoggerFactory loggerFactory, IHostApplicationLifetime appLifetime, IOptions`1<ConnectionOptions> connectionOptions);
    private static HttpConnectionManager();
    public void Start();
    internal bool TryGetConnection(string id, HttpConnectionContext& connection);
    internal HttpConnectionContext CreateConnection();
    internal HttpConnectionContext CreateConnection(PipeOptions transportPipeOptions, PipeOptions appPipeOptions, int negotiateVersion);
    public void RemoveConnection(string id);
    private static string MakeNewConnectionId();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionManager/<ExecuteTimerLoop>d__16")]
private Task ExecuteTimerLoop();
    public void Scan();
    public void CloseConnections();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionManager/<DisposeAndRemoveAsync>d__19")]
internal Task DisposeAndRemoveAsync(HttpConnectionContext connection, bool closeGracefully);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_1();
}
internal class Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionsEventSource : EventSource {
    public static HttpConnectionsEventSource Log;
    private PollingCounter _connectionsStartedCounter;
    private PollingCounter _connectionsStoppedCounter;
    private PollingCounter _connectionsTimedOutCounter;
    private PollingCounter _currentConnectionsCounter;
    private EventCounter _connectionDuration;
    private long _connectionsStarted;
    private long _connectionsStopped;
    private long _connectionsTimedOut;
    private long _currentConnections;
    internal HttpConnectionsEventSource(string eventSourceName);
    private static HttpConnectionsEventSource();
    [NonEventAttribute]
public void ConnectionStop(string connectionId, ValueStopwatch timer);
    [EventAttribute("1")]
public ValueStopwatch ConnectionStart(string connectionId);
    [EventAttribute("2")]
private void ConnectionStop(string connectionId);
    [EventAttribute("3")]
public void ConnectionTimedOut(string connectionId);
    protected virtual void OnEventCommand(EventCommandEventArgs command);
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__16_0();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__16_1();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__16_2();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__16_3();
}
internal enum Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionStatus : Enum {
    public int value__;
    public static HttpConnectionStatus Inactive;
    public static HttpConnectionStatus Active;
    public static HttpConnectionStatus Disposed;
}
internal interface Microsoft.AspNetCore.Http.Connections.Internal.Transports.IHttpTransport {
    public abstract virtual Task ProcessRequestAsync(HttpContext context, CancellationToken token);
}
internal class Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingServerTransport : object {
    private PipeReader _application;
    private ILogger _logger;
    private CancellationToken _timeoutToken;
    private HttpConnectionContext _connection;
    public LongPollingServerTransport(CancellationToken timeoutToken, PipeReader application, ILoggerFactory loggerFactory);
    public LongPollingServerTransport(CancellationToken timeoutToken, PipeReader application, ILoggerFactory loggerFactory, HttpConnectionContext connection);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingServerTransport/<ProcessRequestAsync>d__6")]
public sealed virtual Task ProcessRequestAsync(HttpContext context, CancellationToken token);
}
internal class Microsoft.AspNetCore.Http.Connections.Internal.Transports.ServerSentEventsServerTransport : object {
    private PipeReader _application;
    private string _connectionId;
    private ILogger _logger;
    private HttpConnectionContext _connection;
    public ServerSentEventsServerTransport(PipeReader application, string connectionId, ILoggerFactory loggerFactory);
    public ServerSentEventsServerTransport(PipeReader application, string connectionId, HttpConnectionContext connection, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.Transports.ServerSentEventsServerTransport/<ProcessRequestAsync>d__6")]
public sealed virtual Task ProcessRequestAsync(HttpContext context, CancellationToken token);
}
internal class Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsServerTransport : object {
    private WebSocketOptions _options;
    private ILogger _logger;
    private IDuplexPipe _application;
    private HttpConnectionContext _connection;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _aborted;
    public WebSocketsServerTransport(WebSocketOptions options, IDuplexPipe application, HttpConnectionContext connection, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsServerTransport/<ProcessRequestAsync>d__6")]
public sealed virtual Task ProcessRequestAsync(HttpContext context, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsServerTransport/<ProcessSocketAsync>d__7")]
public Task ProcessSocketAsync(WebSocket socket);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsServerTransport/<StartReceiving>d__8")]
private Task StartReceiving(WebSocket socket);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsServerTransport/<StartSending>d__9")]
private Task StartSending(WebSocket socket);
    private static bool WebSocketCanSend(WebSocket ws);
}
public class Microsoft.AspNetCore.Http.Connections.LongPollingOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <PollTimeout>k__BackingField;
    public TimeSpan PollTimeout { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_PollTimeout();
    [CompilerGeneratedAttribute]
public void set_PollTimeout(TimeSpan value);
}
public class Microsoft.AspNetCore.Http.Connections.NegotiateMetadata : object {
}
internal static class Microsoft.AspNetCore.Http.Connections.ServerSentEventsMessageFormatter : object {
    private static Byte[] DataPrefix;
    private static Byte[] Newline;
    private static byte LineFeed;
    private static ServerSentEventsMessageFormatter();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.ServerSentEventsMessageFormatter/<WriteMessageAsync>d__3")]
public static Task WriteMessageAsync(ReadOnlySequence`1<byte> payload, Stream output, CancellationToken token);
    private static ReadOnlyMemory`1<byte> GetLastSegment(ReadOnlySequence`1& source, Int64& offset);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.ServerSentEventsMessageFormatter/<WriteMessageToMemory>d__5")]
private static Task WriteMessageToMemory(Stream output, ReadOnlySequence`1<byte> payload);
}
public class Microsoft.AspNetCore.Http.Connections.WebSocketOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <CloseTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IList`1<string>, string> <SubProtocolSelector>k__BackingField;
    public TimeSpan CloseTimeout { get; public set; }
    public Func`2<IList`1<string>, string> SubProtocolSelector { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_CloseTimeout();
    [CompilerGeneratedAttribute]
public void set_CloseTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public Func`2<IList`1<string>, string> get_SubProtocolSelector();
    [CompilerGeneratedAttribute]
public void set_SubProtocolSelector(Func`2<IList`1<string>, string> value);
}
internal static class Microsoft.AspNetCore.Internal.AwaitableThreadPool : object {
    public static Awaitable Yield();
}
internal class Microsoft.AspNetCore.Internal.MemoryBufferWriter : Stream {
    [ThreadStaticAttribute]
private static MemoryBufferWriter _cachedInstance;
    private int _minimumSegmentSize;
    private int _bytesWritten;
    private List`1<CompletedBuffer> _completedSegments;
    private Byte[] _currentSegment;
    private int _position;
    public long Length { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Position { get; public set; }
    public MemoryBufferWriter(int minimumSegmentSize);
    public virtual long get_Length();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public static MemoryBufferWriter Get();
    public static void Return(MemoryBufferWriter writer);
    public void Reset();
    public sealed virtual void Advance(int count);
    public sealed virtual Memory`1<byte> GetMemory(int sizeHint);
    public sealed virtual Span`1<byte> GetSpan(int sizeHint);
    public void CopyTo(IBufferWriter`1<byte> destination);
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    private void EnsureCapacity(int sizeHint);
    private void AddSegment(int sizeHint);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Internal.MemoryBufferWriter/<CopyToSlowAsync>d__28")]
private Task CopyToSlowAsync(Stream destination);
    public Byte[] ToArray();
    public void CopyTo(Span`1<byte> span);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void WriteByte(byte value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Write(ReadOnlySpan`1<byte> span);
    protected virtual void Dispose(bool disposing);
}
internal static class Microsoft.AspNetCore.Internal.TaskCache : object {
    public static Task`1<bool> True;
    public static Task`1<bool> False;
    private static TaskCache();
}
internal class Microsoft.AspNetCore.Internal.TimerAwaitable : object {
    private Timer _timer;
    private Action _callback;
    private static Action _callbackCompleted;
    private TimeSpan _period;
    private TimeSpan _dueTime;
    private bool _disposed;
    private bool _running;
    private object _lockObj;
    public bool IsCompleted { get; }
    public TimerAwaitable(TimeSpan dueTime, TimeSpan period);
    private static TimerAwaitable();
    public void Start();
    public TimerAwaitable GetAwaiter();
    public bool get_IsCompleted();
    public bool GetResult();
    private void Tick();
    public sealed virtual void OnCompleted(Action continuation);
    public sealed virtual void UnsafeOnCompleted(Action continuation);
    public void Stop();
    private sealed virtual override void System.IDisposable.Dispose();
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Internal.ValueTaskExtensions : object {
    [ExtensionAttribute]
public static Task GetAsTask(ValueTask`1& valueTask);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ConnectionsDependencyInjectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddConnections(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddConnections(IServiceCollection services, Action`1<ConnectionOptions> options);
}
internal static class Microsoft.Extensions.Internal.SecurityHelper : object {
    public static ClaimsPrincipal MergeUserPrincipal(ClaimsPrincipal existingPrincipal, ClaimsPrincipal additionalPrincipal);
}
internal class Microsoft.Extensions.Internal.ValueStopwatch : ValueType {
    private static double TimestampToTicks;
    private long _startTimestamp;
    public bool IsActive { get; }
    private ValueStopwatch(long startTimestamp);
    private static ValueStopwatch();
    public bool get_IsActive();
    public static ValueStopwatch StartNew();
    public TimeSpan GetElapsedTime();
}
internal static class Microsoft.Extensions.Internal.WebEncoders : object {
    private static Byte[] EmptyBytes;
    private static WebEncoders();
    public static Byte[] Base64UrlDecode(string input);
    public static Byte[] Base64UrlDecode(string input, int offset, int count);
    public static Byte[] Base64UrlDecode(string input, int offset, Char[] buffer, int bufferOffset, int count);
    public static int GetArraySizeRequiredToDecode(int count);
    public static string Base64UrlEncode(Byte[] input);
    public static string Base64UrlEncode(Byte[] input, int offset, int count);
    public static int Base64UrlEncode(Byte[] input, int offset, Char[] output, int outputOffset, int count);
    public static int GetArraySizeRequiredToEncode(int count);
    public static string Base64UrlEncode(ReadOnlySpan`1<byte> input);
    private static int Base64UrlEncode(ReadOnlySpan`1<byte> input, Span`1<char> output);
    private static int GetNumBase64PaddingCharsInString(string str);
    private static int GetNumBase64PaddingCharsToAddForDecode(int inputLength);
    private static void ValidateParameters(int bufferLength, string inputName, int offset, int count);
}
internal static class Microsoft.Extensions.WebEncoders.Sources.EncoderResources : object {
    internal static string WebEncoders_InvalidCountOffsetOrLength;
    internal static string WebEncoders_MalformedInput;
    private static EncoderResources();
    internal static string FormatWebEncoders_InvalidCountOffsetOrLength(object p0, object p1, object p2);
    internal static string FormatWebEncoders_MalformedInput(object p0);
}
internal class System.IO.Pipelines.DuplexPipe : object {
    [CompilerGeneratedAttribute]
private PipeReader <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private PipeWriter <Output>k__BackingField;
    public PipeReader Input { get; }
    public PipeWriter Output { get; }
    public DuplexPipe(PipeReader reader, PipeWriter writer);
    [CompilerGeneratedAttribute]
public sealed virtual PipeReader get_Input();
    [CompilerGeneratedAttribute]
public sealed virtual PipeWriter get_Output();
    public static DuplexPipePair CreateConnectionPair(PipeOptions inputOptions, PipeOptions outputOptions);
}
internal class System.IO.Pipelines.PipeWriterStream : Stream {
    private long _length;
    private PipeWriter _pipeWriter;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public PipeWriterStream(PipeWriter pipeWriter);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> source, CancellationToken cancellationToken);
    private ValueTask WriteCoreAsync(ReadOnlyMemory`1<byte> source, CancellationToken cancellationToken);
    public void Reset();
    [AsyncStateMachineAttribute("System.IO.Pipelines.PipeWriterStream/<<WriteCoreAsync>g__WriteSlowAsync|21_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask <WriteCoreAsync>g__WriteSlowAsync|21_0(ValueTask`1<FlushResult> flushTask);
}
[ExtensionAttribute]
internal static class System.IO.StreamExtensions : object {
    [ExtensionAttribute]
public static ValueTask WriteAsync(Stream stream, ReadOnlySequence`1<byte> buffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.IO.StreamExtensions/<WriteMultiSegmentAsync>d__1")]
private static ValueTask WriteMultiSegmentAsync(Stream stream, ReadOnlySequence`1<byte> buffer, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class System.Net.WebSockets.WebSocketExtensions : object {
    [ExtensionAttribute]
public static ValueTask SendAsync(WebSocket webSocket, ReadOnlySequence`1<byte> buffer, WebSocketMessageType webSocketMessageType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.WebSockets.WebSocketExtensions/<SendMultiSegmentAsync>d__1")]
private static ValueTask SendMultiSegmentAsync(WebSocket webSocket, ReadOnlySequence`1<byte> buffer, WebSocketMessageType webSocketMessageType, CancellationToken cancellationToken);
}
[IsReadOnlyAttribute]
internal class System.Threading.Tasks.NoThrowAwaiter : ValueType {
    private Task _task;
    public bool IsCompleted { get; }
    public NoThrowAwaiter(Task task);
    public NoThrowAwaiter GetAwaiter();
    public bool get_IsCompleted();
    public void GetResult();
    public sealed virtual void OnCompleted(Action continuation);
    public sealed virtual void UnsafeOnCompleted(Action continuation);
}
[ExtensionAttribute]
internal static class System.Threading.Tasks.TaskExtensions : object {
    [AsyncStateMachineAttribute("System.Threading.Tasks.TaskExtensions/<NoThrow>d__0")]
[ExtensionAttribute]
public static Task NoThrow(Task task);
}
