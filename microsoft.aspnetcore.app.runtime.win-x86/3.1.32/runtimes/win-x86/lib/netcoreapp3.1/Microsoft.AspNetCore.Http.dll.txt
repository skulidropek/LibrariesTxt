public class Microsoft.AspNetCore.Builder.ApplicationBuilder : object {
    private static string ServerFeaturesKey;
    private static string ApplicationServicesKey;
    private IList`1<Func`2<RequestDelegate, RequestDelegate>> _components;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Properties>k__BackingField;
    public IServiceProvider ApplicationServices { get; public set; }
    public IFeatureCollection ServerFeatures { get; }
    public IDictionary`2<string, object> Properties { get; }
    public ApplicationBuilder(IServiceProvider serviceProvider);
    public ApplicationBuilder(IServiceProvider serviceProvider, object server);
    private ApplicationBuilder(ApplicationBuilder builder);
    public sealed virtual IServiceProvider get_ApplicationServices();
    public sealed virtual void set_ApplicationServices(IServiceProvider value);
    public sealed virtual IFeatureCollection get_ServerFeatures();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Properties();
    private T GetProperty(string key);
    private void SetProperty(string key, T value);
    public sealed virtual IApplicationBuilder Use(Func`2<RequestDelegate, RequestDelegate> middleware);
    public sealed virtual IApplicationBuilder New();
    public sealed virtual RequestDelegate Build();
}
public class Microsoft.AspNetCore.Http.BindingAddress : object {
    private static string UnixPipeHostPrefix;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathBase>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scheme>k__BackingField;
    public string Host { get; private set; }
    public string PathBase { get; private set; }
    public int Port { get; internal set; }
    public string Scheme { get; private set; }
    public bool IsUnixPipe { get; }
    public string UnixPipePath { get; }
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
private void set_Host(string value);
    [CompilerGeneratedAttribute]
public string get_PathBase();
    [CompilerGeneratedAttribute]
private void set_PathBase(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
internal void set_Port(int value);
    [CompilerGeneratedAttribute]
public string get_Scheme();
    [CompilerGeneratedAttribute]
private void set_Scheme(string value);
    public bool get_IsUnixPipe();
    public string get_UnixPipePath();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static BindingAddress Parse(string address);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Http.BufferingHelper : object {
    internal static int DefaultBufferThreshold;
    [ExtensionAttribute]
public static HttpRequest EnableRewind(HttpRequest request, int bufferThreshold, Nullable`1<long> bufferLimit);
    [ExtensionAttribute]
public static MultipartSection EnableRewind(MultipartSection section, Action`1<IDisposable> registerForDispose, int bufferThreshold, Nullable`1<long> bufferLimit);
}
internal class Microsoft.AspNetCore.Http.DefaultConnectionInfo : ConnectionInfo {
    private static Func`2<IFeatureCollection, IHttpConnectionFeature> _newHttpConnectionFeature;
    private static Func`2<IFeatureCollection, ITlsConnectionFeature> _newTlsConnectionFeature;
    private FeatureReferences`1<FeatureInterfaces> _features;
    private IHttpConnectionFeature HttpConnectionFeature { get; }
    private ITlsConnectionFeature TlsConnectionFeature { get; }
    public string Id { get; public set; }
    public IPAddress RemoteIpAddress { get; public set; }
    public int RemotePort { get; public set; }
    public IPAddress LocalIpAddress { get; public set; }
    public int LocalPort { get; public set; }
    public X509Certificate2 ClientCertificate { get; public set; }
    public DefaultConnectionInfo(IFeatureCollection features);
    private static DefaultConnectionInfo();
    public void Initialize(IFeatureCollection features);
    public void Initialize(IFeatureCollection features, int revision);
    public void Uninitialize();
    private IHttpConnectionFeature get_HttpConnectionFeature();
    private ITlsConnectionFeature get_TlsConnectionFeature();
    public virtual string get_Id();
    public virtual void set_Id(string value);
    public virtual IPAddress get_RemoteIpAddress();
    public virtual void set_RemoteIpAddress(IPAddress value);
    public virtual int get_RemotePort();
    public virtual void set_RemotePort(int value);
    public virtual IPAddress get_LocalIpAddress();
    public virtual void set_LocalIpAddress(IPAddress value);
    public virtual int get_LocalPort();
    public virtual void set_LocalPort(int value);
    public virtual X509Certificate2 get_ClientCertificate();
    public virtual void set_ClientCertificate(X509Certificate2 value);
    public virtual Task`1<X509Certificate2> GetClientCertificateAsync(CancellationToken cancellationToken);
}
public class Microsoft.AspNetCore.Http.DefaultHttpContext : HttpContext {
    private static Func`2<IFeatureCollection, IItemsFeature> _newItemsFeature;
    private static Func`2<DefaultHttpContext, IServiceProvidersFeature> _newServiceProvidersFeature;
    private static Func`2<IFeatureCollection, IHttpAuthenticationFeature> _newHttpAuthenticationFeature;
    private static Func`2<IFeatureCollection, IHttpRequestLifetimeFeature> _newHttpRequestLifetimeFeature;
    private static Func`2<IFeatureCollection, ISessionFeature> _newSessionFeature;
    private static Func`2<IFeatureCollection, ISessionFeature> _nullSessionFeature;
    private static Func`2<IFeatureCollection, IHttpRequestIdentifierFeature> _newHttpRequestIdentifierFeature;
    private FeatureReferences`1<FeatureInterfaces> _features;
    private DefaultHttpRequest _request;
    private DefaultHttpResponse _response;
    private DefaultConnectionInfo _connection;
    private DefaultWebSocketManager _websockets;
    [CompilerGeneratedAttribute]
private FormOptions <FormOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceScopeFactory <ServiceScopeFactory>k__BackingField;
    public FormOptions FormOptions { get; public set; }
    public IServiceScopeFactory ServiceScopeFactory { get; public set; }
    private IItemsFeature ItemsFeature { get; }
    private IServiceProvidersFeature ServiceProvidersFeature { get; }
    private IHttpAuthenticationFeature HttpAuthenticationFeature { get; }
    private IHttpRequestLifetimeFeature LifetimeFeature { get; }
    private ISessionFeature SessionFeature { get; }
    private ISessionFeature SessionFeatureOrNull { get; }
    private IHttpRequestIdentifierFeature RequestIdentifierFeature { get; }
    public IFeatureCollection Features { get; }
    public HttpRequest Request { get; }
    public HttpResponse Response { get; }
    public ConnectionInfo Connection { get; }
    public WebSocketManager WebSockets { get; }
    public ClaimsPrincipal User { get; public set; }
    public IDictionary`2<object, object> Items { get; public set; }
    public IServiceProvider RequestServices { get; public set; }
    public CancellationToken RequestAborted { get; public set; }
    public string TraceIdentifier { get; public set; }
    public ISession Session { get; public set; }
    [EditorBrowsableAttribute("1")]
public HttpContext HttpContext { get; }
    public DefaultHttpContext(IFeatureCollection features);
    private static DefaultHttpContext();
    public void Initialize(IFeatureCollection features);
    public void Uninitialize();
    [CompilerGeneratedAttribute]
public FormOptions get_FormOptions();
    [CompilerGeneratedAttribute]
public void set_FormOptions(FormOptions value);
    [CompilerGeneratedAttribute]
public IServiceScopeFactory get_ServiceScopeFactory();
    [CompilerGeneratedAttribute]
public void set_ServiceScopeFactory(IServiceScopeFactory value);
    private IItemsFeature get_ItemsFeature();
    private IServiceProvidersFeature get_ServiceProvidersFeature();
    private IHttpAuthenticationFeature get_HttpAuthenticationFeature();
    private IHttpRequestLifetimeFeature get_LifetimeFeature();
    private ISessionFeature get_SessionFeature();
    private ISessionFeature get_SessionFeatureOrNull();
    private IHttpRequestIdentifierFeature get_RequestIdentifierFeature();
    public virtual IFeatureCollection get_Features();
    public virtual HttpRequest get_Request();
    public virtual HttpResponse get_Response();
    public virtual ConnectionInfo get_Connection();
    public virtual WebSocketManager get_WebSockets();
    public virtual ClaimsPrincipal get_User();
    public virtual void set_User(ClaimsPrincipal value);
    public virtual IDictionary`2<object, object> get_Items();
    public virtual void set_Items(IDictionary`2<object, object> value);
    public virtual IServiceProvider get_RequestServices();
    public virtual void set_RequestServices(IServiceProvider value);
    public virtual CancellationToken get_RequestAborted();
    public virtual void set_RequestAborted(CancellationToken value);
    public virtual string get_TraceIdentifier();
    public virtual void set_TraceIdentifier(string value);
    public virtual ISession get_Session();
    public virtual void set_Session(ISession value);
    public HttpContext get_HttpContext();
    public virtual void Abort();
    private static IFeatureCollection ContextDisposed();
    private static void ThrowContextDisposed();
}
internal class Microsoft.AspNetCore.Http.DefaultHttpRequest : HttpRequest {
    private static string Http;
    private static string Https;
    private static Func`2<IFeatureCollection, IHttpRequestFeature> _nullRequestFeature;
    private static Func`2<IFeatureCollection, IQueryFeature> _newQueryFeature;
    private static Func`2<DefaultHttpRequest, IFormFeature> _newFormFeature;
    private static Func`2<IFeatureCollection, IRequestCookiesFeature> _newRequestCookiesFeature;
    private static Func`2<IFeatureCollection, IRouteValuesFeature> _newRouteValuesFeature;
    private static Func`2<HttpContext, IRequestBodyPipeFeature> _newRequestBodyPipeFeature;
    private DefaultHttpContext _context;
    private FeatureReferences`1<FeatureInterfaces> _features;
    public HttpContext HttpContext { get; }
    private IHttpRequestFeature HttpRequestFeature { get; }
    private IQueryFeature QueryFeature { get; }
    private IFormFeature FormFeature { get; }
    private IRequestCookiesFeature RequestCookiesFeature { get; }
    private IRouteValuesFeature RouteValuesFeature { get; }
    private IRequestBodyPipeFeature RequestBodyPipeFeature { get; }
    public PathString PathBase { get; public set; }
    public PathString Path { get; public set; }
    public QueryString QueryString { get; public set; }
    public Nullable`1<long> ContentLength { get; public set; }
    public Stream Body { get; public set; }
    public string Method { get; public set; }
    public string Scheme { get; public set; }
    public bool IsHttps { get; public set; }
    public HostString Host { get; public set; }
    public IQueryCollection Query { get; public set; }
    public string Protocol { get; public set; }
    public IHeaderDictionary Headers { get; }
    public IRequestCookieCollection Cookies { get; public set; }
    public string ContentType { get; public set; }
    public bool HasFormContentType { get; }
    public IFormCollection Form { get; public set; }
    public RouteValueDictionary RouteValues { get; public set; }
    public PipeReader BodyReader { get; }
    public DefaultHttpRequest(DefaultHttpContext context);
    private static DefaultHttpRequest();
    public void Initialize();
    public void Initialize(int revision);
    public void Uninitialize();
    public virtual HttpContext get_HttpContext();
    private IHttpRequestFeature get_HttpRequestFeature();
    private IQueryFeature get_QueryFeature();
    private IFormFeature get_FormFeature();
    private IRequestCookiesFeature get_RequestCookiesFeature();
    private IRouteValuesFeature get_RouteValuesFeature();
    private IRequestBodyPipeFeature get_RequestBodyPipeFeature();
    public virtual PathString get_PathBase();
    public virtual void set_PathBase(PathString value);
    public virtual PathString get_Path();
    public virtual void set_Path(PathString value);
    public virtual QueryString get_QueryString();
    public virtual void set_QueryString(QueryString value);
    public virtual Nullable`1<long> get_ContentLength();
    public virtual void set_ContentLength(Nullable`1<long> value);
    public virtual Stream get_Body();
    public virtual void set_Body(Stream value);
    public virtual string get_Method();
    public virtual void set_Method(string value);
    public virtual string get_Scheme();
    public virtual void set_Scheme(string value);
    public virtual bool get_IsHttps();
    public virtual void set_IsHttps(bool value);
    public virtual HostString get_Host();
    public virtual void set_Host(HostString value);
    public virtual IQueryCollection get_Query();
    public virtual void set_Query(IQueryCollection value);
    public virtual string get_Protocol();
    public virtual void set_Protocol(string value);
    public virtual IHeaderDictionary get_Headers();
    public virtual IRequestCookieCollection get_Cookies();
    public virtual void set_Cookies(IRequestCookieCollection value);
    public virtual string get_ContentType();
    public virtual void set_ContentType(string value);
    public virtual bool get_HasFormContentType();
    public virtual IFormCollection get_Form();
    public virtual void set_Form(IFormCollection value);
    public virtual Task`1<IFormCollection> ReadFormAsync(CancellationToken cancellationToken);
    public virtual RouteValueDictionary get_RouteValues();
    public virtual void set_RouteValues(RouteValueDictionary value);
    public virtual PipeReader get_BodyReader();
}
internal class Microsoft.AspNetCore.Http.DefaultHttpResponse : HttpResponse {
    private static Func`2<IFeatureCollection, IHttpResponseFeature> _nullResponseFeature;
    private static Func`2<IFeatureCollection, IHttpResponseBodyFeature> _nullResponseBodyFeature;
    private static Func`2<IFeatureCollection, IResponseCookiesFeature> _newResponseCookiesFeature;
    private DefaultHttpContext _context;
    private FeatureReferences`1<FeatureInterfaces> _features;
    private IHttpResponseFeature HttpResponseFeature { get; }
    private IHttpResponseBodyFeature HttpResponseBodyFeature { get; }
    private IResponseCookiesFeature ResponseCookiesFeature { get; }
    public HttpContext HttpContext { get; }
    public int StatusCode { get; public set; }
    public IHeaderDictionary Headers { get; }
    public Stream Body { get; public set; }
    public Nullable`1<long> ContentLength { get; public set; }
    public string ContentType { get; public set; }
    public IResponseCookies Cookies { get; }
    public bool HasStarted { get; }
    public PipeWriter BodyWriter { get; }
    public DefaultHttpResponse(DefaultHttpContext context);
    private static DefaultHttpResponse();
    public void Initialize();
    public void Initialize(int revision);
    public void Uninitialize();
    private IHttpResponseFeature get_HttpResponseFeature();
    private IHttpResponseBodyFeature get_HttpResponseBodyFeature();
    private IResponseCookiesFeature get_ResponseCookiesFeature();
    public virtual HttpContext get_HttpContext();
    public virtual int get_StatusCode();
    public virtual void set_StatusCode(int value);
    public virtual IHeaderDictionary get_Headers();
    public virtual Stream get_Body();
    public virtual void set_Body(Stream value);
    public virtual Nullable`1<long> get_ContentLength();
    public virtual void set_ContentLength(Nullable`1<long> value);
    public virtual string get_ContentType();
    public virtual void set_ContentType(string value);
    public virtual IResponseCookies get_Cookies();
    public virtual bool get_HasStarted();
    public virtual PipeWriter get_BodyWriter();
    public virtual void OnStarting(Func`2<object, Task> callback, object state);
    public virtual void OnCompleted(Func`2<object, Task> callback, object state);
    public virtual void Redirect(string location, bool permanent);
    public virtual Task StartAsync(CancellationToken cancellationToken);
    public virtual Task CompleteAsync();
}
internal class Microsoft.AspNetCore.Http.DefaultWebSocketManager : WebSocketManager {
    private static Func`2<IFeatureCollection, IHttpRequestFeature> _nullRequestFeature;
    private static Func`2<IFeatureCollection, IHttpWebSocketFeature> _nullWebSocketFeature;
    private FeatureReferences`1<FeatureInterfaces> _features;
    private IHttpRequestFeature HttpRequestFeature { get; }
    private IHttpWebSocketFeature WebSocketFeature { get; }
    public bool IsWebSocketRequest { get; }
    public IList`1<string> WebSocketRequestedProtocols { get; }
    public DefaultWebSocketManager(IFeatureCollection features);
    private static DefaultWebSocketManager();
    public void Initialize(IFeatureCollection features);
    public void Initialize(IFeatureCollection features, int revision);
    public void Uninitialize();
    private IHttpRequestFeature get_HttpRequestFeature();
    private IHttpWebSocketFeature get_WebSocketFeature();
    public virtual bool get_IsWebSocketRequest();
    public virtual IList`1<string> get_WebSocketRequestedProtocols();
    public virtual Task`1<WebSocket> AcceptWebSocketAsync(string subProtocol);
}
public class Microsoft.AspNetCore.Http.Features.Authentication.HttpAuthenticationFeature : object {
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <User>k__BackingField;
    public ClaimsPrincipal User { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ClaimsPrincipal get_User();
    [CompilerGeneratedAttribute]
public sealed virtual void set_User(ClaimsPrincipal value);
}
public class Microsoft.AspNetCore.Http.Features.DefaultSessionFeature : object {
    [CompilerGeneratedAttribute]
private ISession <Session>k__BackingField;
    public ISession Session { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ISession get_Session();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Session(ISession value);
}
public class Microsoft.AspNetCore.Http.Features.FormFeature : object {
    private HttpRequest _request;
    private FormOptions _options;
    private Task`1<IFormCollection> _parsedFormTask;
    private IFormCollection _form;
    private MediaTypeHeaderValue ContentType { get; }
    public bool HasFormContentType { get; }
    public IFormCollection Form { get; public set; }
    public FormFeature(IFormCollection form);
    public FormFeature(HttpRequest request);
    public FormFeature(HttpRequest request, FormOptions options);
    private MediaTypeHeaderValue get_ContentType();
    public sealed virtual bool get_HasFormContentType();
    public sealed virtual IFormCollection get_Form();
    public sealed virtual void set_Form(IFormCollection value);
    public sealed virtual IFormCollection ReadForm();
    public Task`1<IFormCollection> ReadFormAsync();
    public sealed virtual Task`1<IFormCollection> ReadFormAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Features.FormFeature/<InnerReadFormAsync>d__17")]
private Task`1<IFormCollection> InnerReadFormAsync(CancellationToken cancellationToken);
    private Encoding FilterEncoding(Encoding encoding);
    private bool HasApplicationFormContentType(MediaTypeHeaderValue contentType);
    private bool HasMultipartFormContentType(MediaTypeHeaderValue contentType);
    private bool HasFormDataContentDisposition(ContentDispositionHeaderValue contentDisposition);
    private bool HasFileContentDisposition(ContentDispositionHeaderValue contentDisposition);
    private static string GetBoundary(MediaTypeHeaderValue contentType, int lengthLimit);
}
public class Microsoft.AspNetCore.Http.Features.FormOptions : object {
    internal static FormOptions Default;
    public static int DefaultMemoryBufferThreshold;
    public static int DefaultBufferBodyLengthLimit;
    public static int DefaultMultipartBoundaryLengthLimit;
    public static long DefaultMultipartBodyLengthLimit;
    [CompilerGeneratedAttribute]
private bool <BufferBody>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MemoryBufferThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BufferBodyLengthLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ValueCountLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <KeyLengthLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ValueLengthLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MultipartBoundaryLengthLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MultipartHeadersCountLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MultipartHeadersLengthLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MultipartBodyLengthLimit>k__BackingField;
    public bool BufferBody { get; public set; }
    public int MemoryBufferThreshold { get; public set; }
    public long BufferBodyLengthLimit { get; public set; }
    public int ValueCountLimit { get; public set; }
    public int KeyLengthLimit { get; public set; }
    public int ValueLengthLimit { get; public set; }
    public int MultipartBoundaryLengthLimit { get; public set; }
    public int MultipartHeadersCountLimit { get; public set; }
    public int MultipartHeadersLengthLimit { get; public set; }
    public long MultipartBodyLengthLimit { get; public set; }
    private static FormOptions();
    [CompilerGeneratedAttribute]
public bool get_BufferBody();
    [CompilerGeneratedAttribute]
public void set_BufferBody(bool value);
    [CompilerGeneratedAttribute]
public int get_MemoryBufferThreshold();
    [CompilerGeneratedAttribute]
public void set_MemoryBufferThreshold(int value);
    [CompilerGeneratedAttribute]
public long get_BufferBodyLengthLimit();
    [CompilerGeneratedAttribute]
public void set_BufferBodyLengthLimit(long value);
    [CompilerGeneratedAttribute]
public int get_ValueCountLimit();
    [CompilerGeneratedAttribute]
public void set_ValueCountLimit(int value);
    [CompilerGeneratedAttribute]
public int get_KeyLengthLimit();
    [CompilerGeneratedAttribute]
public void set_KeyLengthLimit(int value);
    [CompilerGeneratedAttribute]
public int get_ValueLengthLimit();
    [CompilerGeneratedAttribute]
public void set_ValueLengthLimit(int value);
    [CompilerGeneratedAttribute]
public int get_MultipartBoundaryLengthLimit();
    [CompilerGeneratedAttribute]
public void set_MultipartBoundaryLengthLimit(int value);
    [CompilerGeneratedAttribute]
public int get_MultipartHeadersCountLimit();
    [CompilerGeneratedAttribute]
public void set_MultipartHeadersCountLimit(int value);
    [CompilerGeneratedAttribute]
public int get_MultipartHeadersLengthLimit();
    [CompilerGeneratedAttribute]
public void set_MultipartHeadersLengthLimit(int value);
    [CompilerGeneratedAttribute]
public long get_MultipartBodyLengthLimit();
    [CompilerGeneratedAttribute]
public void set_MultipartBodyLengthLimit(long value);
}
public class Microsoft.AspNetCore.Http.Features.HttpConnectionFeature : object {
    [CompilerGeneratedAttribute]
private string <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private IPAddress <LocalIpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LocalPort>k__BackingField;
    [CompilerGeneratedAttribute]
private IPAddress <RemoteIpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RemotePort>k__BackingField;
    public string ConnectionId { get; public set; }
    public IPAddress LocalIpAddress { get; public set; }
    public int LocalPort { get; public set; }
    public IPAddress RemoteIpAddress { get; public set; }
    public int RemotePort { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConnectionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConnectionId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IPAddress get_LocalIpAddress();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LocalIpAddress(IPAddress value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LocalPort();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LocalPort(int value);
    [CompilerGeneratedAttribute]
public sealed virtual IPAddress get_RemoteIpAddress();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RemoteIpAddress(IPAddress value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_RemotePort();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RemotePort(int value);
}
public class Microsoft.AspNetCore.Http.Features.HttpRequestFeature : object {
    [CompilerGeneratedAttribute]
private string <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathBase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private IHeaderDictionary <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Body>k__BackingField;
    public string Protocol { get; public set; }
    public string Scheme { get; public set; }
    public string Method { get; public set; }
    public string PathBase { get; public set; }
    public string Path { get; public set; }
    public string QueryString { get; public set; }
    public string RawTarget { get; public set; }
    public IHeaderDictionary Headers { get; public set; }
    public Stream Body { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Protocol();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Protocol(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Scheme();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Scheme(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Method();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Method(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PathBase();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PathBase(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Path(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_QueryString();
    [CompilerGeneratedAttribute]
public sealed virtual void set_QueryString(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RawTarget();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RawTarget(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IHeaderDictionary get_Headers();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Headers(IHeaderDictionary value);
    [CompilerGeneratedAttribute]
public sealed virtual Stream get_Body();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Body(Stream value);
}
public class Microsoft.AspNetCore.Http.Features.HttpRequestIdentifierFeature : object {
    private static Char[] s_encode32Chars;
    private static long _requestId;
    private string _id;
    public string TraceIdentifier { get; public set; }
    private static HttpRequestIdentifierFeature();
    public sealed virtual string get_TraceIdentifier();
    public sealed virtual void set_TraceIdentifier(string value);
    private static string GenerateRequestId(long id);
}
public class Microsoft.AspNetCore.Http.Features.HttpRequestLifetimeFeature : object {
    [CompilerGeneratedAttribute]
private CancellationToken <RequestAborted>k__BackingField;
    public CancellationToken RequestAborted { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual CancellationToken get_RequestAborted();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestAborted(CancellationToken value);
    public sealed virtual void Abort();
}
public class Microsoft.AspNetCore.Http.Features.HttpResponseFeature : object {
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonPhrase>k__BackingField;
    [CompilerGeneratedAttribute]
private IHeaderDictionary <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Body>k__BackingField;
    public int StatusCode { get; public set; }
    public string ReasonPhrase { get; public set; }
    public IHeaderDictionary Headers { get; public set; }
    public Stream Body { get; public set; }
    public bool HasStarted { get; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_StatusCode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StatusCode(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ReasonPhrase();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReasonPhrase(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IHeaderDictionary get_Headers();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Headers(IHeaderDictionary value);
    [CompilerGeneratedAttribute]
public sealed virtual Stream get_Body();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Body(Stream value);
    public virtual bool get_HasStarted();
    public virtual void OnStarting(Func`2<object, Task> callback, object state);
    public virtual void OnCompleted(Func`2<object, Task> callback, object state);
}
public class Microsoft.AspNetCore.Http.Features.ItemsFeature : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <Items>k__BackingField;
    public IDictionary`2<object, object> Items { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<object, object> get_Items();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Items(IDictionary`2<object, object> value);
}
public class Microsoft.AspNetCore.Http.Features.QueryFeature : object {
    private static Func`2<IFeatureCollection, IHttpRequestFeature> _nullRequestFeature;
    private FeatureReferences`1<IHttpRequestFeature> _features;
    private string _original;
    private IQueryCollection _parsedValues;
    private IHttpRequestFeature HttpRequestFeature { get; }
    public IQueryCollection Query { get; public set; }
    public QueryFeature(IQueryCollection query);
    public QueryFeature(IFeatureCollection features);
    private static QueryFeature();
    private IHttpRequestFeature get_HttpRequestFeature();
    public sealed virtual IQueryCollection get_Query();
    public sealed virtual void set_Query(IQueryCollection value);
}
public class Microsoft.AspNetCore.Http.Features.RequestBodyPipeFeature : object {
    private PipeReader _internalPipeReader;
    private Stream _streamInstanceWhenWrapped;
    private HttpContext _context;
    public PipeReader Reader { get; }
    public RequestBodyPipeFeature(HttpContext context);
    public sealed virtual PipeReader get_Reader();
}
public class Microsoft.AspNetCore.Http.Features.RequestCookiesFeature : object {
    private static Func`2<IFeatureCollection, IHttpRequestFeature> _nullRequestFeature;
    private FeatureReferences`1<IHttpRequestFeature> _features;
    private StringValues _original;
    private IRequestCookieCollection _parsedValues;
    private IHttpRequestFeature HttpRequestFeature { get; }
    public IRequestCookieCollection Cookies { get; public set; }
    public RequestCookiesFeature(IRequestCookieCollection cookies);
    public RequestCookiesFeature(IFeatureCollection features);
    private static RequestCookiesFeature();
    private IHttpRequestFeature get_HttpRequestFeature();
    public sealed virtual IRequestCookieCollection get_Cookies();
    public sealed virtual void set_Cookies(IRequestCookieCollection value);
}
public class Microsoft.AspNetCore.Http.Features.RequestServicesFeature : object {
    private IServiceScopeFactory _scopeFactory;
    private IServiceProvider _requestServices;
    private IServiceScope _scope;
    private bool _requestServicesSet;
    private HttpContext _context;
    public IServiceProvider RequestServices { get; public set; }
    public RequestServicesFeature(HttpContext context, IServiceScopeFactory scopeFactory);
    public sealed virtual IServiceProvider get_RequestServices();
    public sealed virtual void set_RequestServices(IServiceProvider value);
    public sealed virtual ValueTask DisposeAsync();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Features.RequestServicesFeature/<<DisposeAsync>g__Awaited|9_0>d")]
internal static ValueTask <DisposeAsync>g__Awaited|9_0(RequestServicesFeature servicesFeature, ValueTask vt);
}
public class Microsoft.AspNetCore.Http.Features.ResponseCookiesFeature : object {
    private static Func`2<IFeatureCollection, IHttpResponseFeature> _nullResponseFeature;
    private FeatureReferences`1<IHttpResponseFeature> _features;
    private IResponseCookies _cookiesCollection;
    private IHttpResponseFeature HttpResponseFeature { get; }
    public IResponseCookies Cookies { get; }
    public ResponseCookiesFeature(IFeatureCollection features);
    public ResponseCookiesFeature(IFeatureCollection features, ObjectPool`1<StringBuilder> builderPool);
    private static ResponseCookiesFeature();
    private IHttpResponseFeature get_HttpResponseFeature();
    public sealed virtual IResponseCookies get_Cookies();
}
public class Microsoft.AspNetCore.Http.Features.RouteValuesFeature : object {
    private RouteValueDictionary _routeValues;
    public RouteValueDictionary RouteValues { get; public set; }
    public sealed virtual RouteValueDictionary get_RouteValues();
    public sealed virtual void set_RouteValues(RouteValueDictionary value);
}
public class Microsoft.AspNetCore.Http.Features.ServiceProvidersFeature : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <RequestServices>k__BackingField;
    public IServiceProvider RequestServices { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_RequestServices();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestServices(IServiceProvider value);
}
public class Microsoft.AspNetCore.Http.Features.TlsConnectionFeature : object {
    [CompilerGeneratedAttribute]
private X509Certificate2 <ClientCertificate>k__BackingField;
    public X509Certificate2 ClientCertificate { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual X509Certificate2 get_ClientCertificate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClientCertificate(X509Certificate2 value);
    public sealed virtual Task`1<X509Certificate2> GetClientCertificateAsync(CancellationToken cancellationToken);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Http.FormCollection : object {
    public static FormCollection Empty;
    private static String[] EmptyKeys;
    private static StringValues[] EmptyValues;
    private static Enumerator EmptyEnumerator;
    private static IEnumerator`1<KeyValuePair`2<string, StringValues>> EmptyIEnumeratorType;
    private static IEnumerator EmptyIEnumerator;
    private static IFormFileCollection EmptyFiles;
    private IFormFileCollection _files;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, StringValues> <Store>k__BackingField;
    public IFormFileCollection Files { get; private set; }
    private Dictionary`2<string, StringValues> Store { get; private set; }
    public StringValues Item { get; }
    public int Count { get; }
    public ICollection`1<string> Keys { get; }
    public FormCollection(Dictionary`2<string, StringValues> fields, IFormFileCollection files);
    private static FormCollection();
    public sealed virtual IFormFileCollection get_Files();
    private void set_Files(IFormFileCollection value);
    [CompilerGeneratedAttribute]
private Dictionary`2<string, StringValues> get_Store();
    [CompilerGeneratedAttribute]
private void set_Store(Dictionary`2<string, StringValues> value);
    public sealed virtual StringValues get_Item(string key);
    public sealed virtual int get_Count();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual bool TryGetValue(string key, StringValues& value);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, StringValues>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.AspNetCore.Http.FormFile : object {
    private static int DefaultBufferSize;
    private Stream _baseStream;
    private long _baseStreamOffset;
    [CompilerGeneratedAttribute]
private IHeaderDictionary <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public string ContentDisposition { get; public set; }
    public string ContentType { get; public set; }
    public IHeaderDictionary Headers { get; public set; }
    public long Length { get; }
    public string Name { get; }
    public string FileName { get; }
    public FormFile(Stream baseStream, long baseStreamOffset, long length, string name, string fileName);
    public sealed virtual string get_ContentDisposition();
    public void set_ContentDisposition(string value);
    public sealed virtual string get_ContentType();
    public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IHeaderDictionary get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(IHeaderDictionary value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_Length();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_FileName();
    public sealed virtual Stream OpenReadStream();
    public sealed virtual void CopyTo(Stream target);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.FormFile/<CopyToAsync>d__25")]
public sealed virtual Task CopyToAsync(Stream target, CancellationToken cancellationToken);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Http.FormFileCollection : List`1<IFormFile> {
    public IFormFile Item { get; }
    public sealed virtual IFormFile get_Item(string name);
    public sealed virtual IFormFile GetFile(string name);
    public sealed virtual IReadOnlyList`1<IFormFile> GetFiles(string name);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Http.HeaderDictionary : object {
    private static String[] EmptyKeys;
    private static StringValues[] EmptyValues;
    private static Enumerator EmptyEnumerator;
    private static IEnumerator`1<KeyValuePair`2<string, StringValues>> EmptyIEnumeratorType;
    private static IEnumerator EmptyIEnumerator;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, StringValues> <Store>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    private Dictionary`2<string, StringValues> Store { get; private set; }
    public StringValues Item { get; public set; }
    private StringValues System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.Item { get; private set; }
    public Nullable`1<long> ContentLength { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; public set; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<StringValues> Values { get; }
    public HeaderDictionary(Dictionary`2<string, StringValues> store);
    public HeaderDictionary(int capacity);
    private static HeaderDictionary();
    [CompilerGeneratedAttribute]
private Dictionary`2<string, StringValues> get_Store();
    [CompilerGeneratedAttribute]
private void set_Store(Dictionary`2<string, StringValues> value);
    private void EnsureStore(int capacity);
    public sealed virtual StringValues get_Item(string key);
    public sealed virtual void set_Item(string key, StringValues value);
    private sealed virtual override StringValues System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.get_Item(string key);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.set_Item(string key, StringValues value);
    public sealed virtual Nullable`1<long> get_ContentLength();
    public sealed virtual void set_ContentLength(Nullable`1<long> value);
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public void set_IsReadOnly(bool value);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<StringValues> get_Values();
    public sealed virtual void Add(KeyValuePair`2<string, StringValues> item);
    public sealed virtual void Add(string key, StringValues value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, StringValues> item);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<string, StringValues> item);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, StringValues& value);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, StringValues>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void ThrowIfReadOnly();
}
public class Microsoft.AspNetCore.Http.HttpContextAccessor : object {
    private static AsyncLocal`1<HttpContextHolder> _httpContextCurrent;
    public HttpContext HttpContext { get; public set; }
    private static HttpContextAccessor();
    public sealed virtual HttpContext get_HttpContext();
    public sealed virtual void set_HttpContext(HttpContext value);
}
[ObsoleteAttribute("This is obsolete and will be removed in a future version. Use DefaultHttpContextFactory instead.")]
public class Microsoft.AspNetCore.Http.HttpContextFactory : object {
    private IHttpContextAccessor _httpContextAccessor;
    private FormOptions _formOptions;
    private IServiceScopeFactory _serviceScopeFactory;
    public HttpContextFactory(IOptions`1<FormOptions> formOptions);
    public HttpContextFactory(IOptions`1<FormOptions> formOptions, IServiceScopeFactory serviceScopeFactory);
    public HttpContextFactory(IOptions`1<FormOptions> formOptions, IHttpContextAccessor httpContextAccessor);
    public HttpContextFactory(IOptions`1<FormOptions> formOptions, IServiceScopeFactory serviceScopeFactory, IHttpContextAccessor httpContextAccessor);
    public sealed virtual HttpContext Create(IFeatureCollection featureCollection);
    public sealed virtual void Dispose(HttpContext httpContext);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Http.HttpRequestRewindExtensions : object {
    [ExtensionAttribute]
public static void EnableBuffering(HttpRequest request);
    [ExtensionAttribute]
public static void EnableBuffering(HttpRequest request, int bufferThreshold);
    [ExtensionAttribute]
public static void EnableBuffering(HttpRequest request, long bufferLimit);
    [ExtensionAttribute]
public static void EnableBuffering(HttpRequest request, int bufferThreshold, long bufferLimit);
}
internal class Microsoft.AspNetCore.Http.ItemsDictionary : object {
    private IDictionary`2<object, object> _items;
    public IDictionary`2<object, object> Items { get; }
    private object System.Collections.Generic.IDictionary<System.Object,System.Object>.Item { get; private set; }
    private ICollection`1<object> System.Collections.Generic.IDictionary<System.Object,System.Object>.Keys { get; }
    private ICollection`1<object> System.Collections.Generic.IDictionary<System.Object,System.Object>.Values { get; }
    private int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.IsReadOnly { get; }
    public ItemsDictionary(IDictionary`2<object, object> items);
    public IDictionary`2<object, object> get_Items();
    private sealed virtual override object System.Collections.Generic.IDictionary<System.Object,System.Object>.get_Item(object key);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.Object,System.Object>.set_Item(object key, object value);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.Object,System.Object>.Add(object key, object value);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.Object,System.Object>.ContainsKey(object key);
    private sealed virtual override ICollection`1<object> System.Collections.Generic.IDictionary<System.Object,System.Object>.get_Keys();
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.Object,System.Object>.Remove(object key);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.Object,System.Object>.TryGetValue(object key, Object& value);
    private sealed virtual override ICollection`1<object> System.Collections.Generic.IDictionary<System.Object,System.Object>.get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Add(KeyValuePair`2<object, object> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Contains(KeyValuePair`2<object, object> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Remove(KeyValuePair`2<object, object> item);
    private void EnsureDictionary();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<object, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.AspNetCore.Http.MiddlewareFactory : object {
    private IServiceProvider _serviceProvider;
    public MiddlewareFactory(IServiceProvider serviceProvider);
    public sealed virtual IMiddleware Create(Type middlewareType);
    public sealed virtual void Release(IMiddleware middleware);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Http.QueryCollection : object {
    public static QueryCollection Empty;
    private static String[] EmptyKeys;
    private static StringValues[] EmptyValues;
    private static Enumerator EmptyEnumerator;
    private static IEnumerator`1<KeyValuePair`2<string, StringValues>> EmptyIEnumeratorType;
    private static IEnumerator EmptyIEnumerator;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, StringValues> <Store>k__BackingField;
    private Dictionary`2<string, StringValues> Store { get; private set; }
    public StringValues Item { get; }
    public int Count { get; }
    public ICollection`1<string> Keys { get; }
    public QueryCollection(Dictionary`2<string, StringValues> store);
    public QueryCollection(QueryCollection store);
    public QueryCollection(int capacity);
    private static QueryCollection();
    [CompilerGeneratedAttribute]
private Dictionary`2<string, StringValues> get_Store();
    [CompilerGeneratedAttribute]
private void set_Store(Dictionary`2<string, StringValues> value);
    public sealed virtual StringValues get_Item(string key);
    public sealed virtual int get_Count();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual bool TryGetValue(string key, StringValues& value);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, StringValues>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.AspNetCore.Http.ReferenceReadStream : Stream {
    private Stream _inner;
    private long _innerOffset;
    private long _length;
    private long _position;
    private bool _disposed;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ReferenceReadStream(Stream inner, long offset, long length);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    private void VerifyPosition();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual int Read(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.ReferenceReadStream/<ReadAsync>d__20")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void SetLength(long value);
    public virtual void Flush();
    protected virtual void Dispose(bool disposing);
    private void ThrowIfDisposed();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Http.RequestCookieCollection : object {
    private static string EnableCookieNameDecoding;
    private bool _enableCookieNameDecoding;
    public static RequestCookieCollection Empty;
    private static String[] EmptyKeys;
    private static Enumerator EmptyEnumerator;
    private static IEnumerator`1<KeyValuePair`2<string, string>> EmptyIEnumeratorType;
    private static IEnumerator EmptyIEnumerator;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Store>k__BackingField;
    private Dictionary`2<string, string> Store { get; private set; }
    public string Item { get; }
    public int Count { get; }
    public ICollection`1<string> Keys { get; }
    public RequestCookieCollection(Dictionary`2<string, string> store);
    public RequestCookieCollection(int capacity);
    private static RequestCookieCollection();
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> get_Store();
    [CompilerGeneratedAttribute]
private void set_Store(Dictionary`2<string, string> value);
    public sealed virtual string get_Item(string key);
    public static RequestCookieCollection Parse(IList`1<string> values);
    internal static RequestCookieCollection ParseInternal(IList`1<string> values, bool enableCookieNameDecoding);
    public sealed virtual int get_Count();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual bool TryGetValue(string key, String& value);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, string>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Http.RequestFormReaderExtensions : object {
    [ExtensionAttribute]
public static Task`1<IFormCollection> ReadFormAsync(HttpRequest request, FormOptions options, CancellationToken cancellationToken);
}
internal class Microsoft.AspNetCore.Http.ResponseCookies : object {
    [CompilerGeneratedAttribute]
private IHeaderDictionary <Headers>k__BackingField;
    private IHeaderDictionary Headers { get; private set; }
    public ResponseCookies(IHeaderDictionary headers, ObjectPool`1<StringBuilder> builderPool);
    [CompilerGeneratedAttribute]
private IHeaderDictionary get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(IHeaderDictionary value);
    public sealed virtual void Append(string key, string value);
    public sealed virtual void Append(string key, string value, CookieOptions options);
    public sealed virtual void Delete(string key);
    public sealed virtual void Delete(string key, CookieOptions options);
}
public static class Microsoft.AspNetCore.Http.SendFileFallback : object {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.SendFileFallback/<SendFileAsync>d__0")]
public static Task SendFileAsync(Stream destination, string filePath, long offset, Nullable`1<long> count, CancellationToken cancellationToken);
}
internal static class Microsoft.AspNetCore.Http.StreamCopyOperationInternal : object {
    private static int DefaultBufferSize;
    public static Task CopyToAsync(Stream source, Stream destination, Nullable`1<long> count, CancellationToken cancel);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.StreamCopyOperationInternal/<CopyToAsync>d__2")]
public static Task CopyToAsync(Stream source, Stream destination, Nullable`1<long> count, int bufferSize, CancellationToken cancel);
}
public class Microsoft.AspNetCore.Http.StreamResponseBodyFeature : object {
    private PipeWriter _pipeWriter;
    private bool _started;
    private bool _completed;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpResponseBodyFeature <PriorFeature>k__BackingField;
    public Stream Stream { get; }
    public IHttpResponseBodyFeature PriorFeature { get; }
    public PipeWriter Writer { get; }
    public StreamResponseBodyFeature(Stream stream);
    public StreamResponseBodyFeature(Stream stream, IHttpResponseBodyFeature priorFeature);
    [CompilerGeneratedAttribute]
public sealed virtual Stream get_Stream();
    [CompilerGeneratedAttribute]
public IHttpResponseBodyFeature get_PriorFeature();
    public sealed virtual PipeWriter get_Writer();
    public virtual void DisableBuffering();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.StreamResponseBodyFeature/<SendFileAsync>d__15")]
public virtual Task SendFileAsync(string path, long offset, Nullable`1<long> count, CancellationToken cancellationToken);
    public virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.StreamResponseBodyFeature/<CompleteAsync>d__17")]
public virtual Task CompleteAsync();
    public void Dispose();
}
internal static class Microsoft.AspNetCore.Internal.AspNetCoreTempDirectory : object {
    private static string _tempDirectory;
    public static string TempDirectory { get; }
    public static Func`1<string> TempDirectoryFactory { get; }
    public static string get_TempDirectory();
    public static Func`1<string> get_TempDirectoryFactory();
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Internal.ValueTaskExtensions : object {
    [ExtensionAttribute]
public static Task GetAsTask(ValueTask`1& valueTask);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.HttpServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddHttpContextAccessor(IServiceCollection services);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Extensions.Internal.CopyOnWriteDictionary`2 : object {
    private IDictionary`2<TKey, TValue> _sourceDictionary;
    private IEqualityComparer`1<TKey> _comparer;
    private IDictionary`2<TKey, TValue> _innerDictionary;
    private IDictionary`2<TKey, TValue> ReadDictionary { get; }
    private IDictionary`2<TKey, TValue> WriteDictionary { get; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TValue Item { get; public set; }
    public CopyOnWriteDictionary`2(IDictionary`2<TKey, TValue> sourceDictionary, IEqualityComparer`1<TKey> comparer);
    private IDictionary`2<TKey, TValue> get_ReadDictionary();
    private IDictionary`2<TKey, TValue> get_WriteDictionary();
    public virtual ICollection`1<TKey> get_Keys();
    public virtual ICollection`1<TValue> get_Values();
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual TValue get_Item(TKey key);
    public virtual void set_Item(TKey key, TValue value);
    public virtual bool ContainsKey(TKey key);
    public virtual void Add(TKey key, TValue value);
    public virtual bool Remove(TKey key);
    public virtual bool TryGetValue(TKey key, TValue& value);
    public virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public virtual void Clear();
    public virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Extensions.Internal.CopyOnWriteDictionaryHolder`2 : ValueType {
    private Dictionary`2<TKey, TValue> _source;
    private Dictionary`2<TKey, TValue> _copy;
    public bool HasBeenCopied { get; }
    public Dictionary`2<TKey, TValue> ReadDictionary { get; }
    public Dictionary`2<TKey, TValue> WriteDictionary { get; }
    public KeyCollection<TKey, TValue> Keys { get; }
    public ValueCollection<TKey, TValue> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TValue Item { get; public set; }
    public CopyOnWriteDictionaryHolder`2(Dictionary`2<TKey, TValue> source);
    public CopyOnWriteDictionaryHolder`2(CopyOnWriteDictionaryHolder`2<TKey, TValue> source);
    public bool get_HasBeenCopied();
    public Dictionary`2<TKey, TValue> get_ReadDictionary();
    public Dictionary`2<TKey, TValue> get_WriteDictionary();
    public KeyCollection<TKey, TValue> get_Keys();
    public ValueCollection<TKey, TValue> get_Values();
    public int get_Count();
    public bool get_IsReadOnly();
    public TValue get_Item(TKey key);
    public void set_Item(TKey key, TValue value);
    public bool ContainsKey(TKey key);
    public void Add(TKey key, TValue value);
    public bool Remove(TKey key);
    public bool TryGetValue(TKey key, TValue& value);
    public void Add(KeyValuePair`2<TKey, TValue> item);
    public void Clear();
    public bool Contains(KeyValuePair`2<TKey, TValue> item);
    public void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public bool Remove(KeyValuePair`2<TKey, TValue> item);
    public Enumerator<TKey, TValue> GetEnumerator();
}
