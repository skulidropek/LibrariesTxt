[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.CertificateForwardingBuilderExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseCertificateForwarding(IApplicationBuilder app);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.ForwardedHeadersExtensions : object {
    private static string ForwardedHeadersAdded;
    [ExtensionAttribute]
public static IApplicationBuilder UseForwardedHeaders(IApplicationBuilder builder);
    [ExtensionAttribute]
public static IApplicationBuilder UseForwardedHeaders(IApplicationBuilder builder, ForwardedHeadersOptions options);
}
public class Microsoft.AspNetCore.Builder.ForwardedHeadersOptions : object {
    [CompilerGeneratedAttribute]
private string <ForwardedForHeaderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForwardedHostHeaderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForwardedProtoHeaderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalForHeaderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalHostHeaderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalProtoHeaderName>k__BackingField;
    [CompilerGeneratedAttribute]
private ForwardedHeaders <ForwardedHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ForwardLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IPAddress> <KnownProxies>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IPNetwork> <KnownNetworks>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <AllowedHosts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireHeaderSymmetry>k__BackingField;
    public string ForwardedForHeaderName { get; public set; }
    public string ForwardedHostHeaderName { get; public set; }
    public string ForwardedProtoHeaderName { get; public set; }
    public string OriginalForHeaderName { get; public set; }
    public string OriginalHostHeaderName { get; public set; }
    public string OriginalProtoHeaderName { get; public set; }
    public ForwardedHeaders ForwardedHeaders { get; public set; }
    public Nullable`1<int> ForwardLimit { get; public set; }
    public IList`1<IPAddress> KnownProxies { get; }
    public IList`1<IPNetwork> KnownNetworks { get; }
    public IList`1<string> AllowedHosts { get; public set; }
    public bool RequireHeaderSymmetry { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ForwardedForHeaderName();
    [CompilerGeneratedAttribute]
public void set_ForwardedForHeaderName(string value);
    [CompilerGeneratedAttribute]
public string get_ForwardedHostHeaderName();
    [CompilerGeneratedAttribute]
public void set_ForwardedHostHeaderName(string value);
    [CompilerGeneratedAttribute]
public string get_ForwardedProtoHeaderName();
    [CompilerGeneratedAttribute]
public void set_ForwardedProtoHeaderName(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalForHeaderName();
    [CompilerGeneratedAttribute]
public void set_OriginalForHeaderName(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalHostHeaderName();
    [CompilerGeneratedAttribute]
public void set_OriginalHostHeaderName(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalProtoHeaderName();
    [CompilerGeneratedAttribute]
public void set_OriginalProtoHeaderName(string value);
    [CompilerGeneratedAttribute]
public ForwardedHeaders get_ForwardedHeaders();
    [CompilerGeneratedAttribute]
public void set_ForwardedHeaders(ForwardedHeaders value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ForwardLimit();
    [CompilerGeneratedAttribute]
public void set_ForwardLimit(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IList`1<IPAddress> get_KnownProxies();
    [CompilerGeneratedAttribute]
public IList`1<IPNetwork> get_KnownNetworks();
    [CompilerGeneratedAttribute]
public IList`1<string> get_AllowedHosts();
    [CompilerGeneratedAttribute]
public void set_AllowedHosts(IList`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_RequireHeaderSymmetry();
    [CompilerGeneratedAttribute]
public void set_RequireHeaderSymmetry(bool value);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.HttpMethodOverrideExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseHttpMethodOverride(IApplicationBuilder builder);
    [ExtensionAttribute]
public static IApplicationBuilder UseHttpMethodOverride(IApplicationBuilder builder, HttpMethodOverrideOptions options);
}
public class Microsoft.AspNetCore.Builder.HttpMethodOverrideOptions : object {
    [CompilerGeneratedAttribute]
private string <FormFieldName>k__BackingField;
    public string FormFieldName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FormFieldName();
    [CompilerGeneratedAttribute]
public void set_FormFieldName(string value);
}
internal class Microsoft.AspNetCore.HttpOverrides.CertificateForwardingFeature : object {
    private ILogger _logger;
    private StringValues _header;
    private CertificateForwardingOptions _options;
    private X509Certificate2 _certificate;
    public X509Certificate2 ClientCertificate { get; public set; }
    public CertificateForwardingFeature(ILogger logger, StringValues header, CertificateForwardingOptions options);
    public sealed virtual X509Certificate2 get_ClientCertificate();
    public sealed virtual void set_ClientCertificate(X509Certificate2 value);
    public sealed virtual Task`1<X509Certificate2> GetClientCertificateAsync(CancellationToken cancellationToken);
}
public class Microsoft.AspNetCore.HttpOverrides.CertificateForwardingMiddleware : object {
    private RequestDelegate _next;
    private CertificateForwardingOptions _options;
    private ILogger _logger;
    public CertificateForwardingMiddleware(RequestDelegate next, ILoggerFactory loggerFactory, IOptions`1<CertificateForwardingOptions> options);
    public Task Invoke(HttpContext httpContext);
}
public class Microsoft.AspNetCore.HttpOverrides.CertificateForwardingOptions : object {
    [CompilerGeneratedAttribute]
private string <CertificateHeader>k__BackingField;
    public Func`2<string, X509Certificate2> HeaderConverter;
    public string CertificateHeader { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CertificateHeader();
    [CompilerGeneratedAttribute]
public void set_CertificateHeader(string value);
}
[FlagsAttribute]
public enum Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders : Enum {
    public int value__;
    public static ForwardedHeaders None;
    public static ForwardedHeaders XForwardedFor;
    public static ForwardedHeaders XForwardedHost;
    public static ForwardedHeaders XForwardedProto;
    public static ForwardedHeaders All;
}
public static class Microsoft.AspNetCore.HttpOverrides.ForwardedHeadersDefaults : object {
    [CompilerGeneratedAttribute]
private static string <XForwardedForHeaderName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <XForwardedHostHeaderName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <XForwardedProtoHeaderName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <XOriginalForHeaderName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <XOriginalHostHeaderName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <XOriginalProtoHeaderName>k__BackingField;
    public static string XForwardedForHeaderName { get; }
    public static string XForwardedHostHeaderName { get; }
    public static string XForwardedProtoHeaderName { get; }
    public static string XOriginalForHeaderName { get; }
    public static string XOriginalHostHeaderName { get; }
    public static string XOriginalProtoHeaderName { get; }
    private static ForwardedHeadersDefaults();
    [CompilerGeneratedAttribute]
public static string get_XForwardedForHeaderName();
    [CompilerGeneratedAttribute]
public static string get_XForwardedHostHeaderName();
    [CompilerGeneratedAttribute]
public static string get_XForwardedProtoHeaderName();
    [CompilerGeneratedAttribute]
public static string get_XOriginalForHeaderName();
    [CompilerGeneratedAttribute]
public static string get_XOriginalHostHeaderName();
    [CompilerGeneratedAttribute]
public static string get_XOriginalProtoHeaderName();
}
public class Microsoft.AspNetCore.HttpOverrides.ForwardedHeadersMiddleware : object {
    private static Boolean[] HostCharValidity;
    private static Boolean[] SchemeCharValidity;
    private ForwardedHeadersOptions _options;
    private RequestDelegate _next;
    private ILogger _logger;
    private bool _allowAllHosts;
    private IList`1<StringSegment> _allowedHosts;
    private static ForwardedHeadersMiddleware();
    public ForwardedHeadersMiddleware(RequestDelegate next, ILoggerFactory loggerFactory, IOptions`1<ForwardedHeadersOptions> options);
    private static void EnsureOptionNotNullorWhitespace(string value, string propertyName);
    private void PreProcessHosts();
    private bool IsTopLevelWildcard(string host);
    public Task Invoke(HttpContext context);
    public void ApplyForwarders(HttpContext context);
    private bool CheckKnownAddress(IPAddress address);
    private bool TryValidateScheme(string scheme);
    private static bool IsValidSchemeChar(char ch);
    private bool TryValidateHost(string host);
    private static bool IsValidHostChar(char ch);
    private bool TryValidateIPv6Host(string hostText);
    private bool TryValidateHostPort(string hostText, int offset);
    private bool IsNumeric(char ch);
    private bool IsHex(char ch);
}
public class Microsoft.AspNetCore.HttpOverrides.HttpMethodOverrideMiddleware : object {
    private static string xHttpMethodOverride;
    private RequestDelegate _next;
    private HttpMethodOverrideOptions _options;
    public HttpMethodOverrideMiddleware(RequestDelegate next, IOptions`1<HttpMethodOverrideOptions> options);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.HttpOverrides.HttpMethodOverrideMiddleware/<Invoke>d__4")]
public Task Invoke(HttpContext context);
}
public class Microsoft.AspNetCore.HttpOverrides.IPNetwork : object {
    [CompilerGeneratedAttribute]
private IPAddress <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <PrefixBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PrefixLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Mask>k__BackingField;
    public IPAddress Prefix { get; }
    private Byte[] PrefixBytes { get; }
    public int PrefixLength { get; }
    private Byte[] Mask { get; }
    public IPNetwork(IPAddress prefix, int prefixLength);
    [CompilerGeneratedAttribute]
public IPAddress get_Prefix();
    [CompilerGeneratedAttribute]
private Byte[] get_PrefixBytes();
    [CompilerGeneratedAttribute]
public int get_PrefixLength();
    [CompilerGeneratedAttribute]
private Byte[] get_Mask();
    public bool Contains(IPAddress address);
    private Byte[] CreateMask();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.CertificateForwardingServiceExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddCertificateForwarding(IServiceCollection services, Action`1<CertificateForwardingOptions> configure);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.Logging.LoggingExtensions : object {
    private static Action`2<ILogger, Exception> _noCertificate;
    private static LoggingExtensions();
    [ExtensionAttribute]
public static void NoCertificate(ILogger logger, Exception exception);
}
