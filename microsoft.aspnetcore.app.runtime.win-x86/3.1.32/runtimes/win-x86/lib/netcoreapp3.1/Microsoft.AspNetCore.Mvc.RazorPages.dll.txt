public class Microsoft.AspNetCore.Builder.PageActionEndpointConventionBuilder : object {
    private object _lock;
    private List`1<Action`1<EndpointBuilder>> _conventions;
    internal PageActionEndpointConventionBuilder(object lock, List`1<Action`1<EndpointBuilder>> conventions);
    public sealed virtual void Add(Action`1<EndpointBuilder> convention);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.RazorPagesEndpointRouteBuilderExtensions : object {
    [ExtensionAttribute]
public static PageActionEndpointConventionBuilder MapRazorPages(IEndpointRouteBuilder endpoints);
    [ExtensionAttribute]
public static IEndpointConventionBuilder MapFallbackToPage(IEndpointRouteBuilder endpoints, string page);
    [ExtensionAttribute]
public static IEndpointConventionBuilder MapFallbackToPage(IEndpointRouteBuilder endpoints, string pattern, string page);
    [ExtensionAttribute]
public static IEndpointConventionBuilder MapFallbackToAreaPage(IEndpointRouteBuilder endpoints, string page, string area);
    [ExtensionAttribute]
public static IEndpointConventionBuilder MapFallbackToAreaPage(IEndpointRouteBuilder endpoints, string pattern, string page, string area);
    [ExtensionAttribute]
public static void MapDynamicPageRoute(IEndpointRouteBuilder endpoints, string pattern);
    private static DynamicPageMetadata CreateDynamicPageMetadata(string page, string area);
    private static void EnsureRazorPagesServices(IEndpointRouteBuilder endpoints);
    private static PageActionEndpointDataSource GetOrCreateDataSource(IEndpointRouteBuilder endpoints);
}
internal class Microsoft.AspNetCore.Mvc.ApplicationModels.AuthorizationPageApplicationModelProvider : object {
    private IAuthorizationPolicyProvider _policyProvider;
    private MvcOptions _mvcOptions;
    public int Order { get; }
    public AuthorizationPageApplicationModelProvider(IAuthorizationPolicyProvider policyProvider, IOptions`1<MvcOptions> mvcOptions);
    public sealed virtual int get_Order();
    public sealed virtual void OnProvidersExecuting(PageApplicationModelProviderContext context);
    public sealed virtual void OnProvidersExecuted(PageApplicationModelProviderContext context);
}
internal class Microsoft.AspNetCore.Mvc.ApplicationModels.AutoValidateAntiforgeryPageApplicationModelProvider : object {
    public int Order { get; }
    public sealed virtual int get_Order();
    public sealed virtual void OnProvidersExecuted(PageApplicationModelProviderContext context);
    public sealed virtual void OnProvidersExecuting(PageApplicationModelProviderContext context);
}
internal static class Microsoft.AspNetCore.Mvc.ApplicationModels.CompiledPageActionDescriptorBuilder : object {
    public static CompiledPageActionDescriptor Build(PageApplicationModel applicationModel, FilterCollection globalFilters);
    private static IList`1<object> CreateEndPointMetadata(PageApplicationModel applicationModel);
    internal static HandlerMethodDescriptor[] CreateHandlerMethods(PageApplicationModel applicationModel);
    internal static HandlerParameterDescriptor[] CreateHandlerParameters(PageHandlerModel handlerModel);
    internal static PageBoundPropertyDescriptor[] CreateBoundProperties(PageApplicationModel applicationModel);
}
internal class Microsoft.AspNetCore.Mvc.ApplicationModels.CompiledPageRouteModelProvider : object {
    private static string RazorPageDocumentKind;
    private static string RouteTemplateKey;
    private ApplicationPartManager _applicationManager;
    private RazorPagesOptions _pagesOptions;
    private PageRouteModelFactory _routeModelFactory;
    public int Order { get; }
    public CompiledPageRouteModelProvider(ApplicationPartManager applicationManager, IOptions`1<RazorPagesOptions> pagesOptionsAccessor, ILogger`1<CompiledPageRouteModelProvider> logger);
    private static CompiledPageRouteModelProvider();
    public sealed virtual int get_Order();
    public sealed virtual void OnProvidersExecuting(PageRouteModelProviderContext context);
    public sealed virtual void OnProvidersExecuted(PageRouteModelProviderContext context);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Mvc.ApplicationModels.CompiledPageRouteModelProvider/<GetViewDescriptors>d__10")]
private IEnumerable`1<CompiledViewDescriptor> GetViewDescriptors(ApplicationPartManager applicationManager);
    protected virtual ViewsFeature GetViewFeature(ApplicationPartManager applicationManager);
    private void CreateModels(PageRouteModelProviderContext context);
    internal static string GetRouteTemplate(CompiledViewDescriptor viewDescriptor);
    [CompilerGeneratedAttribute]
internal static bool <GetViewDescriptors>g__IsRazorPage|10_0(CompiledViewDescriptor viewDescriptor);
}
internal class Microsoft.AspNetCore.Mvc.ApplicationModels.DefaultPageApplicationModelPartsProvider : object {
    private IModelMetadataProvider _modelMetadataProvider;
    private Func`2<ActionContext, bool> _supportsAllRequests;
    private Func`2<ActionContext, bool> _supportsNonGetRequests;
    public DefaultPageApplicationModelPartsProvider(IModelMetadataProvider modelMetadataProvider);
    public sealed virtual PageHandlerModel CreateHandlerModel(MethodInfo method);
    public sealed virtual PageParameterModel CreateParameterModel(ParameterInfo parameter);
    public sealed virtual PagePropertyModel CreatePropertyModel(PropertyInfo property);
    public sealed virtual bool IsHandler(MethodInfo methodInfo);
    internal static bool TryParseHandlerMethod(string methodName, String& httpMethod, String& handler);
}
internal class Microsoft.AspNetCore.Mvc.ApplicationModels.DefaultPageApplicationModelProvider : object {
    private static string ModelPropertyName;
    private PageHandlerPageFilter _pageHandlerPageFilter;
    private PageHandlerResultFilter _pageHandlerResultFilter;
    private IModelMetadataProvider _modelMetadataProvider;
    private RazorPagesOptions _razorPagesOptions;
    private IPageApplicationModelPartsProvider _pageApplicationModelPartsProvider;
    private HandleOptionsRequestsPageFilter _handleOptionsRequestsFilter;
    public int Order { get; }
    public DefaultPageApplicationModelProvider(IModelMetadataProvider modelMetadataProvider, IOptions`1<RazorPagesOptions> razorPagesOptions, IPageApplicationModelPartsProvider pageApplicationModelPartsProvider);
    public sealed virtual int get_Order();
    public sealed virtual void OnProvidersExecuting(PageApplicationModelProviderContext context);
    public sealed virtual void OnProvidersExecuted(PageApplicationModelProviderContext context);
    protected virtual PageApplicationModel CreateModel(PageActionDescriptor actionDescriptor, TypeInfo pageTypeInfo);
    internal void PopulateHandlerProperties(PageApplicationModel pageModel);
    internal void PopulateHandlerMethods(PageApplicationModel pageModel);
    internal void PopulateFilters(PageApplicationModel pageModel);
}
public interface Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention {
    public abstract virtual void Apply(PageApplicationModel model);
}
public interface Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelPartsProvider {
    public abstract virtual PageHandlerModel CreateHandlerModel(MethodInfo method);
    public abstract virtual PageParameterModel CreateParameterModel(ParameterInfo parameter);
    public abstract virtual PagePropertyModel CreatePropertyModel(PropertyInfo property);
    public abstract virtual bool IsHandler(MethodInfo methodInfo);
}
public interface Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelProvider {
    public int Order { get; }
    public abstract virtual int get_Order();
    public abstract virtual void OnProvidersExecuting(PageApplicationModelProviderContext context);
    public abstract virtual void OnProvidersExecuted(PageApplicationModelProviderContext context);
}
public interface Microsoft.AspNetCore.Mvc.ApplicationModels.IPageConvention {
}
public interface Microsoft.AspNetCore.Mvc.ApplicationModels.IPageHandlerModelConvention {
    public abstract virtual void Apply(PageHandlerModel model);
}
public interface Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelConvention {
    public abstract virtual void Apply(PageRouteModel model);
}
public interface Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelProvider {
    public int Order { get; }
    public abstract virtual int get_Order();
    public abstract virtual void OnProvidersExecuting(PageRouteModelProviderContext context);
    public abstract virtual void OnProvidersExecuted(PageRouteModelProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel : object {
    [CompilerGeneratedAttribute]
private PageActionDescriptor <ActionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IFilterMetadata> <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeInfo <PageType>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeInfo <DeclaredModelType>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeInfo <ModelType>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeInfo <HandlerType>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <HandlerTypeAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PageHandlerModel> <HandlerMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PagePropertyModel> <HandlerProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<object> <EndpointMetadata>k__BackingField;
    public PageActionDescriptor ActionDescriptor { get; }
    public string RelativePath { get; }
    public string ViewEnginePath { get; }
    public string AreaName { get; }
    public string RouteTemplate { get; }
    public IList`1<IFilterMetadata> Filters { get; }
    public IDictionary`2<object, object> Properties { get; }
    public TypeInfo PageType { get; public set; }
    public TypeInfo DeclaredModelType { get; }
    public TypeInfo ModelType { get; public set; }
    public TypeInfo HandlerType { get; }
    public IReadOnlyList`1<object> HandlerTypeAttributes { get; }
    public IList`1<PageHandlerModel> HandlerMethods { get; }
    public IList`1<PagePropertyModel> HandlerProperties { get; }
    public IList`1<object> EndpointMetadata { get; }
    public PageApplicationModel(PageActionDescriptor actionDescriptor, TypeInfo handlerType, IReadOnlyList`1<object> handlerAttributes);
    public PageApplicationModel(PageActionDescriptor actionDescriptor, TypeInfo declaredModelType, TypeInfo handlerType, IReadOnlyList`1<object> handlerAttributes);
    public PageApplicationModel(PageApplicationModel other);
    [CompilerGeneratedAttribute]
public PageActionDescriptor get_ActionDescriptor();
    public string get_RelativePath();
    public string get_ViewEnginePath();
    public string get_AreaName();
    public string get_RouteTemplate();
    [CompilerGeneratedAttribute]
public IList`1<IFilterMetadata> get_Filters();
    [CompilerGeneratedAttribute]
public IDictionary`2<object, object> get_Properties();
    [CompilerGeneratedAttribute]
public TypeInfo get_PageType();
    [CompilerGeneratedAttribute]
public void set_PageType(TypeInfo value);
    [CompilerGeneratedAttribute]
public TypeInfo get_DeclaredModelType();
    [CompilerGeneratedAttribute]
public TypeInfo get_ModelType();
    [CompilerGeneratedAttribute]
public void set_ModelType(TypeInfo value);
    [CompilerGeneratedAttribute]
public TypeInfo get_HandlerType();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_HandlerTypeAttributes();
    [CompilerGeneratedAttribute]
public IList`1<PageHandlerModel> get_HandlerMethods();
    [CompilerGeneratedAttribute]
public IList`1<PagePropertyModel> get_HandlerProperties();
    [CompilerGeneratedAttribute]
public IList`1<object> get_EndpointMetadata();
}
public class Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModelProviderContext : object {
    [CompilerGeneratedAttribute]
private PageActionDescriptor <ActionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeInfo <PageType>k__BackingField;
    [CompilerGeneratedAttribute]
private PageApplicationModel <PageApplicationModel>k__BackingField;
    public PageActionDescriptor ActionDescriptor { get; }
    public TypeInfo PageType { get; }
    public PageApplicationModel PageApplicationModel { get; public set; }
    public PageApplicationModelProviderContext(PageActionDescriptor descriptor, TypeInfo pageTypeInfo);
    [CompilerGeneratedAttribute]
public PageActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public TypeInfo get_PageType();
    [CompilerGeneratedAttribute]
public PageApplicationModel get_PageApplicationModel();
    [CompilerGeneratedAttribute]
public void set_PageApplicationModel(PageApplicationModel value);
}
public class Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection : Collection`1<IPageConvention> {
    private IServiceProvider _serviceProvider;
    private MvcOptions _mvcOptions;
    internal MvcOptions MvcOptions { get; }
    public PageConventionCollection(IList`1<IPageConvention> conventions);
    internal PageConventionCollection(IServiceProvider serviceProvider);
    internal MvcOptions get_MvcOptions();
    public IPageApplicationModelConvention AddPageApplicationModelConvention(string pageName, Action`1<PageApplicationModel> action);
    public IPageApplicationModelConvention AddAreaPageApplicationModelConvention(string areaName, string pageName, Action`1<PageApplicationModel> action);
    public IPageApplicationModelConvention AddFolderApplicationModelConvention(string folderPath, Action`1<PageApplicationModel> action);
    public IPageApplicationModelConvention AddAreaFolderApplicationModelConvention(string areaName, string folderPath, Action`1<PageApplicationModel> action);
    public IPageRouteModelConvention AddPageRouteModelConvention(string pageName, Action`1<PageRouteModel> action);
    public IPageRouteModelConvention AddAreaPageRouteModelConvention(string areaName, string pageName, Action`1<PageRouteModel> action);
    public IPageRouteModelConvention AddFolderRouteModelConvention(string folderPath, Action`1<PageRouteModel> action);
    public IPageRouteModelConvention AddAreaFolderRouteModelConvention(string areaName, string folderPath, Action`1<PageRouteModel> action);
    public void RemoveType();
    public void RemoveType(Type pageConventionType);
    internal static void EnsureValidPageName(string pageName, string argumentName);
    internal static void EnsureValidFolderPath(string folderPath);
    private TConvention Add(TConvention convention);
    internal static bool PathBelongsToFolder(string folderPath, string viewEnginePath);
}
[DebuggerDisplayAttribute("PageHandlerModel: Name={Name}")]
public class Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel : object {
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HttpMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HandlerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PageParameterModel> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private PageApplicationModel <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <Properties>k__BackingField;
    public MethodInfo MethodInfo { get; }
    public string HttpMethod { get; public set; }
    public string HandlerName { get; public set; }
    public string Name { get; public set; }
    public IList`1<PageParameterModel> Parameters { get; }
    public PageApplicationModel Page { get; public set; }
    public IReadOnlyList`1<object> Attributes { get; }
    public IDictionary`2<object, object> Properties { get; }
    private MemberInfo Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.MemberInfo { get; }
    public PageHandlerModel(MethodInfo handlerMethod, IReadOnlyList`1<object> attributes);
    public PageHandlerModel(PageHandlerModel other);
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
public string get_HttpMethod();
    [CompilerGeneratedAttribute]
public void set_HttpMethod(string value);
    [CompilerGeneratedAttribute]
public string get_HandlerName();
    [CompilerGeneratedAttribute]
public void set_HandlerName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IList`1<PageParameterModel> get_Parameters();
    [CompilerGeneratedAttribute]
public PageApplicationModel get_Page();
    [CompilerGeneratedAttribute]
public void set_Page(PageApplicationModel value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<object> get_Attributes();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<object, object> get_Properties();
    private sealed virtual override MemberInfo Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.get_MemberInfo();
    [CompilerGeneratedAttribute]
private PageParameterModel <.ctor>b__1_0(PageParameterModel p);
}
[DebuggerDisplayAttribute("PageParameterModel: Name={ParameterName}")]
public class Microsoft.AspNetCore.Mvc.ApplicationModels.PageParameterModel : ParameterModelBase {
    [CompilerGeneratedAttribute]
private PageHandlerModel <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterInfo <ParameterInfo>k__BackingField;
    public PageHandlerModel Handler { get; public set; }
    private MemberInfo Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.MemberInfo { get; }
    public ParameterInfo ParameterInfo { get; }
    public string ParameterName { get; public set; }
    public PageParameterModel(ParameterInfo parameterInfo, IReadOnlyList`1<object> attributes);
    public PageParameterModel(PageParameterModel other);
    [CompilerGeneratedAttribute]
public PageHandlerModel get_Handler();
    [CompilerGeneratedAttribute]
public void set_Handler(PageHandlerModel value);
    private sealed virtual override MemberInfo Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.get_MemberInfo();
    [CompilerGeneratedAttribute]
public ParameterInfo get_ParameterInfo();
    public string get_ParameterName();
    public void set_ParameterName(string value);
    private sealed virtual override IReadOnlyList`1<object> Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.get_Attributes();
    private sealed virtual override IDictionary`2<object, object> Microsoft.AspNetCore.Mvc.ApplicationModels.IPropertyModel.get_Properties();
}
[DebuggerDisplayAttribute("PagePropertyModel: Name={PropertyName}")]
public class Microsoft.AspNetCore.Mvc.ApplicationModels.PagePropertyModel : ParameterModelBase {
    [CompilerGeneratedAttribute]
private PageApplicationModel <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    public PageApplicationModel Page { get; public set; }
    private MemberInfo Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.MemberInfo { get; }
    public PropertyInfo PropertyInfo { get; }
    public string PropertyName { get; public set; }
    public PagePropertyModel(PropertyInfo propertyInfo, IReadOnlyList`1<object> attributes);
    public PagePropertyModel(PagePropertyModel other);
    [CompilerGeneratedAttribute]
public PageApplicationModel get_Page();
    [CompilerGeneratedAttribute]
public void set_Page(PageApplicationModel value);
    private sealed virtual override MemberInfo Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.get_MemberInfo();
    [CompilerGeneratedAttribute]
public PropertyInfo get_PropertyInfo();
    public string get_PropertyName();
    public void set_PropertyName(string value);
    private sealed virtual override IReadOnlyList`1<object> Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.get_Attributes();
    private sealed virtual override IDictionary`2<object, object> Microsoft.AspNetCore.Mvc.ApplicationModels.IPropertyModel.get_Properties();
}
public class Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteMetadata : object {
    [CompilerGeneratedAttribute]
private string <PageRoute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RouteTemplate>k__BackingField;
    public string PageRoute { get; }
    public string RouteTemplate { get; }
    public PageRouteMetadata(string pageRoute, string routeTemplate);
    [CompilerGeneratedAttribute]
public string get_PageRoute();
    [CompilerGeneratedAttribute]
public string get_RouteTemplate();
}
public class Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel : object {
    [CompilerGeneratedAttribute]
private string <RelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ViewEnginePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AreaName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SelectorModel> <Selectors>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <RouteValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IOutboundParameterTransformer <RouteParameterTransformer>k__BackingField;
    public string RelativePath { get; }
    public string ViewEnginePath { get; }
    public string AreaName { get; }
    public IDictionary`2<object, object> Properties { get; }
    public IList`1<SelectorModel> Selectors { get; }
    public IDictionary`2<string, string> RouteValues { get; }
    public IOutboundParameterTransformer RouteParameterTransformer { get; public set; }
    public PageRouteModel(string relativePath, string viewEnginePath);
    public PageRouteModel(string relativePath, string viewEnginePath, string areaName);
    public PageRouteModel(PageRouteModel other);
    [CompilerGeneratedAttribute]
public string get_RelativePath();
    [CompilerGeneratedAttribute]
public string get_ViewEnginePath();
    [CompilerGeneratedAttribute]
public string get_AreaName();
    [CompilerGeneratedAttribute]
public IDictionary`2<object, object> get_Properties();
    [CompilerGeneratedAttribute]
public IList`1<SelectorModel> get_Selectors();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_RouteValues();
    [CompilerGeneratedAttribute]
public IOutboundParameterTransformer get_RouteParameterTransformer();
    [CompilerGeneratedAttribute]
public void set_RouteParameterTransformer(IOutboundParameterTransformer value);
}
internal class Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModelFactory : object {
    private static Action`3<ILogger, string, Exception> _unsupportedAreaPath;
    private static string IndexFileName;
    private RazorPagesOptions _options;
    private ILogger _logger;
    private string _normalizedRootDirectory;
    private string _normalizedAreaRootDirectory;
    private static PageRouteModelFactory();
    public PageRouteModelFactory(RazorPagesOptions options, ILogger logger);
    public PageRouteModel CreateRouteModel(string relativePath, string routeTemplate);
    public PageRouteModel CreateAreaRouteModel(string relativePath, string routeTemplate);
    private static void PopulateRouteModel(PageRouteModel model, string pageRoute, string routeTemplate);
    internal bool TryParseAreaPath(string relativePath, ValueTuple`2& result);
    private string GetViewEnginePath(string rootDirectory, string path);
    private static string CreateAreaRoute(string areaName, string viewEnginePath);
    private static SelectorModel CreateSelectorModel(string prefix, string routeTemplate);
    private static string NormalizeDirectory(string directory);
}
public class Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModelProviderContext : object {
    [CompilerGeneratedAttribute]
private IList`1<PageRouteModel> <RouteModels>k__BackingField;
    public IList`1<PageRouteModel> RouteModels { get; }
    [CompilerGeneratedAttribute]
public IList`1<PageRouteModel> get_RouteModels();
}
public class Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteTransformerConvention : object {
    private IOutboundParameterTransformer _parameterTransformer;
    public PageRouteTransformerConvention(IOutboundParameterTransformer parameterTransformer);
    public sealed virtual void Apply(PageRouteModel model);
    protected virtual bool ShouldApply(PageRouteModel action);
}
internal class Microsoft.AspNetCore.Mvc.ApplicationModels.ResponseCacheFilterApplicationModelProvider : object {
    private MvcOptions _mvcOptions;
    private ILoggerFactory _loggerFactory;
    public int Order { get; }
    public ResponseCacheFilterApplicationModelProvider(IOptions`1<MvcOptions> mvcOptionsAccessor, ILoggerFactory loggerFactory);
    public sealed virtual int get_Order();
    public sealed virtual void OnProvidersExecuting(PageApplicationModelProviderContext context);
    public sealed virtual void OnProvidersExecuted(PageApplicationModelProviderContext context);
}
internal class Microsoft.AspNetCore.Mvc.ApplicationModels.TempDataFilterPageApplicationModelProvider : object {
    private TempDataSerializer _tempDataSerializer;
    public int Order { get; }
    public TempDataFilterPageApplicationModelProvider(TempDataSerializer tempDataSerializer);
    public sealed virtual int get_Order();
    public sealed virtual void OnProvidersExecuted(PageApplicationModelProviderContext context);
    public sealed virtual void OnProvidersExecuting(PageApplicationModelProviderContext context);
}
internal class Microsoft.AspNetCore.Mvc.ApplicationModels.ViewDataAttributePageApplicationModelProvider : object {
    public int Order { get; }
    public sealed virtual int get_Order();
    public sealed virtual void OnProvidersExecuted(PageApplicationModelProviderContext context);
    public sealed virtual void OnProvidersExecuting(PageApplicationModelProviderContext context);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Mvc.Diagnostics.AfterHandlerMethodEventData : EventData {
    public static string EventName;
    [CompilerGeneratedAttribute]
private ActionContext <ActionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private HandlerMethodDescriptor <HandlerMethodDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionResult <Result>k__BackingField;
    public ActionContext ActionContext { get; }
    public IReadOnlyDictionary`2<string, object> Arguments { get; }
    public HandlerMethodDescriptor HandlerMethodDescriptor { get; }
    public object Instance { get; }
    public IActionResult Result { get; }
    protected int Count { get; }
    protected KeyValuePair`2<string, object> Item { get; }
    public AfterHandlerMethodEventData(ActionContext actionContext, IReadOnlyDictionary`2<string, object> arguments, HandlerMethodDescriptor handlerMethodDescriptor, object instance, IActionResult result);
    [CompilerGeneratedAttribute]
public ActionContext get_ActionContext();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Arguments();
    [CompilerGeneratedAttribute]
public HandlerMethodDescriptor get_HandlerMethodDescriptor();
    [CompilerGeneratedAttribute]
public object get_Instance();
    [CompilerGeneratedAttribute]
public IActionResult get_Result();
    protected virtual int get_Count();
    protected virtual KeyValuePair`2<string, object> get_Item(int index);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerExecutedEventData : EventData {
    public static string EventName;
    [CompilerGeneratedAttribute]
private CompiledPageActionDescriptor <ActionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private PageHandlerExecutedContext <HandlerExecutedContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IPageFilter <Filter>k__BackingField;
    public CompiledPageActionDescriptor ActionDescriptor { get; }
    public PageHandlerExecutedContext HandlerExecutedContext { get; }
    public IPageFilter Filter { get; }
    protected int Count { get; }
    protected KeyValuePair`2<string, object> Item { get; }
    public AfterPageFilterOnPageHandlerExecutedEventData(CompiledPageActionDescriptor actionDescriptor, PageHandlerExecutedContext handlerExecutedContext, IPageFilter filter);
    [CompilerGeneratedAttribute]
public CompiledPageActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public PageHandlerExecutedContext get_HandlerExecutedContext();
    [CompilerGeneratedAttribute]
public IPageFilter get_Filter();
    protected virtual int get_Count();
    protected virtual KeyValuePair`2<string, object> get_Item(int index);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerExecutingEventData : EventData {
    public static string EventName;
    [CompilerGeneratedAttribute]
private CompiledPageActionDescriptor <ActionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private PageHandlerExecutingContext <HandlerExecutingContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IPageFilter <Filter>k__BackingField;
    public CompiledPageActionDescriptor ActionDescriptor { get; }
    public PageHandlerExecutingContext HandlerExecutingContext { get; }
    public IPageFilter Filter { get; }
    protected int Count { get; }
    protected KeyValuePair`2<string, object> Item { get; }
    public AfterPageFilterOnPageHandlerExecutingEventData(CompiledPageActionDescriptor actionDescriptor, PageHandlerExecutingContext handlerExecutingContext, IPageFilter filter);
    [CompilerGeneratedAttribute]
public CompiledPageActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public PageHandlerExecutingContext get_HandlerExecutingContext();
    [CompilerGeneratedAttribute]
public IPageFilter get_Filter();
    protected virtual int get_Count();
    protected virtual KeyValuePair`2<string, object> get_Item(int index);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerExecutionEventData : EventData {
    public static string EventName;
    [CompilerGeneratedAttribute]
private CompiledPageActionDescriptor <ActionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private PageHandlerExecutedContext <HandlerExecutedContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsyncPageFilter <Filter>k__BackingField;
    public CompiledPageActionDescriptor ActionDescriptor { get; }
    public PageHandlerExecutedContext HandlerExecutedContext { get; }
    public IAsyncPageFilter Filter { get; }
    protected int Count { get; }
    protected KeyValuePair`2<string, object> Item { get; }
    public AfterPageFilterOnPageHandlerExecutionEventData(CompiledPageActionDescriptor actionDescriptor, PageHandlerExecutedContext handlerExecutedContext, IAsyncPageFilter filter);
    [CompilerGeneratedAttribute]
public CompiledPageActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public PageHandlerExecutedContext get_HandlerExecutedContext();
    [CompilerGeneratedAttribute]
public IAsyncPageFilter get_Filter();
    protected virtual int get_Count();
    protected virtual KeyValuePair`2<string, object> get_Item(int index);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerSelectedEventData : EventData {
    public static string EventName;
    [CompilerGeneratedAttribute]
private CompiledPageActionDescriptor <ActionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private PageHandlerSelectedContext <HandlerSelectedContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IPageFilter <Filter>k__BackingField;
    public CompiledPageActionDescriptor ActionDescriptor { get; }
    public PageHandlerSelectedContext HandlerSelectedContext { get; }
    public IPageFilter Filter { get; }
    protected int Count { get; }
    protected KeyValuePair`2<string, object> Item { get; }
    public AfterPageFilterOnPageHandlerSelectedEventData(CompiledPageActionDescriptor actionDescriptor, PageHandlerSelectedContext handlerSelectedContext, IPageFilter filter);
    [CompilerGeneratedAttribute]
public CompiledPageActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public PageHandlerSelectedContext get_HandlerSelectedContext();
    [CompilerGeneratedAttribute]
public IPageFilter get_Filter();
    protected virtual int get_Count();
    protected virtual KeyValuePair`2<string, object> get_Item(int index);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerSelectionEventData : EventData {
    public static string EventName;
    [CompilerGeneratedAttribute]
private CompiledPageActionDescriptor <ActionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private PageHandlerSelectedContext <HandlerSelectedContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsyncPageFilter <Filter>k__BackingField;
    public CompiledPageActionDescriptor ActionDescriptor { get; }
    public PageHandlerSelectedContext HandlerSelectedContext { get; }
    public IAsyncPageFilter Filter { get; }
    protected int Count { get; }
    protected KeyValuePair`2<string, object> Item { get; }
    public AfterPageFilterOnPageHandlerSelectionEventData(CompiledPageActionDescriptor actionDescriptor, PageHandlerSelectedContext handlerSelectedContext, IAsyncPageFilter filter);
    [CompilerGeneratedAttribute]
public CompiledPageActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public PageHandlerSelectedContext get_HandlerSelectedContext();
    [CompilerGeneratedAttribute]
public IAsyncPageFilter get_Filter();
    protected virtual int get_Count();
    protected virtual KeyValuePair`2<string, object> get_Item(int index);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Mvc.Diagnostics.BeforeHandlerMethodEventData : EventData {
    public static string EventName;
    [CompilerGeneratedAttribute]
private ActionContext <ActionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private HandlerMethodDescriptor <HandlerMethodDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Instance>k__BackingField;
    public ActionContext ActionContext { get; }
    public IReadOnlyDictionary`2<string, object> Arguments { get; }
    public HandlerMethodDescriptor HandlerMethodDescriptor { get; }
    public object Instance { get; }
    protected int Count { get; }
    protected KeyValuePair`2<string, object> Item { get; }
    public BeforeHandlerMethodEventData(ActionContext actionContext, IReadOnlyDictionary`2<string, object> arguments, HandlerMethodDescriptor handlerMethodDescriptor, object instance);
    [CompilerGeneratedAttribute]
public ActionContext get_ActionContext();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Arguments();
    [CompilerGeneratedAttribute]
public HandlerMethodDescriptor get_HandlerMethodDescriptor();
    [CompilerGeneratedAttribute]
public object get_Instance();
    protected virtual int get_Count();
    protected virtual KeyValuePair`2<string, object> get_Item(int index);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerExecutedEventData : EventData {
    public static string EventName;
    [CompilerGeneratedAttribute]
private CompiledPageActionDescriptor <ActionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private PageHandlerExecutedContext <HandlerExecutedContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IPageFilter <Filter>k__BackingField;
    public CompiledPageActionDescriptor ActionDescriptor { get; }
    public PageHandlerExecutedContext HandlerExecutedContext { get; }
    public IPageFilter Filter { get; }
    protected int Count { get; }
    protected KeyValuePair`2<string, object> Item { get; }
    public BeforePageFilterOnPageHandlerExecutedEventData(CompiledPageActionDescriptor actionDescriptor, PageHandlerExecutedContext handlerExecutedContext, IPageFilter filter);
    [CompilerGeneratedAttribute]
public CompiledPageActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public PageHandlerExecutedContext get_HandlerExecutedContext();
    [CompilerGeneratedAttribute]
public IPageFilter get_Filter();
    protected virtual int get_Count();
    protected virtual KeyValuePair`2<string, object> get_Item(int index);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerExecutingEventData : EventData {
    public static string EventName;
    [CompilerGeneratedAttribute]
private CompiledPageActionDescriptor <ActionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private PageHandlerExecutingContext <HandlerExecutingContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IPageFilter <Filter>k__BackingField;
    public CompiledPageActionDescriptor ActionDescriptor { get; }
    public PageHandlerExecutingContext HandlerExecutingContext { get; }
    public IPageFilter Filter { get; }
    protected int Count { get; }
    protected KeyValuePair`2<string, object> Item { get; }
    public BeforePageFilterOnPageHandlerExecutingEventData(CompiledPageActionDescriptor actionDescriptor, PageHandlerExecutingContext handlerExecutingContext, IPageFilter filter);
    [CompilerGeneratedAttribute]
public CompiledPageActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public PageHandlerExecutingContext get_HandlerExecutingContext();
    [CompilerGeneratedAttribute]
public IPageFilter get_Filter();
    protected virtual int get_Count();
    protected virtual KeyValuePair`2<string, object> get_Item(int index);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerExecutionEventData : EventData {
    public static string EventName;
    [CompilerGeneratedAttribute]
private CompiledPageActionDescriptor <ActionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private PageHandlerExecutingContext <HandlerExecutionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsyncPageFilter <Filter>k__BackingField;
    public CompiledPageActionDescriptor ActionDescriptor { get; }
    public PageHandlerExecutingContext HandlerExecutionContext { get; }
    public IAsyncPageFilter Filter { get; }
    protected int Count { get; }
    protected KeyValuePair`2<string, object> Item { get; }
    public BeforePageFilterOnPageHandlerExecutionEventData(CompiledPageActionDescriptor actionDescriptor, PageHandlerExecutingContext handlerExecutionContext, IAsyncPageFilter filter);
    [CompilerGeneratedAttribute]
public CompiledPageActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public PageHandlerExecutingContext get_HandlerExecutionContext();
    [CompilerGeneratedAttribute]
public IAsyncPageFilter get_Filter();
    protected virtual int get_Count();
    protected virtual KeyValuePair`2<string, object> get_Item(int index);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerSelectedEventData : EventData {
    public static string EventName;
    [CompilerGeneratedAttribute]
private CompiledPageActionDescriptor <ActionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private PageHandlerSelectedContext <HandlerSelectedContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IPageFilter <Filter>k__BackingField;
    public CompiledPageActionDescriptor ActionDescriptor { get; }
    public PageHandlerSelectedContext HandlerSelectedContext { get; }
    public IPageFilter Filter { get; }
    protected int Count { get; }
    protected KeyValuePair`2<string, object> Item { get; }
    public BeforePageFilterOnPageHandlerSelectedEventData(CompiledPageActionDescriptor actionDescriptor, PageHandlerSelectedContext handlerSelectedContext, IPageFilter filter);
    [CompilerGeneratedAttribute]
public CompiledPageActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public PageHandlerSelectedContext get_HandlerSelectedContext();
    [CompilerGeneratedAttribute]
public IPageFilter get_Filter();
    protected virtual int get_Count();
    protected virtual KeyValuePair`2<string, object> get_Item(int index);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerSelectionEventData : EventData {
    public static string EventName;
    [CompilerGeneratedAttribute]
private CompiledPageActionDescriptor <ActionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private PageHandlerSelectedContext <HandlerSelectedContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsyncPageFilter <Filter>k__BackingField;
    public CompiledPageActionDescriptor ActionDescriptor { get; }
    public PageHandlerSelectedContext HandlerSelectedContext { get; }
    public IAsyncPageFilter Filter { get; }
    protected int Count { get; }
    protected KeyValuePair`2<string, object> Item { get; }
    public BeforePageFilterOnPageHandlerSelectionEventData(CompiledPageActionDescriptor actionDescriptor, PageHandlerSelectedContext handlerSelectedContext, IAsyncPageFilter filter);
    [CompilerGeneratedAttribute]
public CompiledPageActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public PageHandlerSelectedContext get_HandlerSelectedContext();
    [CompilerGeneratedAttribute]
public IAsyncPageFilter get_Filter();
    protected virtual int get_Count();
    protected virtual KeyValuePair`2<string, object> get_Item(int index);
}
public interface Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter {
    public abstract virtual Task OnPageHandlerSelectionAsync(PageHandlerSelectedContext context);
    public abstract virtual Task OnPageHandlerExecutionAsync(PageHandlerExecutingContext context, PageHandlerExecutionDelegate next);
}
public interface Microsoft.AspNetCore.Mvc.Filters.IPageFilter {
    public abstract virtual void OnPageHandlerSelected(PageHandlerSelectedContext context);
    public abstract virtual void OnPageHandlerExecuting(PageHandlerExecutingContext context);
    public abstract virtual void OnPageHandlerExecuted(PageHandlerExecutedContext context);
}
public class Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext : FilterContext {
    private Exception _exception;
    private ExceptionDispatchInfo _exceptionDispatchInfo;
    [CompilerGeneratedAttribute]
private bool <Canceled>k__BackingField;
    [CompilerGeneratedAttribute]
private object <HandlerInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private HandlerMethodDescriptor <HandlerMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExceptionHandled>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionResult <Result>k__BackingField;
    public CompiledPageActionDescriptor ActionDescriptor { get; }
    public bool Canceled { get; public set; }
    public object HandlerInstance { get; }
    public HandlerMethodDescriptor HandlerMethod { get; }
    public Exception Exception { get; public set; }
    public ExceptionDispatchInfo ExceptionDispatchInfo { get; public set; }
    public bool ExceptionHandled { get; public set; }
    public IActionResult Result { get; public set; }
    public PageHandlerExecutedContext(PageContext pageContext, IList`1<IFilterMetadata> filters, HandlerMethodDescriptor handlerMethod, object handlerInstance);
    public virtual CompiledPageActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public virtual bool get_Canceled();
    [CompilerGeneratedAttribute]
public virtual void set_Canceled(bool value);
    [CompilerGeneratedAttribute]
public virtual object get_HandlerInstance();
    [CompilerGeneratedAttribute]
public virtual HandlerMethodDescriptor get_HandlerMethod();
    public virtual Exception get_Exception();
    public virtual void set_Exception(Exception value);
    public virtual ExceptionDispatchInfo get_ExceptionDispatchInfo();
    public virtual void set_ExceptionDispatchInfo(ExceptionDispatchInfo value);
    [CompilerGeneratedAttribute]
public virtual bool get_ExceptionHandled();
    [CompilerGeneratedAttribute]
public virtual void set_ExceptionHandled(bool value);
    [CompilerGeneratedAttribute]
public virtual IActionResult get_Result();
    [CompilerGeneratedAttribute]
public virtual void set_Result(IActionResult value);
}
public class Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext : FilterContext {
    [CompilerGeneratedAttribute]
private IActionResult <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <HandlerArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private HandlerMethodDescriptor <HandlerMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private object <HandlerInstance>k__BackingField;
    public CompiledPageActionDescriptor ActionDescriptor { get; }
    public IActionResult Result { get; public set; }
    public IDictionary`2<string, object> HandlerArguments { get; }
    public HandlerMethodDescriptor HandlerMethod { get; }
    public object HandlerInstance { get; }
    public PageHandlerExecutingContext(PageContext pageContext, IList`1<IFilterMetadata> filters, HandlerMethodDescriptor handlerMethod, IDictionary`2<string, object> handlerArguments, object handlerInstance);
    public virtual CompiledPageActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public virtual IActionResult get_Result();
    [CompilerGeneratedAttribute]
public virtual void set_Result(IActionResult value);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, object> get_HandlerArguments();
    [CompilerGeneratedAttribute]
public virtual HandlerMethodDescriptor get_HandlerMethod();
    [CompilerGeneratedAttribute]
public virtual object get_HandlerInstance();
}
public class Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutionDelegate : MulticastDelegate {
    public PageHandlerExecutionDelegate(object object, IntPtr method);
    public virtual Task`1<PageHandlerExecutedContext> Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual Task`1<PageHandlerExecutedContext> EndInvoke(IAsyncResult result);
}
internal class Microsoft.AspNetCore.Mvc.Filters.PageHandlerPageFilter : object {
    public int Order { get; }
    public sealed virtual int get_Order();
    public sealed virtual Task OnPageHandlerExecutionAsync(PageHandlerExecutingContext context, PageHandlerExecutionDelegate next);
    public sealed virtual Task OnPageHandlerSelectionAsync(PageHandlerSelectedContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Filters.PageHandlerPageFilter/<ExecuteSyncFilter>d__4")]
private static Task ExecuteSyncFilter(PageHandlerExecutingContext context, PageHandlerExecutionDelegate next, IPageFilter pageFilter);
}
internal class Microsoft.AspNetCore.Mvc.Filters.PageHandlerResultFilter : object {
    public int Order { get; }
    public sealed virtual int get_Order();
    public sealed virtual Task OnResultExecutionAsync(ResultExecutingContext context, ResultExecutionDelegate next);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Filters.PageHandlerResultFilter/<ExecuteSyncFilter>d__3")]
private static Task ExecuteSyncFilter(ResultExecutingContext context, ResultExecutionDelegate next, IResultFilter resultFilter);
}
public class Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext : FilterContext {
    [CompilerGeneratedAttribute]
private HandlerMethodDescriptor <HandlerMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private object <HandlerInstance>k__BackingField;
    public CompiledPageActionDescriptor ActionDescriptor { get; }
    public HandlerMethodDescriptor HandlerMethod { get; public set; }
    public object HandlerInstance { get; }
    public PageHandlerSelectedContext(PageContext pageContext, IList`1<IFilterMetadata> filters, object handlerInstance);
    public virtual CompiledPageActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public virtual HandlerMethodDescriptor get_HandlerMethod();
    [CompilerGeneratedAttribute]
public virtual void set_HandlerMethod(HandlerMethodDescriptor value);
    [CompilerGeneratedAttribute]
public virtual object get_HandlerInstance();
}
internal class Microsoft.AspNetCore.Mvc.Filters.PageResponseCacheFilter : object {
    private ResponseCacheFilterExecutor _executor;
    private ILogger _logger;
    public int Duration { get; public set; }
    public ResponseCacheLocation Location { get; public set; }
    public bool NoStore { get; public set; }
    public string VaryByHeader { get; public set; }
    public String[] VaryByQueryKeys { get; public set; }
    public PageResponseCacheFilter(CacheProfile cacheProfile, ILoggerFactory loggerFactory);
    public int get_Duration();
    public void set_Duration(int value);
    public ResponseCacheLocation get_Location();
    public void set_Location(ResponseCacheLocation value);
    public bool get_NoStore();
    public void set_NoStore(bool value);
    public string get_VaryByHeader();
    public void set_VaryByHeader(string value);
    public String[] get_VaryByQueryKeys();
    public void set_VaryByQueryKeys(String[] value);
    public sealed virtual void OnPageHandlerSelected(PageHandlerSelectedContext context);
    public sealed virtual void OnPageHandlerExecuting(PageHandlerExecutingContext context);
    public sealed virtual void OnPageHandlerExecuted(PageHandlerExecutedContext context);
}
internal class Microsoft.AspNetCore.Mvc.Filters.PageSaveTempDataPropertyFilter : SaveTempDataPropertyFilterBase {
    public PageSaveTempDataPropertyFilter(ITempDataDictionaryFactory factory);
    public sealed virtual void OnPageHandlerSelected(PageHandlerSelectedContext context);
    public sealed virtual void OnPageHandlerExecuting(PageHandlerExecutingContext context);
    public sealed virtual void OnPageHandlerExecuted(PageHandlerExecutedContext context);
}
internal class Microsoft.AspNetCore.Mvc.Filters.PageSaveTempDataPropertyFilterFactory : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<LifecycleProperty> <Properties>k__BackingField;
    public IReadOnlyList`1<LifecycleProperty> Properties { get; }
    public bool IsReusable { get; }
    public PageSaveTempDataPropertyFilterFactory(IReadOnlyList`1<LifecycleProperty> properties);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<LifecycleProperty> get_Properties();
    public sealed virtual bool get_IsReusable();
    public sealed virtual IFilterMetadata CreateInstance(IServiceProvider serviceProvider);
}
internal class Microsoft.AspNetCore.Mvc.Filters.PageViewDataAttributeFilter : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<LifecycleProperty> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Subject>k__BackingField;
    public IReadOnlyList`1<LifecycleProperty> Properties { get; }
    public object Subject { get; public set; }
    public PageViewDataAttributeFilter(IReadOnlyList`1<LifecycleProperty> properties);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<LifecycleProperty> get_Properties();
    [CompilerGeneratedAttribute]
public object get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(object value);
    public sealed virtual void OnPageHandlerExecuted(PageHandlerExecutedContext context);
    public sealed virtual void OnPageHandlerExecuting(PageHandlerExecutingContext context);
    public sealed virtual void OnPageHandlerSelected(PageHandlerSelectedContext context);
    public sealed virtual void ProvideViewDataValues(ViewDataDictionary viewData);
}
internal class Microsoft.AspNetCore.Mvc.Filters.PageViewDataAttributeFilterFactory : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<LifecycleProperty> <Properties>k__BackingField;
    public IReadOnlyList`1<LifecycleProperty> Properties { get; }
    public bool IsReusable { get; }
    public PageViewDataAttributeFilterFactory(IReadOnlyList`1<LifecycleProperty> properties);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<LifecycleProperty> get_Properties();
    public sealed virtual bool get_IsReusable();
    public sealed virtual IFilterMetadata CreateInstance(IServiceProvider serviceProvider);
}
public class Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor : PageActionDescriptor {
    [CompilerGeneratedAttribute]
private IList`1<HandlerMethodDescriptor> <HandlerMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeInfo <HandlerTypeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeInfo <DeclaredModelTypeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeInfo <ModelTypeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeInfo <PageTypeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Endpoint <Endpoint>k__BackingField;
    public IList`1<HandlerMethodDescriptor> HandlerMethods { get; public set; }
    public TypeInfo HandlerTypeInfo { get; public set; }
    public TypeInfo DeclaredModelTypeInfo { get; public set; }
    public TypeInfo ModelTypeInfo { get; public set; }
    public TypeInfo PageTypeInfo { get; public set; }
    public Endpoint Endpoint { get; public set; }
    public CompiledPageActionDescriptor(PageActionDescriptor actionDescriptor);
    [CompilerGeneratedAttribute]
public IList`1<HandlerMethodDescriptor> get_HandlerMethods();
    [CompilerGeneratedAttribute]
public void set_HandlerMethods(IList`1<HandlerMethodDescriptor> value);
    [CompilerGeneratedAttribute]
public TypeInfo get_HandlerTypeInfo();
    [CompilerGeneratedAttribute]
public void set_HandlerTypeInfo(TypeInfo value);
    [CompilerGeneratedAttribute]
public TypeInfo get_DeclaredModelTypeInfo();
    [CompilerGeneratedAttribute]
public void set_DeclaredModelTypeInfo(TypeInfo value);
    [CompilerGeneratedAttribute]
public TypeInfo get_ModelTypeInfo();
    [CompilerGeneratedAttribute]
public void set_ModelTypeInfo(TypeInfo value);
    [CompilerGeneratedAttribute]
public TypeInfo get_PageTypeInfo();
    [CompilerGeneratedAttribute]
public void set_PageTypeInfo(TypeInfo value);
    [CompilerGeneratedAttribute]
public Endpoint get_Endpoint();
    [CompilerGeneratedAttribute]
public void set_Endpoint(Endpoint value);
}
internal class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.DefaultPageActivatorProvider : object {
    private Action`3<PageContext, ViewContext, object> _disposer;
    public sealed virtual Func`3<PageContext, ViewContext, object> CreateActivator(CompiledPageActionDescriptor actionDescriptor);
    public sealed virtual Action`3<PageContext, ViewContext, object> CreateReleaser(CompiledPageActionDescriptor actionDescriptor);
    private static Func`3<PageContext, ViewContext, object> CreatePageFactory(Type pageTypeInfo);
    private static void Dispose(PageContext context, ViewContext viewContext, object page);
}
internal class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.DefaultPageFactoryProvider : object {
    private IPageActivatorProvider _pageActivator;
    private IModelMetadataProvider _modelMetadataProvider;
    private PropertyValueAccessors _propertyAccessors;
    public DefaultPageFactoryProvider(IPageActivatorProvider pageActivator, IModelMetadataProvider metadataProvider, IUrlHelperFactory urlHelperFactory, IJsonHelper jsonHelper, DiagnosticListener diagnosticListener, HtmlEncoder htmlEncoder, IModelExpressionProvider modelExpressionProvider);
    public sealed virtual Func`3<PageContext, ViewContext, object> CreatePageFactory(CompiledPageActionDescriptor actionDescriptor);
    public sealed virtual Action`3<PageContext, ViewContext, object> CreatePageDisposer(CompiledPageActionDescriptor descriptor);
}
internal class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.DefaultPageHandlerMethodSelector : object {
    private static string Handler;
    public sealed virtual HandlerMethodDescriptor Select(PageContext context);
    private List`1<HandlerMethodDescriptor> SelectHandlers(PageContext context);
    private static int GetScore(HandlerMethodDescriptor descriptor);
    private static string GetHandlerName(PageContext context);
    private static string GetFuzzyMatchHttpMethod(PageContext context);
}
internal class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.DefaultPageLoader : PageLoader {
    private IActionDescriptorCollectionProvider _collectionProvider;
    private IPageApplicationModelProvider[] _applicationModelProviders;
    private IViewCompilerProvider _viewCompilerProvider;
    private ActionEndpointFactory _endpointFactory;
    private PageConventionCollection _conventions;
    private FilterCollection _globalFilters;
    private InnerCache modreq(System.Runtime.CompilerServices.IsVolatile) _currentCache;
    private IViewCompiler Compiler { get; }
    private ConcurrentDictionary`2<PageActionDescriptor, Task`1<CompiledPageActionDescriptor>> CurrentCache { get; }
    public DefaultPageLoader(IActionDescriptorCollectionProvider actionDescriptorCollectionProvider, IEnumerable`1<IPageApplicationModelProvider> applicationModelProviders, IViewCompilerProvider viewCompilerProvider, ActionEndpointFactory endpointFactory, IOptions`1<RazorPagesOptions> pageOptions, IOptions`1<MvcOptions> mvcOptions);
    private IViewCompiler get_Compiler();
    private ConcurrentDictionary`2<PageActionDescriptor, Task`1<CompiledPageActionDescriptor>> get_CurrentCache();
    public virtual Task`1<CompiledPageActionDescriptor> LoadAsync(PageActionDescriptor actionDescriptor);
    internal Task`1<CompiledPageActionDescriptor> LoadAsync(PageActionDescriptor actionDescriptor, EndpointMetadataCollection endpointMetadata);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.DefaultPageLoader/<LoadAsyncCore>d__14")]
private Task`1<CompiledPageActionDescriptor> LoadAsyncCore(PageActionDescriptor actionDescriptor, EndpointMetadataCollection endpointMetadata);
    internal static void ApplyConventions(PageConventionCollection conventions, PageApplicationModel pageApplicationModel);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<TConvention> <ApplyConventions>g__GetConventions|15_0(IReadOnlyList`1<object> attributes, <>c__DisplayClass15_0& );
}
internal class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.DefaultPageModelActivatorProvider : object {
    private Action`2<PageContext, object> _disposer;
    public virtual Func`2<PageContext, object> CreateActivator(CompiledPageActionDescriptor actionDescriptor);
    public virtual Action`2<PageContext, object> CreateReleaser(CompiledPageActionDescriptor actionDescriptor);
    private static void Dispose(PageContext context, object page);
}
internal class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.DefaultPageModelFactoryProvider : object {
    private static Func`2<PropertyInfo, PropertyActivator`1<PageContext>> _createActivateInfo;
    private IPageModelActivatorProvider _modelActivator;
    public DefaultPageModelFactoryProvider(IPageModelActivatorProvider modelActivator);
    private static DefaultPageModelFactoryProvider();
    public sealed virtual Func`2<PageContext, object> CreateModelFactory(CompiledPageActionDescriptor descriptor);
    public sealed virtual Action`2<PageContext, object> CreateModelDisposer(CompiledPageActionDescriptor descriptor);
    private static PropertyActivator`1<PageContext> CreateActivateInfo(PropertyInfo property);
}
internal class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.DynamicPageEndpointMatcherPolicy : MatcherPolicy {
    private DynamicPageEndpointSelector _selector;
    private PageLoader _loader;
    private EndpointMetadataComparer _comparer;
    public int Order { get; }
    public DynamicPageEndpointMatcherPolicy(DynamicPageEndpointSelector selector, PageLoader loader, EndpointMetadataComparer comparer);
    public virtual int get_Order();
    public sealed virtual bool AppliesToEndpoints(IReadOnlyList`1<Endpoint> endpoints);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.DynamicPageEndpointMatcherPolicy/<ApplyAsync>d__7")]
public sealed virtual Task ApplyAsync(HttpContext httpContext, CandidateSet candidates);
}
internal class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.DynamicPageEndpointSelector : object {
    private EndpointDataSource _dataSource;
    private DataSourceDependentCache`1<ActionSelectionTable`1<Endpoint>> _cache;
    private ActionSelectionTable`1<Endpoint> Table { get; }
    public DynamicPageEndpointSelector(PageActionEndpointDataSource dataSource);
    protected DynamicPageEndpointSelector(EndpointDataSource dataSource);
    private ActionSelectionTable`1<Endpoint> get_Table();
    public IReadOnlyList`1<Endpoint> SelectEndpoints(RouteValueDictionary values);
    private static ActionSelectionTable`1<Endpoint> Initialize(IReadOnlyList`1<Endpoint> endpoints);
    public sealed virtual void Dispose();
}
internal class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.DynamicPageMetadata : object {
    [CompilerGeneratedAttribute]
private RouteValueDictionary <Values>k__BackingField;
    public bool IsDynamic { get; }
    public RouteValueDictionary Values { get; }
    public DynamicPageMetadata(RouteValueDictionary values);
    public sealed virtual bool get_IsDynamic();
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_Values();
}
internal class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.DynamicPageRouteValueTransformerMetadata : object {
    [CompilerGeneratedAttribute]
private Type <SelectorType>k__BackingField;
    public bool IsDynamic { get; }
    public Type SelectorType { get; }
    public DynamicPageRouteValueTransformerMetadata(Type selectorType);
    public sealed virtual bool get_IsDynamic();
    [CompilerGeneratedAttribute]
public Type get_SelectorType();
}
internal static class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.ExecutorFactory : object {
    public static PageHandlerExecutorDelegate CreateExecutor(HandlerMethodDescriptor handlerDescriptor);
    private static HandlerMethod CreateHandlerMethod(HandlerMethodDescriptor handlerDescriptor);
}
internal class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandleOptionsRequestsPageFilter : object {
    public int Order { get; }
    public sealed virtual int get_Order();
    public sealed virtual void OnPageHandlerExecuted(PageHandlerExecutedContext context);
    public sealed virtual void OnPageHandlerExecuting(PageHandlerExecutingContext context);
    public sealed virtual void OnPageHandlerSelected(PageHandlerSelectedContext context);
}
public class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor : object {
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HttpMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HandlerParameterDescriptor> <Parameters>k__BackingField;
    public MethodInfo MethodInfo { get; public set; }
    public string HttpMethod { get; public set; }
    public string Name { get; public set; }
    public IList`1<HandlerParameterDescriptor> Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
public void set_MethodInfo(MethodInfo value);
    [CompilerGeneratedAttribute]
public string get_HttpMethod();
    [CompilerGeneratedAttribute]
public void set_HttpMethod(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IList`1<HandlerParameterDescriptor> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(IList`1<HandlerParameterDescriptor> value);
}
public class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerParameterDescriptor : ParameterDescriptor {
    [CompilerGeneratedAttribute]
private ParameterInfo <ParameterInfo>k__BackingField;
    public ParameterInfo ParameterInfo { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ParameterInfo get_ParameterInfo();
    [CompilerGeneratedAttribute]
public void set_ParameterInfo(ParameterInfo value);
}
public interface Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.IPageHandlerMethodSelector {
    public abstract virtual HandlerMethodDescriptor Select(PageContext context);
}
[ObsoleteAttribute("This type is obsolete. Use PageLoader instead.")]
public interface Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.IPageLoader {
    public abstract virtual CompiledPageActionDescriptor Load(PageActionDescriptor actionDescriptor);
}
public class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionDescriptorProvider : object {
    private IPageRouteModelProvider[] _routeModelProviders;
    private MvcOptions _mvcOptions;
    private IPageRouteModelConvention[] _conventions;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; public set; }
    public PageActionDescriptorProvider(IEnumerable`1<IPageRouteModelProvider> pageRouteModelProviders, IOptions`1<MvcOptions> mvcOptionsAccessor, IOptions`1<RazorPagesOptions> pagesOptionsAccessor);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public sealed virtual void OnProvidersExecuting(ActionDescriptorProviderContext context);
    protected IList`1<PageRouteModel> BuildModel();
    public sealed virtual void OnProvidersExecuted(ActionDescriptorProviderContext context);
    private void AddActionDescriptors(IList`1<ActionDescriptor> actions, PageRouteModel model);
    private static string TransformPageRoute(PageRouteModel model, SelectorModel selectorModel);
}
internal class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionEndpointDataSource : ActionEndpointDataSourceBase {
    private ActionEndpointFactory _endpointFactory;
    [CompilerGeneratedAttribute]
private PageActionEndpointConventionBuilder <DefaultBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreateInertEndpoints>k__BackingField;
    public PageActionEndpointConventionBuilder DefaultBuilder { get; }
    public bool CreateInertEndpoints { get; public set; }
    public PageActionEndpointDataSource(IActionDescriptorCollectionProvider actions, ActionEndpointFactory endpointFactory);
    [CompilerGeneratedAttribute]
public PageActionEndpointConventionBuilder get_DefaultBuilder();
    [CompilerGeneratedAttribute]
public bool get_CreateInertEndpoints();
    [CompilerGeneratedAttribute]
public void set_CreateInertEndpoints(bool value);
    protected virtual List`1<Endpoint> CreateEndpoints(IReadOnlyList`1<ActionDescriptor> actions, IReadOnlyList`1<Action`1<EndpointBuilder>> conventions);
}
internal class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionInvoker : ResourceInvoker {
    private IPageHandlerMethodSelector _selector;
    private PageContext _pageContext;
    private ParameterBinder _parameterBinder;
    private ITempDataDictionaryFactory _tempDataFactory;
    private HtmlHelperOptions _htmlHelperOptions;
    private CompiledPageActionDescriptor _actionDescriptor;
    private Dictionary`2<string, object> _arguments;
    private HandlerMethodDescriptor _handler;
    private PageBase _page;
    private object _pageModel;
    private ViewContext _viewContext;
    private PageHandlerSelectedContext _handlerSelectedContext;
    private PageHandlerExecutingContext _handlerExecutingContext;
    private PageHandlerExecutedContext _handlerExecutedContext;
    [CompilerGeneratedAttribute]
private PageActionInvokerCacheEntry <CacheEntry>k__BackingField;
    internal PageActionInvokerCacheEntry CacheEntry { get; }
    private bool HasPageModel { get; }
    internal PageContext PageContext { get; }
    public PageActionInvoker(IPageHandlerMethodSelector handlerMethodSelector, DiagnosticListener diagnosticListener, ILogger logger, IActionContextAccessor actionContextAccessor, IActionResultTypeMapper mapper, PageContext pageContext, IFilterMetadata[] filterMetadata, PageActionInvokerCacheEntry cacheEntry, ParameterBinder parameterBinder, ITempDataDictionaryFactory tempDataFactory, HtmlHelperOptions htmlHelperOptions);
    [CompilerGeneratedAttribute]
internal PageActionInvokerCacheEntry get_CacheEntry();
    private bool get_HasPageModel();
    internal PageContext get_PageContext();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionInvoker/<InvokeInnerFilterAsync>d__22")]
protected virtual Task InvokeInnerFilterAsync();
    protected virtual void ReleaseResources();
    protected virtual Task InvokeResultAsync(IActionResult result);
    private object CreateInstance();
    private HandlerMethodDescriptor SelectHandler();
    private Task BindArgumentsAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionInvoker/<BindArgumentsCoreAsync>d__28")]
private Task BindArgumentsCoreAsync();
    private static Object[] PrepareArguments(IDictionary`2<string, object> argumentsInDictionary, HandlerMethodDescriptor handler);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionInvoker/<InvokeHandlerMethodAsync>d__30")]
private Task InvokeHandlerMethodAsync();
    private Task Next(State& next, Scope& scope, Object& state, Boolean& isCompleted);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionInvoker/<InvokeNextPageFilterAsync>d__32")]
private Task InvokeNextPageFilterAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionInvoker/<InvokeNextPageFilterAwaitedAsync>d__33")]
private Task`1<PageHandlerExecutedContext> InvokeNextPageFilterAwaitedAsync();
    private static void Rethrow(PageHandlerExecutedContext context);
}
internal class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionInvokerCacheEntry : object {
    [CompilerGeneratedAttribute]
private CompiledPageActionDescriptor <ActionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<PageContext, ViewContext, object> <PageFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`3<PageContext, ViewContext, object> <ReleasePage>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<PageContext, object> <ModelFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<PageContext, object> <ReleaseModel>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<PageContext, object, Task> <PropertyBinder>k__BackingField;
    [CompilerGeneratedAttribute]
private PageHandlerExecutorDelegate[] <HandlerExecutors>k__BackingField;
    [CompilerGeneratedAttribute]
private PageHandlerBinderDelegate[] <HandlerBinders>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<IModelMetadataProvider, ModelStateDictionary, ViewDataDictionary> <ViewDataFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Func`1<IRazorPage>> <ViewStartFactories>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterItem[] <CacheableFilters>k__BackingField;
    public CompiledPageActionDescriptor ActionDescriptor { get; }
    public Func`3<PageContext, ViewContext, object> PageFactory { get; }
    public Action`3<PageContext, ViewContext, object> ReleasePage { get; }
    public Func`2<PageContext, object> ModelFactory { get; }
    public Action`2<PageContext, object> ReleaseModel { get; }
    public Func`3<PageContext, object, Task> PropertyBinder { get; }
    public PageHandlerExecutorDelegate[] HandlerExecutors { get; }
    public PageHandlerBinderDelegate[] HandlerBinders { get; }
    public Func`3<IModelMetadataProvider, ModelStateDictionary, ViewDataDictionary> ViewDataFactory { get; }
    public IReadOnlyList`1<Func`1<IRazorPage>> ViewStartFactories { get; }
    public FilterItem[] CacheableFilters { get; }
    public PageActionInvokerCacheEntry(CompiledPageActionDescriptor actionDescriptor, Func`3<IModelMetadataProvider, ModelStateDictionary, ViewDataDictionary> viewDataFactory, Func`3<PageContext, ViewContext, object> pageFactory, Action`3<PageContext, ViewContext, object> releasePage, Func`2<PageContext, object> modelFactory, Action`2<PageContext, object> releaseModel, Func`3<PageContext, object, Task> propertyBinder, PageHandlerExecutorDelegate[] handlerExecutors, PageHandlerBinderDelegate[] handlerBinders, IReadOnlyList`1<Func`1<IRazorPage>> viewStartFactories, FilterItem[] cacheableFilters);
    [CompilerGeneratedAttribute]
public CompiledPageActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public Func`3<PageContext, ViewContext, object> get_PageFactory();
    [CompilerGeneratedAttribute]
public Action`3<PageContext, ViewContext, object> get_ReleasePage();
    [CompilerGeneratedAttribute]
public Func`2<PageContext, object> get_ModelFactory();
    [CompilerGeneratedAttribute]
public Action`2<PageContext, object> get_ReleaseModel();
    [CompilerGeneratedAttribute]
public Func`3<PageContext, object, Task> get_PropertyBinder();
    [CompilerGeneratedAttribute]
public PageHandlerExecutorDelegate[] get_HandlerExecutors();
    [CompilerGeneratedAttribute]
public PageHandlerBinderDelegate[] get_HandlerBinders();
    [CompilerGeneratedAttribute]
public Func`3<IModelMetadataProvider, ModelStateDictionary, ViewDataDictionary> get_ViewDataFactory();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Func`1<IRazorPage>> get_ViewStartFactories();
    [CompilerGeneratedAttribute]
public FilterItem[] get_CacheableFilters();
}
internal class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionInvokerProvider : object {
    private PageLoader _loader;
    private IPageFactoryProvider _pageFactoryProvider;
    private IPageModelFactoryProvider _modelFactoryProvider;
    private IModelBinderFactory _modelBinderFactory;
    private IRazorPageFactoryProvider _razorPageFactoryProvider;
    private IActionDescriptorCollectionProvider _collectionProvider;
    private IFilterProvider[] _filterProviders;
    private IReadOnlyList`1<IValueProviderFactory> _valueProviderFactories;
    private ParameterBinder _parameterBinder;
    private IModelMetadataProvider _modelMetadataProvider;
    private ITempDataDictionaryFactory _tempDataFactory;
    private MvcOptions _mvcOptions;
    private MvcViewOptions _mvcViewOptions;
    private IPageHandlerMethodSelector _selector;
    private DiagnosticListener _diagnosticListener;
    private ILogger`1<PageActionInvoker> _logger;
    private IActionResultTypeMapper _mapper;
    private IActionContextAccessor _actionContextAccessor;
    private InnerCache modreq(System.Runtime.CompilerServices.IsVolatile) _currentCache;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; }
    private InnerCache CurrentCache { get; }
    public PageActionInvokerProvider(PageLoader loader, IPageFactoryProvider pageFactoryProvider, IPageModelFactoryProvider modelFactoryProvider, IRazorPageFactoryProvider razorPageFactoryProvider, IActionDescriptorCollectionProvider collectionProvider, IEnumerable`1<IFilterProvider> filterProviders, ParameterBinder parameterBinder, IModelMetadataProvider modelMetadataProvider, IModelBinderFactory modelBinderFactory, ITempDataDictionaryFactory tempDataFactory, IOptions`1<MvcOptions> mvcOptions, IOptions`1<MvcViewOptions> mvcViewOptions, IPageHandlerMethodSelector selector, DiagnosticListener diagnosticListener, ILoggerFactory loggerFactory, IActionResultTypeMapper mapper);
    public PageActionInvokerProvider(PageLoader loader, IPageFactoryProvider pageFactoryProvider, IPageModelFactoryProvider modelFactoryProvider, IRazorPageFactoryProvider razorPageFactoryProvider, IActionDescriptorCollectionProvider collectionProvider, IEnumerable`1<IFilterProvider> filterProviders, ParameterBinder parameterBinder, IModelMetadataProvider modelMetadataProvider, IModelBinderFactory modelBinderFactory, ITempDataDictionaryFactory tempDataFactory, IOptions`1<MvcOptions> mvcOptions, IOptions`1<MvcViewOptions> mvcViewOptions, IPageHandlerMethodSelector selector, DiagnosticListener diagnosticListener, ILoggerFactory loggerFactory, IActionResultTypeMapper mapper, IActionContextAccessor actionContextAccessor);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    public sealed virtual void OnProvidersExecuting(ActionInvokerProviderContext context);
    public sealed virtual void OnProvidersExecuted(ActionInvokerProviderContext context);
    private InnerCache get_CurrentCache();
    private PageActionInvoker CreateActionInvoker(ActionContext actionContext, PageActionInvokerCacheEntry cacheEntry, IFilterMetadata[] filters);
    private PageActionInvokerCacheEntry CreateCacheEntry(ActionInvokerProviderContext context, FilterItem[] cachedFilters);
    internal List`1<Func`1<IRazorPage>> GetViewStartFactories(CompiledPageActionDescriptor descriptor);
    private static PageHandlerExecutorDelegate[] GetHandlerExecutors(CompiledPageActionDescriptor actionDescriptor);
    private PageHandlerBinderDelegate[] GetHandlerBinders(CompiledPageActionDescriptor actionDescriptor);
}
internal static class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageBinderFactory : object {
    internal static Func`3<PageContext, object, Task> NullPropertyBinder;
    internal static PageHandlerBinderDelegate NullHandlerBinder;
    private static PageBinderFactory();
    public static Func`3<PageContext, object, Task> CreatePropertyBinder(ParameterBinder parameterBinder, IModelMetadataProvider modelMetadataProvider, IModelBinderFactory modelBinderFactory, CompiledPageActionDescriptor actionDescriptor);
    public static PageHandlerBinderDelegate CreateHandlerBinder(ParameterBinder parameterBinder, IModelMetadataProvider modelMetadataProvider, IModelBinderFactory modelBinderFactory, CompiledPageActionDescriptor actionDescriptor, HandlerMethodDescriptor handler, MvcOptions mvcOptions);
}
public class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageBoundPropertyDescriptor : ParameterDescriptor {
    [CompilerGeneratedAttribute]
private PropertyInfo <Property>k__BackingField;
    public PropertyInfo Property { get; public set; }
    private PropertyInfo Microsoft.AspNetCore.Mvc.Infrastructure.IPropertyInfoParameterDescriptor.PropertyInfo { get; }
    [CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(PropertyInfo value);
    private sealed virtual override PropertyInfo Microsoft.AspNetCore.Mvc.Infrastructure.IPropertyInfoParameterDescriptor.get_PropertyInfo();
}
internal class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageHandlerBinderDelegate : MulticastDelegate {
    public PageHandlerBinderDelegate(object object, IntPtr method);
    public virtual Task Invoke(PageContext pageContext, IDictionary`2<string, object> arguments);
    public virtual IAsyncResult BeginInvoke(PageContext pageContext, IDictionary`2<string, object> arguments, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
internal class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageHandlerExecutorDelegate : MulticastDelegate {
    public PageHandlerExecutorDelegate(object object, IntPtr method);
    public virtual Task`1<IActionResult> Invoke(object handler, Object[] arguments);
    public virtual IAsyncResult BeginInvoke(object handler, Object[] arguments, AsyncCallback callback, object object);
    public virtual Task`1<IActionResult> EndInvoke(IAsyncResult result);
}
public abstract class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageLoader : object {
    public abstract virtual Task`1<CompiledPageActionDescriptor> LoadAsync(PageActionDescriptor actionDescriptor);
    private sealed virtual override CompiledPageActionDescriptor Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.IPageLoader.Load(PageActionDescriptor actionDescriptor);
}
internal class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageLoaderMatcherPolicy : MatcherPolicy {
    private PageLoader _loader;
    public int Order { get; }
    public PageLoaderMatcherPolicy(PageLoader loader);
    public virtual int get_Order();
    public sealed virtual bool AppliesToEndpoints(IReadOnlyList`1<Endpoint> endpoints);
    public sealed virtual Task ApplyAsync(HttpContext httpContext, CandidateSet candidates);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageLoaderMatcherPolicy/<ApplyAsyncAwaited>d__6")]
private Task ApplyAsyncAwaited(CandidateSet candidates, Task`1<CompiledPageActionDescriptor> actionDescriptorTask, int index);
}
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageModelAttribute : Attribute {
}
public class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageResultExecutor : ViewExecutor {
    private IRazorViewEngine _razorViewEngine;
    private IRazorPageActivator _razorPageActivator;
    private DiagnosticListener _diagnosticListener;
    private HtmlEncoder _htmlEncoder;
    public PageResultExecutor(IHttpResponseStreamWriterFactory writerFactory, ICompositeViewEngine compositeViewEngine, IRazorViewEngine razorViewEngine, IRazorPageActivator razorPageActivator, DiagnosticListener diagnosticListener, HtmlEncoder htmlEncoder);
    public virtual Task ExecuteAsync(PageContext pageContext, PageResult result);
    private void OnExecuting(PageContext pageContext);
}
public class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageViewLocationExpander : object {
    public sealed virtual IEnumerable`1<string> ExpandViewLocations(ViewLocationExpanderContext context, IEnumerable`1<string> viewLocations);
    public sealed virtual void PopulateValues(ViewLocationExpanderContext context);
}
public class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAdapter : object {
    private RazorPageBase _page;
    private Type _modelType;
    public ViewContext ViewContext { get; public set; }
    public IHtmlContent BodyContent { get; public set; }
    public bool IsLayoutBeingRendered { get; public set; }
    public string Path { get; public set; }
    public string Layout { get; public set; }
    public IDictionary`2<string, RenderAsyncDelegate> PreviousSectionWriters { get; public set; }
    public IDictionary`2<string, RenderAsyncDelegate> SectionWriters { get; }
    public RazorPageAdapter(RazorPageBase page, Type modelType);
    public sealed virtual ViewContext get_ViewContext();
    public sealed virtual void set_ViewContext(ViewContext value);
    public sealed virtual IHtmlContent get_BodyContent();
    public sealed virtual void set_BodyContent(IHtmlContent value);
    public sealed virtual bool get_IsLayoutBeingRendered();
    public sealed virtual void set_IsLayoutBeingRendered(bool value);
    public sealed virtual string get_Path();
    public sealed virtual void set_Path(string value);
    public sealed virtual string get_Layout();
    public sealed virtual void set_Layout(string value);
    public sealed virtual IDictionary`2<string, RenderAsyncDelegate> get_PreviousSectionWriters();
    public sealed virtual void set_PreviousSectionWriters(IDictionary`2<string, RenderAsyncDelegate> value);
    public sealed virtual IDictionary`2<string, RenderAsyncDelegate> get_SectionWriters();
    public sealed virtual void EnsureRenderedBodyOrSections();
    public sealed virtual Task ExecuteAsync();
    private sealed virtual override Type Microsoft.AspNetCore.Mvc.Razor.IModelTypeProvider.GetModelType();
}
[ObsoleteAttribute("This attribute has been superseded by RazorCompiledItem and will not be used by the runtime.")]
public class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute : RazorViewAttribute {
    [CompilerGeneratedAttribute]
private string <RouteTemplate>k__BackingField;
    public string RouteTemplate { get; }
    public RazorPageAttribute(string path, Type viewType, string routeTemplate);
    [CompilerGeneratedAttribute]
public string get_RouteTemplate();
}
public class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.ServiceBasedPageModelActivatorProvider : object {
    public sealed virtual Func`2<PageContext, object> CreateActivator(CompiledPageActionDescriptor descriptor);
    public sealed virtual Action`2<PageContext, object> CreateReleaser(CompiledPageActionDescriptor descriptor);
}
public interface Microsoft.AspNetCore.Mvc.RazorPages.IPageActivatorProvider {
    public abstract virtual Func`3<PageContext, ViewContext, object> CreateActivator(CompiledPageActionDescriptor descriptor);
    public abstract virtual Action`3<PageContext, ViewContext, object> CreateReleaser(CompiledPageActionDescriptor descriptor);
}
public interface Microsoft.AspNetCore.Mvc.RazorPages.IPageFactoryProvider {
    public abstract virtual Func`3<PageContext, ViewContext, object> CreatePageFactory(CompiledPageActionDescriptor descriptor);
    public abstract virtual Action`3<PageContext, ViewContext, object> CreatePageDisposer(CompiledPageActionDescriptor descriptor);
}
public interface Microsoft.AspNetCore.Mvc.RazorPages.IPageModelActivatorProvider {
    public abstract virtual Func`2<PageContext, object> CreateActivator(CompiledPageActionDescriptor descriptor);
    public abstract virtual Action`2<PageContext, object> CreateReleaser(CompiledPageActionDescriptor descriptor);
}
public interface Microsoft.AspNetCore.Mvc.RazorPages.IPageModelFactoryProvider {
    public abstract virtual Func`2<PageContext, object> CreateModelFactory(CompiledPageActionDescriptor descriptor);
    public abstract virtual Action`2<PageContext, object> CreateModelDisposer(CompiledPageActionDescriptor descriptor);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Mvc.RazorPages.MvcRazorPagesDiagnosticListenerExtensions : object {
    [ExtensionAttribute]
public static void BeforeHandlerMethod(DiagnosticListener diagnosticListener, ActionContext actionContext, HandlerMethodDescriptor handlerMethodDescriptor, IReadOnlyDictionary`2<string, object> arguments, object instance);
    private static void BeforeHandlerMethodImpl(DiagnosticListener diagnosticListener, ActionContext actionContext, HandlerMethodDescriptor handlerMethodDescriptor, IReadOnlyDictionary`2<string, object> arguments, object instance);
    [ExtensionAttribute]
public static void AfterHandlerMethod(DiagnosticListener diagnosticListener, ActionContext actionContext, HandlerMethodDescriptor handlerMethodDescriptor, IReadOnlyDictionary`2<string, object> arguments, object instance, IActionResult result);
    private static void AfterHandlerMethodImpl(DiagnosticListener diagnosticListener, ActionContext actionContext, HandlerMethodDescriptor handlerMethodDescriptor, IReadOnlyDictionary`2<string, object> arguments, object instance, IActionResult result);
    [ExtensionAttribute]
public static void BeforeOnPageHandlerExecution(DiagnosticListener diagnosticListener, PageHandlerExecutingContext handlerExecutionContext, IAsyncPageFilter filter);
    private static void BeforeOnPageHandlerExecutionImpl(DiagnosticListener diagnosticListener, PageHandlerExecutingContext handlerExecutionContext, IAsyncPageFilter filter);
    [ExtensionAttribute]
public static void AfterOnPageHandlerExecution(DiagnosticListener diagnosticListener, PageHandlerExecutedContext handlerExecutedContext, IAsyncPageFilter filter);
    private static void AfterOnPageHandlerExecutionImpl(DiagnosticListener diagnosticListener, PageHandlerExecutedContext handlerExecutedContext, IAsyncPageFilter filter);
    [ExtensionAttribute]
public static void BeforeOnPageHandlerExecuting(DiagnosticListener diagnosticListener, PageHandlerExecutingContext handlerExecutingContext, IPageFilter filter);
    private static void BeforeOnPageHandlerExecutingImpl(DiagnosticListener diagnosticListener, PageHandlerExecutingContext handlerExecutingContext, IPageFilter filter);
    [ExtensionAttribute]
public static void AfterOnPageHandlerExecuting(DiagnosticListener diagnosticListener, PageHandlerExecutingContext handlerExecutingContext, IPageFilter filter);
    private static void AfterOnPageHandlerExecutingImpl(DiagnosticListener diagnosticListener, PageHandlerExecutingContext handlerExecutingContext, IPageFilter filter);
    [ExtensionAttribute]
public static void BeforeOnPageHandlerExecuted(DiagnosticListener diagnosticListener, PageHandlerExecutedContext handlerExecutedContext, IPageFilter filter);
    private static void BeforeOnPageHandlerExecutedImpl(DiagnosticListener diagnosticListener, PageHandlerExecutedContext handlerExecutedContext, IPageFilter filter);
    [ExtensionAttribute]
public static void AfterOnPageHandlerExecuted(DiagnosticListener diagnosticListener, PageHandlerExecutedContext handlerExecutedContext, IPageFilter filter);
    private static void AfterOnPageHandlerExecutedImpl(DiagnosticListener diagnosticListener, PageHandlerExecutedContext handlerExecutedContext, IPageFilter filter);
    [ExtensionAttribute]
public static void BeforeOnPageHandlerSelection(DiagnosticListener diagnosticListener, PageHandlerSelectedContext handlerSelectedContext, IAsyncPageFilter filter);
    private static void BeforeOnPageHandlerSelectionImpl(DiagnosticListener diagnosticListener, PageHandlerSelectedContext handlerSelectedContext, IAsyncPageFilter filter);
    [ExtensionAttribute]
public static void AfterOnPageHandlerSelection(DiagnosticListener diagnosticListener, PageHandlerSelectedContext handlerSelectedContext, IAsyncPageFilter filter);
    private static void AfterOnPageHandlerSelectionImpl(DiagnosticListener diagnosticListener, PageHandlerSelectedContext handlerSelectedContext, IAsyncPageFilter filter);
    [ExtensionAttribute]
public static void BeforeOnPageHandlerSelected(DiagnosticListener diagnosticListener, PageHandlerSelectedContext handlerSelectedContext, IPageFilter filter);
    private static void BeforeOnPageHandlerSelectedImpl(DiagnosticListener diagnosticListener, PageHandlerSelectedContext handlerSelectedContext, IPageFilter filter);
    [ExtensionAttribute]
public static void AfterOnPageHandlerSelected(DiagnosticListener diagnosticListener, PageHandlerSelectedContext handlerSelectedContext, IPageFilter filter);
    private static void AfterOnPageHandlerSelectedImpl(DiagnosticListener diagnosticListener, PageHandlerSelectedContext handlerSelectedContext, IPageFilter filter);
}
[AttributeUsageAttribute("64")]
public class Microsoft.AspNetCore.Mvc.RazorPages.NonHandlerAttribute : Attribute {
}
public abstract class Microsoft.AspNetCore.Mvc.RazorPages.Page : PageBase {
}
[DebuggerDisplayAttribute("{DebuggerDisplayString,nq}")]
public class Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor : ActionDescriptor {
    [CompilerGeneratedAttribute]
private string <RelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ViewEnginePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AreaName>k__BackingField;
    public string RelativePath { get; public set; }
    public string ViewEnginePath { get; public set; }
    public string AreaName { get; public set; }
    public string DisplayName { get; public set; }
    private string DebuggerDisplayString { get; }
    public PageActionDescriptor(PageActionDescriptor other);
    [CompilerGeneratedAttribute]
public string get_RelativePath();
    [CompilerGeneratedAttribute]
public void set_RelativePath(string value);
    [CompilerGeneratedAttribute]
public string get_ViewEnginePath();
    [CompilerGeneratedAttribute]
public void set_ViewEnginePath(string value);
    [CompilerGeneratedAttribute]
public string get_AreaName();
    [CompilerGeneratedAttribute]
public void set_AreaName(string value);
    public virtual string get_DisplayName();
    public virtual void set_DisplayName(string value);
    private string get_DebuggerDisplayString();
}
public abstract class Microsoft.AspNetCore.Mvc.RazorPages.PageBase : RazorPageBase {
    private IObjectModelValidator _objectValidator;
    private IModelMetadataProvider _metadataProvider;
    private IModelBinderFactory _modelBinderFactory;
    [CompilerGeneratedAttribute]
private PageContext <PageContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ViewContext <ViewContext>k__BackingField;
    public PageContext PageContext { get; public set; }
    public ViewContext ViewContext { get; public set; }
    public HttpContext HttpContext { get; }
    public HttpRequest Request { get; }
    public HttpResponse Response { get; }
    public RouteData RouteData { get; }
    public ModelStateDictionary ModelState { get; }
    public IModelMetadataProvider MetadataProvider { get; public set; }
    private IObjectModelValidator ObjectValidator { get; }
    private IModelBinderFactory ModelBinderFactory { get; }
    [CompilerGeneratedAttribute]
public PageContext get_PageContext();
    [CompilerGeneratedAttribute]
public void set_PageContext(PageContext value);
    [CompilerGeneratedAttribute]
public virtual ViewContext get_ViewContext();
    [CompilerGeneratedAttribute]
public virtual void set_ViewContext(ViewContext value);
    public HttpContext get_HttpContext();
    public HttpRequest get_Request();
    public HttpResponse get_Response();
    public RouteData get_RouteData();
    public ModelStateDictionary get_ModelState();
    public IModelMetadataProvider get_MetadataProvider();
    public void set_MetadataProvider(IModelMetadataProvider value);
    private IObjectModelValidator get_ObjectValidator();
    private IModelBinderFactory get_ModelBinderFactory();
    public virtual void EnsureRenderedBodyOrSections();
    public virtual void BeginContext(int position, int length, bool isLiteral);
    public virtual void EndContext();
    public virtual BadRequestResult BadRequest();
    public virtual BadRequestObjectResult BadRequest(object error);
    public virtual BadRequestObjectResult BadRequest(ModelStateDictionary modelState);
    public virtual ChallengeResult Challenge();
    public virtual ChallengeResult Challenge(String[] authenticationSchemes);
    public virtual ChallengeResult Challenge(AuthenticationProperties properties);
    public virtual ChallengeResult Challenge(AuthenticationProperties properties, String[] authenticationSchemes);
    public virtual ContentResult Content(string content);
    public virtual ContentResult Content(string content, string contentType);
    public virtual ContentResult Content(string content, string contentType, Encoding contentEncoding);
    public virtual ContentResult Content(string content, MediaTypeHeaderValue contentType);
    public virtual ForbidResult Forbid();
    public virtual ForbidResult Forbid(String[] authenticationSchemes);
    public virtual ForbidResult Forbid(AuthenticationProperties properties);
    public virtual ForbidResult Forbid(AuthenticationProperties properties, String[] authenticationSchemes);
    public virtual FileContentResult File(Byte[] fileContents, string contentType);
    public virtual FileContentResult File(Byte[] fileContents, string contentType, string fileDownloadName);
    public virtual FileStreamResult File(Stream fileStream, string contentType);
    public virtual FileStreamResult File(Stream fileStream, string contentType, string fileDownloadName);
    public virtual VirtualFileResult File(string virtualPath, string contentType);
    public virtual VirtualFileResult File(string virtualPath, string contentType, string fileDownloadName);
    public virtual PhysicalFileResult PhysicalFile(string physicalPath, string contentType);
    public virtual PhysicalFileResult PhysicalFile(string physicalPath, string contentType, string fileDownloadName);
    public virtual LocalRedirectResult LocalRedirect(string localUrl);
    public virtual LocalRedirectResult LocalRedirectPermanent(string localUrl);
    public virtual LocalRedirectResult LocalRedirectPreserveMethod(string localUrl);
    public virtual LocalRedirectResult LocalRedirectPermanentPreserveMethod(string localUrl);
    public virtual NotFoundResult NotFound();
    public virtual NotFoundObjectResult NotFound(object value);
    public virtual PageResult Page();
    public virtual RedirectResult Redirect(string url);
    public virtual RedirectResult RedirectPermanent(string url);
    public virtual RedirectResult RedirectPreserveMethod(string url);
    public virtual RedirectResult RedirectPermanentPreserveMethod(string url);
    public virtual RedirectToActionResult RedirectToAction(string actionName);
    public virtual RedirectToActionResult RedirectToAction(string actionName, object routeValues);
    public virtual RedirectToActionResult RedirectToAction(string actionName, string controllerName);
    public virtual RedirectToActionResult RedirectToAction(string actionName, string controllerName, object routeValues);
    public virtual RedirectToActionResult RedirectToAction(string actionName, string controllerName, string fragment);
    public virtual RedirectToActionResult RedirectToAction(string actionName, string controllerName, object routeValues, string fragment);
    public virtual RedirectToActionResult RedirectToActionPreserveMethod(string actionName, string controllerName, object routeValues, string fragment);
    public virtual RedirectToActionResult RedirectToActionPermanent(string actionName);
    public virtual RedirectToActionResult RedirectToActionPermanent(string actionName, object routeValues);
    public virtual RedirectToActionResult RedirectToActionPermanent(string actionName, string controllerName);
    public virtual RedirectToActionResult RedirectToActionPermanent(string actionName, string controllerName, string fragment);
    public virtual RedirectToActionResult RedirectToActionPermanent(string actionName, string controllerName, object routeValues);
    public virtual RedirectToActionResult RedirectToActionPermanent(string actionName, string controllerName, object routeValues, string fragment);
    public virtual RedirectToActionResult RedirectToActionPermanentPreserveMethod(string actionName, string controllerName, object routeValues, string fragment);
    public virtual RedirectToRouteResult RedirectToRoute(string routeName);
    public virtual RedirectToRouteResult RedirectToRoute(object routeValues);
    public virtual RedirectToRouteResult RedirectToRoute(string routeName, object routeValues);
    public virtual RedirectToRouteResult RedirectToRoute(string routeName, string fragment);
    public virtual RedirectToRouteResult RedirectToRoute(string routeName, object routeValues, string fragment);
    public virtual RedirectToRouteResult RedirectToRoutePreserveMethod(string routeName, object routeValues, string fragment);
    public virtual RedirectToRouteResult RedirectToRoutePermanent(string routeName);
    public virtual RedirectToRouteResult RedirectToRoutePermanent(object routeValues);
    public virtual RedirectToRouteResult RedirectToRoutePermanent(string routeName, object routeValues);
    public virtual RedirectToRouteResult RedirectToRoutePermanent(string routeName, string fragment);
    public virtual RedirectToRouteResult RedirectToRoutePermanent(string routeName, object routeValues, string fragment);
    public virtual RedirectToRouteResult RedirectToRoutePermanentPreserveMethod(string routeName, object routeValues, string fragment);
    public virtual RedirectToPageResult RedirectToPage();
    public virtual RedirectToPageResult RedirectToPage(object routeValues);
    public virtual RedirectToPageResult RedirectToPage(string pageName);
    public virtual RedirectToPageResult RedirectToPage(string pageName, string pageHandler);
    public virtual RedirectToPageResult RedirectToPage(string pageName, object routeValues);
    public virtual RedirectToPageResult RedirectToPage(string pageName, string pageHandler, string fragment);
    public virtual RedirectToPageResult RedirectToPage(string pageName, string pageHandler, object routeValues, string fragment);
    public virtual RedirectToPageResult RedirectToPagePermanent(string pageName);
    public virtual RedirectToPageResult RedirectToPagePermanent(string pageName, object routeValues);
    public virtual RedirectToPageResult RedirectToPagePermanent(string pageName, string pageHandler);
    public virtual RedirectToPageResult RedirectToPagePermanent(string pageName, string pageHandler, object routeValues);
    public virtual RedirectToPageResult RedirectToPagePermanent(string pageName, string pageHandler, string fragment);
    public virtual RedirectToPageResult RedirectToPagePermanent(string pageName, string pageHandler, object routeValues, string fragment);
    public virtual RedirectToPageResult RedirectToPagePreserveMethod(string pageName, string pageHandler, object routeValues, string fragment);
    public virtual RedirectToPageResult RedirectToPagePermanentPreserveMethod(string pageName, string pageHandler, object routeValues, string fragment);
    public virtual SignInResult SignIn(ClaimsPrincipal principal, string authenticationScheme);
    public virtual SignInResult SignIn(ClaimsPrincipal principal, AuthenticationProperties properties, string authenticationScheme);
    public virtual SignOutResult SignOut(String[] authenticationSchemes);
    public virtual SignOutResult SignOut(AuthenticationProperties properties, String[] authenticationSchemes);
    public virtual StatusCodeResult StatusCode(int statusCode);
    public virtual ObjectResult StatusCode(int statusCode, object value);
    public virtual UnauthorizedResult Unauthorized();
    public virtual PartialViewResult Partial(string viewName);
    public virtual PartialViewResult Partial(string viewName, object model);
    public virtual ViewComponentResult ViewComponent(string componentName);
    public virtual ViewComponentResult ViewComponent(Type componentType);
    public virtual ViewComponentResult ViewComponent(string componentName, object arguments);
    public virtual ViewComponentResult ViewComponent(Type componentType, object arguments);
    public virtual Task`1<bool> TryUpdateModelAsync(TModel model);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.RazorPages.PageBase/<TryUpdateModelAsync>d__120`1")]
public virtual Task`1<bool> TryUpdateModelAsync(TModel model, string prefix);
    public virtual Task`1<bool> TryUpdateModelAsync(TModel model, string prefix, IValueProvider valueProvider);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.RazorPages.PageBase/<TryUpdateModelAsync>d__122`1")]
public Task`1<bool> TryUpdateModelAsync(TModel model, string prefix, Expression`1[] includeExpressions);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.RazorPages.PageBase/<TryUpdateModelAsync>d__123`1")]
public Task`1<bool> TryUpdateModelAsync(TModel model, string prefix, Func`2<ModelMetadata, bool> propertyFilter);
    public Task`1<bool> TryUpdateModelAsync(TModel model, string prefix, IValueProvider valueProvider, Expression`1[] includeExpressions);
    public Task`1<bool> TryUpdateModelAsync(TModel model, string prefix, IValueProvider valueProvider, Func`2<ModelMetadata, bool> propertyFilter);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.RazorPages.PageBase/<TryUpdateModelAsync>d__126")]
public virtual Task`1<bool> TryUpdateModelAsync(object model, Type modelType, string prefix);
    public Task`1<bool> TryUpdateModelAsync(object model, Type modelType, string prefix, IValueProvider valueProvider, Func`2<ModelMetadata, bool> propertyFilter);
    public virtual bool TryValidateModel(object model);
    public virtual bool TryValidateModel(object model, string prefix);
}
public class Microsoft.AspNetCore.Mvc.RazorPages.PageContext : ActionContext {
    private CompiledPageActionDescriptor _actionDescriptor;
    private IList`1<IValueProviderFactory> _valueProviderFactories;
    private ViewDataDictionary _viewData;
    private IList`1<Func`1<IRazorPage>> _viewStartFactories;
    public CompiledPageActionDescriptor ActionDescriptor { get; public set; }
    public IList`1<IValueProviderFactory> ValueProviderFactories { get; public set; }
    public ViewDataDictionary ViewData { get; public set; }
    public IList`1<Func`1<IRazorPage>> ViewStartFactories { get; public set; }
    public PageContext(ActionContext actionContext);
    public virtual CompiledPageActionDescriptor get_ActionDescriptor();
    public virtual void set_ActionDescriptor(CompiledPageActionDescriptor value);
    public virtual IList`1<IValueProviderFactory> get_ValueProviderFactories();
    public virtual void set_ValueProviderFactories(IList`1<IValueProviderFactory> value);
    public virtual ViewDataDictionary get_ViewData();
    public virtual void set_ViewData(ViewDataDictionary value);
    public virtual IList`1<Func`1<IRazorPage>> get_ViewStartFactories();
    public virtual void set_ViewStartFactories(IList`1<Func`1<IRazorPage>> value);
}
[AttributeUsageAttribute("128")]
public class Microsoft.AspNetCore.Mvc.RazorPages.PageContextAttribute : Attribute {
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Mvc.RazorPages.PageLoggerExtensions : object {
    public static string PageFilter;
    private static Action`4<ILogger, string, string, Exception> _pageModelFactoryExecuting;
    private static Action`4<ILogger, string, string, Exception> _pageModelFactoryExecuted;
    private static Action`4<ILogger, string, string, Exception> _pageFactoryExecuting;
    private static Action`4<ILogger, string, string, Exception> _pageFactoryExecuted;
    private static Action`4<ILogger, string, ModelValidationState, Exception> _handlerMethodExecuting;
    private static Action`3<ILogger, ModelValidationState, Exception> _implicitHandlerMethodExecuting;
    private static Action`4<ILogger, string, String[], Exception> _handlerMethodExecutingWithArguments;
    private static Action`4<ILogger, string, string, Exception> _handlerMethodExecuted;
    private static Action`3<ILogger, string, Exception> _implicitHandlerMethodExecuted;
    private static Action`3<ILogger, object, Exception> _pageFilterShortCircuit;
    private static Action`3<ILogger, Type, Exception> _notMostEffectiveFilter;
    private static Action`5<ILogger, string, string, string, Exception> _beforeExecutingMethodOnFilter;
    private static Action`5<ILogger, string, string, string, Exception> _afterExecutingMethodOnFilter;
    private static PageLoggerExtensions();
    [ExtensionAttribute]
public static void ExecutingPageModelFactory(ILogger logger, PageContext context);
    [ExtensionAttribute]
public static void ExecutedPageModelFactory(ILogger logger, PageContext context);
    [ExtensionAttribute]
public static void ExecutingPageFactory(ILogger logger, PageContext context);
    [ExtensionAttribute]
public static void ExecutedPageFactory(ILogger logger, PageContext context);
    [ExtensionAttribute]
public static void ExecutingHandlerMethod(ILogger logger, PageContext context, HandlerMethodDescriptor handler, Object[] arguments);
    [ExtensionAttribute]
public static void ExecutingImplicitHandlerMethod(ILogger logger, PageContext context);
    [ExtensionAttribute]
public static void ExecutedHandlerMethod(ILogger logger, PageContext context, HandlerMethodDescriptor handler, IActionResult result);
    [ExtensionAttribute]
public static void ExecutedImplicitHandlerMethod(ILogger logger, IActionResult result);
    [ExtensionAttribute]
public static void BeforeExecutingMethodOnFilter(ILogger logger, string filterType, string methodName, IFilterMetadata filter);
    [ExtensionAttribute]
public static void AfterExecutingMethodOnFilter(ILogger logger, string filterType, string methodName, IFilterMetadata filter);
    [ExtensionAttribute]
public static void PageFilterShortCircuited(ILogger logger, IFilterMetadata filter);
    [ExtensionAttribute]
public static void NotMostEffectiveFilter(ILogger logger, Type policyType);
}
[PageModelAttribute]
public abstract class Microsoft.AspNetCore.Mvc.RazorPages.PageModel : object {
    private IModelMetadataProvider _metadataProvider;
    private IModelBinderFactory _modelBinderFactory;
    private IObjectModelValidator _objectValidator;
    private ITempDataDictionary _tempData;
    private IUrlHelper _urlHelper;
    private PageContext _pageContext;
    [PageContextAttribute]
public PageContext PageContext { get; public set; }
    public HttpContext HttpContext { get; }
    public HttpRequest Request { get; }
    public HttpResponse Response { get; }
    public RouteData RouteData { get; }
    public ModelStateDictionary ModelState { get; }
    public ClaimsPrincipal User { get; }
    public ITempDataDictionary TempData { get; public set; }
    public IUrlHelper Url { get; public set; }
    public IModelMetadataProvider MetadataProvider { get; public set; }
    public ViewDataDictionary ViewData { get; }
    private IObjectModelValidator ObjectValidator { get; }
    private IModelBinderFactory ModelBinderFactory { get; }
    public PageContext get_PageContext();
    public void set_PageContext(PageContext value);
    public HttpContext get_HttpContext();
    public HttpRequest get_Request();
    public HttpResponse get_Response();
    public RouteData get_RouteData();
    public ModelStateDictionary get_ModelState();
    public ClaimsPrincipal get_User();
    public ITempDataDictionary get_TempData();
    public void set_TempData(ITempDataDictionary value);
    public IUrlHelper get_Url();
    public void set_Url(IUrlHelper value);
    public IModelMetadataProvider get_MetadataProvider();
    public void set_MetadataProvider(IModelMetadataProvider value);
    public ViewDataDictionary get_ViewData();
    private IObjectModelValidator get_ObjectValidator();
    private IModelBinderFactory get_ModelBinderFactory();
    protected internal Task`1<bool> TryUpdateModelAsync(TModel model);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.RazorPages.PageModel/<TryUpdateModelAsync>d__37`1")]
protected internal Task`1<bool> TryUpdateModelAsync(TModel model, string name);
    protected internal Task`1<bool> TryUpdateModelAsync(TModel model, string name, IValueProvider valueProvider);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.RazorPages.PageModel/<TryUpdateModelAsync>d__39`1")]
protected internal Task`1<bool> TryUpdateModelAsync(TModel model, string name, Expression`1[] includeExpressions);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.RazorPages.PageModel/<TryUpdateModelAsync>d__40`1")]
protected internal Task`1<bool> TryUpdateModelAsync(TModel model, string name, Func`2<ModelMetadata, bool> propertyFilter);
    protected internal Task`1<bool> TryUpdateModelAsync(TModel model, string name, IValueProvider valueProvider, Expression`1[] includeExpressions);
    protected internal Task`1<bool> TryUpdateModelAsync(TModel model, string name, IValueProvider valueProvider, Func`2<ModelMetadata, bool> propertyFilter);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.RazorPages.PageModel/<TryUpdateModelAsync>d__43")]
protected internal Task`1<bool> TryUpdateModelAsync(object model, Type modelType, string name);
    protected internal Task`1<bool> TryUpdateModelAsync(object model, Type modelType, string name, IValueProvider valueProvider, Func`2<ModelMetadata, bool> propertyFilter);
    public virtual BadRequestResult BadRequest();
    public virtual BadRequestObjectResult BadRequest(object error);
    public virtual BadRequestObjectResult BadRequest(ModelStateDictionary modelState);
    public virtual ChallengeResult Challenge();
    public virtual ChallengeResult Challenge(String[] authenticationSchemes);
    public virtual ChallengeResult Challenge(AuthenticationProperties properties);
    public virtual ChallengeResult Challenge(AuthenticationProperties properties, String[] authenticationSchemes);
    public virtual ContentResult Content(string content);
    public virtual ContentResult Content(string content, string contentType);
    public virtual ContentResult Content(string content, string contentType, Encoding contentEncoding);
    public virtual ContentResult Content(string content, MediaTypeHeaderValue contentType);
    public virtual ForbidResult Forbid();
    public virtual ForbidResult Forbid(String[] authenticationSchemes);
    public virtual ForbidResult Forbid(AuthenticationProperties properties);
    public virtual ForbidResult Forbid(AuthenticationProperties properties, String[] authenticationSchemes);
    public virtual FileContentResult File(Byte[] fileContents, string contentType);
    public virtual FileContentResult File(Byte[] fileContents, string contentType, string fileDownloadName);
    public virtual FileStreamResult File(Stream fileStream, string contentType);
    public virtual FileStreamResult File(Stream fileStream, string contentType, string fileDownloadName);
    public virtual VirtualFileResult File(string virtualPath, string contentType);
    public virtual VirtualFileResult File(string virtualPath, string contentType, string fileDownloadName);
    public virtual LocalRedirectResult LocalRedirect(string localUrl);
    public virtual LocalRedirectResult LocalRedirectPermanent(string localUrl);
    public virtual LocalRedirectResult LocalRedirectPreserveMethod(string localUrl);
    public virtual LocalRedirectResult LocalRedirectPermanentPreserveMethod(string localUrl);
    public virtual NotFoundResult NotFound();
    public virtual NotFoundObjectResult NotFound(object value);
    public virtual PageResult Page();
    public virtual PhysicalFileResult PhysicalFile(string physicalPath, string contentType);
    public virtual PhysicalFileResult PhysicalFile(string physicalPath, string contentType, string fileDownloadName);
    protected internal RedirectResult Redirect(string url);
    public virtual RedirectResult RedirectPermanent(string url);
    public virtual RedirectResult RedirectPreserveMethod(string url);
    public virtual RedirectResult RedirectPermanentPreserveMethod(string url);
    public virtual RedirectToActionResult RedirectToAction(string actionName);
    public virtual RedirectToActionResult RedirectToAction(string actionName, object routeValues);
    public virtual RedirectToActionResult RedirectToAction(string actionName, string controllerName);
    public virtual RedirectToActionResult RedirectToAction(string actionName, string controllerName, object routeValues);
    public virtual RedirectToActionResult RedirectToAction(string actionName, string controllerName, string fragment);
    public virtual RedirectToActionResult RedirectToAction(string actionName, string controllerName, object routeValues, string fragment);
    public virtual RedirectToActionResult RedirectToActionPreserveMethod(string actionName, string controllerName, object routeValues, string fragment);
    public virtual RedirectToActionResult RedirectToActionPermanent(string actionName);
    public virtual RedirectToActionResult RedirectToActionPermanent(string actionName, object routeValues);
    public virtual RedirectToActionResult RedirectToActionPermanent(string actionName, string controllerName);
    public virtual RedirectToActionResult RedirectToActionPermanent(string actionName, string controllerName, string fragment);
    public virtual RedirectToActionResult RedirectToActionPermanent(string actionName, string controllerName, object routeValues);
    public virtual RedirectToActionResult RedirectToActionPermanent(string actionName, string controllerName, object routeValues, string fragment);
    public virtual RedirectToActionResult RedirectToActionPermanentPreserveMethod(string actionName, string controllerName, object routeValues, string fragment);
    public virtual RedirectToRouteResult RedirectToRoute(string routeName);
    public virtual RedirectToRouteResult RedirectToRoute(object routeValues);
    public virtual RedirectToRouteResult RedirectToRoute(string routeName, object routeValues);
    public virtual RedirectToRouteResult RedirectToRoute(string routeName, string fragment);
    public virtual RedirectToRouteResult RedirectToRoute(string routeName, object routeValues, string fragment);
    public virtual RedirectToRouteResult RedirectToRoutePreserveMethod(string routeName, object routeValues, string fragment);
    public virtual RedirectToRouteResult RedirectToRoutePermanent(string routeName);
    public virtual RedirectToRouteResult RedirectToRoutePermanent(object routeValues);
    public virtual RedirectToRouteResult RedirectToRoutePermanent(string routeName, object routeValues);
    public virtual RedirectToRouteResult RedirectToRoutePermanent(string routeName, string fragment);
    public virtual RedirectToRouteResult RedirectToRoutePermanent(string routeName, object routeValues, string fragment);
    public virtual RedirectToRouteResult RedirectToRoutePermanentPreserveMethod(string routeName, object routeValues, string fragment);
    public virtual RedirectToPageResult RedirectToPage();
    public virtual RedirectToPageResult RedirectToPage(object routeValues);
    public virtual RedirectToPageResult RedirectToPage(string pageName);
    public virtual RedirectToPageResult RedirectToPage(string pageName, string pageHandler);
    public virtual RedirectToPageResult RedirectToPage(string pageName, string pageHandler, object routeValues);
    public virtual RedirectToPageResult RedirectToPage(string pageName, object routeValues);
    public virtual RedirectToPageResult RedirectToPage(string pageName, string pageHandler, string fragment);
    public virtual RedirectToPageResult RedirectToPage(string pageName, string pageHandler, object routeValues, string fragment);
    public virtual RedirectToPageResult RedirectToPagePermanent(string pageName);
    public virtual RedirectToPageResult RedirectToPagePermanent(string pageName, object routeValues);
    public virtual RedirectToPageResult RedirectToPagePermanent(string pageName, string pageHandler);
    public virtual RedirectToPageResult RedirectToPagePermanent(string pageName, string pageHandler, object routeValues);
    public virtual RedirectToPageResult RedirectToPagePermanent(string pageName, string pageHandler, string fragment);
    public virtual RedirectToPageResult RedirectToPagePermanent(string pageName, object routeValues, string fragment);
    public virtual RedirectToPageResult RedirectToPagePermanent(string pageName, string pageHandler, object routeValues, string fragment);
    public virtual RedirectToPageResult RedirectToPagePreserveMethod(string pageName, string pageHandler, object routeValues, string fragment);
    public virtual RedirectToPageResult RedirectToPagePermanentPreserveMethod(string pageName, string pageHandler, object routeValues, string fragment);
    public virtual SignInResult SignIn(ClaimsPrincipal principal, string authenticationScheme);
    public virtual SignInResult SignIn(ClaimsPrincipal principal, AuthenticationProperties properties, string authenticationScheme);
    public virtual SignOutResult SignOut(String[] authenticationSchemes);
    public virtual SignOutResult SignOut(AuthenticationProperties properties, String[] authenticationSchemes);
    public virtual StatusCodeResult StatusCode(int statusCode);
    public virtual ObjectResult StatusCode(int statusCode, object value);
    public virtual UnauthorizedResult Unauthorized();
    public virtual PartialViewResult Partial(string viewName);
    public virtual PartialViewResult Partial(string viewName, object model);
    public virtual ViewComponentResult ViewComponent(string componentName);
    public virtual ViewComponentResult ViewComponent(Type componentType);
    public virtual ViewComponentResult ViewComponent(string componentName, object arguments);
    public virtual ViewComponentResult ViewComponent(Type componentType, object arguments);
    public virtual bool TryValidateModel(object model);
    public virtual bool TryValidateModel(object model, string name);
    public virtual void OnPageHandlerSelected(PageHandlerSelectedContext context);
    public virtual void OnPageHandlerExecuting(PageHandlerExecutingContext context);
    public virtual void OnPageHandlerExecuted(PageHandlerExecutedContext context);
    public virtual Task OnPageHandlerSelectionAsync(PageHandlerSelectedContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.RazorPages.PageModel/<OnPageHandlerExecutionAsync>d__141")]
public virtual Task OnPageHandlerExecutionAsync(PageHandlerExecutingContext context, PageHandlerExecutionDelegate next);
}
public class Microsoft.AspNetCore.Mvc.RazorPages.PageResult : ActionResult {
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private PageBase <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private ViewDataDictionary <ViewData>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StatusCode>k__BackingField;
    public string ContentType { get; public set; }
    public object Model { get; }
    public PageBase Page { get; public set; }
    public ViewDataDictionary ViewData { get; public set; }
    public Nullable`1<int> StatusCode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    public object get_Model();
    [CompilerGeneratedAttribute]
public PageBase get_Page();
    [CompilerGeneratedAttribute]
public void set_Page(PageBase value);
    [CompilerGeneratedAttribute]
public ViewDataDictionary get_ViewData();
    [CompilerGeneratedAttribute]
public void set_ViewData(ViewDataDictionary value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(Nullable`1<int> value);
    public virtual Task ExecuteResultAsync(ActionContext context);
}
public class Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions : object {
    private IReadOnlyList`1<ICompatibilitySwitch> _switches;
    private string _root;
    [CompilerGeneratedAttribute]
private PageConventionCollection <Conventions>k__BackingField;
    public PageConventionCollection Conventions { get; internal set; }
    public string RootDirectory { get; public set; }
    [CompilerGeneratedAttribute]
public PageConventionCollection get_Conventions();
    [CompilerGeneratedAttribute]
internal void set_Conventions(PageConventionCollection value);
    public string get_RootDirectory();
    public void set_RootDirectory(string value);
    private sealed virtual override IEnumerator`1<ICompatibilitySwitch> System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Infrastructure.ICompatibilitySwitch>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class Microsoft.AspNetCore.Mvc.RazorPages.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string PropertyOfTypeCannotBeNull { get; }
    internal static string ActivatedInstance_MustBeAnInstanceOf { get; }
    internal static string PageViewResult_ContextIsInvalid { get; }
    internal static string ArgumentCannotBeNullOrEmpty { get; }
    internal static string UnsupportedHandlerMethodType { get; }
    internal static string AmbiguousHandler { get; }
    internal static string PathMustBeRootRelativePath { get; }
    internal static string AsyncPageFilter_InvalidShortCircuit { get; }
    internal static string InvalidPageType_WrongBase { get; }
    internal static string InvalidPageType_NoModelProperty { get; }
    internal static string InvalidValidPageName { get; }
    internal static string InvalidActionDescriptorModelType { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_PropertyOfTypeCannotBeNull();
    internal static string FormatPropertyOfTypeCannotBeNull(object p0, object p1);
    internal static string get_ActivatedInstance_MustBeAnInstanceOf();
    internal static string FormatActivatedInstance_MustBeAnInstanceOf(object p0, object p1);
    internal static string get_PageViewResult_ContextIsInvalid();
    internal static string FormatPageViewResult_ContextIsInvalid(object p0, object p1, object p2);
    internal static string get_ArgumentCannotBeNullOrEmpty();
    internal static string get_UnsupportedHandlerMethodType();
    internal static string FormatUnsupportedHandlerMethodType(object p0);
    internal static string get_AmbiguousHandler();
    internal static string FormatAmbiguousHandler(object p0, object p1);
    internal static string get_PathMustBeRootRelativePath();
    internal static string get_AsyncPageFilter_InvalidShortCircuit();
    internal static string FormatAsyncPageFilter_InvalidShortCircuit(object p0, object p1, object p2, object p3);
    internal static string get_InvalidPageType_WrongBase();
    internal static string FormatInvalidPageType_WrongBase(object p0, object p1);
    internal static string get_InvalidPageType_NoModelProperty();
    internal static string FormatInvalidPageType_NoModelProperty(object p0, object p1);
    internal static string get_InvalidValidPageName();
    internal static string FormatInvalidValidPageName(object p0);
    internal static string get_InvalidActionDescriptorModelType();
    internal static string FormatInvalidActionDescriptorModelType(object p0, object p1, object p2);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcBuilderExtensions : object {
    [ExtensionAttribute]
public static IMvcBuilder AddRazorPagesOptions(IMvcBuilder builder, Action`1<RazorPagesOptions> setupAction);
    [ExtensionAttribute]
public static IMvcBuilder WithRazorPagesRoot(IMvcBuilder builder, string rootDirectory);
    [ExtensionAttribute]
public static IMvcBuilder WithRazorPagesAtContentRoot(IMvcBuilder builder);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcCoreBuilderExtensions : object {
    [ExtensionAttribute]
public static IMvcCoreBuilder AddRazorPages(IMvcCoreBuilder builder);
    [ExtensionAttribute]
public static IMvcCoreBuilder AddRazorPages(IMvcCoreBuilder builder, Action`1<RazorPagesOptions> setupAction);
    [ExtensionAttribute]
public static IMvcCoreBuilder WithRazorPagesRoot(IMvcCoreBuilder builder, string rootDirectory);
    internal static void AddRazorPagesServices(IServiceCollection services);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions : object {
    [ExtensionAttribute]
public static IPageApplicationModelConvention ConfigureFilter(PageConventionCollection conventions, Func`2<PageApplicationModel, IFilterMetadata> factory);
    [ExtensionAttribute]
public static PageConventionCollection ConfigureFilter(PageConventionCollection conventions, IFilterMetadata filter);
    [ExtensionAttribute]
public static PageConventionCollection Add(PageConventionCollection conventions, IParameterModelBaseConvention convention);
    [ExtensionAttribute]
public static PageConventionCollection AllowAnonymousToPage(PageConventionCollection conventions, string pageName);
    [ExtensionAttribute]
public static PageConventionCollection AllowAnonymousToAreaPage(PageConventionCollection conventions, string areaName, string pageName);
    [ExtensionAttribute]
public static PageConventionCollection AllowAnonymousToFolder(PageConventionCollection conventions, string folderPath);
    [ExtensionAttribute]
public static PageConventionCollection AllowAnonymousToAreaFolder(PageConventionCollection conventions, string areaName, string folderPath);
    [ExtensionAttribute]
public static PageConventionCollection AuthorizePage(PageConventionCollection conventions, string pageName, string policy);
    [ExtensionAttribute]
public static PageConventionCollection AuthorizePage(PageConventionCollection conventions, string pageName);
    [ExtensionAttribute]
public static PageConventionCollection AuthorizeAreaPage(PageConventionCollection conventions, string areaName, string pageName);
    [ExtensionAttribute]
public static PageConventionCollection AuthorizeAreaPage(PageConventionCollection conventions, string areaName, string pageName, string policy);
    [ExtensionAttribute]
public static PageConventionCollection AuthorizeFolder(PageConventionCollection conventions, string folderPath, string policy);
    [ExtensionAttribute]
public static PageConventionCollection AuthorizeFolder(PageConventionCollection conventions, string folderPath);
    [ExtensionAttribute]
public static PageConventionCollection AuthorizeAreaFolder(PageConventionCollection conventions, string areaName, string folderPath);
    [ExtensionAttribute]
public static PageConventionCollection AuthorizeAreaFolder(PageConventionCollection conventions, string areaName, string folderPath, string policy);
    [ExtensionAttribute]
public static PageConventionCollection AddPageRoute(PageConventionCollection conventions, string pageName, string route);
    [ExtensionAttribute]
public static PageConventionCollection AddAreaPageRoute(PageConventionCollection conventions, string areaName, string pageName, string route);
    private static Action`1<PageRouteModel> AddPageRouteThunk(string route);
}
internal class Microsoft.Extensions.DependencyInjection.RazorPagesOptionsSetup : object {
    private IServiceProvider _serviceProvider;
    public RazorPagesOptionsSetup(IServiceProvider serviceProvider);
    public sealed virtual void Configure(RazorPagesOptions options);
}
internal class Microsoft.Extensions.DependencyInjection.RazorPagesRazorViewEngineOptionsSetup : object {
    private RazorPagesOptions _pagesOptions;
    public RazorPagesRazorViewEngineOptionsSetup(IOptions`1<RazorPagesOptions> pagesOptions);
    public sealed virtual void Configure(RazorViewEngineOptions options);
    private static string CombinePath(string path1, string path2);
}
