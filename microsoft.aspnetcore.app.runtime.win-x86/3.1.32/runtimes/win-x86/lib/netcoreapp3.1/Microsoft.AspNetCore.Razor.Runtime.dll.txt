internal class Microsoft.AspNetCore.Razor.Hosting.DefaultRazorCompiledItem : RazorCompiledItem {
    private Object[] _metadata;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public string Identifier { get; }
    public string Kind { get; }
    public IReadOnlyList`1<object> Metadata { get; }
    public Type Type { get; }
    public DefaultRazorCompiledItem(Type type, string kind, string identifier);
    [CompilerGeneratedAttribute]
public virtual string get_Identifier();
    [CompilerGeneratedAttribute]
public virtual string get_Kind();
    public virtual IReadOnlyList`1<object> get_Metadata();
    [CompilerGeneratedAttribute]
public virtual Type get_Type();
}
public interface Microsoft.AspNetCore.Razor.Hosting.IRazorSourceChecksumMetadata {
    public string Checksum { get; }
    public string ChecksumAlgorithm { get; }
    public string Identifier { get; }
    public abstract virtual string get_Checksum();
    public abstract virtual string get_ChecksumAlgorithm();
    public abstract virtual string get_Identifier();
}
public abstract class Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem : object {
    public string Identifier { get; }
    public string Kind { get; }
    public IReadOnlyList`1<object> Metadata { get; }
    public Type Type { get; }
    public abstract virtual string get_Identifier();
    public abstract virtual string get_Kind();
    public abstract virtual IReadOnlyList`1<object> get_Metadata();
    public abstract virtual Type get_Type();
}
[AttributeUsageAttribute("1")]
public class Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public string Kind { get; }
    public string Identifier { get; }
    public Type Type { get; }
    public RazorCompiledItemAttribute(Type type, string kind, string identifier);
    [CompilerGeneratedAttribute]
public string get_Kind();
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public Type get_Type();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemExtensions : object {
    [ExtensionAttribute]
public static IReadOnlyList`1<IRazorSourceChecksumMetadata> GetChecksumMetadata(RazorCompiledItem item);
}
public class Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemLoader : object {
    public virtual IReadOnlyList`1<RazorCompiledItem> LoadItems(Assembly assembly);
    protected virtual RazorCompiledItem CreateItem(RazorCompiledItemAttribute attribute);
    protected IEnumerable`1<RazorCompiledItemAttribute> LoadAttributes(Assembly assembly);
}
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemMetadataAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Key { get; }
    public string Value { get; }
    public RazorCompiledItemMetadataAttribute(string key, string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public string get_Value();
}
[AttributeUsageAttribute("1")]
public class Microsoft.AspNetCore.Razor.Hosting.RazorConfigurationNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ConfigurationName>k__BackingField;
    public string ConfigurationName { get; }
    public RazorConfigurationNameAttribute(string configurationName);
    [CompilerGeneratedAttribute]
public string get_ConfigurationName();
}
[AttributeUsageAttribute("1")]
public class Microsoft.AspNetCore.Razor.Hosting.RazorExtensionAssemblyNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtensionName>k__BackingField;
    public string AssemblyName { get; }
    public string ExtensionName { get; }
    public RazorExtensionAssemblyNameAttribute(string extensionName, string assemblyName);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public string get_ExtensionName();
}
[AttributeUsageAttribute("1")]
public class Microsoft.AspNetCore.Razor.Hosting.RazorLanguageVersionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LanguageVersion>k__BackingField;
    public string LanguageVersion { get; }
    public RazorLanguageVersionAttribute(string languageVersion);
    [CompilerGeneratedAttribute]
public string get_LanguageVersion();
}
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Checksum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChecksumAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    public string Checksum { get; }
    public string ChecksumAlgorithm { get; }
    public string Identifier { get; }
    public RazorSourceChecksumAttribute(string checksumAlgorithm, string checksum, string identifier);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Checksum();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ChecksumAlgorithm();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Identifier();
}
internal static class Microsoft.AspNetCore.Razor.Runtime.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string ScopeManager_EndCannotBeCalledWithoutACallToBegin { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_ScopeManager_EndCannotBeCalledWithoutACallToBegin();
    internal static string FormatScopeManager_EndCannotBeCalledWithoutACallToBegin(object p0, object p1, object p2);
}
public class Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext : object {
    private List`1<ITagHelper> _tagHelpers;
    private Action`1<HtmlEncoder> _startTagHelperWritingScope;
    private Func`1<TagHelperContent> _endTagHelperWritingScope;
    private TagHelperContent _childContent;
    private Func`1<Task> _executeChildContentAsync;
    private Dictionary`2<HtmlEncoder, TagHelperContent> _perEncoderChildContent;
    private TagHelperAttributeList _allAttributes;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private TagHelperOutput <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private TagHelperContext <Context>k__BackingField;
    public bool ChildContentRetrieved { get; }
    public IDictionary`2<object, object> Items { get; private set; }
    public IList`1<ITagHelper> TagHelpers { get; }
    public TagHelperOutput Output { get; internal set; }
    public TagHelperContext Context { get; }
    internal TagHelperExecutionContext(string tagName, TagMode tagMode);
    public TagHelperExecutionContext(string tagName, TagMode tagMode, IDictionary`2<object, object> items, string uniqueId, Func`1<Task> executeChildContentAsync, Action`1<HtmlEncoder> startTagHelperWritingScope, Func`1<TagHelperContent> endTagHelperWritingScope);
    public bool get_ChildContentRetrieved();
    [CompilerGeneratedAttribute]
public IDictionary`2<object, object> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(IDictionary`2<object, object> value);
    public IList`1<ITagHelper> get_TagHelpers();
    [CompilerGeneratedAttribute]
public TagHelperOutput get_Output();
    [CompilerGeneratedAttribute]
internal void set_Output(TagHelperOutput value);
    [CompilerGeneratedAttribute]
public TagHelperContext get_Context();
    public void Add(ITagHelper tagHelper);
    public void AddHtmlAttribute(string name, object value, HtmlAttributeValueStyle valueStyle);
    public void AddHtmlAttribute(TagHelperAttribute attribute);
    public void AddTagHelperAttribute(string name, object value, HtmlAttributeValueStyle valueStyle);
    public void AddTagHelperAttribute(TagHelperAttribute attribute);
    public void Reinitialize(string tagName, TagMode tagMode, IDictionary`2<object, object> items, string uniqueId, Func`1<Task> executeChildContentAsync);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext/<SetOutputContentAsync>d__30")]
public Task SetOutputContentAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext/<GetChildContentAsync>d__31")]
internal Task`1<TagHelperContent> GetChildContentAsync(bool useCachedResult, HtmlEncoder encoder);
}
public class Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner : object {
    public Task RunAsync(TagHelperExecutionContext executionContext);
    private static void OrderTagHelpers(IList`1<ITagHelper> tagHelpers);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner/<<RunAsync>g__Awaited|0_0>d")]
[CompilerGeneratedAttribute]
internal static Task <RunAsync>g__Awaited|0_0(Task task, TagHelperExecutionContext executionContext, int i, int count);
}
public class Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager : object {
    private ExecutionContextPool _executionContextPool;
    public TagHelperScopeManager(Action`1<HtmlEncoder> startTagHelperWritingScope, Func`1<TagHelperContent> endTagHelperWritingScope);
    public TagHelperExecutionContext Begin(string tagName, TagMode tagMode, string uniqueId, Func`1<Task> executeChildContentAsync);
    public TagHelperExecutionContext End();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Extensions.Internal.CopyOnWriteDictionary`2 : object {
    private IDictionary`2<TKey, TValue> _sourceDictionary;
    private IEqualityComparer`1<TKey> _comparer;
    private IDictionary`2<TKey, TValue> _innerDictionary;
    private IDictionary`2<TKey, TValue> ReadDictionary { get; }
    private IDictionary`2<TKey, TValue> WriteDictionary { get; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TValue Item { get; public set; }
    public CopyOnWriteDictionary`2(IDictionary`2<TKey, TValue> sourceDictionary, IEqualityComparer`1<TKey> comparer);
    private IDictionary`2<TKey, TValue> get_ReadDictionary();
    private IDictionary`2<TKey, TValue> get_WriteDictionary();
    public virtual ICollection`1<TKey> get_Keys();
    public virtual ICollection`1<TValue> get_Values();
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual TValue get_Item(TKey key);
    public virtual void set_Item(TKey key, TValue value);
    public virtual bool ContainsKey(TKey key);
    public virtual void Add(TKey key, TValue value);
    public virtual bool Remove(TKey key);
    public virtual bool TryGetValue(TKey key, TValue& value);
    public virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public virtual void Clear();
    public virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Extensions.Internal.CopyOnWriteDictionaryHolder`2 : ValueType {
    private Dictionary`2<TKey, TValue> _source;
    private Dictionary`2<TKey, TValue> _copy;
    public bool HasBeenCopied { get; }
    public Dictionary`2<TKey, TValue> ReadDictionary { get; }
    public Dictionary`2<TKey, TValue> WriteDictionary { get; }
    public KeyCollection<TKey, TValue> Keys { get; }
    public ValueCollection<TKey, TValue> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TValue Item { get; public set; }
    public CopyOnWriteDictionaryHolder`2(Dictionary`2<TKey, TValue> source);
    public CopyOnWriteDictionaryHolder`2(CopyOnWriteDictionaryHolder`2<TKey, TValue> source);
    public bool get_HasBeenCopied();
    public Dictionary`2<TKey, TValue> get_ReadDictionary();
    public Dictionary`2<TKey, TValue> get_WriteDictionary();
    public KeyCollection<TKey, TValue> get_Keys();
    public ValueCollection<TKey, TValue> get_Values();
    public int get_Count();
    public bool get_IsReadOnly();
    public TValue get_Item(TKey key);
    public void set_Item(TKey key, TValue value);
    public bool ContainsKey(TKey key);
    public void Add(TKey key, TValue value);
    public bool Remove(TKey key);
    public bool TryGetValue(TKey key, TValue& value);
    public void Add(KeyValuePair`2<TKey, TValue> item);
    public void Clear();
    public bool Contains(KeyValuePair`2<TKey, TValue> item);
    public void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public bool Remove(KeyValuePair`2<TKey, TValue> item);
    public Enumerator<TKey, TValue> GetEnumerator();
}
