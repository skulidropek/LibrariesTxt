internal class Microsoft.AspNetCore.Internal.MemoryBufferWriter : Stream {
    [ThreadStaticAttribute]
private static MemoryBufferWriter _cachedInstance;
    private int _minimumSegmentSize;
    private int _bytesWritten;
    private List`1<CompletedBuffer> _completedSegments;
    private Byte[] _currentSegment;
    private int _position;
    public long Length { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Position { get; public set; }
    public MemoryBufferWriter(int minimumSegmentSize);
    public virtual long get_Length();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public static MemoryBufferWriter Get();
    public static void Return(MemoryBufferWriter writer);
    public void Reset();
    public sealed virtual void Advance(int count);
    public sealed virtual Memory`1<byte> GetMemory(int sizeHint);
    public sealed virtual Span`1<byte> GetSpan(int sizeHint);
    public void CopyTo(IBufferWriter`1<byte> destination);
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    private void EnsureCapacity(int sizeHint);
    private void AddSegment(int sizeHint);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Internal.MemoryBufferWriter/<CopyToSlowAsync>d__28")]
private Task CopyToSlowAsync(Stream destination);
    public Byte[] ToArray();
    public void CopyTo(Span`1<byte> span);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void WriteByte(byte value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Write(ReadOnlySpan`1<byte> span);
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.AspNetCore.Internal.ReusableUtf8JsonWriter : object {
    [ThreadStaticAttribute]
private static ReusableUtf8JsonWriter _cachedInstance;
    private Utf8JsonWriter _writer;
    public ReusableUtf8JsonWriter(IBufferWriter`1<byte> stream);
    public static ReusableUtf8JsonWriter Get(IBufferWriter`1<byte> stream);
    public static void Return(ReusableUtf8JsonWriter writer);
    public Utf8JsonWriter GetJsonWriter();
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Internal.SystemTextJsonExtensions : object {
    [ExtensionAttribute]
public static bool CheckRead(Utf8JsonReader& reader);
    [ExtensionAttribute]
public static void EnsureObjectStart(Utf8JsonReader& reader);
    [ExtensionAttribute]
public static string GetTokenString(Utf8JsonReader& reader);
    public static string GetTokenString(JsonTokenType tokenType);
    [ExtensionAttribute]
public static void EnsureArrayStart(Utf8JsonReader& reader);
    [ExtensionAttribute]
public static bool ReadAsBoolean(Utf8JsonReader& reader, string propertyName);
    [ExtensionAttribute]
public static string ReadAsString(Utf8JsonReader& reader, string propertyName);
    [ExtensionAttribute]
public static Nullable`1<int> ReadAsInt32(Utf8JsonReader& reader, string propertyName);
}
internal static class Microsoft.AspNetCore.Internal.TextMessageFormatter : object {
    public static byte RecordSeparator;
    private static TextMessageFormatter();
    public static void WriteRecordSeparator(IBufferWriter`1<byte> output);
}
internal static class Microsoft.AspNetCore.Internal.TextMessageParser : object {
    public static bool TryParseMessage(ReadOnlySequence`1& buffer, ReadOnlySequence`1& payload);
    private static bool TryParseMessageMultiSegment(ReadOnlySequence`1& buffer, ReadOnlySequence`1& payload);
}
internal class Microsoft.AspNetCore.Internal.Utf8BufferTextWriter : TextWriter {
    private static UTF8Encoding _utf8NoBom;
    private static int MaximumBytesPerUtf8Char;
    [ThreadStaticAttribute]
private static Utf8BufferTextWriter _cachedInstance;
    private Encoder _encoder;
    private IBufferWriter`1<byte> _bufferWriter;
    private Memory`1<byte> _memory;
    private int _memoryUsed;
    public Encoding Encoding { get; }
    private static Utf8BufferTextWriter();
    public virtual Encoding get_Encoding();
    public static Utf8BufferTextWriter Get(IBufferWriter`1<byte> bufferWriter);
    public static void Return(Utf8BufferTextWriter writer);
    public void SetWriter(IBufferWriter`1<byte> bufferWriter);
    public virtual void Write(Char[] buffer, int index, int count);
    public virtual void Write(Char[] buffer);
    public virtual void Write(char value);
    private void WriteMultiByteChar(char value);
    public virtual void Write(string value);
    private Span`1<byte> GetBuffer();
    private void EnsureBuffer();
    private void WriteInternal(ReadOnlySpan`1<char> buffer);
    public virtual void Flush();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.AspNetCore.SignalR.HubException : Exception {
    public HubException(string message);
    public HubException(string message, Exception innerException);
    public HubException(SerializationInfo info, StreamingContext context);
}
public interface Microsoft.AspNetCore.SignalR.IInvocationBinder {
    public abstract virtual Type GetReturnType(string invocationId);
    public abstract virtual IReadOnlyList`1<Type> GetParameterTypes(string methodName);
    public abstract virtual Type GetStreamItemType(string streamId);
}
internal class Microsoft.AspNetCore.SignalR.Internal.Utf8BufferTextReader : TextReader {
    private Decoder _decoder;
    private ReadOnlySequence`1<byte> _utf8Buffer;
    [ThreadStaticAttribute]
private static Utf8BufferTextReader _cachedInstance;
    public static Utf8BufferTextReader Get(ReadOnlySequence`1& utf8Buffer);
    public static void Return(Utf8BufferTextReader reader);
    public void SetBuffer(ReadOnlySequence`1& utf8Buffer);
    public virtual int Read(Char[] buffer, int index, int count);
}
public interface Microsoft.AspNetCore.SignalR.ISignalRBuilder {
    public IServiceCollection Services { get; }
    public abstract virtual IServiceCollection get_Services();
}
public class Microsoft.AspNetCore.SignalR.Protocol.CancelInvocationMessage : HubInvocationMessage {
    public CancelInvocationMessage(string invocationId);
}
public class Microsoft.AspNetCore.SignalR.Protocol.CloseMessage : HubMessage {
    public static CloseMessage Empty;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowReconnect>k__BackingField;
    public string Error { get; }
    public bool AllowReconnect { get; }
    public CloseMessage(string error);
    public CloseMessage(string error, bool allowReconnect);
    private static CloseMessage();
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public bool get_AllowReconnect();
}
public class Microsoft.AspNetCore.SignalR.Protocol.CompletionMessage : HubInvocationMessage {
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasResult>k__BackingField;
    public string Error { get; }
    public object Result { get; }
    public bool HasResult { get; }
    public CompletionMessage(string invocationId, string error, object result, bool hasResult);
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public object get_Result();
    [CompilerGeneratedAttribute]
public bool get_HasResult();
    public virtual string ToString();
    public static CompletionMessage WithError(string invocationId, string error);
    public static CompletionMessage WithResult(string invocationId, object payload);
    public static CompletionMessage Empty(string invocationId);
}
public static class Microsoft.AspNetCore.SignalR.Protocol.HandshakeProtocol : object {
    private static string ProtocolPropertyName;
    private static JsonEncodedText ProtocolPropertyNameBytes;
    private static string ProtocolVersionPropertyName;
    private static JsonEncodedText ProtocolVersionPropertyNameBytes;
    private static string ErrorPropertyName;
    private static JsonEncodedText ErrorPropertyNameBytes;
    private static string TypePropertyName;
    private static JsonEncodedText TypePropertyNameBytes;
    private static ConcurrentDictionary`2<IHubProtocol, ReadOnlyMemory`1<byte>> _messageCache;
    private static HandshakeProtocol();
    public static ReadOnlySpan`1<byte> GetSuccessfulHandshake(IHubProtocol protocol);
    public static void WriteRequestMessage(HandshakeRequestMessage requestMessage, IBufferWriter`1<byte> output);
    public static void WriteResponseMessage(HandshakeResponseMessage responseMessage, IBufferWriter`1<byte> output);
    public static bool TryParseResponseMessage(ReadOnlySequence`1& buffer, HandshakeResponseMessage& responseMessage);
    public static bool TryParseRequestMessage(ReadOnlySequence`1& buffer, HandshakeRequestMessage& requestMessage);
    [CompilerGeneratedAttribute]
internal static string <TryParseRequestMessage>g__GetPayloadAsString|13_0(<>c__DisplayClass13_0& );
}
public class Microsoft.AspNetCore.SignalR.Protocol.HandshakeRequestMessage : HubMessage {
    [CompilerGeneratedAttribute]
private string <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    public string Protocol { get; }
    public int Version { get; }
    public HandshakeRequestMessage(string protocol, int version);
    [CompilerGeneratedAttribute]
public string get_Protocol();
    [CompilerGeneratedAttribute]
public int get_Version();
}
public class Microsoft.AspNetCore.SignalR.Protocol.HandshakeResponseMessage : HubMessage {
    public static HandshakeResponseMessage Empty;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    public string Error { get; }
    public HandshakeResponseMessage(string error);
    private static HandshakeResponseMessage();
    [CompilerGeneratedAttribute]
public string get_Error();
}
public abstract class Microsoft.AspNetCore.SignalR.Protocol.HubInvocationMessage : HubMessage {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InvocationId>k__BackingField;
    public IDictionary`2<string, string> Headers { get; public set; }
    public string InvocationId { get; }
    protected HubInvocationMessage(string invocationId);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_InvocationId();
}
public abstract class Microsoft.AspNetCore.SignalR.Protocol.HubMessage : object {
}
public abstract class Microsoft.AspNetCore.SignalR.Protocol.HubMethodInvocationMessage : HubInvocationMessage {
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <StreamIds>k__BackingField;
    public string Target { get; }
    public Object[] Arguments { get; }
    public String[] StreamIds { get; }
    protected HubMethodInvocationMessage(string invocationId, string target, Object[] arguments, String[] streamIds);
    protected HubMethodInvocationMessage(string invocationId, string target, Object[] arguments);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
    [CompilerGeneratedAttribute]
public String[] get_StreamIds();
}
public static class Microsoft.AspNetCore.SignalR.Protocol.HubProtocolConstants : object {
    public static int InvocationMessageType;
    public static int StreamItemMessageType;
    public static int CompletionMessageType;
    public static int StreamInvocationMessageType;
    public static int CancelInvocationMessageType;
    public static int PingMessageType;
    public static int CloseMessageType;
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.SignalR.Protocol.HubProtocolExtensions : object {
    [ExtensionAttribute]
public static Byte[] GetMessageBytes(IHubProtocol hubProtocol, HubMessage message);
}
public interface Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol {
    public string Name { get; }
    public int Version { get; }
    public TransferFormat TransferFormat { get; }
    public abstract virtual string get_Name();
    public abstract virtual int get_Version();
    public abstract virtual TransferFormat get_TransferFormat();
    public abstract virtual bool TryParseMessage(ReadOnlySequence`1& input, IInvocationBinder binder, HubMessage& message);
    public abstract virtual void WriteMessage(HubMessage message, IBufferWriter`1<byte> output);
    public abstract virtual ReadOnlyMemory`1<byte> GetMessageBytes(HubMessage message);
    public abstract virtual bool IsVersionSupported(int version);
}
public class Microsoft.AspNetCore.SignalR.Protocol.InvocationBindingFailureMessage : HubInvocationMessage {
    [CompilerGeneratedAttribute]
private ExceptionDispatchInfo <BindingFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    public ExceptionDispatchInfo BindingFailure { get; }
    public string Target { get; }
    public InvocationBindingFailureMessage(string invocationId, string target, ExceptionDispatchInfo bindingFailure);
    [CompilerGeneratedAttribute]
public ExceptionDispatchInfo get_BindingFailure();
    [CompilerGeneratedAttribute]
public string get_Target();
}
public class Microsoft.AspNetCore.SignalR.Protocol.InvocationMessage : HubMethodInvocationMessage {
    public InvocationMessage(string target, Object[] arguments);
    public InvocationMessage(string invocationId, string target, Object[] arguments);
    public InvocationMessage(string invocationId, string target, Object[] arguments, String[] streamIds);
    public virtual string ToString();
}
public class Microsoft.AspNetCore.SignalR.Protocol.PingMessage : HubMessage {
    public static PingMessage Instance;
    private static PingMessage();
}
public class Microsoft.AspNetCore.SignalR.Protocol.StreamBindingFailureMessage : HubMessage {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionDispatchInfo <BindingFailure>k__BackingField;
    public string Id { get; }
    public ExceptionDispatchInfo BindingFailure { get; }
    public StreamBindingFailureMessage(string id, ExceptionDispatchInfo bindingFailure);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public ExceptionDispatchInfo get_BindingFailure();
}
public class Microsoft.AspNetCore.SignalR.Protocol.StreamInvocationMessage : HubMethodInvocationMessage {
    public StreamInvocationMessage(string invocationId, string target, Object[] arguments);
    public StreamInvocationMessage(string invocationId, string target, Object[] arguments, String[] streamIds);
    public virtual string ToString();
}
public class Microsoft.AspNetCore.SignalR.Protocol.StreamItemMessage : HubInvocationMessage {
    [CompilerGeneratedAttribute]
private object <Item>k__BackingField;
    public object Item { get; }
    public StreamItemMessage(string invocationId, object item);
    [CompilerGeneratedAttribute]
public object get_Item();
    public virtual string ToString();
}
