internal static class Microsoft.Extensions.DependencyInjection.Abstractions.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string AmbiguousConstructorMatch { get; }
    internal static string CannotLocateImplementation { get; }
    internal static string CannotResolveService { get; }
    internal static string NoConstructorMatch { get; }
    internal static string NoServiceRegistered { get; }
    internal static string TryAddIndistinguishableTypeToEnumerable { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_AmbiguousConstructorMatch();
    internal static string FormatAmbiguousConstructorMatch(object p0);
    internal static string get_CannotLocateImplementation();
    internal static string FormatCannotLocateImplementation(object p0, object p1);
    internal static string get_CannotResolveService();
    internal static string FormatCannotResolveService(object p0, object p1);
    internal static string get_NoConstructorMatch();
    internal static string FormatNoConstructorMatch(object p0);
    internal static string get_NoServiceRegistered();
    internal static string FormatNoServiceRegistered(object p0);
    internal static string get_TryAddIndistinguishableTypeToEnumerable();
    internal static string FormatTryAddIndistinguishableTypeToEnumerable(object p0, object p1);
}
public static class Microsoft.Extensions.DependencyInjection.ActivatorUtilities : object {
    private static MethodInfo GetServiceInfo;
    private static ActivatorUtilities();
    public static object CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters);
    public static ObjectFactory CreateFactory(Type instanceType, Type[] argumentTypes);
    public static T CreateInstance(IServiceProvider provider, Object[] parameters);
    public static T GetServiceOrCreateInstance(IServiceProvider provider);
    public static object GetServiceOrCreateInstance(IServiceProvider provider, Type type);
    private static MethodInfo GetMethodInfo(Expression`1<T> expr);
    private static object GetService(IServiceProvider sp, Type type, Type requiredBy, bool isDefaultParameterRequired);
    private static Expression BuildFactoryExpression(ConstructorInfo constructor, Nullable`1[] parameterMap, Expression serviceProvider, Expression factoryArgumentArray);
    private static void FindApplicableConstructor(Type instanceType, Type[] argumentTypes, ConstructorInfo& matchingConstructor, Nullable`1[]& parameterMap);
    private static bool TryFindMatchingConstructor(Type instanceType, Type[] argumentTypes, ConstructorInfo& matchingConstructor, Nullable`1[]& parameterMap);
    private static bool TryFindPreferredConstructor(Type instanceType, Type[] argumentTypes, ConstructorInfo& matchingConstructor, Nullable`1[]& parameterMap);
    private static bool TryCreateParameterMap(ParameterInfo[] constructorParameters, Type[] argumentTypes, Nullable`1[]& parameterMap);
    private static void ThrowMultipleCtorsMarkedWithAttributeException();
    private static void ThrowMarkedCtorDoesNotTakeAllProvidedArguments();
}
public class Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesConstructorAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection Add(IServiceCollection collection, ServiceDescriptor descriptor);
    [ExtensionAttribute]
public static IServiceCollection Add(IServiceCollection collection, IEnumerable`1<ServiceDescriptor> descriptors);
    [ExtensionAttribute]
public static void TryAdd(IServiceCollection collection, ServiceDescriptor descriptor);
    [ExtensionAttribute]
public static void TryAdd(IServiceCollection collection, IEnumerable`1<ServiceDescriptor> descriptors);
    [ExtensionAttribute]
public static void TryAddTransient(IServiceCollection collection, Type service);
    [ExtensionAttribute]
public static void TryAddTransient(IServiceCollection collection, Type service, Type implementationType);
    [ExtensionAttribute]
public static void TryAddTransient(IServiceCollection collection, Type service, Func`2<IServiceProvider, object> implementationFactory);
    [ExtensionAttribute]
public static void TryAddTransient(IServiceCollection collection);
    [ExtensionAttribute]
public static void TryAddTransient(IServiceCollection collection);
    [ExtensionAttribute]
public static void TryAddTransient(IServiceCollection services, Func`2<IServiceProvider, TService> implementationFactory);
    [ExtensionAttribute]
public static void TryAddScoped(IServiceCollection collection, Type service);
    [ExtensionAttribute]
public static void TryAddScoped(IServiceCollection collection, Type service, Type implementationType);
    [ExtensionAttribute]
public static void TryAddScoped(IServiceCollection collection, Type service, Func`2<IServiceProvider, object> implementationFactory);
    [ExtensionAttribute]
public static void TryAddScoped(IServiceCollection collection);
    [ExtensionAttribute]
public static void TryAddScoped(IServiceCollection collection);
    [ExtensionAttribute]
public static void TryAddScoped(IServiceCollection services, Func`2<IServiceProvider, TService> implementationFactory);
    [ExtensionAttribute]
public static void TryAddSingleton(IServiceCollection collection, Type service);
    [ExtensionAttribute]
public static void TryAddSingleton(IServiceCollection collection, Type service, Type implementationType);
    [ExtensionAttribute]
public static void TryAddSingleton(IServiceCollection collection, Type service, Func`2<IServiceProvider, object> implementationFactory);
    [ExtensionAttribute]
public static void TryAddSingleton(IServiceCollection collection);
    [ExtensionAttribute]
public static void TryAddSingleton(IServiceCollection collection);
    [ExtensionAttribute]
public static void TryAddSingleton(IServiceCollection collection, TService instance);
    [ExtensionAttribute]
public static void TryAddSingleton(IServiceCollection services, Func`2<IServiceProvider, TService> implementationFactory);
    [ExtensionAttribute]
public static void TryAddEnumerable(IServiceCollection services, ServiceDescriptor descriptor);
    [ExtensionAttribute]
public static void TryAddEnumerable(IServiceCollection services, IEnumerable`1<ServiceDescriptor> descriptors);
    [ExtensionAttribute]
public static IServiceCollection Replace(IServiceCollection collection, ServiceDescriptor descriptor);
    [ExtensionAttribute]
public static IServiceCollection RemoveAll(IServiceCollection collection);
    [ExtensionAttribute]
public static IServiceCollection RemoveAll(IServiceCollection collection, Type serviceType);
}
public interface Microsoft.Extensions.DependencyInjection.IServiceCollection {
}
public interface Microsoft.Extensions.DependencyInjection.IServiceProviderFactory`1 {
    public abstract virtual TContainerBuilder CreateBuilder(IServiceCollection services);
    public abstract virtual IServiceProvider CreateServiceProvider(TContainerBuilder containerBuilder);
}
public interface Microsoft.Extensions.DependencyInjection.IServiceScope {
    public IServiceProvider ServiceProvider { get; }
    public abstract virtual IServiceProvider get_ServiceProvider();
}
public interface Microsoft.Extensions.DependencyInjection.IServiceScopeFactory {
    public abstract virtual IServiceScope CreateScope();
}
public interface Microsoft.Extensions.DependencyInjection.ISupportRequiredService {
    public abstract virtual object GetRequiredService(Type serviceType);
}
public class Microsoft.Extensions.DependencyInjection.ObjectFactory : MulticastDelegate {
    public ObjectFactory(object object, IntPtr method);
    public virtual object Invoke(IServiceProvider serviceProvider, Object[] arguments);
    public virtual IAsyncResult BeginInvoke(IServiceProvider serviceProvider, Object[] arguments, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddTransient(IServiceCollection services, Type serviceType, Type implementationType);
    [ExtensionAttribute]
public static IServiceCollection AddTransient(IServiceCollection services, Type serviceType, Func`2<IServiceProvider, object> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddTransient(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddTransient(IServiceCollection services, Type serviceType);
    [ExtensionAttribute]
public static IServiceCollection AddTransient(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddTransient(IServiceCollection services, Func`2<IServiceProvider, TService> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddTransient(IServiceCollection services, Func`2<IServiceProvider, TImplementation> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddScoped(IServiceCollection services, Type serviceType, Type implementationType);
    [ExtensionAttribute]
public static IServiceCollection AddScoped(IServiceCollection services, Type serviceType, Func`2<IServiceProvider, object> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddScoped(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddScoped(IServiceCollection services, Type serviceType);
    [ExtensionAttribute]
public static IServiceCollection AddScoped(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddScoped(IServiceCollection services, Func`2<IServiceProvider, TService> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddScoped(IServiceCollection services, Func`2<IServiceProvider, TImplementation> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services, Type serviceType, Type implementationType);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services, Type serviceType, Func`2<IServiceProvider, object> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services, Type serviceType);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services, Func`2<IServiceProvider, TService> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services, Func`2<IServiceProvider, TImplementation> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services, Type serviceType, object implementationInstance);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services, TService implementationInstance);
    private static IServiceCollection Add(IServiceCollection collection, Type serviceType, Type implementationType, ServiceLifetime lifetime);
    private static IServiceCollection Add(IServiceCollection collection, Type serviceType, Func`2<IServiceProvider, object> implementationFactory, ServiceLifetime lifetime);
}
[DebuggerDisplayAttribute("Lifetime = {Lifetime}, ServiceType = {ServiceType}, ImplementationType = {ImplementationType}")]
public class Microsoft.Extensions.DependencyInjection.ServiceDescriptor : object {
    [CompilerGeneratedAttribute]
private ServiceLifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ImplementationType>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ImplementationInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IServiceProvider, object> <ImplementationFactory>k__BackingField;
    public ServiceLifetime Lifetime { get; }
    public Type ServiceType { get; }
    public Type ImplementationType { get; }
    public object ImplementationInstance { get; }
    public Func`2<IServiceProvider, object> ImplementationFactory { get; }
    public ServiceDescriptor(Type serviceType, Type implementationType, ServiceLifetime lifetime);
    public ServiceDescriptor(Type serviceType, object instance);
    public ServiceDescriptor(Type serviceType, Func`2<IServiceProvider, object> factory, ServiceLifetime lifetime);
    private ServiceDescriptor(Type serviceType, ServiceLifetime lifetime);
    [CompilerGeneratedAttribute]
public ServiceLifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public Type get_ServiceType();
    [CompilerGeneratedAttribute]
public Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public object get_ImplementationInstance();
    [CompilerGeneratedAttribute]
public Func`2<IServiceProvider, object> get_ImplementationFactory();
    public virtual string ToString();
    internal Type GetImplementationType();
    public static ServiceDescriptor Transient();
    public static ServiceDescriptor Transient(Type service, Type implementationType);
    public static ServiceDescriptor Transient(Func`2<IServiceProvider, TImplementation> implementationFactory);
    public static ServiceDescriptor Transient(Func`2<IServiceProvider, TService> implementationFactory);
    public static ServiceDescriptor Transient(Type service, Func`2<IServiceProvider, object> implementationFactory);
    public static ServiceDescriptor Scoped();
    public static ServiceDescriptor Scoped(Type service, Type implementationType);
    public static ServiceDescriptor Scoped(Func`2<IServiceProvider, TImplementation> implementationFactory);
    public static ServiceDescriptor Scoped(Func`2<IServiceProvider, TService> implementationFactory);
    public static ServiceDescriptor Scoped(Type service, Func`2<IServiceProvider, object> implementationFactory);
    public static ServiceDescriptor Singleton();
    public static ServiceDescriptor Singleton(Type service, Type implementationType);
    public static ServiceDescriptor Singleton(Func`2<IServiceProvider, TImplementation> implementationFactory);
    public static ServiceDescriptor Singleton(Func`2<IServiceProvider, TService> implementationFactory);
    public static ServiceDescriptor Singleton(Type serviceType, Func`2<IServiceProvider, object> implementationFactory);
    public static ServiceDescriptor Singleton(TService implementationInstance);
    public static ServiceDescriptor Singleton(Type serviceType, object implementationInstance);
    private static ServiceDescriptor Describe(ServiceLifetime lifetime);
    public static ServiceDescriptor Describe(Type serviceType, Type implementationType, ServiceLifetime lifetime);
    public static ServiceDescriptor Describe(Type serviceType, Func`2<IServiceProvider, object> implementationFactory, ServiceLifetime lifetime);
}
public enum Microsoft.Extensions.DependencyInjection.ServiceLifetime : Enum {
    public int value__;
    public static ServiceLifetime Singleton;
    public static ServiceLifetime Scoped;
    public static ServiceLifetime Transient;
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions : object {
    [ExtensionAttribute]
public static T GetService(IServiceProvider provider);
    [ExtensionAttribute]
public static object GetRequiredService(IServiceProvider provider, Type serviceType);
    [ExtensionAttribute]
public static T GetRequiredService(IServiceProvider provider);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetServices(IServiceProvider provider);
    [ExtensionAttribute]
public static IEnumerable`1<object> GetServices(IServiceProvider provider, Type serviceType);
    [ExtensionAttribute]
public static IServiceScope CreateScope(IServiceProvider provider);
}
internal class Microsoft.Extensions.Internal.ParameterDefaultValue : object {
    private static Type _nullable;
    private static ParameterDefaultValue();
    public static bool TryGetDefaultValue(ParameterInfo parameter, Object& defaultValue);
}
