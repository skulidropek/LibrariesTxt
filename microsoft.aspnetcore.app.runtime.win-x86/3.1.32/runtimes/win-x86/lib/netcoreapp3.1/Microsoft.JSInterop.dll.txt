public static class Microsoft.JSInterop.DotNetObjectReference : object {
    public static DotNetObjectReference`1<TValue> Create(TValue value);
}
public class Microsoft.JSInterop.DotNetObjectReference`1 : object {
    private TValue _value;
    private long _objectId;
    private JSRuntime _jsRuntime;
    [CompilerGeneratedAttribute]
private bool <Disposed>k__BackingField;
    public TValue Value { get; }
    internal long ObjectId { get; internal set; }
    internal JSRuntime JSRuntime { get; internal set; }
    private object Microsoft.JSInterop.Infrastructure.IDotNetObjectReference.Value { get; }
    internal bool Disposed { get; private set; }
    internal DotNetObjectReference`1(TValue value);
    public TValue get_Value();
    internal long get_ObjectId();
    internal void set_ObjectId(long value);
    internal JSRuntime get_JSRuntime();
    internal void set_JSRuntime(JSRuntime value);
    private sealed virtual override object Microsoft.JSInterop.Infrastructure.IDotNetObjectReference.get_Value();
    [CompilerGeneratedAttribute]
internal bool get_Disposed();
    [CompilerGeneratedAttribute]
private void set_Disposed(bool value);
    public sealed virtual void Dispose();
    internal void ThrowIfDisposed();
}
public interface Microsoft.JSInterop.IJSInProcessRuntime {
    public abstract virtual T Invoke(string identifier, Object[] args);
}
public interface Microsoft.JSInterop.IJSRuntime {
    public abstract virtual ValueTask`1<TValue> InvokeAsync(string identifier, Object[] args);
    public abstract virtual ValueTask`1<TValue> InvokeAsync(string identifier, CancellationToken cancellationToken, Object[] args);
}
public static class Microsoft.JSInterop.Infrastructure.DotNetDispatcher : object {
    private static string DisposeDotNetObjectReferenceMethodName;
    internal static JsonEncodedText DotNetObjectRefKey;
    private static ConcurrentDictionary`2<AssemblyKey, IReadOnlyDictionary`2<string, ValueTuple`2<MethodInfo, Type[]>>> _cachedMethodsByAssembly;
    private static ConcurrentDictionary`2<Type, IReadOnlyDictionary`2<string, ValueTuple`2<MethodInfo, Type[]>>> _cachedMethodsByType;
    private static DotNetDispatcher();
    public static string Invoke(JSRuntime jsRuntime, DotNetInvocationInfo& invocationInfo, string argsJson);
    public static void BeginInvokeDotNet(JSRuntime jsRuntime, DotNetInvocationInfo invocationInfo, string argsJson);
    private static object InvokeSynchronously(JSRuntime jsRuntime, DotNetInvocationInfo& callInfo, IDotNetObjectReference objectReference, string argsJson);
    internal static Object[] ParseArguments(JSRuntime jsRuntime, string methodIdentifier, string arguments, Type[] parameterTypes);
    public static void EndInvokeJS(JSRuntime jsRuntime, string arguments);
    private static ValueTuple`2<MethodInfo, Type[]> GetCachedMethodInfo(AssemblyKey assemblyKey, string methodIdentifier);
    private static ValueTuple`2<MethodInfo, Type[]> GetCachedMethodInfo(IDotNetObjectReference objectReference, string methodIdentifier);
    private static Dictionary`2<string, ValueTuple`2<MethodInfo, Type[]>> ScanAssemblyForCallableMethods(AssemblyKey assemblyKey);
    private static Assembly GetRequiredLoadedAssembly(AssemblyKey assemblyKey);
    [CompilerGeneratedAttribute]
internal static bool <ParseArguments>g__IsIncorrectDotNetObjectRefUse|7_0(Type parameterType, Utf8JsonReader jsonReader);
    [CompilerGeneratedAttribute]
internal static Dictionary`2<string, ValueTuple`2<MethodInfo, Type[]>> <GetCachedMethodInfo>g__ScanTypeForCallableMethods|10_0(Type type);
}
[IsReadOnlyAttribute]
public class Microsoft.JSInterop.Infrastructure.DotNetInvocationInfo : ValueType {
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private long <DotNetObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CallId>k__BackingField;
    public string AssemblyName { get; }
    public string MethodIdentifier { get; }
    public long DotNetObjectId { get; }
    public string CallId { get; }
    public DotNetInvocationInfo(string assemblyName, string methodIdentifier, long dotNetObjectId, string callId);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public string get_MethodIdentifier();
    [CompilerGeneratedAttribute]
public long get_DotNetObjectId();
    [CompilerGeneratedAttribute]
public string get_CallId();
}
[IsReadOnlyAttribute]
public class Microsoft.JSInterop.Infrastructure.DotNetInvocationResult : ValueType {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorKind>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    public Exception Exception { get; }
    public string ErrorKind { get; }
    public object Result { get; }
    public bool Success { get; }
    public DotNetInvocationResult(Exception exception, string errorKind);
    public DotNetInvocationResult(object result);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public string get_ErrorKind();
    [CompilerGeneratedAttribute]
public object get_Result();
    [CompilerGeneratedAttribute]
public bool get_Success();
}
internal class Microsoft.JSInterop.Infrastructure.DotNetObjectReferenceJsonConverter`1 : JsonConverter`1<DotNetObjectReference`1<TValue>> {
    [CompilerGeneratedAttribute]
private JSRuntime <JSRuntime>k__BackingField;
    private static JsonEncodedText DotNetObjectRefKey { get; }
    public JSRuntime JSRuntime { get; }
    public DotNetObjectReferenceJsonConverter`1(JSRuntime jsRuntime);
    private static JsonEncodedText get_DotNetObjectRefKey();
    [CompilerGeneratedAttribute]
public JSRuntime get_JSRuntime();
    public virtual DotNetObjectReference`1<TValue> Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, DotNetObjectReference`1<TValue> value, JsonSerializerOptions options);
}
internal class Microsoft.JSInterop.Infrastructure.DotNetObjectReferenceJsonConverterFactory : JsonConverterFactory {
    [CompilerGeneratedAttribute]
private JSRuntime <JSRuntime>k__BackingField;
    public JSRuntime JSRuntime { get; }
    public DotNetObjectReferenceJsonConverterFactory(JSRuntime jsRuntime);
    [CompilerGeneratedAttribute]
public JSRuntime get_JSRuntime();
    public virtual bool CanConvert(Type typeToConvert);
    public virtual JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions jsonSerializerOptions);
}
internal interface Microsoft.JSInterop.Infrastructure.IDotNetObjectReference {
    public object Value { get; }
    public abstract virtual object get_Value();
}
internal static class Microsoft.JSInterop.Infrastructure.TaskGenericsUtil : object {
    private static ConcurrentDictionary`2<Type, ITaskResultGetter> _cachedResultGetters;
    private static ConcurrentDictionary`2<Type, ITcsResultSetter> _cachedResultSetters;
    private static TaskGenericsUtil();
    public static void SetTaskCompletionSourceResult(object taskCompletionSource, object result);
    public static void SetTaskCompletionSourceException(object taskCompletionSource, Exception exception);
    public static Type GetTaskCompletionSourceResultType(object taskCompletionSource);
    public static object GetTaskResult(Task task);
    private static Type GetTaskResultType(Type taskType);
    private static ITcsResultSetter CreateResultSetter(object taskCompletionSource);
}
public class Microsoft.JSInterop.JSException : Exception {
    public JSException(string message);
    public JSException(string message, Exception innerException);
}
public abstract class Microsoft.JSInterop.JSInProcessRuntime : JSRuntime {
    public sealed virtual TValue Invoke(string identifier, Object[] args);
    protected abstract virtual string InvokeJS(string identifier, string argsJson);
}
[ExtensionAttribute]
public static class Microsoft.JSInterop.JSInProcessRuntimeExtensions : object {
    [ExtensionAttribute]
public static void InvokeVoid(IJSInProcessRuntime jsRuntime, string identifier, Object[] args);
}
[AttributeUsageAttribute("64")]
public class Microsoft.JSInterop.JSInvokableAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    public string Identifier { get; }
    public JSInvokableAttribute(string identifier);
    [CompilerGeneratedAttribute]
public string get_Identifier();
}
public abstract class Microsoft.JSInterop.JSRuntime : object {
    private long _nextObjectReferenceId;
    private long _nextPendingTaskId;
    private ConcurrentDictionary`2<long, object> _pendingTasks;
    private ConcurrentDictionary`2<long, IDotNetObjectReference> _trackedRefsById;
    private ConcurrentDictionary`2<long, CancellationTokenRegistration> _cancellationRegistrations;
    [CompilerGeneratedAttribute]
private JsonSerializerOptions <JsonSerializerOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <DefaultAsyncTimeout>k__BackingField;
    protected internal JsonSerializerOptions JsonSerializerOptions { get; }
    protected Nullable`1<TimeSpan> DefaultAsyncTimeout { get; protected set; }
    [CompilerGeneratedAttribute]
protected internal JsonSerializerOptions get_JsonSerializerOptions();
    [CompilerGeneratedAttribute]
protected Nullable`1<TimeSpan> get_DefaultAsyncTimeout();
    [CompilerGeneratedAttribute]
protected void set_DefaultAsyncTimeout(Nullable`1<TimeSpan> value);
    public sealed virtual ValueTask`1<TValue> InvokeAsync(string identifier, Object[] args);
    public sealed virtual ValueTask`1<TValue> InvokeAsync(string identifier, CancellationToken cancellationToken, Object[] args);
    private void CleanupTasksAndRegistrations(long taskId);
    [AsyncStateMachineAttribute("Microsoft.JSInterop.JSRuntime/<InvokeWithDefaultCancellation>d__16`1")]
private ValueTask`1<T> InvokeWithDefaultCancellation(string identifier, Object[] args);
    protected abstract virtual void BeginInvokeJS(long taskId, string identifier, string argsJson);
    protected internal abstract virtual void EndInvokeDotNet(DotNetInvocationInfo invocationInfo, DotNetInvocationResult& modreq(System.Runtime.InteropServices.InAttribute) invocationResult);
    internal void EndInvokeJS(long taskId, bool succeeded, Utf8JsonReader& jsonReader);
    internal long TrackObjectReference(DotNetObjectReference`1<TValue> dotNetObjectReference);
    internal IDotNetObjectReference GetObjectReference(long dotNetObjectId);
    internal void ReleaseObjectReference(long dotNetObjectId);
}
[ExtensionAttribute]
public static class Microsoft.JSInterop.JSRuntimeExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.JSInterop.JSRuntimeExtensions/<InvokeVoidAsync>d__0")]
[ExtensionAttribute]
public static ValueTask InvokeVoidAsync(IJSRuntime jsRuntime, string identifier, Object[] args);
    [ExtensionAttribute]
public static ValueTask`1<TValue> InvokeAsync(IJSRuntime jsRuntime, string identifier, Object[] args);
    [ExtensionAttribute]
public static ValueTask`1<TValue> InvokeAsync(IJSRuntime jsRuntime, string identifier, CancellationToken cancellationToken, Object[] args);
    [AsyncStateMachineAttribute("Microsoft.JSInterop.JSRuntimeExtensions/<InvokeVoidAsync>d__3")]
[ExtensionAttribute]
public static ValueTask InvokeVoidAsync(IJSRuntime jsRuntime, string identifier, CancellationToken cancellationToken, Object[] args);
    [AsyncStateMachineAttribute("Microsoft.JSInterop.JSRuntimeExtensions/<InvokeAsync>d__4`1")]
[ExtensionAttribute]
public static ValueTask`1<TValue> InvokeAsync(IJSRuntime jsRuntime, string identifier, TimeSpan timeout, Object[] args);
    [ExtensionAttribute]
[AsyncStateMachineAttribute("Microsoft.JSInterop.JSRuntimeExtensions/<InvokeVoidAsync>d__5")]
public static ValueTask InvokeVoidAsync(IJSRuntime jsRuntime, string identifier, TimeSpan timeout, Object[] args);
}
