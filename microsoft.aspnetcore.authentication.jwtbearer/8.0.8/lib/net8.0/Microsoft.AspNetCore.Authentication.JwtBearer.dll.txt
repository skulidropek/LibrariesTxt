internal static class Microsoft.AspNetCore.Authentication.JwtBearer.AuthenticateResults : object {
    internal static AuthenticateResult ValidatorNotFound;
    internal static AuthenticateResult TokenHandlerUnableToValidate;
    private static AuthenticateResults();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Authentication.JwtBearer.AuthenticationFailedContext : ResultContext`1<JwtBearerOptions> {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; public set; }
    public AuthenticationFailedContext(HttpContext context, AuthenticationScheme scheme, JwtBearerOptions options);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Authentication.JwtBearer.ForbiddenContext : ResultContext`1<JwtBearerOptions> {
    public ForbiddenContext(HttpContext context, AuthenticationScheme scheme, JwtBearerOptions options);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerChallengeContext : PropertiesContext`1<JwtBearerOptions> {
    [CompilerGeneratedAttribute]
private Exception <AuthenticateFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorUri>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public Exception AuthenticateFailure { get; public set; }
    public string Error { get; public set; }
    public string ErrorDescription { get; public set; }
    public string ErrorUri { get; public set; }
    public bool Handled { get; private set; }
    [NullableContextAttribute("1")]
public JwtBearerChallengeContext(HttpContext context, AuthenticationScheme scheme, JwtBearerOptions options, AuthenticationProperties properties);
    [CompilerGeneratedAttribute]
public Exception get_AuthenticateFailure();
    [CompilerGeneratedAttribute]
public void set_AuthenticateFailure(Exception value);
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorDescription();
    [CompilerGeneratedAttribute]
public void set_ErrorDescription(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorUri();
    [CompilerGeneratedAttribute]
public void set_ErrorUri(string value);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
private void set_Handled(bool value);
    public void HandleResponse();
}
public static class Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults : object {
    [NullableAttribute("1")]
public static string AuthenticationScheme;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerEvents : object {
    [CompilerGeneratedAttribute]
private Func`2<AuthenticationFailedContext, Task> <OnAuthenticationFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<ForbiddenContext, Task> <OnForbidden>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<MessageReceivedContext, Task> <OnMessageReceived>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<TokenValidatedContext, Task> <OnTokenValidated>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<JwtBearerChallengeContext, Task> <OnChallenge>k__BackingField;
    public Func`2<AuthenticationFailedContext, Task> OnAuthenticationFailed { get; public set; }
    public Func`2<ForbiddenContext, Task> OnForbidden { get; public set; }
    public Func`2<MessageReceivedContext, Task> OnMessageReceived { get; public set; }
    public Func`2<TokenValidatedContext, Task> OnTokenValidated { get; public set; }
    public Func`2<JwtBearerChallengeContext, Task> OnChallenge { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<AuthenticationFailedContext, Task> get_OnAuthenticationFailed();
    [CompilerGeneratedAttribute]
public void set_OnAuthenticationFailed(Func`2<AuthenticationFailedContext, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<ForbiddenContext, Task> get_OnForbidden();
    [CompilerGeneratedAttribute]
public void set_OnForbidden(Func`2<ForbiddenContext, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<MessageReceivedContext, Task> get_OnMessageReceived();
    [CompilerGeneratedAttribute]
public void set_OnMessageReceived(Func`2<MessageReceivedContext, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<TokenValidatedContext, Task> get_OnTokenValidated();
    [CompilerGeneratedAttribute]
public void set_OnTokenValidated(Func`2<TokenValidatedContext, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<JwtBearerChallengeContext, Task> get_OnChallenge();
    [CompilerGeneratedAttribute]
public void set_OnChallenge(Func`2<JwtBearerChallengeContext, Task> value);
    public virtual Task AuthenticationFailed(AuthenticationFailedContext context);
    public virtual Task Forbidden(ForbiddenContext context);
    public virtual Task MessageReceived(MessageReceivedContext context);
    public virtual Task TokenValidated(TokenValidatedContext context);
    public virtual Task Challenge(JwtBearerChallengeContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler : AuthenticationHandler`1<JwtBearerOptions> {
    protected JwtBearerEvents Events { get; protected set; }
    [ObsoleteAttribute("ISystemClock is obsolete, use TimeProvider on AuthenticationSchemeOptions instead.")]
public JwtBearerHandler(IOptionsMonitor`1<JwtBearerOptions> options, ILoggerFactory logger, UrlEncoder encoder, ISystemClock clock);
    public JwtBearerHandler(IOptionsMonitor`1<JwtBearerOptions> options, ILoggerFactory logger, UrlEncoder encoder);
    protected JwtBearerEvents get_Events();
    protected void set_Events(JwtBearerEvents value);
    protected virtual Task`1<object> CreateEventsAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler/<HandleAuthenticateAsync>d__6")]
protected virtual Task`1<AuthenticateResult> HandleAuthenticateAsync();
    private void RecordTokenValidationError(Exception exception, List`1<Exception> exceptions);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler/<SetupTokenValidationParametersAsync>d__8")]
private Task`1<TokenValidationParameters> SetupTokenValidationParametersAsync();
    private static Nullable`1<DateTime> GetSafeDateTime(DateTime dateTime);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler/<HandleChallengeAsync>d__10")]
protected virtual Task HandleChallengeAsync(AuthenticationProperties properties);
    protected virtual Task HandleForbiddenAsync(AuthenticationProperties properties);
    private static string CreateErrorDescription(Exception authFailure);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions : AuthenticationSchemeOptions {
    private JwtSecurityTokenHandler _defaultHandler;
    private JsonWebTokenHandler _defaultTokenHandler;
    private bool _mapInboundClaims;
    [CompilerGeneratedAttribute]
private bool <RequireHttpsMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MetadataAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Authority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Audience>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Challenge>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMessageHandler <BackchannelHttpHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpClient <Backchannel>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <BackchannelTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private OpenIdConnectConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfigurationManager`1<OpenIdConnectConfiguration> <ConfigurationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RefreshOnIssuerKeyNotFound>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ISecurityTokenValidator> <SecurityTokenValidators>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TokenHandler> <TokenHandlers>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenValidationParameters <TokenValidationParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaveToken>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeErrorDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <AutomaticRefreshInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RefreshInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSecurityTokenValidators>k__BackingField;
    public bool RequireHttpsMetadata { get; public set; }
    public string MetadataAddress { get; public set; }
    [NullableAttribute("2")]
public string Authority { get; public set; }
    [NullableAttribute("2")]
public string Audience { get; public set; }
    public string Challenge { get; public set; }
    public JwtBearerEvents Events { get; public set; }
    [NullableAttribute("2")]
public HttpMessageHandler BackchannelHttpHandler { get; public set; }
    public HttpClient Backchannel { get; public set; }
    public TimeSpan BackchannelTimeout { get; public set; }
    [NullableAttribute("2")]
public OpenIdConnectConfiguration Configuration { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IConfigurationManager`1<OpenIdConnectConfiguration> ConfigurationManager { get; public set; }
    public bool RefreshOnIssuerKeyNotFound { get; public set; }
    [ObsoleteAttribute("SecurityTokenValidators is no longer used by default. Use TokenHandlers instead. To continue using SecurityTokenValidators, set UseSecurityTokenValidators to true. See https://aka.ms/aspnetcore8/security-token-changes")]
public IList`1<ISecurityTokenValidator> SecurityTokenValidators { get; private set; }
    public IList`1<TokenHandler> TokenHandlers { get; private set; }
    public TokenValidationParameters TokenValidationParameters { get; public set; }
    public bool SaveToken { get; public set; }
    public bool IncludeErrorDetails { get; public set; }
    public bool MapInboundClaims { get; public set; }
    public TimeSpan AutomaticRefreshInterval { get; public set; }
    public TimeSpan RefreshInterval { get; public set; }
    public bool UseSecurityTokenValidators { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RequireHttpsMetadata();
    [CompilerGeneratedAttribute]
public void set_RequireHttpsMetadata(bool value);
    [CompilerGeneratedAttribute]
public string get_MetadataAddress();
    [CompilerGeneratedAttribute]
public void set_MetadataAddress(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Authority();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Authority(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Audience();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Audience(string value);
    [CompilerGeneratedAttribute]
public string get_Challenge();
    [CompilerGeneratedAttribute]
public void set_Challenge(string value);
    public JwtBearerEvents get_Events();
    public void set_Events(JwtBearerEvents value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public HttpMessageHandler get_BackchannelHttpHandler();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_BackchannelHttpHandler(HttpMessageHandler value);
    [CompilerGeneratedAttribute]
public HttpClient get_Backchannel();
    [CompilerGeneratedAttribute]
public void set_Backchannel(HttpClient value);
    [CompilerGeneratedAttribute]
public TimeSpan get_BackchannelTimeout();
    [CompilerGeneratedAttribute]
public void set_BackchannelTimeout(TimeSpan value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public OpenIdConnectConfiguration get_Configuration();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Configuration(OpenIdConnectConfiguration value);
    [CompilerGeneratedAttribute]
public IConfigurationManager`1<OpenIdConnectConfiguration> get_ConfigurationManager();
    [CompilerGeneratedAttribute]
public void set_ConfigurationManager(IConfigurationManager`1<OpenIdConnectConfiguration> value);
    [CompilerGeneratedAttribute]
public bool get_RefreshOnIssuerKeyNotFound();
    [CompilerGeneratedAttribute]
public void set_RefreshOnIssuerKeyNotFound(bool value);
    [CompilerGeneratedAttribute]
public IList`1<ISecurityTokenValidator> get_SecurityTokenValidators();
    [CompilerGeneratedAttribute]
private void set_SecurityTokenValidators(IList`1<ISecurityTokenValidator> value);
    [CompilerGeneratedAttribute]
public IList`1<TokenHandler> get_TokenHandlers();
    [CompilerGeneratedAttribute]
private void set_TokenHandlers(IList`1<TokenHandler> value);
    [CompilerGeneratedAttribute]
public TokenValidationParameters get_TokenValidationParameters();
    [CompilerGeneratedAttribute]
public void set_TokenValidationParameters(TokenValidationParameters value);
    [CompilerGeneratedAttribute]
public bool get_SaveToken();
    [CompilerGeneratedAttribute]
public void set_SaveToken(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeErrorDetails();
    [CompilerGeneratedAttribute]
public void set_IncludeErrorDetails(bool value);
    public bool get_MapInboundClaims();
    public void set_MapInboundClaims(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_AutomaticRefreshInterval();
    [CompilerGeneratedAttribute]
public void set_AutomaticRefreshInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_RefreshInterval();
    [CompilerGeneratedAttribute]
public void set_RefreshInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_UseSecurityTokenValidators();
    [CompilerGeneratedAttribute]
public void set_UseSecurityTokenValidators(bool value);
}
public class Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerPostConfigureOptions : object {
    [NullableContextAttribute("1")]
public sealed virtual void PostConfigure(string name, JwtBearerOptions options);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Authentication.JwtBearer.MessageReceivedContext : ResultContext`1<JwtBearerOptions> {
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    public string Token { get; public set; }
    [NullableContextAttribute("1")]
public MessageReceivedContext(HttpContext context, AuthenticationScheme scheme, JwtBearerOptions options);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
}
internal static class Microsoft.AspNetCore.Authentication.JwtBearer.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string Exception_OptionMustBeProvided { get; }
    internal static string Exception_ValidatorHandlerMismatch { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_Exception_OptionMustBeProvided();
    internal static string FormatException_OptionMustBeProvided(object p0);
    internal static string get_Exception_ValidatorHandlerMismatch();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Authentication.JwtBearer.TokenValidatedContext : ResultContext`1<JwtBearerOptions> {
    [CompilerGeneratedAttribute]
private SecurityToken <SecurityToken>k__BackingField;
    public SecurityToken SecurityToken { get; public set; }
    public TokenValidatedContext(HttpContext context, AuthenticationScheme scheme, JwtBearerOptions options);
    [CompilerGeneratedAttribute]
public SecurityToken get_SecurityToken();
    [CompilerGeneratedAttribute]
public void set_SecurityToken(SecurityToken value);
}
internal class Microsoft.AspNetCore.Authentication.JwtBearerConfigureOptions : object {
    private IAuthenticationConfigurationProvider _authenticationConfigurationProvider;
    private static Func`2<string, TimeSpan> _invariantTimeSpanParse;
    public JwtBearerConfigureOptions(IAuthenticationConfigurationProvider configurationProvider);
    private static JwtBearerConfigureOptions();
    public sealed virtual void Configure(string name, JwtBearerOptions options);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Authentication.JwtBearerConfigureOptions/<GetIssuerSigningKeys>d__4")]
private static IEnumerable`1<SecurityKey> GetIssuerSigningKeys(IConfiguration configuration, List`1<string> issuers);
    public sealed virtual void Configure(JwtBearerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.JwtBearerExtensions : object {
    [ExtensionAttribute]
public static AuthenticationBuilder AddJwtBearer(AuthenticationBuilder builder);
    [ExtensionAttribute]
public static AuthenticationBuilder AddJwtBearer(AuthenticationBuilder builder, string authenticationScheme);
    [ExtensionAttribute]
public static AuthenticationBuilder AddJwtBearer(AuthenticationBuilder builder, Action`1<JwtBearerOptions> configureOptions);
    [ExtensionAttribute]
public static AuthenticationBuilder AddJwtBearer(AuthenticationBuilder builder, string authenticationScheme, Action`1<JwtBearerOptions> configureOptions);
    [ExtensionAttribute]
public static AuthenticationBuilder AddJwtBearer(AuthenticationBuilder builder, string authenticationScheme, string displayName, Action`1<JwtBearerOptions> configureOptions);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.Logging.LoggingExtensions : object {
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`2<ILogger, Exception> __TokenValidationFailedCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`2<ILogger, Exception> __TokenValidationSucceededCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`2<ILogger, Exception> __ErrorProcessingMessageCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`2<ILogger, Exception> __ForbiddenResponseHasStartedCallback;
    private static LoggingExtensions();
    [ExtensionAttribute]
[LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void TokenValidationFailed(ILogger logger, Exception ex);
    [ExtensionAttribute]
[LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void TokenValidationSucceeded(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void ErrorProcessingMessage(ILogger logger, Exception ex);
    [ExtensionAttribute]
[LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void ForbiddenResponseHasStarted(ILogger logger);
}
internal static class System.StringHelpers : object {
    public static T ParseValueOrDefault(string stringValue, Func`2<string, T> parser, T defaultValue);
}
