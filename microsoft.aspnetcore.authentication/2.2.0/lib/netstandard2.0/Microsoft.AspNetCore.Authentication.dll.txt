public class Microsoft.AspNetCore.Authentication.AuthenticationBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public IServiceCollection Services { get; }
    public AuthenticationBuilder(IServiceCollection services);
    [CompilerGeneratedAttribute]
public virtual IServiceCollection get_Services();
    private AuthenticationBuilder AddSchemeHelper(string authenticationScheme, string displayName, Action`1<TOptions> configureOptions);
    public virtual AuthenticationBuilder AddScheme(string authenticationScheme, string displayName, Action`1<TOptions> configureOptions);
    public virtual AuthenticationBuilder AddScheme(string authenticationScheme, Action`1<TOptions> configureOptions);
    public virtual AuthenticationBuilder AddRemoteScheme(string authenticationScheme, string displayName, Action`1<TOptions> configureOptions);
    public virtual AuthenticationBuilder AddPolicyScheme(string authenticationScheme, string displayName, Action`1<PolicySchemeOptions> configureOptions);
}
public abstract class Microsoft.AspNetCore.Authentication.AuthenticationHandler`1 : object {
    private Task`1<AuthenticateResult> _authenticateTask;
    [CompilerGeneratedAttribute]
private AuthenticationScheme <Scheme>k__BackingField;
    [CompilerGeneratedAttribute]
private TOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private UrlEncoder <UrlEncoder>k__BackingField;
    [CompilerGeneratedAttribute]
private ISystemClock <Clock>k__BackingField;
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<TOptions> <OptionsMonitor>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Events>k__BackingField;
    public AuthenticationScheme Scheme { get; private set; }
    public TOptions Options { get; private set; }
    protected HttpContext Context { get; private set; }
    protected HttpRequest Request { get; }
    protected HttpResponse Response { get; }
    protected PathString OriginalPath { get; }
    protected PathString OriginalPathBase { get; }
    protected ILogger Logger { get; }
    protected UrlEncoder UrlEncoder { get; }
    protected ISystemClock Clock { get; }
    protected IOptionsMonitor`1<TOptions> OptionsMonitor { get; }
    protected object Events { get; protected set; }
    protected string ClaimsIssuer { get; }
    protected string CurrentUri { get; }
    protected AuthenticationHandler`1(IOptionsMonitor`1<TOptions> options, ILoggerFactory logger, UrlEncoder encoder, ISystemClock clock);
    [CompilerGeneratedAttribute]
public AuthenticationScheme get_Scheme();
    [CompilerGeneratedAttribute]
private void set_Scheme(AuthenticationScheme value);
    [CompilerGeneratedAttribute]
public TOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(TOptions value);
    [CompilerGeneratedAttribute]
protected HttpContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(HttpContext value);
    protected HttpRequest get_Request();
    protected HttpResponse get_Response();
    protected PathString get_OriginalPath();
    protected PathString get_OriginalPathBase();
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected UrlEncoder get_UrlEncoder();
    [CompilerGeneratedAttribute]
protected ISystemClock get_Clock();
    [CompilerGeneratedAttribute]
protected IOptionsMonitor`1<TOptions> get_OptionsMonitor();
    [CompilerGeneratedAttribute]
protected virtual object get_Events();
    [CompilerGeneratedAttribute]
protected virtual void set_Events(object value);
    protected virtual string get_ClaimsIssuer();
    protected string get_CurrentUri();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.AuthenticationHandler`1/<InitializeAsync>d__42")]
public sealed virtual Task InitializeAsync(AuthenticationScheme scheme, HttpContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.AuthenticationHandler`1/<InitializeEventsAsync>d__43")]
protected virtual Task InitializeEventsAsync();
    protected virtual Task`1<object> CreateEventsAsync();
    protected virtual Task InitializeHandlerAsync();
    protected string BuildRedirectUri(string targetPath);
    protected virtual string ResolveTarget(string scheme);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.AuthenticationHandler`1/<AuthenticateAsync>d__48")]
public sealed virtual Task`1<AuthenticateResult> AuthenticateAsync();
    protected Task`1<AuthenticateResult> HandleAuthenticateOnceAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.AuthenticationHandler`1/<HandleAuthenticateOnceSafeAsync>d__50")]
protected Task`1<AuthenticateResult> HandleAuthenticateOnceSafeAsync();
    protected abstract virtual Task`1<AuthenticateResult> HandleAuthenticateAsync();
    protected virtual Task HandleForbiddenAsync(AuthenticationProperties properties);
    protected virtual Task HandleChallengeAsync(AuthenticationProperties properties);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.AuthenticationHandler`1/<ChallengeAsync>d__54")]
public sealed virtual Task ChallengeAsync(AuthenticationProperties properties);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.AuthenticationHandler`1/<ForbidAsync>d__55")]
public sealed virtual Task ForbidAsync(AuthenticationProperties properties);
}
public class Microsoft.AspNetCore.Authentication.AuthenticationMiddleware : object {
    private RequestDelegate _next;
    [CompilerGeneratedAttribute]
private IAuthenticationSchemeProvider <Schemes>k__BackingField;
    public IAuthenticationSchemeProvider Schemes { get; public set; }
    public AuthenticationMiddleware(RequestDelegate next, IAuthenticationSchemeProvider schemes);
    [CompilerGeneratedAttribute]
public IAuthenticationSchemeProvider get_Schemes();
    [CompilerGeneratedAttribute]
public void set_Schemes(IAuthenticationSchemeProvider value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.AuthenticationMiddleware/<Invoke>d__6")]
public Task Invoke(HttpContext context);
}
public class Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions : object {
    [CompilerGeneratedAttribute]
private string <ClaimsIssuer>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <EventsType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForwardDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForwardAuthenticate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForwardChallenge>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForwardForbid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForwardSignIn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForwardSignOut>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<HttpContext, string> <ForwardDefaultSelector>k__BackingField;
    public string ClaimsIssuer { get; public set; }
    public object Events { get; public set; }
    public Type EventsType { get; public set; }
    public string ForwardDefault { get; public set; }
    public string ForwardAuthenticate { get; public set; }
    public string ForwardChallenge { get; public set; }
    public string ForwardForbid { get; public set; }
    public string ForwardSignIn { get; public set; }
    public string ForwardSignOut { get; public set; }
    public Func`2<HttpContext, string> ForwardDefaultSelector { get; public set; }
    public virtual void Validate();
    public virtual void Validate(string scheme);
    [CompilerGeneratedAttribute]
public string get_ClaimsIssuer();
    [CompilerGeneratedAttribute]
public void set_ClaimsIssuer(string value);
    [CompilerGeneratedAttribute]
public object get_Events();
    [CompilerGeneratedAttribute]
public void set_Events(object value);
    [CompilerGeneratedAttribute]
public Type get_EventsType();
    [CompilerGeneratedAttribute]
public void set_EventsType(Type value);
    [CompilerGeneratedAttribute]
public string get_ForwardDefault();
    [CompilerGeneratedAttribute]
public void set_ForwardDefault(string value);
    [CompilerGeneratedAttribute]
public string get_ForwardAuthenticate();
    [CompilerGeneratedAttribute]
public void set_ForwardAuthenticate(string value);
    [CompilerGeneratedAttribute]
public string get_ForwardChallenge();
    [CompilerGeneratedAttribute]
public void set_ForwardChallenge(string value);
    [CompilerGeneratedAttribute]
public string get_ForwardForbid();
    [CompilerGeneratedAttribute]
public void set_ForwardForbid(string value);
    [CompilerGeneratedAttribute]
public string get_ForwardSignIn();
    [CompilerGeneratedAttribute]
public void set_ForwardSignIn(string value);
    [CompilerGeneratedAttribute]
public string get_ForwardSignOut();
    [CompilerGeneratedAttribute]
public void set_ForwardSignOut(string value);
    [CompilerGeneratedAttribute]
public Func`2<HttpContext, string> get_ForwardDefaultSelector();
    [CompilerGeneratedAttribute]
public void set_ForwardDefaultSelector(Func`2<HttpContext, string> value);
}
public static class Microsoft.AspNetCore.Authentication.Base64UrlTextEncoder : object {
    public static string Encode(Byte[] data);
    public static Byte[] Decode(string text);
}
public abstract class Microsoft.AspNetCore.Authentication.BaseContext`1 : object {
    [CompilerGeneratedAttribute]
private AuthenticationScheme <Scheme>k__BackingField;
    [CompilerGeneratedAttribute]
private TOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpContext <HttpContext>k__BackingField;
    public AuthenticationScheme Scheme { get; }
    public TOptions Options { get; }
    public HttpContext HttpContext { get; }
    public HttpRequest Request { get; }
    public HttpResponse Response { get; }
    protected BaseContext`1(HttpContext context, AuthenticationScheme scheme, TOptions options);
    [CompilerGeneratedAttribute]
public AuthenticationScheme get_Scheme();
    [CompilerGeneratedAttribute]
public TOptions get_Options();
    [CompilerGeneratedAttribute]
public HttpContext get_HttpContext();
    public HttpRequest get_Request();
    public HttpResponse get_Response();
}
public class Microsoft.AspNetCore.Authentication.HandleRequestContext`1 : BaseContext`1<TOptions> {
    [CompilerGeneratedAttribute]
private HandleRequestResult <Result>k__BackingField;
    public HandleRequestResult Result { get; protected set; }
    protected HandleRequestContext`1(HttpContext context, AuthenticationScheme scheme, TOptions options);
    [CompilerGeneratedAttribute]
public HandleRequestResult get_Result();
    [CompilerGeneratedAttribute]
protected void set_Result(HandleRequestResult value);
    public void HandleResponse();
    public void SkipHandler();
}
public class Microsoft.AspNetCore.Authentication.HandleRequestResult : AuthenticateResult {
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Skipped>k__BackingField;
    public bool Handled { get; private set; }
    public bool Skipped { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
private void set_Handled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Skipped();
    [CompilerGeneratedAttribute]
private void set_Skipped(bool value);
    public static HandleRequestResult Success(AuthenticationTicket ticket);
    public static HandleRequestResult Fail(Exception failure);
    public static HandleRequestResult Fail(Exception failure, AuthenticationProperties properties);
    public static HandleRequestResult Fail(string failureMessage);
    public static HandleRequestResult Fail(string failureMessage, AuthenticationProperties properties);
    public static HandleRequestResult Handle();
    public static HandleRequestResult SkipHandler();
}
public interface Microsoft.AspNetCore.Authentication.IDataSerializer`1 {
    public abstract virtual Byte[] Serialize(TModel model);
    public abstract virtual TModel Deserialize(Byte[] data);
}
public class Microsoft.AspNetCore.Authentication.Internal.RequestPathBaseCookieBuilder : CookieBuilder {
    [CompilerGeneratedAttribute]
private string <AdditionalPath>k__BackingField;
    protected string AdditionalPath { get; }
    [CompilerGeneratedAttribute]
protected virtual string get_AdditionalPath();
    public virtual CookieOptions Build(HttpContext context, DateTimeOffset expiresFrom);
}
public interface Microsoft.AspNetCore.Authentication.ISecureDataFormat`1 {
    public abstract virtual string Protect(TData data);
    public abstract virtual string Protect(TData data, string purpose);
    public abstract virtual TData Unprotect(string protectedText);
    public abstract virtual TData Unprotect(string protectedText, string purpose);
}
public interface Microsoft.AspNetCore.Authentication.ISystemClock {
    public DateTimeOffset UtcNow { get; }
    public abstract virtual DateTimeOffset get_UtcNow();
}
public class Microsoft.AspNetCore.Authentication.PolicySchemeHandler : SignInAuthenticationHandler`1<PolicySchemeOptions> {
    public PolicySchemeHandler(IOptionsMonitor`1<PolicySchemeOptions> options, ILoggerFactory logger, UrlEncoder encoder, ISystemClock clock);
    protected virtual Task HandleChallengeAsync(AuthenticationProperties properties);
    protected virtual Task HandleForbiddenAsync(AuthenticationProperties properties);
    protected virtual Task HandleSignInAsync(ClaimsPrincipal user, AuthenticationProperties properties);
    protected virtual Task HandleSignOutAsync(AuthenticationProperties properties);
    protected virtual Task`1<AuthenticateResult> HandleAuthenticateAsync();
}
public class Microsoft.AspNetCore.Authentication.PolicySchemeOptions : AuthenticationSchemeOptions {
}
public abstract class Microsoft.AspNetCore.Authentication.PrincipalContext`1 : PropertiesContext`1<TOptions> {
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <Principal>k__BackingField;
    public ClaimsPrincipal Principal { get; public set; }
    protected PrincipalContext`1(HttpContext context, AuthenticationScheme scheme, TOptions options, AuthenticationProperties properties);
    [CompilerGeneratedAttribute]
public virtual ClaimsPrincipal get_Principal();
    [CompilerGeneratedAttribute]
public virtual void set_Principal(ClaimsPrincipal value);
}
public abstract class Microsoft.AspNetCore.Authentication.PropertiesContext`1 : BaseContext`1<TOptions> {
    [CompilerGeneratedAttribute]
private AuthenticationProperties <Properties>k__BackingField;
    public AuthenticationProperties Properties { get; protected set; }
    protected PropertiesContext`1(HttpContext context, AuthenticationScheme scheme, TOptions options, AuthenticationProperties properties);
    [CompilerGeneratedAttribute]
public virtual AuthenticationProperties get_Properties();
    [CompilerGeneratedAttribute]
protected virtual void set_Properties(AuthenticationProperties value);
}
public class Microsoft.AspNetCore.Authentication.PropertiesDataFormat : SecureDataFormat`1<AuthenticationProperties> {
    public PropertiesDataFormat(IDataProtector protector);
}
public class Microsoft.AspNetCore.Authentication.PropertiesSerializer : object {
    private static int FormatVersion;
    [CompilerGeneratedAttribute]
private static PropertiesSerializer <Default>k__BackingField;
    public static PropertiesSerializer Default { get; }
    private static PropertiesSerializer();
    [CompilerGeneratedAttribute]
public static PropertiesSerializer get_Default();
    public virtual Byte[] Serialize(AuthenticationProperties model);
    public virtual AuthenticationProperties Deserialize(Byte[] data);
    public virtual void Write(BinaryWriter writer, AuthenticationProperties properties);
    public virtual AuthenticationProperties Read(BinaryReader reader);
}
public class Microsoft.AspNetCore.Authentication.RedirectContext`1 : PropertiesContext`1<TOptions> {
    [CompilerGeneratedAttribute]
private string <RedirectUri>k__BackingField;
    public string RedirectUri { get; public set; }
    public RedirectContext`1(HttpContext context, AuthenticationScheme scheme, TOptions options, AuthenticationProperties properties, string redirectUri);
    [CompilerGeneratedAttribute]
public string get_RedirectUri();
    [CompilerGeneratedAttribute]
public void set_RedirectUri(string value);
}
public abstract class Microsoft.AspNetCore.Authentication.RemoteAuthenticationContext`1 : HandleRequestContext`1<TOptions> {
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <Principal>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationProperties <Properties>k__BackingField;
    public ClaimsPrincipal Principal { get; public set; }
    public AuthenticationProperties Properties { get; public set; }
    protected RemoteAuthenticationContext`1(HttpContext context, AuthenticationScheme scheme, TOptions options, AuthenticationProperties properties);
    [CompilerGeneratedAttribute]
public ClaimsPrincipal get_Principal();
    [CompilerGeneratedAttribute]
public void set_Principal(ClaimsPrincipal value);
    [CompilerGeneratedAttribute]
public virtual AuthenticationProperties get_Properties();
    [CompilerGeneratedAttribute]
public virtual void set_Properties(AuthenticationProperties value);
    public void Success();
    public void Fail(Exception failure);
    public void Fail(string failureMessage);
}
public class Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents : object {
    [CompilerGeneratedAttribute]
private Func`2<RemoteFailureContext, Task> <OnRemoteFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<TicketReceivedContext, Task> <OnTicketReceived>k__BackingField;
    public Func`2<RemoteFailureContext, Task> OnRemoteFailure { get; public set; }
    public Func`2<TicketReceivedContext, Task> OnTicketReceived { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<RemoteFailureContext, Task> get_OnRemoteFailure();
    [CompilerGeneratedAttribute]
public void set_OnRemoteFailure(Func`2<RemoteFailureContext, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<TicketReceivedContext, Task> get_OnTicketReceived();
    [CompilerGeneratedAttribute]
public void set_OnTicketReceived(Func`2<TicketReceivedContext, Task> value);
    public virtual Task RemoteFailure(RemoteFailureContext context);
    public virtual Task TicketReceived(TicketReceivedContext context);
}
public abstract class Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler`1 : AuthenticationHandler`1<TOptions> {
    private static string CorrelationProperty;
    private static string CorrelationMarker;
    private static string AuthSchemeKey;
    private static RandomNumberGenerator CryptoRandom;
    protected string SignInScheme { get; }
    protected RemoteAuthenticationEvents Events { get; protected set; }
    protected RemoteAuthenticationHandler`1(IOptionsMonitor`1<TOptions> options, ILoggerFactory logger, UrlEncoder encoder, ISystemClock clock);
    private static RemoteAuthenticationHandler`1();
    protected string get_SignInScheme();
    protected RemoteAuthenticationEvents get_Events();
    protected void set_Events(RemoteAuthenticationEvents value);
    protected virtual Task`1<object> CreateEventsAsync();
    public virtual Task`1<bool> ShouldHandleRequestAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler`1/<HandleRequestAsync>d__12")]
public virtual Task`1<bool> HandleRequestAsync();
    protected abstract virtual Task`1<HandleRequestResult> HandleRemoteAuthenticateAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler`1/<HandleAuthenticateAsync>d__14")]
protected virtual Task`1<AuthenticateResult> HandleAuthenticateAsync();
    protected virtual Task HandleForbiddenAsync(AuthenticationProperties properties);
    protected virtual void GenerateCorrelationId(AuthenticationProperties properties);
    protected virtual bool ValidateCorrelationId(AuthenticationProperties properties);
}
public class Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions : AuthenticationSchemeOptions {
    private static string CorrelationPrefix;
    private CookieBuilder _correlationCookieBuilder;
    [CompilerGeneratedAttribute]
private TimeSpan <BackchannelTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMessageHandler <BackchannelHttpHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpClient <Backchannel>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProtectionProvider <DataProtectionProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private PathString <CallbackPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SignInScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RemoteAuthenticationTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaveTokens>k__BackingField;
    public TimeSpan BackchannelTimeout { get; public set; }
    public HttpMessageHandler BackchannelHttpHandler { get; public set; }
    public HttpClient Backchannel { get; public set; }
    public IDataProtectionProvider DataProtectionProvider { get; public set; }
    public PathString CallbackPath { get; public set; }
    public string SignInScheme { get; public set; }
    public TimeSpan RemoteAuthenticationTimeout { get; public set; }
    public RemoteAuthenticationEvents Events { get; public set; }
    public bool SaveTokens { get; public set; }
    public CookieBuilder CorrelationCookie { get; public set; }
    public virtual void Validate(string scheme);
    public virtual void Validate();
    [CompilerGeneratedAttribute]
public TimeSpan get_BackchannelTimeout();
    [CompilerGeneratedAttribute]
public void set_BackchannelTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public HttpMessageHandler get_BackchannelHttpHandler();
    [CompilerGeneratedAttribute]
public void set_BackchannelHttpHandler(HttpMessageHandler value);
    [CompilerGeneratedAttribute]
public HttpClient get_Backchannel();
    [CompilerGeneratedAttribute]
public void set_Backchannel(HttpClient value);
    [CompilerGeneratedAttribute]
public IDataProtectionProvider get_DataProtectionProvider();
    [CompilerGeneratedAttribute]
public void set_DataProtectionProvider(IDataProtectionProvider value);
    [CompilerGeneratedAttribute]
public PathString get_CallbackPath();
    [CompilerGeneratedAttribute]
public void set_CallbackPath(PathString value);
    [CompilerGeneratedAttribute]
public string get_SignInScheme();
    [CompilerGeneratedAttribute]
public void set_SignInScheme(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_RemoteAuthenticationTimeout();
    [CompilerGeneratedAttribute]
public void set_RemoteAuthenticationTimeout(TimeSpan value);
    public RemoteAuthenticationEvents get_Events();
    public void set_Events(RemoteAuthenticationEvents value);
    [CompilerGeneratedAttribute]
public bool get_SaveTokens();
    [CompilerGeneratedAttribute]
public void set_SaveTokens(bool value);
    public CookieBuilder get_CorrelationCookie();
    public void set_CorrelationCookie(CookieBuilder value);
}
public class Microsoft.AspNetCore.Authentication.RemoteFailureContext : HandleRequestContext`1<RemoteAuthenticationOptions> {
    [CompilerGeneratedAttribute]
private Exception <Failure>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationProperties <Properties>k__BackingField;
    public Exception Failure { get; public set; }
    public AuthenticationProperties Properties { get; public set; }
    public RemoteFailureContext(HttpContext context, AuthenticationScheme scheme, RemoteAuthenticationOptions options, Exception failure);
    [CompilerGeneratedAttribute]
public Exception get_Failure();
    [CompilerGeneratedAttribute]
public void set_Failure(Exception value);
    [CompilerGeneratedAttribute]
public AuthenticationProperties get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(AuthenticationProperties value);
}
internal static class Microsoft.AspNetCore.Authentication.Resources : object {
    private static ResourceManager _resourceManager;
    internal static string Exception_DefaultDpapiRequiresAppNameKey { get; }
    internal static string Exception_UnhookAuthenticationStateType { get; }
    internal static string Exception_AuthenticationTokenDoesNotProvideSyncMethods { get; }
    internal static string Exception_OptionMustBeProvided { get; }
    internal static string Exception_RemoteSignInSchemeCannotBeSelf { get; }
    private static Resources();
    internal static string get_Exception_DefaultDpapiRequiresAppNameKey();
    internal static string FormatException_DefaultDpapiRequiresAppNameKey();
    internal static string get_Exception_UnhookAuthenticationStateType();
    internal static string FormatException_UnhookAuthenticationStateType();
    internal static string get_Exception_AuthenticationTokenDoesNotProvideSyncMethods();
    internal static string FormatException_AuthenticationTokenDoesNotProvideSyncMethods();
    internal static string get_Exception_OptionMustBeProvided();
    internal static string FormatException_OptionMustBeProvided(object p0);
    internal static string get_Exception_RemoteSignInSchemeCannotBeSelf();
    internal static string FormatException_RemoteSignInSchemeCannotBeSelf();
    private static string GetString(string name, String[] formatterNames);
}
public abstract class Microsoft.AspNetCore.Authentication.ResultContext`1 : BaseContext`1<TOptions> {
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <Principal>k__BackingField;
    private AuthenticationProperties _properties;
    [CompilerGeneratedAttribute]
private AuthenticateResult <Result>k__BackingField;
    public ClaimsPrincipal Principal { get; public set; }
    public AuthenticationProperties Properties { get; public set; }
    public AuthenticateResult Result { get; private set; }
    protected ResultContext`1(HttpContext context, AuthenticationScheme scheme, TOptions options);
    [CompilerGeneratedAttribute]
public ClaimsPrincipal get_Principal();
    [CompilerGeneratedAttribute]
public void set_Principal(ClaimsPrincipal value);
    public AuthenticationProperties get_Properties();
    public void set_Properties(AuthenticationProperties value);
    [CompilerGeneratedAttribute]
public AuthenticateResult get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(AuthenticateResult value);
    public void Success();
    public void NoResult();
    public void Fail(Exception failure);
    public void Fail(string failureMessage);
}
public class Microsoft.AspNetCore.Authentication.SecureDataFormat`1 : object {
    private IDataSerializer`1<TData> _serializer;
    private IDataProtector _protector;
    public SecureDataFormat`1(IDataSerializer`1<TData> serializer, IDataProtector protector);
    public sealed virtual string Protect(TData data);
    public sealed virtual string Protect(TData data, string purpose);
    public sealed virtual TData Unprotect(string protectedText);
    public sealed virtual TData Unprotect(string protectedText, string purpose);
}
public abstract class Microsoft.AspNetCore.Authentication.SignInAuthenticationHandler`1 : SignOutAuthenticationHandler`1<TOptions> {
    public SignInAuthenticationHandler`1(IOptionsMonitor`1<TOptions> options, ILoggerFactory logger, UrlEncoder encoder, ISystemClock clock);
    public virtual Task SignInAsync(ClaimsPrincipal user, AuthenticationProperties properties);
    protected abstract virtual Task HandleSignInAsync(ClaimsPrincipal user, AuthenticationProperties properties);
}
public abstract class Microsoft.AspNetCore.Authentication.SignOutAuthenticationHandler`1 : AuthenticationHandler`1<TOptions> {
    public SignOutAuthenticationHandler`1(IOptionsMonitor`1<TOptions> options, ILoggerFactory logger, UrlEncoder encoder, ISystemClock clock);
    public virtual Task SignOutAsync(AuthenticationProperties properties);
    protected abstract virtual Task HandleSignOutAsync(AuthenticationProperties properties);
}
public class Microsoft.AspNetCore.Authentication.SystemClock : object {
    public DateTimeOffset UtcNow { get; }
    public sealed virtual DateTimeOffset get_UtcNow();
}
public class Microsoft.AspNetCore.Authentication.TicketDataFormat : SecureDataFormat`1<AuthenticationTicket> {
    public TicketDataFormat(IDataProtector protector);
}
public class Microsoft.AspNetCore.Authentication.TicketReceivedContext : RemoteAuthenticationContext`1<RemoteAuthenticationOptions> {
    [CompilerGeneratedAttribute]
private string <ReturnUri>k__BackingField;
    public string ReturnUri { get; public set; }
    public TicketReceivedContext(HttpContext context, AuthenticationScheme scheme, RemoteAuthenticationOptions options, AuthenticationTicket ticket);
    [CompilerGeneratedAttribute]
public string get_ReturnUri();
    [CompilerGeneratedAttribute]
public void set_ReturnUri(string value);
}
public class Microsoft.AspNetCore.Authentication.TicketSerializer : object {
    private static string DefaultStringPlaceholder;
    private static int FormatVersion;
    [CompilerGeneratedAttribute]
private static TicketSerializer <Default>k__BackingField;
    public static TicketSerializer Default { get; }
    private static TicketSerializer();
    [CompilerGeneratedAttribute]
public static TicketSerializer get_Default();
    public virtual Byte[] Serialize(AuthenticationTicket ticket);
    public virtual AuthenticationTicket Deserialize(Byte[] data);
    public virtual void Write(BinaryWriter writer, AuthenticationTicket ticket);
    protected virtual void WriteIdentity(BinaryWriter writer, ClaimsIdentity identity);
    protected virtual void WriteClaim(BinaryWriter writer, Claim claim);
    public virtual AuthenticationTicket Read(BinaryReader reader);
    protected virtual ClaimsIdentity ReadIdentity(BinaryReader reader);
    protected virtual Claim ReadClaim(BinaryReader reader, ClaimsIdentity identity);
    private static void WriteWithDefault(BinaryWriter writer, string value, string defaultValue);
    private static string ReadWithDefault(BinaryReader reader, string defaultValue);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.AuthAppBuilderExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseAuthentication(IApplicationBuilder app);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static AuthenticationBuilder AddAuthentication(IServiceCollection services);
    [ExtensionAttribute]
public static AuthenticationBuilder AddAuthentication(IServiceCollection services, string defaultScheme);
    [ExtensionAttribute]
public static AuthenticationBuilder AddAuthentication(IServiceCollection services, Action`1<AuthenticationOptions> configureOptions);
    [ExtensionAttribute]
[ObsoleteAttribute("AddScheme is obsolete. Use AddAuthentication().AddScheme instead.")]
public static IServiceCollection AddScheme(IServiceCollection services, string authenticationScheme, string displayName, Action`1<AuthenticationSchemeBuilder> configureScheme, Action`1<TOptions> configureOptions);
    [ExtensionAttribute]
[ObsoleteAttribute("AddScheme is obsolete. Use AddAuthentication().AddScheme instead.")]
public static IServiceCollection AddScheme(IServiceCollection services, string authenticationScheme, Action`1<TOptions> configureOptions);
    [ExtensionAttribute]
[ObsoleteAttribute("AddScheme is obsolete. Use AddAuthentication().AddScheme instead.")]
public static IServiceCollection AddScheme(IServiceCollection services, string authenticationScheme, string displayName, Action`1<TOptions> configureOptions);
    [ExtensionAttribute]
[ObsoleteAttribute("AddScheme is obsolete. Use AddAuthentication().AddScheme instead.")]
public static IServiceCollection AddRemoteScheme(IServiceCollection services, string authenticationScheme, string displayName, Action`1<TOptions> configureOptions);
}
internal static class Microsoft.Extensions.Internal.SecurityHelper : object {
    public static ClaimsPrincipal MergeUserPrincipal(ClaimsPrincipal existingPrincipal, ClaimsPrincipal additionalPrincipal);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.Logging.LoggingExtensions : object {
    private static Action`3<ILogger, string, Exception> _authSchemeAuthenticated;
    private static Action`3<ILogger, string, Exception> _authSchemeNotAuthenticated;
    private static Action`4<ILogger, string, string, Exception> _authSchemeNotAuthenticatedWithFailure;
    private static Action`3<ILogger, string, Exception> _authSchemeChallenged;
    private static Action`3<ILogger, string, Exception> _authSchemeForbidden;
    private static Action`3<ILogger, string, Exception> _remoteAuthenticationError;
    private static Action`2<ILogger, Exception> _signInHandled;
    private static Action`2<ILogger, Exception> _signInSkipped;
    private static Action`3<ILogger, string, Exception> _correlationPropertyNotFound;
    private static Action`3<ILogger, string, Exception> _correlationCookieNotFound;
    private static Action`4<ILogger, string, string, Exception> _unexpectedCorrelationCookieValue;
    private static LoggingExtensions();
    [ExtensionAttribute]
public static void AuthenticationSchemeAuthenticated(ILogger logger, string authenticationScheme);
    [ExtensionAttribute]
public static void AuthenticationSchemeNotAuthenticated(ILogger logger, string authenticationScheme);
    [ExtensionAttribute]
public static void AuthenticationSchemeNotAuthenticatedWithFailure(ILogger logger, string authenticationScheme, string failureMessage);
    [ExtensionAttribute]
public static void AuthenticationSchemeChallenged(ILogger logger, string authenticationScheme);
    [ExtensionAttribute]
public static void AuthenticationSchemeForbidden(ILogger logger, string authenticationScheme);
    [ExtensionAttribute]
public static void RemoteAuthenticationError(ILogger logger, string errorMessage);
    [ExtensionAttribute]
public static void SigninHandled(ILogger logger);
    [ExtensionAttribute]
public static void SigninSkipped(ILogger logger);
    [ExtensionAttribute]
public static void CorrelationPropertyNotFound(ILogger logger, string correlationPrefix);
    [ExtensionAttribute]
public static void CorrelationCookieNotFound(ILogger logger, string cookieName);
    [ExtensionAttribute]
public static void UnexpectedCorrelationCookieValue(ILogger logger, string cookieName, string cookieValue);
}
