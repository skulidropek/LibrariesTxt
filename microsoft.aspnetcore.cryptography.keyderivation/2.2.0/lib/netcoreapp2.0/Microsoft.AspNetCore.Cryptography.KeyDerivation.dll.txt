public static class Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivation : object {
    public static Byte[] Pbkdf2(string password, Byte[] salt, KeyDerivationPrf prf, int iterationCount, int numBytesRequested);
}
public enum Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivationPrf : Enum {
    public int value__;
    public static KeyDerivationPrf HMACSHA1;
    public static KeyDerivationPrf HMACSHA256;
    public static KeyDerivationPrf HMACSHA512;
}
internal interface Microsoft.AspNetCore.Cryptography.KeyDerivation.PBKDF2.IPbkdf2Provider {
    public abstract virtual Byte[] DeriveKey(string password, Byte[] salt, KeyDerivationPrf prf, int iterationCount, int numBytesRequested);
}
internal class Microsoft.AspNetCore.Cryptography.KeyDerivation.PBKDF2.ManagedPbkdf2Provider : object {
    public sealed virtual Byte[] DeriveKey(string password, Byte[] salt, KeyDerivationPrf prf, int iterationCount, int numBytesRequested);
    private static KeyedHashAlgorithm PrfToManagedHmacAlgorithm(KeyDerivationPrf prf, string password);
    private static void XorBuffers(Byte[] src, Byte[] dest);
}
internal class Microsoft.AspNetCore.Cryptography.KeyDerivation.PBKDF2.NetCorePbkdf2Provider : object {
    private static ManagedPbkdf2Provider _fallbackProvider;
    private static NetCorePbkdf2Provider();
    public sealed virtual Byte[] DeriveKey(string password, Byte[] salt, KeyDerivationPrf prf, int iterationCount, int numBytesRequested);
    private static Byte[] DeriveKeyImpl(string password, Byte[] salt, KeyDerivationPrf prf, int iterationCount, int numBytesRequested);
}
internal static class Microsoft.AspNetCore.Cryptography.KeyDerivation.PBKDF2.Pbkdf2Util : object {
    public static IPbkdf2Provider Pbkdf2Provider;
    private static Pbkdf2Util();
    private static IPbkdf2Provider GetPbkdf2Provider();
}
internal class Microsoft.AspNetCore.Cryptography.KeyDerivation.PBKDF2.Win7Pbkdf2Provider : object {
    public sealed virtual Byte[] DeriveKey(string password, Byte[] salt, KeyDerivationPrf prf, int iterationCount, int numBytesRequested);
    private static BCryptAlgorithmHandle PrfToCachedCngAlgorithmInstance(KeyDerivationPrf prf);
}
internal class Microsoft.AspNetCore.Cryptography.KeyDerivation.PBKDF2.Win8Pbkdf2Provider : object {
    public sealed virtual Byte[] DeriveKey(string password, Byte[] salt, KeyDerivationPrf prf, int iterationCount, int numBytesRequested);
    public static UInt32 GetTotalByteLengthIncludingNullTerminator(string input);
    private static BCryptKeyHandle PasswordToPbkdfKeyHandle(string password, BCryptAlgorithmHandle pbkdf2AlgHandle, KeyDerivationPrf prf);
    private static BCryptKeyHandle PasswordToPbkdfKeyHandleStep2(BCryptAlgorithmHandle pbkdf2AlgHandle, Byte* pbPassword, UInt32 cbPassword, KeyDerivationPrf prf);
    private static void DeriveKeyCore(BCryptKeyHandle pbkdf2KeyHandle, string hashAlgorithm, Byte* pbSalt, UInt32 cbSalt, ulong iterCount, Byte* pbDerivedBytes, UInt32 cbDerivedBytes);
    private static string PrfToCngAlgorithmId(KeyDerivationPrf prf);
}
