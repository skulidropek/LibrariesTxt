public static class Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivation : object {
    [NullableContextAttribute("1")]
public static Byte[] Pbkdf2(string password, Byte[] salt, KeyDerivationPrf prf, int iterationCount, int numBytesRequested);
}
public enum Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivationPrf : Enum {
    public int value__;
    public static KeyDerivationPrf HMACSHA1;
    public static KeyDerivationPrf HMACSHA256;
    public static KeyDerivationPrf HMACSHA512;
}
[NullableContextAttribute("1")]
internal interface Microsoft.AspNetCore.Cryptography.KeyDerivation.PBKDF2.IPbkdf2Provider {
    public abstract virtual Byte[] DeriveKey(string password, Byte[] salt, KeyDerivationPrf prf, int iterationCount, int numBytesRequested);
}
internal class Microsoft.AspNetCore.Cryptography.KeyDerivation.PBKDF2.ManagedPbkdf2Provider : object {
    [NullableContextAttribute("1")]
public sealed virtual Byte[] DeriveKey(string password, Byte[] salt, KeyDerivationPrf prf, int iterationCount, int numBytesRequested);
    private static KeyedHashAlgorithm PrfToManagedHmacAlgorithm(KeyDerivationPrf prf, string password);
    private static void XorBuffers(Byte[] src, Byte[] dest);
}
internal static class Microsoft.AspNetCore.Cryptography.KeyDerivation.PBKDF2.Pbkdf2Util : object {
    [NullableAttribute("1")]
public static IPbkdf2Provider Pbkdf2Provider;
    private static Pbkdf2Util();
    private static IPbkdf2Provider GetPbkdf2Provider();
}
internal class Microsoft.AspNetCore.Cryptography.KeyDerivation.PBKDF2.Win7Pbkdf2Provider : object {
    [NullableContextAttribute("1")]
public sealed virtual Byte[] DeriveKey(string password, Byte[] salt, KeyDerivationPrf prf, int iterationCount, int numBytesRequested);
    private static BCryptAlgorithmHandle PrfToCachedCngAlgorithmInstance(KeyDerivationPrf prf);
}
internal class Microsoft.AspNetCore.Cryptography.KeyDerivation.PBKDF2.Win8Pbkdf2Provider : object {
    [NullableContextAttribute("1")]
public sealed virtual Byte[] DeriveKey(string password, Byte[] salt, KeyDerivationPrf prf, int iterationCount, int numBytesRequested);
    [NullableContextAttribute("1")]
public static UInt32 GetTotalByteLengthIncludingNullTerminator(string input);
    private static BCryptKeyHandle PasswordToPbkdfKeyHandle(string password, BCryptAlgorithmHandle pbkdf2AlgHandle, KeyDerivationPrf prf);
    private static BCryptKeyHandle PasswordToPbkdfKeyHandleStep2(BCryptAlgorithmHandle pbkdf2AlgHandle, Byte* pbPassword, UInt32 cbPassword, KeyDerivationPrf prf);
    private static void DeriveKeyCore(BCryptKeyHandle pbkdf2KeyHandle, string hashAlgorithm, Byte* pbSalt, UInt32 cbSalt, ulong iterCount, Byte* pbDerivedBytes, UInt32 cbDerivedBytes);
    private static string PrfToCngAlgorithmId(KeyDerivationPrf prf);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Shared.ArgumentNullThrowHelper : object {
    public static void ThrowIfNull(object argument, string paramName);
    internal static void Throw(string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Shared.ArgumentOutOfRangeThrowHelper : object {
    [DoesNotReturnAttribute]
private static void ThrowZero(string paramName, T value);
    [DoesNotReturnAttribute]
private static void ThrowNegative(string paramName, T value);
    [DoesNotReturnAttribute]
private static void ThrowNegativeOrZero(string paramName, T value);
    [DoesNotReturnAttribute]
private static void ThrowGreater(string paramName, T value, T other);
    [DoesNotReturnAttribute]
private static void ThrowGreaterEqual(string paramName, T value, T other);
    [DoesNotReturnAttribute]
private static void ThrowLess(string paramName, T value, T other);
    [DoesNotReturnAttribute]
private static void ThrowLessEqual(string paramName, T value, T other);
    [NullableContextAttribute("2")]
public static void ThrowIfZero(int value, string paramName);
    [NullableContextAttribute("2")]
public static void ThrowIfNegative(int value, string paramName);
    [NullableContextAttribute("2")]
public static void ThrowIfNegative(long value, string paramName);
    [NullableContextAttribute("2")]
public static void ThrowIfNegativeOrZero(int value, string paramName);
    public static void ThrowIfGreaterThan(T value, T other, string paramName);
    public static void ThrowIfGreaterThanOrEqual(T value, T other, string paramName);
    public static void ThrowIfLessThan(T value, T other, string paramName);
    public static void ThrowIfLessThanOrEqual(T value, T other, string paramName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
