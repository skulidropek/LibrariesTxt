internal static class Microsoft.AspNetCore.DataProtection.Abstractions.Resources : object {
    private static ResourceManager _resourceManager;
    internal static string CryptCommon_PayloadInvalid { get; }
    internal static string DataProtectionExtensions_NullPurposesCollection { get; }
    internal static string CryptCommon_GenericError { get; }
    internal static string DataProtectionExtensions_NoService { get; }
    private static Resources();
    internal static string get_CryptCommon_PayloadInvalid();
    internal static string FormatCryptCommon_PayloadInvalid();
    internal static string get_DataProtectionExtensions_NullPurposesCollection();
    internal static string FormatDataProtectionExtensions_NullPurposesCollection();
    internal static string get_CryptCommon_GenericError();
    internal static string FormatCryptCommon_GenericError();
    internal static string get_DataProtectionExtensions_NoService();
    internal static string FormatDataProtectionExtensions_NoService(object p0);
    private static string GetString(string name, String[] formatterNames);
}
internal static class Microsoft.AspNetCore.DataProtection.CryptoUtil : object {
    public static Exception Fail(string message);
    public static T Fail(string message);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions : object {
    [ExtensionAttribute]
public static IDataProtector CreateProtector(IDataProtectionProvider provider, IEnumerable`1<string> purposes);
    [ExtensionAttribute]
public static IDataProtector CreateProtector(IDataProtectionProvider provider, string purpose, String[] subPurposes);
    [ExtensionAttribute]
public static IDataProtectionProvider GetDataProtectionProvider(IServiceProvider services);
    [ExtensionAttribute]
public static IDataProtector GetDataProtector(IServiceProvider services, IEnumerable`1<string> purposes);
    [ExtensionAttribute]
public static IDataProtector GetDataProtector(IServiceProvider services, string purpose, String[] subPurposes);
    [ExtensionAttribute]
public static string Protect(IDataProtector protector, string plaintext);
    [ExtensionAttribute]
public static string Unprotect(IDataProtector protector, string protectedData);
}
internal static class Microsoft.AspNetCore.DataProtection.EncodingUtil : object {
    public static UTF8Encoding SecureUtf8Encoding;
    private static EncodingUtil();
}
internal static class Microsoft.AspNetCore.DataProtection.Error : object {
    public static CryptographicException CryptCommon_GenericError(Exception inner);
    public static CryptographicException CryptCommon_PayloadInvalid();
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.DataProtection.ExceptionExtensions : object {
    [ExtensionAttribute]
public static bool RequiresHomogenization(Exception ex);
}
public interface Microsoft.AspNetCore.DataProtection.IDataProtectionProvider {
    public abstract virtual IDataProtector CreateProtector(string purpose);
}
public interface Microsoft.AspNetCore.DataProtection.IDataProtector {
    public abstract virtual Byte[] Protect(Byte[] plaintext);
    public abstract virtual Byte[] Unprotect(Byte[] protectedData);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.AspNetCore.DataProtection.Infrastructure.IApplicationDiscriminator {
    public string Discriminator { get; }
    public abstract virtual string get_Discriminator();
}
internal static class Microsoft.Extensions.Internal.WebEncoders : object {
    private static Byte[] EmptyBytes;
    private static WebEncoders();
    public static Byte[] Base64UrlDecode(string input);
    public static Byte[] Base64UrlDecode(string input, int offset, int count);
    public static Byte[] Base64UrlDecode(string input, int offset, Char[] buffer, int bufferOffset, int count);
    public static int GetArraySizeRequiredToDecode(int count);
    public static string Base64UrlEncode(Byte[] input);
    public static string Base64UrlEncode(Byte[] input, int offset, int count);
    public static int Base64UrlEncode(Byte[] input, int offset, Char[] output, int outputOffset, int count);
    public static int GetArraySizeRequiredToEncode(int count);
    private static int GetNumBase64PaddingCharsInString(string str);
    private static int GetNumBase64PaddingCharsToAddForDecode(int inputLength);
    private static void ValidateParameters(int bufferLength, string inputName, int offset, int count);
}
internal static class Microsoft.Extensions.WebEncoders.Sources.EncoderResources : object {
    internal static string WebEncoders_InvalidCountOffsetOrLength;
    internal static string WebEncoders_MalformedInput;
    private static EncoderResources();
    internal static string FormatWebEncoders_InvalidCountOffsetOrLength(object p0, object p1, object p2);
    internal static string FormatWebEncoders_MalformedInput(object p0);
}
