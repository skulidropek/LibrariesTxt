[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityDbContext : IdentityDbContext`3<IdentityUser, IdentityRole, string> {
    public IdentityDbContext(DbContextOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityDbContext`1 : IdentityDbContext`3<TUser, IdentityRole, string> {
    public IdentityDbContext`1(DbContextOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityDbContext`3 : IdentityDbContext`8<TUser, TRole, TKey, IdentityUserClaim`1<TKey>, IdentityUserRole`1<TKey>, IdentityUserLogin`1<TKey>, IdentityRoleClaim`1<TKey>, IdentityUserToken`1<TKey>> {
    public IdentityDbContext`3(DbContextOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityDbContext`8 : IdentityUserContext`5<TUser, TKey, TUserClaim, TUserLogin, TUserToken> {
    [CompilerGeneratedAttribute]
private DbSet`1<TUserRole> <UserRoles>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<TRole> <Roles>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<TRoleClaim> <RoleClaims>k__BackingField;
    public DbSet`1<TUserRole> UserRoles { get; public set; }
    public DbSet`1<TRole> Roles { get; public set; }
    public DbSet`1<TRoleClaim> RoleClaims { get; public set; }
    public IdentityDbContext`8(DbContextOptions options);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<TUserRole> get_UserRoles();
    [CompilerGeneratedAttribute]
public virtual void set_UserRoles(DbSet`1<TUserRole> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<TRole> get_Roles();
    [CompilerGeneratedAttribute]
public virtual void set_Roles(DbSet`1<TRole> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<TRoleClaim> get_RoleClaims();
    [CompilerGeneratedAttribute]
public virtual void set_RoleClaims(DbSet`1<TRoleClaim> value);
    protected virtual void OnModelCreating(ModelBuilder builder);
    internal virtual void OnModelCreatingVersion2(ModelBuilder builder);
    internal virtual void OnModelCreatingVersion1(ModelBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserContext`1 : IdentityUserContext`2<TUser, string> {
    public IdentityUserContext`1(DbContextOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserContext`2 : IdentityUserContext`5<TUser, TKey, IdentityUserClaim`1<TKey>, IdentityUserLogin`1<TKey>, IdentityUserToken`1<TKey>> {
    public IdentityUserContext`2(DbContextOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserContext`5 : DbContext {
    [CompilerGeneratedAttribute]
private DbSet`1<TUser> <Users>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<TUserClaim> <UserClaims>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<TUserLogin> <UserLogins>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<TUserToken> <UserTokens>k__BackingField;
    public DbSet`1<TUser> Users { get; public set; }
    public DbSet`1<TUserClaim> UserClaims { get; public set; }
    public DbSet`1<TUserLogin> UserLogins { get; public set; }
    public DbSet`1<TUserToken> UserTokens { get; public set; }
    protected Version SchemaVersion { get; }
    public IdentityUserContext`5(DbContextOptions options);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<TUser> get_Users();
    [CompilerGeneratedAttribute]
public virtual void set_Users(DbSet`1<TUser> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<TUserClaim> get_UserClaims();
    [CompilerGeneratedAttribute]
public virtual void set_UserClaims(DbSet`1<TUserClaim> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<TUserLogin> get_UserLogins();
    [CompilerGeneratedAttribute]
public virtual void set_UserLogins(DbSet`1<TUserLogin> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<TUserToken> get_UserTokens();
    [CompilerGeneratedAttribute]
public virtual void set_UserTokens(DbSet`1<TUserToken> value);
    protected virtual Version get_SchemaVersion();
    private StoreOptions GetStoreOptions();
    protected virtual void OnModelCreating(ModelBuilder builder);
    internal virtual void OnModelCreatingVersion(ModelBuilder builder, Version schemaVersion);
    internal virtual void OnModelCreatingVersion2(ModelBuilder builder);
    internal virtual void OnModelCreatingVersion1(ModelBuilder builder);
}
internal static class Microsoft.AspNetCore.Identity.EntityFrameworkCore.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string CanOnlyProtectStrings { get; }
    internal static string NotIdentityRole { get; }
    internal static string NotIdentityUser { get; }
    internal static string RoleNotFound { get; }
    internal static string ValueCannotBeNullOrEmpty { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_CanOnlyProtectStrings();
    internal static string get_NotIdentityRole();
    internal static string get_NotIdentityUser();
    internal static string get_RoleNotFound();
    internal static string FormatRoleNotFound(object p0);
    internal static string get_ValueCannotBeNullOrEmpty();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`1 : RoleStore`3<TRole, DbContext, string> {
    public RoleStore`1(DbContext context, IdentityErrorDescriber describer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`2 : RoleStore`3<TRole, TContext, string> {
    public RoleStore`2(TContext context, IdentityErrorDescriber describer);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`3 : RoleStore`5<TRole, TContext, TKey, IdentityUserRole`1<TKey>, IdentityRoleClaim`1<TKey>> {
    [NullableContextAttribute("1")]
public RoleStore`3(TContext context, IdentityErrorDescriber describer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5 : object {
    private bool _disposed;
    [CompilerGeneratedAttribute]
private TContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityErrorDescriber <ErrorDescriber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoSaveChanges>k__BackingField;
    public TContext Context { get; private set; }
    public IdentityErrorDescriber ErrorDescriber { get; public set; }
    public bool AutoSaveChanges { get; public set; }
    public IQueryable`1<TRole> Roles { get; }
    private DbSet`1<TRoleClaim> RoleClaims { get; }
    public RoleStore`5(TContext context, IdentityErrorDescriber describer);
    [CompilerGeneratedAttribute]
public virtual TContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(TContext value);
    [CompilerGeneratedAttribute]
public IdentityErrorDescriber get_ErrorDescriber();
    [CompilerGeneratedAttribute]
public void set_ErrorDescriber(IdentityErrorDescriber value);
    [CompilerGeneratedAttribute]
public bool get_AutoSaveChanges();
    [CompilerGeneratedAttribute]
public void set_AutoSaveChanges(bool value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5/<SaveChanges>d__14")]
protected virtual Task SaveChanges(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5/<CreateAsync>d__15")]
public virtual Task`1<IdentityResult> CreateAsync(TRole role, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5/<UpdateAsync>d__16")]
public virtual Task`1<IdentityResult> UpdateAsync(TRole role, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5/<DeleteAsync>d__17")]
public virtual Task`1<IdentityResult> DeleteAsync(TRole role, CancellationToken cancellationToken);
    public virtual Task`1<string> GetRoleIdAsync(TRole role, CancellationToken cancellationToken);
    public virtual Task`1<string> GetRoleNameAsync(TRole role, CancellationToken cancellationToken);
    public virtual Task SetRoleNameAsync(TRole role, string roleName, CancellationToken cancellationToken);
    public virtual TKey ConvertIdFromString(string id);
    public virtual string ConvertIdToString(TKey id);
    public virtual Task`1<TRole> FindByIdAsync(string id, CancellationToken cancellationToken);
    public virtual Task`1<TRole> FindByNameAsync(string normalizedName, CancellationToken cancellationToken);
    public virtual Task`1<string> GetNormalizedRoleNameAsync(TRole role, CancellationToken cancellationToken);
    public virtual Task SetNormalizedRoleNameAsync(TRole role, string normalizedName, CancellationToken cancellationToken);
    protected void ThrowIfDisposed();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5/<GetClaimsAsync>d__29")]
public virtual Task`1<IList`1<Claim>> GetClaimsAsync(TRole role, CancellationToken cancellationToken);
    public virtual Task AddClaimAsync(TRole role, Claim claim, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5/<RemoveClaimAsync>d__31")]
public virtual Task RemoveClaimAsync(TRole role, Claim claim, CancellationToken cancellationToken);
    public virtual IQueryable`1<TRole> get_Roles();
    private DbSet`1<TRoleClaim> get_RoleClaims();
    protected virtual TRoleClaim CreateRoleClaim(TRole role, Claim claim);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`1 : UserOnlyStore`3<TUser, DbContext, string> {
    public UserOnlyStore`1(DbContext context, IdentityErrorDescriber describer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`2 : UserOnlyStore`3<TUser, TContext, string> {
    public UserOnlyStore`2(TContext context, IdentityErrorDescriber describer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`3 : UserOnlyStore`6<TUser, TContext, TKey, IdentityUserClaim`1<TKey>, IdentityUserLogin`1<TKey>, IdentityUserToken`1<TKey>> {
    public UserOnlyStore`3(TContext context, IdentityErrorDescriber describer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`6 : UserStoreBase`5<TUser, TKey, TUserClaim, TUserLogin, TUserToken> {
    [CompilerGeneratedAttribute]
private TContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoSaveChanges>k__BackingField;
    public TContext Context { get; private set; }
    protected DbSet`1<TUser> UsersSet { get; }
    protected DbSet`1<TUserClaim> UserClaims { get; }
    protected DbSet`1<TUserLogin> UserLogins { get; }
    protected DbSet`1<TUserToken> UserTokens { get; }
    public bool AutoSaveChanges { get; public set; }
    public IQueryable`1<TUser> Users { get; }
    public UserOnlyStore`6(TContext context, IdentityErrorDescriber describer);
    [CompilerGeneratedAttribute]
public virtual TContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(TContext value);
    protected DbSet`1<TUser> get_UsersSet();
    protected DbSet`1<TUserClaim> get_UserClaims();
    protected DbSet`1<TUserLogin> get_UserLogins();
    protected DbSet`1<TUserToken> get_UserTokens();
    [CompilerGeneratedAttribute]
public bool get_AutoSaveChanges();
    [CompilerGeneratedAttribute]
public void set_AutoSaveChanges(bool value);
    protected Task SaveChanges(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`6/<CreateAsync>d__18")]
public virtual Task`1<IdentityResult> CreateAsync(TUser user, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`6/<UpdateAsync>d__19")]
public virtual Task`1<IdentityResult> UpdateAsync(TUser user, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`6/<DeleteAsync>d__20")]
public virtual Task`1<IdentityResult> DeleteAsync(TUser user, CancellationToken cancellationToken);
    public virtual Task`1<TUser> FindByIdAsync(string userId, CancellationToken cancellationToken);
    public virtual Task`1<TUser> FindByNameAsync(string normalizedUserName, CancellationToken cancellationToken);
    public virtual IQueryable`1<TUser> get_Users();
    protected virtual Task`1<TUser> FindUserAsync(TKey userId, CancellationToken cancellationToken);
    protected virtual Task`1<TUserLogin> FindUserLoginAsync(TKey userId, string loginProvider, string providerKey, CancellationToken cancellationToken);
    protected virtual Task`1<TUserLogin> FindUserLoginAsync(string loginProvider, string providerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`6/<GetClaimsAsync>d__28")]
public virtual Task`1<IList`1<Claim>> GetClaimsAsync(TUser user, CancellationToken cancellationToken);
    public virtual Task AddClaimsAsync(TUser user, IEnumerable`1<Claim> claims, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`6/<ReplaceClaimAsync>d__30")]
public virtual Task ReplaceClaimAsync(TUser user, Claim claim, Claim newClaim, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`6/<RemoveClaimsAsync>d__31")]
public virtual Task RemoveClaimsAsync(TUser user, IEnumerable`1<Claim> claims, CancellationToken cancellationToken);
    public virtual Task AddLoginAsync(TUser user, UserLoginInfo login, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`6/<RemoveLoginAsync>d__33")]
public virtual Task RemoveLoginAsync(TUser user, string loginProvider, string providerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`6/<GetLoginsAsync>d__34")]
public virtual Task`1<IList`1<UserLoginInfo>> GetLoginsAsync(TUser user, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`6/<FindByLoginAsync>d__35")]
public virtual Task`1<TUser> FindByLoginAsync(string loginProvider, string providerKey, CancellationToken cancellationToken);
    public virtual Task`1<TUser> FindByEmailAsync(string normalizedEmail, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`6/<GetUsersForClaimAsync>d__37")]
public virtual Task`1<IList`1<TUser>> GetUsersForClaimAsync(Claim claim, CancellationToken cancellationToken);
    protected virtual Task`1<TUserToken> FindTokenAsync(TUser user, string loginProvider, string name, CancellationToken cancellationToken);
    protected virtual Task AddUserTokenAsync(TUserToken token);
    protected virtual Task RemoveUserTokenAsync(TUserToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore : UserStore`1<IdentityUser`1<string>> {
    public UserStore(DbContext context, IdentityErrorDescriber describer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`1 : UserStore`4<TUser, IdentityRole, DbContext, string> {
    public UserStore`1(DbContext context, IdentityErrorDescriber describer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`3 : UserStore`4<TUser, TRole, TContext, string> {
    public UserStore`3(TContext context, IdentityErrorDescriber describer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`4 : UserStore`9<TUser, TRole, TContext, TKey, IdentityUserClaim`1<TKey>, IdentityUserRole`1<TKey>, IdentityUserLogin`1<TKey>, IdentityUserToken`1<TKey>, IdentityRoleClaim`1<TKey>> {
    public UserStore`4(TContext context, IdentityErrorDescriber describer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9 : UserStoreBase`8<TUser, TRole, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken, TRoleClaim> {
    [CompilerGeneratedAttribute]
private TContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoSaveChanges>k__BackingField;
    public TContext Context { get; private set; }
    private DbSet`1<TUser> UsersSet { get; }
    private DbSet`1<TRole> Roles { get; }
    private DbSet`1<TUserClaim> UserClaims { get; }
    private DbSet`1<TUserRole> UserRoles { get; }
    private DbSet`1<TUserLogin> UserLogins { get; }
    private DbSet`1<TUserToken> UserTokens { get; }
    public bool AutoSaveChanges { get; public set; }
    public IQueryable`1<TUser> Users { get; }
    public UserStore`9(TContext context, IdentityErrorDescriber describer);
    [CompilerGeneratedAttribute]
public virtual TContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(TContext value);
    private DbSet`1<TUser> get_UsersSet();
    private DbSet`1<TRole> get_Roles();
    private DbSet`1<TUserClaim> get_UserClaims();
    private DbSet`1<TUserRole> get_UserRoles();
    private DbSet`1<TUserLogin> get_UserLogins();
    private DbSet`1<TUserToken> get_UserTokens();
    [CompilerGeneratedAttribute]
public bool get_AutoSaveChanges();
    [CompilerGeneratedAttribute]
public void set_AutoSaveChanges(bool value);
    protected Task SaveChanges(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9/<CreateAsync>d__22")]
public virtual Task`1<IdentityResult> CreateAsync(TUser user, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9/<UpdateAsync>d__23")]
public virtual Task`1<IdentityResult> UpdateAsync(TUser user, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9/<DeleteAsync>d__24")]
public virtual Task`1<IdentityResult> DeleteAsync(TUser user, CancellationToken cancellationToken);
    public virtual Task`1<TUser> FindByIdAsync(string userId, CancellationToken cancellationToken);
    public virtual Task`1<TUser> FindByNameAsync(string normalizedUserName, CancellationToken cancellationToken);
    public virtual IQueryable`1<TUser> get_Users();
    protected virtual Task`1<TRole> FindRoleAsync(string normalizedRoleName, CancellationToken cancellationToken);
    protected virtual Task`1<TUserRole> FindUserRoleAsync(TKey userId, TKey roleId, CancellationToken cancellationToken);
    protected virtual Task`1<TUser> FindUserAsync(TKey userId, CancellationToken cancellationToken);
    protected virtual Task`1<TUserLogin> FindUserLoginAsync(TKey userId, string loginProvider, string providerKey, CancellationToken cancellationToken);
    protected virtual Task`1<TUserLogin> FindUserLoginAsync(string loginProvider, string providerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9/<AddToRoleAsync>d__34")]
public virtual Task AddToRoleAsync(TUser user, string normalizedRoleName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9/<RemoveFromRoleAsync>d__35")]
public virtual Task RemoveFromRoleAsync(TUser user, string normalizedRoleName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9/<GetRolesAsync>d__36")]
public virtual Task`1<IList`1<string>> GetRolesAsync(TUser user, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9/<IsInRoleAsync>d__37")]
public virtual Task`1<bool> IsInRoleAsync(TUser user, string normalizedRoleName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9/<GetClaimsAsync>d__38")]
public virtual Task`1<IList`1<Claim>> GetClaimsAsync(TUser user, CancellationToken cancellationToken);
    public virtual Task AddClaimsAsync(TUser user, IEnumerable`1<Claim> claims, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9/<ReplaceClaimAsync>d__40")]
public virtual Task ReplaceClaimAsync(TUser user, Claim claim, Claim newClaim, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9/<RemoveClaimsAsync>d__41")]
public virtual Task RemoveClaimsAsync(TUser user, IEnumerable`1<Claim> claims, CancellationToken cancellationToken);
    public virtual Task AddLoginAsync(TUser user, UserLoginInfo login, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9/<RemoveLoginAsync>d__43")]
public virtual Task RemoveLoginAsync(TUser user, string loginProvider, string providerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9/<GetLoginsAsync>d__44")]
public virtual Task`1<IList`1<UserLoginInfo>> GetLoginsAsync(TUser user, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9/<FindByLoginAsync>d__45")]
public virtual Task`1<TUser> FindByLoginAsync(string loginProvider, string providerKey, CancellationToken cancellationToken);
    public virtual Task`1<TUser> FindByEmailAsync(string normalizedEmail, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9/<GetUsersForClaimAsync>d__47")]
public virtual Task`1<IList`1<TUser>> GetUsersForClaimAsync(Claim claim, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9/<GetUsersInRoleAsync>d__48")]
public virtual Task`1<IList`1<TUser>> GetUsersInRoleAsync(string normalizedRoleName, CancellationToken cancellationToken);
    protected virtual Task`1<TUserToken> FindTokenAsync(TUser user, string loginProvider, string name, CancellationToken cancellationToken);
    protected virtual Task AddUserTokenAsync(TUserToken token);
    protected virtual Task RemoveUserTokenAsync(TUserToken token);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.IdentityEntityFrameworkBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IdentityBuilder AddEntityFrameworkStores(IdentityBuilder builder);
    private static void AddStores(IServiceCollection services, Type userType, Type roleType, Type contextType);
    private static Type FindGenericBaseType(Type currentType, Type genericBaseType);
}
