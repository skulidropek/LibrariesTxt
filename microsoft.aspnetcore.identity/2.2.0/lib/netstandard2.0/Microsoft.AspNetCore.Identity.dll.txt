[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.BuilderExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("This method is obsolete and will be removed in a future version. The recommended alternative is UseAuthentication(). See https://go.microsoft.com/fwlink/?linkid=845470")]
public static IApplicationBuilder UseIdentity(IApplicationBuilder app);
}
public class Microsoft.AspNetCore.Identity.AspNetRoleManager`1 : RoleManager`1<TRole> {
    private CancellationToken _cancel;
    protected CancellationToken CancellationToken { get; }
    public AspNetRoleManager`1(IRoleStore`1<TRole> store, IEnumerable`1<IRoleValidator`1<TRole>> roleValidators, ILookupNormalizer keyNormalizer, IdentityErrorDescriber errors, ILogger`1<RoleManager`1<TRole>> logger, IHttpContextAccessor contextAccessor);
    protected virtual CancellationToken get_CancellationToken();
}
public class Microsoft.AspNetCore.Identity.AspNetUserManager`1 : UserManager`1<TUser> {
    private CancellationToken _cancel;
    protected CancellationToken CancellationToken { get; }
    public AspNetUserManager`1(IUserStore`1<TUser> store, IOptions`1<IdentityOptions> optionsAccessor, IPasswordHasher`1<TUser> passwordHasher, IEnumerable`1<IUserValidator`1<TUser>> userValidators, IEnumerable`1<IPasswordValidator`1<TUser>> passwordValidators, ILookupNormalizer keyNormalizer, IdentityErrorDescriber errors, IServiceProvider services, ILogger`1<UserManager`1<TUser>> logger);
    protected virtual CancellationToken get_CancellationToken();
}
public class Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TokenLifespan>k__BackingField;
    public string Name { get; public set; }
    public TimeSpan TokenLifespan { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_TokenLifespan();
    [CompilerGeneratedAttribute]
public void set_TokenLifespan(TimeSpan value);
}
public class Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1 : object {
    [CompilerGeneratedAttribute]
private DataProtectionTokenProviderOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProtector <Protector>k__BackingField;
    protected DataProtectionTokenProviderOptions Options { get; private set; }
    protected IDataProtector Protector { get; private set; }
    public string Name { get; }
    public DataProtectorTokenProvider`1(IDataProtectionProvider dataProtectionProvider, IOptions`1<DataProtectionTokenProviderOptions> options);
    [CompilerGeneratedAttribute]
protected DataProtectionTokenProviderOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(DataProtectionTokenProviderOptions value);
    [CompilerGeneratedAttribute]
protected IDataProtector get_Protector();
    [CompilerGeneratedAttribute]
private void set_Protector(IDataProtector value);
    public string get_Name();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1/<GenerateAsync>d__11")]
public virtual Task`1<string> GenerateAsync(string purpose, UserManager`1<TUser> manager, TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1/<ValidateAsync>d__12")]
public virtual Task`1<bool> ValidateAsync(string purpose, string token, UserManager`1<TUser> manager, TUser user);
    public virtual Task`1<bool> CanGenerateTwoFactorTokenAsync(UserManager`1<TUser> manager, TUser user);
}
public class Microsoft.AspNetCore.Identity.ExternalLoginInfo : UserLoginInfo {
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <Principal>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<AuthenticationToken> <AuthenticationTokens>k__BackingField;
    public ClaimsPrincipal Principal { get; public set; }
    public IEnumerable`1<AuthenticationToken> AuthenticationTokens { get; public set; }
    public ExternalLoginInfo(ClaimsPrincipal principal, string loginProvider, string providerKey, string displayName);
    [CompilerGeneratedAttribute]
public ClaimsPrincipal get_Principal();
    [CompilerGeneratedAttribute]
public void set_Principal(ClaimsPrincipal value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<AuthenticationToken> get_AuthenticationTokens();
    [CompilerGeneratedAttribute]
public void set_AuthenticationTokens(IEnumerable`1<AuthenticationToken> value);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Identity.IdentityBuilderExtensions : object {
    [ExtensionAttribute]
public static IdentityBuilder AddDefaultTokenProviders(IdentityBuilder builder);
    [ExtensionAttribute]
private static void AddSignInManagerDeps(IdentityBuilder builder);
    [ExtensionAttribute]
public static IdentityBuilder AddSignInManager(IdentityBuilder builder);
    [ExtensionAttribute]
public static IdentityBuilder AddSignInManager(IdentityBuilder builder);
}
public class Microsoft.AspNetCore.Identity.IdentityConstants : object {
    private static string CookiePrefix;
    public static string ApplicationScheme;
    public static string ExternalScheme;
    public static string TwoFactorRememberMeScheme;
    public static string TwoFactorUserIdScheme;
    private static IdentityConstants();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Identity.IdentityCookieAuthenticationBuilderExtensions : object {
    [ExtensionAttribute]
public static IdentityCookiesBuilder AddIdentityCookies(AuthenticationBuilder builder);
    [ExtensionAttribute]
public static IdentityCookiesBuilder AddIdentityCookies(AuthenticationBuilder builder, Action`1<IdentityCookiesBuilder> configureCookies);
    [ExtensionAttribute]
public static OptionsBuilder`1<CookieAuthenticationOptions> AddApplicationCookie(AuthenticationBuilder builder);
    [ExtensionAttribute]
public static OptionsBuilder`1<CookieAuthenticationOptions> AddExternalCookie(AuthenticationBuilder builder);
    [ExtensionAttribute]
public static OptionsBuilder`1<CookieAuthenticationOptions> AddTwoFactorRememberMeCookie(AuthenticationBuilder builder);
    [ExtensionAttribute]
public static OptionsBuilder`1<CookieAuthenticationOptions> AddTwoFactorUserIdCookie(AuthenticationBuilder builder);
}
public class Microsoft.AspNetCore.Identity.IdentityCookiesBuilder : object {
    [CompilerGeneratedAttribute]
private OptionsBuilder`1<CookieAuthenticationOptions> <ApplicationCookie>k__BackingField;
    [CompilerGeneratedAttribute]
private OptionsBuilder`1<CookieAuthenticationOptions> <ExternalCookie>k__BackingField;
    [CompilerGeneratedAttribute]
private OptionsBuilder`1<CookieAuthenticationOptions> <TwoFactorRememberMeCookie>k__BackingField;
    [CompilerGeneratedAttribute]
private OptionsBuilder`1<CookieAuthenticationOptions> <TwoFactorUserIdCookie>k__BackingField;
    public OptionsBuilder`1<CookieAuthenticationOptions> ApplicationCookie { get; public set; }
    public OptionsBuilder`1<CookieAuthenticationOptions> ExternalCookie { get; public set; }
    public OptionsBuilder`1<CookieAuthenticationOptions> TwoFactorRememberMeCookie { get; public set; }
    public OptionsBuilder`1<CookieAuthenticationOptions> TwoFactorUserIdCookie { get; public set; }
    [CompilerGeneratedAttribute]
public OptionsBuilder`1<CookieAuthenticationOptions> get_ApplicationCookie();
    [CompilerGeneratedAttribute]
public void set_ApplicationCookie(OptionsBuilder`1<CookieAuthenticationOptions> value);
    [CompilerGeneratedAttribute]
public OptionsBuilder`1<CookieAuthenticationOptions> get_ExternalCookie();
    [CompilerGeneratedAttribute]
public void set_ExternalCookie(OptionsBuilder`1<CookieAuthenticationOptions> value);
    [CompilerGeneratedAttribute]
public OptionsBuilder`1<CookieAuthenticationOptions> get_TwoFactorRememberMeCookie();
    [CompilerGeneratedAttribute]
public void set_TwoFactorRememberMeCookie(OptionsBuilder`1<CookieAuthenticationOptions> value);
    [CompilerGeneratedAttribute]
public OptionsBuilder`1<CookieAuthenticationOptions> get_TwoFactorUserIdCookie();
    [CompilerGeneratedAttribute]
public void set_TwoFactorUserIdCookie(OptionsBuilder`1<CookieAuthenticationOptions> value);
}
public interface Microsoft.AspNetCore.Identity.ISecurityStampValidator {
    public abstract virtual Task ValidateAsync(CookieValidatePrincipalContext context);
}
public interface Microsoft.AspNetCore.Identity.ITwoFactorSecurityStampValidator {
}
internal static class Microsoft.AspNetCore.Identity.Resources : object {
    private static ResourceManager _resourceManager;
    internal static string InvalidManagerType { get; }
    internal static string InvalidPasswordHasherCompatibilityMode { get; }
    internal static string InvalidPasswordHasherIterationCount { get; }
    private static Resources();
    internal static string get_InvalidManagerType();
    internal static string FormatInvalidManagerType(object p0, object p1, object p2);
    internal static string get_InvalidPasswordHasherCompatibilityMode();
    internal static string FormatInvalidPasswordHasherCompatibilityMode();
    internal static string get_InvalidPasswordHasherIterationCount();
    internal static string FormatInvalidPasswordHasherIterationCount();
    private static string GetString(string name, String[] formatterNames);
}
public class Microsoft.AspNetCore.Identity.SecurityStampRefreshingPrincipalContext : object {
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <CurrentPrincipal>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <NewPrincipal>k__BackingField;
    public ClaimsPrincipal CurrentPrincipal { get; public set; }
    public ClaimsPrincipal NewPrincipal { get; public set; }
    [CompilerGeneratedAttribute]
public ClaimsPrincipal get_CurrentPrincipal();
    [CompilerGeneratedAttribute]
public void set_CurrentPrincipal(ClaimsPrincipal value);
    [CompilerGeneratedAttribute]
public ClaimsPrincipal get_NewPrincipal();
    [CompilerGeneratedAttribute]
public void set_NewPrincipal(ClaimsPrincipal value);
}
public static class Microsoft.AspNetCore.Identity.SecurityStampValidator : object {
    public static Task ValidatePrincipalAsync(CookieValidatePrincipalContext context);
    public static Task ValidateAsync(CookieValidatePrincipalContext context);
}
public class Microsoft.AspNetCore.Identity.SecurityStampValidator`1 : object {
    [CompilerGeneratedAttribute]
private SignInManager`1<TUser> <SignInManager>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityStampValidatorOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private ISystemClock <Clock>k__BackingField;
    public SignInManager`1<TUser> SignInManager { get; }
    public SecurityStampValidatorOptions Options { get; }
    public ISystemClock Clock { get; }
    public SecurityStampValidator`1(IOptions`1<SecurityStampValidatorOptions> options, SignInManager`1<TUser> signInManager, ISystemClock clock);
    [CompilerGeneratedAttribute]
public SignInManager`1<TUser> get_SignInManager();
    [CompilerGeneratedAttribute]
public SecurityStampValidatorOptions get_Options();
    [CompilerGeneratedAttribute]
public ISystemClock get_Clock();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SecurityStampValidator`1/<SecurityStampVerified>d__10")]
protected virtual Task SecurityStampVerified(TUser user, CookieValidatePrincipalContext context);
    protected virtual Task`1<TUser> VerifySecurityStamp(ClaimsPrincipal principal);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SecurityStampValidator`1/<ValidateAsync>d__12")]
public virtual Task ValidateAsync(CookieValidatePrincipalContext context);
}
public class Microsoft.AspNetCore.Identity.SecurityStampValidatorOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <ValidationInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<SecurityStampRefreshingPrincipalContext, Task> <OnRefreshingPrincipal>k__BackingField;
    public TimeSpan ValidationInterval { get; public set; }
    public Func`2<SecurityStampRefreshingPrincipalContext, Task> OnRefreshingPrincipal { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_ValidationInterval();
    [CompilerGeneratedAttribute]
public void set_ValidationInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public Func`2<SecurityStampRefreshingPrincipalContext, Task> get_OnRefreshingPrincipal();
    [CompilerGeneratedAttribute]
public void set_OnRefreshingPrincipal(Func`2<SecurityStampRefreshingPrincipalContext, Task> value);
}
public class Microsoft.AspNetCore.Identity.SignInManager`1 : object {
    private static string LoginProviderKey;
    private static string XsrfKey;
    private IHttpContextAccessor _contextAccessor;
    private HttpContext _context;
    private IAuthenticationSchemeProvider _schemes;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private UserManager`1<TUser> <UserManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IUserClaimsPrincipalFactory`1<TUser> <ClaimsFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityOptions <Options>k__BackingField;
    public ILogger Logger { get; public set; }
    public UserManager`1<TUser> UserManager { get; public set; }
    public IUserClaimsPrincipalFactory`1<TUser> ClaimsFactory { get; public set; }
    public IdentityOptions Options { get; public set; }
    public HttpContext Context { get; public set; }
    public SignInManager`1(UserManager`1<TUser> userManager, IHttpContextAccessor contextAccessor, IUserClaimsPrincipalFactory`1<TUser> claimsFactory, IOptions`1<IdentityOptions> optionsAccessor, ILogger`1<SignInManager`1<TUser>> logger, IAuthenticationSchemeProvider schemes);
    [CompilerGeneratedAttribute]
public virtual ILogger get_Logger();
    [CompilerGeneratedAttribute]
public virtual void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public UserManager`1<TUser> get_UserManager();
    [CompilerGeneratedAttribute]
public void set_UserManager(UserManager`1<TUser> value);
    [CompilerGeneratedAttribute]
public IUserClaimsPrincipalFactory`1<TUser> get_ClaimsFactory();
    [CompilerGeneratedAttribute]
public void set_ClaimsFactory(IUserClaimsPrincipalFactory`1<TUser> value);
    [CompilerGeneratedAttribute]
public IdentityOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(IdentityOptions value);
    public HttpContext get_Context();
    public void set_Context(HttpContext value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<CreateUserPrincipalAsync>d__25")]
public virtual Task`1<ClaimsPrincipal> CreateUserPrincipalAsync(TUser user);
    public virtual bool IsSignedIn(ClaimsPrincipal principal);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<CanSignInAsync>d__27")]
public virtual Task`1<bool> CanSignInAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<RefreshSignInAsync>d__28")]
public virtual Task RefreshSignInAsync(TUser user);
    public virtual Task SignInAsync(TUser user, bool isPersistent, string authenticationMethod);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<SignInAsync>d__30")]
public virtual Task SignInAsync(TUser user, AuthenticationProperties authenticationProperties, string authenticationMethod);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<SignOutAsync>d__31")]
public virtual Task SignOutAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<ValidateSecurityStampAsync>d__32")]
public virtual Task`1<TUser> ValidateSecurityStampAsync(ClaimsPrincipal principal);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<ValidateTwoFactorSecurityStampAsync>d__33")]
public virtual Task`1<TUser> ValidateTwoFactorSecurityStampAsync(ClaimsPrincipal principal);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<ValidateSecurityStampAsync>d__34")]
public virtual Task`1<bool> ValidateSecurityStampAsync(TUser user, string securityStamp);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<PasswordSignInAsync>d__35")]
public virtual Task`1<SignInResult> PasswordSignInAsync(TUser user, string password, bool isPersistent, bool lockoutOnFailure);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<PasswordSignInAsync>d__36")]
public virtual Task`1<SignInResult> PasswordSignInAsync(string userName, string password, bool isPersistent, bool lockoutOnFailure);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<CheckPasswordSignInAsync>d__37")]
public virtual Task`1<SignInResult> CheckPasswordSignInAsync(TUser user, string password, bool lockoutOnFailure);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<IsTwoFactorClientRememberedAsync>d__38")]
public virtual Task`1<bool> IsTwoFactorClientRememberedAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<RememberTwoFactorClientAsync>d__39")]
public virtual Task RememberTwoFactorClientAsync(TUser user);
    public virtual Task ForgetTwoFactorClientAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<TwoFactorRecoveryCodeSignInAsync>d__41")]
public virtual Task`1<SignInResult> TwoFactorRecoveryCodeSignInAsync(string recoveryCode);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<DoTwoFactorSignInAsync>d__42")]
private Task DoTwoFactorSignInAsync(TUser user, TwoFactorAuthenticationInfo<TUser> twoFactorInfo, bool isPersistent, bool rememberClient);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<TwoFactorAuthenticatorSignInAsync>d__43")]
public virtual Task`1<SignInResult> TwoFactorAuthenticatorSignInAsync(string code, bool isPersistent, bool rememberClient);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<TwoFactorSignInAsync>d__44")]
public virtual Task`1<SignInResult> TwoFactorSignInAsync(string provider, string code, bool isPersistent, bool rememberClient);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<GetTwoFactorAuthenticationUserAsync>d__45")]
public virtual Task`1<TUser> GetTwoFactorAuthenticationUserAsync();
    public virtual Task`1<SignInResult> ExternalLoginSignInAsync(string loginProvider, string providerKey, bool isPersistent);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<ExternalLoginSignInAsync>d__47")]
public virtual Task`1<SignInResult> ExternalLoginSignInAsync(string loginProvider, string providerKey, bool isPersistent, bool bypassTwoFactor);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<GetExternalAuthenticationSchemesAsync>d__48")]
public virtual Task`1<IEnumerable`1<AuthenticationScheme>> GetExternalAuthenticationSchemesAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<GetExternalLoginInfoAsync>d__49")]
public virtual Task`1<ExternalLoginInfo> GetExternalLoginInfoAsync(string expectedXsrf);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<UpdateExternalAuthenticationTokensAsync>d__50")]
public virtual Task`1<IdentityResult> UpdateExternalAuthenticationTokensAsync(ExternalLoginInfo externalLogin);
    public virtual AuthenticationProperties ConfigureExternalAuthenticationProperties(string provider, string redirectUrl, string userId);
    internal ClaimsPrincipal StoreTwoFactorInfo(string userId, string loginProvider);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<StoreRememberClient>d__53")]
internal Task`1<ClaimsPrincipal> StoreRememberClient(TUser user);
    private ClaimsIdentity CreateIdentity(TwoFactorAuthenticationInfo<TUser> info);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<IsTfaEnabled>d__55")]
private Task`1<bool> IsTfaEnabled(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<SignInOrTwoFactorAsync>d__56")]
protected virtual Task`1<SignInResult> SignInOrTwoFactorAsync(TUser user, bool isPersistent, string loginProvider, bool bypassTwoFactor);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<RetrieveTwoFactorInfoAsync>d__57")]
private Task`1<TwoFactorAuthenticationInfo<TUser>> RetrieveTwoFactorInfoAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<IsLockedOut>d__58")]
protected virtual Task`1<bool> IsLockedOut(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<LockedOut>d__59")]
protected virtual Task`1<SignInResult> LockedOut(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.SignInManager`1/<PreSignInCheck>d__60")]
protected virtual Task`1<SignInResult> PreSignInCheck(TUser user);
    protected virtual Task ResetLockout(TUser user);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Identity.StreamExtensions : object {
    internal static Encoding DefaultEncoding;
    private static StreamExtensions();
    [ExtensionAttribute]
public static BinaryReader CreateReader(Stream stream);
    [ExtensionAttribute]
public static BinaryWriter CreateWriter(Stream stream);
    [ExtensionAttribute]
public static DateTimeOffset ReadDateTimeOffset(BinaryReader reader);
    [ExtensionAttribute]
public static void Write(BinaryWriter writer, DateTimeOffset value);
}
public class Microsoft.AspNetCore.Identity.TwoFactorSecurityStampValidator`1 : SecurityStampValidator`1<TUser> {
    public TwoFactorSecurityStampValidator`1(IOptions`1<SecurityStampValidatorOptions> options, SignInManager`1<TUser> signInManager, ISystemClock clock);
    protected virtual Task`1<TUser> VerifySecurityStamp(ClaimsPrincipal principal);
    protected virtual Task SecurityStampVerified(TUser user, CookieValidatePrincipalContext context);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IdentityBuilder AddIdentity(IServiceCollection services);
    [ExtensionAttribute]
public static IdentityBuilder AddIdentity(IServiceCollection services, Action`1<IdentityOptions> setupAction);
    [ExtensionAttribute]
public static IServiceCollection ConfigureApplicationCookie(IServiceCollection services, Action`1<CookieAuthenticationOptions> configure);
    [ExtensionAttribute]
public static IServiceCollection ConfigureExternalCookie(IServiceCollection services, Action`1<CookieAuthenticationOptions> configure);
}
