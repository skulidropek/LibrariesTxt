internal class Microsoft.AspNetCore.Mvc.Razor.Extensions.CreateNewOnMetadataUpdateAttributePass : IntermediateNodePassBase {
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
internal class Microsoft.AspNetCore.Mvc.Razor.Extensions.ExtensionInitializer : RazorExtensionInitializer {
    public virtual void Initialize(RazorProjectEngineBuilder builder);
}
public interface Microsoft.AspNetCore.Mvc.Razor.Extensions.IInjectTargetExtension {
    public abstract virtual void WriteInjectProperty(CodeRenderingContext context, InjectIntermediateNode node);
}
public static class Microsoft.AspNetCore.Mvc.Razor.Extensions.InjectDirective : object {
    public static DirectiveDescriptor Directive;
    private static InjectDirective();
    public static RazorProjectEngineBuilder Register(RazorProjectEngineBuilder builder);
    [ObsoleteAttribute("This method is obsolete and will be removed in a future version.")]
public static IRazorEngineBuilder Register(IRazorEngineBuilder builder);
}
public class Microsoft.AspNetCore.Mvc.Razor.Extensions.InjectIntermediateNode : ExtensionIntermediateNode {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    public string TypeName { get; public set; }
    public string MemberName { get; public set; }
    public IntermediateNodeCollection Children { get; }
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
public void set_MemberName(string value);
    public virtual IntermediateNodeCollection get_Children();
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void WriteNode(CodeTarget target, CodeRenderingContext context);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Mvc.Razor.Extensions.InjectTargetExtension : object {
    private static string RazorInjectAttribute;
    public sealed virtual void WriteInjectProperty(CodeRenderingContext context, InjectIntermediateNode node);
}
public interface Microsoft.AspNetCore.Mvc.Razor.Extensions.IViewComponentTagHelperTargetExtension {
    public abstract virtual void WriteViewComponentTagHelper(CodeRenderingContext context, ViewComponentTagHelperIntermediateNode node);
}
public static class Microsoft.AspNetCore.Mvc.Razor.Extensions.ModelDirective : object {
    public static DirectiveDescriptor Directive;
    private static ModelDirective();
    public static RazorProjectEngineBuilder Register(RazorProjectEngineBuilder builder);
    public static string GetModelType(DocumentIntermediateNode document);
    private static string GetModelType(DocumentIntermediateNode document, Visitor visitor);
    [ObsoleteAttribute("This method is obsolete and will be removed in a future version.")]
public static IRazorEngineBuilder Register(IRazorEngineBuilder builder);
}
public class Microsoft.AspNetCore.Mvc.Razor.Extensions.ModelExpressionPass : IntermediateNodePassBase {
    private static string ModelExpressionTypeName;
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
internal class Microsoft.AspNetCore.Mvc.Razor.Extensions.MvcImportProjectFeature : RazorProjectEngineFeatureBase {
    private static string ImportsFileName;
    public sealed virtual IReadOnlyList`1<RazorProjectItem> GetImports(RazorProjectItem projectItem);
    internal static void AddDefaultDirectivesImport(List`1<RazorProjectItem> imports);
    internal void AddHierarchicalImports(RazorProjectItem projectItem, List`1<RazorProjectItem> imports);
}
public class Microsoft.AspNetCore.Mvc.Razor.Extensions.MvcViewDocumentClassifierPass : DocumentClassifierPassBase {
    private bool _useConsolidatedMvcViews;
    public static string MvcViewDocumentKind;
    protected string DocumentKind { get; }
    public MvcViewDocumentClassifierPass(bool useConsolidatedMvcViews);
    private static MvcViewDocumentClassifierPass();
    protected virtual string get_DocumentKind();
    protected virtual bool IsMatch(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
    protected virtual void OnDocumentStructureCreated(RazorCodeDocument codeDocument, NamespaceDeclarationIntermediateNode namespace, ClassDeclarationIntermediateNode class, MethodDeclarationIntermediateNode method);
    private bool TryComputeClassName(RazorCodeDocument codeDocument, String& className);
    private static string GetClassNameFromPath(string path);
}
public class Microsoft.AspNetCore.Mvc.Razor.Extensions.PageDirective : object {
    public static DirectiveDescriptor Directive;
    [CompilerGeneratedAttribute]
private string <RouteTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateNode <DirectiveNode>k__BackingField;
    public string RouteTemplate { get; }
    public IntermediateNode DirectiveNode { get; }
    private PageDirective(string routeTemplate, IntermediateNode directiveNode);
    private static PageDirective();
    [CompilerGeneratedAttribute]
public string get_RouteTemplate();
    [CompilerGeneratedAttribute]
public IntermediateNode get_DirectiveNode();
    public static RazorProjectEngineBuilder Register(RazorProjectEngineBuilder builder);
    public static bool TryGetPageDirective(DocumentIntermediateNode documentNode, PageDirective& pageDirective);
    private static string TrimQuotes(string content);
    [ObsoleteAttribute("This method is obsolete and will be removed in a future version.")]
public static IRazorEngineBuilder Register(IRazorEngineBuilder builder);
}
public class Microsoft.AspNetCore.Mvc.Razor.Extensions.PagesPropertyInjectionPass : IntermediateNodePassBase {
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
public static class Microsoft.AspNetCore.Mvc.Razor.Extensions.RazorExtensions : object {
    public static void Register(RazorProjectEngineBuilder builder);
}
internal class Microsoft.AspNetCore.Mvc.Razor.Extensions.RazorExtensionsDiagnosticFactory : object {
    private static string DiagnosticPrefix;
    internal static RazorDiagnosticDescriptor ViewComponent_CannotFindMethod;
    internal static RazorDiagnosticDescriptor ViewComponent_AmbiguousMethods;
    internal static RazorDiagnosticDescriptor ViewComponent_AsyncMethod_ShouldReturnTask;
    internal static RazorDiagnosticDescriptor ViewComponent_SyncMethod_ShouldReturnValue;
    internal static RazorDiagnosticDescriptor ViewComponent_SyncMethod_CannotReturnTask;
    internal static RazorDiagnosticDescriptor PageDirective_CannotBeImported;
    internal static RazorDiagnosticDescriptor PageDirective_MustExistAtTheTopOfFile;
    private static RazorExtensionsDiagnosticFactory();
    public static RazorDiagnostic CreateViewComponent_CannotFindMethod(string tagHelperType);
    public static RazorDiagnostic CreateViewComponent_AmbiguousMethods(string tagHelperType);
    public static RazorDiagnostic CreateViewComponent_AsyncMethod_ShouldReturnTask(string tagHelperType);
    public static RazorDiagnostic CreateViewComponent_SyncMethod_ShouldReturnValue(string tagHelperType);
    public static RazorDiagnostic CreateViewComponent_SyncMethod_CannotReturnTask(string tagHelperType);
    public static RazorDiagnostic CreatePageDirective_CannotBeImported(SourceSpan source);
    public static RazorDiagnostic CreatePageDirective_MustExistAtTheTopOfFile(SourceSpan source);
}
internal static class Microsoft.AspNetCore.Mvc.Razor.Extensions.RazorExtensionsResources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string ArgumentCannotBeNullOrEmpty { get; }
    internal static string InjectDirective_Description { get; }
    internal static string InjectDirective_MemberToken_Description { get; }
    internal static string InjectDirective_MemberToken_Name { get; }
    internal static string InjectDirective_TypeToken_Description { get; }
    internal static string InjectDirective_TypeToken_Name { get; }
    internal static string ModelDirective_Description { get; }
    internal static string ModelDirective_TypeToken_Description { get; }
    internal static string ModelDirective_TypeToken_Name { get; }
    internal static string MvcRazorCodeParser_CannotHaveModelAndInheritsKeyword { get; }
    internal static string MvcRazorCodeParser_InjectDirectivePropertyNameRequired { get; }
    internal static string MvcRazorCodeParser_KeywordMustBeFollowedByTypeName { get; }
    internal static string MvcRazorCodeParser_OnlyOneModelStatementIsAllowed { get; }
    internal static string MvcRazorParser_InvalidPropertyType { get; }
    internal static string PageDirectiveCannotBeImported { get; }
    internal static string PageDirectiveMustExistAtTheTopOfFile { get; }
    internal static string PageDirective_Description { get; }
    internal static string PageDirective_RouteToken_Description { get; }
    internal static string PageDirective_RouteToken_Name { get; }
    internal static string ViewComponent_AmbiguousMethods { get; }
    internal static string ViewComponent_AsyncMethod_ShouldReturnTask { get; }
    internal static string ViewComponent_CannotFindMethod { get; }
    internal static string ViewComponent_SyncMethod_CannotReturnTask { get; }
    internal static string ViewComponent_SyncMethod_ShouldReturnValue { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_ArgumentCannotBeNullOrEmpty();
    internal static string get_InjectDirective_Description();
    internal static string get_InjectDirective_MemberToken_Description();
    internal static string get_InjectDirective_MemberToken_Name();
    internal static string get_InjectDirective_TypeToken_Description();
    internal static string get_InjectDirective_TypeToken_Name();
    internal static string get_ModelDirective_Description();
    internal static string get_ModelDirective_TypeToken_Description();
    internal static string get_ModelDirective_TypeToken_Name();
    internal static string get_MvcRazorCodeParser_CannotHaveModelAndInheritsKeyword();
    internal static string FormatMvcRazorCodeParser_CannotHaveModelAndInheritsKeyword(object p0);
    internal static string get_MvcRazorCodeParser_InjectDirectivePropertyNameRequired();
    internal static string FormatMvcRazorCodeParser_InjectDirectivePropertyNameRequired(object p0);
    internal static string get_MvcRazorCodeParser_KeywordMustBeFollowedByTypeName();
    internal static string FormatMvcRazorCodeParser_KeywordMustBeFollowedByTypeName(object p0);
    internal static string get_MvcRazorCodeParser_OnlyOneModelStatementIsAllowed();
    internal static string FormatMvcRazorCodeParser_OnlyOneModelStatementIsAllowed(object p0);
    internal static string get_MvcRazorParser_InvalidPropertyType();
    internal static string FormatMvcRazorParser_InvalidPropertyType(object p0, object p1, object p2);
    internal static string get_PageDirectiveCannotBeImported();
    internal static string FormatPageDirectiveCannotBeImported(object p0, object p1);
    internal static string get_PageDirectiveMustExistAtTheTopOfFile();
    internal static string FormatPageDirectiveMustExistAtTheTopOfFile(object p0);
    internal static string get_PageDirective_Description();
    internal static string get_PageDirective_RouteToken_Description();
    internal static string get_PageDirective_RouteToken_Name();
    internal static string get_ViewComponent_AmbiguousMethods();
    internal static string FormatViewComponent_AmbiguousMethods(object p0, object p1, object p2);
    internal static string get_ViewComponent_AsyncMethod_ShouldReturnTask();
    internal static string FormatViewComponent_AsyncMethod_ShouldReturnTask(object p0, object p1, object p2);
    internal static string get_ViewComponent_CannotFindMethod();
    internal static string FormatViewComponent_CannotFindMethod(object p0, object p1, object p2);
    internal static string get_ViewComponent_SyncMethod_CannotReturnTask();
    internal static string FormatViewComponent_SyncMethod_CannotReturnTask(object p0, object p1, object p2);
    internal static string get_ViewComponent_SyncMethod_ShouldReturnValue();
    internal static string FormatViewComponent_SyncMethod_ShouldReturnValue(object p0, object p1);
}
public class Microsoft.AspNetCore.Mvc.Razor.Extensions.RazorPageDocumentClassifierPass : DocumentClassifierPassBase {
    private bool _useConsolidatedMvcViews;
    public static string RazorPageDocumentKind;
    public static string RouteTemplateKey;
    private static RazorProjectEngine LeadingDirectiveParsingEngine;
    protected string DocumentKind { get; }
    public RazorPageDocumentClassifierPass(bool useConsolidatedMvcViews);
    private static RazorPageDocumentClassifierPass();
    protected virtual string get_DocumentKind();
    protected virtual bool IsMatch(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
    protected virtual void OnDocumentStructureCreated(RazorCodeDocument codeDocument, NamespaceDeclarationIntermediateNode namespace, ClassDeclarationIntermediateNode class, MethodDeclarationIntermediateNode method);
    private static void AddRouteTemplateMetadataAttribute(NamespaceDeclarationIntermediateNode namespace, ClassDeclarationIntermediateNode class, PageDirective pageDirective);
    private void EnsureValidPageDirective(RazorCodeDocument codeDocument, PageDirective pageDirective);
    private bool TryComputeClassName(RazorCodeDocument codeDocument, String& className);
    private static string GetClassNameFromPath(string path);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Mvc.Razor.Extensions.TagHelperDescriptorExtensions : object {
    [ExtensionAttribute]
public static bool IsViewComponentKind(TagHelperDescriptor tagHelper);
    [ExtensionAttribute]
public static string GetViewComponentName(TagHelperDescriptor tagHelper);
}
public static class Microsoft.AspNetCore.Mvc.Razor.Extensions.ViewComponentTagHelperConventions : object {
    public static string Kind;
    private static ViewComponentTagHelperConventions();
}
internal class Microsoft.AspNetCore.Mvc.Razor.Extensions.ViewComponentTagHelperDescriptorFactory : object {
    private INamedTypeSymbol _viewComponentAttributeSymbol;
    private INamedTypeSymbol _genericTaskSymbol;
    private INamedTypeSymbol _taskSymbol;
    private INamedTypeSymbol _iDictionarySymbol;
    private static SymbolDisplayFormat FullNameTypeDisplayFormat;
    private static IReadOnlyDictionary`2<string, string> PrimitiveDisplayTypeNameLookups;
    public ViewComponentTagHelperDescriptorFactory(Compilation compilation);
    private static ViewComponentTagHelperDescriptorFactory();
    public virtual TagHelperDescriptor CreateDescriptor(INamedTypeSymbol type);
    private bool TryFindInvokeMethod(INamedTypeSymbol type, IMethodSymbol& method, RazorDiagnostic& diagnostic);
    private static IReadOnlyList`1<IMethodSymbol> GetInvokeMethods(INamedTypeSymbol type);
    private void AddRequiredAttributes(ImmutableArray`1<IParameterSymbol> methodParameters, TagMatchingRuleDescriptorBuilder builder);
    private void AddBoundAttributes(ImmutableArray`1<IParameterSymbol> methodParameters, string containingDisplayName, TagHelperDescriptorBuilder builder);
    private string GetIndexerValueTypeName(IParameterSymbol parameter);
    private string GetShortName(INamedTypeSymbol componentType);
    [CompilerGeneratedAttribute]
private bool <GetIndexerValueTypeName>b__12_0(INamedTypeSymbol s);
    [CompilerGeneratedAttribute]
private bool <GetIndexerValueTypeName>b__12_1(INamedTypeSymbol s);
    [CompilerGeneratedAttribute]
private bool <GetShortName>b__13_0(AttributeData a);
}
public class Microsoft.AspNetCore.Mvc.Razor.Extensions.ViewComponentTagHelperDescriptorProvider : RazorEngineFeatureBase {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public sealed virtual void Execute(TagHelperDescriptorProviderContext context);
    private bool IsTagHelperAssembly(IAssemblySymbol assembly);
}
public class Microsoft.AspNetCore.Mvc.Razor.Extensions.ViewComponentTagHelperIntermediateNode : ExtensionIntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private TagHelperDescriptor <TagHelper>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string ClassName { get; public set; }
    public TagHelperDescriptor TagHelper { get; public set; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_ClassName();
    [CompilerGeneratedAttribute]
public void set_ClassName(string value);
    [CompilerGeneratedAttribute]
public TagHelperDescriptor get_TagHelper();
    [CompilerGeneratedAttribute]
public void set_TagHelper(TagHelperDescriptor value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void WriteNode(CodeTarget target, CodeRenderingContext context);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public static class Microsoft.AspNetCore.Mvc.Razor.Extensions.ViewComponentTagHelperMetadata : object {
    public static string Name;
    private static ViewComponentTagHelperMetadata();
}
public class Microsoft.AspNetCore.Mvc.Razor.Extensions.ViewComponentTagHelperPass : IntermediateNodePassBase {
    public int Order { get; }
    public virtual int get_Order();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
    private void RewriteUsage(Context context, TagHelperIntermediateNode node, TagHelperDescriptor tagHelper);
    private void AddField(Context context, TagHelperDescriptor tagHelper);
    private void AddTagHelperClass(Context context, TagHelperDescriptor tagHelper);
}
internal class Microsoft.AspNetCore.Mvc.Razor.Extensions.ViewComponentTagHelperTargetExtension : object {
    private static String[] PublicModifiers;
    [CompilerGeneratedAttribute]
private string <TagHelperTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ViewComponentHelperTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ViewComponentHelperVariableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ViewComponentInvokeMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlAttributeNotBoundAttributeTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ViewContextAttributeTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ViewContextTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ViewContextPropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlTargetElementAttributeTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagHelperProcessMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagHelperProcessInvokeAsyncArgsMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagHelperContextTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagHelperContextVariableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagHelperContextAttributesVariableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagHelperOutputTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagHelperOutputVariableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagHelperOutputTagNamePropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagHelperOutputContentPropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagHelperContentSetMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagHelperContentVariableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IViewContextAwareTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IViewContextAwareContextualizeMethodName>k__BackingField;
    public string TagHelperTypeName { get; public set; }
    public string ViewComponentHelperTypeName { get; public set; }
    public string ViewComponentHelperVariableName { get; public set; }
    public string ViewComponentInvokeMethodName { get; public set; }
    public string HtmlAttributeNotBoundAttributeTypeName { get; public set; }
    public string ViewContextAttributeTypeName { get; public set; }
    public string ViewContextTypeName { get; public set; }
    public string ViewContextPropertyName { get; public set; }
    public string HtmlTargetElementAttributeTypeName { get; public set; }
    public string TagHelperProcessMethodName { get; public set; }
    public string TagHelperProcessInvokeAsyncArgsMethodName { get; public set; }
    public string TagHelperContextTypeName { get; public set; }
    public string TagHelperContextVariableName { get; public set; }
    public string TagHelperContextAttributesVariableName { get; public set; }
    public string TagHelperOutputTypeName { get; public set; }
    public string TagHelperOutputVariableName { get; public set; }
    public string TagHelperOutputTagNamePropertyName { get; public set; }
    public string TagHelperOutputContentPropertyName { get; public set; }
    public string TagHelperContentSetMethodName { get; public set; }
    public string TagHelperContentVariableName { get; public set; }
    public string IViewContextAwareTypeName { get; public set; }
    public string IViewContextAwareContextualizeMethodName { get; public set; }
    private static ViewComponentTagHelperTargetExtension();
    [CompilerGeneratedAttribute]
public string get_TagHelperTypeName();
    [CompilerGeneratedAttribute]
public void set_TagHelperTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ViewComponentHelperTypeName();
    [CompilerGeneratedAttribute]
public void set_ViewComponentHelperTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ViewComponentHelperVariableName();
    [CompilerGeneratedAttribute]
public void set_ViewComponentHelperVariableName(string value);
    [CompilerGeneratedAttribute]
public string get_ViewComponentInvokeMethodName();
    [CompilerGeneratedAttribute]
public void set_ViewComponentInvokeMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlAttributeNotBoundAttributeTypeName();
    [CompilerGeneratedAttribute]
public void set_HtmlAttributeNotBoundAttributeTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ViewContextAttributeTypeName();
    [CompilerGeneratedAttribute]
public void set_ViewContextAttributeTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ViewContextTypeName();
    [CompilerGeneratedAttribute]
public void set_ViewContextTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ViewContextPropertyName();
    [CompilerGeneratedAttribute]
public void set_ViewContextPropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlTargetElementAttributeTypeName();
    [CompilerGeneratedAttribute]
public void set_HtmlTargetElementAttributeTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_TagHelperProcessMethodName();
    [CompilerGeneratedAttribute]
public void set_TagHelperProcessMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_TagHelperProcessInvokeAsyncArgsMethodName();
    [CompilerGeneratedAttribute]
public void set_TagHelperProcessInvokeAsyncArgsMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_TagHelperContextTypeName();
    [CompilerGeneratedAttribute]
public void set_TagHelperContextTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_TagHelperContextVariableName();
    [CompilerGeneratedAttribute]
public void set_TagHelperContextVariableName(string value);
    [CompilerGeneratedAttribute]
public string get_TagHelperContextAttributesVariableName();
    [CompilerGeneratedAttribute]
public void set_TagHelperContextAttributesVariableName(string value);
    [CompilerGeneratedAttribute]
public string get_TagHelperOutputTypeName();
    [CompilerGeneratedAttribute]
public void set_TagHelperOutputTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_TagHelperOutputVariableName();
    [CompilerGeneratedAttribute]
public void set_TagHelperOutputVariableName(string value);
    [CompilerGeneratedAttribute]
public string get_TagHelperOutputTagNamePropertyName();
    [CompilerGeneratedAttribute]
public void set_TagHelperOutputTagNamePropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_TagHelperOutputContentPropertyName();
    [CompilerGeneratedAttribute]
public void set_TagHelperOutputContentPropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_TagHelperContentSetMethodName();
    [CompilerGeneratedAttribute]
public void set_TagHelperContentSetMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_TagHelperContentVariableName();
    [CompilerGeneratedAttribute]
public void set_TagHelperContentVariableName(string value);
    [CompilerGeneratedAttribute]
public string get_IViewContextAwareTypeName();
    [CompilerGeneratedAttribute]
public void set_IViewContextAwareTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_IViewContextAwareContextualizeMethodName();
    [CompilerGeneratedAttribute]
public void set_IViewContextAwareContextualizeMethodName(string value);
    public sealed virtual void WriteViewComponentTagHelper(CodeRenderingContext context, ViewComponentTagHelperIntermediateNode node);
    private void WriteConstructorString(CodeWriter writer, string className);
    private void WriteAttributeDeclarations(CodeWriter writer, TagHelperDescriptor tagHelper);
    private void WriteProcessMethodString(CodeWriter writer, TagHelperDescriptor tagHelper);
    private void WriteProcessInvokeAsyncArgsMethodString(CodeWriter writer, TagHelperDescriptor tagHelper);
    private String[] GetMethodParameters(TagHelperDescriptor tagHelper);
    private void WriteTargetElementString(CodeWriter writer, TagHelperDescriptor tagHelper);
}
internal static class Microsoft.AspNetCore.Mvc.Razor.Extensions.ViewComponentTypes : object {
    public static string Assembly;
    public static Version AssemblyVersion;
    public static string ViewComponentSuffix;
    public static string ViewComponentAttribute;
    public static string NonViewComponentAttribute;
    public static string GenericTask;
    public static string Task;
    public static string IDictionary;
    public static string AsyncMethodName;
    public static string SyncMethodName;
    private static ViewComponentTypes();
}
internal class Microsoft.AspNetCore.Mvc.Razor.Extensions.ViewComponentTypeVisitor : SymbolVisitor {
    private INamedTypeSymbol _viewComponentAttribute;
    private INamedTypeSymbol _nonViewComponentAttribute;
    private List`1<INamedTypeSymbol> _results;
    public ViewComponentTypeVisitor(INamedTypeSymbol viewComponentAttribute, INamedTypeSymbol nonViewComponentAttribute, List`1<INamedTypeSymbol> results);
    public virtual void VisitNamedType(INamedTypeSymbol symbol);
    public virtual void VisitNamespace(INamespaceSymbol symbol);
    internal bool IsViewComponent(INamedTypeSymbol symbol);
    private static bool AttributeIsDefined(INamedTypeSymbol type, INamedTypeSymbol queryAttribute);
}
internal static class Microsoft.AspNetCore.Razor.Language.Checksum : object {
    public static string BytesToString(Byte[] bytes);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriterExtensions : object {
    private static string InstanceMethodFormat;
    private static Char[] CStyleStringLiteralEscapeChars;
    private static CodeWriterExtensions();
    [ExtensionAttribute]
public static bool IsAtBeginningOfLine(CodeWriter writer);
    [ExtensionAttribute]
public static CodeWriter WritePadding(CodeWriter writer, int offset, Nullable`1<SourceSpan> span, CodeRenderingContext context);
    [ExtensionAttribute]
public static CodeWriter WriteVariableDeclaration(CodeWriter writer, string type, string name, string value);
    [ExtensionAttribute]
public static CodeWriter WriteBooleanLiteral(CodeWriter writer, bool value);
    [ExtensionAttribute]
public static CodeWriter WriteStartAssignment(CodeWriter writer, string name);
    [ExtensionAttribute]
public static CodeWriter WriteParameterSeparator(CodeWriter writer);
    [ExtensionAttribute]
public static CodeWriter WriteStartNewObject(CodeWriter writer, string typeName);
    [ExtensionAttribute]
public static CodeWriter WriteStringLiteral(CodeWriter writer, string literal);
    [ExtensionAttribute]
public static CodeWriter WriteUsing(CodeWriter writer, string name);
    [ExtensionAttribute]
public static CodeWriter WriteUsing(CodeWriter writer, string name, bool endLine);
    [ExtensionAttribute]
public static CodeWriter WriteEnhancedLineNumberDirective(CodeWriter writer, SourceSpan span, int characterOffset);
    [ExtensionAttribute]
public static CodeWriter WriteLineNumberDirective(CodeWriter writer, SourceSpan span);
    [ExtensionAttribute]
public static CodeWriter WriteStartMethodInvocation(CodeWriter writer, string methodName);
    [ExtensionAttribute]
public static CodeWriter WriteEndMethodInvocation(CodeWriter writer);
    [ExtensionAttribute]
public static CodeWriter WriteEndMethodInvocation(CodeWriter writer, bool endLine);
    [ExtensionAttribute]
public static CodeWriter WriteInstanceMethodInvocation(CodeWriter writer, string instanceName, string methodName, String[] parameters);
    [ExtensionAttribute]
public static CodeWriter WriteInstanceMethodInvocation(CodeWriter writer, string instanceName, string methodName, bool endLine, String[] parameters);
    [ExtensionAttribute]
public static CodeWriter WriteStartInstanceMethodInvocation(CodeWriter writer, string instanceName, string methodName);
    [ExtensionAttribute]
public static CodeWriter WriteField(CodeWriter writer, IList`1<string> suppressWarnings, IList`1<string> modifiers, string typeName, string fieldName);
    [ExtensionAttribute]
public static CodeWriter WriteMethodInvocation(CodeWriter writer, string methodName, String[] parameters);
    [ExtensionAttribute]
public static CodeWriter WriteMethodInvocation(CodeWriter writer, string methodName, bool endLine, String[] parameters);
    [ExtensionAttribute]
public static CodeWriter WriteAutoPropertyDeclaration(CodeWriter writer, IList`1<string> modifiers, string typeName, string propertyName);
    [ExtensionAttribute]
public static CSharpCodeWritingScope BuildScope(CodeWriter writer);
    [ExtensionAttribute]
public static CSharpCodeWritingScope BuildLambda(CodeWriter writer, String[] parameterNames);
    [ExtensionAttribute]
public static CSharpCodeWritingScope BuildAsyncLambda(CodeWriter writer, String[] parameterNames);
    private static CSharpCodeWritingScope BuildLambda(CodeWriter writer, bool async, String[] parameterNames);
    [ExtensionAttribute]
public static CSharpCodeWritingScope BuildNamespace(CodeWriter writer, string name);
    [ExtensionAttribute]
public static CSharpCodeWritingScope BuildClassDeclaration(CodeWriter writer, IList`1<string> modifiers, string name, string baseType, IList`1<string> interfaces, IList`1<ValueTuple`2<string, string>> typeParameters);
    [ExtensionAttribute]
public static CSharpCodeWritingScope BuildMethodDeclaration(CodeWriter writer, string accessibility, string returnType, string name, IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    [ExtensionAttribute]
public static IDisposable BuildLinePragma(CodeWriter writer, Nullable`1<SourceSpan> span, CodeRenderingContext context);
    [ExtensionAttribute]
public static IDisposable BuildEnhancedLinePragma(CodeWriter writer, Nullable`1<SourceSpan> span, CodeRenderingContext context, int characterOffset);
    private static void WriteVerbatimStringLiteral(CodeWriter writer, string literal);
    private static void WriteCStyleStringLiteral(CodeWriter writer, string literal);
    [CompilerGeneratedAttribute]
internal static int <WritePadding>g__CalculatePadding|3_0(<>c__DisplayClass3_0& );
}
internal static class Microsoft.AspNetCore.Razor.Language.CSharpIdentifier : object {
    private static bool IsIdentifierStart(char character);
    public static bool IsIdentifierPart(char character);
    private static bool IsIdentifierPartByUnicodeCategory(char character);
    public static string SanitizeIdentifier(StringSegment inputName);
    public static void AppendSanitized(StringBuilder builder, StringSegment inputName);
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Razor.StringSegment : ValueType {
    public static StringSegment Empty;
    [CompilerGeneratedAttribute]
private string <Buffer>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public string Buffer { get; }
    public int Offset { get; }
    public int Length { get; }
    public string Value { get; }
    public bool IsEmpty { get; }
    public bool HasValue { get; }
    public char Item { get; }
    public StringSegment(string buffer);
    public StringSegment(string buffer, int offset);
    public StringSegment(string buffer, int offset, int length);
    private static StringSegment();
    [CompilerGeneratedAttribute]
public string get_Buffer();
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public int get_Length();
    public string get_Value();
    public bool get_IsEmpty();
    public bool get_HasValue();
    public char get_Item(int index);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(StringSegment other);
    public bool Equals(StringSegment other, StringComparison comparisonType);
    public static bool Equals(StringSegment a, StringSegment b, StringComparison comparisonType);
    public sealed virtual bool Equals(string text);
    public bool Equals(string text, StringComparison comparisonType);
    public virtual int GetHashCode();
    public static bool op_Equality(StringSegment left, StringSegment right);
    public static bool op_Inequality(StringSegment left, StringSegment right);
    public static StringSegment op_Implicit(string value);
    public bool StartsWith(string text, StringComparison comparisonType);
    public bool StartsWith(StringSegment text, StringComparison comparisonType);
    public StringSegment Subsegment(int offset);
    public StringSegment Subsegment(int offset, int length);
    public int IndexOf(char c, int start, int count);
    public int IndexOf(char c, int start);
    public int IndexOf(char c);
    public int IndexOfAny(Char[] anyOf, int startIndex, int count);
    public int IndexOfAny(Char[] anyOf, int startIndex);
    public int IndexOfAny(Char[] anyOf);
    public static bool IsNullOrEmpty(StringSegment value);
    public virtual string ToString();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
