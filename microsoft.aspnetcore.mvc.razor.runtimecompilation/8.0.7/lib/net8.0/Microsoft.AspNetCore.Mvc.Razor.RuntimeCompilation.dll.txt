[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModelFactory : object {
    private static string IndexFileName;
    private RazorPagesOptions _options;
    private ILogger _logger;
    private string _normalizedRootDirectory;
    private string _normalizedAreaRootDirectory;
    public PageRouteModelFactory(RazorPagesOptions options, ILogger logger);
    private static PageRouteModelFactory();
    public PageRouteModel CreateRouteModel(string relativePath, string routeTemplate);
    [NullableContextAttribute("2")]
public PageRouteModel CreateAreaRouteModel(string relativePath, string routeTemplate);
    private static void PopulateRouteModel(PageRouteModel model, string pageRoute, string routeTemplate);
    internal bool TryParseAreaPath(string relativePath, ValueTuple`2& result);
    private static string GetViewEnginePath(string rootDirectory, string path);
    private static string CreateAreaRoute(string areaName, string viewEnginePath);
    private static SelectorModel CreateSelectorModel(string prefix, string routeTemplate);
    private static string NormalizeDirectory(string directory);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPartExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<string> GetReferencePaths(AssemblyPart assemblyPart);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation.ChecksumValidator : object {
    public static bool IsRecompilationSupported(RazorCompiledItem item);
    public static bool IsItemValid(RazorProjectFileSystem fileSystem, RazorCompiledItem item);
    private static ValueTuple`2<Byte[], string> ComputeChecksum(RazorProjectItem projectItem, string checksumAlgorithm);
    private static bool ChecksumsEqual(string checksum, Byte[] bytes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation.CompilationFailedException : Exception {
    [CompilerGeneratedAttribute]
private IEnumerable`1<CompilationFailure> <CompilationFailures>k__BackingField;
    public IEnumerable`1<CompilationFailure> CompilationFailures { get; }
    public CompilationFailedException(IEnumerable`1<CompilationFailure> compilationFailures);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<CompilationFailure> get_CompilationFailures();
    private static string FormatMessage(IEnumerable`1<CompilationFailure> compilationFailures);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation.CompilationFailedExceptionFactory : object {
    private static string CS0234;
    private static string CS0246;
    public static CompilationFailedException Create(RazorCodeDocument codeDocument, IEnumerable`1<RazorDiagnostic> diagnostics);
    public static CompilationFailedException Create(RazorCodeDocument codeDocument, string compilationContent, string assemblyName, IEnumerable`1<Diagnostic> diagnostics);
    private static string ReadContent(RazorCodeDocument codeDocument, string filePath);
    private static DiagnosticMessage GetDiagnosticMessage(Diagnostic diagnostic);
    private static DiagnosticMessage CreateDiagnosticMessage(RazorDiagnostic razorDiagnostic, string filePath);
    private static string GetFilePath(RazorCodeDocument codeDocument, Diagnostic diagnostic);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation.CSharpCompiler : object {
    private RazorReferenceManager _referenceManager;
    private IWebHostEnvironment _hostingEnvironment;
    private bool _optionsInitialized;
    private CSharpParseOptions _parseOptions;
    private CSharpCompilationOptions _compilationOptions;
    private EmitOptions _emitOptions;
    private bool _emitPdb;
    public CSharpParseOptions ParseOptions { get; }
    public CSharpCompilationOptions CSharpCompilationOptions { get; }
    public bool EmitPdb { get; }
    public EmitOptions EmitOptions { get; }
    public CSharpCompiler(RazorReferenceManager manager, IWebHostEnvironment hostingEnvironment);
    public virtual CSharpParseOptions get_ParseOptions();
    public virtual CSharpCompilationOptions get_CSharpCompilationOptions();
    public virtual bool get_EmitPdb();
    public virtual EmitOptions get_EmitOptions();
    public SyntaxTree CreateSyntaxTree(SourceText sourceText);
    public CSharpCompilation CreateCompilation(string assemblyName);
    protected internal virtual CompilationOptions GetDependencyContextCompilationOptions();
    [MemberNotNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private void EnsureOptions();
    private EmitOptions GetEmitOptions(CompilationOptions dependencyContextOptions);
    private static CSharpCompilationOptions GetCompilationOptions(IWebHostEnvironment hostingEnvironment, CompilationOptions dependencyContextOptions);
    private static CSharpParseOptions GetParseOptions(IWebHostEnvironment hostingEnvironment, CompilationOptions dependencyContextOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation.FileProviderRazorProjectFileSystem : RazorProjectFileSystem {
    private static string RazorFileExtension;
    private RuntimeCompilationFileProvider _fileProvider;
    private IWebHostEnvironment _hostingEnvironment;
    public IFileProvider FileProvider { get; }
    public FileProviderRazorProjectFileSystem(RuntimeCompilationFileProvider fileProvider, IWebHostEnvironment hostingEnvironment);
    public IFileProvider get_FileProvider();
    public virtual RazorProjectItem GetItem(string path);
    public virtual RazorProjectItem GetItem(string path, string fileKind);
    public virtual IEnumerable`1<RazorProjectItem> EnumerateItems(string path);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation.FileProviderRazorProjectFileSystem/<EnumerateFiles>d__9")]
private IEnumerable`1<RazorProjectItem> EnumerateFiles(IDirectoryContents directory, string basePath, string prefix);
    private static string JoinPath(string path1, string path2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation.FileProviderRazorProjectItem : RazorProjectItem {
    private string _root;
    private string _relativePhysicalPath;
    private bool _isRelativePhysicalPathSet;
    [CompilerGeneratedAttribute]
private IFileInfo <FileInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileKind>k__BackingField;
    public IFileInfo FileInfo { get; }
    public string BasePath { get; }
    public string FilePath { get; }
    public string FileKind { get; }
    public bool Exists { get; }
    public string PhysicalPath { get; }
    [NullableAttribute("2")]
public string RelativePhysicalPath { get; }
    public FileProviderRazorProjectItem(IFileInfo fileInfo, string basePath, string filePath, string root);
    public FileProviderRazorProjectItem(IFileInfo fileInfo, string basePath, string filePath, string root, string fileKind);
    [CompilerGeneratedAttribute]
public IFileInfo get_FileInfo();
    [CompilerGeneratedAttribute]
public virtual string get_BasePath();
    [CompilerGeneratedAttribute]
public virtual string get_FilePath();
    [CompilerGeneratedAttribute]
public virtual string get_FileKind();
    public virtual bool get_Exists();
    public virtual string get_PhysicalPath();
    [NullableContextAttribute("2")]
public virtual string get_RelativePhysicalPath();
    public virtual Stream Read();
}
internal class Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation.LazyMetadataReferenceFeature : object {
    private RazorReferenceManager _referenceManager;
    [CompilerGeneratedAttribute]
private RazorEngine <Engine>k__BackingField;
    [NullableAttribute("1")]
public IReadOnlyList`1<MetadataReference> References { get; }
    [NullableAttribute("2")]
public RazorEngine Engine { get; public set; }
    [NullableContextAttribute("1")]
public LazyMetadataReferenceFeature(RazorReferenceManager referenceManager);
    [NullableContextAttribute("1")]
public sealed virtual IReadOnlyList`1<MetadataReference> get_References();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual RazorEngine get_Engine();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Engine(RazorEngine value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation.MvcRazorRuntimeCompilationOptions : object {
    [CompilerGeneratedAttribute]
private IList`1<IFileProvider> <FileProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <AdditionalReferencePaths>k__BackingField;
    public IList`1<IFileProvider> FileProviders { get; }
    public IList`1<string> AdditionalReferencePaths { get; }
    [CompilerGeneratedAttribute]
public IList`1<IFileProvider> get_FileProviders();
    [CompilerGeneratedAttribute]
public IList`1<string> get_AdditionalReferencePaths();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation.MvcRazorRuntimeCompilationOptionsSetup : object {
    private IWebHostEnvironment _hostingEnvironment;
    public MvcRazorRuntimeCompilationOptionsSetup(IWebHostEnvironment hostingEnvironment);
    public sealed virtual void Configure(MvcRazorRuntimeCompilationOptions options);
}
internal class Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation.PageActionDescriptorChangeProvider : object {
    private RuntimeCompilationFileProvider _fileProvider;
    private String[] _searchPatterns;
    private String[] _additionalFilesToTrack;
    [NullableContextAttribute("1")]
public PageActionDescriptorChangeProvider(RazorProjectEngine projectEngine, RuntimeCompilationFileProvider fileProvider, IOptions`1<RazorPagesOptions> razorPagesOptions);
    [NullableContextAttribute("1")]
public sealed virtual IChangeToken GetChangeToken();
    private static String[] GetImports(IImportProjectFeature[] importFeatures, RazorProjectItem file);
}
internal static class Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation.PageDirectiveFeature : object {
    private static RazorProjectEngine PageDirectiveEngine;
    private static PageDirectiveFeature();
    [NullableContextAttribute("1")]
public static bool TryGetPageDirective(ILogger logger, RazorProjectItem projectItem, String& template);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation.RazorProjectPageRouteModelProvider : object {
    private static string AreaRootDirectory;
    private RazorProjectFileSystem _razorFileSystem;
    private RazorPagesOptions _pagesOptions;
    private PageRouteModelFactory _routeModelFactory;
    private ILogger`1<RazorProjectPageRouteModelProvider> _logger;
    public int Order { get; }
    public RazorProjectPageRouteModelProvider(RazorProjectFileSystem razorFileSystem, IOptions`1<RazorPagesOptions> pagesOptionsAccessor, ILoggerFactory loggerFactory);
    public sealed virtual int get_Order();
    public sealed virtual void OnProvidersExecuted(PageRouteModelProviderContext context);
    public sealed virtual void OnProvidersExecuting(PageRouteModelProviderContext context);
    private void AddPageModels(PageRouteModelProviderContext context);
    private void AddAreaPageModels(PageRouteModelProviderContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation.RazorReferenceManager : object {
    private ApplicationPartManager _partManager;
    private MvcRazorRuntimeCompilationOptions _options;
    private object _compilationReferencesLock;
    private bool _compilationReferencesInitialized;
    private IReadOnlyList`1<MetadataReference> _compilationReferences;
    public IReadOnlyList`1<MetadataReference> CompilationReferences { get; }
    public RazorReferenceManager(ApplicationPartManager partManager, IOptions`1<MvcRazorRuntimeCompilationOptions> options);
    public virtual IReadOnlyList`1<MetadataReference> get_CompilationReferences();
    private IReadOnlyList`1<MetadataReference> GetCompilationReferences();
    internal IEnumerable`1<string> GetReferencePaths();
    private static MetadataReference CreateMetadataReference(string path);
}
internal class Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation.RazorRuntimeCompilationHostingStartup : object {
    [NullableContextAttribute("1")]
public sealed virtual void Configure(IWebHostBuilder builder);
}
internal static class Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string CompilationFailed { get; }
    internal static string Compilation_MissingReferences { get; }
    internal static string FileProvidersAreRequired { get; }
    internal static string GeneratedCodeFileName { get; }
    internal static string UnsupportedDebugInformationFormat { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_CompilationFailed();
    internal static string get_Compilation_MissingReferences();
    internal static string FormatCompilation_MissingReferences(object p0);
    internal static string get_FileProvidersAreRequired();
    internal static string FormatFileProvidersAreRequired(object p0, object p1, object p2);
    internal static string get_GeneratedCodeFileName();
    internal static string get_UnsupportedDebugInformationFormat();
    internal static string FormatUnsupportedDebugInformationFormat(object p0);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation.RuntimeCompilationFileProvider : object {
    private MvcRazorRuntimeCompilationOptions _options;
    private IFileProvider _compositeFileProvider;
    public IFileProvider FileProvider { get; }
    public RuntimeCompilationFileProvider(IOptions`1<MvcRazorRuntimeCompilationOptions> options);
    public IFileProvider get_FileProvider();
    private static IFileProvider GetCompositeFileProvider(MvcRazorRuntimeCompilationOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation.RuntimeViewCompiler : object {
    private object _cacheLock;
    private Dictionary`2<string, CompiledViewDescriptor> _precompiledViews;
    private ConcurrentDictionary`2<string, string> _normalizedPathCache;
    private IFileProvider _fileProvider;
    private RazorProjectEngine _projectEngine;
    private IMemoryCache _cache;
    private ILogger _logger;
    private CSharpCompiler _csharpCompiler;
    public RuntimeViewCompiler(IFileProvider fileProvider, RazorProjectEngine projectEngine, CSharpCompiler csharpCompiler, IList`1<CompiledViewDescriptor> precompiledViews, ILogger logger);
    public sealed virtual Task`1<CompiledViewDescriptor> CompileAsync(string relativePath);
    private Task`1<CompiledViewDescriptor> OnCacheMiss(string normalizedPath);
    private ViewCompilerWorkItem CreatePrecompiledWorkItem(string normalizedPath, CompiledViewDescriptor precompiledView);
    private ViewCompilerWorkItem CreateRuntimeCompilationWorkItem(string normalizedPath);
    private IList`1<IChangeToken> GetExpirationTokens(CompiledViewDescriptor precompiledView);
    private void GetChangeTokensFromImports(IList`1<IChangeToken> expirationTokens, RazorProjectItem projectItem);
    protected virtual CompiledViewDescriptor CompileAndEmit(string relativePath);
    internal Assembly CompileAndEmit(RazorCodeDocument codeDocument, string generatedCode);
    private CSharpCompilation CreateCompilation(string compilationContent, string assemblyName);
    private string GetNormalizedPath(string relativePath);
}
internal class Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation.RuntimeViewCompilerProvider : object {
    private RazorProjectEngine _razorProjectEngine;
    private ApplicationPartManager _applicationPartManager;
    private CSharpCompiler _csharpCompiler;
    private RuntimeCompilationFileProvider _fileProvider;
    private ILogger`1<RuntimeViewCompiler> _logger;
    private Func`1<IViewCompiler> _createCompiler;
    private object _initializeLock;
    private bool _initialized;
    private IViewCompiler _compiler;
    [NullableContextAttribute("1")]
public RuntimeViewCompilerProvider(ApplicationPartManager applicationPartManager, RazorProjectEngine razorProjectEngine, RuntimeCompilationFileProvider fileProvider, CSharpCompiler csharpCompiler, ILoggerFactory loggerFactory);
    [NullableContextAttribute("1")]
public sealed virtual IViewCompiler GetCompiler();
    private IViewCompiler CreateCompiler();
}
internal static class Microsoft.AspNetCore.Mvc.Razor.ViewPath : object {
    [NullableContextAttribute("1")]
public static string NormalizePath(string path);
}
internal class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageLoaderMatcherPolicy : MatcherPolicy {
    private PageLoader _loader;
    public int Order { get; }
    [NullableContextAttribute("2")]
public PageLoaderMatcherPolicy(PageLoader loader);
    public virtual int get_Order();
    [NullableContextAttribute("1")]
public sealed virtual bool AppliesToEndpoints(IReadOnlyList`1<Endpoint> endpoints);
    [NullableContextAttribute("1")]
public sealed virtual Task ApplyAsync(HttpContext httpContext, CandidateSet candidates);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageLoaderMatcherPolicy/<ApplyAsyncAwaited>d__7")]
private static Task ApplyAsyncAwaited(PageLoader pageLoader, CandidateSet candidates, Task`1<CompiledPageActionDescriptor> actionDescriptorTask, int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.RazorRuntimeCompilationMvcBuilderExtensions : object {
    [ExtensionAttribute]
public static IMvcBuilder AddRazorRuntimeCompilation(IMvcBuilder builder);
    [ExtensionAttribute]
public static IMvcBuilder AddRazorRuntimeCompilation(IMvcBuilder builder, Action`1<MvcRazorRuntimeCompilationOptions> setupAction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.RazorRuntimeCompilationMvcCoreBuilderExtensions : object {
    [ExtensionAttribute]
public static IMvcCoreBuilder AddRazorRuntimeCompilation(IMvcCoreBuilder builder);
    [ExtensionAttribute]
public static IMvcCoreBuilder AddRazorRuntimeCompilation(IMvcCoreBuilder builder, Action`1<MvcRazorRuntimeCompilationOptions> setupAction);
    internal static void AddServices(IServiceCollection services);
}
