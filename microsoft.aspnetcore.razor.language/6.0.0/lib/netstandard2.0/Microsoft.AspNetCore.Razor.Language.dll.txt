public abstract class Microsoft.AspNetCore.Razor.Language.AllowedChildTagDescriptor : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RazorDiagnostic> <Diagnostics>k__BackingField;
    public string Name { get; protected set; }
    public string DisplayName { get; protected set; }
    public IReadOnlyList`1<RazorDiagnostic> Diagnostics { get; protected set; }
    public bool HasErrors { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
protected void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RazorDiagnostic> get_Diagnostics();
    [CompilerGeneratedAttribute]
protected void set_Diagnostics(IReadOnlyList`1<RazorDiagnostic> value);
    public bool get_HasErrors();
    public virtual string ToString();
    public sealed virtual bool Equals(AllowedChildTagDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class Microsoft.AspNetCore.Razor.Language.AllowedChildTagDescriptorBuilder : object {
    public string Name { get; public set; }
    public string DisplayName { get; public set; }
    public RazorDiagnosticCollection Diagnostics { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
    public abstract virtual RazorDiagnosticCollection get_Diagnostics();
}
internal class Microsoft.AspNetCore.Razor.Language.AllowedChildTagDescriptorComparer : object {
    public static AllowedChildTagDescriptorComparer Default;
    private static AllowedChildTagDescriptorComparer();
    public virtual bool Equals(AllowedChildTagDescriptor descriptorX, AllowedChildTagDescriptor descriptorY);
    public virtual int GetHashCode(AllowedChildTagDescriptor descriptor);
}
public class Microsoft.AspNetCore.Razor.Language.AssemblyExtension : RazorExtension {
    [CompilerGeneratedAttribute]
private string <ExtensionName>k__BackingField;
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    public string ExtensionName { get; }
    public Assembly Assembly { get; }
    public AssemblyExtension(string extensionName, Assembly assembly);
    [CompilerGeneratedAttribute]
public virtual string get_ExtensionName();
    [CompilerGeneratedAttribute]
public Assembly get_Assembly();
    internal RazorExtensionInitializer CreateInitializer();
}
public enum Microsoft.AspNetCore.Razor.Language.AttributeStructure : Enum {
    public int value__;
    public static AttributeStructure DoubleQuotes;
    public static AttributeStructure SingleQuotes;
    public static AttributeStructure NoQuotes;
    public static AttributeStructure Minimized;
}
public abstract class Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIndexerStringProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIndexerBooleanProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStringProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBooleanProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEditorRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndexerNamePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndexerTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasIndexer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Documentation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaseSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RazorDiagnostic> <Diagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<BoundAttributeParameterDescriptor> <BoundAttributeParameters>k__BackingField;
    public string Kind { get; }
    public bool IsIndexerStringProperty { get; protected set; }
    public bool IsIndexerBooleanProperty { get; protected set; }
    public bool IsEnum { get; protected set; }
    public bool IsStringProperty { get; protected set; }
    public bool IsBooleanProperty { get; protected set; }
    internal bool IsEditorRequired { get; internal set; }
    public string Name { get; protected set; }
    public string IndexerNamePrefix { get; protected set; }
    public string TypeName { get; protected set; }
    public string IndexerTypeName { get; protected set; }
    public bool HasIndexer { get; protected set; }
    public string Documentation { get; protected set; }
    public string DisplayName { get; protected set; }
    public bool CaseSensitive { get; protected set; }
    public IReadOnlyList`1<RazorDiagnostic> Diagnostics { get; protected set; }
    public IReadOnlyDictionary`2<string, string> Metadata { get; protected set; }
    public IReadOnlyList`1<BoundAttributeParameterDescriptor> BoundAttributeParameters { get; protected set; }
    public bool HasErrors { get; }
    protected BoundAttributeDescriptor(string kind);
    [CompilerGeneratedAttribute]
public string get_Kind();
    [CompilerGeneratedAttribute]
public bool get_IsIndexerStringProperty();
    [CompilerGeneratedAttribute]
protected void set_IsIndexerStringProperty(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsIndexerBooleanProperty();
    [CompilerGeneratedAttribute]
protected void set_IsIndexerBooleanProperty(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsEnum();
    [CompilerGeneratedAttribute]
protected void set_IsEnum(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsStringProperty();
    [CompilerGeneratedAttribute]
protected void set_IsStringProperty(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsBooleanProperty();
    [CompilerGeneratedAttribute]
protected void set_IsBooleanProperty(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsEditorRequired();
    [CompilerGeneratedAttribute]
internal void set_IsEditorRequired(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_IndexerNamePrefix();
    [CompilerGeneratedAttribute]
protected void set_IndexerNamePrefix(string value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
protected void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_IndexerTypeName();
    [CompilerGeneratedAttribute]
protected void set_IndexerTypeName(string value);
    [CompilerGeneratedAttribute]
public bool get_HasIndexer();
    [CompilerGeneratedAttribute]
protected void set_HasIndexer(bool value);
    [CompilerGeneratedAttribute]
public string get_Documentation();
    [CompilerGeneratedAttribute]
protected void set_Documentation(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
protected void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public bool get_CaseSensitive();
    [CompilerGeneratedAttribute]
protected void set_CaseSensitive(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RazorDiagnostic> get_Diagnostics();
    [CompilerGeneratedAttribute]
protected void set_Diagnostics(IReadOnlyList`1<RazorDiagnostic> value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Metadata();
    [CompilerGeneratedAttribute]
protected void set_Metadata(IReadOnlyDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<BoundAttributeParameterDescriptor> get_BoundAttributeParameters();
    [CompilerGeneratedAttribute]
protected virtual void set_BoundAttributeParameters(IReadOnlyList`1<BoundAttributeParameterDescriptor> value);
    public bool get_HasErrors();
    public virtual string ToString();
    public sealed virtual bool Equals(BoundAttributeDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder : object {
    [CompilerGeneratedAttribute]
private bool <IsEditorRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<BoundAttributeParameterDescriptorBuilder> <BoundAttributeParameters>k__BackingField;
    public string Name { get; public set; }
    public string TypeName { get; public set; }
    public bool IsEnum { get; public set; }
    public bool IsDictionary { get; public set; }
    public string IndexerAttributeNamePrefix { get; public set; }
    public string IndexerValueTypeName { get; public set; }
    public string Documentation { get; public set; }
    public string DisplayName { get; public set; }
    public IDictionary`2<string, string> Metadata { get; }
    public RazorDiagnosticCollection Diagnostics { get; }
    internal bool IsEditorRequired { get; internal set; }
    public IReadOnlyList`1<BoundAttributeParameterDescriptorBuilder> BoundAttributeParameters { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_TypeName();
    public abstract virtual void set_TypeName(string value);
    public abstract virtual bool get_IsEnum();
    public abstract virtual void set_IsEnum(bool value);
    public abstract virtual bool get_IsDictionary();
    public abstract virtual void set_IsDictionary(bool value);
    public abstract virtual string get_IndexerAttributeNamePrefix();
    public abstract virtual void set_IndexerAttributeNamePrefix(string value);
    public abstract virtual string get_IndexerValueTypeName();
    public abstract virtual void set_IndexerValueTypeName(string value);
    public abstract virtual string get_Documentation();
    public abstract virtual void set_Documentation(string value);
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
    public abstract virtual IDictionary`2<string, string> get_Metadata();
    public abstract virtual RazorDiagnosticCollection get_Diagnostics();
    [CompilerGeneratedAttribute]
internal bool get_IsEditorRequired();
    [CompilerGeneratedAttribute]
internal void set_IsEditorRequired(bool value);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<BoundAttributeParameterDescriptorBuilder> get_BoundAttributeParameters();
    public virtual void BindAttributeParameter(Action`1<BoundAttributeParameterDescriptorBuilder> configure);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilderExtensions : object {
    [ExtensionAttribute]
public static void SetPropertyName(BoundAttributeDescriptorBuilder builder, string propertyName);
    [ExtensionAttribute]
public static string GetPropertyName(BoundAttributeDescriptorBuilder builder);
    [ExtensionAttribute]
public static void AsDictionary(BoundAttributeDescriptorBuilder builder, string attributeNamePrefix, string valueTypeName);
    [ExtensionAttribute]
public static bool IsDirectiveAttribute(BoundAttributeDescriptorBuilder builder);
    [ExtensionAttribute]
public static void SetPropertyName(BoundAttributeParameterDescriptorBuilder builder, string propertyName);
    [ExtensionAttribute]
public static string GetPropertyName(BoundAttributeParameterDescriptorBuilder builder);
}
internal class Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorComparer : object {
    public static BoundAttributeDescriptorComparer Default;
    private static BoundAttributeDescriptorComparer();
    public sealed virtual bool Equals(BoundAttributeDescriptor descriptorX, BoundAttributeDescriptor descriptorY);
    public sealed virtual int GetHashCode(BoundAttributeDescriptor descriptor);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorExtensions : object {
    [ExtensionAttribute]
public static string GetPropertyName(BoundAttributeDescriptor attribute);
    [ExtensionAttribute]
public static bool IsDefaultKind(BoundAttributeDescriptor attribute);
    [ExtensionAttribute]
internal static bool ExpectsStringValue(BoundAttributeDescriptor attribute, string name);
    [ExtensionAttribute]
internal static bool ExpectsBooleanValue(BoundAttributeDescriptor attribute, string name);
    [ExtensionAttribute]
public static bool IsDirectiveAttribute(BoundAttributeDescriptor attribute);
    [ExtensionAttribute]
public static bool IsDefaultKind(BoundAttributeParameterDescriptor parameter);
    [ExtensionAttribute]
public static string GetPropertyName(BoundAttributeParameterDescriptor parameter);
}
public abstract class Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptor : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStringProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBooleanProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Documentation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaseSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RazorDiagnostic> <Diagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Metadata>k__BackingField;
    public string Kind { get; }
    public bool IsEnum { get; protected set; }
    public bool IsStringProperty { get; protected set; }
    public bool IsBooleanProperty { get; protected set; }
    public string Name { get; protected set; }
    public string TypeName { get; protected set; }
    public string Documentation { get; protected set; }
    public string DisplayName { get; protected set; }
    public bool CaseSensitive { get; protected set; }
    public IReadOnlyList`1<RazorDiagnostic> Diagnostics { get; protected set; }
    public IReadOnlyDictionary`2<string, string> Metadata { get; protected set; }
    public bool HasErrors { get; }
    protected BoundAttributeParameterDescriptor(string kind);
    [CompilerGeneratedAttribute]
public string get_Kind();
    [CompilerGeneratedAttribute]
public bool get_IsEnum();
    [CompilerGeneratedAttribute]
protected void set_IsEnum(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsStringProperty();
    [CompilerGeneratedAttribute]
protected void set_IsStringProperty(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsBooleanProperty();
    [CompilerGeneratedAttribute]
protected void set_IsBooleanProperty(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
protected void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_Documentation();
    [CompilerGeneratedAttribute]
protected void set_Documentation(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
protected void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public bool get_CaseSensitive();
    [CompilerGeneratedAttribute]
protected void set_CaseSensitive(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RazorDiagnostic> get_Diagnostics();
    [CompilerGeneratedAttribute]
protected void set_Diagnostics(IReadOnlyList`1<RazorDiagnostic> value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Metadata();
    [CompilerGeneratedAttribute]
protected void set_Metadata(IReadOnlyDictionary`2<string, string> value);
    public bool get_HasErrors();
    public virtual string ToString();
    public sealed virtual bool Equals(BoundAttributeParameterDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptorBuilder : object {
    public string Name { get; public set; }
    public string TypeName { get; public set; }
    public bool IsEnum { get; public set; }
    public string Documentation { get; public set; }
    public string DisplayName { get; public set; }
    public IDictionary`2<string, string> Metadata { get; }
    public RazorDiagnosticCollection Diagnostics { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_TypeName();
    public abstract virtual void set_TypeName(string value);
    public abstract virtual bool get_IsEnum();
    public abstract virtual void set_IsEnum(bool value);
    public abstract virtual string get_Documentation();
    public abstract virtual void set_Documentation(string value);
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
    public abstract virtual IDictionary`2<string, string> get_Metadata();
    public abstract virtual RazorDiagnosticCollection get_Diagnostics();
}
internal class Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptorComparer : object {
    public static BoundAttributeParameterDescriptorComparer Default;
    private static BoundAttributeParameterDescriptorComparer();
    public virtual bool Equals(BoundAttributeParameterDescriptor descriptorX, BoundAttributeParameterDescriptor descriptorY);
    public virtual int GetHashCode(BoundAttributeParameterDescriptor descriptor);
}
internal static class Microsoft.AspNetCore.Razor.Language.Checksum : object {
    public static string BytesToString(Byte[] bytes);
}
internal class Microsoft.AspNetCore.Razor.Language.ClassifiedSpanVisitor : SyntaxWalker {
    private RazorSourceDocument _source;
    private List`1<ClassifiedSpanInternal> _spans;
    private BlockKindInternal _currentBlockKind;
    private SyntaxNode _currentBlock;
    public IReadOnlyList`1<ClassifiedSpanInternal> ClassifiedSpans { get; }
    public ClassifiedSpanVisitor(RazorSourceDocument source);
    public IReadOnlyList`1<ClassifiedSpanInternal> get_ClassifiedSpans();
    public virtual void VisitRazorCommentBlock(RazorCommentBlockSyntax node);
    public virtual void VisitCSharpCodeBlock(CSharpCodeBlockSyntax node);
    public virtual void VisitCSharpStatement(CSharpStatementSyntax node);
    public virtual void VisitCSharpExplicitExpression(CSharpExplicitExpressionSyntax node);
    public virtual void VisitCSharpImplicitExpression(CSharpImplicitExpressionSyntax node);
    public virtual void VisitRazorDirective(RazorDirectiveSyntax node);
    public virtual void VisitCSharpTemplateBlock(CSharpTemplateBlockSyntax node);
    public virtual void VisitMarkupBlock(MarkupBlockSyntax node);
    public virtual void VisitMarkupTagHelperAttributeValue(MarkupTagHelperAttributeValueSyntax node);
    public virtual void VisitMarkupStartTag(MarkupStartTagSyntax node);
    public virtual void VisitMarkupEndTag(MarkupEndTagSyntax node);
    public virtual void VisitMarkupTagHelperElement(MarkupTagHelperElementSyntax node);
    public virtual void VisitMarkupTagHelperStartTag(MarkupTagHelperStartTagSyntax node);
    public virtual void VisitMarkupTagHelperEndTag(MarkupTagHelperEndTagSyntax node);
    public virtual void VisitMarkupAttributeBlock(MarkupAttributeBlockSyntax node);
    public virtual void VisitMarkupTagHelperAttribute(MarkupTagHelperAttributeSyntax node);
    public virtual void VisitMarkupTagHelperDirectiveAttribute(MarkupTagHelperDirectiveAttributeSyntax node);
    public virtual void VisitMarkupMinimizedTagHelperDirectiveAttribute(MarkupMinimizedTagHelperDirectiveAttributeSyntax node);
    public virtual void VisitMarkupMinimizedAttributeBlock(MarkupMinimizedAttributeBlockSyntax node);
    public virtual void VisitMarkupCommentBlock(MarkupCommentBlockSyntax node);
    public virtual void VisitMarkupDynamicAttributeValue(MarkupDynamicAttributeValueSyntax node);
    public virtual void VisitRazorMetaCode(RazorMetaCodeSyntax node);
    public virtual void VisitCSharpTransition(CSharpTransitionSyntax node);
    public virtual void VisitMarkupTransition(MarkupTransitionSyntax node);
    public virtual void VisitCSharpStatementLiteral(CSharpStatementLiteralSyntax node);
    public virtual void VisitCSharpExpressionLiteral(CSharpExpressionLiteralSyntax node);
    public virtual void VisitCSharpEphemeralTextLiteral(CSharpEphemeralTextLiteralSyntax node);
    public virtual void VisitUnclassifiedTextLiteral(UnclassifiedTextLiteralSyntax node);
    public virtual void VisitMarkupLiteralAttributeValue(MarkupLiteralAttributeValueSyntax node);
    public virtual void VisitMarkupTextLiteral(MarkupTextLiteralSyntax node);
    public virtual void VisitMarkupEphemeralTextLiteral(MarkupEphemeralTextLiteralSyntax node);
    private void WriteBlock(TNode node, BlockKindInternal kind, Action`1<TNode> handler);
    private void WriteSpan(SyntaxNode node, SpanKindInternal kind, Nullable`1<AcceptedCharactersInternal> acceptedCharacters);
    private static SyntaxList`1<RazorSyntaxNode> GetRewrittenMarkupStartTagChildren(MarkupStartTagSyntax node);
    private static SyntaxList`1<RazorSyntaxNode> GetRewrittenMarkupEndTagChildren(MarkupEndTagSyntax node);
    [CompilerGeneratedAttribute]
private void <VisitRazorCommentBlock>b__7_0(RazorCommentBlockSyntax razorCommentSyntax);
    [CompilerGeneratedAttribute]
internal static void <GetRewrittenMarkupStartTagChildren>g__AddLiteralIfExists|40_0(<>c__DisplayClass40_0& );
}
public abstract class Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeRenderingContext : object {
    internal static object NewLineString;
    internal static object SuppressUniqueIds;
    public IEnumerable`1<IntermediateNode> Ancestors { get; }
    public CodeWriter CodeWriter { get; }
    public RazorDiagnosticCollection Diagnostics { get; }
    public string DocumentKind { get; }
    public ItemCollection Items { get; }
    public IntermediateNodeWriter NodeWriter { get; }
    public RazorCodeGenerationOptions Options { get; }
    public IntermediateNode Parent { get; }
    public RazorSourceDocument SourceDocument { get; }
    private static CodeRenderingContext();
    public abstract virtual IEnumerable`1<IntermediateNode> get_Ancestors();
    public abstract virtual CodeWriter get_CodeWriter();
    public abstract virtual RazorDiagnosticCollection get_Diagnostics();
    public abstract virtual string get_DocumentKind();
    public abstract virtual ItemCollection get_Items();
    public abstract virtual IntermediateNodeWriter get_NodeWriter();
    public abstract virtual RazorCodeGenerationOptions get_Options();
    public abstract virtual IntermediateNode get_Parent();
    public abstract virtual RazorSourceDocument get_SourceDocument();
    public abstract virtual void AddSourceMappingFor(IntermediateNode node);
    public abstract virtual void RenderNode(IntermediateNode node);
    public abstract virtual void RenderNode(IntermediateNode node, IntermediateNodeWriter writer);
    public abstract virtual void RenderChildren(IntermediateNode node);
    public abstract virtual void RenderChildren(IntermediateNode node, IntermediateNodeWriter writer);
    public virtual void AddLinePragma(LinePragma linePragma);
}
public abstract class Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeTarget : object {
    public static CodeTarget CreateDefault(RazorCodeDocument codeDocument, RazorCodeGenerationOptions options);
    public static CodeTarget CreateDefault(RazorCodeDocument codeDocument, RazorCodeGenerationOptions options, Action`1<CodeTargetBuilder> configure);
    public static CodeTarget CreateEmpty(RazorCodeDocument codeDocument, RazorCodeGenerationOptions options, Action`1<CodeTargetBuilder> configure);
    internal static void AddDesignTimeDefaults(CodeTargetBuilder builder);
    internal static void AddRuntimeDefaults(CodeTargetBuilder builder);
    public abstract virtual IntermediateNodeWriter CreateNodeWriter();
    public abstract virtual TExtension GetExtension();
    public abstract virtual bool HasExtension();
}
public abstract class Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeTargetBuilder : object {
    public RazorCodeDocument CodeDocument { get; }
    public RazorCodeGenerationOptions Options { get; }
    public ICollection`1<ICodeTargetExtension> TargetExtensions { get; }
    public abstract virtual RazorCodeDocument get_CodeDocument();
    public abstract virtual RazorCodeGenerationOptions get_Options();
    public abstract virtual ICollection`1<ICodeTargetExtension> get_TargetExtensions();
    public abstract virtual CodeTarget Build();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter : object {
    private static Char[] NewLineCharacters;
    private StringBuilder _builder;
    private string _newLine;
    private int _absoluteIndex;
    private int _currentLineIndex;
    private int _currentLineCharacterIndex;
    [CompilerGeneratedAttribute]
private int <CurrentIndent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IndentWithTabs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TabSize>k__BackingField;
    public int CurrentIndent { get; public set; }
    public int Length { get; }
    public string NewLine { get; public set; }
    public bool IndentWithTabs { get; }
    public int TabSize { get; }
    public SourceLocation Location { get; }
    public char Item { get; }
    public CodeWriter(string newLine, RazorCodeGenerationOptions options);
    private static CodeWriter();
    [CompilerGeneratedAttribute]
public int get_CurrentIndent();
    [CompilerGeneratedAttribute]
public void set_CurrentIndent(int value);
    public int get_Length();
    public string get_NewLine();
    public void set_NewLine(string value);
    [CompilerGeneratedAttribute]
public bool get_IndentWithTabs();
    [CompilerGeneratedAttribute]
public int get_TabSize();
    public SourceLocation get_Location();
    public char get_Item(int index);
    public CodeWriter Indent(int size);
    public CodeWriter Write(string value);
    internal CodeWriter Write(StringSegment value);
    public CodeWriter Write(string value, int startIndex, int count);
    internal CodeWriter WriteCore(string value, int startIndex, int count);
    public CodeWriter WriteLine();
    public CodeWriter WriteLine(string value);
    public string GenerateCode();
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriterExtensions : object {
    private static string InstanceMethodFormat;
    private static Char[] CStyleStringLiteralEscapeChars;
    private static CodeWriterExtensions();
    [ExtensionAttribute]
public static bool IsAtBeginningOfLine(CodeWriter writer);
    [ExtensionAttribute]
public static CodeWriter WritePadding(CodeWriter writer, int offset, Nullable`1<SourceSpan> span, CodeRenderingContext context);
    [ExtensionAttribute]
public static CodeWriter WriteVariableDeclaration(CodeWriter writer, string type, string name, string value);
    [ExtensionAttribute]
public static CodeWriter WriteBooleanLiteral(CodeWriter writer, bool value);
    [ExtensionAttribute]
public static CodeWriter WriteStartAssignment(CodeWriter writer, string name);
    [ExtensionAttribute]
public static CodeWriter WriteParameterSeparator(CodeWriter writer);
    [ExtensionAttribute]
public static CodeWriter WriteStartNewObject(CodeWriter writer, string typeName);
    [ExtensionAttribute]
public static CodeWriter WriteStringLiteral(CodeWriter writer, string literal);
    [ExtensionAttribute]
public static CodeWriter WriteUsing(CodeWriter writer, string name);
    [ExtensionAttribute]
public static CodeWriter WriteUsing(CodeWriter writer, string name, bool endLine);
    [ExtensionAttribute]
public static CodeWriter WriteEnhancedLineNumberDirective(CodeWriter writer, SourceSpan span, int characterOffset);
    [ExtensionAttribute]
public static CodeWriter WriteLineNumberDirective(CodeWriter writer, SourceSpan span);
    [ExtensionAttribute]
public static CodeWriter WriteStartMethodInvocation(CodeWriter writer, string methodName);
    [ExtensionAttribute]
public static CodeWriter WriteEndMethodInvocation(CodeWriter writer);
    [ExtensionAttribute]
public static CodeWriter WriteEndMethodInvocation(CodeWriter writer, bool endLine);
    [ExtensionAttribute]
public static CodeWriter WriteInstanceMethodInvocation(CodeWriter writer, string instanceName, string methodName, String[] parameters);
    [ExtensionAttribute]
public static CodeWriter WriteInstanceMethodInvocation(CodeWriter writer, string instanceName, string methodName, bool endLine, String[] parameters);
    [ExtensionAttribute]
public static CodeWriter WriteStartInstanceMethodInvocation(CodeWriter writer, string instanceName, string methodName);
    [ExtensionAttribute]
public static CodeWriter WriteField(CodeWriter writer, IList`1<string> suppressWarnings, IList`1<string> modifiers, string typeName, string fieldName);
    [ExtensionAttribute]
public static CodeWriter WriteMethodInvocation(CodeWriter writer, string methodName, String[] parameters);
    [ExtensionAttribute]
public static CodeWriter WriteMethodInvocation(CodeWriter writer, string methodName, bool endLine, String[] parameters);
    [ExtensionAttribute]
public static CodeWriter WriteAutoPropertyDeclaration(CodeWriter writer, IList`1<string> modifiers, string typeName, string propertyName);
    [ExtensionAttribute]
public static CSharpCodeWritingScope BuildScope(CodeWriter writer);
    [ExtensionAttribute]
public static CSharpCodeWritingScope BuildLambda(CodeWriter writer, String[] parameterNames);
    [ExtensionAttribute]
public static CSharpCodeWritingScope BuildAsyncLambda(CodeWriter writer, String[] parameterNames);
    private static CSharpCodeWritingScope BuildLambda(CodeWriter writer, bool async, String[] parameterNames);
    [ExtensionAttribute]
public static CSharpCodeWritingScope BuildNamespace(CodeWriter writer, string name);
    [ExtensionAttribute]
public static CSharpCodeWritingScope BuildClassDeclaration(CodeWriter writer, IList`1<string> modifiers, string name, string baseType, IList`1<string> interfaces, IList`1<ValueTuple`2<string, string>> typeParameters);
    [ExtensionAttribute]
public static CSharpCodeWritingScope BuildMethodDeclaration(CodeWriter writer, string accessibility, string returnType, string name, IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    [ExtensionAttribute]
public static IDisposable BuildLinePragma(CodeWriter writer, Nullable`1<SourceSpan> span, CodeRenderingContext context);
    [ExtensionAttribute]
public static IDisposable BuildEnhancedLinePragma(CodeWriter writer, Nullable`1<SourceSpan> span, CodeRenderingContext context, int characterOffset);
    private static void WriteVerbatimStringLiteral(CodeWriter writer, string literal);
    private static void WriteCStyleStringLiteral(CodeWriter writer, string literal);
    [CompilerGeneratedAttribute]
internal static int <WritePadding>g__CalculatePadding|3_0(<>c__DisplayClass3_0& );
}
internal class Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultCodeRenderingContext : CodeRenderingContext {
    private Stack`1<IntermediateNode> _ancestors;
    private RazorCodeDocument _codeDocument;
    private DocumentIntermediateNode _documentNode;
    private List`1<ScopeInternal> _scopes;
    [CompilerGeneratedAttribute]
private IntermediateNodeVisitor <Visitor>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeWriter <CodeWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorDiagnosticCollection <Diagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentKind>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemCollection <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SourceMapping> <SourceMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<LinePragma> <LinePragmas>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorCodeGenerationOptions <Options>k__BackingField;
    public IntermediateNodeVisitor Visitor { get; public set; }
    public IEnumerable`1<IntermediateNode> Ancestors { get; }
    internal Stack`1<IntermediateNode> AncestorsInternal { get; }
    public CodeWriter CodeWriter { get; }
    public RazorDiagnosticCollection Diagnostics { get; }
    public string DocumentKind { get; }
    public ItemCollection Items { get; }
    public List`1<SourceMapping> SourceMappings { get; }
    internal List`1<LinePragma> LinePragmas { get; }
    public IntermediateNodeWriter NodeWriter { get; }
    public RazorCodeGenerationOptions Options { get; }
    public IntermediateNode Parent { get; }
    public RazorSourceDocument SourceDocument { get; }
    private ScopeInternal Current { get; }
    public DefaultCodeRenderingContext(CodeWriter codeWriter, IntermediateNodeWriter nodeWriter, RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode, RazorCodeGenerationOptions options);
    [CompilerGeneratedAttribute]
public IntermediateNodeVisitor get_Visitor();
    [CompilerGeneratedAttribute]
public void set_Visitor(IntermediateNodeVisitor value);
    public virtual IEnumerable`1<IntermediateNode> get_Ancestors();
    internal Stack`1<IntermediateNode> get_AncestorsInternal();
    [CompilerGeneratedAttribute]
public virtual CodeWriter get_CodeWriter();
    [CompilerGeneratedAttribute]
public virtual RazorDiagnosticCollection get_Diagnostics();
    [CompilerGeneratedAttribute]
public virtual string get_DocumentKind();
    [CompilerGeneratedAttribute]
public virtual ItemCollection get_Items();
    [CompilerGeneratedAttribute]
public List`1<SourceMapping> get_SourceMappings();
    [CompilerGeneratedAttribute]
internal List`1<LinePragma> get_LinePragmas();
    public virtual IntermediateNodeWriter get_NodeWriter();
    [CompilerGeneratedAttribute]
public virtual RazorCodeGenerationOptions get_Options();
    public virtual IntermediateNode get_Parent();
    public virtual RazorSourceDocument get_SourceDocument();
    private ScopeInternal get_Current();
    public virtual void AddSourceMappingFor(IntermediateNode node);
    public virtual void RenderChildren(IntermediateNode node);
    public virtual void RenderChildren(IntermediateNode node, IntermediateNodeWriter writer);
    public virtual void RenderNode(IntermediateNode node);
    public virtual void RenderNode(IntermediateNode node, IntermediateNodeWriter writer);
    public virtual void AddLinePragma(LinePragma linePragma);
}
internal class Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultCodeTarget : CodeTarget {
    private RazorCodeGenerationOptions _options;
    [CompilerGeneratedAttribute]
private ICodeTargetExtension[] <Extensions>k__BackingField;
    public ICodeTargetExtension[] Extensions { get; }
    public DefaultCodeTarget(RazorCodeGenerationOptions options, IEnumerable`1<ICodeTargetExtension> extensions);
    [CompilerGeneratedAttribute]
public ICodeTargetExtension[] get_Extensions();
    public virtual IntermediateNodeWriter CreateNodeWriter();
    public virtual TExtension GetExtension();
    public virtual bool HasExtension();
}
internal class Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultCodeTargetBuilder : CodeTargetBuilder {
    [CompilerGeneratedAttribute]
private RazorCodeDocument <CodeDocument>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorCodeGenerationOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ICodeTargetExtension> <TargetExtensions>k__BackingField;
    public RazorCodeDocument CodeDocument { get; }
    public RazorCodeGenerationOptions Options { get; }
    public ICollection`1<ICodeTargetExtension> TargetExtensions { get; }
    public DefaultCodeTargetBuilder(RazorCodeDocument codeDocument, RazorCodeGenerationOptions options);
    [CompilerGeneratedAttribute]
public virtual RazorCodeDocument get_CodeDocument();
    [CompilerGeneratedAttribute]
public virtual RazorCodeGenerationOptions get_Options();
    [CompilerGeneratedAttribute]
public virtual ICollection`1<ICodeTargetExtension> get_TargetExtensions();
    public virtual CodeTarget Build();
}
internal class Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter : DocumentWriter {
    private CodeTarget _codeTarget;
    private RazorCodeGenerationOptions _options;
    public DefaultDocumentWriter(CodeTarget codeTarget, RazorCodeGenerationOptions options);
    public virtual RazorCSharpDocument WriteDocument(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
public class Microsoft.AspNetCore.Razor.Language.CodeGeneration.DesignTimeNodeWriter : IntermediateNodeWriter {
    public virtual void WriteUsingDirective(CodeRenderingContext context, UsingDirectiveIntermediateNode node);
    public virtual void WriteCSharpExpression(CodeRenderingContext context, CSharpExpressionIntermediateNode node);
    public virtual void WriteCSharpCode(CodeRenderingContext context, CSharpCodeIntermediateNode node);
    public virtual void WriteHtmlAttribute(CodeRenderingContext context, HtmlAttributeIntermediateNode node);
    public virtual void WriteHtmlAttributeValue(CodeRenderingContext context, HtmlAttributeValueIntermediateNode node);
    public virtual void WriteCSharpExpressionAttributeValue(CodeRenderingContext context, CSharpExpressionAttributeValueIntermediateNode node);
    public virtual void WriteCSharpCodeAttributeValue(CodeRenderingContext context, CSharpCodeAttributeValueIntermediateNode node);
    public virtual void WriteHtmlContent(CodeRenderingContext context, HtmlContentIntermediateNode node);
    public virtual void BeginWriterScope(CodeRenderingContext context, string writer);
    public virtual void EndWriterScope(CodeRenderingContext context);
}
public abstract class Microsoft.AspNetCore.Razor.Language.CodeGeneration.DocumentWriter : object {
    public static DocumentWriter CreateDefault(CodeTarget codeTarget, RazorCodeGenerationOptions options);
    public abstract virtual RazorCSharpDocument WriteDocument(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
public interface Microsoft.AspNetCore.Razor.Language.CodeGeneration.ICodeTargetExtension {
}
public abstract class Microsoft.AspNetCore.Razor.Language.CodeGeneration.IntermediateNodeWriter : object {
    public abstract virtual void WriteUsingDirective(CodeRenderingContext context, UsingDirectiveIntermediateNode node);
    public abstract virtual void WriteCSharpExpression(CodeRenderingContext context, CSharpExpressionIntermediateNode node);
    public abstract virtual void WriteCSharpCode(CodeRenderingContext context, CSharpCodeIntermediateNode node);
    public abstract virtual void WriteHtmlContent(CodeRenderingContext context, HtmlContentIntermediateNode node);
    public abstract virtual void WriteHtmlAttribute(CodeRenderingContext context, HtmlAttributeIntermediateNode node);
    public abstract virtual void WriteHtmlAttributeValue(CodeRenderingContext context, HtmlAttributeValueIntermediateNode node);
    public abstract virtual void WriteCSharpExpressionAttributeValue(CodeRenderingContext context, CSharpExpressionAttributeValueIntermediateNode node);
    public abstract virtual void WriteCSharpCodeAttributeValue(CodeRenderingContext context, CSharpCodeAttributeValueIntermediateNode node);
    public virtual void WriteComponent(CodeRenderingContext context, ComponentIntermediateNode node);
    public virtual void WriteComponentAttribute(CodeRenderingContext context, ComponentAttributeIntermediateNode node);
    public virtual void WriteComponentChildContent(CodeRenderingContext context, ComponentChildContentIntermediateNode node);
    public virtual void WriteComponentTypeArgument(CodeRenderingContext context, ComponentTypeArgumentIntermediateNode node);
    public virtual void WriteComponentTypeInferenceMethod(CodeRenderingContext context, ComponentTypeInferenceMethodIntermediateNode node);
    public virtual void WriteMarkupElement(CodeRenderingContext context, MarkupElementIntermediateNode node);
    public virtual void WriteMarkupBlock(CodeRenderingContext context, MarkupBlockIntermediateNode node);
    public virtual void WriteReferenceCapture(CodeRenderingContext context, ReferenceCaptureIntermediateNode node);
    public virtual void WriteSetKey(CodeRenderingContext context, SetKeyIntermediateNode node);
    public virtual void WriteSplat(CodeRenderingContext context, SplatIntermediateNode node);
    public abstract virtual void BeginWriterScope(CodeRenderingContext context, string writer);
    public abstract virtual void EndWriterScope(CodeRenderingContext context);
}
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Razor.Language.CodeGeneration.LinePragma : ValueType {
    [CompilerGeneratedAttribute]
private int <StartLineIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StartCharacterIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <EndCharacterIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CharacterOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    public int StartLineIndex { get; }
    public int EndLineIndex { get; }
    public int LineCount { get; }
    public Nullable`1<int> StartCharacterIndex { get; }
    public Nullable`1<int> EndCharacterIndex { get; }
    public Nullable`1<int> CharacterOffset { get; }
    public string FilePath { get; }
    public LinePragma(int startLineIndex, int lineCount, string filePath);
    public LinePragma(int startLineIndex, int lineCount, string filePath, Nullable`1<int> startCharacterIndex, Nullable`1<int> endCharacterIndex, Nullable`1<int> characterOffset);
    [CompilerGeneratedAttribute]
public int get_StartLineIndex();
    public int get_EndLineIndex();
    [CompilerGeneratedAttribute]
public int get_LineCount();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_StartCharacterIndex();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_EndCharacterIndex();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CharacterOffset();
    [CompilerGeneratedAttribute]
public string get_FilePath();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(LinePragma other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class Microsoft.AspNetCore.Razor.Language.CodeGeneration.LiteralRuntimeNodeWriter : RuntimeNodeWriter {
    [CompilerGeneratedAttribute]
private string <WriteCSharpExpressionMethod>k__BackingField;
    public string WriteCSharpExpressionMethod { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_WriteCSharpExpressionMethod();
    [CompilerGeneratedAttribute]
public virtual void set_WriteCSharpExpressionMethod(string value);
}
public class Microsoft.AspNetCore.Razor.Language.CodeGeneration.RuntimeNodeWriter : IntermediateNodeWriter {
    [CompilerGeneratedAttribute]
private string <WriteCSharpExpressionMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WriteHtmlContentMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BeginWriteAttributeMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndWriteAttributeMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WriteAttributeValueMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PushWriterMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PopWriterMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TemplateTypeName>k__BackingField;
    public string WriteCSharpExpressionMethod { get; public set; }
    public string WriteHtmlContentMethod { get; public set; }
    public string BeginWriteAttributeMethod { get; public set; }
    public string EndWriteAttributeMethod { get; public set; }
    public string WriteAttributeValueMethod { get; public set; }
    public string PushWriterMethod { get; public set; }
    public string PopWriterMethod { get; public set; }
    public string TemplateTypeName { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_WriteCSharpExpressionMethod();
    [CompilerGeneratedAttribute]
public virtual void set_WriteCSharpExpressionMethod(string value);
    [CompilerGeneratedAttribute]
public virtual string get_WriteHtmlContentMethod();
    [CompilerGeneratedAttribute]
public virtual void set_WriteHtmlContentMethod(string value);
    [CompilerGeneratedAttribute]
public virtual string get_BeginWriteAttributeMethod();
    [CompilerGeneratedAttribute]
public virtual void set_BeginWriteAttributeMethod(string value);
    [CompilerGeneratedAttribute]
public virtual string get_EndWriteAttributeMethod();
    [CompilerGeneratedAttribute]
public virtual void set_EndWriteAttributeMethod(string value);
    [CompilerGeneratedAttribute]
public virtual string get_WriteAttributeValueMethod();
    [CompilerGeneratedAttribute]
public virtual void set_WriteAttributeValueMethod(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PushWriterMethod();
    [CompilerGeneratedAttribute]
public virtual void set_PushWriterMethod(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PopWriterMethod();
    [CompilerGeneratedAttribute]
public virtual void set_PopWriterMethod(string value);
    [CompilerGeneratedAttribute]
public string get_TemplateTypeName();
    [CompilerGeneratedAttribute]
public void set_TemplateTypeName(string value);
    public virtual void WriteUsingDirective(CodeRenderingContext context, UsingDirectiveIntermediateNode node);
    public virtual void WriteCSharpExpression(CodeRenderingContext context, CSharpExpressionIntermediateNode node);
    public virtual void WriteCSharpCode(CodeRenderingContext context, CSharpCodeIntermediateNode node);
    public virtual void WriteHtmlAttribute(CodeRenderingContext context, HtmlAttributeIntermediateNode node);
    public virtual void WriteHtmlAttributeValue(CodeRenderingContext context, HtmlAttributeValueIntermediateNode node);
    public virtual void WriteCSharpExpressionAttributeValue(CodeRenderingContext context, CSharpExpressionAttributeValueIntermediateNode node);
    public virtual void WriteCSharpCodeAttributeValue(CodeRenderingContext context, CSharpCodeAttributeValueIntermediateNode node);
    public virtual void WriteHtmlContent(CodeRenderingContext context, HtmlContentIntermediateNode node);
    internal void WriteHtmlLiteral(CodeRenderingContext context, int maxStringLiteralLength, string literal);
    public virtual void BeginWriterScope(CodeRenderingContext context, string writer);
    public virtual void EndWriterScope(CodeRenderingContext context);
    [CompilerGeneratedAttribute]
private void <WriteHtmlLiteral>g__WriteLiteral|40_0(string content, <>c__DisplayClass40_0& );
}
internal class Microsoft.AspNetCore.Razor.Language.CodeGeneration.TagHelperHtmlAttributeRuntimeNodeWriter : RuntimeNodeWriter {
    [CompilerGeneratedAttribute]
private string <WriteAttributeValueMethod>k__BackingField;
    public string WriteAttributeValueMethod { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_WriteAttributeValueMethod();
    [CompilerGeneratedAttribute]
public virtual void set_WriteAttributeValueMethod(string value);
}
internal class Microsoft.AspNetCore.Razor.Language.CodeGeneration.TagHelperRenderingContext : object {
    private Dictionary`2<string, string> _renderedBoundAttributes;
    private HashSet`1<string> _verifiedPropertyDictionaries;
    public Dictionary`2<string, string> RenderedBoundAttributes { get; }
    public HashSet`1<string> VerifiedPropertyDictionaries { get; }
    public Dictionary`2<string, string> get_RenderedBoundAttributes();
    public HashSet`1<string> get_VerifiedPropertyDictionaries();
}
internal static class Microsoft.AspNetCore.Razor.Language.ComponentResources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string AttributeDirective_AttributeToken_Description { get; }
    internal static string AttributeDirective_AttributeToken_Name { get; }
    internal static string AttributeDirective_Description { get; }
    internal static string BindTagHelper_Component_Documentation { get; }
    internal static string BindTagHelper_Element_Culture_Documentation { get; }
    internal static string BindTagHelper_Element_Documentation { get; }
    internal static string BindTagHelper_Element_Event_Documentation { get; }
    internal static string BindTagHelper_Element_Format_Documentation { get; }
    internal static string BindTagHelper_Fallback_Documentation { get; }
    internal static string BindTagHelper_Fallback_Event_Documentation { get; }
    internal static string BindTagHelper_Fallback_Format_Documentation { get; }
    internal static string ChildContentParameterName_Documentation { get; }
    internal static string ChildContentParameterName_TopLevelDocumentation { get; }
    internal static string ComponentTypeParameter_Documentation { get; }
    internal static string EventHandlerTagHelper_Documentation { get; }
    internal static string EventHandlerTagHelper_PreventDefault_Documentation { get; }
    internal static string EventHandlerTagHelper_StopPropagation_Documentation { get; }
    internal static string ImplementsDirective_Description { get; }
    internal static string ImplementsDirective_TypeToken_Description { get; }
    internal static string ImplementsDirective_TypeToken_Name { get; }
    internal static string KeyTagHelper_Documentation { get; }
    internal static string LayoutDirective_Description { get; }
    internal static string LayoutDirective_TypeToken_Description { get; }
    internal static string LayoutDirective_TypeToken_Name { get; }
    internal static string PageDirectiveCannotBeImported { get; }
    internal static string PageDirective_Description { get; }
    internal static string PageDirective_RouteToken_Description { get; }
    internal static string PageDirective_RouteToken_Name { get; }
    internal static string PreserveWhitespaceDirective_BooleanToken_Description { get; }
    internal static string PreserveWhitespaceDirective_BooleanToken_Name { get; }
    internal static string PreserveWhitespaceDirective_Description { get; }
    internal static string RefTagHelper_Documentation { get; }
    internal static string SplatTagHelper_Documentation { get; }
    internal static string TypeParamDirective_Constraint_Description { get; }
    internal static string TypeParamDirective_Constraint_Name { get; }
    internal static string TypeParamDirective_Description { get; }
    internal static string TypeParamDirective_Token_Description { get; }
    internal static string TypeParamDirective_Token_Name { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_AttributeDirective_AttributeToken_Description();
    internal static string get_AttributeDirective_AttributeToken_Name();
    internal static string get_AttributeDirective_Description();
    internal static string get_BindTagHelper_Component_Documentation();
    internal static string FormatBindTagHelper_Component_Documentation(object p0, object p1);
    internal static string get_BindTagHelper_Element_Culture_Documentation();
    internal static string get_BindTagHelper_Element_Documentation();
    internal static string FormatBindTagHelper_Element_Documentation(object p0, object p1);
    internal static string get_BindTagHelper_Element_Event_Documentation();
    internal static string FormatBindTagHelper_Element_Event_Documentation(object p0);
    internal static string get_BindTagHelper_Element_Format_Documentation();
    internal static string FormatBindTagHelper_Element_Format_Documentation(object p0);
    internal static string get_BindTagHelper_Fallback_Documentation();
    internal static string get_BindTagHelper_Fallback_Event_Documentation();
    internal static string FormatBindTagHelper_Fallback_Event_Documentation(object p0);
    internal static string get_BindTagHelper_Fallback_Format_Documentation();
    internal static string get_ChildContentParameterName_Documentation();
    internal static string FormatChildContentParameterName_Documentation(object p0);
    internal static string get_ChildContentParameterName_TopLevelDocumentation();
    internal static string get_ComponentTypeParameter_Documentation();
    internal static string FormatComponentTypeParameter_Documentation(object p0, object p1);
    internal static string get_EventHandlerTagHelper_Documentation();
    internal static string FormatEventHandlerTagHelper_Documentation(object p0, object p1);
    internal static string get_EventHandlerTagHelper_PreventDefault_Documentation();
    internal static string FormatEventHandlerTagHelper_PreventDefault_Documentation(object p0);
    internal static string get_EventHandlerTagHelper_StopPropagation_Documentation();
    internal static string FormatEventHandlerTagHelper_StopPropagation_Documentation(object p0);
    internal static string get_ImplementsDirective_Description();
    internal static string get_ImplementsDirective_TypeToken_Description();
    internal static string get_ImplementsDirective_TypeToken_Name();
    internal static string get_KeyTagHelper_Documentation();
    internal static string get_LayoutDirective_Description();
    internal static string get_LayoutDirective_TypeToken_Description();
    internal static string get_LayoutDirective_TypeToken_Name();
    internal static string get_PageDirectiveCannotBeImported();
    internal static string FormatPageDirectiveCannotBeImported(object p0, object p1);
    internal static string get_PageDirective_Description();
    internal static string get_PageDirective_RouteToken_Description();
    internal static string get_PageDirective_RouteToken_Name();
    internal static string get_PreserveWhitespaceDirective_BooleanToken_Description();
    internal static string get_PreserveWhitespaceDirective_BooleanToken_Name();
    internal static string get_PreserveWhitespaceDirective_Description();
    internal static string get_RefTagHelper_Documentation();
    internal static string get_SplatTagHelper_Documentation();
    internal static string get_TypeParamDirective_Constraint_Description();
    internal static string get_TypeParamDirective_Constraint_Name();
    internal static string get_TypeParamDirective_Description();
    internal static string get_TypeParamDirective_Token_Description();
    internal static string get_TypeParamDirective_Token_Name();
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentBindLoweringPass : ComponentIntermediateNodePassBase {
    public int Order { get; }
    public virtual int get_Order();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
    private void ProcessDuplicates(IntermediateNode node);
    private IntermediateNode[] RewriteUsage(IntermediateNode parent, BindEntry bindEntry);
    private bool TryParseBindAttribute(BindEntry bindEntry, String& valueAttributeName);
    private bool TryComputeAttributeNames(IntermediateNode parent, BindEntry bindEntry, String& valueAttributeName, String& changeAttributeName, String& expressionAttributeName, CSharpExpressionIntermediateNode& changeAttributeNode, BoundAttributeDescriptor& valueAttribute, BoundAttributeDescriptor& changeAttribute, BoundAttributeDescriptor& expressionAttribute);
    private void RewriteNodesForComponentDelegateBind(IntermediateToken original, List`1<IntermediateToken> valueExpressionTokens, List`1<IntermediateToken> changeExpressionTokens);
    private void RewriteNodesForComponentEventCallbackBind(IntermediateToken original, List`1<IntermediateToken> valueExpressionTokens, List`1<IntermediateToken> changeExpressionTokens);
    private void RewriteNodesForElementEventCallbackBind(IntermediateToken original, IntermediateToken format, IntermediateToken culture, List`1<IntermediateToken> valueExpressionTokens, List`1<IntermediateToken> changeExpressionTokens);
    private static IntermediateToken GetAttributeContent(IntermediateNode node);
    [CompilerGeneratedAttribute]
internal static bool <TryComputeAttributeNames>g__TryExtractEventNodeStaticText|6_0(TagHelperDirectiveAttributeParameterIntermediateNode node, String& text);
    [CompilerGeneratedAttribute]
internal static CSharpExpressionIntermediateNode <TryComputeAttributeNames>g__ExtractEventNodeExpression|6_1(TagHelperDirectiveAttributeParameterIntermediateNode node);
    [CompilerGeneratedAttribute]
internal static IntermediateToken <GetAttributeContent>g__GetToken|10_0(IntermediateNode parent);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentChildContentDiagnosticPass : ComponentIntermediateNodePassBase {
    public int Order { get; }
    public virtual int get_Order();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
public static class Microsoft.AspNetCore.Razor.Language.Components.ComponentCodeDirective : object {
    public static DirectiveDescriptor Directive;
    private static ComponentCodeDirective();
    public static void Register(RazorProjectEngineBuilder builder);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentCodeTarget : CodeTarget {
    private RazorCodeGenerationOptions _options;
    [CompilerGeneratedAttribute]
private ICodeTargetExtension[] <Extensions>k__BackingField;
    public ICodeTargetExtension[] Extensions { get; }
    public ComponentCodeTarget(RazorCodeGenerationOptions options, IEnumerable`1<ICodeTargetExtension> extensions);
    [CompilerGeneratedAttribute]
public ICodeTargetExtension[] get_Extensions();
    public virtual IntermediateNodeWriter CreateNodeWriter();
    public virtual TExtension GetExtension();
    public virtual bool HasExtension();
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentComplexAttributeContentPass : ComponentIntermediateNodePassBase {
    public int Order { get; }
    public virtual int get_Order();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
    private void ProcessAttributes(TagHelperIntermediateNode node);
    private static bool TrySimplifyContent(IntermediateNode node);
}
internal static class Microsoft.AspNetCore.Razor.Language.Components.ComponentConstrainedTypeParamDirective : object {
    public static DirectiveDescriptor Directive;
    private static ComponentConstrainedTypeParamDirective();
    public static RazorProjectEngineBuilder Register(RazorProjectEngineBuilder builder);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentCssScopePass : ComponentIntermediateNodePassBase {
    public int Order { get; }
    public virtual int get_Order();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
    private void ProcessElement(MarkupElementIntermediateNode node, string cssScope);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentDesignTimeNodeWriter : ComponentNodeWriter {
    private ScopeStack _scopeStack;
    private static string DesignTimeVariable;
    public virtual void WriteMarkupBlock(CodeRenderingContext context, MarkupBlockIntermediateNode node);
    public virtual void WriteMarkupElement(CodeRenderingContext context, MarkupElementIntermediateNode node);
    public virtual void WriteUsingDirective(CodeRenderingContext context, UsingDirectiveIntermediateNode node);
    public virtual void WriteCSharpExpression(CodeRenderingContext context, CSharpExpressionIntermediateNode node);
    private void WriteCSharpExpressionInnards(CodeRenderingContext context, CSharpExpressionIntermediateNode node, string type);
    public virtual void WriteCSharpCode(CodeRenderingContext context, CSharpCodeIntermediateNode node);
    public virtual void WriteHtmlAttribute(CodeRenderingContext context, HtmlAttributeIntermediateNode node);
    public virtual void WriteHtmlAttributeValue(CodeRenderingContext context, HtmlAttributeValueIntermediateNode node);
    public virtual void WriteCSharpExpressionAttributeValue(CodeRenderingContext context, CSharpExpressionAttributeValueIntermediateNode node);
    public virtual void WriteHtmlContent(CodeRenderingContext context, HtmlContentIntermediateNode node);
    protected virtual void BeginWriteAttribute(CodeRenderingContext context, string key);
    protected virtual void BeginWriteAttribute(CodeRenderingContext context, IntermediateNode expression);
    public virtual void WriteComponent(CodeRenderingContext context, ComponentIntermediateNode node);
    private void WriteTypeInferenceMethodParameterInnards(CodeRenderingContext context, TypeInferenceMethodParameter parameter);
    public virtual void WriteComponentAttribute(CodeRenderingContext context, ComponentAttributeIntermediateNode node);
    private void WriteComponentAttributeInnards(CodeRenderingContext context, ComponentAttributeIntermediateNode node, bool canTypeCheck);
    private IReadOnlyList`1<IntermediateToken> GetCSharpTokens(IntermediateNode node);
    public virtual void WriteComponentChildContent(CodeRenderingContext context, ComponentChildContentIntermediateNode node);
    private void WriteComponentChildContentInnards(CodeRenderingContext context, ComponentChildContentIntermediateNode node);
    public virtual void WriteComponentTypeArgument(CodeRenderingContext context, ComponentTypeArgumentIntermediateNode node);
    public virtual void WriteTemplate(CodeRenderingContext context, TemplateIntermediateNode node);
    public virtual void WriteSetKey(CodeRenderingContext context, SetKeyIntermediateNode node);
    private void WriteSetKeyInnards(CodeRenderingContext context, SetKeyIntermediateNode node);
    public virtual void WriteSplat(CodeRenderingContext context, SplatIntermediateNode node);
    private void WriteSplatInnards(CodeRenderingContext context, SplatIntermediateNode node, bool canTypeCheck);
    public virtual void WriteReferenceCapture(CodeRenderingContext context, ReferenceCaptureIntermediateNode node);
    protected virtual void WriteReferenceCaptureInnards(CodeRenderingContext context, ReferenceCaptureIntermediateNode node, bool shouldTypeCheck);
    private void WriteCSharpToken(CodeRenderingContext context, IntermediateToken token);
    [CompilerGeneratedAttribute]
internal static bool <WriteComponentAttributeInnards>g__NeedsTypeCheck|17_0(ComponentAttributeIntermediateNode n);
    [CompilerGeneratedAttribute]
internal static IReadOnlyList`1<IntermediateToken> <WriteComponentTypeArgument>g__GetCSharpTokens|21_0(ComponentTypeArgumentIntermediateNode arg);
}
internal static class Microsoft.AspNetCore.Razor.Language.Components.ComponentDiagnosticFactory : object {
    private static string DiagnosticPrefix;
    public static RazorDiagnosticDescriptor UnsupportedTagHelperDirective;
    public static RazorDiagnosticDescriptor CodeBlockInAttribute;
    public static RazorDiagnosticDescriptor UnclosedTag;
    public static RazorDiagnosticDescriptor UnexpectedClosingTag;
    public static RazorDiagnosticDescriptor UnexpectedClosingTagForVoidElement;
    public static RazorDiagnosticDescriptor InvalidHtmlContent;
    public static RazorDiagnosticDescriptor MultipleComponents;
    public static RazorDiagnosticDescriptor UnsupportedComplexContent;
    public static RazorDiagnosticDescriptor PageDirective_CannotBeImported;
    public static RazorDiagnosticDescriptor PageDirective_MustSpecifyRoute;
    public static RazorDiagnosticDescriptor BindAttribute_Duplicates;
    public static RazorDiagnosticDescriptor EventHandler_Duplicates;
    public static RazorDiagnosticDescriptor BindAttribute_InvalidSyntax;
    public static RazorDiagnosticDescriptor DisallowedScriptTag;
    public static RazorDiagnosticDescriptor TemplateInvalidLocation;
    public static RazorDiagnosticDescriptor ChildContentSetByAttributeAndBody;
    public static RazorDiagnosticDescriptor ChildContentMixedWithExplicitChildContent;
    public static RazorDiagnosticDescriptor ChildContentHasInvalidAttribute;
    public static RazorDiagnosticDescriptor ChildContentHasInvalidParameter;
    public static RazorDiagnosticDescriptor ChildContentRepeatedParameterName;
    public static RazorDiagnosticDescriptor GenericComponentMissingTypeArgument;
    public static RazorDiagnosticDescriptor GenericComponentTypeInferenceUnderspecified;
    public static RazorDiagnosticDescriptor ChildContentHasInvalidParameterOnComponent;
    public static RazorDiagnosticDescriptor UnsupportedComponentImportContent;
    public static RazorDiagnosticDescriptor BindAttributeParameter_MissingBind;
    public static RazorDiagnosticDescriptor DuplicateMarkupAttribute;
    public static RazorDiagnosticDescriptor DuplicateMarkupAttributeDirective;
    public static RazorDiagnosticDescriptor DuplicateComponentParameter;
    public static RazorDiagnosticDescriptor DuplicateComponentParameterDirective;
    public static RazorDiagnosticDescriptor ComponentNamesCannotStartWithLowerCase;
    public static RazorDiagnosticDescriptor UnexpectedMarkupElement;
    public static RazorDiagnosticDescriptor InconsistentStartAndEndTagName;
    public static RazorDiagnosticDescriptor EventHandlerParameter_Duplicates;
    private static ComponentDiagnosticFactory();
    public static RazorDiagnostic Create_UnsupportedTagHelperDirective(Nullable`1<SourceSpan> source);
    public static RazorDiagnostic Create_CodeBlockInAttribute(Nullable`1<SourceSpan> source, string expression);
    public static RazorDiagnostic Create_UnclosedTag(Nullable`1<SourceSpan> span, string tagName);
    public static RazorDiagnostic Create_UnexpectedClosingTag(Nullable`1<SourceSpan> span, string tagName);
    public static RazorDiagnostic Create_UnexpectedClosingTagForVoidElement(Nullable`1<SourceSpan> span, string tagName);
    public static RazorDiagnostic Create_InvalidHtmlContent(Nullable`1<SourceSpan> span, string text);
    public static RazorDiagnostic Create_MultipleComponents(Nullable`1<SourceSpan> span, string tagName, IEnumerable`1<TagHelperDescriptor> components);
    public static RazorDiagnostic Create_UnsupportedComplexContent(IntermediateNode node, string attributeName);
    public static RazorDiagnostic CreatePageDirective_CannotBeImported(SourceSpan source);
    public static RazorDiagnostic CreatePageDirective_MustSpecifyRoute(Nullable`1<SourceSpan> source);
    public static RazorDiagnostic CreateBindAttribute_Duplicates(Nullable`1<SourceSpan> source, string attribute, TagHelperDirectiveAttributeIntermediateNode[] attributes);
    public static RazorDiagnostic CreateEventHandler_Duplicates(Nullable`1<SourceSpan> source, string attribute, TagHelperDirectiveAttributeIntermediateNode[] attributes);
    public static RazorDiagnostic CreateBindAttribute_InvalidSyntax(Nullable`1<SourceSpan> source, string attribute);
    public static RazorDiagnostic Create_DisallowedScriptTag(Nullable`1<SourceSpan> source);
    public static RazorDiagnostic Create_TemplateInvalidLocation(Nullable`1<SourceSpan> source);
    public static RazorDiagnostic Create_ChildContentSetByAttributeAndBody(Nullable`1<SourceSpan> source, string attribute);
    public static RazorDiagnostic Create_ChildContentMixedWithExplicitChildContent(Nullable`1<SourceSpan> source, ComponentIntermediateNode component);
    public static RazorDiagnostic Create_ChildContentHasInvalidAttribute(Nullable`1<SourceSpan> source, string attribute, string element);
    public static RazorDiagnostic Create_ChildContentHasInvalidParameter(Nullable`1<SourceSpan> source, string attribute, string element);
    public static RazorDiagnostic Create_ChildContentRepeatedParameterName(Nullable`1<SourceSpan> source, ComponentChildContentIntermediateNode childContent1, ComponentIntermediateNode component1, ComponentChildContentIntermediateNode childContent2, ComponentIntermediateNode component2);
    public static RazorDiagnostic Create_GenericComponentMissingTypeArgument(Nullable`1<SourceSpan> source, ComponentIntermediateNode component, IEnumerable`1<BoundAttributeDescriptor> attributes);
    public static RazorDiagnostic Create_GenericComponentTypeInferenceUnderspecified(Nullable`1<SourceSpan> source, ComponentIntermediateNode component, IEnumerable`1<BoundAttributeDescriptor> attributes);
    public static RazorDiagnostic Create_ChildContentHasInvalidParameterOnComponent(Nullable`1<SourceSpan> source, string attribute, string element);
    public static RazorDiagnostic Create_UnsupportedComponentImportContent(Nullable`1<SourceSpan> source);
    public static RazorDiagnostic CreateBindAttributeParameter_MissingBind(Nullable`1<SourceSpan> source, string attribute);
    public static RazorDiagnostic Create_DuplicateMarkupAttribute(string attributeName, Nullable`1<SourceSpan> source);
    public static RazorDiagnostic Create_DuplicateMarkupAttributeDirective(string attributeName, string directiveAttributeName, Nullable`1<SourceSpan> source);
    public static RazorDiagnostic Create_DuplicateComponentParameter(string attributeName, Nullable`1<SourceSpan> source);
    public static RazorDiagnostic Create_DuplicateComponentParameterDirective(string attributeName, string directiveAttributeName, Nullable`1<SourceSpan> source);
    public static RazorDiagnostic Create_ComponentNamesCannotStartWithLowerCase(string componentName, Nullable`1<SourceSpan> source);
    public static RazorDiagnostic Create_UnexpectedMarkupElement(string elementName, Nullable`1<SourceSpan> source);
    public static RazorDiagnostic Create_InconsistentStartAndEndTagName(string startTagName, string endTagName, Nullable`1<SourceSpan> source);
    public static RazorDiagnostic CreateEventHandlerParameter_Duplicates(Nullable`1<SourceSpan> source, string attribute, TagHelperDirectiveAttributeParameterIntermediateNode[] attributes);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentDocumentClassifierPass : DocumentClassifierPassBase {
    public static string ComponentDocumentKind;
    [CompilerGeneratedAttribute]
private string <FallbackRootNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MangleClassNames>k__BackingField;
    public string FallbackRootNamespace { get; public set; }
    public bool MangleClassNames { get; public set; }
    protected string DocumentKind { get; }
    public int Order { get; }
    [CompilerGeneratedAttribute]
public string get_FallbackRootNamespace();
    [CompilerGeneratedAttribute]
public void set_FallbackRootNamespace(string value);
    [CompilerGeneratedAttribute]
public bool get_MangleClassNames();
    [CompilerGeneratedAttribute]
public void set_MangleClassNames(bool value);
    protected virtual string get_DocumentKind();
    public virtual int get_Order();
    protected virtual bool IsMatch(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
    protected virtual CodeTarget CreateTarget(RazorCodeDocument codeDocument, RazorCodeGenerationOptions options);
    protected virtual void OnDocumentStructureCreated(RazorCodeDocument codeDocument, NamespaceDeclarationIntermediateNode namespace, ClassDeclarationIntermediateNode class, MethodDeclarationIntermediateNode method);
    private bool TryComputeClassName(RazorCodeDocument codeDocument, String& className);
    private static string NormalizePath(string path);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentEventHandlerLoweringPass : ComponentIntermediateNodePassBase {
    public int Order { get; }
    public virtual int get_Order();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
    private void ProcessDuplicates(IntermediateNode parent);
    private IntermediateNode RewriteUsage(IntermediateNode parent, TagHelperDirectiveAttributeIntermediateNode node);
    private static IReadOnlyList`1<IntermediateToken> GetAttributeContent(IntermediateNode node);
    private IntermediateNode RewriteParameterUsage(IntermediateNode parent, TagHelperDirectiveAttributeParameterIntermediateNode node);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentGenericTypePass : ComponentIntermediateNodePassBase {
    private TypeNameFeature _typeNameFeature;
    public int Order { get; }
    private TypeNameFeature TypeNameFeature { get; }
    public virtual int get_Order();
    private TypeNameFeature get_TypeNameFeature();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentImportProjectFeature : object {
    private static string DefaultUsingImportContent;
    [CompilerGeneratedAttribute]
private RazorProjectEngine <ProjectEngine>k__BackingField;
    public RazorProjectEngine ProjectEngine { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual RazorProjectEngine get_ProjectEngine();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ProjectEngine(RazorProjectEngine value);
    public sealed virtual IReadOnlyList`1<RazorProjectItem> GetImports(RazorProjectItem projectItem);
    public IEnumerable`1<RazorProjectItem> GetHierarchicalImports(RazorProject project, RazorProjectItem projectItem);
}
internal static class Microsoft.AspNetCore.Razor.Language.Components.ComponentInjectDirective : object {
    public static DirectiveDescriptor Directive;
    private static ComponentInjectDirective();
    public static void Register(RazorProjectEngineBuilder builder);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentInjectDirectivePass : IntermediateNodePassBase {
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentInjectIntermediateNode : ExtensionIntermediateNode {
    private static IList`1<string> _injectedPropertyModifiers;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    public string TypeName { get; }
    public string MemberName { get; }
    public IntermediateNodeCollection Children { get; }
    public ComponentInjectIntermediateNode(string typeName, string memberName);
    private static ComponentInjectIntermediateNode();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public string get_MemberName();
    public virtual IntermediateNodeCollection get_Children();
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void WriteNode(CodeTarget target, CodeRenderingContext context);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Components.ComponentIntermediateNodePassBase : IntermediateNodePassBase {
    protected bool IsComponentDocument(DocumentIntermediateNode document);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentKeyLoweringPass : ComponentIntermediateNodePassBase {
    public int Order { get; }
    public virtual int get_Order();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
    private IntermediateNode RewriteUsage(IntermediateNode parent, TagHelperDirectiveAttributeIntermediateNode node);
    private IntermediateToken DetermineKeyValueToken(TagHelperDirectiveAttributeIntermediateNode attributeNode);
}
internal static class Microsoft.AspNetCore.Razor.Language.Components.ComponentLayoutDirective : object {
    public static DirectiveDescriptor Directive;
    private static ComponentLayoutDirective();
    public static void Register(RazorProjectEngineBuilder builder);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentLayoutDirectivePass : IntermediateNodePassBase {
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentLoweringPass : ComponentIntermediateNodePassBase {
    public int Order { get; }
    public virtual int get_Order();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
    private static ComponentIntermediateNode RewriteAsComponent(TagHelperIntermediateNode node, TagHelperDescriptor tagHelper);
    private static void ValidateRequiredAttributes(TagHelperIntermediateNode node, TagHelperDescriptor tagHelper, ComponentIntermediateNode intermediateNode);
    private static MarkupElementIntermediateNode RewriteAsElement(TagHelperIntermediateNode node);
    [CompilerGeneratedAttribute]
internal static bool <ValidateRequiredAttributes>g__IsPresentAsAttribute|4_1(string attributeName, ComponentIntermediateNode intermediateNode);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentMarkupBlockPass : ComponentIntermediateNodePassBase {
    public int Order { get; }
    public virtual int get_Order();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentMarkupDiagnosticPass : ComponentIntermediateNodePassBase {
    public static int DefaultOrder;
    public int Order { get; }
    public virtual int get_Order();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentMarkupEncodingPass : ComponentIntermediateNodePassBase {
    public int Order { get; }
    public virtual int get_Order();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
internal static class Microsoft.AspNetCore.Razor.Language.Components.ComponentMetadata : object {
    private static StringSegment MangledClassNamePrefix;
    public static string SpecialKindKey;
    public static string ImportsFileName;
    private static ComponentMetadata();
    public static string MangleClassName(string className);
    public static bool IsMangledClass(StringSegment className);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Components.ComponentNodeWriter : IntermediateNodeWriter {
    protected abstract virtual void BeginWriteAttribute(CodeRenderingContext context, string key);
    protected abstract virtual void BeginWriteAttribute(CodeRenderingContext context, IntermediateNode expression);
    protected abstract virtual void WriteReferenceCaptureInnards(CodeRenderingContext context, ReferenceCaptureIntermediateNode node, bool shouldTypeCheck);
    public abstract virtual void WriteTemplate(CodeRenderingContext context, TemplateIntermediateNode node);
    public sealed virtual void BeginWriterScope(CodeRenderingContext context, string writer);
    public sealed virtual void EndWriterScope(CodeRenderingContext context);
    public sealed virtual void WriteCSharpCodeAttributeValue(CodeRenderingContext context, CSharpCodeAttributeValueIntermediateNode node);
    public virtual void WriteComponentTypeInferenceMethod(CodeRenderingContext context, ComponentTypeInferenceMethodIntermediateNode node);
    protected List`1<TypeInferenceMethodParameter> GetTypeInferenceMethodParameters(ComponentTypeInferenceMethodIntermediateNode node);
    protected static void UseCapturedCascadingGenericParameterVariable(ComponentIntermediateNode node, TypeInferenceMethodParameter parameter, string variableName);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentPageDirective : object {
    public static DirectiveDescriptor Directive;
    [CompilerGeneratedAttribute]
private string <RouteTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateNode <DirectiveNode>k__BackingField;
    public string RouteTemplate { get; }
    public IntermediateNode DirectiveNode { get; }
    private ComponentPageDirective(string routeTemplate, IntermediateNode directiveNode);
    private static ComponentPageDirective();
    [CompilerGeneratedAttribute]
public string get_RouteTemplate();
    [CompilerGeneratedAttribute]
public IntermediateNode get_DirectiveNode();
    public static RazorProjectEngineBuilder Register(RazorProjectEngineBuilder builder);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentPageDirectivePass : IntermediateNodePassBase {
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
internal static class Microsoft.AspNetCore.Razor.Language.Components.ComponentPreserveWhitespaceDirective : object {
    public static DirectiveDescriptor Directive;
    private static ComponentPreserveWhitespaceDirective();
    public static void Register(RazorProjectEngineBuilder builder);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentReferenceCaptureLoweringPass : ComponentIntermediateNodePassBase {
    public int Order { get; }
    public virtual int get_Order();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
    private IntermediateNode RewriteUsage(ClassDeclarationIntermediateNode classNode, IntermediateNode parent, TagHelperDirectiveAttributeIntermediateNode node);
    private IntermediateToken DetermineIdentifierToken(TagHelperDirectiveAttributeIntermediateNode attributeNode);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentRuntimeNodeWriter : ComponentNodeWriter {
    private List`1<IntermediateToken> _currentAttributeValues;
    private ScopeStack _scopeStack;
    private int _sourceSequence;
    public virtual void WriteCSharpCode(CodeRenderingContext context, CSharpCodeIntermediateNode node);
    public virtual void WriteCSharpExpression(CodeRenderingContext context, CSharpExpressionIntermediateNode node);
    public virtual void WriteCSharpExpressionAttributeValue(CodeRenderingContext context, CSharpExpressionAttributeValueIntermediateNode node);
    public virtual void WriteMarkupBlock(CodeRenderingContext context, MarkupBlockIntermediateNode node);
    public virtual void WriteMarkupElement(CodeRenderingContext context, MarkupElementIntermediateNode node);
    public virtual void WriteHtmlAttribute(CodeRenderingContext context, HtmlAttributeIntermediateNode node);
    public virtual void WriteHtmlAttributeValue(CodeRenderingContext context, HtmlAttributeValueIntermediateNode node);
    public virtual void WriteHtmlContent(CodeRenderingContext context, HtmlContentIntermediateNode node);
    public virtual void WriteUsingDirective(CodeRenderingContext context, UsingDirectiveIntermediateNode node);
    public virtual void WriteComponent(CodeRenderingContext context, ComponentIntermediateNode node);
    private void WriteTypeInferenceMethodParameterInnards(CodeRenderingContext context, TypeInferenceMethodParameter parameter);
    public virtual void WriteComponentAttribute(CodeRenderingContext context, ComponentAttributeIntermediateNode node);
    private void WriteComponentAttributeInnards(CodeRenderingContext context, ComponentAttributeIntermediateNode node, bool canTypeCheck);
    private IReadOnlyList`1<IntermediateToken> GetCSharpTokens(IntermediateNode node);
    public virtual void WriteComponentChildContent(CodeRenderingContext context, ComponentChildContentIntermediateNode node);
    private void WriteComponentChildContentInnards(CodeRenderingContext context, ComponentChildContentIntermediateNode node);
    public virtual void WriteComponentTypeArgument(CodeRenderingContext context, ComponentTypeArgumentIntermediateNode node);
    public virtual void WriteTemplate(CodeRenderingContext context, TemplateIntermediateNode node);
    public virtual void WriteSetKey(CodeRenderingContext context, SetKeyIntermediateNode node);
    private void WriteSetKeyInnards(CodeRenderingContext context, SetKeyIntermediateNode node);
    public virtual void WriteSplat(CodeRenderingContext context, SplatIntermediateNode node);
    private void WriteSplatInnards(CodeRenderingContext context, SplatIntermediateNode node, bool canTypeCheck);
    public virtual void WriteReferenceCapture(CodeRenderingContext context, ReferenceCaptureIntermediateNode node);
    protected virtual void WriteReferenceCaptureInnards(CodeRenderingContext context, ReferenceCaptureIntermediateNode node, bool shouldTypeCheck);
    private void WriteAttribute(CodeRenderingContext context, string key, IList`1<IntermediateToken> value);
    private void WriteAttribute(CodeRenderingContext context, IntermediateNode nameExpression, IList`1<IntermediateToken> value);
    protected virtual void BeginWriteAttribute(CodeRenderingContext context, string key);
    protected virtual void BeginWriteAttribute(CodeRenderingContext context, IntermediateNode nameExpression);
    private static string GetHtmlContent(HtmlContentIntermediateNode node);
    private static void WriteAttributeValue(CodeRenderingContext context, IList`1<IntermediateToken> tokens);
    private static void WriteCSharpToken(CodeRenderingContext context, IntermediateToken token, bool includeLinePragma);
    [CompilerGeneratedAttribute]
internal static IReadOnlyList`1<IntermediateToken> <WriteComponentAttributeInnards>g__GetHtmlTokens|15_0(HtmlContentIntermediateNode html);
    [CompilerGeneratedAttribute]
internal static bool <WriteComponentAttributeInnards>g__NeedsTypeCheck|15_1(ComponentAttributeIntermediateNode n, <>c__DisplayClass15_0& );
}
internal static class Microsoft.AspNetCore.Razor.Language.Components.ComponentsApi : object {
    public static string AssemblyName;
    public static string AddMultipleAttributesTypeFullName;
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentScriptTagPass : ComponentIntermediateNodePassBase {
    public int Order { get; }
    public virtual int get_Order();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentSplatLoweringPass : ComponentIntermediateNodePassBase {
    public int Order { get; }
    public virtual int get_Order();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
    private IntermediateNode RewriteUsage(IntermediateNode parent, TagHelperDirectiveAttributeIntermediateNode node);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentTemplateDiagnosticPass : ComponentIntermediateNodePassBase {
    public int Order { get; }
    public virtual int get_Order();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentTemplateTargetExtension : object {
    public sealed virtual void WriteTemplate(CodeRenderingContext context, TemplateIntermediateNode node);
}
internal static class Microsoft.AspNetCore.Razor.Language.Components.ComponentTypeParamDirective : object {
    public static DirectiveDescriptor Directive;
    private static ComponentTypeParamDirective();
    public static RazorProjectEngineBuilder Register(RazorProjectEngineBuilder builder);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ComponentWhitespacePass : ComponentIntermediateNodePassBase {
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
    private static bool PreserveWhitespaceIsEnabled(DocumentIntermediateNode documentNode);
    private static int RemoveContiguousWhitespace(IntermediateNodeCollection nodes, TraversalDirection direction, Nullable`1<int> startIndex);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.RouteAttributeExtensionNode : ExtensionIntermediateNode {
    [CompilerGeneratedAttribute]
private StringSegment <Template>k__BackingField;
    public StringSegment Template { get; }
    public IntermediateNodeCollection Children { get; }
    public RouteAttributeExtensionNode(StringSegment template);
    [CompilerGeneratedAttribute]
public StringSegment get_Template();
    public virtual IntermediateNodeCollection get_Children();
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void WriteNode(CodeTarget target, CodeRenderingContext context);
}
internal class Microsoft.AspNetCore.Razor.Language.Components.ScopeStack : object {
    private Stack`1<ScopeEntry> _stack;
    private int _builderVarNumber;
    [CompilerGeneratedAttribute]
private string <BuilderVarName>k__BackingField;
    public string BuilderVarName { get; private set; }
    public int Depth { get; }
    [CompilerGeneratedAttribute]
public string get_BuilderVarName();
    [CompilerGeneratedAttribute]
private void set_BuilderVarName(string value);
    public int get_Depth();
    public void OpenComponentScope(CodeRenderingContext context, string name, string parameterName);
    public void OpenTemplateScope(CodeRenderingContext context);
    public void CloseScope(CodeRenderingContext context);
    private void OffsetBuilderVarNumber(int delta);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Razor.Language.Components.TagHelperBoundAttributeDescriptorExtensions : object {
    [ExtensionAttribute]
public static bool IsDelegateProperty(BoundAttributeDescriptor attribute);
    [ExtensionAttribute]
public static bool IsEventCallbackProperty(BoundAttributeDescriptor attribute);
    [ExtensionAttribute]
public static bool IsGenericTypedProperty(BoundAttributeDescriptor attribute);
    [ExtensionAttribute]
public static bool IsTypeParameterProperty(BoundAttributeDescriptor attribute);
    [ExtensionAttribute]
public static bool IsCascadingTypeParameterProperty(BoundAttributeDescriptor attribute);
    [ExtensionAttribute]
public static bool IsWeaklyTyped(BoundAttributeDescriptor attribute);
    [ExtensionAttribute]
public static bool IsChildContentProperty(BoundAttributeDescriptor attribute);
    [ExtensionAttribute]
public static bool IsChildContentProperty(BoundAttributeDescriptorBuilder attribute);
    [ExtensionAttribute]
public static bool IsParameterizedChildContentProperty(BoundAttributeDescriptor attribute);
    [ExtensionAttribute]
public static bool IsParameterizedChildContentProperty(BoundAttributeDescriptorBuilder attribute);
    [ExtensionAttribute]
public static bool IsChildContentParameterNameProperty(BoundAttributeDescriptor attribute);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Razor.Language.Components.TagHelperDescriptorExtensions : object {
    [ExtensionAttribute]
public static bool IsAnyComponentDocumentTagHelper(TagHelperDescriptor tagHelper);
    [ExtensionAttribute]
public static bool IsBindTagHelper(TagHelperDescriptor tagHelper);
    [ExtensionAttribute]
public static bool IsFallbackBindTagHelper(TagHelperDescriptor tagHelper);
    [ExtensionAttribute]
public static bool IsGenericTypedComponent(TagHelperDescriptor tagHelper);
    [ExtensionAttribute]
public static bool IsInputElementBindTagHelper(TagHelperDescriptor tagHelper);
    [ExtensionAttribute]
public static bool IsInputElementFallbackBindTagHelper(TagHelperDescriptor tagHelper);
    [ExtensionAttribute]
public static string GetValueAttributeName(TagHelperDescriptor tagHelper);
    [ExtensionAttribute]
public static string GetChangeAttributeName(TagHelperDescriptor tagHelper);
    [ExtensionAttribute]
public static string GetExpressionAttributeName(TagHelperDescriptor tagHelper);
    [ExtensionAttribute]
public static bool IsInvariantCultureBindTagHelper(TagHelperDescriptor tagHelper);
    [ExtensionAttribute]
public static string GetFormat(TagHelperDescriptor tagHelper);
    [ExtensionAttribute]
public static bool IsChildContentTagHelper(TagHelperDescriptor tagHelper);
    [ExtensionAttribute]
public static bool IsComponentTagHelper(TagHelperDescriptor tagHelper);
    [ExtensionAttribute]
public static bool IsEventHandlerTagHelper(TagHelperDescriptor tagHelper);
    [ExtensionAttribute]
public static bool IsKeyTagHelper(TagHelperDescriptor tagHelper);
    [ExtensionAttribute]
public static bool IsSplatTagHelper(TagHelperDescriptor tagHelper);
    [ExtensionAttribute]
public static bool IsRefTagHelper(TagHelperDescriptor tagHelper);
    [ExtensionAttribute]
public static bool IsComponentFullyQualifiedNameMatch(TagHelperDescriptor tagHelper);
    [ExtensionAttribute]
public static string GetEventArgsType(TagHelperDescriptor tagHelper);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Razor.Language.Components.TagHelperDescriptorExtensions/<GetChildContentProperties>d__19")]
[ExtensionAttribute]
public static IEnumerable`1<BoundAttributeDescriptor> GetChildContentProperties(TagHelperDescriptor tagHelper);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Razor.Language.Components.TagHelperDescriptorExtensions/<GetTypeParameters>d__20")]
[ExtensionAttribute]
public static IEnumerable`1<BoundAttributeDescriptor> GetTypeParameters(TagHelperDescriptor tagHelper);
    [ExtensionAttribute]
public static bool SuppliesCascadingGenericParameters(TagHelperDescriptor tagHelper);
}
internal static class Microsoft.AspNetCore.Razor.Language.CSharpIdentifier : object {
    private static bool IsIdentifierStart(char character);
    public static bool IsIdentifierPart(char character);
    private static bool IsIdentifierPartByUnicodeCategory(char character);
    public static string SanitizeIdentifier(StringSegment inputName);
    public static void AppendSanitized(StringBuilder builder, StringSegment inputName);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultAllowedChildTagDescriptor : AllowedChildTagDescriptor {
    public DefaultAllowedChildTagDescriptor(string name, string displayName, RazorDiagnostic[] diagnostics);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultAllowedChildTagDescriptorBuilder : AllowedChildTagDescriptorBuilder {
    private DefaultTagHelperDescriptorBuilder _parent;
    private RazorDiagnosticCollection _diagnostics;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    public string Name { get; public set; }
    public string DisplayName { get; public set; }
    public RazorDiagnosticCollection Diagnostics { get; }
    public DefaultAllowedChildTagDescriptorBuilder(DefaultTagHelperDescriptorBuilder parent);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public virtual void set_DisplayName(string value);
    public virtual RazorDiagnosticCollection get_Diagnostics();
    public AllowedChildTagDescriptor Build();
    private HashSet`1<RazorDiagnostic> Validate();
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultBoundAttributeDescriptor : BoundAttributeDescriptor {
    public DefaultBoundAttributeDescriptor(string kind, string name, string typeName, bool isEnum, bool hasIndexer, string indexerNamePrefix, string indexerTypeName, string documentation, string displayName, bool caseSensitive, BoundAttributeParameterDescriptor[] parameterDescriptors, Dictionary`2<string, string> metadata, RazorDiagnostic[] diagnostics);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultBoundAttributeDescriptorBuilder : BoundAttributeDescriptorBuilder {
    private static IReadOnlyDictionary`2<string, string> PrimitiveDisplayTypeNameLookups;
    private DefaultTagHelperDescriptorBuilder _parent;
    private string _kind;
    private Dictionary`2<string, string> _metadata;
    private List`1<DefaultBoundAttributeParameterDescriptorBuilder> _attributeParameterBuilders;
    private RazorDiagnosticCollection _diagnostics;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndexerAttributeNamePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndexerValueTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Documentation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    public string Name { get; public set; }
    public string TypeName { get; public set; }
    public bool IsEnum { get; public set; }
    public bool IsDictionary { get; public set; }
    public string IndexerAttributeNamePrefix { get; public set; }
    public string IndexerValueTypeName { get; public set; }
    public string Documentation { get; public set; }
    public string DisplayName { get; public set; }
    public IDictionary`2<string, string> Metadata { get; }
    public RazorDiagnosticCollection Diagnostics { get; }
    internal bool CaseSensitive { get; }
    public DefaultBoundAttributeDescriptorBuilder(DefaultTagHelperDescriptorBuilder parent, string kind);
    private static DefaultBoundAttributeDescriptorBuilder();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TypeName();
    [CompilerGeneratedAttribute]
public virtual void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsEnum();
    [CompilerGeneratedAttribute]
public virtual void set_IsEnum(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsDictionary();
    [CompilerGeneratedAttribute]
public virtual void set_IsDictionary(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_IndexerAttributeNamePrefix();
    [CompilerGeneratedAttribute]
public virtual void set_IndexerAttributeNamePrefix(string value);
    [CompilerGeneratedAttribute]
public virtual string get_IndexerValueTypeName();
    [CompilerGeneratedAttribute]
public virtual void set_IndexerValueTypeName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Documentation();
    [CompilerGeneratedAttribute]
public virtual void set_Documentation(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public virtual void set_DisplayName(string value);
    public virtual IDictionary`2<string, string> get_Metadata();
    public virtual RazorDiagnosticCollection get_Diagnostics();
    internal bool get_CaseSensitive();
    public virtual void BindAttributeParameter(Action`1<BoundAttributeParameterDescriptorBuilder> configure);
    public BoundAttributeDescriptor Build();
    private string GetDisplayName();
    private HashSet`1<RazorDiagnostic> Validate();
    private void EnsureAttributeParameterBuilders();
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultBoundAttributeParameterDescriptor : BoundAttributeParameterDescriptor {
    public DefaultBoundAttributeParameterDescriptor(string kind, string name, string typeName, bool isEnum, string documentation, string displayName, bool caseSensitive, Dictionary`2<string, string> metadata, RazorDiagnostic[] diagnostics);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultBoundAttributeParameterDescriptorBuilder : BoundAttributeParameterDescriptorBuilder {
    private DefaultBoundAttributeDescriptorBuilder _parent;
    private string _kind;
    private Dictionary`2<string, string> _metadata;
    private RazorDiagnosticCollection _diagnostics;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Documentation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    public string Name { get; public set; }
    public string TypeName { get; public set; }
    public bool IsEnum { get; public set; }
    public string Documentation { get; public set; }
    public string DisplayName { get; public set; }
    public IDictionary`2<string, string> Metadata { get; }
    public RazorDiagnosticCollection Diagnostics { get; }
    internal bool CaseSensitive { get; }
    public DefaultBoundAttributeParameterDescriptorBuilder(DefaultBoundAttributeDescriptorBuilder parent, string kind);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TypeName();
    [CompilerGeneratedAttribute]
public virtual void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsEnum();
    [CompilerGeneratedAttribute]
public virtual void set_IsEnum(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_Documentation();
    [CompilerGeneratedAttribute]
public virtual void set_Documentation(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public virtual void set_DisplayName(string value);
    public virtual IDictionary`2<string, string> get_Metadata();
    public virtual RazorDiagnosticCollection get_Diagnostics();
    internal bool get_CaseSensitive();
    public BoundAttributeParameterDescriptor Build();
    private string GetDisplayName();
    private HashSet`1<RazorDiagnostic> Validate();
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultDirectiveSyntaxTreePass : RazorEngineFeatureBase {
    public int Order { get; }
    public sealed virtual int get_Order();
    public sealed virtual RazorSyntaxTree Execute(RazorCodeDocument codeDocument, RazorSyntaxTree syntaxTree);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultDocumentClassifierPass : DocumentClassifierPassBase {
    public int Order { get; }
    protected string DocumentKind { get; }
    public virtual int get_Order();
    protected virtual string get_DocumentKind();
    protected virtual bool IsMatch(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
    protected virtual void OnDocumentStructureCreated(RazorCodeDocument codeDocument, NamespaceDeclarationIntermediateNode namespace, ClassDeclarationIntermediateNode class, MethodDeclarationIntermediateNode method);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultDocumentClassifierPassFeature : RazorEngineFeatureBase {
    [CompilerGeneratedAttribute]
private IList`1<Action`2<RazorCodeDocument, ClassDeclarationIntermediateNode>> <ConfigureClass>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Action`2<RazorCodeDocument, NamespaceDeclarationIntermediateNode>> <ConfigureNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Action`2<RazorCodeDocument, MethodDeclarationIntermediateNode>> <ConfigureMethod>k__BackingField;
    public IList`1<Action`2<RazorCodeDocument, ClassDeclarationIntermediateNode>> ConfigureClass { get; }
    public IList`1<Action`2<RazorCodeDocument, NamespaceDeclarationIntermediateNode>> ConfigureNamespace { get; }
    public IList`1<Action`2<RazorCodeDocument, MethodDeclarationIntermediateNode>> ConfigureMethod { get; }
    [CompilerGeneratedAttribute]
public IList`1<Action`2<RazorCodeDocument, ClassDeclarationIntermediateNode>> get_ConfigureClass();
    [CompilerGeneratedAttribute]
public IList`1<Action`2<RazorCodeDocument, NamespaceDeclarationIntermediateNode>> get_ConfigureNamespace();
    [CompilerGeneratedAttribute]
public IList`1<Action`2<RazorCodeDocument, MethodDeclarationIntermediateNode>> get_ConfigureMethod();
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultImportProjectFeature : RazorProjectEngineFeatureBase {
    public sealed virtual IReadOnlyList`1<RazorProjectItem> GetImports(RazorProjectItem projectItem);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorCodeDocument : RazorCodeDocument {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RazorSourceDocument> <Imports>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemCollection <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorSourceDocument <Source>k__BackingField;
    public IReadOnlyList`1<RazorSourceDocument> Imports { get; }
    public ItemCollection Items { get; }
    public RazorSourceDocument Source { get; }
    public DefaultRazorCodeDocument(RazorSourceDocument source, IEnumerable`1<RazorSourceDocument> imports);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<RazorSourceDocument> get_Imports();
    [CompilerGeneratedAttribute]
public virtual ItemCollection get_Items();
    [CompilerGeneratedAttribute]
public virtual RazorSourceDocument get_Source();
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorCodeGenerationOptions : RazorCodeGenerationOptions {
    [CompilerGeneratedAttribute]
private bool <DesignTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IndentWithTabs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IndentSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressChecksum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressNullabilityEnforcement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OmitMinimizedComponentAttributeValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseEnhancedLinePragma>k__BackingField;
    public bool DesignTime { get; }
    public bool IndentWithTabs { get; }
    public int IndentSize { get; }
    public string RootNamespace { get; }
    public bool SuppressChecksum { get; }
    public bool SuppressNullabilityEnforcement { get; }
    public bool OmitMinimizedComponentAttributeValues { get; }
    public bool UseEnhancedLinePragma { get; }
    public DefaultRazorCodeGenerationOptions(bool indentWithTabs, int indentSize, bool designTime, string rootNamespace, bool suppressChecksum, bool suppressMetadataAttributes, bool suppressPrimaryMethodBody, bool suppressNullabilityEnforcement, bool omitMinimizedComponentAttributeValues, bool supportLocalizedComponentNames, bool useEnhancedLinePragma);
    [CompilerGeneratedAttribute]
public virtual bool get_DesignTime();
    [CompilerGeneratedAttribute]
public virtual bool get_IndentWithTabs();
    [CompilerGeneratedAttribute]
public virtual int get_IndentSize();
    [CompilerGeneratedAttribute]
public virtual string get_RootNamespace();
    [CompilerGeneratedAttribute]
public virtual bool get_SuppressChecksum();
    [CompilerGeneratedAttribute]
public virtual bool get_SuppressNullabilityEnforcement();
    [CompilerGeneratedAttribute]
public virtual bool get_OmitMinimizedComponentAttributeValues();
    [CompilerGeneratedAttribute]
public virtual bool get_UseEnhancedLinePragma();
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorCodeGenerationOptionsBuilder : RazorCodeGenerationOptionsBuilder {
    private bool _designTime;
    [CompilerGeneratedAttribute]
private RazorConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileKind>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IndentSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IndentWithTabs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressChecksum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressNullabilityEnforcement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OmitMinimizedComponentAttributeValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportLocalizedComponentNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseEnhancedLinePragma>k__BackingField;
    public RazorConfiguration Configuration { get; }
    public bool DesignTime { get; }
    public string FileKind { get; }
    public int IndentSize { get; public set; }
    public bool IndentWithTabs { get; public set; }
    public bool SuppressChecksum { get; public set; }
    public bool SuppressNullabilityEnforcement { get; public set; }
    public bool OmitMinimizedComponentAttributeValues { get; public set; }
    public bool SupportLocalizedComponentNames { get; public set; }
    public bool UseEnhancedLinePragma { get; public set; }
    public DefaultRazorCodeGenerationOptionsBuilder(RazorConfiguration configuration, string fileKind);
    public DefaultRazorCodeGenerationOptionsBuilder(bool designTime);
    [CompilerGeneratedAttribute]
public virtual RazorConfiguration get_Configuration();
    public virtual bool get_DesignTime();
    [CompilerGeneratedAttribute]
public virtual string get_FileKind();
    [CompilerGeneratedAttribute]
public virtual int get_IndentSize();
    [CompilerGeneratedAttribute]
public virtual void set_IndentSize(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_IndentWithTabs();
    [CompilerGeneratedAttribute]
public virtual void set_IndentWithTabs(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_SuppressChecksum();
    [CompilerGeneratedAttribute]
public virtual void set_SuppressChecksum(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_SuppressNullabilityEnforcement();
    [CompilerGeneratedAttribute]
public virtual void set_SuppressNullabilityEnforcement(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_OmitMinimizedComponentAttributeValues();
    [CompilerGeneratedAttribute]
public virtual void set_OmitMinimizedComponentAttributeValues(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_SupportLocalizedComponentNames();
    [CompilerGeneratedAttribute]
public virtual void set_SupportLocalizedComponentNames(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UseEnhancedLinePragma();
    [CompilerGeneratedAttribute]
public virtual void set_UseEnhancedLinePragma(bool value);
    public virtual RazorCodeGenerationOptions Build();
    public virtual void SetDesignTime(bool designTime);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorCodeGenerationOptionsFactoryProjectFeature : RazorProjectEngineFeatureBase {
    private IConfigureRazorCodeGenerationOptionsFeature[] _configureOptions;
    protected virtual void OnInitialized();
    public sealed virtual RazorCodeGenerationOptions Create(string fileKind, Action`1<RazorCodeGenerationOptionsBuilder> configure);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorCodeGenerationOptionsFeature : RazorEngineFeatureBase {
    private bool _designTime;
    private IConfigureRazorCodeGenerationOptionsFeature[] _configureOptions;
    public DefaultRazorCodeGenerationOptionsFeature(bool designTime);
    protected virtual void OnInitialized();
    public sealed virtual RazorCodeGenerationOptions GetOptions();
    private void ConfigureOptions(RazorCodeGenerationOptionsBuilder builder);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorCSharpDocument : RazorCSharpDocument {
    private string _generatedCode;
    private RazorDiagnostic[] _diagnostics;
    private SourceMapping[] _sourceMappings;
    private LinePragma[] _linePragmas;
    private RazorCodeGenerationOptions _options;
    public IReadOnlyList`1<RazorDiagnostic> Diagnostics { get; }
    public string GeneratedCode { get; }
    public IReadOnlyList`1<SourceMapping> SourceMappings { get; }
    internal IReadOnlyList`1<LinePragma> LinePragmas { get; }
    public RazorCodeGenerationOptions Options { get; }
    public DefaultRazorCSharpDocument(string generatedCode, RazorCodeGenerationOptions options, RazorDiagnostic[] diagnostics, SourceMapping[] sourceMappings, LinePragma[] linePragmas);
    public virtual IReadOnlyList`1<RazorDiagnostic> get_Diagnostics();
    public virtual string get_GeneratedCode();
    public virtual IReadOnlyList`1<SourceMapping> get_SourceMappings();
    internal virtual IReadOnlyList`1<LinePragma> get_LinePragmas();
    public virtual RazorCodeGenerationOptions get_Options();
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorCSharpLoweringPhase : RazorEnginePhaseBase {
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorDiagnostic : RazorDiagnostic {
    [CompilerGeneratedAttribute]
private SourceSpan <Span>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorDiagnosticDescriptor <Descriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Args>k__BackingField;
    public string Id { get; }
    public RazorDiagnosticSeverity Severity { get; }
    public SourceSpan Span { get; }
    internal RazorDiagnosticDescriptor Descriptor { get; }
    internal Object[] Args { get; }
    internal DefaultRazorDiagnostic(RazorDiagnosticDescriptor descriptor, SourceSpan span, Object[] args);
    public virtual string get_Id();
    public virtual RazorDiagnosticSeverity get_Severity();
    [CompilerGeneratedAttribute]
public virtual SourceSpan get_Span();
    [CompilerGeneratedAttribute]
internal RazorDiagnosticDescriptor get_Descriptor();
    [CompilerGeneratedAttribute]
internal Object[] get_Args();
    public virtual string GetMessage(IFormatProvider formatProvider);
    public virtual bool Equals(RazorDiagnostic obj);
    public virtual int GetHashCode();
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorDirectiveClassifierPhase : RazorEnginePhaseBase {
    [CompilerGeneratedAttribute]
private IRazorDirectiveClassifierPass[] <Passes>k__BackingField;
    public IRazorDirectiveClassifierPass[] Passes { get; private set; }
    [CompilerGeneratedAttribute]
public IRazorDirectiveClassifierPass[] get_Passes();
    [CompilerGeneratedAttribute]
private void set_Passes(IRazorDirectiveClassifierPass[] value);
    protected virtual void OnIntialized();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorDirectiveFeature : RazorEngineFeatureBase {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ICollection`1<DirectiveDescriptor>> <DirectivesByFileKind>k__BackingField;
    public ICollection`1<DirectiveDescriptor> Directives { get; }
    public IDictionary`2<string, ICollection`1<DirectiveDescriptor>> DirectivesByFileKind { get; }
    public int Order { get; }
    public sealed virtual ICollection`1<DirectiveDescriptor> get_Directives();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ICollection`1<DirectiveDescriptor>> get_DirectivesByFileKind();
    public sealed virtual int get_Order();
    private sealed virtual override void Microsoft.AspNetCore.Razor.Language.IConfigureRazorParserOptionsFeature.Configure(RazorParserOptionsBuilder options);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorDocumentClassifierPhase : RazorEnginePhaseBase {
    [CompilerGeneratedAttribute]
private IRazorDocumentClassifierPass[] <Passes>k__BackingField;
    public IRazorDocumentClassifierPass[] Passes { get; private set; }
    [CompilerGeneratedAttribute]
public IRazorDocumentClassifierPass[] get_Passes();
    [CompilerGeneratedAttribute]
private void set_Passes(IRazorDocumentClassifierPass[] value);
    protected virtual void OnIntialized();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorEngine : RazorEngine {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IRazorEngineFeature> <Features>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IRazorEnginePhase> <Phases>k__BackingField;
    public IReadOnlyList`1<IRazorEngineFeature> Features { get; }
    public IReadOnlyList`1<IRazorEnginePhase> Phases { get; }
    public DefaultRazorEngine(IRazorEngineFeature[] features, IRazorEnginePhase[] phases);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<IRazorEngineFeature> get_Features();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<IRazorEnginePhase> get_Phases();
    public virtual void Process(RazorCodeDocument document);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorEngineBuilder : object {
    [CompilerGeneratedAttribute]
private ICollection`1<IRazorEngineFeature> <Features>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IRazorEnginePhase> <Phases>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignTime>k__BackingField;
    public ICollection`1<IRazorEngineFeature> Features { get; }
    public IList`1<IRazorEnginePhase> Phases { get; }
    public bool DesignTime { get; }
    public DefaultRazorEngineBuilder(bool designTime);
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<IRazorEngineFeature> get_Features();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IRazorEnginePhase> get_Phases();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DesignTime();
    public sealed virtual RazorEngine Build();
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorHtmlDocument : RazorHtmlDocument {
    private string _generatedHtml;
    private RazorCodeGenerationOptions _options;
    public string GeneratedHtml { get; }
    public RazorCodeGenerationOptions Options { get; }
    public DefaultRazorHtmlDocument(string generatedHtml, RazorCodeGenerationOptions options);
    public virtual string get_GeneratedHtml();
    public virtual RazorCodeGenerationOptions get_Options();
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorIntermediateNodeLoweringPhase : RazorEnginePhaseBase {
    private IRazorCodeGenerationOptionsFeature _optionsFeature;
    protected virtual void OnIntialized();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument);
    private IReadOnlyList`1<UsingReference> ImportDirectives(DocumentIntermediateNode document, IntermediateNodeBuilder builder, RazorParserOptions options, IReadOnlyList`1<RazorSyntaxTree> imports);
    private void PostProcessImportedDirectives(DocumentIntermediateNode document);
    private static bool IsMalformed(IEnumerable`1<RazorDiagnostic> diagnostics);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorOptimizationPhase : RazorEnginePhaseBase {
    [CompilerGeneratedAttribute]
private IRazorOptimizationPass[] <Passes>k__BackingField;
    public IRazorOptimizationPass[] Passes { get; private set; }
    [CompilerGeneratedAttribute]
public IRazorOptimizationPass[] get_Passes();
    [CompilerGeneratedAttribute]
private void set_Passes(IRazorOptimizationPass[] value);
    protected virtual void OnIntialized();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorParserOptions : RazorParserOptions {
    [CompilerGeneratedAttribute]
private bool <DesignTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<DirectiveDescriptor> <Directives>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParseLeadingDirectives>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorLanguageVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileKind>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorParserFeatureFlags <FeatureFlags>k__BackingField;
    public bool DesignTime { get; }
    public IReadOnlyCollection`1<DirectiveDescriptor> Directives { get; }
    public bool ParseLeadingDirectives { get; }
    public RazorLanguageVersion Version { get; }
    internal string FileKind { get; }
    internal RazorParserFeatureFlags FeatureFlags { get; }
    public DefaultRazorParserOptions(DirectiveDescriptor[] directives, bool designTime, bool parseLeadingDirectives, RazorLanguageVersion version, string fileKind);
    [CompilerGeneratedAttribute]
public virtual bool get_DesignTime();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyCollection`1<DirectiveDescriptor> get_Directives();
    [CompilerGeneratedAttribute]
public virtual bool get_ParseLeadingDirectives();
    [CompilerGeneratedAttribute]
public virtual RazorLanguageVersion get_Version();
    [CompilerGeneratedAttribute]
internal virtual string get_FileKind();
    [CompilerGeneratedAttribute]
internal virtual RazorParserFeatureFlags get_FeatureFlags();
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorParserOptionsBuilder : RazorParserOptionsBuilder {
    private bool _designTime;
    [CompilerGeneratedAttribute]
private RazorConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<DirectiveDescriptor> <Directives>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileKind>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParseLeadingDirectives>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorLanguageVersion <LanguageVersion>k__BackingField;
    public RazorConfiguration Configuration { get; }
    public bool DesignTime { get; }
    public ICollection`1<DirectiveDescriptor> Directives { get; }
    public string FileKind { get; }
    public bool ParseLeadingDirectives { get; public set; }
    public RazorLanguageVersion LanguageVersion { get; }
    public DefaultRazorParserOptionsBuilder(RazorConfiguration configuration, string fileKind);
    public DefaultRazorParserOptionsBuilder(bool designTime, RazorLanguageVersion version, string fileKind);
    [CompilerGeneratedAttribute]
public virtual RazorConfiguration get_Configuration();
    public virtual bool get_DesignTime();
    [CompilerGeneratedAttribute]
public virtual ICollection`1<DirectiveDescriptor> get_Directives();
    [CompilerGeneratedAttribute]
public virtual string get_FileKind();
    [CompilerGeneratedAttribute]
public virtual bool get_ParseLeadingDirectives();
    [CompilerGeneratedAttribute]
public virtual void set_ParseLeadingDirectives(bool value);
    [CompilerGeneratedAttribute]
public virtual RazorLanguageVersion get_LanguageVersion();
    public virtual RazorParserOptions Build();
    public virtual void SetDesignTime(bool designTime);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorParserOptionsFactoryProjectFeature : RazorProjectEngineFeatureBase {
    private IConfigureRazorParserOptionsFeature[] _configureOptions;
    protected virtual void OnInitialized();
    public sealed virtual RazorParserOptions Create(string fileKind, Action`1<RazorParserOptionsBuilder> configure);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorParserOptionsFeature : RazorEngineFeatureBase {
    private bool _designTime;
    private RazorLanguageVersion _version;
    private string _fileKind;
    private IConfigureRazorParserOptionsFeature[] _configureOptions;
    public DefaultRazorParserOptionsFeature(bool designTime, RazorLanguageVersion version, string fileKind);
    protected virtual void OnInitialized();
    public sealed virtual RazorParserOptions GetOptions();
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorParsingPhase : RazorEnginePhaseBase {
    private IRazorParserOptionsFeature _optionsFeature;
    protected virtual void OnIntialized();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorProjectEngine : RazorProjectEngine {
    [CompilerGeneratedAttribute]
private RazorConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorProjectFileSystem <FileSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorEngine <Engine>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IRazorProjectEngineFeature> <ProjectFeatures>k__BackingField;
    public RazorConfiguration Configuration { get; }
    public RazorProjectFileSystem FileSystem { get; }
    public RazorEngine Engine { get; }
    public IReadOnlyList`1<IRazorProjectEngineFeature> ProjectFeatures { get; }
    public DefaultRazorProjectEngine(RazorConfiguration configuration, RazorEngine engine, RazorProjectFileSystem fileSystem, IReadOnlyList`1<IRazorProjectEngineFeature> projectFeatures);
    [CompilerGeneratedAttribute]
public virtual RazorConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public virtual RazorProjectFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
public virtual RazorEngine get_Engine();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<IRazorProjectEngineFeature> get_ProjectFeatures();
    protected virtual RazorCodeDocument CreateCodeDocumentCore(RazorProjectItem projectItem);
    protected RazorCodeDocument CreateCodeDocumentCore(RazorProjectItem projectItem, Action`1<RazorParserOptionsBuilder> configureParser, Action`1<RazorCodeGenerationOptionsBuilder> configureCodeGeneration);
    protected internal RazorCodeDocument CreateCodeDocumentCore(RazorSourceDocument sourceDocument, string fileKind, IReadOnlyList`1<RazorSourceDocument> importSourceDocuments, IReadOnlyList`1<TagHelperDescriptor> tagHelpers, Action`1<RazorParserOptionsBuilder> configureParser, Action`1<RazorCodeGenerationOptionsBuilder> configureCodeGeneration, string cssScope);
    protected virtual RazorCodeDocument CreateCodeDocumentDesignTimeCore(RazorProjectItem projectItem);
    protected RazorCodeDocument CreateCodeDocumentDesignTimeCore(RazorProjectItem projectItem, Action`1<RazorParserOptionsBuilder> configureParser, Action`1<RazorCodeGenerationOptionsBuilder> configureCodeGeneration);
    protected RazorCodeDocument CreateCodeDocumentDesignTimeCore(RazorSourceDocument sourceDocument, string fileKind, IReadOnlyList`1<RazorSourceDocument> importSourceDocuments, IReadOnlyList`1<TagHelperDescriptor> tagHelpers, Action`1<RazorParserOptionsBuilder> configureParser, Action`1<RazorCodeGenerationOptionsBuilder> configureCodeGeneration);
    public virtual RazorCodeDocument Process(RazorSourceDocument source, string fileKind, IReadOnlyList`1<RazorSourceDocument> importSources, IReadOnlyList`1<TagHelperDescriptor> tagHelpers);
    public virtual RazorCodeDocument ProcessDeclarationOnly(RazorProjectItem projectItem);
    public virtual RazorCodeDocument ProcessDeclarationOnly(RazorSourceDocument source, string fileKind, IReadOnlyList`1<RazorSourceDocument> importSources, IReadOnlyList`1<TagHelperDescriptor> tagHelpers);
    public virtual RazorCodeDocument ProcessDesignTime(RazorSourceDocument source, string fileKind, IReadOnlyList`1<RazorSourceDocument> importSources, IReadOnlyList`1<TagHelperDescriptor> tagHelpers);
    protected virtual void ProcessCore(RazorCodeDocument codeDocument);
    private TFeature GetRequiredFeature();
    private void ConfigureParserOptions(RazorParserOptionsBuilder builder);
    private void ConfigureDesignTimeParserOptions(RazorParserOptionsBuilder builder);
    private void ConfigureCodeGenerationOptions(RazorCodeGenerationOptionsBuilder builder);
    private void ConfigureDesignTimeCodeGenerationOptions(RazorCodeGenerationOptionsBuilder builder);
    internal static IReadOnlyList`1<RazorSourceDocument> GetImportSourceDocuments(IReadOnlyList`1<RazorProjectItem> importItems, bool suppressExceptions);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorProjectEngineBuilder : RazorProjectEngineBuilder {
    [CompilerGeneratedAttribute]
private RazorConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorProjectFileSystem <FileSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IRazorFeature> <Features>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IRazorEnginePhase> <Phases>k__BackingField;
    public RazorConfiguration Configuration { get; }
    public RazorProjectFileSystem FileSystem { get; }
    public ICollection`1<IRazorFeature> Features { get; }
    public IList`1<IRazorEnginePhase> Phases { get; }
    public DefaultRazorProjectEngineBuilder(RazorConfiguration configuration, RazorProjectFileSystem fileSystem);
    [CompilerGeneratedAttribute]
public virtual RazorConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public virtual RazorProjectFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
public virtual ICollection`1<IRazorFeature> get_Features();
    [CompilerGeneratedAttribute]
public virtual IList`1<IRazorEnginePhase> get_Phases();
    public virtual RazorProjectEngine Build();
    private void ConfigureRazorEngine(IRazorEngineBuilder engineBuilder);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorProjectFileSystem : RazorProjectFileSystem {
    [CompilerGeneratedAttribute]
private string <Root>k__BackingField;
    public string Root { get; }
    public DefaultRazorProjectFileSystem(string root);
    [CompilerGeneratedAttribute]
public string get_Root();
    public virtual IEnumerable`1<RazorProjectItem> EnumerateItems(string basePath);
    public virtual RazorProjectItem GetItem(string path, string fileKind);
    public virtual RazorProjectItem GetItem(string path);
    protected virtual string NormalizeAndEnsureValidPath(string path);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorProjectItem : RazorProjectItem {
    private string _fileKind;
    [CompilerGeneratedAttribute]
private FileInfo <File>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativePhysicalPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CssScope>k__BackingField;
    public FileInfo File { get; }
    public string BasePath { get; }
    public string FilePath { get; }
    public bool Exists { get; }
    public string PhysicalPath { get; }
    public string RelativePhysicalPath { get; }
    public string FileKind { get; }
    public string CssScope { get; }
    public DefaultRazorProjectItem(string basePath, string filePath, string relativePhysicalPath, string fileKind, FileInfo file, string cssScope);
    [CompilerGeneratedAttribute]
public FileInfo get_File();
    [CompilerGeneratedAttribute]
public virtual string get_BasePath();
    [CompilerGeneratedAttribute]
public virtual string get_FilePath();
    public virtual bool get_Exists();
    public virtual string get_PhysicalPath();
    [CompilerGeneratedAttribute]
public virtual string get_RelativePhysicalPath();
    public virtual string get_FileKind();
    [CompilerGeneratedAttribute]
public virtual string get_CssScope();
    public virtual Stream Read();
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorSourceLineCollection : RazorSourceLineCollection {
    private RazorSourceDocument _document;
    private Int32[] _lineStarts;
    public int Count { get; }
    public DefaultRazorSourceLineCollection(RazorSourceDocument document);
    public virtual int get_Count();
    public virtual int GetLineLength(int index);
    internal virtual SourceLocation GetLocation(int position);
    private Int32[] GetLineStarts();
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorSyntaxTree : RazorSyntaxTree {
    private IReadOnlyList`1<RazorDiagnostic> _diagnostics;
    private IReadOnlyList`1<RazorDiagnostic> _allDiagnostics;
    [CompilerGeneratedAttribute]
private RazorParserOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private SyntaxNode <Root>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorSourceDocument <Source>k__BackingField;
    public IReadOnlyList`1<RazorDiagnostic> Diagnostics { get; }
    public RazorParserOptions Options { get; }
    internal SyntaxNode Root { get; }
    public RazorSourceDocument Source { get; }
    public DefaultRazorSyntaxTree(SyntaxNode root, RazorSourceDocument source, IReadOnlyList`1<RazorDiagnostic> diagnostics, RazorParserOptions options);
    public virtual IReadOnlyList`1<RazorDiagnostic> get_Diagnostics();
    [CompilerGeneratedAttribute]
public virtual RazorParserOptions get_Options();
    [CompilerGeneratedAttribute]
internal virtual SyntaxNode get_Root();
    [CompilerGeneratedAttribute]
public virtual RazorSourceDocument get_Source();
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorSyntaxTreePhase : RazorEnginePhaseBase {
    [CompilerGeneratedAttribute]
private IRazorSyntaxTreePass[] <Passes>k__BackingField;
    public IRazorSyntaxTreePass[] Passes { get; private set; }
    [CompilerGeneratedAttribute]
public IRazorSyntaxTreePass[] get_Passes();
    [CompilerGeneratedAttribute]
private void set_Passes(IRazorSyntaxTreePass[] value);
    protected virtual void OnIntialized();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorTagHelperBinderPhase : RazorEnginePhaseBase {
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument);
    private static bool MatchesDirective(TagHelperDescriptor descriptor, string typePattern, string assemblyName);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRazorTargetExtensionFeature : RazorEngineFeatureBase {
    [CompilerGeneratedAttribute]
private ICollection`1<ICodeTargetExtension> <TargetExtensions>k__BackingField;
    public ICollection`1<ICodeTargetExtension> TargetExtensions { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<ICodeTargetExtension> get_TargetExtensions();
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRequiredAttributeDescriptor : RequiredAttributeDescriptor {
    public DefaultRequiredAttributeDescriptor(string name, NameComparisonMode nameComparison, bool caseSensitive, string value, ValueComparisonMode valueComparison, string displayName, RazorDiagnostic[] diagnostics, Dictionary`2<string, string> metadata);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultRequiredAttributeDescriptorBuilder : RequiredAttributeDescriptorBuilder {
    private DefaultTagMatchingRuleDescriptorBuilder _parent;
    private RazorDiagnosticCollection _diagnostics;
    private Dictionary`2<string, string> _metadata;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private NameComparisonMode <NameComparisonMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueComparisonMode <ValueComparisonMode>k__BackingField;
    public string Name { get; public set; }
    public NameComparisonMode NameComparisonMode { get; public set; }
    public string Value { get; public set; }
    public ValueComparisonMode ValueComparisonMode { get; public set; }
    public RazorDiagnosticCollection Diagnostics { get; }
    public IDictionary`2<string, string> Metadata { get; }
    internal bool CaseSensitive { get; }
    public DefaultRequiredAttributeDescriptorBuilder(DefaultTagMatchingRuleDescriptorBuilder parent);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual NameComparisonMode get_NameComparisonMode();
    [CompilerGeneratedAttribute]
public virtual void set_NameComparisonMode(NameComparisonMode value);
    [CompilerGeneratedAttribute]
public virtual string get_Value();
    [CompilerGeneratedAttribute]
public virtual void set_Value(string value);
    [CompilerGeneratedAttribute]
public virtual ValueComparisonMode get_ValueComparisonMode();
    [CompilerGeneratedAttribute]
public virtual void set_ValueComparisonMode(ValueComparisonMode value);
    public virtual RazorDiagnosticCollection get_Diagnostics();
    public virtual IDictionary`2<string, string> get_Metadata();
    internal bool get_CaseSensitive();
    public RequiredAttributeDescriptor Build();
    private string GetDisplayName();
    private HashSet`1<RazorDiagnostic> Validate();
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultTagHelperDescriptor : TagHelperDescriptor {
    public DefaultTagHelperDescriptor(string kind, string name, string assemblyName, string displayName, string documentation, string tagOutputHint, bool caseSensitive, TagMatchingRuleDescriptor[] tagMatchingRules, BoundAttributeDescriptor[] attributeDescriptors, AllowedChildTagDescriptor[] allowedChildTags, Dictionary`2<string, string> metadata, RazorDiagnostic[] diagnostics);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultTagHelperDescriptorBuilder : TagHelperDescriptorBuilder {
    private Dictionary`2<string, string> _metadata;
    private List`1<DefaultAllowedChildTagDescriptorBuilder> _allowedChildTags;
    private List`1<DefaultBoundAttributeDescriptorBuilder> _attributeBuilders;
    private List`1<DefaultTagMatchingRuleDescriptorBuilder> _tagMatchingRuleBuilders;
    private RazorDiagnosticCollection _diagnostics;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagOutputHint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaseSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Documentation>k__BackingField;
    public string Name { get; }
    public string AssemblyName { get; }
    public string Kind { get; }
    public string DisplayName { get; public set; }
    public string TagOutputHint { get; public set; }
    public bool CaseSensitive { get; public set; }
    public string Documentation { get; public set; }
    public IDictionary`2<string, string> Metadata { get; }
    public RazorDiagnosticCollection Diagnostics { get; }
    public IReadOnlyList`1<AllowedChildTagDescriptorBuilder> AllowedChildTags { get; }
    public IReadOnlyList`1<BoundAttributeDescriptorBuilder> BoundAttributes { get; }
    public IReadOnlyList`1<TagMatchingRuleDescriptorBuilder> TagMatchingRules { get; }
    public DefaultTagHelperDescriptorBuilder(string kind, string name, string assemblyName);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual string get_AssemblyName();
    [CompilerGeneratedAttribute]
public virtual string get_Kind();
    [CompilerGeneratedAttribute]
public virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public virtual void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TagOutputHint();
    [CompilerGeneratedAttribute]
public virtual void set_TagOutputHint(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_CaseSensitive();
    [CompilerGeneratedAttribute]
public virtual void set_CaseSensitive(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_Documentation();
    [CompilerGeneratedAttribute]
public virtual void set_Documentation(string value);
    public virtual IDictionary`2<string, string> get_Metadata();
    public virtual RazorDiagnosticCollection get_Diagnostics();
    public virtual IReadOnlyList`1<AllowedChildTagDescriptorBuilder> get_AllowedChildTags();
    public virtual IReadOnlyList`1<BoundAttributeDescriptorBuilder> get_BoundAttributes();
    public virtual IReadOnlyList`1<TagMatchingRuleDescriptorBuilder> get_TagMatchingRules();
    public virtual void AllowChildTag(Action`1<AllowedChildTagDescriptorBuilder> configure);
    public virtual void BindAttribute(Action`1<BoundAttributeDescriptorBuilder> configure);
    public virtual void TagMatchingRule(Action`1<TagMatchingRuleDescriptorBuilder> configure);
    public virtual TagHelperDescriptor Build();
    public virtual void Reset();
    public string GetDisplayName();
    private void EnsureAllowedChildTags();
    private void EnsureAttributeBuilders();
    private void EnsureTagMatchingRuleBuilders();
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultTagMatchingRuleDescriptor : TagMatchingRuleDescriptor {
    public DefaultTagMatchingRuleDescriptor(string tagName, string parentTag, TagStructure tagStructure, bool caseSensitive, RequiredAttributeDescriptor[] attributes, RazorDiagnostic[] diagnostics);
}
internal class Microsoft.AspNetCore.Razor.Language.DefaultTagMatchingRuleDescriptorBuilder : TagMatchingRuleDescriptorBuilder {
    private DefaultTagHelperDescriptorBuilder _parent;
    private List`1<DefaultRequiredAttributeDescriptorBuilder> _requiredAttributeBuilders;
    private RazorDiagnosticCollection _diagnostics;
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentTag>k__BackingField;
    [CompilerGeneratedAttribute]
private TagStructure <TagStructure>k__BackingField;
    public string TagName { get; public set; }
    public string ParentTag { get; public set; }
    public TagStructure TagStructure { get; public set; }
    internal bool CaseSensitive { get; }
    public RazorDiagnosticCollection Diagnostics { get; }
    public IReadOnlyList`1<RequiredAttributeDescriptorBuilder> Attributes { get; }
    internal DefaultTagMatchingRuleDescriptorBuilder(DefaultTagHelperDescriptorBuilder parent);
    [CompilerGeneratedAttribute]
public virtual string get_TagName();
    [CompilerGeneratedAttribute]
public virtual void set_TagName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ParentTag();
    [CompilerGeneratedAttribute]
public virtual void set_ParentTag(string value);
    [CompilerGeneratedAttribute]
public virtual TagStructure get_TagStructure();
    [CompilerGeneratedAttribute]
public virtual void set_TagStructure(TagStructure value);
    internal bool get_CaseSensitive();
    public virtual RazorDiagnosticCollection get_Diagnostics();
    public virtual IReadOnlyList`1<RequiredAttributeDescriptorBuilder> get_Attributes();
    public virtual void Attribute(Action`1<RequiredAttributeDescriptorBuilder> configure);
    public TagMatchingRuleDescriptor Build();
    private HashSet`1<RazorDiagnostic> Validate();
    private void EnsureRequiredAttributeBuilders();
}
public abstract class Microsoft.AspNetCore.Razor.Language.DirectiveDescriptor : object {
    public string Description { get; }
    public string Directive { get; }
    public string DisplayName { get; }
    public DirectiveKind Kind { get; }
    public DirectiveUsage Usage { get; }
    public IReadOnlyList`1<DirectiveTokenDescriptor> Tokens { get; }
    public abstract virtual string get_Description();
    public abstract virtual string get_Directive();
    public abstract virtual string get_DisplayName();
    public abstract virtual DirectiveKind get_Kind();
    public abstract virtual DirectiveUsage get_Usage();
    public abstract virtual IReadOnlyList`1<DirectiveTokenDescriptor> get_Tokens();
    public static DirectiveDescriptor CreateDirective(string directive, DirectiveKind kind);
    public static DirectiveDescriptor CreateDirective(string directive, DirectiveKind kind, Action`1<IDirectiveDescriptorBuilder> configure);
    public static DirectiveDescriptor CreateSingleLineDirective(string directive);
    public static DirectiveDescriptor CreateSingleLineDirective(string directive, Action`1<IDirectiveDescriptorBuilder> configure);
    public static DirectiveDescriptor CreateRazorBlockDirective(string directive);
    public static DirectiveDescriptor CreateRazorBlockDirective(string directive, Action`1<IDirectiveDescriptorBuilder> configure);
    public static DirectiveDescriptor CreateCodeBlockDirective(string directive);
    public static DirectiveDescriptor CreateCodeBlockDirective(string directive, Action`1<IDirectiveDescriptorBuilder> configure);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions : object {
    [ExtensionAttribute]
public static IDirectiveDescriptorBuilder AddMemberToken(IDirectiveDescriptorBuilder builder);
    [ExtensionAttribute]
public static IDirectiveDescriptorBuilder AddMemberToken(IDirectiveDescriptorBuilder builder, string name, string description);
    [ExtensionAttribute]
public static IDirectiveDescriptorBuilder AddNamespaceToken(IDirectiveDescriptorBuilder builder);
    [ExtensionAttribute]
public static IDirectiveDescriptorBuilder AddNamespaceToken(IDirectiveDescriptorBuilder builder, string name, string description);
    [ExtensionAttribute]
public static IDirectiveDescriptorBuilder AddStringToken(IDirectiveDescriptorBuilder builder);
    [ExtensionAttribute]
public static IDirectiveDescriptorBuilder AddStringToken(IDirectiveDescriptorBuilder builder, string name, string description);
    [ExtensionAttribute]
public static IDirectiveDescriptorBuilder AddTypeToken(IDirectiveDescriptorBuilder builder);
    [ExtensionAttribute]
public static IDirectiveDescriptorBuilder AddTypeToken(IDirectiveDescriptorBuilder builder, string name, string description);
    [ExtensionAttribute]
public static IDirectiveDescriptorBuilder AddAttributeToken(IDirectiveDescriptorBuilder builder);
    [ExtensionAttribute]
public static IDirectiveDescriptorBuilder AddAttributeToken(IDirectiveDescriptorBuilder builder, string name, string description);
    [ExtensionAttribute]
public static IDirectiveDescriptorBuilder AddBooleanToken(IDirectiveDescriptorBuilder builder);
    [ExtensionAttribute]
public static IDirectiveDescriptorBuilder AddBooleanToken(IDirectiveDescriptorBuilder builder, string name, string description);
    [ExtensionAttribute]
public static IDirectiveDescriptorBuilder AddOptionalMemberToken(IDirectiveDescriptorBuilder builder);
    [ExtensionAttribute]
public static IDirectiveDescriptorBuilder AddOptionalMemberToken(IDirectiveDescriptorBuilder builder, string name, string description);
    [ExtensionAttribute]
public static IDirectiveDescriptorBuilder AddOptionalNamespaceToken(IDirectiveDescriptorBuilder builder);
    [ExtensionAttribute]
public static IDirectiveDescriptorBuilder AddOptionalNamespaceToken(IDirectiveDescriptorBuilder builder, string name, string description);
    [ExtensionAttribute]
public static IDirectiveDescriptorBuilder AddOptionalStringToken(IDirectiveDescriptorBuilder builder);
    [ExtensionAttribute]
public static IDirectiveDescriptorBuilder AddOptionalStringToken(IDirectiveDescriptorBuilder builder, string name, string description);
    [ExtensionAttribute]
public static IDirectiveDescriptorBuilder AddOptionalTypeToken(IDirectiveDescriptorBuilder builder);
    [ExtensionAttribute]
public static IDirectiveDescriptorBuilder AddOptionalTypeToken(IDirectiveDescriptorBuilder builder, string name, string description);
    [ExtensionAttribute]
public static IDirectiveDescriptorBuilder AddOptionalAttributeToken(IDirectiveDescriptorBuilder builder);
    [ExtensionAttribute]
public static IDirectiveDescriptorBuilder AddOptionalAttributeToken(IDirectiveDescriptorBuilder builder, string name, string description);
    [ExtensionAttribute]
public static IDirectiveDescriptorBuilder AddOptionalGenericTypeConstraintToken(IDirectiveDescriptorBuilder builder, string name, string description);
}
internal class Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorComparer : object {
    public static DirectiveDescriptorComparer Default;
    private static DirectiveDescriptorComparer();
    public sealed virtual bool Equals(DirectiveDescriptor descriptorX, DirectiveDescriptor descriptorY);
    public sealed virtual int GetHashCode(DirectiveDescriptor descriptor);
}
public enum Microsoft.AspNetCore.Razor.Language.DirectiveKind : Enum {
    public int value__;
    public static DirectiveKind SingleLine;
    public static DirectiveKind RazorBlock;
    public static DirectiveKind CodeBlock;
}
internal class Microsoft.AspNetCore.Razor.Language.DirectiveRemovalOptimizationPass : IntermediateNodePassBase {
    public int Order { get; }
    public virtual int get_Order();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
public abstract class Microsoft.AspNetCore.Razor.Language.DirectiveTokenDescriptor : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public DirectiveTokenKind Kind { get; }
    public bool Optional { get; }
    public string Name { get; }
    public string Description { get; }
    public abstract virtual DirectiveTokenKind get_Kind();
    public abstract virtual bool get_Optional();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual string get_Description();
    public static DirectiveTokenDescriptor CreateToken(DirectiveTokenKind kind);
    public static DirectiveTokenDescriptor CreateToken(DirectiveTokenKind kind, bool optional);
    public static DirectiveTokenDescriptor CreateToken(DirectiveTokenKind kind, bool optional, string name, string description);
}
internal class Microsoft.AspNetCore.Razor.Language.DirectiveTokenDescriptorComparer : object {
    public static DirectiveTokenDescriptorComparer Default;
    private static DirectiveTokenDescriptorComparer();
    public sealed virtual bool Equals(DirectiveTokenDescriptor descriptorX, DirectiveTokenDescriptor descriptorY);
    public sealed virtual int GetHashCode(DirectiveTokenDescriptor descriptor);
}
internal class Microsoft.AspNetCore.Razor.Language.DirectiveTokenEditHandler : SpanEditHandler {
    public DirectiveTokenEditHandler(Func`2<string, IEnumerable`1<SyntaxToken>> tokenizer);
    protected virtual PartialParseResultInternal CanAcceptChange(SyntaxNode target, SourceChange change);
    private static bool ContainsWhitespace(string content);
}
public enum Microsoft.AspNetCore.Razor.Language.DirectiveTokenKind : Enum {
    public int value__;
    public static DirectiveTokenKind Type;
    public static DirectiveTokenKind Namespace;
    public static DirectiveTokenKind Member;
    public static DirectiveTokenKind String;
    public static DirectiveTokenKind Attribute;
    public static DirectiveTokenKind Boolean;
    public static DirectiveTokenKind GenericTypeConstraint;
}
public enum Microsoft.AspNetCore.Razor.Language.DirectiveUsage : Enum {
    public int value__;
    public static DirectiveUsage Unrestricted;
    public static DirectiveUsage FileScopedSinglyOccurring;
    public static DirectiveUsage FileScopedMultipleOccurring;
}
public abstract class Microsoft.AspNetCore.Razor.Language.DocumentClassifierPassBase : IntermediateNodePassBase {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ICodeTargetExtension> <TargetExtensions>k__BackingField;
    protected string DocumentKind { get; }
    protected IReadOnlyList`1<ICodeTargetExtension> TargetExtensions { get; private set; }
    protected abstract virtual string get_DocumentKind();
    [CompilerGeneratedAttribute]
protected IReadOnlyList`1<ICodeTargetExtension> get_TargetExtensions();
    [CompilerGeneratedAttribute]
private void set_TargetExtensions(IReadOnlyList`1<ICodeTargetExtension> value);
    protected virtual void OnInitialized();
    protected sealed virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
    private void Rewrite(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
    protected abstract virtual bool IsMatch(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
    protected virtual CodeTarget CreateTarget(RazorCodeDocument codeDocument, RazorCodeGenerationOptions options);
    protected virtual void ConfigureTarget(CodeTargetBuilder builder);
    protected virtual void OnDocumentStructureCreated(RazorCodeDocument codeDocument, NamespaceDeclarationIntermediateNode namespace, ClassDeclarationIntermediateNode class, MethodDeclarationIntermediateNode method);
    [CompilerGeneratedAttribute]
private void <CreateTarget>b__10_0(CodeTargetBuilder builder);
}
internal class Microsoft.AspNetCore.Razor.Language.EmptyProjectFileSystem : RazorProjectFileSystem {
    public virtual IEnumerable`1<RazorProjectItem> EnumerateItems(string basePath);
    public virtual RazorProjectItem GetItem(string path);
    public virtual RazorProjectItem GetItem(string path, string fileKind);
}
internal static class Microsoft.AspNetCore.Razor.Language.Extensions.AttributeDirective : object {
    public static DirectiveDescriptor Directive;
    private static AttributeDirective();
    public static void Register(RazorProjectEngineBuilder builder);
}
internal class Microsoft.AspNetCore.Razor.Language.Extensions.AttributeDirectivePass : IntermediateNodePassBase {
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
internal class Microsoft.AspNetCore.Razor.Language.Extensions.DefaultMetadataIdentifierFeature : RazorEngineFeatureBase {
    public sealed virtual string GetIdentifier(RazorCodeDocument codeDocument, RazorSourceDocument sourceDocument);
}
public class Microsoft.AspNetCore.Razor.Language.Extensions.DefaultTagHelperBodyIntermediateNode : ExtensionIntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private TagMode <TagMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public TagMode TagMode { get; public set; }
    public string TagName { get; public set; }
    public DefaultTagHelperBodyIntermediateNode(TagHelperBodyIntermediateNode bodyNode);
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public TagMode get_TagMode();
    [CompilerGeneratedAttribute]
public void set_TagMode(TagMode value);
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
public void set_TagName(string value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void WriteNode(CodeTarget target, CodeRenderingContext context);
}
public class Microsoft.AspNetCore.Razor.Language.Extensions.DefaultTagHelperCreateIntermediateNode : ExtensionIntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private TagHelperDescriptor <TagHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string FieldName { get; public set; }
    public TagHelperDescriptor TagHelper { get; public set; }
    public string TypeName { get; public set; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public TagHelperDescriptor get_TagHelper();
    [CompilerGeneratedAttribute]
public void set_TagHelper(TagHelperDescriptor value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void WriteNode(CodeTarget target, CodeRenderingContext context);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Extensions.DefaultTagHelperExecuteIntermediateNode : ExtensionIntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void WriteNode(CodeTarget target, CodeRenderingContext context);
}
public class Microsoft.AspNetCore.Razor.Language.Extensions.DefaultTagHelperHtmlAttributeIntermediateNode : ExtensionIntermediateNode {
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeStructure <AttributeStructure>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    public string AttributeName { get; public set; }
    public AttributeStructure AttributeStructure { get; public set; }
    public IntermediateNodeCollection Children { get; }
    public DefaultTagHelperHtmlAttributeIntermediateNode(TagHelperHtmlAttributeIntermediateNode htmlAttributeNode);
    [CompilerGeneratedAttribute]
public string get_AttributeName();
    [CompilerGeneratedAttribute]
public void set_AttributeName(string value);
    [CompilerGeneratedAttribute]
public AttributeStructure get_AttributeStructure();
    [CompilerGeneratedAttribute]
public void set_AttributeStructure(AttributeStructure value);
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void WriteNode(CodeTarget target, CodeRenderingContext context);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
internal class Microsoft.AspNetCore.Razor.Language.Extensions.DefaultTagHelperOptimizationPass : IntermediateNodePassBase {
    public int Order { get; }
    public virtual int get_Order();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
    private void AddDefaultRuntime(Context context);
    private void RewriteBody(TagHelperIntermediateNode node);
    private void AddExecute(TagHelperIntermediateNode node);
    private void RewriteHtmlAttributes(TagHelperIntermediateNode node);
    private void RewriteUsage(Context context, TagHelperIntermediateNode node, TagHelperDescriptor tagHelper);
    private void AddField(Context context, TagHelperDescriptor tagHelper);
    private bool IsTagHelperRuntimeNode(TagHelperIntermediateNode node);
}
public class Microsoft.AspNetCore.Razor.Language.Extensions.DefaultTagHelperPropertyIntermediateNode : ExtensionIntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeStructure <AttributeStructure>k__BackingField;
    [CompilerGeneratedAttribute]
private BoundAttributeDescriptor <BoundAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIndexerNameMatch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private TagHelperDescriptor <TagHelper>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string AttributeName { get; public set; }
    public AttributeStructure AttributeStructure { get; public set; }
    public BoundAttributeDescriptor BoundAttribute { get; public set; }
    public string FieldName { get; public set; }
    public bool IsIndexerNameMatch { get; public set; }
    public string PropertyName { get; public set; }
    public TagHelperDescriptor TagHelper { get; public set; }
    public DefaultTagHelperPropertyIntermediateNode(TagHelperPropertyIntermediateNode propertyNode);
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_AttributeName();
    [CompilerGeneratedAttribute]
public void set_AttributeName(string value);
    [CompilerGeneratedAttribute]
public AttributeStructure get_AttributeStructure();
    [CompilerGeneratedAttribute]
public void set_AttributeStructure(AttributeStructure value);
    [CompilerGeneratedAttribute]
public BoundAttributeDescriptor get_BoundAttribute();
    [CompilerGeneratedAttribute]
public void set_BoundAttribute(BoundAttributeDescriptor value);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsIndexerNameMatch();
    [CompilerGeneratedAttribute]
public void set_IsIndexerNameMatch(bool value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public TagHelperDescriptor get_TagHelper();
    [CompilerGeneratedAttribute]
public void set_TagHelper(TagHelperDescriptor value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void WriteNode(CodeTarget target, CodeRenderingContext context);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Extensions.DefaultTagHelperRuntimeIntermediateNode : ExtensionIntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void WriteNode(CodeTarget target, CodeRenderingContext context);
}
internal class Microsoft.AspNetCore.Razor.Language.Extensions.DefaultTagHelperTargetExtension : object {
    private static String[] FieldUnintializedModifiers;
    private static String[] FieldUnusedModifiers;
    private static String[] PrivateModifiers;
    [CompilerGeneratedAttribute]
private string <RunnerVariableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StringValueBufferVariableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreateTagHelperMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutionContextTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutionContextVariableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutionContextAddMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagHelperRunnerTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutionContextOutputPropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutionContextSetOutputContentAsyncMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutionContextAddHtmlAttributeMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutionContextAddTagHelperAttributeMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunnerRunAsyncMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScopeManagerTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScopeManagerVariableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScopeManagerBeginMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScopeManagerEndMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartTagHelperWritingScopeMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndTagHelperWritingScopeMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagModeTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlAttributeValueStyleTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagHelperOutputIsContentModifiedPropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BeginAddHtmlAttributeValuesMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndAddHtmlAttributeValuesMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BeginWriteTagHelperAttributeMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndWriteTagHelperAttributeMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MarkAsHtmlEncodedMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormatInvalidIndexerAssignmentMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WriteTagHelperOutputMethod>k__BackingField;
    public string RunnerVariableName { get; public set; }
    public string StringValueBufferVariableName { get; public set; }
    public string CreateTagHelperMethodName { get; public set; }
    public string ExecutionContextTypeName { get; public set; }
    public string ExecutionContextVariableName { get; public set; }
    public string ExecutionContextAddMethodName { get; public set; }
    public string TagHelperRunnerTypeName { get; public set; }
    public string ExecutionContextOutputPropertyName { get; public set; }
    public string ExecutionContextSetOutputContentAsyncMethodName { get; public set; }
    public string ExecutionContextAddHtmlAttributeMethodName { get; public set; }
    public string ExecutionContextAddTagHelperAttributeMethodName { get; public set; }
    public string RunnerRunAsyncMethodName { get; public set; }
    public string ScopeManagerTypeName { get; public set; }
    public string ScopeManagerVariableName { get; public set; }
    public string ScopeManagerBeginMethodName { get; public set; }
    public string ScopeManagerEndMethodName { get; public set; }
    public string StartTagHelperWritingScopeMethodName { get; public set; }
    public string EndTagHelperWritingScopeMethodName { get; public set; }
    public string TagModeTypeName { get; public set; }
    public string HtmlAttributeValueStyleTypeName { get; public set; }
    public string TagHelperOutputIsContentModifiedPropertyName { get; public set; }
    public string BeginAddHtmlAttributeValuesMethodName { get; public set; }
    public string EndAddHtmlAttributeValuesMethodName { get; public set; }
    public string BeginWriteTagHelperAttributeMethodName { get; public set; }
    public string EndWriteTagHelperAttributeMethodName { get; public set; }
    public string MarkAsHtmlEncodedMethodName { get; public set; }
    public string FormatInvalidIndexerAssignmentMethodName { get; public set; }
    public string WriteTagHelperOutputMethod { get; public set; }
    private static DefaultTagHelperTargetExtension();
    [CompilerGeneratedAttribute]
public string get_RunnerVariableName();
    [CompilerGeneratedAttribute]
public void set_RunnerVariableName(string value);
    [CompilerGeneratedAttribute]
public string get_StringValueBufferVariableName();
    [CompilerGeneratedAttribute]
public void set_StringValueBufferVariableName(string value);
    [CompilerGeneratedAttribute]
public string get_CreateTagHelperMethodName();
    [CompilerGeneratedAttribute]
public void set_CreateTagHelperMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_ExecutionContextTypeName();
    [CompilerGeneratedAttribute]
public void set_ExecutionContextTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ExecutionContextVariableName();
    [CompilerGeneratedAttribute]
public void set_ExecutionContextVariableName(string value);
    [CompilerGeneratedAttribute]
public string get_ExecutionContextAddMethodName();
    [CompilerGeneratedAttribute]
public void set_ExecutionContextAddMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_TagHelperRunnerTypeName();
    [CompilerGeneratedAttribute]
public void set_TagHelperRunnerTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ExecutionContextOutputPropertyName();
    [CompilerGeneratedAttribute]
public void set_ExecutionContextOutputPropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_ExecutionContextSetOutputContentAsyncMethodName();
    [CompilerGeneratedAttribute]
public void set_ExecutionContextSetOutputContentAsyncMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_ExecutionContextAddHtmlAttributeMethodName();
    [CompilerGeneratedAttribute]
public void set_ExecutionContextAddHtmlAttributeMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_ExecutionContextAddTagHelperAttributeMethodName();
    [CompilerGeneratedAttribute]
public void set_ExecutionContextAddTagHelperAttributeMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_RunnerRunAsyncMethodName();
    [CompilerGeneratedAttribute]
public void set_RunnerRunAsyncMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_ScopeManagerTypeName();
    [CompilerGeneratedAttribute]
public void set_ScopeManagerTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ScopeManagerVariableName();
    [CompilerGeneratedAttribute]
public void set_ScopeManagerVariableName(string value);
    [CompilerGeneratedAttribute]
public string get_ScopeManagerBeginMethodName();
    [CompilerGeneratedAttribute]
public void set_ScopeManagerBeginMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_ScopeManagerEndMethodName();
    [CompilerGeneratedAttribute]
public void set_ScopeManagerEndMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_StartTagHelperWritingScopeMethodName();
    [CompilerGeneratedAttribute]
public void set_StartTagHelperWritingScopeMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_EndTagHelperWritingScopeMethodName();
    [CompilerGeneratedAttribute]
public void set_EndTagHelperWritingScopeMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_TagModeTypeName();
    [CompilerGeneratedAttribute]
public void set_TagModeTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlAttributeValueStyleTypeName();
    [CompilerGeneratedAttribute]
public void set_HtmlAttributeValueStyleTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_TagHelperOutputIsContentModifiedPropertyName();
    [CompilerGeneratedAttribute]
public void set_TagHelperOutputIsContentModifiedPropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_BeginAddHtmlAttributeValuesMethodName();
    [CompilerGeneratedAttribute]
public void set_BeginAddHtmlAttributeValuesMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_EndAddHtmlAttributeValuesMethodName();
    [CompilerGeneratedAttribute]
public void set_EndAddHtmlAttributeValuesMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_BeginWriteTagHelperAttributeMethodName();
    [CompilerGeneratedAttribute]
public void set_BeginWriteTagHelperAttributeMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_EndWriteTagHelperAttributeMethodName();
    [CompilerGeneratedAttribute]
public void set_EndWriteTagHelperAttributeMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_MarkAsHtmlEncodedMethodName();
    [CompilerGeneratedAttribute]
public void set_MarkAsHtmlEncodedMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_FormatInvalidIndexerAssignmentMethodName();
    [CompilerGeneratedAttribute]
public void set_FormatInvalidIndexerAssignmentMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_WriteTagHelperOutputMethod();
    [CompilerGeneratedAttribute]
public void set_WriteTagHelperOutputMethod(string value);
    public sealed virtual void WriteTagHelperBody(CodeRenderingContext context, DefaultTagHelperBodyIntermediateNode node);
    public sealed virtual void WriteTagHelperCreate(CodeRenderingContext context, DefaultTagHelperCreateIntermediateNode node);
    public sealed virtual void WriteTagHelperExecute(CodeRenderingContext context, DefaultTagHelperExecuteIntermediateNode node);
    public sealed virtual void WriteTagHelperHtmlAttribute(CodeRenderingContext context, DefaultTagHelperHtmlAttributeIntermediateNode node);
    public sealed virtual void WriteTagHelperProperty(CodeRenderingContext context, DefaultTagHelperPropertyIntermediateNode node);
    public sealed virtual void WriteTagHelperRuntime(CodeRenderingContext context, DefaultTagHelperRuntimeIntermediateNode node);
    private void RenderTagHelperAttributeInline(CodeRenderingContext context, DefaultTagHelperPropertyIntermediateNode property, Nullable`1<SourceSpan> span);
    internal void RenderTagHelperAttributeInline(CodeRenderingContext context, DefaultTagHelperPropertyIntermediateNode property, IntermediateNode node, Nullable`1<SourceSpan> span);
    private static DefaultTagHelperPropertyIntermediateNode FindFirstUseOfIndexer(TagHelperIntermediateNode tagHelperNode, DefaultTagHelperPropertyIntermediateNode propertyNode);
    private static DefaultTagHelperPropertyIntermediateNode FindFirstUseOfAttribute(TagHelperIntermediateNode tagHelperNode, DefaultTagHelperPropertyIntermediateNode propertyNode);
    private string GetContent(HtmlContentIntermediateNode node);
    internal static string GetDeterministicId(CodeRenderingContext context);
    private static string GetPropertyAccessor(DefaultTagHelperPropertyIntermediateNode node);
}
internal class Microsoft.AspNetCore.Razor.Language.Extensions.DesignTimeDirectiveIntermediateNode : ExtensionIntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void WriteNode(CodeTarget target, CodeRenderingContext context);
}
internal class Microsoft.AspNetCore.Razor.Language.Extensions.DesignTimeDirectivePass : IntermediateNodePassBase {
    internal static string DesignTimeVariable;
    public int Order { get; }
    public virtual int get_Order();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
internal class Microsoft.AspNetCore.Razor.Language.Extensions.DesignTimeDirectiveTargetExtension : object {
    private static string DirectiveTokenHelperMethodName;
    private static string TypeHelper;
    public sealed virtual void WriteDesignTimeDirective(CodeRenderingContext context, DesignTimeDirectiveIntermediateNode directiveNode);
    private void WriteDesignTimeDirectiveToken(CodeRenderingContext context, DesignTimeDirectiveIntermediateNode parent, DirectiveTokenIntermediateNode node, int currentIndex);
    private void WriteMarkerToken(CodeRenderingContext context, DirectiveTokenIntermediateNode node);
}
internal class Microsoft.AspNetCore.Razor.Language.Extensions.EliminateMethodBodyPass : IntermediateNodePassBase {
    public int Order { get; }
    public virtual int get_Order();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
public static class Microsoft.AspNetCore.Razor.Language.Extensions.FunctionsDirective : object {
    public static DirectiveDescriptor Directive;
    private static FunctionsDirective();
    public static void Register(RazorProjectEngineBuilder builder);
    [ObsoleteAttribute("This method is obsolete and will be removed in a future version.")]
public static void Register(IRazorEngineBuilder builder);
}
public class Microsoft.AspNetCore.Razor.Language.Extensions.FunctionsDirectivePass : IntermediateNodePassBase {
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
public interface Microsoft.AspNetCore.Razor.Language.Extensions.IDefaultTagHelperTargetExtension {
    public abstract virtual void WriteTagHelperBody(CodeRenderingContext context, DefaultTagHelperBodyIntermediateNode node);
    public abstract virtual void WriteTagHelperCreate(CodeRenderingContext context, DefaultTagHelperCreateIntermediateNode node);
    public abstract virtual void WriteTagHelperExecute(CodeRenderingContext context, DefaultTagHelperExecuteIntermediateNode node);
    public abstract virtual void WriteTagHelperHtmlAttribute(CodeRenderingContext context, DefaultTagHelperHtmlAttributeIntermediateNode node);
    public abstract virtual void WriteTagHelperProperty(CodeRenderingContext context, DefaultTagHelperPropertyIntermediateNode node);
    public abstract virtual void WriteTagHelperRuntime(CodeRenderingContext context, DefaultTagHelperRuntimeIntermediateNode node);
}
internal interface Microsoft.AspNetCore.Razor.Language.Extensions.IDesignTimeDirectiveTargetExtension {
    public abstract virtual void WriteDesignTimeDirective(CodeRenderingContext context, DesignTimeDirectiveIntermediateNode node);
}
internal interface Microsoft.AspNetCore.Razor.Language.Extensions.IMetadataAttributeTargetExtension {
    public abstract virtual void WriteRazorCompiledItemAttribute(CodeRenderingContext context, RazorCompiledItemAttributeIntermediateNode node);
    public abstract virtual void WriteRazorSourceChecksumAttribute(CodeRenderingContext context, RazorSourceChecksumAttributeIntermediateNode node);
    public abstract virtual void WriteRazorCompiledItemMetadataAttribute(CodeRenderingContext context, RazorCompiledItemMetadataAttributeIntermediateNode node);
}
public interface Microsoft.AspNetCore.Razor.Language.Extensions.IMetadataIdentifierFeature {
    public abstract virtual string GetIdentifier(RazorCodeDocument codeDocument, RazorSourceDocument sourceDocument);
}
internal static class Microsoft.AspNetCore.Razor.Language.Extensions.ImplementsDirective : object {
    public static DirectiveDescriptor Directive;
    private static ImplementsDirective();
    public static void Register(RazorProjectEngineBuilder builder);
}
internal class Microsoft.AspNetCore.Razor.Language.Extensions.ImplementsDirectivePass : IntermediateNodePassBase {
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
public static class Microsoft.AspNetCore.Razor.Language.Extensions.InheritsDirective : object {
    public static DirectiveDescriptor Directive;
    private static InheritsDirective();
    public static void Register(RazorProjectEngineBuilder builder);
    [ObsoleteAttribute("This method is obsolete and will be removed in a future version.")]
public static void Register(IRazorEngineBuilder builder);
}
public class Microsoft.AspNetCore.Razor.Language.Extensions.InheritsDirectivePass : IntermediateNodePassBase {
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
internal interface Microsoft.AspNetCore.Razor.Language.Extensions.IPreallocatedAttributeTargetExtension {
    public abstract virtual void WriteTagHelperHtmlAttribute(CodeRenderingContext context, PreallocatedTagHelperHtmlAttributeIntermediateNode node);
    public abstract virtual void WriteTagHelperHtmlAttributeValue(CodeRenderingContext context, PreallocatedTagHelperHtmlAttributeValueIntermediateNode node);
    public abstract virtual void WriteTagHelperProperty(CodeRenderingContext context, PreallocatedTagHelperPropertyIntermediateNode node);
    public abstract virtual void WriteTagHelperPropertyValue(CodeRenderingContext context, PreallocatedTagHelperPropertyValueIntermediateNode node);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Razor.Language.Extensions.IReadOnlyListExtensions : object {
    [ExtensionAttribute]
public static bool Any(IReadOnlyList`1<T> list, Func`3<T, TArg, bool> predicate, TArg arg);
    [ExtensionAttribute]
public static bool All(IReadOnlyList`1<T> list, Func`3<T, TArg, bool> predicate, TArg arg);
}
public interface Microsoft.AspNetCore.Razor.Language.Extensions.ISectionTargetExtension {
    public abstract virtual void WriteSection(CodeRenderingContext context, SectionIntermediateNode node);
}
public interface Microsoft.AspNetCore.Razor.Language.Extensions.ITemplateTargetExtension {
    public abstract virtual void WriteTemplate(CodeRenderingContext context, TemplateIntermediateNode node);
}
internal class Microsoft.AspNetCore.Razor.Language.Extensions.MetadataAttributePass : IntermediateNodePassBase {
    private IMetadataIdentifierFeature _identifierFeature;
    protected virtual void OnInitialized();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
internal class Microsoft.AspNetCore.Razor.Language.Extensions.MetadataAttributeTargetExtension : object {
    [CompilerGeneratedAttribute]
private string <CompiledItemAttributeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceChecksumAttributeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompiledItemMetadataAttributeName>k__BackingField;
    public string CompiledItemAttributeName { get; public set; }
    public string SourceChecksumAttributeName { get; public set; }
    public string CompiledItemMetadataAttributeName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CompiledItemAttributeName();
    [CompilerGeneratedAttribute]
public void set_CompiledItemAttributeName(string value);
    [CompilerGeneratedAttribute]
public string get_SourceChecksumAttributeName();
    [CompilerGeneratedAttribute]
public void set_SourceChecksumAttributeName(string value);
    [CompilerGeneratedAttribute]
public string get_CompiledItemMetadataAttributeName();
    [CompilerGeneratedAttribute]
public void set_CompiledItemMetadataAttributeName(string value);
    public sealed virtual void WriteRazorCompiledItemAttribute(CodeRenderingContext context, RazorCompiledItemAttributeIntermediateNode node);
    public sealed virtual void WriteRazorCompiledItemMetadataAttribute(CodeRenderingContext context, RazorCompiledItemMetadataAttributeIntermediateNode node);
    public sealed virtual void WriteRazorSourceChecksumAttribute(CodeRenderingContext context, RazorSourceChecksumAttributeIntermediateNode node);
}
public static class Microsoft.AspNetCore.Razor.Language.Extensions.NamespaceDirective : object {
    public static DirectiveDescriptor Directive;
    private static NamespaceDirective();
    public static RazorProjectEngineBuilder Register(RazorProjectEngineBuilder builder);
}
internal class Microsoft.AspNetCore.Razor.Language.Extensions.PreallocatedAttributeTargetExtension : object {
    [CompilerGeneratedAttribute]
private string <TagHelperAttributeTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodedHtmlStringTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutionContextVariableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutionContextAddHtmlAttributeMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutionContextAddTagHelperAttributeMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormatInvalidIndexerAssignmentMethodName>k__BackingField;
    public string TagHelperAttributeTypeName { get; public set; }
    public string EncodedHtmlStringTypeName { get; public set; }
    public string ExecutionContextVariableName { get; public set; }
    public string ExecutionContextAddHtmlAttributeMethodName { get; public set; }
    public string ExecutionContextAddTagHelperAttributeMethodName { get; public set; }
    public string FormatInvalidIndexerAssignmentMethodName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TagHelperAttributeTypeName();
    [CompilerGeneratedAttribute]
public void set_TagHelperAttributeTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_EncodedHtmlStringTypeName();
    [CompilerGeneratedAttribute]
public void set_EncodedHtmlStringTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ExecutionContextVariableName();
    [CompilerGeneratedAttribute]
public void set_ExecutionContextVariableName(string value);
    [CompilerGeneratedAttribute]
public string get_ExecutionContextAddHtmlAttributeMethodName();
    [CompilerGeneratedAttribute]
public void set_ExecutionContextAddHtmlAttributeMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_ExecutionContextAddTagHelperAttributeMethodName();
    [CompilerGeneratedAttribute]
public void set_ExecutionContextAddTagHelperAttributeMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_FormatInvalidIndexerAssignmentMethodName();
    [CompilerGeneratedAttribute]
public void set_FormatInvalidIndexerAssignmentMethodName(string value);
    public sealed virtual void WriteTagHelperHtmlAttributeValue(CodeRenderingContext context, PreallocatedTagHelperHtmlAttributeValueIntermediateNode node);
    public sealed virtual void WriteTagHelperHtmlAttribute(CodeRenderingContext context, PreallocatedTagHelperHtmlAttributeIntermediateNode node);
    public sealed virtual void WriteTagHelperPropertyValue(CodeRenderingContext context, PreallocatedTagHelperPropertyValueIntermediateNode node);
    public sealed virtual void WriteTagHelperProperty(CodeRenderingContext context, PreallocatedTagHelperPropertyIntermediateNode node);
    private static PreallocatedTagHelperPropertyIntermediateNode FindFirstUseOfIndexer(TagHelperIntermediateNode tagHelperNode, PreallocatedTagHelperPropertyIntermediateNode propertyNode);
    private static string GetPropertyAccessor(PreallocatedTagHelperPropertyIntermediateNode node);
}
internal class Microsoft.AspNetCore.Razor.Language.Extensions.PreallocatedTagHelperAttributeOptimizationPass : IntermediateNodePassBase {
    public int Order { get; }
    public virtual int get_Order();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
internal class Microsoft.AspNetCore.Razor.Language.Extensions.PreallocatedTagHelperHtmlAttributeIntermediateNode : ExtensionIntermediateNode {
    [CompilerGeneratedAttribute]
private string <VariableName>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string VariableName { get; public set; }
    public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_VariableName();
    [CompilerGeneratedAttribute]
public void set_VariableName(string value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void WriteNode(CodeTarget target, CodeRenderingContext context);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
internal class Microsoft.AspNetCore.Razor.Language.Extensions.PreallocatedTagHelperHtmlAttributeValueIntermediateNode : ExtensionIntermediateNode {
    [CompilerGeneratedAttribute]
private string <VariableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeStructure <AttributeStructure>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string VariableName { get; public set; }
    public string AttributeName { get; public set; }
    public string Value { get; public set; }
    public AttributeStructure AttributeStructure { get; public set; }
    public PreallocatedTagHelperHtmlAttributeValueIntermediateNode(DefaultTagHelperHtmlAttributeIntermediateNode htmlAttributeNode);
    public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_VariableName();
    [CompilerGeneratedAttribute]
public void set_VariableName(string value);
    [CompilerGeneratedAttribute]
public string get_AttributeName();
    [CompilerGeneratedAttribute]
public void set_AttributeName(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public AttributeStructure get_AttributeStructure();
    [CompilerGeneratedAttribute]
public void set_AttributeStructure(AttributeStructure value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void WriteNode(CodeTarget target, CodeRenderingContext context);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
internal class Microsoft.AspNetCore.Razor.Language.Extensions.PreallocatedTagHelperPropertyIntermediateNode : ExtensionIntermediateNode {
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeStructure <AttributeStructure>k__BackingField;
    [CompilerGeneratedAttribute]
private BoundAttributeDescriptor <BoundAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIndexerNameMatch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private TagHelperDescriptor <TagHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VariableName>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string AttributeName { get; public set; }
    public AttributeStructure AttributeStructure { get; public set; }
    public BoundAttributeDescriptor BoundAttribute { get; public set; }
    public string FieldName { get; public set; }
    public bool IsIndexerNameMatch { get; public set; }
    public string PropertyName { get; public set; }
    public TagHelperDescriptor TagHelper { get; public set; }
    public string VariableName { get; public set; }
    public PreallocatedTagHelperPropertyIntermediateNode(DefaultTagHelperPropertyIntermediateNode propertyNode);
    public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_AttributeName();
    [CompilerGeneratedAttribute]
public void set_AttributeName(string value);
    [CompilerGeneratedAttribute]
public AttributeStructure get_AttributeStructure();
    [CompilerGeneratedAttribute]
public void set_AttributeStructure(AttributeStructure value);
    [CompilerGeneratedAttribute]
public BoundAttributeDescriptor get_BoundAttribute();
    [CompilerGeneratedAttribute]
public void set_BoundAttribute(BoundAttributeDescriptor value);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsIndexerNameMatch();
    [CompilerGeneratedAttribute]
public void set_IsIndexerNameMatch(bool value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public TagHelperDescriptor get_TagHelper();
    [CompilerGeneratedAttribute]
public void set_TagHelper(TagHelperDescriptor value);
    [CompilerGeneratedAttribute]
public string get_VariableName();
    [CompilerGeneratedAttribute]
public void set_VariableName(string value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void WriteNode(CodeTarget target, CodeRenderingContext context);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
internal class Microsoft.AspNetCore.Razor.Language.Extensions.PreallocatedTagHelperPropertyValueIntermediateNode : ExtensionIntermediateNode {
    [CompilerGeneratedAttribute]
private string <VariableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeStructure <AttributeStructure>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string VariableName { get; public set; }
    public string AttributeName { get; public set; }
    public string Value { get; public set; }
    public AttributeStructure AttributeStructure { get; public set; }
    public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_VariableName();
    [CompilerGeneratedAttribute]
public void set_VariableName(string value);
    [CompilerGeneratedAttribute]
public string get_AttributeName();
    [CompilerGeneratedAttribute]
public void set_AttributeName(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public AttributeStructure get_AttributeStructure();
    [CompilerGeneratedAttribute]
public void set_AttributeStructure(AttributeStructure value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void WriteNode(CodeTarget target, CodeRenderingContext context);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
internal class Microsoft.AspNetCore.Razor.Language.Extensions.RazorCompiledItemAttributeIntermediateNode : ExtensionIntermediateNode {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string TypeName { get; public set; }
    public string Kind { get; public set; }
    public string Identifier { get; public set; }
    public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(string value);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void WriteNode(CodeTarget target, CodeRenderingContext context);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Extensions.RazorCompiledItemMetadataAttributeIntermediateNode : ExtensionIntermediateNode {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string Key { get; public set; }
    public string Value { get; public set; }
    public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void WriteNode(CodeTarget target, CodeRenderingContext context);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
internal class Microsoft.AspNetCore.Razor.Language.Extensions.RazorSourceChecksumAttributeIntermediateNode : ExtensionIntermediateNode {
    [CompilerGeneratedAttribute]
private Byte[] <Checksum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChecksumAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public Byte[] Checksum { get; public set; }
    public string ChecksumAlgorithm { get; public set; }
    public string Identifier { get; public set; }
    public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public Byte[] get_Checksum();
    [CompilerGeneratedAttribute]
public void set_Checksum(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_ChecksumAlgorithm();
    [CompilerGeneratedAttribute]
public void set_ChecksumAlgorithm(string value);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void WriteNode(CodeTarget target, CodeRenderingContext context);
}
public static class Microsoft.AspNetCore.Razor.Language.Extensions.SectionDirective : object {
    public static DirectiveDescriptor Directive;
    private static SectionDirective();
    public static void Register(RazorProjectEngineBuilder builder);
    [ObsoleteAttribute("This method is obsolete and will be removed in a future version.")]
public static void Register(IRazorEngineBuilder builder);
}
public class Microsoft.AspNetCore.Razor.Language.Extensions.SectionDirectivePass : IntermediateNodePassBase {
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
public class Microsoft.AspNetCore.Razor.Language.Extensions.SectionIntermediateNode : ExtensionIntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SectionName>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string SectionName { get; public set; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_SectionName();
    [CompilerGeneratedAttribute]
public void set_SectionName(string value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void WriteNode(CodeTarget target, CodeRenderingContext context);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Extensions.SectionTargetExtension : object {
    private static string DefaultWriterName;
    public static string DefaultSectionMethodName;
    [CompilerGeneratedAttribute]
private string <SectionMethodName>k__BackingField;
    public string SectionMethodName { get; public set; }
    private static SectionTargetExtension();
    [CompilerGeneratedAttribute]
public string get_SectionMethodName();
    [CompilerGeneratedAttribute]
public void set_SectionMethodName(string value);
    public sealed virtual void WriteSection(CodeRenderingContext context, SectionIntermediateNode node);
}
public class Microsoft.AspNetCore.Razor.Language.Extensions.TemplateIntermediateNode : ExtensionIntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void WriteNode(CodeTarget target, CodeRenderingContext context);
}
public class Microsoft.AspNetCore.Razor.Language.Extensions.TemplateTargetExtension : object {
    public static string DefaultTemplateTypeName;
    [CompilerGeneratedAttribute]
private string <TemplateTypeName>k__BackingField;
    public string TemplateTypeName { get; public set; }
    private static TemplateTargetExtension();
    [CompilerGeneratedAttribute]
public string get_TemplateTypeName();
    [CompilerGeneratedAttribute]
public void set_TemplateTypeName(string value);
    public sealed virtual void WriteTemplate(CodeRenderingContext context, TemplateIntermediateNode node);
}
internal class Microsoft.AspNetCore.Razor.Language.Extensions.ViewCssScopePass : IntermediateNodePassBase {
    public int Order { get; }
    public virtual int get_Order();
    protected virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
    private void ProcessElement(HtmlContentIntermediateNode node, string cssScope);
    [CompilerGeneratedAttribute]
internal static bool <ProcessElement>g__IsValidElement|3_0(IntermediateToken token);
}
internal class Microsoft.AspNetCore.Razor.Language.FileKindDirectiveFeature : object {
}
public static class Microsoft.AspNetCore.Razor.Language.FileKinds : object {
    public static string Component;
    public static string ComponentImport;
    public static string Legacy;
    private static FileKinds();
    public static bool IsComponent(string fileKind);
    public static bool IsComponentImport(string fileKind);
    public static string GetComponentFileKindFromFilePath(string filePath);
    public static string GetFileKindFromFilePath(string filePath);
}
public static class Microsoft.AspNetCore.Razor.Language.HtmlConventions : object {
    private static string HtmlCaseRegexReplacement;
    private static Char[] InvalidNonWhitespaceHtmlCharacters;
    private static Regex HtmlCaseRegex;
    private static HtmlConventions();
    internal static bool IsInvalidNonWhitespaceHtmlCharacters(char testChar);
    public static string ToHtmlCase(string name);
}
internal class Microsoft.AspNetCore.Razor.Language.HtmlNodeOptimizationPass : RazorEngineFeatureBase {
    public int Order { get; }
    public sealed virtual int get_Order();
    public sealed virtual RazorSyntaxTree Execute(RazorCodeDocument codeDocument, RazorSyntaxTree syntaxTree);
}
public interface Microsoft.AspNetCore.Razor.Language.IConfigureRazorCodeGenerationOptionsFeature {
    public int Order { get; }
    public abstract virtual int get_Order();
    public abstract virtual void Configure(RazorCodeGenerationOptionsBuilder options);
}
public interface Microsoft.AspNetCore.Razor.Language.IConfigureRazorParserOptionsFeature {
    public int Order { get; }
    public abstract virtual int get_Order();
    public abstract virtual void Configure(RazorParserOptionsBuilder options);
}
public interface Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder {
    public string Description { get; public set; }
    public string Directive { get; }
    public string DisplayName { get; public set; }
    public DirectiveKind Kind { get; }
    public DirectiveUsage Usage { get; public set; }
    public IList`1<DirectiveTokenDescriptor> Tokens { get; }
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual string get_Directive();
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
    public abstract virtual DirectiveKind get_Kind();
    public abstract virtual DirectiveUsage get_Usage();
    public abstract virtual void set_Usage(DirectiveUsage value);
    public abstract virtual IList`1<DirectiveTokenDescriptor> get_Tokens();
    public abstract virtual DirectiveDescriptor Build();
}
public interface Microsoft.AspNetCore.Razor.Language.IImportProjectFeature {
    public abstract virtual IReadOnlyList`1<RazorProjectItem> GetImports(RazorProjectItem projectItem);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.CascadingGenericTypeParameter : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <GenericTypeNames>k__BackingField;
    [CompilerGeneratedAttribute]
private ComponentAttributeIntermediateNode <ValueSourceNode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueExpression>k__BackingField;
    public IReadOnlyCollection`1<string> GenericTypeNames { get; public set; }
    internal ComponentAttributeIntermediateNode ValueSourceNode { get; internal set; }
    internal string ValueType { get; internal set; }
    internal string ValueExpression { get; internal set; }
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_GenericTypeNames();
    [CompilerGeneratedAttribute]
public void set_GenericTypeNames(IReadOnlyCollection`1<string> value);
    [CompilerGeneratedAttribute]
internal ComponentAttributeIntermediateNode get_ValueSourceNode();
    [CompilerGeneratedAttribute]
internal void set_ValueSourceNode(ComponentAttributeIntermediateNode value);
    [CompilerGeneratedAttribute]
internal string get_ValueType();
    [CompilerGeneratedAttribute]
internal void set_ValueType(string value);
    [CompilerGeneratedAttribute]
internal string get_ValueExpression();
    [CompilerGeneratedAttribute]
internal void set_ValueExpression(string value);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.ClassDeclarationIntermediateNode : MemberDeclarationIntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Interfaces>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TypeParameter> <TypeParameters>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public IList`1<string> Modifiers { get; }
    public string ClassName { get; public set; }
    public string BaseType { get; public set; }
    public IList`1<string> Interfaces { get; public set; }
    public IList`1<TypeParameter> TypeParameters { get; public set; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public IList`1<string> get_Modifiers();
    [CompilerGeneratedAttribute]
public string get_ClassName();
    [CompilerGeneratedAttribute]
public void set_ClassName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseType();
    [CompilerGeneratedAttribute]
public void set_BaseType(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Interfaces();
    [CompilerGeneratedAttribute]
public void set_Interfaces(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<TypeParameter> get_TypeParameters();
    [CompilerGeneratedAttribute]
public void set_TypeParameters(IList`1<TypeParameter> value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public static class Microsoft.AspNetCore.Razor.Language.Intermediate.CommonAnnotations : object {
    public static object Imported;
    public static object PrimaryClass;
    public static object PrimaryMethod;
    public static object PrimaryNamespace;
    private static CommonAnnotations();
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.ComponentAttributeIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeStructure <AttributeStructure>k__BackingField;
    [CompilerGeneratedAttribute]
private BoundAttributeDescriptor <BoundAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private TagHelperDescriptor <TagHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GloballyQualifiedTypeName>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string AttributeName { get; public set; }
    public AttributeStructure AttributeStructure { get; public set; }
    public BoundAttributeDescriptor BoundAttribute { get; public set; }
    public string PropertyName { get; public set; }
    public TagHelperDescriptor TagHelper { get; public set; }
    public string TypeName { get; public set; }
    public string GloballyQualifiedTypeName { get; public set; }
    public ComponentAttributeIntermediateNode(TagHelperHtmlAttributeIntermediateNode attributeNode);
    public ComponentAttributeIntermediateNode(TagHelperPropertyIntermediateNode propertyNode);
    public ComponentAttributeIntermediateNode(TagHelperDirectiveAttributeIntermediateNode directiveAttributeNode);
    public ComponentAttributeIntermediateNode(TagHelperDirectiveAttributeParameterIntermediateNode directiveAttributeParameterNode);
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_AttributeName();
    [CompilerGeneratedAttribute]
public void set_AttributeName(string value);
    [CompilerGeneratedAttribute]
public AttributeStructure get_AttributeStructure();
    [CompilerGeneratedAttribute]
public void set_AttributeStructure(AttributeStructure value);
    [CompilerGeneratedAttribute]
public BoundAttributeDescriptor get_BoundAttribute();
    [CompilerGeneratedAttribute]
public void set_BoundAttribute(BoundAttributeDescriptor value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public TagHelperDescriptor get_TagHelper();
    [CompilerGeneratedAttribute]
public void set_TagHelper(TagHelperDescriptor value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_GloballyQualifiedTypeName();
    [CompilerGeneratedAttribute]
public void set_GloballyQualifiedTypeName(string value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
    public bool TryParseEventCallbackTypeArgument(String& argument);
    internal bool TryParseEventCallbackTypeArgument(StringSegment& argument);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.ComponentChildContentIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private BoundAttributeDescriptor <BoundAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    public string AttributeName { get; }
    public BoundAttributeDescriptor BoundAttribute { get; public set; }
    public IntermediateNodeCollection Children { get; }
    public bool IsParameterized { get; }
    public string ParameterName { get; public set; }
    public string TypeName { get; public set; }
    public string get_AttributeName();
    [CompilerGeneratedAttribute]
public BoundAttributeDescriptor get_BoundAttribute();
    [CompilerGeneratedAttribute]
public void set_BoundAttribute(BoundAttributeDescriptor value);
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    public bool get_IsParameterized();
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
public void set_ParameterName(string value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.ComponentIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private TagHelperDescriptor <Component>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChildContentParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private ComponentTypeInferenceMethodIntermediateNode <TypeInferenceNode>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, CascadingGenericTypeParameter> <ProvidesCascadingGenericTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    public IEnumerable`1<ComponentAttributeIntermediateNode> Attributes { get; }
    public IEnumerable`1<ReferenceCaptureIntermediateNode> Captures { get; }
    public IEnumerable`1<SetKeyIntermediateNode> SetKeys { get; }
    public IEnumerable`1<SplatIntermediateNode> Splats { get; }
    public IEnumerable`1<ComponentChildContentIntermediateNode> ChildContents { get; }
    public IntermediateNodeCollection Children { get; }
    public TagHelperDescriptor Component { get; public set; }
    public string ChildContentParameterName { get; public set; }
    public IEnumerable`1<ComponentTypeArgumentIntermediateNode> TypeArguments { get; }
    public string TagName { get; public set; }
    public ComponentTypeInferenceMethodIntermediateNode TypeInferenceNode { get; public set; }
    public Dictionary`2<string, CascadingGenericTypeParameter> ProvidesCascadingGenericTypes { get; public set; }
    public string TypeName { get; public set; }
    public IEnumerable`1<ComponentAttributeIntermediateNode> get_Attributes();
    public IEnumerable`1<ReferenceCaptureIntermediateNode> get_Captures();
    public IEnumerable`1<SetKeyIntermediateNode> get_SetKeys();
    public IEnumerable`1<SplatIntermediateNode> get_Splats();
    public IEnumerable`1<ComponentChildContentIntermediateNode> get_ChildContents();
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public TagHelperDescriptor get_Component();
    [CompilerGeneratedAttribute]
public void set_Component(TagHelperDescriptor value);
    [CompilerGeneratedAttribute]
public string get_ChildContentParameterName();
    [CompilerGeneratedAttribute]
public void set_ChildContentParameterName(string value);
    public IEnumerable`1<ComponentTypeArgumentIntermediateNode> get_TypeArguments();
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
public void set_TagName(string value);
    [CompilerGeneratedAttribute]
public ComponentTypeInferenceMethodIntermediateNode get_TypeInferenceNode();
    [CompilerGeneratedAttribute]
public void set_TypeInferenceNode(ComponentTypeInferenceMethodIntermediateNode value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, CascadingGenericTypeParameter> get_ProvidesCascadingGenericTypes();
    [CompilerGeneratedAttribute]
public void set_ProvidesCascadingGenericTypes(Dictionary`2<string, CascadingGenericTypeParameter> value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.ComponentTypeArgumentIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private BoundAttributeDescriptor <BoundAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private TagHelperDescriptor <TagHelper>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public BoundAttributeDescriptor BoundAttribute { get; public set; }
    public string TypeParameterName { get; }
    public TagHelperDescriptor TagHelper { get; public set; }
    public ComponentTypeArgumentIntermediateNode(TagHelperPropertyIntermediateNode propertyNode);
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public BoundAttributeDescriptor get_BoundAttribute();
    [CompilerGeneratedAttribute]
public void set_BoundAttribute(BoundAttributeDescriptor value);
    public string get_TypeParameterName();
    [CompilerGeneratedAttribute]
public TagHelperDescriptor get_TagHelper();
    [CompilerGeneratedAttribute]
public void set_TagHelper(TagHelperDescriptor value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.ComponentTypeInferenceMethodIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private ComponentIntermediateNode <Component>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CascadingGenericTypeParameter> <ReceivesCascadingGenericTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <GenericTypeConstraints>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public ComponentIntermediateNode Component { get; public set; }
    public string FullTypeName { get; internal set; }
    public string MethodName { get; public set; }
    public List`1<CascadingGenericTypeParameter> ReceivesCascadingGenericTypes { get; public set; }
    public IEnumerable`1<string> GenericTypeConstraints { get; public set; }
    public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public ComponentIntermediateNode get_Component();
    [CompilerGeneratedAttribute]
public void set_Component(ComponentIntermediateNode value);
    [CompilerGeneratedAttribute]
public string get_FullTypeName();
    [CompilerGeneratedAttribute]
internal void set_FullTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public List`1<CascadingGenericTypeParameter> get_ReceivesCascadingGenericTypes();
    [CompilerGeneratedAttribute]
public void set_ReceivesCascadingGenericTypes(List`1<CascadingGenericTypeParameter> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_GenericTypeConstraints();
    [CompilerGeneratedAttribute]
public void set_GenericTypeConstraints(IEnumerable`1<string> value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.CSharpCodeAttributeValueIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string Prefix { get; public set; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.CSharpCodeIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.CSharpExpressionAttributeValueIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string Prefix { get; public set; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.CSharpExpressionIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
internal class Microsoft.AspNetCore.Razor.Language.Intermediate.DebuggerDisplayFormatter : IntermediateNodeFormatterBase {
    public virtual string ToString();
}
internal class Microsoft.AspNetCore.Razor.Language.Intermediate.DefaultRazorIntermediateNodeBuilder : IntermediateNodeBuilder {
    private List`1<IntermediateNode> _stack;
    private int _depth;
    public IntermediateNode Current { get; }
    public virtual IntermediateNode get_Current();
    public virtual void Add(IntermediateNode node);
    public virtual void Insert(int index, IntermediateNode node);
    public virtual IntermediateNode Build();
    public virtual IntermediateNode Pop();
    public virtual void Push(IntermediateNode node);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.DirectiveIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DirectiveName>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectiveDescriptor <Directive>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string DirectiveName { get; public set; }
    public IEnumerable`1<DirectiveTokenIntermediateNode> Tokens { get; }
    public DirectiveDescriptor Directive { get; public set; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_DirectiveName();
    [CompilerGeneratedAttribute]
public void set_DirectiveName(string value);
    public IEnumerable`1<DirectiveTokenIntermediateNode> get_Tokens();
    [CompilerGeneratedAttribute]
public DirectiveDescriptor get_Directive();
    [CompilerGeneratedAttribute]
public void set_Directive(DirectiveDescriptor value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.DirectiveTokenIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectiveTokenDescriptor <DirectiveToken>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string Content { get; public set; }
    public DirectiveTokenDescriptor DirectiveToken { get; public set; }
    public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public DirectiveTokenDescriptor get_DirectiveToken();
    [CompilerGeneratedAttribute]
public void set_DirectiveToken(DirectiveTokenDescriptor value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentKind>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorCodeGenerationOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeTarget <Target>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string DocumentKind { get; public set; }
    public RazorCodeGenerationOptions Options { get; public set; }
    public CodeTarget Target { get; public set; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_DocumentKind();
    [CompilerGeneratedAttribute]
public void set_DocumentKind(string value);
    [CompilerGeneratedAttribute]
public RazorCodeGenerationOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(RazorCodeGenerationOptions value);
    [CompilerGeneratedAttribute]
public CodeTarget get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(CodeTarget value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNodeExtensions : object {
    [ExtensionAttribute]
public static ClassDeclarationIntermediateNode FindPrimaryClass(DocumentIntermediateNode node);
    [ExtensionAttribute]
public static MethodDeclarationIntermediateNode FindPrimaryMethod(DocumentIntermediateNode node);
    [ExtensionAttribute]
public static NamespaceDeclarationIntermediateNode FindPrimaryNamespace(DocumentIntermediateNode node);
    [ExtensionAttribute]
public static IReadOnlyList`1<IntermediateNodeReference> FindDirectiveReferences(DocumentIntermediateNode node, DirectiveDescriptor directive);
    [ExtensionAttribute]
public static IReadOnlyList`1<IntermediateNodeReference> FindDescendantReferences(DocumentIntermediateNode document);
    private static T FindWithAnnotation(IntermediateNode node, object annotation);
}
public abstract class Microsoft.AspNetCore.Razor.Language.Intermediate.ExtensionIntermediateNode : IntermediateNode {
    public abstract virtual void WriteNode(CodeTarget target, CodeRenderingContext context);
    protected static void AcceptExtensionNode(TNode node, IntermediateNodeVisitor visitor);
    protected void ReportMissingCodeTargetExtension(CodeRenderingContext context);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.FieldDeclarationIntermediateNode : MemberDeclarationIntermediateNode {
    [CompilerGeneratedAttribute]
private IList`1<string> <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <SuppressWarnings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldType>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public IList`1<string> Modifiers { get; }
    public IList`1<string> SuppressWarnings { get; }
    public string FieldName { get; public set; }
    public string FieldType { get; public set; }
    public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public IList`1<string> get_Modifiers();
    [CompilerGeneratedAttribute]
public IList`1<string> get_SuppressWarnings();
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public string get_FieldType();
    [CompilerGeneratedAttribute]
public void set_FieldType(string value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.HtmlAttributeIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private CSharpExpressionIntermediateNode <AttributeNameExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Suffix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventUpdatesAttributeName>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public CSharpExpressionIntermediateNode AttributeNameExpression { get; public set; }
    public string AttributeName { get; public set; }
    public string Prefix { get; public set; }
    public string Suffix { get; public set; }
    public string EventUpdatesAttributeName { get; public set; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public CSharpExpressionIntermediateNode get_AttributeNameExpression();
    [CompilerGeneratedAttribute]
public void set_AttributeNameExpression(CSharpExpressionIntermediateNode value);
    [CompilerGeneratedAttribute]
public string get_AttributeName();
    [CompilerGeneratedAttribute]
public void set_AttributeName(string value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public string get_Suffix();
    [CompilerGeneratedAttribute]
public void set_Suffix(string value);
    [CompilerGeneratedAttribute]
public string get_EventUpdatesAttributeName();
    [CompilerGeneratedAttribute]
public void set_EventUpdatesAttributeName(string value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.HtmlAttributeValueIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string Prefix { get; public set; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.HtmlContentIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Razor.Language.Intermediate.HtmlContentIntermediateNodeExtensions : object {
    private static string HasEncodedContent;
    [ExtensionAttribute]
public static bool IsEncoded(HtmlContentIntermediateNode node);
    [ExtensionAttribute]
public static void SetEncoded(HtmlContentIntermediateNode node);
}
public interface Microsoft.AspNetCore.Razor.Language.Intermediate.IExtensionIntermediateNodeVisitor`1 {
    public abstract virtual void VisitExtension(TNode node);
}
[DebuggerDisplayAttribute("{DebuggerToString(),nq}")]
public abstract class Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode : object {
    private ItemCollection _annotations;
    private RazorDiagnosticCollection _diagnostics;
    [CompilerGeneratedAttribute]
private Nullable`1<SourceSpan> <Source>k__BackingField;
    public ItemCollection Annotations { get; }
    public IntermediateNodeCollection Children { get; }
    public RazorDiagnosticCollection Diagnostics { get; }
    public bool HasDiagnostics { get; }
    public Nullable`1<SourceSpan> Source { get; public set; }
    [DebuggerBrowsableAttribute("2")]
private string Tree { get; }
    public ItemCollection get_Annotations();
    public abstract virtual IntermediateNodeCollection get_Children();
    public RazorDiagnosticCollection get_Diagnostics();
    public bool get_HasDiagnostics();
    [CompilerGeneratedAttribute]
public Nullable`1<SourceSpan> get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(Nullable`1<SourceSpan> value);
    public abstract virtual void Accept(IntermediateNodeVisitor visitor);
    private string get_Tree();
    private string DebuggerToString();
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeBuilder : object {
    public IntermediateNode Current { get; }
    public static IntermediateNodeBuilder Create(IntermediateNode root);
    public abstract virtual IntermediateNode get_Current();
    public abstract virtual void Add(IntermediateNode node);
    public abstract virtual void Insert(int index, IntermediateNode node);
    public abstract virtual IntermediateNode Build();
    public abstract virtual void Push(IntermediateNode node);
    public abstract virtual IntermediateNode Pop();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeCollection : object {
    public static IntermediateNodeCollection ReadOnly;
    private IList`1<IntermediateNode> _inner;
    public IntermediateNode Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    private IntermediateNodeCollection(IList`1<IntermediateNode> inner);
    private static IntermediateNodeCollection();
    public sealed virtual IntermediateNode get_Item(int index);
    public sealed virtual void set_Item(int index, IntermediateNode value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(IntermediateNode item);
    public void AddRange(IEnumerable`1<IntermediateNode> items);
    public void AddRange(IntermediateNodeCollection items);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(IntermediateNode item);
    public sealed virtual void CopyTo(IntermediateNode[] array, int arrayIndex);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<IntermediateNode> System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int IndexOf(IntermediateNode item);
    public sealed virtual void Insert(int index, IntermediateNode item);
    public sealed virtual bool Remove(IntermediateNode item);
    public sealed virtual void RemoveAt(int index);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeExtensions : object {
    private static IReadOnlyList`1<RazorDiagnostic> EmptyDiagnostics;
    private static IntermediateNodeExtensions();
    [ExtensionAttribute]
public static bool IsImported(IntermediateNode node);
    [ExtensionAttribute]
public static IReadOnlyList`1<RazorDiagnostic> GetAllDiagnostics(IntermediateNode node);
    [ExtensionAttribute]
public static IReadOnlyList`1<TNode> FindDescendantNodes(IntermediateNode node);
    [CompilerGeneratedAttribute]
internal static void <GetAllDiagnostics>g__AddAllDiagnostics|2_1(IntermediateNode n, <>c__DisplayClass2_0& );
}
public abstract class Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeFormatter : object {
    public abstract virtual void WriteChildren(IntermediateNodeCollection children);
    public abstract virtual void WriteContent(string content);
    public abstract virtual void WriteProperty(string key, string value);
}
internal class Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeFormatterBase : IntermediateNodeFormatter {
    private string _content;
    private Dictionary`2<string, string> _properties;
    [CompilerGeneratedAttribute]
private FormatterContentMode <ContentMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeSource>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <Writer>k__BackingField;
    protected FormatterContentMode ContentMode { get; protected set; }
    protected bool IncludeSource { get; protected set; }
    protected TextWriter Writer { get; protected set; }
    [CompilerGeneratedAttribute]
protected FormatterContentMode get_ContentMode();
    [CompilerGeneratedAttribute]
protected void set_ContentMode(FormatterContentMode value);
    [CompilerGeneratedAttribute]
protected bool get_IncludeSource();
    [CompilerGeneratedAttribute]
protected void set_IncludeSource(bool value);
    [CompilerGeneratedAttribute]
protected TextWriter get_Writer();
    [CompilerGeneratedAttribute]
protected void set_Writer(TextWriter value);
    public virtual void WriteChildren(IntermediateNodeCollection children);
    public virtual void WriteContent(string content);
    public virtual void WriteProperty(string key, string value);
    public void FormatNode(IntermediateNode node);
    public void FormatTree(IntermediateNode node);
    private void BeginNode(IntermediateNode node);
    private void EndNode(IntermediateNode node);
    private StringSegment GetShortName(IntermediateNode node);
    private string EscapeNewlines(string content);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeReference : ValueType {
    [CompilerGeneratedAttribute]
private IntermediateNode <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateNode <Parent>k__BackingField;
    public IntermediateNode Node { get; }
    public IntermediateNode Parent { get; }
    public IntermediateNodeReference(IntermediateNode parent, IntermediateNode node);
    public void Deconstruct(IntermediateNode& parent, IntermediateNode& node);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IntermediateNode get_Node();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IntermediateNode get_Parent();
    public IntermediateNodeReference InsertAfter(IntermediateNode node);
    public void InsertAfter(IEnumerable`1<IntermediateNode> nodes);
    public IntermediateNodeReference InsertBefore(IntermediateNode node);
    public void InsertBefore(IEnumerable`1<IntermediateNode> nodes);
    public void Remove();
    public IntermediateNodeReference Replace(IntermediateNode node);
}
public abstract class Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor : object {
    public virtual void Visit(IntermediateNode node);
    public virtual void VisitDefault(IntermediateNode node);
    public virtual void VisitToken(IntermediateToken node);
    public virtual void VisitDirectiveToken(DirectiveTokenIntermediateNode node);
    public virtual void VisitDirective(DirectiveIntermediateNode node);
    public virtual void VisitMalformedDirective(MalformedDirectiveIntermediateNode node);
    public virtual void VisitExtension(ExtensionIntermediateNode node);
    public virtual void VisitCSharpCode(CSharpCodeIntermediateNode node);
    public virtual void VisitCSharpExpression(CSharpExpressionIntermediateNode node);
    public virtual void VisitHtmlAttributeValue(HtmlAttributeValueIntermediateNode node);
    public virtual void VisitCSharpExpressionAttributeValue(CSharpExpressionAttributeValueIntermediateNode node);
    public virtual void VisitCSharpCodeAttributeValue(CSharpCodeAttributeValueIntermediateNode node);
    public virtual void VisitHtmlAttribute(HtmlAttributeIntermediateNode node);
    public virtual void VisitClassDeclaration(ClassDeclarationIntermediateNode node);
    public virtual void VisitMethodDeclaration(MethodDeclarationIntermediateNode node);
    public virtual void VisitFieldDeclaration(FieldDeclarationIntermediateNode node);
    public virtual void VisitPropertyDeclaration(PropertyDeclarationIntermediateNode node);
    public virtual void VisitDocument(DocumentIntermediateNode node);
    public virtual void VisitHtml(HtmlContentIntermediateNode node);
    public virtual void VisitNamespaceDeclaration(NamespaceDeclarationIntermediateNode node);
    public virtual void VisitUsingDirective(UsingDirectiveIntermediateNode node);
    public virtual void VisitTagHelper(TagHelperIntermediateNode node);
    public virtual void VisitTagHelperBody(TagHelperBodyIntermediateNode node);
    public virtual void VisitTagHelperProperty(TagHelperPropertyIntermediateNode node);
    public virtual void VisitTagHelperDirectiveAttribute(TagHelperDirectiveAttributeIntermediateNode node);
    public virtual void VisitTagHelperHtmlAttribute(TagHelperHtmlAttributeIntermediateNode node);
    public virtual void VisitTagHelperDirectiveAttributeParameter(TagHelperDirectiveAttributeParameterIntermediateNode node);
    public virtual void VisitComponent(ComponentIntermediateNode node);
    public virtual void VisitComponentAttribute(ComponentAttributeIntermediateNode node);
    public virtual void VisitComponentChildContent(ComponentChildContentIntermediateNode node);
    public virtual void VisitComponentTypeArgument(ComponentTypeArgumentIntermediateNode node);
    public virtual void VisitComponentTypeInferenceMethod(ComponentTypeInferenceMethodIntermediateNode node);
    public virtual void VisitMarkupElement(MarkupElementIntermediateNode node);
    public virtual void VisitMarkupBlock(MarkupBlockIntermediateNode node);
    public virtual void VisitReferenceCapture(ReferenceCaptureIntermediateNode node);
    public virtual void VisitSetKey(SetKeyIntermediateNode node);
    public virtual void VisitSplat(SplatIntermediateNode node);
}
public abstract class Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeWalker : IntermediateNodeVisitor {
    private List`1<IntermediateNode> _ancestors;
    protected IReadOnlyList`1<IntermediateNode> Ancestors { get; }
    protected IntermediateNode Parent { get; }
    protected IReadOnlyList`1<IntermediateNode> get_Ancestors();
    protected IntermediateNode get_Parent();
    public virtual void VisitDefault(IntermediateNode node);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateToken : IntermediateNode {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenKind <Kind>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string Content { get; public set; }
    public bool IsCSharp { get; }
    public bool IsHtml { get; }
    public TokenKind Kind { get; public set; }
    public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public virtual string get_Content();
    [CompilerGeneratedAttribute]
public virtual void set_Content(string value);
    public bool get_IsCSharp();
    public bool get_IsHtml();
    [CompilerGeneratedAttribute]
public TokenKind get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(TokenKind value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
internal class Microsoft.AspNetCore.Razor.Language.Intermediate.LazyIntermediateToken : IntermediateToken {
    [CompilerGeneratedAttribute]
private object <FactoryArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, string> <ContentFactory>k__BackingField;
    public object FactoryArgument { get; public set; }
    public Func`2<object, string> ContentFactory { get; public set; }
    public string Content { get; }
    [CompilerGeneratedAttribute]
public object get_FactoryArgument();
    [CompilerGeneratedAttribute]
public void set_FactoryArgument(object value);
    [CompilerGeneratedAttribute]
public Func`2<object, string> get_ContentFactory();
    [CompilerGeneratedAttribute]
public void set_ContentFactory(Func`2<object, string> value);
    public virtual string get_Content();
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.MalformedDirectiveIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DirectiveName>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectiveDescriptor <Directive>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string DirectiveName { get; public set; }
    public IEnumerable`1<DirectiveTokenIntermediateNode> Tokens { get; }
    public DirectiveDescriptor Directive { get; public set; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_DirectiveName();
    [CompilerGeneratedAttribute]
public void set_DirectiveName(string value);
    public IEnumerable`1<DirectiveTokenIntermediateNode> get_Tokens();
    [CompilerGeneratedAttribute]
public DirectiveDescriptor get_Directive();
    [CompilerGeneratedAttribute]
public void set_Directive(DirectiveDescriptor value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.MarkupBlockIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string Content { get; public set; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.MarkupElementIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    public IEnumerable`1<HtmlAttributeIntermediateNode> Attributes { get; }
    public IEnumerable`1<ReferenceCaptureIntermediateNode> Captures { get; }
    public IEnumerable`1<SetKeyIntermediateNode> SetKeys { get; }
    public IEnumerable`1<IntermediateNode> Body { get; }
    public IntermediateNodeCollection Children { get; }
    public string TagName { get; public set; }
    public IEnumerable`1<HtmlAttributeIntermediateNode> get_Attributes();
    public IEnumerable`1<ReferenceCaptureIntermediateNode> get_Captures();
    public IEnumerable`1<SetKeyIntermediateNode> get_SetKeys();
    public IEnumerable`1<IntermediateNode> get_Body();
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
public void set_TagName(string value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public abstract class Microsoft.AspNetCore.Razor.Language.Intermediate.MemberDeclarationIntermediateNode : IntermediateNode {
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.MethodDeclarationIntermediateNode : MemberDeclarationIntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<MethodParameter> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReturnType>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public IList`1<string> Modifiers { get; }
    public string MethodName { get; public set; }
    public IList`1<MethodParameter> Parameters { get; }
    public string ReturnType { get; public set; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public IList`1<string> get_Modifiers();
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public IList`1<MethodParameter> get_Parameters();
    [CompilerGeneratedAttribute]
public string get_ReturnType();
    [CompilerGeneratedAttribute]
public void set_ReturnType(string value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
    private static string FormatMethodParameter(MethodParameter parameter);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.MethodParameter : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public IList`1<string> Modifiers { get; }
    public string TypeName { get; public set; }
    public string ParameterName { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<string> get_Modifiers();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
public void set_ParameterName(string value);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.NamespaceDeclarationIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string Content { get; public set; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.PropertyDeclarationIntermediateNode : MemberDeclarationIntermediateNode {
    [CompilerGeneratedAttribute]
private IList`1<string> <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyType>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public IList`1<string> Modifiers { get; }
    public string PropertyName { get; public set; }
    public string PropertyType { get; public set; }
    public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public IList`1<string> get_Modifiers();
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_PropertyType();
    [CompilerGeneratedAttribute]
public void set_PropertyType(string value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.ReferenceCaptureIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateToken <IdentifierToken>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsComponentCapture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ComponentCaptureTypeName>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public IntermediateToken IdentifierToken { get; }
    public bool IsComponentCapture { get; }
    public string ComponentCaptureTypeName { get; public set; }
    public string FieldTypeName { get; }
    public string TypeName { get; }
    public ReferenceCaptureIntermediateNode(IntermediateToken identifierToken);
    public ReferenceCaptureIntermediateNode(IntermediateToken identifierToken, string componentCaptureTypeName);
    public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public IntermediateToken get_IdentifierToken();
    [CompilerGeneratedAttribute]
public bool get_IsComponentCapture();
    [CompilerGeneratedAttribute]
public string get_ComponentCaptureTypeName();
    [CompilerGeneratedAttribute]
public void set_ComponentCaptureTypeName(string value);
    public string get_FieldTypeName();
    public string get_TypeName();
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.SetKeyIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateToken <KeyValueToken>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public IntermediateToken KeyValueToken { get; }
    public SetKeyIntermediateNode(IntermediateToken keyValueToken);
    public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public IntermediateToken get_KeyValueToken();
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.SplatIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.TagHelperBodyIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    public virtual void Accept(IntermediateNodeVisitor visitor);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.TagHelperDirectiveAttributeIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalAttributeName>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeStructure <AttributeStructure>k__BackingField;
    [CompilerGeneratedAttribute]
private BoundAttributeDescriptor <BoundAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private TagHelperDescriptor <TagHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIndexerNameMatch>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string AttributeName { get; public set; }
    public string OriginalAttributeName { get; public set; }
    public AttributeStructure AttributeStructure { get; public set; }
    public BoundAttributeDescriptor BoundAttribute { get; public set; }
    public TagHelperDescriptor TagHelper { get; public set; }
    public bool IsIndexerNameMatch { get; public set; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_AttributeName();
    [CompilerGeneratedAttribute]
public void set_AttributeName(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalAttributeName();
    [CompilerGeneratedAttribute]
public void set_OriginalAttributeName(string value);
    [CompilerGeneratedAttribute]
public AttributeStructure get_AttributeStructure();
    [CompilerGeneratedAttribute]
public void set_AttributeStructure(AttributeStructure value);
    [CompilerGeneratedAttribute]
public BoundAttributeDescriptor get_BoundAttribute();
    [CompilerGeneratedAttribute]
public void set_BoundAttribute(BoundAttributeDescriptor value);
    [CompilerGeneratedAttribute]
public TagHelperDescriptor get_TagHelper();
    [CompilerGeneratedAttribute]
public void set_TagHelper(TagHelperDescriptor value);
    [CompilerGeneratedAttribute]
public bool get_IsIndexerNameMatch();
    [CompilerGeneratedAttribute]
public void set_IsIndexerNameMatch(bool value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.TagHelperDirectiveAttributeParameterIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AttributeNameWithoutParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalAttributeName>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeStructure <AttributeStructure>k__BackingField;
    [CompilerGeneratedAttribute]
private BoundAttributeParameterDescriptor <BoundAttributeParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private BoundAttributeDescriptor <BoundAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private TagHelperDescriptor <TagHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIndexerNameMatch>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string AttributeName { get; public set; }
    public string AttributeNameWithoutParameter { get; public set; }
    public string OriginalAttributeName { get; public set; }
    public AttributeStructure AttributeStructure { get; public set; }
    public BoundAttributeParameterDescriptor BoundAttributeParameter { get; public set; }
    public BoundAttributeDescriptor BoundAttribute { get; public set; }
    public TagHelperDescriptor TagHelper { get; public set; }
    public bool IsIndexerNameMatch { get; public set; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_AttributeName();
    [CompilerGeneratedAttribute]
public void set_AttributeName(string value);
    [CompilerGeneratedAttribute]
public string get_AttributeNameWithoutParameter();
    [CompilerGeneratedAttribute]
public void set_AttributeNameWithoutParameter(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalAttributeName();
    [CompilerGeneratedAttribute]
public void set_OriginalAttributeName(string value);
    [CompilerGeneratedAttribute]
public AttributeStructure get_AttributeStructure();
    [CompilerGeneratedAttribute]
public void set_AttributeStructure(AttributeStructure value);
    [CompilerGeneratedAttribute]
public BoundAttributeParameterDescriptor get_BoundAttributeParameter();
    [CompilerGeneratedAttribute]
public void set_BoundAttributeParameter(BoundAttributeParameterDescriptor value);
    [CompilerGeneratedAttribute]
public BoundAttributeDescriptor get_BoundAttribute();
    [CompilerGeneratedAttribute]
public void set_BoundAttribute(BoundAttributeDescriptor value);
    [CompilerGeneratedAttribute]
public TagHelperDescriptor get_TagHelper();
    [CompilerGeneratedAttribute]
public void set_TagHelper(TagHelperDescriptor value);
    [CompilerGeneratedAttribute]
public bool get_IsIndexerNameMatch();
    [CompilerGeneratedAttribute]
public void set_IsIndexerNameMatch(bool value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.TagHelperHtmlAttributeIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeStructure <AttributeStructure>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string AttributeName { get; public set; }
    public AttributeStructure AttributeStructure { get; public set; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_AttributeName();
    [CompilerGeneratedAttribute]
public void set_AttributeName(string value);
    [CompilerGeneratedAttribute]
public AttributeStructure get_AttributeStructure();
    [CompilerGeneratedAttribute]
public void set_AttributeStructure(AttributeStructure value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.TagHelperIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private TagMode <TagMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TagHelperDescriptor> <TagHelpers>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public TagMode TagMode { get; public set; }
    public string TagName { get; public set; }
    public IList`1<TagHelperDescriptor> TagHelpers { get; }
    public TagHelperBodyIntermediateNode Body { get; }
    public IEnumerable`1<TagHelperPropertyIntermediateNode> Properties { get; }
    public IEnumerable`1<TagHelperHtmlAttributeIntermediateNode> HtmlAttributes { get; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public TagMode get_TagMode();
    [CompilerGeneratedAttribute]
public void set_TagMode(TagMode value);
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
public void set_TagName(string value);
    [CompilerGeneratedAttribute]
public IList`1<TagHelperDescriptor> get_TagHelpers();
    public TagHelperBodyIntermediateNode get_Body();
    public IEnumerable`1<TagHelperPropertyIntermediateNode> get_Properties();
    public IEnumerable`1<TagHelperHtmlAttributeIntermediateNode> get_HtmlAttributes();
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.TagHelperPropertyIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private IntermediateNodeCollection <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeStructure <AttributeStructure>k__BackingField;
    [CompilerGeneratedAttribute]
private BoundAttributeDescriptor <BoundAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private TagHelperDescriptor <TagHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIndexerNameMatch>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string AttributeName { get; public set; }
    public AttributeStructure AttributeStructure { get; public set; }
    public BoundAttributeDescriptor BoundAttribute { get; public set; }
    public TagHelperDescriptor TagHelper { get; public set; }
    public bool IsIndexerNameMatch { get; public set; }
    [CompilerGeneratedAttribute]
public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_AttributeName();
    [CompilerGeneratedAttribute]
public void set_AttributeName(string value);
    [CompilerGeneratedAttribute]
public AttributeStructure get_AttributeStructure();
    [CompilerGeneratedAttribute]
public void set_AttributeStructure(AttributeStructure value);
    [CompilerGeneratedAttribute]
public BoundAttributeDescriptor get_BoundAttribute();
    [CompilerGeneratedAttribute]
public void set_BoundAttribute(BoundAttributeDescriptor value);
    [CompilerGeneratedAttribute]
public TagHelperDescriptor get_TagHelper();
    [CompilerGeneratedAttribute]
public void set_TagHelper(TagHelperDescriptor value);
    [CompilerGeneratedAttribute]
public bool get_IsIndexerNameMatch();
    [CompilerGeneratedAttribute]
public void set_IsIndexerNameMatch(bool value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public enum Microsoft.AspNetCore.Razor.Language.Intermediate.TokenKind : Enum {
    public int value__;
    public static TokenKind Unknown;
    public static TokenKind CSharp;
    public static TokenKind Html;
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.TypeParameter : object {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Constraints>k__BackingField;
    public string ParameterName { get; public set; }
    public string Constraints { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
public void set_ParameterName(string value);
    [CompilerGeneratedAttribute]
public string get_Constraints();
    [CompilerGeneratedAttribute]
public void set_Constraints(string value);
}
public class Microsoft.AspNetCore.Razor.Language.Intermediate.UsingDirectiveIntermediateNode : IntermediateNode {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    public IntermediateNodeCollection Children { get; }
    public string Content { get; public set; }
    public virtual IntermediateNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    public virtual void Accept(IntermediateNodeVisitor visitor);
    public virtual void FormatNode(IntermediateNodeFormatter formatter);
}
public abstract class Microsoft.AspNetCore.Razor.Language.IntermediateNodePassBase : RazorEngineFeatureBase {
    public static int DefaultFeatureOrder;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; }
    private static IntermediateNodePassBase();
    [CompilerGeneratedAttribute]
public virtual int get_Order();
    public sealed virtual void Execute(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
    protected abstract virtual void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
internal interface Microsoft.AspNetCore.Razor.Language.IRazorCodeGenerationOptionsFactoryProjectFeature {
    public abstract virtual RazorCodeGenerationOptions Create(string fileKind, Action`1<RazorCodeGenerationOptionsBuilder> configure);
}
[ObsoleteAttribute("In Razor 2.1 and newer, use RazorCodeDocument.GetCodeGenerationOptions().")]
public interface Microsoft.AspNetCore.Razor.Language.IRazorCodeGenerationOptionsFeature {
    public abstract virtual RazorCodeGenerationOptions GetOptions();
}
public interface Microsoft.AspNetCore.Razor.Language.IRazorCSharpLoweringPhase {
}
public interface Microsoft.AspNetCore.Razor.Language.IRazorDirectiveClassifierPass {
    public int Order { get; }
    public abstract virtual int get_Order();
    public abstract virtual void Execute(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
public interface Microsoft.AspNetCore.Razor.Language.IRazorDirectiveClassifierPhase {
}
public interface Microsoft.AspNetCore.Razor.Language.IRazorDirectiveFeature {
    public ICollection`1<DirectiveDescriptor> Directives { get; }
    public abstract virtual ICollection`1<DirectiveDescriptor> get_Directives();
}
public interface Microsoft.AspNetCore.Razor.Language.IRazorDocumentClassifierPass {
    public int Order { get; }
    public abstract virtual int get_Order();
    public abstract virtual void Execute(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
public interface Microsoft.AspNetCore.Razor.Language.IRazorDocumentClassifierPhase {
}
[ObsoleteAttribute("This class is obsolete and will be removed in a future version. The recommended alternative is RazorProjectEngineBuilder.")]
public interface Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder {
    public ICollection`1<IRazorEngineFeature> Features { get; }
    public IList`1<IRazorEnginePhase> Phases { get; }
    public bool DesignTime { get; }
    public abstract virtual ICollection`1<IRazorEngineFeature> get_Features();
    public abstract virtual IList`1<IRazorEnginePhase> get_Phases();
    public abstract virtual bool get_DesignTime();
    public abstract virtual RazorEngine Build();
}
public interface Microsoft.AspNetCore.Razor.Language.IRazorEngineFeature {
    public RazorEngine Engine { get; public set; }
    public abstract virtual RazorEngine get_Engine();
    public abstract virtual void set_Engine(RazorEngine value);
}
public interface Microsoft.AspNetCore.Razor.Language.IRazorEnginePhase {
    public RazorEngine Engine { get; public set; }
    public abstract virtual RazorEngine get_Engine();
    public abstract virtual void set_Engine(RazorEngine value);
    public abstract virtual void Execute(RazorCodeDocument codeDocument);
}
public interface Microsoft.AspNetCore.Razor.Language.IRazorFeature {
}
public interface Microsoft.AspNetCore.Razor.Language.IRazorIntermediateNodeLoweringPhase {
}
public interface Microsoft.AspNetCore.Razor.Language.IRazorOptimizationPass {
    public int Order { get; }
    public abstract virtual int get_Order();
    public abstract virtual void Execute(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode);
}
public interface Microsoft.AspNetCore.Razor.Language.IRazorOptimizationPhase {
}
internal interface Microsoft.AspNetCore.Razor.Language.IRazorParserOptionsFactoryProjectFeature {
    public abstract virtual RazorParserOptions Create(string fileKind, Action`1<RazorParserOptionsBuilder> configure);
}
[ObsoleteAttribute("In Razor 2.1 and newer, use RazorCodeDocument.GetParserOptions().")]
public interface Microsoft.AspNetCore.Razor.Language.IRazorParserOptionsFeature {
    public abstract virtual RazorParserOptions GetOptions();
}
public interface Microsoft.AspNetCore.Razor.Language.IRazorParsingPhase {
}
public interface Microsoft.AspNetCore.Razor.Language.IRazorProjectEngineFeature {
    public RazorProjectEngine ProjectEngine { get; public set; }
    public abstract virtual RazorProjectEngine get_ProjectEngine();
    public abstract virtual void set_ProjectEngine(RazorProjectEngine value);
}
internal interface Microsoft.AspNetCore.Razor.Language.IRazorSyntaxTreePass {
    public int Order { get; }
    public abstract virtual int get_Order();
    public abstract virtual RazorSyntaxTree Execute(RazorCodeDocument codeDocument, RazorSyntaxTree syntaxTree);
}
internal interface Microsoft.AspNetCore.Razor.Language.IRazorSyntaxTreePhase {
}
public interface Microsoft.AspNetCore.Razor.Language.IRazorTagHelperBinderPhase {
}
public interface Microsoft.AspNetCore.Razor.Language.IRazorTargetExtensionFeature {
    public ICollection`1<ICodeTargetExtension> TargetExtensions { get; }
    public abstract virtual ICollection`1<ICodeTargetExtension> get_TargetExtensions();
}
public interface Microsoft.AspNetCore.Razor.Language.ITagHelperDescriptorProvider {
    public int Order { get; }
    public abstract virtual int get_Order();
    public abstract virtual void Execute(TagHelperDescriptorProviderContext context);
}
public interface Microsoft.AspNetCore.Razor.Language.ITagHelperFeature {
    public abstract virtual IReadOnlyList`1<TagHelperDescriptor> GetDescriptors();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Razor.Language.ItemCollection : object {
    private Dictionary`2<object, object> _inner;
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public object get_Item(object key);
    public void set_Item(object key, object value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual void Add(KeyValuePair`2<object, object> item);
    public void Add(object key, object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<object, object> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<KeyValuePair`2<object, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Remove(KeyValuePair`2<object, object> item);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Razor.Language.LargeTextSourceDocument : RazorSourceDocument {
    private List`1<Char[]> _chunks;
    private int _chunkMaxLength;
    private RazorSourceLineCollection _lines;
    private int _length;
    private Byte[] _checksum;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativePath>k__BackingField;
    public char Item { get; }
    public Encoding Encoding { get; }
    public string FilePath { get; }
    public int Length { get; }
    public RazorSourceLineCollection Lines { get; }
    public string RelativePath { get; }
    public LargeTextSourceDocument(StreamReader reader, int chunkMaxLength, Encoding encoding, RazorSourceDocumentProperties properties);
    public virtual char get_Item(int position);
    [CompilerGeneratedAttribute]
public virtual Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public virtual string get_FilePath();
    public virtual int get_Length();
    public virtual RazorSourceLineCollection get_Lines();
    [CompilerGeneratedAttribute]
public virtual string get_RelativePath();
    public virtual void CopyTo(int sourceIndex, Char[] destination, int destinationIndex, int count);
    public virtual Byte[] GetChecksum();
    private static void ReadChunks(StreamReader reader, int chunkMaxLength, Int32& length, List`1& chunks);
}
[FlagsAttribute]
internal enum Microsoft.AspNetCore.Razor.Language.Legacy.AcceptedCharactersInternal : Enum {
    public int value__;
    public static AcceptedCharactersInternal None;
    public static AcceptedCharactersInternal NewLine;
    public static AcceptedCharactersInternal Whitespace;
    public static AcceptedCharactersInternal NonWhitespace;
    public static AcceptedCharactersInternal AllWhitespace;
    public static AcceptedCharactersInternal Any;
    public static AcceptedCharactersInternal AnyExceptNewline;
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.AddImportChunkGenerator : SpanChunkGenerator {
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParsedNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStatic>k__BackingField;
    public string Namespace { get; }
    public string ParsedNamespace { get; }
    public bool IsStatic { get; }
    public AddImportChunkGenerator(string usingContent, string parsedNamespace, bool isStatic);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public string get_ParsedNamespace();
    [CompilerGeneratedAttribute]
public bool get_IsStatic();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.AddTagHelperChunkGenerator : SpanChunkGenerator {
    [CompilerGeneratedAttribute]
private string <LookupText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DirectiveText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypePattern>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RazorDiagnostic> <Diagnostics>k__BackingField;
    public string LookupText { get; }
    public string DirectiveText { get; public set; }
    public string TypePattern { get; public set; }
    public string AssemblyName { get; public set; }
    public List`1<RazorDiagnostic> Diagnostics { get; }
    public AddTagHelperChunkGenerator(string lookupText, string directiveText, string typePattern, string assemblyName, List`1<RazorDiagnostic> diagnostics);
    [CompilerGeneratedAttribute]
public string get_LookupText();
    [CompilerGeneratedAttribute]
public string get_DirectiveText();
    [CompilerGeneratedAttribute]
public void set_DirectiveText(string value);
    [CompilerGeneratedAttribute]
public string get_TypePattern();
    [CompilerGeneratedAttribute]
public void set_TypePattern(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public List`1<RazorDiagnostic> get_Diagnostics();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.AutoCompleteEditHandler : SpanEditHandler {
    private static int TypeHashCode;
    [CompilerGeneratedAttribute]
private bool <AutoCompleteAtEndOfSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AutoCompleteString>k__BackingField;
    public bool AutoCompleteAtEndOfSpan { get; }
    public string AutoCompleteString { get; public set; }
    public AutoCompleteEditHandler(Func`2<string, IEnumerable`1<SyntaxToken>> tokenizer);
    public AutoCompleteEditHandler(Func`2<string, IEnumerable`1<SyntaxToken>> tokenizer, bool autoCompleteAtEndOfSpan);
    public AutoCompleteEditHandler(Func`2<string, IEnumerable`1<SyntaxToken>> tokenizer, AcceptedCharactersInternal accepted);
    private static AutoCompleteEditHandler();
    [CompilerGeneratedAttribute]
public bool get_AutoCompleteAtEndOfSpan();
    [CompilerGeneratedAttribute]
public string get_AutoCompleteString();
    [CompilerGeneratedAttribute]
public void set_AutoCompleteString(string value);
    protected virtual PartialParseResultInternal CanAcceptChange(SyntaxNode target, SourceChange change);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[FlagsAttribute]
internal enum Microsoft.AspNetCore.Razor.Language.Legacy.BalancingModes : Enum {
    public int value__;
    public static BalancingModes None;
    public static BalancingModes BacktrackOnFailure;
    public static BalancingModes NoErrorOnFailure;
    public static BalancingModes AllowCommentsAndTemplates;
    public static BalancingModes AllowEmbeddedTransitions;
    public static BalancingModes StopAtEndOfLine;
}
internal enum Microsoft.AspNetCore.Razor.Language.Legacy.BlockKindInternal : Enum {
    public int value__;
    public static BlockKindInternal Statement;
    public static BlockKindInternal Directive;
    public static BlockKindInternal Expression;
    public static BlockKindInternal Markup;
    public static BlockKindInternal Template;
    public static BlockKindInternal Comment;
    public static BlockKindInternal Tag;
    public static BlockKindInternal HtmlComment;
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.ClassifiedSpanInternal : ValueType {
    [CompilerGeneratedAttribute]
private AcceptedCharactersInternal <AcceptedCharacters>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockKindInternal <BlockKind>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceSpan <BlockSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceSpan <Span>k__BackingField;
    [CompilerGeneratedAttribute]
private SpanKindInternal <SpanKind>k__BackingField;
    public AcceptedCharactersInternal AcceptedCharacters { get; }
    public BlockKindInternal BlockKind { get; }
    public SourceSpan BlockSpan { get; }
    public SourceSpan Span { get; }
    public SpanKindInternal SpanKind { get; }
    public ClassifiedSpanInternal(SourceSpan span, SourceSpan blockSpan, SpanKindInternal spanKind, BlockKindInternal blockKind, AcceptedCharactersInternal acceptedCharacters);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public AcceptedCharactersInternal get_AcceptedCharacters();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public BlockKindInternal get_BlockKind();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public SourceSpan get_BlockSpan();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public SourceSpan get_Span();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public SpanKindInternal get_SpanKind();
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.CodeBlockEditHandler : SpanEditHandler {
    public CodeBlockEditHandler(Func`2<string, IEnumerable`1<SyntaxToken>> tokenizer);
    protected virtual PartialParseResultInternal CanAcceptChange(SyntaxNode target, SourceChange change);
    internal static bool IsAcceptableReplacement(SyntaxNode target, SourceChange change);
    internal static bool IsAcceptableDeletion(SyntaxNode target, SourceChange change);
    internal static bool ModifiesInvalidContent(SyntaxNode target, SourceChange change);
    internal static bool IsAcceptableInsertion(SourceChange change);
    internal static bool ContainsInvalidContent(SourceChange change);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.CSharpCodeParser : TokenizerBackedParser`1<CSharpTokenizer> {
    private static HashSet`1<char> InvalidNonWhitespaceNameCharacters;
    private static Func`2<SyntaxToken, bool> IsValidStatementSpacingToken;
    internal static DirectiveDescriptor AddTagHelperDirectiveDescriptor;
    internal static DirectiveDescriptor RemoveTagHelperDirectiveDescriptor;
    internal static DirectiveDescriptor TagHelperPrefixDirectiveDescriptor;
    internal static ISet`1<string> DefaultKeywords;
    private ISet`1<string> CurrentKeywords;
    private Dictionary`2<CSharpKeyword, Action`2<SyntaxListBuilder`1<RazorSyntaxNode>, CSharpTransitionSyntax>> _keywordParserMap;
    private Dictionary`2<string, Action`2<SyntaxListBuilder`1<RazorSyntaxNode>, CSharpTransitionSyntax>> _directiveParserMap;
    [CompilerGeneratedAttribute]
private HtmlMarkupParser <HtmlParser>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Keywords>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNested>k__BackingField;
    public HtmlMarkupParser HtmlParser { get; public set; }
    protected internal ISet`1<string> Keywords { get; private set; }
    public bool IsNested { get; public set; }
    public CSharpCodeParser(ParserContext context);
    public CSharpCodeParser(IEnumerable`1<DirectiveDescriptor> directives, ParserContext context);
    private static CSharpCodeParser();
    [CompilerGeneratedAttribute]
public HtmlMarkupParser get_HtmlParser();
    [CompilerGeneratedAttribute]
public void set_HtmlParser(HtmlMarkupParser value);
    [CompilerGeneratedAttribute]
protected internal ISet`1<string> get_Keywords();
    [CompilerGeneratedAttribute]
private void set_Keywords(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_IsNested();
    [CompilerGeneratedAttribute]
public void set_IsNested(bool value);
    public CSharpCodeBlockSyntax ParseBlock();
    private CSharpExplicitExpressionBodySyntax ParseExplicitExpressionBody();
    private CSharpImplicitExpressionBodySyntax ParseImplicitExpressionBody(bool async);
    private void ParseImplicitExpression(SyntaxListBuilder`1& builder, AcceptedCharactersInternal acceptedCharacters);
    private bool ParseMethodCallOrArrayIndex(SyntaxListBuilder`1& builder, AcceptedCharactersInternal acceptedCharacters);
    private CSharpStatementBodySyntax ParseStatementBody(Block block);
    private void ParseCodeBlock(SyntaxListBuilder`1& builder, Block block);
    private void ParseStatement(SyntaxListBuilder`1& builder, Block block);
    private void ParseEmbeddedExpression(SyntaxListBuilder`1& builder);
    private RazorSyntaxNode ParseNestedBlock();
    private void ParseStandardStatement(SyntaxListBuilder`1& builder);
    private void ParseTemplate(SyntaxListBuilder`1& builder);
    protected bool TryParseDirective(SyntaxListBuilder`1& builder, IReadOnlyList`1<SyntaxToken> whitespace, CSharpTransitionSyntax transition, string directive);
    private void SetupDirectiveParsers(IEnumerable`1<DirectiveDescriptor> directiveDescriptors);
    private void EnsureDirectiveIsAtStartOfLine();
    internal void MapDirectives(Action`2<SyntaxListBuilder`1<RazorSyntaxNode>, CSharpTransitionSyntax> handler, String[] directives);
    private void ParseTagHelperPrefixDirective(SyntaxListBuilder`1<RazorSyntaxNode> builder, CSharpTransitionSyntax transition);
    private void ParseAddTagHelperDirective(SyntaxListBuilder`1<RazorSyntaxNode> builder, CSharpTransitionSyntax transition);
    private void ParseRemoveTagHelperDirective(SyntaxListBuilder`1<RazorSyntaxNode> builder, CSharpTransitionSyntax transition);
    [ConditionalAttribute("DEBUG")]
protected void AssertDirective(string directive);
    private RazorDirectiveBodySyntax ParseTagHelperDirective(string keyword, Func`4<string, List`1<RazorDiagnostic>, SourceLocation, ISpanChunkGenerator> chunkGeneratorFactory);
    private ParsedDirective ParseDirective(string directiveText, SourceLocation directiveLocation, TagHelperDirectiveType directiveType, List`1<RazorDiagnostic> errors);
    internal ParsedDirective ParseAddOrRemoveDirective(ParsedDirective directive, SourceLocation directiveLocation, List`1<RazorDiagnostic> errors);
    internal void ValidateTagHelperPrefix(string prefix, SourceLocation directiveLocation, List`1<RazorDiagnostic> diagnostics);
    private void ParseExtensibleDirective(SyntaxListBuilder`1& builder, CSharpTransitionSyntax transition, DirectiveDescriptor descriptor);
    private void ValidateDirectiveUsage(DirectiveDescriptor descriptor, SourceLocation directiveStart);
    protected bool TryParseQualifiedIdentifier(Int32& identifierLength);
    private void ParseDirectiveBlock(SyntaxListBuilder`1& builder, DirectiveDescriptor descriptor, Action`2<SyntaxListBuilder`1<RazorSyntaxNode>, SourceLocation> parseChildren);
    private bool TryParseKeyword(SyntaxListBuilder`1& builder, IReadOnlyList`1<SyntaxToken> whitespace, CSharpTransitionSyntax transition);
    private bool AtBooleanLiteral();
    private void SetupExpressionParsers();
    private void SetupKeywordParsers();
    private void MapExpressionKeyword(Action`2<SyntaxListBuilder`1<RazorSyntaxNode>, CSharpTransitionSyntax> handler, CSharpKeyword keyword);
    private void MapKeywords(Action`2<SyntaxListBuilder`1<RazorSyntaxNode>, CSharpTransitionSyntax> handler, CSharpKeyword[] keywords);
    private void MapKeywords(Action`2<SyntaxListBuilder`1<RazorSyntaxNode>, CSharpTransitionSyntax> handler, bool topLevel, CSharpKeyword[] keywords);
    private void ParseAwaitExpression(SyntaxListBuilder`1<RazorSyntaxNode> builder, CSharpTransitionSyntax transition);
    private void ParseConditionalBlock(SyntaxListBuilder`1<RazorSyntaxNode> builder, CSharpTransitionSyntax transition);
    private void ParseConditionalBlock(SyntaxListBuilder`1& builder, CSharpTransitionSyntax transition, bool topLevel);
    private void ParseConditionalBlock(SyntaxListBuilder`1& builder, Block block);
    private bool TryParseCondition(SyntaxListBuilder`1& builder);
    private void ParseExpectedCodeBlock(SyntaxListBuilder`1& builder, Block block);
    private void ParseUnconditionalBlock(SyntaxListBuilder`1& builder);
    private void ParseCaseStatement(SyntaxListBuilder`1<RazorSyntaxNode> builder, CSharpTransitionSyntax transition);
    private void ParseIfStatement(SyntaxListBuilder`1<RazorSyntaxNode> builder, CSharpTransitionSyntax transition);
    private void ParseAfterIfClause(SyntaxListBuilder`1<RazorSyntaxNode> builder);
    private void ParseElseClause(SyntaxListBuilder`1& builder);
    private void ParseTryStatement(SyntaxListBuilder`1<RazorSyntaxNode> builder, CSharpTransitionSyntax transition);
    private void ParseAfterTryClause(SyntaxListBuilder`1& builder);
    private void ParseFilterableCatchBlock(SyntaxListBuilder`1& builder);
    private void ParseDoStatement(SyntaxListBuilder`1<RazorSyntaxNode> builder, CSharpTransitionSyntax transition);
    private void ParseWhileClause(SyntaxListBuilder`1& builder);
    private void ParseUsingKeyword(SyntaxListBuilder`1<RazorSyntaxNode> builder, CSharpTransitionSyntax transition);
    private void ParseUsingStatement(SyntaxListBuilder`1& builder, CSharpTransitionSyntax transition, Block block);
    private void ParseUsingDeclaration(SyntaxListBuilder`1& builder, CSharpTransitionSyntax transition);
    private bool TryParseNamespaceOrTypeName(SyntaxListBuilder`1& builder);
    private void ParseTypeArgumentList(SyntaxListBuilder`1& builder);
    private void ParseReservedDirective(SyntaxListBuilder`1<RazorSyntaxNode> builder, CSharpTransitionSyntax transition);
    protected void CompleteBlock();
    protected void CompleteBlock(bool insertMarkerIfNecessary);
    protected void CompleteBlock(bool insertMarkerIfNecessary, bool captureWhitespaceToEndOfLine);
    private IReadOnlyList`1<SyntaxToken> SkipToNextImportantToken(SyntaxListBuilder`1& builder);
    private void DefaultSpanContextConfig(SpanContextBuilder spanContext);
    private void ExplicitExpressionSpanContextConfig(SpanContextBuilder spanContext);
    private CSharpStatementLiteralSyntax OutputTokensAsStatementLiteral();
    private CSharpExpressionLiteralSyntax OutputTokensAsExpressionLiteral();
    private CSharpEphemeralTextLiteralSyntax OutputTokensAsEphemeralLiteral();
    private UnclassifiedTextLiteralSyntax OutputTokensAsUnclassifiedLiteral();
    private void OtherParserBlock(SyntaxListBuilder`1& builder);
    private bool Balance(SyntaxListBuilder`1<RazorSyntaxNode> builder, BalancingModes mode);
    private bool Balance(SyntaxListBuilder`1<RazorSyntaxNode> builder, BalancingModes mode, SyntaxKind left, SyntaxKind right, SourceLocation start);
    private bool IsAtEmbeddedTransition(bool allowTemplatesAndComments, bool allowTransitions);
    private void ParseEmbeddedTransition(SyntaxListBuilder`1& builder);
    [ConditionalAttribute("DEBUG")]
internal void Assert(CSharpKeyword expectedKeyword);
    protected internal bool At(CSharpKeyword keyword);
    [CompilerGeneratedAttribute]
private ISpanChunkGenerator <ParseAddTagHelperDirective>b__40_0(string lookupText, List`1<RazorDiagnostic> errors, SourceLocation startLocation);
    [CompilerGeneratedAttribute]
private ISpanChunkGenerator <ParseRemoveTagHelperDirective>b__41_0(string lookupText, List`1<RazorDiagnostic> errors, SourceLocation startLocation);
}
internal enum Microsoft.AspNetCore.Razor.Language.Legacy.CSharpKeyword : Enum {
    public int value__;
    public static CSharpKeyword Await;
    public static CSharpKeyword Abstract;
    public static CSharpKeyword Byte;
    public static CSharpKeyword Class;
    public static CSharpKeyword Delegate;
    public static CSharpKeyword Event;
    public static CSharpKeyword Fixed;
    public static CSharpKeyword If;
    public static CSharpKeyword Internal;
    public static CSharpKeyword New;
    public static CSharpKeyword Override;
    public static CSharpKeyword Readonly;
    public static CSharpKeyword Short;
    public static CSharpKeyword Struct;
    public static CSharpKeyword Try;
    public static CSharpKeyword Unsafe;
    public static CSharpKeyword Volatile;
    public static CSharpKeyword As;
    public static CSharpKeyword Do;
    public static CSharpKeyword Is;
    public static CSharpKeyword Params;
    public static CSharpKeyword Ref;
    public static CSharpKeyword Switch;
    public static CSharpKeyword Ushort;
    public static CSharpKeyword While;
    public static CSharpKeyword Case;
    public static CSharpKeyword Const;
    public static CSharpKeyword Explicit;
    public static CSharpKeyword Float;
    public static CSharpKeyword Null;
    public static CSharpKeyword Sizeof;
    public static CSharpKeyword Typeof;
    public static CSharpKeyword Implicit;
    public static CSharpKeyword Private;
    public static CSharpKeyword This;
    public static CSharpKeyword Using;
    public static CSharpKeyword Extern;
    public static CSharpKeyword Return;
    public static CSharpKeyword Stackalloc;
    public static CSharpKeyword Uint;
    public static CSharpKeyword Base;
    public static CSharpKeyword Catch;
    public static CSharpKeyword Continue;
    public static CSharpKeyword Double;
    public static CSharpKeyword For;
    public static CSharpKeyword In;
    public static CSharpKeyword Lock;
    public static CSharpKeyword Object;
    public static CSharpKeyword Protected;
    public static CSharpKeyword Static;
    public static CSharpKeyword False;
    public static CSharpKeyword Public;
    public static CSharpKeyword Sbyte;
    public static CSharpKeyword Throw;
    public static CSharpKeyword Virtual;
    public static CSharpKeyword Decimal;
    public static CSharpKeyword Else;
    public static CSharpKeyword Operator;
    public static CSharpKeyword String;
    public static CSharpKeyword Ulong;
    public static CSharpKeyword Bool;
    public static CSharpKeyword Char;
    public static CSharpKeyword Default;
    public static CSharpKeyword Foreach;
    public static CSharpKeyword Long;
    public static CSharpKeyword Void;
    public static CSharpKeyword Enum;
    public static CSharpKeyword Finally;
    public static CSharpKeyword Int;
    public static CSharpKeyword Out;
    public static CSharpKeyword Sealed;
    public static CSharpKeyword True;
    public static CSharpKeyword Goto;
    public static CSharpKeyword Unchecked;
    public static CSharpKeyword Interface;
    public static CSharpKeyword Break;
    public static CSharpKeyword Checked;
    public static CSharpKeyword Namespace;
    public static CSharpKeyword When;
    public static CSharpKeyword Where;
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.CSharpLanguageCharacteristics : LanguageCharacteristics`1<CSharpTokenizer> {
    private static Dictionary`2<SyntaxKind, string> _tokenSamples;
    private static IReadOnlyDictionary`2<CSharpKeyword, string> _keywordNames;
    private static CSharpLanguageCharacteristics _instance;
    public static CSharpLanguageCharacteristics Instance { get; }
    private static CSharpLanguageCharacteristics();
    public static CSharpLanguageCharacteristics get_Instance();
    public virtual CSharpTokenizer CreateTokenizer(ITextDocument source);
    protected virtual SyntaxToken CreateToken(string content, SyntaxKind kind, RazorDiagnostic[] errors);
    public virtual string GetSample(SyntaxKind kind);
    public virtual SyntaxToken CreateMarkerToken();
    public virtual SyntaxKind GetKnownTokenType(KnownTokenType type);
    public virtual SyntaxKind FlipBracket(SyntaxKind bracket);
    public static string GetKeyword(CSharpKeyword keyword);
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.CSharpTokenizer : Tokenizer {
    private Dictionary`2<char, Func`1<SyntaxKind>> _operatorHandlers;
    private static Dictionary`2<string, CSharpKeyword> _keywords;
    private Func`2<char, bool> IsEndQuotedCharacterLiteral;
    private Func`2<char, bool> IsEndQuotedStringLiteral;
    protected int StartState { get; }
    private Nullable`1<CSharpTokenizerState> CurrentState { get; }
    public SyntaxKind RazorCommentKind { get; }
    public SyntaxKind RazorCommentTransitionKind { get; }
    public SyntaxKind RazorCommentStarKind { get; }
    public CSharpTokenizer(ITextDocument source);
    private static CSharpTokenizer();
    protected virtual int get_StartState();
    private Nullable`1<CSharpTokenizerState> get_CurrentState();
    public virtual SyntaxKind get_RazorCommentKind();
    public virtual SyntaxKind get_RazorCommentTransitionKind();
    public virtual SyntaxKind get_RazorCommentStarKind();
    protected virtual StateResult Dispatch();
    protected virtual string GetTokenContent(SyntaxKind type);
    protected virtual SyntaxToken CreateToken(string content, SyntaxKind kind, RazorDiagnostic[] errors);
    private StateResult Data();
    private StateResult AtToken();
    private StateResult EscapedRazorCommentTransition();
    private SyntaxKind Operator();
    private SyntaxKind LessThanOperator();
    private SyntaxKind GreaterThanOperator();
    private SyntaxKind MinusOperator();
    private Func`1<SyntaxKind> CreateTwoCharOperatorHandler(SyntaxKind typeIfOnlyFirst, char second, SyntaxKind typeIfBoth);
    private Func`1<SyntaxKind> CreateTwoCharOperatorHandler(SyntaxKind typeIfOnlyFirst, char option1, SyntaxKind typeIfOption1, char option2, SyntaxKind typeIfOption2);
    private StateResult VerbatimStringLiteral();
    private StateResult QuotedCharacterLiteral();
    private StateResult QuotedStringLiteral();
    private StateResult QuotedLiteral(char quote, Func`2<char, bool> isEndQuotedLiteral, SyntaxKind literalType);
    private StateResult BlockComment();
    private StateResult SingleLineComment();
    private StateResult NumericLiteral();
    private StateResult HexLiteral();
    private StateResult DecimalLiteral();
    private StateResult RealLiteralExponentPart();
    private StateResult RealLiteral();
    private void TakeIntegerSuffix();
    private StateResult Identifier();
    private StateResult Transition(CSharpTokenizerState state);
    private StateResult Transition(CSharpTokenizerState state, SyntaxToken result);
    private static bool IsIdentifierStart(char character);
    private static bool IsIdentifierPart(char character);
    private static bool IsRealLiteralSuffix(char character);
    private static bool IsIdentifierPartByUnicodeCategory(char character);
    private static bool IsHexDigit(char value);
    internal static Nullable`1<CSharpKeyword> GetTokenKeyword(SyntaxToken token);
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.DirectiveCSharpTokenizer : CSharpTokenizer {
    private bool _visitedFirstTokenStart;
    private bool _visitedFirstTokenLineEnd;
    public DirectiveCSharpTokenizer(ITextDocument source);
    protected virtual StateResult Dispatch();
    public virtual SyntaxToken NextToken();
    private bool IsValidTokenType(SyntaxKind kind);
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.DirectiveHtmlTokenizer : HtmlTokenizer {
    private bool _visitedFirstTokenStart;
    private SourceLocation _firstTokenVisitLocation;
    public DirectiveHtmlTokenizer(ITextDocument source);
    protected virtual StateResult Dispatch();
    public virtual SyntaxToken NextToken();
    private bool IsValidTokenType(SyntaxKind kind);
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.DirectiveTokenChunkGenerator : SpanChunkGenerator {
    private static Type Type;
    [CompilerGeneratedAttribute]
private DirectiveTokenDescriptor <Descriptor>k__BackingField;
    public DirectiveTokenDescriptor Descriptor { get; }
    public DirectiveTokenChunkGenerator(DirectiveTokenDescriptor tokenDescriptor);
    private static DirectiveTokenChunkGenerator();
    [CompilerGeneratedAttribute]
public DirectiveTokenDescriptor get_Descriptor();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.DisposableAction : object {
    private Action _action;
    private bool _invoked;
    public DisposableAction(Action action);
    public sealed virtual void Dispose();
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.EditResult : object {
    [CompilerGeneratedAttribute]
private PartialParseResultInternal <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private SyntaxNode <EditedNode>k__BackingField;
    public PartialParseResultInternal Result { get; public set; }
    public SyntaxNode EditedNode { get; public set; }
    public EditResult(PartialParseResultInternal result, SyntaxNode editedNode);
    [CompilerGeneratedAttribute]
public PartialParseResultInternal get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(PartialParseResultInternal value);
    [CompilerGeneratedAttribute]
public SyntaxNode get_EditedNode();
    [CompilerGeneratedAttribute]
public void set_EditedNode(SyntaxNode value);
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.ErrorSink : object {
    private List`1<RazorDiagnostic> _errors;
    public IReadOnlyList`1<RazorDiagnostic> Errors { get; }
    public IReadOnlyList`1<RazorDiagnostic> get_Errors();
    public void OnError(RazorDiagnostic error);
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.ExpressionChunkGenerator : object {
    private static int TypeHashCode;
    private static ExpressionChunkGenerator();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.FirstDirectiveCSharpLanguageCharacteristics : CSharpLanguageCharacteristics {
    private static FirstDirectiveCSharpLanguageCharacteristics _instance;
    public static FirstDirectiveCSharpLanguageCharacteristics Instance { get; }
    private static FirstDirectiveCSharpLanguageCharacteristics();
    public static FirstDirectiveCSharpLanguageCharacteristics get_Instance();
    public virtual CSharpTokenizer CreateTokenizer(ITextDocument source);
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.FirstDirectiveHtmlLanguageCharacteristics : HtmlLanguageCharacteristics {
    private static FirstDirectiveHtmlLanguageCharacteristics _instance;
    public static FirstDirectiveHtmlLanguageCharacteristics Instance { get; }
    private static FirstDirectiveHtmlLanguageCharacteristics();
    public static FirstDirectiveHtmlLanguageCharacteristics get_Instance();
    public virtual HtmlTokenizer CreateTokenizer(ITextDocument source);
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.HtmlLanguageCharacteristics : LanguageCharacteristics`1<HtmlTokenizer> {
    private static HtmlLanguageCharacteristics _instance;
    public static HtmlLanguageCharacteristics Instance { get; }
    private static HtmlLanguageCharacteristics();
    public static HtmlLanguageCharacteristics get_Instance();
    public virtual string GetSample(SyntaxKind type);
    public virtual HtmlTokenizer CreateTokenizer(ITextDocument source);
    public virtual SyntaxKind FlipBracket(SyntaxKind bracket);
    public virtual SyntaxToken CreateMarkerToken();
    public virtual SyntaxKind GetKnownTokenType(KnownTokenType type);
    protected virtual SyntaxToken CreateToken(string content, SyntaxKind kind, RazorDiagnostic[] errors);
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.HtmlMarkupParser : TokenizerBackedParser`1<HtmlTokenizer> {
    private static string ScriptTagName;
    private static SyntaxList`1<RazorSyntaxNode> EmptySyntaxList;
    private static Char[] ValidAfterTypeAttributeNameCharacters;
    private static SyntaxToken[] nonAllowedHtmlCommentEnding;
    private Stack`1<TagTracker> _tagTracker;
    [CompilerGeneratedAttribute]
private CSharpCodeParser <CodeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaseSensitive>k__BackingField;
    private TagTracker CurrentTracker { get; }
    private string CurrentStartTagName { get; }
    public CSharpCodeParser CodeParser { get; public set; }
    private bool CaseSensitive { get; private set; }
    private StringComparison Comparison { get; }
    public HtmlMarkupParser(ParserContext context);
    private static HtmlMarkupParser();
    private TagTracker get_CurrentTracker();
    private string get_CurrentStartTagName();
    [CompilerGeneratedAttribute]
public CSharpCodeParser get_CodeParser();
    [CompilerGeneratedAttribute]
public void set_CodeParser(CSharpCodeParser value);
    [CompilerGeneratedAttribute]
private bool get_CaseSensitive();
    [CompilerGeneratedAttribute]
private void set_CaseSensitive(bool value);
    private StringComparison get_Comparison();
    public RazorDocumentSyntax ParseDocument();
    public MarkupBlockSyntax ParseBlock();
    public MarkupBlockSyntax ParseRazorBlock(Tuple`2<string, string> nestingSequences, bool caseSensitive);
    private void ParseMarkupNodes(SyntaxListBuilder`1& builder, ParseMode mode, Func`2<SyntaxToken, bool> stopCondition);
    private void ParseMarkupNode(SyntaxListBuilder`1& builder, ParseMode mode);
    private void ParseMarkupText(SyntaxListBuilder`1& builder);
    private void ParseMarkupInCodeBlock(SyntaxListBuilder`1& builder);
    private void CompleteMarkupInCodeBlock(SyntaxListBuilder`1& builder);
    private void ParseMarkupTransition(SyntaxListBuilder`1& builder);
    private void ParseSingleLineMarkup(SyntaxListBuilder`1& builder);
    private void ParseMarkupElement(SyntaxListBuilder`1& builder, ParseMode mode);
    private void CompleteEndTag(SyntaxListBuilder`1& builder, string endTagName, SourceLocation endTagStartLocation, MarkupEndTagSyntax endTag);
    private bool TryRecoverStartTag(SyntaxListBuilder`1& builder, string endTagName, MarkupEndTagSyntax endTag);
    private MarkupStartTagSyntax ParseStartTag(ParseMode mode, SourceLocation tagStartLocation, String& tagName, MarkupTagMode& tagMode, Boolean& isWellFormed);
    private MarkupStartTagSyntax ParseStartTextTag(SyntaxToken openAngleToken, MarkupTagMode& tagMode, Boolean& isWellFormed);
    private void RecoverTextTag(MarkupTextLiteralSyntax& miscContent, SyntaxToken& closeAngleToken);
    private MarkupEndTagSyntax ParseEndTag(ParseMode mode, String& tagName, Boolean& isWellFormed);
    private MarkupEndTagSyntax ParseEndTextTag(SyntaxToken openAngleToken, SyntaxToken forwardSlashToken, Boolean& isWellFormed);
    private void ParseAttributes(SyntaxListBuilder`1& builder);
    private bool IsEndOfTag();
    private void ParseMiscAttribute(SyntaxListBuilder`1& builder);
    private void ParseAttribute(SyntaxListBuilder`1& builder);
    private bool TryParseAttributeName(IReadOnlyList`1& nameTokens);
    private MarkupAttributeBlockSyntax ParseRemainingAttribute(MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name);
    private RazorBlockSyntax ParseNonConditionalAttributeValue(SyntaxKind quote);
    private void ParseConditionalAttributeValue(SyntaxListBuilder`1& builder, SyntaxKind quote);
    private bool IsEndOfAttributeValue(SyntaxKind quote, SyntaxToken token);
    private bool IsUnquotedEndOfAttributeValue(SyntaxToken token);
    private void ParseJavascriptAndEndScriptTag(SyntaxListBuilder`1& builder, MarkupStartTagSyntax startTag, AcceptedCharactersInternal endTagAcceptedCharacters);
    private bool ParseSpecialTag(SyntaxListBuilder`1& builder);
    private bool ParseXmlPI(SyntaxListBuilder`1& builder);
    private bool ParseCData(SyntaxListBuilder`1& builder);
    private void ParseDoubleTransition(SyntaxListBuilder`1& builder);
    private void ParseCodeTransition(SyntaxListBuilder`1& builder);
    private void ParseMarkupComment(SyntaxListBuilder`1& builder);
    private void ParseRazorCommentWithLeadingAndTrailingWhitespace(SyntaxListBuilder`1& builder);
    private void ParseMisc(SyntaxListBuilder`1& builder);
    private bool ScriptTagExpectsHtml(MarkupStartTagSyntax tagBlock);
    private static bool IsTypeAttribute(MarkupAttributeBlockSyntax attributeBlock);
    internal SyntaxToken AcceptAllButLastDoubleHyphens();
    private bool AcceptTokenUntilAll(SyntaxListBuilder`1& builder, SyntaxKind[] endSequence);
    private IReadOnlyList`1<SyntaxToken> FastReadWhitespaceAndNewLines();
    private ParserState GetParserState(ParseMode mode);
    private bool TryParseBangEscape(SyntaxToken& bangToken);
    private bool IsBangEscape(int lookahead);
    internal bool IsHtmlCommentAhead();
    private bool IsConditionalAttributeName(string name);
    private void NestingBlock(SyntaxListBuilder`1& builder, Tuple`2<string, string> nestingSequences);
    private int ProcessTextToken(SyntaxListBuilder`1& builder, Tuple`2<string, string> nestingSequences, int currentNesting);
    private int HandleNestingSequence(SyntaxListBuilder`1& builder, string sequence, int position, int currentNesting, int retIfMatched);
    private void OtherParserBlock(SyntaxListBuilder`1& builder);
    internal static bool IsCommentContentEndingInvalid(IEnumerable`1<SyntaxToken> sequence);
    internal static bool IsHyphen(SyntaxToken token);
    internal static bool IsValidAttributeNameToken(SyntaxToken token);
    private static bool IsTagRecoveryStopPoint(SyntaxToken token);
    private void DefaultMarkupSpanContext(SpanContextBuilder spanContext);
    private GreenNode GetLastSpan(RazorSyntaxNode node);
    private static bool IsVoidElement(string tagName);
    [CompilerGeneratedAttribute]
private bool <IsHtmlCommentAhead>b__65_0(SyntaxToken next);
    [CompilerGeneratedAttribute]
private bool <IsHtmlCommentAhead>b__65_2(SyntaxToken ns);
    [CompilerGeneratedAttribute]
private bool <IsHtmlCommentAhead>b__65_3(SyntaxToken ns);
    [CompilerGeneratedAttribute]
private bool <IsHtmlCommentAhead>b__65_4(SyntaxToken ns);
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.HtmlTokenizer : Tokenizer {
    protected int StartState { get; }
    private Nullable`1<HtmlTokenizerState> CurrentState { get; }
    public SyntaxKind RazorCommentKind { get; }
    public SyntaxKind RazorCommentTransitionKind { get; }
    public SyntaxKind RazorCommentStarKind { get; }
    public HtmlTokenizer(ITextDocument source);
    protected virtual int get_StartState();
    private Nullable`1<HtmlTokenizerState> get_CurrentState();
    public virtual SyntaxKind get_RazorCommentKind();
    public virtual SyntaxKind get_RazorCommentTransitionKind();
    public virtual SyntaxKind get_RazorCommentStarKind();
    protected virtual SyntaxToken CreateToken(string content, SyntaxKind type, RazorDiagnostic[] errors);
    protected virtual StateResult Dispatch();
    protected virtual string GetTokenContent(SyntaxKind type);
    private StateResult Data();
    private StateResult EscapedRazorCommentTransition();
    private StateResult Text();
    private SyntaxToken Token();
    private SyntaxToken Whitespace();
    private SyntaxToken Newline();
    private bool AtToken();
    private StateResult Transition(HtmlTokenizerState state);
    private StateResult Transition(HtmlTokenizerState state, SyntaxToken result);
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.ImplicitExpressionEditHandler : SpanEditHandler {
    private ISet`1<string> _keywords;
    private IReadOnlyCollection`1<string> _readOnlyKeywords;
    [CompilerGeneratedAttribute]
private bool <AcceptTrailingDot>k__BackingField;
    public bool AcceptTrailingDot { get; }
    public IReadOnlyCollection`1<string> Keywords { get; }
    public ImplicitExpressionEditHandler(Func`2<string, IEnumerable`1<SyntaxToken>> tokenizer, ISet`1<string> keywords, bool acceptTrailingDot);
    [CompilerGeneratedAttribute]
public bool get_AcceptTrailingDot();
    public IReadOnlyCollection`1<string> get_Keywords();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual PartialParseResultInternal CanAcceptChange(SyntaxNode target, SourceChange change);
    private static bool IsDotlessCommitInsertion(SyntaxNode target, SourceChange change);
    private static bool IsNewDotlessCommitInsertion(SyntaxNode target, SourceChange change);
    private static bool IsSecondaryDotlessCommitInsertion(SyntaxNode target, SourceChange change);
    private static bool IsAcceptableReplace(SyntaxNode target, SourceChange change);
    private bool IsAcceptableIdentifierReplacement(SyntaxNode target, SourceChange change);
    private static bool IsAcceptableDeletion(SyntaxNode target, SourceChange change);
    private static bool IsAcceptableInsertion(SyntaxNode target, SourceChange change);
    internal static bool IsAcceptableDeletionInBalancedParenthesis(SyntaxNode target, SourceChange change);
    internal static bool IsAcceptableInsertionInBalancedParenthesis(SyntaxNode target, SourceChange change);
    internal static bool IsInsideParenthesis(int position, IReadOnlyList`1<SyntaxToken> tokens);
    internal static bool ContainsPosition(int position, SyntaxToken currentToken);
    internal static bool TryUpdateBalanceCount(SyntaxToken token, Int32& count);
    internal static bool TryUpdateCountFromContent(string content, Int32& count);
    private static bool IsAcceptableEndInsertion(SyntaxNode target, SourceChange change);
    private static bool IsAcceptableInnerInsertion(SyntaxNode target, SourceChange change);
    private static bool RemainingIsWhitespace(SyntaxNode target, SourceChange change);
    private PartialParseResultInternal HandleDotlessCommitInsertion(SyntaxNode target);
    private PartialParseResultInternal HandleReplacement(SyntaxNode target, SourceChange change);
    private PartialParseResultInternal HandleDeletion(SyntaxNode target, char previousChar, SourceChange change);
    private PartialParseResultInternal HandleInsertion(SyntaxNode target, char previousChar, SourceChange change);
    private PartialParseResultInternal HandleInsertionAfterIdPart(SyntaxNode target, SourceChange change);
    private PartialParseResultInternal HandleInsertionAfterOpenParenthesis(SyntaxNode target, SourceChange change);
    private PartialParseResultInternal HandleInsertionAfterDot(SyntaxNode target, SourceChange change);
    private PartialParseResultInternal TryAcceptChange(SyntaxNode target, SourceChange change, PartialParseResultInternal acceptResult);
    private static bool IsDoubleParenthesisInsertion(SourceChange change);
    private static bool IsOpenParenthesisInsertion(SourceChange change);
    private static bool IsCloseParenthesisInsertion(SourceChange change);
    private static bool EndsWithDot(string content);
    private bool StartsWithKeyword(string newContent);
}
internal interface Microsoft.AspNetCore.Razor.Language.Legacy.ISpanChunkGenerator {
}
internal interface Microsoft.AspNetCore.Razor.Language.Legacy.ITextBuffer {
    public int Length { get; }
    public int Position { get; public set; }
    public abstract virtual int get_Length();
    public abstract virtual int get_Position();
    public abstract virtual void set_Position(int value);
    public abstract virtual int Read();
    public abstract virtual int Peek();
}
internal interface Microsoft.AspNetCore.Razor.Language.Legacy.ITextDocument {
    public SourceLocation Location { get; }
    public abstract virtual SourceLocation get_Location();
}
internal interface Microsoft.AspNetCore.Razor.Language.Legacy.ITokenizer {
    public abstract virtual SyntaxToken NextToken();
}
internal enum Microsoft.AspNetCore.Razor.Language.Legacy.KnownTokenType : Enum {
    public int value__;
    public static KnownTokenType Whitespace;
    public static KnownTokenType NewLine;
    public static KnownTokenType Identifier;
    public static KnownTokenType Keyword;
    public static KnownTokenType Transition;
    public static KnownTokenType Unknown;
    public static KnownTokenType CommentStart;
    public static KnownTokenType CommentStar;
    public static KnownTokenType CommentBody;
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Legacy.LanguageCharacteristics`1 : object {
    public abstract virtual string GetSample(SyntaxKind type);
    public abstract virtual TTokenizer CreateTokenizer(ITextDocument source);
    public abstract virtual SyntaxKind FlipBracket(SyntaxKind bracket);
    public abstract virtual SyntaxToken CreateMarkerToken();
    public virtual IEnumerable`1<SyntaxToken> TokenizeString(string content);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Razor.Language.Legacy.LanguageCharacteristics`1/<TokenizeString>d__5")]
public virtual IEnumerable`1<SyntaxToken> TokenizeString(SourceLocation start, string input);
    public virtual bool IsWhitespace(SyntaxToken token);
    public virtual bool IsNewLine(SyntaxToken token);
    public virtual bool IsIdentifier(SyntaxToken token);
    public virtual bool IsKeyword(SyntaxToken token);
    public virtual bool IsTransition(SyntaxToken token);
    public virtual bool IsCommentStart(SyntaxToken token);
    public virtual bool IsCommentStar(SyntaxToken token);
    public virtual bool IsCommentBody(SyntaxToken token);
    public virtual bool IsUnknown(SyntaxToken token);
    public virtual bool IsKnownTokenType(SyntaxToken token, KnownTokenType type);
    public virtual Tuple`2<SyntaxToken, SyntaxToken> SplitToken(SyntaxToken token, int splitAt, SyntaxKind leftType);
    public abstract virtual SyntaxKind GetKnownTokenType(KnownTokenType type);
    public virtual bool KnowsTokenType(KnownTokenType type);
    protected abstract virtual SyntaxToken CreateToken(string content, SyntaxKind type, RazorDiagnostic[] errors);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Razor.Language.Legacy.LegacySyntaxNodeExtensions : object {
    private static SyntaxKind[] TransitionSpanKinds;
    private static SyntaxKind[] MetaCodeSpanKinds;
    private static SyntaxKind[] CommentSpanKinds;
    private static SyntaxKind[] CodeSpanKinds;
    private static SyntaxKind[] MarkupSpanKinds;
    private static SyntaxKind[] NoneSpanKinds;
    private static LegacySyntaxNodeExtensions();
    [ExtensionAttribute]
public static SpanContext GetSpanContext(SyntaxNode node);
    [ExtensionAttribute]
public static TNode WithSpanContext(TNode node, SpanContext spanContext);
    [ExtensionAttribute]
public static SyntaxNode LocateOwner(SyntaxNode node, SourceChange change);
    [ExtensionAttribute]
public static bool IsTransitionSpanKind(SyntaxNode node);
    [ExtensionAttribute]
public static bool IsMetaCodeSpanKind(SyntaxNode node);
    [ExtensionAttribute]
public static bool IsCommentSpanKind(SyntaxNode node);
    [ExtensionAttribute]
public static bool IsCodeSpanKind(SyntaxNode node);
    [ExtensionAttribute]
public static bool IsMarkupSpanKind(SyntaxNode node);
    [ExtensionAttribute]
public static bool IsNoneSpanKind(SyntaxNode node);
    [ExtensionAttribute]
public static bool IsSpanKind(SyntaxNode node);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Razor.Language.Legacy.LegacySyntaxNodeExtensions/<FlattenSpans>d__16")]
[ExtensionAttribute]
public static IEnumerable`1<SyntaxNode> FlattenSpans(SyntaxNode node);
    [ExtensionAttribute]
public static SyntaxNode PreviousSpan(SyntaxNode node);
    [ExtensionAttribute]
public static SyntaxNode NextSpan(SyntaxNode node);
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.LiteralAttributeChunkGenerator : SpanChunkGenerator {
    [CompilerGeneratedAttribute]
private LocationTagged`1<string> <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private LocationTagged`1<string> <Value>k__BackingField;
    public LocationTagged`1<string> Prefix { get; }
    public LocationTagged`1<string> Value { get; }
    public LiteralAttributeChunkGenerator(LocationTagged`1<string> prefix, LocationTagged`1<string> value);
    [CompilerGeneratedAttribute]
public LocationTagged`1<string> get_Prefix();
    [CompilerGeneratedAttribute]
public LocationTagged`1<string> get_Value();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DebuggerDisplayAttribute("{DebuggerToString(),nq}")]
internal class Microsoft.AspNetCore.Razor.Language.Legacy.LocationTagged`1 : object {
    [CompilerGeneratedAttribute]
private SourceLocation <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private TValue <Value>k__BackingField;
    public SourceLocation Location { get; }
    public TValue Value { get; }
    public LocationTagged`1(TValue value, int absoluteIndex, int lineIndex, int characterIndex);
    public LocationTagged`1(TValue value, SourceLocation location);
    [CompilerGeneratedAttribute]
public SourceLocation get_Location();
    [CompilerGeneratedAttribute]
public TValue get_Value();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public static TValue op_Implicit(LocationTagged`1<TValue> value);
    private string DebuggerToString();
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.MarkupChunkGenerator : SpanChunkGenerator {
    public virtual string ToString();
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Legacy.ParserBase : object {
    [CompilerGeneratedAttribute]
private ParserContext <Context>k__BackingField;
    public ParserContext Context { get; }
    public ParserBase(ParserContext context);
    [CompilerGeneratedAttribute]
public ParserContext get_Context();
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.ParserContext : object {
    [CompilerGeneratedAttribute]
private ErrorSink <ErrorSink>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorParserFeatureFlags <FeatureFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <SeenDirectives>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextDocument <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorSourceDocument <SourceDocument>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignTimeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParseLeadingDirectives>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WhiteSpaceIsSignificantToAncestorBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NullGenerateWhitespaceAndNewLine>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InTemplateContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StartOfLine>k__BackingField;
    [CompilerGeneratedAttribute]
private AcceptedCharactersInternal <LastAcceptedCharacters>k__BackingField;
    public ErrorSink ErrorSink { get; public set; }
    public RazorParserFeatureFlags FeatureFlags { get; }
    public HashSet`1<string> SeenDirectives { get; }
    public ITextDocument Source { get; }
    public RazorSourceDocument SourceDocument { get; }
    public bool DesignTimeMode { get; }
    public bool ParseLeadingDirectives { get; }
    public bool WhiteSpaceIsSignificantToAncestorBlock { get; public set; }
    public bool NullGenerateWhitespaceAndNewLine { get; public set; }
    public bool InTemplateContext { get; public set; }
    public bool StartOfLine { get; public set; }
    public AcceptedCharactersInternal LastAcceptedCharacters { get; public set; }
    public bool EndOfFile { get; }
    public ParserContext(RazorSourceDocument source, RazorParserOptions options);
    [CompilerGeneratedAttribute]
public ErrorSink get_ErrorSink();
    [CompilerGeneratedAttribute]
public void set_ErrorSink(ErrorSink value);
    [CompilerGeneratedAttribute]
public RazorParserFeatureFlags get_FeatureFlags();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_SeenDirectives();
    [CompilerGeneratedAttribute]
public ITextDocument get_Source();
    [CompilerGeneratedAttribute]
public RazorSourceDocument get_SourceDocument();
    [CompilerGeneratedAttribute]
public bool get_DesignTimeMode();
    [CompilerGeneratedAttribute]
public bool get_ParseLeadingDirectives();
    [CompilerGeneratedAttribute]
public bool get_WhiteSpaceIsSignificantToAncestorBlock();
    [CompilerGeneratedAttribute]
public void set_WhiteSpaceIsSignificantToAncestorBlock(bool value);
    [CompilerGeneratedAttribute]
public bool get_NullGenerateWhitespaceAndNewLine();
    [CompilerGeneratedAttribute]
public void set_NullGenerateWhitespaceAndNewLine(bool value);
    [CompilerGeneratedAttribute]
public bool get_InTemplateContext();
    [CompilerGeneratedAttribute]
public void set_InTemplateContext(bool value);
    [CompilerGeneratedAttribute]
public bool get_StartOfLine();
    [CompilerGeneratedAttribute]
public void set_StartOfLine(bool value);
    [CompilerGeneratedAttribute]
public AcceptedCharactersInternal get_LastAcceptedCharacters();
    [CompilerGeneratedAttribute]
public void set_LastAcceptedCharacters(AcceptedCharactersInternal value);
    public bool get_EndOfFile();
}
internal static class Microsoft.AspNetCore.Razor.Language.Legacy.ParserHelpers : object {
    public static HashSet`1<string> VoidElements;
    public static Dictionary`2<string, string> NamedHtmlEntities;
    public static Dictionary`2<int, string> HtmlEntityCodePoints;
    private static ParserHelpers();
    public static bool IsNewLine(char value);
    public static bool IsNewLine(string value);
    public static bool IsIdentifier(string value);
    public static bool IsIdentifier(string value, bool requireIdentifierStart);
    public static bool IsIdentifierStart(char value);
    public static bool IsIdentifierPart(char value);
    public static bool IsWhitespace(char value);
    public static bool IsLetter(char value);
    public static bool IsDecimalDigit(char value);
}
internal enum Microsoft.AspNetCore.Razor.Language.Legacy.ParserState : Enum {
    public int value__;
    public static ParserState CData;
    public static ParserState CodeTransition;
    public static ParserState DoubleTransition;
    public static ParserState EOF;
    public static ParserState MarkupComment;
    public static ParserState MarkupText;
    public static ParserState Misc;
    public static ParserState RazorComment;
    public static ParserState SpecialTag;
    public static ParserState Tag;
    public static ParserState Unknown;
    public static ParserState XmlPI;
}
[FlagsAttribute]
internal enum Microsoft.AspNetCore.Razor.Language.Legacy.PartialParseResultInternal : Enum {
    public int value__;
    public static PartialParseResultInternal Rejected;
    public static PartialParseResultInternal Accepted;
    public static PartialParseResultInternal Provisional;
    public static PartialParseResultInternal SpanContextChanged;
    public static PartialParseResultInternal AutoCompleteBlock;
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.RazorParser : object {
    [CompilerGeneratedAttribute]
private RazorParserOptions <Options>k__BackingField;
    public RazorParserOptions Options { get; }
    public RazorParser(RazorParserOptions options);
    [CompilerGeneratedAttribute]
public RazorParserOptions get_Options();
    public virtual RazorSyntaxTree Parse(RazorSourceDocument source);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Razor.Language.Legacy.RazorSyntaxTreeExtensions : object {
    [ExtensionAttribute]
public static IReadOnlyList`1<ClassifiedSpanInternal> GetClassifiedSpans(RazorSyntaxTree syntaxTree);
    [ExtensionAttribute]
public static IReadOnlyList`1<TagHelperSpanInternal> GetTagHelperSpans(RazorSyntaxTree syntaxTree);
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.RemoveTagHelperChunkGenerator : SpanChunkGenerator {
    [CompilerGeneratedAttribute]
private string <LookupText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DirectiveText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypePattern>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RazorDiagnostic> <Diagnostics>k__BackingField;
    public string LookupText { get; }
    public string DirectiveText { get; public set; }
    public string TypePattern { get; public set; }
    public string AssemblyName { get; public set; }
    public List`1<RazorDiagnostic> Diagnostics { get; }
    public RemoveTagHelperChunkGenerator(string lookupText, string directiveText, string typePattern, string assemblyName, List`1<RazorDiagnostic> diagnostics);
    [CompilerGeneratedAttribute]
public string get_LookupText();
    [CompilerGeneratedAttribute]
public string get_DirectiveText();
    [CompilerGeneratedAttribute]
public void set_DirectiveText(string value);
    [CompilerGeneratedAttribute]
public string get_TypePattern();
    [CompilerGeneratedAttribute]
public void set_TypePattern(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public List`1<RazorDiagnostic> get_Diagnostics();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.SeekableTextReader : TextReader {
    private RazorSourceDocument _sourceDocument;
    private string _filePath;
    private int _position;
    private int _current;
    private SourceLocation _location;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2<TextSpan, int> _cachedLineInfo;
    public SourceLocation Location { get; }
    public int Length { get; }
    public int Position { get; public set; }
    public SeekableTextReader(string source, string filePath);
    public SeekableTextReader(RazorSourceDocument source);
    public sealed virtual SourceLocation get_Location();
    public sealed virtual int get_Length();
    public sealed virtual int get_Position();
    public sealed virtual void set_Position(int value);
    public virtual int Read();
    public virtual int Peek();
    private void UpdateState();
}
internal static class Microsoft.AspNetCore.Razor.Language.Legacy.SourceLocationTracker : object {
    public static SourceLocation Advance(SourceLocation location, string text);
    public static SourceLocation Advance(SourceLocation location, StringSegment text);
    internal static void UpdateCharacterCore(char characterRead, char nextCharacter, Int32& absoluteIndex, Int32& lineIndex, Int32& characterIndex);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Legacy.SpanChunkGenerator : object {
    private static int TypeHashCode;
    public static ISpanChunkGenerator Null;
    private static SpanChunkGenerator();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.SpanContext : object {
    [CompilerGeneratedAttribute]
private ISpanChunkGenerator <ChunkGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private SpanEditHandler <EditHandler>k__BackingField;
    public ISpanChunkGenerator ChunkGenerator { get; }
    public SpanEditHandler EditHandler { get; }
    public SpanContext(ISpanChunkGenerator chunkGenerator, SpanEditHandler editHandler);
    [CompilerGeneratedAttribute]
public ISpanChunkGenerator get_ChunkGenerator();
    [CompilerGeneratedAttribute]
public SpanEditHandler get_EditHandler();
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.SpanContextBuilder : object {
    [CompilerGeneratedAttribute]
private ISpanChunkGenerator <ChunkGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private SpanEditHandler <EditHandler>k__BackingField;
    public ISpanChunkGenerator ChunkGenerator { get; public set; }
    public SpanEditHandler EditHandler { get; public set; }
    public SpanContextBuilder(SpanContext context);
    [CompilerGeneratedAttribute]
public ISpanChunkGenerator get_ChunkGenerator();
    [CompilerGeneratedAttribute]
public void set_ChunkGenerator(ISpanChunkGenerator value);
    [CompilerGeneratedAttribute]
public SpanEditHandler get_EditHandler();
    [CompilerGeneratedAttribute]
public void set_EditHandler(SpanEditHandler value);
    public SpanContext Build();
    public void Reset();
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.SpanEditHandler : object {
    private static int TypeHashCode;
    [CompilerGeneratedAttribute]
private AcceptedCharactersInternal <AcceptedCharacters>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, IEnumerable`1<SyntaxToken>> <Tokenizer>k__BackingField;
    public AcceptedCharactersInternal AcceptedCharacters { get; public set; }
    public Func`2<string, IEnumerable`1<SyntaxToken>> Tokenizer { get; public set; }
    public SpanEditHandler(Func`2<string, IEnumerable`1<SyntaxToken>> tokenizer);
    public SpanEditHandler(Func`2<string, IEnumerable`1<SyntaxToken>> tokenizer, AcceptedCharactersInternal accepted);
    private static SpanEditHandler();
    [CompilerGeneratedAttribute]
public AcceptedCharactersInternal get_AcceptedCharacters();
    [CompilerGeneratedAttribute]
public void set_AcceptedCharacters(AcceptedCharactersInternal value);
    [CompilerGeneratedAttribute]
public Func`2<string, IEnumerable`1<SyntaxToken>> get_Tokenizer();
    [CompilerGeneratedAttribute]
public void set_Tokenizer(Func`2<string, IEnumerable`1<SyntaxToken>> value);
    public static SpanEditHandler CreateDefault();
    public static SpanEditHandler CreateDefault(Func`2<string, IEnumerable`1<SyntaxToken>> tokenizer);
    public virtual EditResult ApplyChange(SyntaxNode target, SourceChange change);
    public virtual EditResult ApplyChange(SyntaxNode target, SourceChange change, bool force);
    public virtual bool OwnsChange(SyntaxNode target, SourceChange change);
    protected virtual PartialParseResultInternal CanAcceptChange(SyntaxNode target, SourceChange change);
    protected virtual SyntaxNode UpdateSpan(SyntaxNode target, SourceChange change);
    protected internal static bool IsAtEndOfFirstLine(SyntaxNode target, SourceChange change);
    protected internal static bool IsEndDeletion(SyntaxNode target, SourceChange change);
    protected internal static bool IsEndReplace(SyntaxNode target, SourceChange change);
    protected internal static bool IsAtEndOfSpan(SyntaxNode target, SourceChange change);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal enum Microsoft.AspNetCore.Razor.Language.Legacy.SpanKindInternal : Enum {
    public int value__;
    public static SpanKindInternal Transition;
    public static SpanKindInternal MetaCode;
    public static SpanKindInternal Comment;
    public static SpanKindInternal Code;
    public static SpanKindInternal Markup;
    public static SpanKindInternal None;
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.StatementChunkGenerator : SpanChunkGenerator {
    public virtual string ToString();
}
internal static class Microsoft.AspNetCore.Razor.Language.Legacy.SyntaxConstants : object {
    public static string TextTagName;
    public static char TransitionCharacter;
    public static string TransitionString;
    public static string StartCommentSequence;
    public static string EndCommentSequence;
    public static string SpanContextKind;
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.TagHelperAttributeNode : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SyntaxNode <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeStructure <AttributeStructure>k__BackingField;
    public string Name { get; }
    public SyntaxNode Value { get; }
    public AttributeStructure AttributeStructure { get; }
    public TagHelperAttributeNode(string name, SyntaxNode value, AttributeStructure attributeStructure);
    internal TagHelperAttributeNode(string name, SyntaxNode value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public SyntaxNode get_Value();
    [CompilerGeneratedAttribute]
public AttributeStructure get_AttributeStructure();
}
internal static class Microsoft.AspNetCore.Razor.Language.Legacy.TagHelperBlockRewriter : object {
    public static TagMode GetTagMode(MarkupStartTagSyntax startTag, MarkupEndTagSyntax endTag, TagHelperBinding bindingResult);
    public static MarkupTagHelperStartTagSyntax Rewrite(string tagName, RazorParserFeatureFlags featureFlags, MarkupStartTagSyntax startTag, TagHelperBinding bindingResult, ErrorSink errorSink, RazorSourceDocument source);
    private static TryParseResult TryParseMinimizedAttribute(string tagName, MarkupMinimizedAttributeBlockSyntax attributeBlock, IEnumerable`1<TagHelperDescriptor> descriptors, ErrorSink errorSink, HashSet`1<string> processedBoundAttributeNames);
    private static TryParseResult TryParseAttribute(string tagName, MarkupAttributeBlockSyntax attributeBlock, IEnumerable`1<TagHelperDescriptor> descriptors, ErrorSink errorSink, HashSet`1<string> processedBoundAttributeNames);
    private static MarkupTagHelperDirectiveAttributeSyntax RewriteToDirectiveAttribute(MarkupAttributeBlockSyntax attributeBlock, TryParseResult result, MarkupTagHelperAttributeValueSyntax rewrittenValue);
    private static MarkupMinimizedTagHelperDirectiveAttributeSyntax RewriteToMinimizedDirectiveAttribute(MarkupMinimizedAttributeBlockSyntax attributeBlock, TryParseResult result);
    private static MarkupTagHelperAttributeValueSyntax RewriteAttributeValue(TryParseResult result, RazorBlockSyntax attributeValue);
    private static string GetPropertyType(string name, IEnumerable`1<TagHelperDescriptor> descriptors);
    private static TryParseResult CreateTryParseResult(string name, IEnumerable`1<TagHelperDescriptor> descriptors, HashSet`1<string> processedBoundAttributeNames);
    private static string GetAttributeValueContent(RazorSyntaxNode attributeBlock);
}
internal enum Microsoft.AspNetCore.Razor.Language.Legacy.TagHelperDirectiveType : Enum {
    public int value__;
    public static TagHelperDirectiveType AddTagHelper;
    public static TagHelperDirectiveType RemoveTagHelper;
    public static TagHelperDirectiveType TagHelperPrefix;
}
internal static class Microsoft.AspNetCore.Razor.Language.Legacy.TagHelperParseTreeRewriter : object {
    public static RazorSyntaxTree Rewrite(RazorSyntaxTree syntaxTree, string tagHelperPrefix, IEnumerable`1<TagHelperDescriptor> descriptors);
    private static IReadOnlyList`1<RazorDiagnostic> CombineErrors(IReadOnlyList`1<RazorDiagnostic> errors1, IReadOnlyList`1<RazorDiagnostic> errors2);
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.TagHelperPrefixDirectiveChunkGenerator : SpanChunkGenerator {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DirectiveText>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RazorDiagnostic> <Diagnostics>k__BackingField;
    public string Prefix { get; }
    public string DirectiveText { get; }
    public List`1<RazorDiagnostic> Diagnostics { get; }
    public TagHelperPrefixDirectiveChunkGenerator(string prefix, string directiveText, List`1<RazorDiagnostic> diagnostics);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public string get_DirectiveText();
    [CompilerGeneratedAttribute]
public List`1<RazorDiagnostic> get_Diagnostics();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.TagHelperSpanInternal : ValueType {
    [CompilerGeneratedAttribute]
private TagHelperBinding <Binding>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceSpan <Span>k__BackingField;
    public TagHelperBinding Binding { get; }
    public IEnumerable`1<TagHelperDescriptor> TagHelpers { get; }
    public SourceSpan Span { get; }
    public TagHelperSpanInternal(SourceSpan span, TagHelperBinding binding);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TagHelperBinding get_Binding();
    public IEnumerable`1<TagHelperDescriptor> get_TagHelpers();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public SourceSpan get_Span();
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Razor.Language.Legacy.TextReaderExtensions : object {
    [ExtensionAttribute]
public static string ReadUntil(TextReader reader, char terminator);
    [ExtensionAttribute]
public static string ReadUntil(TextReader reader, char terminator, bool inclusive);
    [ExtensionAttribute]
public static string ReadUntil(TextReader reader, Char[] terminators);
    [ExtensionAttribute]
public static string ReadUntil(TextReader reader, bool inclusive, Char[] terminators);
    [ExtensionAttribute]
public static string ReadUntil(TextReader reader, Predicate`1<char> condition);
    [ExtensionAttribute]
public static string ReadUntil(TextReader reader, Predicate`1<char> condition, bool inclusive);
    [ExtensionAttribute]
public static string ReadWhile(TextReader reader, Predicate`1<char> condition);
    [ExtensionAttribute]
public static string ReadWhile(TextReader reader, Predicate`1<char> condition, bool inclusive);
    [ExtensionAttribute]
public static string ReadWhiteSpace(TextReader reader);
    [ExtensionAttribute]
public static string ReadUntilWhiteSpace(TextReader reader);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Legacy.Tokenizer : object {
    [CompilerGeneratedAttribute]
private List`1<RazorDiagnostic> <CurrentErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CurrentState>k__BackingField;
    [CompilerGeneratedAttribute]
private SyntaxToken <CurrenSyntaxToken>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextDocument <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private StringBuilder <Buffer>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLocation <CurrentStart>k__BackingField;
    protected List`1<RazorDiagnostic> CurrentErrors { get; }
    protected int StartState { get; }
    protected Nullable`1<int> CurrentState { get; protected set; }
    protected SyntaxToken CurrenSyntaxToken { get; private set; }
    public ITextDocument Source { get; private set; }
    protected StringBuilder Buffer { get; private set; }
    protected bool EndOfFile { get; }
    public SyntaxKind RazorCommentStarKind { get; }
    public SyntaxKind RazorCommentKind { get; }
    public SyntaxKind RazorCommentTransitionKind { get; }
    protected bool HaveContent { get; }
    protected char CurrentCharacter { get; }
    public SourceLocation CurrentLocation { get; }
    public SourceLocation CurrentStart { get; private set; }
    protected Tokenizer(ITextDocument source);
    [CompilerGeneratedAttribute]
protected List`1<RazorDiagnostic> get_CurrentErrors();
    protected abstract virtual int get_StartState();
    [CompilerGeneratedAttribute]
protected Nullable`1<int> get_CurrentState();
    [CompilerGeneratedAttribute]
protected void set_CurrentState(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
protected SyntaxToken get_CurrenSyntaxToken();
    [CompilerGeneratedAttribute]
private void set_CurrenSyntaxToken(SyntaxToken value);
    [CompilerGeneratedAttribute]
public ITextDocument get_Source();
    [CompilerGeneratedAttribute]
private void set_Source(ITextDocument value);
    [CompilerGeneratedAttribute]
protected StringBuilder get_Buffer();
    [CompilerGeneratedAttribute]
private void set_Buffer(StringBuilder value);
    protected bool get_EndOfFile();
    public abstract virtual SyntaxKind get_RazorCommentStarKind();
    public abstract virtual SyntaxKind get_RazorCommentKind();
    public abstract virtual SyntaxKind get_RazorCommentTransitionKind();
    protected bool get_HaveContent();
    protected char get_CurrentCharacter();
    public SourceLocation get_CurrentLocation();
    [CompilerGeneratedAttribute]
public SourceLocation get_CurrentStart();
    [CompilerGeneratedAttribute]
private void set_CurrentStart(SourceLocation value);
    protected abstract virtual SyntaxToken CreateToken(string content, SyntaxKind type, RazorDiagnostic[] errors);
    protected abstract virtual StateResult Dispatch();
    private sealed virtual override SyntaxToken Microsoft.AspNetCore.Razor.Language.Legacy.ITokenizer.NextToken();
    public virtual SyntaxToken NextToken();
    protected virtual SyntaxToken Turn();
    public void Reset();
    protected StateResult Stop();
    protected StateResult Transition(int state);
    protected StateResult Transition(int state, SyntaxToken result);
    protected StateResult Transition(RazorCommentTokenizerState state);
    protected StateResult Transition(RazorCommentTokenizerState state, SyntaxToken result);
    protected StateResult Stay();
    protected StateResult Stay(SyntaxToken result);
    protected SyntaxToken Single(SyntaxKind type);
    protected void StartToken();
    protected SyntaxToken EndToken(SyntaxKind type);
    protected virtual string GetTokenContent(SyntaxKind type);
    protected bool TakeUntil(Func`2<char, bool> predicate);
    protected void TakeCurrent();
    protected void MoveNext();
    protected bool TakeAll(string expected, bool caseSensitive);
    protected char Peek();
    protected StateResult AfterRazorCommentTransition();
    protected StateResult RazorCommentBody();
    protected StateResult StarAfterRazorCommentBody();
    protected StateResult AtTokenAfterRazorCommentBody();
    internal bool Lookahead(string expected, bool takeIfMatch, bool caseSensitive);
    [ConditionalAttribute("DEBUG")]
internal void AssertCurrent(char current);
    private static LookaheadToken BeginLookahead(ITextBuffer buffer);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Legacy.TokenizerBackedParser`1 : ParserBase {
    private SyntaxListPool _pool;
    private TokenizerView`1<TTokenizer> _tokenizer;
    private Nullable`1<SyntaxListBuilder`1<SyntaxToken>> _tokenBuilder;
    protected static Func`2<SyntaxToken, bool> IsSpacingToken;
    protected static Func`2<SyntaxToken, bool> IsSpacingTokenIncludingNewLines;
    protected static Func`2<SyntaxToken, bool> IsSpacingTokenIncludingComments;
    protected static Func`2<SyntaxToken, bool> IsSpacingTokenIncludingNewLinesAndComments;
    [CompilerGeneratedAttribute]
private SpanContextBuilder <SpanContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<SpanContextBuilder> <SpanContextConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private SyntaxToken <PreviousToken>k__BackingField;
    [CompilerGeneratedAttribute]
private LanguageCharacteristics`1<TTokenizer> <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, IEnumerable`1<SyntaxToken>> <LanguageTokenizeString>k__BackingField;
    protected SyntaxListPool Pool { get; }
    protected SyntaxListBuilder`1<SyntaxToken> TokenBuilder { get; }
    protected SpanContextBuilder SpanContext { get; private set; }
    protected Action`1<SpanContextBuilder> SpanContextConfig { get; protected set; }
    protected SyntaxToken CurrentToken { get; }
    protected SyntaxToken PreviousToken { get; private set; }
    protected SourceLocation CurrentStart { get; }
    protected bool EndOfFile { get; }
    protected LanguageCharacteristics`1<TTokenizer> Language { get; }
    protected Func`2<string, IEnumerable`1<SyntaxToken>> LanguageTokenizeString { get; }
    protected TokenizerBackedParser`1(LanguageCharacteristics`1<TTokenizer> language, ParserContext context);
    private static TokenizerBackedParser`1();
    protected SyntaxListPool get_Pool();
    protected SyntaxListBuilder`1<SyntaxToken> get_TokenBuilder();
    [CompilerGeneratedAttribute]
protected SpanContextBuilder get_SpanContext();
    [CompilerGeneratedAttribute]
private void set_SpanContext(SpanContextBuilder value);
    [CompilerGeneratedAttribute]
protected Action`1<SpanContextBuilder> get_SpanContextConfig();
    [CompilerGeneratedAttribute]
protected void set_SpanContextConfig(Action`1<SpanContextBuilder> value);
    protected SyntaxToken get_CurrentToken();
    [CompilerGeneratedAttribute]
protected SyntaxToken get_PreviousToken();
    [CompilerGeneratedAttribute]
private void set_PreviousToken(SyntaxToken value);
    protected SourceLocation get_CurrentStart();
    protected bool get_EndOfFile();
    [CompilerGeneratedAttribute]
protected LanguageCharacteristics`1<TTokenizer> get_Language();
    [CompilerGeneratedAttribute]
protected Func`2<string, IEnumerable`1<SyntaxToken>> get_LanguageTokenizeString();
    protected SyntaxToken Lookahead(int count);
    protected bool LookaheadUntil(Func`3<SyntaxToken, IEnumerable`1<SyntaxToken>, bool> condition);
    protected internal bool NextToken();
    [ConditionalAttribute("DEBUG")]
internal void Assert(SyntaxKind expectedType);
    protected internal void PutBack(SyntaxToken token);
    protected internal void PutBack(IEnumerable`1<SyntaxToken> tokens);
    protected internal void PutBack(IReadOnlyList`1<SyntaxToken> tokens);
    protected internal void PutCurrentBack();
    protected internal bool NextIs(SyntaxKind type);
    protected internal bool NextIs(SyntaxKind[] types);
    protected internal bool NextIs(Func`2<SyntaxToken, bool> condition);
    protected internal bool Was(SyntaxKind type);
    protected internal bool At(SyntaxKind type);
    protected bool TokenExistsAfterWhitespace(SyntaxKind kind, bool includeNewLines);
    protected bool EnsureCurrent();
    protected internal IReadOnlyList`1<SyntaxToken> ReadWhile(Func`2<SyntaxToken, bool> condition);
    protected internal IReadOnlyList`1<SyntaxToken> ReadWhile(Func`3<SyntaxToken, TArg, bool> condition, TArg arg);
    protected bool AtIdentifier(bool allowKeywords);
    protected RazorCommentBlockSyntax ParseRazorComment();
    private void CommentSpanContextConfig(SpanContextBuilder spanContext);
    protected SyntaxToken EatCurrentToken();
    protected SyntaxToken EatExpectedToken(SyntaxKind[] kinds);
    protected SyntaxToken GetOptionalToken(SyntaxKind kind);
    protected internal void AcceptWhile(SyntaxKind type);
    protected internal void AcceptWhile(SyntaxKind type1, SyntaxKind type2);
    protected internal void AcceptWhile(SyntaxKind type1, SyntaxKind type2, SyntaxKind type3);
    protected internal void AcceptWhile(SyntaxKind[] types);
    protected internal void AcceptUntil(SyntaxKind type);
    protected internal void AcceptUntil(SyntaxKind type1, SyntaxKind type2);
    protected internal void AcceptUntil(SyntaxKind type1, SyntaxKind type2, SyntaxKind type3);
    protected internal void AcceptUntil(SyntaxKind[] types);
    protected internal void AcceptWhile(Func`2<SyntaxToken, bool> condition);
    protected internal void AcceptWhile(Func`3<SyntaxToken, TArg, bool> condition, TArg arg);
    protected internal void Accept(IReadOnlyList`1<SyntaxToken> tokens);
    protected internal void Accept(SyntaxToken token);
    protected internal bool AcceptAll(SyntaxKind[] kinds);
    protected internal bool AcceptAndMoveNext();
    protected SyntaxList`1<SyntaxToken> Output();
    protected SyntaxToken AcceptWhitespaceInLines();
    protected internal bool TryAccept(SyntaxKind type);
    protected internal void AcceptMarkerTokenIfNecessary();
    protected MarkupTextLiteralSyntax OutputAsMarkupLiteral();
    protected MarkupEphemeralTextLiteralSyntax OutputAsMarkupEphemeralLiteral();
    protected RazorMetaCodeSyntax OutputAsMetaCode(SyntaxList`1<SyntaxToken> tokens, Nullable`1<AcceptedCharactersInternal> accepted);
    protected TNode GetNodeWithSpanContext(TNode node);
    protected IDisposable PushSpanContextConfig();
    protected IDisposable PushSpanContextConfig(Action`1<SpanContextBuilder> newConfig);
    protected IDisposable PushSpanContextConfig(Action`2<SpanContextBuilder, Action`1<SpanContextBuilder>> newConfig);
    protected void ConfigureSpanContext(Action`1<SpanContextBuilder> config);
    protected void ConfigureSpanContext(Action`2<SpanContextBuilder, Action`1<SpanContextBuilder>> config);
    protected void InitializeContext(SpanContextBuilder spanContext);
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.TokenizerView`1 : object {
    [CompilerGeneratedAttribute]
private TTokenizer <Tokenizer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EndOfFile>k__BackingField;
    [CompilerGeneratedAttribute]
private SyntaxToken <Current>k__BackingField;
    public TTokenizer Tokenizer { get; private set; }
    public bool EndOfFile { get; private set; }
    public SyntaxToken Current { get; private set; }
    public ITextDocument Source { get; }
    public TokenizerView`1(TTokenizer tokenizer);
    [CompilerGeneratedAttribute]
public TTokenizer get_Tokenizer();
    [CompilerGeneratedAttribute]
private void set_Tokenizer(TTokenizer value);
    [CompilerGeneratedAttribute]
public bool get_EndOfFile();
    [CompilerGeneratedAttribute]
private void set_EndOfFile(bool value);
    [CompilerGeneratedAttribute]
public SyntaxToken get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(SyntaxToken value);
    public ITextDocument get_Source();
    public bool Next();
    public void PutBack(SyntaxToken token);
}
internal class Microsoft.AspNetCore.Razor.Language.Legacy.WhitespaceRewriter : SyntaxRewriter {
    public virtual SyntaxNode Visit(SyntaxNode node);
    private bool TryRewriteWhitespace(CSharpCodeBlockSyntax codeBlock, CSharpCodeBlockSyntax& rewritten, SyntaxNode& whitespaceLiteral);
}
internal class Microsoft.AspNetCore.Razor.Language.NotFoundProjectItem : RazorProjectItem {
    [CompilerGeneratedAttribute]
private string <BasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileKind>k__BackingField;
    public string BasePath { get; }
    public string FilePath { get; }
    public string FileKind { get; }
    public bool Exists { get; }
    public string PhysicalPath { get; }
    public NotFoundProjectItem(string basePath, string path, string fileKind);
    [CompilerGeneratedAttribute]
public virtual string get_BasePath();
    [CompilerGeneratedAttribute]
public virtual string get_FilePath();
    [CompilerGeneratedAttribute]
public virtual string get_FileKind();
    public virtual bool get_Exists();
    public virtual string get_PhysicalPath();
    public virtual Stream Read();
}
[AttributeUsageAttribute("1")]
public class Microsoft.AspNetCore.Razor.Language.ProvideRazorExtensionInitializerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ExtensionName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <InitializerType>k__BackingField;
    public string ExtensionName { get; }
    public Type InitializerType { get; }
    public ProvideRazorExtensionInitializerAttribute(string extensionName, Type initializerType);
    [CompilerGeneratedAttribute]
public string get_ExtensionName();
    [CompilerGeneratedAttribute]
public Type get_InitializerType();
}
public abstract class Microsoft.AspNetCore.Razor.Language.RazorCodeDocument : object {
    public IReadOnlyList`1<RazorSourceDocument> Imports { get; }
    public ItemCollection Items { get; }
    public RazorSourceDocument Source { get; }
    public static RazorCodeDocument Create(RazorSourceDocument source);
    public static RazorCodeDocument Create(RazorSourceDocument source, IEnumerable`1<RazorSourceDocument> imports);
    public static RazorCodeDocument Create(RazorSourceDocument source, IEnumerable`1<RazorSourceDocument> imports, RazorParserOptions parserOptions, RazorCodeGenerationOptions codeGenerationOptions);
    public abstract virtual IReadOnlyList`1<RazorSourceDocument> get_Imports();
    public abstract virtual ItemCollection get_Items();
    public abstract virtual RazorSourceDocument get_Source();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions : object {
    private static Char[] PathSeparators;
    private static Char[] NamespaceSeparators;
    private static object CssScopeKey;
    private static RazorCodeDocumentExtensions();
    [ExtensionAttribute]
public static TagHelperDocumentContext GetTagHelperContext(RazorCodeDocument document);
    [ExtensionAttribute]
public static void SetTagHelperContext(RazorCodeDocument document, TagHelperDocumentContext context);
    [ExtensionAttribute]
internal static IReadOnlyList`1<TagHelperDescriptor> GetTagHelpers(RazorCodeDocument document);
    [ExtensionAttribute]
internal static void SetTagHelpers(RazorCodeDocument document, IReadOnlyList`1<TagHelperDescriptor> tagHelpers);
    [ExtensionAttribute]
public static RazorSyntaxTree GetSyntaxTree(RazorCodeDocument document);
    [ExtensionAttribute]
public static void SetSyntaxTree(RazorCodeDocument document, RazorSyntaxTree syntaxTree);
    [ExtensionAttribute]
public static IReadOnlyList`1<RazorSyntaxTree> GetImportSyntaxTrees(RazorCodeDocument document);
    [ExtensionAttribute]
public static void SetImportSyntaxTrees(RazorCodeDocument document, IReadOnlyList`1<RazorSyntaxTree> syntaxTrees);
    [ExtensionAttribute]
public static DocumentIntermediateNode GetDocumentIntermediateNode(RazorCodeDocument document);
    [ExtensionAttribute]
public static void SetDocumentIntermediateNode(RazorCodeDocument document, DocumentIntermediateNode documentNode);
    [ExtensionAttribute]
internal static RazorHtmlDocument GetHtmlDocument(RazorCodeDocument document);
    [ExtensionAttribute]
public static RazorCSharpDocument GetCSharpDocument(RazorCodeDocument document);
    [ExtensionAttribute]
public static void SetCSharpDocument(RazorCodeDocument document, RazorCSharpDocument csharp);
    [ExtensionAttribute]
public static RazorParserOptions GetParserOptions(RazorCodeDocument document);
    [ExtensionAttribute]
public static void SetParserOptions(RazorCodeDocument document, RazorParserOptions parserOptions);
    [ExtensionAttribute]
public static RazorCodeGenerationOptions GetCodeGenerationOptions(RazorCodeDocument document);
    [ExtensionAttribute]
public static void SetCodeGenerationOptions(RazorCodeDocument document, RazorCodeGenerationOptions codeGenerationOptions);
    [ExtensionAttribute]
public static string GetFileKind(RazorCodeDocument document);
    [ExtensionAttribute]
public static void SetFileKind(RazorCodeDocument document, string fileKind);
    [ExtensionAttribute]
public static string GetCssScope(RazorCodeDocument document);
    [ExtensionAttribute]
public static void SetCssScope(RazorCodeDocument document, string cssScope);
    [ExtensionAttribute]
public static bool TryComputeNamespace(RazorCodeDocument document, bool fallbackToRootNamespace, String& namespace);
    [CompilerGeneratedAttribute]
internal static StringSegment <TryComputeNamespace>g__NormalizeDirectory|24_0(string path);
}
public abstract class Microsoft.AspNetCore.Razor.Language.RazorCodeGenerationOptions : object {
    [CompilerGeneratedAttribute]
private string <RootNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressMetadataAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressMetadataSourceChecksumAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressPrimaryMethodBody>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressNullabilityEnforcement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OmitMinimizedComponentAttributeValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportLocalizedComponentNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseEnhancedLinePragma>k__BackingField;
    public bool DesignTime { get; }
    public bool IndentWithTabs { get; }
    public int IndentSize { get; }
    public string RootNamespace { get; }
    public bool SuppressChecksum { get; }
    public bool SuppressMetadataAttributes { get; protected set; }
    internal bool SuppressMetadataSourceChecksumAttributes { get; internal set; }
    public bool SuppressPrimaryMethodBody { get; protected set; }
    public bool SuppressNullabilityEnforcement { get; }
    public bool OmitMinimizedComponentAttributeValues { get; }
    public bool SupportLocalizedComponentNames { get; public set; }
    public bool UseEnhancedLinePragma { get; }
    public static RazorCodeGenerationOptions CreateDefault();
    public static RazorCodeGenerationOptions CreateDesignTimeDefault();
    public static RazorCodeGenerationOptions Create(Action`1<RazorCodeGenerationOptionsBuilder> configure);
    public static RazorCodeGenerationOptions CreateDesignTime(Action`1<RazorCodeGenerationOptionsBuilder> configure);
    public abstract virtual bool get_DesignTime();
    public abstract virtual bool get_IndentWithTabs();
    public abstract virtual int get_IndentSize();
    [CompilerGeneratedAttribute]
public virtual string get_RootNamespace();
    public abstract virtual bool get_SuppressChecksum();
    [CompilerGeneratedAttribute]
public virtual bool get_SuppressMetadataAttributes();
    [CompilerGeneratedAttribute]
protected virtual void set_SuppressMetadataAttributes(bool value);
    [CompilerGeneratedAttribute]
internal bool get_SuppressMetadataSourceChecksumAttributes();
    [CompilerGeneratedAttribute]
internal void set_SuppressMetadataSourceChecksumAttributes(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_SuppressPrimaryMethodBody();
    [CompilerGeneratedAttribute]
protected virtual void set_SuppressPrimaryMethodBody(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_SuppressNullabilityEnforcement();
    [CompilerGeneratedAttribute]
public virtual bool get_OmitMinimizedComponentAttributeValues();
    [CompilerGeneratedAttribute]
public virtual bool get_SupportLocalizedComponentNames();
    [CompilerGeneratedAttribute]
public virtual void set_SupportLocalizedComponentNames(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UseEnhancedLinePragma();
}
public abstract class Microsoft.AspNetCore.Razor.Language.RazorCodeGenerationOptionsBuilder : object {
    [CompilerGeneratedAttribute]
private string <RootNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressMetadataAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressMetadataSourceChecksumAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressPrimaryMethodBody>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressNullabilityEnforcement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OmitMinimizedComponentAttributeValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportLocalizedComponentNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseEnhancedLinePragma>k__BackingField;
    public RazorConfiguration Configuration { get; }
    public bool DesignTime { get; }
    public string FileKind { get; }
    public int IndentSize { get; public set; }
    public bool IndentWithTabs { get; public set; }
    public string RootNamespace { get; public set; }
    public bool SuppressChecksum { get; public set; }
    public bool SuppressMetadataAttributes { get; public set; }
    internal bool SuppressMetadataSourceChecksumAttributes { get; internal set; }
    public bool SuppressPrimaryMethodBody { get; public set; }
    public bool SuppressNullabilityEnforcement { get; public set; }
    public bool OmitMinimizedComponentAttributeValues { get; public set; }
    public bool SupportLocalizedComponentNames { get; public set; }
    public bool UseEnhancedLinePragma { get; public set; }
    public virtual RazorConfiguration get_Configuration();
    public abstract virtual bool get_DesignTime();
    public virtual string get_FileKind();
    public abstract virtual int get_IndentSize();
    public abstract virtual void set_IndentSize(int value);
    public abstract virtual bool get_IndentWithTabs();
    public abstract virtual void set_IndentWithTabs(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_RootNamespace();
    [CompilerGeneratedAttribute]
public virtual void set_RootNamespace(string value);
    public abstract virtual bool get_SuppressChecksum();
    public abstract virtual void set_SuppressChecksum(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_SuppressMetadataAttributes();
    [CompilerGeneratedAttribute]
public virtual void set_SuppressMetadataAttributes(bool value);
    [CompilerGeneratedAttribute]
internal bool get_SuppressMetadataSourceChecksumAttributes();
    [CompilerGeneratedAttribute]
internal void set_SuppressMetadataSourceChecksumAttributes(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_SuppressPrimaryMethodBody();
    [CompilerGeneratedAttribute]
public virtual void set_SuppressPrimaryMethodBody(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_SuppressNullabilityEnforcement();
    [CompilerGeneratedAttribute]
public virtual void set_SuppressNullabilityEnforcement(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_OmitMinimizedComponentAttributeValues();
    [CompilerGeneratedAttribute]
public virtual void set_OmitMinimizedComponentAttributeValues(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_SupportLocalizedComponentNames();
    [CompilerGeneratedAttribute]
public virtual void set_SupportLocalizedComponentNames(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UseEnhancedLinePragma();
    [CompilerGeneratedAttribute]
public virtual void set_UseEnhancedLinePragma(bool value);
    public abstract virtual RazorCodeGenerationOptions Build();
    public virtual void SetDesignTime(bool designTime);
}
public abstract class Microsoft.AspNetCore.Razor.Language.RazorConfiguration : object {
    public static RazorConfiguration Default;
    public string ConfigurationName { get; }
    public IReadOnlyList`1<RazorExtension> Extensions { get; }
    public RazorLanguageVersion LanguageVersion { get; }
    public bool UseConsolidatedMvcViews { get; }
    private static RazorConfiguration();
    public static RazorConfiguration Create(RazorLanguageVersion languageVersion, string configurationName, IEnumerable`1<RazorExtension> extensions, bool useConsolidatedMvcViews);
    public abstract virtual string get_ConfigurationName();
    public abstract virtual IReadOnlyList`1<RazorExtension> get_Extensions();
    public abstract virtual RazorLanguageVersion get_LanguageVersion();
    public abstract virtual bool get_UseConsolidatedMvcViews();
    public virtual bool Equals(object obj);
    public virtual bool Equals(RazorConfiguration other);
    public virtual int GetHashCode();
}
public abstract class Microsoft.AspNetCore.Razor.Language.RazorCSharpDocument : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<LinePragma> <LinePragmas>k__BackingField;
    public string GeneratedCode { get; }
    public IReadOnlyList`1<SourceMapping> SourceMappings { get; }
    public IReadOnlyList`1<RazorDiagnostic> Diagnostics { get; }
    public RazorCodeGenerationOptions Options { get; }
    internal IReadOnlyList`1<LinePragma> LinePragmas { get; }
    public abstract virtual string get_GeneratedCode();
    public abstract virtual IReadOnlyList`1<SourceMapping> get_SourceMappings();
    public abstract virtual IReadOnlyList`1<RazorDiagnostic> get_Diagnostics();
    public abstract virtual RazorCodeGenerationOptions get_Options();
    [CompilerGeneratedAttribute]
internal virtual IReadOnlyList`1<LinePragma> get_LinePragmas();
    public static RazorCSharpDocument Create(string generatedCode, RazorCodeGenerationOptions options, IEnumerable`1<RazorDiagnostic> diagnostics);
    public static RazorCSharpDocument Create(string generatedCode, RazorCodeGenerationOptions options, IEnumerable`1<RazorDiagnostic> diagnostics, IEnumerable`1<SourceMapping> sourceMappings, IEnumerable`1<LinePragma> linePragmas);
}
public abstract class Microsoft.AspNetCore.Razor.Language.RazorDiagnostic : object {
    internal static RazorDiagnostic[] EmptyArray;
    internal static Object[] EmptyArgs;
    public string Id { get; }
    public RazorDiagnosticSeverity Severity { get; }
    public SourceSpan Span { get; }
    private static RazorDiagnostic();
    public abstract virtual string get_Id();
    public abstract virtual RazorDiagnosticSeverity get_Severity();
    public abstract virtual SourceSpan get_Span();
    public abstract virtual string GetMessage(IFormatProvider formatProvider);
    public string GetMessage();
    public abstract virtual bool Equals(RazorDiagnostic other);
    public abstract virtual int GetHashCode();
    public static RazorDiagnostic Create(RazorDiagnosticDescriptor descriptor, SourceSpan span);
    public static RazorDiagnostic Create(RazorDiagnosticDescriptor descriptor, SourceSpan span, Object[] args);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    private sealed virtual override string System.IFormattable.ToString(string ignore, IFormatProvider formatProvider);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Razor.Language.RazorDiagnosticCollection : object {
    private List`1<RazorDiagnostic> _inner;
    public RazorDiagnostic Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public sealed virtual RazorDiagnostic get_Item(int index);
    public sealed virtual void set_Item(int index, RazorDiagnostic value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(RazorDiagnostic item);
    public void AddRange(RazorDiagnosticCollection items);
    public void AddRange(IEnumerable`1<RazorDiagnostic> items);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(RazorDiagnostic item);
    public sealed virtual void CopyTo(RazorDiagnostic[] array, int arrayIndex);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<RazorDiagnostic> System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Language.RazorDiagnostic>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int IndexOf(RazorDiagnostic item);
    public sealed virtual void Insert(int index, RazorDiagnostic item);
    public sealed virtual bool Remove(RazorDiagnostic item);
    public sealed virtual void RemoveAt(int index);
}
[DebuggerDisplayAttribute("{DebuggerToString(),nq}")]
public class Microsoft.AspNetCore.Razor.Language.RazorDiagnosticDescriptor : object {
    private Func`1<string> _messageFormat;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorDiagnosticSeverity <Severity>k__BackingField;
    public string Id { get; }
    public RazorDiagnosticSeverity Severity { get; }
    public RazorDiagnosticDescriptor(string id, Func`1<string> messageFormat, RazorDiagnosticSeverity severity);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public RazorDiagnosticSeverity get_Severity();
    public string GetMessageFormat();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RazorDiagnosticDescriptor other);
    public virtual int GetHashCode();
    private string DebuggerToString();
}
internal static class Microsoft.AspNetCore.Razor.Language.RazorDiagnosticFactory : object {
    private static string DiagnosticPrefix;
    internal static RazorDiagnosticDescriptor Directive_BlockDirectiveCannotBeImported;
    internal static RazorDiagnosticDescriptor Parsing_UnterminatedStringLiteral;
    internal static RazorDiagnosticDescriptor Parsing_BlockCommentNotTerminated;
    internal static RazorDiagnosticDescriptor Parsing_HelperDirectiveNotAvailable;
    internal static RazorDiagnosticDescriptor Parsing_UnexpectedWhiteSpaceAtStartOfCodeBlock;
    internal static RazorDiagnosticDescriptor Parsing_UnexpectedEndOfFileAtStartOfCodeBlock;
    internal static RazorDiagnosticDescriptor Parsing_UnexpectedCharacterAtStartOfCodeBlock;
    internal static RazorDiagnosticDescriptor Parsing_ExpectedEndOfBlockBeforeEOF;
    internal static RazorDiagnosticDescriptor Parsing_ReservedWord;
    internal static RazorDiagnosticDescriptor Parsing_SingleLineControlFlowStatementsNotAllowed;
    internal static RazorDiagnosticDescriptor Parsing_AtInCodeMustBeFollowedByColonParenOrIdentifierStart;
    internal static RazorDiagnosticDescriptor Parsing_UnexpectedNestedCodeBlock;
    internal static RazorDiagnosticDescriptor Parsing_DirectiveTokensMustBeSeparatedByWhitespace;
    internal static RazorDiagnosticDescriptor Parsing_UnexpectedEOFAfterDirective;
    internal static RazorDiagnosticDescriptor Parsing_DirectiveExpectsTypeName;
    internal static RazorDiagnosticDescriptor Parsing_DirectiveExpectsNamespace;
    internal static RazorDiagnosticDescriptor Parsing_DirectiveExpectsIdentifier;
    internal static RazorDiagnosticDescriptor Parsing_DirectiveExpectsQuotedStringLiteral;
    internal static RazorDiagnosticDescriptor Parsing_UnexpectedDirectiveLiteral;
    internal static RazorDiagnosticDescriptor Parsing_DirectiveMustHaveValue;
    internal static RazorDiagnosticDescriptor Parsing_IncompleteQuotesAroundDirective;
    internal static RazorDiagnosticDescriptor Parsing_InvalidTagHelperPrefixValue;
    internal static RazorDiagnosticDescriptor Parsing_MarkupBlockMustStartWithTag;
    internal static RazorDiagnosticDescriptor Parsing_OuterTagMissingName;
    internal static RazorDiagnosticDescriptor Parsing_TextTagCannotContainAttributes;
    internal static RazorDiagnosticDescriptor Parsing_UnfinishedTag;
    internal static RazorDiagnosticDescriptor Parsing_MissingEndTag;
    internal static RazorDiagnosticDescriptor Parsing_UnexpectedEndTag;
    internal static RazorDiagnosticDescriptor Parsing_ExpectedCloseBracketBeforeEOF;
    internal static RazorDiagnosticDescriptor Parsing_RazorCommentNotTerminated;
    internal static RazorDiagnosticDescriptor Parsing_TagHelperIndexerAttributeNameMustIncludeKey;
    internal static RazorDiagnosticDescriptor Parsing_TagHelperAttributeListMustBeWellFormed;
    internal static RazorDiagnosticDescriptor Parsing_TagHelpersCannotHaveCSharpInTagDeclaration;
    internal static RazorDiagnosticDescriptor Parsing_TagHelperAttributesMustHaveAName;
    internal static RazorDiagnosticDescriptor Parsing_TagHelperMustNotHaveAnEndTag;
    internal static RazorDiagnosticDescriptor Parsing_TagHelperFoundMalformedTagHelper;
    internal static RazorDiagnosticDescriptor Parsing_TagHelperMissingCloseAngle;
    internal static RazorDiagnosticDescriptor Parsing_InvalidTagHelperLookupText;
    internal static RazorDiagnosticDescriptor Parsing_DirectiveExpectsCSharpAttribute;
    internal static RazorDiagnosticDescriptor Parsing_DirectiveExpectsBooleanLiteral;
    internal static RazorDiagnosticDescriptor Parsing_GenericTypeParameterIdentifierMismatch;
    internal static RazorDiagnosticDescriptor Parsing_UnexpectedIdentifier;
    internal static RazorDiagnosticDescriptor CodeTarget_UnsupportedExtension;
    internal static RazorDiagnosticDescriptor Parsing_DuplicateDirective;
    internal static RazorDiagnosticDescriptor Parsing_SectionsCannotBeNested;
    internal static RazorDiagnosticDescriptor Parsing_InlineMarkupBlocksCannotBeNested;
    internal static RazorDiagnosticDescriptor Parsing_NamespaceImportAndTypeAliasCannotExistWithinCodeBlock;
    internal static RazorDiagnosticDescriptor Parsing_DirectiveMustAppearAtStartOfLine;
    internal static RazorDiagnosticDescriptor TagHelper_CodeBlocksNotSupportedInAttributes;
    internal static RazorDiagnosticDescriptor TagHelper_InlineMarkupBlocksNotSupportedInAttributes;
    internal static RazorDiagnosticDescriptor TagHelper_EmptyBoundAttribute;
    internal static RazorDiagnosticDescriptor TagHelper_CannotHaveNonTagContent;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidNestedTag;
    internal static RazorDiagnosticDescriptor TagHelper_InconsistentTagStructure;
    internal static RazorDiagnosticDescriptor Component_EditorRequiredParameterNotSpecified;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidRestrictedChildNullOrWhitespace;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidRestrictedChild;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidBoundAttributeNullOrWhitespace;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidBoundAttributeName;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidBoundAttributeNameStartsWith;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidBoundAttributePrefix;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidBoundAttributePrefixStartsWith;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidTargetedTagNameNullOrWhitespace;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidTargetedTagName;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidTargetedParentTagNameNullOrWhitespace;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidTargetedParentTagName;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidTargetedAttributeNameNullOrWhitespace;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidTargetedAttributeName;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidBoundAttributeParameterNullOrWhitespace;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidBoundAttributeParameterName;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidBoundDirectiveAttributeName;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidBoundDirectiveAttributePrefix;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidRequiredDirectiveAttributeName;
    internal static RazorDiagnosticDescriptor Rewriter_InsufficientStack;
    internal static RazorDiagnosticDescriptor CssRewriting_ImportNotAllowed;
    private static RazorDiagnosticFactory();
    public static RazorDiagnostic CreateDirective_BlockDirectiveCannotBeImported(string directive);
    public static RazorDiagnostic CreateParsing_UnterminatedStringLiteral(SourceSpan location);
    public static RazorDiagnostic CreateParsing_BlockCommentNotTerminated(SourceSpan location);
    public static RazorDiagnostic CreateParsing_HelperDirectiveNotAvailable(SourceSpan location);
    public static RazorDiagnostic CreateParsing_UnexpectedWhiteSpaceAtStartOfCodeBlock(SourceSpan location);
    public static RazorDiagnostic CreateParsing_UnexpectedEndOfFileAtStartOfCodeBlock(SourceSpan location);
    public static RazorDiagnostic CreateParsing_UnexpectedCharacterAtStartOfCodeBlock(SourceSpan location, string content);
    public static RazorDiagnostic CreateParsing_ExpectedEndOfBlockBeforeEOF(SourceSpan location, string blockName, string closeBlock, string openBlock);
    public static RazorDiagnostic CreateParsing_ReservedWord(SourceSpan location, string content);
    public static RazorDiagnostic CreateParsing_SingleLineControlFlowStatementsCannotContainMarkup(SourceSpan location);
    public static RazorDiagnostic CreateParsing_AtInCodeMustBeFollowedByColonParenOrIdentifierStart(SourceSpan location);
    public static RazorDiagnostic CreateParsing_UnexpectedNestedCodeBlock(SourceSpan location);
    public static RazorDiagnostic CreateParsing_DirectiveTokensMustBeSeparatedByWhitespace(SourceSpan location, string directiveName);
    public static RazorDiagnostic CreateParsing_UnexpectedEOFAfterDirective(SourceSpan location, string directiveName, string expectedToken);
    public static RazorDiagnostic CreateParsing_DirectiveExpectsTypeName(SourceSpan location, string directiveName);
    public static RazorDiagnostic CreateParsing_DirectiveExpectsNamespace(SourceSpan location, string directiveName);
    public static RazorDiagnostic CreateParsing_DirectiveExpectsIdentifier(SourceSpan location, string directiveName);
    public static RazorDiagnostic CreateParsing_DirectiveExpectsQuotedStringLiteral(SourceSpan location, string directiveName);
    public static RazorDiagnostic CreateParsing_UnexpectedDirectiveLiteral(SourceSpan location, string directiveName, string expected);
    public static RazorDiagnostic CreateParsing_DirectiveMustHaveValue(SourceSpan location, string directiveName);
    public static RazorDiagnostic CreateParsing_IncompleteQuotesAroundDirective(SourceSpan location, string directiveName);
    public static RazorDiagnostic CreateParsing_InvalidTagHelperPrefixValue(SourceSpan location, string directiveName, char character, string prefix);
    public static RazorDiagnostic CreateParsing_MarkupBlockMustStartWithTag(SourceSpan location);
    public static RazorDiagnostic CreateParsing_OuterTagMissingName(SourceSpan location);
    public static RazorDiagnostic CreateParsing_TextTagCannotContainAttributes(SourceSpan location);
    public static RazorDiagnostic CreateParsing_UnfinishedTag(SourceSpan location, string tagName);
    public static RazorDiagnostic CreateParsing_MissingEndTag(SourceSpan location, string tagName);
    public static RazorDiagnostic CreateParsing_UnexpectedEndTag(SourceSpan location, string tagName);
    public static RazorDiagnostic CreateParsing_ExpectedCloseBracketBeforeEOF(SourceSpan location, string openBrace, string closeBrace);
    public static RazorDiagnostic CreateParsing_RazorCommentNotTerminated(SourceSpan location);
    public static RazorDiagnostic CreateParsing_TagHelperIndexerAttributeNameMustIncludeKey(SourceSpan location, string attributeName, string tagName);
    public static RazorDiagnostic CreateParsing_TagHelperAttributeListMustBeWellFormed(SourceSpan location);
    public static RazorDiagnostic CreateParsing_TagHelpersCannotHaveCSharpInTagDeclaration(SourceSpan location, string tagName);
    public static RazorDiagnostic CreateParsing_TagHelperAttributesMustHaveAName(SourceSpan location, string tagName);
    public static RazorDiagnostic CreateParsing_TagHelperMustNotHaveAnEndTag(SourceSpan location, string tagName, string displayName, TagStructure tagStructure);
    public static RazorDiagnostic CreateParsing_TagHelperFoundMalformedTagHelper(SourceSpan location, string tagName);
    public static RazorDiagnostic CreateParsing_TagHelperMissingCloseAngle(SourceSpan location, string tagName);
    public static RazorDiagnostic CreateParsing_InvalidTagHelperLookupText(SourceSpan location, string lookupText);
    public static RazorDiagnostic CreateParsing_DirectiveExpectsCSharpAttribute(SourceSpan location, string directiveName);
    public static RazorDiagnostic CreateParsing_DirectiveExpectsBooleanLiteral(SourceSpan location, string directiveName);
    public static RazorDiagnostic CreateParsing_GenericTypeParameterIdentifierMismatch(SourceSpan location, string directiveName, string constraintIdentifier, string originalMember);
    public static RazorDiagnostic CreateParsing_UnexpectedIdentifier(SourceSpan location, string content, String[] options);
    public static RazorDiagnostic CreateCodeTarget_UnsupportedExtension(string documentKind, Type extensionType);
    public static RazorDiagnostic CreateParsing_DuplicateDirective(SourceSpan location, string directive);
    public static RazorDiagnostic CreateParsing_SectionsCannotBeNested(SourceSpan location);
    public static RazorDiagnostic CreateParsing_InlineMarkupBlocksCannotBeNested(SourceSpan location);
    public static RazorDiagnostic CreateParsing_NamespaceImportAndTypeAliasCannotExistWithinCodeBlock(SourceSpan location);
    public static RazorDiagnostic CreateParsing_DirectiveMustAppearAtStartOfLine(SourceSpan location, string directiveName);
    public static RazorDiagnostic CreateTagHelper_CodeBlocksNotSupportedInAttributes(SourceSpan location);
    public static RazorDiagnostic CreateTagHelper_InlineMarkupBlocksNotSupportedInAttributes(SourceSpan location, string expectedTypeName);
    public static RazorDiagnostic CreateTagHelper_EmptyBoundAttribute(SourceSpan location, string attributeName, string tagName, string propertyTypeName);
    public static RazorDiagnostic CreateTagHelper_CannotHaveNonTagContent(SourceSpan location, string tagName, string allowedChildren);
    public static RazorDiagnostic CreateTagHelper_InvalidNestedTag(SourceSpan location, string tagName, string parent, string allowedChildren);
    public static RazorDiagnostic CreateTagHelper_InconsistentTagStructure(SourceSpan location, string firstDescriptor, string secondDescriptor, string tagName);
    public static RazorDiagnostic CreateComponent_EditorRequiredParameterNotSpecified(SourceSpan location, string tagName, string parameterName);
    public static RazorDiagnostic CreateTagHelper_InvalidRestrictedChildNullOrWhitespace(string tagHelperDisplayName);
    public static RazorDiagnostic CreateTagHelper_InvalidRestrictedChild(string tagHelperDisplayName, string restrictedChild, char invalidCharacter);
    public static RazorDiagnostic CreateTagHelper_InvalidBoundAttributeNullOrWhitespace(string tagHelperDisplayName, string propertyDisplayName);
    public static RazorDiagnostic CreateTagHelper_InvalidBoundAttributeName(string tagHelperDisplayName, string propertyDisplayName, string invalidName, char invalidCharacter);
    public static RazorDiagnostic CreateTagHelper_InvalidBoundAttributeNameStartsWith(string tagHelperDisplayName, string propertyDisplayName, string invalidName);
    public static RazorDiagnostic CreateTagHelper_InvalidBoundAttributePrefix(string tagHelperDisplayName, string propertyDisplayName, string invalidName, char invalidCharacter);
    public static RazorDiagnostic CreateTagHelper_InvalidBoundAttributePrefixStartsWith(string tagHelperDisplayName, string propertyDisplayName, string invalidName);
    public static RazorDiagnostic CreateTagHelper_InvalidTargetedTagNameNullOrWhitespace();
    public static RazorDiagnostic CreateTagHelper_InvalidTargetedTagName(string invalidTagName, char invalidCharacter);
    public static RazorDiagnostic CreateTagHelper_InvalidTargetedParentTagNameNullOrWhitespace();
    public static RazorDiagnostic CreateTagHelper_InvalidTargetedParentTagName(string invalidTagName, char invalidCharacter);
    public static RazorDiagnostic CreateTagHelper_InvalidTargetedAttributeNameNullOrWhitespace();
    public static RazorDiagnostic CreateTagHelper_InvalidTargetedAttributeName(string invalidAttributeName, char invalidCharacter);
    public static RazorDiagnostic CreateTagHelper_InvalidBoundAttributeParameterNullOrWhitespace(string attributeName);
    public static RazorDiagnostic CreateTagHelper_InvalidBoundAttributeParameterName(string attributeName, string invalidName, char invalidCharacter);
    public static RazorDiagnostic CreateTagHelper_InvalidBoundDirectiveAttributeName(string tagHelperDisplayName, string propertyDisplayName, string invalidName);
    public static RazorDiagnostic CreateTagHelper_InvalidBoundDirectiveAttributePrefix(string tagHelperDisplayName, string propertyDisplayName, string invalidName);
    public static RazorDiagnostic CreateTagHelper_InvalidRequiredDirectiveAttributeName(string propertyDisplayName, string invalidName);
    public static RazorDiagnostic CreateRewriter_InsufficientStack(SourceSpan location);
    public static RazorDiagnostic CreateCssRewriting_ImportNotAllowed(SourceSpan location);
}
public enum Microsoft.AspNetCore.Razor.Language.RazorDiagnosticSeverity : Enum {
    public int value__;
    public static RazorDiagnosticSeverity Warning;
    public static RazorDiagnosticSeverity Error;
}
public abstract class Microsoft.AspNetCore.Razor.Language.RazorEngine : object {
    public IReadOnlyList`1<IRazorEngineFeature> Features { get; }
    public IReadOnlyList`1<IRazorEnginePhase> Phases { get; }
    private static RazorEngine CreateCore(RazorConfiguration configuration, bool designTime, Action`1<IRazorEngineBuilder> configure);
    private static void AddDefaults(IRazorEngineBuilder builder);
    private static void AddDefaultPhases(IList`1<IRazorEnginePhase> phases);
    private static void AddDefaultFeatures(ICollection`1<IRazorEngineFeature> features);
    private static void AddDefaultRuntimeFeatures(RazorConfiguration configuration, ICollection`1<IRazorEngineFeature> features);
    private static void AddDefaultDesignTimeFeatures(RazorConfiguration configuration, ICollection`1<IRazorEngineFeature> features);
    public abstract virtual IReadOnlyList`1<IRazorEngineFeature> get_Features();
    public abstract virtual IReadOnlyList`1<IRazorEnginePhase> get_Phases();
    public abstract virtual void Process(RazorCodeDocument document);
    [NullableContextAttribute("2")]
internal TFeature GetFeature();
    [ObsoleteAttribute("This method is obsolete and will be removed in a future version.")]
public static RazorEngine Create();
    [ObsoleteAttribute("This method is obsolete and will be removed in a future version. The recommended alternative is RazorProjectEngine.Create")]
public static RazorEngine Create(Action`1<IRazorEngineBuilder> configure);
    [ObsoleteAttribute("This method is obsolete and will be removed in a future version. The recommended alternative is RazorProjectEngine.Create")]
public static RazorEngine CreateDesignTime();
    [ObsoleteAttribute("This method is obsolete and will be removed in a future version. The recommended alternative is RazorProjectEngine.Create")]
public static RazorEngine CreateDesignTime(Action`1<IRazorEngineBuilder> configure);
    [ObsoleteAttribute("This method is obsolete and will be removed in a future version.")]
public static RazorEngine CreateEmpty(Action`1<IRazorEngineBuilder> configure);
    [ObsoleteAttribute("This method is obsolete and will be removed in a future version.")]
public static RazorEngine CreateDesignTimeEmpty(Action`1<IRazorEngineBuilder> configure);
}
[ExtensionAttribute]
[ObsoleteAttribute("This class is obsolete and will be removed in a future version. The recommended alternative is RazorProjectEngineBuilderExtensions.")]
public static class Microsoft.AspNetCore.Razor.Language.RazorEngineBuilderExtensions : object {
    [ExtensionAttribute]
public static IRazorEngineBuilder AddDirective(IRazorEngineBuilder builder, DirectiveDescriptor directive);
    [ExtensionAttribute]
public static IRazorEngineBuilder AddTargetExtension(IRazorEngineBuilder builder, ICodeTargetExtension extension);
    [ExtensionAttribute]
public static IRazorEngineBuilder SetBaseType(IRazorEngineBuilder builder, string baseType);
    [ExtensionAttribute]
public static IRazorEngineBuilder ConfigureClass(IRazorEngineBuilder builder, Action`2<RazorCodeDocument, ClassDeclarationIntermediateNode> configureClass);
    [ExtensionAttribute]
public static IRazorEngineBuilder SetNamespace(IRazorEngineBuilder builder, string namespaceName);
    private static IRazorDirectiveFeature GetDirectiveFeature(IRazorEngineBuilder builder);
    private static IRazorTargetExtensionFeature GetTargetExtensionFeature(IRazorEngineBuilder builder);
    private static DefaultDocumentClassifierPassFeature GetDefaultDocumentClassifierPassFeature(IRazorEngineBuilder builder);
}
public abstract class Microsoft.AspNetCore.Razor.Language.RazorEngineFeatureBase : object {
    private RazorEngine _engine;
    public RazorEngine Engine { get; public set; }
    public sealed virtual RazorEngine get_Engine();
    public sealed virtual void set_Engine(RazorEngine value);
    protected TFeature GetRequiredFeature();
    protected void ThrowForMissingDocumentDependency(TDocumentDependency value);
    protected void ThrowForMissingFeatureDependency(TEngineDependency value);
    protected virtual void OnInitialized();
}
public abstract class Microsoft.AspNetCore.Razor.Language.RazorEnginePhaseBase : object {
    private RazorEngine _engine;
    public RazorEngine Engine { get; public set; }
    public sealed virtual RazorEngine get_Engine();
    public sealed virtual void set_Engine(RazorEngine value);
    public sealed virtual void Execute(RazorCodeDocument codeDocument);
    protected T GetRequiredFeature();
    protected void ThrowForMissingDocumentDependency(TDocumentDependency value);
    protected void ThrowForMissingFeatureDependency(TEngineDependency value);
    protected virtual void OnIntialized();
    protected abstract virtual void ExecuteCore(RazorCodeDocument codeDocument);
}
public abstract class Microsoft.AspNetCore.Razor.Language.RazorExtension : object {
    public string ExtensionName { get; }
    public abstract virtual string get_ExtensionName();
}
public abstract class Microsoft.AspNetCore.Razor.Language.RazorExtensionInitializer : object {
    public abstract virtual void Initialize(RazorProjectEngineBuilder builder);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.RazorHtmlDocument : object {
    public string GeneratedHtml { get; }
    public RazorCodeGenerationOptions Options { get; }
    public abstract virtual string get_GeneratedHtml();
    public abstract virtual RazorCodeGenerationOptions get_Options();
    public static RazorHtmlDocument Create(string generatedHtml, RazorCodeGenerationOptions options);
}
internal class Microsoft.AspNetCore.Razor.Language.RazorHtmlWriter : SyntaxWalker {
    private bool _isHtml;
    [CompilerGeneratedAttribute]
private RazorSourceDocument <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private StringBuilder <Builder>k__BackingField;
    public RazorSourceDocument Source { get; }
    public StringBuilder Builder { get; }
    private RazorHtmlWriter(RazorSourceDocument source);
    [CompilerGeneratedAttribute]
public RazorSourceDocument get_Source();
    [CompilerGeneratedAttribute]
public StringBuilder get_Builder();
    public static RazorHtmlDocument GetHtmlDocument(RazorCodeDocument codeDocument);
    public virtual void VisitRazorCommentBlock(RazorCommentBlockSyntax node);
    public virtual void VisitRazorMetaCode(RazorMetaCodeSyntax node);
    public virtual void VisitMarkupTransition(MarkupTransitionSyntax node);
    public virtual void VisitCSharpTransition(CSharpTransitionSyntax node);
    public virtual void VisitCSharpEphemeralTextLiteral(CSharpEphemeralTextLiteralSyntax node);
    public virtual void VisitCSharpExpressionLiteral(CSharpExpressionLiteralSyntax node);
    public virtual void VisitCSharpStatementLiteral(CSharpStatementLiteralSyntax node);
    public virtual void VisitMarkupStartTag(MarkupStartTagSyntax node);
    public virtual void VisitMarkupEndTag(MarkupEndTagSyntax node);
    public virtual void VisitMarkupTagHelperStartTag(MarkupTagHelperStartTagSyntax node);
    public virtual void VisitMarkupTagHelperEndTag(MarkupTagHelperEndTagSyntax node);
    public virtual void VisitMarkupEphemeralTextLiteral(MarkupEphemeralTextLiteralSyntax node);
    public virtual void VisitMarkupTextLiteral(MarkupTextLiteralSyntax node);
    public virtual void VisitUnclassifiedTextLiteral(UnclassifiedTextLiteralSyntax node);
    public virtual void VisitToken(SyntaxToken token);
    private void WriteToken(SyntaxToken token);
    private void WriteNode(TNode node, bool isHtml, Action`1<TNode> handler);
}
[DebuggerDisplayAttribute("{DebuggerToString(),nq}")]
public class Microsoft.AspNetCore.Razor.Language.RazorLanguageVersion : object {
    public static RazorLanguageVersion Version_1_0;
    public static RazorLanguageVersion Version_1_1;
    public static RazorLanguageVersion Version_2_0;
    public static RazorLanguageVersion Version_2_1;
    public static RazorLanguageVersion Version_3_0;
    public static RazorLanguageVersion Version_5_0;
    public static RazorLanguageVersion Version_6_0;
    public static RazorLanguageVersion Latest;
    public static RazorLanguageVersion Experimental;
    [CompilerGeneratedAttribute]
private int <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minor>k__BackingField;
    public int Major { get; }
    public int Minor { get; }
    private RazorLanguageVersion(int major, int minor);
    private static RazorLanguageVersion();
    public static bool TryParse(string languageVersion, RazorLanguageVersion& version);
    public static RazorLanguageVersion Parse(string languageVersion);
    [CompilerGeneratedAttribute]
public int get_Major();
    [CompilerGeneratedAttribute]
public int get_Minor();
    public sealed virtual int CompareTo(RazorLanguageVersion other);
    public sealed virtual bool Equals(RazorLanguageVersion other);
    public virtual int GetHashCode();
    public virtual string ToString();
    private string DebuggerToString();
}
internal abstract class Microsoft.AspNetCore.Razor.Language.RazorParserFeatureFlags : object {
    public bool AllowMinimizedBooleanTagHelperAttributes { get; }
    public bool AllowHtmlCommentsInTagHelpers { get; }
    public bool AllowComponentFileKind { get; }
    public bool AllowRazorInAllCodeBlocks { get; }
    public bool AllowUsingVariableDeclarations { get; }
    public bool AllowConditionalDataDashAttributes { get; }
    public bool AllowCSharpInMarkupAttributeArea { get; }
    public bool AllowNullableForgivenessOperator { get; }
    public static RazorParserFeatureFlags Create(RazorLanguageVersion version, string fileKind);
    public abstract virtual bool get_AllowMinimizedBooleanTagHelperAttributes();
    public abstract virtual bool get_AllowHtmlCommentsInTagHelpers();
    public abstract virtual bool get_AllowComponentFileKind();
    public abstract virtual bool get_AllowRazorInAllCodeBlocks();
    public abstract virtual bool get_AllowUsingVariableDeclarations();
    public abstract virtual bool get_AllowConditionalDataDashAttributes();
    public abstract virtual bool get_AllowCSharpInMarkupAttributeArea();
    public abstract virtual bool get_AllowNullableForgivenessOperator();
}
public abstract class Microsoft.AspNetCore.Razor.Language.RazorParserOptions : object {
    [CompilerGeneratedAttribute]
private RazorLanguageVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileKind>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorParserFeatureFlags <FeatureFlags>k__BackingField;
    public bool DesignTime { get; }
    public IReadOnlyCollection`1<DirectiveDescriptor> Directives { get; }
    public bool ParseLeadingDirectives { get; }
    public RazorLanguageVersion Version { get; }
    internal string FileKind { get; }
    internal RazorParserFeatureFlags FeatureFlags { get; }
    public static RazorParserOptions CreateDefault();
    public static RazorParserOptions Create(Action`1<RazorParserOptionsBuilder> configure);
    public static RazorParserOptions Create(Action`1<RazorParserOptionsBuilder> configure, string fileKind);
    public static RazorParserOptions CreateDesignTime(Action`1<RazorParserOptionsBuilder> configure);
    public static RazorParserOptions CreateDesignTime(Action`1<RazorParserOptionsBuilder> configure, string fileKind);
    public abstract virtual bool get_DesignTime();
    public abstract virtual IReadOnlyCollection`1<DirectiveDescriptor> get_Directives();
    public abstract virtual bool get_ParseLeadingDirectives();
    [CompilerGeneratedAttribute]
public virtual RazorLanguageVersion get_Version();
    [CompilerGeneratedAttribute]
internal virtual string get_FileKind();
    [CompilerGeneratedAttribute]
internal virtual RazorParserFeatureFlags get_FeatureFlags();
}
public abstract class Microsoft.AspNetCore.Razor.Language.RazorParserOptionsBuilder : object {
    [CompilerGeneratedAttribute]
private RazorLanguageVersion <LanguageVersion>k__BackingField;
    public RazorConfiguration Configuration { get; }
    public bool DesignTime { get; }
    public ICollection`1<DirectiveDescriptor> Directives { get; }
    public string FileKind { get; }
    public bool ParseLeadingDirectives { get; public set; }
    public RazorLanguageVersion LanguageVersion { get; }
    public virtual RazorConfiguration get_Configuration();
    public abstract virtual bool get_DesignTime();
    public abstract virtual ICollection`1<DirectiveDescriptor> get_Directives();
    public virtual string get_FileKind();
    public abstract virtual bool get_ParseLeadingDirectives();
    public abstract virtual void set_ParseLeadingDirectives(bool value);
    [CompilerGeneratedAttribute]
public virtual RazorLanguageVersion get_LanguageVersion();
    public abstract virtual RazorParserOptions Build();
    public virtual void SetDesignTime(bool designTime);
}
public abstract class Microsoft.AspNetCore.Razor.Language.RazorProject : object {
    public abstract virtual IEnumerable`1<RazorProjectItem> EnumerateItems(string basePath);
    public abstract virtual RazorProjectItem GetItem(string path);
    public abstract virtual RazorProjectItem GetItem(string path, string fileKind);
    public IEnumerable`1<RazorProjectItem> FindHierarchicalItems(string path, string fileName);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Razor.Language.RazorProject/<FindHierarchicalItems>d__4")]
public virtual IEnumerable`1<RazorProjectItem> FindHierarchicalItems(string basePath, string path, string fileName);
    protected virtual string NormalizeAndEnsureValidPath(string path);
}
public abstract class Microsoft.AspNetCore.Razor.Language.RazorProjectEngine : object {
    public RazorConfiguration Configuration { get; }
    public RazorProjectFileSystem FileSystem { get; }
    public RazorEngine Engine { get; }
    public IReadOnlyList`1<IRazorEngineFeature> EngineFeatures { get; }
    public IReadOnlyList`1<IRazorEnginePhase> Phases { get; }
    public IReadOnlyList`1<IRazorProjectEngineFeature> ProjectFeatures { get; }
    public abstract virtual RazorConfiguration get_Configuration();
    public abstract virtual RazorProjectFileSystem get_FileSystem();
    public abstract virtual RazorEngine get_Engine();
    public IReadOnlyList`1<IRazorEngineFeature> get_EngineFeatures();
    public IReadOnlyList`1<IRazorEnginePhase> get_Phases();
    public abstract virtual IReadOnlyList`1<IRazorProjectEngineFeature> get_ProjectFeatures();
    public virtual RazorCodeDocument Process(RazorProjectItem projectItem);
    public virtual RazorCodeDocument Process(RazorSourceDocument source, string fileKind, IReadOnlyList`1<RazorSourceDocument> importSources, IReadOnlyList`1<TagHelperDescriptor> tagHelpers);
    public virtual RazorCodeDocument ProcessDeclarationOnly(RazorProjectItem projectItem);
    public virtual RazorCodeDocument ProcessDeclarationOnly(RazorSourceDocument source, string fileKind, IReadOnlyList`1<RazorSourceDocument> importSources, IReadOnlyList`1<TagHelperDescriptor> tagHelpers);
    public virtual RazorCodeDocument ProcessDesignTime(RazorSourceDocument source, string fileKind, IReadOnlyList`1<RazorSourceDocument> importSources, IReadOnlyList`1<TagHelperDescriptor> tagHelpers);
    public virtual RazorCodeDocument ProcessDesignTime(RazorProjectItem projectItem);
    protected abstract virtual RazorCodeDocument CreateCodeDocumentCore(RazorProjectItem projectItem);
    protected abstract virtual RazorCodeDocument CreateCodeDocumentDesignTimeCore(RazorProjectItem projectItem);
    protected abstract virtual void ProcessCore(RazorCodeDocument codeDocument);
    internal static RazorProjectEngine CreateEmpty(Action`1<RazorProjectEngineBuilder> configure);
    internal static RazorProjectEngine Create(Action`1<RazorProjectEngineBuilder> configure);
    public static RazorProjectEngine Create(RazorConfiguration configuration, RazorProjectFileSystem fileSystem);
    public static RazorProjectEngine Create(RazorConfiguration configuration, RazorProjectFileSystem fileSystem, Action`1<RazorProjectEngineBuilder> configure);
    private static void AddDefaultPhases(IList`1<IRazorEnginePhase> phases);
    private static void AddDefaultFeatures(ICollection`1<IRazorFeature> features);
    private static void AddComponentFeatures(RazorProjectEngineBuilder builder, RazorLanguageVersion razorLanguageVersion);
    private static void LoadExtensions(RazorProjectEngineBuilder builder, IReadOnlyList`1<RazorExtension> extensions);
}
public abstract class Microsoft.AspNetCore.Razor.Language.RazorProjectEngineBuilder : object {
    public RazorConfiguration Configuration { get; }
    public RazorProjectFileSystem FileSystem { get; }
    public ICollection`1<IRazorFeature> Features { get; }
    public IList`1<IRazorEnginePhase> Phases { get; }
    public abstract virtual RazorConfiguration get_Configuration();
    public abstract virtual RazorProjectFileSystem get_FileSystem();
    public abstract virtual ICollection`1<IRazorFeature> get_Features();
    public abstract virtual IList`1<IRazorEnginePhase> get_Phases();
    public abstract virtual RazorProjectEngine Build();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Razor.Language.RazorProjectEngineBuilderExtensions : object {
    [ExtensionAttribute]
public static RazorProjectEngineBuilder ConfigureClass(RazorProjectEngineBuilder builder, Action`2<RazorCodeDocument, ClassDeclarationIntermediateNode> configureClass);
    [ExtensionAttribute]
public static RazorProjectEngineBuilder SetBaseType(RazorProjectEngineBuilder builder, string baseType);
    [ExtensionAttribute]
public static RazorProjectEngineBuilder SetNamespace(RazorProjectEngineBuilder builder, string namespaceName);
    [ExtensionAttribute]
public static RazorProjectEngineBuilder SetRootNamespace(RazorProjectEngineBuilder builder, string rootNamespace);
    [ExtensionAttribute]
public static RazorProjectEngineBuilder SetSupportLocalizedComponentNames(RazorProjectEngineBuilder builder);
    [ExtensionAttribute]
public static void SetImportFeature(RazorProjectEngineBuilder builder, IImportProjectFeature feature);
    [ExtensionAttribute]
public static RazorProjectEngineBuilder AddTargetExtension(RazorProjectEngineBuilder builder, ICodeTargetExtension extension);
    [ExtensionAttribute]
public static RazorProjectEngineBuilder AddDirective(RazorProjectEngineBuilder builder, DirectiveDescriptor directive);
    [ExtensionAttribute]
public static RazorProjectEngineBuilder AddDirective(RazorProjectEngineBuilder builder, DirectiveDescriptor directive, String[] fileKinds);
    [ExtensionAttribute]
public static RazorProjectEngineBuilder AddDefaultImports(RazorProjectEngineBuilder builder, String[] imports);
    private static DefaultRazorDirectiveFeature GetDirectiveFeature(RazorProjectEngineBuilder builder);
    private static IRazorTargetExtensionFeature GetTargetExtensionFeature(RazorProjectEngineBuilder builder);
    private static DefaultDocumentClassifierPassFeature GetDefaultDocumentClassifierPassFeature(RazorProjectEngineBuilder builder);
}
public abstract class Microsoft.AspNetCore.Razor.Language.RazorProjectEngineFeatureBase : object {
    private RazorProjectEngine _projectEngine;
    public RazorProjectEngine ProjectEngine { get; public set; }
    public virtual RazorProjectEngine get_ProjectEngine();
    public virtual void set_ProjectEngine(RazorProjectEngine value);
    protected virtual void OnInitialized();
}
public abstract class Microsoft.AspNetCore.Razor.Language.RazorProjectFileSystem : RazorProject {
    internal static RazorProjectFileSystem Empty;
    private static RazorProjectFileSystem();
    public static RazorProjectFileSystem Create(string rootDirectoryPath);
}
[DebuggerDisplayAttribute("{DebuggerToString()}")]
public abstract class Microsoft.AspNetCore.Razor.Language.RazorProjectItem : object {
    [CompilerGeneratedAttribute]
private string <CssScope>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorSourceDocument <RazorSourceDocument>k__BackingField;
    public string BasePath { get; }
    public string FilePath { get; }
    public string PhysicalPath { get; }
    public string RelativePhysicalPath { get; }
    public string CssScope { get; }
    public string FileKind { get; }
    public bool Exists { get; }
    public string CombinedPath { get; }
    public string Extension { get; }
    public string FileName { get; }
    public string FilePathWithoutExtension { get; }
    internal RazorSourceDocument RazorSourceDocument { get; internal set; }
    public abstract virtual string get_BasePath();
    public abstract virtual string get_FilePath();
    public abstract virtual string get_PhysicalPath();
    public virtual string get_RelativePhysicalPath();
    [CompilerGeneratedAttribute]
public virtual string get_CssScope();
    public virtual string get_FileKind();
    public abstract virtual Stream Read();
    public abstract virtual bool get_Exists();
    public string get_CombinedPath();
    public string get_Extension();
    public string get_FileName();
    public string get_FilePathWithoutExtension();
    [CompilerGeneratedAttribute]
internal RazorSourceDocument get_RazorSourceDocument();
    [CompilerGeneratedAttribute]
internal void set_RazorSourceDocument(RazorSourceDocument value);
    private string DebuggerToString();
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.AspNetCore.Razor.Language.RazorSourceDocument : object {
    internal static int LargeObjectHeapLimitInChars;
    internal static RazorSourceDocument[] EmptyArray;
    public Encoding Encoding { get; }
    public string FilePath { get; }
    public string RelativePath { get; }
    public char Item { get; }
    public int Length { get; }
    public RazorSourceLineCollection Lines { get; }
    private static RazorSourceDocument();
    public abstract virtual Encoding get_Encoding();
    public abstract virtual string get_FilePath();
    public virtual string get_RelativePath();
    public abstract virtual char get_Item(int position);
    public abstract virtual int get_Length();
    public abstract virtual RazorSourceLineCollection get_Lines();
    public abstract virtual void CopyTo(int sourceIndex, Char[] destination, int destinationIndex, int count);
    public abstract virtual Byte[] GetChecksum();
    public virtual string GetChecksumAlgorithm();
    public virtual string GetFilePathForDisplay();
    public static RazorSourceDocument ReadFrom(Stream stream, string fileName);
    public static RazorSourceDocument ReadFrom(Stream stream, string fileName, Encoding encoding);
    public static RazorSourceDocument ReadFrom(Stream stream, Encoding encoding, RazorSourceDocumentProperties properties);
    public static RazorSourceDocument ReadFrom(RazorProjectItem projectItem);
    public static RazorSourceDocument Create(string content, string fileName);
    public static RazorSourceDocument Create(string content, RazorSourceDocumentProperties properties);
    public static RazorSourceDocument Create(string content, string fileName, Encoding encoding);
    public static RazorSourceDocument Create(string content, Encoding encoding, RazorSourceDocumentProperties properties);
}
public class Microsoft.AspNetCore.Razor.Language.RazorSourceDocumentProperties : object {
    internal static RazorSourceDocumentProperties Default;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativePath>k__BackingField;
    public string FilePath { get; }
    public string RelativePath { get; }
    public RazorSourceDocumentProperties(string filePath, string relativePath);
    private static RazorSourceDocumentProperties();
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public string get_RelativePath();
}
public abstract class Microsoft.AspNetCore.Razor.Language.RazorSourceLineCollection : object {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual int GetLineLength(int index);
    internal abstract virtual SourceLocation GetLocation(int position);
}
public abstract class Microsoft.AspNetCore.Razor.Language.RazorSyntaxTree : object {
    public IReadOnlyList`1<RazorDiagnostic> Diagnostics { get; }
    public RazorParserOptions Options { get; }
    internal SyntaxNode Root { get; }
    public RazorSourceDocument Source { get; }
    internal static RazorSyntaxTree Create(SyntaxNode root, RazorSourceDocument source, IEnumerable`1<RazorDiagnostic> diagnostics, RazorParserOptions options);
    public static RazorSyntaxTree Parse(RazorSourceDocument source);
    public static RazorSyntaxTree Parse(RazorSourceDocument source, RazorParserOptions options);
    public abstract virtual IReadOnlyList`1<RazorDiagnostic> get_Diagnostics();
    public abstract virtual RazorParserOptions get_Options();
    internal abstract virtual SyntaxNode get_Root();
    public abstract virtual RazorSourceDocument get_Source();
}
public abstract class Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private NameComparisonMode <NameComparison>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaseSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueComparisonMode <ValueComparison>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RazorDiagnostic> <Diagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Metadata>k__BackingField;
    public string Name { get; protected set; }
    public NameComparisonMode NameComparison { get; protected set; }
    public bool CaseSensitive { get; protected set; }
    public string Value { get; protected set; }
    public ValueComparisonMode ValueComparison { get; protected set; }
    public string DisplayName { get; protected set; }
    public IReadOnlyList`1<RazorDiagnostic> Diagnostics { get; protected set; }
    public IReadOnlyDictionary`2<string, string> Metadata { get; protected set; }
    public bool HasErrors { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public NameComparisonMode get_NameComparison();
    [CompilerGeneratedAttribute]
protected void set_NameComparison(NameComparisonMode value);
    [CompilerGeneratedAttribute]
public bool get_CaseSensitive();
    [CompilerGeneratedAttribute]
protected void set_CaseSensitive(bool value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
protected void set_Value(string value);
    [CompilerGeneratedAttribute]
public ValueComparisonMode get_ValueComparison();
    [CompilerGeneratedAttribute]
protected void set_ValueComparison(ValueComparisonMode value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
protected void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RazorDiagnostic> get_Diagnostics();
    [CompilerGeneratedAttribute]
protected void set_Diagnostics(IReadOnlyList`1<RazorDiagnostic> value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Metadata();
    [CompilerGeneratedAttribute]
protected void set_Metadata(IReadOnlyDictionary`2<string, string> value);
    public bool get_HasErrors();
    public virtual string ToString();
    public sealed virtual bool Equals(RequiredAttributeDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptorBuilder : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Metadata>k__BackingField;
    public string Name { get; public set; }
    public NameComparisonMode NameComparisonMode { get; public set; }
    public string Value { get; public set; }
    public ValueComparisonMode ValueComparisonMode { get; public set; }
    public RazorDiagnosticCollection Diagnostics { get; }
    public IDictionary`2<string, string> Metadata { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual NameComparisonMode get_NameComparisonMode();
    public abstract virtual void set_NameComparisonMode(NameComparisonMode value);
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public abstract virtual ValueComparisonMode get_ValueComparisonMode();
    public abstract virtual void set_ValueComparisonMode(ValueComparisonMode value);
    public abstract virtual RazorDiagnosticCollection get_Diagnostics();
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, string> get_Metadata();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptorBuilderExtensions : object {
    [ExtensionAttribute]
internal static bool IsDirectiveAttribute(RequiredAttributeDescriptorBuilder builder);
}
internal class Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptorComparer : object {
    public static RequiredAttributeDescriptorComparer Default;
    private static RequiredAttributeDescriptorComparer();
    public virtual bool Equals(RequiredAttributeDescriptor descriptorX, RequiredAttributeDescriptor descriptorY);
    public virtual int GetHashCode(RequiredAttributeDescriptor descriptor);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptorExtensions : object {
    [ExtensionAttribute]
public static bool IsDirectiveAttribute(RequiredAttributeDescriptor descriptor);
}
internal static class Microsoft.AspNetCore.Razor.Language.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string AddTagHelperDirective_Description { get; }
    internal static string AddTagHelperDirective_StringToken_Description { get; }
    internal static string AddTagHelperDirective_StringToken_Name { get; }
    internal static string ArgumentCannotBeNullOrEmpty { get; }
    internal static string Block_Type_Not_Specified { get; }
    internal static string BlockDirectiveCannotBeImported { get; }
    internal static string BlockName_Code { get; }
    internal static string BlockName_ExplicitExpression { get; }
    internal static string CodeWriter_InvalidNewLine { get; }
    internal static string CSharpToken_CharacterLiteral { get; }
    internal static string CSharpToken_Comment { get; }
    internal static string CSharpToken_Identifier { get; }
    internal static string CSharpToken_IntegerLiteral { get; }
    internal static string CSharpToken_Keyword { get; }
    internal static string CSharpToken_Newline { get; }
    internal static string CSharpToken_RealLiteral { get; }
    internal static string CSharpToken_StringLiteral { get; }
    internal static string CSharpToken_Whitespace { get; }
    internal static string Diagnostic_CodeTarget_UnsupportedExtension { get; }
    internal static string DirectiveDescriptor_InvalidDirectiveKeyword { get; }
    internal static string DirectiveDescriptor_InvalidNonOptionalToken { get; }
    internal static string DirectiveExpectsIdentifier { get; }
    internal static string DirectiveExpectsNamespace { get; }
    internal static string DirectiveExpectsQuotedStringLiteral { get; }
    internal static string DirectiveExpectsTypeName { get; }
    internal static string DirectiveMustAppearAtStartOfLine { get; }
    internal static string DirectiveTokensMustBeSeparatedByWhitespace { get; }
    internal static string DocumentMissingTarget { get; }
    internal static string DuplicateDirective { get; }
    internal static string EndBlock_Called_Without_Matching_StartBlock { get; }
    internal static string ErrorComponent_Newline { get; }
    internal static string FeatureDependencyMissing { get; }
    internal static string FeatureMustBeInitialized { get; }
    internal static string FunctionsDirective_Description { get; }
    internal static string HtmlToken_NewLine { get; }
    internal static string HtmlToken_RazorComment { get; }
    internal static string HtmlToken_Text { get; }
    internal static string HtmlToken_WhiteSpace { get; }
    internal static string InheritsDirective_Description { get; }
    internal static string InheritsDirective_TypeToken_Description { get; }
    internal static string InheritsDirective_TypeToken_Name { get; }
    internal static string IntermediateNodeBuilder_PopInvalid { get; }
    internal static string IntermediateNodeReference_CollectionIsReadOnly { get; }
    internal static string IntermediateNodeReference_NodeNotFound { get; }
    internal static string IntermediateNodeReference_NotInitialized { get; }
    internal static string IntermediateNodes_InvalidParentNode { get; }
    internal static string InvalidOperation_SpanIsNotChangeOwner { get; }
    internal static string InvalidTagHelperLookupText { get; }
    internal static string InvalidTagHelperPrefixValue { get; }
    internal static string KeyMustNotBeNull { get; }
    internal static string Language_Does_Not_Support_RazorComment { get; }
    internal static string MismatchedContentEncoding { get; }
    internal static string ParseError_AtInCode_Must_Be_Followed_By_Colon_Paren_Or_Identifier_Start { get; }
    internal static string ParseError_BlockComment_Not_Terminated { get; }
    internal static string ParseError_DirectiveMustHaveValue { get; }
    internal static string ParseError_Expected_CloseBracket_Before_EOF { get; }
    internal static string ParseError_Expected_EndOfBlock_Before_EOF { get; }
    internal static string ParseError_HelperDirectiveNotAvailable { get; }
    internal static string ParseError_IncompleteQuotesAroundDirective { get; }
    internal static string ParseError_InlineMarkup_Blocks_Cannot_Be_Nested { get; }
    internal static string ParseError_MarkupBlock_Must_Start_With_Tag { get; }
    internal static string ParseError_MissingEndTag { get; }
    internal static string ParseError_NamespaceImportAndTypeAlias_Cannot_Exist_Within_CodeBlock { get; }
    internal static string ParseError_OuterTagMissingName { get; }
    internal static string ParseError_RazorComment_Not_Terminated { get; }
    internal static string ParseError_ReservedWord { get; }
    internal static string ParseError_Sections_Cannot_Be_Nested { get; }
    internal static string ParseError_SingleLine_ControlFlowStatements_CannotContainMarkup { get; }
    internal static string ParseError_TextTagCannotContainAttributes { get; }
    internal static string ParseError_Unexpected_Character_At_Start_Of_CodeBlock { get; }
    internal static string ParseError_Unexpected_EndOfFile_At_Start_Of_CodeBlock { get; }
    internal static string ParseError_Unexpected_Nested_CodeBlock { get; }
    internal static string ParseError_Unexpected_WhiteSpace_At_Start_Of_CodeBlock { get; }
    internal static string ParseError_UnexpectedEndTag { get; }
    internal static string ParseError_UnfinishedTag { get; }
    internal static string ParseError_Unterminated_String_Literal { get; }
    internal static string Parser_Context_Not_Set { get; }
    internal static string ParserContext_CannotCompleteTree_NoRootBlock { get; }
    internal static string ParserContext_CannotCompleteTree_OutstandingBlocks { get; }
    internal static string ParserContext_NoCurrentBlock { get; }
    internal static string PhaseDependencyMissing { get; }
    internal static string PhaseMustBeInitialized { get; }
    internal static string RazorProject_PathMustStartWithForwardSlash { get; }
    internal static string RemoveTagHelperDirective_Description { get; }
    internal static string RemoveTagHelperDirective_StringToken_Description { get; }
    internal static string RemoveTagHelperDirective_StringToken_Name { get; }
    internal static string RenderingContextRequiresDelegate { get; }
    internal static string RewriterError_EmptyTagHelperBoundAttribute { get; }
    internal static string SectionDirective_Description { get; }
    internal static string SectionDirective_NameToken_Description { get; }
    internal static string SectionDirective_NameToken_Name { get; }
    internal static string SectionExample { get; }
    internal static string Token_Unknown { get; }
    internal static string TagHelper_InvalidBoundAttributeName { get; }
    internal static string TagHelper_InvalidBoundAttributeNameStartsWith { get; }
    internal static string TagHelper_InvalidBoundAttributeNullOrWhitespace { get; }
    internal static string TagHelper_InvalidBoundAttributePrefix { get; }
    internal static string TagHelper_InvalidBoundAttributePrefixStartsWith { get; }
    internal static string TagHelper_InvalidRestrictedChild { get; }
    internal static string TagHelper_InvalidRestrictedChildNullOrWhitespace { get; }
    internal static string TagHelper_InvalidTargetedAttributeName { get; }
    internal static string TagHelper_InvalidTargetedAttributeNameNullOrWhitespace { get; }
    internal static string TagHelper_InvalidTargetedParentTagName { get; }
    internal static string TagHelper_InvalidTargetedParentTagNameNullOrWhitespace { get; }
    internal static string TagHelper_InvalidTargetedTagName { get; }
    internal static string TagHelper_InvalidTargetedTagNameNullOrWhitespace { get; }
    internal static string TagHelperAssemblyNameCannotBeEmptyOrNull { get; }
    internal static string TagHelperBlockRewriter_IndexerAttributeNameMustIncludeKey { get; }
    internal static string TagHelperBlockRewriter_TagHelperAttributeListMustBeWellFormed { get; }
    internal static string TagHelperParseTreeRewriter_CannotHaveNonTagContent { get; }
    internal static string TagHelperParseTreeRewriter_EndTagTagHelperMustNotHaveAnEndTag { get; }
    internal static string TagHelperParseTreeRewriter_InconsistentTagStructure { get; }
    internal static string TagHelperParseTreeRewriter_InvalidNestedTag { get; }
    internal static string TagHelperPrefixDirective_Description { get; }
    internal static string TagHelperPrefixDirective_PrefixToken_Description { get; }
    internal static string TagHelperPrefixDirective_PrefixToken_Name { get; }
    internal static string TagHelpers_AttributesMustHaveAName { get; }
    internal static string TagHelpers_CannotHaveCSharpInTagDeclaration { get; }
    internal static string TagHelpers_CodeBlocks_NotSupported_InAttributes { get; }
    internal static string TagHelpers_InlineMarkupBlocks_NotSupported_InAttributes { get; }
    internal static string TagHelpersParseTreeRewriter_FoundMalformedTagHelper { get; }
    internal static string TagHelpersParseTreeRewriter_MissingCloseAngle { get; }
    internal static string UnexpectedDirectiveKind { get; }
    internal static string UnexpectedDirectiveLiteral { get; }
    internal static string UnexpectedEOFAfterDirective { get; }
    internal static string UnsupportedChecksumAlgorithm { get; }
    internal static string PropertyMustNotBeNull { get; }
    internal static string RazorProjectEngineMissingFeatureDependency { get; }
    internal static string RazorLanguageVersion_InvalidVersion { get; }
    internal static string VirtualFileSystem_FileDoesNotBelongToDirectory { get; }
    internal static string VirtualFileSystem_InvalidRelativePath { get; }
    internal static string Rewriter_InsufficientStack { get; }
    internal static string NamespaceDirective_Description { get; }
    internal static string NamespaceDirective_NamespaceToken_Description { get; }
    internal static string NamespaceDirective_NamespaceToken_Name { get; }
    internal static string TagHelper_InvalidBoundAttributeParameterName { get; }
    internal static string TagHelper_InvalidBoundAttributeParameterNullOrWhitespace { get; }
    internal static string DirectiveExpectsCSharpAttribute { get; }
    internal static string TagHelper_InvalidBoundDirectiveAttributeName { get; }
    internal static string TagHelper_InvalidBoundDirectiveAttributePrefix { get; }
    internal static string TagHelper_InvalidRequiredDirectiveAttributeName { get; }
    internal static string DirectiveExpectsBooleanLiteral { get; }
    internal static string CssRewriter_ImportNotAllowed { get; }
    internal static string DirectiveGenericTypeParameterIdentifierMismatch { get; }
    internal static string ParseError_Unexpected_Identifier_At_Position { get; }
    internal static string Component_EditorRequiredParameterNotSpecified { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_AddTagHelperDirective_Description();
    internal static string get_AddTagHelperDirective_StringToken_Description();
    internal static string get_AddTagHelperDirective_StringToken_Name();
    internal static string get_ArgumentCannotBeNullOrEmpty();
    internal static string get_Block_Type_Not_Specified();
    internal static string get_BlockDirectiveCannotBeImported();
    internal static string FormatBlockDirectiveCannotBeImported(object p0);
    internal static string get_BlockName_Code();
    internal static string get_BlockName_ExplicitExpression();
    internal static string get_CodeWriter_InvalidNewLine();
    internal static string FormatCodeWriter_InvalidNewLine(object p0);
    internal static string get_CSharpToken_CharacterLiteral();
    internal static string get_CSharpToken_Comment();
    internal static string get_CSharpToken_Identifier();
    internal static string get_CSharpToken_IntegerLiteral();
    internal static string get_CSharpToken_Keyword();
    internal static string get_CSharpToken_Newline();
    internal static string get_CSharpToken_RealLiteral();
    internal static string get_CSharpToken_StringLiteral();
    internal static string get_CSharpToken_Whitespace();
    internal static string get_Diagnostic_CodeTarget_UnsupportedExtension();
    internal static string FormatDiagnostic_CodeTarget_UnsupportedExtension(object p0, object p1);
    internal static string get_DirectiveDescriptor_InvalidDirectiveKeyword();
    internal static string FormatDirectiveDescriptor_InvalidDirectiveKeyword(object p0);
    internal static string get_DirectiveDescriptor_InvalidNonOptionalToken();
    internal static string get_DirectiveExpectsIdentifier();
    internal static string FormatDirectiveExpectsIdentifier(object p0);
    internal static string get_DirectiveExpectsNamespace();
    internal static string FormatDirectiveExpectsNamespace(object p0);
    internal static string get_DirectiveExpectsQuotedStringLiteral();
    internal static string FormatDirectiveExpectsQuotedStringLiteral(object p0);
    internal static string get_DirectiveExpectsTypeName();
    internal static string FormatDirectiveExpectsTypeName(object p0);
    internal static string get_DirectiveMustAppearAtStartOfLine();
    internal static string FormatDirectiveMustAppearAtStartOfLine(object p0);
    internal static string get_DirectiveTokensMustBeSeparatedByWhitespace();
    internal static string FormatDirectiveTokensMustBeSeparatedByWhitespace(object p0);
    internal static string get_DocumentMissingTarget();
    internal static string FormatDocumentMissingTarget(object p0, object p1, object p2);
    internal static string get_DuplicateDirective();
    internal static string FormatDuplicateDirective(object p0);
    internal static string get_EndBlock_Called_Without_Matching_StartBlock();
    internal static string get_ErrorComponent_Newline();
    internal static string get_FeatureDependencyMissing();
    internal static string FormatFeatureDependencyMissing(object p0, object p1, object p2);
    internal static string get_FeatureMustBeInitialized();
    internal static string FormatFeatureMustBeInitialized(object p0);
    internal static string get_FunctionsDirective_Description();
    internal static string get_HtmlToken_NewLine();
    internal static string get_HtmlToken_RazorComment();
    internal static string get_HtmlToken_Text();
    internal static string get_HtmlToken_WhiteSpace();
    internal static string get_InheritsDirective_Description();
    internal static string get_InheritsDirective_TypeToken_Description();
    internal static string get_InheritsDirective_TypeToken_Name();
    internal static string get_IntermediateNodeBuilder_PopInvalid();
    internal static string FormatIntermediateNodeBuilder_PopInvalid(object p0);
    internal static string get_IntermediateNodeReference_CollectionIsReadOnly();
    internal static string FormatIntermediateNodeReference_CollectionIsReadOnly(object p0);
    internal static string get_IntermediateNodeReference_NodeNotFound();
    internal static string FormatIntermediateNodeReference_NodeNotFound(object p0, object p1);
    internal static string get_IntermediateNodeReference_NotInitialized();
    internal static string get_IntermediateNodes_InvalidParentNode();
    internal static string FormatIntermediateNodes_InvalidParentNode(object p0, object p1);
    internal static string get_InvalidOperation_SpanIsNotChangeOwner();
    internal static string FormatInvalidOperation_SpanIsNotChangeOwner(object p0, object p1);
    internal static string get_InvalidTagHelperLookupText();
    internal static string FormatInvalidTagHelperLookupText(object p0);
    internal static string get_InvalidTagHelperPrefixValue();
    internal static string FormatInvalidTagHelperPrefixValue(object p0, object p1, object p2);
    internal static string get_KeyMustNotBeNull();
    internal static string get_Language_Does_Not_Support_RazorComment();
    internal static string get_MismatchedContentEncoding();
    internal static string FormatMismatchedContentEncoding(object p0, object p1);
    internal static string get_ParseError_AtInCode_Must_Be_Followed_By_Colon_Paren_Or_Identifier_Start();
    internal static string get_ParseError_BlockComment_Not_Terminated();
    internal static string get_ParseError_DirectiveMustHaveValue();
    internal static string FormatParseError_DirectiveMustHaveValue(object p0);
    internal static string get_ParseError_Expected_CloseBracket_Before_EOF();
    internal static string FormatParseError_Expected_CloseBracket_Before_EOF(object p0, object p1);
    internal static string get_ParseError_Expected_EndOfBlock_Before_EOF();
    internal static string FormatParseError_Expected_EndOfBlock_Before_EOF(object p0, object p1, object p2);
    internal static string get_ParseError_HelperDirectiveNotAvailable();
    internal static string FormatParseError_HelperDirectiveNotAvailable(object p0);
    internal static string get_ParseError_IncompleteQuotesAroundDirective();
    internal static string FormatParseError_IncompleteQuotesAroundDirective(object p0);
    internal static string get_ParseError_InlineMarkup_Blocks_Cannot_Be_Nested();
    internal static string get_ParseError_MarkupBlock_Must_Start_With_Tag();
    internal static string get_ParseError_MissingEndTag();
    internal static string FormatParseError_MissingEndTag(object p0);
    internal static string get_ParseError_NamespaceImportAndTypeAlias_Cannot_Exist_Within_CodeBlock();
    internal static string get_ParseError_OuterTagMissingName();
    internal static string get_ParseError_RazorComment_Not_Terminated();
    internal static string get_ParseError_ReservedWord();
    internal static string FormatParseError_ReservedWord(object p0);
    internal static string get_ParseError_Sections_Cannot_Be_Nested();
    internal static string FormatParseError_Sections_Cannot_Be_Nested(object p0);
    internal static string get_ParseError_SingleLine_ControlFlowStatements_CannotContainMarkup();
    internal static string get_ParseError_TextTagCannotContainAttributes();
    internal static string get_ParseError_Unexpected_Character_At_Start_Of_CodeBlock();
    internal static string FormatParseError_Unexpected_Character_At_Start_Of_CodeBlock(object p0);
    internal static string get_ParseError_Unexpected_EndOfFile_At_Start_Of_CodeBlock();
    internal static string get_ParseError_Unexpected_Nested_CodeBlock();
    internal static string get_ParseError_Unexpected_WhiteSpace_At_Start_Of_CodeBlock();
    internal static string get_ParseError_UnexpectedEndTag();
    internal static string FormatParseError_UnexpectedEndTag(object p0);
    internal static string get_ParseError_UnfinishedTag();
    internal static string FormatParseError_UnfinishedTag(object p0);
    internal static string get_ParseError_Unterminated_String_Literal();
    internal static string get_Parser_Context_Not_Set();
    internal static string get_ParserContext_CannotCompleteTree_NoRootBlock();
    internal static string get_ParserContext_CannotCompleteTree_OutstandingBlocks();
    internal static string get_ParserContext_NoCurrentBlock();
    internal static string get_PhaseDependencyMissing();
    internal static string FormatPhaseDependencyMissing(object p0, object p1, object p2);
    internal static string get_PhaseMustBeInitialized();
    internal static string FormatPhaseMustBeInitialized(object p0);
    internal static string get_RazorProject_PathMustStartWithForwardSlash();
    internal static string get_RemoveTagHelperDirective_Description();
    internal static string get_RemoveTagHelperDirective_StringToken_Description();
    internal static string get_RemoveTagHelperDirective_StringToken_Name();
    internal static string get_RenderingContextRequiresDelegate();
    internal static string FormatRenderingContextRequiresDelegate(object p0, object p1);
    internal static string get_RewriterError_EmptyTagHelperBoundAttribute();
    internal static string FormatRewriterError_EmptyTagHelperBoundAttribute(object p0, object p1, object p2);
    internal static string get_SectionDirective_Description();
    internal static string get_SectionDirective_NameToken_Description();
    internal static string get_SectionDirective_NameToken_Name();
    internal static string get_SectionExample();
    internal static string get_Token_Unknown();
    internal static string get_TagHelper_InvalidBoundAttributeName();
    internal static string FormatTagHelper_InvalidBoundAttributeName(object p0, object p1, object p2, object p3);
    internal static string get_TagHelper_InvalidBoundAttributeNameStartsWith();
    internal static string FormatTagHelper_InvalidBoundAttributeNameStartsWith(object p0, object p1, object p2, object p3);
    internal static string get_TagHelper_InvalidBoundAttributeNullOrWhitespace();
    internal static string FormatTagHelper_InvalidBoundAttributeNullOrWhitespace(object p0, object p1);
    internal static string get_TagHelper_InvalidBoundAttributePrefix();
    internal static string FormatTagHelper_InvalidBoundAttributePrefix(object p0, object p1, object p2, object p3);
    internal static string get_TagHelper_InvalidBoundAttributePrefixStartsWith();
    internal static string FormatTagHelper_InvalidBoundAttributePrefixStartsWith(object p0, object p1, object p2, object p3);
    internal static string get_TagHelper_InvalidRestrictedChild();
    internal static string FormatTagHelper_InvalidRestrictedChild(object p0, object p1, object p2);
    internal static string get_TagHelper_InvalidRestrictedChildNullOrWhitespace();
    internal static string FormatTagHelper_InvalidRestrictedChildNullOrWhitespace(object p0);
    internal static string get_TagHelper_InvalidTargetedAttributeName();
    internal static string FormatTagHelper_InvalidTargetedAttributeName(object p0, object p1);
    internal static string get_TagHelper_InvalidTargetedAttributeNameNullOrWhitespace();
    internal static string get_TagHelper_InvalidTargetedParentTagName();
    internal static string FormatTagHelper_InvalidTargetedParentTagName(object p0, object p1);
    internal static string get_TagHelper_InvalidTargetedParentTagNameNullOrWhitespace();
    internal static string get_TagHelper_InvalidTargetedTagName();
    internal static string FormatTagHelper_InvalidTargetedTagName(object p0, object p1);
    internal static string get_TagHelper_InvalidTargetedTagNameNullOrWhitespace();
    internal static string get_TagHelperAssemblyNameCannotBeEmptyOrNull();
    internal static string get_TagHelperBlockRewriter_IndexerAttributeNameMustIncludeKey();
    internal static string FormatTagHelperBlockRewriter_IndexerAttributeNameMustIncludeKey(object p0, object p1);
    internal static string get_TagHelperBlockRewriter_TagHelperAttributeListMustBeWellFormed();
    internal static string get_TagHelperParseTreeRewriter_CannotHaveNonTagContent();
    internal static string FormatTagHelperParseTreeRewriter_CannotHaveNonTagContent(object p0, object p1);
    internal static string get_TagHelperParseTreeRewriter_EndTagTagHelperMustNotHaveAnEndTag();
    internal static string FormatTagHelperParseTreeRewriter_EndTagTagHelperMustNotHaveAnEndTag(object p0, object p1, object p2);
    internal static string get_TagHelperParseTreeRewriter_InconsistentTagStructure();
    internal static string FormatTagHelperParseTreeRewriter_InconsistentTagStructure(object p0, object p1, object p2, object p3);
    internal static string get_TagHelperParseTreeRewriter_InvalidNestedTag();
    internal static string FormatTagHelperParseTreeRewriter_InvalidNestedTag(object p0, object p1, object p2);
    internal static string get_TagHelperPrefixDirective_Description();
    internal static string get_TagHelperPrefixDirective_PrefixToken_Description();
    internal static string get_TagHelperPrefixDirective_PrefixToken_Name();
    internal static string get_TagHelpers_AttributesMustHaveAName();
    internal static string FormatTagHelpers_AttributesMustHaveAName(object p0);
    internal static string get_TagHelpers_CannotHaveCSharpInTagDeclaration();
    internal static string FormatTagHelpers_CannotHaveCSharpInTagDeclaration(object p0);
    internal static string get_TagHelpers_CodeBlocks_NotSupported_InAttributes();
    internal static string get_TagHelpers_InlineMarkupBlocks_NotSupported_InAttributes();
    internal static string FormatTagHelpers_InlineMarkupBlocks_NotSupported_InAttributes(object p0);
    internal static string get_TagHelpersParseTreeRewriter_FoundMalformedTagHelper();
    internal static string FormatTagHelpersParseTreeRewriter_FoundMalformedTagHelper(object p0);
    internal static string get_TagHelpersParseTreeRewriter_MissingCloseAngle();
    internal static string FormatTagHelpersParseTreeRewriter_MissingCloseAngle(object p0);
    internal static string get_UnexpectedDirectiveKind();
    internal static string FormatUnexpectedDirectiveKind(object p0);
    internal static string get_UnexpectedDirectiveLiteral();
    internal static string FormatUnexpectedDirectiveLiteral(object p0, object p1);
    internal static string get_UnexpectedEOFAfterDirective();
    internal static string FormatUnexpectedEOFAfterDirective(object p0, object p1);
    internal static string get_UnsupportedChecksumAlgorithm();
    internal static string FormatUnsupportedChecksumAlgorithm(object p0, object p1, object p2, object p3);
    internal static string get_PropertyMustNotBeNull();
    internal static string FormatPropertyMustNotBeNull(object p0, object p1);
    internal static string get_RazorProjectEngineMissingFeatureDependency();
    internal static string FormatRazorProjectEngineMissingFeatureDependency(object p0, object p1);
    internal static string get_RazorLanguageVersion_InvalidVersion();
    internal static string FormatRazorLanguageVersion_InvalidVersion(object p0);
    internal static string get_VirtualFileSystem_FileDoesNotBelongToDirectory();
    internal static string FormatVirtualFileSystem_FileDoesNotBelongToDirectory(object p0, object p1);
    internal static string get_VirtualFileSystem_InvalidRelativePath();
    internal static string FormatVirtualFileSystem_InvalidRelativePath(object p0);
    internal static string get_Rewriter_InsufficientStack();
    internal static string get_NamespaceDirective_Description();
    internal static string get_NamespaceDirective_NamespaceToken_Description();
    internal static string get_NamespaceDirective_NamespaceToken_Name();
    internal static string get_TagHelper_InvalidBoundAttributeParameterName();
    internal static string FormatTagHelper_InvalidBoundAttributeParameterName(object p0, object p1, object p3);
    internal static string get_TagHelper_InvalidBoundAttributeParameterNullOrWhitespace();
    internal static string FormatTagHelper_InvalidBoundAttributeParameterNullOrWhitespace(object p0);
    internal static string get_DirectiveExpectsCSharpAttribute();
    internal static string FormatDirectiveExpectsCSharpAttribute(object p0);
    internal static string get_TagHelper_InvalidBoundDirectiveAttributeName();
    internal static string FormatTagHelper_InvalidBoundDirectiveAttributeName(object p0, object p1, object p2);
    internal static string get_TagHelper_InvalidBoundDirectiveAttributePrefix();
    internal static string FormatTagHelper_InvalidBoundDirectiveAttributePrefix(object p0, object p1, object p2);
    internal static string get_TagHelper_InvalidRequiredDirectiveAttributeName();
    internal static string FormatTagHelper_InvalidRequiredDirectiveAttributeName(object p0, object p1);
    internal static string get_DirectiveExpectsBooleanLiteral();
    internal static string FormatDirectiveExpectsBooleanLiteral(object p0);
    internal static string get_CssRewriter_ImportNotAllowed();
    internal static string get_DirectiveGenericTypeParameterIdentifierMismatch();
    internal static string FormatDirectiveGenericTypeParameterIdentifierMismatch(object p0, object p1, object p2);
    internal static string get_ParseError_Unexpected_Identifier_At_Position();
    internal static string FormatParseError_Unexpected_Identifier_At_Position(object p0, object p1);
    internal static string get_Component_EditorRequiredParameterNotSpecified();
    internal static string FormatComponent_EditorRequiredParameterNotSpecified(object p0, object p1);
}
public class Microsoft.AspNetCore.Razor.Language.SourceChange : object {
    [CompilerGeneratedAttribute]
private SourceSpan <Span>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewText>k__BackingField;
    public bool IsDelete { get; }
    public bool IsInsert { get; }
    public bool IsReplace { get; }
    public SourceSpan Span { get; }
    public string NewText { get; }
    public SourceChange(int absoluteIndex, int length, string newText);
    public SourceChange(SourceSpan span, string newText);
    public bool get_IsDelete();
    public bool get_IsInsert();
    public bool get_IsReplace();
    [CompilerGeneratedAttribute]
public SourceSpan get_Span();
    [CompilerGeneratedAttribute]
public string get_NewText();
    internal string GetEditedContent(SyntaxNode node);
    internal string GetEditedContent(string text, int offset);
    internal int GetOffset(SyntaxNode node);
    internal string GetOriginalText(SyntaxNode node);
    public sealed virtual bool Equals(SourceChange other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Microsoft.AspNetCore.Razor.Language.SourceLocation : ValueType {
    public static SourceLocation Undefined;
    public static SourceLocation Zero;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AbsoluteIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CharacterIndex>k__BackingField;
    public string FilePath { get; public set; }
    public int AbsoluteIndex { get; public set; }
    public int LineIndex { get; public set; }
    public int CharacterIndex { get; public set; }
    public SourceLocation(int absoluteIndex, int lineIndex, int characterIndex);
    public SourceLocation(string filePath, int absoluteIndex, int lineIndex, int characterIndex);
    private static SourceLocation();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_AbsoluteIndex();
    [CompilerGeneratedAttribute]
public void set_AbsoluteIndex(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_LineIndex();
    [CompilerGeneratedAttribute]
public void set_LineIndex(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_CharacterIndex();
    [CompilerGeneratedAttribute]
public void set_CharacterIndex(int value);
    public static SourceLocation FromSpan(Nullable`1<SourceSpan> span);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(SourceLocation other);
    public static bool op_Equality(SourceLocation left, SourceLocation right);
    public static bool op_Inequality(SourceLocation left, SourceLocation right);
}
public class Microsoft.AspNetCore.Razor.Language.SourceMapping : object {
    [CompilerGeneratedAttribute]
private SourceSpan <OriginalSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceSpan <GeneratedSpan>k__BackingField;
    public SourceSpan OriginalSpan { get; }
    public SourceSpan GeneratedSpan { get; }
    public SourceMapping(SourceSpan originalSpan, SourceSpan generatedSpan);
    [CompilerGeneratedAttribute]
public SourceSpan get_OriginalSpan();
    [CompilerGeneratedAttribute]
public SourceSpan get_GeneratedSpan();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SourceMapping other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Microsoft.AspNetCore.Razor.Language.SourceSpan : ValueType {
    public static SourceSpan Undefined;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AbsoluteIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CharacterIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndCharacterIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    public int Length { get; }
    public int AbsoluteIndex { get; }
    public int LineIndex { get; }
    public int CharacterIndex { get; }
    public int LineCount { get; }
    public int EndCharacterIndex { get; }
    public string FilePath { get; }
    public SourceSpan(int absoluteIndex, int length);
    public SourceSpan(SourceLocation location, int contentLength);
    public SourceSpan(string filePath, int absoluteIndex, int lineIndex, int characterIndex, int length);
    public SourceSpan(string filePath, int absoluteIndex, int lineIndex, int characterIndex, int length, int lineCount, int endCharacterIndex);
    public SourceSpan(int absoluteIndex, int lineIndex, int characterIndex, int length);
    private static SourceSpan();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Length();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_AbsoluteIndex();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_LineIndex();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_CharacterIndex();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_LineCount();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_EndCharacterIndex();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_FilePath();
    public sealed virtual bool Equals(SourceSpan other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(SourceSpan left, SourceSpan right);
    public static bool op_Inequality(SourceSpan left, SourceSpan right);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Razor.Language.StreamSourceDocument : RazorSourceDocument {
    internal RazorSourceDocument _innerSourceDocument;
    private Byte[] _checksum;
    public char Item { get; }
    public Encoding Encoding { get; }
    public string FilePath { get; }
    public int Length { get; }
    public RazorSourceLineCollection Lines { get; }
    public string RelativePath { get; }
    public StreamSourceDocument(Stream stream, Encoding encoding, RazorSourceDocumentProperties properties);
    public virtual char get_Item(int position);
    public virtual Encoding get_Encoding();
    public virtual string get_FilePath();
    public virtual int get_Length();
    public virtual RazorSourceLineCollection get_Lines();
    public virtual string get_RelativePath();
    public virtual void CopyTo(int sourceIndex, Char[] destination, int destinationIndex, int count);
    public virtual Byte[] GetChecksum();
    private static Byte[] ComputeChecksum(Stream stream);
    private static RazorSourceDocument CreateInnerSourceDocument(Stream stream, Encoding encoding, RazorSourceDocumentProperties properties);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Razor.Language.StringSourceDocument : RazorSourceDocument {
    private string _content;
    private RazorSourceLineCollection _lines;
    private Byte[] _checksum;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativePath>k__BackingField;
    public char Item { get; }
    public Encoding Encoding { get; }
    public string FilePath { get; }
    public int Length { get; }
    public RazorSourceLineCollection Lines { get; }
    public string RelativePath { get; }
    public StringSourceDocument(string content, Encoding encoding, RazorSourceDocumentProperties properties);
    public virtual char get_Item(int position);
    [CompilerGeneratedAttribute]
public virtual Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public virtual string get_FilePath();
    public virtual int get_Length();
    public virtual RazorSourceLineCollection get_Lines();
    [CompilerGeneratedAttribute]
public virtual string get_RelativePath();
    public virtual void CopyTo(int sourceIndex, Char[] destination, int destinationIndex, int count);
    public virtual Byte[] GetChecksum();
}
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.Razor.Language.StringTokenizer : ValueType {
    private StringSegment _value;
    private Char[] _separators;
    public StringTokenizer(string value, Char[] separators);
    public StringTokenizer(StringSegment value, Char[] separators);
    public Enumerator GetEnumerator();
}
internal class Microsoft.AspNetCore.Razor.Language.SuppressChecksumOptionsFeature : RazorEngineFeatureBase {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public sealed virtual void Configure(RazorCodeGenerationOptionsBuilder options);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.ArrayElement`1 : ValueType {
    public T Value;
    public static T op_Implicit(ArrayElement`1<T> element);
    public static ArrayElement`1[] MakeElementArray(T[] items);
    public static T[] MakeArray(ArrayElement`1[] items);
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Razor.Language.Syntax.ChildSyntaxList : ValueType {
    private SyntaxNode _node;
    private int _count;
    public int Count { get; }
    public SyntaxNode Item { get; }
    internal SyntaxNode Node { get; }
    private SyntaxNode[] Nodes { get; }
    internal ChildSyntaxList(SyntaxNode node);
    public sealed virtual int get_Count();
    internal static int CountNodes(GreenNode green);
    public sealed virtual SyntaxNode get_Item(int index);
    internal SyntaxNode get_Node();
    private static int Occupancy(GreenNode green);
    internal static SyntaxNode ItemInternal(SyntaxNode node, int index);
    internal static SyntaxNode ChildThatContainsPosition(SyntaxNode node, int targetPosition);
    internal static SyntaxNode ItemInternalAsNode(SyntaxNode node, int index);
    private SyntaxNode[] get_Nodes();
    public bool Any();
    public SyntaxNode First();
    public SyntaxNode Last();
    public Reversed Reverse();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<SyntaxNode> System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxNode>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ChildSyntaxList other);
    public virtual int GetHashCode();
    public static bool op_Equality(ChildSyntaxList list1, ChildSyntaxList list2);
    public static bool op_Inequality(ChildSyntaxList list1, ChildSyntaxList list2);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.CSharpCodeBlockSyntax : RazorBlockSyntax {
    private SyntaxNode _children;
    public SyntaxList`1<RazorSyntaxNode> Children { get; }
    internal CSharpCodeBlockSyntax(GreenNode green, SyntaxNode parent, int position);
    public virtual SyntaxList`1<RazorSyntaxNode> get_Children();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public CSharpCodeBlockSyntax Update(SyntaxList`1<RazorSyntaxNode> children);
    internal virtual RazorBlockSyntax WithChildrenCore(SyntaxList`1<RazorSyntaxNode> children);
    public CSharpCodeBlockSyntax WithChildren(SyntaxList`1<RazorSyntaxNode> children);
    internal virtual RazorBlockSyntax AddChildrenCore(RazorSyntaxNode[] items);
    public CSharpCodeBlockSyntax AddChildren(RazorSyntaxNode[] items);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.CSharpEphemeralTextLiteralSyntax : CSharpSyntaxNode {
    private SyntaxNode _literalTokens;
    public SyntaxList`1<SyntaxToken> LiteralTokens { get; }
    internal CSharpEphemeralTextLiteralSyntax(GreenNode green, SyntaxNode parent, int position);
    public SyntaxList`1<SyntaxToken> get_LiteralTokens();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public CSharpEphemeralTextLiteralSyntax Update(SyntaxList`1<SyntaxToken> literalTokens);
    public CSharpEphemeralTextLiteralSyntax WithLiteralTokens(SyntaxList`1<SyntaxToken> literalTokens);
    public CSharpEphemeralTextLiteralSyntax AddLiteralTokens(SyntaxToken[] items);
    protected virtual string GetDebuggerDisplay();
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.CSharpExplicitExpressionBodySyntax : CSharpSyntaxNode {
    private RazorMetaCodeSyntax _openParen;
    private CSharpCodeBlockSyntax _cSharpCode;
    private RazorMetaCodeSyntax _closeParen;
    public RazorMetaCodeSyntax OpenParen { get; }
    public CSharpCodeBlockSyntax CSharpCode { get; }
    public RazorMetaCodeSyntax CloseParen { get; }
    internal CSharpExplicitExpressionBodySyntax(GreenNode green, SyntaxNode parent, int position);
    public RazorMetaCodeSyntax get_OpenParen();
    public CSharpCodeBlockSyntax get_CSharpCode();
    public RazorMetaCodeSyntax get_CloseParen();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public CSharpExplicitExpressionBodySyntax Update(RazorMetaCodeSyntax openParen, CSharpCodeBlockSyntax cSharpCode, RazorMetaCodeSyntax closeParen);
    public CSharpExplicitExpressionBodySyntax WithOpenParen(RazorMetaCodeSyntax openParen);
    public CSharpExplicitExpressionBodySyntax WithCSharpCode(CSharpCodeBlockSyntax cSharpCode);
    public CSharpExplicitExpressionBodySyntax WithCloseParen(RazorMetaCodeSyntax closeParen);
    public CSharpExplicitExpressionBodySyntax AddOpenParenMetaCode(SyntaxToken[] items);
    public CSharpExplicitExpressionBodySyntax AddCSharpCodeChildren(RazorSyntaxNode[] items);
    public CSharpExplicitExpressionBodySyntax AddCloseParenMetaCode(SyntaxToken[] items);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.CSharpExplicitExpressionSyntax : CSharpRazorBlockSyntax {
    private CSharpTransitionSyntax _transition;
    private CSharpSyntaxNode _body;
    public CSharpTransitionSyntax Transition { get; }
    public CSharpSyntaxNode Body { get; }
    internal CSharpExplicitExpressionSyntax(GreenNode green, SyntaxNode parent, int position);
    public virtual CSharpTransitionSyntax get_Transition();
    public virtual CSharpSyntaxNode get_Body();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public CSharpExplicitExpressionSyntax Update(CSharpTransitionSyntax transition, CSharpSyntaxNode body);
    internal virtual CSharpRazorBlockSyntax WithTransitionCore(CSharpTransitionSyntax transition);
    public CSharpExplicitExpressionSyntax WithTransition(CSharpTransitionSyntax transition);
    internal virtual CSharpRazorBlockSyntax WithBodyCore(CSharpSyntaxNode body);
    public CSharpExplicitExpressionSyntax WithBody(CSharpSyntaxNode body);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.CSharpExpressionLiteralSyntax : CSharpSyntaxNode {
    private SyntaxNode _literalTokens;
    public SyntaxList`1<SyntaxToken> LiteralTokens { get; }
    internal CSharpExpressionLiteralSyntax(GreenNode green, SyntaxNode parent, int position);
    public SyntaxList`1<SyntaxToken> get_LiteralTokens();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public CSharpExpressionLiteralSyntax Update(SyntaxList`1<SyntaxToken> literalTokens);
    public CSharpExpressionLiteralSyntax WithLiteralTokens(SyntaxList`1<SyntaxToken> literalTokens);
    public CSharpExpressionLiteralSyntax AddLiteralTokens(SyntaxToken[] items);
    protected virtual string GetDebuggerDisplay();
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.CSharpImplicitExpressionBodySyntax : CSharpSyntaxNode {
    private CSharpCodeBlockSyntax _cSharpCode;
    public CSharpCodeBlockSyntax CSharpCode { get; }
    internal CSharpImplicitExpressionBodySyntax(GreenNode green, SyntaxNode parent, int position);
    public CSharpCodeBlockSyntax get_CSharpCode();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public CSharpImplicitExpressionBodySyntax Update(CSharpCodeBlockSyntax cSharpCode);
    public CSharpImplicitExpressionBodySyntax WithCSharpCode(CSharpCodeBlockSyntax cSharpCode);
    public CSharpImplicitExpressionBodySyntax AddCSharpCodeChildren(RazorSyntaxNode[] items);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.CSharpImplicitExpressionSyntax : CSharpRazorBlockSyntax {
    private CSharpTransitionSyntax _transition;
    private CSharpSyntaxNode _body;
    public CSharpTransitionSyntax Transition { get; }
    public CSharpSyntaxNode Body { get; }
    internal CSharpImplicitExpressionSyntax(GreenNode green, SyntaxNode parent, int position);
    public virtual CSharpTransitionSyntax get_Transition();
    public virtual CSharpSyntaxNode get_Body();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public CSharpImplicitExpressionSyntax Update(CSharpTransitionSyntax transition, CSharpSyntaxNode body);
    internal virtual CSharpRazorBlockSyntax WithTransitionCore(CSharpTransitionSyntax transition);
    public CSharpImplicitExpressionSyntax WithTransition(CSharpTransitionSyntax transition);
    internal virtual CSharpRazorBlockSyntax WithBodyCore(CSharpSyntaxNode body);
    public CSharpImplicitExpressionSyntax WithBody(CSharpSyntaxNode body);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Syntax.CSharpRazorBlockSyntax : CSharpSyntaxNode {
    public CSharpTransitionSyntax Transition { get; }
    public CSharpSyntaxNode Body { get; }
    internal CSharpRazorBlockSyntax(GreenNode green, SyntaxNode parent, int position);
    public abstract virtual CSharpTransitionSyntax get_Transition();
    public CSharpRazorBlockSyntax WithTransition(CSharpTransitionSyntax transition);
    internal abstract virtual CSharpRazorBlockSyntax WithTransitionCore(CSharpTransitionSyntax transition);
    public abstract virtual CSharpSyntaxNode get_Body();
    public CSharpRazorBlockSyntax WithBody(CSharpSyntaxNode body);
    internal abstract virtual CSharpRazorBlockSyntax WithBodyCore(CSharpSyntaxNode body);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.CSharpStatementBodySyntax : CSharpSyntaxNode {
    private RazorMetaCodeSyntax _openBrace;
    private CSharpCodeBlockSyntax _cSharpCode;
    private RazorMetaCodeSyntax _closeBrace;
    public RazorMetaCodeSyntax OpenBrace { get; }
    public CSharpCodeBlockSyntax CSharpCode { get; }
    public RazorMetaCodeSyntax CloseBrace { get; }
    internal CSharpStatementBodySyntax(GreenNode green, SyntaxNode parent, int position);
    public RazorMetaCodeSyntax get_OpenBrace();
    public CSharpCodeBlockSyntax get_CSharpCode();
    public RazorMetaCodeSyntax get_CloseBrace();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public CSharpStatementBodySyntax Update(RazorMetaCodeSyntax openBrace, CSharpCodeBlockSyntax cSharpCode, RazorMetaCodeSyntax closeBrace);
    public CSharpStatementBodySyntax WithOpenBrace(RazorMetaCodeSyntax openBrace);
    public CSharpStatementBodySyntax WithCSharpCode(CSharpCodeBlockSyntax cSharpCode);
    public CSharpStatementBodySyntax WithCloseBrace(RazorMetaCodeSyntax closeBrace);
    public CSharpStatementBodySyntax AddOpenBraceMetaCode(SyntaxToken[] items);
    public CSharpStatementBodySyntax AddCSharpCodeChildren(RazorSyntaxNode[] items);
    public CSharpStatementBodySyntax AddCloseBraceMetaCode(SyntaxToken[] items);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.CSharpStatementLiteralSyntax : CSharpSyntaxNode {
    private SyntaxNode _literalTokens;
    public SyntaxList`1<SyntaxToken> LiteralTokens { get; }
    internal CSharpStatementLiteralSyntax(GreenNode green, SyntaxNode parent, int position);
    public SyntaxList`1<SyntaxToken> get_LiteralTokens();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public CSharpStatementLiteralSyntax Update(SyntaxList`1<SyntaxToken> literalTokens);
    public CSharpStatementLiteralSyntax WithLiteralTokens(SyntaxList`1<SyntaxToken> literalTokens);
    public CSharpStatementLiteralSyntax AddLiteralTokens(SyntaxToken[] items);
    protected virtual string GetDebuggerDisplay();
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.CSharpStatementSyntax : CSharpRazorBlockSyntax {
    private CSharpTransitionSyntax _transition;
    private CSharpSyntaxNode _body;
    public CSharpTransitionSyntax Transition { get; }
    public CSharpSyntaxNode Body { get; }
    internal CSharpStatementSyntax(GreenNode green, SyntaxNode parent, int position);
    public virtual CSharpTransitionSyntax get_Transition();
    public virtual CSharpSyntaxNode get_Body();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public CSharpStatementSyntax Update(CSharpTransitionSyntax transition, CSharpSyntaxNode body);
    internal virtual CSharpRazorBlockSyntax WithTransitionCore(CSharpTransitionSyntax transition);
    public CSharpStatementSyntax WithTransition(CSharpTransitionSyntax transition);
    internal virtual CSharpRazorBlockSyntax WithBodyCore(CSharpSyntaxNode body);
    public CSharpStatementSyntax WithBody(CSharpSyntaxNode body);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Syntax.CSharpSyntaxNode : RazorSyntaxNode {
    internal CSharpSyntaxNode(GreenNode green, SyntaxNode parent, int position);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.CSharpTemplateBlockSyntax : RazorBlockSyntax {
    private SyntaxNode _children;
    public SyntaxList`1<RazorSyntaxNode> Children { get; }
    internal CSharpTemplateBlockSyntax(GreenNode green, SyntaxNode parent, int position);
    public virtual SyntaxList`1<RazorSyntaxNode> get_Children();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public CSharpTemplateBlockSyntax Update(SyntaxList`1<RazorSyntaxNode> children);
    internal virtual RazorBlockSyntax WithChildrenCore(SyntaxList`1<RazorSyntaxNode> children);
    public CSharpTemplateBlockSyntax WithChildren(SyntaxList`1<RazorSyntaxNode> children);
    internal virtual RazorBlockSyntax AddChildrenCore(RazorSyntaxNode[] items);
    public CSharpTemplateBlockSyntax AddChildren(RazorSyntaxNode[] items);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.CSharpTransitionSyntax : CSharpSyntaxNode {
    private SyntaxToken _transition;
    public SyntaxToken Transition { get; }
    internal CSharpTransitionSyntax(GreenNode green, SyntaxNode parent, int position);
    public SyntaxToken get_Transition();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public CSharpTransitionSyntax Update(SyntaxToken transition);
    public CSharpTransitionSyntax WithTransition(SyntaxToken transition);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.GenericBlockSyntax : RazorBlockSyntax {
    private SyntaxNode _children;
    public SyntaxList`1<RazorSyntaxNode> Children { get; }
    internal GenericBlockSyntax(GreenNode green, SyntaxNode parent, int position);
    public virtual SyntaxList`1<RazorSyntaxNode> get_Children();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public GenericBlockSyntax Update(SyntaxList`1<RazorSyntaxNode> children);
    internal virtual RazorBlockSyntax WithChildrenCore(SyntaxList`1<RazorSyntaxNode> children);
    public GenericBlockSyntax WithChildren(SyntaxList`1<RazorSyntaxNode> children);
    internal virtual RazorBlockSyntax AddChildrenCore(RazorSyntaxNode[] items);
    public GenericBlockSyntax AddChildren(RazorSyntaxNode[] items);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Syntax.GreenNode : object {
    private static RazorDiagnostic[] EmptyDiagnostics;
    private static SyntaxAnnotation[] EmptyAnnotations;
    private static ConditionalWeakTable`2<GreenNode, RazorDiagnostic[]> DiagnosticsTable;
    private static ConditionalWeakTable`2<GreenNode, SyntaxAnnotation[]> AnnotationsTable;
    private byte _slotCount;
    [CompilerGeneratedAttribute]
private SyntaxKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FullWidth>k__BackingField;
    internal SyntaxKind Kind { get; }
    internal bool IsList { get; }
    internal bool IsToken { get; }
    internal bool IsTrivia { get; }
    public int SlotCount { get; protected set; }
    public NodeFlags Flags { get; protected set; }
    internal bool IsMissing { get; }
    public bool ContainsDiagnostics { get; }
    public bool ContainsAnnotations { get; }
    internal int FullWidth { get; private set; }
    public int Width { get; }
    public bool HasLeadingTrivia { get; }
    public bool HasTrailingTrivia { get; }
    protected GreenNode(SyntaxKind kind);
    protected GreenNode(SyntaxKind kind, int fullWidth);
    protected GreenNode(SyntaxKind kind, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    protected GreenNode(SyntaxKind kind, int fullWidth, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    private static GreenNode();
    protected void AdjustFlagsAndWidth(GreenNode node);
    [CompilerGeneratedAttribute]
internal SyntaxKind get_Kind();
    internal virtual bool get_IsList();
    internal virtual bool get_IsToken();
    internal virtual bool get_IsTrivia();
    public int get_SlotCount();
    protected void set_SlotCount(int value);
    internal abstract virtual GreenNode GetSlot(int index);
    protected virtual int GetSlotCount();
    public virtual int GetSlotOffset(int index);
    public virtual int FindSlotIndexContainingOffset(int offset);
    [CompilerGeneratedAttribute]
public NodeFlags get_Flags();
    [CompilerGeneratedAttribute]
protected void set_Flags(NodeFlags value);
    internal void SetFlags(NodeFlags flags);
    internal void ClearFlags(NodeFlags flags);
    internal virtual bool get_IsMissing();
    public bool get_ContainsDiagnostics();
    public bool get_ContainsAnnotations();
    [CompilerGeneratedAttribute]
internal int get_FullWidth();
    [CompilerGeneratedAttribute]
private void set_FullWidth(int value);
    public virtual int get_Width();
    public virtual int GetLeadingTriviaWidth();
    public virtual int GetTrailingTriviaWidth();
    public bool get_HasLeadingTrivia();
    public bool get_HasTrailingTrivia();
    internal abstract virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal RazorDiagnostic[] GetDiagnostics();
    internal abstract virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
    internal SyntaxAnnotation[] GetAnnotations();
    public virtual string ToString();
    public virtual string ToFullString();
    public virtual void WriteTo(TextWriter writer);
    protected internal void WriteTo(TextWriter writer, bool leading, bool trailing);
    protected virtual void WriteTriviaTo(TextWriter writer);
    protected virtual void WriteTokenTo(TextWriter writer, bool leading, bool trailing);
    public virtual object GetValue();
    public virtual string GetValueText();
    public virtual GreenNode GetLeadingTrivia();
    public virtual GreenNode GetTrailingTrivia();
    public virtual GreenNode WithLeadingTrivia(GreenNode trivia);
    public virtual GreenNode WithTrailingTrivia(GreenNode trivia);
    public SyntaxToken GetFirstToken();
    public SyntaxToken GetLastToken();
    internal GreenNode GetFirstTerminal();
    internal GreenNode GetLastTerminal();
    public virtual bool IsEquivalentTo(GreenNode other);
    private static bool EquivalentToInternal(GreenNode node1, GreenNode node2);
    public virtual GreenNode CreateList(IEnumerable`1<GreenNode> nodes, bool alwaysCreateListNode);
    public SyntaxNode CreateRed();
    internal abstract virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public abstract virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public abstract virtual void Accept(SyntaxVisitor visitor);
    private static void ProcessStack(TextWriter writer, Stack`1<StackEntry> stack);
    private static int GetFirstNonNullChildIndex(GreenNode node);
    private static int GetLastNonNullChildIndex(GreenNode node);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Razor.Language.Syntax.GreenNodeExtensions : object {
    [ExtensionAttribute]
internal static SyntaxList`1<T> ToGreenList(SyntaxNode node);
    [ExtensionAttribute]
internal static SyntaxList`1<T> ToGreenList(GreenNode node);
    [ExtensionAttribute]
public static TNode WithAnnotationsGreen(TNode node, SyntaxAnnotation[] annotations);
    [ExtensionAttribute]
public static TNode WithDiagnosticsGreen(TNode node, RazorDiagnostic[] diagnostics);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.CSharpCodeBlockSyntax : RazorBlockSyntax {
    private GreenNode _children;
    public SyntaxList`1<RazorSyntaxNode> Children { get; }
    internal CSharpCodeBlockSyntax(SyntaxKind kind, GreenNode children, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal CSharpCodeBlockSyntax(SyntaxKind kind, GreenNode children);
    public virtual SyntaxList`1<RazorSyntaxNode> get_Children();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public CSharpCodeBlockSyntax Update(SyntaxList`1<RazorSyntaxNode> children);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.CSharpEphemeralTextLiteralSyntax : CSharpSyntaxNode {
    private GreenNode _literalTokens;
    public SyntaxList`1<SyntaxToken> LiteralTokens { get; }
    internal CSharpEphemeralTextLiteralSyntax(SyntaxKind kind, GreenNode literalTokens, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal CSharpEphemeralTextLiteralSyntax(SyntaxKind kind, GreenNode literalTokens);
    public SyntaxList`1<SyntaxToken> get_LiteralTokens();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public CSharpEphemeralTextLiteralSyntax Update(SyntaxList`1<SyntaxToken> literalTokens);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.CSharpExplicitExpressionBodySyntax : CSharpSyntaxNode {
    private RazorMetaCodeSyntax _openParen;
    private CSharpCodeBlockSyntax _cSharpCode;
    private RazorMetaCodeSyntax _closeParen;
    public RazorMetaCodeSyntax OpenParen { get; }
    public CSharpCodeBlockSyntax CSharpCode { get; }
    public RazorMetaCodeSyntax CloseParen { get; }
    internal CSharpExplicitExpressionBodySyntax(SyntaxKind kind, RazorMetaCodeSyntax openParen, CSharpCodeBlockSyntax cSharpCode, RazorMetaCodeSyntax closeParen, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal CSharpExplicitExpressionBodySyntax(SyntaxKind kind, RazorMetaCodeSyntax openParen, CSharpCodeBlockSyntax cSharpCode, RazorMetaCodeSyntax closeParen);
    public RazorMetaCodeSyntax get_OpenParen();
    public CSharpCodeBlockSyntax get_CSharpCode();
    public RazorMetaCodeSyntax get_CloseParen();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public CSharpExplicitExpressionBodySyntax Update(RazorMetaCodeSyntax openParen, CSharpCodeBlockSyntax cSharpCode, RazorMetaCodeSyntax closeParen);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.CSharpExplicitExpressionSyntax : CSharpRazorBlockSyntax {
    private CSharpTransitionSyntax _transition;
    private CSharpSyntaxNode _body;
    public CSharpTransitionSyntax Transition { get; }
    public CSharpSyntaxNode Body { get; }
    internal CSharpExplicitExpressionSyntax(SyntaxKind kind, CSharpTransitionSyntax transition, CSharpSyntaxNode body, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal CSharpExplicitExpressionSyntax(SyntaxKind kind, CSharpTransitionSyntax transition, CSharpSyntaxNode body);
    public virtual CSharpTransitionSyntax get_Transition();
    public virtual CSharpSyntaxNode get_Body();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public CSharpExplicitExpressionSyntax Update(CSharpTransitionSyntax transition, CSharpSyntaxNode body);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.CSharpExpressionLiteralSyntax : CSharpSyntaxNode {
    private GreenNode _literalTokens;
    public SyntaxList`1<SyntaxToken> LiteralTokens { get; }
    internal CSharpExpressionLiteralSyntax(SyntaxKind kind, GreenNode literalTokens, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal CSharpExpressionLiteralSyntax(SyntaxKind kind, GreenNode literalTokens);
    public SyntaxList`1<SyntaxToken> get_LiteralTokens();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public CSharpExpressionLiteralSyntax Update(SyntaxList`1<SyntaxToken> literalTokens);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.CSharpImplicitExpressionBodySyntax : CSharpSyntaxNode {
    private CSharpCodeBlockSyntax _cSharpCode;
    public CSharpCodeBlockSyntax CSharpCode { get; }
    internal CSharpImplicitExpressionBodySyntax(SyntaxKind kind, CSharpCodeBlockSyntax cSharpCode, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal CSharpImplicitExpressionBodySyntax(SyntaxKind kind, CSharpCodeBlockSyntax cSharpCode);
    public CSharpCodeBlockSyntax get_CSharpCode();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public CSharpImplicitExpressionBodySyntax Update(CSharpCodeBlockSyntax cSharpCode);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.CSharpImplicitExpressionSyntax : CSharpRazorBlockSyntax {
    private CSharpTransitionSyntax _transition;
    private CSharpSyntaxNode _body;
    public CSharpTransitionSyntax Transition { get; }
    public CSharpSyntaxNode Body { get; }
    internal CSharpImplicitExpressionSyntax(SyntaxKind kind, CSharpTransitionSyntax transition, CSharpSyntaxNode body, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal CSharpImplicitExpressionSyntax(SyntaxKind kind, CSharpTransitionSyntax transition, CSharpSyntaxNode body);
    public virtual CSharpTransitionSyntax get_Transition();
    public virtual CSharpSyntaxNode get_Body();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public CSharpImplicitExpressionSyntax Update(CSharpTransitionSyntax transition, CSharpSyntaxNode body);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.CSharpRazorBlockSyntax : CSharpSyntaxNode {
    public CSharpTransitionSyntax Transition { get; }
    public CSharpSyntaxNode Body { get; }
    internal CSharpRazorBlockSyntax(SyntaxKind kind, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal CSharpRazorBlockSyntax(SyntaxKind kind);
    public abstract virtual CSharpTransitionSyntax get_Transition();
    public abstract virtual CSharpSyntaxNode get_Body();
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.CSharpStatementBodySyntax : CSharpSyntaxNode {
    private RazorMetaCodeSyntax _openBrace;
    private CSharpCodeBlockSyntax _cSharpCode;
    private RazorMetaCodeSyntax _closeBrace;
    public RazorMetaCodeSyntax OpenBrace { get; }
    public CSharpCodeBlockSyntax CSharpCode { get; }
    public RazorMetaCodeSyntax CloseBrace { get; }
    internal CSharpStatementBodySyntax(SyntaxKind kind, RazorMetaCodeSyntax openBrace, CSharpCodeBlockSyntax cSharpCode, RazorMetaCodeSyntax closeBrace, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal CSharpStatementBodySyntax(SyntaxKind kind, RazorMetaCodeSyntax openBrace, CSharpCodeBlockSyntax cSharpCode, RazorMetaCodeSyntax closeBrace);
    public RazorMetaCodeSyntax get_OpenBrace();
    public CSharpCodeBlockSyntax get_CSharpCode();
    public RazorMetaCodeSyntax get_CloseBrace();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public CSharpStatementBodySyntax Update(RazorMetaCodeSyntax openBrace, CSharpCodeBlockSyntax cSharpCode, RazorMetaCodeSyntax closeBrace);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.CSharpStatementLiteralSyntax : CSharpSyntaxNode {
    private GreenNode _literalTokens;
    public SyntaxList`1<SyntaxToken> LiteralTokens { get; }
    internal CSharpStatementLiteralSyntax(SyntaxKind kind, GreenNode literalTokens, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal CSharpStatementLiteralSyntax(SyntaxKind kind, GreenNode literalTokens);
    public SyntaxList`1<SyntaxToken> get_LiteralTokens();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public CSharpStatementLiteralSyntax Update(SyntaxList`1<SyntaxToken> literalTokens);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.CSharpStatementSyntax : CSharpRazorBlockSyntax {
    private CSharpTransitionSyntax _transition;
    private CSharpSyntaxNode _body;
    public CSharpTransitionSyntax Transition { get; }
    public CSharpSyntaxNode Body { get; }
    internal CSharpStatementSyntax(SyntaxKind kind, CSharpTransitionSyntax transition, CSharpSyntaxNode body, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal CSharpStatementSyntax(SyntaxKind kind, CSharpTransitionSyntax transition, CSharpSyntaxNode body);
    public virtual CSharpTransitionSyntax get_Transition();
    public virtual CSharpSyntaxNode get_Body();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public CSharpStatementSyntax Update(CSharpTransitionSyntax transition, CSharpSyntaxNode body);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.CSharpSyntaxNode : RazorSyntaxNode {
    internal CSharpSyntaxNode(SyntaxKind kind, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal CSharpSyntaxNode(SyntaxKind kind);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.CSharpTemplateBlockSyntax : RazorBlockSyntax {
    private GreenNode _children;
    public SyntaxList`1<RazorSyntaxNode> Children { get; }
    internal CSharpTemplateBlockSyntax(SyntaxKind kind, GreenNode children, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal CSharpTemplateBlockSyntax(SyntaxKind kind, GreenNode children);
    public virtual SyntaxList`1<RazorSyntaxNode> get_Children();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public CSharpTemplateBlockSyntax Update(SyntaxList`1<RazorSyntaxNode> children);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.CSharpTransitionSyntax : CSharpSyntaxNode {
    private SyntaxToken _transition;
    public SyntaxToken Transition { get; }
    internal CSharpTransitionSyntax(SyntaxKind kind, SyntaxToken transition, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal CSharpTransitionSyntax(SyntaxKind kind, SyntaxToken transition);
    public SyntaxToken get_Transition();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public CSharpTransitionSyntax Update(SyntaxToken transition);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.GenericBlockSyntax : RazorBlockSyntax {
    private GreenNode _children;
    public SyntaxList`1<RazorSyntaxNode> Children { get; }
    internal GenericBlockSyntax(SyntaxKind kind, GreenNode children, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal GenericBlockSyntax(SyntaxKind kind, GreenNode children);
    public virtual SyntaxList`1<RazorSyntaxNode> get_Children();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public GenericBlockSyntax Update(SyntaxList`1<RazorSyntaxNode> children);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.MarkupAttributeBlockSyntax : MarkupSyntaxNode {
    private MarkupTextLiteralSyntax _namePrefix;
    private MarkupTextLiteralSyntax _name;
    private MarkupTextLiteralSyntax _nameSuffix;
    private SyntaxToken _equalsToken;
    private MarkupTextLiteralSyntax _valuePrefix;
    private RazorBlockSyntax _value;
    private MarkupTextLiteralSyntax _valueSuffix;
    public MarkupTextLiteralSyntax NamePrefix { get; }
    public MarkupTextLiteralSyntax Name { get; }
    public MarkupTextLiteralSyntax NameSuffix { get; }
    public SyntaxToken EqualsToken { get; }
    public MarkupTextLiteralSyntax ValuePrefix { get; }
    public RazorBlockSyntax Value { get; }
    public MarkupTextLiteralSyntax ValueSuffix { get; }
    internal MarkupAttributeBlockSyntax(SyntaxKind kind, MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name, MarkupTextLiteralSyntax nameSuffix, SyntaxToken equalsToken, MarkupTextLiteralSyntax valuePrefix, RazorBlockSyntax value, MarkupTextLiteralSyntax valueSuffix, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal MarkupAttributeBlockSyntax(SyntaxKind kind, MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name, MarkupTextLiteralSyntax nameSuffix, SyntaxToken equalsToken, MarkupTextLiteralSyntax valuePrefix, RazorBlockSyntax value, MarkupTextLiteralSyntax valueSuffix);
    public MarkupTextLiteralSyntax get_NamePrefix();
    public MarkupTextLiteralSyntax get_Name();
    public MarkupTextLiteralSyntax get_NameSuffix();
    public SyntaxToken get_EqualsToken();
    public MarkupTextLiteralSyntax get_ValuePrefix();
    public RazorBlockSyntax get_Value();
    public MarkupTextLiteralSyntax get_ValueSuffix();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupAttributeBlockSyntax Update(MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name, MarkupTextLiteralSyntax nameSuffix, SyntaxToken equalsToken, MarkupTextLiteralSyntax valuePrefix, RazorBlockSyntax value, MarkupTextLiteralSyntax valueSuffix);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.MarkupBlockSyntax : RazorBlockSyntax {
    private GreenNode _children;
    public SyntaxList`1<RazorSyntaxNode> Children { get; }
    internal MarkupBlockSyntax(SyntaxKind kind, GreenNode children, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal MarkupBlockSyntax(SyntaxKind kind, GreenNode children);
    public virtual SyntaxList`1<RazorSyntaxNode> get_Children();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupBlockSyntax Update(SyntaxList`1<RazorSyntaxNode> children);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.MarkupCommentBlockSyntax : RazorBlockSyntax {
    private GreenNode _children;
    public SyntaxList`1<RazorSyntaxNode> Children { get; }
    internal MarkupCommentBlockSyntax(SyntaxKind kind, GreenNode children, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal MarkupCommentBlockSyntax(SyntaxKind kind, GreenNode children);
    public virtual SyntaxList`1<RazorSyntaxNode> get_Children();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupCommentBlockSyntax Update(SyntaxList`1<RazorSyntaxNode> children);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.MarkupDynamicAttributeValueSyntax : MarkupSyntaxNode {
    private MarkupTextLiteralSyntax _prefix;
    private RazorBlockSyntax _value;
    public MarkupTextLiteralSyntax Prefix { get; }
    public RazorBlockSyntax Value { get; }
    internal MarkupDynamicAttributeValueSyntax(SyntaxKind kind, MarkupTextLiteralSyntax prefix, RazorBlockSyntax value, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal MarkupDynamicAttributeValueSyntax(SyntaxKind kind, MarkupTextLiteralSyntax prefix, RazorBlockSyntax value);
    public MarkupTextLiteralSyntax get_Prefix();
    public RazorBlockSyntax get_Value();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupDynamicAttributeValueSyntax Update(MarkupTextLiteralSyntax prefix, RazorBlockSyntax value);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.MarkupElementSyntax : MarkupSyntaxNode {
    private MarkupStartTagSyntax _startTag;
    private GreenNode _body;
    private MarkupEndTagSyntax _endTag;
    public MarkupStartTagSyntax StartTag { get; }
    public SyntaxList`1<RazorSyntaxNode> Body { get; }
    public MarkupEndTagSyntax EndTag { get; }
    internal MarkupElementSyntax(SyntaxKind kind, MarkupStartTagSyntax startTag, GreenNode body, MarkupEndTagSyntax endTag, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal MarkupElementSyntax(SyntaxKind kind, MarkupStartTagSyntax startTag, GreenNode body, MarkupEndTagSyntax endTag);
    public MarkupStartTagSyntax get_StartTag();
    public SyntaxList`1<RazorSyntaxNode> get_Body();
    public MarkupEndTagSyntax get_EndTag();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupElementSyntax Update(MarkupStartTagSyntax startTag, SyntaxList`1<RazorSyntaxNode> body, MarkupEndTagSyntax endTag);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.MarkupEndTagSyntax : MarkupSyntaxNode {
    private SyntaxToken _openAngle;
    private SyntaxToken _forwardSlash;
    private SyntaxToken _bang;
    private SyntaxToken _name;
    private MarkupMiscAttributeContentSyntax _miscAttributeContent;
    private SyntaxToken _closeAngle;
    private static string MarkupTransitionKey;
    public SyntaxToken OpenAngle { get; }
    public SyntaxToken ForwardSlash { get; }
    public SyntaxToken Bang { get; }
    public SyntaxToken Name { get; }
    public MarkupMiscAttributeContentSyntax MiscAttributeContent { get; }
    public SyntaxToken CloseAngle { get; }
    public bool IsMarkupTransition { get; }
    internal MarkupEndTagSyntax(SyntaxKind kind, SyntaxToken openAngle, SyntaxToken forwardSlash, SyntaxToken bang, SyntaxToken name, MarkupMiscAttributeContentSyntax miscAttributeContent, SyntaxToken closeAngle, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal MarkupEndTagSyntax(SyntaxKind kind, SyntaxToken openAngle, SyntaxToken forwardSlash, SyntaxToken bang, SyntaxToken name, MarkupMiscAttributeContentSyntax miscAttributeContent, SyntaxToken closeAngle);
    public SyntaxToken get_OpenAngle();
    public SyntaxToken get_ForwardSlash();
    public SyntaxToken get_Bang();
    public SyntaxToken get_Name();
    public MarkupMiscAttributeContentSyntax get_MiscAttributeContent();
    public SyntaxToken get_CloseAngle();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupEndTagSyntax Update(SyntaxToken openAngle, SyntaxToken forwardSlash, SyntaxToken bang, SyntaxToken name, MarkupMiscAttributeContentSyntax miscAttributeContent, SyntaxToken closeAngle);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
    public bool get_IsMarkupTransition();
    public MarkupEndTagSyntax AsMarkupTransition();
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.MarkupEphemeralTextLiteralSyntax : MarkupSyntaxNode {
    private GreenNode _literalTokens;
    public SyntaxList`1<SyntaxToken> LiteralTokens { get; }
    internal MarkupEphemeralTextLiteralSyntax(SyntaxKind kind, GreenNode literalTokens, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal MarkupEphemeralTextLiteralSyntax(SyntaxKind kind, GreenNode literalTokens);
    public SyntaxList`1<SyntaxToken> get_LiteralTokens();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupEphemeralTextLiteralSyntax Update(SyntaxList`1<SyntaxToken> literalTokens);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.MarkupLiteralAttributeValueSyntax : MarkupSyntaxNode {
    private MarkupTextLiteralSyntax _prefix;
    private MarkupTextLiteralSyntax _value;
    public MarkupTextLiteralSyntax Prefix { get; }
    public MarkupTextLiteralSyntax Value { get; }
    internal MarkupLiteralAttributeValueSyntax(SyntaxKind kind, MarkupTextLiteralSyntax prefix, MarkupTextLiteralSyntax value, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal MarkupLiteralAttributeValueSyntax(SyntaxKind kind, MarkupTextLiteralSyntax prefix, MarkupTextLiteralSyntax value);
    public MarkupTextLiteralSyntax get_Prefix();
    public MarkupTextLiteralSyntax get_Value();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupLiteralAttributeValueSyntax Update(MarkupTextLiteralSyntax prefix, MarkupTextLiteralSyntax value);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.MarkupMinimizedAttributeBlockSyntax : MarkupSyntaxNode {
    private MarkupTextLiteralSyntax _namePrefix;
    private MarkupTextLiteralSyntax _name;
    public MarkupTextLiteralSyntax NamePrefix { get; }
    public MarkupTextLiteralSyntax Name { get; }
    internal MarkupMinimizedAttributeBlockSyntax(SyntaxKind kind, MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal MarkupMinimizedAttributeBlockSyntax(SyntaxKind kind, MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name);
    public MarkupTextLiteralSyntax get_NamePrefix();
    public MarkupTextLiteralSyntax get_Name();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupMinimizedAttributeBlockSyntax Update(MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.MarkupMinimizedTagHelperAttributeSyntax : MarkupSyntaxNode {
    private MarkupTextLiteralSyntax _namePrefix;
    private MarkupTextLiteralSyntax _name;
    public MarkupTextLiteralSyntax NamePrefix { get; }
    public MarkupTextLiteralSyntax Name { get; }
    internal MarkupMinimizedTagHelperAttributeSyntax(SyntaxKind kind, MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal MarkupMinimizedTagHelperAttributeSyntax(SyntaxKind kind, MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name);
    public MarkupTextLiteralSyntax get_NamePrefix();
    public MarkupTextLiteralSyntax get_Name();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupMinimizedTagHelperAttributeSyntax Update(MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.MarkupMinimizedTagHelperDirectiveAttributeSyntax : MarkupSyntaxNode {
    private MarkupTextLiteralSyntax _namePrefix;
    private RazorMetaCodeSyntax _transition;
    private MarkupTextLiteralSyntax _name;
    private RazorMetaCodeSyntax _colon;
    private MarkupTextLiteralSyntax _parameterName;
    public MarkupTextLiteralSyntax NamePrefix { get; }
    public RazorMetaCodeSyntax Transition { get; }
    public MarkupTextLiteralSyntax Name { get; }
    public RazorMetaCodeSyntax Colon { get; }
    public MarkupTextLiteralSyntax ParameterName { get; }
    internal MarkupMinimizedTagHelperDirectiveAttributeSyntax(SyntaxKind kind, MarkupTextLiteralSyntax namePrefix, RazorMetaCodeSyntax transition, MarkupTextLiteralSyntax name, RazorMetaCodeSyntax colon, MarkupTextLiteralSyntax parameterName, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal MarkupMinimizedTagHelperDirectiveAttributeSyntax(SyntaxKind kind, MarkupTextLiteralSyntax namePrefix, RazorMetaCodeSyntax transition, MarkupTextLiteralSyntax name, RazorMetaCodeSyntax colon, MarkupTextLiteralSyntax parameterName);
    public MarkupTextLiteralSyntax get_NamePrefix();
    public RazorMetaCodeSyntax get_Transition();
    public MarkupTextLiteralSyntax get_Name();
    public RazorMetaCodeSyntax get_Colon();
    public MarkupTextLiteralSyntax get_ParameterName();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupMinimizedTagHelperDirectiveAttributeSyntax Update(MarkupTextLiteralSyntax namePrefix, RazorMetaCodeSyntax transition, MarkupTextLiteralSyntax name, RazorMetaCodeSyntax colon, MarkupTextLiteralSyntax parameterName);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.MarkupMiscAttributeContentSyntax : MarkupSyntaxNode {
    private GreenNode _children;
    public SyntaxList`1<RazorSyntaxNode> Children { get; }
    internal MarkupMiscAttributeContentSyntax(SyntaxKind kind, GreenNode children, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal MarkupMiscAttributeContentSyntax(SyntaxKind kind, GreenNode children);
    public SyntaxList`1<RazorSyntaxNode> get_Children();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupMiscAttributeContentSyntax Update(SyntaxList`1<RazorSyntaxNode> children);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.MarkupStartTagSyntax : MarkupSyntaxNode {
    private SyntaxToken _openAngle;
    private SyntaxToken _bang;
    private SyntaxToken _name;
    private GreenNode _attributes;
    private SyntaxToken _forwardSlash;
    private SyntaxToken _closeAngle;
    private static string MarkupTransitionKey;
    public SyntaxToken OpenAngle { get; }
    public SyntaxToken Bang { get; }
    public SyntaxToken Name { get; }
    public SyntaxList`1<RazorSyntaxNode> Attributes { get; }
    public SyntaxToken ForwardSlash { get; }
    public SyntaxToken CloseAngle { get; }
    public bool IsMarkupTransition { get; }
    internal MarkupStartTagSyntax(SyntaxKind kind, SyntaxToken openAngle, SyntaxToken bang, SyntaxToken name, GreenNode attributes, SyntaxToken forwardSlash, SyntaxToken closeAngle, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal MarkupStartTagSyntax(SyntaxKind kind, SyntaxToken openAngle, SyntaxToken bang, SyntaxToken name, GreenNode attributes, SyntaxToken forwardSlash, SyntaxToken closeAngle);
    public SyntaxToken get_OpenAngle();
    public SyntaxToken get_Bang();
    public SyntaxToken get_Name();
    public SyntaxList`1<RazorSyntaxNode> get_Attributes();
    public SyntaxToken get_ForwardSlash();
    public SyntaxToken get_CloseAngle();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupStartTagSyntax Update(SyntaxToken openAngle, SyntaxToken bang, SyntaxToken name, SyntaxList`1<RazorSyntaxNode> attributes, SyntaxToken forwardSlash, SyntaxToken closeAngle);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
    public bool get_IsMarkupTransition();
    public MarkupStartTagSyntax AsMarkupTransition();
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.MarkupSyntaxNode : RazorSyntaxNode {
    internal MarkupSyntaxNode(SyntaxKind kind, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal MarkupSyntaxNode(SyntaxKind kind);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.MarkupTagHelperAttributeSyntax : MarkupSyntaxNode {
    private MarkupTextLiteralSyntax _namePrefix;
    private MarkupTextLiteralSyntax _name;
    private MarkupTextLiteralSyntax _nameSuffix;
    private SyntaxToken _equalsToken;
    private MarkupTextLiteralSyntax _valuePrefix;
    private MarkupTagHelperAttributeValueSyntax _value;
    private MarkupTextLiteralSyntax _valueSuffix;
    public MarkupTextLiteralSyntax NamePrefix { get; }
    public MarkupTextLiteralSyntax Name { get; }
    public MarkupTextLiteralSyntax NameSuffix { get; }
    public SyntaxToken EqualsToken { get; }
    public MarkupTextLiteralSyntax ValuePrefix { get; }
    public MarkupTagHelperAttributeValueSyntax Value { get; }
    public MarkupTextLiteralSyntax ValueSuffix { get; }
    internal MarkupTagHelperAttributeSyntax(SyntaxKind kind, MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name, MarkupTextLiteralSyntax nameSuffix, SyntaxToken equalsToken, MarkupTextLiteralSyntax valuePrefix, MarkupTagHelperAttributeValueSyntax value, MarkupTextLiteralSyntax valueSuffix, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal MarkupTagHelperAttributeSyntax(SyntaxKind kind, MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name, MarkupTextLiteralSyntax nameSuffix, SyntaxToken equalsToken, MarkupTextLiteralSyntax valuePrefix, MarkupTagHelperAttributeValueSyntax value, MarkupTextLiteralSyntax valueSuffix);
    public MarkupTextLiteralSyntax get_NamePrefix();
    public MarkupTextLiteralSyntax get_Name();
    public MarkupTextLiteralSyntax get_NameSuffix();
    public SyntaxToken get_EqualsToken();
    public MarkupTextLiteralSyntax get_ValuePrefix();
    public MarkupTagHelperAttributeValueSyntax get_Value();
    public MarkupTextLiteralSyntax get_ValueSuffix();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupTagHelperAttributeSyntax Update(MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name, MarkupTextLiteralSyntax nameSuffix, SyntaxToken equalsToken, MarkupTextLiteralSyntax valuePrefix, MarkupTagHelperAttributeValueSyntax value, MarkupTextLiteralSyntax valueSuffix);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.MarkupTagHelperAttributeValueSyntax : RazorBlockSyntax {
    private GreenNode _children;
    public SyntaxList`1<RazorSyntaxNode> Children { get; }
    internal MarkupTagHelperAttributeValueSyntax(SyntaxKind kind, GreenNode children, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal MarkupTagHelperAttributeValueSyntax(SyntaxKind kind, GreenNode children);
    public virtual SyntaxList`1<RazorSyntaxNode> get_Children();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupTagHelperAttributeValueSyntax Update(SyntaxList`1<RazorSyntaxNode> children);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.MarkupTagHelperDirectiveAttributeSyntax : MarkupSyntaxNode {
    private MarkupTextLiteralSyntax _namePrefix;
    private RazorMetaCodeSyntax _transition;
    private MarkupTextLiteralSyntax _name;
    private RazorMetaCodeSyntax _colon;
    private MarkupTextLiteralSyntax _parameterName;
    private MarkupTextLiteralSyntax _nameSuffix;
    private SyntaxToken _equalsToken;
    private MarkupTextLiteralSyntax _valuePrefix;
    private MarkupTagHelperAttributeValueSyntax _value;
    private MarkupTextLiteralSyntax _valueSuffix;
    public MarkupTextLiteralSyntax NamePrefix { get; }
    public RazorMetaCodeSyntax Transition { get; }
    public MarkupTextLiteralSyntax Name { get; }
    public RazorMetaCodeSyntax Colon { get; }
    public MarkupTextLiteralSyntax ParameterName { get; }
    public MarkupTextLiteralSyntax NameSuffix { get; }
    public SyntaxToken EqualsToken { get; }
    public MarkupTextLiteralSyntax ValuePrefix { get; }
    public MarkupTagHelperAttributeValueSyntax Value { get; }
    public MarkupTextLiteralSyntax ValueSuffix { get; }
    internal MarkupTagHelperDirectiveAttributeSyntax(SyntaxKind kind, MarkupTextLiteralSyntax namePrefix, RazorMetaCodeSyntax transition, MarkupTextLiteralSyntax name, RazorMetaCodeSyntax colon, MarkupTextLiteralSyntax parameterName, MarkupTextLiteralSyntax nameSuffix, SyntaxToken equalsToken, MarkupTextLiteralSyntax valuePrefix, MarkupTagHelperAttributeValueSyntax value, MarkupTextLiteralSyntax valueSuffix, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal MarkupTagHelperDirectiveAttributeSyntax(SyntaxKind kind, MarkupTextLiteralSyntax namePrefix, RazorMetaCodeSyntax transition, MarkupTextLiteralSyntax name, RazorMetaCodeSyntax colon, MarkupTextLiteralSyntax parameterName, MarkupTextLiteralSyntax nameSuffix, SyntaxToken equalsToken, MarkupTextLiteralSyntax valuePrefix, MarkupTagHelperAttributeValueSyntax value, MarkupTextLiteralSyntax valueSuffix);
    public MarkupTextLiteralSyntax get_NamePrefix();
    public RazorMetaCodeSyntax get_Transition();
    public MarkupTextLiteralSyntax get_Name();
    public RazorMetaCodeSyntax get_Colon();
    public MarkupTextLiteralSyntax get_ParameterName();
    public MarkupTextLiteralSyntax get_NameSuffix();
    public SyntaxToken get_EqualsToken();
    public MarkupTextLiteralSyntax get_ValuePrefix();
    public MarkupTagHelperAttributeValueSyntax get_Value();
    public MarkupTextLiteralSyntax get_ValueSuffix();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupTagHelperDirectiveAttributeSyntax Update(MarkupTextLiteralSyntax namePrefix, RazorMetaCodeSyntax transition, MarkupTextLiteralSyntax name, RazorMetaCodeSyntax colon, MarkupTextLiteralSyntax parameterName, MarkupTextLiteralSyntax nameSuffix, SyntaxToken equalsToken, MarkupTextLiteralSyntax valuePrefix, MarkupTagHelperAttributeValueSyntax value, MarkupTextLiteralSyntax valueSuffix);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.MarkupTagHelperElementSyntax : MarkupSyntaxNode {
    private MarkupTagHelperStartTagSyntax _startTag;
    private GreenNode _body;
    private MarkupTagHelperEndTagSyntax _endTag;
    public MarkupTagHelperStartTagSyntax StartTag { get; }
    public SyntaxList`1<RazorSyntaxNode> Body { get; }
    public MarkupTagHelperEndTagSyntax EndTag { get; }
    internal MarkupTagHelperElementSyntax(SyntaxKind kind, MarkupTagHelperStartTagSyntax startTag, GreenNode body, MarkupTagHelperEndTagSyntax endTag, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal MarkupTagHelperElementSyntax(SyntaxKind kind, MarkupTagHelperStartTagSyntax startTag, GreenNode body, MarkupTagHelperEndTagSyntax endTag);
    public MarkupTagHelperStartTagSyntax get_StartTag();
    public SyntaxList`1<RazorSyntaxNode> get_Body();
    public MarkupTagHelperEndTagSyntax get_EndTag();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupTagHelperElementSyntax Update(MarkupTagHelperStartTagSyntax startTag, SyntaxList`1<RazorSyntaxNode> body, MarkupTagHelperEndTagSyntax endTag);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.MarkupTagHelperEndTagSyntax : MarkupSyntaxNode {
    private SyntaxToken _openAngle;
    private SyntaxToken _forwardSlash;
    private SyntaxToken _bang;
    private SyntaxToken _name;
    private MarkupMiscAttributeContentSyntax _miscAttributeContent;
    private SyntaxToken _closeAngle;
    public SyntaxToken OpenAngle { get; }
    public SyntaxToken ForwardSlash { get; }
    public SyntaxToken Bang { get; }
    public SyntaxToken Name { get; }
    public MarkupMiscAttributeContentSyntax MiscAttributeContent { get; }
    public SyntaxToken CloseAngle { get; }
    internal MarkupTagHelperEndTagSyntax(SyntaxKind kind, SyntaxToken openAngle, SyntaxToken forwardSlash, SyntaxToken bang, SyntaxToken name, MarkupMiscAttributeContentSyntax miscAttributeContent, SyntaxToken closeAngle, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal MarkupTagHelperEndTagSyntax(SyntaxKind kind, SyntaxToken openAngle, SyntaxToken forwardSlash, SyntaxToken bang, SyntaxToken name, MarkupMiscAttributeContentSyntax miscAttributeContent, SyntaxToken closeAngle);
    public SyntaxToken get_OpenAngle();
    public SyntaxToken get_ForwardSlash();
    public SyntaxToken get_Bang();
    public SyntaxToken get_Name();
    public MarkupMiscAttributeContentSyntax get_MiscAttributeContent();
    public SyntaxToken get_CloseAngle();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupTagHelperEndTagSyntax Update(SyntaxToken openAngle, SyntaxToken forwardSlash, SyntaxToken bang, SyntaxToken name, MarkupMiscAttributeContentSyntax miscAttributeContent, SyntaxToken closeAngle);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.MarkupTagHelperStartTagSyntax : MarkupSyntaxNode {
    private SyntaxToken _openAngle;
    private SyntaxToken _bang;
    private SyntaxToken _name;
    private GreenNode _attributes;
    private SyntaxToken _forwardSlash;
    private SyntaxToken _closeAngle;
    public SyntaxToken OpenAngle { get; }
    public SyntaxToken Bang { get; }
    public SyntaxToken Name { get; }
    public SyntaxList`1<RazorSyntaxNode> Attributes { get; }
    public SyntaxToken ForwardSlash { get; }
    public SyntaxToken CloseAngle { get; }
    internal MarkupTagHelperStartTagSyntax(SyntaxKind kind, SyntaxToken openAngle, SyntaxToken bang, SyntaxToken name, GreenNode attributes, SyntaxToken forwardSlash, SyntaxToken closeAngle, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal MarkupTagHelperStartTagSyntax(SyntaxKind kind, SyntaxToken openAngle, SyntaxToken bang, SyntaxToken name, GreenNode attributes, SyntaxToken forwardSlash, SyntaxToken closeAngle);
    public SyntaxToken get_OpenAngle();
    public SyntaxToken get_Bang();
    public SyntaxToken get_Name();
    public SyntaxList`1<RazorSyntaxNode> get_Attributes();
    public SyntaxToken get_ForwardSlash();
    public SyntaxToken get_CloseAngle();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupTagHelperStartTagSyntax Update(SyntaxToken openAngle, SyntaxToken bang, SyntaxToken name, SyntaxList`1<RazorSyntaxNode> attributes, SyntaxToken forwardSlash, SyntaxToken closeAngle);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.MarkupTextLiteralSyntax : MarkupSyntaxNode {
    private GreenNode _literalTokens;
    public SyntaxList`1<SyntaxToken> LiteralTokens { get; }
    internal MarkupTextLiteralSyntax(SyntaxKind kind, GreenNode literalTokens, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal MarkupTextLiteralSyntax(SyntaxKind kind, GreenNode literalTokens);
    public SyntaxList`1<SyntaxToken> get_LiteralTokens();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupTextLiteralSyntax Update(SyntaxList`1<SyntaxToken> literalTokens);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.MarkupTransitionSyntax : MarkupSyntaxNode {
    private GreenNode _transitionTokens;
    public SyntaxList`1<SyntaxToken> TransitionTokens { get; }
    internal MarkupTransitionSyntax(SyntaxKind kind, GreenNode transitionTokens, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal MarkupTransitionSyntax(SyntaxKind kind, GreenNode transitionTokens);
    public SyntaxList`1<SyntaxToken> get_TransitionTokens();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupTransitionSyntax Update(SyntaxList`1<SyntaxToken> transitionTokens);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.RazorBlockSyntax : RazorSyntaxNode {
    public SyntaxList`1<RazorSyntaxNode> Children { get; }
    internal RazorBlockSyntax(SyntaxKind kind, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal RazorBlockSyntax(SyntaxKind kind);
    public abstract virtual SyntaxList`1<RazorSyntaxNode> get_Children();
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.RazorCommentBlockSyntax : RazorSyntaxNode {
    private SyntaxToken _startCommentTransition;
    private SyntaxToken _startCommentStar;
    private SyntaxToken _comment;
    private SyntaxToken _endCommentStar;
    private SyntaxToken _endCommentTransition;
    public SyntaxToken StartCommentTransition { get; }
    public SyntaxToken StartCommentStar { get; }
    public SyntaxToken Comment { get; }
    public SyntaxToken EndCommentStar { get; }
    public SyntaxToken EndCommentTransition { get; }
    internal RazorCommentBlockSyntax(SyntaxKind kind, SyntaxToken startCommentTransition, SyntaxToken startCommentStar, SyntaxToken comment, SyntaxToken endCommentStar, SyntaxToken endCommentTransition, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal RazorCommentBlockSyntax(SyntaxKind kind, SyntaxToken startCommentTransition, SyntaxToken startCommentStar, SyntaxToken comment, SyntaxToken endCommentStar, SyntaxToken endCommentTransition);
    public SyntaxToken get_StartCommentTransition();
    public SyntaxToken get_StartCommentStar();
    public SyntaxToken get_Comment();
    public SyntaxToken get_EndCommentStar();
    public SyntaxToken get_EndCommentTransition();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public RazorCommentBlockSyntax Update(SyntaxToken startCommentTransition, SyntaxToken startCommentStar, SyntaxToken comment, SyntaxToken endCommentStar, SyntaxToken endCommentTransition);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.RazorDirectiveBodySyntax : CSharpSyntaxNode {
    private RazorSyntaxNode _keyword;
    private CSharpCodeBlockSyntax _cSharpCode;
    public RazorSyntaxNode Keyword { get; }
    public CSharpCodeBlockSyntax CSharpCode { get; }
    internal RazorDirectiveBodySyntax(SyntaxKind kind, RazorSyntaxNode keyword, CSharpCodeBlockSyntax cSharpCode, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal RazorDirectiveBodySyntax(SyntaxKind kind, RazorSyntaxNode keyword, CSharpCodeBlockSyntax cSharpCode);
    public RazorSyntaxNode get_Keyword();
    public CSharpCodeBlockSyntax get_CSharpCode();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public RazorDirectiveBodySyntax Update(RazorSyntaxNode keyword, CSharpCodeBlockSyntax cSharpCode);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.RazorDirectiveSyntax : CSharpRazorBlockSyntax {
    private CSharpTransitionSyntax _transition;
    private CSharpSyntaxNode _body;
    private static string DirectiveDescriptorKey;
    public CSharpTransitionSyntax Transition { get; }
    public CSharpSyntaxNode Body { get; }
    public DirectiveDescriptor DirectiveDescriptor { get; }
    internal RazorDirectiveSyntax(SyntaxKind kind, CSharpTransitionSyntax transition, CSharpSyntaxNode body, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal RazorDirectiveSyntax(SyntaxKind kind, CSharpTransitionSyntax transition, CSharpSyntaxNode body);
    private static RazorDirectiveSyntax();
    public virtual CSharpTransitionSyntax get_Transition();
    public virtual CSharpSyntaxNode get_Body();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public RazorDirectiveSyntax Update(CSharpTransitionSyntax transition, CSharpSyntaxNode body);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
    public DirectiveDescriptor get_DirectiveDescriptor();
    public RazorDirectiveSyntax WithDirectiveDescriptor(DirectiveDescriptor descriptor);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.RazorDocumentSyntax : RazorSyntaxNode {
    private RazorBlockSyntax _document;
    public RazorBlockSyntax Document { get; }
    internal RazorDocumentSyntax(SyntaxKind kind, RazorBlockSyntax document, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal RazorDocumentSyntax(SyntaxKind kind, RazorBlockSyntax document);
    public RazorBlockSyntax get_Document();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public RazorDocumentSyntax Update(RazorBlockSyntax document);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.RazorMetaCodeSyntax : RazorSyntaxNode {
    private GreenNode _metaCode;
    public SyntaxList`1<SyntaxToken> MetaCode { get; }
    internal RazorMetaCodeSyntax(SyntaxKind kind, GreenNode metaCode, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal RazorMetaCodeSyntax(SyntaxKind kind, GreenNode metaCode);
    public SyntaxList`1<SyntaxToken> get_MetaCode();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public RazorMetaCodeSyntax Update(SyntaxList`1<SyntaxToken> metaCode);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.RazorSyntaxNode : GreenNode {
    protected RazorSyntaxNode(SyntaxKind kind);
    protected RazorSyntaxNode(SyntaxKind kind, int fullWidth);
    protected RazorSyntaxNode(SyntaxKind kind, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    protected RazorSyntaxNode(SyntaxKind kind, int fullWidth, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
}
internal static class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.SyntaxFactory : object {
    public static RazorDocumentSyntax RazorDocument(RazorBlockSyntax document);
    public static RazorCommentBlockSyntax RazorCommentBlock(SyntaxToken startCommentTransition, SyntaxToken startCommentStar, SyntaxToken comment, SyntaxToken endCommentStar, SyntaxToken endCommentTransition);
    public static RazorMetaCodeSyntax RazorMetaCode(SyntaxList`1<SyntaxToken> metaCode);
    public static GenericBlockSyntax GenericBlock(SyntaxList`1<RazorSyntaxNode> children);
    public static UnclassifiedTextLiteralSyntax UnclassifiedTextLiteral(SyntaxList`1<SyntaxToken> literalTokens);
    public static MarkupBlockSyntax MarkupBlock(SyntaxList`1<RazorSyntaxNode> children);
    public static MarkupTransitionSyntax MarkupTransition(SyntaxList`1<SyntaxToken> transitionTokens);
    public static MarkupTextLiteralSyntax MarkupTextLiteral(SyntaxList`1<SyntaxToken> literalTokens);
    public static MarkupEphemeralTextLiteralSyntax MarkupEphemeralTextLiteral(SyntaxList`1<SyntaxToken> literalTokens);
    public static MarkupCommentBlockSyntax MarkupCommentBlock(SyntaxList`1<RazorSyntaxNode> children);
    public static MarkupMinimizedAttributeBlockSyntax MarkupMinimizedAttributeBlock(MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name);
    public static MarkupAttributeBlockSyntax MarkupAttributeBlock(MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name, MarkupTextLiteralSyntax nameSuffix, SyntaxToken equalsToken, MarkupTextLiteralSyntax valuePrefix, RazorBlockSyntax value, MarkupTextLiteralSyntax valueSuffix);
    public static MarkupMiscAttributeContentSyntax MarkupMiscAttributeContent(SyntaxList`1<RazorSyntaxNode> children);
    public static MarkupLiteralAttributeValueSyntax MarkupLiteralAttributeValue(MarkupTextLiteralSyntax prefix, MarkupTextLiteralSyntax value);
    public static MarkupDynamicAttributeValueSyntax MarkupDynamicAttributeValue(MarkupTextLiteralSyntax prefix, RazorBlockSyntax value);
    public static MarkupElementSyntax MarkupElement(MarkupStartTagSyntax startTag, SyntaxList`1<RazorSyntaxNode> body, MarkupEndTagSyntax endTag);
    public static MarkupStartTagSyntax MarkupStartTag(SyntaxToken openAngle, SyntaxToken bang, SyntaxToken name, SyntaxList`1<RazorSyntaxNode> attributes, SyntaxToken forwardSlash, SyntaxToken closeAngle);
    public static MarkupEndTagSyntax MarkupEndTag(SyntaxToken openAngle, SyntaxToken forwardSlash, SyntaxToken bang, SyntaxToken name, MarkupMiscAttributeContentSyntax miscAttributeContent, SyntaxToken closeAngle);
    public static MarkupTagHelperElementSyntax MarkupTagHelperElement(MarkupTagHelperStartTagSyntax startTag, SyntaxList`1<RazorSyntaxNode> body, MarkupTagHelperEndTagSyntax endTag);
    public static MarkupTagHelperStartTagSyntax MarkupTagHelperStartTag(SyntaxToken openAngle, SyntaxToken bang, SyntaxToken name, SyntaxList`1<RazorSyntaxNode> attributes, SyntaxToken forwardSlash, SyntaxToken closeAngle);
    public static MarkupTagHelperEndTagSyntax MarkupTagHelperEndTag(SyntaxToken openAngle, SyntaxToken forwardSlash, SyntaxToken bang, SyntaxToken name, MarkupMiscAttributeContentSyntax miscAttributeContent, SyntaxToken closeAngle);
    public static MarkupTagHelperAttributeSyntax MarkupTagHelperAttribute(MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name, MarkupTextLiteralSyntax nameSuffix, SyntaxToken equalsToken, MarkupTextLiteralSyntax valuePrefix, MarkupTagHelperAttributeValueSyntax value, MarkupTextLiteralSyntax valueSuffix);
    public static MarkupMinimizedTagHelperAttributeSyntax MarkupMinimizedTagHelperAttribute(MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name);
    public static MarkupTagHelperAttributeValueSyntax MarkupTagHelperAttributeValue(SyntaxList`1<RazorSyntaxNode> children);
    public static MarkupTagHelperDirectiveAttributeSyntax MarkupTagHelperDirectiveAttribute(MarkupTextLiteralSyntax namePrefix, RazorMetaCodeSyntax transition, MarkupTextLiteralSyntax name, RazorMetaCodeSyntax colon, MarkupTextLiteralSyntax parameterName, MarkupTextLiteralSyntax nameSuffix, SyntaxToken equalsToken, MarkupTextLiteralSyntax valuePrefix, MarkupTagHelperAttributeValueSyntax value, MarkupTextLiteralSyntax valueSuffix);
    public static MarkupMinimizedTagHelperDirectiveAttributeSyntax MarkupMinimizedTagHelperDirectiveAttribute(MarkupTextLiteralSyntax namePrefix, RazorMetaCodeSyntax transition, MarkupTextLiteralSyntax name, RazorMetaCodeSyntax colon, MarkupTextLiteralSyntax parameterName);
    public static CSharpCodeBlockSyntax CSharpCodeBlock(SyntaxList`1<RazorSyntaxNode> children);
    public static CSharpTransitionSyntax CSharpTransition(SyntaxToken transition);
    public static CSharpStatementLiteralSyntax CSharpStatementLiteral(SyntaxList`1<SyntaxToken> literalTokens);
    public static CSharpExpressionLiteralSyntax CSharpExpressionLiteral(SyntaxList`1<SyntaxToken> literalTokens);
    public static CSharpEphemeralTextLiteralSyntax CSharpEphemeralTextLiteral(SyntaxList`1<SyntaxToken> literalTokens);
    public static CSharpTemplateBlockSyntax CSharpTemplateBlock(SyntaxList`1<RazorSyntaxNode> children);
    public static CSharpStatementSyntax CSharpStatement(CSharpTransitionSyntax transition, CSharpSyntaxNode body);
    public static CSharpStatementBodySyntax CSharpStatementBody(RazorMetaCodeSyntax openBrace, CSharpCodeBlockSyntax cSharpCode, RazorMetaCodeSyntax closeBrace);
    public static CSharpExplicitExpressionSyntax CSharpExplicitExpression(CSharpTransitionSyntax transition, CSharpSyntaxNode body);
    public static CSharpExplicitExpressionBodySyntax CSharpExplicitExpressionBody(RazorMetaCodeSyntax openParen, CSharpCodeBlockSyntax cSharpCode, RazorMetaCodeSyntax closeParen);
    public static CSharpImplicitExpressionSyntax CSharpImplicitExpression(CSharpTransitionSyntax transition, CSharpSyntaxNode body);
    public static CSharpImplicitExpressionBodySyntax CSharpImplicitExpressionBody(CSharpCodeBlockSyntax cSharpCode);
    public static RazorDirectiveSyntax RazorDirective(CSharpTransitionSyntax transition, CSharpSyntaxNode body);
    public static RazorDirectiveBodySyntax RazorDirectiveBody(RazorSyntaxNode keyword, CSharpCodeBlockSyntax cSharpCode);
    internal static IEnumerable`1<Type> GetNodeTypes();
    internal static SyntaxToken Token(SyntaxKind kind, string content, RazorDiagnostic[] diagnostics);
    internal static SyntaxToken MissingToken(SyntaxKind kind, RazorDiagnostic[] diagnostics);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.SyntaxList : GreenNode {
    internal bool IsList { get; }
    internal SyntaxList(RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal virtual bool get_IsList();
    internal static GreenNode List(GreenNode child);
    internal static WithTwoChildren List(GreenNode child0, GreenNode child1);
    internal static WithThreeChildren List(GreenNode child0, GreenNode child1, GreenNode child2);
    internal static GreenNode List(GreenNode[] nodes);
    internal static GreenNode List(GreenNode[] nodes, int count);
    internal static SyntaxList List(ArrayElement`1[] children);
    internal abstract virtual void CopyTo(ArrayElement`1[] array, int offset);
    internal static GreenNode Concat(GreenNode left, GreenNode right);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.SyntaxList`1 : ValueType {
    private GreenNode _node;
    internal GreenNode Node { get; }
    public int Count { get; }
    public TNode Item { get; }
    public TNode[] Nodes { get; }
    public TNode Last { get; }
    public SyntaxList`1(GreenNode node);
    internal GreenNode get_Node();
    public int get_Count();
    public TNode get_Item(int index);
    public GreenNode ItemUntyped(int index);
    public bool Any();
    public bool Any(SyntaxKind kind);
    public TNode[] get_Nodes();
    public TNode get_Last();
    public Enumerator<TNode> GetEnumerator();
    public static bool op_Equality(SyntaxList`1<TNode> left, SyntaxList`1<TNode> right);
    public static bool op_Inequality(SyntaxList`1<TNode> left, SyntaxList`1<TNode> right);
    public sealed virtual bool Equals(SyntaxList`1<TNode> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static SyntaxList`1<TNode> op_Implicit(TNode node);
    public static SyntaxList`1<GreenNode> op_Implicit(SyntaxList`1<TNode> nodes);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.SyntaxListBuilder : object {
    private ArrayElement`1[] _nodes;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; private set; }
    public GreenNode Item { get; public set; }
    public SyntaxListBuilder(int size);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public static SyntaxListBuilder Create();
    public void Clear();
    public GreenNode get_Item(int index);
    public void set_Item(int index, GreenNode value);
    public void Add(GreenNode item);
    public void AddRange(GreenNode[] items);
    public void AddRange(GreenNode[] items, int offset, int length);
    [ConditionalAttribute("DEBUG")]
private void Validate(int start, int end);
    public void AddRange(SyntaxList`1<GreenNode> list);
    public void AddRange(SyntaxList`1<GreenNode> list, int offset, int length);
    public void AddRange(SyntaxList`1<TNode> list);
    public void AddRange(SyntaxList`1<TNode> list, int offset, int length);
    public void RemoveLast();
    private void EnsureAdditionalCapacity(int additionalCount);
    public bool Any(SyntaxKind kind);
    public GreenNode[] ToArray();
    internal GreenNode ToListNode();
    public SyntaxList`1<GreenNode> ToList();
    public SyntaxList`1<TNode> ToList();
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.SyntaxListBuilder`1 : ValueType {
    private SyntaxListBuilder _builder;
    public bool IsNull { get; }
    public int Count { get; }
    public TNode Item { get; public set; }
    public SyntaxListBuilder`1(int size);
    internal SyntaxListBuilder`1(SyntaxListBuilder builder);
    public static SyntaxListBuilder`1<TNode> Create();
    public bool get_IsNull();
    public int get_Count();
    public TNode get_Item(int index);
    public void set_Item(int index, TNode value);
    public void Clear();
    public SyntaxListBuilder`1<TNode> Add(TNode node);
    public void AddRange(TNode[] items, int offset, int length);
    public void AddRange(SyntaxList`1<TNode> nodes);
    public void AddRange(SyntaxList`1<TNode> nodes, int offset, int length);
    public bool Any(SyntaxKind kind);
    public SyntaxList`1<TNode> ToList();
    public SyntaxList`1<TNode> Consume();
    public GreenNode ToListNode();
    public static SyntaxListBuilder op_Implicit(SyntaxListBuilder`1<TNode> builder);
    public static SyntaxList`1<TNode> op_Implicit(SyntaxListBuilder`1<TNode> builder);
    public SyntaxList`1<TDerived> ToList();
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.SyntaxListPool : object {
    private ArrayElement`1[] _freeList;
    private int _freeIndex;
    internal SyntaxListBuilder Allocate();
    internal PooledResult`1<TNode> Allocate();
    internal void Free(SyntaxListBuilder item);
    private void Grow();
    public SyntaxList`1<TNode> ToListAndFree(SyntaxListBuilder`1<TNode> item);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.SyntaxRewriter : SyntaxVisitor`1<GreenNode> {
    public virtual GreenNode VisitRazorDocument(RazorDocumentSyntax node);
    public virtual GreenNode VisitRazorCommentBlock(RazorCommentBlockSyntax node);
    public virtual GreenNode VisitRazorMetaCode(RazorMetaCodeSyntax node);
    public virtual GreenNode VisitGenericBlock(GenericBlockSyntax node);
    public virtual GreenNode VisitUnclassifiedTextLiteral(UnclassifiedTextLiteralSyntax node);
    public virtual GreenNode VisitMarkupBlock(MarkupBlockSyntax node);
    public virtual GreenNode VisitMarkupTransition(MarkupTransitionSyntax node);
    public virtual GreenNode VisitMarkupTextLiteral(MarkupTextLiteralSyntax node);
    public virtual GreenNode VisitMarkupEphemeralTextLiteral(MarkupEphemeralTextLiteralSyntax node);
    public virtual GreenNode VisitMarkupCommentBlock(MarkupCommentBlockSyntax node);
    public virtual GreenNode VisitMarkupMinimizedAttributeBlock(MarkupMinimizedAttributeBlockSyntax node);
    public virtual GreenNode VisitMarkupAttributeBlock(MarkupAttributeBlockSyntax node);
    public virtual GreenNode VisitMarkupMiscAttributeContent(MarkupMiscAttributeContentSyntax node);
    public virtual GreenNode VisitMarkupLiteralAttributeValue(MarkupLiteralAttributeValueSyntax node);
    public virtual GreenNode VisitMarkupDynamicAttributeValue(MarkupDynamicAttributeValueSyntax node);
    public virtual GreenNode VisitMarkupElement(MarkupElementSyntax node);
    public virtual GreenNode VisitMarkupStartTag(MarkupStartTagSyntax node);
    public virtual GreenNode VisitMarkupEndTag(MarkupEndTagSyntax node);
    public virtual GreenNode VisitMarkupTagHelperElement(MarkupTagHelperElementSyntax node);
    public virtual GreenNode VisitMarkupTagHelperStartTag(MarkupTagHelperStartTagSyntax node);
    public virtual GreenNode VisitMarkupTagHelperEndTag(MarkupTagHelperEndTagSyntax node);
    public virtual GreenNode VisitMarkupTagHelperAttribute(MarkupTagHelperAttributeSyntax node);
    public virtual GreenNode VisitMarkupMinimizedTagHelperAttribute(MarkupMinimizedTagHelperAttributeSyntax node);
    public virtual GreenNode VisitMarkupTagHelperAttributeValue(MarkupTagHelperAttributeValueSyntax node);
    public virtual GreenNode VisitMarkupTagHelperDirectiveAttribute(MarkupTagHelperDirectiveAttributeSyntax node);
    public virtual GreenNode VisitMarkupMinimizedTagHelperDirectiveAttribute(MarkupMinimizedTagHelperDirectiveAttributeSyntax node);
    public virtual GreenNode VisitCSharpCodeBlock(CSharpCodeBlockSyntax node);
    public virtual GreenNode VisitCSharpTransition(CSharpTransitionSyntax node);
    public virtual GreenNode VisitCSharpStatementLiteral(CSharpStatementLiteralSyntax node);
    public virtual GreenNode VisitCSharpExpressionLiteral(CSharpExpressionLiteralSyntax node);
    public virtual GreenNode VisitCSharpEphemeralTextLiteral(CSharpEphemeralTextLiteralSyntax node);
    public virtual GreenNode VisitCSharpTemplateBlock(CSharpTemplateBlockSyntax node);
    public virtual GreenNode VisitCSharpStatement(CSharpStatementSyntax node);
    public virtual GreenNode VisitCSharpStatementBody(CSharpStatementBodySyntax node);
    public virtual GreenNode VisitCSharpExplicitExpression(CSharpExplicitExpressionSyntax node);
    public virtual GreenNode VisitCSharpExplicitExpressionBody(CSharpExplicitExpressionBodySyntax node);
    public virtual GreenNode VisitCSharpImplicitExpression(CSharpImplicitExpressionSyntax node);
    public virtual GreenNode VisitCSharpImplicitExpressionBody(CSharpImplicitExpressionBodySyntax node);
    public virtual GreenNode VisitRazorDirective(RazorDirectiveSyntax node);
    public virtual GreenNode VisitRazorDirectiveBody(RazorDirectiveBodySyntax node);
    public virtual GreenNode VisitToken(SyntaxToken token);
    public SyntaxList`1<TNode> VisitList(SyntaxList`1<TNode> list);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.SyntaxToken : RazorSyntaxNode {
    private GreenNode _leadingTrivia;
    private GreenNode _trailingTrivia;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    public string Content { get; }
    public SyntaxList`1<GreenNode> LeadingTrivia { get; }
    public SyntaxList`1<GreenNode> TrailingTrivia { get; }
    internal bool IsToken { get; }
    public int Width { get; }
    internal SyntaxToken(SyntaxKind kind, string content, RazorDiagnostic[] diagnostics);
    internal SyntaxToken(SyntaxKind kind, string content, GreenNode leadingTrivia, GreenNode trailingTrivia);
    internal SyntaxToken(SyntaxKind kind, string content, GreenNode leadingTrivia, GreenNode trailingTrivia, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    [CompilerGeneratedAttribute]
public string get_Content();
    public SyntaxList`1<GreenNode> get_LeadingTrivia();
    public SyntaxList`1<GreenNode> get_TrailingTrivia();
    internal virtual bool get_IsToken();
    public virtual int get_Width();
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    protected virtual void WriteTokenTo(TextWriter writer, bool leading, bool trailing);
    public sealed virtual GreenNode GetLeadingTrivia();
    public virtual int GetLeadingTriviaWidth();
    public sealed virtual GreenNode GetTrailingTrivia();
    public virtual int GetTrailingTriviaWidth();
    public sealed virtual GreenNode WithLeadingTrivia(GreenNode trivia);
    public virtual SyntaxToken TokenWithLeadingTrivia(GreenNode trivia);
    public sealed virtual GreenNode WithTrailingTrivia(GreenNode trivia);
    public virtual SyntaxToken TokenWithTrailingTrivia(GreenNode trivia);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
    protected sealed virtual int GetSlotCount();
    internal sealed virtual GreenNode GetSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public virtual bool IsEquivalentTo(GreenNode other);
    public virtual string ToString();
    internal static SyntaxToken CreateMissing(SyntaxKind kind, RazorDiagnostic[] diagnostics);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.SyntaxTokenCache : object {
    private static int CacheSizeBits;
    private static int CacheSize;
    private static int CacheMask;
    public static SyntaxTokenCache Instance;
    private static Entry[] s_cache;
    private static SyntaxTokenCache();
    public bool CanBeCached(SyntaxKind kind, RazorDiagnostic[] diagnostics);
    public SyntaxToken GetCachedToken(SyntaxKind kind, string content);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.SyntaxTrivia : GreenNode {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    internal bool IsTrivia { get; }
    public int Width { get; }
    internal SyntaxTrivia(SyntaxKind kind, string text);
    internal SyntaxTrivia(SyntaxKind kind, string text, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    [CompilerGeneratedAttribute]
public string get_Text();
    internal virtual bool get_IsTrivia();
    public virtual int get_Width();
    protected virtual void WriteTriviaTo(TextWriter writer);
    public sealed virtual string ToFullString();
    public sealed virtual int GetLeadingTriviaWidth();
    public sealed virtual int GetTrailingTriviaWidth();
    protected sealed virtual int GetSlotCount();
    internal sealed virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
    public virtual bool IsEquivalentTo(GreenNode other);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.SyntaxVisitor : object {
    public virtual void VisitRazorDocument(RazorDocumentSyntax node);
    public virtual void VisitRazorCommentBlock(RazorCommentBlockSyntax node);
    public virtual void VisitRazorMetaCode(RazorMetaCodeSyntax node);
    public virtual void VisitGenericBlock(GenericBlockSyntax node);
    public virtual void VisitUnclassifiedTextLiteral(UnclassifiedTextLiteralSyntax node);
    public virtual void VisitMarkupBlock(MarkupBlockSyntax node);
    public virtual void VisitMarkupTransition(MarkupTransitionSyntax node);
    public virtual void VisitMarkupTextLiteral(MarkupTextLiteralSyntax node);
    public virtual void VisitMarkupEphemeralTextLiteral(MarkupEphemeralTextLiteralSyntax node);
    public virtual void VisitMarkupCommentBlock(MarkupCommentBlockSyntax node);
    public virtual void VisitMarkupMinimizedAttributeBlock(MarkupMinimizedAttributeBlockSyntax node);
    public virtual void VisitMarkupAttributeBlock(MarkupAttributeBlockSyntax node);
    public virtual void VisitMarkupMiscAttributeContent(MarkupMiscAttributeContentSyntax node);
    public virtual void VisitMarkupLiteralAttributeValue(MarkupLiteralAttributeValueSyntax node);
    public virtual void VisitMarkupDynamicAttributeValue(MarkupDynamicAttributeValueSyntax node);
    public virtual void VisitMarkupElement(MarkupElementSyntax node);
    public virtual void VisitMarkupStartTag(MarkupStartTagSyntax node);
    public virtual void VisitMarkupEndTag(MarkupEndTagSyntax node);
    public virtual void VisitMarkupTagHelperElement(MarkupTagHelperElementSyntax node);
    public virtual void VisitMarkupTagHelperStartTag(MarkupTagHelperStartTagSyntax node);
    public virtual void VisitMarkupTagHelperEndTag(MarkupTagHelperEndTagSyntax node);
    public virtual void VisitMarkupTagHelperAttribute(MarkupTagHelperAttributeSyntax node);
    public virtual void VisitMarkupMinimizedTagHelperAttribute(MarkupMinimizedTagHelperAttributeSyntax node);
    public virtual void VisitMarkupTagHelperAttributeValue(MarkupTagHelperAttributeValueSyntax node);
    public virtual void VisitMarkupTagHelperDirectiveAttribute(MarkupTagHelperDirectiveAttributeSyntax node);
    public virtual void VisitMarkupMinimizedTagHelperDirectiveAttribute(MarkupMinimizedTagHelperDirectiveAttributeSyntax node);
    public virtual void VisitCSharpCodeBlock(CSharpCodeBlockSyntax node);
    public virtual void VisitCSharpTransition(CSharpTransitionSyntax node);
    public virtual void VisitCSharpStatementLiteral(CSharpStatementLiteralSyntax node);
    public virtual void VisitCSharpExpressionLiteral(CSharpExpressionLiteralSyntax node);
    public virtual void VisitCSharpEphemeralTextLiteral(CSharpEphemeralTextLiteralSyntax node);
    public virtual void VisitCSharpTemplateBlock(CSharpTemplateBlockSyntax node);
    public virtual void VisitCSharpStatement(CSharpStatementSyntax node);
    public virtual void VisitCSharpStatementBody(CSharpStatementBodySyntax node);
    public virtual void VisitCSharpExplicitExpression(CSharpExplicitExpressionSyntax node);
    public virtual void VisitCSharpExplicitExpressionBody(CSharpExplicitExpressionBodySyntax node);
    public virtual void VisitCSharpImplicitExpression(CSharpImplicitExpressionSyntax node);
    public virtual void VisitCSharpImplicitExpressionBody(CSharpImplicitExpressionBodySyntax node);
    public virtual void VisitRazorDirective(RazorDirectiveSyntax node);
    public virtual void VisitRazorDirectiveBody(RazorDirectiveBodySyntax node);
    public virtual GreenNode Visit(GreenNode node);
    public virtual void VisitToken(SyntaxToken token);
    public virtual void VisitTrivia(SyntaxTrivia trivia);
    protected virtual void DefaultVisit(GreenNode node);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.SyntaxVisitor`1 : object {
    public virtual TResult VisitRazorDocument(RazorDocumentSyntax node);
    public virtual TResult VisitRazorCommentBlock(RazorCommentBlockSyntax node);
    public virtual TResult VisitRazorMetaCode(RazorMetaCodeSyntax node);
    public virtual TResult VisitGenericBlock(GenericBlockSyntax node);
    public virtual TResult VisitUnclassifiedTextLiteral(UnclassifiedTextLiteralSyntax node);
    public virtual TResult VisitMarkupBlock(MarkupBlockSyntax node);
    public virtual TResult VisitMarkupTransition(MarkupTransitionSyntax node);
    public virtual TResult VisitMarkupTextLiteral(MarkupTextLiteralSyntax node);
    public virtual TResult VisitMarkupEphemeralTextLiteral(MarkupEphemeralTextLiteralSyntax node);
    public virtual TResult VisitMarkupCommentBlock(MarkupCommentBlockSyntax node);
    public virtual TResult VisitMarkupMinimizedAttributeBlock(MarkupMinimizedAttributeBlockSyntax node);
    public virtual TResult VisitMarkupAttributeBlock(MarkupAttributeBlockSyntax node);
    public virtual TResult VisitMarkupMiscAttributeContent(MarkupMiscAttributeContentSyntax node);
    public virtual TResult VisitMarkupLiteralAttributeValue(MarkupLiteralAttributeValueSyntax node);
    public virtual TResult VisitMarkupDynamicAttributeValue(MarkupDynamicAttributeValueSyntax node);
    public virtual TResult VisitMarkupElement(MarkupElementSyntax node);
    public virtual TResult VisitMarkupStartTag(MarkupStartTagSyntax node);
    public virtual TResult VisitMarkupEndTag(MarkupEndTagSyntax node);
    public virtual TResult VisitMarkupTagHelperElement(MarkupTagHelperElementSyntax node);
    public virtual TResult VisitMarkupTagHelperStartTag(MarkupTagHelperStartTagSyntax node);
    public virtual TResult VisitMarkupTagHelperEndTag(MarkupTagHelperEndTagSyntax node);
    public virtual TResult VisitMarkupTagHelperAttribute(MarkupTagHelperAttributeSyntax node);
    public virtual TResult VisitMarkupMinimizedTagHelperAttribute(MarkupMinimizedTagHelperAttributeSyntax node);
    public virtual TResult VisitMarkupTagHelperAttributeValue(MarkupTagHelperAttributeValueSyntax node);
    public virtual TResult VisitMarkupTagHelperDirectiveAttribute(MarkupTagHelperDirectiveAttributeSyntax node);
    public virtual TResult VisitMarkupMinimizedTagHelperDirectiveAttribute(MarkupMinimizedTagHelperDirectiveAttributeSyntax node);
    public virtual TResult VisitCSharpCodeBlock(CSharpCodeBlockSyntax node);
    public virtual TResult VisitCSharpTransition(CSharpTransitionSyntax node);
    public virtual TResult VisitCSharpStatementLiteral(CSharpStatementLiteralSyntax node);
    public virtual TResult VisitCSharpExpressionLiteral(CSharpExpressionLiteralSyntax node);
    public virtual TResult VisitCSharpEphemeralTextLiteral(CSharpEphemeralTextLiteralSyntax node);
    public virtual TResult VisitCSharpTemplateBlock(CSharpTemplateBlockSyntax node);
    public virtual TResult VisitCSharpStatement(CSharpStatementSyntax node);
    public virtual TResult VisitCSharpStatementBody(CSharpStatementBodySyntax node);
    public virtual TResult VisitCSharpExplicitExpression(CSharpExplicitExpressionSyntax node);
    public virtual TResult VisitCSharpExplicitExpressionBody(CSharpExplicitExpressionBodySyntax node);
    public virtual TResult VisitCSharpImplicitExpression(CSharpImplicitExpressionSyntax node);
    public virtual TResult VisitCSharpImplicitExpressionBody(CSharpImplicitExpressionBodySyntax node);
    public virtual TResult VisitRazorDirective(RazorDirectiveSyntax node);
    public virtual TResult VisitRazorDirectiveBody(RazorDirectiveBodySyntax node);
    public virtual TResult Visit(GreenNode node);
    public virtual TResult VisitToken(SyntaxToken token);
    public virtual TResult VisitTrivia(SyntaxTrivia trivia);
    protected virtual TResult DefaultVisit(GreenNode node);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.InternalSyntax.UnclassifiedTextLiteralSyntax : RazorSyntaxNode {
    private GreenNode _literalTokens;
    public SyntaxList`1<SyntaxToken> LiteralTokens { get; }
    internal UnclassifiedTextLiteralSyntax(SyntaxKind kind, GreenNode literalTokens, RazorDiagnostic[] diagnostics, SyntaxAnnotation[] annotations);
    internal UnclassifiedTextLiteralSyntax(SyntaxKind kind, GreenNode literalTokens);
    public SyntaxList`1<SyntaxToken> get_LiteralTokens();
    internal virtual GreenNode GetSlot(int index);
    internal virtual SyntaxNode CreateRed(SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public UnclassifiedTextLiteralSyntax Update(SyntaxList`1<SyntaxToken> literalTokens);
    internal virtual GreenNode SetDiagnostics(RazorDiagnostic[] diagnostics);
    internal virtual GreenNode SetAnnotations(SyntaxAnnotation[] annotations);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.MarkupAttributeBlockSyntax : MarkupSyntaxNode {
    private MarkupTextLiteralSyntax _namePrefix;
    private MarkupTextLiteralSyntax _name;
    private MarkupTextLiteralSyntax _nameSuffix;
    private SyntaxToken _equalsToken;
    private MarkupTextLiteralSyntax _valuePrefix;
    private RazorBlockSyntax _value;
    private MarkupTextLiteralSyntax _valueSuffix;
    public MarkupTextLiteralSyntax NamePrefix { get; }
    public MarkupTextLiteralSyntax Name { get; }
    public MarkupTextLiteralSyntax NameSuffix { get; }
    public SyntaxToken EqualsToken { get; }
    public MarkupTextLiteralSyntax ValuePrefix { get; }
    public RazorBlockSyntax Value { get; }
    public MarkupTextLiteralSyntax ValueSuffix { get; }
    internal MarkupAttributeBlockSyntax(GreenNode green, SyntaxNode parent, int position);
    public MarkupTextLiteralSyntax get_NamePrefix();
    public MarkupTextLiteralSyntax get_Name();
    public MarkupTextLiteralSyntax get_NameSuffix();
    public SyntaxToken get_EqualsToken();
    public MarkupTextLiteralSyntax get_ValuePrefix();
    public RazorBlockSyntax get_Value();
    public MarkupTextLiteralSyntax get_ValueSuffix();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupAttributeBlockSyntax Update(MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name, MarkupTextLiteralSyntax nameSuffix, SyntaxToken equalsToken, MarkupTextLiteralSyntax valuePrefix, RazorBlockSyntax value, MarkupTextLiteralSyntax valueSuffix);
    public MarkupAttributeBlockSyntax WithNamePrefix(MarkupTextLiteralSyntax namePrefix);
    public MarkupAttributeBlockSyntax WithName(MarkupTextLiteralSyntax name);
    public MarkupAttributeBlockSyntax WithNameSuffix(MarkupTextLiteralSyntax nameSuffix);
    public MarkupAttributeBlockSyntax WithEqualsToken(SyntaxToken equalsToken);
    public MarkupAttributeBlockSyntax WithValuePrefix(MarkupTextLiteralSyntax valuePrefix);
    public MarkupAttributeBlockSyntax WithValue(RazorBlockSyntax value);
    public MarkupAttributeBlockSyntax WithValueSuffix(MarkupTextLiteralSyntax valueSuffix);
    public MarkupAttributeBlockSyntax AddNamePrefixLiteralTokens(SyntaxToken[] items);
    public MarkupAttributeBlockSyntax AddNameLiteralTokens(SyntaxToken[] items);
    public MarkupAttributeBlockSyntax AddNameSuffixLiteralTokens(SyntaxToken[] items);
    public MarkupAttributeBlockSyntax AddValuePrefixLiteralTokens(SyntaxToken[] items);
    public MarkupAttributeBlockSyntax AddValueSuffixLiteralTokens(SyntaxToken[] items);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.MarkupBlockSyntax : RazorBlockSyntax {
    private SyntaxNode _children;
    public SyntaxList`1<RazorSyntaxNode> Children { get; }
    internal MarkupBlockSyntax(GreenNode green, SyntaxNode parent, int position);
    public virtual SyntaxList`1<RazorSyntaxNode> get_Children();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupBlockSyntax Update(SyntaxList`1<RazorSyntaxNode> children);
    internal virtual RazorBlockSyntax WithChildrenCore(SyntaxList`1<RazorSyntaxNode> children);
    public MarkupBlockSyntax WithChildren(SyntaxList`1<RazorSyntaxNode> children);
    internal virtual RazorBlockSyntax AddChildrenCore(RazorSyntaxNode[] items);
    public MarkupBlockSyntax AddChildren(RazorSyntaxNode[] items);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.MarkupCommentBlockSyntax : RazorBlockSyntax {
    private SyntaxNode _children;
    public SyntaxList`1<RazorSyntaxNode> Children { get; }
    internal MarkupCommentBlockSyntax(GreenNode green, SyntaxNode parent, int position);
    public virtual SyntaxList`1<RazorSyntaxNode> get_Children();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupCommentBlockSyntax Update(SyntaxList`1<RazorSyntaxNode> children);
    internal virtual RazorBlockSyntax WithChildrenCore(SyntaxList`1<RazorSyntaxNode> children);
    public MarkupCommentBlockSyntax WithChildren(SyntaxList`1<RazorSyntaxNode> children);
    internal virtual RazorBlockSyntax AddChildrenCore(RazorSyntaxNode[] items);
    public MarkupCommentBlockSyntax AddChildren(RazorSyntaxNode[] items);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.MarkupDynamicAttributeValueSyntax : MarkupSyntaxNode {
    private MarkupTextLiteralSyntax _prefix;
    private RazorBlockSyntax _value;
    public MarkupTextLiteralSyntax Prefix { get; }
    public RazorBlockSyntax Value { get; }
    internal MarkupDynamicAttributeValueSyntax(GreenNode green, SyntaxNode parent, int position);
    public MarkupTextLiteralSyntax get_Prefix();
    public RazorBlockSyntax get_Value();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupDynamicAttributeValueSyntax Update(MarkupTextLiteralSyntax prefix, RazorBlockSyntax value);
    public MarkupDynamicAttributeValueSyntax WithPrefix(MarkupTextLiteralSyntax prefix);
    public MarkupDynamicAttributeValueSyntax WithValue(RazorBlockSyntax value);
    public MarkupDynamicAttributeValueSyntax AddPrefixLiteralTokens(SyntaxToken[] items);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.MarkupElementSyntax : MarkupSyntaxNode {
    private MarkupStartTagSyntax _startTag;
    private SyntaxNode _body;
    private MarkupEndTagSyntax _endTag;
    public MarkupStartTagSyntax StartTag { get; }
    public SyntaxList`1<RazorSyntaxNode> Body { get; }
    public MarkupEndTagSyntax EndTag { get; }
    internal MarkupElementSyntax(GreenNode green, SyntaxNode parent, int position);
    public MarkupStartTagSyntax get_StartTag();
    public SyntaxList`1<RazorSyntaxNode> get_Body();
    public MarkupEndTagSyntax get_EndTag();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupElementSyntax Update(MarkupStartTagSyntax startTag, SyntaxList`1<RazorSyntaxNode> body, MarkupEndTagSyntax endTag);
    public MarkupElementSyntax WithStartTag(MarkupStartTagSyntax startTag);
    public MarkupElementSyntax WithBody(SyntaxList`1<RazorSyntaxNode> body);
    public MarkupElementSyntax WithEndTag(MarkupEndTagSyntax endTag);
    public MarkupElementSyntax AddStartTagAttributes(RazorSyntaxNode[] items);
    public MarkupElementSyntax AddBody(RazorSyntaxNode[] items);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.MarkupEndTagSyntax : MarkupSyntaxNode {
    private SyntaxToken _openAngle;
    private SyntaxToken _forwardSlash;
    private SyntaxToken _bang;
    private SyntaxToken _name;
    private MarkupMiscAttributeContentSyntax _miscAttributeContent;
    private SyntaxToken _closeAngle;
    public SyntaxToken OpenAngle { get; }
    public SyntaxToken ForwardSlash { get; }
    public SyntaxToken Bang { get; }
    public SyntaxToken Name { get; }
    public MarkupMiscAttributeContentSyntax MiscAttributeContent { get; }
    public SyntaxToken CloseAngle { get; }
    public bool IsMarkupTransition { get; }
    public SyntaxList`1<RazorSyntaxNode> Children { get; }
    internal MarkupEndTagSyntax(GreenNode green, SyntaxNode parent, int position);
    public SyntaxToken get_OpenAngle();
    public SyntaxToken get_ForwardSlash();
    public SyntaxToken get_Bang();
    public SyntaxToken get_Name();
    public MarkupMiscAttributeContentSyntax get_MiscAttributeContent();
    public SyntaxToken get_CloseAngle();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupEndTagSyntax Update(SyntaxToken openAngle, SyntaxToken forwardSlash, SyntaxToken bang, SyntaxToken name, MarkupMiscAttributeContentSyntax miscAttributeContent, SyntaxToken closeAngle);
    public MarkupEndTagSyntax WithOpenAngle(SyntaxToken openAngle);
    public MarkupEndTagSyntax WithForwardSlash(SyntaxToken forwardSlash);
    public MarkupEndTagSyntax WithBang(SyntaxToken bang);
    public MarkupEndTagSyntax WithName(SyntaxToken name);
    public MarkupEndTagSyntax WithMiscAttributeContent(MarkupMiscAttributeContentSyntax miscAttributeContent);
    public MarkupEndTagSyntax WithCloseAngle(SyntaxToken closeAngle);
    public MarkupEndTagSyntax AddMiscAttributeContentChildren(RazorSyntaxNode[] items);
    public bool get_IsMarkupTransition();
    public SyntaxList`1<RazorSyntaxNode> get_Children();
    public string GetTagNameWithOptionalBang();
    private SyntaxList`1<RazorSyntaxNode> GetLegacyChildren();
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.MarkupEphemeralTextLiteralSyntax : MarkupSyntaxNode {
    private SyntaxNode _literalTokens;
    public SyntaxList`1<SyntaxToken> LiteralTokens { get; }
    internal MarkupEphemeralTextLiteralSyntax(GreenNode green, SyntaxNode parent, int position);
    public SyntaxList`1<SyntaxToken> get_LiteralTokens();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupEphemeralTextLiteralSyntax Update(SyntaxList`1<SyntaxToken> literalTokens);
    public MarkupEphemeralTextLiteralSyntax WithLiteralTokens(SyntaxList`1<SyntaxToken> literalTokens);
    public MarkupEphemeralTextLiteralSyntax AddLiteralTokens(SyntaxToken[] items);
    protected virtual string GetDebuggerDisplay();
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.MarkupLiteralAttributeValueSyntax : MarkupSyntaxNode {
    private MarkupTextLiteralSyntax _prefix;
    private MarkupTextLiteralSyntax _value;
    public MarkupTextLiteralSyntax Prefix { get; }
    public MarkupTextLiteralSyntax Value { get; }
    internal MarkupLiteralAttributeValueSyntax(GreenNode green, SyntaxNode parent, int position);
    public MarkupTextLiteralSyntax get_Prefix();
    public MarkupTextLiteralSyntax get_Value();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupLiteralAttributeValueSyntax Update(MarkupTextLiteralSyntax prefix, MarkupTextLiteralSyntax value);
    public MarkupLiteralAttributeValueSyntax WithPrefix(MarkupTextLiteralSyntax prefix);
    public MarkupLiteralAttributeValueSyntax WithValue(MarkupTextLiteralSyntax value);
    public MarkupLiteralAttributeValueSyntax AddPrefixLiteralTokens(SyntaxToken[] items);
    public MarkupLiteralAttributeValueSyntax AddValueLiteralTokens(SyntaxToken[] items);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.MarkupMinimizedAttributeBlockSyntax : MarkupSyntaxNode {
    private MarkupTextLiteralSyntax _namePrefix;
    private MarkupTextLiteralSyntax _name;
    public MarkupTextLiteralSyntax NamePrefix { get; }
    public MarkupTextLiteralSyntax Name { get; }
    internal MarkupMinimizedAttributeBlockSyntax(GreenNode green, SyntaxNode parent, int position);
    public MarkupTextLiteralSyntax get_NamePrefix();
    public MarkupTextLiteralSyntax get_Name();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupMinimizedAttributeBlockSyntax Update(MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name);
    public MarkupMinimizedAttributeBlockSyntax WithNamePrefix(MarkupTextLiteralSyntax namePrefix);
    public MarkupMinimizedAttributeBlockSyntax WithName(MarkupTextLiteralSyntax name);
    public MarkupMinimizedAttributeBlockSyntax AddNamePrefixLiteralTokens(SyntaxToken[] items);
    public MarkupMinimizedAttributeBlockSyntax AddNameLiteralTokens(SyntaxToken[] items);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.MarkupMinimizedTagHelperAttributeSyntax : MarkupSyntaxNode {
    private MarkupTextLiteralSyntax _namePrefix;
    private MarkupTextLiteralSyntax _name;
    private static string TagHelperAttributeInfoKey;
    public MarkupTextLiteralSyntax NamePrefix { get; }
    public MarkupTextLiteralSyntax Name { get; }
    public TagHelperAttributeInfo TagHelperAttributeInfo { get; }
    internal MarkupMinimizedTagHelperAttributeSyntax(GreenNode green, SyntaxNode parent, int position);
    private static MarkupMinimizedTagHelperAttributeSyntax();
    public MarkupTextLiteralSyntax get_NamePrefix();
    public MarkupTextLiteralSyntax get_Name();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupMinimizedTagHelperAttributeSyntax Update(MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name);
    public MarkupMinimizedTagHelperAttributeSyntax WithNamePrefix(MarkupTextLiteralSyntax namePrefix);
    public MarkupMinimizedTagHelperAttributeSyntax WithName(MarkupTextLiteralSyntax name);
    public MarkupMinimizedTagHelperAttributeSyntax AddNamePrefixLiteralTokens(SyntaxToken[] items);
    public MarkupMinimizedTagHelperAttributeSyntax AddNameLiteralTokens(SyntaxToken[] items);
    public TagHelperAttributeInfo get_TagHelperAttributeInfo();
    public MarkupMinimizedTagHelperAttributeSyntax WithTagHelperAttributeInfo(TagHelperAttributeInfo info);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.MarkupMinimizedTagHelperDirectiveAttributeSyntax : MarkupSyntaxNode {
    private MarkupTextLiteralSyntax _namePrefix;
    private RazorMetaCodeSyntax _transition;
    private MarkupTextLiteralSyntax _name;
    private RazorMetaCodeSyntax _colon;
    private MarkupTextLiteralSyntax _parameterName;
    private static string TagHelperAttributeInfoKey;
    public MarkupTextLiteralSyntax NamePrefix { get; }
    public RazorMetaCodeSyntax Transition { get; }
    public MarkupTextLiteralSyntax Name { get; }
    public RazorMetaCodeSyntax Colon { get; }
    public MarkupTextLiteralSyntax ParameterName { get; }
    public TagHelperAttributeInfo TagHelperAttributeInfo { get; }
    public string FullName { get; }
    internal MarkupMinimizedTagHelperDirectiveAttributeSyntax(GreenNode green, SyntaxNode parent, int position);
    private static MarkupMinimizedTagHelperDirectiveAttributeSyntax();
    public MarkupTextLiteralSyntax get_NamePrefix();
    public RazorMetaCodeSyntax get_Transition();
    public MarkupTextLiteralSyntax get_Name();
    public RazorMetaCodeSyntax get_Colon();
    public MarkupTextLiteralSyntax get_ParameterName();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupMinimizedTagHelperDirectiveAttributeSyntax Update(MarkupTextLiteralSyntax namePrefix, RazorMetaCodeSyntax transition, MarkupTextLiteralSyntax name, RazorMetaCodeSyntax colon, MarkupTextLiteralSyntax parameterName);
    public MarkupMinimizedTagHelperDirectiveAttributeSyntax WithNamePrefix(MarkupTextLiteralSyntax namePrefix);
    public MarkupMinimizedTagHelperDirectiveAttributeSyntax WithTransition(RazorMetaCodeSyntax transition);
    public MarkupMinimizedTagHelperDirectiveAttributeSyntax WithName(MarkupTextLiteralSyntax name);
    public MarkupMinimizedTagHelperDirectiveAttributeSyntax WithColon(RazorMetaCodeSyntax colon);
    public MarkupMinimizedTagHelperDirectiveAttributeSyntax WithParameterName(MarkupTextLiteralSyntax parameterName);
    public MarkupMinimizedTagHelperDirectiveAttributeSyntax AddNamePrefixLiteralTokens(SyntaxToken[] items);
    public MarkupMinimizedTagHelperDirectiveAttributeSyntax AddTransitionMetaCode(SyntaxToken[] items);
    public MarkupMinimizedTagHelperDirectiveAttributeSyntax AddNameLiteralTokens(SyntaxToken[] items);
    public MarkupMinimizedTagHelperDirectiveAttributeSyntax AddColonMetaCode(SyntaxToken[] items);
    public MarkupMinimizedTagHelperDirectiveAttributeSyntax AddParameterNameLiteralTokens(SyntaxToken[] items);
    public TagHelperAttributeInfo get_TagHelperAttributeInfo();
    public string get_FullName();
    public MarkupMinimizedTagHelperDirectiveAttributeSyntax WithTagHelperAttributeInfo(TagHelperAttributeInfo info);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.MarkupMiscAttributeContentSyntax : MarkupSyntaxNode {
    private SyntaxNode _children;
    public SyntaxList`1<RazorSyntaxNode> Children { get; }
    internal MarkupMiscAttributeContentSyntax(GreenNode green, SyntaxNode parent, int position);
    public SyntaxList`1<RazorSyntaxNode> get_Children();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupMiscAttributeContentSyntax Update(SyntaxList`1<RazorSyntaxNode> children);
    public MarkupMiscAttributeContentSyntax WithChildren(SyntaxList`1<RazorSyntaxNode> children);
    public MarkupMiscAttributeContentSyntax AddChildren(RazorSyntaxNode[] items);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.MarkupStartTagSyntax : MarkupSyntaxNode {
    private SyntaxToken _openAngle;
    private SyntaxToken _bang;
    private SyntaxToken _name;
    private SyntaxNode _attributes;
    private SyntaxToken _forwardSlash;
    private SyntaxToken _closeAngle;
    public SyntaxToken OpenAngle { get; }
    public SyntaxToken Bang { get; }
    public SyntaxToken Name { get; }
    public SyntaxList`1<RazorSyntaxNode> Attributes { get; }
    public SyntaxToken ForwardSlash { get; }
    public SyntaxToken CloseAngle { get; }
    public bool IsMarkupTransition { get; }
    public SyntaxList`1<RazorSyntaxNode> Children { get; }
    internal MarkupStartTagSyntax(GreenNode green, SyntaxNode parent, int position);
    public SyntaxToken get_OpenAngle();
    public SyntaxToken get_Bang();
    public SyntaxToken get_Name();
    public SyntaxList`1<RazorSyntaxNode> get_Attributes();
    public SyntaxToken get_ForwardSlash();
    public SyntaxToken get_CloseAngle();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupStartTagSyntax Update(SyntaxToken openAngle, SyntaxToken bang, SyntaxToken name, SyntaxList`1<RazorSyntaxNode> attributes, SyntaxToken forwardSlash, SyntaxToken closeAngle);
    public MarkupStartTagSyntax WithOpenAngle(SyntaxToken openAngle);
    public MarkupStartTagSyntax WithBang(SyntaxToken bang);
    public MarkupStartTagSyntax WithName(SyntaxToken name);
    public MarkupStartTagSyntax WithAttributes(SyntaxList`1<RazorSyntaxNode> attributes);
    public MarkupStartTagSyntax WithForwardSlash(SyntaxToken forwardSlash);
    public MarkupStartTagSyntax WithCloseAngle(SyntaxToken closeAngle);
    public MarkupStartTagSyntax AddAttributes(RazorSyntaxNode[] items);
    public bool get_IsMarkupTransition();
    public SyntaxList`1<RazorSyntaxNode> get_Children();
    public string GetTagNameWithOptionalBang();
    public bool IsSelfClosing();
    public bool IsVoidElement();
    private SyntaxList`1<RazorSyntaxNode> GetLegacyChildren();
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Syntax.MarkupSyntaxNode : RazorSyntaxNode {
    internal MarkupSyntaxNode(GreenNode green, SyntaxNode parent, int position);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.MarkupTagHelperAttributeSyntax : MarkupSyntaxNode {
    private MarkupTextLiteralSyntax _namePrefix;
    private MarkupTextLiteralSyntax _name;
    private MarkupTextLiteralSyntax _nameSuffix;
    private SyntaxToken _equalsToken;
    private MarkupTextLiteralSyntax _valuePrefix;
    private MarkupTagHelperAttributeValueSyntax _value;
    private MarkupTextLiteralSyntax _valueSuffix;
    private static string TagHelperAttributeInfoKey;
    public MarkupTextLiteralSyntax NamePrefix { get; }
    public MarkupTextLiteralSyntax Name { get; }
    public MarkupTextLiteralSyntax NameSuffix { get; }
    public SyntaxToken EqualsToken { get; }
    public MarkupTextLiteralSyntax ValuePrefix { get; }
    public MarkupTagHelperAttributeValueSyntax Value { get; }
    public MarkupTextLiteralSyntax ValueSuffix { get; }
    public TagHelperAttributeInfo TagHelperAttributeInfo { get; }
    internal MarkupTagHelperAttributeSyntax(GreenNode green, SyntaxNode parent, int position);
    private static MarkupTagHelperAttributeSyntax();
    public MarkupTextLiteralSyntax get_NamePrefix();
    public MarkupTextLiteralSyntax get_Name();
    public MarkupTextLiteralSyntax get_NameSuffix();
    public SyntaxToken get_EqualsToken();
    public MarkupTextLiteralSyntax get_ValuePrefix();
    public MarkupTagHelperAttributeValueSyntax get_Value();
    public MarkupTextLiteralSyntax get_ValueSuffix();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupTagHelperAttributeSyntax Update(MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name, MarkupTextLiteralSyntax nameSuffix, SyntaxToken equalsToken, MarkupTextLiteralSyntax valuePrefix, MarkupTagHelperAttributeValueSyntax value, MarkupTextLiteralSyntax valueSuffix);
    public MarkupTagHelperAttributeSyntax WithNamePrefix(MarkupTextLiteralSyntax namePrefix);
    public MarkupTagHelperAttributeSyntax WithName(MarkupTextLiteralSyntax name);
    public MarkupTagHelperAttributeSyntax WithNameSuffix(MarkupTextLiteralSyntax nameSuffix);
    public MarkupTagHelperAttributeSyntax WithEqualsToken(SyntaxToken equalsToken);
    public MarkupTagHelperAttributeSyntax WithValuePrefix(MarkupTextLiteralSyntax valuePrefix);
    public MarkupTagHelperAttributeSyntax WithValue(MarkupTagHelperAttributeValueSyntax value);
    public MarkupTagHelperAttributeSyntax WithValueSuffix(MarkupTextLiteralSyntax valueSuffix);
    public MarkupTagHelperAttributeSyntax AddNamePrefixLiteralTokens(SyntaxToken[] items);
    public MarkupTagHelperAttributeSyntax AddNameLiteralTokens(SyntaxToken[] items);
    public MarkupTagHelperAttributeSyntax AddNameSuffixLiteralTokens(SyntaxToken[] items);
    public MarkupTagHelperAttributeSyntax AddValuePrefixLiteralTokens(SyntaxToken[] items);
    public MarkupTagHelperAttributeSyntax AddValueChildren(RazorSyntaxNode[] items);
    public MarkupTagHelperAttributeSyntax AddValueSuffixLiteralTokens(SyntaxToken[] items);
    public TagHelperAttributeInfo get_TagHelperAttributeInfo();
    public MarkupTagHelperAttributeSyntax WithTagHelperAttributeInfo(TagHelperAttributeInfo info);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.MarkupTagHelperAttributeValueSyntax : RazorBlockSyntax {
    private SyntaxNode _children;
    public SyntaxList`1<RazorSyntaxNode> Children { get; }
    internal MarkupTagHelperAttributeValueSyntax(GreenNode green, SyntaxNode parent, int position);
    public virtual SyntaxList`1<RazorSyntaxNode> get_Children();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupTagHelperAttributeValueSyntax Update(SyntaxList`1<RazorSyntaxNode> children);
    internal virtual RazorBlockSyntax WithChildrenCore(SyntaxList`1<RazorSyntaxNode> children);
    public MarkupTagHelperAttributeValueSyntax WithChildren(SyntaxList`1<RazorSyntaxNode> children);
    internal virtual RazorBlockSyntax AddChildrenCore(RazorSyntaxNode[] items);
    public MarkupTagHelperAttributeValueSyntax AddChildren(RazorSyntaxNode[] items);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.MarkupTagHelperDirectiveAttributeSyntax : MarkupSyntaxNode {
    private MarkupTextLiteralSyntax _namePrefix;
    private RazorMetaCodeSyntax _transition;
    private MarkupTextLiteralSyntax _name;
    private RazorMetaCodeSyntax _colon;
    private MarkupTextLiteralSyntax _parameterName;
    private MarkupTextLiteralSyntax _nameSuffix;
    private SyntaxToken _equalsToken;
    private MarkupTextLiteralSyntax _valuePrefix;
    private MarkupTagHelperAttributeValueSyntax _value;
    private MarkupTextLiteralSyntax _valueSuffix;
    private static string TagHelperAttributeInfoKey;
    public MarkupTextLiteralSyntax NamePrefix { get; }
    public RazorMetaCodeSyntax Transition { get; }
    public MarkupTextLiteralSyntax Name { get; }
    public RazorMetaCodeSyntax Colon { get; }
    public MarkupTextLiteralSyntax ParameterName { get; }
    public MarkupTextLiteralSyntax NameSuffix { get; }
    public SyntaxToken EqualsToken { get; }
    public MarkupTextLiteralSyntax ValuePrefix { get; }
    public MarkupTagHelperAttributeValueSyntax Value { get; }
    public MarkupTextLiteralSyntax ValueSuffix { get; }
    public TagHelperAttributeInfo TagHelperAttributeInfo { get; }
    public string FullName { get; }
    internal MarkupTagHelperDirectiveAttributeSyntax(GreenNode green, SyntaxNode parent, int position);
    private static MarkupTagHelperDirectiveAttributeSyntax();
    public MarkupTextLiteralSyntax get_NamePrefix();
    public RazorMetaCodeSyntax get_Transition();
    public MarkupTextLiteralSyntax get_Name();
    public RazorMetaCodeSyntax get_Colon();
    public MarkupTextLiteralSyntax get_ParameterName();
    public MarkupTextLiteralSyntax get_NameSuffix();
    public SyntaxToken get_EqualsToken();
    public MarkupTextLiteralSyntax get_ValuePrefix();
    public MarkupTagHelperAttributeValueSyntax get_Value();
    public MarkupTextLiteralSyntax get_ValueSuffix();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupTagHelperDirectiveAttributeSyntax Update(MarkupTextLiteralSyntax namePrefix, RazorMetaCodeSyntax transition, MarkupTextLiteralSyntax name, RazorMetaCodeSyntax colon, MarkupTextLiteralSyntax parameterName, MarkupTextLiteralSyntax nameSuffix, SyntaxToken equalsToken, MarkupTextLiteralSyntax valuePrefix, MarkupTagHelperAttributeValueSyntax value, MarkupTextLiteralSyntax valueSuffix);
    public MarkupTagHelperDirectiveAttributeSyntax WithNamePrefix(MarkupTextLiteralSyntax namePrefix);
    public MarkupTagHelperDirectiveAttributeSyntax WithTransition(RazorMetaCodeSyntax transition);
    public MarkupTagHelperDirectiveAttributeSyntax WithName(MarkupTextLiteralSyntax name);
    public MarkupTagHelperDirectiveAttributeSyntax WithColon(RazorMetaCodeSyntax colon);
    public MarkupTagHelperDirectiveAttributeSyntax WithParameterName(MarkupTextLiteralSyntax parameterName);
    public MarkupTagHelperDirectiveAttributeSyntax WithNameSuffix(MarkupTextLiteralSyntax nameSuffix);
    public MarkupTagHelperDirectiveAttributeSyntax WithEqualsToken(SyntaxToken equalsToken);
    public MarkupTagHelperDirectiveAttributeSyntax WithValuePrefix(MarkupTextLiteralSyntax valuePrefix);
    public MarkupTagHelperDirectiveAttributeSyntax WithValue(MarkupTagHelperAttributeValueSyntax value);
    public MarkupTagHelperDirectiveAttributeSyntax WithValueSuffix(MarkupTextLiteralSyntax valueSuffix);
    public MarkupTagHelperDirectiveAttributeSyntax AddNamePrefixLiteralTokens(SyntaxToken[] items);
    public MarkupTagHelperDirectiveAttributeSyntax AddTransitionMetaCode(SyntaxToken[] items);
    public MarkupTagHelperDirectiveAttributeSyntax AddNameLiteralTokens(SyntaxToken[] items);
    public MarkupTagHelperDirectiveAttributeSyntax AddColonMetaCode(SyntaxToken[] items);
    public MarkupTagHelperDirectiveAttributeSyntax AddParameterNameLiteralTokens(SyntaxToken[] items);
    public MarkupTagHelperDirectiveAttributeSyntax AddNameSuffixLiteralTokens(SyntaxToken[] items);
    public MarkupTagHelperDirectiveAttributeSyntax AddValuePrefixLiteralTokens(SyntaxToken[] items);
    public MarkupTagHelperDirectiveAttributeSyntax AddValueChildren(RazorSyntaxNode[] items);
    public MarkupTagHelperDirectiveAttributeSyntax AddValueSuffixLiteralTokens(SyntaxToken[] items);
    public TagHelperAttributeInfo get_TagHelperAttributeInfo();
    public string get_FullName();
    public MarkupTagHelperDirectiveAttributeSyntax WithTagHelperAttributeInfo(TagHelperAttributeInfo info);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.MarkupTagHelperElementSyntax : MarkupSyntaxNode {
    private MarkupTagHelperStartTagSyntax _startTag;
    private SyntaxNode _body;
    private MarkupTagHelperEndTagSyntax _endTag;
    private static string TagHelperInfoKey;
    public MarkupTagHelperStartTagSyntax StartTag { get; }
    public SyntaxList`1<RazorSyntaxNode> Body { get; }
    public MarkupTagHelperEndTagSyntax EndTag { get; }
    public TagHelperInfo TagHelperInfo { get; }
    internal MarkupTagHelperElementSyntax(GreenNode green, SyntaxNode parent, int position);
    private static MarkupTagHelperElementSyntax();
    public MarkupTagHelperStartTagSyntax get_StartTag();
    public SyntaxList`1<RazorSyntaxNode> get_Body();
    public MarkupTagHelperEndTagSyntax get_EndTag();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupTagHelperElementSyntax Update(MarkupTagHelperStartTagSyntax startTag, SyntaxList`1<RazorSyntaxNode> body, MarkupTagHelperEndTagSyntax endTag);
    public MarkupTagHelperElementSyntax WithStartTag(MarkupTagHelperStartTagSyntax startTag);
    public MarkupTagHelperElementSyntax WithBody(SyntaxList`1<RazorSyntaxNode> body);
    public MarkupTagHelperElementSyntax WithEndTag(MarkupTagHelperEndTagSyntax endTag);
    public MarkupTagHelperElementSyntax AddStartTagAttributes(RazorSyntaxNode[] items);
    public MarkupTagHelperElementSyntax AddBody(RazorSyntaxNode[] items);
    public TagHelperInfo get_TagHelperInfo();
    public MarkupTagHelperElementSyntax WithTagHelperInfo(TagHelperInfo info);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.MarkupTagHelperEndTagSyntax : MarkupSyntaxNode {
    private SyntaxToken _openAngle;
    private SyntaxToken _forwardSlash;
    private SyntaxToken _bang;
    private SyntaxToken _name;
    private MarkupMiscAttributeContentSyntax _miscAttributeContent;
    private SyntaxToken _closeAngle;
    public SyntaxToken OpenAngle { get; }
    public SyntaxToken ForwardSlash { get; }
    public SyntaxToken Bang { get; }
    public SyntaxToken Name { get; }
    public MarkupMiscAttributeContentSyntax MiscAttributeContent { get; }
    public SyntaxToken CloseAngle { get; }
    public SyntaxList`1<RazorSyntaxNode> Children { get; }
    internal MarkupTagHelperEndTagSyntax(GreenNode green, SyntaxNode parent, int position);
    public SyntaxToken get_OpenAngle();
    public SyntaxToken get_ForwardSlash();
    public SyntaxToken get_Bang();
    public SyntaxToken get_Name();
    public MarkupMiscAttributeContentSyntax get_MiscAttributeContent();
    public SyntaxToken get_CloseAngle();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupTagHelperEndTagSyntax Update(SyntaxToken openAngle, SyntaxToken forwardSlash, SyntaxToken bang, SyntaxToken name, MarkupMiscAttributeContentSyntax miscAttributeContent, SyntaxToken closeAngle);
    public MarkupTagHelperEndTagSyntax WithOpenAngle(SyntaxToken openAngle);
    public MarkupTagHelperEndTagSyntax WithForwardSlash(SyntaxToken forwardSlash);
    public MarkupTagHelperEndTagSyntax WithBang(SyntaxToken bang);
    public MarkupTagHelperEndTagSyntax WithName(SyntaxToken name);
    public MarkupTagHelperEndTagSyntax WithMiscAttributeContent(MarkupMiscAttributeContentSyntax miscAttributeContent);
    public MarkupTagHelperEndTagSyntax WithCloseAngle(SyntaxToken closeAngle);
    public MarkupTagHelperEndTagSyntax AddMiscAttributeContentChildren(RazorSyntaxNode[] items);
    public SyntaxList`1<RazorSyntaxNode> get_Children();
    private SyntaxList`1<RazorSyntaxNode> GetLegacyChildren();
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.MarkupTagHelperStartTagSyntax : MarkupSyntaxNode {
    private SyntaxToken _openAngle;
    private SyntaxToken _bang;
    private SyntaxToken _name;
    private SyntaxNode _attributes;
    private SyntaxToken _forwardSlash;
    private SyntaxToken _closeAngle;
    public SyntaxToken OpenAngle { get; }
    public SyntaxToken Bang { get; }
    public SyntaxToken Name { get; }
    public SyntaxList`1<RazorSyntaxNode> Attributes { get; }
    public SyntaxToken ForwardSlash { get; }
    public SyntaxToken CloseAngle { get; }
    public SyntaxList`1<RazorSyntaxNode> Children { get; }
    internal MarkupTagHelperStartTagSyntax(GreenNode green, SyntaxNode parent, int position);
    public SyntaxToken get_OpenAngle();
    public SyntaxToken get_Bang();
    public SyntaxToken get_Name();
    public SyntaxList`1<RazorSyntaxNode> get_Attributes();
    public SyntaxToken get_ForwardSlash();
    public SyntaxToken get_CloseAngle();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupTagHelperStartTagSyntax Update(SyntaxToken openAngle, SyntaxToken bang, SyntaxToken name, SyntaxList`1<RazorSyntaxNode> attributes, SyntaxToken forwardSlash, SyntaxToken closeAngle);
    public MarkupTagHelperStartTagSyntax WithOpenAngle(SyntaxToken openAngle);
    public MarkupTagHelperStartTagSyntax WithBang(SyntaxToken bang);
    public MarkupTagHelperStartTagSyntax WithName(SyntaxToken name);
    public MarkupTagHelperStartTagSyntax WithAttributes(SyntaxList`1<RazorSyntaxNode> attributes);
    public MarkupTagHelperStartTagSyntax WithForwardSlash(SyntaxToken forwardSlash);
    public MarkupTagHelperStartTagSyntax WithCloseAngle(SyntaxToken closeAngle);
    public MarkupTagHelperStartTagSyntax AddAttributes(RazorSyntaxNode[] items);
    public SyntaxList`1<RazorSyntaxNode> get_Children();
    private SyntaxList`1<RazorSyntaxNode> GetLegacyChildren();
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.MarkupTextLiteralSyntax : MarkupSyntaxNode {
    private SyntaxNode _literalTokens;
    public SyntaxList`1<SyntaxToken> LiteralTokens { get; }
    internal MarkupTextLiteralSyntax(GreenNode green, SyntaxNode parent, int position);
    public SyntaxList`1<SyntaxToken> get_LiteralTokens();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupTextLiteralSyntax Update(SyntaxList`1<SyntaxToken> literalTokens);
    public MarkupTextLiteralSyntax WithLiteralTokens(SyntaxList`1<SyntaxToken> literalTokens);
    public MarkupTextLiteralSyntax AddLiteralTokens(SyntaxToken[] items);
    protected virtual string GetDebuggerDisplay();
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.MarkupTransitionSyntax : MarkupSyntaxNode {
    private SyntaxNode _transitionTokens;
    public SyntaxList`1<SyntaxToken> TransitionTokens { get; }
    internal MarkupTransitionSyntax(GreenNode green, SyntaxNode parent, int position);
    public SyntaxList`1<SyntaxToken> get_TransitionTokens();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public MarkupTransitionSyntax Update(SyntaxList`1<SyntaxToken> transitionTokens);
    public MarkupTransitionSyntax WithTransitionTokens(SyntaxList`1<SyntaxToken> transitionTokens);
    public MarkupTransitionSyntax AddTransitionTokens(SyntaxToken[] items);
}
[FlagsAttribute]
internal enum Microsoft.AspNetCore.Razor.Language.Syntax.NodeFlags : Enum {
    public byte value__;
    public static NodeFlags None;
    public static NodeFlags ContainsDiagnostics;
    public static NodeFlags ContainsStructuredTrivia;
    public static NodeFlags ContainsDirectives;
    public static NodeFlags ContainsSkippedText;
    public static NodeFlags ContainsAnnotations;
    public static NodeFlags IsMissing;
    public static NodeFlags InheritMask;
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.ObjectPool`1 : object {
    private Element[] _items;
    private Factory<T> _factory;
    internal ObjectPool`1(Factory<T> factory);
    internal ObjectPool`1(Factory<T> factory, int size);
    private T CreateInstance();
    internal T Allocate();
    internal void Free(T obj);
    [ConditionalAttribute("DEBUG")]
internal void ForgetTrackedObject(T old, T replacement);
    [ConditionalAttribute("DEBUG")]
private void Validate(object obj);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Syntax.RazorBlockSyntax : RazorSyntaxNode {
    public SyntaxList`1<RazorSyntaxNode> Children { get; }
    internal RazorBlockSyntax(GreenNode green, SyntaxNode parent, int position);
    public abstract virtual SyntaxList`1<RazorSyntaxNode> get_Children();
    public RazorBlockSyntax WithChildren(SyntaxList`1<RazorSyntaxNode> children);
    internal abstract virtual RazorBlockSyntax WithChildrenCore(SyntaxList`1<RazorSyntaxNode> children);
    public RazorBlockSyntax AddChildren(RazorSyntaxNode[] items);
    internal abstract virtual RazorBlockSyntax AddChildrenCore(RazorSyntaxNode[] items);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.RazorCommentBlockSyntax : RazorSyntaxNode {
    private SyntaxToken _startCommentTransition;
    private SyntaxToken _startCommentStar;
    private SyntaxToken _comment;
    private SyntaxToken _endCommentStar;
    private SyntaxToken _endCommentTransition;
    public SyntaxToken StartCommentTransition { get; }
    public SyntaxToken StartCommentStar { get; }
    public SyntaxToken Comment { get; }
    public SyntaxToken EndCommentStar { get; }
    public SyntaxToken EndCommentTransition { get; }
    internal RazorCommentBlockSyntax(GreenNode green, SyntaxNode parent, int position);
    public SyntaxToken get_StartCommentTransition();
    public SyntaxToken get_StartCommentStar();
    public SyntaxToken get_Comment();
    public SyntaxToken get_EndCommentStar();
    public SyntaxToken get_EndCommentTransition();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public RazorCommentBlockSyntax Update(SyntaxToken startCommentTransition, SyntaxToken startCommentStar, SyntaxToken comment, SyntaxToken endCommentStar, SyntaxToken endCommentTransition);
    public RazorCommentBlockSyntax WithStartCommentTransition(SyntaxToken startCommentTransition);
    public RazorCommentBlockSyntax WithStartCommentStar(SyntaxToken startCommentStar);
    public RazorCommentBlockSyntax WithComment(SyntaxToken comment);
    public RazorCommentBlockSyntax WithEndCommentStar(SyntaxToken endCommentStar);
    public RazorCommentBlockSyntax WithEndCommentTransition(SyntaxToken endCommentTransition);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.RazorDirectiveBodySyntax : CSharpSyntaxNode {
    private RazorSyntaxNode _keyword;
    private CSharpCodeBlockSyntax _cSharpCode;
    public RazorSyntaxNode Keyword { get; }
    public CSharpCodeBlockSyntax CSharpCode { get; }
    internal RazorDirectiveBodySyntax(GreenNode green, SyntaxNode parent, int position);
    public RazorSyntaxNode get_Keyword();
    public CSharpCodeBlockSyntax get_CSharpCode();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public RazorDirectiveBodySyntax Update(RazorSyntaxNode keyword, CSharpCodeBlockSyntax cSharpCode);
    public RazorDirectiveBodySyntax WithKeyword(RazorSyntaxNode keyword);
    public RazorDirectiveBodySyntax WithCSharpCode(CSharpCodeBlockSyntax cSharpCode);
    public RazorDirectiveBodySyntax AddCSharpCodeChildren(RazorSyntaxNode[] items);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.RazorDirectiveSyntax : CSharpRazorBlockSyntax {
    private CSharpTransitionSyntax _transition;
    private CSharpSyntaxNode _body;
    private static string DirectiveDescriptorKey;
    public CSharpTransitionSyntax Transition { get; }
    public CSharpSyntaxNode Body { get; }
    public DirectiveDescriptor DirectiveDescriptor { get; }
    internal RazorDirectiveSyntax(GreenNode green, SyntaxNode parent, int position);
    private static RazorDirectiveSyntax();
    public virtual CSharpTransitionSyntax get_Transition();
    public virtual CSharpSyntaxNode get_Body();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public RazorDirectiveSyntax Update(CSharpTransitionSyntax transition, CSharpSyntaxNode body);
    internal virtual CSharpRazorBlockSyntax WithTransitionCore(CSharpTransitionSyntax transition);
    public RazorDirectiveSyntax WithTransition(CSharpTransitionSyntax transition);
    internal virtual CSharpRazorBlockSyntax WithBodyCore(CSharpSyntaxNode body);
    public RazorDirectiveSyntax WithBody(CSharpSyntaxNode body);
    public DirectiveDescriptor get_DirectiveDescriptor();
    public RazorDirectiveSyntax WithDirectiveDescriptor(DirectiveDescriptor descriptor);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.RazorDocumentSyntax : RazorSyntaxNode {
    private RazorBlockSyntax _document;
    public RazorBlockSyntax Document { get; }
    internal RazorDocumentSyntax(GreenNode green, SyntaxNode parent, int position);
    public RazorBlockSyntax get_Document();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public RazorDocumentSyntax Update(RazorBlockSyntax document);
    public RazorDocumentSyntax WithDocument(RazorBlockSyntax document);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.RazorMetaCodeSyntax : RazorSyntaxNode {
    private SyntaxNode _metaCode;
    public SyntaxList`1<SyntaxToken> MetaCode { get; }
    internal RazorMetaCodeSyntax(GreenNode green, SyntaxNode parent, int position);
    public SyntaxList`1<SyntaxToken> get_MetaCode();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public RazorMetaCodeSyntax Update(SyntaxList`1<SyntaxToken> metaCode);
    public RazorMetaCodeSyntax WithMetaCode(SyntaxList`1<SyntaxToken> metaCode);
    public RazorMetaCodeSyntax AddMetaCode(SyntaxToken[] items);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Syntax.RazorSyntaxNode : SyntaxNode {
    public RazorSyntaxNode(GreenNode green, SyntaxNode parent, int position);
}
internal static class Microsoft.AspNetCore.Razor.Language.Syntax.SpecializedCollections : object {
    public static IEnumerator`1<T> EmptyEnumerator();
    public static IEnumerable`1<T> EmptyEnumerable();
    public static ICollection`1<T> EmptyCollection();
    public static IList`1<T> EmptyList();
    public static IReadOnlyList`1<T> EmptyReadOnlyList();
}
internal static class Microsoft.AspNetCore.Razor.Language.Syntax.StackGuard : object {
    public static int MaxUncheckedRecursionDepth;
    public static void EnsureSufficientExecutionStack(int recursionDepth);
}
[DebuggerDisplayAttribute("{GetDebuggerDisplay(), nq}")]
internal class Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxAnnotation : object {
    private long _id;
    private static long s_nextId;
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    public string Kind { get; }
    public object Data { get; }
    public SyntaxAnnotation(string kind);
    public SyntaxAnnotation(string kind, object data);
    [CompilerGeneratedAttribute]
public string get_Kind();
    [CompilerGeneratedAttribute]
public object get_Data();
    private string GetDebuggerDisplay();
    public sealed virtual bool Equals(SyntaxAnnotation other);
    public static bool op_Equality(SyntaxAnnotation left, SyntaxAnnotation right);
    public static bool op_Inequality(SyntaxAnnotation left, SyntaxAnnotation right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxFactory : object {
    public static RazorDocumentSyntax RazorDocument(RazorBlockSyntax document);
    public static RazorCommentBlockSyntax RazorCommentBlock(SyntaxToken startCommentTransition, SyntaxToken startCommentStar, SyntaxToken comment, SyntaxToken endCommentStar, SyntaxToken endCommentTransition);
    public static RazorCommentBlockSyntax RazorCommentBlock();
    public static RazorMetaCodeSyntax RazorMetaCode(SyntaxList`1<SyntaxToken> metaCode);
    public static RazorMetaCodeSyntax RazorMetaCode();
    public static GenericBlockSyntax GenericBlock(SyntaxList`1<RazorSyntaxNode> children);
    public static GenericBlockSyntax GenericBlock();
    public static UnclassifiedTextLiteralSyntax UnclassifiedTextLiteral(SyntaxList`1<SyntaxToken> literalTokens);
    public static UnclassifiedTextLiteralSyntax UnclassifiedTextLiteral();
    public static MarkupBlockSyntax MarkupBlock(SyntaxList`1<RazorSyntaxNode> children);
    public static MarkupBlockSyntax MarkupBlock();
    public static MarkupTransitionSyntax MarkupTransition(SyntaxList`1<SyntaxToken> transitionTokens);
    public static MarkupTransitionSyntax MarkupTransition();
    public static MarkupTextLiteralSyntax MarkupTextLiteral(SyntaxList`1<SyntaxToken> literalTokens);
    public static MarkupTextLiteralSyntax MarkupTextLiteral();
    public static MarkupEphemeralTextLiteralSyntax MarkupEphemeralTextLiteral(SyntaxList`1<SyntaxToken> literalTokens);
    public static MarkupEphemeralTextLiteralSyntax MarkupEphemeralTextLiteral();
    public static MarkupCommentBlockSyntax MarkupCommentBlock(SyntaxList`1<RazorSyntaxNode> children);
    public static MarkupCommentBlockSyntax MarkupCommentBlock();
    public static MarkupMinimizedAttributeBlockSyntax MarkupMinimizedAttributeBlock(MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name);
    public static MarkupMinimizedAttributeBlockSyntax MarkupMinimizedAttributeBlock();
    public static MarkupAttributeBlockSyntax MarkupAttributeBlock(MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name, MarkupTextLiteralSyntax nameSuffix, SyntaxToken equalsToken, MarkupTextLiteralSyntax valuePrefix, RazorBlockSyntax value, MarkupTextLiteralSyntax valueSuffix);
    public static MarkupAttributeBlockSyntax MarkupAttributeBlock(MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name, MarkupTextLiteralSyntax nameSuffix, MarkupTextLiteralSyntax valuePrefix, RazorBlockSyntax value, MarkupTextLiteralSyntax valueSuffix);
    public static MarkupAttributeBlockSyntax MarkupAttributeBlock();
    public static MarkupMiscAttributeContentSyntax MarkupMiscAttributeContent(SyntaxList`1<RazorSyntaxNode> children);
    public static MarkupMiscAttributeContentSyntax MarkupMiscAttributeContent();
    public static MarkupLiteralAttributeValueSyntax MarkupLiteralAttributeValue(MarkupTextLiteralSyntax prefix, MarkupTextLiteralSyntax value);
    public static MarkupLiteralAttributeValueSyntax MarkupLiteralAttributeValue();
    public static MarkupDynamicAttributeValueSyntax MarkupDynamicAttributeValue(MarkupTextLiteralSyntax prefix, RazorBlockSyntax value);
    public static MarkupDynamicAttributeValueSyntax MarkupDynamicAttributeValue(RazorBlockSyntax value);
    public static MarkupElementSyntax MarkupElement(MarkupStartTagSyntax startTag, SyntaxList`1<RazorSyntaxNode> body, MarkupEndTagSyntax endTag);
    public static MarkupElementSyntax MarkupElement(SyntaxList`1<RazorSyntaxNode> body);
    public static MarkupStartTagSyntax MarkupStartTag(SyntaxToken openAngle, SyntaxToken bang, SyntaxToken name, SyntaxList`1<RazorSyntaxNode> attributes, SyntaxToken forwardSlash, SyntaxToken closeAngle);
    public static MarkupStartTagSyntax MarkupStartTag(SyntaxList`1<RazorSyntaxNode> attributes);
    public static MarkupEndTagSyntax MarkupEndTag(SyntaxToken openAngle, SyntaxToken forwardSlash, SyntaxToken bang, SyntaxToken name, MarkupMiscAttributeContentSyntax miscAttributeContent, SyntaxToken closeAngle);
    public static MarkupEndTagSyntax MarkupEndTag(MarkupMiscAttributeContentSyntax miscAttributeContent);
    public static MarkupTagHelperElementSyntax MarkupTagHelperElement(MarkupTagHelperStartTagSyntax startTag, SyntaxList`1<RazorSyntaxNode> body, MarkupTagHelperEndTagSyntax endTag);
    public static MarkupTagHelperElementSyntax MarkupTagHelperElement(SyntaxList`1<RazorSyntaxNode> body);
    public static MarkupTagHelperStartTagSyntax MarkupTagHelperStartTag(SyntaxToken openAngle, SyntaxToken bang, SyntaxToken name, SyntaxList`1<RazorSyntaxNode> attributes, SyntaxToken forwardSlash, SyntaxToken closeAngle);
    public static MarkupTagHelperStartTagSyntax MarkupTagHelperStartTag(SyntaxList`1<RazorSyntaxNode> attributes);
    public static MarkupTagHelperEndTagSyntax MarkupTagHelperEndTag(SyntaxToken openAngle, SyntaxToken forwardSlash, SyntaxToken bang, SyntaxToken name, MarkupMiscAttributeContentSyntax miscAttributeContent, SyntaxToken closeAngle);
    public static MarkupTagHelperEndTagSyntax MarkupTagHelperEndTag(MarkupMiscAttributeContentSyntax miscAttributeContent);
    public static MarkupTagHelperAttributeSyntax MarkupTagHelperAttribute(MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name, MarkupTextLiteralSyntax nameSuffix, SyntaxToken equalsToken, MarkupTextLiteralSyntax valuePrefix, MarkupTagHelperAttributeValueSyntax value, MarkupTextLiteralSyntax valueSuffix);
    public static MarkupTagHelperAttributeSyntax MarkupTagHelperAttribute(MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name, MarkupTextLiteralSyntax nameSuffix, MarkupTextLiteralSyntax valuePrefix, MarkupTagHelperAttributeValueSyntax value, MarkupTextLiteralSyntax valueSuffix);
    public static MarkupTagHelperAttributeSyntax MarkupTagHelperAttribute();
    public static MarkupMinimizedTagHelperAttributeSyntax MarkupMinimizedTagHelperAttribute(MarkupTextLiteralSyntax namePrefix, MarkupTextLiteralSyntax name);
    public static MarkupMinimizedTagHelperAttributeSyntax MarkupMinimizedTagHelperAttribute();
    public static MarkupTagHelperAttributeValueSyntax MarkupTagHelperAttributeValue(SyntaxList`1<RazorSyntaxNode> children);
    public static MarkupTagHelperAttributeValueSyntax MarkupTagHelperAttributeValue();
    public static MarkupTagHelperDirectiveAttributeSyntax MarkupTagHelperDirectiveAttribute(MarkupTextLiteralSyntax namePrefix, RazorMetaCodeSyntax transition, MarkupTextLiteralSyntax name, RazorMetaCodeSyntax colon, MarkupTextLiteralSyntax parameterName, MarkupTextLiteralSyntax nameSuffix, SyntaxToken equalsToken, MarkupTextLiteralSyntax valuePrefix, MarkupTagHelperAttributeValueSyntax value, MarkupTextLiteralSyntax valueSuffix);
    public static MarkupTagHelperDirectiveAttributeSyntax MarkupTagHelperDirectiveAttribute(MarkupTextLiteralSyntax namePrefix, RazorMetaCodeSyntax transition, MarkupTextLiteralSyntax name, RazorMetaCodeSyntax colon, MarkupTextLiteralSyntax parameterName, MarkupTextLiteralSyntax nameSuffix, MarkupTextLiteralSyntax valuePrefix, MarkupTagHelperAttributeValueSyntax value, MarkupTextLiteralSyntax valueSuffix);
    public static MarkupTagHelperDirectiveAttributeSyntax MarkupTagHelperDirectiveAttribute();
    public static MarkupMinimizedTagHelperDirectiveAttributeSyntax MarkupMinimizedTagHelperDirectiveAttribute(MarkupTextLiteralSyntax namePrefix, RazorMetaCodeSyntax transition, MarkupTextLiteralSyntax name, RazorMetaCodeSyntax colon, MarkupTextLiteralSyntax parameterName);
    public static MarkupMinimizedTagHelperDirectiveAttributeSyntax MarkupMinimizedTagHelperDirectiveAttribute();
    public static CSharpCodeBlockSyntax CSharpCodeBlock(SyntaxList`1<RazorSyntaxNode> children);
    public static CSharpCodeBlockSyntax CSharpCodeBlock();
    public static CSharpTransitionSyntax CSharpTransition(SyntaxToken transition);
    public static CSharpTransitionSyntax CSharpTransition();
    public static CSharpStatementLiteralSyntax CSharpStatementLiteral(SyntaxList`1<SyntaxToken> literalTokens);
    public static CSharpStatementLiteralSyntax CSharpStatementLiteral();
    public static CSharpExpressionLiteralSyntax CSharpExpressionLiteral(SyntaxList`1<SyntaxToken> literalTokens);
    public static CSharpExpressionLiteralSyntax CSharpExpressionLiteral();
    public static CSharpEphemeralTextLiteralSyntax CSharpEphemeralTextLiteral(SyntaxList`1<SyntaxToken> literalTokens);
    public static CSharpEphemeralTextLiteralSyntax CSharpEphemeralTextLiteral();
    public static CSharpTemplateBlockSyntax CSharpTemplateBlock(SyntaxList`1<RazorSyntaxNode> children);
    public static CSharpTemplateBlockSyntax CSharpTemplateBlock();
    public static CSharpStatementSyntax CSharpStatement(CSharpTransitionSyntax transition, CSharpSyntaxNode body);
    public static CSharpStatementSyntax CSharpStatement(CSharpSyntaxNode body);
    public static CSharpStatementBodySyntax CSharpStatementBody(RazorMetaCodeSyntax openBrace, CSharpCodeBlockSyntax cSharpCode, RazorMetaCodeSyntax closeBrace);
    public static CSharpStatementBodySyntax CSharpStatementBody();
    public static CSharpExplicitExpressionSyntax CSharpExplicitExpression(CSharpTransitionSyntax transition, CSharpSyntaxNode body);
    public static CSharpExplicitExpressionSyntax CSharpExplicitExpression(CSharpSyntaxNode body);
    public static CSharpExplicitExpressionBodySyntax CSharpExplicitExpressionBody(RazorMetaCodeSyntax openParen, CSharpCodeBlockSyntax cSharpCode, RazorMetaCodeSyntax closeParen);
    public static CSharpExplicitExpressionBodySyntax CSharpExplicitExpressionBody();
    public static CSharpImplicitExpressionSyntax CSharpImplicitExpression(CSharpTransitionSyntax transition, CSharpSyntaxNode body);
    public static CSharpImplicitExpressionSyntax CSharpImplicitExpression(CSharpSyntaxNode body);
    public static CSharpImplicitExpressionBodySyntax CSharpImplicitExpressionBody(CSharpCodeBlockSyntax cSharpCode);
    public static CSharpImplicitExpressionBodySyntax CSharpImplicitExpressionBody();
    public static RazorDirectiveSyntax RazorDirective(CSharpTransitionSyntax transition, CSharpSyntaxNode body);
    public static RazorDirectiveSyntax RazorDirective(CSharpSyntaxNode body);
    public static RazorDirectiveBodySyntax RazorDirectiveBody(RazorSyntaxNode keyword, CSharpCodeBlockSyntax cSharpCode);
    public static RazorDirectiveBodySyntax RazorDirectiveBody(RazorSyntaxNode keyword);
    public static SyntaxToken Token(SyntaxKind kind, RazorDiagnostic[] diagnostics);
    public static SyntaxToken Token(SyntaxKind kind, string content, RazorDiagnostic[] diagnostics);
    internal static SyntaxToken MissingToken(SyntaxKind kind, RazorDiagnostic[] diagnostics);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxList : SyntaxNode {
    internal SyntaxList(SyntaxList green, SyntaxNode parent, int position);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxList`1 : ValueType {
    [CompilerGeneratedAttribute]
private SyntaxNode <Node>k__BackingField;
    internal SyntaxNode Node { get; }
    public int Count { get; }
    public TNode Item { get; }
    public TextSpan FullSpan { get; }
    public TextSpan Span { get; }
    private TNode[] Nodes { get; }
    public SyntaxList`1(SyntaxNode node);
    public SyntaxList`1(TNode node);
    public SyntaxList`1(IEnumerable`1<TNode> nodes);
    private static SyntaxNode CreateNode(IEnumerable`1<TNode> nodes);
    [CompilerGeneratedAttribute]
internal SyntaxNode get_Node();
    public sealed virtual int get_Count();
    public sealed virtual TNode get_Item(int index);
    internal SyntaxNode ItemInternal(int index);
    public TextSpan get_FullSpan();
    public TextSpan get_Span();
    public virtual string ToString();
    public string ToFullString();
    public SyntaxList`1<TNode> Add(TNode node);
    public SyntaxList`1<TNode> AddRange(IEnumerable`1<TNode> nodes);
    public SyntaxList`1<TNode> Insert(int index, TNode node);
    public SyntaxList`1<TNode> InsertRange(int index, IEnumerable`1<TNode> nodes);
    public SyntaxList`1<TNode> RemoveAt(int index);
    public SyntaxList`1<TNode> Remove(TNode node);
    public SyntaxList`1<TNode> Replace(TNode nodeInList, TNode newNode);
    public SyntaxList`1<TNode> ReplaceRange(TNode nodeInList, IEnumerable`1<TNode> newNodes);
    private static SyntaxList`1<TNode> CreateList(List`1<TNode> items);
    private static SyntaxList`1<TNode> CreateList(GreenNode creator, List`1<TNode> items);
    public TNode First();
    public TNode FirstOrDefault();
    public TNode Last();
    public TNode LastOrDefault();
    public bool Any();
    private TNode[] get_Nodes();
    public Enumerator<TNode> GetEnumerator();
    private sealed virtual override IEnumerator`1<TNode> System.Collections.Generic.IEnumerable<TNode>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public static bool op_Equality(SyntaxList`1<TNode> left, SyntaxList`1<TNode> right);
    public static bool op_Inequality(SyntaxList`1<TNode> left, SyntaxList`1<TNode> right);
    public sealed virtual bool Equals(SyntaxList`1<TNode> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static SyntaxList`1<TNode> op_Implicit(SyntaxList`1<SyntaxNode> nodes);
    public static SyntaxList`1<SyntaxNode> op_Implicit(SyntaxList`1<TNode> nodes);
    public int IndexOf(TNode node);
    public int IndexOf(Func`2<TNode, bool> predicate);
    internal int IndexOf(SyntaxKind kind);
    public int LastIndexOf(TNode node);
    public int LastIndexOf(Func`2<TNode, bool> predicate);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxListBuilder : object {
    private ArrayElement`1[] _nodes;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; private set; }
    public SyntaxListBuilder(int size);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public void Clear();
    public void Add(SyntaxNode item);
    internal void AddInternal(GreenNode item);
    public void AddRange(SyntaxNode[] items);
    public void AddRange(SyntaxNode[] items, int offset, int length);
    [ConditionalAttribute("DEBUG")]
private void Validate(int start, int end);
    public void AddRange(SyntaxList`1<SyntaxNode> list);
    public void AddRange(SyntaxList`1<SyntaxNode> list, int offset, int count);
    public void AddRange(SyntaxList`1<TNode> list);
    public void AddRange(SyntaxList`1<TNode> list, int offset, int count);
    private void Grow(int size);
    public bool Any(SyntaxKind kind);
    internal GreenNode ToListNode();
    public static SyntaxList`1<SyntaxNode> op_Implicit(SyntaxListBuilder builder);
    internal void RemoveLast();
}
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxListBuilder`1 : ValueType {
    private SyntaxListBuilder _builder;
    public bool IsNull { get; }
    public int Count { get; }
    public SyntaxListBuilder`1(int size);
    internal SyntaxListBuilder`1(SyntaxListBuilder builder);
    public static SyntaxListBuilder`1<TNode> Create();
    public bool get_IsNull();
    public int get_Count();
    public void Clear();
    public SyntaxListBuilder`1<TNode> Add(TNode node);
    public void AddRange(TNode[] items, int offset, int length);
    public void AddRange(SyntaxList`1<TNode> nodes);
    public void AddRange(SyntaxList`1<TNode> nodes, int offset, int length);
    public bool Any(SyntaxKind kind);
    public SyntaxList`1<TNode> ToList();
    public SyntaxList`1<TNode> Consume();
    public static SyntaxListBuilder op_Implicit(SyntaxListBuilder`1<TNode> builder);
    public static SyntaxList`1<TNode> op_Implicit(SyntaxListBuilder`1<TNode> builder);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxListBuilderExtensions : object {
    [ExtensionAttribute]
public static SyntaxList`1<SyntaxNode> ToList(SyntaxListBuilder builder);
    [ExtensionAttribute]
public static SyntaxList`1<TNode> ToList(SyntaxListBuilder builder);
}
[DebuggerDisplayAttribute("{GetDebuggerDisplay(), nq}")]
internal abstract class Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxNode : object {
    [CompilerGeneratedAttribute]
private GreenNode <Green>k__BackingField;
    [CompilerGeneratedAttribute]
private SyntaxNode <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    internal GreenNode Green { get; }
    public SyntaxNode Parent { get; }
    public int Position { get; }
    public int EndPosition { get; }
    public SyntaxKind Kind { get; }
    public int Width { get; }
    public int FullWidth { get; }
    public int SpanStart { get; }
    public TextSpan FullSpan { get; }
    public TextSpan Span { get; }
    internal int SlotCount { get; }
    public bool IsList { get; }
    public bool IsMissing { get; }
    public bool IsToken { get; }
    public bool IsTrivia { get; }
    public bool HasLeadingTrivia { get; }
    public bool HasTrailingTrivia { get; }
    public bool ContainsDiagnostics { get; }
    public bool ContainsAnnotations { get; }
    internal string SerializedValue { get; }
    public SyntaxNode(GreenNode green, SyntaxNode parent, int position);
    [CompilerGeneratedAttribute]
internal GreenNode get_Green();
    [CompilerGeneratedAttribute]
public SyntaxNode get_Parent();
    [CompilerGeneratedAttribute]
public int get_Position();
    public int get_EndPosition();
    public SyntaxKind get_Kind();
    public int get_Width();
    public int get_FullWidth();
    public int get_SpanStart();
    public TextSpan get_FullSpan();
    public TextSpan get_Span();
    internal int get_SlotCount();
    public bool get_IsList();
    public bool get_IsMissing();
    public bool get_IsToken();
    public bool get_IsTrivia();
    public bool get_HasLeadingTrivia();
    public bool get_HasTrailingTrivia();
    public bool get_ContainsDiagnostics();
    public bool get_ContainsAnnotations();
    internal string get_SerializedValue();
    public abstract virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public abstract virtual void Accept(SyntaxVisitor visitor);
    internal abstract virtual SyntaxNode GetNodeSlot(int index);
    internal abstract virtual SyntaxNode GetCachedSlot(int index);
    internal SyntaxNode GetRed(SyntaxNode& field, int slot);
    internal SyntaxNode GetRedAtZero(SyntaxNode& field);
    protected T GetRed(T& field, int slot);
    protected T GetRedAtZero(T& field);
    internal SyntaxNode GetRedElement(SyntaxNode& element, int slot);
    internal virtual int GetChildPosition(int index);
    public virtual SyntaxTriviaList GetLeadingTrivia();
    public virtual SyntaxTriviaList GetTrailingTrivia();
    internal SyntaxToken GetFirstToken();
    internal SyntaxList`1<SyntaxToken> GetTokens();
    internal SyntaxToken GetLastToken();
    public SyntaxNode GetFirstTerminal();
    public SyntaxNode GetLastTerminal();
    public ChildSyntaxList ChildNodes();
    public IEnumerable`1<SyntaxNode> Ancestors();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxNode/<AncestorsAndSelf>d__63")]
public IEnumerable`1<SyntaxNode> AncestorsAndSelf();
    public TNode FirstAncestorOrSelf(Func`2<TNode, bool> predicate);
    public IEnumerable`1<SyntaxNode> DescendantNodes(Func`2<SyntaxNode, bool> descendIntoChildren);
    public IEnumerable`1<SyntaxNode> DescendantNodesAndSelf(Func`2<SyntaxNode, bool> descendIntoChildren);
    protected internal SyntaxNode ReplaceCore(IEnumerable`1<TNode> nodes, Func`3<TNode, TNode, SyntaxNode> computeReplacementNode);
    protected internal SyntaxNode ReplaceNodeInListCore(SyntaxNode originalNode, IEnumerable`1<SyntaxNode> replacementNodes);
    protected internal SyntaxNode InsertNodesInListCore(SyntaxNode nodeInList, IEnumerable`1<SyntaxNode> nodesToInsert, bool insertBefore);
    public RazorDiagnostic[] GetDiagnostics();
    public SyntaxAnnotation[] GetAnnotations();
    public bool IsEquivalentTo(SyntaxNode other);
    public virtual string ToString();
    public virtual string ToFullString();
    protected virtual string GetDebuggerDisplay();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxNode/<DescendantNodesImpl>d__76")]
private IEnumerable`1<SyntaxNode> DescendantNodesImpl(TextSpan span, Func`2<SyntaxNode, bool> descendIntoChildren, bool includeSelf);
    private static bool IsInSpan(TextSpan& span, TextSpan childSpan);
    [CompilerGeneratedAttribute]
internal static void <GetTokens>g__AddTokens|57_0(SyntaxNode current, SyntaxListBuilder`1<SyntaxToken> tokens);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxNodeExtensions : object {
    [ExtensionAttribute]
public static TNode WithAnnotations(TNode node, SyntaxAnnotation[] annotations);
    [ExtensionAttribute]
public static object GetAnnotationValue(TNode node, string key);
    [ExtensionAttribute]
public static TNode WithDiagnostics(TNode node, RazorDiagnostic[] diagnostics);
    [ExtensionAttribute]
public static TNode AppendDiagnostic(TNode node, RazorDiagnostic[] diagnostics);
    [ExtensionAttribute]
public static IReadOnlyList`1<RazorDiagnostic> GetAllDiagnostics(TNode node);
    [ExtensionAttribute]
public static SourceLocation GetSourceLocation(SyntaxNode node, RazorSourceDocument source);
    [ExtensionAttribute]
public static SourceSpan GetSourceSpan(SyntaxNode node, RazorSourceDocument source);
    [ExtensionAttribute]
public static TRoot ReplaceSyntax(TRoot root, IEnumerable`1<SyntaxNode> nodes, Func`3<SyntaxNode, SyntaxNode, SyntaxNode> computeReplacementNode);
    [ExtensionAttribute]
public static TRoot ReplaceNodes(TRoot root, IEnumerable`1<TNode> nodes, Func`3<TNode, TNode, SyntaxNode> computeReplacementNode);
    [ExtensionAttribute]
public static TRoot ReplaceNode(TRoot root, SyntaxNode oldNode, SyntaxNode newNode);
    [ExtensionAttribute]
public static TRoot ReplaceNode(TRoot root, SyntaxNode oldNode, IEnumerable`1<SyntaxNode> newNodes);
    [ExtensionAttribute]
public static TRoot InsertNodesBefore(TRoot root, SyntaxNode nodeInList, IEnumerable`1<SyntaxNode> newNodes);
    [ExtensionAttribute]
public static TRoot InsertNodesAfter(TRoot root, SyntaxNode nodeInList, IEnumerable`1<SyntaxNode> newNodes);
    [ExtensionAttribute]
public static string GetContent(TNode node);
}
internal static class Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxReplacer : object {
    internal static SyntaxNode Replace(SyntaxNode root, IEnumerable`1<TNode> nodes, Func`3<TNode, TNode, SyntaxNode> computeReplacementNode);
    internal static SyntaxNode ReplaceNodeInList(SyntaxNode root, SyntaxNode originalNode, IEnumerable`1<SyntaxNode> newNodes);
    internal static SyntaxNode InsertNodeInList(SyntaxNode root, SyntaxNode nodeInList, IEnumerable`1<SyntaxNode> nodesToInsert, bool insertBefore);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxRewriter : SyntaxVisitor`1<SyntaxNode> {
    private int _recursionDepth;
    public virtual SyntaxNode VisitRazorDocument(RazorDocumentSyntax node);
    public virtual SyntaxNode VisitRazorCommentBlock(RazorCommentBlockSyntax node);
    public virtual SyntaxNode VisitRazorMetaCode(RazorMetaCodeSyntax node);
    public virtual SyntaxNode VisitGenericBlock(GenericBlockSyntax node);
    public virtual SyntaxNode VisitUnclassifiedTextLiteral(UnclassifiedTextLiteralSyntax node);
    public virtual SyntaxNode VisitMarkupBlock(MarkupBlockSyntax node);
    public virtual SyntaxNode VisitMarkupTransition(MarkupTransitionSyntax node);
    public virtual SyntaxNode VisitMarkupTextLiteral(MarkupTextLiteralSyntax node);
    public virtual SyntaxNode VisitMarkupEphemeralTextLiteral(MarkupEphemeralTextLiteralSyntax node);
    public virtual SyntaxNode VisitMarkupCommentBlock(MarkupCommentBlockSyntax node);
    public virtual SyntaxNode VisitMarkupMinimizedAttributeBlock(MarkupMinimizedAttributeBlockSyntax node);
    public virtual SyntaxNode VisitMarkupAttributeBlock(MarkupAttributeBlockSyntax node);
    public virtual SyntaxNode VisitMarkupMiscAttributeContent(MarkupMiscAttributeContentSyntax node);
    public virtual SyntaxNode VisitMarkupLiteralAttributeValue(MarkupLiteralAttributeValueSyntax node);
    public virtual SyntaxNode VisitMarkupDynamicAttributeValue(MarkupDynamicAttributeValueSyntax node);
    public virtual SyntaxNode VisitMarkupElement(MarkupElementSyntax node);
    public virtual SyntaxNode VisitMarkupStartTag(MarkupStartTagSyntax node);
    public virtual SyntaxNode VisitMarkupEndTag(MarkupEndTagSyntax node);
    public virtual SyntaxNode VisitMarkupTagHelperElement(MarkupTagHelperElementSyntax node);
    public virtual SyntaxNode VisitMarkupTagHelperStartTag(MarkupTagHelperStartTagSyntax node);
    public virtual SyntaxNode VisitMarkupTagHelperEndTag(MarkupTagHelperEndTagSyntax node);
    public virtual SyntaxNode VisitMarkupTagHelperAttribute(MarkupTagHelperAttributeSyntax node);
    public virtual SyntaxNode VisitMarkupMinimizedTagHelperAttribute(MarkupMinimizedTagHelperAttributeSyntax node);
    public virtual SyntaxNode VisitMarkupTagHelperAttributeValue(MarkupTagHelperAttributeValueSyntax node);
    public virtual SyntaxNode VisitMarkupTagHelperDirectiveAttribute(MarkupTagHelperDirectiveAttributeSyntax node);
    public virtual SyntaxNode VisitMarkupMinimizedTagHelperDirectiveAttribute(MarkupMinimizedTagHelperDirectiveAttributeSyntax node);
    public virtual SyntaxNode VisitCSharpCodeBlock(CSharpCodeBlockSyntax node);
    public virtual SyntaxNode VisitCSharpTransition(CSharpTransitionSyntax node);
    public virtual SyntaxNode VisitCSharpStatementLiteral(CSharpStatementLiteralSyntax node);
    public virtual SyntaxNode VisitCSharpExpressionLiteral(CSharpExpressionLiteralSyntax node);
    public virtual SyntaxNode VisitCSharpEphemeralTextLiteral(CSharpEphemeralTextLiteralSyntax node);
    public virtual SyntaxNode VisitCSharpTemplateBlock(CSharpTemplateBlockSyntax node);
    public virtual SyntaxNode VisitCSharpStatement(CSharpStatementSyntax node);
    public virtual SyntaxNode VisitCSharpStatementBody(CSharpStatementBodySyntax node);
    public virtual SyntaxNode VisitCSharpExplicitExpression(CSharpExplicitExpressionSyntax node);
    public virtual SyntaxNode VisitCSharpExplicitExpressionBody(CSharpExplicitExpressionBodySyntax node);
    public virtual SyntaxNode VisitCSharpImplicitExpression(CSharpImplicitExpressionSyntax node);
    public virtual SyntaxNode VisitCSharpImplicitExpressionBody(CSharpImplicitExpressionBodySyntax node);
    public virtual SyntaxNode VisitRazorDirective(RazorDirectiveSyntax node);
    public virtual SyntaxNode VisitRazorDirectiveBody(RazorDirectiveBodySyntax node);
    public virtual SyntaxNode Visit(SyntaxNode node);
    public virtual SyntaxNode VisitToken(SyntaxToken token);
    public virtual SyntaxList`1<TNode> VisitList(SyntaxList`1<TNode> list);
    public virtual SyntaxNode VisitTrivia(SyntaxTrivia trivia);
    public virtual SyntaxTriviaList VisitList(SyntaxTriviaList list);
    public virtual TNode VisitListElement(TNode node);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxSerializer : object {
    internal static string Serialize(SyntaxNode node);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxToken : RazorSyntaxNode {
    internal SyntaxToken Green { get; }
    public string Content { get; }
    internal SyntaxToken(GreenNode green, SyntaxNode parent, int position);
    internal SyntaxToken get_Green();
    public string get_Content();
    internal sealed virtual SyntaxNode GetCachedSlot(int index);
    internal sealed virtual SyntaxNode GetNodeSlot(int slot);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public SyntaxToken WithLeadingTrivia(SyntaxNode trivia);
    public SyntaxToken WithTrailingTrivia(SyntaxNode trivia);
    public SyntaxToken WithLeadingTrivia(IEnumerable`1<SyntaxTrivia> trivia);
    public SyntaxToken WithTrailingTrivia(IEnumerable`1<SyntaxTrivia> trivia);
    public virtual SyntaxTriviaList GetLeadingTrivia();
    public virtual SyntaxTriviaList GetTrailingTrivia();
    public virtual string ToString();
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxTrivia : SyntaxNode {
    internal SyntaxTrivia Green { get; }
    public string Text { get; }
    internal SyntaxTrivia(GreenNode green, SyntaxNode parent, int position);
    internal SyntaxTrivia get_Green();
    public string get_Text();
    internal sealed virtual SyntaxNode GetCachedSlot(int index);
    internal sealed virtual SyntaxNode GetNodeSlot(int slot);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public sealed virtual SyntaxTriviaList GetTrailingTrivia();
    public sealed virtual SyntaxTriviaList GetLeadingTrivia();
    public virtual string ToString();
    public sealed virtual string ToFullString();
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxTriviaList : ValueType {
    [CompilerGeneratedAttribute]
private SyntaxNode <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    private static ObjectPool`1<SyntaxTriviaListBuilder> s_builderPool;
    public static SyntaxTriviaList Empty { get; }
    internal SyntaxNode Node { get; }
    internal int Position { get; }
    internal int Index { get; }
    public int Count { get; }
    public SyntaxTrivia Item { get; }
    public TextSpan FullSpan { get; }
    public TextSpan Span { get; }
    private SyntaxTrivia[] Nodes { get; }
    internal SyntaxTriviaList(SyntaxNode node, int position, int index);
    internal SyntaxTriviaList(SyntaxNode node);
    public SyntaxTriviaList(SyntaxTrivia trivia);
    public SyntaxTriviaList(SyntaxTrivia[] trivias);
    public SyntaxTriviaList(IEnumerable`1<SyntaxTrivia> trivias);
    private static SyntaxTriviaList();
    public static SyntaxTriviaList get_Empty();
    private static SyntaxNode CreateNode(SyntaxTrivia[] trivias);
    [CompilerGeneratedAttribute]
internal SyntaxNode get_Node();
    [CompilerGeneratedAttribute]
internal int get_Position();
    [CompilerGeneratedAttribute]
internal int get_Index();
    public sealed virtual int get_Count();
    public SyntaxTrivia ElementAt(int index);
    public sealed virtual SyntaxTrivia get_Item(int index);
    public TextSpan get_FullSpan();
    public TextSpan get_Span();
    public SyntaxTrivia First();
    public SyntaxTrivia Last();
    public bool Any();
    public Reversed Reverse();
    public Enumerator GetEnumerator();
    public int IndexOf(SyntaxTrivia triviaInList);
    internal int IndexOf(SyntaxKind kind);
    public SyntaxTriviaList Add(SyntaxTrivia trivia);
    public SyntaxTriviaList AddRange(IEnumerable`1<SyntaxTrivia> trivia);
    public SyntaxTriviaList Insert(int index, SyntaxTrivia trivia);
    private static SyntaxTriviaListBuilder GetBuilder();
    private static void ClearAndFreeBuilder(SyntaxTriviaListBuilder builder);
    public SyntaxTriviaList InsertRange(int index, IEnumerable`1<SyntaxTrivia> trivia);
    public SyntaxTriviaList RemoveAt(int index);
    public SyntaxTriviaList Remove(SyntaxTrivia triviaInList);
    public SyntaxTriviaList Replace(SyntaxTrivia triviaInList, SyntaxTrivia newTrivia);
    public SyntaxTriviaList ReplaceRange(SyntaxTrivia triviaInList, IEnumerable`1<SyntaxTrivia> newTrivia);
    private SyntaxTrivia[] get_Nodes();
    private sealed virtual override IEnumerator`1<SyntaxTrivia> System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxTrivia>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private SyntaxNode GetNodeAt(int i);
    private static SyntaxNode GetNodeAt(SyntaxNode node, int i);
    public sealed virtual bool Equals(SyntaxTriviaList other);
    public static bool op_Equality(SyntaxTriviaList left, SyntaxTriviaList right);
    public static bool op_Inequality(SyntaxTriviaList left, SyntaxTriviaList right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal void CopyTo(int offset, SyntaxTrivia[] array, int arrayOffset, int count);
    public virtual string ToString();
    public string ToFullString();
    public static SyntaxTriviaList Create(SyntaxTrivia trivia);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxTriviaListBuilder : object {
    private SyntaxTrivia[] _nodes;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; private set; }
    public SyntaxTrivia Item { get; }
    public SyntaxTriviaListBuilder(int size);
    public static SyntaxTriviaListBuilder Create();
    public static SyntaxTriviaList Create(IEnumerable`1<SyntaxTrivia> trivia);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public void Clear();
    public SyntaxTrivia get_Item(int index);
    public void AddRange(IEnumerable`1<SyntaxTrivia> items);
    public SyntaxTriviaListBuilder Add(SyntaxTrivia item);
    public void Add(SyntaxTrivia[] items);
    public void Add(SyntaxTrivia[] items, int offset, int length);
    public void Add(SyntaxTriviaList& list);
    public void Add(SyntaxTriviaList& list, int offset, int length);
    private void Grow(int size);
    public static SyntaxTriviaList op_Implicit(SyntaxTriviaListBuilder builder);
    public SyntaxTriviaList ToList();
}
internal static class Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxUtilities : object {
    public static MarkupTextLiteralSyntax MergeTextLiterals(MarkupTextLiteralSyntax[] literalSyntaxes);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxVisitor : object {
    public virtual void VisitRazorDocument(RazorDocumentSyntax node);
    public virtual void VisitRazorCommentBlock(RazorCommentBlockSyntax node);
    public virtual void VisitRazorMetaCode(RazorMetaCodeSyntax node);
    public virtual void VisitGenericBlock(GenericBlockSyntax node);
    public virtual void VisitUnclassifiedTextLiteral(UnclassifiedTextLiteralSyntax node);
    public virtual void VisitMarkupBlock(MarkupBlockSyntax node);
    public virtual void VisitMarkupTransition(MarkupTransitionSyntax node);
    public virtual void VisitMarkupTextLiteral(MarkupTextLiteralSyntax node);
    public virtual void VisitMarkupEphemeralTextLiteral(MarkupEphemeralTextLiteralSyntax node);
    public virtual void VisitMarkupCommentBlock(MarkupCommentBlockSyntax node);
    public virtual void VisitMarkupMinimizedAttributeBlock(MarkupMinimizedAttributeBlockSyntax node);
    public virtual void VisitMarkupAttributeBlock(MarkupAttributeBlockSyntax node);
    public virtual void VisitMarkupMiscAttributeContent(MarkupMiscAttributeContentSyntax node);
    public virtual void VisitMarkupLiteralAttributeValue(MarkupLiteralAttributeValueSyntax node);
    public virtual void VisitMarkupDynamicAttributeValue(MarkupDynamicAttributeValueSyntax node);
    public virtual void VisitMarkupElement(MarkupElementSyntax node);
    public virtual void VisitMarkupStartTag(MarkupStartTagSyntax node);
    public virtual void VisitMarkupEndTag(MarkupEndTagSyntax node);
    public virtual void VisitMarkupTagHelperElement(MarkupTagHelperElementSyntax node);
    public virtual void VisitMarkupTagHelperStartTag(MarkupTagHelperStartTagSyntax node);
    public virtual void VisitMarkupTagHelperEndTag(MarkupTagHelperEndTagSyntax node);
    public virtual void VisitMarkupTagHelperAttribute(MarkupTagHelperAttributeSyntax node);
    public virtual void VisitMarkupMinimizedTagHelperAttribute(MarkupMinimizedTagHelperAttributeSyntax node);
    public virtual void VisitMarkupTagHelperAttributeValue(MarkupTagHelperAttributeValueSyntax node);
    public virtual void VisitMarkupTagHelperDirectiveAttribute(MarkupTagHelperDirectiveAttributeSyntax node);
    public virtual void VisitMarkupMinimizedTagHelperDirectiveAttribute(MarkupMinimizedTagHelperDirectiveAttributeSyntax node);
    public virtual void VisitCSharpCodeBlock(CSharpCodeBlockSyntax node);
    public virtual void VisitCSharpTransition(CSharpTransitionSyntax node);
    public virtual void VisitCSharpStatementLiteral(CSharpStatementLiteralSyntax node);
    public virtual void VisitCSharpExpressionLiteral(CSharpExpressionLiteralSyntax node);
    public virtual void VisitCSharpEphemeralTextLiteral(CSharpEphemeralTextLiteralSyntax node);
    public virtual void VisitCSharpTemplateBlock(CSharpTemplateBlockSyntax node);
    public virtual void VisitCSharpStatement(CSharpStatementSyntax node);
    public virtual void VisitCSharpStatementBody(CSharpStatementBodySyntax node);
    public virtual void VisitCSharpExplicitExpression(CSharpExplicitExpressionSyntax node);
    public virtual void VisitCSharpExplicitExpressionBody(CSharpExplicitExpressionBodySyntax node);
    public virtual void VisitCSharpImplicitExpression(CSharpImplicitExpressionSyntax node);
    public virtual void VisitCSharpImplicitExpressionBody(CSharpImplicitExpressionBodySyntax node);
    public virtual void VisitRazorDirective(RazorDirectiveSyntax node);
    public virtual void VisitRazorDirectiveBody(RazorDirectiveBodySyntax node);
    public virtual void Visit(SyntaxNode node);
    public virtual void VisitToken(SyntaxToken token);
    public virtual void VisitTrivia(SyntaxTrivia trivia);
    public virtual void DefaultVisit(SyntaxNode node);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxVisitor`1 : object {
    public virtual TResult VisitRazorDocument(RazorDocumentSyntax node);
    public virtual TResult VisitRazorCommentBlock(RazorCommentBlockSyntax node);
    public virtual TResult VisitRazorMetaCode(RazorMetaCodeSyntax node);
    public virtual TResult VisitGenericBlock(GenericBlockSyntax node);
    public virtual TResult VisitUnclassifiedTextLiteral(UnclassifiedTextLiteralSyntax node);
    public virtual TResult VisitMarkupBlock(MarkupBlockSyntax node);
    public virtual TResult VisitMarkupTransition(MarkupTransitionSyntax node);
    public virtual TResult VisitMarkupTextLiteral(MarkupTextLiteralSyntax node);
    public virtual TResult VisitMarkupEphemeralTextLiteral(MarkupEphemeralTextLiteralSyntax node);
    public virtual TResult VisitMarkupCommentBlock(MarkupCommentBlockSyntax node);
    public virtual TResult VisitMarkupMinimizedAttributeBlock(MarkupMinimizedAttributeBlockSyntax node);
    public virtual TResult VisitMarkupAttributeBlock(MarkupAttributeBlockSyntax node);
    public virtual TResult VisitMarkupMiscAttributeContent(MarkupMiscAttributeContentSyntax node);
    public virtual TResult VisitMarkupLiteralAttributeValue(MarkupLiteralAttributeValueSyntax node);
    public virtual TResult VisitMarkupDynamicAttributeValue(MarkupDynamicAttributeValueSyntax node);
    public virtual TResult VisitMarkupElement(MarkupElementSyntax node);
    public virtual TResult VisitMarkupStartTag(MarkupStartTagSyntax node);
    public virtual TResult VisitMarkupEndTag(MarkupEndTagSyntax node);
    public virtual TResult VisitMarkupTagHelperElement(MarkupTagHelperElementSyntax node);
    public virtual TResult VisitMarkupTagHelperStartTag(MarkupTagHelperStartTagSyntax node);
    public virtual TResult VisitMarkupTagHelperEndTag(MarkupTagHelperEndTagSyntax node);
    public virtual TResult VisitMarkupTagHelperAttribute(MarkupTagHelperAttributeSyntax node);
    public virtual TResult VisitMarkupMinimizedTagHelperAttribute(MarkupMinimizedTagHelperAttributeSyntax node);
    public virtual TResult VisitMarkupTagHelperAttributeValue(MarkupTagHelperAttributeValueSyntax node);
    public virtual TResult VisitMarkupTagHelperDirectiveAttribute(MarkupTagHelperDirectiveAttributeSyntax node);
    public virtual TResult VisitMarkupMinimizedTagHelperDirectiveAttribute(MarkupMinimizedTagHelperDirectiveAttributeSyntax node);
    public virtual TResult VisitCSharpCodeBlock(CSharpCodeBlockSyntax node);
    public virtual TResult VisitCSharpTransition(CSharpTransitionSyntax node);
    public virtual TResult VisitCSharpStatementLiteral(CSharpStatementLiteralSyntax node);
    public virtual TResult VisitCSharpExpressionLiteral(CSharpExpressionLiteralSyntax node);
    public virtual TResult VisitCSharpEphemeralTextLiteral(CSharpEphemeralTextLiteralSyntax node);
    public virtual TResult VisitCSharpTemplateBlock(CSharpTemplateBlockSyntax node);
    public virtual TResult VisitCSharpStatement(CSharpStatementSyntax node);
    public virtual TResult VisitCSharpStatementBody(CSharpStatementBodySyntax node);
    public virtual TResult VisitCSharpExplicitExpression(CSharpExplicitExpressionSyntax node);
    public virtual TResult VisitCSharpExplicitExpressionBody(CSharpExplicitExpressionBodySyntax node);
    public virtual TResult VisitCSharpImplicitExpression(CSharpImplicitExpressionSyntax node);
    public virtual TResult VisitCSharpImplicitExpressionBody(CSharpImplicitExpressionBodySyntax node);
    public virtual TResult VisitRazorDirective(RazorDirectiveSyntax node);
    public virtual TResult VisitRazorDirectiveBody(RazorDirectiveBodySyntax node);
    public virtual TResult Visit(SyntaxNode node);
    public virtual TResult VisitToken(SyntaxToken token);
    public virtual TResult VisitTrivia(SyntaxTrivia trivia);
    protected virtual TResult DefaultVisit(SyntaxNode node);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.Syntax.SyntaxWalker : SyntaxVisitor {
    private int _recursionDepth;
    public virtual void Visit(SyntaxNode node);
    public virtual void DefaultVisit(SyntaxNode node);
    public virtual void VisitToken(SyntaxToken token);
    public virtual void VisitLeadingTrivia(SyntaxToken token);
    public virtual void VisitTrailingTrivia(SyntaxToken token);
}
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.Razor.Language.Syntax.TextSpan : ValueType {
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public int Start { get; }
    public int End { get; }
    public int Length { get; }
    public bool IsEmpty { get; }
    public TextSpan(int start, int length);
    [CompilerGeneratedAttribute]
public int get_Start();
    public int get_End();
    [CompilerGeneratedAttribute]
public int get_Length();
    public bool get_IsEmpty();
    public bool Contains(int position);
    public bool Contains(TextSpan span);
    public bool OverlapsWith(TextSpan span);
    public Nullable`1<TextSpan> Overlap(TextSpan span);
    public bool IntersectsWith(TextSpan span);
    public bool IntersectsWith(int position);
    public Nullable`1<TextSpan> Intersection(TextSpan span);
    public static TextSpan FromBounds(int start, int end);
    public static bool op_Equality(TextSpan left, TextSpan right);
    public static bool op_Inequality(TextSpan left, TextSpan right);
    public sealed virtual bool Equals(TextSpan other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual int CompareTo(TextSpan other);
}
internal class Microsoft.AspNetCore.Razor.Language.Syntax.UnclassifiedTextLiteralSyntax : RazorSyntaxNode {
    private SyntaxNode _literalTokens;
    public SyntaxList`1<SyntaxToken> LiteralTokens { get; }
    internal UnclassifiedTextLiteralSyntax(GreenNode green, SyntaxNode parent, int position);
    public SyntaxList`1<SyntaxToken> get_LiteralTokens();
    internal virtual SyntaxNode GetNodeSlot(int index);
    internal virtual SyntaxNode GetCachedSlot(int index);
    public virtual TResult Accept(SyntaxVisitor`1<TResult> visitor);
    public virtual void Accept(SyntaxVisitor visitor);
    public UnclassifiedTextLiteralSyntax Update(SyntaxList`1<SyntaxToken> literalTokens);
    public UnclassifiedTextLiteralSyntax WithLiteralTokens(SyntaxList`1<SyntaxToken> literalTokens);
    public UnclassifiedTextLiteralSyntax AddLiteralTokens(SyntaxToken[] items);
    protected virtual string GetDebuggerDisplay();
}
internal enum Microsoft.AspNetCore.Razor.Language.SyntaxKind : Enum {
    public byte value__;
    public static SyntaxKind RazorDocument;
    public static SyntaxKind GenericBlock;
    public static SyntaxKind RazorComment;
    public static SyntaxKind RazorMetaCode;
    public static SyntaxKind RazorDirective;
    public static SyntaxKind RazorDirectiveBody;
    public static SyntaxKind UnclassifiedTextLiteral;
    public static SyntaxKind MarkupBlock;
    public static SyntaxKind MarkupTransition;
    public static SyntaxKind MarkupElement;
    public static SyntaxKind MarkupStartTag;
    public static SyntaxKind MarkupEndTag;
    public static SyntaxKind MarkupTagBlock;
    public static SyntaxKind MarkupTextLiteral;
    public static SyntaxKind MarkupEphemeralTextLiteral;
    public static SyntaxKind MarkupCommentBlock;
    public static SyntaxKind MarkupAttributeBlock;
    public static SyntaxKind MarkupMinimizedAttributeBlock;
    public static SyntaxKind MarkupMiscAttributeContent;
    public static SyntaxKind MarkupLiteralAttributeValue;
    public static SyntaxKind MarkupDynamicAttributeValue;
    public static SyntaxKind MarkupTagHelperElement;
    public static SyntaxKind MarkupTagHelperStartTag;
    public static SyntaxKind MarkupTagHelperEndTag;
    public static SyntaxKind MarkupTagHelperAttribute;
    public static SyntaxKind MarkupMinimizedTagHelperAttribute;
    public static SyntaxKind MarkupTagHelperDirectiveAttribute;
    public static SyntaxKind MarkupMinimizedTagHelperDirectiveAttribute;
    public static SyntaxKind MarkupTagHelperAttributeValue;
    public static SyntaxKind CSharpStatement;
    public static SyntaxKind CSharpStatementBody;
    public static SyntaxKind CSharpExplicitExpression;
    public static SyntaxKind CSharpExplicitExpressionBody;
    public static SyntaxKind CSharpImplicitExpression;
    public static SyntaxKind CSharpImplicitExpressionBody;
    public static SyntaxKind CSharpCodeBlock;
    public static SyntaxKind CSharpTemplateBlock;
    public static SyntaxKind CSharpStatementLiteral;
    public static SyntaxKind CSharpExpressionLiteral;
    public static SyntaxKind CSharpEphemeralTextLiteral;
    public static SyntaxKind CSharpTransition;
    public static SyntaxKind None;
    public static SyntaxKind Marker;
    public static SyntaxKind List;
    public static SyntaxKind Whitespace;
    public static SyntaxKind NewLine;
    public static SyntaxKind Colon;
    public static SyntaxKind QuestionMark;
    public static SyntaxKind RightBracket;
    public static SyntaxKind LeftBracket;
    public static SyntaxKind Equals;
    public static SyntaxKind Transition;
    public static SyntaxKind Text;
    public static SyntaxKind OpenAngle;
    public static SyntaxKind Bang;
    public static SyntaxKind ForwardSlash;
    public static SyntaxKind DoubleHyphen;
    public static SyntaxKind CloseAngle;
    public static SyntaxKind DoubleQuote;
    public static SyntaxKind SingleQuote;
    public static SyntaxKind Identifier;
    public static SyntaxKind Keyword;
    public static SyntaxKind IntegerLiteral;
    public static SyntaxKind CSharpComment;
    public static SyntaxKind RealLiteral;
    public static SyntaxKind CharacterLiteral;
    public static SyntaxKind StringLiteral;
    public static SyntaxKind Arrow;
    public static SyntaxKind Minus;
    public static SyntaxKind Decrement;
    public static SyntaxKind MinusAssign;
    public static SyntaxKind NotEqual;
    public static SyntaxKind Not;
    public static SyntaxKind Modulo;
    public static SyntaxKind ModuloAssign;
    public static SyntaxKind AndAssign;
    public static SyntaxKind And;
    public static SyntaxKind DoubleAnd;
    public static SyntaxKind LeftParenthesis;
    public static SyntaxKind RightParenthesis;
    public static SyntaxKind Star;
    public static SyntaxKind MultiplyAssign;
    public static SyntaxKind Comma;
    public static SyntaxKind Dot;
    public static SyntaxKind Slash;
    public static SyntaxKind DivideAssign;
    public static SyntaxKind DoubleColon;
    public static SyntaxKind Semicolon;
    public static SyntaxKind NullCoalesce;
    public static SyntaxKind XorAssign;
    public static SyntaxKind Xor;
    public static SyntaxKind LeftBrace;
    public static SyntaxKind OrAssign;
    public static SyntaxKind DoubleOr;
    public static SyntaxKind Or;
    public static SyntaxKind RightBrace;
    public static SyntaxKind Tilde;
    public static SyntaxKind Plus;
    public static SyntaxKind PlusAssign;
    public static SyntaxKind Increment;
    public static SyntaxKind LessThan;
    public static SyntaxKind LessThanEqual;
    public static SyntaxKind LeftShift;
    public static SyntaxKind LeftShiftAssign;
    public static SyntaxKind Assign;
    public static SyntaxKind GreaterThan;
    public static SyntaxKind GreaterThanEqual;
    public static SyntaxKind RightShift;
    public static SyntaxKind RightShiftAssign;
    public static SyntaxKind Hash;
    public static SyntaxKind RazorCommentLiteral;
    public static SyntaxKind RazorCommentStar;
    public static SyntaxKind RazorCommentTransition;
}
internal class Microsoft.AspNetCore.Razor.Language.TagHelperAttributeInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeStructure <AttributeStructure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bound>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDirectiveAttribute>k__BackingField;
    public string Name { get; }
    public string ParameterName { get; }
    public AttributeStructure AttributeStructure { get; }
    public bool Bound { get; }
    public bool IsDirectiveAttribute { get; }
    public TagHelperAttributeInfo(string name, string parameterName, AttributeStructure attributeStructure, bool bound, bool isDirectiveAttribute);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
public AttributeStructure get_AttributeStructure();
    [CompilerGeneratedAttribute]
public bool get_Bound();
    [CompilerGeneratedAttribute]
public bool get_IsDirectiveAttribute();
}
internal class Microsoft.AspNetCore.Razor.Language.TagHelperBinder : object {
    private Dictionary`2<string, HashSet`1<TagHelperDescriptor>> _registrations;
    private string _tagHelperPrefix;
    public TagHelperBinder(string tagHelperPrefix, IEnumerable`1<TagHelperDescriptor> descriptors);
    public TagHelperBinding GetBinding(string tagName, IReadOnlyList`1<KeyValuePair`2<string, string>> attributes, string parentTagName, bool parentIsTagHelper);
    private void Register(TagHelperDescriptor descriptor);
}
public class Microsoft.AspNetCore.Razor.Language.TagHelperBinding : object {
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentTagName>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<KeyValuePair`2<string, string>> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<TagHelperDescriptor, IReadOnlyList`1<TagMatchingRuleDescriptor>> <Mappings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagHelperPrefix>k__BackingField;
    public IEnumerable`1<TagHelperDescriptor> Descriptors { get; }
    public bool IsAttributeMatch { get; }
    public string TagName { get; }
    public string ParentTagName { get; }
    public IReadOnlyList`1<KeyValuePair`2<string, string>> Attributes { get; }
    public IReadOnlyDictionary`2<TagHelperDescriptor, IReadOnlyList`1<TagMatchingRuleDescriptor>> Mappings { get; }
    public string TagHelperPrefix { get; }
    internal TagHelperBinding(string tagName, IReadOnlyList`1<KeyValuePair`2<string, string>> attributes, string parentTagName, IReadOnlyDictionary`2<TagHelperDescriptor, IReadOnlyList`1<TagMatchingRuleDescriptor>> mappings, string tagHelperPrefix);
    public IEnumerable`1<TagHelperDescriptor> get_Descriptors();
    public bool get_IsAttributeMatch();
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
public string get_ParentTagName();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<KeyValuePair`2<string, string>> get_Attributes();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<TagHelperDescriptor, IReadOnlyList`1<TagMatchingRuleDescriptor>> get_Mappings();
    [CompilerGeneratedAttribute]
public string get_TagHelperPrefix();
    public IReadOnlyList`1<TagMatchingRuleDescriptor> GetBoundRules(TagHelperDescriptor descriptor);
}
public static class Microsoft.AspNetCore.Razor.Language.TagHelperConventions : object {
    public static string DefaultKind;
    public static string ComponentKind;
    private static TagHelperConventions();
}
public abstract class Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor : object {
    private IEnumerable`1<RazorDiagnostic> _allDiagnostics;
    private BoundAttributeDescriptor[] _editorRequiredAttributes;
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<TagMatchingRuleDescriptor> <TagMatchingRules>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<BoundAttributeDescriptor> <BoundAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<AllowedChildTagDescriptor> <AllowedChildTags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Documentation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagOutputHint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaseSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RazorDiagnostic> <Diagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Metadata>k__BackingField;
    private Nullable`1<int> _hashCode;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsComponentFullyQualifiedNameMatchCache>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsChildContentTagHelperCache>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ParsedTypeInformation> <ParsedTypeInfo>k__BackingField;
    public string Kind { get; }
    public string Name { get; protected set; }
    public IReadOnlyList`1<TagMatchingRuleDescriptor> TagMatchingRules { get; protected set; }
    public string AssemblyName { get; protected set; }
    public IReadOnlyList`1<BoundAttributeDescriptor> BoundAttributes { get; protected set; }
    public IReadOnlyList`1<AllowedChildTagDescriptor> AllowedChildTags { get; protected set; }
    public string Documentation { get; protected set; }
    public string DisplayName { get; protected set; }
    public string TagOutputHint { get; protected set; }
    public bool CaseSensitive { get; protected set; }
    public IReadOnlyList`1<RazorDiagnostic> Diagnostics { get; protected set; }
    public IReadOnlyDictionary`2<string, string> Metadata { get; protected set; }
    internal Nullable`1<bool> IsComponentFullyQualifiedNameMatchCache { get; internal set; }
    internal Nullable`1<bool> IsChildContentTagHelperCache { get; internal set; }
    internal Nullable`1<ParsedTypeInformation> ParsedTypeInfo { get; internal set; }
    internal BoundAttributeDescriptor[] EditorRequiredAttributes { get; }
    public bool HasErrors { get; }
    protected TagHelperDescriptor(string kind);
    [CompilerGeneratedAttribute]
public string get_Kind();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<TagMatchingRuleDescriptor> get_TagMatchingRules();
    [CompilerGeneratedAttribute]
protected void set_TagMatchingRules(IReadOnlyList`1<TagMatchingRuleDescriptor> value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
protected void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<BoundAttributeDescriptor> get_BoundAttributes();
    [CompilerGeneratedAttribute]
protected void set_BoundAttributes(IReadOnlyList`1<BoundAttributeDescriptor> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<AllowedChildTagDescriptor> get_AllowedChildTags();
    [CompilerGeneratedAttribute]
protected void set_AllowedChildTags(IReadOnlyList`1<AllowedChildTagDescriptor> value);
    [CompilerGeneratedAttribute]
public string get_Documentation();
    [CompilerGeneratedAttribute]
protected void set_Documentation(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
protected void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_TagOutputHint();
    [CompilerGeneratedAttribute]
protected void set_TagOutputHint(string value);
    [CompilerGeneratedAttribute]
public bool get_CaseSensitive();
    [CompilerGeneratedAttribute]
protected void set_CaseSensitive(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RazorDiagnostic> get_Diagnostics();
    [CompilerGeneratedAttribute]
protected void set_Diagnostics(IReadOnlyList`1<RazorDiagnostic> value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Metadata();
    [CompilerGeneratedAttribute]
protected void set_Metadata(IReadOnlyDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_IsComponentFullyQualifiedNameMatchCache();
    [CompilerGeneratedAttribute]
internal void set_IsComponentFullyQualifiedNameMatchCache(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_IsChildContentTagHelperCache();
    [CompilerGeneratedAttribute]
internal void set_IsChildContentTagHelperCache(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<ParsedTypeInformation> get_ParsedTypeInfo();
    [CompilerGeneratedAttribute]
internal void set_ParsedTypeInfo(Nullable`1<ParsedTypeInformation> value);
    internal BoundAttributeDescriptor[] get_EditorRequiredAttributes();
    public bool get_HasErrors();
    public virtual IEnumerable`1<RazorDiagnostic> GetAllDiagnostics();
    public virtual string ToString();
    public sealed virtual bool Equals(TagHelperDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private static BoundAttributeDescriptor[] GetEditorRequiredAttributes(IReadOnlyList`1<BoundAttributeDescriptor> boundAttributeDescriptors);
}
public abstract class Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder : object {
    [CompilerGeneratedAttribute]
private bool <CaseSensitive>k__BackingField;
    public string Name { get; }
    public string AssemblyName { get; }
    public string Kind { get; }
    public string DisplayName { get; public set; }
    public string TagOutputHint { get; public set; }
    public bool CaseSensitive { get; public set; }
    public string Documentation { get; public set; }
    public IDictionary`2<string, string> Metadata { get; }
    public RazorDiagnosticCollection Diagnostics { get; }
    public IReadOnlyList`1<AllowedChildTagDescriptorBuilder> AllowedChildTags { get; }
    public IReadOnlyList`1<BoundAttributeDescriptorBuilder> BoundAttributes { get; }
    public IReadOnlyList`1<TagMatchingRuleDescriptorBuilder> TagMatchingRules { get; }
    public static TagHelperDescriptorBuilder Create(string name, string assemblyName);
    public static TagHelperDescriptorBuilder Create(string kind, string name, string assemblyName);
    public abstract virtual string get_Name();
    public abstract virtual string get_AssemblyName();
    public abstract virtual string get_Kind();
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
    public abstract virtual string get_TagOutputHint();
    public abstract virtual void set_TagOutputHint(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_CaseSensitive();
    [CompilerGeneratedAttribute]
public virtual void set_CaseSensitive(bool value);
    public abstract virtual string get_Documentation();
    public abstract virtual void set_Documentation(string value);
    public abstract virtual IDictionary`2<string, string> get_Metadata();
    public abstract virtual RazorDiagnosticCollection get_Diagnostics();
    public abstract virtual IReadOnlyList`1<AllowedChildTagDescriptorBuilder> get_AllowedChildTags();
    public abstract virtual IReadOnlyList`1<BoundAttributeDescriptorBuilder> get_BoundAttributes();
    public abstract virtual IReadOnlyList`1<TagMatchingRuleDescriptorBuilder> get_TagMatchingRules();
    public abstract virtual void AllowChildTag(Action`1<AllowedChildTagDescriptorBuilder> configure);
    public abstract virtual void BindAttribute(Action`1<BoundAttributeDescriptorBuilder> configure);
    public abstract virtual void TagMatchingRule(Action`1<TagMatchingRuleDescriptorBuilder> configure);
    public abstract virtual TagHelperDescriptor Build();
    public abstract virtual void Reset();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilderExtensions : object {
    [ExtensionAttribute]
public static void SetTypeName(TagHelperDescriptorBuilder builder, string typeName);
    [ExtensionAttribute]
public static string GetTypeName(TagHelperDescriptorBuilder builder);
}
internal class Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorComparer : object {
    public static TagHelperDescriptorComparer Default;
    private static TagHelperDescriptorComparer();
    public sealed virtual bool Equals(TagHelperDescriptor descriptorX, TagHelperDescriptor descriptorY);
    public sealed virtual int GetHashCode(TagHelperDescriptor descriptor);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorExtensions : object {
    [ExtensionAttribute]
public static string GetTypeName(TagHelperDescriptor tagHelper);
    [ExtensionAttribute]
public static bool IsDefaultKind(TagHelperDescriptor tagHelper);
    [ExtensionAttribute]
public static bool KindUsesDefaultTagHelperRuntime(TagHelperDescriptor tagHelper);
    [ExtensionAttribute]
public static bool IsComponentOrChildContentTagHelper(TagHelperDescriptor tagHelper);
}
public abstract class Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorProviderContext : object {
    [CompilerGeneratedAttribute]
private bool <ExcludeHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDocumentation>k__BackingField;
    public bool ExcludeHidden { get; public set; }
    public bool IncludeDocumentation { get; public set; }
    public ItemCollection Items { get; }
    public ICollection`1<TagHelperDescriptor> Results { get; }
    [CompilerGeneratedAttribute]
public virtual bool get_ExcludeHidden();
    [CompilerGeneratedAttribute]
public virtual void set_ExcludeHidden(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IncludeDocumentation();
    [CompilerGeneratedAttribute]
public virtual void set_IncludeDocumentation(bool value);
    public abstract virtual ItemCollection get_Items();
    public abstract virtual ICollection`1<TagHelperDescriptor> get_Results();
    public static TagHelperDescriptorProviderContext Create();
    public static TagHelperDescriptorProviderContext Create(ICollection`1<TagHelperDescriptor> results);
}
public abstract class Microsoft.AspNetCore.Razor.Language.TagHelperDocumentContext : object {
    public string Prefix { get; }
    public IReadOnlyList`1<TagHelperDescriptor> TagHelpers { get; }
    public static TagHelperDocumentContext Create(string prefix, IEnumerable`1<TagHelperDescriptor> tagHelpers);
    internal static TagHelperDocumentContext Create(string prefix, IReadOnlyList`1<TagHelperDescriptor> tagHelpers);
    public abstract virtual string get_Prefix();
    public abstract virtual IReadOnlyList`1<TagHelperDescriptor> get_TagHelpers();
}
internal class Microsoft.AspNetCore.Razor.Language.TagHelperInfo : object {
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private TagMode <TagMode>k__BackingField;
    [CompilerGeneratedAttribute]
private TagHelperBinding <BindingResult>k__BackingField;
    public string TagName { get; }
    public TagMode TagMode { get; }
    public TagHelperBinding BindingResult { get; }
    public TagHelperInfo(string tagName, TagMode tagMode, TagHelperBinding bindingResult);
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
public TagMode get_TagMode();
    [CompilerGeneratedAttribute]
public TagHelperBinding get_BindingResult();
}
internal static class Microsoft.AspNetCore.Razor.Language.TagHelperMatchingConventions : object {
    public static string ElementCatchAllName;
    public static char ElementOptOutCharacter;
    public static bool SatisfiesRule(StringSegment tagNameWithoutPrefix, StringSegment parentTagNameWithoutPrefix, IReadOnlyList`1<KeyValuePair`2<string, string>> tagAttributes, TagMatchingRuleDescriptor rule);
    public static bool SatisfiesTagName(StringSegment tagNameWithoutPrefix, TagMatchingRuleDescriptor rule);
    public static bool SatisfiesParentTag(StringSegment parentTagNameWithoutPrefix, TagMatchingRuleDescriptor rule);
    public static bool SatisfiesAttributes(IReadOnlyList`1<KeyValuePair`2<string, string>> tagAttributes, TagMatchingRuleDescriptor rule);
    public static bool CanSatisfyBoundAttribute(string name, BoundAttributeDescriptor descriptor);
    private static BoundAttributeParameterDescriptor GetSatifyingBoundAttributeWithParameter(string name, BoundAttributeDescriptor descriptor, IReadOnlyList`1<BoundAttributeParameterDescriptor> boundAttributeParameters);
    public static bool SatisfiesBoundAttributeIndexer(StringSegment name, BoundAttributeDescriptor descriptor);
    public static bool SatisfiesBoundAttributeWithParameter(string name, BoundAttributeDescriptor parent, BoundAttributeParameterDescriptor descriptor);
    public static bool TryGetBoundAttributeParameter(string fullAttributeName, StringSegment& boundAttributeName);
    public static bool TryGetBoundAttributeParameter(string fullAttributeName, StringSegment& boundAttributeName, StringSegment& parameterName);
    public static bool TryGetFirstBoundAttributeMatch(string name, TagHelperDescriptor descriptor, BoundAttributeDescriptor& boundAttribute, Boolean& indexerMatch, Boolean& parameterMatch, BoundAttributeParameterDescriptor& boundAttributeParameter);
    private static bool SatisfiesBoundAttributeName(StringSegment name, BoundAttributeDescriptor descriptor);
    internal static bool SatisfiesRequiredAttribute(string attributeName, string attributeValue, RequiredAttributeDescriptor descriptor);
}
public static class Microsoft.AspNetCore.Razor.Language.TagHelperMetadata : object {
}
internal class Microsoft.AspNetCore.Razor.Language.TagHelperSpanVisitor : SyntaxWalker {
    private RazorSourceDocument _source;
    private List`1<TagHelperSpanInternal> _spans;
    public IReadOnlyList`1<TagHelperSpanInternal> TagHelperSpans { get; }
    public TagHelperSpanVisitor(RazorSourceDocument source);
    public IReadOnlyList`1<TagHelperSpanInternal> get_TagHelperSpans();
    public virtual void VisitMarkupTagHelperElement(MarkupTagHelperElementSyntax node);
}
public abstract class Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptor : object {
    private Nullable`1<int> _hashCode;
    private IEnumerable`1<RazorDiagnostic> _allDiagnostics;
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RequiredAttributeDescriptor> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentTag>k__BackingField;
    [CompilerGeneratedAttribute]
private TagStructure <TagStructure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaseSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RazorDiagnostic> <Diagnostics>k__BackingField;
    public string TagName { get; protected set; }
    public IReadOnlyList`1<RequiredAttributeDescriptor> Attributes { get; protected set; }
    public string ParentTag { get; protected set; }
    public TagStructure TagStructure { get; protected set; }
    public bool CaseSensitive { get; protected set; }
    public IReadOnlyList`1<RazorDiagnostic> Diagnostics { get; protected set; }
    public bool HasErrors { get; }
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
protected void set_TagName(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RequiredAttributeDescriptor> get_Attributes();
    [CompilerGeneratedAttribute]
protected void set_Attributes(IReadOnlyList`1<RequiredAttributeDescriptor> value);
    [CompilerGeneratedAttribute]
public string get_ParentTag();
    [CompilerGeneratedAttribute]
protected void set_ParentTag(string value);
    [CompilerGeneratedAttribute]
public TagStructure get_TagStructure();
    [CompilerGeneratedAttribute]
protected void set_TagStructure(TagStructure value);
    [CompilerGeneratedAttribute]
public bool get_CaseSensitive();
    [CompilerGeneratedAttribute]
protected void set_CaseSensitive(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RazorDiagnostic> get_Diagnostics();
    [CompilerGeneratedAttribute]
protected void set_Diagnostics(IReadOnlyList`1<RazorDiagnostic> value);
    public bool get_HasErrors();
    public virtual IEnumerable`1<RazorDiagnostic> GetAllDiagnostics();
    public sealed virtual bool Equals(TagMatchingRuleDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptorBuilder : object {
    public string TagName { get; public set; }
    public string ParentTag { get; public set; }
    public TagStructure TagStructure { get; public set; }
    public RazorDiagnosticCollection Diagnostics { get; }
    public IReadOnlyList`1<RequiredAttributeDescriptorBuilder> Attributes { get; }
    public abstract virtual string get_TagName();
    public abstract virtual void set_TagName(string value);
    public abstract virtual string get_ParentTag();
    public abstract virtual void set_ParentTag(string value);
    public abstract virtual TagStructure get_TagStructure();
    public abstract virtual void set_TagStructure(TagStructure value);
    public abstract virtual RazorDiagnosticCollection get_Diagnostics();
    public abstract virtual IReadOnlyList`1<RequiredAttributeDescriptorBuilder> get_Attributes();
    public abstract virtual void Attribute(Action`1<RequiredAttributeDescriptorBuilder> configure);
}
internal class Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptorComparer : object {
    public static TagMatchingRuleDescriptorComparer Default;
    private static TagMatchingRuleDescriptorComparer();
    public virtual bool Equals(TagMatchingRuleDescriptor ruleX, TagMatchingRuleDescriptor ruleY);
    public virtual int GetHashCode(TagMatchingRuleDescriptor rule);
}
public enum Microsoft.AspNetCore.Razor.Language.TagMode : Enum {
    public int value__;
    public static TagMode StartTagAndEndTag;
    public static TagMode SelfClosing;
    public static TagMode StartTagOnly;
}
public enum Microsoft.AspNetCore.Razor.Language.TagStructure : Enum {
    public int value__;
    public static TagStructure Unspecified;
    public static TagStructure NormalOrSelfClosing;
    public static TagStructure WithoutEndTag;
}
internal abstract class Microsoft.AspNetCore.Razor.Language.TypeNameFeature : RazorEngineFeatureBase {
    public abstract virtual IReadOnlyList`1<string> ParseTypeParameters(string typeName);
    public abstract virtual TypeNameRewriter CreateGenericTypeRewriter(Dictionary`2<string, string> bindings);
    public abstract virtual TypeNameRewriter CreateGlobalQualifiedTypeNameRewriter(ICollection`1<string> ignore);
    public abstract virtual bool IsLambda(string expression);
}
internal abstract class Microsoft.AspNetCore.Razor.Language.TypeNameRewriter : object {
    public abstract virtual string Rewrite(string typeName);
}
internal class Microsoft.AspNetCore.Razor.Language.VirtualRazorProjectFileSystem : RazorProjectFileSystem {
    private DirectoryNode _root;
    public virtual IEnumerable`1<RazorProjectItem> EnumerateItems(string basePath);
    public virtual RazorProjectItem GetItem(string path);
    public virtual RazorProjectItem GetItem(string path, string fileKind);
    public void Add(RazorProjectItem projectItem);
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Razor.StringSegment : ValueType {
    public static StringSegment Empty;
    [CompilerGeneratedAttribute]
private string <Buffer>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public string Buffer { get; }
    public int Offset { get; }
    public int Length { get; }
    public string Value { get; }
    public bool IsEmpty { get; }
    public bool HasValue { get; }
    public char Item { get; }
    public StringSegment(string buffer);
    public StringSegment(string buffer, int offset);
    public StringSegment(string buffer, int offset, int length);
    private static StringSegment();
    [CompilerGeneratedAttribute]
public string get_Buffer();
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public int get_Length();
    public string get_Value();
    public bool get_IsEmpty();
    public bool get_HasValue();
    public char get_Item(int index);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(StringSegment other);
    public bool Equals(StringSegment other, StringComparison comparisonType);
    public static bool Equals(StringSegment a, StringSegment b, StringComparison comparisonType);
    public sealed virtual bool Equals(string text);
    public bool Equals(string text, StringComparison comparisonType);
    public virtual int GetHashCode();
    public static bool op_Equality(StringSegment left, StringSegment right);
    public static bool op_Inequality(StringSegment left, StringSegment right);
    public static StringSegment op_Implicit(string value);
    public bool StartsWith(string text, StringComparison comparisonType);
    public bool StartsWith(StringSegment text, StringComparison comparisonType);
    public StringSegment Subsegment(int offset);
    public StringSegment Subsegment(int offset, int length);
    public int IndexOf(char c, int start, int count);
    public int IndexOf(char c, int start);
    public int IndexOf(char c);
    public int IndexOfAny(Char[] anyOf, int startIndex, int count);
    public int IndexOfAny(Char[] anyOf, int startIndex);
    public int IndexOfAny(Char[] anyOf);
    public static bool IsNullOrEmpty(StringSegment value);
    public virtual string ToString();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.Extensions.Internal.HashCodeCombiner : ValueType {
    private long _combinedHash64;
    public int CombinedHash { get; }
    private HashCodeCombiner(long seed);
    public int get_CombinedHash();
    public static int op_Implicit(HashCodeCombiner self);
    public void Add(int i);
    [NullableContextAttribute("2")]
public void Add(T o);
    [NullableContextAttribute("1")]
public void Add(TValue value, IEqualityComparer`1<TValue> comparer);
    public static HashCodeCombiner Start();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
