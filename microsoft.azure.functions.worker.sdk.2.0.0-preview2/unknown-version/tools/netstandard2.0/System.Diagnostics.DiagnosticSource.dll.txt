public class System.Diagnostics.DiagnosticListener : DiagnosticSource {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private DiagnosticSubscription modreq(System.Runtime.CompilerServices.IsVolatile) _subscriptions;
    private DiagnosticListener _next;
    private bool _disposed;
    private static DiagnosticListener s_allListeners;
    private static AllListenerObservable s_allListenerObservable;
    private static object s_lock;
    public static IObservable`1<DiagnosticListener> AllListeners { get; }
    public string Name { get; private set; }
    public DiagnosticListener(string name);
    private static DiagnosticListener();
    public static IObservable`1<DiagnosticListener> get_AllListeners();
    public virtual IDisposable Subscribe(IObserver`1<KeyValuePair`2<string, object>> observer, Predicate`1<string> isEnabled);
    public sealed virtual IDisposable Subscribe(IObserver`1<KeyValuePair`2<string, object>> observer);
    public virtual void Dispose();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public virtual string ToString();
    public virtual bool IsEnabled(string name);
    public virtual void Write(string name, object value);
}
public abstract class System.Diagnostics.DiagnosticSource : object {
    public abstract virtual void Write(string name, object value);
    public abstract virtual bool IsEnabled(string name);
}
[EventSourceAttribute]
internal class System.Diagnostics.DiagnosticSourceEventSource : EventSource {
    public static DiagnosticSourceEventSource Logger;
    private string AspNetCoreHostingKeywordValue;
    private string EntityFrameworkCoreCommandsKeywordValue;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _false;
    private FilterAndTransform _specs;
    private static DiagnosticSourceEventSource();
    [EventAttribute("1")]
public void Message(string Message);
    [EventAttribute("2")]
private void Event(string SourceName, string EventName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("3")]
private void EventJson(string SourceName, string EventName, string ArgmentsJson);
    [EventAttribute("4")]
private void Activity1Start(string SourceName, string EventName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("5")]
private void Activity1Stop(string SourceName, string EventName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("6")]
private void Activity2Start(string SourceName, string EventName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("7")]
private void Activity2Stop(string SourceName, string EventName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("8")]
private void RecursiveActivity1Start(string SourceName, string EventName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("9")]
private void RecursiveActivity1Stop(string SourceName, string EventName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("10")]
private void NewDiagnosticListener(string SourceName);
    [NonEventAttribute]
protected virtual void OnEventCommand(EventCommandEventArgs command);
    private static string NewLineSeparate(string str1, string str2);
    [NonEventAttribute]
private void BreakPointWithDebuggerFuncEval();
}
