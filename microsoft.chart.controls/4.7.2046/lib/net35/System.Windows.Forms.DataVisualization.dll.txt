internal static class AssemblyRef : object {
    internal static string EcmaPublicKey;
    internal static string EcmaPublicKeyToken;
    internal static string EcmaPublicKeyFull;
    internal static string Mscorlib;
    internal static string SystemData;
    internal static string SystemDataOracleClient;
    internal static string System;
    internal static string SystemRuntimeRemoting;
    internal static string SystemWindowsForms;
    internal static string SystemXml;
    internal static string MicrosoftPublicKey;
    internal static string MicrosoftPublicKeyToken;
    internal static string MicrosoftPublicKeyFull;
    internal static string SharedLibPublicKey;
    internal static string SharedLibPublicKeyToken;
    internal static string SharedLibPublicKeyFull;
    internal static string SystemComponentModelDataAnnotations;
    internal static string SystemConfiguration;
    internal static string SystemConfigurationInstall;
    internal static string SystemDeployment;
    internal static string SystemDesign;
    internal static string SystemDirectoryServices;
    internal static string SystemDrawingDesign;
    internal static string SystemDrawing;
    internal static string SystemEnterpriseServices;
    internal static string SystemManagement;
    internal static string SystemMessaging;
    internal static string SystemRuntimeSerializationFormattersSoap;
    internal static string SystemSecurity;
    internal static string SystemServiceProcess;
    internal static string SystemWeb;
    internal static string SystemWebAbstractions;
    internal static string SystemWebDynamicData;
    internal static string SystemWebDynamicDataDesign;
    internal static string SystemWebEntityDesign;
    internal static string SystemWebExtensions;
    internal static string SystemWebExtensionsDesign;
    internal static string SystemWebMobile;
    internal static string SystemWebRegularExpressions;
    internal static string SystemWebRouting;
    internal static string SystemWebServices;
    internal static string MicrosoftVisualStudio;
    internal static string MicrosoftVisualStudioWindowsForms;
    internal static string VJSharpCodeProvider;
    internal static string ASPBrowserCapsPublicKey;
    internal static string ASPBrowserCapsFactory;
    internal static string MicrosoftVSDesigner;
    internal static string MicrosoftVisualStudioWeb;
    internal static string MicrosoftWebDesign;
    internal static string MicrosoftVSDesignerMobile;
    internal static string MicrosoftJScript;
}
internal static class FX20Assembly : object {
    internal static string Version;
}
internal static class FX35Assembly : object {
    internal static string Version;
}
internal static class FXAssembly : object {
    internal static string Version;
}
internal class System.Windows.Forms.DataVisualization.Charting.AnchorPointValueConverter : TypeConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[DefaultPropertyAttribute("Name")]
[SRDescriptionAttribute("DescriptionAttributeAnnotation_Annotation")]
public abstract class System.Windows.Forms.DataVisualization.Charting.Annotation : ChartNamedElement {
    internal static int selectionMarkerSize;
    private string _clipToChartArea;
    private bool _isSelected;
    private bool _isSizeAlwaysRelative;
    private double _x;
    private double _y;
    private double _width;
    private double _height;
    private string _axisXName;
    private string _axisYName;
    private Axis _axisX;
    private Axis _axisY;
    private bool _visible;
    private ContentAlignment _alignment;
    private Color _foreColor;
    private FontCache _fontCache;
    private Font _textFont;
    private TextStyle _textStyle;
    internal Color lineColor;
    private int _lineWidth;
    private ChartDashStyle _lineDashStyle;
    private Color _backColor;
    private ChartHatchStyle _backHatchStyle;
    private GradientStyle _backGradientStyle;
    private Color _backSecondaryColor;
    private Color _shadowColor;
    private int _shadowOffset;
    private string _anchorDataPointName;
    private DataPoint _anchorDataPoint;
    private DataPoint _anchorDataPoint2;
    private double _anchorX;
    private double _anchorY;
    internal double anchorOffsetX;
    internal double anchorOffsetY;
    internal ContentAlignment anchorAlignment;
    internal RectangleF[] selectionRects;
    private string _tooltip;
    internal RectangleF currentPositionRel;
    internal PointF currentAnchorLocationRel;
    private AnnotationSmartLabelStyle _smartLabelStyle;
    internal int currentPathPointIndex;
    internal AnnotationGroup annotationGroup;
    private bool _allowSelecting;
    private bool _allowMoving;
    private bool _allowAnchorMoving;
    private bool _allowResizing;
    private bool _allowTextEditing;
    private bool _allowPathEditing;
    internal bool positionChanged;
    internal PointF lastPlacementPosition;
    internal PointF startMoveAnchorLocationRel;
    internal RectangleF startMovePositionRel;
    internal GraphicsPath startMovePathRel;
    internal static double WidthHightLimit;
    [SRCategoryAttribute("CategoryAttributeMisc")]
[ParenthesizePropertyNameAttribute("True")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeName4")]
public string Name { get; public set; }
    [SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAnnotation_AnnotationType")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public string AnnotationType { get; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.LegendAreaNameConverter")]
[DefaultValueAttribute("NotSet")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationClipToChartArea")]
public string ClipToChartArea { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("DescriptionAttributeSmartLabels")]
public AnnotationSmartLabelStyle SmartLabelStyle { get; public set; }
    [SerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public AnnotationGroup AnnotationGroup { get; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CategoryAttributePosition")]
[SRDescriptionAttribute("DescriptionAttributeSizeAlwaysRelative")]
public bool IsSizeAlwaysRelative { get; public set; }
    [DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationBaseX")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.DoubleNanValueConverter")]
[SRCategoryAttribute("CategoryAttributePosition")]
public double X { get; public set; }
    [RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.DoubleNanValueConverter")]
[SRCategoryAttribute("CategoryAttributePosition")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationBaseY")]
public double Y { get; public set; }
    [RefreshPropertiesAttribute("1")]
[SRCategoryAttribute("CategoryAttributePosition")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.DoubleNanValueConverter")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationWidth")]
public double Width { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.DoubleNanValueConverter")]
[DefaultValueAttribute("не число")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationHeight")]
[SRCategoryAttribute("CategoryAttributePosition")]
public double Height { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.DoubleNanValueConverter")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("не число")]
[SerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CategoryAttributePosition")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeRight3")]
public double Right { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.DoubleNanValueConverter")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeBottom")]
[SerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CategoryAttributePosition")]
[DesignerSerializationVisibilityAttribute("0")]
[RefreshPropertiesAttribute("1")]
[BrowsableAttribute("False")]
public double Bottom { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeSelected")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
public bool IsSelected { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SerializationVisibilityAttribute("0")]
[ParenthesizePropertyNameAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeSelectionPointsStyle")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
internal SelectionPointsStyle SelectionPointsStyle { get; }
    [ParenthesizePropertyNameAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeVisible")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeAlignment")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.ContentAlignment", "MiddleCenter")]
public ContentAlignment Alignment { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DescriptionAttributeForeColor")]
public Color ForeColor { get; public set; }
    [DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[SRDescriptionAttribute("DescriptionAttributeTextFont")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public Font Font { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeTextStyle")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Windows.Forms.DataVisualization.Charting.TextStyle", "Default")]
public TextStyle TextStyle { get; public set; }
    [TypeConverterAttribute("System.Drawing.ColorConverter")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeLineColor")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public Color LineColor { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLineWidth")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("1")]
public int LineWidth { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLineDashStyle")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartDashStyle LineDashStyle { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DescriptionAttributeBackColor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.HatchStyleEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DescriptionAttributeBackHatchStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeBackGradientStyle")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.GradientEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public GradientStyle BackGradientStyle { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackSecondaryColor")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color BackSecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("System.Drawing.Color", "128,0,0,0")]
[SRDescriptionAttribute("DescriptionAttributeShadowColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color ShadowColor { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeShadowOffset")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("0")]
public int ShadowOffset { get; public set; }
    [EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryAttributeAnchorAxes")]
[DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[BindableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeAxisXName")]
public string AxisXName { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAnchorAxes")]
[SerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[BindableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeAxisYName")]
public string AxisYName { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CategoryAttributeAnchorAxes")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeAxisYName")]
[BindableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string YAxisName { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.AnnotationAxisUITypeEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.AnnotationAxisValueConverter")]
[SRCategoryAttribute("CategoryAttributeAnchorAxes")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAxisX")]
[DefaultValueAttribute("")]
public Axis AxisX { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.AnnotationAxisUITypeEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAnchorAxes")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.AnnotationAxisValueConverter")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAxisY")]
public Axis AxisY { get; public set; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[BindableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryAttributeAnchor")]
[SRDescriptionAttribute("DescriptionAttributeAnchorDataPointName")]
public string AnchorDataPointName { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAnchor")]
[DesignerSerializationVisibilityAttribute("0")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.AnchorPointValueConverter")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAnchorDataPoint")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.AnchorPointUITypeEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
public DataPoint AnchorDataPoint { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeAnchorX")]
[SRCategoryAttribute("CategoryAttributeAnchor")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.DoubleNanValueConverter")]
public double AnchorX { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAnchor")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeAnchorY")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.DoubleNanValueConverter")]
public double AnchorY { get; public set; }
    [DefaultValueAttribute("0")]
[RefreshPropertiesAttribute("1")]
[SRCategoryAttribute("CategoryAttributeAnchor")]
[SRDescriptionAttribute("DescriptionAttributeAnchorOffsetX3")]
public double AnchorOffsetX { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAnchor")]
[SRDescriptionAttribute("DescriptionAttributeAnchorOffsetY3")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("0")]
public double AnchorOffsetY { get; public set; }
    [DefaultValueAttribute("System.Drawing.ContentAlignment", "BottomCenter")]
[SRCategoryAttribute("CategoryAttributeAnchor")]
[SRDescriptionAttribute("DescriptionAttributeAnchorAlignment")]
public ContentAlignment AnchorAlignment { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeAllowSelecting")]
[DefaultValueAttribute("False")]
[SRCategoryAttribute("CategoryAttributeEditing")]
public bool AllowSelecting { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeAllowMoving")]
[SRCategoryAttribute("CategoryAttributeEditing")]
[DefaultValueAttribute("False")]
public bool AllowMoving { get; public set; }
    [SRCategoryAttribute("CategoryAttributeEditing")]
[SRDescriptionAttribute("DescriptionAttributeAllowAnchorMoving3")]
[DefaultValueAttribute("False")]
public bool AllowAnchorMoving { get; public set; }
    [SRCategoryAttribute("CategoryAttributeEditing")]
[SRDescriptionAttribute("DescriptionAttributeAllowResizing")]
[DefaultValueAttribute("False")]
public bool AllowResizing { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeAllowTextEditing")]
[SRCategoryAttribute("CategoryAttributeEditing")]
[DefaultValueAttribute("False")]
public bool AllowTextEditing { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeAllowPathEditing3")]
[SRCategoryAttribute("CategoryAttributeEditing")]
public bool AllowPathEditing { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeToolTip")]
public string ToolTip { get; public set; }
    private static Annotation();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public abstract virtual string get_AnnotationType();
    public virtual string get_ClipToChartArea();
    public virtual void set_ClipToChartArea(string value);
    public AnnotationSmartLabelStyle get_SmartLabelStyle();
    public void set_SmartLabelStyle(AnnotationSmartLabelStyle value);
    public AnnotationGroup get_AnnotationGroup();
    public virtual bool get_IsSizeAlwaysRelative();
    public virtual void set_IsSizeAlwaysRelative(bool value);
    public virtual double get_X();
    public virtual void set_X(double value);
    public virtual double get_Y();
    public virtual void set_Y(double value);
    public virtual double get_Width();
    public virtual void set_Width(double value);
    public virtual double get_Height();
    public virtual void set_Height(double value);
    public virtual double get_Right();
    public virtual void set_Right(double value);
    public virtual double get_Bottom();
    public virtual void set_Bottom(double value);
    public virtual bool get_IsSelected();
    public virtual void set_IsSelected(bool value);
    internal virtual SelectionPointsStyle get_SelectionPointsStyle();
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public virtual ContentAlignment get_Alignment();
    public virtual void set_Alignment(ContentAlignment value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual TextStyle get_TextStyle();
    public virtual void set_TextStyle(TextStyle value);
    public virtual Color get_LineColor();
    public virtual void set_LineColor(Color value);
    public virtual int get_LineWidth();
    public virtual void set_LineWidth(int value);
    public virtual ChartDashStyle get_LineDashStyle();
    public virtual void set_LineDashStyle(ChartDashStyle value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual ChartHatchStyle get_BackHatchStyle();
    public virtual void set_BackHatchStyle(ChartHatchStyle value);
    public virtual GradientStyle get_BackGradientStyle();
    public virtual void set_BackGradientStyle(GradientStyle value);
    public virtual Color get_BackSecondaryColor();
    public virtual void set_BackSecondaryColor(Color value);
    public virtual Color get_ShadowColor();
    public virtual void set_ShadowColor(Color value);
    public virtual int get_ShadowOffset();
    public virtual void set_ShadowOffset(int value);
    public virtual string get_AxisXName();
    public virtual void set_AxisXName(string value);
    public virtual string get_AxisYName();
    public virtual void set_AxisYName(string value);
    public virtual string get_YAxisName();
    public virtual void set_YAxisName(string value);
    public virtual Axis get_AxisX();
    public virtual void set_AxisX(Axis value);
    public virtual Axis get_AxisY();
    public virtual void set_AxisY(Axis value);
    public virtual string get_AnchorDataPointName();
    public virtual void set_AnchorDataPointName(string value);
    public virtual DataPoint get_AnchorDataPoint();
    public virtual void set_AnchorDataPoint(DataPoint value);
    public virtual double get_AnchorX();
    public virtual void set_AnchorX(double value);
    public virtual double get_AnchorY();
    public virtual void set_AnchorY(double value);
    public virtual double get_AnchorOffsetX();
    public virtual void set_AnchorOffsetX(double value);
    public virtual double get_AnchorOffsetY();
    public virtual void set_AnchorOffsetY(double value);
    public virtual ContentAlignment get_AnchorAlignment();
    public virtual void set_AnchorAlignment(ContentAlignment value);
    public virtual bool get_AllowSelecting();
    public virtual void set_AllowSelecting(bool value);
    public virtual bool get_AllowMoving();
    public virtual void set_AllowMoving(bool value);
    public virtual bool get_AllowAnchorMoving();
    public virtual void set_AllowAnchorMoving(bool value);
    public virtual bool get_AllowResizing();
    public virtual void set_AllowResizing(bool value);
    public virtual bool get_AllowTextEditing();
    public virtual void set_AllowTextEditing(bool value);
    public virtual bool get_AllowPathEditing();
    public virtual void set_AllowPathEditing(bool value);
    public virtual string get_ToolTip();
    public virtual void set_ToolTip(string value);
    internal abstract virtual void Paint(Chart chart, ChartGraphics graphics);
    internal virtual void PaintSelectionHandles(ChartGraphics chartGraphics, RectangleF rect, GraphicsPath path);
    public virtual void ResizeToContent();
    internal virtual RectangleF GetContentPosition();
    private void GetAnchorLocation(Double& anchorX, Double& anchorY, Boolean& inRelativeAnchorX, Boolean& inRelativeAnchorY);
    internal virtual void GetRelativePosition(PointF& location, SizeF& size, PointF& anchorLocation);
    internal void SetPositionRelative(RectangleF position, PointF anchorPoint);
    internal void SetPositionRelative(RectangleF position, PointF anchorPoint, bool userInput);
    internal virtual void AdjustLocationSize(SizeF movingDistance, ResizingMode resizeMode);
    internal virtual void AdjustLocationSize(SizeF movingDistance, ResizingMode resizeMode, bool pixelCoord);
    internal virtual void AdjustLocationSize(SizeF movingDistance, ResizingMode resizeMode, bool pixelCoord, bool userInput);
    internal virtual bool IsAnchorDrawn();
    internal DataPoint GetDataPointByName(string dataPointName);
    private Axis GetAxisByName(string axisName);
    internal string GetDataPointName(DataPoint dataPoint);
    private string GetAxisName(Axis axis);
    public virtual void SendToBack();
    public virtual void BringToFront();
    internal void AddSmartLabelMarkerPositions(ArrayList list);
    public void SetAnchor(DataPoint dataPoint);
    public void SetAnchor(DataPoint dataPoint1, DataPoint dataPoint2);
    public virtual void BeginPlacement();
    public virtual void EndPlacement();
    internal virtual void PlacementMouseDown(PointF point, MouseButtons buttons);
    internal virtual bool PlacementMouseUp(PointF point, MouseButtons buttons);
    internal virtual void PlacementMouseMove(PointF point);
    internal virtual bool IsValidPlacementPosition(float x, float y);
    internal bool IsVisible();
    internal void ResetCurrentRelativePosition();
    internal string ReplaceKeywords(string strOriginal);
    internal bool IsAnchorVisible();
    internal ChartGraphics GetGraphics();
    internal ResizingMode GetSelectionHandle(PointF point);
    private Axis GetDataPointAxis(DataPoint dataPoint, AxisName axisName);
    internal void GetAxes(Axis& vertAxis, Axis& horizAxis);
    protected virtual void Dispose(bool disposing);
}
internal class System.Windows.Forms.DataVisualization.Charting.AnnotationAxisValueConverter : TypeConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[SRDescriptionAttribute("DescriptionAttributeAnnotations3")]
public class System.Windows.Forms.DataVisualization.Charting.AnnotationCollection : ChartNamedElementCollection`1<Annotation> {
    internal Annotation lastClickedAnnotation;
    private PointF _movingResizingStartPoint;
    private ResizingMode _resizingMode;
    internal Annotation placingAnnotation;
    [CompilerGeneratedAttribute]
private AnnotationGroup <AnnotationGroup>k__BackingField;
    internal AnnotationGroup AnnotationGroup { get; internal set; }
    internal AnnotationCollection(IChartElement parent);
    [CompilerGeneratedAttribute]
internal AnnotationGroup get_AnnotationGroup();
    [CompilerGeneratedAttribute]
internal void set_AnnotationGroup(AnnotationGroup value);
    internal virtual void Initialize(Annotation item);
    internal virtual void Deinitialize(Annotation item);
    public virtual Annotation FindByName(string name);
    internal void Paint(ChartGraphics chartGraph, bool drawAnnotationOnly);
    internal void OnDoubleClick();
    internal Annotation HitTestSelectionHandles(PointF point, ResizingMode& resizingMode);
    internal void OnMouseDown(MouseEventArgs e, Boolean& isHandled);
    internal void OnMouseUp(MouseEventArgs e);
    internal void OnMouseMove(MouseEventArgs e);
    private void SetResizingCursor(Annotation annotation, ResizingMode currentResizingMode);
    internal void ChartAreaNameReferenceChanged(object sender, NameReferenceChangedEventArgs e);
}
[SRDescriptionAttribute("DescriptionAttributeAnnotationGroup_AnnotationGroup")]
public class System.Windows.Forms.DataVisualization.Charting.AnnotationGroup : Annotation {
    internal AnnotationCollection annotations;
    [TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.LegendAreaNameConverter")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationGroup_ClipToChartArea")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("NotSet")]
public string ClipToChartArea { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeAnnotationGroup_SizeAlwaysRelative")]
[SRCategoryAttribute("CategoryAttributePosition")]
[DefaultValueAttribute("True")]
public bool IsSizeAlwaysRelative { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationGroup_Selected")]
[DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
public bool IsSelected { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("True")]
[ParenthesizePropertyNameAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationGroup_Visible")]
public bool Visible { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.ContentAlignment", "MiddleCenter")]
[SRDescriptionAttribute("DescriptionAttributeAlignment")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public ContentAlignment Alignment { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public TextStyle TextStyle { get; public set; }
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeForeColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color ForeColor { get; public set; }
    [DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeTextFont")]
public Font Font { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLineColor")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color LineColor { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeLineWidth")]
public int LineWidth { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLineDashStyle")]
public ChartDashStyle LineDashStyle { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeBackColor")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackHatchStyle")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.HatchStyleEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientStyle")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.GradientEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BrowsableAttribute("False")]
public GradientStyle BackGradientStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackSecondaryColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[BrowsableAttribute("False")]
public Color BackSecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "128,0,0,0")]
[SRDescriptionAttribute("DescriptionAttributeShadowColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public Color ShadowColor { get; public set; }
    [DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeShadowOffset")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
public int ShadowOffset { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeAllowSelecting")]
[SRCategoryAttribute("CategoryAttributeEditing")]
[DefaultValueAttribute("False")]
public bool AllowSelecting { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeAllowMoving")]
[SRCategoryAttribute("CategoryAttributeEditing")]
public bool AllowMoving { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationGroup_AllowAnchorMoving")]
[SRCategoryAttribute("CategoryAttributeEditing")]
public bool AllowAnchorMoving { get; public set; }
    [SRCategoryAttribute("CategoryAttributeEditing")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeAllowResizing")]
public bool AllowResizing { get; public set; }
    [SRCategoryAttribute("CategoryAttributeEditing")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeAllowTextEditing")]
public bool AllowTextEditing { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationGroup_AllowPathEditing")]
[SRCategoryAttribute("CategoryAttributeEditing")]
public bool AllowPathEditing { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationGroup_Annotations")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.AnnotationCollectionEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAnnotations")]
public AnnotationCollection Annotations { get; }
    [SRDescriptionAttribute("DescriptionAttributeAnnotationType")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CategoryAttributeMisc")]
public string AnnotationType { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ParenthesizePropertyNameAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeSelectionPointsStyle")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
internal SelectionPointsStyle SelectionPointsStyle { get; }
    public virtual string get_ClipToChartArea();
    public virtual void set_ClipToChartArea(string value);
    public virtual bool get_IsSizeAlwaysRelative();
    public virtual void set_IsSizeAlwaysRelative(bool value);
    public virtual bool get_IsSelected();
    public virtual void set_IsSelected(bool value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public virtual ContentAlignment get_Alignment();
    public virtual void set_Alignment(ContentAlignment value);
    public virtual TextStyle get_TextStyle();
    public virtual void set_TextStyle(TextStyle value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual Color get_LineColor();
    public virtual void set_LineColor(Color value);
    public virtual int get_LineWidth();
    public virtual void set_LineWidth(int value);
    public virtual ChartDashStyle get_LineDashStyle();
    public virtual void set_LineDashStyle(ChartDashStyle value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual ChartHatchStyle get_BackHatchStyle();
    public virtual void set_BackHatchStyle(ChartHatchStyle value);
    public virtual GradientStyle get_BackGradientStyle();
    public virtual void set_BackGradientStyle(GradientStyle value);
    public virtual Color get_BackSecondaryColor();
    public virtual void set_BackSecondaryColor(Color value);
    public virtual Color get_ShadowColor();
    public virtual void set_ShadowColor(Color value);
    public virtual int get_ShadowOffset();
    public virtual void set_ShadowOffset(int value);
    public virtual bool get_AllowSelecting();
    public virtual void set_AllowSelecting(bool value);
    public virtual bool get_AllowMoving();
    public virtual void set_AllowMoving(bool value);
    public virtual bool get_AllowAnchorMoving();
    public virtual void set_AllowAnchorMoving(bool value);
    public virtual bool get_AllowResizing();
    public virtual void set_AllowResizing(bool value);
    public virtual bool get_AllowTextEditing();
    public virtual void set_AllowTextEditing(bool value);
    public virtual bool get_AllowPathEditing();
    public virtual void set_AllowPathEditing(bool value);
    public AnnotationCollection get_Annotations();
    public virtual string get_AnnotationType();
    internal virtual SelectionPointsStyle get_SelectionPointsStyle();
    internal virtual void Paint(Chart chart, ChartGraphics graphics);
    protected virtual void Dispose(bool disposing);
}
[SRDescriptionAttribute("DescriptionAttributeAnnotationPathPoint_AnnotationPathPoint")]
public class System.Windows.Forms.DataVisualization.Charting.AnnotationPathPoint : ChartElement {
    private float _x;
    private float _y;
    private byte _pointType;
    [SRCategoryAttribute("CategoryAttributePosition")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationPathPoint_X")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
public float X { get; public set; }
    [SRCategoryAttribute("CategoryAttributePosition")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationPathPoint_Y")]
[DefaultValueAttribute("0")]
[BrowsableAttribute("True")]
public float Y { get; public set; }
    [SRCategoryAttribute("CategoryAttributePosition")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationPathPoint_Name")]
[DefaultValueAttribute("System.Byte", "1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public byte PointType { get; public set; }
    [SerializationVisibilityAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("PathPoint")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationPathPoint_Name")]
public string Name { get; }
    public AnnotationPathPoint(float x, float y);
    public AnnotationPathPoint(float x, float y, byte type);
    public float get_X();
    public void set_X(float value);
    public float get_Y();
    public void set_Y(float value);
    public byte get_PointType();
    public void set_PointType(byte value);
    public string get_Name();
}
[SRDescriptionAttribute("DescriptionAttributeAnnotationPathPointCollection_AnnotationPathPointCollection")]
public class System.Windows.Forms.DataVisualization.Charting.AnnotationPathPointCollection : ChartElementCollection`1<AnnotationPathPoint> {
    internal PolylineAnnotation annotation;
    private GraphicsPath _graphicsPath;
    public AnnotationPathPointCollection(PolylineAnnotation annotation);
    public virtual void Invalidate();
    protected virtual void Dispose(bool disposing);
}
[SRDescriptionAttribute("DescriptionAttributeAnnotationPositionChangingEventArgs_AnnotationPositionChangingEventArgs")]
public class System.Windows.Forms.DataVisualization.Charting.AnnotationPositionChangingEventArgs : EventArgs {
    private Annotation _Annotation;
    private double _NewLocationX;
    private double _NewLocationY;
    private double _NewSizeWidth;
    private double _NewSizeHeight;
    private double _NewAnchorLocationX;
    private double _NewAnchorLocationY;
    public Annotation Annotation { get; public set; }
    public double NewLocationX { get; public set; }
    public double NewLocationY { get; public set; }
    public double NewSizeWidth { get; public set; }
    public double NewSizeHeight { get; public set; }
    public double NewAnchorLocationX { get; public set; }
    public double NewAnchorLocationY { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public RectangleF NewPosition { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public PointF NewAnchorLocation { get; public set; }
    public Annotation get_Annotation();
    public void set_Annotation(Annotation value);
    public double get_NewLocationX();
    public void set_NewLocationX(double value);
    public double get_NewLocationY();
    public void set_NewLocationY(double value);
    public double get_NewSizeWidth();
    public void set_NewSizeWidth(double value);
    public double get_NewSizeHeight();
    public void set_NewSizeHeight(double value);
    public double get_NewAnchorLocationX();
    public void set_NewAnchorLocationX(double value);
    public double get_NewAnchorLocationY();
    public void set_NewAnchorLocationY(double value);
    public RectangleF get_NewPosition();
    public void set_NewPosition(RectangleF value);
    public PointF get_NewAnchorLocation();
    public void set_NewAnchorLocation(PointF value);
}
[SRDescriptionAttribute("DescriptionAttributeAnnotationSmartLabels_AnnotationSmartLabels")]
internal class System.Windows.Forms.DataVisualization.Charting.AnnotationSmartLabel : SmartLabel {
    internal virtual bool IsSmartLabelCollide(CommonElements common, ChartGraphics graph, ChartArea area, SmartLabelStyle smartLabelStyle, PointF position, SizeF size, PointF markerPosition, StringFormat format, LabelAlignmentStyles labelAlignment, bool checkCalloutLineOverlapping);
    internal virtual void AddMarkersPosition(CommonElements common, ChartArea area);
    internal virtual void DrawCallout(CommonElements common, ChartGraphics graph, ChartArea area, SmartLabelStyle smartLabelStyle, PointF labelPosition, SizeF labelSize, StringFormat format, PointF markerPosition, SizeF markerSize, LabelAlignmentStyles labelAlignment);
}
[DefaultPropertyAttribute("Enabled")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationSmartLabelsStyle_AnnotationSmartLabelsStyle")]
public class System.Windows.Forms.DataVisualization.Charting.AnnotationSmartLabelStyle : SmartLabelStyle {
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeCalloutStyle3")]
public LabelCalloutStyle CalloutStyle { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeCalloutLineColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public Color CalloutLineColor { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLineDashStyle")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public ChartDashStyle CalloutLineDashStyle { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeCalloutBackColor")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "Transparent")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[EditorBrowsableAttribute("1")]
public Color CalloutBackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeLineWidth")]
[BrowsableAttribute("False")]
public int CalloutLineWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeCalloutLineAnchorCapStyle")]
public LineAnchorCapStyle CalloutLineAnchorCapStyle { get; public set; }
    public AnnotationSmartLabelStyle(object chartElement);
    public virtual LabelCalloutStyle get_CalloutStyle();
    public virtual void set_CalloutStyle(LabelCalloutStyle value);
    public virtual Color get_CalloutLineColor();
    public virtual void set_CalloutLineColor(Color value);
    public virtual ChartDashStyle get_CalloutLineDashStyle();
    public virtual void set_CalloutLineDashStyle(ChartDashStyle value);
    public virtual Color get_CalloutBackColor();
    public virtual void set_CalloutBackColor(Color value);
    public virtual int get_CalloutLineWidth();
    public virtual void set_CalloutLineWidth(int value);
    public virtual LineAnchorCapStyle get_CalloutLineAnchorCapStyle();
    public virtual void set_CalloutLineAnchorCapStyle(LineAnchorCapStyle value);
}
public class System.Windows.Forms.DataVisualization.Charting.AnovaResult : object {
    internal double sumOfSquaresBetweenGroups;
    internal double sumOfSquaresWithinGroups;
    internal double sumOfSquaresTotal;
    internal double degreeOfFreedomBetweenGroups;
    internal double degreeOfFreedomWithinGroups;
    internal double degreeOfFreedomTotal;
    internal double meanSquareVarianceBetweenGroups;
    internal double meanSquareVarianceWithinGroups;
    internal double fRatio;
    internal double fCriticalValue;
    public double SumOfSquaresBetweenGroups { get; }
    public double SumOfSquaresWithinGroups { get; }
    public double SumOfSquaresTotal { get; }
    public double DegreeOfFreedomBetweenGroups { get; }
    public double DegreeOfFreedomWithinGroups { get; }
    public double DegreeOfFreedomTotal { get; }
    public double MeanSquareVarianceBetweenGroups { get; }
    public double MeanSquareVarianceWithinGroups { get; }
    public double FRatio { get; }
    public double FCriticalValue { get; }
    public double get_SumOfSquaresBetweenGroups();
    public double get_SumOfSquaresWithinGroups();
    public double get_SumOfSquaresTotal();
    public double get_DegreeOfFreedomBetweenGroups();
    public double get_DegreeOfFreedomWithinGroups();
    public double get_DegreeOfFreedomTotal();
    public double get_MeanSquareVarianceBetweenGroups();
    public double get_MeanSquareVarianceWithinGroups();
    public double get_FRatio();
    public double get_FCriticalValue();
}
[FlagsAttribute]
public enum System.Windows.Forms.DataVisualization.Charting.AntiAliasingStyles : Enum {
    public int value__;
    public static AntiAliasingStyles None;
    public static AntiAliasingStyles Text;
    public static AntiAliasingStyles Graphics;
    public static AntiAliasingStyles All;
}
[FlagsAttribute]
public enum System.Windows.Forms.DataVisualization.Charting.AreaAlignmentOrientations : Enum {
    public int value__;
    public static AreaAlignmentOrientations None;
    public static AreaAlignmentOrientations Vertical;
    public static AreaAlignmentOrientations Horizontal;
    public static AreaAlignmentOrientations All;
}
[FlagsAttribute]
public enum System.Windows.Forms.DataVisualization.Charting.AreaAlignmentStyles : Enum {
    public int value__;
    public static AreaAlignmentStyles None;
    public static AreaAlignmentStyles Position;
    public static AreaAlignmentStyles PlotPosition;
    public static AreaAlignmentStyles AxesView;
    public static AreaAlignmentStyles Cursor;
    public static AreaAlignmentStyles All;
}
[SRDescriptionAttribute("DescriptionAttributeArrowAnnotation_ArrowAnnotation")]
public class System.Windows.Forms.DataVisualization.Charting.ArrowAnnotation : Annotation {
    private ArrowStyle _arrowStyle;
    private int _arrowSize;
    [ParenthesizePropertyNameAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeArrowAnnotation_ArrowStyle")]
public ArrowStyle ArrowStyle { get; public set; }
    [ParenthesizePropertyNameAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("5")]
[SRDescriptionAttribute("DescriptionAttributeArrowAnnotation_ArrowSize")]
public int ArrowSize { get; public set; }
    [EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryAttributeAnchor")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.ContentAlignment", "TopLeft")]
[SRDescriptionAttribute("DescriptionAttributeAnchorAlignment")]
public ContentAlignment AnchorAlignment { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationType")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public string AnnotationType { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeSelectionPointsStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ParenthesizePropertyNameAttribute("True")]
[BrowsableAttribute("False")]
internal SelectionPointsStyle SelectionPointsStyle { get; }
    public virtual ArrowStyle get_ArrowStyle();
    public virtual void set_ArrowStyle(ArrowStyle value);
    public virtual int get_ArrowSize();
    public virtual void set_ArrowSize(int value);
    public virtual ContentAlignment get_AnchorAlignment();
    public virtual void set_AnchorAlignment(ContentAlignment value);
    public virtual string get_AnnotationType();
    internal virtual SelectionPointsStyle get_SelectionPointsStyle();
    internal virtual void Paint(Chart chart, ChartGraphics graphics);
    private GraphicsPath GetArrowPath(ChartGraphics graphics, RectangleF position);
}
internal enum System.Windows.Forms.DataVisualization.Charting.ArrowOrientation : Enum {
    public int value__;
    public static ArrowOrientation Left;
    public static ArrowOrientation Right;
    public static ArrowOrientation Top;
    public static ArrowOrientation Bottom;
}
[SRDescriptionAttribute("DescriptionAttributeArrowStyle_ArrowStyle")]
public enum System.Windows.Forms.DataVisualization.Charting.ArrowStyle : Enum {
    public int value__;
    public static ArrowStyle Simple;
    public static ArrowStyle DoubleArrow;
    public static ArrowStyle Tailed;
}
internal class System.Windows.Forms.DataVisualization.Charting.AxesArrayConverter : TypeConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[DefaultPropertyAttribute("Enabled")]
[SRDescriptionAttribute("DescriptionAttributeAxis_Axis")]
public class System.Windows.Forms.DataVisualization.Charting.Axis : ChartNamedElement {
    internal static float elementSpacing;
    private static float maxAxisElementsSize;
    private static float maxAxisTitleSize;
    private static float maxAxisLabelRow2Size;
    private static float maxAxisMarkSize;
    internal ElementPosition PlotAreaPosition;
    private bool _storeValuesEnabled;
    private FontCache _fontCache;
    private Font _titleFont;
    private Color _titleForeColor;
    private StringAlignment _titleAlignment;
    private string _title;
    private int _lineWidth;
    private ChartDashStyle _lineDashStyle;
    private Color _lineColor;
    private bool _isLabelAutoFit;
    private AxisArrowStyle _arrowStyle;
    private StripLinesCollection _stripLines;
    private bool _isMarksNextToAxis;
    private TextOrientation _textOrientation;
    internal float titleSize;
    internal float labelSize;
    internal float labelNearOffset;
    internal float labelFarOffset;
    internal float unRotatedLabelSize;
    internal float markSize;
    internal float scrollBarSize;
    internal float totlaGroupingLabelsSize;
    internal Single[] groupingLabelSizes;
    internal float totlaGroupingLabelsSizeAdjustment;
    private LabelAutoFitStyles _labelAutoFitStyle;
    internal Font autoLabelFont;
    internal int autoLabelAngle;
    internal int autoLabelOffset;
    private float _aveLabelFontSize;
    private float _minLabelFontSize;
    private RectangleF _titlePosition;
    internal double minimumFromData;
    internal double maximumFromData;
    internal bool refreshMinMaxFromData;
    internal int numberOfPointsInAllSeries;
    private double _originalViewPosition;
    private bool _isInterlaced;
    private Color _interlacedColor;
    private double _intervalOffset;
    internal double interval;
    internal DateTimeIntervalType intervalType;
    internal DateTimeIntervalType intervalOffsetType;
    internal int labelAutoFitMinFontSize;
    internal int labelAutoFitMaxFontSize;
    private string _toolTip;
    private string _url;
    private CustomLabelsCollection _customLabels;
    internal double margin;
    internal double marginView;
    internal bool offsetTempSet;
    internal double marginTemp;
    private ArrayList _stripLineOffsets;
    private bool _isLogarithmic;
    internal double logarithmBase;
    internal bool isReversed;
    internal bool isStartedFromZero;
    internal TickMark minorTickMark;
    internal TickMark majorTickMark;
    internal Grid minorGrid;
    internal Grid majorGrid;
    internal bool enabled;
    internal bool autoEnabled;
    internal LabelStyle labelStyle;
    private DateTimeIntervalType _internalIntervalType;
    internal double maximum;
    internal double crossing;
    internal double minimum;
    internal double tempMaximum;
    internal double tempMinimum;
    internal double tempCrossing;
    internal CustomLabelsCollection tempLabels;
    internal bool tempAutoMaximum;
    internal bool tempAutoMinimum;
    internal double tempMajorGridInterval;
    internal double tempMinorGridInterval;
    internal double tempMajorTickMarkInterval;
    internal double tempMinorTickMarkInterval;
    internal double tempLabelInterval;
    internal DateTimeIntervalType tempGridIntervalType;
    internal DateTimeIntervalType tempTickMarkIntervalType;
    internal DateTimeIntervalType tempLabelIntervalType;
    internal bool paintMode;
    internal AxisName axisType;
    private bool _autoMaximum;
    private bool _autoMinimum;
    private AxisPosition _axisPosition;
    internal Axis oppositeAxis;
    private AxisScaleView _scaleView;
    internal AxisScrollBar scrollBar;
    internal bool roundedXValues;
    internal bool logarithmicConvertedToLinear;
    internal double logarithmicMinimum;
    internal double logarithmicMaximum;
    internal double interval3DCorrection;
    internal bool optimizedGetPosition;
    internal double paintViewMax;
    internal double paintViewMin;
    internal double paintRange;
    internal double valueMultiplier;
    internal RectangleF paintAreaPosition;
    internal double paintAreaPositionBottom;
    internal double paintAreaPositionRight;
    internal double paintChartAreaSize;
    private IntervalAutoMode _intervalAutoMode;
    internal bool scaleSegmentsUsed;
    internal int prefferedNumberofIntervals;
    private Stack`1<double> _intervalsStore;
    internal AxisScaleBreakStyle axisScaleBreakStyle;
    internal AxisScaleSegmentCollection scaleSegments;
    internal ChartArea ChartArea { get; }
    [NotifyParentPropertyAttribute("True")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeTitle")]
[SRDescriptionAttribute("DescriptionAttribute_TextOrientation")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TextOrientation TextOrientation { get; public set; }
    internal string SubAxisName { get; }
    [DefaultValueAttribute("False")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeInterlaced")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public bool IsInterlaced { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeInterlacedColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[BindableAttribute("True")]
public Color InterlacedColor { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeAxis_Name")]
[SerializationVisibilityAttribute("0")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Name { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeType")]
[SerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("")]
public AxisName AxisName { get; }
    [NotifyParentPropertyAttribute("True")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeArrows")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AxisArrowStyle ArrowStyle { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeGridTickMarks")]
[BindableAttribute("True")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter")]
[SRDescriptionAttribute("DescriptionAttributeMajorGrid")]
[DesignerSerializationVisibilityAttribute("2")]
public Grid MajorGrid { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter")]
[SRCategoryAttribute("CategoryAttributeGridTickMarks")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMinorGrid")]
[DesignerSerializationVisibilityAttribute("2")]
public Grid MinorGrid { get; public set; }
    [BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeGridTickMarks")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMajorTickMark")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter")]
public TickMark MajorTickMark { get; public set; }
    [SRCategoryAttribute("CategoryAttributeGridTickMarks")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMinorTickMark")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter")]
public TickMark MinorTickMark { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CategoryAttributeLabels")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLabelsAutoFit")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
public bool IsLabelAutoFit { get; public set; }
    [DefaultValueAttribute("6")]
[SRCategoryAttribute("CategoryAttributeLabels")]
[BindableAttribute("True")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeLabelsAutoFitMinFontSize")]
[NotifyParentPropertyAttribute("True")]
public int LabelAutoFitMinFontSize { get; public set; }
    [RefreshPropertiesAttribute("1")]
[SRCategoryAttribute("CategoryAttributeLabels")]
[BindableAttribute("True")]
[DefaultValueAttribute("10")]
[SRDescriptionAttribute("DescriptionAttributeLabelsAutoFitMaxFontSize")]
[NotifyParentPropertyAttribute("True")]
public int LabelAutoFitMaxFontSize { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeLabels")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLabelsAutoFitStyle")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.FlagsEnumUITypeEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public LabelAutoFitStyles LabelAutoFitStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[NotifyParentPropertyAttribute("True")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMarksNextToAxis")]
public bool IsMarksNextToAxis { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CategoryAttributeTitle")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTitle6")]
[NotifyParentPropertyAttribute("True")]
public string Title { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRCategoryAttribute("CategoryAttributeTitle")]
[BindableAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DescriptionAttributeTitleColor")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color TitleForeColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeTitle")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.StringAlignment", "Center")]
[SRDescriptionAttribute("DescriptionAttributeTitleAlignment")]
public StringAlignment TitleAlignment { get; public set; }
    [DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeTitle")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTitleFont")]
public Font TitleFont { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeLineColor")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color LineColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLineWidth")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("1")]
public int LineWidth { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLineDashStyle")]
public ChartDashStyle LineDashStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartCollectionEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeStripLines")]
[DesignerSerializationVisibilityAttribute("2")]
public StripLinesCollection StripLines { get; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeToolTip")]
[BindableAttribute("True")]
public string ToolTip { get; public set; }
    [RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.AxisIntervalValueConverter")]
[SRCategoryAttribute("CategoryAttributeInterval")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeInterval4")]
public double Interval { get; public set; }
    [SRCategoryAttribute("CategoryAttributeInterval")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.AxisIntervalValueConverter")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeIntervalOffset6")]
[BindableAttribute("True")]
[RefreshPropertiesAttribute("1")]
public double IntervalOffset { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeIntervalType4")]
[SRCategoryAttribute("CategoryAttributeInterval")]
public DateTimeIntervalType IntervalType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeInterval")]
[RefreshPropertiesAttribute("1")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeIntervalOffsetType4")]
public DateTimeIntervalType IntervalOffsetType { get; public set; }
    private bool IsTextVertical { get; }
    internal bool IsAxisOnAreaEdge { get; }
    [SRDescriptionAttribute("DescriptionAttributeLabelStyle")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter")]
[SRCategoryAttribute("CategoryAttributeLabels")]
[DesignerSerializationVisibilityAttribute("2")]
[BindableAttribute("True")]
public LabelStyle LabelStyle { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeCustomLabels")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartCollectionEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeLabels")]
[DesignerSerializationVisibilityAttribute("2")]
public CustomLabelsCollection CustomLabels { get; }
    [BindableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeReverse")]
internal AxisPosition AxisPosition { get; internal set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CategoryAttributeInterval")]
[SRDescriptionAttribute("DescriptionAttributeIntervalAutoMode")]
public IntervalAutoMode IntervalAutoMode { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeReverse")]
[DefaultValueAttribute("False")]
[SRCategoryAttribute("CategoryAttributeScale")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
public bool IsReversed { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeStartFromZero3")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeScale")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
public bool IsStartedFromZero { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMargin")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRCategoryAttribute("CategoryAttributeScale")]
public bool IsMarginVisible { get; public set; }
    [SRCategoryAttribute("CategoryAttributeScale")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeInternalIntervalType")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
internal DateTimeIntervalType InternalIntervalType { get; internal set; }
    unknown double SetInterval {internal set; }
    [NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMaximum")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.AxisMinMaxAutoValueConverter")]
[BindableAttribute("True")]
[DefaultValueAttribute("не число")]
[SRCategoryAttribute("CategoryAttributeScale")]
public double Maximum { get; public set; }
    [SRCategoryAttribute("CategoryAttributeScale")]
[BindableAttribute("True")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.AxisMinMaxAutoValueConverter")]
[DefaultValueAttribute("не число")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMinimum")]
public double Minimum { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.AxisCrossingValueConverter")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeScale")]
[SRDescriptionAttribute("DescriptionAttributeCrossing")]
[BindableAttribute("True")]
[DefaultValueAttribute("не число")]
public double Crossing { get; public set; }
    [DefaultValueAttribute("System.Windows.Forms.DataVisualization.Charting.AxisEnabled", "Auto")]
[SRDescriptionAttribute("DescriptionAttributeEnabled7")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[NotifyParentPropertyAttribute("True")]
public AxisEnabled Enabled { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CategoryAttributeScale")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLogarithmic")]
[BindableAttribute("True")]
public bool IsLogarithmic { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLogarithmBase")]
[BindableAttribute("True")]
[DefaultValueAttribute("10")]
[SRCategoryAttribute("CategoryAttributeScale")]
public double LogarithmBase { get; public set; }
    [SRCategoryAttribute("CategoryAttributeScale")]
[DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("DescriptionAttributeScaleBreakStyle")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter")]
[NotifyParentPropertyAttribute("True")]
public AxisScaleBreakStyle ScaleBreakStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeScale")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartCollectionEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleSegmentCollection_AxisScaleSegmentCollection")]
[SerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
internal AxisScaleSegmentCollection ScaleSegments { get; }
    [SRDescriptionAttribute("DescriptionAttributeView")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeDataView")]
[DesignerSerializationVisibilityAttribute("2")]
public AxisScaleView ScaleView { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter")]
[SRCategoryAttribute("CategoryAttributeDataView")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeScrollBar")]
[DesignerSerializationVisibilityAttribute("2")]
public AxisScrollBar ScrollBar { get; public set; }
    internal double ViewMinimum { get; }
    internal double ViewMaximum { get; }
    internal bool AutoMaximum { get; }
    internal bool AutoMinimum { get; }
    public Axis(ChartArea chartArea, AxisName axisTypeName);
    private void Initialize(AxisName axisTypeName);
    internal void Initialize(ChartArea chartArea, AxisName axisTypeName);
    internal static string GetName(AxisName axisName);
    internal ChartArea get_ChartArea();
    public TextOrientation get_TextOrientation();
    public void set_TextOrientation(TextOrientation value);
    internal virtual string get_SubAxisName();
    public bool get_IsInterlaced();
    public void set_IsInterlaced(bool value);
    public Color get_InterlacedColor();
    public void set_InterlacedColor(Color value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual AxisName get_AxisName();
    public AxisArrowStyle get_ArrowStyle();
    public void set_ArrowStyle(AxisArrowStyle value);
    public Grid get_MajorGrid();
    public void set_MajorGrid(Grid value);
    public Grid get_MinorGrid();
    public void set_MinorGrid(Grid value);
    public TickMark get_MajorTickMark();
    public void set_MajorTickMark(TickMark value);
    public TickMark get_MinorTickMark();
    public void set_MinorTickMark(TickMark value);
    public bool get_IsLabelAutoFit();
    public void set_IsLabelAutoFit(bool value);
    public int get_LabelAutoFitMinFontSize();
    public void set_LabelAutoFitMinFontSize(int value);
    public int get_LabelAutoFitMaxFontSize();
    public void set_LabelAutoFitMaxFontSize(int value);
    public LabelAutoFitStyles get_LabelAutoFitStyle();
    public void set_LabelAutoFitStyle(LabelAutoFitStyles value);
    public virtual bool get_IsMarksNextToAxis();
    public virtual void set_IsMarksNextToAxis(bool value);
    public string get_Title();
    public void set_Title(string value);
    public Color get_TitleForeColor();
    public void set_TitleForeColor(Color value);
    public StringAlignment get_TitleAlignment();
    public void set_TitleAlignment(StringAlignment value);
    public Font get_TitleFont();
    public void set_TitleFont(Font value);
    public Color get_LineColor();
    public void set_LineColor(Color value);
    public int get_LineWidth();
    public void set_LineWidth(int value);
    public ChartDashStyle get_LineDashStyle();
    public void set_LineDashStyle(ChartDashStyle value);
    public StripLinesCollection get_StripLines();
    public void set_ToolTip(string value);
    public string get_ToolTip();
    public double get_Interval();
    public void set_Interval(double value);
    public double get_IntervalOffset();
    public void set_IntervalOffset(double value);
    public DateTimeIntervalType get_IntervalType();
    public void set_IntervalType(DateTimeIntervalType value);
    public DateTimeIntervalType get_IntervalOffsetType();
    public void set_IntervalOffsetType(DateTimeIntervalType value);
    private bool get_IsTextVertical();
    private TextOrientation GetTextOrientation();
    internal void PrePaint(ChartGraphics graph);
    internal void Paint(ChartGraphics graph);
    internal void PaintOnSegmentedScalePassOne(ChartGraphics graph);
    internal void PaintOnSegmentedScalePassTwo(ChartGraphics graph);
    private void DrawAxisTitle(ChartGraphics graph);
    private Matrix SetRotationTransformation(ChartGraphics graph, RectangleF titlePosition);
    internal void DrawRadialLine(object obj, ChartGraphics graph, Color color, int width, ChartDashStyle style, double position);
    internal void DrawCircularLine(object obj, ChartGraphics graph, Color color, int width, ChartDashStyle style, float position);
    private void DrawAxis3DTitle(ChartGraphics graph);
    internal void DrawAxisLine(ChartGraphics graph, bool backElements);
    private void DrawAxisLineHotRegion(ChartGraphics graph, bool backElements);
    private void DrawAxisLineHotRegion(ChartGraphics graph);
    private void Draw3DAxisLine(ChartGraphics graph, PointF point1, PointF point2, bool horizontal, bool backElements);
    internal float GetMarksZPosition(Boolean& axisOnEdge);
    internal void PaintGrids(ChartGraphics graph);
    internal void PaintGrids(ChartGraphics graph, Object& obj);
    internal void PaintStrips(ChartGraphics graph, bool drawLinesOnly);
    internal void PaintStrips(ChartGraphics graph, bool selectionMode, int x, int y, Object& obj, bool drawLinesOnly);
    private bool AddInterlacedStrip();
    public void RoundAxisValues();
    internal void ReCalc(ElementPosition position);
    internal void StoreAxisValues();
    internal void ResetAxisValues();
    internal void ResetAutoValues();
    internal virtual void Resize(ChartGraphics chartGraph, ElementPosition chartAreaPosition, RectangleF plotArea, float axesNumber, bool autoPlotPosition);
    private void AdjustIntervalToFitLabels(ChartGraphics chartGraph, bool autoPlotPosition, bool onlyIncreaseInterval);
    private bool IsVariableLabelCountModeEnabled();
    private void AdjustIntervalToFitLabels(ChartGraphics chartGraph, bool autoPlotPosition, AxisScaleSegment axisScaleSegment, bool onlyIncreaseInterval);
    private double ReduceLabelInterval(double oldInterval, double minInterval, DateTimeIntervalType& axisIntervalType);
    private double IncreaseLabelInterval(double oldInterval, DateTimeIntervalType& axisIntervalType);
    private bool WordWrapLongestLabel(CustomLabelsCollection labels);
    internal void GetCircularAxisLabelsAutoFitFont(ChartGraphics graph, ArrayList axisList, CircularAxisLabelsStyle labelsStyle, RectangleF plotAreaRectAbs, RectangleF areaRectAbs, float labelsSizeEstimate);
    internal bool CheckCircularLabelsFit(ChartGraphics graph, ArrayList axisList, CircularAxisLabelsStyle labelsStyle, RectangleF plotAreaRectAbs, RectangleF areaRectAbs, float labelsSizeEstimate);
    internal void AdjustLabelFontAtSecondPass(ChartGraphics chartGraph, bool autoPlotPosition);
    internal double GetLogValue(double yValue);
    private bool CheckLabelsFit(ChartGraphics chartGraph, float otherElementsSize, bool autoPlotPosition, bool checkLabelsFirstRowOnly, bool secondPass);
    private bool CheckLabelsFit(ChartGraphics chartGraph, float otherElementsSize, bool autoPlotPosition, bool checkLabelsFirstRowOnly, bool secondPass, bool checkWidth, bool checkHeight, ArrayList labelPositions);
    private float GetRequiredLabelSize(ChartGraphics chartGraph, float maxLabelSize, Single& resultSize);
    internal float GetGroupLablesToatalSize();
    internal int GetGroupLabelLevelCount();
    private Single[] GetRequiredGroupLabelSize(ChartGraphics chartGraph, float maxLabelSize);
    internal Axis GetSubAxis(string subAxisName);
    internal bool GetIsMarksNextToAxis();
    internal DateTimeIntervalType GetAxisIntervalType();
    internal ChartValueType GetAxisValuesType();
    internal SizeF GetArrowSize(ArrowOrientation& arrowOrientation);
    private bool IsArrowInAxis(ArrowOrientation arrowOrientation, AxisPosition axisPosition);
    internal float GetPixelInterval(double realInterval);
    internal bool get_IsAxisOnAreaEdge();
    internal double GetAxisPosition();
    internal virtual double GetAxisPosition(bool ignoreCrossing);
    internal double GetAxisProjectionAngle();
    protected virtual void Dispose(bool disposing);
    public LabelStyle get_LabelStyle();
    public void set_LabelStyle(LabelStyle value);
    public CustomLabelsCollection get_CustomLabels();
    internal bool IsCustomGridLines();
    internal bool IsCustomTickMarks();
    internal AxisType GetAxisType();
    internal ArrayList GetAxisSeries();
    internal Axis GetOtherTypeAxis();
    internal void PostFillLabels();
    internal void FillLabels(bool removeFirstRow);
    private string GetPointLabel(List`1<string> series, double valuePosition, bool nonZeroXValues, bool indexedSeries);
    private string GetPointLabel(Series series, double valuePosition, bool nonZeroXValues, bool indexedSeries);
    internal virtual AxisPosition get_AxisPosition();
    internal virtual void set_AxisPosition(AxisPosition value);
    public IntervalAutoMode get_IntervalAutoMode();
    public void set_IntervalAutoMode(IntervalAutoMode value);
    public bool get_IsReversed();
    public void set_IsReversed(bool value);
    public bool get_IsStartedFromZero();
    public void set_IsStartedFromZero(bool value);
    public bool get_IsMarginVisible();
    public void set_IsMarginVisible(bool value);
    internal DateTimeIntervalType get_InternalIntervalType();
    internal void set_InternalIntervalType(DateTimeIntervalType value);
    internal void set_SetInterval(double value);
    internal void SetIntervalAndType(double newInterval, DateTimeIntervalType newIntervalType);
    public double get_Maximum();
    public void set_Maximum(double value);
    public double get_Minimum();
    public void set_Minimum(double value);
    public virtual double get_Crossing();
    public virtual void set_Crossing(double value);
    public AxisEnabled get_Enabled();
    public void set_Enabled(AxisEnabled value);
    public bool get_IsLogarithmic();
    public void set_IsLogarithmic(bool value);
    public double get_LogarithmBase();
    public void set_LogarithmBase(double value);
    public virtual AxisScaleBreakStyle get_ScaleBreakStyle();
    public virtual void set_ScaleBreakStyle(AxisScaleBreakStyle value);
    internal AxisScaleSegmentCollection get_ScaleSegments();
    public AxisScaleView get_ScaleView();
    public void set_ScaleView(AxisScaleView value);
    public AxisScrollBar get_ScrollBar();
    public void set_ScrollBar(AxisScrollBar value);
    internal double get_ViewMinimum();
    internal double get_ViewMaximum();
    internal bool get_AutoMaximum();
    internal bool get_AutoMinimum();
    public double GetPosition(double axisValue);
    public double ValueToPosition(double axisValue);
    public double ValueToPixelPosition(double axisValue);
    public double PositionToValue(double position);
    internal double PositionToValue(double position, bool validateInput);
    public double PixelPositionToValue(double position);
    internal void SetAxisPosition();
    internal void SetTempAxisOffset();
    internal void ResetTempAxisOffset();
    internal double RoundedValues(double inter, bool shouldStartFromZero, bool autoMax, bool autoMin, Double& min, Double& max);
    internal double CalcInterval(double diff);
    private double CalcInterval(double min, double max);
    internal double CalcInterval(double min, double max, bool date, DateTimeIntervalType& type, ChartValueType valuesType);
    private double CalcYearInterval(double years);
    private int GetNumOfUnits(double min, double max, DateTimeIntervalType type);
    internal ChartValueType GetDateTimeType();
    private double GetCrossing();
    internal void SetAutoMinimum(double min);
    internal void SetAutoMaximum(double max);
    internal Axis GetOppositeAxis();
    internal double GetLinearPosition(double axisValue);
    internal void EstimateAxis();
    internal double EstimateAxis(Double& minimumValue, Double& maximumValue, bool autoMaximum, bool autoMinimum);
    private double EstimateLogarithmicAxis(Double& minimumValue, Double& maximumValue, double crossingValue, bool autoMaximum, bool autoMinimum);
    private double EstimateDateAxis(Double& minimumValue, Double& maximumValue, bool autoMaximum, bool autoMinimum, ChartValueType valuesType);
    internal double EstimateNumberAxis(Double& minimumValue, Double& maximumValue, bool shouldStartFromZero, int preferredNumberOfIntervals, bool autoMaximum, bool autoMinimum);
}
public enum System.Windows.Forms.DataVisualization.Charting.AxisArrowStyle : Enum {
    public int value__;
    public static AxisArrowStyle None;
    public static AxisArrowStyle Triangle;
    public static AxisArrowStyle SharpTriangle;
    public static AxisArrowStyle Lines;
}
internal class System.Windows.Forms.DataVisualization.Charting.AxisCrossingValueConverter : AxisMinMaxValueConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class System.Windows.Forms.DataVisualization.Charting.AxisElementIntervalValueConverter : AxisIntervalValueConverter {
}
public enum System.Windows.Forms.DataVisualization.Charting.AxisEnabled : Enum {
    public int value__;
    public static AxisEnabled Auto;
    public static AxisEnabled True;
    public static AxisEnabled False;
}
internal class System.Windows.Forms.DataVisualization.Charting.AxisIntervalValueConverter : DoubleConverter {
    internal bool hideNotSet;
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class System.Windows.Forms.DataVisualization.Charting.AxisLabelDateValueConverter : DoubleConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class System.Windows.Forms.DataVisualization.Charting.AxisMinMaxAutoValueConverter : AxisMinMaxValueConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class System.Windows.Forms.DataVisualization.Charting.AxisMinMaxValueConverter : DoubleConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public enum System.Windows.Forms.DataVisualization.Charting.AxisName : Enum {
    public int value__;
    public static AxisName X;
    public static AxisName Y;
    public static AxisName X2;
    public static AxisName Y2;
}
internal enum System.Windows.Forms.DataVisualization.Charting.AxisPosition : Enum {
    public int value__;
    public static AxisPosition Left;
    public static AxisPosition Right;
    public static AxisPosition Top;
    public static AxisPosition Bottom;
}
[SRDescriptionAttribute("DescriptionAttributeAxisScaleBreakStyle_AxisScaleBreakStyle")]
[DefaultPropertyAttribute("Enabled")]
public class System.Windows.Forms.DataVisualization.Charting.AxisScaleBreakStyle : object {
    internal Axis axis;
    private bool _enabled;
    private BreakLineStyle _breakLineStyle;
    private double _segmentSpacing;
    private Color _breakLineColor;
    private int _breakLineWidth;
    private ChartDashStyle _breakLineDashStyle;
    private double _minSegmentSize;
    private int _totalNumberOfSegments;
    private int _minimumNumberOfEmptySegments;
    private int _maximumNumberOfBreaks;
    private StartFromZero _startFromZero;
    [SRCategoryAttribute("CategoryAttributeMisc")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleBreakStyle_StartFromZero")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public StartFromZero StartFromZero { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("2")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleBreakStyle_MaxNumberOfBreaks")]
public int MaxNumberOfBreaks { get; public set; }
    [DefaultValueAttribute("25")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleBreakStyle_CollapsibleSpaceThreshold")]
[SRCategoryAttribute("CategoryAttributeMisc")]
public int CollapsibleSpaceThreshold { get; public set; }
    [ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("False")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleBreakStyle_Enabled")]
public bool Enabled { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleBreakStyle_BreakLineType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public BreakLineStyle BreakLineStyle { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeAxisScaleBreakStyle_Spacing")]
[DefaultValueAttribute("1,5")]
[SRCategoryAttribute("CategoryAttributeMisc")]
public double Spacing { get; public set; }
    [TypeConverterAttribute("System.Drawing.ColorConverter")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DescriptionAttributeLineColor")]
public Color LineColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeLineWidth")]
[DefaultValueAttribute("1")]
public int LineWidth { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLineDashStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public ChartDashStyle LineDashStyle { get; public set; }
    internal AxisScaleBreakStyle(Axis axis);
    public StartFromZero get_StartFromZero();
    public void set_StartFromZero(StartFromZero value);
    public int get_MaxNumberOfBreaks();
    public void set_MaxNumberOfBreaks(int value);
    public int get_CollapsibleSpaceThreshold();
    public void set_CollapsibleSpaceThreshold(int value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public BreakLineStyle get_BreakLineStyle();
    public void set_BreakLineStyle(BreakLineStyle value);
    public double get_Spacing();
    public void set_Spacing(double value);
    public Color get_LineColor();
    public void set_LineColor(Color value);
    public int get_LineWidth();
    public void set_LineWidth(int value);
    public ChartDashStyle get_LineDashStyle();
    public void set_LineDashStyle(ChartDashStyle value);
    internal bool IsEnabled();
    internal bool CanUseAxisScaleBreaks();
    internal static ArrayList GetAxisSeries(Axis axis);
    private void Invalidate();
    internal void GetAxisSegmentForScaleBreaks(AxisScaleSegmentCollection axisSegments);
    private int GetStartScaleFromZeroSegmentIndex(AxisScaleSegmentCollection axisSegments);
    private void SetAxisSegmentPosition(AxisScaleSegmentCollection axisSegments);
    private void FillAxisSegmentCollection(AxisScaleSegmentCollection axisSegments);
    private bool IsExcludedSegment(ArrayList excludedSegments, int segmentIndex);
    internal Int32[] GetSeriesDataStatistics(int segmentCount, Double& minYValue, Double& maxYValue, Double& segmentSize, Double[]& segmentMaxValue, Double[]& segmentMinValue);
    internal bool GetLargestSequenseOfSegmentsWithNoPoints(Int32[] segmentPointNumber, Int32& startSegment, Int32& numberOfSegments);
}
[SRDescriptionAttribute("DescriptionAttributeAxisScaleSegment_AxisScaleSegment")]
internal class System.Windows.Forms.DataVisualization.Charting.AxisScaleSegment : object {
    internal Axis axis;
    private double _position;
    private double _size;
    private double _spacing;
    private double _scaleMinimum;
    private double _scaleMaximum;
    private double _intervalOffset;
    private double _interval;
    private DateTimeIntervalType _intervalType;
    private DateTimeIntervalType _intervalOffsetType;
    private object _tag;
    private Stack _oldAxisSettings;
    [SRDescriptionAttribute("DescriptionAttributeAxisScaleSegment_Position")]
[DefaultValueAttribute("0")]
[SRCategoryAttribute("CategoryAttributeMisc")]
public double Position { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleSegment_Size")]
[DefaultValueAttribute("0")]
public double Size { get; public set; }
    [DefaultValueAttribute("0")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleSegment_Spacing")]
public double Spacing { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeAxisScaleSegment_ScaleMaximum")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("0")]
public double ScaleMaximum { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeAxisScaleSegment_ScaleMinimum")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("0")]
public double ScaleMinimum { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeAxisScaleSegment_Interval")]
[SRCategoryAttribute("CategoryAttributeInterval")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.AxisIntervalValueConverter")]
[DefaultValueAttribute("0")]
public double Interval { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.AxisIntervalValueConverter")]
[SRCategoryAttribute("CategoryAttributeInterval")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleSegment_IntervalOffset")]
public double IntervalOffset { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleSegment_IntervalType")]
[SRCategoryAttribute("CategoryAttributeInterval")]
public DateTimeIntervalType IntervalType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeInterval")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleSegment_IntervalOffsetType")]
public DateTimeIntervalType IntervalOffsetType { get; }
    [SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleSegment_Tag")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public object Tag { get; public set; }
    public double get_Position();
    public void set_Position(double value);
    public double get_Size();
    public void set_Size(double value);
    public double get_Spacing();
    public void set_Spacing(double value);
    public double get_ScaleMaximum();
    public void set_ScaleMaximum(double value);
    public double get_ScaleMinimum();
    public void set_ScaleMinimum(double value);
    public double get_Interval();
    public void set_Interval(double value);
    public double get_IntervalOffset();
    public DateTimeIntervalType get_IntervalType();
    public void set_IntervalType(DateTimeIntervalType value);
    public DateTimeIntervalType get_IntervalOffsetType();
    public object get_Tag();
    public void set_Tag(object value);
    internal void PaintBreakLine(ChartGraphics graph, AxisScaleSegment nextSegment);
    private Brush GetChartFillBrush(ChartGraphics graph);
    private GraphicsPath GetBreakLinePath(RectangleF breakLinePosition, bool top);
    internal RectangleF GetBreakLinePosition(ChartGraphics graph, AxisScaleSegment nextSegment);
    internal void GetScalePositionAndSize(double plotAreaSize, Double& scalePosition, Double& scaleSize);
    internal void SetTempAxisScaleAndInterval();
    internal void RestoreAxisScaleAndInterval();
}
[DefaultMemberAttribute("Item")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleSegmentCollection_AxisScaleSegmentCollection")]
internal class System.Windows.Forms.DataVisualization.Charting.AxisScaleSegmentCollection : CollectionBase {
    private Axis _axis;
    private AxisScaleSegment _enforcedSegment;
    internal bool AllowOutOfScaleValues;
    [SRDescriptionAttribute("DescriptionAttributeAxisScaleSegmentCollection_Item")]
public AxisScaleSegment Item { get; }
    internal AxisScaleSegmentCollection(Axis axis);
    public AxisScaleSegment get_Item(int index);
    public int Add(AxisScaleSegment segment);
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    internal void EnforceSegment(AxisScaleSegment segment);
    public AxisScaleSegment FindScaleSegmentForAxisValue(double axisValue);
}
[SRDescriptionAttribute("DescriptionAttributeAxisDataView_AxisDataView")]
[DefaultPropertyAttribute("Position")]
public class System.Windows.Forms.DataVisualization.Charting.AxisScaleView : object {
    internal Axis axis;
    private double _position;
    private double _size;
    private DateTimeIntervalType _sizeType;
    private double _minSize;
    private DateTimeIntervalType _minSizeType;
    private bool _zoomable;
    private double _smallScrollSize;
    private DateTimeIntervalType _smallScrollSizeType;
    private double _smallScrollMinSize;
    private DateTimeIntervalType _smallScrollMinSizeType;
    private double _currentSmallScrollSize;
    private DateTimeIntervalType _currentSmallScrollSizeType;
    internal ArrayList dataViewStates;
    private bool _ignoreValidation;
    [SRCategoryAttribute("CategoryAttributeAxisView")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("не число")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.DoubleDateNanValueConverter")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeAxisDataView_Position")]
public double Position { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.DoubleNanValueConverter")]
[BindableAttribute("True")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeAxisDataView_Size")]
[SRCategoryAttribute("CategoryAttributeAxisView")]
public double Size { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ParenthesizePropertyNameAttribute("True")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAxisView")]
[SRDescriptionAttribute("DescriptionAttributeAxisDataView_SizeType")]
public DateTimeIntervalType SizeType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAxisView")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeAxisDataView_IsZoomed")]
[BindableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public bool IsZoomed { get; }
    [DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeAxisDataView_MinSize")]
[SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.DoubleNanValueConverter")]
public double MinSize { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeAxisDataView_MinSizeType")]
[SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DateTimeIntervalType MinSizeType { get; public set; }
    [BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeAxisDataView_Zoomable")]
[SRCategoryAttribute("CategoryAttributeAxisView")]
[DefaultValueAttribute("True")]
public bool Zoomable { get; public set; }
    [DefaultValueAttribute("не число")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.AxisMinMaxAutoValueConverter")]
[SRDescriptionAttribute("DescriptionAttributeAxisDataView_SmallScrollSize")]
[SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
public double SmallScrollSize { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAxisView")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeAxisDataView_SmallScrollSizeType")]
[BindableAttribute("True")]
public DateTimeIntervalType SmallScrollSizeType { get; public set; }
    [DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeAxisDataView_SmallScrollMinSize")]
[SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
public double SmallScrollMinSize { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeAxisDataView_SmallScrollMinSizeType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DateTimeIntervalType SmallScrollMinSizeType { get; public set; }
    [SerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public double ViewMinimum { get; }
    [SerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public double ViewMaximum { get; }
    internal AxisScaleView(Axis axis);
    public double get_Position();
    public void set_Position(double value);
    public double get_Size();
    public void set_Size(double value);
    public DateTimeIntervalType get_SizeType();
    public void set_SizeType(DateTimeIntervalType value);
    public bool get_IsZoomed();
    public double get_MinSize();
    public void set_MinSize(double value);
    public DateTimeIntervalType get_MinSizeType();
    public void set_MinSizeType(DateTimeIntervalType value);
    public bool get_Zoomable();
    public void set_Zoomable(bool value);
    public double get_SmallScrollSize();
    public void set_SmallScrollSize(double value);
    public DateTimeIntervalType get_SmallScrollSizeType();
    public void set_SmallScrollSizeType(DateTimeIntervalType value);
    public double get_SmallScrollMinSize();
    public void set_SmallScrollMinSize(double value);
    public DateTimeIntervalType get_SmallScrollMinSizeType();
    public void set_SmallScrollMinSizeType(DateTimeIntervalType value);
    public double get_ViewMinimum();
    public double get_ViewMaximum();
    public void Scroll(ScrollType scrollType);
    internal void Scroll(ScrollType scrollType, bool fireChangeEvents);
    public void Scroll(double newPosition);
    public void Scroll(DateTime newPosition);
    internal void Scroll(double newPosition, bool fireChangeEvents);
    public void Zoom(double viewPosition, double viewSize, DateTimeIntervalType viewSizeType, bool saveState);
    public void Zoom(double viewStart, double viewEnd);
    public void Zoom(double viewPosition, double viewSize, DateTimeIntervalType viewSizeType);
    public void ZoomReset(int numberOfViews);
    public void ZoomReset();
    internal void ZoomReset(int numberOfViews, bool fireChangeEvents);
    internal bool Zoom(double viewPosition, double viewSize, DateTimeIntervalType viewSizeType, bool fireChangeEvents, bool saveState);
    private void LoadDataViewState(int numberOfViews, bool fireChangeEvents);
    private void SaveDataViewState();
    private void GetCurrentViewSmallScrollSize();
    internal double GetScrollingLineSize();
    internal DateTimeIntervalType GetScrollingLineSizeType();
    private void ValidateViewPositionSize(Double& viewPosition, Double& viewSize, DateTimeIntervalType& viewSizeType);
    internal Chart GetChartObject();
}
public class System.Windows.Forms.DataVisualization.Charting.AxisScrollBar : object {
    internal Axis axis;
    private bool _enabled;
    private ScrollBarButtonStyles _scrollBarButtonStyle;
    private double _scrollBarSize;
    private int _pressedButtonType;
    private Color _buttonColor;
    private Color _backColor;
    private Color _lineColor;
    private Color _buttonCurrentColor;
    private Color _backCurrentColor;
    private Color _lineCurrentColor;
    private PointF _lastClickMousePosition;
    private double _lastClickViewPosition;
    private Timer _scrollTimer;
    private MouseEventArgs _mouseArguments;
    private bool _isPositionedInside;
    [SRDescriptionAttribute("DescriptionAttributeAxisScrollBar_PositionInside")]
[SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
public bool IsPositionedInside { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeAxisScrollBar_Enabled")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAxisView")]
[DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[BindableAttribute("False")]
[SerializationVisibilityAttribute("0")]
public ChartArea ChartArea { get; }
    [SerializationVisibilityAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[BindableAttribute("False")]
public Axis Axis { get; }
    [SRDescriptionAttribute("DescriptionAttributeAxisScrollBar_Buttons")]
[BindableAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.FlagsEnumUITypeEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CategoryAttributeAxisView")]
public ScrollBarButtonStyles ButtonStyle { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeAxisScrollBar_Size")]
[SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
[DefaultValueAttribute("14")]
public double Size { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeAxisScrollBar_ButtonColor")]
public Color ButtonColor { get; public set; }
    [BindableAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAxisView")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeLineColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color LineColor { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAxisView")]
[SRDescriptionAttribute("DescriptionAttributeBackColor")]
public Color BackColor { get; public set; }
    [SerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public bool IsVisible { get; }
    internal AxisScrollBar(Axis axis);
    internal void Initialize();
    public bool get_IsPositionedInside();
    public void set_IsPositionedInside(bool value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public ChartArea get_ChartArea();
    public Axis get_Axis();
    public ScrollBarButtonStyles get_ButtonStyle();
    public void set_ButtonStyle(ScrollBarButtonStyles value);
    public double get_Size();
    public void set_Size(double value);
    public Color get_ButtonColor();
    public void set_ButtonColor(Color value);
    public Color get_LineColor();
    public void set_LineColor(Color value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public bool get_IsVisible();
    internal void Paint(ChartGraphics graph);
    private void PaintScrollBarConnectionRect(ChartGraphics graph, RectangleF scrollBarRect, int borderWidth);
    internal void PaintScrollBar3DButton(ChartGraphics graph, RectangleF buttonRect, bool pressedState, ScrollBarButtonType buttonType);
    internal void ScrollBar_MouseDown(object sender, MouseEventArgs e);
    internal void ScrollBar_MouseUp(object sender, MouseEventArgs e);
    internal void ScrollBar_MouseMove(MouseEventArgs e, Boolean& handled);
    private void ButtonClicked(ScrollBarButtonType buttonType, int x, int y);
    private void ScrollingTimerEventProcessor(object myObject, EventArgs myEventArgs);
    private void SetHotRegionElement(CommonElements common);
    private bool GetElementByPixelPosition(float x, float y, ScrollBarButtonType& buttonType);
    internal RectangleF GetScrollBarButtonRect(RectangleF scrollBarClientRect, ScrollBarButtonType buttonType);
    internal RectangleF GetScrollBarRect();
    internal double GetScrollBarRelativeSize();
    private double GetDataViewPercentage();
    private double GetDataViewPositionPercentage();
    private int GetButtonsNumberAll();
    private int GetButtonsNumberTop();
    private int GetButtonsNumberBottom();
    internal SizeF GetAbsoluteSize(SizeF relative);
    internal SizeF GetRelativeSize(SizeF size);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public enum System.Windows.Forms.DataVisualization.Charting.AxisType : Enum {
    public int value__;
    public static AxisType Primary;
    public static AxisType Secondary;
}
internal enum System.Windows.Forms.DataVisualization.Charting.BarDrawingStyle : Enum {
    public int value__;
    public static BarDrawingStyle Default;
    public static BarDrawingStyle Cylinder;
    public static BarDrawingStyle Emboss;
    public static BarDrawingStyle LightToDark;
    public static BarDrawingStyle Wedge;
}
[SRDescriptionAttribute("DescriptionAttributeBorder3DAnnotation_Border3DAnnotation")]
public class System.Windows.Forms.DataVisualization.Charting.Border3DAnnotation : RectangleAnnotation {
    private BorderSkin _borderSkin;
    [SerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationType")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public string AnnotationType { get; }
    [TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.LegendConverter")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkin")]
[NotifyParentPropertyAttribute("True")]
public BorderSkin BorderSkin { get; public set; }
    public virtual string get_AnnotationType();
    public BorderSkin get_BorderSkin();
    public void set_BorderSkin(BorderSkin value);
    internal virtual void Paint(Chart chart, ChartGraphics graphics);
    internal virtual RectangleF GetTextSpacing(Boolean& annotationRelative);
}
internal class System.Windows.Forms.DataVisualization.Charting.Borders3D.BorderTypeRegistry : object {
    private ResourceManager _resourceManager;
    internal Hashtable registeredBorderTypes;
    private Hashtable _createdBorderTypes;
    public ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("1")]
private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    public void Register(string name, Type borderType);
    public IBorderType GetBorderType(string name);
    public ResourceManager get_ResourceManager();
}
internal class System.Windows.Forms.DataVisualization.Charting.Borders3D.EmbossBorder : object {
    public float defaultRadiusSize;
    public float resolution;
    internal Single[] cornerRadius;
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
    public virtual RectangleF GetTitlePositionInBorder();
    public virtual void AdjustAreasPosition(ChartGraphics graph, RectangleF& areasRect);
    public virtual void DrawBorder(ChartGraphics graph, BorderSkin borderSkin, RectangleF rect, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageWrapMode, Color backImageTransparentColor, ChartImageAlignmentStyle backImageAlign, GradientStyle backGradientStyle, Color backSecondaryColor, Color borderColor, int borderWidth, ChartDashStyle borderDashStyle);
}
internal class System.Windows.Forms.DataVisualization.Charting.Borders3D.FrameThin1Border : RaisedBorder {
    internal Single[] innerCorners;
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
    public virtual void DrawBorder(ChartGraphics graph, BorderSkin borderSkin, RectangleF rect, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageWrapMode, Color backImageTransparentColor, ChartImageAlignmentStyle backImageAlign, GradientStyle backGradientStyle, Color backSecondaryColor, Color borderColor, int borderWidth, ChartDashStyle borderDashStyle);
}
internal class System.Windows.Forms.DataVisualization.Charting.Borders3D.FrameThin2Border : FrameThin1Border {
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
}
internal class System.Windows.Forms.DataVisualization.Charting.Borders3D.FrameThin3Border : FrameThin1Border {
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
}
internal class System.Windows.Forms.DataVisualization.Charting.Borders3D.FrameThin4Border : FrameThin1Border {
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
}
internal class System.Windows.Forms.DataVisualization.Charting.Borders3D.FrameThin5Border : FrameThin1Border {
    public string Name { get; }
    public virtual string get_Name();
}
internal class System.Windows.Forms.DataVisualization.Charting.Borders3D.FrameThin6Border : FrameThin1Border {
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
}
internal class System.Windows.Forms.DataVisualization.Charting.Borders3D.FrameTitle1Border : FrameThin1Border {
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
    public virtual RectangleF GetTitlePositionInBorder();
}
internal class System.Windows.Forms.DataVisualization.Charting.Borders3D.FrameTitle2Border : FrameThin2Border {
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
    public virtual RectangleF GetTitlePositionInBorder();
}
internal class System.Windows.Forms.DataVisualization.Charting.Borders3D.FrameTitle3Border : FrameThin3Border {
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
    public virtual RectangleF GetTitlePositionInBorder();
}
internal class System.Windows.Forms.DataVisualization.Charting.Borders3D.FrameTitle4Border : FrameThin4Border {
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
    public virtual RectangleF GetTitlePositionInBorder();
}
internal class System.Windows.Forms.DataVisualization.Charting.Borders3D.FrameTitle5Border : FrameThin5Border {
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
    public virtual RectangleF GetTitlePositionInBorder();
}
internal class System.Windows.Forms.DataVisualization.Charting.Borders3D.FrameTitle6Border : FrameThin6Border {
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
    public virtual RectangleF GetTitlePositionInBorder();
}
internal class System.Windows.Forms.DataVisualization.Charting.Borders3D.FrameTitle7Border : FrameTitle1Border {
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
}
internal class System.Windows.Forms.DataVisualization.Charting.Borders3D.FrameTitle8Border : FrameTitle1Border {
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
}
internal interface System.Windows.Forms.DataVisualization.Charting.Borders3D.IBorderType {
    public string Name { get; }
    unknown float Resolution {public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Resolution(float value);
    public abstract virtual void DrawBorder(ChartGraphics graph, BorderSkin borderSkin, RectangleF rect, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageWrapMode, Color backImageTransparentColor, ChartImageAlignmentStyle backImageAlign, GradientStyle backGradientStyle, Color backSecondaryColor, Color borderColor, int borderWidth, ChartDashStyle borderDashStyle);
    public abstract virtual void AdjustAreasPosition(ChartGraphics graph, RectangleF& areasRect);
    public abstract virtual RectangleF GetTitlePositionInBorder();
}
internal class System.Windows.Forms.DataVisualization.Charting.Borders3D.RaisedBorder : SunkenBorder {
    public string Name { get; }
    public virtual string get_Name();
}
internal class System.Windows.Forms.DataVisualization.Charting.Borders3D.SunkenBorder : object {
    internal float defaultRadiusSize;
    internal float outsideShadowRate;
    internal bool sunken;
    internal bool drawBottomShadow;
    internal bool drawOutsideTopLeftShadow;
    internal Single[] cornerRadius;
    internal SizeF sizeLeftTop;
    internal SizeF sizeRightBottom;
    internal bool drawScrews;
    internal float resolution;
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
    public virtual RectangleF GetTitlePositionInBorder();
    public virtual void AdjustAreasPosition(ChartGraphics graph, RectangleF& areasRect);
    public virtual void DrawBorder(ChartGraphics graph, BorderSkin borderSkin, RectangleF rect, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageWrapMode, Color backImageTransparentColor, ChartImageAlignmentStyle backImageAlign, GradientStyle backGradientStyle, Color backSecondaryColor, Color borderColor, int borderWidth, ChartDashStyle borderDashStyle);
    private void DrawScrew(ChartGraphics graph, RectangleF rect);
}
[DefaultPropertyAttribute("SkinStyle")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkin_BorderSkin")]
public class System.Windows.Forms.DataVisualization.Charting.BorderSkin : ChartElement {
    private Color _pageColor;
    private BorderSkinStyle _skinStyle;
    private GradientStyle _backGradientStyle;
    private Color _backSecondaryColor;
    private Color _backColor;
    private string _backImage;
    private ChartImageWrapMode _backImageWrapMode;
    private Color _backImageTransparentColor;
    private ChartImageAlignmentStyle _backImageAlignment;
    private Color _borderColor;
    private int _borderWidth;
    private ChartDashStyle _borderDashStyle;
    private ChartHatchStyle _backHatchStyle;
    [DefaultValueAttribute("System.Drawing.Color", "White")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkin_PageColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color PageColor { get; public set; }
    [ParenthesizePropertyNameAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkin_SkinStyle")]
public BorderSkinStyle SkinStyle { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "Gray")]
[SRDescriptionAttribute("DescriptionAttributeFrameBackColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
public Color BackColor { get; public set; }
    [TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRDescriptionAttribute("DescriptionAttributeBorderColor")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
public Color BorderColor { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.HatchStyleEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeFrameBackHatchStyle")]
[BindableAttribute("True")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeBackImage")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ImageValueEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public string BackImage { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeImageWrapMode")]
public ChartImageWrapMode BackImageWrapMode { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeImageTransparentColor")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color BackImageTransparentColor { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeBackImageAlign")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
public ChartImageAlignmentStyle BackImageAlignment { get; public set; }
    [BindableAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.GradientEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientStyle")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientStyle BackGradientStyle { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkin_FrameBackSecondaryColor")]
public Color BackSecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkin_FrameBorderWidth")]
[BindableAttribute("True")]
public int BorderWidth { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkin_FrameBorderDashStyle")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
public ChartDashStyle BorderDashStyle { get; public set; }
    internal BorderSkin(IChartElement parent);
    public Color get_PageColor();
    public void set_PageColor(Color value);
    public BorderSkinStyle get_SkinStyle();
    public void set_SkinStyle(BorderSkinStyle value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public ChartHatchStyle get_BackHatchStyle();
    public void set_BackHatchStyle(ChartHatchStyle value);
    public string get_BackImage();
    public void set_BackImage(string value);
    public ChartImageWrapMode get_BackImageWrapMode();
    public void set_BackImageWrapMode(ChartImageWrapMode value);
    public Color get_BackImageTransparentColor();
    public void set_BackImageTransparentColor(Color value);
    public ChartImageAlignmentStyle get_BackImageAlignment();
    public void set_BackImageAlignment(ChartImageAlignmentStyle value);
    public GradientStyle get_BackGradientStyle();
    public void set_BackGradientStyle(GradientStyle value);
    public Color get_BackSecondaryColor();
    public void set_BackSecondaryColor(Color value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public ChartDashStyle get_BorderDashStyle();
    public void set_BorderDashStyle(ChartDashStyle value);
}
public enum System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle : Enum {
    public int value__;
    public static BorderSkinStyle None;
    public static BorderSkinStyle Emboss;
    public static BorderSkinStyle Raised;
    public static BorderSkinStyle Sunken;
    public static BorderSkinStyle FrameThin1;
    public static BorderSkinStyle FrameThin2;
    public static BorderSkinStyle FrameThin3;
    public static BorderSkinStyle FrameThin4;
    public static BorderSkinStyle FrameThin5;
    public static BorderSkinStyle FrameThin6;
    public static BorderSkinStyle FrameTitle1;
    public static BorderSkinStyle FrameTitle2;
    public static BorderSkinStyle FrameTitle3;
    public static BorderSkinStyle FrameTitle4;
    public static BorderSkinStyle FrameTitle5;
    public static BorderSkinStyle FrameTitle6;
    public static BorderSkinStyle FrameTitle7;
    public static BorderSkinStyle FrameTitle8;
}
public enum System.Windows.Forms.DataVisualization.Charting.BreakLineStyle : Enum {
    public int value__;
    public static BreakLineStyle None;
    public static BreakLineStyle Straight;
    public static BreakLineStyle Wave;
    public static BreakLineStyle Ragged;
}
[SRDescriptionAttribute("DescriptionAttributeCalloutAnnotation_CalloutAnnotation")]
public class System.Windows.Forms.DataVisualization.Charting.CalloutAnnotation : TextAnnotation {
    private LineAnchorCapStyle _calloutAnchorCap;
    private CalloutStyle _calloutStyle;
    private static GraphicsPath _cloudPath;
    private static GraphicsPath _cloudOutlinePath;
    private static RectangleF _cloudBounds;
    [SRDescriptionAttribute("DescriptionAttributeCalloutAnnotation_CalloutStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[ParenthesizePropertyNameAttribute("True")]
public CalloutStyle CalloutStyle { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeCalloutAnnotation_CalloutAnchorCap")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public LineAnchorCapStyle CalloutAnchorCap { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "Black")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLineColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color LineColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeLineWidth")]
[DefaultValueAttribute("1")]
[BrowsableAttribute("True")]
public int LineWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLineDashStyle")]
public ChartDashStyle LineDashStyle { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRDescriptionAttribute("DescriptionAttributeBackColor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.HatchStyleEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackHatchStyle")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[BrowsableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientStyle")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.GradientEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public GradientStyle BackGradientStyle { get; public set; }
    [TypeConverterAttribute("System.Drawing.ColorConverter")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackSecondaryColor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public Color BackSecondaryColor { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeCalloutAnnotation_AnchorOffsetX")]
[SRCategoryAttribute("CategoryAttributeAnchor")]
[DefaultValueAttribute("3")]
[RefreshPropertiesAttribute("1")]
public double AnchorOffsetX { get; public set; }
    [DefaultValueAttribute("3")]
[SRDescriptionAttribute("DescriptionAttributeCalloutAnnotation_AnchorOffsetY")]
[SRCategoryAttribute("CategoryAttributeAnchor")]
[RefreshPropertiesAttribute("1")]
public double AnchorOffsetY { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeAnchorAlignment")]
[SRCategoryAttribute("CategoryAttributeAnchor")]
[DefaultValueAttribute("System.Drawing.ContentAlignment", "BottomLeft")]
public ContentAlignment AnchorAlignment { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationType")]
public string AnnotationType { get; }
    [ParenthesizePropertyNameAttribute("True")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeSelectionPointsStyle")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
internal SelectionPointsStyle SelectionPointsStyle { get; }
    private static CalloutAnnotation();
    public virtual CalloutStyle get_CalloutStyle();
    public virtual void set_CalloutStyle(CalloutStyle value);
    public virtual LineAnchorCapStyle get_CalloutAnchorCap();
    public virtual void set_CalloutAnchorCap(LineAnchorCapStyle value);
    public virtual Color get_LineColor();
    public virtual void set_LineColor(Color value);
    public virtual int get_LineWidth();
    public virtual void set_LineWidth(int value);
    public virtual ChartDashStyle get_LineDashStyle();
    public virtual void set_LineDashStyle(ChartDashStyle value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual ChartHatchStyle get_BackHatchStyle();
    public virtual void set_BackHatchStyle(ChartHatchStyle value);
    public virtual GradientStyle get_BackGradientStyle();
    public virtual void set_BackGradientStyle(GradientStyle value);
    public virtual Color get_BackSecondaryColor();
    public virtual void set_BackSecondaryColor(Color value);
    public virtual double get_AnchorOffsetX();
    public virtual void set_AnchorOffsetX(double value);
    public virtual double get_AnchorOffsetY();
    public virtual void set_AnchorOffsetY(double value);
    public virtual ContentAlignment get_AnchorAlignment();
    public virtual void set_AnchorAlignment(ContentAlignment value);
    public virtual string get_AnnotationType();
    internal virtual SelectionPointsStyle get_SelectionPointsStyle();
    internal virtual RectangleF GetTextSpacing(Boolean& annotationRelative);
    internal virtual void Paint(Chart chart, ChartGraphics graphics);
    private GraphicsPath DrawRoundedRectCallout(ChartGraphics graphics, RectangleF rectanglePosition, PointF anchorPoint, bool isEllipse);
    private GraphicsPath DrawRectangleCallout(ChartGraphics graphics, RectangleF rectanglePosition, PointF anchorPoint);
    private GraphicsPath DrawCloudCallout(ChartGraphics graphics, RectangleF rectanglePosition, PointF anchorPoint);
    private GraphicsPath DrawPerspectiveCallout(ChartGraphics graphics, RectangleF rectanglePosition, PointF anchorPoint);
    private GraphicsPath DrawRectangleLineCallout(ChartGraphics graphics, RectangleF rectanglePosition, PointF anchorPoint, bool drawRectangle);
    internal virtual bool IsAnchorDrawn();
    private static GraphicsPath GetCloudOutlinePath(RectangleF position);
    private static GraphicsPath GetCloudPath(RectangleF position);
    internal static PointF GetIntersectionY(PointF firstPoint, PointF secondPoint, float pointY);
    internal static PointF GetIntersectionX(PointF firstPoint, PointF secondPoint, float pointX);
    private void PathAddLineAsSegments(GraphicsPath path, float x1, float y1, float x2, float y2, int segments);
    private GraphicsPath CreateRoundedRectPath(RectangleF rect, float cornerRadius);
}
[SRDescriptionAttribute("DescriptionAttributeCalloutStyle_CalloutStyle")]
public enum System.Windows.Forms.DataVisualization.Charting.CalloutStyle : Enum {
    public int value__;
    public static CalloutStyle SimpleLine;
    public static CalloutStyle Borderline;
    public static CalloutStyle Cloud;
    public static CalloutStyle Rectangle;
    public static CalloutStyle RoundedRectangle;
    public static CalloutStyle Ellipse;
    public static CalloutStyle Perspective;
}
[DesignerSerializerAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartWinDesignerSerializer, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxBitmapAttribute("System.Windows.Forms.DataVisualization.Charting.Chart", "ChartControl.ico")]
[DisplayNameAttribute("Chart")]
[SRDescriptionAttribute("DescriptionAttributeChart_Chart")]
[DesignerAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartWinDesigner, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Windows.Forms.DataVisualization.Charting.Chart : Control {
    internal bool ShowDebugMarkings;
    private ChartTypeRegistry _chartTypeRegistry;
    private BorderTypeRegistry _borderTypeRegistry;
    private CustomPropertyRegistry _customAttributeRegistry;
    private DataManager _dataManager;
    internal ChartImage chartPicture;
    private ImageLoader _imageLoader;
    internal ServiceContainer serviceContainer;
    private ChartSerializer _chartSerializer;
    private PrintingManager _printingManager;
    internal Selection selection;
    private NamedImagesCollection _namedImages;
    private FormulaRegistry _formulaRegistry;
    internal bool disableInvalidates;
    internal bool serializing;
    internal SerializationStatus serializationStatus;
    internal Bitmap paintBufferBitmap;
    internal Graphics paintBufferBitmapGraphics;
    internal bool paintTopLevelElementOnly;
    internal bool dirtyFlag;
    internal Cursor defaultCursor;
    private KeywordsRegistry _keywordsRegistry;
    internal static double renderingDpiX;
    internal static double renderingDpiY;
    private EventHandler`1<ToolTipEventArgs> GetToolTipText;
    private EventHandler`1<CursorEventArgs> CursorPositionChanging;
    private EventHandler`1<CursorEventArgs> CursorPositionChanged;
    private EventHandler`1<CursorEventArgs> SelectionRangeChanging;
    private EventHandler`1<CursorEventArgs> SelectionRangeChanged;
    private EventHandler`1<ViewEventArgs> AxisViewChanging;
    private EventHandler`1<ViewEventArgs> AxisViewChanged;
    private EventHandler`1<ScrollBarEventArgs> AxisScrollBarClicked;
    private EventHandler`1<ChartPaintEventArgs> PostPaint;
    private EventHandler`1<ChartPaintEventArgs> PrePaint;
    private EventHandler Customize;
    private EventHandler`1<CustomizeLegendEventArgs> CustomizeLegend;
    private EventHandler AnnotationTextChanged;
    private EventHandler AnnotationSelectionChanged;
    private EventHandler AnnotationPositionChanged;
    private EventHandler`1<AnnotationPositionChangingEventArgs> AnnotationPositionChanging;
    private EventHandler AnnotationPlaced;
    private EventHandler`1<FormatNumberEventArgs> FormatNumber;
    private ChartAccessibleObject _chartAccessibleObject;
    protected Size DefaultSize { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.ColorArrayConverter")]
[DesignerSerializationVisibilityAttribute("2")]
[SerializationVisibilityAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeChart_PaletteCustomColors")]
public Color[] PaletteCustomColors { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[SRDescriptionAttribute("DescriptionAttributeSuppressExceptions")]
[DefaultValueAttribute("False")]
public bool SuppressExceptions { get; public set; }
    [AttributeProviderAttribute("System.ComponentModel.IListSource")]
[SerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeDataSource")]
[DefaultValueAttribute("")]
public object DataSource { get; public set; }
    [BindableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CategoryAttributeChart")]
[SRDescriptionAttribute("DescriptionAttributeChart_Images")]
[BrowsableAttribute("False")]
public NamedImagesCollection Images { get; }
    [BindableAttribute("False")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeChart_Printing")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CategoryAttributeChart")]
public PrintingManager Printing { get; }
    [DesignerSerializationVisibilityAttribute("2")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.SeriesCollectionEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeChart")]
[SRDescriptionAttribute("DescriptionAttributeChart_Series")]
public SeriesCollection Series { get; }
    [SRCategoryAttribute("CategoryAttributeChart")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.LegendCollectionEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("DescriptionAttributeLegends")]
public LegendCollection Legends { get; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartCollectionEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DesignerSerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CategoryAttributeChart")]
[SRDescriptionAttribute("DescriptionAttributeTitles")]
public TitleCollection Titles { get; }
    [SRDescriptionAttribute("DescriptionAttributeAnnotations3")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.AnnotationCollectionEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DesignerSerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CategoryAttributeChart")]
public AnnotationCollection Annotations { get; }
    [SerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Image BackgroundImage { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ColorPaletteEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributePalette")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartColorPalette Palette { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.FlagsEnumUITypeEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeImage")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Windows.Forms.DataVisualization.Charting.AntiAliasingStyles", "All")]
[SRDescriptionAttribute("DescriptionAttributeAntiAlias")]
public AntiAliasingStyles AntiAliasing { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeTextAntiAliasingQuality")]
[DefaultValueAttribute("System.Windows.Forms.DataVisualization.Charting.TextAntiAliasingQuality", "High")]
[SRCategoryAttribute("CategoryAttributeImage")]
[BindableAttribute("True")]
public TextAntiAliasingQuality TextAntiAliasingQuality { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeChart_SoftShadows")]
[SRCategoryAttribute("CategoryAttributeImage")]
public bool IsSoftShadows { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeChartAreas")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeChart")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartCollectionEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DesignerSerializationVisibilityAttribute("2")]
public ChartAreaCollection ChartAreas { get; }
    [TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRDescriptionAttribute("DescriptionAttributeBackColor")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
public Color BackColor { get; public set; }
    [TypeConverterAttribute("System.Drawing.ColorConverter")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("False")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeForeColor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public Color ForeColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLayout")]
[SRDescriptionAttribute("DescriptionAttributeChart_Size")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Size", "300, 300")]
public Size Size { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeDataManipulator")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataManipulator DataManipulator { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CategoryAttributeSerializer")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeChart_Serializer")]
public ChartSerializer Serializer { get; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CategoryAttributeCharttitle")]
[BindableAttribute("False")]
[SerializationVisibilityAttribute("0")]
public Font Font { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.HatchStyleEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackHatchStyle")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeBackImage")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ImageValueEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
public string BackImage { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeImageWrapMode")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
public ChartImageWrapMode BackImageWrapMode { get; public set; }
    [BindableAttribute("True")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeImageTransparentColor")]
public Color BackImageTransparentColor { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeBackImageAlign")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
public ChartImageAlignmentStyle BackImageAlignment { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.GradientEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientStyle")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public GradientStyle BackGradientStyle { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackSecondaryColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
public Color BackSecondaryColor { get; public set; }
    [BindableAttribute("False")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[SRDescriptionAttribute("DescriptionAttributeBorderColor")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public Color BorderColor { get; public set; }
    [BindableAttribute("False")]
[SerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeChart_BorderlineWidth")]
[DesignerSerializationVisibilityAttribute("0")]
public int BorderWidth { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeBorderDashStyle")]
[SerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartDashStyle BorderDashStyle { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[SRDescriptionAttribute("DescriptionAttributeBorderColor")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public Color BorderlineColor { get; public set; }
    [DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeChart_BorderlineWidth")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
public int BorderlineWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBorderDashStyle")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartDashStyle BorderlineDashStyle { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.LegendConverter")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkin")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BindableAttribute("True")]
public BorderSkin BorderSkin { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeChart_BuildNumber")]
[DesignerSerializationVisibilityAttribute("0")]
public string BuildNumber { get; }
    [SerializationVisibilityAttribute("0")]
[DefaultValueAttribute("96")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryAttributeMisc")]
public double RenderingDpiY { get; public set; }
    [DefaultValueAttribute("96")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeMisc")]
public double RenderingDpiX { get; public set; }
    [SerializationVisibilityAttribute("0")]
public Cursor Cursor { get; public set; }
    private static Chart();
    private void InitializeComponent();
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnPaintBackground(PaintEventArgs pevent);
    protected virtual void OnSystemColorsChanged(EventArgs e);
    private bool IsBorderTransparent();
    private void DrawException(Graphics graphics);
    [EditorBrowsableAttribute("1")]
public virtual void Refresh();
    public void Invalidate();
    public void Invalidate(Rectangle rectangle);
    public void UpdateCursor();
    public void UpdateAnnotations();
    protected virtual Size get_DefaultSize();
    protected virtual void OnLocationChanged(EventArgs e);
    protected virtual void OnResize(EventArgs e);
    public void SaveImage(string imageFileName, ChartImageFormat format);
    public void SaveImage(string imageFileName, ImageFormat format);
    public void SaveImage(Stream imageStream, ImageFormat format);
    public void SaveImage(Stream imageStream, ChartImageFormat format);
    public void set_PaletteCustomColors(Color[] value);
    public Color[] get_PaletteCustomColors();
    [EditorBrowsableAttribute("1")]
internal void ResetPaletteCustomColors();
    [EditorBrowsableAttribute("1")]
internal bool ShouldSerializePaletteCustomColors();
    public void set_SuppressExceptions(bool value);
    public bool get_SuppressExceptions();
    public object get_DataSource();
    public void set_DataSource(object value);
    public NamedImagesCollection get_Images();
    public PrintingManager get_Printing();
    public SeriesCollection get_Series();
    public LegendCollection get_Legends();
    public TitleCollection get_Titles();
    public AnnotationCollection get_Annotations();
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public ChartColorPalette get_Palette();
    public void set_Palette(ChartColorPalette value);
    public AntiAliasingStyles get_AntiAliasing();
    public void set_AntiAliasing(AntiAliasingStyles value);
    public TextAntiAliasingQuality get_TextAntiAliasingQuality();
    public void set_TextAntiAliasingQuality(TextAntiAliasingQuality value);
    public bool get_IsSoftShadows();
    public void set_IsSoftShadows(bool value);
    public ChartAreaCollection get_ChartAreas();
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public Size get_Size();
    public void set_Size(Size value);
    public DataManipulator get_DataManipulator();
    public ChartSerializer get_Serializer();
    public Font get_Font();
    public void set_Font(Font value);
    public ChartHatchStyle get_BackHatchStyle();
    public void set_BackHatchStyle(ChartHatchStyle value);
    public string get_BackImage();
    public void set_BackImage(string value);
    public ChartImageWrapMode get_BackImageWrapMode();
    public void set_BackImageWrapMode(ChartImageWrapMode value);
    public Color get_BackImageTransparentColor();
    public void set_BackImageTransparentColor(Color value);
    public ChartImageAlignmentStyle get_BackImageAlignment();
    public void set_BackImageAlignment(ChartImageAlignmentStyle value);
    public GradientStyle get_BackGradientStyle();
    public void set_BackGradientStyle(GradientStyle value);
    public Color get_BackSecondaryColor();
    public void set_BackSecondaryColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public ChartDashStyle get_BorderDashStyle();
    public void set_BorderDashStyle(ChartDashStyle value);
    public Color get_BorderlineColor();
    public void set_BorderlineColor(Color value);
    public int get_BorderlineWidth();
    public void set_BorderlineWidth(int value);
    public ChartDashStyle get_BorderlineDashStyle();
    public void set_BorderlineDashStyle(ChartDashStyle value);
    public BorderSkin get_BorderSkin();
    public void set_BorderSkin(BorderSkin value);
    public string get_BuildNumber();
    public void set_RenderingDpiY(double value);
    public double get_RenderingDpiY();
    public void set_RenderingDpiX(double value);
    public double get_RenderingDpiX();
    public void LoadTemplate(string name);
    public void LoadTemplate(Stream stream);
    public void ApplyPaletteColors();
    internal bool IsDesignMode();
    public void ResetAutoValues();
    public HitTestResult HitTest(int x, int y);
    public HitTestResult HitTest(int x, int y, bool ignoreTransparent);
    public HitTestResult HitTest(int x, int y, ChartElementType requestedElement);
    public HitTestResult[] HitTest(int x, int y, bool ignoreTransparent, ChartElementType[] requestedElement);
    public ChartElementOutline GetChartElementOutline(object element, ChartElementType elementType);
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
    public virtual void set_Cursor(Cursor value);
    public virtual Cursor get_Cursor();
    protected virtual void OnMouseDown(MouseEventArgs e);
    internal void OnChartMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    internal void OnChartMouseUp(MouseEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    internal void OnChartMouseMove(MouseEventArgs e);
    protected virtual void OnDoubleClick(EventArgs e);
    public void add_GetToolTipText(EventHandler`1<ToolTipEventArgs> value);
    public void remove_GetToolTipText(EventHandler`1<ToolTipEventArgs> value);
    internal bool IsToolTipEventUsed();
    internal void OnGetToolTipText(ToolTipEventArgs arguments);
    public void add_CursorPositionChanging(EventHandler`1<CursorEventArgs> value);
    public void remove_CursorPositionChanging(EventHandler`1<CursorEventArgs> value);
    public void add_CursorPositionChanged(EventHandler`1<CursorEventArgs> value);
    public void remove_CursorPositionChanged(EventHandler`1<CursorEventArgs> value);
    public void add_SelectionRangeChanging(EventHandler`1<CursorEventArgs> value);
    public void remove_SelectionRangeChanging(EventHandler`1<CursorEventArgs> value);
    public void add_SelectionRangeChanged(EventHandler`1<CursorEventArgs> value);
    public void remove_SelectionRangeChanged(EventHandler`1<CursorEventArgs> value);
    internal void OnCursorPositionChanging(CursorEventArgs arguments);
    internal void OnCursorPositionChanged(CursorEventArgs arguments);
    internal void OnSelectionRangeChanging(CursorEventArgs arguments);
    internal void OnSelectionRangeChanged(CursorEventArgs arguments);
    public void add_AxisViewChanging(EventHandler`1<ViewEventArgs> value);
    public void remove_AxisViewChanging(EventHandler`1<ViewEventArgs> value);
    public void add_AxisViewChanged(EventHandler`1<ViewEventArgs> value);
    public void remove_AxisViewChanged(EventHandler`1<ViewEventArgs> value);
    internal void OnAxisViewChanging(ViewEventArgs arguments);
    internal void OnAxisViewChanged(ViewEventArgs arguments);
    public void add_AxisScrollBarClicked(EventHandler`1<ScrollBarEventArgs> value);
    public void remove_AxisScrollBarClicked(EventHandler`1<ScrollBarEventArgs> value);
    internal void OnAxisScrollBarClicked(ScrollBarEventArgs arguments);
    public void add_PostPaint(EventHandler`1<ChartPaintEventArgs> value);
    public void remove_PostPaint(EventHandler`1<ChartPaintEventArgs> value);
    public void add_PrePaint(EventHandler`1<ChartPaintEventArgs> value);
    public void remove_PrePaint(EventHandler`1<ChartPaintEventArgs> value);
    protected virtual void OnPrePaint(ChartPaintEventArgs e);
    internal void CallOnPrePaint(ChartPaintEventArgs e);
    protected virtual void OnPostPaint(ChartPaintEventArgs e);
    internal void CallOnPostPaint(ChartPaintEventArgs e);
    public void add_Customize(EventHandler value);
    public void remove_Customize(EventHandler value);
    [SRDescriptionAttribute("DescriptionAttributeChart_OnCustomize")]
protected virtual void OnCustomize();
    internal void CallOnCustomize();
    public void add_CustomizeLegend(EventHandler`1<CustomizeLegendEventArgs> value);
    public void remove_CustomizeLegend(EventHandler`1<CustomizeLegendEventArgs> value);
    [SRDescriptionAttribute("DescriptionAttributeChart_OnCustomizeLegend")]
protected virtual void OnCustomizeLegend(LegendItemsCollection legendItems, string legendName);
    internal void CallOnCustomizeLegend(LegendItemsCollection legendItems, string legendName);
    public void add_AnnotationTextChanged(EventHandler value);
    public void remove_AnnotationTextChanged(EventHandler value);
    internal void OnAnnotationTextChanged(Annotation annotation);
    public void add_AnnotationSelectionChanged(EventHandler value);
    public void remove_AnnotationSelectionChanged(EventHandler value);
    public void add_AnnotationPositionChanged(EventHandler value);
    public void remove_AnnotationPositionChanged(EventHandler value);
    public void add_AnnotationPositionChanging(EventHandler`1<AnnotationPositionChangingEventArgs> value);
    public void remove_AnnotationPositionChanging(EventHandler`1<AnnotationPositionChangingEventArgs> value);
    public void add_AnnotationPlaced(EventHandler value);
    public void remove_AnnotationPlaced(EventHandler value);
    internal void OnAnnotationPlaced(Annotation annotation);
    internal void OnAnnotationSelectionChanged(Annotation annotation);
    internal void OnAnnotationPositionChanged(Annotation annotation);
    internal bool OnAnnotationPositionChanging(AnnotationPositionChangingEventArgs& args);
    public void DataBind();
    public void AlignDataPointsByAxisLabel();
    public void AlignDataPointsByAxisLabel(string series);
    public void AlignDataPointsByAxisLabel(string series, PointSortOrder sortingOrder);
    public void AlignDataPointsByAxisLabel(PointSortOrder sortingOrder);
    public void DataBindTable(IEnumerable dataSource, string xField);
    public void DataBindTable(IEnumerable dataSource);
    public void DataBindCrossTable(IEnumerable dataSource, string seriesGroupByField, string xField, string yFields, string otherFields);
    public void DataBindCrossTable(IEnumerable dataSource, string seriesGroupByField, string xField, string yFields, string otherFields, PointSortOrder sortingOrder);
    public object GetService(Type serviceType);
    public void add_FormatNumber(EventHandler`1<FormatNumberEventArgs> value);
    public void remove_FormatNumber(EventHandler`1<FormatNumberEventArgs> value);
    private void OnFormatNumber(object caller, FormatNumberEventArgs e);
    protected virtual void OnFormatNumber(FormatNumberEventArgs e);
    internal void CallOnFormatNumber(object caller, FormatNumberEventArgs e);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    private void ResetAccessibilityObject();
    protected virtual void Dispose(bool disposing);
}
[DefaultPropertyAttribute("Axes")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_ChartArea")]
public class System.Windows.Forms.DataVisualization.Charting.ChartArea : ChartNamedElement {
    internal ElementPosition PlotAreaPosition;
    private Axis[] _axisArray;
    private Color _backColor;
    private ChartHatchStyle _backHatchStyle;
    private string _backImage;
    private ChartImageWrapMode _backImageWrapMode;
    private Color _backImageTransparentColor;
    private ChartImageAlignmentStyle _backImageAlignment;
    private GradientStyle _backGradientStyle;
    private Color _backSecondaryColor;
    private Color _borderColor;
    private int _borderWidth;
    private ChartDashStyle _borderDashStyle;
    private int _shadowOffset;
    private Color _shadowColor;
    private ElementPosition _areaPosition;
    private ElementPosition _innerPlotPosition;
    internal int IterationCounter;
    private bool _isSameFontSizeForAllAxes;
    internal float axesAutoFontSize;
    private string _alignWithChartArea;
    private AreaAlignmentOrientations _alignmentOrientation;
    private AreaAlignmentStyles _alignmentStyle;
    private int _circularSectorNumber;
    private int _circularUsePolygons;
    internal bool alignmentInProcess;
    internal RectangleF originalAreaPosition;
    internal RectangleF originalInnerPlotPosition;
    internal RectangleF lastAreaPosition;
    internal PointF circularCenter;
    private ArrayList _circularAxisList;
    internal Bitmap areaBufferBitmap;
    private Cursor _cursorX;
    private Cursor _cursorY;
    internal SmartLabel smartLabels;
    private bool _visible;
    private ChartArea3DStyle _area3DStyle;
    internal Matrix3D matrix3D;
    internal SizeF areaSceneWallWidth;
    internal float areaSceneDepth;
    private SurfaceNames _visibleSurfaces;
    private double _pointsDepth;
    private double _pointsGapDepth;
    private bool _reverseSeriesOrder;
    internal bool oldReverseX;
    internal bool oldReverseY;
    internal int oldYAngle;
    private ArrayList _stackGroupNames;
    internal List`1<List`1<string>> seriesClusters;
    internal Axis axisY;
    internal Axis axisX;
    internal Axis axisX2;
    internal Axis axisY2;
    private List`1<string> _series;
    internal ArrayList chartTypes;
    private string _intervalSeriesList;
    internal double intervalData;
    internal double intervalLogData;
    private Series _intervalSeries;
    internal bool intervalSameSize;
    internal bool diffIntervalAlignmentChecked;
    internal bool stacked;
    internal bool secondYScale;
    internal bool switchValueAxes;
    internal bool requireAxes;
    internal bool chartAreaIsCurcular;
    internal bool hundredPercent;
    internal bool hundredPercentNegative;
    [DesignerSerializationVisibilityAttribute("2")]
[BindableAttribute("True")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_CursorX")]
[SRCategoryAttribute("CategoryAttributeCursor")]
public Cursor CursorX { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeChartArea_CursorY")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRCategoryAttribute("CategoryAttributeCursor")]
public Cursor CursorY { get; public set; }
    [DefaultValueAttribute("True")]
[ParenthesizePropertyNameAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_Visible")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAlignment")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.LegendAreaNameConverter")]
[BindableAttribute("True")]
[DefaultValueAttribute("NotSet")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_AlignWithChartArea")]
public string AlignWithChartArea { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeChartArea_AlignOrientation")]
[BindableAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.FlagsEnumUITypeEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CategoryAttributeAlignment")]
public AreaAlignmentOrientations AlignmentOrientation { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_AlignType")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.FlagsEnumUITypeEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAlignment")]
public AreaAlignmentStyles AlignmentStyle { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.AxesArrayConverter")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_Axes")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.AxesArrayEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CategoryAttributeAxes")]
[BindableAttribute("True")]
public Axis[] Axes { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_AxisY")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter")]
[SRCategoryAttribute("CategoryAttributeAxis")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
public Axis AxisY { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeChartArea_AxisX")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAxis")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter")]
[BindableAttribute("True")]
public Axis AxisX { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter")]
[SRCategoryAttribute("CategoryAttributeAxis")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_AxisX2")]
[DesignerSerializationVisibilityAttribute("2")]
public Axis AxisX2 { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter")]
[SRCategoryAttribute("CategoryAttributeAxis")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_AxisY2")]
[DesignerSerializationVisibilityAttribute("2")]
public Axis AxisY2 { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.ElementPositionConverter")]
[SerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_Position")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
public ElementPosition Position { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_InnerPlotPosition")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.ElementPositionConverter")]
public ElementPosition InnerPlotPosition { get; public set; }
    [BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeBackColor")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public Color BackColor { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.HatchStyleEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DescriptionAttributeBackHatchStyle")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ImageValueEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeBackImage")]
public string BackImage { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeImageWrapMode")]
public ChartImageWrapMode BackImageWrapMode { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeImageTransparentColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color BackImageTransparentColor { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackImageAlign")]
public ChartImageAlignmentStyle BackImageAlignment { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientStyle")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.GradientEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public GradientStyle BackGradientStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackSecondaryColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color BackSecondaryColor { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "128,0,0,0")]
[SRDescriptionAttribute("DescriptionAttributeShadowColor")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color ShadowColor { get; public set; }
    [DefaultValueAttribute("0")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeShadowOffset")]
[NotifyParentPropertyAttribute("True")]
[BindableAttribute("True")]
public int ShadowOffset { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBorderColor")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color BorderColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeBorderWidth")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
public int BorderWidth { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeBorderDashStyle")]
[NotifyParentPropertyAttribute("True")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public ChartDashStyle BorderDashStyle { get; public set; }
    [BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_Name")]
public string Name { get; public set; }
    [BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_EquallySizedAxesFont")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public bool IsSameFontSizeForAllAxes { get; public set; }
    internal bool CircularUsePolygons { get; }
    internal int CircularSectorsNumber { get; }
    [BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeArea3DStyle")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter")]
[SRCategoryAttribute("CategoryAttribute3D")]
[DesignerSerializationVisibilityAttribute("2")]
public ChartArea3DStyle Area3DStyle { get; public set; }
    internal bool ReverseSeriesOrder { get; }
    internal ArrayList StackGroupNames { get; }
    internal bool IsSubAxesSupported { get; }
    internal List`1<string> Series { get; }
    internal ArrayList ChartTypes { get; }
    public ChartArea(string name);
    public Cursor get_CursorX();
    public void set_CursorX(Cursor value);
    public Cursor get_CursorY();
    public void set_CursorY(Cursor value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public string get_AlignWithChartArea();
    public void set_AlignWithChartArea(string value);
    public AreaAlignmentOrientations get_AlignmentOrientation();
    public void set_AlignmentOrientation(AreaAlignmentOrientations value);
    public AreaAlignmentStyles get_AlignmentStyle();
    public void set_AlignmentStyle(AreaAlignmentStyles value);
    public Axis[] get_Axes();
    public void set_Axes(Axis[] value);
    [EditorBrowsableAttribute("1")]
internal bool ShouldSerializeAxes();
    public Axis get_AxisY();
    public void set_AxisY(Axis value);
    public Axis get_AxisX();
    public void set_AxisX(Axis value);
    public Axis get_AxisX2();
    public void set_AxisX2(Axis value);
    public Axis get_AxisY2();
    public void set_AxisY2(Axis value);
    public ElementPosition get_Position();
    public void set_Position(ElementPosition value);
    internal bool ShouldSerializePosition();
    public ElementPosition get_InnerPlotPosition();
    public void set_InnerPlotPosition(ElementPosition value);
    internal bool ShouldSerializeInnerPlotPosition();
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public ChartHatchStyle get_BackHatchStyle();
    public void set_BackHatchStyle(ChartHatchStyle value);
    public string get_BackImage();
    public void set_BackImage(string value);
    public ChartImageWrapMode get_BackImageWrapMode();
    public void set_BackImageWrapMode(ChartImageWrapMode value);
    public Color get_BackImageTransparentColor();
    public void set_BackImageTransparentColor(Color value);
    public ChartImageAlignmentStyle get_BackImageAlignment();
    public void set_BackImageAlignment(ChartImageAlignmentStyle value);
    public GradientStyle get_BackGradientStyle();
    public void set_BackGradientStyle(GradientStyle value);
    public Color get_BackSecondaryColor();
    public void set_BackSecondaryColor(Color value);
    public Color get_ShadowColor();
    public void set_ShadowColor(Color value);
    public int get_ShadowOffset();
    public void set_ShadowOffset(int value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public ChartDashStyle get_BorderDashStyle();
    public void set_BorderDashStyle(ChartDashStyle value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public bool get_IsSameFontSizeForAllAxes();
    public void set_IsSameFontSizeForAllAxes(bool value);
    internal void Restore3DAnglesAndReverseMode();
    internal void Set3DAnglesAndReverseMode();
    internal void SetTempValues();
    internal void GetTempValues();
    internal void Initialize();
    internal void ResetMinMaxFromData();
    public void RecalculateAxesScale();
    internal void ReCalcInternal();
    internal void ResetAutoValues();
    internal RectangleF GetBackgroundPosition(bool withScrollBars);
    internal void Resize(ChartGraphics chartGraph);
    private Axis FindAxis(AxisPosition axisPosition);
    private void PreventTopBottomAxesLabelsOverlapping(Axis axis);
    private void PaintAreaBack(ChartGraphics graph, RectangleF position, bool borderOnly);
    internal void Paint(ChartGraphics graph);
    private bool IsBorderOnTopSeries();
    internal void PaintCursors(ChartGraphics graph, bool cursorOnly);
    internal ICircularChartType GetCircularChartType();
    internal void FitCircularLabels(ChartGraphics chartGraph, ElementPosition chartAreaPosition, RectangleF& plotArea, float xTitleSize, float yTitleSize);
    internal float GetCircularLabelsSize(ChartGraphics chartGraph, RectangleF areaRectAbs, RectangleF plotAreaRectAbs, SizeF titleSize);
    internal bool get_CircularUsePolygons();
    internal CircularAxisLabelsStyle GetCircularAxisLabelsStyle();
    internal int get_CircularSectorsNumber();
    private int GetCircularSectorNumber();
    internal ArrayList GetCircularAxisList();
    internal float CircularPositionToAngle(double position);
    private ArrayList GetChartTypesAndSeriesToDraw();
    protected virtual void Dispose(bool disposing);
    public ChartArea3DStyle get_Area3DStyle();
    public void set_Area3DStyle(ChartArea3DStyle value);
    internal bool get_ReverseSeriesOrder();
    internal ArrayList get_StackGroupNames();
    public void TransformPoints(Point3D[] points);
    internal void DrawArea3DScene(ChartGraphics graph, RectangleF position);
    internal bool IsBottomSceneWallVisible();
    internal bool IsMainSceneWallOnFront();
    internal bool IsSideSceneWallOnLeft();
    public float GetSeriesZPosition(Series series);
    public float GetSeriesDepth(Series series);
    private float GetArea3DSceneDepth();
    internal void GetSeriesZPositionAndDepth(Series series, Single& depth, Single& positionZ);
    internal int GetNumberOfClusters();
    internal int GetSeriesClusterIndex(Series series);
    private float GetEstimatedSceneDepth();
    internal void Estimate3DInterval(ChartGraphics graph);
    internal int GetRealYAngle();
    internal bool ShouldDrawOnSurface(SurfaceNames surfaceName, bool backLayer, bool onEdge);
    internal bool DrawPointsInReverseOrder();
    internal bool DrawPointsToCenter(COPCoordinates& coord);
    internal bool DrawSeriesToCenter();
    internal void PaintChartSeries3D(ChartGraphics graph);
    internal List`1<string> GetClusterSeriesNames(string seriesName);
    private List`1<Series> GetSeriesDrawingOrder(bool reverseSeriesOrder);
    private int GetNumberOfStackGroups(IList`1<string> seriesNamesList);
    internal int GetSeriesStackGroupIndex(Series series, String& stackGroupName);
    internal ArrayList GetDataPointDrawingOrder(List`1<string> seriesNamesList, IChartType chartType, bool selection, COPCoordinates coord, IComparer comparer, int mainYValueIndex, bool sideBySide);
    internal Point3D GetCenterOfProjection(COPCoordinates coord);
    private void CheckSurfaceOrientation(COPCoordinates coord, Point3D point1, Point3D point2, Boolean& xSameOrientation, Boolean& ySameOrientation, Boolean& zSameOrientation);
    internal bool get_IsSubAxesSupported();
    internal List`1<string> get_Series();
    internal ArrayList get_ChartTypes();
    internal Axis GetAxis(AxisName axisName, AxisType axisType, string subAxisName);
    internal void SetDefaultAxesValues();
    private void SetDefaultFromIndexesOrData(Axis axis, AxisType axisType);
    private void EnableAxes();
    private void Activate(Axis axis, bool active);
    private bool AllEmptyPoints();
    private void SetDefaultFromData(Axis axis);
    internal bool SeriesIntegerType(AxisName axisName, string subAxisName);
    internal bool SeriesDateTimeType(AxisName axisName, string subAxisName);
    private void GetValuesFromData(Axis axis, Double& autoMinimum, Double& autoMaximum);
    private ArrayList SplitSeriesInStackedGroups(String[] seriesNames);
    private int GetNumberOfAllPoints();
    private void SetDefaultFromIndexes(Axis axis);
    internal void SetData();
    internal void SetData(bool initializeAxes, bool checkIndexedAligned);
    internal List`1<string> GetSeriesFromChartType(string chartType);
    internal List`1<Series> GetSeries();
    internal List`1<string> GetXAxesSeries(AxisType type, string subAxisName);
    internal List`1<string> GetYAxesSeries(AxisType type, string subAxisName);
    internal Series GetFirstSeries();
    internal double GetPointsInterval(bool isLogarithmic, double logarithmBase);
    internal double GetPointsInterval(List`1<string> seriesList, bool isLogarithmic, double logarithmBase, bool checkSameInterval, Boolean& sameInterval);
    internal double GetPointsInterval(List`1<string> seriesList, bool isLogarithmic, double logarithmicBase, bool checkSameInterval, Boolean& sameInterval, Series& series);
    private void GetDateInterval(double value1, double value2, Int32& monthsInteval, Int64& ticksInterval);
}
public class System.Windows.Forms.DataVisualization.Charting.ChartArea3DStyle : object {
    private ChartArea _chartArea;
    private bool _enable3D;
    private bool _isRightAngleAxes;
    private bool _isClustered;
    private LightStyle _lightStyle;
    private int _perspective;
    private int _inclination;
    private int _rotation;
    private int _wallWidth;
    private int _pointDepth;
    private int _pointGapDepth;
    [ParenthesizePropertyNameAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeChartArea3DStyle_Enable3D")]
[DefaultValueAttribute("False")]
[SRCategoryAttribute("CategoryAttribute3D")]
[BindableAttribute("True")]
public bool Enable3D { get; public set; }
    [RefreshPropertiesAttribute("1")]
[SRCategoryAttribute("CategoryAttribute3D")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeChartArea3DStyle_RightAngleAxes")]
[BindableAttribute("True")]
public bool IsRightAngleAxes { get; public set; }
    [BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeChartArea3DStyle_Clustered")]
[SRCategoryAttribute("CategoryAttribute3D")]
[DefaultValueAttribute("False")]
public bool IsClustered { get; public set; }
    [BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttribute3D")]
[SRDescriptionAttribute("DescriptionAttributeChartArea3DStyle_Light")]
[DefaultValueAttribute("System.Windows.Forms.DataVisualization.Charting.LightStyle", "Simplistic")]
public LightStyle LightStyle { get; public set; }
    [RefreshPropertiesAttribute("1")]
[SRCategoryAttribute("CategoryAttribute3D")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeChartArea3DStyle_Perspective")]
public int Perspective { get; public set; }
    [RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeChartArea3DStyle_Inclination")]
[SRCategoryAttribute("CategoryAttribute3D")]
[BindableAttribute("True")]
[DefaultValueAttribute("30")]
public int Inclination { get; public set; }
    [RefreshPropertiesAttribute("1")]
[SRCategoryAttribute("CategoryAttribute3D")]
[BindableAttribute("True")]
[DefaultValueAttribute("30")]
[SRDescriptionAttribute("DescriptionAttributeChartArea3DStyle_Rotation")]
public int Rotation { get; public set; }
    [BindableAttribute("True")]
[RefreshPropertiesAttribute("1")]
[SRCategoryAttribute("CategoryAttribute3D")]
[DefaultValueAttribute("7")]
[SRDescriptionAttribute("DescriptionAttributeChartArea3DStyle_WallWidth")]
public int WallWidth { get; public set; }
    [BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeChartArea3DStyle_PointDepth")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("100")]
[SRCategoryAttribute("CategoryAttribute3D")]
public int PointDepth { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("100")]
[SRDescriptionAttribute("DescriptionAttributeChartArea3DStyle_PointGapDepth")]
[RefreshPropertiesAttribute("1")]
[SRCategoryAttribute("CategoryAttribute3D")]
public int PointGapDepth { get; public set; }
    public ChartArea3DStyle(ChartArea chartArea);
    internal void Initialize(ChartArea chartArea);
    public bool get_Enable3D();
    public void set_Enable3D(bool value);
    public bool get_IsRightAngleAxes();
    public void set_IsRightAngleAxes(bool value);
    public bool get_IsClustered();
    public void set_IsClustered(bool value);
    public LightStyle get_LightStyle();
    public void set_LightStyle(LightStyle value);
    public int get_Perspective();
    public void set_Perspective(int value);
    public int get_Inclination();
    public void set_Inclination(int value);
    public int get_Rotation();
    public void set_Rotation(int value);
    public int get_WallWidth();
    public void set_WallWidth(int value);
    public int get_PointDepth();
    public void set_PointDepth(int value);
    public int get_PointGapDepth();
    public void set_PointGapDepth(int value);
}
public class System.Windows.Forms.DataVisualization.Charting.ChartAreaCollection : ChartNamedElementCollection`1<ChartArea> {
    internal string DefaultNameReference { get; }
    internal ChartAreaCollection(ChartPicture chartPicture);
    internal string get_DefaultNameReference();
    public ChartArea Add(string name);
    internal void ChartAreaNameReferenceChanged(object sender, NameReferenceChangedEventArgs e);
}
public enum System.Windows.Forms.DataVisualization.Charting.ChartColorPalette : Enum {
    public int value__;
    public static ChartColorPalette None;
    public static ChartColorPalette Bright;
    public static ChartColorPalette Grayscale;
    public static ChartColorPalette Excel;
    public static ChartColorPalette Light;
    public static ChartColorPalette Pastel;
    public static ChartColorPalette EarthTones;
    public static ChartColorPalette SemiTransparent;
    public static ChartColorPalette Berry;
    public static ChartColorPalette Chocolate;
    public static ChartColorPalette Fire;
    public static ChartColorPalette SeaGreen;
    public static ChartColorPalette BrightPastel;
}
public enum System.Windows.Forms.DataVisualization.Charting.ChartDashStyle : Enum {
    public int value__;
    public static ChartDashStyle NotSet;
    public static ChartDashStyle Dash;
    public static ChartDashStyle DashDot;
    public static ChartDashStyle DashDotDot;
    public static ChartDashStyle Dot;
    public static ChartDashStyle Solid;
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartDataSourceConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
public abstract class System.Windows.Forms.DataVisualization.Charting.ChartElement : object {
    private IChartElement _parent;
    private CommonElements _common;
    private object _tag;
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public object Tag { get; public set; }
    internal IChartElement Parent { get; internal set; }
    internal CommonElements Common { get; internal set; }
    internal Chart Chart { get; }
    private IChartElement System.Windows.Forms.DataVisualization.Charting.IChartElement.Parent { get; private set; }
    private CommonElements System.Windows.Forms.DataVisualization.Charting.IChartElement.Common { get; }
    internal ChartElement(IChartElement parent);
    public object get_Tag();
    public void set_Tag(object value);
    internal virtual IChartElement get_Parent();
    internal virtual void set_Parent(IChartElement value);
    internal CommonElements get_Common();
    internal void set_Common(CommonElements value);
    internal Chart get_Chart();
    internal virtual void Invalidate();
    private sealed virtual override IChartElement System.Windows.Forms.DataVisualization.Charting.IChartElement.get_Parent();
    private sealed virtual override void System.Windows.Forms.DataVisualization.Charting.IChartElement.set_Parent(IChartElement value);
    private sealed virtual override void System.Windows.Forms.DataVisualization.Charting.IChartElement.Invalidate();
    private sealed virtual override CommonElements System.Windows.Forms.DataVisualization.Charting.IChartElement.get_Common();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    internal virtual string ToStringInternal();
    public virtual string ToString();
    internal virtual bool EqualsInternal(object obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class System.Windows.Forms.DataVisualization.Charting.ChartElementCollection`1 : Collection`1<T> {
    private IChartElement _parent;
    private CommonElements _common;
    internal int _suspendUpdates;
    internal IChartElement Parent { get; internal set; }
    internal CommonElements Common { get; }
    internal Chart Chart { get; }
    internal List`1<T> ItemList { get; }
    internal bool IsSuspended { get; }
    private IChartElement System.Windows.Forms.DataVisualization.Charting.IChartElement.Parent { get; private set; }
    private CommonElements System.Windows.Forms.DataVisualization.Charting.IChartElement.Common { get; }
    internal ChartElementCollection`1(IChartElement parent);
    internal IChartElement get_Parent();
    internal void set_Parent(IChartElement value);
    internal CommonElements get_Common();
    internal Chart get_Chart();
    internal List`1<T> get_ItemList();
    internal bool get_IsSuspended();
    public virtual void Invalidate();
    public virtual void SuspendUpdates();
    public virtual void ResumeUpdates();
    protected virtual void ClearItems();
    internal virtual void Deinitialize(T item);
    internal virtual void Initialize(T item);
    protected virtual void RemoveItem(int index);
    protected virtual void InsertItem(int index, T item);
    protected virtual void SetItem(int index, T item);
    private sealed virtual override IChartElement System.Windows.Forms.DataVisualization.Charting.IChartElement.get_Parent();
    private sealed virtual override void System.Windows.Forms.DataVisualization.Charting.IChartElement.set_Parent(IChartElement value);
    private sealed virtual override void System.Windows.Forms.DataVisualization.Charting.IChartElement.Invalidate();
    private sealed virtual override CommonElements System.Windows.Forms.DataVisualization.Charting.IChartElement.get_Common();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class System.Windows.Forms.DataVisualization.Charting.ChartElementOutline : object {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<PointF> <Markers>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphicsPath <OutlinePath>k__BackingField;
    public ReadOnlyCollection`1<PointF> Markers { get; internal set; }
    public GraphicsPath OutlinePath { get; internal set; }
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<PointF> get_Markers();
    [CompilerGeneratedAttribute]
internal void set_Markers(ReadOnlyCollection`1<PointF> value);
    [CompilerGeneratedAttribute]
public GraphicsPath get_OutlinePath();
    [CompilerGeneratedAttribute]
internal void set_OutlinePath(GraphicsPath value);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public enum System.Windows.Forms.DataVisualization.Charting.ChartElementType : Enum {
    public int value__;
    public static ChartElementType Nothing;
    public static ChartElementType Title;
    public static ChartElementType PlottingArea;
    public static ChartElementType Axis;
    public static ChartElementType TickMarks;
    public static ChartElementType Gridlines;
    public static ChartElementType StripLines;
    public static ChartElementType AxisLabelImage;
    public static ChartElementType AxisLabels;
    public static ChartElementType AxisTitle;
    public static ChartElementType ScrollBarThumbTracker;
    public static ChartElementType ScrollBarSmallDecrement;
    public static ChartElementType ScrollBarSmallIncrement;
    public static ChartElementType ScrollBarLargeDecrement;
    public static ChartElementType ScrollBarLargeIncrement;
    public static ChartElementType ScrollBarZoomReset;
    public static ChartElementType DataPoint;
    public static ChartElementType DataPointLabel;
    public static ChartElementType LegendArea;
    public static ChartElementType LegendTitle;
    public static ChartElementType LegendHeader;
    public static ChartElementType LegendItem;
    public static ChartElementType Annotation;
}
public class System.Windows.Forms.DataVisualization.Charting.ChartGraphics : ChartElement {
    private CommonElements _common;
    private Pen _pen;
    private SolidBrush _solidBrush;
    private Matrix _myMatrix;
    private int _width;
    private int _height;
    internal bool softShadows;
    private AntiAliasingStyles _antiAliasing;
    internal bool IsMetafile;
    private int _oppLeftBottomPoint;
    private int _oppRigthTopPoint;
    internal PointF frontLinePoint1;
    internal PointF frontLinePoint2;
    internal Pen frontLinePen;
    private RenderingType _activeRenderingType;
    private GdiGraphics _gdiGraphics;
    internal AntiAliasingStyles AntiAliasing { get; internal set; }
    internal Pen Pen { get; }
    internal IChartRenderingEngine RenderingObject { get; }
    internal RenderingType ActiveRenderingType { get; }
    internal TextRenderingHint TextRenderingHint { get; internal set; }
    internal Matrix Transform { get; internal set; }
    internal SmoothingMode SmoothingMode { get; internal set; }
    internal Region Clip { get; internal set; }
    internal bool IsClipEmpty { get; }
    public Graphics Graphics { get; public set; }
    internal ChartGraphics(CommonElements common);
    internal void DrawLineRel(Color color, int width, ChartDashStyle style, PointF firstPointF, PointF secondPointF);
    internal void DrawLineAbs(Color color, int width, ChartDashStyle style, PointF firstPoint, PointF secondPoint);
    internal void DrawLineRel(Color color, int width, ChartDashStyle style, PointF firstPoint, PointF secondPoint, Color shadowColor, int shadowOffset);
    internal void DrawLineAbs(Color color, int width, ChartDashStyle style, PointF firstPoint, PointF secondPoint, Color shadowColor, int shadowOffset);
    internal Brush GetHatchBrush(ChartHatchStyle hatchStyle, Color backColor, Color foreColor);
    internal Brush GetTextureBrush(string name, Color backImageTransparentColor, ChartImageWrapMode mode, Color backColor);
    internal Brush GetGradientBrush(RectangleF rectangle, Color firstColor, Color secondColor, GradientStyle type);
    internal Brush GetPieGradientBrush(RectangleF rectangle, Color firstColor, Color secondColor);
    internal DashStyle GetPenStyle(ChartDashStyle style);
    internal PointF[] CreateStarPolygon(RectangleF rect, int numberOfCorners);
    internal void DrawMarkerRel(PointF point, MarkerStyle markerStyle, int markerSize, Color markerColor, Color markerBorderColor, int markerBorderSize, string markerImage, Color markerImageTransparentColor, int shadowSize, Color shadowColor, RectangleF imageScaleRect);
    internal void DrawMarkerAbs(PointF point, MarkerStyle markerStyle, int markerSize, Color markerColor, Color markerBorderColor, int markerBorderSize, string markerImage, Color markerImageTransparentColor, int shadowSize, Color shadowColor, RectangleF imageScaleRect, bool forceAntiAlias);
    internal SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat, TextOrientation textOrientation);
    internal SizeF MeasureStringRel(string text, Font font, SizeF layoutArea, StringFormat stringFormat, TextOrientation textOrientation);
    internal void DrawString(string text, Font font, Brush brush, RectangleF rect, StringFormat format, TextOrientation textOrientation);
    internal void DrawStringRel(string text, Font font, Brush brush, PointF position, StringFormat format, int angle, TextOrientation textOrientation);
    internal void DrawStringRel(string text, Font font, Brush brush, RectangleF position, StringFormat format, TextOrientation textOrientation);
    internal static string GetStackedText(string text);
    internal void DrawPointLabelStringRel(CommonElements common, string text, Font font, Brush brush, RectangleF position, StringFormat format, int angle, RectangleF backPosition, Color backColor, Color borderColor, int borderWidth, ChartDashStyle borderDashStyle, Series series, DataPoint point, int pointIndex);
    internal void DrawPointLabelStringRel(CommonElements common, string text, Font font, Brush brush, PointF position, StringFormat format, int angle, RectangleF backPosition, Color backColor, Color borderColor, int borderWidth, ChartDashStyle borderDashStyle, Series series, DataPoint point, int pointIndex);
    private void DrawPointLabelBackground(CommonElements common, int angle, PointF textPosition, RectangleF backPosition, Color backColor, Color borderColor, int borderWidth, ChartDashStyle borderDashStyle, Series series, DataPoint point, int pointIndex);
    internal void DrawStringRel(string text, Font font, Brush brush, PointF position, StringFormat format, int angle);
    internal void DrawStringAbs(string text, Font font, Brush brush, PointF absPosition, StringFormat format, int angle);
    internal GraphicsPath GetTranformedTextRectPath(PointF center, SizeF size, int angle);
    internal void DrawLabelStringRel(Axis axis, int labelRowIndex, LabelMarkStyle labelMark, Color markColor, string text, string image, Color imageTransparentColor, Font font, Brush brush, RectangleF position, StringFormat format, int angle, RectangleF boundaryRect, CustomLabel label, bool truncatedLeft, bool truncatedRight);
    private void DrawSecondRowLabelBoxMark(Axis axis, Color markColor, RectangleF absPosition, bool truncatedLeft, bool truncatedRight, Matrix originalTransform);
    private void DrawSecondRowLabelMark(Axis axis, Color markColor, RectangleF absPosition, SizeF labelSize, LabelMarkStyle labelMark, bool truncatedLeft, bool truncatedRight, Matrix oldTransform);
    internal SizeF MeasureStringRel(string text, Font font);
    internal SizeF MeasureStringRel(string text, Font font, SizeF layoutArea, StringFormat stringFormat);
    internal Size MeasureStringAbs(string text, Font font);
    internal Size MeasureStringAbs(string text, Font font, SizeF layoutArea, StringFormat stringFormat);
    internal void DrawStringRel(string text, Font font, Brush brush, RectangleF layoutRectangle, StringFormat format);
    internal void DrawStringRel(string text, Font font, Brush brush, RectangleF layoutRectangle, StringFormat format, int angle);
    internal void DrawRectangleBarStyle(BarDrawingStyle barDrawingStyle, bool isVertical, RectangleF rect);
    internal void FillRectangleRel(RectangleF rectF, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageWrapMode, Color backImageTransparentColor, ChartImageAlignmentStyle backImageAlign, GradientStyle backGradientStyle, Color backSecondaryColor, Color borderColor, int borderWidth, ChartDashStyle borderDashStyle, Color shadowColor, int shadowOffset, PenAlignment penAlignment, BarDrawingStyle barDrawingStyle, bool isVertical);
    internal void FillRectangleRel(RectangleF rectF, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageWrapMode, Color backImageTransparentColor, ChartImageAlignmentStyle backImageAlign, GradientStyle backGradientStyle, Color backSecondaryColor, Color borderColor, int borderWidth, ChartDashStyle borderDashStyle, Color shadowColor, int shadowOffset, PenAlignment penAlignment);
    internal void FillRectangleRel(RectangleF rectF, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageWrapMode, Color backImageTransparentColor, ChartImageAlignmentStyle backImageAlign, GradientStyle backGradientStyle, Color backSecondaryColor, Color borderColor, int borderWidth, ChartDashStyle borderDashStyle, Color shadowColor, int shadowOffset, PenAlignment penAlignment, bool circular, int circularSectorsCount, bool circle3D);
    internal void FillRectangleRel(RectangleF rectF, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageWrapMode, Color backImageTransparentColor, ChartImageAlignmentStyle backImageAlign, GradientStyle backGradientStyle, Color backSecondaryColor, Color borderColor, int borderWidth, ChartDashStyle borderDashStyle, Color shadowColor, int shadowOffset, PenAlignment penAlignment, bool circular, int circularSectorsCount, bool circle3D, BarDrawingStyle barDrawingStyle, bool isVertical);
    internal void FillRectangleShadowAbs(RectangleF rect, Color shadowColor, float shadowOffset, Color backColor);
    internal void FillRectangleShadowAbs(RectangleF rect, Color shadowColor, float shadowOffset, Color backColor, bool circular, int circularSectorsCount);
    internal GraphicsPath GetPolygonCirclePath(RectangleF position, int polygonSectorsNumber);
    internal void DrawCircleAbs(Pen pen, Brush brush, RectangleF position, int polygonSectorsNumber, bool circle3D);
    internal Brush GetSector3DBrush(Brush brush, float curentSector, float sectorSize);
    internal Color GetBrightGradientColor(Color beginColor, double position);
    internal void FillRectangleAbs(RectangleF rect, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageWrapMode, Color backImageTransparentColor, ChartImageAlignmentStyle backImageAlign, GradientStyle backGradientStyle, Color backSecondaryColor, Color borderColor, int borderWidth, ChartDashStyle borderDashStyle, PenAlignment penAlignment);
    internal void DrawPathAbs(GraphicsPath path, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageWrapMode, Color backImageTransparentColor, ChartImageAlignmentStyle backImageAlign, GradientStyle backGradientStyle, Color backSecondaryColor, Color borderColor, int borderWidth, ChartDashStyle borderDashStyle, PenAlignment penAlignment, int shadowOffset, Color shadowColor);
    internal void DrawPathAbs(GraphicsPath path, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageWrapMode, Color backImageTransparentColor, ChartImageAlignmentStyle backImageAlign, GradientStyle backGradientStyle, Color backSecondaryColor, Color borderColor, int borderWidth, ChartDashStyle borderDashStyle, PenAlignment penAlignment);
    internal Brush CreateBrush(RectangleF rect, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageWrapMode, Color backImageTransparentColor, GradientStyle backGradientStyle, Color backSecondaryColor);
    public RectangleF GetRelativeRectangle(RectangleF rectangle);
    public PointF GetRelativePoint(PointF point);
    public SizeF GetRelativeSize(SizeF size);
    public PointF GetAbsolutePoint(PointF point);
    public RectangleF GetAbsoluteRectangle(RectangleF rectangle);
    public SizeF GetAbsoluteSize(SizeF size);
    internal GraphicsPath CreateRoundedRectPath(RectangleF rect, Single[] cornerRadius);
    internal void DrawRoundedRectShadowAbs(RectangleF rect, Single[] cornerRadius, float radius, Color centerColor, Color surroundColor, float shadowScale);
    internal void Draw3DBorderRel(BorderSkin borderSkin, RectangleF rect, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageWrapMode, Color backImageTransparentColor, ChartImageAlignmentStyle backImageAlign, GradientStyle backGradientStyle, Color backSecondaryColor, Color borderColor, int borderWidth, ChartDashStyle borderDashStyle);
    internal void Draw3DBorderAbs(BorderSkin borderSkin, RectangleF absRect, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageWrapMode, Color backImageTransparentColor, ChartImageAlignmentStyle backImageAlign, GradientStyle backGradientStyle, Color backSecondaryColor, Color borderColor, int borderWidth, ChartDashStyle borderDashStyle);
    internal static PieDrawingStyle GetPieDrawingStyle(DataPoint point);
    internal void DrawPieRel(RectangleF rect, float startAngle, float sweepAngle, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageWrapMode, Color backImageTransparentColor, GradientStyle backGradientStyle, Color backSecondaryColor, Color borderColor, int borderWidth, ChartDashStyle borderDashStyle, bool shadow, bool doughnut, float doughnutRadius, PieDrawingStyle pieDrawingStyle);
    private void DrawPieGradientEffects(PieDrawingStyle pieDrawingStyle, RectangleF position, float startAngle, float sweepAngle, float doughnutRadius);
    private void DrawPieSoftShadow(float startAngle, float sweepAngle, RectangleF absRect, Color backColor);
    internal void DrawArrowRel(PointF position, ArrowOrientation orientation, AxisArrowStyle type, Color color, int lineWidth, ChartDashStyle lineDashStyle, double shift, double size);
    private PointF[] GetArrowShape(PointF position, ArrowOrientation orientation, double shift, double size, AxisArrowStyle type, PointF& endPoint);
    internal static BarDrawingStyle GetBarDrawingStyle(DataPoint point);
    internal RectangleF Round(RectangleF rect);
    public double GetPositionFromAxis(string chartAreaName, AxisName axis, double axisValue);
    internal void SetPictureSize(int width, int height);
    internal AntiAliasingStyles get_AntiAliasing();
    internal void set_AntiAliasing(AntiAliasingStyles value);
    internal Pen get_Pen();
    internal void SetClip(RectangleF region);
    internal static Color GetGradientColor(Color beginColor, Color endColor, double relativePosition);
    protected virtual void Dispose(bool disposing);
    internal void Draw3DGridLine(ChartArea area, Color color, int width, ChartDashStyle style, PointF point1, PointF point2, bool horizontal, CommonElements common, object obj);
    internal void Draw3DLine(Matrix3D matrix, Color color, int width, ChartDashStyle style, Point3D firstPoint, Point3D secondPoint, CommonElements common, object obj, ChartElementType type);
    internal void FillPieSides(ChartArea area, float inclination, float startAngle, float sweepAngle, PointF[] points, SolidBrush brush, Pen pen, bool doughnut);
    internal void FillPieCurve(ChartArea area, DataPoint point, Brush brush, Pen pen, PointF topFirstRectPoint, PointF topSecondRectPoint, PointF bottomFirstRectPoint, PointF bottomSecondRectPoint, PointF topFirstPoint, PointF topSecondPoint, PointF bottomFirstPoint, PointF bottomSecondPoint, float startAngle, float sweepAngle, int pointIndex);
    internal void FillPieSlice(ChartArea area, DataPoint point, SolidBrush brush, Pen pen, PointF firstRectPoint, PointF firstPoint, PointF secondRectPoint, PointF secondPoint, PointF center, float startAngle, float sweepAngle, bool fill, int pointIndex);
    internal void FillDoughnutSlice(ChartArea area, DataPoint point, SolidBrush brush, Pen pen, PointF firstRectPoint, PointF firstPoint, PointF secondRectPoint, PointF secondPoint, PointF threePoint, PointF fourPoint, float startAngle, float sweepAngle, bool fill, float doughnutRadius, int pointIndex);
    private void DrawGraphicsPath(Pen pen, GraphicsPath path);
    private float AngleCorrection(float angle, double correction);
    internal GraphicsPath Draw3DPolygon(ChartArea area, Matrix3D matrix, SurfaceNames surfaceName, float positionZ, Color backColor, Color borderColor, int borderWidth, DataPoint3D firstPoint, DataPoint3D secondPoint, DataPoint3D thirdPoint, DataPoint3D fourthPoint, DrawingOperationTypes operationType, LineSegmentType lineSegmentType, SurfaceNames thinBorders);
    internal GraphicsPath GetSplineFlattenPath(ChartArea area, float positionZ, DataPoint3D firstPoint, DataPoint3D secondPoint, ArrayList points, float tension, bool flatten, bool translateCoordinates, int yValueIndex);
    internal GraphicsPath Draw3DSplineSurface(ChartArea area, Matrix3D matrix, LightStyle lightStyle, SurfaceNames surfaceName, float positionZ, float depth, Color backColor, Color borderColor, int borderWidth, ChartDashStyle borderDashStyle, DataPoint3D firstPoint, DataPoint3D secondPoint, ArrayList points, int pointIndex, float tension, DrawingOperationTypes operationType, bool forceThinBorder, bool forceThickBorder, bool reversedSeriesOrder, bool multiSeries, int yValueIndex, bool clipInsideArea);
    internal GraphicsPath Draw3DSurface(ChartArea area, Matrix3D matrix, LightStyle lightStyle, SurfaceNames surfaceName, float positionZ, float depth, Color backColor, Color borderColor, int borderWidth, ChartDashStyle borderDashStyle, DataPoint3D firstPoint, DataPoint3D secondPoint, ArrayList points, int pointIndex, float tension, DrawingOperationTypes operationType, LineSegmentType lineSegmentType, bool forceThinBorder, bool forceThickBorder, bool reversedSeriesOrder, bool multiSeries, int yValueIndex, bool clipInsideArea);
    internal static int ShouldDrawLineChartSurface(ChartArea area, bool reversedSeriesOrder, SurfaceNames surfaceName, SurfaceNames boundaryRectVisibleSurfaces, Color color, ArrayList points, DataPoint3D firstPoint, DataPoint3D secondPoint, bool multiSeries, LineSegmentType& lineSegmentType);
    internal static DataPoint3D FindPointByIndex(ArrayList points, int index, DataPoint3D neighborDataPoint, Int32& neighborPointIndex);
    internal GraphicsPath Fill3DRectangle(RectangleF position, float positionZ, float depth, Matrix3D matrix, LightStyle lightStyle, Color backColor, Color borderColor, int borderWidth, ChartDashStyle borderDashStyle, DrawingOperationTypes operationType);
    internal GraphicsPath Fill3DRectangle(RectangleF position, float positionZ, float depth, Matrix3D matrix, LightStyle lightStyle, Color backColor, float topRightDarkening, float bottomLeftDarkening, Color borderColor, int borderWidth, ChartDashStyle borderDashStyle, BarDrawingStyle barDrawingStyle, bool veticalOrientation, DrawingOperationTypes operationType);
    private void DrawBarStyleGradients(Matrix3D matrix, BarDrawingStyle barDrawingStyle, RectangleF position, float positionZ, float depth, bool isVertical);
    internal GraphicsPath DrawMarker3D(Matrix3D matrix, LightStyle lightStyle, float positionZ, PointF point, MarkerStyle markerStyle, int markerSize, Color markerColor, Color markerBorderColor, int markerBorderSize, string markerImage, Color markerImageTransparentColor, int shadowSize, Color shadowColor, RectangleF imageScaleRect, DrawingOperationTypes operationType);
    internal SurfaceNames GetVisibleSurfaces(RectangleF position, float positionZ, float depth, Matrix3D matrix);
    internal SurfaceNames GetVisibleSurfacesWithPerspective(RectangleF position, float positionZ, float depth, Matrix3D matrix);
    internal SurfaceNames GetVisibleSurfacesWithPerspective(Point3D[] cubePoints);
    internal static bool IsSurfaceVisible(Point3D first, Point3D second, Point3D tree);
    internal static PointF GetLinesIntersection(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);
    internal GraphicsPath Fill3DRectangleAsCylinder(RectangleF position, float positionZ, float depth, Matrix3D matrix, LightStyle lightStyle, Color backColor, float topRightDarkening, float bottomLeftDarkening, Color borderColor, int borderWidth, ChartDashStyle borderDashStyle, bool veticalOrientation, DrawingOperationTypes operationType);
    internal void AddEllipseSegment(GraphicsPath resultPath, GraphicsPath ellipseFlattenPath, GraphicsPath oppositeEllipseFlattenPath, bool veticalOrientation, float cylinderAngle, PointF& leftSideLinePoint, PointF& rightSideLinePoint);
    internal void DrawLine(Pen pen, PointF pt1, PointF pt2);
    internal void DrawLine(Pen pen, float x1, float y1, float x2, float y2);
    internal void DrawImage(Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttr);
    internal void DrawEllipse(Pen pen, float x, float y, float width, float height);
    internal void DrawCurve(Pen pen, PointF[] points, int offset, int numberOfSegments, float tension);
    internal void DrawRectangle(Pen pen, int x, int y, int width, int height);
    internal void DrawPolygon(Pen pen, PointF[] points);
    internal void DrawString(string s, Font font, Brush brush, RectangleF layoutRectangle, StringFormat format);
    internal void DrawString(string s, Font font, Brush brush, PointF point, StringFormat format);
    internal void DrawImage(Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs);
    internal void DrawRectangle(Pen pen, float x, float y, float width, float height);
    internal void DrawPath(Pen pen, GraphicsPath path);
    internal void DrawPie(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    internal void DrawEllipse(Pen pen, RectangleF rect);
    internal void DrawLines(Pen pen, PointF[] points);
    internal void FillEllipse(Brush brush, RectangleF rect);
    internal void FillPath(Brush brush, GraphicsPath path);
    internal void FillRegion(Brush brush, Region region);
    internal void FillRectangle(Brush brush, RectangleF rect);
    internal void FillRectangle(Brush brush, float x, float y, float width, float height);
    internal void FillPolygon(Brush brush, PointF[] points);
    internal void FillPie(Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);
    internal void StartHotRegion(string url, string title);
    internal void StartHotRegion(DataPoint point);
    internal void StartHotRegion(DataPoint point, bool labelRegion);
    internal void EndHotRegion();
    internal SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat);
    internal SizeF MeasureString(string text, Font font);
    internal GraphicsState Save();
    internal void Restore(GraphicsState gstate);
    internal void ResetClip();
    internal void SetClipAbs(RectangleF rect);
    internal void TranslateTransform(float dx, float dy);
    internal IChartRenderingEngine get_RenderingObject();
    internal RenderingType get_ActiveRenderingType();
    internal TextRenderingHint get_TextRenderingHint();
    internal void set_TextRenderingHint(TextRenderingHint value);
    internal Matrix get_Transform();
    internal void set_Transform(Matrix value);
    internal SmoothingMode get_SmoothingMode();
    internal void set_SmoothingMode(SmoothingMode value);
    internal Region get_Clip();
    internal void set_Clip(Region value);
    internal bool get_IsClipEmpty();
    public Graphics get_Graphics();
    public void set_Graphics(Graphics value);
}
public enum System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle : Enum {
    public int value__;
    public static ChartHatchStyle None;
    public static ChartHatchStyle BackwardDiagonal;
    public static ChartHatchStyle Cross;
    public static ChartHatchStyle DarkDownwardDiagonal;
    public static ChartHatchStyle DarkHorizontal;
    public static ChartHatchStyle DarkUpwardDiagonal;
    public static ChartHatchStyle DarkVertical;
    public static ChartHatchStyle DashedDownwardDiagonal;
    public static ChartHatchStyle DashedHorizontal;
    public static ChartHatchStyle DashedUpwardDiagonal;
    public static ChartHatchStyle DashedVertical;
    public static ChartHatchStyle DiagonalBrick;
    public static ChartHatchStyle DiagonalCross;
    public static ChartHatchStyle Divot;
    public static ChartHatchStyle DottedDiamond;
    public static ChartHatchStyle DottedGrid;
    public static ChartHatchStyle ForwardDiagonal;
    public static ChartHatchStyle Horizontal;
    public static ChartHatchStyle HorizontalBrick;
    public static ChartHatchStyle LargeCheckerBoard;
    public static ChartHatchStyle LargeConfetti;
    public static ChartHatchStyle LargeGrid;
    public static ChartHatchStyle LightDownwardDiagonal;
    public static ChartHatchStyle LightHorizontal;
    public static ChartHatchStyle LightUpwardDiagonal;
    public static ChartHatchStyle LightVertical;
    public static ChartHatchStyle NarrowHorizontal;
    public static ChartHatchStyle NarrowVertical;
    public static ChartHatchStyle OutlinedDiamond;
    public static ChartHatchStyle Percent05;
    public static ChartHatchStyle Percent10;
    public static ChartHatchStyle Percent20;
    public static ChartHatchStyle Percent25;
    public static ChartHatchStyle Percent30;
    public static ChartHatchStyle Percent40;
    public static ChartHatchStyle Percent50;
    public static ChartHatchStyle Percent60;
    public static ChartHatchStyle Percent70;
    public static ChartHatchStyle Percent75;
    public static ChartHatchStyle Percent80;
    public static ChartHatchStyle Percent90;
    public static ChartHatchStyle Plaid;
    public static ChartHatchStyle Shingle;
    public static ChartHatchStyle SmallCheckerBoard;
    public static ChartHatchStyle SmallConfetti;
    public static ChartHatchStyle SmallGrid;
    public static ChartHatchStyle SolidDiamond;
    public static ChartHatchStyle Sphere;
    public static ChartHatchStyle Trellis;
    public static ChartHatchStyle Vertical;
    public static ChartHatchStyle Wave;
    public static ChartHatchStyle Weave;
    public static ChartHatchStyle WideDownwardDiagonal;
    public static ChartHatchStyle WideUpwardDiagonal;
    public static ChartHatchStyle ZigZag;
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartHelper : object {
    internal static int MaxNumOfGridlines;
    internal static double AlignIntervalStart(double start, double intervalSize, DateTimeIntervalType type);
    internal static double AlignIntervalStart(double start, double intervalSize, DateTimeIntervalType type, Series series);
    internal static double AlignIntervalStart(double start, double intervalSize, DateTimeIntervalType type, Series series, bool majorInterval);
    internal static double GetIntervalSize(double current, double interval, DateTimeIntervalType type);
    internal static double GetIntervalSize(double current, double interval, DateTimeIntervalType type, Series series, double intervalOffset, DateTimeIntervalType intervalOffsetType, bool forceIntIndex);
    internal static double GetIntervalSize(double current, double interval, DateTimeIntervalType type, Series series, double intervalOffset, DateTimeIntervalType intervalOffsetType, bool forceIntIndex, bool forceAbsInterval);
    internal static bool IndexedSeries(Series series);
    internal static bool SeriesXValuesZeros(Series series);
    internal static bool IndexedSeries(CommonElements common, String[] series);
    internal static bool SeriesXValuesZeros(CommonElements common, String[] series);
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartImage : ChartPicture {
    private int _compression;
    private object _dataSource;
    internal bool boundToDataSource;
    [SRDescriptionAttribute("DescriptionAttributeDataSource")]
[SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[SerializationVisibilityAttribute("0")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public object DataSource { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeChartImage_Compression")]
[SRCategoryAttribute("CategoryAttributeImage")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
public int Compression { get; public set; }
    internal ChartImage(IServiceContainer container);
    public object get_DataSource();
    public void set_DataSource(object value);
    public int get_Compression();
    public void set_Compression(int value);
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
public void SaveIntoMetafile(Stream imageStream, EmfType emfType);
    public Bitmap GetImage();
    public Bitmap GetImage(float resolution);
    internal static bool IsValidDataSource(object dataSource);
    internal static ArrayList GetDataSourceMemberNames(object dataSource, bool usedForYValue);
    internal void DataBind();
    internal void DataBind(IEnumerable dataSource, ArrayList seriesList);
    internal void AlignDataPointsByAxisLabel(bool sortAxisLabels, PointSortOrder sortingOrder);
    internal void AlignDataPointsByAxisLabel(ArrayList seriesList, bool sortAxisLabels, PointSortOrder sortingOrder);
    internal void DataBindCrossTab(IEnumerable dataSource, string seriesGroupByField, string xField, string yFields, string otherFields, bool sort, PointSortOrder sortingOrder);
    internal void DataBindTable(IEnumerable dataSource, string xField);
}
public enum System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle : Enum {
    public int value__;
    public static ChartImageAlignmentStyle TopLeft;
    public static ChartImageAlignmentStyle Top;
    public static ChartImageAlignmentStyle TopRight;
    public static ChartImageAlignmentStyle Right;
    public static ChartImageAlignmentStyle BottomRight;
    public static ChartImageAlignmentStyle Bottom;
    public static ChartImageAlignmentStyle BottomLeft;
    public static ChartImageAlignmentStyle Left;
    public static ChartImageAlignmentStyle Center;
}
public enum System.Windows.Forms.DataVisualization.Charting.ChartImageFormat : Enum {
    public int value__;
    public static ChartImageFormat Jpeg;
    public static ChartImageFormat Png;
    public static ChartImageFormat Bmp;
    public static ChartImageFormat Tiff;
    public static ChartImageFormat Gif;
    public static ChartImageFormat Emf;
    public static ChartImageFormat EmfDual;
    public static ChartImageFormat EmfPlus;
}
public enum System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode : Enum {
    public int value__;
    public static ChartImageWrapMode Scaled;
    public static ChartImageWrapMode Tile;
    public static ChartImageWrapMode TileFlipX;
    public static ChartImageWrapMode TileFlipXY;
    public static ChartImageWrapMode TileFlipY;
    public static ChartImageWrapMode Unscaled;
}
public abstract class System.Windows.Forms.DataVisualization.Charting.ChartNamedElement : ChartElement {
    private string _name;
    [DefaultValueAttribute("")]
public string Name { get; public set; }
    protected ChartNamedElement(string name);
    internal ChartNamedElement(IChartElement parent, string name);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    internal virtual string ToStringInternal();
}
[DefaultMemberAttribute("Item")]
public abstract class System.Windows.Forms.DataVisualization.Charting.ChartNamedElementCollection`1 : ChartElementCollection`1<T> {
    private List`1<T> _cachedState;
    private int _disableDeleteCount;
    private EventHandler`1<NameReferenceChangedEventArgs> NameReferenceChanged;
    private EventHandler`1<NameReferenceChangedEventArgs> NameReferenceChanging;
    protected string NamePrefix { get; }
    public T Item { get; public set; }
    private bool System.Windows.Forms.DataVisualization.Charting.INameController.IsColectionEditing { get; private set; }
    private IList System.Windows.Forms.DataVisualization.Charting.INameController.Snapshot { get; }
    internal ChartNamedElementCollection`1(IChartElement parent);
    protected virtual string get_NamePrefix();
    public T get_Item(string name);
    public void set_Item(string name, T value);
    internal void add_NameReferenceChanged(EventHandler`1<NameReferenceChangedEventArgs> value);
    internal void remove_NameReferenceChanged(EventHandler`1<NameReferenceChangedEventArgs> value);
    internal void add_NameReferenceChanging(EventHandler`1<NameReferenceChangedEventArgs> value);
    internal void remove_NameReferenceChanging(EventHandler`1<NameReferenceChangedEventArgs> value);
    public virtual bool IsUniqueName(string name);
    public virtual string NextUniqueName();
    public int IndexOf(string name);
    internal void VerifyNameReference(string name);
    internal bool IsNameReferenceValid(string name);
    public virtual T FindByName(string name);
    protected virtual void InsertItem(int index, T item);
    protected virtual void SetItem(int index, T item);
    protected virtual void RemoveItem(int index);
    internal virtual void FixNameReferences(T item);
    private sealed virtual override bool System.Windows.Forms.DataVisualization.Charting.INameController.IsUniqueName(string name);
    private sealed virtual override bool System.Windows.Forms.DataVisualization.Charting.INameController.get_IsColectionEditing();
    private sealed virtual override void System.Windows.Forms.DataVisualization.Charting.INameController.set_IsColectionEditing(bool value);
    private sealed virtual override void System.Windows.Forms.DataVisualization.Charting.INameController.OnNameReferenceChanging(NameReferenceChangedEventArgs e);
    private sealed virtual override void System.Windows.Forms.DataVisualization.Charting.INameController.OnNameReferenceChanged(NameReferenceChangedEventArgs e);
    private sealed virtual override void System.Windows.Forms.DataVisualization.Charting.INameController.DoSnapshot(bool save, EventHandler`1<NameReferenceChangedEventArgs> changingCallback, EventHandler`1<NameReferenceChangedEventArgs> changedCallback);
    private sealed virtual override IList System.Windows.Forms.DataVisualization.Charting.INameController.get_Snapshot();
}
public class System.Windows.Forms.DataVisualization.Charting.ChartPaintEventArgs : EventArgs {
    private object _chartElement;
    private ChartGraphics _chartGraph;
    private CommonElements _common;
    private Chart _chart;
    private ElementPosition _position;
    public object ChartElement { get; }
    public ChartGraphics ChartGraphics { get; }
    internal CommonElements CommonElements { get; }
    public ElementPosition Position { get; }
    public Chart Chart { get; }
    internal ChartPaintEventArgs(object chartElement, ChartGraphics chartGraph, CommonElements common, ElementPosition position);
    public object get_ChartElement();
    public ChartGraphics get_ChartGraphics();
    internal CommonElements get_CommonElements();
    public ElementPosition get_Position();
    public Chart get_Chart();
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartPicture : ChartElement {
    internal static float elementSpacing;
    internal static float maxTitleSize;
    private bool _suppressExceptions;
    private GradientStyle _backGradientStyle;
    private Color _backSecondaryColor;
    private Color _backColor;
    private string _backImage;
    private ChartImageWrapMode _backImageWrapMode;
    private Color _backImageTransparentColor;
    private ChartImageAlignmentStyle _backImageAlign;
    private Color _borderColor;
    private int _borderWidth;
    private ChartDashStyle _borderDashStyle;
    private ChartHatchStyle _backHatchStyle;
    private AntiAliasingStyles _antiAliasing;
    private TextAntiAliasingQuality _textAntiAliasingQuality;
    private bool _isSoftShadows;
    private int _width;
    private int _height;
    private DataManipulator _dataManipulator;
    internal HotRegionsList hotRegionsList;
    private BorderSkin _borderSkin;
    private ChartAreaCollection _chartAreas;
    private LegendCollection _legends;
    private TitleCollection _titles;
    private AnnotationCollection _annotations;
    internal AnnotationSmartLabel annotationSmartLabel;
    private EventHandler`1<ChartPaintEventArgs> BeforePaint;
    private EventHandler`1<ChartPaintEventArgs> AfterPaint;
    private RectangleF _titlePosition;
    internal bool isPrinting;
    internal bool isSelectionMode;
    private FontCache _fontCache;
    private RectangleF _chartBorderPosition;
    internal bool isSavingAsImage;
    internal bool backgroundRestored;
    internal Bitmap nonTopLevelChartBuffer;
    [CompilerGeneratedAttribute]
private ChartGraphics <ChartGraph>k__BackingField;
    internal ChartGraphics ChartGraph { get; internal set; }
    [DefaultValueAttribute]
public RightToLeft RightToLeft { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[SRDescriptionAttribute("DescriptionAttributeSuppressExceptions")]
[DefaultValueAttribute("False")]
internal bool SuppressExceptions { get; internal set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkin")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public BorderSkin BorderSkin { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeChartAreas")]
[BindableAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartCollectionEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public ChartAreaCollection ChartAreas { get; }
    [SRCategoryAttribute("CategoryAttributeChart")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.LegendCollectionEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DescriptionAttributeLegends")]
public LegendCollection Legends { get; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartCollectionEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeCharttitle")]
[SRDescriptionAttribute("DescriptionAttributeTitles")]
public TitleCollection Titles { get; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.AnnotationCollectionEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeChart")]
[SRDescriptionAttribute("DescriptionAttributeAnnotations3")]
public AnnotationCollection Annotations { get; }
    [TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[SRDescriptionAttribute("DescriptionAttributeBackColor")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public Color BackColor { get; public set; }
    [BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[SRDescriptionAttribute("DescriptionAttributeBorderColor")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public Color BorderColor { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeWidth")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("300")]
public int Width { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeDataManipulator")]
[SRCategoryAttribute("CategoryAttributeData")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public DataManipulator DataManipulator { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("300")]
[SRDescriptionAttribute("DescriptionAttributeHeight3")]
[BindableAttribute("True")]
public int Height { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackHatchStyle")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.HatchStyleEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeBackImage")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ImageValueEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public string BackImage { get; public set; }
    [BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeImageWrapMode")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartImageWrapMode BackImageWrapMode { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeImageTransparentColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color BackImageTransparentColor { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackImageAlign")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public ChartImageAlignmentStyle BackImageAlignment { get; public set; }
    [SRCategoryAttribute("CategoryAttributeImage")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSoftShadows3")]
[BindableAttribute("True")]
public bool IsSoftShadows { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeAntiAlias")]
[SRCategoryAttribute("CategoryAttributeImage")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Windows.Forms.DataVisualization.Charting.AntiAliasingStyles", "All")]
public AntiAliasingStyles AntiAliasing { get; public set; }
    [BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeImage")]
[SRDescriptionAttribute("DescriptionAttributeTextAntiAliasingQuality")]
[DefaultValueAttribute("System.Windows.Forms.DataVisualization.Charting.TextAntiAliasingQuality", "High")]
public TextAntiAliasingQuality TextAntiAliasingQuality { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.GradientEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientStyle")]
public GradientStyle BackGradientStyle { get; public set; }
    [TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeBackSecondaryColor")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public Color BackSecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeChart_BorderlineWidth")]
public int BorderWidth { get; public set; }
    [BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeBorderDashStyle")]
public ChartDashStyle BorderDashStyle { get; public set; }
    internal FontCache FontCache { get; }
    public ChartPicture(IServiceContainer container);
    [CompilerGeneratedAttribute]
internal ChartGraphics get_ChartGraph();
    [CompilerGeneratedAttribute]
internal void set_ChartGraph(ChartGraphics value);
    internal void add_BeforePaint(EventHandler`1<ChartPaintEventArgs> value);
    internal void remove_BeforePaint(EventHandler`1<ChartPaintEventArgs> value);
    internal void add_AfterPaint(EventHandler`1<ChartPaintEventArgs> value);
    internal void remove_AfterPaint(EventHandler`1<ChartPaintEventArgs> value);
    [EditorBrowsableAttribute("1")]
private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    internal void PaintOffScreen();
    internal TextRenderingHint GetTextRenderingHint();
    internal void Paint(Graphics graph, bool paintTopLevelElementOnly);
    protected virtual void OnBeforePaint(ChartPaintEventArgs e);
    protected virtual void OnAfterPaint(ChartPaintEventArgs e);
    internal virtual void Invalidate();
    public void Resize(ChartGraphics chartGraph);
    public void Resize(ChartGraphics chartGraph, bool calcAreaPositionOnly);
    internal void ResetMinMaxFromData();
    public void Recalculate();
    public RightToLeft get_RightToLeft();
    public void set_RightToLeft(RightToLeft value);
    internal void set_SuppressExceptions(bool value);
    internal bool get_SuppressExceptions();
    public BorderSkin get_BorderSkin();
    public void set_BorderSkin(BorderSkin value);
    public ChartAreaCollection get_ChartAreas();
    public LegendCollection get_Legends();
    public TitleCollection get_Titles();
    public AnnotationCollection get_Annotations();
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public int get_Width();
    public void set_Width(int value);
    public DataManipulator get_DataManipulator();
    public int get_Height();
    public void set_Height(int value);
    public ChartHatchStyle get_BackHatchStyle();
    public void set_BackHatchStyle(ChartHatchStyle value);
    public string get_BackImage();
    public void set_BackImage(string value);
    public ChartImageWrapMode get_BackImageWrapMode();
    public void set_BackImageWrapMode(ChartImageWrapMode value);
    public Color get_BackImageTransparentColor();
    public void set_BackImageTransparentColor(Color value);
    public ChartImageAlignmentStyle get_BackImageAlignment();
    public void set_BackImageAlignment(ChartImageAlignmentStyle value);
    public bool get_IsSoftShadows();
    public void set_IsSoftShadows(bool value);
    public AntiAliasingStyles get_AntiAliasing();
    public void set_AntiAliasing(AntiAliasingStyles value);
    public TextAntiAliasingQuality get_TextAntiAliasingQuality();
    public void set_TextAntiAliasingQuality(TextAntiAliasingQuality value);
    public GradientStyle get_BackGradientStyle();
    public void set_BackGradientStyle(GradientStyle value);
    public Color get_BackSecondaryColor();
    public void set_BackSecondaryColor(Color value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public ChartDashStyle get_BorderDashStyle();
    public void set_BorderDashStyle(ChartDashStyle value);
    internal FontCache get_FontCache();
    private bool IsAreasAlignmentRequired();
    private ArrayList GetAlignedAreasGroup(ChartArea masterArea, AreaAlignmentStyles type, AreaAlignmentOrientations orientation);
    internal void AlignChartAreas(AreaAlignmentStyles type);
    private void AlignChartAreasPlotPosition(ArrayList areasGroup, AreaAlignmentOrientations orientation);
    private void AlignChartAreasPosition();
    internal void AlignChartAreasCursor(ChartArea changedArea, AreaAlignmentOrientations orientation, bool selectionChanged);
    internal void AlignChartAreasZoomed(ChartArea changedArea, AreaAlignmentOrientations orientation, bool disposeBufferBitmap);
    internal void AlignChartAreasAxesView(ChartArea changedArea, AreaAlignmentOrientations orientation);
    private void InspectChartDimensions(int width, int height);
    public void LoadTemplate(string name);
    public void LoadTemplate(Stream stream);
    internal Title GetDefaultTitle(bool create);
    private bool IsToolTipsEnabled();
    protected virtual void Dispose(bool disposing);
}
[SRDescriptionAttribute("DescriptionAttributeChartSerializer_ChartSerializer")]
[DefaultPropertyAttribute("Format")]
public class System.Windows.Forms.DataVisualization.Charting.ChartSerializer : object {
    private IServiceContainer _serviceContainer;
    private Chart _chart;
    private SerializerBase _serializer;
    private SerializationFormat _format;
    private SerializationContents _content;
    [SRDescriptionAttribute("DescriptionAttributeChartSerializer_Content")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("System.Windows.Forms.DataVisualization.Charting.SerializationContents", "Default")]
public SerializationContents Content { get; public set; }
    [DefaultValueAttribute("System.Windows.Forms.DataVisualization.Charting.SerializationFormat", "Xml")]
[SRDescriptionAttribute("DescriptionAttributeChartSerializer_Format")]
[SRCategoryAttribute("CategoryAttributeMisc")]
public SerializationFormat Format { get; public set; }
    [DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeChartSerializer_ResetWhenLoading")]
[SRCategoryAttribute("CategoryAttributeMisc")]
public bool IsResetWhenLoading { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeChartSerializer_IgnoreUnknownXmlAttributes")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("False")]
public bool IsUnknownAttributeIgnored { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeChartSerializer_TemplateMode")]
[DefaultValueAttribute("False")]
[SRCategoryAttribute("CategoryAttributeMisc")]
public bool IsTemplateMode { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeChartSerializer_SerializableContent")]
public string SerializableContent { get; public set; }
    [DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeChartSerializer_NonSerializableContent")]
[SRCategoryAttribute("CategoryAttributeMisc")]
public string NonSerializableContent { get; public set; }
    internal ChartSerializer(IServiceContainer container);
    internal object GetService(Type serviceType);
    public SerializationContents get_Content();
    public void set_Content(SerializationContents value);
    public SerializationFormat get_Format();
    public void set_Format(SerializationFormat value);
    public bool get_IsResetWhenLoading();
    public void set_IsResetWhenLoading(bool value);
    public bool get_IsUnknownAttributeIgnored();
    public void set_IsUnknownAttributeIgnored(bool value);
    public bool get_IsTemplateMode();
    public void set_IsTemplateMode(bool value);
    public string get_SerializableContent();
    public void set_SerializableContent(string value);
    public string get_NonSerializableContent();
    public void set_NonSerializableContent(string value);
    public void Reset();
    public void Save(string fileName);
    public void Save(Stream stream);
    public void Save(XmlWriter writer);
    public void Save(TextWriter writer);
    public void Load(string fileName);
    public void Load(Stream stream);
    public void Load(XmlReader reader);
    public void Load(TextReader reader);
    internal void SetSerializableContent();
    protected string GetContentString(SerializationContents content, bool serializable);
    internal Chart GetChartObject();
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypeConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.AreaChart : SplineChart {
    protected bool gradientFill;
    protected GraphicsPath areaPath;
    protected PointF axisPos;
    [CompilerGeneratedAttribute]
private Series <Series>k__BackingField;
    protected Series Series { get; protected set; }
    public string Name { get; }
    public bool ZeroCrossing { get; }
    [CompilerGeneratedAttribute]
protected Series get_Series();
    [CompilerGeneratedAttribute]
protected void set_Series(Series value);
    protected virtual float GetDefaultTension();
    public virtual string get_Name();
    public virtual bool get_ZeroCrossing();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual Image GetImage(ChartTypeRegistry registry);
    protected virtual void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawLine(ChartGraphics graph, CommonElements common, DataPoint point, Series series, PointF[] points, int pointIndex, float tension);
    private void FillLastSeriesGradient(ChartGraphics graph);
    protected virtual bool IsLineTensionSupported();
    protected virtual GraphicsPath Draw3DSurface(ChartArea area, ChartGraphics graph, Matrix3D matrix, LightStyle lightStyle, DataPoint3D prevDataPointEx, float positionZ, float depth, ArrayList points, int pointIndex, int pointLoopIndex, float tension, DrawingOperationTypes operationType, float topDarkening, float bottomDarkening, PointF thirdPointPosition, PointF fourthPointPosition, bool clippedSegment);
    protected virtual GraphicsPath Draw3DSurface(DataPoint3D firstPoint, DataPoint3D secondPoint, bool reversed, ChartArea area, ChartGraphics graph, Matrix3D matrix, LightStyle lightStyle, DataPoint3D prevDataPointEx, float positionZ, float depth, ArrayList points, int pointIndex, int pointLoopIndex, float tension, DrawingOperationTypes operationType, LineSegmentType surfaceSegmentType, float topDarkening, float bottomDarkening, PointF thirdPointPosition, PointF fourthPointPosition, bool clippedSegment, bool clipOnTop, bool clipOnBottom);
    protected virtual void GetTopSurfaceVisibility(ChartArea area, DataPoint3D firstPoint, DataPoint3D secondPoint, bool upSideDown, float positionZ, float depth, Matrix3D matrix, SurfaceNames& visibleSurfaces);
    internal DataPoint3D GetAxisIntersection(DataPoint3D firstPoint, DataPoint3D secondPoint, float axisPosition);
    protected virtual void GetBottomPointsPosition(CommonElements common, ChartArea area, float axisPosition, DataPoint3D& firstPoint, DataPoint3D& secondPoint, PointF thirdPointPosition, PointF fourthPointPosition, PointF& thirdPoint, PointF& fourthPoint);
    protected virtual int GetPointLoopNumber(bool selection, ArrayList pointsArray);
    protected virtual void Dispose(bool disposing);
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.BarChart : object {
    protected bool useTwoValues;
    protected bool drawSeriesSideBySide;
    protected BarValueLabelDrawingStyle defLabelDrawingStyle;
    protected bool pointLabelsMarkersPresent;
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool ZeroCrossing { get; }
    public bool DataPointsInLegend { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public int YValuesPerPoint { get; }
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public sealed virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public sealed virtual bool get_RequireAxes();
    public sealed virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public sealed virtual bool get_SupportLogarithmicAxes();
    public sealed virtual bool get_SwitchValueAxes();
    public virtual bool get_SideBySideSeries();
    public virtual bool get_ZeroCrossing();
    public sealed virtual bool get_DataPointsInLegend();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public sealed virtual bool get_ApplyPaletteColorsToPoints();
    public sealed virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public sealed virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    private void ProcessChartType(bool labels, bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    private static int GetAdjustedPixelSize(int pixelSize, ChartGraphics graph);
    private void DrawLabelsAndMarkers(ChartArea area, ChartGraphics graph, CommonElements common, RectangleF rectSize, DataPoint point, Series ser, double barStartPosition, double barSize, double width, int pointIndex, Int32& markerIndex);
    private void SetHotRegions(CommonElements common, ChartGraphics graph, DataPoint point, SizeF markerSize, string seriesName, int pointIndex, MarkerStyle pointMarkerStyle, PointF markerPosition);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    internal double GetEmptyPointValue(DataPoint point, int pointIndex, int yValueIndex);
    private void ProcessChartType3D(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    private void DrawMarkers3D(ChartArea area, ChartGraphics graph, CommonElements common, RectangleF rectSize, DataPoint3D pointEx, Series ser, double barStartPosition, double barSize);
    private void DrawLabels3D(ChartArea area, ChartGraphics graph, CommonElements common, RectangleF rectSize, DataPoint3D pointEx, Series ser, double barStartPosition, double barSize, double width, int pointIndex);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.BarPointsDrawingOrderComparer : object {
    private ChartArea _area;
    private Point3D _areaProjectionCenter;
    private bool _selection;
    public BarPointsDrawingOrderComparer(ChartArea area, bool selection, COPCoordinates coord);
    public sealed virtual int Compare(object o1, object o2);
}
internal enum System.Windows.Forms.DataVisualization.Charting.ChartTypes.BarValueLabelDrawingStyle : Enum {
    public int value__;
    public static BarValueLabelDrawingStyle Outside;
    public static BarValueLabelDrawingStyle Left;
    public static BarValueLabelDrawingStyle Center;
    public static BarValueLabelDrawingStyle Right;
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.BoxPlotChart : object {
    protected Axis vAxis;
    protected Axis hAxis;
    protected bool showSideBySide;
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ZeroCrossing { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public int YValuesPerPoint { get; }
    public virtual string get_Name();
    public virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public virtual bool get_RequireAxes();
    public sealed virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public sealed virtual bool get_SideBySideSeries();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawBoxPlotMarks(ChartGraphics graph, ChartArea area, Series ser, DataPoint point, float xPosition, float width);
    private void DrawBoxPlotSingleMarker(ChartGraphics graph, ChartArea area, DataPoint point, string markerStyle, float xPosition, float yPosition, float zPosition, float width, bool draw3D);
    protected virtual SizeF GetMarkerSize(ChartGraphics graph, CommonElements common, ChartArea area, DataPoint point, int markerSize, string markerImage);
    protected virtual void DrawLabel(CommonElements common, ChartArea area, ChartGraphics graph, Series ser, DataPoint point, PointF position, int pointIndex);
    protected virtual void ProcessChartType3D(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawBoxPlotMarks3D(ChartGraphics graph, ChartArea area, Series ser, DataPoint point, float xPosition, float width, float zPosition, float depth);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    internal static void CalculateBoxPlotFromLinkedSeries(Series boxPlotSeries);
    private static void CalculateBoxPlotValues(DataPoint& boxPoint, Series linkedSeries, string valueName);
    private static void BoxPlotAddUnusual(DataPoint& boxPoint, List`1<double> yValues);
    private static Double[] CalculatePercentileValues(List`1<double> yValues, Double[] requiredPercentile);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.BubbleChart : PointChart {
    private bool _scaleDetected;
    private double _maxPossibleBubbleSize;
    private double _minPossibleBubbleSize;
    private float _maxBubleSize;
    private float _minBubleSize;
    private double _minAll;
    private double _maxAll;
    private double _valueDiff;
    private double _valueScale;
    public string Name { get; }
    public int YValuesPerPoint { get; }
    public bool SecondYScale { get; }
    public virtual string get_Name();
    public virtual int get_YValuesPerPoint();
    public virtual bool get_SecondYScale();
    public virtual Image GetImage(ChartTypeRegistry registry);
    protected virtual void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual int GetMarkerBorderSize(DataPointCustomProperties point);
    protected virtual SizeF GetMarkerSize(ChartGraphics graph, CommonElements common, ChartArea area, DataPoint point, int markerSize, string markerImage);
    private float ScaleBubbleSize(ChartGraphics graph, CommonElements common, ChartArea area, double value);
    internal static double AxisScaleBubbleSize(CommonElements common, ChartArea area, double value, bool yValue);
    internal static double GetBubbleMaxSize(ChartArea area);
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.CandleStickChart : StockChart {
    public string Name { get; }
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
}
internal static class System.Windows.Forms.DataVisualization.Charting.ChartTypes.ChartTypeNames : object {
    internal static string Area;
    internal static string RangeBar;
    internal static string Bar;
    internal static string SplineArea;
    internal static string BoxPlot;
    internal static string Bubble;
    internal static string Column;
    internal static string RangeColumn;
    internal static string Doughnut;
    internal static string ErrorBar;
    internal static string FastLine;
    internal static string FastPoint;
    internal static string Funnel;
    internal static string Pyramid;
    internal static string Kagi;
    internal static string Spline;
    internal static string Line;
    internal static string PointAndFigure;
    internal static string Pie;
    internal static string Point;
    internal static string Polar;
    internal static string Radar;
    internal static string SplineRange;
    internal static string Range;
    internal static string Renko;
    internal static string OneHundredPercentStackedArea;
    internal static string StackedArea;
    internal static string OneHundredPercentStackedBar;
    internal static string StackedBar;
    internal static string OneHundredPercentStackedColumn;
    internal static string StackedColumn;
    internal static string StepLine;
    internal static string Candlestick;
    internal static string Stock;
    internal static string ThreeLineBreak;
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.ChartTypeRegistry : object {
    private ResourceManager _resourceManager;
    internal Hashtable registeredChartTypes;
    private Hashtable _createdChartTypes;
    public ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("1")]
private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    public void Register(string name, Type chartType);
    public IChartType GetChartType(SeriesChartType chartType);
    public IChartType GetChartType(string name);
    public ResourceManager get_ResourceManager();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.ColumnChart : PointChart {
    private double _shiftedX;
    private string _shiftedSerName;
    protected bool useTwoValues;
    protected bool drawSeriesSideBySide;
    protected COPCoordinates coordinates;
    public string Name { get; }
    public bool Stacked { get; }
    public bool RequireAxes { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public int YValuesPerPoint { get; }
    public bool ZeroCrossing { get; }
    public double ShiftedX { get; public set; }
    public string ShiftedSerName { get; public set; }
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual bool get_Stacked();
    public virtual bool get_RequireAxes();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public virtual bool get_SideBySideSeries();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual bool get_ZeroCrossing();
    public virtual double get_ShiftedX();
    public virtual void set_ShiftedX(double value);
    public virtual string get_ShiftedSerName();
    public virtual void set_ShiftedSerName(string value);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    private void ProcessChartType(bool labels, bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawColumn2D(ChartGraphics graph, Axis vAxis, RectangleF rectSize, DataPoint point, Series ser);
    protected virtual LabelAlignmentStyles GetAutoLabelPosition(Series series, int pointIndex);
    protected virtual bool ShouldDrawMarkerOnViewEdgeX();
    private void ProcessChartType3D(bool labels, bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawLabel(ChartArea area, ChartGraphics graph, CommonElements common, RectangleF columnPosition, DataPoint point, Series ser, int pointIndex);
    protected virtual void ProcessSinglePoint3D(DataPoint3D pointEx, bool selection, ChartGraphics graph, CommonElements common, ChartArea area, RectangleF columnPosition, int pointIndex);
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.DoughnutChart : PieChart {
    public string Name { get; }
    public bool Stacked { get; }
    public bool RequireAxes { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool ZeroCrossing { get; }
    public bool DataPointsInLegend { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public int YValuesPerPoint { get; }
    public bool Doughnut { get; }
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual bool get_Stacked();
    public virtual bool get_RequireAxes();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public virtual bool get_SideBySideSeries();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual bool get_Doughnut();
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.ErrorBarChart : object {
    protected Axis vAxis;
    protected Axis hAxis;
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ZeroCrossing { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public int YValuesPerPoint { get; }
    public virtual string get_Name();
    public virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public virtual bool get_RequireAxes();
    public sealed virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public sealed virtual bool get_SideBySideSeries();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawErrorBarMarks(ChartGraphics graph, ErrorBarStyle barStyle, ChartArea area, Series ser, DataPoint point, float xPosition, float width);
    private void DrawErrorBarSingleMarker(ChartGraphics graph, ChartArea area, DataPoint point, string markerStyle, float xPosition, float yPosition, float zPosition, float width, bool draw3D);
    protected virtual SizeF GetMarkerSize(ChartGraphics graph, CommonElements common, ChartArea area, DataPoint point, int markerSize, string markerImage);
    protected virtual void DrawLabel(CommonElements common, ChartArea area, ChartGraphics graph, Series ser, DataPoint point, PointF position, int pointIndex);
    protected virtual void ProcessChartType3D(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawErrorBarMarks3D(ChartGraphics graph, ErrorBarStyle barStyle, ChartArea area, Series ser, DataPoint point, float xPosition, float width, float zPosition, float depth);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    internal static void CalculateErrorAmount(Series errorBarSeries);
    internal static void GetDataFromLinkedSeries(Series errorBarSeries);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal enum System.Windows.Forms.DataVisualization.Charting.ChartTypes.ErrorBarStyle : Enum {
    public int value__;
    public static ErrorBarStyle Both;
    public static ErrorBarStyle UpperError;
    public static ErrorBarStyle LowerError;
}
internal enum System.Windows.Forms.DataVisualization.Charting.ChartTypes.ErrorBarType : Enum {
    public int value__;
    public static ErrorBarType FixedValue;
    public static ErrorBarType Percentage;
    public static ErrorBarType StandardDeviation;
    public static ErrorBarType StandardError;
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.FastLineChart : object {
    internal bool chartArea3DEnabled;
    internal float seriesZCoordinate;
    internal Matrix3D matrix3D;
    [CompilerGeneratedAttribute]
private ChartGraphics <Graph>k__BackingField;
    [CompilerGeneratedAttribute]
private CommonElements <Common>k__BackingField;
    internal ChartGraphics Graph { get; internal set; }
    internal CommonElements Common { get; internal set; }
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ZeroCrossing { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public int YValuesPerPoint { get; }
    [CompilerGeneratedAttribute]
internal ChartGraphics get_Graph();
    [CompilerGeneratedAttribute]
internal void set_Graph(ChartGraphics value);
    [CompilerGeneratedAttribute]
internal CommonElements get_Common();
    [CompilerGeneratedAttribute]
internal void set_Common(CommonElements value);
    public virtual string get_Name();
    public virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public virtual bool get_RequireAxes();
    public virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public virtual bool get_SideBySideSeries();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    public virtual void DrawLine(Series series, DataPoint point, DataPoint pointMin, DataPoint pointMax, int pointIndex, Pen pen, float firstPointX, float firstPointY, float secondPointX, float secondPointY);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.FastPointChart : object {
    internal bool chartArea3DEnabled;
    internal float seriesZCoordinate;
    internal Matrix3D matrix3D;
    [CompilerGeneratedAttribute]
private ChartGraphics <Graph>k__BackingField;
    [CompilerGeneratedAttribute]
private CommonElements <Common>k__BackingField;
    internal ChartGraphics Graph { get; internal set; }
    internal CommonElements Common { get; internal set; }
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ZeroCrossing { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public int YValuesPerPoint { get; }
    [CompilerGeneratedAttribute]
internal ChartGraphics get_Graph();
    [CompilerGeneratedAttribute]
internal void set_Graph(ChartGraphics value);
    [CompilerGeneratedAttribute]
internal CommonElements get_Common();
    [CompilerGeneratedAttribute]
internal void set_Common(CommonElements value);
    public virtual string get_Name();
    public virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public virtual bool get_RequireAxes();
    public virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public virtual bool get_SideBySideSeries();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawMarker(ChartGraphics graph, DataPoint point, int pointIndex, PointF location, MarkerStyle markerStyle, int markerSize, Brush brush, Pen borderPen);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal enum System.Windows.Forms.DataVisualization.Charting.ChartTypes.Funnel3DDrawingStyle : Enum {
    public int value__;
    public static Funnel3DDrawingStyle CircularBase;
    public static Funnel3DDrawingStyle SquareBase;
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.FunnelChart : object {
    internal ArrayList segmentList;
    internal ArrayList labelInfoList;
    internal RectangleF plotAreaSpacing;
    private Series _chartTypeSeries;
    internal double yValueTotal;
    private double _yValueMax;
    private double _xValueTotal;
    internal int pointNumber;
    private RectangleF _plotAreaPosition;
    private FunnelStyle _funnelStyle;
    private SizeF _funnelNeckSize;
    internal float funnelSegmentGap;
    private int _rotation3D;
    internal bool round3DShape;
    internal bool isPyramid;
    private float _funnelMinPointHeight;
    internal string funnelPointGapAttributeName;
    internal string funnelRotationAngleAttributeName;
    protected string funnelPointMinHeight;
    internal string funnel3DDrawingStyleAttributeName;
    internal string funnelInsideLabelAlignmentAttributeName;
    protected string funnelOutsideLabelPlacementAttributeName;
    internal string funnelLabelStyleAttributeName;
    private Double[] _valuePercentages;
    [CompilerGeneratedAttribute]
private ChartGraphics <Graph>k__BackingField;
    [CompilerGeneratedAttribute]
private ChartArea <Area>k__BackingField;
    [CompilerGeneratedAttribute]
private CommonElements <Common>k__BackingField;
    internal ChartGraphics Graph { get; internal set; }
    internal ChartArea Area { get; internal set; }
    internal CommonElements Common { get; internal set; }
    internal RectangleF PlotAreaPosition { get; internal set; }
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ZeroCrossing { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public int YValuesPerPoint { get; }
    [CompilerGeneratedAttribute]
internal ChartGraphics get_Graph();
    [CompilerGeneratedAttribute]
internal void set_Graph(ChartGraphics value);
    [CompilerGeneratedAttribute]
internal ChartArea get_Area();
    [CompilerGeneratedAttribute]
internal void set_Area(ChartArea value);
    [CompilerGeneratedAttribute]
internal CommonElements get_Common();
    [CompilerGeneratedAttribute]
internal void set_Common(CommonElements value);
    internal RectangleF get_PlotAreaPosition();
    internal void set_PlotAreaPosition(RectangleF value);
    public virtual string get_Name();
    public virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public virtual bool get_RequireAxes();
    public virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public virtual bool get_SideBySideSeries();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    private void ProcessChartType();
    protected virtual void GetPointWidthAndHeight(Series series, int pointIndex, float location, Single& height, Single& startWidth, Single& endWidth);
    protected virtual bool ShouldDrawFirstPoint();
    private void DrawFunnel3DSquareSegment(DataPoint point, int pointIndex, float startWidth, float endWidth, float location, float height, bool nothingOnTop, bool nothingOnBottom, bool drawSegment, bool drawSegmentShadow);
    private void DrawFunnelCircularSegment(DataPoint point, int pointIndex, float startWidth, float endWidth, float location, float height, bool nothingOnTop, bool nothingOnBottom, bool drawSegment, bool drawSegmentShadow);
    private ArrayList GetFunnelSegmentPositions();
    private void DrawLabels();
    private ArrayList CreateLabelsInfoList();
    private bool FitPointLabels();
    private void GetLabelsPosition();
    private bool IsLabelsOverlap(FunnelPointLabelInfo testLabelInfo);
    private FunnelLabelStyle GetLabelStyle(DataPointCustomProperties properties);
    private void GetPlotAreaSpacing();
    private RectangleF GetPlotAreaPosition();
    protected float CheckMinHeight(float height);
    private void GetFunnelMinPointHeight(DataPointCustomProperties properties);
    private int GetFunnelRotation(DataPointCustomProperties properties);
    private Color GetCalloutLineColor(DataPointCustomProperties properties);
    private SizeF GetFunnelNeckSize(DataPointCustomProperties properties);
    private float GetFunnelPointGap(DataPointCustomProperties properties);
    private FunnelStyle GetFunnelStyle(DataPointCustomProperties properties);
    private FunnelLabelPlacement GetOutsideLabelPlacement(DataPointCustomProperties properties);
    private FunnelLabelVerticalAlignment GetInsideLabelAlignment(DataPointCustomProperties properties);
    private Funnel3DDrawingStyle GetFunnel3DDrawingStyle(DataPointCustomProperties properties);
    private void GetDataPointValuesStatistic();
    private Series GetDataSeries();
    private PyramidValueType GetPyramidValueType(DataPointCustomProperties properties);
    public virtual double GetYValue(DataPoint point, int pointIndex);
    public virtual double GetXValue(DataPoint point);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal enum System.Windows.Forms.DataVisualization.Charting.ChartTypes.FunnelLabelPlacement : Enum {
    public int value__;
    public static FunnelLabelPlacement Right;
    public static FunnelLabelPlacement Left;
}
internal enum System.Windows.Forms.DataVisualization.Charting.ChartTypes.FunnelLabelStyle : Enum {
    public int value__;
    public static FunnelLabelStyle Inside;
    public static FunnelLabelStyle Outside;
    public static FunnelLabelStyle OutsideInColumn;
    public static FunnelLabelStyle Disabled;
}
internal enum System.Windows.Forms.DataVisualization.Charting.ChartTypes.FunnelLabelVerticalAlignment : Enum {
    public int value__;
    public static FunnelLabelVerticalAlignment Center;
    public static FunnelLabelVerticalAlignment Top;
    public static FunnelLabelVerticalAlignment Bottom;
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.FunnelPointLabelInfo : object {
    public DataPoint Point;
    public int PointIndex;
    public string Text;
    public SizeF Size;
    public RectangleF Position;
    public FunnelLabelStyle Style;
    public FunnelLabelVerticalAlignment VerticalAlignment;
    public FunnelLabelPlacement OutsidePlacement;
    public PointF CalloutPoint1;
    public PointF CalloutPoint2;
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.FunnelSegmentInfo : object {
    public DataPoint Point;
    public int PointIndex;
    public float Location;
    public float Height;
    public float StartWidth;
    public float EndWidth;
    public bool NothingOnTop;
    public bool NothingOnBottom;
}
internal enum System.Windows.Forms.DataVisualization.Charting.ChartTypes.FunnelStyle : Enum {
    public int value__;
    public static FunnelStyle YIsHeight;
    public static FunnelStyle YIsWidth;
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.HundredPercentStackedAreaChart : StackedAreaChart {
    private Double[] _totalPerPoint;
    public string Name { get; }
    public bool HundredPercent { get; }
    public virtual string get_Name();
    public virtual bool get_HundredPercent();
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.HundredPercentStackedBarChart : StackedBarChart {
    private Hashtable _stackedGroupsTotalPerPoint;
    public string Name { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public virtual string get_Name();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.HundredPercentStackedColumnChart : StackedColumnChart {
    private Hashtable _stackedGroupsTotalPerPoint;
    public string Name { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public virtual string get_Name();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
}
internal interface System.Windows.Forms.DataVisualization.Charting.ChartTypes.IChartType {
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool ZeroCrossing { get; }
    public int YValuesPerPoint { get; }
    public bool SecondYScale { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public abstract virtual string get_Name();
    public abstract virtual Image GetImage(ChartTypeRegistry registry);
    public abstract virtual bool get_Stacked();
    public abstract virtual bool get_SupportStackedGroups();
    public abstract virtual bool get_StackSign();
    public abstract virtual bool get_RequireAxes();
    public abstract virtual bool get_CircularChartArea();
    public abstract virtual bool get_SupportLogarithmicAxes();
    public abstract virtual bool get_SwitchValueAxes();
    public abstract virtual bool get_SideBySideSeries();
    public abstract virtual bool get_DataPointsInLegend();
    public abstract virtual bool get_ApplyPaletteColorsToPoints();
    public abstract virtual bool get_ExtraYValuesConnectedToYAxis();
    public abstract virtual bool get_ZeroCrossing();
    public abstract virtual int get_YValuesPerPoint();
    public abstract virtual bool get_SecondYScale();
    public abstract virtual bool get_HundredPercent();
    public abstract virtual bool get_HundredPercentSupportNegative();
    public abstract virtual LegendImageStyle GetLegendImageStyle(Series series);
    public abstract virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    public abstract virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    public abstract virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
}
internal interface System.Windows.Forms.DataVisualization.Charting.ChartTypes.ICircularChartType {
    public abstract virtual bool RequireClosedFigure();
    public abstract virtual bool XAxisCrossingSupported();
    public abstract virtual bool XAxisLabelsSupported();
    public abstract virtual bool RadialGridLinesSupported();
    public abstract virtual int GetNumerOfSectors(ChartArea area, SeriesCollection seriesCollection);
    public abstract virtual Single[] GetYAxisLocations(ChartArea area);
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.KagiChart : StepLineChart {
    internal Color kagiUpColor;
    internal int currentKagiDirection;
    public string Name { get; }
    internal static void PrepareData(Series series);
    internal static bool UnPrepareData(Series series);
    private static double GetReversalAmount(Series series, Double& percentOfPrice);
    private static void FillKagiData(Series series, Series originalData);
    protected virtual void DrawLine(ChartGraphics graph, CommonElements common, DataPoint point, Series series, PointF[] points, int pointIndex, float tension);
    protected virtual PointF[] GetPointsPosition(ChartGraphics graph, Series series, bool indexedSeries);
    protected virtual GraphicsPath Draw3DSurface(ChartArea area, ChartGraphics graph, Matrix3D matrix, LightStyle lightStyle, DataPoint3D prevDataPointEx, float positionZ, float depth, ArrayList points, int pointIndex, int pointLoopIndex, float tension, DrawingOperationTypes operationType, float topDarkening, float bottomDarkening, PointF thirdPointPosition, PointF fourthPointPosition, bool clippedSegment);
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.LineChart : PointChart {
    protected float lineTension;
    protected int centerPointIndex;
    protected bool useBorderColor;
    protected bool disableShadow;
    protected bool drawShadowOnly;
    private Pen _linePen;
    protected double hAxisMin;
    protected double hAxisMax;
    protected double vAxisMin;
    protected double vAxisMax;
    protected bool clipRegionSet;
    protected bool multiSeries;
    protected COPCoordinates COPCoordinatesToCheck;
    protected int allPointsLoopsNumber;
    protected bool showPointLines;
    protected bool drawOutsideLines;
    private bool _processBaseChart;
    public string Name { get; }
    public bool Stacked { get; }
    public bool RequireAxes { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool ZeroCrossing { get; }
    public bool DataPointsInLegend { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public int YValuesPerPoint { get; }
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual bool get_Stacked();
    public virtual bool get_RequireAxes();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public virtual bool get_SideBySideSeries();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawLine(ChartGraphics graph, CommonElements common, DataPoint point, Series series, PointF[] points, int pointIndex, float tension);
    private void DrawTruncatedLine(ChartGraphics graph, Pen pen, PointF pt1, PointF pt2);
    internal static PointF GetIntersectionY(PointF firstPoint, PointF secondPoint, float pointY);
    internal static PointF GetIntersectionX(PointF firstPoint, PointF secondPoint, float pointX);
    protected void DrawLine(ChartGraphics graph, DataPoint point, Series series, PointF firstPoint, PointF secondPoint);
    protected virtual bool IsLineTensionSupported();
    protected virtual float GetDefaultTension();
    protected virtual LabelAlignmentStyles GetAutoLabelPosition(Series series, int pointIndex);
    protected virtual PointF[] GetPointsPosition(ChartGraphics graph, Series series, bool indexedSeries);
    protected void ProcessLineChartType3D(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual GraphicsPath Draw3DSurface(ChartArea area, ChartGraphics graph, Matrix3D matrix, LightStyle lightStyle, DataPoint3D prevDataPointEx, float positionZ, float depth, ArrayList points, int pointIndex, int pointLoopIndex, float tension, DrawingOperationTypes operationType, float topDarkening, float bottomDarkening, PointF thirdPointPosition, PointF fourthPointPosition, bool clippedSegment);
    protected int GetCenterPointIndex(ArrayList points);
    protected virtual int GetPointLoopNumber(bool selection, ArrayList pointsArray);
    protected bool ClipTopPoints(GraphicsPath resultPath, DataPoint3D& firstPoint, DataPoint3D& secondPoint, bool reversed, ChartArea area, ChartGraphics graph, Matrix3D matrix, LightStyle lightStyle, DataPoint3D prevDataPointEx, float positionZ, float depth, ArrayList points, int pointIndex, int pointLoopIndex, float tension, DrawingOperationTypes operationType, LineSegmentType surfaceSegmentType, float topDarkening, float bottomDarkening);
    protected bool ClipBottomPoints(GraphicsPath resultPath, DataPoint3D& firstPoint, DataPoint3D& secondPoint, PointF& thirdPoint, PointF& fourthPoint, bool reversed, ChartArea area, ChartGraphics graph, Matrix3D matrix, LightStyle lightStyle, DataPoint3D prevDataPointEx, float positionZ, float depth, ArrayList points, int pointIndex, int pointLoopIndex, float tension, DrawingOperationTypes operationType, LineSegmentType surfaceSegmentType, float topDarkening, float bottomDarkening);
    protected virtual GraphicsPath Draw3DSurface(DataPoint3D firstPoint, DataPoint3D secondPoint, bool reversed, ChartArea area, ChartGraphics graph, Matrix3D matrix, LightStyle lightStyle, DataPoint3D prevDataPointEx, float positionZ, float depth, ArrayList points, int pointIndex, int pointLoopIndex, float tension, DrawingOperationTypes operationType, LineSegmentType surfaceSegmentType, float topDarkening, float bottomDarkening, PointF thirdPointPosition, PointF fourthPointPosition, bool clippedSegment, bool clipOnTop, bool clipOnBottom);
    protected virtual void Dispose(bool disposing);
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.PieChart : object {
    private bool _labelsFit;
    private float _sizeCorrection;
    private bool _sliceExploded;
    private bool _labelsOverlap;
    internal LabelColumn labelColumnLeft;
    internal LabelColumn labelColumnRight;
    private ArrayList _labelsRectangles;
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool ZeroCrossing { get; }
    public bool DataPointsInLegend { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public int YValuesPerPoint { get; }
    public bool Doughnut { get; }
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public virtual bool get_RequireAxes();
    public sealed virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public virtual bool get_SideBySideSeries();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual bool get_Doughnut();
    internal static void PrepareData(Series series);
    internal static bool UnPrepareData(Series series);
    public sealed virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    private double MinimumRelativePieSize(ChartArea area);
    private void SizeCorrection(ChartGraphics graph, CommonElements common, ChartArea area);
    private void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, bool shadow, LabelsMode labels);
    public void DrawLabels(ChartGraphics graph, PointF middlePoint, SizeF relativeSize, float startAngle, float sweepAngle, DataPoint point, float doughnutRadius, bool exploded, ChartArea area, bool overlapTest, int pointIndex, Color pieLineColor);
    private RectangleF GetLabelRect(PointF labelPosition, ChartArea area, string text, StringFormat format, ChartGraphics graph, DataPoint point, bool leftOrientation);
    private PieLabelStyle GetLabelStyle(DataPoint point);
    public bool EstimateLabels(ChartGraphics graph, PointF middlePoint, SizeF relativeSize, float startAngle, float sweepAngle, DataPoint point, bool exploded, ChartArea area);
    private void Map(CommonElements common, DataPoint point, float startAngle, float sweepAngle, RectangleF rectangle, bool doughnut, float doughnutRadius, ChartGraphics graph, int pointIndex);
    private void CheckPaleteColors(DataPointCollection points);
    private bool PrepareLabels(RectangleF area);
    private void SortIntervals(Double[] startOfIntervals, Double[] endOfIntervals, Int32[] positinIndex);
    private void InsertOverlapLabel(RectangleF labelRect);
    private bool ArrangeOverlappingIntervals(Double[] startOfIntervals, Double[] endOfIntervals, double startArea, double endArea);
    private void ReduceEmptySpace(Double[] startOfIntervals, Double[] endOfIntervals, double reduction);
    private void ShiftIntervals(Double[] startOfIntervals, Double[] endOfIntervals, double startArea, double endArea);
    private void ShiftOverlappingIntervals(Double[] startOfIntervals, Double[] endOfIntervals);
    private void SpreadInterval(Double[] startOfIntervals, Double[] endOfIntervals, int splitIndex, double overlapShift);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    private void ProcessChartType3D(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, float pieWidth);
    private void Draw3DPie(int turn, ChartGraphics graph, DataPoint point, ChartArea area, RectangleF rectangle, float startAngle, float sweepAngle, float doughnutRadius, float pieWidth, bool sameBackFront, bool exploded, int pointIndex);
    private PointF[] GetPiePoints(ChartGraphics graph, ChartArea area, float pieWidth, RectangleF rectangle, float startAngle, float sweepAngle, bool relativeCoordinates, float doughnutRadius, bool exploded);
    private void DrawPieCurves(ChartGraphics graph, ChartArea area, DataPoint dataPoint, float startAngle, float sweepAngle, PointF[] points, SolidBrush brushWithoutLight, Pen pen, bool rightPosition, bool sameBackFront, int pointIndex);
    private bool DrawPieCurvesBigSlice(ChartGraphics graph, ChartArea area, DataPoint dataPoint, float startAngle, float sweepAngle, PointF[] points, Brush brush, Pen pen, bool rightPosition, bool sameBackFront, int pointIndex);
    private void DrawDoughnutCurves(ChartGraphics graph, ChartArea area, DataPoint dataPoint, float startAngle, float sweepAngle, PointF[] points, SolidBrush brushWithoutLight, Pen pen, bool rightPosition, bool sameBackFront, int pointIndex);
    private bool DrawDoughnutCurvesBigSlice(ChartGraphics graph, ChartArea area, DataPoint dataPoint, float startAngle, float sweepAngle, PointF[] points, Brush brush, Pen pen, bool rightPosition, bool sameBackFront, int pointIndex);
    private DataPoint[] PointOrder(Series series, ChartArea area, Single[]& newStartAngleList, Single[]& newSweepAngleList, Int32[]& newPointIndexList, Boolean& sameBackFrontPoint);
    private void SwitchPoints(int numOfPoints, DataPoint[]& points, Single[]& newStartAngleList, Single[]& newSweepAngleList, Int32[]& newPointIndexList, bool sameBackFront);
    private void InitPieSize(ChartGraphics graph, ChartArea area, RectangleF& pieRectangle, Single& pieWidth, DataPoint[] dataPoints, Single[] startAngleList, Single[] sweepAngleList, Series series, float labelLineSize);
    private void FillPieLabelOutside(ChartGraphics graph, ChartArea area, RectangleF pieRectangle, float pieWidth, DataPoint point, float startAngle, float sweepAngle, int pointIndx, float doughnutRadius, bool exploded);
    private void Draw3DOutsideLabels(ChartGraphics graph, ChartArea area, Pen pen, PointF[] points, DataPoint point, float midAngle, int pointIndex);
    private void Draw3DInsideLabels(ChartGraphics graph, PointF[] points, DataPoint point, int pointIndex);
    private string GetPointLabel(DataPoint point);
    private string GetLabelText(DataPoint point);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal enum System.Windows.Forms.DataVisualization.Charting.ChartTypes.PieLabelStyle : Enum {
    public int value__;
    public static PieLabelStyle Inside;
    public static PieLabelStyle Outside;
    public static PieLabelStyle Disabled;
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.PointAndFigureChart : RangeColumnChart {
    private static bool _customizeSubscribed;
    public string Name { get; }
    private static PointAndFigureChart();
    internal static void PrepareData(Series series);
    internal static bool UnPrepareData(Series series);
    private static void GetPriceRange(Series originalData, int yValueHighIndex, int yValueLowIndex, Double& minPrice, Double& maxPrice);
    private static double GetBoxSize(Series series, double minPrice, double maxPrice);
    private static double GetReversalAmount(Series series);
    private static void FillPointAndFigureData(Series series, Series originalData);
    private static void OnCustomize(object sender, EventArgs e);
    protected virtual void DrawColumn2D(ChartGraphics graph, Axis vAxis, RectangleF rectSize, DataPoint point, Series ser);
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.PointChart : object {
    internal bool alwaysDrawMarkers;
    internal int labelYValueIndex;
    internal bool autoLabelPosition;
    internal LabelAlignmentStyles labelPosition;
    internal bool indexedSeries;
    internal bool middleMarker;
    internal ArrayList label3DInfoList;
    [CompilerGeneratedAttribute]
private int <YValueIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Axis <VAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private Axis <HAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private CommonElements <Common>k__BackingField;
    [CompilerGeneratedAttribute]
private ChartArea <Area>k__BackingField;
    internal int YValueIndex { get; internal set; }
    internal Axis VAxis { get; internal set; }
    internal Axis HAxis { get; internal set; }
    internal CommonElements Common { get; internal set; }
    internal ChartArea Area { get; internal set; }
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ZeroCrossing { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public int YValuesPerPoint { get; }
    public double ShiftedX { get; public set; }
    public string ShiftedSerName { get; public set; }
    public PointChart(bool alwaysDrawMarkers);
    [CompilerGeneratedAttribute]
internal int get_YValueIndex();
    [CompilerGeneratedAttribute]
internal void set_YValueIndex(int value);
    [CompilerGeneratedAttribute]
internal Axis get_VAxis();
    [CompilerGeneratedAttribute]
internal void set_VAxis(Axis value);
    [CompilerGeneratedAttribute]
internal Axis get_HAxis();
    [CompilerGeneratedAttribute]
internal void set_HAxis(Axis value);
    [CompilerGeneratedAttribute]
internal CommonElements get_Common();
    [CompilerGeneratedAttribute]
internal void set_Common(CommonElements value);
    [CompilerGeneratedAttribute]
internal ChartArea get_Area();
    [CompilerGeneratedAttribute]
internal void set_Area(ChartArea value);
    public virtual string get_Name();
    public virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public virtual bool get_RequireAxes();
    public virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public virtual bool get_SideBySideSeries();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawPointMarker(ChartGraphics graph, Series series, DataPoint dataPoint, PointF point, MarkerStyle markerStyle, int markerSize, Color markerColor, Color markerBorderColor, int markerBorderSize, string markerImage, Color markerImageTransparentColor, int shadowSize, Color shadowColor, RectangleF imageScaleRect);
    private void SetHotRegions(CommonElements common, ChartGraphics graph, DataPoint point, SizeF markerSize, string seriesName, int pointIndex, MarkerStyle pointMarkerStyle, PointF markerPosition);
    private void DrawLabels(ChartArea area, ChartGraphics graph, CommonElements common, PointF markerPosition, int markerSize, DataPoint point, Series ser, int pointIndex);
    internal static RectangleF GetLabelPosition(ChartGraphics graph, PointF position, SizeF size, StringFormat format, bool adjustForDrawing);
    protected virtual void ProcessChartType3D(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    internal void ProcessSinglePoint3D(DataPoint3D pointEx, ChartGraphics graph, CommonElements common, ChartArea area);
    internal void DrawAccumulated3DLabels(ChartGraphics graph, CommonElements common, ChartArea area);
    protected virtual bool ShouldDrawMarkerOnViewEdgeX();
    protected virtual int GetMarkerBorderSize(DataPointCustomProperties point);
    protected virtual LabelAlignmentStyles GetAutoLabelPosition(Series series, int pointIndex);
    protected virtual SizeF GetMarkerSize(ChartGraphics graph, CommonElements common, ChartArea area, DataPoint point, int markerSize, string markerImage);
    public virtual double get_ShiftedX();
    public virtual void set_ShiftedX(double value);
    public virtual string get_ShiftedSerName();
    public virtual void set_ShiftedSerName(string value);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    internal double GetEmptyPointValue(DataPoint point, int pointIndex);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.PolarChart : RadarChart {
    public string Name { get; }
    public virtual string get_Name();
    public virtual bool RequireClosedFigure();
    public virtual bool XAxisCrossingSupported();
    public virtual bool XAxisLabelsSupported();
    public virtual bool RadialGridLinesSupported();
    public virtual int GetNumerOfSectors(ChartArea area, SeriesCollection seriesCollection);
    public virtual Single[] GetYAxisLocations(ChartArea area);
    protected virtual RadarDrawingStyle GetDrawingStyle(Series ser, DataPoint point);
    protected virtual PointF[] GetPointsPosition(ChartGraphics graph, ChartArea area, Series series);
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.PyramidChart : FunnelChart {
    public string Name { get; }
    public virtual string get_Name();
    protected virtual void GetPointWidthAndHeight(Series series, int pointIndex, float location, Single& height, Single& startWidth, Single& endWidth);
}
internal enum System.Windows.Forms.DataVisualization.Charting.ChartTypes.PyramidValueType : Enum {
    public int value__;
    public static PyramidValueType Linear;
    public static PyramidValueType Surface;
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.RadarChart : object {
    private bool _autoLabelPosition;
    private LabelAlignmentStyles _labelPosition;
    [CompilerGeneratedAttribute]
private CommonElements <Common>k__BackingField;
    [CompilerGeneratedAttribute]
private ChartArea <Area>k__BackingField;
    internal CommonElements Common { get; internal set; }
    internal ChartArea Area { get; internal set; }
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ZeroCrossing { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public int YValuesPerPoint { get; }
    [CompilerGeneratedAttribute]
internal CommonElements get_Common();
    [CompilerGeneratedAttribute]
internal void set_Common(CommonElements value);
    [CompilerGeneratedAttribute]
internal ChartArea get_Area();
    [CompilerGeneratedAttribute]
internal void set_Area(ChartArea value);
    public virtual string get_Name();
    public virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public virtual bool get_RequireAxes();
    public sealed virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public virtual bool get_SideBySideSeries();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual bool RequireClosedFigure();
    public virtual bool XAxisCrossingSupported();
    public virtual bool XAxisLabelsSupported();
    public virtual bool RadialGridLinesSupported();
    public virtual int GetNumerOfSectors(ChartArea area, SeriesCollection seriesCollection);
    public virtual Single[] GetYAxisLocations(ChartArea area);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    internal void AddSelectionPath(ChartArea area, GraphicsPath selectionPath, PointF[] dataPointPos, int firstPointIndex, int secondPointIndex, PointF centerPoint, int borderWidth);
    private PointF GetMiddlePoint(PointF p1, PointF p2);
    protected virtual SizeF GetMarkerSize(ChartGraphics graph, CommonElements common, ChartArea area, DataPoint point, int markerSize, string markerImage);
    protected virtual PointF[] GetPointsPosition(ChartGraphics graph, ChartArea area, Series series);
    internal void DrawLabels(ChartArea area, ChartGraphics graph, CommonElements common, PointF markerPosition, int markerSize, DataPoint point, Series ser, int pointIndex);
    protected virtual LabelAlignmentStyles GetAutoLabelPosition(ChartArea area, Series series, int pointIndex);
    protected virtual RadarDrawingStyle GetDrawingStyle(Series ser, DataPoint point);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    internal double GetEmptyPointValue(DataPoint point, int pointIndex);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal enum System.Windows.Forms.DataVisualization.Charting.ChartTypes.RadarDrawingStyle : Enum {
    public int value__;
    public static RadarDrawingStyle Area;
    public static RadarDrawingStyle Line;
    public static RadarDrawingStyle Marker;
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.RangeBarChart : BarChart {
    public string Name { get; }
    public bool ZeroCrossing { get; }
    public int YValuesPerPoint { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public virtual string get_Name();
    public virtual bool get_ZeroCrossing();
    public virtual int get_YValuesPerPoint();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.RangeChart : SplineChart {
    internal bool gradientFill;
    internal GraphicsPath areaBottomPath;
    protected GraphicsPath areaPath;
    private Series _series;
    internal PointF[] lowPoints;
    internal bool indexedBasedX;
    private float _thirdPointY2Value;
    private float _fourthPointY2Value;
    public string Name { get; }
    public int YValuesPerPoint { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public virtual string get_Name();
    public virtual int get_YValuesPerPoint();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual Image GetImage(ChartTypeRegistry registry);
    protected virtual float GetDefaultTension();
    protected virtual bool IsLineTensionSupported();
    private void FillLastSeriesGradient(ChartGraphics graph);
    protected virtual void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawLine(ChartGraphics graph, CommonElements common, DataPoint point, Series series, PointF[] points, int pointIndex, float tension);
    protected virtual GraphicsPath Draw3DSurface(ChartArea area, ChartGraphics graph, Matrix3D matrix, LightStyle lightStyle, DataPoint3D prevDataPointEx, float positionZ, float depth, ArrayList points, int pointIndex, int pointLoopIndex, float tension, DrawingOperationTypes operationType, float topDarkening, float bottomDarkening, PointF thirdPointPosition, PointF fourthPointPosition, bool clippedSegment);
    protected virtual GraphicsPath Draw3DSurface(DataPoint3D firstPoint, DataPoint3D secondPoint, bool reversed, ChartArea area, ChartGraphics graph, Matrix3D matrix, LightStyle lightStyle, DataPoint3D prevDataPointEx, float positionZ, float depth, ArrayList points, int pointIndex, int pointLoopIndex, float tension, DrawingOperationTypes operationType, LineSegmentType surfaceSegmentType, float topDarkening, float bottomDarkening, PointF thirdPointPosition, PointF fourthPointPosition, bool clippedSegment, bool clipOnTop, bool clipOnBottom);
    protected virtual void GetTopSurfaceVisibility(ChartArea area, DataPoint3D firstPoint, DataPoint3D secondPoint, bool upSideDown, float positionZ, float depth, Matrix3D matrix, SurfaceNames& visibleSurfaces);
    protected virtual void GetBottomPointsPosition(CommonElements common, ChartArea area, float axisPosition, DataPoint3D& firstPoint, DataPoint3D& secondPoint, PointF& thirdPoint, PointF& fourthPoint);
    internal GraphicsPath Draw3DSplinePolygon(ChartGraphics graph, ChartArea area, float positionZ, Color backColor, Color borderColor, int borderWidth, DataPoint3D firstPoint, DataPoint3D secondPoint, DataPoint3D thirdPoint, DataPoint3D fourthPoint, ArrayList points, float tension, DrawingOperationTypes operationType, LineSegmentType lineSegmentType, bool forceThinBorder);
    protected virtual void Dispose(bool disposing);
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.RangeColumnChart : ColumnChart {
    public string Name { get; }
    public bool ZeroCrossing { get; }
    public int YValuesPerPoint { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public virtual string get_Name();
    public virtual bool get_ZeroCrossing();
    public virtual int get_YValuesPerPoint();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    protected virtual void DrawLabel(ChartArea area, ChartGraphics graph, CommonElements common, RectangleF columnPosition, DataPoint point, Series series, int pointIndex);
    protected virtual void ProcessSinglePoint3D(DataPoint3D pointEx, bool selection, ChartGraphics graph, CommonElements common, ChartArea area, RectangleF columnPosition, int pointIndex);
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.RenkoChart : object {
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ZeroCrossing { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public int YValuesPerPoint { get; }
    internal static void PrepareData(Series series);
    internal static bool UnPrepareData(Series series);
    private static double GetBoxSize(Series series, Series originalData, int yValueIndex);
    private static void FillRenkoData(Series series, Series originalData);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    public virtual string get_Name();
    public virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public virtual bool get_RequireAxes();
    public sealed virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public sealed virtual bool get_SideBySideSeries();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.SplineAreaChart : AreaChart {
    public string Name { get; }
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
    protected virtual float GetDefaultTension();
    protected virtual bool IsLineTensionSupported();
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.SplineChart : LineChart {
    public string Name { get; }
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
    protected virtual bool IsLineTensionSupported();
    protected virtual PointF[] GetPointsPosition(ChartGraphics graph, Series series, bool indexedSeries);
    protected virtual float GetDefaultTension();
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.SplineRangeChart : RangeChart {
    public string Name { get; }
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
    protected virtual float GetDefaultTension();
    protected virtual bool IsLineTensionSupported();
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.StackedAreaChart : AreaChart {
    protected GraphicsPath areaBottomPath;
    protected double prevPosY;
    protected double prevNegY;
    protected double prevPositionX;
    protected bool hundredPercentStacked;
    public string Name { get; }
    public bool Stacked { get; }
    protected virtual float GetDefaultTension();
    public virtual string get_Name();
    public virtual bool get_Stacked();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual GraphicsPath Draw3DSurface(ChartArea area, ChartGraphics graph, Matrix3D matrix, LightStyle lightStyle, DataPoint3D prevDataPointEx, float positionZ, float depth, ArrayList points, int pointIndex, int pointLoopIndex, float tension, DrawingOperationTypes operationType, float topDarkening, float bottomDarkening, PointF thirdPointPosition, PointF fourthPointPosition, bool clippedSegment);
    protected virtual void GetTopSurfaceVisibility(ChartArea area, DataPoint3D firstPoint, DataPoint3D secondPoint, bool upSideDown, float positionZ, float depth, Matrix3D matrix, SurfaceNames& visibleSurfaces);
    protected virtual void GetBottomPointsPosition(CommonElements common, ChartArea area, float axisPosition, DataPoint3D& firstPoint, DataPoint3D& secondPoint, PointF thirdPointPosition, PointF fourthPointPosition, PointF& thirdPoint, PointF& fourthPoint);
    protected virtual int GetPointLoopNumber(bool selection, ArrayList pointsArray);
    private void DrawLabels3D(ChartArea area, ChartGraphics graph, CommonElements common, DataPoint3D pointEx, float positionZ, float depth);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    protected virtual void Dispose(bool disposing);
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.StackedBarChart : object {
    protected double prevPosY;
    protected double prevNegY;
    protected bool hundredPercentStacked;
    internal bool stackGroupNameUsed;
    internal ArrayList stackGroupNames;
    internal string currentStackGroup;
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool ZeroCrossing { get; }
    public bool DataPointsInLegend { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public int YValuesPerPoint { get; }
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public sealed virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public sealed virtual bool get_RequireAxes();
    public sealed virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public sealed virtual bool get_SupportLogarithmicAxes();
    public sealed virtual bool get_SwitchValueAxes();
    public sealed virtual bool get_SideBySideSeries();
    public sealed virtual bool get_ZeroCrossing();
    public sealed virtual bool get_DataPointsInLegend();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public sealed virtual bool get_ApplyPaletteColorsToPoints();
    public sealed virtual LegendImageStyle GetLegendImageStyle(Series series);
    public sealed virtual int get_YValuesPerPoint();
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    private void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, bool shadow, bool labels, Series seriesToDraw);
    public void DrawLabels(CommonElements common, ChartGraphics graph, ChartArea area, DataPoint point, int pointIndex, Series series, RectangleF rectangle);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    private void ProcessChartType3D(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, bool drawLabels, Series seriesToDraw);
    private void DrawLabels3D(ChartArea area, ChartGraphics graph, CommonElements common, RectangleF rectSize, DataPoint3D pointEx, Series ser, double barStartPosition, double barSize, double width, int pointIndex);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.StackedColumnChart : object {
    protected double prevPosY;
    protected double prevNegY;
    protected bool hundredPercentStacked;
    internal bool stackGroupNameUsed;
    internal ArrayList stackGroupNames;
    internal string currentStackGroup;
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public int YValuesPerPoint { get; }
    public bool ZeroCrossing { get; }
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public virtual bool get_RequireAxes();
    public virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public sealed virtual bool get_SideBySideSeries();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual bool get_ZeroCrossing();
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    private void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, bool shadow, bool labels, Series seriesToDraw);
    internal static Series[] GetSeriesByStackedGroupName(CommonElements common, string groupName, string chartTypeName, string chartAreaName);
    internal static string GetSeriesStackGroupName(Series series);
    internal static bool IsSeriesStackGroupNameSupported(Series series);
    public void DrawLabels(CommonElements common, ChartGraphics graph, ChartArea area, DataPoint point, int pointIndex, Series series, RectangleF rectangle);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    private void ProcessChartType3D(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, bool labels, Series seriesToDraw);
    internal void DrawLabels3D(CommonElements common, ChartGraphics graph, ChartArea area, DataPoint3D pointEx, int pointIndex, Series series, RectangleF rectangle);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.StepLineChart : LineChart {
    public string Name { get; }
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
    protected virtual void DrawLine(ChartGraphics graph, CommonElements common, DataPoint point, Series series, PointF[] points, int pointIndex, float tension);
    protected virtual GraphicsPath Draw3DSurface(ChartArea area, ChartGraphics graph, Matrix3D matrix, LightStyle lightStyle, DataPoint3D prevDataPointEx, float positionZ, float depth, ArrayList points, int pointIndex, int pointLoopIndex, float tension, DrawingOperationTypes operationType, float topDarkening, float bottomDarkening, PointF thirdPointPosition, PointF fourthPointPosition, bool clippedSegment);
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.StockChart : object {
    protected StockOpenCloseMarkStyle openCloseStyle;
    protected bool forceCandleStick;
    [CompilerGeneratedAttribute]
private Axis <VAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private Axis <HAxis>k__BackingField;
    internal Axis VAxis { get; internal set; }
    internal Axis HAxis { get; internal set; }
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ZeroCrossing { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public int YValuesPerPoint { get; }
    public StockChart(StockOpenCloseMarkStyle style);
    [CompilerGeneratedAttribute]
internal Axis get_VAxis();
    [CompilerGeneratedAttribute]
internal void set_VAxis(Axis value);
    [CompilerGeneratedAttribute]
internal Axis get_HAxis();
    [CompilerGeneratedAttribute]
internal void set_HAxis(Axis value);
    public virtual string get_Name();
    public virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public virtual bool get_RequireAxes();
    public sealed virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public sealed virtual bool get_SideBySideSeries();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawOpenCloseMarks(ChartGraphics graph, ChartArea area, Series ser, DataPoint point, float xPosition, float width);
    protected virtual void DrawLabel(CommonElements common, ChartArea area, ChartGraphics graph, Series ser, DataPoint point, PointF position, int pointIndex);
    protected virtual void ProcessChartType3D(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawOpenCloseMarks3D(ChartGraphics graph, ChartArea area, Series ser, DataPoint point, float xPosition, float width, float zPosition, float depth);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal enum System.Windows.Forms.DataVisualization.Charting.ChartTypes.StockOpenCloseMarkStyle : Enum {
    public int value__;
    public static StockOpenCloseMarkStyle Line;
    public static StockOpenCloseMarkStyle Triangle;
    public static StockOpenCloseMarkStyle Candlestick;
}
internal class System.Windows.Forms.DataVisualization.Charting.ChartTypes.ThreeLineBreakChart : object {
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ZeroCrossing { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public int YValuesPerPoint { get; }
    internal static void PrepareData(Series series);
    internal static bool UnPrepareData(Series series);
    private static void FillThreeLineBreakData(Series series, Series originalData);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    public virtual string get_Name();
    public virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public virtual bool get_RequireAxes();
    public sealed virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public sealed virtual bool get_SideBySideSeries();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public enum System.Windows.Forms.DataVisualization.Charting.ChartValueType : Enum {
    public int value__;
    public static ChartValueType Auto;
    public static ChartValueType Double;
    public static ChartValueType Single;
    public static ChartValueType Int32;
    public static ChartValueType Int64;
    public static ChartValueType UInt32;
    public static ChartValueType UInt64;
    public static ChartValueType String;
    public static ChartValueType DateTime;
    public static ChartValueType Date;
    public static ChartValueType Time;
    public static ChartValueType DateTimeOffset;
}
internal enum System.Windows.Forms.DataVisualization.Charting.CircularAxisLabelsStyle : Enum {
    public int value__;
    public static CircularAxisLabelsStyle Auto;
    public static CircularAxisLabelsStyle Circular;
    public static CircularAxisLabelsStyle Horizontal;
    public static CircularAxisLabelsStyle Radial;
}
internal class System.Windows.Forms.DataVisualization.Charting.CircularChartAreaAxis : object {
    internal float AxisPosition;
    internal string Title;
    internal Color TitleForeColor;
    internal CircularChartAreaAxis(float axisPosition);
}
internal class System.Windows.Forms.DataVisualization.Charting.ColorArrayConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public static string ColorArrayToString(Color[] colors);
    public static Color[] StringToColorArray(string colorNames);
}
internal enum System.Windows.Forms.DataVisualization.Charting.CommonCustomProperties : Enum {
    public int value__;
    public static CommonCustomProperties PointName;
    public static CommonCustomProperties Label;
    public static CommonCustomProperties AxisLabel;
    public static CommonCustomProperties LabelFormat;
    public static CommonCustomProperties IsValueShownAsLabel;
    public static CommonCustomProperties Color;
    public static CommonCustomProperties BorderColor;
    public static CommonCustomProperties BorderDashStyle;
    public static CommonCustomProperties BorderWidth;
    public static CommonCustomProperties BackImage;
    public static CommonCustomProperties BackImageWrapMode;
    public static CommonCustomProperties BackImageAlignment;
    public static CommonCustomProperties BackImageTransparentColor;
    public static CommonCustomProperties BackGradientStyle;
    public static CommonCustomProperties BackSecondaryColor;
    public static CommonCustomProperties BackHatchStyle;
    public static CommonCustomProperties Font;
    public static CommonCustomProperties LabelForeColor;
    public static CommonCustomProperties LabelAngle;
    public static CommonCustomProperties MarkerStyle;
    public static CommonCustomProperties MarkerSize;
    public static CommonCustomProperties MarkerImage;
    public static CommonCustomProperties MarkerImageTransparentColor;
    public static CommonCustomProperties MarkerColor;
    public static CommonCustomProperties MarkerBorderColor;
    public static CommonCustomProperties MarkerBorderWidth;
    public static CommonCustomProperties MapAreaAttributes;
    public static CommonCustomProperties PostBackValue;
    public static CommonCustomProperties MapAreaType;
    public static CommonCustomProperties LegendMapAreaType;
    public static CommonCustomProperties LabelMapAreaType;
    public static CommonCustomProperties Url;
    public static CommonCustomProperties ToolTip;
    public static CommonCustomProperties Tag;
    public static CommonCustomProperties LegendUrl;
    public static CommonCustomProperties LegendToolTip;
    public static CommonCustomProperties LegendText;
    public static CommonCustomProperties LegendMapAreaAttributes;
    public static CommonCustomProperties LegendPostBackValue;
    public static CommonCustomProperties IsVisibleInLegend;
    public static CommonCustomProperties LabelUrl;
    public static CommonCustomProperties LabelToolTip;
    public static CommonCustomProperties LabelMapAreaAttributes;
    public static CommonCustomProperties LabelPostBackValue;
    public static CommonCustomProperties LabelBorderColor;
    public static CommonCustomProperties LabelBorderDashStyle;
    public static CommonCustomProperties LabelBorderWidth;
    public static CommonCustomProperties LabelBackColor;
}
internal class System.Windows.Forms.DataVisualization.Charting.CommonElements : object {
    private Chart _chart;
    private ChartImage _chartPicture;
    internal ChartGraphics graph;
    internal IServiceContainer container;
    internal bool processModePaint;
    internal bool processModeRegions;
    private int _width;
    private int _height;
    internal DataManager DataManager { get; }
    public bool ProcessModePaint { get; }
    public bool ProcessModeRegions { get; }
    public HotRegionsList HotRegionsList { get; }
    public DataManipulator DataManipulator { get; }
    internal ImageLoader ImageLoader { get; }
    internal Chart Chart { get; }
    internal ChartTypeRegistry ChartTypeRegistry { get; }
    internal BorderTypeRegistry BorderTypeRegistry { get; }
    internal FormulaRegistry FormulaRegistry { get; }
    internal ChartImage ChartPicture { get; }
    internal int Width { get; internal set; }
    internal int Height { get; internal set; }
    internal CommonElements(IServiceContainer container);
    internal DataManager get_DataManager();
    public bool get_ProcessModePaint();
    public bool get_ProcessModeRegions();
    public HotRegionsList get_HotRegionsList();
    public DataManipulator get_DataManipulator();
    internal ImageLoader get_ImageLoader();
    internal Chart get_Chart();
    internal ChartTypeRegistry get_ChartTypeRegistry();
    internal BorderTypeRegistry get_BorderTypeRegistry();
    internal FormulaRegistry get_FormulaRegistry();
    internal ChartImage get_ChartPicture();
    internal int get_Width();
    internal void set_Width(int value);
    internal int get_Height();
    internal void set_Height(int value);
    internal static double ParseDouble(string stringToParse);
    internal static double ParseDouble(string stringToParse, bool throwException);
    internal static float ParseFloat(string stringToParse);
}
public enum System.Windows.Forms.DataVisualization.Charting.CompareMethod : Enum {
    public int value__;
    public static CompareMethod MoreThan;
    public static CompareMethod LessThan;
    public static CompareMethod EqualTo;
    public static CompareMethod MoreThanOrEqualTo;
    public static CompareMethod LessThanOrEqualTo;
    public static CompareMethod NotEqualTo;
}
internal static class System.Windows.Forms.DataVisualization.Charting.Constants : object {
    public static string AutoValue;
    public static string NotSetValue;
    public static string MinValue;
    public static string MaxValue;
}
internal static class System.Windows.Forms.DataVisualization.Charting.ConverterHelper : object {
    public static Chart GetChartFromContext(ITypeDescriptorContext context);
}
[FlagsAttribute]
internal enum System.Windows.Forms.DataVisualization.Charting.COPCoordinates : Enum {
    public int value__;
    public static COPCoordinates X;
    public static COPCoordinates Y;
    public static COPCoordinates Z;
}
[DefaultPropertyAttribute("Enabled")]
[SRDescriptionAttribute("DescriptionAttributeCursor_Cursor")]
public class System.Windows.Forms.DataVisualization.Charting.Cursor : object {
    private ChartArea _chartArea;
    private AxisName _attachedToXAxis;
    private bool _isUserEnabled;
    private bool _isUserSelectionEnabled;
    private bool _autoScroll;
    private Color _lineColor;
    private int _lineWidth;
    private ChartDashStyle _lineDashStyle;
    private Color _selectionColor;
    private AxisType _axisType;
    private double _position;
    private double _selectionStart;
    private double _selectionEnd;
    private double _interval;
    private DateTimeIntervalType _intervalType;
    private double _intervalOffset;
    private DateTimeIntervalType _intervalOffsetType;
    private Axis _axis;
    private PointF _userSelectionStart;
    private bool _drawSelection;
    private bool _fireUserChangingEvent;
    private bool _fireUserChangedEvent;
    private MouseEventArgs _mouseMoveArguments;
    private Timer _scrollTimer;
    private bool _viewScrolledOnMouseMove;
    [TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.DoubleDateNanValueConverter")]
[SRDescriptionAttribute("DescriptionAttributeCursor_Position")]
[ParenthesizePropertyNameAttribute("True")]
[SRCategoryAttribute("CategoryAttributeBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("не число")]
public double Position { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.DoubleDateNanValueConverter")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeCursor_SelectionStart")]
[SRCategoryAttribute("CategoryAttributeBehavior")]
[BindableAttribute("True")]
public double SelectionStart { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.DoubleDateNanValueConverter")]
[SRCategoryAttribute("CategoryAttributeBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeCursor_SelectionEnd")]
public double SelectionEnd { get; public set; }
    [SRCategoryAttribute("CategoryAttributeBehavior")]
[SRDescriptionAttribute("DescriptionAttributeCursor_UserEnabled")]
[BindableAttribute("True")]
[DefaultValueAttribute("False")]
public bool IsUserEnabled { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeCursor_UserSelection")]
[SRCategoryAttribute("CategoryAttributeBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("False")]
public bool IsUserSelectionEnabled { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CategoryAttributeBehavior")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeCursor_AutoScroll")]
public bool AutoScroll { get; public set; }
    [SRCategoryAttribute("CategoryAttributeBehavior")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeCursor_AxisType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AxisType AxisType { get; public set; }
    [BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeBehavior")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeCursor_Interval")]
public double Interval { get; public set; }
    [BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeBehavior")]
[SRDescriptionAttribute("DescriptionAttributeCursor_IntervalType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DateTimeIntervalType IntervalType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeBehavior")]
[SRDescriptionAttribute("DescriptionAttributeCursor_IntervalOffset")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
public double IntervalOffset { get; public set; }
    [BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeCursor_IntervalOffsetType")]
public DateTimeIntervalType IntervalOffsetType { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Red")]
[SRDescriptionAttribute("DescriptionAttributeLineColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public Color LineColor { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLineDashStyle")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public ChartDashStyle LineDashStyle { get; public set; }
    [DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeLineWidth")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public int LineWidth { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeCursor_SelectionColor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "LightGray")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public Color SelectionColor { get; public set; }
    internal void Initialize(ChartArea chartArea, AxisName attachedToXAxis);
    public double get_Position();
    public void set_Position(double value);
    public double get_SelectionStart();
    public void set_SelectionStart(double value);
    public double get_SelectionEnd();
    public void set_SelectionEnd(double value);
    public bool get_IsUserEnabled();
    public void set_IsUserEnabled(bool value);
    public bool get_IsUserSelectionEnabled();
    public void set_IsUserSelectionEnabled(bool value);
    public bool get_AutoScroll();
    public void set_AutoScroll(bool value);
    public AxisType get_AxisType();
    public void set_AxisType(AxisType value);
    public double get_Interval();
    public void set_Interval(double value);
    public DateTimeIntervalType get_IntervalType();
    public void set_IntervalType(DateTimeIntervalType value);
    public double get_IntervalOffset();
    public void set_IntervalOffset(double value);
    public DateTimeIntervalType get_IntervalOffsetType();
    public void set_IntervalOffsetType(DateTimeIntervalType value);
    public Color get_LineColor();
    public void set_LineColor(Color value);
    public ChartDashStyle get_LineDashStyle();
    public void set_LineDashStyle(ChartDashStyle value);
    public int get_LineWidth();
    public void set_LineWidth(int value);
    public Color get_SelectionColor();
    public void set_SelectionColor(Color value);
    internal void Paint(ChartGraphics graph);
    public void SetCursorPosition(double newPosition);
    public void SetCursorPixelPosition(PointF point, bool roundToBoundary);
    public void SetSelectionPosition(double newStart, double newEnd);
    public void SetSelectionPixelPosition(PointF startPoint, PointF endPoint, bool roundToBoundary);
    internal double RoundPosition(double cursorPosition);
    internal void Cursor_MouseDown(object sender, MouseEventArgs e);
    internal void Cursor_MouseUp(object sender, MouseEventArgs e);
    internal void Cursor_MouseMove(MouseEventArgs e, Boolean& handled);
    private void SelectionScrollingTimerEventProcessor(object myObject, EventArgs myEventArgs);
    private Chart GetChartObject();
    private RectangleF GetSelectionRect(RectangleF plotAreaPosition);
    private RectangleF GetOppositeSelectionRect(RectangleF plotAreaPosition);
    private double PositionToCursorPosition(PointF position);
    private PointF GetPositionInPlotArea(PointF point, bool roundToBoundary);
    private void Invalidate(bool invalidateArea);
    internal Axis GetAxis();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class System.Windows.Forms.DataVisualization.Charting.CursorEventArgs : EventArgs {
    private ChartArea _chartArea;
    private Axis _axis;
    private double _newPosition;
    private double _newSelectionStart;
    private double _newSelectionEnd;
    [SRDescriptionAttribute("DescriptionAttributeChartArea")]
public ChartArea ChartArea { get; }
    [SRDescriptionAttribute("DescriptionAttributeAxis")]
public Axis Axis { get; }
    [SRDescriptionAttribute("DescriptionAttributeCursorEventArgs_NewPosition")]
public double NewPosition { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeCursorEventArgs_NewSelectionStart")]
public double NewSelectionStart { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeCursorEventArgs_NewSelectionEnd")]
public double NewSelectionEnd { get; public set; }
    public CursorEventArgs(ChartArea chartArea, Axis axis, double newPosition);
    public CursorEventArgs(ChartArea chartArea, Axis axis, double newSelectionStart, double newSelectionEnd);
    public ChartArea get_ChartArea();
    public Axis get_Axis();
    public double get_NewPosition();
    public void set_NewPosition(double value);
    public double get_NewSelectionStart();
    public void set_NewSelectionStart(double value);
    public double get_NewSelectionEnd();
    public void set_NewSelectionEnd(double value);
}
public class System.Windows.Forms.DataVisualization.Charting.CustomizeLegendEventArgs : EventArgs {
    private LegendItemsCollection _legendItems;
    private string _legendName;
    public string LegendName { get; }
    public LegendItemsCollection LegendItems { get; }
    public CustomizeLegendEventArgs(LegendItemsCollection legendItems);
    public CustomizeLegendEventArgs(LegendItemsCollection legendItems, string legendName);
    public string get_LegendName();
    public LegendItemsCollection get_LegendItems();
}
[DefaultPropertyAttribute("Text")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_CustomLabel")]
public class System.Windows.Forms.DataVisualization.Charting.CustomLabel : ChartNamedElement {
    private double _fromPosition;
    private double _toPosition;
    private string _text;
    private LabelMarkStyle _labelMark;
    private Color _foreColor;
    private Color _markColor;
    private int _labelRowIndex;
    private GridTickTypes _gridTick;
    internal bool customLabel;
    private string _image;
    private Color _imageTransparentColor;
    private string _tooltip;
    private Axis _axis;
    internal IChartElement Parent { get; internal set; }
    [SerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Axis Axis { get; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[DefaultValueAttribute("")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeToolTip")]
public string ToolTip { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeCustomLabel_Image")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ImageValueEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
public string Image { get; public set; }
    [BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeImageTransparentColor")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color ImageTransparentColor { get; public set; }
    [SerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_Name")]
[DefaultValueAttribute("Custom LabelStyle")]
[DesignerSerializationVisibilityAttribute("0")]
[DesignOnlyAttribute("True")]
public string Name { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeCustomLabel_GridTicks")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.FlagsEnumUITypeEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public GridTickTypes GridTicks { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.AxisLabelDateValueConverter")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_From")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
public double FromPosition { get; public set; }
    [BindableAttribute("True")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.AxisLabelDateValueConverter")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_To")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public double ToPosition { get; public set; }
    [DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_Text")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public string Text { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeForeColor")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color ForeColor { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_MarkColor")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color MarkColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_RowIndex")]
public int RowIndex { get; public set; }
    [BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_LabelMark")]
public LabelMarkStyle LabelMark { get; public set; }
    public CustomLabel(double fromPosition, double toPosition, string text, int labelRow, LabelMarkStyle markStyle);
    public CustomLabel(double fromPosition, double toPosition, string text, int labelRow, LabelMarkStyle markStyle, GridTickTypes gridTick);
    public CustomLabel Clone();
    internal virtual IChartElement get_Parent();
    internal virtual void set_Parent(IChartElement value);
    public Axis get_Axis();
    public void set_ToolTip(string value);
    public string get_ToolTip();
    public string get_Image();
    public void set_Image(string value);
    public Color get_ImageTransparentColor();
    public void set_ImageTransparentColor(Color value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public GridTickTypes get_GridTicks();
    public void set_GridTicks(GridTickTypes value);
    public double get_FromPosition();
    public void set_FromPosition(double value);
    public double get_ToPosition();
    public void set_ToPosition(double value);
    public string get_Text();
    public void set_Text(string value);
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public Color get_MarkColor();
    public void set_MarkColor(Color value);
    public int get_RowIndex();
    public void set_RowIndex(int value);
    public LabelMarkStyle get_LabelMark();
    public void set_LabelMark(LabelMarkStyle value);
}
[SRDescriptionAttribute("DescriptionAttributeCustomLabelsCollection_CustomLabelsCollection")]
public class System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection : ChartElementCollection`1<CustomLabel> {
    internal Axis Axis { get; }
    internal CustomLabelsCollection(Axis axis);
    internal Axis get_Axis();
    public CustomLabel Add(double fromPosition, double toPosition, string text);
    internal CustomLabel Add(double fromPosition, double toPosition, string text, bool customLabel);
    public CustomLabel Add(double fromPosition, double toPosition, string text, int rowIndex, LabelMarkStyle markStyle);
    public CustomLabel Add(double fromPosition, double toPosition, string text, int rowIndex, LabelMarkStyle markStyle, GridTickTypes gridTick);
    public void Add(double labelsStep, DateTimeIntervalType intervalType, double min, double max, string format, int rowIndex, LabelMarkStyle markStyle);
    public void Add(double labelsStep, DateTimeIntervalType intervalType);
    public void Add(double labelsStep, DateTimeIntervalType intervalType, string format);
    public void Add(double labelsStep, DateTimeIntervalType intervalType, string format, int rowIndex, LabelMarkStyle markStyle);
}
[EditorBrowsableAttribute("1")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.CustomPropertiesTypeConverter")]
public class System.Windows.Forms.DataVisualization.Charting.CustomProperties : object {
    internal DataPointCustomProperties m_DataPointCustomProperties;
    internal DataPointCustomProperties DataPointCustomProperties { get; internal set; }
    internal CustomProperties(DataPointCustomProperties properties);
    internal virtual DataPointCustomProperties get_DataPointCustomProperties();
    internal virtual void set_DataPointCustomProperties(DataPointCustomProperties value);
    internal virtual string GetUserDefinedCustomProperties();
    internal virtual string GetUserDefinedCustomProperties(bool userDefined);
    internal virtual void SetUserDefinedAttributes(string val);
}
internal class System.Windows.Forms.DataVisualization.Charting.CustomPropertiesTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object obj, Attribute[] attributes);
    private bool IsApplicableCustomProperty(CustomPropertyInfo attrInfo, object obj);
    private bool IsDataPoint(object obj);
    private bool Is3DChartType(object obj);
    private Series[] GetSelectedSeries(object obj);
    private SeriesChartType[] GetSelectedChartTypes(object obj);
    private Attribute[] GetPropertyAttributes(CustomPropertyInfo attrInfo);
}
internal class System.Windows.Forms.DataVisualization.Charting.Data.DataManager : ChartElement {
    private SeriesCollection _series;
    internal IServiceContainer serviceContainer;
    private ChartColorPalette _colorPalette;
    private Color[] _paletteCustomColors;
    [BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeData")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.SeriesCollectionEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public SeriesCollection Series { get; }
    [BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributePalette")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ColorPaletteEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public ChartColorPalette Palette { get; public set; }
    [SerializationVisibilityAttribute("1")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.ColorArrayConverter")]
[DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("DescriptionAttributeDataManager_PaletteCustomColors")]
public Color[] PaletteCustomColors { get; public set; }
    public DataManager(IServiceContainer container);
    [EditorBrowsableAttribute("1")]
private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    internal void Initialize();
    internal virtual void Invalidate();
    private void ChartPicture_BeforePaint(object sender, ChartPaintEventArgs e);
    private void ChartPicture_AfterPaint(object sender, ChartPaintEventArgs e);
    internal void ApplyPaletteColors();
    internal void PrepareData(bool pointsApplyPaletteColors, String[] series);
    private bool IsPointSkipped(DataPoint point);
    internal int GetNumberOfPoints(String[] series);
    internal double GetMaxYValue(int valueIndex, String[] series);
    internal double GetMaxYWithRadiusValue(ChartArea area, String[] series);
    internal double GetMaxXWithRadiusValue(ChartArea area, String[] series);
    internal double GetMinXWithRadiusValue(ChartArea area, String[] series);
    internal double GetMaxYValue(String[] series);
    internal double GetMaxXValue(String[] series);
    internal void GetMinMaxXValue(Double& min, Double& max, String[] series);
    internal void GetMinMaxYValue(int valueIndex, Double& min, Double& max, String[] series);
    internal void GetMinMaxYValue(Double& min, Double& max, String[] series);
    internal void GetMinMaxYValue(ArrayList seriesList, Double& min, Double& max);
    internal double GetMaxStackedYValue(int valueIndex, String[] series);
    internal double GetMaxUnsignedStackedYValue(int valueIndex, String[] series);
    internal double GetMaxStackedXValue(String[] series);
    internal double GetMinYValue(int valueIndex, String[] series);
    internal double GetMinYWithRadiusValue(ChartArea area, String[] series);
    internal double GetMinYValue(String[] series);
    internal double GetMinXValue(String[] series);
    internal double GetMinStackedYValue(int valueIndex, String[] series);
    internal double GetMinUnsignedStackedYValue(int valueIndex, String[] series);
    internal double GetMinStackedXValue(String[] series);
    internal double GetMaxHundredPercentStackedYValue(bool supportNegative, String[] series);
    internal double GetMinHundredPercentStackedYValue(bool supportNegative, String[] series);
    public SeriesCollection get_Series();
    public ChartColorPalette get_Palette();
    public void set_Palette(ChartColorPalette value);
    public void set_PaletteCustomColors(Color[] value);
    public Color[] get_PaletteCustomColors();
    protected virtual void Dispose(bool disposing);
}
public class System.Windows.Forms.DataVisualization.Charting.DataFormula : object {
    internal static string IndexedSeriesLabelsSourceAttr;
    private bool _isEmptyPointIgnored;
    private String[] _extraParameters;
    private bool _zeroXValues;
    private StatisticFormula _statistics;
    internal CommonElements Common;
    public bool IsEmptyPointIgnored { get; public set; }
    public bool IsStartFromFirst { get; public set; }
    public StatisticFormula Statistics { get; }
    internal void Formula(string formulaName, string parameters, string inputSeries, string outputSeries);
    private void CopyAxisLabels(Series[] inSeries, Series[] outSeries);
    internal void SetDoubleArray(Series[] outputSeries, Int32[] valueIndex, Double[][] outputValues, String[][] outputLabels);
    private void ConvertToArrays(string inputString, Series[]& seiesArray, Int32[]& valueArray, bool inputSeries);
    private void GetDoubleArray(Series[] inputSeries, Int32[] valueIndex, Double[][]& output);
    private void GetDoubleArray(Series[] inputSeries, Int32[] valueIndex, Double[][]& output, bool ignoreZeroX);
    public void CopySeriesValues(string inputSeries, string outputSeries);
    private void RemoveEmptyValues(Double[][] input, Double[][]& output);
    private void SplitParameters(string parameters, String[]& parameterList);
    private static bool DifferentNumberOfSeries(Double[][] input);
    internal void CheckXValuesAlignment(Series[] series);
    public void FinancialFormula(FinancialFormula formulaName, Series inputSeries);
    public void FinancialFormula(FinancialFormula formulaName, Series inputSeries, Series outputSeries);
    public void FinancialFormula(FinancialFormula formulaName, string parameters, Series inputSeries, Series outputSeries);
    public void FinancialFormula(FinancialFormula formulaName, string inputSeries);
    public void FinancialFormula(FinancialFormula formulaName, string inputSeries, string outputSeries);
    public void FinancialFormula(FinancialFormula formulaName, string parameters, string inputSeries, string outputSeries);
    public bool get_IsEmptyPointIgnored();
    public void set_IsEmptyPointIgnored(bool value);
    public bool get_IsStartFromFirst();
    public void set_IsStartFromFirst(bool value);
    public StatisticFormula get_Statistics();
}
public class System.Windows.Forms.DataVisualization.Charting.DataManipulator : DataFormula {
    private bool _filterSetEmptyPoints;
    private bool _filterMatchedPoints;
    public bool FilterSetEmptyPoints { get; public set; }
    public bool FilterMatchedPoints { get; public set; }
    internal Series[] ConvertToSeriesArray(object obj, bool createNew);
    private void Sort(PointSortOrder pointSortOrder, string sortBy, Series[] series);
    private void Sort(IComparer`1<DataPoint> comparer, Series[] series);
    public void Sort(PointSortOrder pointSortOrder, string sortBy, string seriesName);
    public void Sort(PointSortOrder pointSortOrder, Series series);
    public void Sort(PointSortOrder pointSortOrder, string seriesName);
    public void Sort(PointSortOrder pointSortOrder, string sortBy, Series series);
    public void Sort(IComparer`1<DataPoint> comparer, Series series);
    public void Sort(IComparer`1<DataPoint> comparer, string seriesName);
    private void InsertEmptyPoints(double interval, IntervalType intervalType, double intervalOffset, IntervalType intervalOffsetType, double fromXValue, double toXValue, Series[] series);
    private DateTimeIntervalType ConvertIntervalType(IntervalType type);
    public void InsertEmptyPoints(double interval, IntervalType intervalType, Series series);
    public void InsertEmptyPoints(double interval, IntervalType intervalType, string seriesName);
    public void InsertEmptyPoints(double interval, IntervalType intervalType, double intervalOffset, IntervalType intervalOffsetType, string seriesName);
    public void InsertEmptyPoints(double interval, IntervalType intervalType, double intervalOffset, IntervalType intervalOffsetType, Series series);
    public void InsertEmptyPoints(double interval, IntervalType intervalType, double intervalOffset, IntervalType intervalOffsetType, double fromXValue, double toXValue, string seriesName);
    public void InsertEmptyPoints(double interval, IntervalType intervalType, double intervalOffset, IntervalType intervalOffsetType, double fromXValue, double toXValue, Series series);
    internal DataSet ExportSeriesValues(Series[] series);
    public DataSet ExportSeriesValues();
    public DataSet ExportSeriesValues(string seriesNames);
    public DataSet ExportSeriesValues(Series series);
    public bool get_FilterSetEmptyPoints();
    public void set_FilterSetEmptyPoints(bool value);
    public bool get_FilterMatchedPoints();
    public void set_FilterMatchedPoints(bool value);
    private void FilterTopN(int pointCount, Series[] inputSeries, Series[] outputSeries, string usingValue, bool getTopValues);
    private void Filter(IDataPointFilter filterInterface, Series[] inputSeries, Series[] outputSeries);
    private Int32[] ConvertElementIndexesToArray(string rangeElements);
    private bool CheckFilterElementCriteria(DateRangeType dateRange, Int32[] rangeElements, DataPoint point);
    public void Filter(DateRangeType dateRange, string rangeElements, string inputSeriesNames, string outputSeriesNames);
    public void Filter(DateRangeType dateRange, string rangeElements, Series inputSeries);
    public void Filter(DateRangeType dateRange, string rangeElements, Series inputSeries, Series outputSeries);
    public void Filter(DateRangeType dateRange, string rangeElements, string inputSeriesNames);
    public void Filter(CompareMethod compareMethod, double compareValue, Series inputSeries);
    public void Filter(CompareMethod compareMethod, double compareValue, Series inputSeries, Series outputSeries);
    public void Filter(CompareMethod compareMethod, double compareValue, Series inputSeries, Series outputSeries, string usingValue);
    public void Filter(CompareMethod compareMethod, double compareValue, string inputSeriesNames);
    public void Filter(CompareMethod compareMethod, double compareValue, string inputSeriesNames, string outputSeriesNames);
    public void Filter(CompareMethod compareMethod, double compareValue, string inputSeriesNames, string outputSeriesNames, string usingValue);
    public void FilterTopN(int pointCount, string inputSeriesNames, string outputSeriesNames, string usingValue, bool getTopValues);
    public void FilterTopN(int pointCount, Series inputSeries);
    public void FilterTopN(int pointCount, Series inputSeries, Series outputSeries);
    public void FilterTopN(int pointCount, Series inputSeries, Series outputSeries, string usingValue);
    public void FilterTopN(int pointCount, Series inputSeries, Series outputSeries, string usingValue, bool getTopValues);
    public void FilterTopN(int pointCount, string inputSeriesNames);
    public void FilterTopN(int pointCount, string inputSeriesNames, string outputSeriesNames);
    public void FilterTopN(int pointCount, string inputSeriesNames, string outputSeriesNames, string usingValue);
    public void Filter(IDataPointFilter filterInterface, Series inputSeries);
    public void Filter(IDataPointFilter filterInterface, Series inputSeries, Series outputSeries);
    public void Filter(IDataPointFilter filterInterface, string inputSeriesNames);
    public void Filter(IDataPointFilter filterInterface, string inputSeriesNames, string outputSeriesNames);
    private void GroupByAxisLabel(string formula, Series[] inputSeries, Series[] outputSeries);
    private void Group(string formula, double interval, IntervalType intervalType, double intervalOffset, IntervalType intervalOffsetType, Series[] inputSeries, Series[] outputSeries);
    private void ProcessPointValues(GroupingFunctionInfo[] functions, Double[] pointTempValues, Series series, DataPoint point, int pointIndex, int intervalFirstIndex, int intervalLastIndex, bool finalPass, Int32& numberOfEmptyPoints);
    private GroupingFunctionInfo[] GetGroupingFunctions(Series[] inputSeries, string formula, Int32& outputValuesNumber);
    private GroupingFunction ParseFormulaAndValueType(string formulaString, Int32& valueIndex);
    private void CheckSeriesArrays(Series[] inputSeries, Series[] outputSeries);
    public void Group(string formula, double interval, IntervalType intervalType, Series inputSeries);
    public void Group(string formula, double interval, IntervalType intervalType, string inputSeriesName);
    public void Group(string formula, double interval, IntervalType intervalType, double intervalOffset, IntervalType intervalOffsetType, Series inputSeries);
    public void Group(string formula, double interval, IntervalType intervalType, double intervalOffset, IntervalType intervalOffsetType, string inputSeriesName);
    public void GroupByAxisLabel(string formula, string inputSeriesName, string outputSeriesName);
    public void GroupByAxisLabel(string formula, Series inputSeries);
    public void GroupByAxisLabel(string formula, string inputSeriesName);
    public void Group(string formula, double interval, IntervalType intervalType, double intervalOffset, IntervalType intervalOffsetType, string inputSeriesName, string outputSeriesName);
    public void Group(string formula, double interval, IntervalType intervalType, Series inputSeries, Series outputSeries);
    public void Group(string formula, double interval, IntervalType intervalType, string inputSeriesName, string outputSeriesName);
    public void Group(string formula, double interval, IntervalType intervalType, double intervalOffset, IntervalType intervalOffsetType, Series inputSeries, Series outputSeries);
    public void GroupByAxisLabel(string formula, Series inputSeries, Series outputSeries);
}
[DefaultPropertyAttribute("YValues")]
[TypeConverterAttribute("System.Windows.Forms.Design.DataVisualization.Charting.DataPointConverter, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
[SRDescriptionAttribute("DescriptionAttributeDataPoint_DataPoint")]
public class System.Windows.Forms.DataVisualization.Charting.DataPoint : DataPointCustomProperties {
    private double _xValue;
    private Double[] _yValue;
    internal PointF positionRel;
    [DesignerSerializationVisibilityAttribute("0")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.DataPointValueConverter")]
[DefaultValueAttribute("System.Double", "0.0")]
[SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeDataPoint_XValue")]
public double XValue { get; public set; }
    [SerializationVisibilityAttribute("1")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.DoubleArrayConverter")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeDataPoint_YValues")]
[BindableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CategoryAttributeData")]
[EditorAttribute("System.Drawing.Design.UITypeEditor", "System.Drawing.Design.UITypeEditor")]
public Double[] YValues { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeDataPoint_Empty")]
public bool IsEmpty { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeDataPoint_Name")]
[SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public string Name { get; public set; }
    public DataPoint(Series series);
    public DataPoint(double xValue, double yValue);
    public DataPoint(double xValue, Double[] yValues);
    [EditorBrowsableAttribute("1")]
public DataPoint(double xValue, string yValues);
    internal void SetPointCustomProperty(object obj, string propertyName, string format);
    private double ConvertValue(object value);
    public void SetValueXY(object xValue, Object[] yValue);
    public void SetValueY(Object[] yValue);
    public DataPoint Clone();
    internal void ResizeYValueArray(int newSize);
    public double GetValueByName(string valueName);
    internal virtual string ReplaceKeywords(string strOriginal);
    private string RemoveOneKeyword(string strOriginal, string keyword, string strToReplace);
    internal static string ReplaceCustomPropertyKeyword(string originalString, DataPointCustomProperties properties);
    internal virtual string ToStringInternal();
    public double get_XValue();
    public void set_XValue(double value);
    public Double[] get_YValues();
    public void set_YValues(Double[] value);
    public bool get_IsEmpty();
    public void set_IsEmpty(bool value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
}
internal class System.Windows.Forms.DataVisualization.Charting.DataPoint3D : object {
    internal DataPoint dataPoint;
    internal int index;
    internal double xPosition;
    internal double yPosition;
    internal double xCenterVal;
    internal float zPosition;
    internal double width;
    internal double height;
    internal float depth;
    internal bool indexedSeries;
}
[SRDescriptionAttribute("DescriptionAttributeDataPointCollection_DataPointCollection")]
public class System.Windows.Forms.DataVisualization.Charting.DataPointCollection : ChartElementCollection`1<DataPoint> {
    internal Series series;
    internal DataPointCollection(Series series);
    internal void DataPointInit(DataPoint& dataPoint);
    internal static void DataPointInit(Series series, DataPoint& dataPoint);
    public DataPoint Add(Double[] y);
    internal static void ParsePointFieldsParameter(string otherFields, String[]& otherAttributeNames, String[]& otherFieldNames, String[]& otherValueFormat);
    public void DataBind(IEnumerable dataSource, string xField, string yFields, string otherFields);
    public void DataBindY(IEnumerable[] yValue);
    public void DataBindXY(IEnumerable xValue, IEnumerable[] yValues);
    public void DataBindY(IEnumerable yValue, string yFields);
    public void DataBindXY(IEnumerable xValue, string xField, IEnumerable yValue, string yFields);
    internal static bool IsEmptyValue(object val);
    public int AddY(double yValue);
    public int AddY(Object[] yValue);
    public int AddXY(double xValue, double yValue);
    public int AddXY(object xValue, Object[] yValue);
    public void InsertXY(int index, object xValue, Object[] yValue);
    public void InsertY(int index, Object[] yValue);
    internal static IEnumerator GetDataSourceEnumerator(IEnumerable dataSource);
    internal static object ConvertEnumerationItem(object item, string fieldName);
    internal static void AutoDetectValuesType(Series series, IEnumerator xEnumerator, string xField, IEnumerator yEnumerator, string yField);
    private static ChartValueType GetValueType(IEnumerator enumerator, string field);
    public IEnumerable`1<DataPoint> FindAllByValue(double valueToFind, string useValue, int startIndex);
    public IEnumerable`1<DataPoint> FindAllByValue(double valueToFind, string useValue);
    public IEnumerable`1<DataPoint> FindAllByValue(double valueToFind);
    public DataPoint FindByValue(double valueToFind, string useValue, int startIndex);
    public DataPoint FindByValue(double valueToFind, string useValue);
    public DataPoint FindByValue(double valueToFind);
    public DataPoint FindMaxByValue(string useValue, int startIndex);
    public DataPoint FindMaxByValue(string useValue);
    public DataPoint FindMaxByValue();
    public DataPoint FindMinByValue(string useValue, int startIndex);
    public DataPoint FindMinByValue(string useValue);
    public DataPoint FindMinByValue();
    internal virtual void Initialize(DataPoint item);
    protected virtual void ClearItems();
}
[SRDescriptionAttribute("DescriptionAttributeDataPointComparer_DataPointComparer")]
public class System.Windows.Forms.DataVisualization.Charting.DataPointComparer : object {
    private PointSortOrder _sortingOrder;
    private int _sortingValueIndex;
    public DataPointComparer(Series series, PointSortOrder sortOrder, string sortBy);
    public sealed virtual int Compare(DataPoint x, DataPoint y);
}
[TypeConverterAttribute("System.Windows.Forms.Design.DataVisualization.Charting.DataPointCustomPropertiesConverter, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
[DefaultMemberAttribute("Item")]
[SRDescriptionAttribute("DescriptionAttributeDataPointCustomProperties_DataPointCustomProperties")]
[DefaultPropertyAttribute("LabelStyle")]
public class System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties : ChartNamedElement {
    internal bool pointCustomProperties;
    internal Series series;
    internal Hashtable properties;
    internal bool tempColorIsSet;
    internal CustomProperties customProperties;
    internal bool isEmptyPoint;
    public string Item { get; }
    public string Item { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLabel")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.KeywordsStringEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeLabel")]
public string Label { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.KeywordsStringEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeAxisLabel")]
public string AxisLabel { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLabelFormat")]
[SRCategoryAttribute("CategoryAttributeLabel")]
[BindableAttribute("True")]
public string LabelFormat { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLabel")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeShowLabelAsValue")]
public bool IsValueShownAsLabel { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeColor4")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color Color { get; public set; }
    [TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBorderColor")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBorderDashStyle")]
[BindableAttribute("True")]
public ChartDashStyle BorderDashStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBorderWidth")]
public int BorderWidth { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ImageValueEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DescriptionAttributeBackImage")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
public string BackImage { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeImageWrapMode")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public ChartImageWrapMode BackImageWrapMode { get; public set; }
    [TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeImageTransparentColor")]
[BindableAttribute("True")]
public Color BackImageTransparentColor { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeBackImageAlign")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
public ChartImageAlignmentStyle BackImageAlignment { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeBackGradientStyle")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.GradientEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public GradientStyle BackGradientStyle { get; public set; }
    [TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackSecondaryColor")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public Color BackSecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackHatchStyle")]
[BindableAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.HatchStyleEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeFont")]
[SRCategoryAttribute("CategoryAttributeLabelAppearance")]
[BindableAttribute("True")]
public Font Font { get; public set; }
    [TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRCategoryAttribute("CategoryAttributeLabelAppearance")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeFontColor")]
public Color LabelForeColor { get; public set; }
    [BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeLabelAppearance")]
[SRDescriptionAttribute("DescriptionAttributeLabel_FontAngle")]
public int LabelAngle { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeMarkerStyle4")]
[SRCategoryAttribute("CategoryAttributeMarker")]
[RefreshPropertiesAttribute("1")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.MarkerStyleEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
public MarkerStyle MarkerStyle { get; public set; }
    [BindableAttribute("True")]
[RefreshPropertiesAttribute("1")]
[SRCategoryAttribute("CategoryAttributeMarker")]
[SRDescriptionAttribute("DescriptionAttributeMarkerSize")]
public int MarkerSize { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeMarkerImage")]
[SRCategoryAttribute("CategoryAttributeMarker")]
[RefreshPropertiesAttribute("1")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ImageValueEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
public string MarkerImage { get; public set; }
    [RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeImageTransparentColor")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeMarker")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[BindableAttribute("True")]
public Color MarkerImageTransparentColor { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeMarkerColor3")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[RefreshPropertiesAttribute("1")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeMarker")]
public Color MarkerColor { get; public set; }
    [TypeConverterAttribute("System.Drawing.ColorConverter")]
[BindableAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeMarkerBorderColor")]
[SRCategoryAttribute("CategoryAttributeMarker")]
public Color MarkerBorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMarker")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMarkerBorderWidth")]
public int MarkerBorderWidth { get; public set; }
    [EditorBrowsableAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeCustomAttributesExtended")]
[RefreshPropertiesAttribute("1")]
[NotifyParentPropertyAttribute("True")]
[DesignOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[DisplayNameAttribute("CustomProperties")]
[DefaultValueAttribute("")]
[BindableAttribute("False")]
public CustomProperties CustomPropertiesExtended { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeCustomAttributesExtended")]
[BindableAttribute("True")]
public string CustomProperties { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.KeywordsStringEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DescriptionAttributeToolTip")]
[SRCategoryAttribute("CategoryAttributeMapArea")]
[BindableAttribute("True")]
public string ToolTip { get; public set; }
    [BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeLegend")]
[SRDescriptionAttribute("DescriptionAttributeShowInLegend")]
public bool IsVisibleInLegend { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLegendText")]
[SRCategoryAttribute("CategoryAttributeLegend")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.KeywordsStringEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
public string LegendText { get; public set; }
    [BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendToolTip")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.KeywordsStringEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeLegend")]
public string LegendToolTip { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLabelAppearance")]
[SRDescriptionAttribute("DescriptionAttributeLabelBackColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[BindableAttribute("True")]
public Color LabelBackColor { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeLabelAppearance")]
[BindableAttribute("True")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeBorderColor")]
public Color LabelBorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLabelAppearance")]
[SRDescriptionAttribute("DescriptionAttributeLabelBorderDashStyle")]
[BindableAttribute("True")]
public ChartDashStyle LabelBorderDashStyle { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeBorderWidth")]
[SRCategoryAttribute("CategoryAttributeLabelAppearance")]
[BindableAttribute("True")]
public int LabelBorderWidth { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.KeywordsStringEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeLabel")]
[SRDescriptionAttribute("DescriptionAttributeLabelToolTip")]
[BindableAttribute("True")]
public string LabelToolTip { get; public set; }
    public DataPointCustomProperties(Series series, bool pointProperties);
    public virtual bool IsCustomPropertySet(string name);
    internal bool IsCustomPropertySet(CommonCustomProperties property);
    public virtual void DeleteCustomProperty(string name);
    internal void DeleteCustomProperty(CommonCustomProperties property);
    public virtual string GetCustomProperty(string name);
    internal bool IsSerializing();
    internal object GetAttributeObject(CommonCustomProperties attrib);
    public virtual void SetCustomProperty(string name, string propertyValue);
    internal void SetAttributeObject(CommonCustomProperties attrib, object attributeValue);
    public virtual void SetDefault(bool clearAll);
    public string get_Item(int index);
    public string get_Item(string name);
    public void set_Item(string name, string value);
    public virtual string get_Label();
    public virtual void set_Label(string value);
    public virtual string get_AxisLabel();
    public virtual void set_AxisLabel(string value);
    public string get_LabelFormat();
    public void set_LabelFormat(string value);
    public bool get_IsValueShownAsLabel();
    public void set_IsValueShownAsLabel(bool value);
    public Color get_Color();
    public void set_Color(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public ChartDashStyle get_BorderDashStyle();
    public void set_BorderDashStyle(ChartDashStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public string get_BackImage();
    public void set_BackImage(string value);
    public ChartImageWrapMode get_BackImageWrapMode();
    public void set_BackImageWrapMode(ChartImageWrapMode value);
    public Color get_BackImageTransparentColor();
    public void set_BackImageTransparentColor(Color value);
    public ChartImageAlignmentStyle get_BackImageAlignment();
    public void set_BackImageAlignment(ChartImageAlignmentStyle value);
    public GradientStyle get_BackGradientStyle();
    public void set_BackGradientStyle(GradientStyle value);
    public Color get_BackSecondaryColor();
    public void set_BackSecondaryColor(Color value);
    public ChartHatchStyle get_BackHatchStyle();
    public void set_BackHatchStyle(ChartHatchStyle value);
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_LabelForeColor();
    public void set_LabelForeColor(Color value);
    public int get_LabelAngle();
    public void set_LabelAngle(int value);
    public MarkerStyle get_MarkerStyle();
    public void set_MarkerStyle(MarkerStyle value);
    public int get_MarkerSize();
    public void set_MarkerSize(int value);
    public string get_MarkerImage();
    public void set_MarkerImage(string value);
    public Color get_MarkerImageTransparentColor();
    public void set_MarkerImageTransparentColor(Color value);
    public Color get_MarkerColor();
    public void set_MarkerColor(Color value);
    public Color get_MarkerBorderColor();
    public void set_MarkerBorderColor(Color value);
    public int get_MarkerBorderWidth();
    public void set_MarkerBorderWidth(int value);
    public void set_CustomPropertiesExtended(CustomProperties value);
    public CustomProperties get_CustomPropertiesExtended();
    public string get_CustomProperties();
    public void set_CustomProperties(string value);
    public void set_ToolTip(string value);
    public string get_ToolTip();
    internal virtual string ReplaceKeywords(string strOriginal);
    public bool get_IsVisibleInLegend();
    public void set_IsVisibleInLegend(bool value);
    public void set_LegendText(string value);
    public string get_LegendText();
    public void set_LegendToolTip(string value);
    public string get_LegendToolTip();
    public Color get_LabelBackColor();
    public void set_LabelBackColor(Color value);
    public Color get_LabelBorderColor();
    public void set_LabelBorderColor(Color value);
    public ChartDashStyle get_LabelBorderDashStyle();
    public void set_LabelBorderDashStyle(ChartDashStyle value);
    public int get_LabelBorderWidth();
    public void set_LabelBorderWidth(int value);
    public void set_LabelToolTip(string value);
    public string get_LabelToolTip();
    private bool CheckIfSerializationRequired(CommonCustomProperties attribute);
    private void ResetProperty(CommonCustomProperties attribute);
    internal bool ShouldSerializeLabel();
    internal bool ShouldSerializeAxisLabel();
    internal bool ShouldSerializeLabelFormat();
    internal bool ShouldSerializeIsValueShownAsLabel();
    internal bool ShouldSerializeColor();
    internal bool ShouldSerializeBorderColor();
    internal bool ShouldSerializeBorderDashStyle();
    internal bool ShouldSerializeBorderWidth();
    internal bool ShouldSerializeMarkerBorderWidth();
    internal bool ShouldSerializeBackImage();
    internal bool ShouldSerializeBackImageWrapMode();
    internal bool ShouldSerializeBackImageTransparentColor();
    internal bool ShouldSerializeBackImageAlignment();
    internal bool ShouldSerializeBackGradientStyle();
    internal bool ShouldSerializeBackSecondaryColor();
    internal bool ShouldSerializeBackHatchStyle();
    internal bool ShouldSerializeFont();
    internal bool ShouldSerializeLabelForeColor();
    internal bool ShouldSerializeLabelAngle();
    internal bool ShouldSerializeMarkerStyle();
    internal bool ShouldSerializeMarkerSize();
    internal bool ShouldSerializeMarkerImage();
    internal bool ShouldSerializeMarkerImageTransparentColor();
    internal bool ShouldSerializeMarkerColor();
    internal bool ShouldSerializeMarkerBorderColor();
    internal bool ShouldSerializeToolTip();
    internal bool ShouldSerializeIsVisibleInLegend();
    internal bool ShouldSerializeLegendText();
    internal bool ShouldSerializeLegendToolTip();
    internal bool ShouldSerializeLabelToolTip();
    internal bool ShouldSerializeLabelBackColor();
    internal bool ShouldSerializeLabelBorderColor();
    internal bool ShouldSerializeLabelBorderDashStyle();
    internal bool ShouldSerializeLabelBorderWidth();
    internal void ResetLabel();
    internal void ResetAxisLabel();
    internal void ResetLabelFormat();
    public void ResetIsValueShownAsLabel();
    internal void ResetColor();
    internal void ResetBorderColor();
    internal void ResetBorderDashStyle();
    internal void ResetBorderWidth();
    internal void ResetMarkerBorderWidth();
    internal void ResetBackImage();
    internal void ResetBackImageWrapMode();
    internal void ResetBackImageTransparentColor();
    internal void ResetBackSecondaryColor();
    internal void ResetBackHatchStyle();
    internal void ResetFont();
    internal void ResetLabelAngle();
    internal void ResetMarkerStyle();
    internal void ResetMarkerSize();
    internal void ResetMarkerImage();
    internal void ResetMarkerImageTransparentColor();
    internal void ResetMarkerColor();
    internal void ResetMarkerBorderColor();
    internal void ResetToolTip();
    public void ResetIsVisibleInLegend();
    internal void ResetLegendText();
    internal void ResetLegendToolTip();
    internal void ResetLabelBackColor();
    internal void ResetLabelBorderColor();
    internal void ResetLabelBorderDashStyle();
    internal void ResetLabelBorderWidth();
    internal void ResetLabelToolTip();
    internal void Invalidate(bool invalidateLegend);
}
internal class System.Windows.Forms.DataVisualization.Charting.DataPointValueConverter : DoubleConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public enum System.Windows.Forms.DataVisualization.Charting.DateRangeType : Enum {
    public int value__;
    public static DateRangeType Year;
    public static DateRangeType Month;
    public static DateRangeType DayOfWeek;
    public static DateRangeType DayOfMonth;
    public static DateRangeType Hour;
    public static DateRangeType Minute;
}
public enum System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType : Enum {
    public int value__;
    public static DateTimeIntervalType Auto;
    public static DateTimeIntervalType Number;
    public static DateTimeIntervalType Years;
    public static DateTimeIntervalType Months;
    public static DateTimeIntervalType Weeks;
    public static DateTimeIntervalType Days;
    public static DateTimeIntervalType Hours;
    public static DateTimeIntervalType Minutes;
    public static DateTimeIntervalType Seconds;
    public static DateTimeIntervalType Milliseconds;
    public static DateTimeIntervalType NotSet;
}
public enum System.Windows.Forms.DataVisualization.Charting.Docking : Enum {
    public int value__;
    public static Docking Top;
    public static Docking Right;
    public static Docking Bottom;
    public static Docking Left;
}
internal class System.Windows.Forms.DataVisualization.Charting.DoubleArrayConverter : ArrayConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class System.Windows.Forms.DataVisualization.Charting.DoubleDateNanValueConverter : DoubleConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public static string ConvertDateTimeToString(double dtValue, ChartValueType axisValuesType, DateTimeIntervalType dtIntervalType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class System.Windows.Forms.DataVisualization.Charting.DoubleNanValueConverter : DoubleConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[FlagsAttribute]
internal enum System.Windows.Forms.DataVisualization.Charting.DrawingOperationTypes : Enum {
    public int value__;
    public static DrawingOperationTypes DrawElement;
    public static DrawingOperationTypes CalcElementPath;
}
internal class System.Windows.Forms.DataVisualization.Charting.DynamicPropertyDescriptor : PropertyDescriptor {
    private PropertyDescriptor _basePropertyDescriptor;
    private string _displayName;
    public Type ComponentType { get; }
    public string DisplayName { get; }
    public bool IsBrowsable { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public DynamicPropertyDescriptor(PropertyDescriptor basePropertyDescriptor, string displayName);
    public virtual Type get_ComponentType();
    public virtual string get_DisplayName();
    public virtual bool get_IsBrowsable();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
    public virtual void SetValue(object component, object value);
}
internal static class System.Windows.Forms.DataVisualization.Charting.Editors : object {
    private static string AssemblyName;
    internal static string Version;
    private static string Culture;
    private static string PublicKeyToken;
    private static string Namespace;
    public static string UITypeEditorBase;
    public static string ChartWinDesigner;
    public static string ChartWebDesigner;
}
[SRDescriptionAttribute("DescriptionAttributeElementPosition_ElementPosition")]
[DefaultPropertyAttribute("Data")]
public class System.Windows.Forms.DataVisualization.Charting.ElementPosition : ChartElement {
    private float _x;
    private float _y;
    private float _width;
    private float _height;
    internal bool _auto;
    internal bool resetAreaAutoPosition;
    [SerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public SizeF Size { get; }
    [SerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public float Bottom { get; }
    [BrowsableAttribute("False")]
[SerializationVisibilityAttribute("0")]
public float Right { get; }
    [DefaultValueAttribute("0")]
[RefreshPropertiesAttribute("1")]
[NotifyParentPropertyAttribute("True")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[SRDescriptionAttribute("DescriptionAttributeElementPosition_X")]
public float X { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[RefreshPropertiesAttribute("1")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeElementPosition_Y")]
[NotifyParentPropertyAttribute("True")]
public float Y { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeElementPosition_Width")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("0")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
public float Width { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeElementPosition_Height")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[RefreshPropertiesAttribute("1")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[NotifyParentPropertyAttribute("True")]
public float Height { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeElementPosition_Auto")]
public bool Auto { get; public set; }
    internal ElementPosition(IChartElement parent);
    public ElementPosition(float x, float y, float width, float height);
    private void ResetAllAreasAutoPosition(bool autoValue);
    public RectangleF ToRectangleF();
    public void FromRectangleF(RectangleF rect);
    public SizeF get_Size();
    public float get_Bottom();
    public float get_Right();
    internal virtual bool EqualsInternal(object obj);
    internal virtual string ToStringInternal();
    internal void SetPositionNoAuto(float x, float y, float width, float height);
    public float get_X();
    public void set_X(float value);
    public float get_Y();
    public void set_Y(float value);
    public float get_Width();
    public void set_Width(float value);
    public float get_Height();
    public void set_Height(float value);
    public bool get_Auto();
    public void set_Auto(bool value);
}
internal class System.Windows.Forms.DataVisualization.Charting.ElementPositionConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[SRDescriptionAttribute("DescriptionAttributeEllipseAnnotation_EllipseAnnotation")]
public class System.Windows.Forms.DataVisualization.Charting.EllipseAnnotation : RectangleAnnotation {
    [EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationType")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[BindableAttribute("True")]
[SerializationVisibilityAttribute("0")]
public string AnnotationType { get; }
    public virtual string get_AnnotationType();
}
public enum System.Windows.Forms.DataVisualization.Charting.FinancialFormula : Enum {
    public int value__;
    public static FinancialFormula AccumulationDistribution;
    public static FinancialFormula AverageTrueRange;
    public static FinancialFormula BollingerBands;
    public static FinancialFormula ChaikinOscillator;
    public static FinancialFormula CommodityChannelIndex;
    public static FinancialFormula DetrendedPriceOscillator;
    public static FinancialFormula EaseOfMovement;
    public static FinancialFormula Envelopes;
    public static FinancialFormula ExponentialMovingAverage;
    public static FinancialFormula Forecasting;
    public static FinancialFormula MovingAverageConvergenceDivergence;
    public static FinancialFormula MassIndex;
    public static FinancialFormula MedianPrice;
    public static FinancialFormula MoneyFlow;
    public static FinancialFormula NegativeVolumeIndex;
    public static FinancialFormula OnBalanceVolume;
    public static FinancialFormula Performance;
    public static FinancialFormula PositiveVolumeIndex;
    public static FinancialFormula PriceVolumeTrend;
    public static FinancialFormula RateOfChange;
    public static FinancialFormula RelativeStrengthIndex;
    public static FinancialFormula MovingAverage;
    public static FinancialFormula StandardDeviation;
    public static FinancialFormula StochasticIndicator;
    public static FinancialFormula TriangularMovingAverage;
    public static FinancialFormula TripleExponentialMovingAverage;
    public static FinancialFormula TypicalPrice;
    public static FinancialFormula VolatilityChaikins;
    public static FinancialFormula VolumeOscillator;
    public static FinancialFormula WeightedClose;
    public static FinancialFormula WeightedMovingAverage;
    public static FinancialFormula WilliamsR;
}
internal class System.Windows.Forms.DataVisualization.Charting.FontCache : object {
    private static string _defaultFamilyName;
    private Dictionary`2<KeyInfo, Font> _fontCache;
    public static string DefaultFamilyName { get; }
    public Font DefaultFont { get; }
    public Font DefaultBoldFont { get; }
    public static string get_DefaultFamilyName();
    public Font get_DefaultFont();
    public Font get_DefaultBoldFont();
    public Font GetFont(string familyName, int size);
    public Font GetFont(string familyName, float size, FontStyle style);
    public Font GetFont(FontFamily family, float size, FontStyle style);
    public Font GetFont(FontFamily family, float size, FontStyle style, GraphicsUnit unit);
    public sealed virtual void Dispose();
}
public class System.Windows.Forms.DataVisualization.Charting.FormatNumberEventArgs : EventArgs {
    private double _value;
    private string _format;
    private string _localizedValue;
    private ChartValueType _valueType;
    private object _senderTag;
    private ChartElementType _elementType;
    public double Value { get; }
    public string LocalizedValue { get; public set; }
    public string Format { get; }
    public ChartValueType ValueType { get; }
    public object SenderTag { get; }
    public ChartElementType ElementType { get; }
    internal FormatNumberEventArgs(double value, string format, ChartValueType valueType, string localizedValue, object senderTag, ChartElementType elementType);
    public double get_Value();
    public string get_LocalizedValue();
    public void set_LocalizedValue(string value);
    public string get_Format();
    public ChartValueType get_ValueType();
    public object get_SenderTag();
    public ChartElementType get_ElementType();
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.AccumulationDistributionFormulaInfo : FormulaInfo {
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.AverageTrueRangeFormulaInfo : FormulaInfo {
    public AverageTrueRangeFormulaInfo(int period);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.BollingerBandsFormulaInfo : FormulaInfo {
    public BollingerBandsFormulaInfo(int period, double deviation, bool startFromFirst);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.ChaikinOscillatorFormulaInfo : FormulaInfo {
    public ChaikinOscillatorFormulaInfo(int shortPeriod, int longPeriod, bool startFromFirst);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.CommodityChannelIndexFormulaInfo : FormulaInfo {
    public CommodityChannelIndexFormulaInfo(int period);
}
internal enum System.Windows.Forms.DataVisualization.Charting.Formulas.DataField : Enum {
    public int value__;
    public static DataField X;
    public static DataField Y;
    public static DataField LowerWisker;
    public static DataField UpperWisker;
    public static DataField LowerBox;
    public static DataField UpperBox;
    public static DataField Average;
    public static DataField Median;
    public static DataField Bubble;
    public static DataField BubbleSize;
    public static DataField High;
    public static DataField Low;
    public static DataField Open;
    public static DataField Close;
    public static DataField Center;
    public static DataField LowerError;
    public static DataField UpperError;
    public static DataField Top;
    public static DataField Bottom;
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.DetrendedPriceOscillatorFormulaInfo : FormulaInfo {
    public DetrendedPriceOscillatorFormulaInfo(int period, bool startFromFirst);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.EaseOfMovementFormulaInfo : FormulaInfo {
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.EnvelopesFormulaInfo : FormulaInfo {
    public EnvelopesFormulaInfo(int period, double shiftPercentage, bool startFromFirst);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.ExponentialMovingAverageFormulaInfo : FormulaInfo {
    public ExponentialMovingAverageFormulaInfo(int period, bool startFromFirst);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.ForecastingFormulaInfo : FormulaInfo {
    private string _parameters;
    public ForecastingFormulaInfo(RegressionType regressionType, int polynomialDegree, int forecastingPeriod, bool returnApproximationError, bool returnForecastingError);
    internal virtual void LoadParametersFromString(string parameters);
    internal virtual void CheckParameterString(string parameters);
    internal virtual string SaveParametersToString();
}
internal static class System.Windows.Forms.DataVisualization.Charting.Formulas.FormulaHelper : object {
    internal static FormulaInfo GetFormulaInfo(FinancialFormula formula);
    internal static IList`1<DataField> GetDataFields(SeriesChartType chartType);
    internal static SeriesChartType GetDefaultChartType(DataField field);
    internal static Nullable`1<DataField> MapFormulaDataField(SeriesChartType chartType, DataField formulaField);
}
internal abstract class System.Windows.Forms.DataVisualization.Charting.Formulas.FormulaInfo : object {
    private DataField[] _inputFields;
    private DataField[] _outputFields;
    private Object[] _parameters;
    public DataField[] InputFields { get; }
    public DataField[] OutputFields { get; }
    public Object[] Parameters { get; }
    public FormulaInfo(DataField[] inputFields, DataField[] outputFields, Object[] defaultParams);
    public DataField[] get_InputFields();
    public DataField[] get_OutputFields();
    public Object[] get_Parameters();
    internal virtual string SaveParametersToString();
    internal virtual void LoadParametersFromString(string parameters);
    internal virtual object ParseParameter(int index, string newParamValue);
    internal virtual void CheckParameterString(string parameters);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.FormulaRegistry : object {
    internal Hashtable registeredModules;
    private Hashtable _createdModules;
    private ArrayList _modulesNames;
    public int Count { get; }
    public void Register(string name, Type moduleType);
    [EditorBrowsableAttribute("1")]
private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    public IFormula GetFormulaModule(string name);
    public string GetModuleName(int index);
    public int get_Count();
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.GeneralFormulas : PriceIndicators {
    public string Name { get; }
    public virtual string get_Name();
    private void RuningTotal(Double[][] inputValues, Double[][]& outputValues);
    private void RunningAverage(Double[][] inputValues, Double[][]& outputValues);
    public virtual void Formula(string formulaName, Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.GeneralTechnicalIndicators : PriceIndicators {
    public string Name { get; }
    public virtual string get_Name();
    private void StandardDeviation(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void AverageTrueRange(Double[][] inputValues, Double[][]& outputValues, String[] parameterList);
    private void EaseOfMovement(Double[][] inputValues, Double[][]& outputValues);
    private void MassIndex(Double[][] inputValues, Double[][]& outputValues, String[] parameterList);
    private void Performance(Double[][] inputValues, Double[][]& outputValues);
    private void RateOfChange(Double[][] inputValues, Double[][]& outputValues, String[] parameterList);
    private void RelativeStrengthIndex(Double[][] inputValues, Double[][]& outputValues, String[] parameterList);
    private void Trix(Double[][] inputValues, Double[][]& outputValues, String[] parameterList);
    private void Macd(Double[][] inputValues, Double[][]& outputValues, String[] parameterList);
    private void CommodityChannelIndex(Double[][] inputValues, Double[][]& outputValues, String[] parameterList);
    public virtual void Formula(string formulaName, Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
}
internal interface System.Windows.Forms.DataVisualization.Charting.Formulas.IFormula {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual void Formula(string formulaName, Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.MassIndexFormulaInfo : FormulaInfo {
    public MassIndexFormulaInfo(int period, int averagePeriod);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.MedianPriceFormulaInfo : FormulaInfo {
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.MoneyFlowFormulaInfo : FormulaInfo {
    public MoneyFlowFormulaInfo(int period);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.MovingAverageConvergenceDivergenceFormulaInfo : FormulaInfo {
    public MovingAverageConvergenceDivergenceFormulaInfo(int shortPeriod, int longPeriod);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.MovingAverageFormulaInfo : FormulaInfo {
    public MovingAverageFormulaInfo(int period, bool startFromFirst);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.NegativeVolumeIndexFormulaInfo : FormulaInfo {
    public NegativeVolumeIndexFormulaInfo(double startValue);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.OnBalanceVolumeFormulaInfo : FormulaInfo {
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.Oscillators : PriceIndicators {
    public string Name { get; }
    public virtual string get_Name();
    private void ChaikinOscillator(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void DetrendedPriceOscillator(Double[][] inputValues, Double[][]& outputValues, String[] parameterList);
    private void VolatilityChaikins(Double[][] inputValues, Double[][]& outputValues, String[] parameterList);
    private void VolumeOscillator(Double[][] inputValues, Double[][]& outputValues, String[] parameterList);
    internal void StochasticIndicator(Double[][] inputValues, Double[][]& outputValues, String[] parameterList);
    internal void WilliamsR(Double[][] inputValues, Double[][]& outputValues, String[] parameterList);
    public virtual void Formula(string formulaName, Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.PerformanceFormulaInfo : FormulaInfo {
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.PositiveVolumeIndexFormulaInfo : FormulaInfo {
    public PositiveVolumeIndexFormulaInfo(double startValue);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.PriceIndicators : object {
    public string Name { get; }
    public virtual string get_Name();
    internal void MovingAverage(Double[] inputValues, Double[]& outputValues, int period, bool FromFirst);
    private void MovingAverage(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    internal void ExponentialMovingAverage(Double[] inputValues, Double[]& outputValues, int period, bool startFromFirst);
    private void ExponentialMovingAverage(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void TriangularMovingAverage(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void WeightedMovingAverage(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void BollingerBands(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void TypicalPrice(Double[][] inputValues, Double[][]& outputValues);
    private void MedianPrice(Double[][] inputValues, Double[][]& outputValues);
    private void WeightedClose(Double[][] inputValues, Double[][]& outputValues);
    private void Envelopes(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    internal void StandardDeviation(Double[] inputValues, Double[]& outputValues, int period, bool startFromFirst);
    public void CheckNumOfValues(Double[][] inputValues, int numOfYValues);
    public virtual void Formula(string formulaName, Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.PriceVolumeTrendFormulaInfo : FormulaInfo {
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.RateOfChangeFormulaInfo : FormulaInfo {
    public RateOfChangeFormulaInfo(int period);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.RelativeStrengthIndexFormulaInfo : FormulaInfo {
    public RelativeStrengthIndexFormulaInfo(int period);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.SeriesFieldInfo : object {
    private Series _series;
    private string _seriesName;
    private DataField _dataField;
    public Series Series { get; }
    public string SeriesName { get; }
    public DataField DataField { get; }
    public SeriesFieldInfo(Series series, DataField dataField);
    public SeriesFieldInfo(string seriesName, DataField dataField);
    public Series get_Series();
    public string get_SeriesName();
    public DataField get_DataField();
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.SeriesFieldList : List`1<SeriesFieldInfo> {
    public virtual string ToString();
    public static SeriesFieldList FromString(Chart chart, string seriesFields, IList`1<DataField> formulaFields);
    private static void AddSeriesFieldInfo(SeriesFieldList result, Series series, IList`1<DataField> unmappedFormulaFields);
    private static void AddSeriesFieldInfo(SeriesFieldList result, Series series, IList`1<DataField> unmappedFormulaFields, string seriesFieldId);
    private static void AddSeriesFieldInfo(SeriesFieldList result, string seriesName, IList`1<DataField> unmappedFormulaFields);
    private static void AddSeriesFieldInfo(SeriesFieldList result, string seriesName, IList`1<DataField> unmappedFormulaFields, string seriesFieldId);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.StandardDeviationFormulaInfo : FormulaInfo {
    public StandardDeviationFormulaInfo(int period, bool startFromFirst);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.StatisticalAnalysis : object {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void Formula(string formulaName, Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
    private void Anova(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[][]& outLabels);
    private void Correlation(Double[][] inputValues, Double[][]& outputValues, String[][]& outLabels);
    private void Covariance(Double[][] inputValues, Double[][]& outputValues, String[][]& outLabels);
    private void FTest(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[][]& outLabels);
    private void ZTest(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[][]& outLabels);
    private void TTest(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[][]& outLabels, bool equalVariances);
    private void TTestPaired(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[][]& outLabels);
    private void TDistribution(Double[][]& outputValues, String[] parameterList, String[][]& outLabels);
    private void FDistribution(Double[][]& outputValues, String[] parameterList, String[][]& outLabels);
    private void NormalDistribution(Double[][]& outputValues, String[] parameterList, String[][]& outLabels);
    private void TDistributionInverse(Double[][]& outputValues, String[] parameterList, String[][]& outLabels);
    private void FDistributionInverse(Double[][]& outputValues, String[] parameterList, String[][]& outLabels);
    private void NormalDistributionInverse(Double[][]& outputValues, String[] parameterList, String[][]& outLabels);
    private void CheckNumOfPoints(Double[][] inputValues);
    private double Covar(Double[] arrayX, Double[] arrayY);
    private double GammLn(double n);
    private double BetaFunction(double m, double n);
    private double BetaCF(double a, double b, double x);
    private double NormalDistributionFunction(double t);
    private double BetaIncomplete(double a, double b, double x);
    private void Average(Double[][] inputValues, Double[][]& outputValues, String[][]& outLabels);
    private void Variance(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[][]& outLabels);
    private void Median(Double[][] inputValues, Double[][]& outputValues, String[][]& outLabels);
    private void BetaFunction(Double[][]& outputValues, String[] parameterList, String[][]& outLabels);
    private void GammaFunction(Double[][]& outputValues, String[] parameterList, String[][]& outLabels);
    private void Sort(Double[]& values);
    private double Median(Double[] values);
    private double Mean(Double[] values);
    private double Variance(Double[] values, bool sampleVariance);
    private double StudentsDistribution(double tValue, int n, bool oneTailed);
    private double NormalDistribution(double zValue);
    private double FDistribution(double x, int freedom1, int freedom2);
    private double StudentsDistributionInverse(double probability, int n);
    private double StudentsDistributionSearch(double probability, int n, int step, double start, double end);
    private double NormalDistributionInverse(double probability);
    private double FDistributionInverse(double probability, int m, int n);
    private double FDistributionSearch(double probability, int m, int n, int step, double start, double end);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.StochasticIndicatorFormulaInfo : FormulaInfo {
    public StochasticIndicatorFormulaInfo(int periodD, int periodK);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.TimeSeriesAndForecasting : object {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void Formula(string formulaName, Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
    private void Forecasting(Double[][] inputValues, Double[][]& outputValues, String[] parameterList);
    private void Regression(RegressionType regressionType, Double[][] inputValues, Double[][]& outputValues, int polynomialDegree, int forecastingPeriod);
    private void PolynomialRegression(RegressionType regressionType, Double[][] inputValues, Double[][]& outputValues, int polynomialDegree, int forecastingPeriod, double logInterval);
    private double Determinant(Double[][] inputDeterminant);
    private Double[][] MakeSubDeterminant(Double[][] inputDeterminant, int columnPos);
    private Double[][] CopyDeterminant(Double[][] inputDeterminant);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.TriangularMovingAverageFormulaInfo : FormulaInfo {
    public TriangularMovingAverageFormulaInfo(int period, bool startFromFirst);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.TripleExponentialMovingAverageFormulaInfo : FormulaInfo {
    public TripleExponentialMovingAverageFormulaInfo(int period);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.TypicalPriceFormulaInfo : FormulaInfo {
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.VolatilityChaikinsFormulaInfo : FormulaInfo {
    public VolatilityChaikinsFormulaInfo(int period, int signalPeriod);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.VolumeIndicators : PriceIndicators {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void Formula(string formulaName, Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
    private void MoneyFlow(Double[][] inputValues, Double[][]& outputValues, String[] parameterList);
    private void PriceVolumeTrend(Double[][] inputValues, Double[][]& outputValues);
    private void OnBalanceVolume(Double[][] inputValues, Double[][]& outputValues);
    private void NegativeVolumeIndex(Double[][] inputValues, Double[][]& outputValues, String[] parameterList);
    private void PositiveVolumeIndex(Double[][] inputValues, Double[][]& outputValues, String[] parameterList);
    internal void AccumulationDistribution(Double[][] inputValues, Double[][]& outputValues);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.VolumeOscillatorFormulaInfo : FormulaInfo {
    public VolumeOscillatorFormulaInfo(int shortPeriod, int longPeriod, bool percentage);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.WeightedCloseFormulaInfo : FormulaInfo {
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.WeightedMovingAverageFormulaInfo : FormulaInfo {
    public WeightedMovingAverageFormulaInfo(int period, bool startFromFirst);
}
internal class System.Windows.Forms.DataVisualization.Charting.Formulas.WilliamsRFormulaInfo : FormulaInfo {
    public WilliamsRFormulaInfo(int period);
}
public class System.Windows.Forms.DataVisualization.Charting.FTestResult : object {
    internal double firstSeriesMean;
    internal double secondSeriesMean;
    internal double firstSeriesVariance;
    internal double secondSeriesVariance;
    internal double fValue;
    internal double probabilityFOneTail;
    internal double fCriticalValueOneTail;
    public double FirstSeriesMean { get; }
    public double SecondSeriesMean { get; }
    public double FirstSeriesVariance { get; }
    public double SecondSeriesVariance { get; }
    public double FValue { get; }
    public double ProbabilityFOneTail { get; }
    public double FCriticalValueOneTail { get; }
    public double get_FirstSeriesMean();
    public double get_SecondSeriesMean();
    public double get_FirstSeriesVariance();
    public double get_SecondSeriesVariance();
    public double get_FValue();
    public double get_ProbabilityFOneTail();
    public double get_FCriticalValueOneTail();
}
internal class System.Windows.Forms.DataVisualization.Charting.GdiGraphics : object {
    private Graphics _graphics;
    public Matrix Transform { get; public set; }
    public SmoothingMode SmoothingMode { get; public set; }
    public TextRenderingHint TextRenderingHint { get; public set; }
    public Region Clip { get; public set; }
    public bool IsClipEmpty { get; }
    public Graphics Graphics { get; public set; }
    public sealed virtual void DrawLine(Pen pen, PointF pt1, PointF pt2);
    public sealed virtual void DrawLine(Pen pen, float x1, float y1, float x2, float y2);
    public sealed virtual void DrawImage(Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttr);
    public sealed virtual void DrawEllipse(Pen pen, float x, float y, float width, float height);
    public sealed virtual void DrawCurve(Pen pen, PointF[] points, int offset, int numberOfSegments, float tension);
    public sealed virtual void DrawRectangle(Pen pen, int x, int y, int width, int height);
    public sealed virtual void DrawPolygon(Pen pen, PointF[] points);
    public sealed virtual void DrawString(string s, Font font, Brush brush, RectangleF layoutRectangle, StringFormat format);
    public sealed virtual void DrawString(string s, Font font, Brush brush, PointF point, StringFormat format);
    public sealed virtual void DrawImage(Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs);
    public sealed virtual void DrawRectangle(Pen pen, float x, float y, float width, float height);
    public sealed virtual void DrawPath(Pen pen, GraphicsPath path);
    public sealed virtual void DrawPie(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public sealed virtual void DrawArc(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public sealed virtual void DrawImage(Image image, RectangleF rect);
    public sealed virtual void DrawEllipse(Pen pen, RectangleF rect);
    public sealed virtual void DrawLines(Pen pen, PointF[] points);
    public sealed virtual void FillEllipse(Brush brush, RectangleF rect);
    public sealed virtual void FillPath(Brush brush, GraphicsPath path);
    public sealed virtual void FillRegion(Brush brush, Region region);
    public sealed virtual void FillRectangle(Brush brush, RectangleF rect);
    public sealed virtual void FillRectangle(Brush brush, float x, float y, float width, float height);
    public sealed virtual void FillPolygon(Brush brush, PointF[] points);
    public sealed virtual void FillPie(Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public sealed virtual SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat);
    public sealed virtual SizeF MeasureString(string text, Font font);
    public sealed virtual GraphicsState Save();
    public sealed virtual void Restore(GraphicsState gstate);
    public sealed virtual void ResetClip();
    public sealed virtual void SetClip(RectangleF rect);
    public sealed virtual void SetClip(GraphicsPath path, CombineMode combineMode);
    public sealed virtual void TranslateTransform(float dx, float dy);
    public sealed virtual void BeginSelection(string hRef, string title);
    public sealed virtual void EndSelection();
    public sealed virtual Matrix get_Transform();
    public sealed virtual void set_Transform(Matrix value);
    public sealed virtual SmoothingMode get_SmoothingMode();
    public sealed virtual void set_SmoothingMode(SmoothingMode value);
    public sealed virtual TextRenderingHint get_TextRenderingHint();
    public sealed virtual void set_TextRenderingHint(TextRenderingHint value);
    public sealed virtual Region get_Clip();
    public sealed virtual void set_Clip(Region value);
    public sealed virtual bool get_IsClipEmpty();
    public sealed virtual Graphics get_Graphics();
    public sealed virtual void set_Graphics(Graphics value);
}
internal static class System.Windows.Forms.DataVisualization.Charting.GlobalizationHelper : object {
    public static MessageBoxOptions GetMessageBoxOptions();
}
public enum System.Windows.Forms.DataVisualization.Charting.GradientStyle : Enum {
    public int value__;
    public static GradientStyle None;
    public static GradientStyle LeftRight;
    public static GradientStyle TopBottom;
    public static GradientStyle Center;
    public static GradientStyle DiagonalLeft;
    public static GradientStyle DiagonalRight;
    public static GradientStyle HorizontalCenter;
    public static GradientStyle VerticalCenter;
}
[SRDescriptionAttribute("DescriptionAttributeGrid_Grid")]
[DefaultPropertyAttribute("Enabled")]
public class System.Windows.Forms.DataVisualization.Charting.Grid : object {
    internal static double NumberOfIntervals;
    internal static double NumberOfDateTimeIntervals;
    private Axis _axis;
    internal bool intervalOffsetChanged;
    internal bool intervalChanged;
    internal bool intervalTypeChanged;
    internal bool intervalOffsetTypeChanged;
    internal bool enabledChanged;
    internal double intervalOffset;
    internal double interval;
    internal DateTimeIntervalType intervalType;
    internal DateTimeIntervalType intervalOffsetType;
    internal Color borderColor;
    internal int borderWidth;
    internal ChartDashStyle borderDashStyle;
    internal bool enabled;
    internal bool majorGridTick;
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeIntervalOffset3")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.AxisElementIntervalValueConverter")]
public double IntervalOffset { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeIntervalOffsetType6")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeData")]
[RefreshPropertiesAttribute("1")]
public DateTimeIntervalType IntervalOffsetType { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeInterval6")]
[SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.AxisElementIntervalValueConverter")]
public double Interval { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[RefreshPropertiesAttribute("1")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeIntervalType3")]
public DateTimeIntervalType IntervalType { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLineColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color LineColor { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLineDashStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
public ChartDashStyle LineDashStyle { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLineWidth")]
[DefaultValueAttribute("1")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
public int LineWidth { get; public set; }
    [BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeEnabled5")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public bool Enabled { get; public set; }
    internal Axis Axis { get; internal set; }
    internal Grid(Axis axis, bool major);
    internal void Initialize(Axis axis, bool major);
    internal Axis GetAxis();
    internal void Invalidate();
    internal void Paint(ChartGraphics graph);
    private double GetLogMinimum(double current, Series axisSeries);
    private void DrawGrid(ChartGraphics graph, double current);
    internal void PaintCustom(ChartGraphics graph);
    public double get_IntervalOffset();
    public void set_IntervalOffset(double value);
    internal bool ShouldSerializeIntervalOffset();
    internal double GetIntervalOffset();
    public DateTimeIntervalType get_IntervalOffsetType();
    public void set_IntervalOffsetType(DateTimeIntervalType value);
    internal bool ShouldSerializeIntervalOffsetType();
    internal DateTimeIntervalType GetIntervalOffsetType();
    public double get_Interval();
    public void set_Interval(double value);
    internal bool ShouldSerializeInterval();
    internal double GetInterval();
    public DateTimeIntervalType get_IntervalType();
    public void set_IntervalType(DateTimeIntervalType value);
    internal bool ShouldSerializeIntervalType();
    internal DateTimeIntervalType GetIntervalType();
    public Color get_LineColor();
    public void set_LineColor(Color value);
    public ChartDashStyle get_LineDashStyle();
    public void set_LineDashStyle(ChartDashStyle value);
    public int get_LineWidth();
    public void set_LineWidth(int value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    internal bool ShouldSerializeEnabled();
    internal Axis get_Axis();
    internal void set_Axis(Axis value);
}
[FlagsAttribute]
public enum System.Windows.Forms.DataVisualization.Charting.GridTickTypes : Enum {
    public int value__;
    public static GridTickTypes None;
    public static GridTickTypes TickMark;
    public static GridTickTypes Gridline;
    public static GridTickTypes All;
}
internal enum System.Windows.Forms.DataVisualization.Charting.GroupingFunction : Enum {
    public int value__;
    public static GroupingFunction None;
    public static GroupingFunction Min;
    public static GroupingFunction Max;
    public static GroupingFunction Ave;
    public static GroupingFunction Sum;
    public static GroupingFunction First;
    public static GroupingFunction Last;
    public static GroupingFunction Center;
    public static GroupingFunction HiLoOpCl;
    public static GroupingFunction HiLo;
    public static GroupingFunction Count;
    public static GroupingFunction DistinctCount;
    public static GroupingFunction Variance;
    public static GroupingFunction Deviation;
}
public class System.Windows.Forms.DataVisualization.Charting.HitTestResult : object {
    private object _obj;
    private Series _series;
    private int _dataPoint;
    private ChartArea _chartArea;
    private Axis _axis;
    private ChartElementType _type;
    private object _subObject;
    public Series Series { get; public set; }
    public int PointIndex { get; public set; }
    public ChartArea ChartArea { get; public set; }
    public Axis Axis { get; public set; }
    public ChartElementType ChartElementType { get; public set; }
    public object Object { get; public set; }
    public object SubObject { get; public set; }
    public Series get_Series();
    public void set_Series(Series value);
    public int get_PointIndex();
    public void set_PointIndex(int value);
    public ChartArea get_ChartArea();
    public void set_ChartArea(ChartArea value);
    public Axis get_Axis();
    public void set_Axis(Axis value);
    public ChartElementType get_ChartElementType();
    public void set_ChartElementType(ChartElementType value);
    public object get_Object();
    public void set_Object(object value);
    public object get_SubObject();
    public void set_SubObject(object value);
}
[SRDescriptionAttribute("DescriptionAttributeHorizontalLineAnnotation_HorizontalLineAnnotation")]
public class System.Windows.Forms.DataVisualization.Charting.HorizontalLineAnnotation : LineAnnotation {
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationType")]
[BindableAttribute("True")]
public string AnnotationType { get; }
    public virtual string get_AnnotationType();
    internal virtual void AdjustLineCoordinates(PointF& point1, PointF& point2, RectangleF& selectionRect);
    internal virtual RectangleF GetContentPosition();
}
internal class System.Windows.Forms.DataVisualization.Charting.HotRegion : object {
    private GraphicsPath _path;
    private bool _relativeCoordinates;
    private RectangleF _boundingRectangle;
    private object _selectedObject;
    private int _pointIndex;
    private string _seriesName;
    private ChartElementType _type;
    private object _selectedSubObject;
    internal GraphicsPath Path { get; internal set; }
    internal bool RelativeCoordinates { get; internal set; }
    internal RectangleF BoundingRectangle { get; internal set; }
    internal object SelectedObject { get; internal set; }
    internal object SelectedSubObject { get; internal set; }
    internal int PointIndex { get; internal set; }
    internal string SeriesName { get; internal set; }
    internal ChartElementType Type { get; internal set; }
    internal GraphicsPath get_Path();
    internal void set_Path(GraphicsPath value);
    internal bool get_RelativeCoordinates();
    internal void set_RelativeCoordinates(bool value);
    internal RectangleF get_BoundingRectangle();
    internal void set_BoundingRectangle(RectangleF value);
    internal object get_SelectedObject();
    internal void set_SelectedObject(object value);
    internal object get_SelectedSubObject();
    internal void set_SelectedSubObject(object value);
    internal int get_PointIndex();
    internal void set_PointIndex(int value);
    internal string get_SeriesName();
    internal void set_SeriesName(string value);
    internal ChartElementType get_Type();
    internal void set_Type(ChartElementType value);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    public virtual string ToString();
}
internal class System.Windows.Forms.DataVisualization.Charting.HotRegionsList : object {
    private ProcessMode _processChartMode;
    private ArrayList _regionList;
    private CommonElements _common;
    internal bool hitTestCalled;
    internal ProcessMode ProcessChartMode { get; internal set; }
    internal ArrayList List { get; }
    internal HotRegionsList(CommonElements common);
    internal ProcessMode get_ProcessChartMode();
    internal void set_ProcessChartMode(ProcessMode value);
    internal ArrayList get_List();
    public void AddHotRegion(RectangleF rectSize, DataPoint point, string seriesName, int pointIndex);
    internal void AddHotRegion(GraphicsPath path, bool relativePath, ChartGraphics graph, DataPoint point, string seriesName, int pointIndex);
    internal void AddHotRegion(int insertIndex, GraphicsPath path, bool relativePath, ChartGraphics graph, DataPoint point, string seriesName, int pointIndex);
    internal void AddHotRegion(GraphicsPath path, bool relativePath, Single[] coord, DataPoint point, string seriesName, int pointIndex);
    internal void AddHotRegion(int insertIndex, ChartGraphics graph, float x, float y, float radius, DataPoint point, string seriesName, int pointIndex);
    internal void AddHotRegion(RectangleF rectArea, string toolTip, string hRef, string mapAreaAttributes, string postBackValue, object selectedObject, ChartElementType type, string series);
    internal void AddHotRegion(RectangleF rectArea, string toolTip, string hRef, string mapAreaAttributes, string postBackValue, object selectedObject, object selectedSubObject, ChartElementType type, string series);
    internal void AddHotRegion(ChartGraphics graph, GraphicsPath path, bool relativePath, string toolTip, string hRef, string mapAreaAttributes, string postBackValue, object selectedObject, ChartElementType type);
    internal void AddHotRegion(RectangleF rectArea, object selectedObject, ChartElementType type, bool relativeCoordinates);
    internal void AddHotRegion(RectangleF rectArea, object selectedObject, ChartElementType type, bool relativeCoordinates, bool insertAtBeginning);
    internal void AddHotRegion(GraphicsPath path, bool relativePath, ChartElementType type, object selectedObject);
    internal int FindInsertIndex();
    public void Clear();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal interface System.Windows.Forms.DataVisualization.Charting.IChartElement {
    public IChartElement Parent { get; public set; }
    public CommonElements Common { get; }
    public abstract virtual IChartElement get_Parent();
    public abstract virtual void set_Parent(IChartElement value);
    public abstract virtual CommonElements get_Common();
    public abstract virtual void Invalidate();
}
internal interface System.Windows.Forms.DataVisualization.Charting.IChartRenderingEngine {
    public Matrix Transform { get; public set; }
    public SmoothingMode SmoothingMode { get; public set; }
    public TextRenderingHint TextRenderingHint { get; public set; }
    public Region Clip { get; public set; }
    public Graphics Graphics { get; public set; }
    public bool IsClipEmpty { get; }
    public abstract virtual void DrawLine(Pen pen, PointF pt1, PointF pt2);
    public abstract virtual void DrawLine(Pen pen, float x1, float y1, float x2, float y2);
    public abstract virtual void DrawImage(Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttr);
    public abstract virtual void DrawEllipse(Pen pen, float x, float y, float width, float height);
    public abstract virtual void DrawCurve(Pen pen, PointF[] points, int offset, int numberOfSegments, float tension);
    public abstract virtual void DrawRectangle(Pen pen, int x, int y, int width, int height);
    public abstract virtual void DrawPolygon(Pen pen, PointF[] points);
    public abstract virtual void DrawString(string s, Font font, Brush brush, RectangleF layoutRectangle, StringFormat format);
    public abstract virtual void DrawString(string s, Font font, Brush brush, PointF point, StringFormat format);
    public abstract virtual void DrawImage(Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs);
    public abstract virtual void DrawRectangle(Pen pen, float x, float y, float width, float height);
    public abstract virtual void DrawPath(Pen pen, GraphicsPath path);
    public abstract virtual void DrawPie(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public abstract virtual void DrawArc(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public abstract virtual void DrawImage(Image image, RectangleF rect);
    public abstract virtual void DrawEllipse(Pen pen, RectangleF rect);
    public abstract virtual void DrawLines(Pen pen, PointF[] points);
    public abstract virtual void FillEllipse(Brush brush, RectangleF rect);
    public abstract virtual void FillPath(Brush brush, GraphicsPath path);
    public abstract virtual void FillRegion(Brush brush, Region region);
    public abstract virtual void FillRectangle(Brush brush, RectangleF rect);
    public abstract virtual void FillRectangle(Brush brush, float x, float y, float width, float height);
    public abstract virtual void FillPolygon(Brush brush, PointF[] points);
    public abstract virtual void FillPie(Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public abstract virtual SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat);
    public abstract virtual SizeF MeasureString(string text, Font font);
    public abstract virtual GraphicsState Save();
    public abstract virtual void Restore(GraphicsState gstate);
    public abstract virtual void ResetClip();
    public abstract virtual void SetClip(RectangleF rect);
    public abstract virtual void SetClip(GraphicsPath path, CombineMode combineMode);
    public abstract virtual void TranslateTransform(float dx, float dy);
    public abstract virtual void BeginSelection(string hRef, string title);
    public abstract virtual void EndSelection();
    public abstract virtual Matrix get_Transform();
    public abstract virtual void set_Transform(Matrix value);
    public abstract virtual SmoothingMode get_SmoothingMode();
    public abstract virtual void set_SmoothingMode(SmoothingMode value);
    public abstract virtual TextRenderingHint get_TextRenderingHint();
    public abstract virtual void set_TextRenderingHint(TextRenderingHint value);
    public abstract virtual Region get_Clip();
    public abstract virtual void set_Clip(Region value);
    public abstract virtual Graphics get_Graphics();
    public abstract virtual void set_Graphics(Graphics value);
    public abstract virtual bool get_IsClipEmpty();
}
internal interface System.Windows.Forms.DataVisualization.Charting.IDataPointCustomPropertiesProvider {
    public DataPointCustomProperties DataPointCustomProperties { get; }
    public abstract virtual DataPointCustomProperties get_DataPointCustomProperties();
}
public interface System.Windows.Forms.DataVisualization.Charting.IDataPointFilter {
    public abstract virtual bool FilterDataPoint(DataPoint point, Series series, int pointIndex);
}
[SRDescriptionAttribute("DescriptionAttributeImageAnnotation_ImageAnnotation")]
public class System.Windows.Forms.DataVisualization.Charting.ImageAnnotation : Annotation {
    private string _imageName;
    private ChartImageWrapMode _imageWrapMode;
    private Color _imageTransparentColor;
    [SRCategoryAttribute("CategoryAttributeImage")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ImageValueEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeImageAnnotation_Image")]
public string Image { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeImageWrapMode")]
[SRCategoryAttribute("CategoryAttributeImage")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartImageWrapMode ImageWrapMode { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRCategoryAttribute("CategoryAttributeImage")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeImageTransparentColor")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public Color ImageTransparentColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeImage")]
[DefaultValueAttribute("System.Drawing.ContentAlignment", "MiddleCenter")]
[SRDescriptionAttribute("DescriptionAttributeImageAnnotation_Alignment")]
public ContentAlignment Alignment { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public TextStyle TextStyle { get; public set; }
    [EditorBrowsableAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationType")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public string AnnotationType { get; }
    [ParenthesizePropertyNameAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeSelectionPointsStyle")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
internal SelectionPointsStyle SelectionPointsStyle { get; }
    [BrowsableAttribute("False")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color ForeColor { get; public set; }
    [DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public Font Font { get; public set; }
    [TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.HatchStyleEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BrowsableAttribute("False")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.GradientEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public GradientStyle BackGradientStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[BrowsableAttribute("False")]
public Color BackSecondaryColor { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "Black")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color LineColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("1")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeLineWidth")]
public int LineWidth { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLineDashStyle")]
public ChartDashStyle LineDashStyle { get; public set; }
    public virtual string get_Image();
    public virtual void set_Image(string value);
    public ChartImageWrapMode get_ImageWrapMode();
    public void set_ImageWrapMode(ChartImageWrapMode value);
    public Color get_ImageTransparentColor();
    public void set_ImageTransparentColor(Color value);
    public virtual ContentAlignment get_Alignment();
    public virtual void set_Alignment(ContentAlignment value);
    public virtual TextStyle get_TextStyle();
    public virtual void set_TextStyle(TextStyle value);
    public virtual string get_AnnotationType();
    internal virtual SelectionPointsStyle get_SelectionPointsStyle();
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual ChartHatchStyle get_BackHatchStyle();
    public virtual void set_BackHatchStyle(ChartHatchStyle value);
    public virtual GradientStyle get_BackGradientStyle();
    public virtual void set_BackGradientStyle(GradientStyle value);
    public virtual Color get_BackSecondaryColor();
    public virtual void set_BackSecondaryColor(Color value);
    public virtual Color get_LineColor();
    public virtual void set_LineColor(Color value);
    public virtual int get_LineWidth();
    public virtual void set_LineWidth(int value);
    public virtual ChartDashStyle get_LineDashStyle();
    public virtual void set_LineDashStyle(ChartDashStyle value);
    internal virtual void Paint(Chart chart, ChartGraphics graphics);
    private ChartImageAlignmentStyle GetImageAlignment(ContentAlignment alignment);
    internal virtual RectangleF GetContentPosition();
}
internal interface System.Windows.Forms.DataVisualization.Charting.INameController {
    public bool IsColectionEditing { get; public set; }
    public IList Snapshot { get; }
    public abstract virtual bool IsUniqueName(string name);
    public abstract virtual bool get_IsColectionEditing();
    public abstract virtual void set_IsColectionEditing(bool value);
    public abstract virtual void DoSnapshot(bool save, EventHandler`1<NameReferenceChangedEventArgs> changingCallback, EventHandler`1<NameReferenceChangedEventArgs> changedCallback);
    public abstract virtual IList get_Snapshot();
    public abstract virtual void OnNameReferenceChanged(NameReferenceChangedEventArgs e);
    public abstract virtual void OnNameReferenceChanging(NameReferenceChangedEventArgs e);
}
public enum System.Windows.Forms.DataVisualization.Charting.IntervalAutoMode : Enum {
    public int value__;
    public static IntervalAutoMode FixedCount;
    public static IntervalAutoMode VariableCount;
}
public enum System.Windows.Forms.DataVisualization.Charting.IntervalType : Enum {
    public int value__;
    public static IntervalType Number;
    public static IntervalType Years;
    public static IntervalType Months;
    public static IntervalType Weeks;
    public static IntervalType Days;
    public static IntervalType Hours;
    public static IntervalType Minutes;
    public static IntervalType Seconds;
    public static IntervalType Milliseconds;
}
internal class System.Windows.Forms.DataVisualization.Charting.IntNanValueConverter : Int32Converter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[FlagsAttribute]
public enum System.Windows.Forms.DataVisualization.Charting.LabelAlignmentStyles : Enum {
    public int value__;
    public static LabelAlignmentStyles Top;
    public static LabelAlignmentStyles Bottom;
    public static LabelAlignmentStyles Right;
    public static LabelAlignmentStyles Left;
    public static LabelAlignmentStyles TopLeft;
    public static LabelAlignmentStyles TopRight;
    public static LabelAlignmentStyles BottomLeft;
    public static LabelAlignmentStyles BottomRight;
    public static LabelAlignmentStyles Center;
}
[FlagsAttribute]
public enum System.Windows.Forms.DataVisualization.Charting.LabelAutoFitStyles : Enum {
    public int value__;
    public static LabelAutoFitStyles None;
    public static LabelAutoFitStyles IncreaseFont;
    public static LabelAutoFitStyles DecreaseFont;
    public static LabelAutoFitStyles StaggeredLabels;
    public static LabelAutoFitStyles LabelsAngleStep30;
    public static LabelAutoFitStyles LabelsAngleStep45;
    public static LabelAutoFitStyles LabelsAngleStep90;
    public static LabelAutoFitStyles WordWrap;
}
[SRDescriptionAttribute("DescriptionAttributeLabelCalloutStyle_LabelCalloutStyle")]
public enum System.Windows.Forms.DataVisualization.Charting.LabelCalloutStyle : Enum {
    public int value__;
    public static LabelCalloutStyle None;
    public static LabelCalloutStyle Underlined;
    public static LabelCalloutStyle Box;
}
public enum System.Windows.Forms.DataVisualization.Charting.LabelMarkStyle : Enum {
    public int value__;
    public static LabelMarkStyle None;
    public static LabelMarkStyle SideMark;
    public static LabelMarkStyle LineSideMark;
    public static LabelMarkStyle Box;
}
[SRDescriptionAttribute("DescriptionAttributeLabelOutsidePlotAreaStyle_LabelOutsidePlotAreaStyle")]
public enum System.Windows.Forms.DataVisualization.Charting.LabelOutsidePlotAreaStyle : Enum {
    public int value__;
    public static LabelOutsidePlotAreaStyle Yes;
    public static LabelOutsidePlotAreaStyle No;
    public static LabelOutsidePlotAreaStyle Partial;
}
[DefaultPropertyAttribute("Enabled")]
[SRDescriptionAttribute("DescriptionAttributeLabel_Label")]
public class System.Windows.Forms.DataVisualization.Charting.LabelStyle : ChartElement {
    private Axis _axis;
    private bool _enabled;
    internal double intervalOffset;
    internal double interval;
    internal DateTimeIntervalType intervalType;
    internal DateTimeIntervalType intervalOffsetType;
    private FontCache _fontCache;
    private Font _font;
    private Color _foreColor;
    internal int angle;
    internal bool isStaggered;
    private bool _isEndLabelVisible;
    private bool _truncatedLabels;
    private string _format;
    unknown Axis Axis {internal set; }
    [SRDescriptionAttribute("DescriptionAttributeLabel_IntervalOffset")]
[SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.AxisElementIntervalValueConverter")]
[DefaultValueAttribute("не число")]
[RefreshPropertiesAttribute("1")]
public double IntervalOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[RefreshPropertiesAttribute("1")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLabel_IntervalOffsetType")]
public DateTimeIntervalType IntervalOffsetType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeLabel_Interval")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.AxisElementIntervalValueConverter")]
[BindableAttribute("True")]
public double Interval { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLabel_IntervalType")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeData")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DateTimeIntervalType IntervalType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[SRDescriptionAttribute("DescriptionAttributeLabel_Font")]
[BindableAttribute("True")]
public Font Font { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeFontColor")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
public Color ForeColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeLabel_FontAngle")]
[RefreshPropertiesAttribute("1")]
[BindableAttribute("True")]
public int Angle { get; public set; }
    [BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeLabel_OffsetLabels")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("False")]
public bool IsStaggered { get; public set; }
    [DefaultValueAttribute("True")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLabel_ShowEndLabels")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public bool IsEndLabelVisible { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeLabel_TruncatedLabels")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public bool TruncatedLabels { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLabel_Format")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public string Format { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLabel_Enabled")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    internal LabelStyle(Axis axis);
    internal void PaintCircular(ChartGraphics graph);
    internal static RectangleF GetLabelPosition(PointF position, SizeF size, StringFormat format);
    internal void Paint(ChartGraphics graph, bool backElements);
    private RectangleF GetAllLabelsRect(ChartArea area, AxisPosition position, StringFormat stringFormat);
    private AxisPosition GetLabelsPosition(Axis axis);
    internal void Paint3D(ChartGraphics graph, bool backElements);
    internal void set_Axis(Axis value);
    internal virtual void Invalidate();
    public double get_IntervalOffset();
    public void set_IntervalOffset(double value);
    internal double GetIntervalOffset();
    public DateTimeIntervalType get_IntervalOffsetType();
    public void set_IntervalOffsetType(DateTimeIntervalType value);
    internal DateTimeIntervalType GetIntervalOffsetType();
    public double get_Interval();
    public void set_Interval(double value);
    internal double GetInterval();
    public DateTimeIntervalType get_IntervalType();
    public void set_IntervalType(DateTimeIntervalType value);
    internal DateTimeIntervalType GetIntervalType();
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public int get_Angle();
    public void set_Angle(int value);
    public bool get_IsStaggered();
    public void set_IsStaggered(bool value);
    public bool get_IsEndLabelVisible();
    public void set_IsEndLabelVisible(bool value);
    public bool get_TruncatedLabels();
    public void set_TruncatedLabels(bool value);
    public string get_Format();
    public void set_Format(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    protected virtual void Dispose(bool disposing);
}
[DefaultPropertyAttribute("Enabled")]
[SRDescriptionAttribute("DescriptionAttributeLegend_Legend")]
public class System.Windows.Forms.DataVisualization.Charting.Legend : ChartNamedElement {
    private ElementPosition _position;
    private bool _enabled;
    private LegendStyle _legendStyle;
    private LegendTableStyle _legendTableStyle;
    private LegendItemsCollection _customLegends;
    private ChartHatchStyle _backHatchStyle;
    private string _backImage;
    private ChartImageWrapMode _backImageWrapMode;
    private Color _backImageTransparentColor;
    private ChartImageAlignmentStyle _backImageAlignment;
    private GradientStyle _backGradientStyle;
    private Color _backSecondaryColor;
    private Color _borderColor;
    private Color _backColor;
    private int _borderWidth;
    private ChartDashStyle _borderDashStyle;
    private FontCache _fontCache;
    private Font _font;
    private Color _foreColor;
    private StringAlignment _legendAlignment;
    private Docking _legendDocking;
    private int _shadowOffset;
    private Color _shadowColor;
    private bool _isTextAutoFit;
    private string _dockedToChartArea;
    private bool _isDockedInsideChartArea;
    internal LegendItemsCollection legendItems;
    private int _itemColumns;
    internal Font autofitFont;
    private bool _isEquallySpacedItems;
    private bool _interlacedRows;
    private Color _interlacedRowsColor;
    private Size _offset;
    private float _maximumLegendAutoSize;
    private int _textWrapThreshold;
    private int _autoFitFontSizeAdjustment;
    private LegendCellColumnCollection _cellColumns;
    private LegendItemOrder _legendItemOrder;
    private string _title;
    private Color _titleForeColor;
    private Color _titleBackColor;
    private Font _titleFont;
    private StringAlignment _titleAlignment;
    private LegendSeparatorStyle _titleSeparator;
    private Color _titleSeparatorColor;
    private LegendSeparatorStyle _headerSeparator;
    private Color _headerSeparatorColor;
    private LegendSeparatorStyle _itemColumnSeparator;
    private Color _itemColumnSeparatorColor;
    private int _itemColumnSpacing;
    private int _itemColumnSpacingRel;
    private Rectangle _titlePosition;
    private Rectangle _headerPosition;
    private int _autoFitMinFontSize;
    private int _horizontalSpaceLeft;
    private int _verticalSpaceLeft;
    private Int32[0...,0...] _subColumnSizes;
    private Int32[0...,0...] _cellHeights;
    private Int32[] _numberOfRowsPerColumn;
    private int _numberOfLegendItemsToProcess;
    private Rectangle _legendItemsAreaPosition;
    private bool _legendItemsTruncated;
    private int _truncatedDotsSize;
    private int _numberOfCells;
    internal Size singleWCharacterSize;
    [SRDescriptionAttribute("DescriptionAttributeLegend_Name")]
[NotifyParentPropertyAttribute("True")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeMisc")]
public string Name { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.LegendAreaNameConverter")]
[SRCategoryAttribute("CategoryAttributeDocking")]
[NotifyParentPropertyAttribute("True")]
[BindableAttribute("True")]
[DefaultValueAttribute("NotSet")]
[SRDescriptionAttribute("DescriptionAttributeLegend_DockToChartArea")]
public string DockedToChartArea { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegend_DockInsideChartArea")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeDocking")]
public bool IsDockedInsideChartArea { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[SerializationVisibilityAttribute("2")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegend_Position")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.ElementPositionConverter")]
public ElementPosition Position { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLegend_EquallySpacedItems")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("False")]
public bool IsEquallySpacedItems { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[ParenthesizePropertyNameAttribute("True")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegend_Enabled")]
[NotifyParentPropertyAttribute("True")]
public bool Enabled { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLegend_AutoFitText")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
public bool IsTextAutoFit { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[ParenthesizePropertyNameAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegend_LegendStyle")]
public LegendStyle LegendStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeLegend_AutoFitMinFontSize")]
[DefaultValueAttribute("7")]
public int AutoFitMinFontSize { get; public set; }
    [SRCategoryAttribute("CategoryAttributeDocking")]
[SRDescriptionAttribute("DescriptionAttributeLegend_MaxAutoSize")]
[DefaultValueAttribute("50")]
public float MaximumAutoSize { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.LegendCellColumnCollectionEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeCellColumns")]
[SRDescriptionAttribute("DescriptionAttributeLegend_CellColumns")]
[DesignerSerializationVisibilityAttribute("2")]
public LegendCellColumnCollection CellColumns { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[ParenthesizePropertyNameAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegend_TableStyle")]
public LegendTableStyle TableStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeCellColumns")]
[SRDescriptionAttribute("DescriptionAttributeLegend_HeaderSeparator")]
[DefaultValueAttribute("System.Windows.Forms.DataVisualization.Charting.LegendSeparatorStyle", "None")]
public LegendSeparatorStyle HeaderSeparator { get; public set; }
    [SRCategoryAttribute("CategoryAttributeCellColumns")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DescriptionAttributeLegend_HeaderSeparatorColor")]
public Color HeaderSeparatorColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeCellColumns")]
[SRDescriptionAttribute("DescriptionAttributeLegend_ItemColumnSeparator")]
[DefaultValueAttribute("System.Windows.Forms.DataVisualization.Charting.LegendSeparatorStyle", "None")]
public LegendSeparatorStyle ItemColumnSeparator { get; public set; }
    [TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRDescriptionAttribute("DescriptionAttributeLegend_ItemColumnSeparatorColor")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRCategoryAttribute("CategoryAttributeCellColumns")]
public Color ItemColumnSeparatorColor { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLegend_ItemColumnSpacing")]
[SRCategoryAttribute("CategoryAttributeCellColumns")]
[DefaultValueAttribute("50")]
public int ItemColumnSpacing { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeBackColor")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color BackColor { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBorderColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color BorderColor { get; public set; }
    [BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBorderDashStyle")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartDashStyle BorderDashStyle { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeBorderWidth")]
[NotifyParentPropertyAttribute("True")]
[BindableAttribute("True")]
[DefaultValueAttribute("1")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public int BorderWidth { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeBackImage")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ImageValueEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[NotifyParentPropertyAttribute("True")]
public string BackImage { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeImageWrapMode")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
public ChartImageWrapMode BackImageWrapMode { get; public set; }
    [BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeImageTransparentColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
public Color BackImageTransparentColor { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeBackImageAlign")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
public ChartImageAlignmentStyle BackImageAlignment { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientStyle")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.GradientEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public GradientStyle BackGradientStyle { get; public set; }
    [BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackSecondaryColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color BackSecondaryColor { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeBackHatchStyle")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.HatchStyleEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[SRDescriptionAttribute("DescriptionAttributeLegend_Font")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public Font Font { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeLegendFontColor")]
public Color ForeColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute]
[SRDescriptionAttribute("DescriptionAttributeLegend_Alignment")]
[SRCategoryAttribute("CategoryAttributeDocking")]
[BindableAttribute("True")]
public StringAlignment Alignment { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegend_Docking")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeDocking")]
public Docking Docking { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[NotifyParentPropertyAttribute("True")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeShadowOffset")]
public int ShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeShadowColor")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "128, 0, 0, 0")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color ShadowColor { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.LegendAreaNameConverter")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[BindableAttribute("False")]
[DefaultValueAttribute("NotSet")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegend_InsideChartArea")]
[EditorBrowsableAttribute("1")]
[SerializationVisibilityAttribute("0")]
public string InsideChartArea { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.LegendItemCollectionEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DesignerSerializationVisibilityAttribute("2")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegend_CustomItems")]
public LegendItemsCollection CustomItems { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeLegend_TextWrapThreshold")]
[DefaultValueAttribute("25")]
public int TextWrapThreshold { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegend_Reversed")]
public LegendItemOrder LegendItemOrder { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLegend_InterlacedRows")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("False")]
public bool InterlacedRows { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DescriptionAttributeLegend_InterlacedRowsColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public Color InterlacedRowsColor { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLegend_Title")]
[DefaultValueAttribute("")]
[SRCategoryAttribute("CategoryAttributeTitle")]
public string Title { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRCategoryAttribute("CategoryAttributeTitle")]
[SRDescriptionAttribute("DescriptionAttributeLegend_TitleColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public Color TitleForeColor { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DescriptionAttributeTitleBackColor")]
[SRCategoryAttribute("CategoryAttributeTitle")]
public Color TitleBackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeTitle")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt, style=Bold")]
[SRDescriptionAttribute("DescriptionAttributeTitleFont")]
public Font TitleFont { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLegend_TitleAlignment")]
[SRCategoryAttribute("CategoryAttributeTitle")]
[DefaultValueAttribute("System.Drawing.StringAlignment", "Center")]
public StringAlignment TitleAlignment { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLegend_TitleSeparator")]
[SRCategoryAttribute("CategoryAttributeTitle")]
[DefaultValueAttribute("System.Windows.Forms.DataVisualization.Charting.LegendSeparatorStyle", "None")]
public LegendSeparatorStyle TitleSeparator { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRCategoryAttribute("CategoryAttributeTitle")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRDescriptionAttribute("DescriptionAttributeLegend_TitleSeparatorColor")]
public Color TitleSeparatorColor { get; public set; }
    public Legend(string name);
    private void RecalcLegendInfo(ChartGraphics chartGraph);
    private Rectangle GetCellPosition(int columnIndex, int rowIndex, int cellIndex, Size itemHalfSpacing);
    private SizeF GetOptimalSize(ChartGraphics chartGraph, SizeF maxSizeRel);
    internal void CalcLegendPosition(ChartGraphics chartGraph, RectangleF& chartAreasRectangle, float elementSpacing);
    private void GetNumberOfRowsAndColumns(ChartGraphics chartGraph, Size legendSize, int numberOfItemsToCheck, Int32[]& numberOfRowsPerColumn, Int32& columnNumber);
    private void GetNumberOfRowsAndColumns(ChartGraphics chartGraph, Size legendSize, int numberOfItemsToCheck, Int32[]& numberOfRowsPerColumn, Int32& columnNumber, Int32& horSpaceLeft, Int32& vertSpaceLeft);
    private int GetColumnHeight(int columnIndex);
    internal void SelectLegendBackground();
    private int GetMaximumNumberOfRows();
    private int GetMaximumNumberOfRows(Int32[] rowsPerColumn);
    private bool CheckLegendItemsFit(ChartGraphics graph, Size legendItemsAreaSize, int numberOfItemsToCheck, int fontSizeReducedBy, int numberOfColumns, Int32[] numberOfRowsPerColumn, Int32[0...,0...]& subColumnSizes, Int32[0...,0...]& cellHeights, Int32& horizontalSpaceLeft, Int32& verticalSpaceLeft);
    private int GetNumberOfCells();
    private void FillLegendItemsCollection();
    internal void Paint(ChartGraphics chartGraph);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public string get_DockedToChartArea();
    public void set_DockedToChartArea(string value);
    public bool get_IsDockedInsideChartArea();
    public void set_IsDockedInsideChartArea(bool value);
    public ElementPosition get_Position();
    public void set_Position(ElementPosition value);
    internal bool ShouldSerializePosition();
    public bool get_IsEquallySpacedItems();
    public void set_IsEquallySpacedItems(bool value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public bool get_IsTextAutoFit();
    public void set_IsTextAutoFit(bool value);
    public LegendStyle get_LegendStyle();
    public void set_LegendStyle(LegendStyle value);
    public int get_AutoFitMinFontSize();
    public void set_AutoFitMinFontSize(int value);
    public float get_MaximumAutoSize();
    public void set_MaximumAutoSize(float value);
    public LegendCellColumnCollection get_CellColumns();
    public LegendTableStyle get_TableStyle();
    public void set_TableStyle(LegendTableStyle value);
    public LegendSeparatorStyle get_HeaderSeparator();
    public void set_HeaderSeparator(LegendSeparatorStyle value);
    public Color get_HeaderSeparatorColor();
    public void set_HeaderSeparatorColor(Color value);
    public LegendSeparatorStyle get_ItemColumnSeparator();
    public void set_ItemColumnSeparator(LegendSeparatorStyle value);
    public Color get_ItemColumnSeparatorColor();
    public void set_ItemColumnSeparatorColor(Color value);
    public int get_ItemColumnSpacing();
    public void set_ItemColumnSpacing(int value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public ChartDashStyle get_BorderDashStyle();
    public void set_BorderDashStyle(ChartDashStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public string get_BackImage();
    public void set_BackImage(string value);
    public ChartImageWrapMode get_BackImageWrapMode();
    public void set_BackImageWrapMode(ChartImageWrapMode value);
    public Color get_BackImageTransparentColor();
    public void set_BackImageTransparentColor(Color value);
    public ChartImageAlignmentStyle get_BackImageAlignment();
    public void set_BackImageAlignment(ChartImageAlignmentStyle value);
    public GradientStyle get_BackGradientStyle();
    public void set_BackGradientStyle(GradientStyle value);
    public Color get_BackSecondaryColor();
    public void set_BackSecondaryColor(Color value);
    public ChartHatchStyle get_BackHatchStyle();
    public void set_BackHatchStyle(ChartHatchStyle value);
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public StringAlignment get_Alignment();
    public void set_Alignment(StringAlignment value);
    public Docking get_Docking();
    public void set_Docking(Docking value);
    public int get_ShadowOffset();
    public void set_ShadowOffset(int value);
    public Color get_ShadowColor();
    public void set_ShadowColor(Color value);
    public string get_InsideChartArea();
    public void set_InsideChartArea(string value);
    public LegendItemsCollection get_CustomItems();
    public int get_TextWrapThreshold();
    public void set_TextWrapThreshold(int value);
    public LegendItemOrder get_LegendItemOrder();
    public void set_LegendItemOrder(LegendItemOrder value);
    public bool get_InterlacedRows();
    public void set_InterlacedRows(bool value);
    public Color get_InterlacedRowsColor();
    public void set_InterlacedRowsColor(Color value);
    public string get_Title();
    public void set_Title(string value);
    public Color get_TitleForeColor();
    public void set_TitleForeColor(Color value);
    public Color get_TitleBackColor();
    public void set_TitleBackColor(Color value);
    public Font get_TitleFont();
    public void set_TitleFont(Font value);
    public StringAlignment get_TitleAlignment();
    public void set_TitleAlignment(StringAlignment value);
    public LegendSeparatorStyle get_TitleSeparator();
    public void set_TitleSeparator(LegendSeparatorStyle value);
    public Color get_TitleSeparatorColor();
    public void set_TitleSeparatorColor(Color value);
    private Size GetTitleSize(ChartGraphics chartGraph, Size titleMaxSize);
    private Size GetHeaderSize(ChartGraphics chartGraph, LegendCellColumn legendColumn);
    private void DrawLegendHeader(ChartGraphics chartGraph);
    private void DrawLegendTitle(ChartGraphics chartGraph);
    internal Size GetSeparatorSize(LegendSeparatorStyle separatorType);
    private void DrawSeparator(ChartGraphics chartGraph, LegendSeparatorStyle separatorType, Color color, bool horizontal, Rectangle position);
    private int GetBorderSize();
    private LegendTableStyle GetLegendTableStyle(ChartGraphics chartGraph);
    internal bool IsEnabled();
    internal void Invalidate(bool invalidateLegendOnly);
    protected virtual void Dispose(bool disposing);
}
internal class System.Windows.Forms.DataVisualization.Charting.LegendAreaNameConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
[SRDescriptionAttribute("DescriptionAttributeLegendCell_LegendCell")]
public class System.Windows.Forms.DataVisualization.Charting.LegendCell : ChartNamedElement {
    private LegendCellType _cellType;
    private string _text;
    private Color _foreColor;
    private Color _backColor;
    private FontCache _fontCache;
    private Font _font;
    private string _image;
    private Color _imageTransparentColor;
    private Size _imageSize;
    private Size _seriesSymbolSize;
    private ContentAlignment _alignment;
    private int _cellSpan;
    private string _toolTip;
    private Margins _margins;
    private int _rowIndex;
    internal Rectangle cellPosition;
    internal Rectangle cellPositionWithMargins;
    private Size _cachedCellSize;
    private int _cachedCellSizeFontReducedBy;
    [SRDescriptionAttribute("DescriptionAttributeLegendCell_Name")]
[SRCategoryAttribute("CategoryAttributeMisc")]
public string Name { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ParenthesizePropertyNameAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_CellType")]
public LegendCellType CellType { get; public set; }
    [SerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Legend Legend { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public LegendItem LegendItem { get; }
    [SRDescriptionAttribute("DescriptionAttributeLegendCell_Text")]
[DefaultValueAttribute("")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public string Text { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeForeColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color ForeColor { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_Font")]
[DefaultValueAttribute("")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_Image")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ImageValueEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public string Image { get; public set; }
    [TypeConverterAttribute("System.Drawing.ColorConverter")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeImageTransparentColor")]
public Color ImageTransparentColor { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLegendCell_ImageSize")]
[DefaultValueAttribute("System.Drawing.Size", "0, 0")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.SizeEmptyValueConverter")]
[SRCategoryAttribute("CategoryAttributeLayout")]
public Size ImageSize { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLayout")]
[DefaultValueAttribute("System.Drawing.Size", "200, 70")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_SeriesSymbolSize")]
public Size SeriesSymbolSize { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLayout")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_Alignment")]
[DefaultValueAttribute]
public ContentAlignment Alignment { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLayout")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_CellSpan")]
public int CellSpan { get; public set; }
    [DefaultValueAttribute("System.Windows.Forms.DataVisualization.Charting.Margins", "0,0,15,15")]
[SRCategoryAttribute("CategoryAttributeLayout")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_Margins")]
[SerializationVisibilityAttribute("1")]
[NotifyParentPropertyAttribute("True")]
public Margins Margins { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeToolTip")]
[SRCategoryAttribute("CategoryAttributeMapArea")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    public LegendCell(string text);
    public LegendCell(LegendCellType cellType, string text);
    public LegendCell(LegendCellType cellType, string text, ContentAlignment alignment);
    private void Intitialize(LegendCellType cellType, string text, ContentAlignment alignment);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual LegendCellType get_CellType();
    public virtual void set_CellType(LegendCellType value);
    public virtual Legend get_Legend();
    public virtual LegendItem get_LegendItem();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual string get_Image();
    public virtual void set_Image(string value);
    public virtual Color get_ImageTransparentColor();
    public virtual void set_ImageTransparentColor(Color value);
    public virtual Size get_ImageSize();
    public virtual void set_ImageSize(Size value);
    public virtual Size get_SeriesSymbolSize();
    public virtual void set_SeriesSymbolSize(Size value);
    public virtual ContentAlignment get_Alignment();
    public virtual void set_Alignment(ContentAlignment value);
    public virtual int get_CellSpan();
    public virtual void set_CellSpan(int value);
    public virtual Margins get_Margins();
    public virtual void set_Margins(Margins value);
    [EditorBrowsableAttribute("1")]
internal bool ShouldSerializeMargins();
    public virtual void set_ToolTip(string value);
    public virtual string get_ToolTip();
    internal void ResetCache();
    internal void SetCellPosition(int rowIndex, Rectangle position, Size singleWCharacterSize);
    internal Size MeasureCell(ChartGraphics graph, int fontSizeReducedBy, Font legendAutoFont, Size singleWCharacterSize);
    private Color GetCellBackColor();
    private Font GetCellFont(Font legendAutoFont, int fontSizeReducedBy, Boolean& disposeFont);
    private string GetCellToolTip();
    private string GetCellUrl();
    private string GetCellMapAreaAttributes();
    private string GetCellPostBackValue();
    private string GetCellText();
    private Color GetCellForeColor();
    internal void Paint(ChartGraphics chartGraph, int fontSizeReducedBy, Font legendAutoFont, Size singleWCharacterSize);
    private void PaintCellText(ChartGraphics chartGraph, int fontSizeReducedBy, Font legendAutoFont);
    private void PaintCellImage(ChartGraphics chartGraph, Size singleWCharacterSize);
    private void PaintCellSeriesSymbol(ChartGraphics chartGraph, SizeF singleWCharacterSize);
    protected virtual void Dispose(bool disposing);
}
[SRDescriptionAttribute("DescriptionAttributeLegendCellCollection_LegendCellCollection")]
public class System.Windows.Forms.DataVisualization.Charting.LegendCellCollection : ChartNamedElementCollection`1<LegendCell> {
    internal LegendCellCollection(LegendItem parent);
    public int Add(LegendCellType cellType, string text, ContentAlignment alignment);
    public void Insert(int index, LegendCellType cellType, string text, ContentAlignment alignment);
}
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_LegendCellColumn")]
public class System.Windows.Forms.DataVisualization.Charting.LegendCellColumn : ChartNamedElement {
    private LegendCellColumnType _columnType;
    private string _text;
    private Color _foreColor;
    private Color _backColor;
    private FontCache _fontCache;
    private Font _font;
    private Size _seriesSymbolSize;
    private ContentAlignment _alignment;
    private string _toolTip;
    private Margins _margins;
    private string _headerText;
    private StringAlignment _headerAlignment;
    private Color _headerForeColor;
    private Color _headerBackColor;
    private Font _headerFont;
    private int _minimumCellWidth;
    private int _maximumCellWidth;
    [SRCategoryAttribute("CategoryAttributeMisc")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_Name")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public Legend Legend { get; }
    [ParenthesizePropertyNameAttribute("True")]
[SRCategoryAttribute("CategoryAttributeSeriesItems")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_ColumnType")]
public LegendCellColumnType ColumnType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeSeriesItems")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_Text")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.KeywordsStringEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("#LEGENDTEXT")]
public string Text { get; public set; }
    [TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeSeriesItems")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeForeColor")]
public Color ForeColor { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeBackColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRCategoryAttribute("CategoryAttributeSeriesItems")]
public Color BackColor { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CategoryAttributeSeriesItems")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_Font")]
public Font Font { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_SeriesSymbolSize")]
[DefaultValueAttribute("System.Drawing.Size", "200, 70")]
[SRCategoryAttribute("CategoryAttributeSeriesItems")]
public Size SeriesSymbolSize { get; public set; }
    [DefaultValueAttribute]
[SRCategoryAttribute("CategoryAttributeSeriesItems")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_Alignment")]
public ContentAlignment Alignment { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SerializationVisibilityAttribute("1")]
[DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_Margins")]
[DefaultValueAttribute("System.Windows.Forms.DataVisualization.Charting.Margins", "0,0,15,15")]
[SRCategoryAttribute("CategoryAttributeSeriesItems")]
public Margins Margins { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeToolTip")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.KeywordsStringEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeSeriesItems")]
public string ToolTip { get; public set; }
    [DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_HeaderText")]
[SRCategoryAttribute("CategoryAttributeHeader")]
public string HeaderText { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "Black")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_HeaderColor")]
[SRCategoryAttribute("CategoryAttributeHeader")]
public Color HeaderForeColor { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRCategoryAttribute("CategoryAttributeHeader")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeHeaderBackColor")]
public Color HeaderBackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeHeader")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt, style=Bold")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_HeaderFont")]
public Font HeaderFont { get; public set; }
    [SRCategoryAttribute("CategoryAttributeHeader")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_HeaderTextAlignment")]
[DefaultValueAttribute("System.Drawing.StringAlignment", "Center")]
public StringAlignment HeaderAlignment { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.IntNanValueConverter")]
[DefaultValueAttribute("-1")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_MinimumWidth")]
[SRCategoryAttribute("CategoryAttributeSize")]
public int MinimumWidth { get; public set; }
    [DefaultValueAttribute("-1")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.IntNanValueConverter")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_MaximumWidth")]
[SRCategoryAttribute("CategoryAttributeSize")]
public int MaximumWidth { get; public set; }
    public LegendCellColumn(string headerText, LegendCellColumnType columnType, string text);
    public LegendCellColumn(string headerText, LegendCellColumnType columnType, string text, ContentAlignment alignment);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual Legend get_Legend();
    public virtual LegendCellColumnType get_ColumnType();
    public virtual void set_ColumnType(LegendCellColumnType value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual Size get_SeriesSymbolSize();
    public virtual void set_SeriesSymbolSize(Size value);
    public virtual ContentAlignment get_Alignment();
    public virtual void set_Alignment(ContentAlignment value);
    public virtual Margins get_Margins();
    public virtual void set_Margins(Margins value);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeMargins();
    public virtual void set_ToolTip(string value);
    public virtual string get_ToolTip();
    public virtual string get_HeaderText();
    public virtual void set_HeaderText(string value);
    public virtual Color get_HeaderForeColor();
    public virtual void set_HeaderForeColor(Color value);
    public virtual Color get_HeaderBackColor();
    public virtual void set_HeaderBackColor(Color value);
    public virtual Font get_HeaderFont();
    public virtual void set_HeaderFont(Font value);
    public StringAlignment get_HeaderAlignment();
    public void set_HeaderAlignment(StringAlignment value);
    public virtual int get_MinimumWidth();
    public virtual void set_MinimumWidth(int value);
    public virtual int get_MaximumWidth();
    public virtual void set_MaximumWidth(int value);
    internal LegendCell CreateNewCell();
    protected virtual void Dispose(bool disposing);
}
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumnCollection_LegendCellColumnCollection")]
public class System.Windows.Forms.DataVisualization.Charting.LegendCellColumnCollection : ChartNamedElementCollection`1<LegendCellColumn> {
    internal LegendCellColumnCollection(Legend legend);
    protected virtual void Dispose(bool disposing);
}
public enum System.Windows.Forms.DataVisualization.Charting.LegendCellColumnType : Enum {
    public int value__;
    public static LegendCellColumnType Text;
    public static LegendCellColumnType SeriesSymbol;
}
public enum System.Windows.Forms.DataVisualization.Charting.LegendCellType : Enum {
    public int value__;
    public static LegendCellType Text;
    public static LegendCellType SeriesSymbol;
    public static LegendCellType Image;
}
[SRDescriptionAttribute("DescriptionAttributeLegendCollection_LegendCollection")]
public class System.Windows.Forms.DataVisualization.Charting.LegendCollection : ChartNamedElementCollection`1<Legend> {
    internal string DefaultNameReference { get; }
    internal LegendCollection(ChartPicture chartPicture);
    internal string get_DefaultNameReference();
    public Legend Add(string name);
    internal void CalcLegendPosition(ChartGraphics chartGraph, RectangleF& chartAreasRectangle, float elementSpacing);
    internal void CalcOutsideLegendPosition(ChartGraphics chartGraph, ChartArea area, RectangleF& chartAreasRectangle, float elementSpacing);
    internal void CalcInsideLegendPosition(ChartGraphics chartGraph, float elementSpacing);
    internal void ChartAreaNameReferenceChanged(object sender, NameReferenceChangedEventArgs e);
}
internal class System.Windows.Forms.DataVisualization.Charting.LegendConverter : NoNameExpandableObjectConverter {
}
public enum System.Windows.Forms.DataVisualization.Charting.LegendImageStyle : Enum {
    public int value__;
    public static LegendImageStyle Rectangle;
    public static LegendImageStyle Line;
    public static LegendImageStyle Marker;
}
[SRDescriptionAttribute("DescriptionAttributeLegendItem_LegendItem")]
[DefaultPropertyAttribute("Name")]
public class System.Windows.Forms.DataVisualization.Charting.LegendItem : ChartNamedElement {
    private Color _color;
    private string _image;
    private string _seriesName;
    private int _seriesPointIndex;
    private string _toolTip;
    internal LegendImageStyle style;
    internal GradientStyle backGradientStyle;
    internal Color backSecondaryColor;
    internal Color backImageTransparentColor;
    internal Color borderColor;
    internal int borderWidth;
    internal ChartDashStyle borderDashStyle;
    internal ChartHatchStyle backHatchStyle;
    internal int shadowOffset;
    internal Color shadowColor;
    internal ChartImageWrapMode backImageWrapMode;
    internal ChartImageAlignmentStyle backImageAlign;
    internal MarkerStyle markerStyle;
    internal int markerSize;
    internal string markerImage;
    internal Color markerImageTransparentColor;
    internal Color markerColor;
    internal Color markerBorderColor;
    private bool _enabled;
    private int _markerBorderWidth;
    private LegendCellCollection _cells;
    private LegendSeparatorStyle _separatorType;
    private Color _separatorColor;
    internal bool clearTempCells;
    [SerializationVisibilityAttribute("0")]
[BindableAttribute("False")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Legend Legend { get; }
    [NotifyParentPropertyAttribute("True")]
[ParenthesizePropertyNameAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_Name")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
public string Name { get; public set; }
    [TypeConverterAttribute("System.Drawing.ColorConverter")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_Color")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public Color Color { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ImageValueEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_Image")]
[DefaultValueAttribute("")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[NotifyParentPropertyAttribute("True")]
public string Image { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLegendItem_Style")]
[ParenthesizePropertyNameAttribute("True")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Windows.Forms.DataVisualization.Charting.LegendImageStyle", "Rectangle")]
public LegendImageStyle ImageStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeBorderColor")]
[BindableAttribute("True")]
public Color BorderColor { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.HatchStyleEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackHatchStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeImageTransparentColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color BackImageTransparentColor { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BindableAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.GradientEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientStyle")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public GradientStyle BackGradientStyle { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeBackSecondaryColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public Color BackSecondaryColor { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeBorderWidth")]
[DefaultValueAttribute("1")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
public int BorderWidth { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLegendItem_Enabled")]
[DefaultValueAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[ParenthesizePropertyNameAttribute("True")]
public bool Enabled { get; public set; }
    [DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeMarkerBorderWidth")]
[SRCategoryAttribute("CategoryAttributeMarker")]
public int MarkerBorderWidth { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeBorderDashStyle")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartDashStyle BorderDashStyle { get; public set; }
    [DefaultValueAttribute("0")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeShadowOffset")]
public int ShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "128,0,0,0")]
[SRDescriptionAttribute("DescriptionAttributeShadowColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color ShadowColor { get; public set; }
    [RefreshPropertiesAttribute("1")]
[SRCategoryAttribute("CategoryAttributeMarker")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_MarkerStyle")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.MarkerStyleEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public MarkerStyle MarkerStyle { get; public set; }
    [DefaultValueAttribute("5")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_MarkerSize")]
[RefreshPropertiesAttribute("1")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeMarker")]
public int MarkerSize { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ImageValueEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeMarker")]
[RefreshPropertiesAttribute("1")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeMarkerImage")]
public string MarkerImage { get; public set; }
    [RefreshPropertiesAttribute("1")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeMarker")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeImageTransparentColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color MarkerImageTransparentColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMarker")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_MarkerColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public Color MarkerColor { get; public set; }
    [RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeMarkerBorderColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeMarker")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color MarkerBorderColor { get; public set; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_SeriesName")]
public string SeriesName { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("-1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_SeriesPointIndex")]
public int SeriesPointIndex { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_Separator")]
[DefaultValueAttribute("System.Windows.Forms.DataVisualization.Charting.LegendSeparatorStyle", "None")]
public LegendSeparatorStyle SeparatorType { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLegendItem_SeparatorColor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color SeparatorColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.LegendCellCollectionEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_Cells")]
[DesignerSerializationVisibilityAttribute("2")]
public LegendCellCollection Cells { get; }
    [DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeToolTip")]
[SRCategoryAttribute("CategoryAttributeMapArea")]
[BindableAttribute("True")]
public string ToolTip { get; public set; }
    public LegendItem(string name, Color color, string image);
    public Legend get_Legend();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public Color get_Color();
    public void set_Color(Color value);
    public string get_Image();
    public void set_Image(string value);
    public LegendImageStyle get_ImageStyle();
    public void set_ImageStyle(LegendImageStyle value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public ChartHatchStyle get_BackHatchStyle();
    public void set_BackHatchStyle(ChartHatchStyle value);
    public Color get_BackImageTransparentColor();
    public void set_BackImageTransparentColor(Color value);
    public GradientStyle get_BackGradientStyle();
    public void set_BackGradientStyle(GradientStyle value);
    public Color get_BackSecondaryColor();
    public void set_BackSecondaryColor(Color value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public int get_MarkerBorderWidth();
    public void set_MarkerBorderWidth(int value);
    public ChartDashStyle get_BorderDashStyle();
    public void set_BorderDashStyle(ChartDashStyle value);
    public int get_ShadowOffset();
    public void set_ShadowOffset(int value);
    public Color get_ShadowColor();
    public void set_ShadowColor(Color value);
    public MarkerStyle get_MarkerStyle();
    public void set_MarkerStyle(MarkerStyle value);
    public int get_MarkerSize();
    public void set_MarkerSize(int value);
    public string get_MarkerImage();
    public void set_MarkerImage(string value);
    public Color get_MarkerImageTransparentColor();
    public void set_MarkerImageTransparentColor(Color value);
    public Color get_MarkerColor();
    public void set_MarkerColor(Color value);
    public Color get_MarkerBorderColor();
    public void set_MarkerBorderColor(Color value);
    public string get_SeriesName();
    public void set_SeriesName(string value);
    public int get_SeriesPointIndex();
    public void set_SeriesPointIndex(int value);
    public LegendSeparatorStyle get_SeparatorType();
    public void set_SeparatorType(LegendSeparatorStyle value);
    public Color get_SeparatorColor();
    public void set_SeparatorColor(Color value);
    public LegendCellCollection get_Cells();
    public void set_ToolTip(string value);
    public string get_ToolTip();
    internal void AddAutomaticCells(Legend legend);
    internal void SetAttributes(CommonElements common, Series series);
    internal void SetAttributes(DataPointCustomProperties properties, bool area3D);
    private void Invalidate(bool invalidateLegendOnly);
    protected virtual void Dispose(bool disposing);
}
public enum System.Windows.Forms.DataVisualization.Charting.LegendItemOrder : Enum {
    public int value__;
    public static LegendItemOrder Auto;
    public static LegendItemOrder SameAsSeriesOrder;
    public static LegendItemOrder ReversedSeriesOrder;
}
[SRDescriptionAttribute("DescriptionAttributeCustomLabelsCollection_CustomLabelsCollection")]
public class System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection : ChartElementCollection`1<LegendItem> {
    internal LegendItemsCollection(Legend legend);
    public int Add(Color color, string text);
    public void Insert(int index, Color color, string text);
    public int Add(string image, string text);
    public void Insert(int index, string image, string text);
    public void Reverse();
}
public enum System.Windows.Forms.DataVisualization.Charting.LegendSeparatorStyle : Enum {
    public int value__;
    public static LegendSeparatorStyle None;
    public static LegendSeparatorStyle Line;
    public static LegendSeparatorStyle ThickLine;
    public static LegendSeparatorStyle DoubleLine;
    public static LegendSeparatorStyle DashLine;
    public static LegendSeparatorStyle DotLine;
    public static LegendSeparatorStyle GradientLine;
    public static LegendSeparatorStyle ThickGradientLine;
}
public enum System.Windows.Forms.DataVisualization.Charting.LegendStyle : Enum {
    public int value__;
    public static LegendStyle Column;
    public static LegendStyle Row;
    public static LegendStyle Table;
}
public enum System.Windows.Forms.DataVisualization.Charting.LegendTableStyle : Enum {
    public int value__;
    public static LegendTableStyle Auto;
    public static LegendTableStyle Wide;
    public static LegendTableStyle Tall;
}
public enum System.Windows.Forms.DataVisualization.Charting.LightStyle : Enum {
    public int value__;
    public static LightStyle None;
    public static LightStyle Simplistic;
    public static LightStyle Realistic;
}
[SRDescriptionAttribute("DescriptionAttributeLineAnchorCapStyle_LineAnchorCapStyle")]
public enum System.Windows.Forms.DataVisualization.Charting.LineAnchorCapStyle : Enum {
    public int value__;
    public static LineAnchorCapStyle None;
    public static LineAnchorCapStyle Arrow;
    public static LineAnchorCapStyle Diamond;
    public static LineAnchorCapStyle Square;
    public static LineAnchorCapStyle Round;
}
[SRDescriptionAttribute("DescriptionAttributeLineAnnotation_LineAnnotation")]
public class System.Windows.Forms.DataVisualization.Charting.LineAnnotation : Annotation {
    private bool _isInfinitive;
    private LineAnchorCapStyle _startCap;
    private LineAnchorCapStyle _endCap;
    [SRDescriptionAttribute("DescriptionAttributeDrawInfinitive")]
[DefaultValueAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public bool IsInfinitive { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeStartCap3")]
public LineAnchorCapStyle StartCap { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeStartCap3")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public LineAnchorCapStyle EndCap { get; public set; }
    [DefaultValueAttribute("System.Drawing.ContentAlignment", "MiddleCenter")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
public ContentAlignment Alignment { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public TextStyle TextStyle { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRDescriptionAttribute("DescriptionAttributeForeColor")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public Color ForeColor { get; public set; }
    [DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
public Font Font { get; public set; }
    [TypeConverterAttribute("System.Drawing.ColorConverter")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.HatchStyleEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.GradientEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[NotifyParentPropertyAttribute("True")]
public GradientStyle BackGradientStyle { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[NotifyParentPropertyAttribute("True")]
[BrowsableAttribute("False")]
public Color BackSecondaryColor { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeSizeAlwaysRelative3")]
[SRCategoryAttribute("CategoryAttributePosition")]
[DefaultValueAttribute("True")]
public bool IsSizeAlwaysRelative { get; public set; }
    [EditorBrowsableAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeAnchorAlignment")]
[SRCategoryAttribute("CategoryAttributeAnchor")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.ContentAlignment", "TopLeft")]
public ContentAlignment AnchorAlignment { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeAnnotationType")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public string AnnotationType { get; }
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeSelectionPointsStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ParenthesizePropertyNameAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
internal SelectionPointsStyle SelectionPointsStyle { get; }
    public virtual bool get_IsInfinitive();
    public virtual void set_IsInfinitive(bool value);
    public virtual LineAnchorCapStyle get_StartCap();
    public virtual void set_StartCap(LineAnchorCapStyle value);
    public virtual LineAnchorCapStyle get_EndCap();
    public virtual void set_EndCap(LineAnchorCapStyle value);
    public virtual ContentAlignment get_Alignment();
    public virtual void set_Alignment(ContentAlignment value);
    public virtual TextStyle get_TextStyle();
    public virtual void set_TextStyle(TextStyle value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual ChartHatchStyle get_BackHatchStyle();
    public virtual void set_BackHatchStyle(ChartHatchStyle value);
    public virtual GradientStyle get_BackGradientStyle();
    public virtual void set_BackGradientStyle(GradientStyle value);
    public virtual Color get_BackSecondaryColor();
    public virtual void set_BackSecondaryColor(Color value);
    public virtual bool get_IsSizeAlwaysRelative();
    public virtual void set_IsSizeAlwaysRelative(bool value);
    public virtual ContentAlignment get_AnchorAlignment();
    public virtual void set_AnchorAlignment(ContentAlignment value);
    public virtual string get_AnnotationType();
    internal virtual SelectionPointsStyle get_SelectionPointsStyle();
    internal virtual void AdjustLineCoordinates(PointF& point1, PointF& point2, RectangleF& selectionRect);
    internal virtual void Paint(Chart chart, ChartGraphics graphics);
}
internal enum System.Windows.Forms.DataVisualization.Charting.LineSegmentType : Enum {
    public int value__;
    public static LineSegmentType Single;
    public static LineSegmentType First;
    public static LineSegmentType Middle;
    public static LineSegmentType Last;
}
internal class System.Windows.Forms.DataVisualization.Charting.MarginExpandableObjectConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[SRDescriptionAttribute("DescriptionAttributeMargins_Margins")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.MarginExpandableObjectConverter")]
public class System.Windows.Forms.DataVisualization.Charting.Margins : object {
    private int _top;
    private int _bottom;
    private int _left;
    private int _right;
    internal CommonElements Common;
    [DefaultValueAttribute("0")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[SRDescriptionAttribute("DescriptionAttributeMargins_Top")]
[RefreshPropertiesAttribute("1")]
[NotifyParentPropertyAttribute("True")]
public int Top { get; public set; }
    [DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeMargins_Bottom")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[RefreshPropertiesAttribute("1")]
public int Bottom { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[SRDescriptionAttribute("DescriptionAttributeMargins_Left")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("0")]
[RefreshPropertiesAttribute("1")]
public int Left { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeMargins_Right")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("0")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
public int Right { get; public set; }
    public Margins(int top, int bottom, int left, int right);
    public int get_Top();
    public void set_Top(int value);
    public int get_Bottom();
    public void set_Bottom(int value);
    public int get_Left();
    public void set_Left(int value);
    public int get_Right();
    public void set_Right(int value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool IsEmpty();
    public RectangleF ToRectangleF();
    private void Invalidate();
}
public enum System.Windows.Forms.DataVisualization.Charting.MarkerStyle : Enum {
    public int value__;
    public static MarkerStyle None;
    public static MarkerStyle Square;
    public static MarkerStyle Circle;
    public static MarkerStyle Diamond;
    public static MarkerStyle Triangle;
    public static MarkerStyle Cross;
    public static MarkerStyle Star4;
    public static MarkerStyle Star5;
    public static MarkerStyle Star6;
    public static MarkerStyle Star10;
}
internal class System.Windows.Forms.DataVisualization.Charting.Matrix3D : object {
    private Single[][] _mainMatrix;
    private float _translateX;
    private float _translateY;
    private float _translateZ;
    private float _scale;
    private float _shiftX;
    private float _shiftY;
    internal float _perspective;
    private bool _rightAngleAxis;
    private float _perspectiveFactor;
    private float _perspectiveZ;
    private float _angleX;
    private float _angleY;
    private Point3D[] _lightVectors;
    private LightStyle _lightStyle;
    internal float AngleX { get; }
    internal float AngleY { get; }
    internal float Perspective { get; }
    internal float get_AngleX();
    internal float get_AngleY();
    internal float get_Perspective();
    public bool IsInitialized();
    internal void Initialize(RectangleF innerPlotRectangle, float depth, float angleX, float angleY, float perspective, bool rightAngleAxis);
    public void TransformPoints(Point3D[] points);
    private void TransformPoints(Point3D[] points, bool withPerspective);
    private void RightAngleShift(Point3D[] points);
    private void RightAngleProjection(Point3D[] points);
    private void ApplyPerspective(Point3D[] points);
    private void Scale(Point3D[] points);
    private void Translate(float dx, float dy, float dz);
    private void Reset();
    private Single[][] Multiply(Single[][] mulMatrix, MatrixOrder order, bool setMainMatrix);
    private void MultiplyVector(Single[] mulVector, Single[]& resultVector);
    private void Rotate(double angle, RotationAxis axis);
    private void GetValues(Point3D[] points);
    private Point3D[] Set3DBarPoints(float dx, float dy, float dz);
    internal void InitLight(LightStyle lightStyle);
    internal void GetLight(Color surfaceColor, Color& front, Color& back, Color& left, Color& right, Color& top, Color& bottom);
    internal Color GetPolygonLight(Point3D[] points, Color surfaceColor, bool visiblePolygon, float rotation, SurfaceNames surfaceName, bool switchSeriesOrder);
    private Color GetBrightGradientColor(Color beginColor, double position);
    private float GetAngle(Point3D a, Point3D b);
}
[SRDescriptionAttribute("DescriptionAttributeNamedImage_NamedImage")]
[DefaultPropertyAttribute("Name")]
public class System.Windows.Forms.DataVisualization.Charting.NamedImage : ChartNamedElement {
    private string _name;
    private Image _image;
    [SRDescriptionAttribute("DescriptionAttributeNamedImage_Name")]
[BindableAttribute("False")]
public string Name { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeNamedImage_Image")]
[BindableAttribute("False")]
public Image Image { get; public set; }
    public NamedImage(string name, Image image);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public Image get_Image();
    public void set_Image(Image value);
    protected virtual void Dispose(bool disposing);
}
public class System.Windows.Forms.DataVisualization.Charting.NamedImagesCollection : ChartNamedElementCollection`1<NamedImage> {
}
internal class System.Windows.Forms.DataVisualization.Charting.NameReferenceChangedEventArgs : EventArgs {
    private ChartNamedElement _oldElement;
    private string _oldName;
    private string _newName;
    public ChartNamedElement OldElement { get; }
    public string OldName { get; }
    public string NewName { get; }
    public NameReferenceChangedEventArgs(ChartNamedElement oldElement, ChartNamedElement newElement);
    public NameReferenceChangedEventArgs(ChartNamedElement oldElement, string oldName, string newName);
    public ChartNamedElement get_OldElement();
    public string get_OldName();
    public string get_NewName();
}
internal class System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter : ExpandableObjectConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal enum System.Windows.Forms.DataVisualization.Charting.PieDrawingStyle : Enum {
    public int value__;
    public static PieDrawingStyle Default;
    public static PieDrawingStyle SoftEdge;
    public static PieDrawingStyle Concave;
}
internal enum System.Windows.Forms.DataVisualization.Charting.PiePoints : Enum {
    public int value__;
    public static PiePoints Top180;
    public static PiePoints Bottom180;
    public static PiePoints Top0;
    public static PiePoints Bottom0;
    public static PiePoints TopStart;
    public static PiePoints TopEnd;
    public static PiePoints BottomStart;
    public static PiePoints BottomEnd;
    public static PiePoints TopCenter;
    public static PiePoints BottomCenter;
    public static PiePoints TopLabelLine;
    public static PiePoints TopLabelLineout;
    public static PiePoints TopLabelCenter;
    public static PiePoints TopRectTopLeftPoint;
    public static PiePoints TopRectBottomRightPoint;
    public static PiePoints BottomRectTopLeftPoint;
    public static PiePoints BottomRectBottomRightPoint;
    public static PiePoints DoughnutTop180;
    public static PiePoints DoughnutBottom180;
    public static PiePoints DoughnutTop0;
    public static PiePoints DoughnutBottom0;
    public static PiePoints DoughnutTopStart;
    public static PiePoints DoughnutTopEnd;
    public static PiePoints DoughnutBottomStart;
    public static PiePoints DoughnutBottomEnd;
    public static PiePoints DoughnutTopRectTopLeftPoint;
    public static PiePoints DoughnutTopRectBottomRightPoint;
    public static PiePoints DoughnutBottomRectTopLeftPoint;
    public static PiePoints DoughnutBottomRectBottomRightPoint;
}
public class System.Windows.Forms.DataVisualization.Charting.Point3D : object {
    private PointF _coordXY;
    private float _coordZ;
    [BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributePoint3D_X")]
[DefaultValueAttribute("0")]
public float X { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributePoint3D_Y")]
[DefaultValueAttribute("0")]
[BindableAttribute("True")]
public float Y { get; public set; }
    [DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributePoint3D_Z")]
[BindableAttribute("True")]
public float Z { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributePoint3D_PointF")]
public PointF PointF { get; public set; }
    public Point3D(float x, float y, float z);
    public float get_X();
    public void set_X(float value);
    public float get_Y();
    public void set_Y(float value);
    public float get_Z();
    public void set_Z(float value);
    public PointF get_PointF();
    public void set_PointF(PointF value);
}
public enum System.Windows.Forms.DataVisualization.Charting.PointSortOrder : Enum {
    public int value__;
    public static PointSortOrder Ascending;
    public static PointSortOrder Descending;
}
[SRDescriptionAttribute("DescriptionAttributePolygonAnnotation_PolygonAnnotation")]
public class System.Windows.Forms.DataVisualization.Charting.PolygonAnnotation : PolylineAnnotation {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public LineAnchorCapStyle StartCap { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public LineAnchorCapStyle EndCap { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BrowsableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackColor")]
public Color BackColor { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.HatchStyleEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackHatchStyle")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientStyle")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.GradientEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BrowsableAttribute("True")]
public GradientStyle BackGradientStyle { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackSecondaryColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color BackSecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationType")]
public string AnnotationType { get; }
    [SerializationVisibilityAttribute("0")]
[ParenthesizePropertyNameAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeSelectionPointsStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
internal SelectionPointsStyle SelectionPointsStyle { get; }
    public virtual LineAnchorCapStyle get_StartCap();
    public virtual void set_StartCap(LineAnchorCapStyle value);
    public virtual LineAnchorCapStyle get_EndCap();
    public virtual void set_EndCap(LineAnchorCapStyle value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual ChartHatchStyle get_BackHatchStyle();
    public virtual void set_BackHatchStyle(ChartHatchStyle value);
    public virtual GradientStyle get_BackGradientStyle();
    public virtual void set_BackGradientStyle(GradientStyle value);
    public virtual Color get_BackSecondaryColor();
    public virtual void set_BackSecondaryColor(Color value);
    public virtual string get_AnnotationType();
    internal virtual SelectionPointsStyle get_SelectionPointsStyle();
}
[SRDescriptionAttribute("DescriptionAttributePolylineAnnotation_PolylineAnnotation")]
public class System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation : Annotation {
    private GraphicsPath _defaultGraphicsPath;
    private GraphicsPath _graphicsPath;
    internal bool pathChanged;
    private AnnotationPathPointCollection _pathPoints;
    internal bool isPolygon;
    internal bool isFreeDrawPlacement;
    private LineAnchorCapStyle _startCap;
    private LineAnchorCapStyle _endCap;
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeStartCap3")]
public LineAnchorCapStyle StartCap { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeStartCap3")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public LineAnchorCapStyle EndCap { get; public set; }
    [DefaultValueAttribute("System.Drawing.ContentAlignment", "MiddleCenter")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
public ContentAlignment Alignment { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public TextStyle TextStyle { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeForeColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color ForeColor { get; public set; }
    [DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
public Font Font { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[BrowsableAttribute("False")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public Color BackColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.HatchStyleEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BrowsableAttribute("False")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.GradientEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public GradientStyle BackGradientStyle { get; public set; }
    [TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
public Color BackSecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationType")]
[EditorBrowsableAttribute("1")]
public string AnnotationType { get; }
    [SerializationVisibilityAttribute("0")]
[ParenthesizePropertyNameAttribute("True")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeSelectionPointsStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
internal SelectionPointsStyle SelectionPointsStyle { get; }
    [SRDescriptionAttribute("DescriptionAttributeFreeDrawPlacement")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("False")]
public bool IsFreeDrawPlacement { get; public set; }
    [BrowsableAttribute("False")]
[SerializationVisibilityAttribute("0")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributePath")]
[SRCategoryAttribute("CategoryAttributePosition")]
[DesignerSerializationVisibilityAttribute("0")]
public GraphicsPath GraphicsPath { get; public set; }
    [SRCategoryAttribute("CategoryAttributePosition")]
[DesignerSerializationVisibilityAttribute("2")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartCollectionEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DescriptionAttributePathPoints")]
[EditorBrowsableAttribute("1")]
public AnnotationPathPointCollection GraphicsPathPoints { get; }
    public virtual LineAnchorCapStyle get_StartCap();
    public virtual void set_StartCap(LineAnchorCapStyle value);
    public virtual LineAnchorCapStyle get_EndCap();
    public virtual void set_EndCap(LineAnchorCapStyle value);
    public virtual ContentAlignment get_Alignment();
    public virtual void set_Alignment(ContentAlignment value);
    public virtual TextStyle get_TextStyle();
    public virtual void set_TextStyle(TextStyle value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual ChartHatchStyle get_BackHatchStyle();
    public virtual void set_BackHatchStyle(ChartHatchStyle value);
    public virtual GradientStyle get_BackGradientStyle();
    public virtual void set_BackGradientStyle(GradientStyle value);
    public virtual Color get_BackSecondaryColor();
    public virtual void set_BackSecondaryColor(Color value);
    public virtual string get_AnnotationType();
    internal virtual SelectionPointsStyle get_SelectionPointsStyle();
    public virtual bool get_IsFreeDrawPlacement();
    public virtual void set_IsFreeDrawPlacement(bool value);
    public virtual GraphicsPath get_GraphicsPath();
    public virtual void set_GraphicsPath(GraphicsPath value);
    public AnnotationPathPointCollection get_GraphicsPathPoints();
    internal virtual void Paint(Chart chart, ChartGraphics graphics);
    private void ResizeToPathBoundary();
    internal virtual void AdjustLocationSize(SizeF movingDistance, ResizingMode resizeMode, bool pixelCoord, bool userInput);
    public virtual void EndPlacement();
    internal virtual void PlacementMouseDown(PointF point, MouseButtons buttons);
    internal virtual bool PlacementMouseUp(PointF point, MouseButtons buttons);
    internal virtual void PlacementMouseMove(PointF point);
    protected virtual void Dispose(bool disposing);
}
public class System.Windows.Forms.DataVisualization.Charting.PrintingManager : object {
    private IServiceContainer _serviceContainer;
    private ChartImage _chartImage;
    private PrintDocument _printDocument;
    [SRDescriptionAttribute("DescriptionAttributePrintingManager_PrintDocument")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[BindableAttribute("False")]
public PrintDocument PrintDocument { get; public set; }
    public PrintingManager(IServiceContainer container);
    internal object GetService(Type serviceType);
    public void set_PrintDocument(PrintDocument value);
    public PrintDocument get_PrintDocument();
    public void PrintPaint(Graphics graphics, Rectangle position);
    public void PageSetup();
    public void PrintPreview();
    public void Print(bool showPrintDialog);
    private void pd_PrintPage(object sender, PrintPageEventArgs ev);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
[FlagsAttribute]
internal enum System.Windows.Forms.DataVisualization.Charting.ProcessMode : Enum {
    public int value__;
    public static ProcessMode Paint;
    public static ProcessMode HotRegions;
    public static ProcessMode ImageMaps;
}
[SRDescriptionAttribute("DescriptionAttributeRectangleAnnotation_RectangleAnnotation")]
public class System.Windows.Forms.DataVisualization.Charting.RectangleAnnotation : TextAnnotation {
    internal bool isRectVisible;
    [SRDescriptionAttribute("DescriptionAttributeLineColor")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color LineColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeLineWidth")]
[DefaultValueAttribute("1")]
[BrowsableAttribute("True")]
public int LineWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLineDashStyle")]
public ChartDashStyle LineDashStyle { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeBackColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.HatchStyleEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackHatchStyle")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [BrowsableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientStyle")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.GradientEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public GradientStyle BackGradientStyle { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeBackSecondaryColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public Color BackSecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationType")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public string AnnotationType { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeSelectionPointsStyle")]
[EditorBrowsableAttribute("1")]
[ParenthesizePropertyNameAttribute("True")]
internal SelectionPointsStyle SelectionPointsStyle { get; }
    public virtual Color get_LineColor();
    public virtual void set_LineColor(Color value);
    public virtual int get_LineWidth();
    public virtual void set_LineWidth(int value);
    public virtual ChartDashStyle get_LineDashStyle();
    public virtual void set_LineDashStyle(ChartDashStyle value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual ChartHatchStyle get_BackHatchStyle();
    public virtual void set_BackHatchStyle(ChartHatchStyle value);
    public virtual GradientStyle get_BackGradientStyle();
    public virtual void set_BackGradientStyle(GradientStyle value);
    public virtual Color get_BackSecondaryColor();
    public virtual void set_BackSecondaryColor(Color value);
    public virtual string get_AnnotationType();
    internal virtual SelectionPointsStyle get_SelectionPointsStyle();
    internal virtual void Paint(Chart chart, ChartGraphics graphics);
}
internal enum System.Windows.Forms.DataVisualization.Charting.RenderingType : Enum {
    public int value__;
    public static RenderingType Gdi;
    public static RenderingType Svg;
}
internal enum System.Windows.Forms.DataVisualization.Charting.ResizingMode : Enum {
    public int value__;
    public static ResizingMode TopLeftHandle;
    public static ResizingMode TopHandle;
    public static ResizingMode TopRightHandle;
    public static ResizingMode RightHandle;
    public static ResizingMode BottomRightHandle;
    public static ResizingMode BottomHandle;
    public static ResizingMode BottomLeftHandle;
    public static ResizingMode LeftHandle;
    public static ResizingMode AnchorHandle;
    public static ResizingMode Moving;
    public static ResizingMode MovingPathPoints;
    public static ResizingMode None;
}
[FlagsAttribute]
public enum System.Windows.Forms.DataVisualization.Charting.ScrollBarButtonStyles : Enum {
    public int value__;
    public static ScrollBarButtonStyles None;
    public static ScrollBarButtonStyles SmallScroll;
    public static ScrollBarButtonStyles ResetZoom;
    public static ScrollBarButtonStyles All;
}
public enum System.Windows.Forms.DataVisualization.Charting.ScrollBarButtonType : Enum {
    public int value__;
    public static ScrollBarButtonType ThumbTracker;
    public static ScrollBarButtonType SmallDecrement;
    public static ScrollBarButtonType SmallIncrement;
    public static ScrollBarButtonType LargeDecrement;
    public static ScrollBarButtonType LargeIncrement;
    public static ScrollBarButtonType ZoomReset;
}
public class System.Windows.Forms.DataVisualization.Charting.ScrollBarEventArgs : EventArgs {
    private Axis _axis;
    private bool _isHandled;
    private int _mousePositionX;
    private int _mousePositionY;
    private ScrollBarButtonType _buttonType;
    [SRDescriptionAttribute("DescriptionAttributeAxis")]
public Axis Axis { get; }
    [SRDescriptionAttribute("DescriptionAttributeChartArea")]
public ChartArea ChartArea { get; }
    [SRDescriptionAttribute("DescriptionAttributeScrollBarEventArgs_ButtonType")]
public ScrollBarButtonType ButtonType { get; }
    [SRDescriptionAttribute("DescriptionAttributeScrollBarEventArgs_Handled")]
public bool IsHandled { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeScrollBarEventArgs_MousePositionX")]
public int MousePositionX { get; }
    [SRDescriptionAttribute("DescriptionAttributeScrollBarEventArgs_MousePositionY")]
public int MousePositionY { get; }
    public ScrollBarEventArgs(Axis axis, int x, int y, ScrollBarButtonType buttonType);
    public Axis get_Axis();
    public ChartArea get_ChartArea();
    public ScrollBarButtonType get_ButtonType();
    public bool get_IsHandled();
    public void set_IsHandled(bool value);
    public int get_MousePositionX();
    public int get_MousePositionY();
}
public enum System.Windows.Forms.DataVisualization.Charting.ScrollType : Enum {
    public int value__;
    public static ScrollType SmallDecrement;
    public static ScrollType SmallIncrement;
    public static ScrollType LargeDecrement;
    public static ScrollType LargeIncrement;
    public static ScrollType First;
    public static ScrollType Last;
}
internal class System.Windows.Forms.DataVisualization.Charting.Selection : object {
    private IServiceContainer _service;
    private ToolTip _toolTip;
    private DateTime _toolTipActivationTime;
    private Point _lastMouseMove;
    private bool _toolTipsEnabled;
    internal bool enabledChecked;
    private Chart _chartControl;
    private ChartPicture _chartPicture;
    private DataManager _dataManager;
    internal Chart ChartControl { get; }
    internal ChartPicture ChartPicture { get; }
    internal DataManager DataManager { get; }
    internal ChartGraphics Graph { get; }
    internal Selection(IServiceContainer service);
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    internal Chart get_ChartControl();
    internal ChartPicture get_ChartPicture();
    internal DataManager get_DataManager();
    internal ChartGraphics get_Graph();
    private bool IsToolTipsEnabled();
    internal string EvaluateToolTip(MouseEventArgs e);
    internal void Selection_MouseMove(object sender, MouseEventArgs e);
    internal HitTestResult[] HitTest(int x, int y, bool ignoreTransparent, ChartElementType[] requestedElementTypes);
    internal HitTestResult HitTest(int x, int y);
    public HitTestResult HitTest(int x, int y, bool ignoreTransparent);
    public HitTestResult HitTest(int x, int y, ChartElementType requestedElement);
    private bool IsElementTransparent(HotRegion region);
    internal HitTestResult GetHitTestResult(string seriesName, int pointIndex, ChartElementType type, object obj, object subObject);
    internal ChartElementOutline GetChartElementOutline(object chartObject, ChartElementType elementType);
    private GraphicsPath GetGraphicsPath(IList markers, object chartObject, ChartElementType elementType);
    private static int GetDataPointIndex(DataPoint dataPoint);
    private object GetAutoGeneratedObject(object chartObject);
    private HotRegion[] GetHotRegions(object cntxObj, ChartElementType elementType);
    private ArrayList GetMarkersFromRegions(object chartObject, ChartElementType elementType);
    private ArrayList GetMarkers(object chartObject, ChartElementType elementType);
    private bool IsChartAreaCircular(ChartArea area);
    private bool IsArea3D(ChartArea area);
    private ArrayList GetSeriesMarkers(Series series);
    private ArrayList GetAxisMarkers(ChartGraphics graph, Axis axis);
    private ArrayList GetAreaMarkers(ChartGraphics graph, ChartArea area);
    private ArrayList GetMarkers(RectangleF rect, ChartElementType elementType);
    private ArrayList GetMarkers(RectangleF rect, bool addAdditionalMarkers);
    private ArrayList GetRegionMarkers(GraphicsPath path);
    private PointF Transform3D(ChartArea chartArea, DataPoint point);
    private RectangleF GetHotRegionRectangle(HotRegion rgn, RectangleF unionWith, ChartElementType elementType);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
}
internal enum System.Windows.Forms.DataVisualization.Charting.SelectionPointsStyle : Enum {
    public int value__;
    public static SelectionPointsStyle TwoPoints;
    public static SelectionPointsStyle Rectangle;
}
[FlagsAttribute]
public enum System.Windows.Forms.DataVisualization.Charting.SerializationContents : Enum {
    public int value__;
    public static SerializationContents Default;
    public static SerializationContents Data;
    public static SerializationContents Appearance;
    public static SerializationContents All;
}
public enum System.Windows.Forms.DataVisualization.Charting.SerializationFormat : Enum {
    public int value__;
    public static SerializationFormat Xml;
    public static SerializationFormat Binary;
}
[DefaultPropertyAttribute("Points")]
[SRDescriptionAttribute("DescriptionAttributeSeries_Series")]
public class System.Windows.Forms.DataVisualization.Charting.Series : DataPointCustomProperties {
    private ChartValueType _xValueType;
    private ChartValueType _yValueType;
    private bool _isXValueIndexed;
    private int _yValuesPerPoint;
    private int _markersStep;
    private ChartColorPalette _colorPalette;
    private AxisType _xAxisType;
    private AxisType _yAxisType;
    private DataPointCustomProperties _emptyPointCustomProperties;
    private DataPointCollection _points;
    private int _shadowOffset;
    private Color _shadowColor;
    private string _chartType;
    private string _chartArea;
    private bool _enabled;
    private string _legend;
    private string _dataSourceXMember;
    private string _dataSourceYMembers;
    internal bool autoXValueType;
    internal bool autoYValueType;
    private double _totalYvalue;
    private Double[] _dummyDoubleValues;
    internal ChartValueType indexedXValueType;
    internal static DataPointCustomProperties defaultCustomProperties;
    internal bool tempMarkerStyleIsSet;
    private bool _checkPointsNumber;
    private SmartLabelStyle _smartLabelStyle;
    internal bool noLabelsInPoints;
    internal bool xValuesZeros;
    internal bool xValuesZerosChecked;
    internal DataPointCollection fakeDataPoints;
    internal string label;
    internal string axisLabel;
    internal string labelFormat;
    internal bool showLabelAsValue;
    internal Color color;
    internal Color borderColor;
    internal ChartDashStyle borderDashStyle;
    internal int borderWidth;
    internal int markerBorderWidth;
    internal string backImage;
    internal ChartImageWrapMode backImageWrapMode;
    internal Color backImageTransparentColor;
    internal ChartImageAlignmentStyle backImageAlignment;
    internal GradientStyle backGradientStyle;
    internal Color backSecondaryColor;
    internal ChartHatchStyle backHatchStyle;
    private FontCache _fontCache;
    internal Font font;
    internal Color fontColor;
    internal int fontAngle;
    internal MarkerStyle markerStyle;
    internal int markerSize;
    internal string markerImage;
    internal Color markerImageTransparentColor;
    internal Color markerColor;
    internal Color markerBorderColor;
    internal string toolTip;
    internal bool showInLegend;
    internal string legendText;
    internal string legendToolTip;
    internal Color labelBackColor;
    internal Color labelBorderColor;
    internal ChartDashStyle labelBorderDashStyle;
    internal int labelBorderWidth;
    internal string labelToolTip;
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_Name")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttributeDataSource")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.SeriesDataSourceMemberConverter")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_ValueMemberX")]
[DefaultValueAttribute("")]
public string XValueMember { get; public set; }
    [SRCategoryAttribute("CategoryAttributeDataSource")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.SeriesDataSourceMemberValueAxisUITypeEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_ValueMembersY")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.SeriesDataSourceMemberConverter")]
public string YValueMembers { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.SeriesLegendNameConverter")]
[DefaultValueAttribute("")]
[SRCategoryAttribute("CategoryAttributeLegend")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_Legend")]
public string Legend { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_XValueType")]
public ChartValueType XValueType { get; public set; }
    [BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeData")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeSeries_XValueIndexed")]
public bool IsXValueIndexed { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.SeriesYValueTypeConverter")]
[SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_YValueType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartValueType YValueType { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeSeries_YValuesPerPoint")]
[DefaultValueAttribute("1")]
[SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
public int YValuesPerPoint { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.DataPointCollectionEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_Points")]
[DesignerSerializationVisibilityAttribute("2")]
public DataPointCollection Points { get; }
    [SRDescriptionAttribute("DescriptionAttributeSeries_EmptyPointStyle")]
[DesignerSerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CategoryAttributeEmptyPoints")]
[BindableAttribute("True")]
public DataPointCustomProperties EmptyPointStyle { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributePalette")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ColorPaletteEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
public ChartColorPalette Palette { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMarker")]
[SRDescriptionAttribute("DescriptionAttributeSeries_MarkerStep")]
[DefaultValueAttribute("1")]
[BindableAttribute("True")]
public int MarkerStep { get; public set; }
    [DefaultValueAttribute("0")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeShadowOffset")]
public int ShadowOffset { get; public set; }
    [BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeShadowColor")]
[DefaultValueAttribute("System.Drawing.Color", "128,0,0,0")]
public Color ShadowColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAxes")]
[DefaultValueAttribute("")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_YSubAxisName")]
internal string YSubAxisName { get; internal set; }
    [SRCategoryAttribute("CategoryAttributeAxes")]
[DefaultValueAttribute("")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_XSubAxisName")]
internal string XSubAxisName { get; internal set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeSeries_XAxisType")]
[SRCategoryAttribute("CategoryAttributeAxes")]
[BindableAttribute("True")]
public AxisType XAxisType { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeSeries_YAxisType")]
[SRCategoryAttribute("CategoryAttributeAxes")]
public AxisType YAxisType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[ParenthesizePropertyNameAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_Enabled")]
public bool Enabled { get; public set; }
    [SRCategoryAttribute("CategoryAttributeChart")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_Type")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartTypeEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
public SeriesChartType ChartType { get; public set; }
    [RefreshPropertiesAttribute("1")]
[SerializationVisibilityAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryAttributeChart")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_Type")]
[DefaultValueAttribute("Column")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.ChartTypeConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartTypeEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public string ChartTypeName { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.SeriesAreaNameConverter")]
[SRDescriptionAttribute("DescriptionAttributeSeries_ChartArea")]
[DefaultValueAttribute("")]
[SRCategoryAttribute("CategoryAttributeChart")]
[BindableAttribute("True")]
public string ChartArea { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeAxisLabel")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeMisc")]
public string AxisLabel { get; public set; }
    [BindableAttribute("True")]
[BrowsableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeLabel")]
[DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("DescriptionAttributeSeries_SmartLabels")]
public SmartLabelStyle SmartLabelStyle { get; public set; }
    internal FontCache FontCache { get; }
    public Series(string name);
    public Series(string name, int yValues);
    private static Series();
    private static DataPointCustomProperties InitializeDefaultCustomProperties();
    private void InitProperties(string name, int YValuesPerPoint);
    internal string GetCaption();
    internal void GetPointDepthAndGap(ChartGraphics graph, Axis axis, Double& pointDepth, Double& pointGapDepth);
    internal double GetPointWidth(ChartGraphics graph, Axis axis, double interval, double defaultWidth);
    internal static string GetChartTypeName(SeriesChartType type);
    internal bool IsYValueDateTime();
    internal bool IsXValueDateTime();
    internal bool IsVisible();
    internal bool IsFastChartType();
    internal void CheckSupportedTypes(Type type);
    internal void ApplyPaletteColors();
    internal IEnumerable GetDummyData(ChartValueType type);
    internal double GetTotalYValue();
    internal double GetTotalYValue(int yValueIndex);
    internal virtual string ReplaceKeywords(string strOriginal);
    internal string ReplaceOneKeyword(Chart chart, object obj, object objTag, ChartElementType elementType, string strOriginal, string keyword, SeriesValuesFormulaType formulaType, ChartValueType valueType, string defaultFormat);
    internal string ReplaceOneKeyword(Chart chart, object obj, object objTag, ChartElementType elementType, string strOriginal, string keyword, double value, ChartValueType valueType, string defaultFormat);
    public void Sort(PointSortOrder pointSortOrder, string sortBy);
    public void Sort(PointSortOrder pointSortOrder);
    public void Sort(IComparer`1<DataPoint> comparer);
    internal static void MovePositionMarkers(Series fromSeries, Series toSeries);
    internal bool UnPrepareData(ISite controlSite);
    internal void ResetAutoValues();
    internal void ResetAutoValues(bool reset);
    internal void PrepareData(ISite controlSite, bool applyPaletteColors);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public string get_XValueMember();
    public void set_XValueMember(string value);
    public string get_YValueMembers();
    public void set_YValueMembers(string value);
    public string get_Legend();
    public void set_Legend(string value);
    public ChartValueType get_XValueType();
    public void set_XValueType(ChartValueType value);
    public bool get_IsXValueIndexed();
    public void set_IsXValueIndexed(bool value);
    public ChartValueType get_YValueType();
    public void set_YValueType(ChartValueType value);
    public int get_YValuesPerPoint();
    public void set_YValuesPerPoint(int value);
    public DataPointCollection get_Points();
    public DataPointCustomProperties get_EmptyPointStyle();
    public void set_EmptyPointStyle(DataPointCustomProperties value);
    public ChartColorPalette get_Palette();
    public void set_Palette(ChartColorPalette value);
    public int get_MarkerStep();
    public void set_MarkerStep(int value);
    public int get_ShadowOffset();
    public void set_ShadowOffset(int value);
    public Color get_ShadowColor();
    public void set_ShadowColor(Color value);
    internal string get_YSubAxisName();
    internal void set_YSubAxisName(string value);
    internal string get_XSubAxisName();
    internal void set_XSubAxisName(string value);
    public AxisType get_XAxisType();
    public void set_XAxisType(AxisType value);
    public AxisType get_YAxisType();
    public void set_YAxisType(AxisType value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public SeriesChartType get_ChartType();
    public void set_ChartType(SeriesChartType value);
    public string get_ChartTypeName();
    public void set_ChartTypeName(string value);
    public string get_ChartArea();
    public void set_ChartArea(string value);
    public virtual string get_AxisLabel();
    public virtual void set_AxisLabel(string value);
    public SmartLabelStyle get_SmartLabelStyle();
    public void set_SmartLabelStyle(SmartLabelStyle value);
    internal FontCache get_FontCache();
    internal void Invalidate(bool invalidateAreaOnly, bool invalidateLegend);
    protected virtual void Dispose(bool disposing);
}
internal class System.Windows.Forms.DataVisualization.Charting.SeriesAreaNameConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
public enum System.Windows.Forms.DataVisualization.Charting.SeriesChartType : Enum {
    public int value__;
    public static SeriesChartType Point;
    public static SeriesChartType FastPoint;
    public static SeriesChartType Bubble;
    public static SeriesChartType Line;
    public static SeriesChartType Spline;
    public static SeriesChartType StepLine;
    public static SeriesChartType FastLine;
    public static SeriesChartType Bar;
    public static SeriesChartType StackedBar;
    public static SeriesChartType StackedBar100;
    public static SeriesChartType Column;
    public static SeriesChartType StackedColumn;
    public static SeriesChartType StackedColumn100;
    public static SeriesChartType Area;
    public static SeriesChartType SplineArea;
    public static SeriesChartType StackedArea;
    public static SeriesChartType StackedArea100;
    public static SeriesChartType Pie;
    public static SeriesChartType Doughnut;
    public static SeriesChartType Stock;
    public static SeriesChartType Candlestick;
    public static SeriesChartType Range;
    public static SeriesChartType SplineRange;
    public static SeriesChartType RangeBar;
    public static SeriesChartType RangeColumn;
    public static SeriesChartType Radar;
    public static SeriesChartType Polar;
    public static SeriesChartType ErrorBar;
    public static SeriesChartType BoxPlot;
    public static SeriesChartType Renko;
    public static SeriesChartType ThreeLineBreak;
    public static SeriesChartType Kagi;
    public static SeriesChartType PointAndFigure;
    public static SeriesChartType Funnel;
    public static SeriesChartType Pyramid;
}
[SRDescriptionAttribute("DescriptionAttributeSeriesCollection_SeriesCollection")]
public class System.Windows.Forms.DataVisualization.Charting.SeriesCollection : ChartNamedElementCollection`1<Series> {
    internal SeriesCollection(DataManager dataManager);
    public Series Add(string name);
    internal virtual void FixNameReferences(Series item);
    internal void ChartAreaNameReferenceChanged(object sender, NameReferenceChangedEventArgs e);
    internal void LegendNameReferenceChanged(object sender, NameReferenceChangedEventArgs e);
}
internal class System.Windows.Forms.DataVisualization.Charting.SeriesDataSourceMemberConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal class System.Windows.Forms.DataVisualization.Charting.SeriesLegendNameConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal class System.Windows.Forms.DataVisualization.Charting.SeriesNameConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal class System.Windows.Forms.DataVisualization.Charting.SeriesYValueTypeConverter : EnumConverter {
    public SeriesYValueTypeConverter(Type type);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal class System.Windows.Forms.DataVisualization.Charting.SizeEmptyValueConverter : SizeConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[SRDescriptionAttribute("DescriptionAttributeSmartLabels_SmartLabels")]
internal class System.Windows.Forms.DataVisualization.Charting.SmartLabel : object {
    internal ArrayList smartLabelsPositions;
    internal bool checkAllCollisions;
    internal int markersCount;
    internal void Reset();
    internal PointF AdjustSmartLabelPosition(CommonElements common, ChartGraphics graph, ChartArea area, SmartLabelStyle smartLabelStyle, PointF labelPosition, SizeF labelSize, StringFormat format, PointF markerPosition, SizeF markerSize, LabelAlignmentStyles labelAlignment);
    internal PointF AdjustSmartLabelPosition(CommonElements common, ChartGraphics graph, ChartArea area, SmartLabelStyle smartLabelStyle, PointF labelPosition, SizeF labelSize, StringFormat format, PointF markerPosition, SizeF markerSize, LabelAlignmentStyles labelAlignment, bool checkCalloutLineOverlapping);
    private bool FindNewPosition(CommonElements common, ChartGraphics graph, ChartArea area, SmartLabelStyle smartLabelStyle, PointF& labelPosition, SizeF labelSize, StringFormat format, PointF markerPosition, SizeF& markerSize, LabelAlignmentStyles& labelAlignment, bool checkCalloutLineOverlapping);
    internal virtual void DrawCallout(CommonElements common, ChartGraphics graph, ChartArea area, SmartLabelStyle smartLabelStyle, PointF labelPosition, SizeF labelSize, StringFormat format, PointF markerPosition, SizeF markerSize, LabelAlignmentStyles labelAlignment);
    internal virtual bool IsSmartLabelCollide(CommonElements common, ChartGraphics graph, ChartArea area, SmartLabelStyle smartLabelStyle, PointF position, SizeF size, PointF markerPosition, StringFormat format, LabelAlignmentStyles labelAlignment, bool checkCalloutLineOverlapping);
    private bool LineIntersectRectangle(RectangleF rect, PointF point1, PointF point2);
    internal virtual void AddMarkersPosition(CommonElements common, ChartArea area);
    internal void AddSmartLabelPosition(ChartGraphics graph, PointF position, SizeF size, StringFormat format);
    internal RectangleF GetLabelPosition(ChartGraphics graph, PointF position, SizeF size, StringFormat format, bool adjustForDrawing);
    private PointF CalculatePosition(LabelAlignmentStyles labelAlignment, PointF markerPosition, SizeF sizeMarker, SizeF sizeFont, StringFormat& format);
}
[SRDescriptionAttribute("DescriptionAttributeSmartLabelsStyle_SmartLabelsStyle")]
[DefaultPropertyAttribute("Enabled")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.NoNameExpandableObjectConverter")]
public class System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle : object {
    internal object chartElement;
    private bool _enabled;
    private bool _isMarkerOverlappingAllowed;
    private bool _isOverlappedHidden;
    private LabelAlignmentStyles _movingDirection;
    private double _minMovingDistance;
    private double _maxMovingDistance;
    private LabelOutsidePlotAreaStyle _allowOutsidePlotArea;
    private LabelCalloutStyle _calloutStyle;
    private Color _calloutLineColor;
    private ChartDashStyle _calloutLineDashStyle;
    private Color _calloutBackColor;
    private int _calloutLineWidth;
    private LineAnchorCapStyle _calloutLineAnchorCapStyle;
    [BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeEnabled13")]
[ParenthesizePropertyNameAttribute("True")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    [BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMarkerOverlapping")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("False")]
public bool IsMarkerOverlappingAllowed { get; public set; }
    [DefaultValueAttribute("True")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeHideOverlapped")]
[SRCategoryAttribute("CategoryAttributeMisc")]
public bool IsOverlappedHidden { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.FlagsEnumUITypeEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMovingDirection")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("System.Windows.Forms.DataVisualization.Charting.LabelAlignmentStyles", "Top, Bottom, Right, Left, TopLeft, TopRight, BottomLeft, BottomRight")]
public LabelAlignmentStyles MovingDirection { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[SRDescriptionAttribute("DescriptionAttributeMinMovingDistance")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
public double MinMovingDistance { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[DefaultValueAttribute("30")]
[SRDescriptionAttribute("DescriptionAttributeMaxMovingDistance")]
public double MaxMovingDistance { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[SRDescriptionAttribute("DescriptionAttributeAllowOutsidePlotArea")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public LabelOutsidePlotAreaStyle AllowOutsidePlotArea { get; public set; }
    [BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeCalloutStyle3")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public LabelCalloutStyle CalloutStyle { get; public set; }
    [TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeCalloutLineColor")]
public Color CalloutLineColor { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLineDashStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
public ChartDashStyle CalloutLineDashStyle { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeCalloutBackColor")]
[DefaultValueAttribute("System.Drawing.Color", "Transparent")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public Color CalloutBackColor { get; public set; }
    [DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeLineWidth")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public int CalloutLineWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeCalloutLineAnchorCap")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public LineAnchorCapStyle CalloutLineAnchorCapStyle { get; public set; }
    internal SmartLabelStyle(object chartElement);
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public virtual bool get_IsMarkerOverlappingAllowed();
    public virtual void set_IsMarkerOverlappingAllowed(bool value);
    public virtual bool get_IsOverlappedHidden();
    public virtual void set_IsOverlappedHidden(bool value);
    public virtual LabelAlignmentStyles get_MovingDirection();
    public virtual void set_MovingDirection(LabelAlignmentStyles value);
    public virtual double get_MinMovingDistance();
    public virtual void set_MinMovingDistance(double value);
    public virtual double get_MaxMovingDistance();
    public virtual void set_MaxMovingDistance(double value);
    public virtual LabelOutsidePlotAreaStyle get_AllowOutsidePlotArea();
    public virtual void set_AllowOutsidePlotArea(LabelOutsidePlotAreaStyle value);
    public virtual LabelCalloutStyle get_CalloutStyle();
    public virtual void set_CalloutStyle(LabelCalloutStyle value);
    public virtual Color get_CalloutLineColor();
    public virtual void set_CalloutLineColor(Color value);
    public virtual ChartDashStyle get_CalloutLineDashStyle();
    public virtual void set_CalloutLineDashStyle(ChartDashStyle value);
    public virtual Color get_CalloutBackColor();
    public virtual void set_CalloutBackColor(Color value);
    public virtual int get_CalloutLineWidth();
    public virtual void set_CalloutLineWidth(int value);
    public virtual LineAnchorCapStyle get_CalloutLineAnchorCapStyle();
    public virtual void set_CalloutLineAnchorCapStyle(LineAnchorCapStyle value);
    private void Invalidate();
}
[CompilerGeneratedAttribute]
internal class System.Windows.Forms.DataVisualization.Charting.SR : object {
    public static CultureInfo Culture { get; public set; }
    public static string ExceptionElementPositionConverter { get; }
    public static string ExceptionInvalidServiceContainer { get; }
    public static string ExceptionImageLoaderInvalidServiceContainer { get; }
    public static string ExceptionImageMapAddedHasWrongType { get; }
    public static string ExceptionImageMapInsertedHasWrongType { get; }
    public static string ExceptionImageMapCircleShapeInvalid { get; }
    public static string ExceptionImageMapRectangleShapeInvalid { get; }
    public static string ExceptionImageMapPolygonShapeInvalid { get; }
    public static string ExceptionAnnotationNameIsEmpty { get; }
    public static string ExceptionAnnotationPathAddLineAsSegmentsInvalid { get; }
    public static string ExceptionAnnotationLineWidthIsNegative { get; }
    public static string ExceptionAnnotationAnchorOffsetInvalid { get; }
    public static string ExceptionAnnotationGroupedAnchorDataPointMustBeEmpty { get; }
    public static string ExceptionAnnotationGroupedUnableToStartPlacement { get; }
    public static string ExceptionAnnotationNotInCollection { get; }
    public static string ExceptionAnnotationGroupedAxisMustBeEmpty { get; }
    public static string ExceptionAnnotationArrowSizeIsZero { get; }
    public static string ExceptionAnnotationArrowSizeMustBeLessThen100 { get; }
    public static string ExceptionAnnotationArrowStyleUnknown { get; }
    public static string ExceptionInvalidIndexerArgumentType { get; }
    public static string ExceptionTitleNameIsEmpty { get; }
    public static string ExceptionDataSeriesObjectRequired { get; }
    public static string ExceptionDataSeriesNameIsEmpty { get; }
    public static string ExceptionDataSeriesYValuesPerPointIsZero { get; }
    public static string ExceptionDataSeriesYValueNumberInvalid { get; }
    public static string ExceptionSeriesNameIsEmpty { get; }
    public static string ExceptionEditorChartTypeRegistryServiceInaccessible { get; }
    public static string ExceptionEditorMultipleSeriesEditiingUnsupported { get; }
    public static string ExceptionEditorContectInstantsIsNotChartObject { get; }
    public static string ExceptionEditorUITypeEditorInapplicable { get; }
    public static string ExceptionEditorUITypeEditorInt32ApplicableOnly { get; }
    public static string ExceptionRectangleConverterStringFormatInvalid { get; }
    public static string ExceptionChartAreaObjectRequired { get; }
    public static string ExceptionChartAreaInsertedHasWrongType { get; }
    public static string ExceptionChartAreaAlreadyExistsShort { get; }
    public static string ExceptionChartAreaNameIsEmpty { get; }
    public static string ExceptionChartArea3DPerspectiveInvalid { get; }
    public static string ExceptionChartArea3DInclinationInvalid { get; }
    public static string ExceptionChartArea3DRotationInvalid { get; }
    public static string ExceptionChartArea3DWallWidthInvalid { get; }
    public static string ExceptionChartArea3DPointsDepthInvalid { get; }
    public static string ExceptionChartArea3DPointsGapInvalid { get; }
    public static string ExceptionCursorIntervalOffsetIsNegative { get; }
    public static string ExceptionCursorLineWidthIsNegative { get; }
    public static string ExceptionGraphicsMarkerStyleUnknown { get; }
    public static string ExceptionGraphics3DMarkerStyleUnknown { get; }
    public static string ExceptionGraphics3DCoordinatesInvalid { get; }
    public static string ExceptionAxisLabelsAutoFitMinFontSizeValueInvalid { get; }
    public static string ExceptionAxisLabelRowIndexIsNegative { get; }
    public static string ExceptionAxisLabelRowIndexMustBe1Or2 { get; }
    public static string ExceptionAxisLabelIndexIsNegative { get; }
    public static string ExceptionAxisLabelFontAngleInvalid { get; }
    public static string ExceptionCustomLabelAddedHasWrongType { get; }
    public static string ExceptionCustomLabelInsertedHasWrongType { get; }
    public static string ExceptionSmartLabelsDirectionUndefined { get; }
    public static string ExceptionSmartLabelsMinMovingDistanceIsNegative { get; }
    public static string ExceptionSmartLabelsMaxMovingDistanceIsNegative { get; }
    public static string ExceptionStripLineAddedHasWrongType { get; }
    public static string ExceptionStripLineWidthIsNegative { get; }
    public static string ExceptionAxisWidthIsNegative { get; }
    public static string ExceptionAxisDynamicIntervalCalculationFailed { get; }
    public static string ExceptionAxisIntervalDecreasingFailed { get; }
    public static string ExceptionAxisIntervalIncreasingFailed { get; }
    public static string ExceptionAxisLabelsAutoFitMaxFontSizeInvalid { get; }
    public static string ExceptionAxisMinimumMaximumInvalid { get; }
    public static string ExceptionAxisStackedChartsDataPointsNumberMismatch { get; }
    public static string ExceptionAxisSeriesNotAligned { get; }
    public static string ExceptionAxisScaleLogarithmBaseInvalid { get; }
    public static string ExceptionAxisScalePositionInvalid { get; }
    public static string ExceptionAxisScalePositionToValueCallFailed { get; }
    public static string ExceptionAxisScaleIntervalIsZero { get; }
    public static string ExceptionAxisScaleMinimumMaximumInvalid { get; }
    public static string ExceptionAxisScaleIntervalIsLessThen1Year { get; }
    public static string ExceptionAxisScaleAutoIntervalInvalid { get; }
    public static string ExceptionAxisScaleMinimumValueIsGreaterThenMaximumDataPoint { get; }
    public static string ExceptionAxisScaleLogarithmicNegativeValues { get; }
    public static string ExceptionChartAreaAxisScaleLogarithmicUnsuitable { get; }
    public static string ExceptionChartAreaChartTypesCanNotCombine { get; }
    public static string ExceptionChartAreaSeriesNotFound { get; }
    public static string ExceptionAxisScaleBreaksNumberInvalid { get; }
    public static string ExceptionAxisScaleBreaksCollapsibleSpaceInvalid { get; }
    public static string ExceptionAxisScaleBreaksSpacingInvalid { get; }
    public static string ExceptionAxisScaleBreaksLineWidthInvalid { get; }
    public static string ExceptionAxisScaleSegmentsPositionInvalid { get; }
    public static string ExceptionAxisScaleSegmentsSizeInvalid { get; }
    public static string ExceptionAxisScaleSegmentsSpacingInvalid { get; }
    public static string ExceptionTickMarksIntervalIsZero { get; }
    public static string ExceptionTickMarksIntervalIsNegative { get; }
    public static string ExceptionScrollBarSizeInvalid { get; }
    public static string ExceptionScrollBarZoomResetsNumberInvalid { get; }
    public static string ExceptionMarkerStepNegativeValue { get; }
    public static string ExceptionTextThresholdIsNegative { get; }
    public static string ExceptionNamedImageObjectRequired { get; }
    public static string ExceptionNamedImageInsertedHasWrongType { get; }
    public static string ExceptionLegendNameIsEmpty { get; }
    public static string ExceptionLegendAddedHasWrongType { get; }
    public static string ExceptionLegendInsertedHasWrongType { get; }
    public static string ExceptionBackSecondaryColorIsTransparent { get; }
    public static string ExceptionLegendAutoFitMinFontSizeInvalid { get; }
    public static string ExceptionLegendMaximumAutoSizeInvalid { get; }
    public static string ExceptionLegendColumnSpacingInvalid { get; }
    public static string ExceptionLegendMarkerBorderWidthIsNegative { get; }
    public static string ExceptionLegendItemAddedHasWrongType { get; }
    public static string ExceptionLegendItemInsertedHasWrongType { get; }
    public static string ExceptionLegendColumnIsEmpty { get; }
    public static string ExceptionSeriesSymbolSizeIsNegative { get; }
    public static string ExceptionMinimumCellWidthIsWrong { get; }
    public static string ExceptionMaximumCellWidthIsWrong { get; }
    public static string ExceptionLegendCellNameIsEmpty { get; }
    public static string ExceptionLegendCellImageSizeIsNegative { get; }
    public static string ExceptionLegendCellSeriesSymbolSizeIsNegative { get; }
    public static string ExceptionLegendCellSpanIsLessThenOne { get; }
    public static string ExceptionMarginTopIsNegative { get; }
    public static string ExceptionMarginBottomIsNegative { get; }
    public static string ExceptionMarginLeftIsNegative { get; }
    public static string ExceptionMarginRightIsNegative { get; }
    public static string ExceptionElementPositionArgumentOutOfRange { get; }
    public static string ExceptionChartHeightIsNotInPixels { get; }
    public static string ExceptionChartWidthIsNotInPixels { get; }
    public static string ExceptionChartBorderIsNegative { get; }
    public static string ExceptionChartCompressionInvalid { get; }
    public static string ExceptionChartDataPointsAlignmentFaild { get; }
    public static string ExceptionChartDataPointsAlignmentFaildAxisLabelsInvalid { get; }
    public static string ExceptionChartDataPointsInsertionFailedYValuesEmpty { get; }
    public static string ExceptionChartTypeHasNoInterface { get; }
    public static string ExceptionBorderTypeHasNoInterface { get; }
    public static string ExceptionChartSerializerContentFlagUnsupported { get; }
    public static string ExceptionChartSerializerContentStringFormatInvalid { get; }
    public static string ExceptionChartSerializerClassNameUndefined { get; }
    public static string ExceptionChartSerializerPropertyNameUndefined { get; }
    public static string ExceptionChartSerializerWriterObjectInvalid { get; }
    public static string ExceptionChartSerializerReaderObjectInvalid { get; }
    public static string ExceptionChartSerializerDestinationObjectInvalid { get; }
    public static string ExceptionChartSerializerSourceObjectInvalid { get; }
    public static string ExceptionChartSerializerBinaryIgnoreUnknownAttributesUnsupported { get; }
    public static string ExceptionChartSerializerBinaryFromatInvalid { get; }
    public static string ExceptionChartSerializerPropertyNotFound { get; }
    public static string ExceptionDataManipulatorPointCountIsZero { get; }
    public static string ExceptionDataManipulatorIndexUndefined { get; }
    public static string ExceptionDataManipulatorIndexFormatInvalid { get; }
    public static string ExceptionDataManipulatorGroupedSeriesNotSorted { get; }
    public static string ExceptionDataManipulatorGroupingFormulaUndefined { get; }
    public static string ExceptionDataManipulatorGroupingFormulaUnsupported { get; }
    public static string ExceptionDataManipulatorGroupingInputSeriesUndefined { get; }
    public static string ExceptionDataManipulatorGroupingInputOutputSeriesNumberMismatch { get; }
    public static string ExceptionDataBindYValuesToString { get; }
    public static string ExceptionDataBindXValuesToString { get; }
    public static string ExceptionDataBindSeriesToString { get; }
    public static string ExceptionDataBindSeriesGroupByParameterIsEmpty { get; }
    public static string ExceptionImageUrlIsEmpty { get; }
    public static string ExceptionImageUrlInvalidFormatters { get; }
    public static string ExceptionImageUrlInvalidFormat { get; }
    public static string ExceptionImageUrlMissedFormatter { get; }
    public static string ExceptionDataManager100StackedSeriesPointsNumeberMismatch { get; }
    public static string ExceptionFormulaModuleHasNoInterface { get; }
    public static string ExceptionDataPointConverterInvalidSorting { get; }
    public static string ExceptionDataPointConverterWrongTypes { get; }
    public static string ExceptionDataPointInsertionXValuesQtyIsLessYValues { get; }
    public static string ExceptionDataPointValueNameInvalid { get; }
    public static string ExceptionDataPointValueNameYIndexOutOfRange { get; }
    public static string ExceptionDataPointValueNameYIndexIsNotPositive { get; }
    public static string ExceptionDataPointInsertionNoDataSource { get; }
    public static string ExceptionDataPointBindingYValueNotSpecified { get; }
    public static string ExceptionDataPointInsertionYValueNotSpecified { get; }
    public static string ExceptionAttributeUnableToDelete { get; }
    public static string ExceptionAttributeNameIsEmpty { get; }
    public static string ExceptionAttributeInvalidFormat { get; }
    public static string ExceptionAttributeDrawSideBySideInvalid { get; }
    public static string ExceptionLabelBorderIsNotPositive { get; }
    public static string ExceptionBorderWidthIsNotPositive { get; }
    public static string ExceptionAngleRangeInvalid { get; }
    public static string ExceptionDataPointYValueStringFormat { get; }
    public static string ExceptionParameterFormatInvalid { get; }
    public static string ExceptionStatisticalAnalysesInvalidAlphaValue { get; }
    public static string ExceptionStatisticalAnalysesInvalidProbabilityValue { get; }
    public static string ExceptionStatisticalAnalysesInvalidDegreeOfFreedom { get; }
    public static string ExceptionStatisticalAnalysesNegativeMeanDifference { get; }
    public static string ExceptionStatisticalAnalysesInvalidSeriesNumber { get; }
    public static string ExceptionStatisticalAnalysesInvalidMeanDifference { get; }
    public static string ExceptionStatisticalAnalysesNotEnoughDataPoints { get; }
    public static string ExceptionStatisticalAnalysesInvalidVariance { get; }
    public static string ExceptionStatisticalAnalysesInvalidTValue { get; }
    public static string ExceptionStatisticalAnalysesGammaBetaNegativeParameters { get; }
    public static string ExceptionStatisticalAnalysesInvalidZValue { get; }
    public static string ExceptionStatisticalAnalysesZeroVariance { get; }
    public static string ExceptionStatisticalAnalysesNotEnoughInputSeries { get; }
    public static string ExceptionStatisticalAnalysesInvalidVariableRanges { get; }
    public static string ExceptionStatisticalAnalysesStudentsInvalidTValue { get; }
    public static string ExceptionStatisticalAnalysesStudentsNegativeFreedomDegree { get; }
    public static string ExceptionStatisticalAnalysesNormalInvalidProbabilityValue { get; }
    public static string ExceptionStatisticalAnalysesInvalidTailedParameter { get; }
    public static string ExceptionStatisticalAnalysesInvalidInputParameter { get; }
    public static string ExceptionStatisticalAnalysesIncompleteBetaFunction { get; }
    public static string ExceptionStatisticalAnalysesInvalidAnovaTest { get; }
    public static string ExceptionStatisticalAnalysesCovariance { get; }
    public static string ExceptionStatisticalAnalysesInvalidMedianConditions { get; }
    public static string ExceptionStatisticalAnalysesInvalidMeanConditions { get; }
    public static string ExceptionStatisticalAnalysesInvalidVarianceConditions { get; }
    public static string ExceptionPeriodParameterIsNegative { get; }
    public static string ExceptionPeriodAverageParameterIsNegative { get; }
    public static string ExceptionPeriodShortParameterIsNegative { get; }
    public static string ExceptionPeriodLongParameterIsNegative { get; }
    public static string ExceptionIndicatorsDeviationMissing { get; }
    public static string ExceptionIndicatorsLongPeriodLessThenShortPeriod { get; }
    public static string ExceptionOscillatorObjectInvalidPeriod { get; }
    public static string ExceptionOscillatorNegativeSignalPeriod { get; }
    public static string ExceptionOscillatorNegativePeriodParameter { get; }
    public static string ExceptionVolumeIndicatorStartValueMissing { get; }
    public static string ExceptionPriceIndicatorsShiftParameterMissing { get; }
    public static string ExceptionPriceIndicatorsSameYNumber { get; }
    public static string ExceptionPriceIndicatorsSameXYNumber { get; }
    public static string ExceptionPriceIndicatorsPeriodMissing { get; }
    public static string ExceptionPriceIndicatorsNotEnoughPoints { get; }
    public static string ExceptionPriceIndicatorsFormulaRequiresOneArray { get; }
    public static string ExceptionPriceIndicatorsFormulaRequiresTwoArrays { get; }
    public static string ExceptionPriceIndicatorsFormulaRequiresThreeArrays { get; }
    public static string ExceptionPriceIndicatorsFormulaRequiresFourArrays { get; }
    public static string ExceptionObjectReferenceIsNull { get; }
    public static string ExceptionThreeLineBreakCanNotCobine { get; }
    public static string ExceptionThreeLineBreakNullReference { get; }
    public static string ExceptionThreeLineBreakUsedYValueOutOfRange { get; }
    public static string ExceptionThreeLineBreakNumberOfLinesInBreakFormatInvalid { get; }
    public static string ExceptionThreeLineBreakUpBrickColorInvalid { get; }
    public static string ExceptionThreeLineBreakUsedYValueInvalid { get; }
    public static string ExceptionThreeLineBreakNumberOfLinesInBreakValueInvalid { get; }
    public static string ExceptionRenkoCanNotCobine { get; }
    public static string ExceptionRenkoNullReference { get; }
    public static string ExceptionRenkoUsedYValueOutOfRange { get; }
    public static string ExceptionRenkoBoxSizeFormatInvalid { get; }
    public static string ExceptionRenkoUpBrickColorInvalid { get; }
    public static string ExceptionRenkoUsedYValueFormatInvalid { get; }
    public static string ExceptionPieIntervalsInvalid { get; }
    public static string ExceptionPieUnassignedFrontBackPoints { get; }
    public static string ExceptionPiePointOrderInvalid { get; }
    public static string ExceptionPieHorizontalLineSizeInvalid { get; }
    public static string ExceptionPieRadialLineSizeInvalid { get; }
    public static string ExceptionPie3DLabelLineSizeInvalid { get; }
    public static string ExceptionPieRadiusInvalid { get; }
    public static string ExceptionPieMinimumRelativePieSizeInvalid { get; }
    public static string ExceptionPieOrderOperationInvalid { get; }
    public static string ExceptionPieIntervalsOverlapping { get; }
    public static string ExceptionDoughnutNullReference { get; }
    public static string ExceptionDoughnutThresholdInvalid { get; }
    public static string ExceptionDoughnutCollectedThresholdUsePercentInvalid { get; }
    public static string ExceptionDoughnutCollectedColorInvalidFormat { get; }
    public static string ExceptionDoughnutCollectedThresholdInvalidFormat { get; }
    public static string ExceptionDoughnutCollectedThresholdInvalidRange { get; }
    public static string ExceptionPointAndFigureUpBrickColorInvalidFormat { get; }
    public static string ExceptionPointAndFigureCanNotCombine { get; }
    public static string ExceptionPointAndFigureNullReference { get; }
    public static string ExceptionPointAndFigureUsedYValueHighOutOfRange { get; }
    public static string ExceptionPointAndFigureUsedYValueLowOutOfrange { get; }
    public static string ExceptionPointAndFigureReversalAmountInvalidFormat { get; }
    public static string ExceptionPointAndFigureUsedYValueHighInvalidFormat { get; }
    public static string ExceptionPointAndFigureUsedYValueLowInvalidFormat { get; }
    public static string ExceptionFastPointMarkerStyleUnknown { get; }
    public static string ExceptionFunnelAngleRangeInvalid { get; }
    public static string ExceptionFunnelCanNotCombine { get; }
    public static string ExceptionFunnelNeckHeightInvalid { get; }
    public static string ExceptionFunnelNeckWidthInvalid { get; }
    public static string ExceptionKagiNullReference { get; }
    public static string ExceptionKagiCanNotCombine { get; }
    public static string ExceptionStackedAreaChartSeriesDataPointsNumberMismatch { get; }
    public static string Exception3DPieLabelsIndexInvalid { get; }
    public static string Exception3DChartPointsXValuesUnsorted { get; }
    public static string ExceptionFunnelMinimumPointHeightAttributeInvalid { get; }
    public static string ExceptionErrorBarParameterUndefined { get; }
    public static string Exception3DSplineY1ValueIsLessThenY2 { get; }
    public static string ExceptionCustomAttributeDefaultValueTypeInvalid { get; }
    public static string ExceptionFormulaDataItemsNumberMismatch { get; }
    public static string ExceptionFormulaDataItemsNumberMismatch2 { get; }
    public static string ExceptionFormulaDataOutputSeriesNumberYValuesIncorrect { get; }
    public static string ExceptionFormulaYIndexInvalid { get; }
    public static string ExceptionFormulaXValuesNotAligned { get; }
    public static string ExceptionFormulaInputOutputSeriesMismatch { get; }
    public static string ExceptionForecastingDegreeInvalid { get; }
    public static string ExceptionForecastingExponentialRegressionHasZeroYValues { get; }
    public static string ExceptionForecastingPowerRegressionHasZeroYValues { get; }
    public static string ExceptionBorderWidthIsNegative { get; }
    public static string ExceptionBorderWidthIsZero { get; }
    public static string ExceptionLegendBorderWidthIsNegative { get; }
    public static string ExceptionTitleBorderWidthIsNegative { get; }
    public static string ExceptionMatrix3DNotinitialized { get; }
    public static string ExceptionPaletteIsEmpty { get; }
    public static string ExceptionChartPreviewNotAvailable { get; }
    public static string ExceptionChartPreviewNotAvailableShort { get; }
    public static string ExceptionChartOutOfLimits { get; }
    public static string ExceptionHttpHandlerCanNotSave { get; }
    public static string ExceptionHttpHandlerValueInvalid { get; }
    public static string ExceptionHttpHandlerTimeoutParameterInvalid { get; }
    public static string ExceptionHttpHandlerUrlMissing { get; }
    public static string ExceptionHttpHandlerUrlInvalid { get; }
    public static string ExceptionHttpHandlerInvalidLocation { get; }
    public static string ExceptionHttpHandlerImageNotFound { get; }
    public static string DescriptionCustomAttributeEmptyPointValue { get; }
    public static string DescriptionCustomAttributePieDonutExploded { get; }
    public static string DescriptionCustomAttributeProportionalSymbols { get; }
    public static string DescriptionCustomAttributeDrawSideBySide { get; }
    public static string DescriptionCustomAttributeShowMarkerLines { get; }
    public static string DescriptionCustomAttributeShowOpenClose { get; }
    public static string DescriptionCustomAttributeBoxPlotShowAverage { get; }
    public static string DescriptionCustomAttributeBubbleUseSizeForLabel { get; }
    public static string DescriptionCustomAttributeBoxPlotShowMedian { get; }
    public static string DescriptionCustomAttributeBoxPlotShowUnusualValues { get; }
    public static string DescriptionCustomAttributeBoxPlotSeries { get; }
    public static string DescriptionCustomAttributePieStartAngle { get; }
    public static string DescriptionCustomAttributeLabelStyle { get; }
    public static string DescriptionCustomAttributeFunnelLabelStyle { get; }
    public static string DescriptionCustomAttributeFunnelStyle { get; }
    public static string DescriptionCustomAttributePolarDrawingStyle { get; }
    public static string DescriptionCustomAttributePyramidLabelStyle { get; }
    public static string DescriptionCustomAttributeRadarDrawingStyle { get; }
    public static string DescriptionCustomAttributeBoxSize { get; }
    public static string DescriptionCustomAttributeCollectedColor { get; }
    public static string DescriptionCustomAttributeCollectedLabel { get; }
    public static string DescriptionCustomAttributeCollectedLegendText { get; }
    public static string DescriptionCustomAttributeCollectedLegendDefaultText { get; }
    public static string DescriptionCustomAttributeCollectedLabelDefaultText { get; }
    public static string DescriptionCustomAttributeCollectedToolTip { get; }
    public static string DescriptionCustomAttributePyramidValueType { get; }
    public static string DescriptionCustomAttribute_3DLabelLineSize { get; }
    public static string DescriptionCustomAttributeFunnel3DRotationAngle { get; }
    public static string DescriptionCustomAttributePyramid3DRotationAngle { get; }
    public static string DescriptionCustomAttributePixelPointDepth { get; }
    public static string DescriptionCustomAttributePixelPointGapDepth { get; }
    public static string DescriptionCustomAttributeErrorBarCenterMarkerStyle { get; }
    public static string DescriptionCustomAttributePointFigureBoxSize { get; }
    public static string DescriptionCustomAttributeBubbleScaleMax { get; }
    public static string DescriptionCustomAttributeBubbleScaleMin { get; }
    public static string DescriptionCustomAttributeCollectedThreshold { get; }
    public static string DescriptionCustomAttributePieLineColor { get; }
    public static string DescriptionCustomAttributeCalloutLineColor { get; }
    public static string DescriptionCustomAttributePieLabelStyle { get; }
    public static string DescriptionCustomAttributeFunnel3DDrawingStyle { get; }
    public static string DescriptionCustomAttributePyramid3DDrawingStyle { get; }
    public static string DescriptionCustomAttributeDrawingStyle { get; }
    public static string DescriptionCustomAttributePieDrawingStyle { get; }
    public static string DescriptionCustomAttributeCollectedSliceExploded { get; }
    public static string DescriptionCustomAttributeCollectedThresholdUsePercent { get; }
    public static string DescriptionCustomAttributeFunnelNeckHeight { get; }
    public static string DescriptionCustomAttributeFunnelNeckWidth { get; }
    public static string DescriptionCustomAttributePyramidPointGap { get; }
    public static string DescriptionCustomAttributeFunnelPointGap { get; }
    public static string DescriptionCustomAttributeLabelsHorizontalLineSize { get; }
    public static string DescriptionCustomAttributeDoughnutRadius { get; }
    public static string DescriptionCustomAttributePolarCircularLabelsStyle { get; }
    public static string DescriptionCustomAttributeRadarCircularLabelsStyle { get; }
    public static string DescriptionCustomAttributeOpenCloseStyle { get; }
    public static string DescriptionCustomAttributeBubbleMaxSize { get; }
    public static string DescriptionCustomAttributeMaxPixelPointWidth { get; }
    public static string DescriptionCustomAttributePyramidMinPointHeight { get; }
    public static string DescriptionCustomAttributeFunnelMinPointHeight { get; }
    public static string DescriptionCustomAttributeMinimumRelativePieSize { get; }
    public static string DescriptionCustomAttributeMinPixelPointWidth { get; }
    public static string DescriptionCustomAttributeErrorBarSeries { get; }
    public static string DescriptionCustomAttributeNumberOfLinesInBreak { get; }
    public static string DescriptionCustomAttributePyramidOutsideLabelPlacement { get; }
    public static string DescriptionCustomAttributeFunnelOutsideLabelPlacement { get; }
    public static string DescriptionCustomAttributeBoxPlotPercentile { get; }
    public static string DescriptionCustomAttributeBoxPlotWhiskerPercentile { get; }
    public static string DescriptionCustomAttributeBarLabelStyle { get; }
    public static string DescriptionCustomAttributeLabelsRadialLineSize { get; }
    public static string DescriptionCustomAttributePointWidth { get; }
    public static string DescriptionCustomAttributeReversalAmount { get; }
    public static string DescriptionCustomAttributePolarAreaDrawingStyle { get; }
    public static string DescriptionCustomAttributeRadarAreaDrawingStyle { get; }
    public static string DescriptionCustomAttributeStackedGroupName { get; }
    public static string DescriptionCustomAttributeLineTension { get; }
    public static string DescriptionCustomAttributeCandlePriceUpColor { get; }
    public static string DescriptionCustomAttributeBarsPriceUpColor { get; }
    public static string DescriptionCustomAttributePriceDownColor { get; }
    public static string DescriptionCustomAttributeUsedYValueHigh { get; }
    public static string DescriptionCustomAttributeUsedYValueLow { get; }
    public static string DescriptionCustomAttributeRenkoUsedYValue { get; }
    public static string DescriptionCustomAttributeThreeLineBreakUsedYValue { get; }
    public static string DescriptionCustomAttributePyramidInsideLabelAlignment { get; }
    public static string DescriptionCustomAttributeFunnelInsideLabelAlignment { get; }
    public static string DescriptionCustomAttributeErrorBarStyle { get; }
    public static string DescriptionCustomAttributePixelPointWidth { get; }
    public static string DescriptionCustomAttributeLabelValueType { get; }
    public static string DescriptionCustomAttributeUsedYValue { get; }
    public static string DescriptionCustomAttributeKagiReversalAmount { get; }
    public static string DescriptionCustomAttributeErrorBarType { get; }
    public static string DescriptionAttributeChart_ImageStorageMode { get; }
    public static string DescriptionKeyWordAverageYValues { get; }
    public static string DescriptionKeyWordAxisLabelDataPoint { get; }
    public static string DescriptionKeyWordIndexDataPoint { get; }
    public static string DescriptionKeyWordLabelDataPoint { get; }
    public static string DescriptionKeyWordYValuePercentTotal { get; }
    public static string DescriptionKeyWordIndexDataPoint2 { get; }
    public static string DescriptionKeyWordLegendText { get; }
    public static string DescriptionKeyWordMaximumYValues { get; }
    public static string DescriptionKeyWordMinimumYValues { get; }
    public static string DescriptionKeyWordSeriesName { get; }
    public static string DescriptionKeyWordTotalYValues { get; }
    public static string DescriptionKeyWordXValue { get; }
    public static string DescriptionKeyWordFirstPointYValue { get; }
    public static string DescriptionKeyWordLastPointYValue { get; }
    public static string DescriptionKeyWordYValue { get; }
    public static string DescriptionKeyWordNameIndexDataPoint { get; }
    public static string DescriptionKeyWordNameXValue { get; }
    public static string DescriptionKeyWordNameYValue { get; }
    public static string DescriptionKeyWordNameTotalYValues { get; }
    public static string DescriptionKeyWordNameYValuePercentTotal { get; }
    public static string DescriptionKeyWordNameIndexTheDataPoint { get; }
    public static string DescriptionKeyWordNameLabelDataPoint { get; }
    public static string DescriptionKeyWordNameAxisLabelDataPoint { get; }
    public static string DescriptionKeyWordNameLegendText { get; }
    public static string DescriptionKeyWordNameSeriesName { get; }
    public static string DescriptionKeyWordNameAverageYValues { get; }
    public static string DescriptionKeyWordNameMaximumYValues { get; }
    public static string DescriptionKeyWordNameMinimumYValues { get; }
    public static string DescriptionKeyWordNameLastPointYValue { get; }
    public static string DescriptionKeyWordNameFirstPointYValue { get; }
    public static string DescriptionNumberFormatTypeCurrency { get; }
    public static string DescriptionNumberFormatTypeDecimal { get; }
    public static string DescriptionNumberFormatTypeScientific { get; }
    public static string DescriptionNumberFormatTypeFixedPoint { get; }
    public static string DescriptionNumberFormatTypeGeneral { get; }
    public static string DescriptionNumberFormatTypeNumber { get; }
    public static string DescriptionNumberFormatTypePercent { get; }
    public static string DescriptionTypeNone { get; }
    public static string DescriptionTypeCustom { get; }
    public static string DescriptionTypeEmpty { get; }
    public static string DescriptionTypePoint { get; }
    public static string LabelKeyFormat { get; }
    public static string LabelKeyCustomFormat { get; }
    public static string LabelStringWithKeywords { get; }
    public static string LabelEditKeyword { get; }
    public static string LabelInsertNewKeyword { get; }
    public static string LabelStringKeywordsEditor { get; }
    public static string LabelKeywordEditor { get; }
    public static string LabelDescription { get; }
    public static string LabelFormatKeySample { get; }
    public static string LabelKeyYValueIndex { get; }
    public static string LabelKeyPrecision { get; }
    public static string LabelKeyKeywords { get; }
    public static string LabelValueFormatting { get; }
    public static string LabelButtonOk { get; }
    public static string LabelButtonCancel { get; }
    public static string DescriptionToolTipCustomFormatCharacters { get; }
    public static string DesciptionCustomLabelEditorTitle { get; }
    public static string DesciptionCustomLabelFormatInvalid { get; }
    public static string LabelStatisticalSumOfSquaresBetweenGroups { get; }
    public static string LabelStatisticalSumOfSquaresWithinGroups { get; }
    public static string LabelStatisticalSumOfSquaresTotal { get; }
    public static string LabelStatisticalDegreesOfFreedomBetweenGroups { get; }
    public static string LabelStatisticalDegreesOfFreedomWithinGroups { get; }
    public static string LabelStatisticalDegreesOfFreedomTotal { get; }
    public static string LabelStatisticalMeanSquareVarianceBetweenGroups { get; }
    public static string LabelStatisticalMeanSquareVarianceWithinGroups { get; }
    public static string LabelStatisticalFRatio { get; }
    public static string LabelStatisticalFCriteria { get; }
    public static string LabelStatisticalCorrelation { get; }
    public static string LabelStatisticalCovariance { get; }
    public static string LabelStatisticalProbability { get; }
    public static string LabelStatisticalAverage { get; }
    public static string LabelStatisticalVariance { get; }
    public static string LabelStatisticalMedian { get; }
    public static string LabelStatisticalBetaFunction { get; }
    public static string LabelStatisticalGammaFunction { get; }
    public static string LabelStatisticalTheFirstGroupMean { get; }
    public static string LabelStatisticalTheSecondGroupMean { get; }
    public static string LabelStatisticalTheFirstGroupVariance { get; }
    public static string LabelStatisticalTheSecondGroupVariance { get; }
    public static string LabelStatisticalFValue { get; }
    public static string LabelStatisticalFCriticalValueOneTail { get; }
    public static string LabelStatisticalZValue { get; }
    public static string LabelStatisticalZCriticalValueOneTail { get; }
    public static string LabelStatisticalZCriticalValueTwoTail { get; }
    public static string LabelStatisticalPZLessEqualSmallZOneTail { get; }
    public static string LabelStatisticalPZLessEqualSmallZTwoTail { get; }
    public static string LabelStatisticalPFLessEqualSmallFOneTail { get; }
    public static string LabelStatisticalTValue { get; }
    public static string LabelStatisticalDegreeOfFreedom { get; }
    public static string LabelStatisticalPTLessEqualSmallTOneTail { get; }
    public static string LabelStatisticalSmallTCrititcalOneTail { get; }
    public static string LabelStatisticalPTLessEqualSmallTTwoTail { get; }
    public static string LabelStatisticalSmallTCrititcalTwoTail { get; }
    public static string MessagePrecisionInvalid { get; }
    public static string MessageChangingChartAreaPositionProperty { get; }
    public static string MessageChangingChartAreaPositionConfirmAutomatic { get; }
    public static string MessageChangingChartAreaPositionConfirmCustom { get; }
    public static string MessageChartException { get; }
    public static string MessageSite { get; }
    public static string MessageStackTrace { get; }
    public static string MessageChartTitle { get; }
    public static string TitleAxisX { get; }
    public static string TitleAxisY { get; }
    public static string TitleAxisX2 { get; }
    public static string TitleAxisY2 { get; }
    public static string FormulaNamePriceIndicators { get; }
    public static string FormulaNameGeneralTechnicalIndicators { get; }
    public static string FormulaNameTechnicalVolumeIndicators { get; }
    public static string FormulaNameOscillator { get; }
    public static string FormulaNameGeneralFormulas { get; }
    public static string FormulaNameTimeSeriesAndForecasting { get; }
    public static string FormulaNameStatisticalAnalysis { get; }
    public static string FormulaNameVolumeIndicators { get; }
    public static string LabelTextRow { get; }
    public static string DescriptionAttributeBackImage { get; }
    public static string DescriptionAttributeMarkerImage { get; }
    public static string DescriptionAttributeAnnotationBaseY { get; }
    public static string DescriptionAttributeAnnotationWidth { get; }
    public static string DescriptionAttributeAnnotationHeight { get; }
    public static string DescriptionAttributeAnnotationClipToChartArea { get; }
    public static string DescriptionAttributeAnnotationBaseX { get; }
    public static string DescriptionAttributeChartImageType { get; }
    public static string DescriptionAttributeMultiValueSeparator { get; }
    public static string DescriptionAttributeDataSeriesGroupID { get; }
    public static string DescriptionAttributeSuppressCodeExceptions { get; }
    public static string DescriptionAttributeNoDataMessage { get; }
    public static string DescriptionAttributeReverseSeriesOrder { get; }
    public static string DescriptionAttributeUserDefined { get; }
    public static string DescriptionAttributeChartEvent_GetToolTipText { get; }
    public static string DescriptionAttributeArrowAnnotation_ArrowSize { get; }
    public static string DescriptionAttributeChartSerializer_Content { get; }
    public static string DescriptionAttributeLegend_Enabled { get; }
    public static string DescriptionAttributeEnabled5 { get; }
    public static string DescriptionAttributeAxisScaleBreakStyle_Enabled { get; }
    public static string DescriptionAttributeEnabled7 { get; }
    public static string DescriptionAttributeLabel_Enabled { get; }
    public static string DescriptionAttributeLegendItem_Enabled { get; }
    public static string DescriptionAttributeAxisScrollBar_Enabled { get; }
    public static string DescriptionAttributeEnabled13 { get; }
    public static string DescriptionAttributeSeries_Enabled { get; }
    public static string DescriptionAttributeLegendCell_CellSpan { get; }
    public static string DescriptionAttributeCursor_SelectionColor { get; }
    public static string DescriptionAttributeInterlaced { get; }
    public static string DescriptionAttributeMapArea_Coordinates { get; }
    public static string DescriptionAttributeChartEvent_PostPaint { get; }
    public static string DescriptionAttributeStripLine_Title { get; }
    public static string DescriptionAttributeLegend_Title { get; }
    public static string DescriptionAttributeTitle5 { get; }
    public static string DescriptionAttributeTitle6 { get; }
    public static string DescriptionAttributeAnnotation_Annotation { get; }
    public static string DescriptionAttributeTitleFont { get; }
    public static string DescriptionAttributeChartArea_Axes { get; }
    public static string DescriptionAttributeChartSerializer_NonSerializableContent { get; }
    public static string DescriptionAttributeShadowOffset { get; }
    public static string DescriptionAttributeCalloutLineAnchorCap { get; }
    public static string DescriptionAttributeMapAreaAttributes { get; }
    public static string DescriptionAttributeSubAxis_SubAxis { get; }
    public static string DescriptionAttributeMajorGrid { get; }
    public static string DescriptionAttributeElementPosition_Y { get; }
    public static string DescriptionAttributeAnnotationPathPoint_Y { get; }
    public static string DescriptionAttributeToolTipEventArgs_Y { get; }
    public static string DescriptionAttributePoint3D_Y { get; }
    public static string DescriptionAttributePoint3D_Z { get; }
    public static string DescriptionAttributeMajorTickMark { get; }
    public static string DescriptionAttributeDrawInfinitive { get; }
    public static string DescriptionAttributeAxisDataView_MinSize { get; }
    public static string DescriptionAttributeLegendCellColumnCollection_LegendCellColumnCollection { get; }
    public static string DescriptionAttributeMarkerOverlapping { get; }
    public static string DescriptionAttributeChart_OnCustomizeLegend { get; }
    public static string DescriptionAttributeLegendCellColumn_HeaderTextAlignment { get; }
    public static string DescriptionAttributeScrollBarEventArgs_MousePositionY { get; }
    public static string DescriptionAttributeNamedImage_NamedImage { get; }
    public static string DescriptionAttributeScrollBar { get; }
    public static string DescriptionAttributeMapArea_MapArea { get; }
    public static string DescriptionAttributeLegend_CustomItems { get; }
    public static string DescriptionAttributeAnnotationSmartLabelsStyle_AnnotationSmartLabelsStyle { get; }
    public static string DescriptionAttributePolylineAnnotation_PolylineAnnotation { get; }
    public static string DescriptionAttributeChartEvent_AxisViewChanged { get; }
    public static string DescriptionAttributeCrossing { get; }
    public static string DescriptionAttributeMargins_Top { get; }
    public static string DescriptionAttributeLegendCellColumn_HeaderFont { get; }
    public static string DescriptionAttributeLegend_InterlacedRows { get; }
    public static string DescriptionAttributeAxisDataView_MinSizeType { get; }
    public static string DescriptionAttributeLineWidth { get; }
    public static string DescriptionAttributeDataPoint_XValue { get; }
    public static string DescriptionAttributeChartArea_AxisY2 { get; }
    public static string DescriptionAttributeChartArea_AxisX2 { get; }
    public static string DescriptionAttributeChartEvent_AnnotationPositionChanging { get; }
    public static string DescriptionAttributeStripLine_StripLine { get; }
    public static string DescriptionAttributeBorderColor { get; }
    public static string DescriptionAttributeMarkerBorderColor { get; }
    public static string DescriptionAttributeLegendText { get; }
    public static string DescriptionAttributeCustomLabel_LabelMark { get; }
    public static string DescriptionAttributeTextAntiAliasingQuality { get; }
    public static string DescriptionAttributeAllowMoving { get; }
    public static string DescriptionAttributeCalloutAnnotation_CalloutAnnotation { get; }
    public static string DescriptionAttributeStripLine_Name { get; }
    public static string DescriptionAttributeTitle_Name { get; }
    public static string DescriptionAttributeName4 { get; }
    public static string DescriptionAttributeAnnotationPathPoint_Name { get; }
    public static string DescriptionAttributeLegendCell_Name { get; }
    public static string DescriptionAttributeMapArea_Name { get; }
    public static string DescriptionAttributeSeries_Name { get; }
    public static string DescriptionAttributeAxis_Name { get; }
    public static string DescriptionAttributeNamedImage_Name { get; }
    public static string DescriptionAttributeSubAxis_Name { get; }
    public static string DescriptionAttributeDataPoint_Name { get; }
    public static string DescriptionAttributeLegendCellColumn_Name { get; }
    public static string DescriptionAttributeLegendItem_Name { get; }
    public static string DescriptionAttributeLegend_Name { get; }
    public static string DescriptionAttributeCustomLabel_Name { get; }
    public static string DescriptionAttributeChartArea_Name { get; }
    public static string DescriptionAttributeCursor_Cursor { get; }
    public static string DescriptionAttributeAnchorX { get; }
    public static string DescriptionAttributeToolTip { get; }
    public static string DescriptionAttributeLegend_TableStyle { get; }
    public static string DescriptionAttributeDataPoint_Empty { get; }
    public static string DescriptionAttributeScrollBarEventArgs_Handled { get; }
    public static string DescriptionAttributeAxisLabel { get; }
    public static string DescriptionAttributeAnnotationGroup_AllowPathEditing { get; }
    public static string DescriptionAttributeAllowPathEditing3 { get; }
    public static string DescriptionAttributeChart_OnPaint { get; }
    public static string DescriptionAttributeCalloutAnnotation_AnchorOffsetX { get; }
    public static string DescriptionAttributeAnchorOffsetX3 { get; }
    public static string DescriptionAttributeCalloutAnnotation_AnchorOffsetY { get; }
    public static string DescriptionAttributeAnchorOffsetY3 { get; }
    public static string DescriptionAttributeChartEvent_CursorPositionChanging { get; }
    public static string DescriptionAttributeScrollBarEventArgs_ButtonType { get; }
    public static string DescriptionAttributeLabelsAutoFitStyle { get; }
    public static string DescriptionAttributeLabelStyle { get; }
    public static string DescriptionAttributeStripLine_IntervalOffsetType { get; }
    public static string DescriptionAttributeLabel_IntervalOffsetType { get; }
    public static string DescriptionAttributeIntervalOffsetType4 { get; }
    public static string DescriptionAttributeCursor_IntervalOffsetType { get; }
    public static string DescriptionAttributeIntervalOffsetType6 { get; }
    public static string DescriptionAttributeAxisScaleSegment_IntervalOffsetType { get; }
    public static string DescriptionAttributeReverse { get; }
    public static string DescriptionAttributeSeries_Points { get; }
    public static string DescriptionAttributeBorderSkin_SkinStyle { get; }
    public static string DescriptionAttributeChartArea3DStyle_Clustered { get; }
    public static string DescriptionAttributeAnchorDataPointName { get; }
    public static string DescriptionAttributeChartEvent_AnnotationPositionChanged { get; }
    public static string DescriptionAttributeChartArea3DStyle_PointGapDepth { get; }
    public static string DescriptionAttributeLegend_Reversed { get; }
    public static string DescriptionAttributeAnnotation_AnnotationType { get; }
    public static string DescriptionAttributeTextAnnotation_AnnotationType { get; }
    public static string DescriptionAttributeAnnotationType { get; }
    public static string DescriptionAttributeBorderSkin_FrameBorderDashStyle { get; }
    public static string DescriptionAttributeLegend_HeaderSeparatorColor { get; }
    public static string DescriptionAttributeChartEvent_AnnotationSelectionChanged { get; }
    public static string DescriptionAttributeFont { get; }
    public static string DescriptionAttributeLegend_Font { get; }
    public static string DescriptionAttributeLegendCellColumn_Font { get; }
    public static string DescriptionAttributeLabel_Font { get; }
    public static string DescriptionAttributeTitle_Font { get; }
    public static string DescriptionAttributeLegendCell_Font { get; }
    public static string DescriptionAttributeSeries_ValueMemberX { get; }
    public static string DescriptionAttributeArrows { get; }
    public static string DescriptionAttributeType { get; }
    public static string DescriptionAttributeSeries_Type { get; }
    public static string DescriptionAttributeBorder3DAnnotation_Border3DAnnotation { get; }
    public static string DescriptionAttributeChart_Images { get; }
    public static string DescriptionAttributeLegendToolTip { get; }
    public static string DescriptionAttributeCustomLabel_CustomLabel { get; }
    public static string DescriptionAttributeChartEvent_AnnotationPlaced { get; }
    public static string DescriptionAttributeBackColor { get; }
    public static string DescriptionAttributeCalloutBackColor { get; }
    public static string DescriptionAttributeFrameBackColor { get; }
    public static string DescriptionAttributeTitleBackColor { get; }
    public static string DescriptionAttributeLabelBackColor { get; }
    public static string DescriptionAttributeHeaderBackColor { get; }
    public static string DescriptionAttributeLabel_ShowEndLabels { get; }
    public static string DescriptionAttributeLabelToolTip { get; }
    public static string DescriptionAttributeSeries_MarkerStep { get; }
    public static string DescriptionAttributeTickMark_Style { get; }
    public static string DescriptionAttribute_TextOrientation { get; }
    public static string DescriptionAttributeLegendItem_Style { get; }
    public static string DescriptionAttributeChartArea3DStyle_Rotation { get; }
    public static string DescriptionAttributeSizeAlwaysRelative { get; }
    public static string DescriptionAttributeSizeAlwaysRelative3 { get; }
    public static string DescriptionAttributeAnnotationGroup_SizeAlwaysRelative { get; }
    public static string DescriptionAttributeChart_BorderlineWidth { get; }
    public static string DescriptionAttributeSeries_XValueIndexed { get; }
    public static string DescriptionAttributeEllipseAnnotation_EllipseAnnotation { get; }
    public static string DescriptionAttributeAnchorAlignment { get; }
    public static string DescriptionAttributeWidth { get; }
    public static string DescriptionAttributeElementPosition_Width { get; }
    public static string DescriptionAttributeAxisXName { get; }
    public static string DescriptionAttributeChartArea3DStyle_Inclination { get; }
    public static string DescriptionAttributeLegendCollection_LegendCollection { get; }
    public static string DescriptionAttributeAxisYName { get; }
    public static string DescriptionAttributeAxisScaleSegment_Spacing { get; }
    public static string DescriptionAttributeAxisScaleBreakStyle_Spacing { get; }
    public static string DescriptionAttributeSelected { get; }
    public static string DescriptionAttributeAnnotationGroup_Selected { get; }
    public static string DescriptionAttributeVerticalLineAnnotation_VerticalLineAnnotation { get; }
    public static string DescriptionAttributeLabelsAutoFitMaxFontSize { get; }
    public static string DescriptionAttributeFreeDrawPlacement { get; }
    public static string DescriptionAttributeStripLinesCollection_StripLinesCollection { get; }
    public static string DescriptionAttributeAxisDataView_IsZoomed { get; }
    public static string DescriptionAttributeChartArea3DStyle_Perspective { get; }
    public static string DescriptionAttributeChart_OnCustomize { get; }
    public static string DescriptionAttributeLabel { get; }
    public static string DescriptionAttributeLabel_Label { get; }
    public static string DescriptionAttributeStartCap3 { get; }
    public static string DescriptionAttributeFontColor { get; }
    public static string DescriptionAttributeLegendFontColor { get; }
    public static string DescriptionAttributeLabel_OffsetLabels { get; }
    public static string DescriptionAttributeMargin { get; }
    public static string DescriptionAttributeAnnotationPositionChangingEventArgs_AnnotationPositionChangingEventArgs { get; }
    public static string DescriptionAttributeCursorEventArgs_NewSelectionStart { get; }
    public static string DescriptionAttributeSeries_XSubAxisName { get; }
    public static string DescriptionAttributeHideOverlapped { get; }
    public static string DescriptionAttributeLegendCellColumn_MaximumWidth { get; }
    public static string DescriptionAttributeLegend_InsideChartArea { get; }
    public static string DescriptionAttributeImageTransparentColor { get; }
    public static string DescriptionAttributeLegend_EquallySpacedItems { get; }
    public static string DescriptionAttributeChartArea_CursorY { get; }
    public static string DescriptionAttributeChart_Printing { get; }
    public static string DescriptionAttributeAxis { get; }
    public static string DescriptionAttributeAxis_Axis { get; }
    public static string DescriptionAttributeBackImageAlign { get; }
    public static string DescriptionAttributeShowInLegend { get; }
    public static string DescriptionAttributeChartSerializer_ChartSerializer { get; }
    public static string DescriptionAttributeChart_Compression { get; }
    public static string DescriptionAttributeChartImage_Compression { get; }
    public static string DescriptionAttributeCursor_AutoScroll { get; }
    public static string DescriptionAttributeElementPosition_Height { get; }
    public static string DescriptionAttributeHeight3 { get; }
    public static string DescriptionAttributeChart_ViewStateContent { get; }
    public static string DescriptionAttributeAxisDataView_SmallScrollSizeType { get; }
    public static string DescriptionAttributeLegend_CellColumns { get; }
    public static string DescriptionAttributeAxisScrollBar_Buttons { get; }
    public static string DescriptionAttributeLegends { get; }
    public static string DescriptionAttributeElementPosition_X { get; }
    public static string DescriptionAttributeAnnotationPathPoint_X { get; }
    public static string DescriptionAttributePoint3D_X { get; }
    public static string DescriptionAttributeToolTipEventArgs_X { get; }
    public static string DescriptionAttributeCustomAttributesExtended { get; }
    public static string DescriptionAttributeMargins_Left { get; }
    public static string DescriptionAttributeAxisScrollBar_PositionInside { get; }
    public static string DescriptionAttributeSeries_ValueMembersY { get; }
    public static string DescriptionAttributeSmartLabelsStyle_SmartLabelsStyle { get; }
    public static string DescriptionAttributeChartEvent_SelectionRangeChanging { get; }
    public static string DescriptionAttributeLabelsAutoFitMinFontSize { get; }
    public static string DescriptionAttributeMaxMovingDistance { get; }
    public static string DescriptionAttributeTitle_DockToChartArea { get; }
    public static string DescriptionAttributeLegend_DockToChartArea { get; }
    public static string DescriptionAttributeChartArea3DStyle_RightAngleAxes { get; }
    public static string DescriptionAttributeLegend_LegendStyle { get; }
    public static string DescriptionAttributeAxisDataView_AxisDataView { get; }
    public static string DescriptionAttributeBorderDashStyle { get; }
    public static string DescriptionAttributeLabelBorderDashStyle { get; }
    public static string DescriptionAttributeBackSecondaryColor { get; }
    public static string DescriptionAttributeBorderSkin_FrameBackSecondaryColor { get; }
    public static string DescriptionAttributeLegend_TitleSeparator { get; }
    public static string DescriptionAttributeChartArea_InnerPlotPosition { get; }
    public static string DescriptionAttributeChartEvent_CustomizeLegend { get; }
    public static string DescriptionAttributeAnnotationPathPoint_AnnotationPathPoint { get; }
    public static string DescriptionAttributeDataPoint_YValues { get; }
    public static string DescriptionAttributeCustomLabel_RowIndex { get; }
    public static string DescriptionAttributeSeries_YSubAxisName { get; }
    public static string DescriptionAttributeChartArea_AlignType { get; }
    public static string DescriptionAttributeAllowResizing { get; }
    public static string DescriptionAttributeShowLabelAsValue { get; }
    public static string DescriptionAttributeForeColor { get; }
    public static string DescriptionAttributePathPoints { get; }
    public static string DescriptionAttributeViewEventArgs_NewSizeType { get; }
    public static string DescriptionAttributeChart_BuildNumber { get; }
    public static string DescriptionAttributeAxisScaleSegmentCollection_AxisScaleSegmentCollection { get; }
    public static string DescriptionAttributeMarkerSize { get; }
    public static string DescriptionAttributeLegendItem_MarkerSize { get; }
    public static string DescriptionAttributeLegendCell_SeriesSymbolSize { get; }
    public static string DescriptionAttributeLegendCellColumn_SeriesSymbolSize { get; }
    public static string DescriptionAttributeDisabled { get; }
    public static string DescriptionAttributeChartSerializer_ResetWhenLoading { get; }
    public static string DescriptionAttributeBackGradientStyle { get; }
    public static string DescriptionAttributeDataSource { get; }
    public static string DescriptionAttributeCustomLabels { get; }
    public static string DescriptionAttributeArrowAnnotation_ArrowAnnotation { get; }
    public static string DescriptionAttributeCursor_AxisType { get; }
    public static string DescriptionAttributeLegendItem_Cells { get; }
    public static string DescriptionAttributeBorderSkin { get; }
    public static string DescriptionAttributeBorderSkin_BorderSkin { get; }
    public static string DescriptionAttributeSubAxisCollection_SubAxisCollection { get; }
    public static string DescriptionAttributeAllowSelecting { get; }
    public static string DescriptionAttributeChartEvent_Customize { get; }
    public static string DescriptionAttributeImageAnnotation_ImageAnnotation { get; }
    public static string DescriptionAttributeAxisDataView_SmallScrollSize { get; }
    public static string DescriptionAttributeAxisScaleSegment_Interval { get; }
    public static string DescriptionAttributeCursor_Interval { get; }
    public static string DescriptionAttributeInterval4 { get; }
    public static string DescriptionAttributeStripLine_Interval { get; }
    public static string DescriptionAttributeInterval6 { get; }
    public static string DescriptionAttributeLabel_Interval { get; }
    public static string DescriptionAttributeStripLine_TitleLineAlignment { get; }
    public static string DescriptionAttributeMaximum { get; }
    public static string DescriptionAttributeElementPosition_Auto { get; }
    public static string DescriptionAttributeSeries_YAxisType { get; }
    public static string DescriptionAttributeLineDashStyle { get; }
    public static string DescriptionAttributeLogarithmBase { get; }
    public static string DescriptionAttributeAntiAlias { get; }
    public static string DescriptionAttributeImageWrapMode { get; }
    public static string DescriptionAttributeChartSerializer_IgnoreUnknownXmlAttributes { get; }
    public static string DescriptionAttributeAxisScaleSegment_Tag { get; }
    public static string DescriptionAttributeTag { get; }
    public static string DescriptionAttributeLegend { get; }
    public static string DescriptionAttributeLegend_Legend { get; }
    public static string DescriptionAttributeSeries_Legend { get; }
    public static string DescriptionAttributeDataPointComparer_DataPointComparer { get; }
    public static string DescriptionAttributeBackHatchStyle { get; }
    public static string DescriptionAttributeFrameBackHatchStyle { get; }
    public static string DescriptionAttributeChartAreaCollection_Item { get; }
    public static string DescriptionAttributeLegendCollection_Item { get; }
    public static string DescriptionAttributeAnnotationCollection_Item { get; }
    public static string DescriptionAttributeSubAxisCollection_Item { get; }
    public static string DescriptionAttributeSeriesCollection_Item { get; }
    public static string DescriptionAttributeAnnotationPathPointCollection_Item { get; }
    public static string DescriptionAttributeLegendCellColumnCollection_Item { get; }
    public static string DescriptionAttributeAxisScaleSegmentCollection_Item { get; }
    public static string DescriptionAttributeLegendCellCollection_Item { get; }
    public static string DescriptionAttributeNamedImagesCollection_Item { get; }
    public static string DescriptionAttributeAxisScaleSegment_ScaleMinimum { get; }
    public static string DescriptionAttributeSmartLabels { get; }
    public static string DescriptionAttributeSeries_SmartLabels { get; }
    public static string DescriptionAttributeSmartLabels_SmartLabels { get; }
    public static string DescriptionAttributeMinorTickMark { get; }
    public static string DescriptionAttributeMapAreasCollection_MapAreasCollection { get; }
    public static string DescriptionAttributeMovingDirection { get; }
    public static string DescriptionAttributeCursor_UserSelection { get; }
    public static string DescriptionAttributeChartArea { get; }
    public static string DescriptionAttributeSeries_ChartArea { get; }
    public static string DescriptionAttributeChartArea_ChartArea { get; }
    public static string DescriptionAttributeToolTipEventArgs_HitTestResult { get; }
    public static string DescriptionAttributeAxisScaleSegment_AxisScaleSegment { get; }
    public static string DescriptionAttributeLegend_ItemColumnSeparatorColor { get; }
    public static string DescriptionAttributeDataManipulator { get; }
    public static string DescriptionAttributeTitle_Color { get; }
    public static string DescriptionAttributeLegendItem_Color { get; }
    public static string DescriptionAttributeColor4 { get; }
    public static string DescriptionAttributeMargins_Right { get; }
    public static string DescriptionAttributeRight3 { get; }
    public static string DescriptionAttributeChart_OnBackPaint { get; }
    public static string DescriptionAttributeLineColor { get; }
    public static string DescriptionAttributeCalloutLineColor { get; }
    public static string DescriptionAttributeArrowAnnotation_ArrowStyle { get; }
    public static string DescriptionAttributeArrowStyle_ArrowStyle { get; }
    public static string DescriptionAttributeSeries_XValueType { get; }
    public static string DescriptionAttributeAnnotationGroup_Annotations { get; }
    public static string DescriptionAttributeAnnotations3 { get; }
    public static string DescriptionAttributeMinorGrid { get; }
    public static string DescriptionAttributeMapArea_Custom { get; }
    public static string DescriptionAttributeChart_EnableViewState { get; }
    public static string DescriptionAttributeChartArea3DStyle_Enable3D { get; }
    public static string DescriptionAttributeInterlacedColor { get; }
    public static string DescriptionAttributeLegendCellColumn_Margins { get; }
    public static string DescriptionAttributeMargins_Margins { get; }
    public static string DescriptionAttributeLegendCell_Margins { get; }
    public static string DescriptionAttributeLegendItem_MarkerColor { get; }
    public static string DescriptionAttributeMarkerColor3 { get; }
    public static string DescriptionAttributeChart_Size { get; }
    public static string DescriptionAttributeTickMark_Size { get; }
    public static string DescriptionAttributeAxisScaleSegment_Size { get; }
    public static string DescriptionAttributeAxisDataView_Size { get; }
    public static string DescriptionAttributeAxisScrollBar_Size { get; }
    public static string DescriptionAttributeViewEventArgs_NewSize { get; }
    public static string DescriptionAttributeSeries_XAxisType { get; }
    public static string DescriptionAttributeAllowOutsidePlotArea { get; }
    public static string DescriptionAttributeLegendItem_MarkerStyle { get; }
    public static string DescriptionAttributeMarkerStyle4 { get; }
    public static string DescriptionAttributeLegendCell_ImageSize { get; }
    public static string DescriptionAttributeView { get; }
    public static string DescriptionAttributeSeriesCollection_SeriesCollection { get; }
    public static string DescriptionAttributeCursorEventArgs_NewPosition { get; }
    public static string DescriptionAttributeViewEventArgs_NewPosition { get; }
    public static string DescriptionAttributeLegendCell_Image { get; }
    public static string DescriptionAttributeNamedImage_Image { get; }
    public static string DescriptionAttributeImageAnnotation_Image { get; }
    public static string DescriptionAttributeLegendItem_Image { get; }
    public static string DescriptionAttributeCustomLabel_Image { get; }
    public static string DescriptionAttributeAxisScaleSegment_IntervalOffset { get; }
    public static string DescriptionAttributeIntervalOffset3 { get; }
    public static string DescriptionAttributeLabel_IntervalOffset { get; }
    public static string DescriptionAttributeCursor_IntervalOffset { get; }
    public static string DescriptionAttributeIntervalOffset6 { get; }
    public static string DescriptionAttributeStripLine_IntervalOffset { get; }
    public static string DescriptionAttributeLegend_DockInsideChartArea { get; }
    public static string DescriptionAttributeTitle_DockInsideChartArea { get; }
    public static string DescriptionAttributeChart_RenderType { get; }
    public static string DescriptionAttributeAxisScaleBreakStyle_CollapsibleSpaceThreshold { get; }
    public static string DescriptionAttributeChartEvent_AxisViewChanging { get; }
    public static string DescriptionAttributeLabelCalloutStyle_LabelCalloutStyle { get; }
    public static string DescriptionAttributePath { get; }
    public static string DescriptionAttributeLegendItem_SeriesPointIndex { get; }
    public static string DescriptionAttributeMapAreas { get; }
    public static string DescriptionAttributeTickMark_TickMark { get; }
    public static string DescriptionAttributeLegendCellColumn_LegendCellColumn { get; }
    public static string DescriptionAttributeLegendItem_LegendItem { get; }
    public static string DescriptionAttributeTitleAlignment { get; }
    public static string DescriptionAttributeStripLine_TitleAlignment { get; }
    public static string DescriptionAttributeLegend_TitleAlignment { get; }
    public static string DescriptionAttributeElementPosition_ElementPosition { get; }
    public static string DescriptionAttributeCustomLabel_To { get; }
    public static string DescriptionAttributeLabel_FontAngle { get; }
    public static string DescriptionAttributeIntervalAutoMode { get; }
    public static string DescriptionAttributeStripLine_StripWidth { get; }
    public static string DescriptionAttributeCursor_UserEnabled { get; }
    public static string DescriptionAttributeBorderSkin_FrameBorderWidth { get; }
    public static string DescriptionAttributeAxisScaleSegment_Position { get; }
    public static string DescriptionAttributeAxisDataView_Position { get; }
    public static string DescriptionAttributeTitle_Position { get; }
    public static string DescriptionAttributeLegend_Position { get; }
    public static string DescriptionAttributeChartArea_Position { get; }
    public static string DescriptionAttributeCursor_Position { get; }
    public static string DescriptionAttributeSubAxis_ParentAxis { get; }
    public static string DescriptionAttributeAnnotationCollectionEditor_AnnotationCollectionEditor { get; }
    public static string DescriptionAttributeBottom { get; }
    public static string DescriptionAttributeMargins_Bottom { get; }
    public static string DescriptionAttributeAxisScaleBreakStyle_AxisScaleBreakStyle { get; }
    public static string DescriptionAttributeLegend_HeaderSeparator { get; }
    public static string DescriptionAttributeChartArea3DStyle_PointDepth { get; }
    public static string DescriptionAttributeAnnotationGroup_AnnotationGroup { get; }
    public static string DescriptionAttributeAnnotationPathPointCollection_AnnotationPathPointCollection { get; }
    public static string DescriptionAttributeStripLine_StripWidthType { get; }
    public static string DescriptionAttributeCustomLabel_From { get; }
    public static string DescriptionAttributePoint3D_PointF { get; }
    public static string DescriptionAttributeBorderWidth { get; }
    public static string DescriptionAttributeMarkerBorderWidth { get; }
    public static string DescriptionAttributeCursor_SelectionEnd { get; }
    public static string DescriptionAttributeLineAnnotation_LineAnnotation { get; }
    public static string DescriptionAttributeAnnotationSmartLabels_AnnotationSmartLabels { get; }
    public static string DescriptionAttributeAnnotationGroup_Visible { get; }
    public static string DescriptionAttributeChartArea_Visible { get; }
    public static string DescriptionAttributeTitle_Visible { get; }
    public static string DescriptionAttributeVisible { get; }
    public static string DescriptionAttributeLegendItem_Separator { get; }
    public static string DescriptionAttributeLegendCell_CellType { get; }
    public static string DescriptionAttributeChart_Serializer { get; }
    public static string DescriptionAttributeAxisX { get; }
    public static string DescriptionAttributeChartArea_AxisX { get; }
    public static string DescriptionAttributeImageType { get; }
    public static string DescriptionAttributeCursor_SelectionStart { get; }
    public static string DescriptionAttributeLabelsAutoFit { get; }
    public static string DescriptionAttributeLegendCellColumn_HeaderText { get; }
    public static string DescriptionAttributeMapEnabled { get; }
    public static string DescriptionAttributeAxisDataView_Zoomable { get; }
    public static string DescriptionAttributeDataManager_PaletteCustomColors { get; }
    public static string DescriptionAttributeChart_PaletteCustomColors { get; }
    public static string DescriptionAttributeLegend_ItemColumnSeparator { get; }
    public static string DescriptionAttributeCursorEventArgs_NewSelectionEnd { get; }
    public static string DescriptionAttributeLegendItem_SeriesName { get; }
    public static string DescriptionAttributeChartAreas { get; }
    public static string DescriptionAttributeChartArea_AlignWithChartArea { get; }
    public static string DescriptionAttributeLegend_MaxAutoSize { get; }
    public static string DescriptionAttributeGrid_Grid { get; }
    public static string DescriptionAttributeChartArea_EquallySizedAxesFont { get; }
    public static string DescriptionAttributeChartEvent_CustomizeMapAreas { get; }
    public static string DescriptionAttributeChartArea3DStyle_WallWidth { get; }
    public static string DescriptionAttributeCustomLabel_Row { get; }
    public static string DescriptionAttributeLegend_TitleSeparatorColor { get; }
    public static string DescriptionAttributeChartSerializer_TemplateMode { get; }
    public static string DescriptionAttributeShadowColor { get; }
    public static string DescriptionAttributeAxisScaleBreakStyle_MaxNumberOfBreaks { get; }
    public static string DescriptionAttributeChartEvent_AxisScrollBarClicked { get; }
    public static string DescriptionAttributeAnchorY { get; }
    public static string DescriptionAttributeLegend_AutoFitMinFontSize { get; }
    public static string DescriptionAttributeChartEvent_AnnotationTextChanged { get; }
    public static string DescriptionAttributeChart_Series { get; }
    public static string DescriptionAttributeSeries_Series { get; }
    public static string DescriptionAttributeMapArea_Shape { get; }
    public static string DescriptionAttributeLegend_TextWrapThreshold { get; }
    public static string DescriptionAttributeLabelOutsidePlotAreaStyle_LabelOutsidePlotAreaStyle { get; }
    public static string DescriptionAttributeSubAxes { get; }
    public static string DescriptionAttributeAxisScaleBreakStyle_StartFromZero { get; }
    public static string DescriptionAttributeStartFromZero3 { get; }
    public static string DescriptionAttributeRectangleAnnotation_RectangleAnnotation { get; }
    public static string DescriptionAttributeUrl { get; }
    public static string DescriptionAttributeAxisScaleBreakStyle_BreakLineType { get; }
    public static string DescriptionAttributeChartEvent_CursorPositionChanged { get; }
    public static string DescriptionAttributeChartSerializer_SerializableContent { get; }
    public static string DescriptionAttributeCalloutAnnotation_CalloutStyle { get; }
    public static string DescriptionAttributeCalloutStyle3 { get; }
    public static string DescriptionAttributeCalloutStyle_CalloutStyle { get; }
    public static string DescriptionAttributeTitle_Docking { get; }
    public static string DescriptionAttributeLegend_Docking { get; }
    public static string DescriptionAttributeAnnotationGroup_AllowAnchorMoving { get; }
    public static string DescriptionAttributeAllowAnchorMoving3 { get; }
    public static string DescriptionAttributeTitleColor { get; }
    public static string DescriptionAttributeStripLine_TitleColor { get; }
    public static string DescriptionAttributeLegend_TitleColor { get; }
    public static string DescriptionAttributeTitles { get; }
    public static string DescriptionAttributePolygonAnnotation_PolygonAnnotation { get; }
    public static string DescriptionAttributeLabel_IntervalType { get; }
    public static string DescriptionAttributeIntervalType3 { get; }
    public static string DescriptionAttributeIntervalType4 { get; }
    public static string DescriptionAttributeStripLine_IntervalType { get; }
    public static string DescriptionAttributeAxisScaleSegment_IntervalType { get; }
    public static string DescriptionAttributeCursor_IntervalType { get; }
    public static string DescriptionAttributeLegendItem_SeparatorColor { get; }
    public static string DescriptionAttributeSeries_YValuesPerPoint { get; }
    public static string DescriptionAttributeChartEvent_PrePaint { get; }
    public static string DescriptionAttributeLegendUrl { get; }
    public static string DescriptionAttributeCustomLabel_ImageUrl { get; }
    public static string DescriptionAttributeLabel_Format { get; }
    public static string DescriptionAttributeChartSerializer_Format { get; }
    public static string DescriptionAttributeStripLines { get; }
    public static string DescriptionAttributeChart_ViewStateData { get; }
    public static string DescriptionAttributeTitle_DockOffset { get; }
    public static string DescriptionAttributeAnchorDataPoint { get; }
    public static string DescriptionAttributeLabelFormat { get; }
    public static string DescriptionAttributeSuppressExceptions { get; }
    public static string DescriptionAttributeSeries_EmptyPointStyle { get; }
    public static string DescriptionAttributeCustomAttributes { get; }
    public static string DescriptionAttributeLegendCellCollection_LegendCellCollection { get; }
    public static string DescriptionAttributeCustomLabelsCollection_CustomLabelsCollection { get; }
    public static string DescriptionAttributeCustomLabel_MarkColor { get; }
    public static string DescriptionAttributePalette { get; }
    public static string DescriptionAttributeScaleBreakStyle { get; }
    public static string DescriptionAttributeChart_ImageUrl { get; }
    public static string DescriptionAttributeLegend_InterlacedRowsColor { get; }
    public static string DescriptionAttributeLegendCellColumn_ColumnType { get; }
    public static string DescriptionAttributeChartArea_AlignOrientation { get; }
    public static string DescriptionAttributeChart_SoftShadows { get; }
    public static string DescriptionAttributeSoftShadows3 { get; }
    public static string DescriptionAttributePrintingManager_PrintDocument { get; }
    public static string DescriptionAttributeMinimum { get; }
    public static string DescriptionAttributeAxisScaleSegment_ScaleMaximum { get; }
    public static string DescriptionAttributeScrollBarEventArgs_MousePositionX { get; }
    public static string DescriptionAttributeLabel_TruncatedLabels { get; }
    public static string DescriptionAttributeCustomLabel_GridTicks { get; }
    public static string DescriptionAttributeImageAnnotation_Alignment { get; }
    public static string DescriptionAttributeLegendCellColumn_Alignment { get; }
    public static string DescriptionAttributeTitle_Alignment { get; }
    public static string DescriptionAttributeLegendCell_Alignment { get; }
    public static string DescriptionAttributeLegend_Alignment { get; }
    public static string DescriptionAttributeAlignment { get; }
    public static string DescriptionAttributeChart_OnCustomizeMapAreas { get; }
    public static string DescriptionAttributeSubAxis_LocationOffset { get; }
    public static string DescriptionAttributeLegendCellColumn_MinimumWidth { get; }
    public static string DescriptionAttributeSelectionPointsStyle { get; }
    public static string DescriptionAttributeAxisY { get; }
    public static string DescriptionAttributeChartArea_AxisY { get; }
    public static string DescriptionAttributeTextFont { get; }
    public static string DescriptionAttributeTextFont4 { get; }
    public static string DescriptionAttributeAxisDataView_SizeType { get; }
    public static string DescriptionAttributeMinMovingDistance { get; }
    public static string DescriptionAttributeChartArea_CursorX { get; }
    public static string DescriptionAttributeAxisDataView_SmallScrollMinSize { get; }
    public static string DescriptionAttributeAxisDataView_SmallScrollMinSizeType { get; }
    public static string DescriptionAttributeAxisScrollBar_ButtonColor { get; }
    public static string DescriptionAttributeArea3DStyle { get; }
    public static string DescriptionAttributeChart { get; }
    public static string DescriptionAttributeChart_Chart { get; }
    public static string DescriptionAttributeBorderSkin_PageColor { get; }
    public static string DescriptionAttributeDataPoint_DataPoint { get; }
    public static string DescriptionAttributeChartArea3DStyle_Light { get; }
    public static string DescriptionAttributeDataPointCustomProperties_DataPointCustomProperties { get; }
    public static string DescriptionAttributeLegend_AutoFitText { get; }
    public static string DescriptionAttributeAllowTextEditing { get; }
    public static string DescriptionAttributeCustomLabel_Text { get; }
    public static string DescriptionAttributeLegendCell_Text { get; }
    public static string DescriptionAttributeText { get; }
    public static string DescriptionAttributeTitle_Text { get; }
    public static string DescriptionAttributeLegendCellColumn_Text { get; }
    public static string DescriptionAttributeToolTipEventArgs_Text { get; }
    public static string DescriptionAttributeMultiline { get; }
    public static string DescriptionAttributeTextAnnotation_TextAnnotation { get; }
    public static string DescriptionAttributeAnnotationGroup_ClipToChartArea { get; }
    public static string DescriptionAttributeSeries_YValueType { get; }
    public static string DescriptionAttributeInternalIntervalType { get; }
    public static string DescriptionAttributeCalloutAnnotation_CalloutAnchorCap { get; }
    public static string DescriptionAttributeLogarithmic { get; }
    public static string DescriptionAttributeLegend_ItemColumnSpacing { get; }
    public static string DescriptionAttributeMarksNextToAxis { get; }
    public static string DescriptionAttributeChartEvent_SelectionRangeChanged { get; }
    public static string DescriptionAttributeDataPointCollection_DataPointCollection { get; }
    public static string DescriptionAttributeHorizontalLineAnnotation_HorizontalLineAnnotation { get; }
    public static string DescriptionAttributeLegendCellColumn_HeaderColor { get; }
    public static string DescriptionAttributeLegendCell_LegendCell { get; }
    public static string DescriptionAttributeChartImageDescriptionUrl { get; }
    public static string DescriptionAttributeChartImageAlternateText { get; }
    public static string DescriptionAttributePostBackValue { get; }
    public static string DescriptionAttributeTextStyle { get; }
    public static string DescriptionAttributeIsMapAreaAttributesEncoded { get; }
    public static string CategoryAttributeCellColumns { get; }
    public static string CategoryAttributeAxis { get; }
    public static string CategoryAttributeEditing { get; }
    public static string CategoryAttributeSize { get; }
    public static string CategoryAttributePosition { get; }
    public static string CategoryAttributeViewState { get; }
    public static string CategoryAttributeInterval { get; }
    public static string CategoryAttributeAppearance { get; }
    public static string CategoryAttributeDocking { get; }
    public static string CategoryAttributeDataSource { get; }
    public static string CategoryAttributeAxisView { get; }
    public static string CategoryAttributeLayout { get; }
    public static string CategoryAttribute3D { get; }
    public static string CategoryAttributeData { get; }
    public static string CategoryAttributeTitle { get; }
    public static string CategoryAttributeToolTips { get; }
    public static string CategoryAttributeLabels { get; }
    public static string CategoryAttributeGridTickMarks { get; }
    public static string CategoryAttributeLabelAppearance { get; }
    public static string CategoryAttributeHeader { get; }
    public static string CategoryAttributeAxes { get; }
    public static string CategoryAttributeImage { get; }
    public static string CategoryAttributeEmptyPoints { get; }
    public static string CategoryAttributeAlignment { get; }
    public static string CategoryAttributeAnnotation { get; }
    public static string CategoryAttributeMarker { get; }
    public static string CategoryAttributeChart { get; }
    public static string CategoryAttributeLocation { get; }
    public static string CategoryAttributeToolTip { get; }
    public static string CategoryAttributeMap { get; }
    public static string CategoryAttributeMapArea { get; }
    public static string CategoryAttributeLabel { get; }
    public static string CategoryAttributeShape { get; }
    public static string CategoryAttributeMisc { get; }
    public static string CategoryAttributeSerializer { get; }
    public static string CategoryAttributeSubAxes { get; }
    public static string CategoryAttributeSeriesItems { get; }
    public static string CategoryAttributeDataView { get; }
    public static string CategoryAttributeCharttitle { get; }
    public static string CategoryAttributeLegend { get; }
    public static string CategoryAttributeAction { get; }
    public static string CategoryAttributeScale { get; }
    public static string CategoryAttributeAnnotations { get; }
    public static string CategoryAttributeAnchor { get; }
    public static string CategoryAttributeBehavior { get; }
    public static string CategoryAttributeCursor { get; }
    public static string CategoryAttributeAnchorAxes { get; }
    public static string CategoryAttributeAccessibility { get; }
    public static string FormatErrorString { get; }
    public static string ExceptionNameIsEmpty { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_ExceptionElementPositionConverter();
    public static string get_ExceptionInvalidServiceContainer();
    public static string get_ExceptionImageLoaderInvalidServiceContainer();
    public static string get_ExceptionImageMapAddedHasWrongType();
    public static string get_ExceptionImageMapInsertedHasWrongType();
    public static string get_ExceptionImageMapCircleShapeInvalid();
    public static string get_ExceptionImageMapRectangleShapeInvalid();
    public static string get_ExceptionImageMapPolygonShapeInvalid();
    public static string get_ExceptionAnnotationNameIsEmpty();
    public static string get_ExceptionAnnotationPathAddLineAsSegmentsInvalid();
    public static string get_ExceptionAnnotationLineWidthIsNegative();
    public static string get_ExceptionAnnotationAnchorOffsetInvalid();
    public static string get_ExceptionAnnotationGroupedAnchorDataPointMustBeEmpty();
    public static string get_ExceptionAnnotationGroupedUnableToStartPlacement();
    public static string get_ExceptionAnnotationNotInCollection();
    public static string get_ExceptionAnnotationGroupedAxisMustBeEmpty();
    public static string get_ExceptionAnnotationArrowSizeIsZero();
    public static string get_ExceptionAnnotationArrowSizeMustBeLessThen100();
    public static string get_ExceptionAnnotationArrowStyleUnknown();
    public static string get_ExceptionInvalidIndexerArgumentType();
    public static string get_ExceptionTitleNameIsEmpty();
    public static string get_ExceptionDataSeriesObjectRequired();
    public static string get_ExceptionDataSeriesNameIsEmpty();
    public static string get_ExceptionDataSeriesYValuesPerPointIsZero();
    public static string get_ExceptionDataSeriesYValueNumberInvalid();
    public static string get_ExceptionSeriesNameIsEmpty();
    public static string get_ExceptionEditorChartTypeRegistryServiceInaccessible();
    public static string get_ExceptionEditorMultipleSeriesEditiingUnsupported();
    public static string get_ExceptionEditorContectInstantsIsNotChartObject();
    public static string get_ExceptionEditorUITypeEditorInapplicable();
    public static string get_ExceptionEditorUITypeEditorInt32ApplicableOnly();
    public static string get_ExceptionRectangleConverterStringFormatInvalid();
    public static string get_ExceptionChartAreaObjectRequired();
    public static string get_ExceptionChartAreaInsertedHasWrongType();
    public static string get_ExceptionChartAreaAlreadyExistsShort();
    public static string get_ExceptionChartAreaNameIsEmpty();
    public static string get_ExceptionChartArea3DPerspectiveInvalid();
    public static string get_ExceptionChartArea3DInclinationInvalid();
    public static string get_ExceptionChartArea3DRotationInvalid();
    public static string get_ExceptionChartArea3DWallWidthInvalid();
    public static string get_ExceptionChartArea3DPointsDepthInvalid();
    public static string get_ExceptionChartArea3DPointsGapInvalid();
    public static string get_ExceptionCursorIntervalOffsetIsNegative();
    public static string get_ExceptionCursorLineWidthIsNegative();
    public static string get_ExceptionGraphicsMarkerStyleUnknown();
    public static string get_ExceptionGraphics3DMarkerStyleUnknown();
    public static string get_ExceptionGraphics3DCoordinatesInvalid();
    public static string get_ExceptionAxisLabelsAutoFitMinFontSizeValueInvalid();
    public static string get_ExceptionAxisLabelRowIndexIsNegative();
    public static string get_ExceptionAxisLabelRowIndexMustBe1Or2();
    public static string get_ExceptionAxisLabelIndexIsNegative();
    public static string get_ExceptionAxisLabelFontAngleInvalid();
    public static string get_ExceptionCustomLabelAddedHasWrongType();
    public static string get_ExceptionCustomLabelInsertedHasWrongType();
    public static string get_ExceptionSmartLabelsDirectionUndefined();
    public static string get_ExceptionSmartLabelsMinMovingDistanceIsNegative();
    public static string get_ExceptionSmartLabelsMaxMovingDistanceIsNegative();
    public static string get_ExceptionStripLineAddedHasWrongType();
    public static string get_ExceptionStripLineWidthIsNegative();
    public static string get_ExceptionAxisWidthIsNegative();
    public static string get_ExceptionAxisDynamicIntervalCalculationFailed();
    public static string get_ExceptionAxisIntervalDecreasingFailed();
    public static string get_ExceptionAxisIntervalIncreasingFailed();
    public static string get_ExceptionAxisLabelsAutoFitMaxFontSizeInvalid();
    public static string get_ExceptionAxisMinimumMaximumInvalid();
    public static string get_ExceptionAxisStackedChartsDataPointsNumberMismatch();
    public static string get_ExceptionAxisSeriesNotAligned();
    public static string get_ExceptionAxisScaleLogarithmBaseInvalid();
    public static string get_ExceptionAxisScalePositionInvalid();
    public static string get_ExceptionAxisScalePositionToValueCallFailed();
    public static string get_ExceptionAxisScaleIntervalIsZero();
    public static string get_ExceptionAxisScaleMinimumMaximumInvalid();
    public static string get_ExceptionAxisScaleIntervalIsLessThen1Year();
    public static string get_ExceptionAxisScaleAutoIntervalInvalid();
    public static string get_ExceptionAxisScaleMinimumValueIsGreaterThenMaximumDataPoint();
    public static string get_ExceptionAxisScaleLogarithmicNegativeValues();
    public static string get_ExceptionChartAreaAxisScaleLogarithmicUnsuitable();
    public static string get_ExceptionChartAreaChartTypesCanNotCombine();
    public static string get_ExceptionChartAreaSeriesNotFound();
    public static string get_ExceptionAxisScaleBreaksNumberInvalid();
    public static string get_ExceptionAxisScaleBreaksCollapsibleSpaceInvalid();
    public static string get_ExceptionAxisScaleBreaksSpacingInvalid();
    public static string get_ExceptionAxisScaleBreaksLineWidthInvalid();
    public static string get_ExceptionAxisScaleSegmentsPositionInvalid();
    public static string get_ExceptionAxisScaleSegmentsSizeInvalid();
    public static string get_ExceptionAxisScaleSegmentsSpacingInvalid();
    public static string get_ExceptionTickMarksIntervalIsZero();
    public static string get_ExceptionTickMarksIntervalIsNegative();
    public static string get_ExceptionScrollBarSizeInvalid();
    public static string get_ExceptionScrollBarZoomResetsNumberInvalid();
    public static string get_ExceptionMarkerStepNegativeValue();
    public static string get_ExceptionTextThresholdIsNegative();
    public static string get_ExceptionNamedImageObjectRequired();
    public static string get_ExceptionNamedImageInsertedHasWrongType();
    public static string get_ExceptionLegendNameIsEmpty();
    public static string get_ExceptionLegendAddedHasWrongType();
    public static string get_ExceptionLegendInsertedHasWrongType();
    public static string get_ExceptionBackSecondaryColorIsTransparent();
    public static string get_ExceptionLegendAutoFitMinFontSizeInvalid();
    public static string get_ExceptionLegendMaximumAutoSizeInvalid();
    public static string get_ExceptionLegendColumnSpacingInvalid();
    public static string get_ExceptionLegendMarkerBorderWidthIsNegative();
    public static string get_ExceptionLegendItemAddedHasWrongType();
    public static string get_ExceptionLegendItemInsertedHasWrongType();
    public static string get_ExceptionLegendColumnIsEmpty();
    public static string get_ExceptionSeriesSymbolSizeIsNegative();
    public static string get_ExceptionMinimumCellWidthIsWrong();
    public static string get_ExceptionMaximumCellWidthIsWrong();
    public static string get_ExceptionLegendCellNameIsEmpty();
    public static string get_ExceptionLegendCellImageSizeIsNegative();
    public static string get_ExceptionLegendCellSeriesSymbolSizeIsNegative();
    public static string get_ExceptionLegendCellSpanIsLessThenOne();
    public static string get_ExceptionMarginTopIsNegative();
    public static string get_ExceptionMarginBottomIsNegative();
    public static string get_ExceptionMarginLeftIsNegative();
    public static string get_ExceptionMarginRightIsNegative();
    public static string get_ExceptionElementPositionArgumentOutOfRange();
    public static string get_ExceptionChartHeightIsNotInPixels();
    public static string get_ExceptionChartWidthIsNotInPixels();
    public static string get_ExceptionChartBorderIsNegative();
    public static string get_ExceptionChartCompressionInvalid();
    public static string get_ExceptionChartDataPointsAlignmentFaild();
    public static string get_ExceptionChartDataPointsAlignmentFaildAxisLabelsInvalid();
    public static string get_ExceptionChartDataPointsInsertionFailedYValuesEmpty();
    public static string get_ExceptionChartTypeHasNoInterface();
    public static string get_ExceptionBorderTypeHasNoInterface();
    public static string get_ExceptionChartSerializerContentFlagUnsupported();
    public static string get_ExceptionChartSerializerContentStringFormatInvalid();
    public static string get_ExceptionChartSerializerClassNameUndefined();
    public static string get_ExceptionChartSerializerPropertyNameUndefined();
    public static string get_ExceptionChartSerializerWriterObjectInvalid();
    public static string get_ExceptionChartSerializerReaderObjectInvalid();
    public static string get_ExceptionChartSerializerDestinationObjectInvalid();
    public static string get_ExceptionChartSerializerSourceObjectInvalid();
    public static string get_ExceptionChartSerializerBinaryIgnoreUnknownAttributesUnsupported();
    public static string get_ExceptionChartSerializerBinaryFromatInvalid();
    public static string get_ExceptionChartSerializerPropertyNotFound();
    public static string get_ExceptionDataManipulatorPointCountIsZero();
    public static string get_ExceptionDataManipulatorIndexUndefined();
    public static string get_ExceptionDataManipulatorIndexFormatInvalid();
    public static string get_ExceptionDataManipulatorGroupedSeriesNotSorted();
    public static string get_ExceptionDataManipulatorGroupingFormulaUndefined();
    public static string get_ExceptionDataManipulatorGroupingFormulaUnsupported();
    public static string get_ExceptionDataManipulatorGroupingInputSeriesUndefined();
    public static string get_ExceptionDataManipulatorGroupingInputOutputSeriesNumberMismatch();
    public static string get_ExceptionDataBindYValuesToString();
    public static string get_ExceptionDataBindXValuesToString();
    public static string get_ExceptionDataBindSeriesToString();
    public static string get_ExceptionDataBindSeriesGroupByParameterIsEmpty();
    public static string get_ExceptionImageUrlIsEmpty();
    public static string get_ExceptionImageUrlInvalidFormatters();
    public static string get_ExceptionImageUrlInvalidFormat();
    public static string get_ExceptionImageUrlMissedFormatter();
    public static string get_ExceptionDataManager100StackedSeriesPointsNumeberMismatch();
    public static string get_ExceptionFormulaModuleHasNoInterface();
    public static string get_ExceptionDataPointConverterInvalidSorting();
    public static string get_ExceptionDataPointConverterWrongTypes();
    public static string get_ExceptionDataPointInsertionXValuesQtyIsLessYValues();
    public static string get_ExceptionDataPointValueNameInvalid();
    public static string get_ExceptionDataPointValueNameYIndexOutOfRange();
    public static string get_ExceptionDataPointValueNameYIndexIsNotPositive();
    public static string get_ExceptionDataPointInsertionNoDataSource();
    public static string get_ExceptionDataPointBindingYValueNotSpecified();
    public static string get_ExceptionDataPointInsertionYValueNotSpecified();
    public static string get_ExceptionAttributeUnableToDelete();
    public static string get_ExceptionAttributeNameIsEmpty();
    public static string get_ExceptionAttributeInvalidFormat();
    public static string get_ExceptionAttributeDrawSideBySideInvalid();
    public static string get_ExceptionLabelBorderIsNotPositive();
    public static string get_ExceptionBorderWidthIsNotPositive();
    public static string get_ExceptionAngleRangeInvalid();
    public static string get_ExceptionDataPointYValueStringFormat();
    public static string get_ExceptionParameterFormatInvalid();
    public static string get_ExceptionStatisticalAnalysesInvalidAlphaValue();
    public static string get_ExceptionStatisticalAnalysesInvalidProbabilityValue();
    public static string get_ExceptionStatisticalAnalysesInvalidDegreeOfFreedom();
    public static string get_ExceptionStatisticalAnalysesNegativeMeanDifference();
    public static string get_ExceptionStatisticalAnalysesInvalidSeriesNumber();
    public static string get_ExceptionStatisticalAnalysesInvalidMeanDifference();
    public static string get_ExceptionStatisticalAnalysesNotEnoughDataPoints();
    public static string get_ExceptionStatisticalAnalysesInvalidVariance();
    public static string get_ExceptionStatisticalAnalysesInvalidTValue();
    public static string get_ExceptionStatisticalAnalysesGammaBetaNegativeParameters();
    public static string get_ExceptionStatisticalAnalysesInvalidZValue();
    public static string get_ExceptionStatisticalAnalysesZeroVariance();
    public static string get_ExceptionStatisticalAnalysesNotEnoughInputSeries();
    public static string get_ExceptionStatisticalAnalysesInvalidVariableRanges();
    public static string get_ExceptionStatisticalAnalysesStudentsInvalidTValue();
    public static string get_ExceptionStatisticalAnalysesStudentsNegativeFreedomDegree();
    public static string get_ExceptionStatisticalAnalysesNormalInvalidProbabilityValue();
    public static string get_ExceptionStatisticalAnalysesInvalidTailedParameter();
    public static string get_ExceptionStatisticalAnalysesInvalidInputParameter();
    public static string get_ExceptionStatisticalAnalysesIncompleteBetaFunction();
    public static string get_ExceptionStatisticalAnalysesInvalidAnovaTest();
    public static string get_ExceptionStatisticalAnalysesCovariance();
    public static string get_ExceptionStatisticalAnalysesInvalidMedianConditions();
    public static string get_ExceptionStatisticalAnalysesInvalidMeanConditions();
    public static string get_ExceptionStatisticalAnalysesInvalidVarianceConditions();
    public static string get_ExceptionPeriodParameterIsNegative();
    public static string get_ExceptionPeriodAverageParameterIsNegative();
    public static string get_ExceptionPeriodShortParameterIsNegative();
    public static string get_ExceptionPeriodLongParameterIsNegative();
    public static string get_ExceptionIndicatorsDeviationMissing();
    public static string get_ExceptionIndicatorsLongPeriodLessThenShortPeriod();
    public static string get_ExceptionOscillatorObjectInvalidPeriod();
    public static string get_ExceptionOscillatorNegativeSignalPeriod();
    public static string get_ExceptionOscillatorNegativePeriodParameter();
    public static string get_ExceptionVolumeIndicatorStartValueMissing();
    public static string get_ExceptionPriceIndicatorsShiftParameterMissing();
    public static string get_ExceptionPriceIndicatorsSameYNumber();
    public static string get_ExceptionPriceIndicatorsSameXYNumber();
    public static string get_ExceptionPriceIndicatorsPeriodMissing();
    public static string get_ExceptionPriceIndicatorsNotEnoughPoints();
    public static string get_ExceptionPriceIndicatorsFormulaRequiresOneArray();
    public static string get_ExceptionPriceIndicatorsFormulaRequiresTwoArrays();
    public static string get_ExceptionPriceIndicatorsFormulaRequiresThreeArrays();
    public static string get_ExceptionPriceIndicatorsFormulaRequiresFourArrays();
    public static string get_ExceptionObjectReferenceIsNull();
    public static string get_ExceptionThreeLineBreakCanNotCobine();
    public static string get_ExceptionThreeLineBreakNullReference();
    public static string get_ExceptionThreeLineBreakUsedYValueOutOfRange();
    public static string get_ExceptionThreeLineBreakNumberOfLinesInBreakFormatInvalid();
    public static string get_ExceptionThreeLineBreakUpBrickColorInvalid();
    public static string get_ExceptionThreeLineBreakUsedYValueInvalid();
    public static string get_ExceptionThreeLineBreakNumberOfLinesInBreakValueInvalid();
    public static string get_ExceptionRenkoCanNotCobine();
    public static string get_ExceptionRenkoNullReference();
    public static string get_ExceptionRenkoUsedYValueOutOfRange();
    public static string get_ExceptionRenkoBoxSizeFormatInvalid();
    public static string get_ExceptionRenkoUpBrickColorInvalid();
    public static string get_ExceptionRenkoUsedYValueFormatInvalid();
    public static string get_ExceptionPieIntervalsInvalid();
    public static string get_ExceptionPieUnassignedFrontBackPoints();
    public static string get_ExceptionPiePointOrderInvalid();
    public static string get_ExceptionPieHorizontalLineSizeInvalid();
    public static string get_ExceptionPieRadialLineSizeInvalid();
    public static string get_ExceptionPie3DLabelLineSizeInvalid();
    public static string get_ExceptionPieRadiusInvalid();
    public static string get_ExceptionPieMinimumRelativePieSizeInvalid();
    public static string get_ExceptionPieOrderOperationInvalid();
    public static string get_ExceptionPieIntervalsOverlapping();
    public static string get_ExceptionDoughnutNullReference();
    public static string get_ExceptionDoughnutThresholdInvalid();
    public static string get_ExceptionDoughnutCollectedThresholdUsePercentInvalid();
    public static string get_ExceptionDoughnutCollectedColorInvalidFormat();
    public static string get_ExceptionDoughnutCollectedThresholdInvalidFormat();
    public static string get_ExceptionDoughnutCollectedThresholdInvalidRange();
    public static string get_ExceptionPointAndFigureUpBrickColorInvalidFormat();
    public static string get_ExceptionPointAndFigureCanNotCombine();
    public static string get_ExceptionPointAndFigureNullReference();
    public static string get_ExceptionPointAndFigureUsedYValueHighOutOfRange();
    public static string get_ExceptionPointAndFigureUsedYValueLowOutOfrange();
    public static string get_ExceptionPointAndFigureReversalAmountInvalidFormat();
    public static string get_ExceptionPointAndFigureUsedYValueHighInvalidFormat();
    public static string get_ExceptionPointAndFigureUsedYValueLowInvalidFormat();
    public static string get_ExceptionFastPointMarkerStyleUnknown();
    public static string get_ExceptionFunnelAngleRangeInvalid();
    public static string get_ExceptionFunnelCanNotCombine();
    public static string get_ExceptionFunnelNeckHeightInvalid();
    public static string get_ExceptionFunnelNeckWidthInvalid();
    public static string get_ExceptionKagiNullReference();
    public static string get_ExceptionKagiCanNotCombine();
    public static string get_ExceptionStackedAreaChartSeriesDataPointsNumberMismatch();
    public static string get_Exception3DPieLabelsIndexInvalid();
    public static string get_Exception3DChartPointsXValuesUnsorted();
    public static string get_ExceptionFunnelMinimumPointHeightAttributeInvalid();
    public static string get_ExceptionErrorBarParameterUndefined();
    public static string get_Exception3DSplineY1ValueIsLessThenY2();
    public static string get_ExceptionCustomAttributeDefaultValueTypeInvalid();
    public static string get_ExceptionFormulaDataItemsNumberMismatch();
    public static string get_ExceptionFormulaDataItemsNumberMismatch2();
    public static string get_ExceptionFormulaDataOutputSeriesNumberYValuesIncorrect();
    public static string get_ExceptionFormulaYIndexInvalid();
    public static string get_ExceptionFormulaXValuesNotAligned();
    public static string get_ExceptionFormulaInputOutputSeriesMismatch();
    public static string get_ExceptionForecastingDegreeInvalid();
    public static string get_ExceptionForecastingExponentialRegressionHasZeroYValues();
    public static string get_ExceptionForecastingPowerRegressionHasZeroYValues();
    public static string get_ExceptionBorderWidthIsNegative();
    public static string get_ExceptionBorderWidthIsZero();
    public static string get_ExceptionLegendBorderWidthIsNegative();
    public static string get_ExceptionTitleBorderWidthIsNegative();
    public static string get_ExceptionMatrix3DNotinitialized();
    public static string get_ExceptionPaletteIsEmpty();
    public static string get_ExceptionChartPreviewNotAvailable();
    public static string get_ExceptionChartPreviewNotAvailableShort();
    public static string get_ExceptionChartOutOfLimits();
    public static string get_ExceptionHttpHandlerCanNotSave();
    public static string get_ExceptionHttpHandlerValueInvalid();
    public static string get_ExceptionHttpHandlerTimeoutParameterInvalid();
    public static string get_ExceptionHttpHandlerUrlMissing();
    public static string get_ExceptionHttpHandlerUrlInvalid();
    public static string get_ExceptionHttpHandlerInvalidLocation();
    public static string get_ExceptionHttpHandlerImageNotFound();
    public static string get_DescriptionCustomAttributeEmptyPointValue();
    public static string get_DescriptionCustomAttributePieDonutExploded();
    public static string get_DescriptionCustomAttributeProportionalSymbols();
    public static string get_DescriptionCustomAttributeDrawSideBySide();
    public static string get_DescriptionCustomAttributeShowMarkerLines();
    public static string get_DescriptionCustomAttributeShowOpenClose();
    public static string get_DescriptionCustomAttributeBoxPlotShowAverage();
    public static string get_DescriptionCustomAttributeBubbleUseSizeForLabel();
    public static string get_DescriptionCustomAttributeBoxPlotShowMedian();
    public static string get_DescriptionCustomAttributeBoxPlotShowUnusualValues();
    public static string get_DescriptionCustomAttributeBoxPlotSeries();
    public static string get_DescriptionCustomAttributePieStartAngle();
    public static string get_DescriptionCustomAttributeLabelStyle();
    public static string get_DescriptionCustomAttributeFunnelLabelStyle();
    public static string get_DescriptionCustomAttributeFunnelStyle();
    public static string get_DescriptionCustomAttributePolarDrawingStyle();
    public static string get_DescriptionCustomAttributePyramidLabelStyle();
    public static string get_DescriptionCustomAttributeRadarDrawingStyle();
    public static string get_DescriptionCustomAttributeBoxSize();
    public static string get_DescriptionCustomAttributeCollectedColor();
    public static string get_DescriptionCustomAttributeCollectedLabel();
    public static string get_DescriptionCustomAttributeCollectedLegendText();
    public static string get_DescriptionCustomAttributeCollectedLegendDefaultText();
    public static string get_DescriptionCustomAttributeCollectedLabelDefaultText();
    public static string get_DescriptionCustomAttributeCollectedToolTip();
    public static string get_DescriptionCustomAttributePyramidValueType();
    public static string get_DescriptionCustomAttribute_3DLabelLineSize();
    public static string get_DescriptionCustomAttributeFunnel3DRotationAngle();
    public static string get_DescriptionCustomAttributePyramid3DRotationAngle();
    public static string get_DescriptionCustomAttributePixelPointDepth();
    public static string get_DescriptionCustomAttributePixelPointGapDepth();
    public static string get_DescriptionCustomAttributeErrorBarCenterMarkerStyle();
    public static string get_DescriptionCustomAttributePointFigureBoxSize();
    public static string get_DescriptionCustomAttributeBubbleScaleMax();
    public static string get_DescriptionCustomAttributeBubbleScaleMin();
    public static string get_DescriptionCustomAttributeCollectedThreshold();
    public static string get_DescriptionCustomAttributePieLineColor();
    public static string get_DescriptionCustomAttributeCalloutLineColor();
    public static string get_DescriptionCustomAttributePieLabelStyle();
    public static string get_DescriptionCustomAttributeFunnel3DDrawingStyle();
    public static string get_DescriptionCustomAttributePyramid3DDrawingStyle();
    public static string get_DescriptionCustomAttributeDrawingStyle();
    public static string get_DescriptionCustomAttributePieDrawingStyle();
    public static string get_DescriptionCustomAttributeCollectedSliceExploded();
    public static string get_DescriptionCustomAttributeCollectedThresholdUsePercent();
    public static string get_DescriptionCustomAttributeFunnelNeckHeight();
    public static string get_DescriptionCustomAttributeFunnelNeckWidth();
    public static string get_DescriptionCustomAttributePyramidPointGap();
    public static string get_DescriptionCustomAttributeFunnelPointGap();
    public static string get_DescriptionCustomAttributeLabelsHorizontalLineSize();
    public static string get_DescriptionCustomAttributeDoughnutRadius();
    public static string get_DescriptionCustomAttributePolarCircularLabelsStyle();
    public static string get_DescriptionCustomAttributeRadarCircularLabelsStyle();
    public static string get_DescriptionCustomAttributeOpenCloseStyle();
    public static string get_DescriptionCustomAttributeBubbleMaxSize();
    public static string get_DescriptionCustomAttributeMaxPixelPointWidth();
    public static string get_DescriptionCustomAttributePyramidMinPointHeight();
    public static string get_DescriptionCustomAttributeFunnelMinPointHeight();
    public static string get_DescriptionCustomAttributeMinimumRelativePieSize();
    public static string get_DescriptionCustomAttributeMinPixelPointWidth();
    public static string get_DescriptionCustomAttributeErrorBarSeries();
    public static string get_DescriptionCustomAttributeNumberOfLinesInBreak();
    public static string get_DescriptionCustomAttributePyramidOutsideLabelPlacement();
    public static string get_DescriptionCustomAttributeFunnelOutsideLabelPlacement();
    public static string get_DescriptionCustomAttributeBoxPlotPercentile();
    public static string get_DescriptionCustomAttributeBoxPlotWhiskerPercentile();
    public static string get_DescriptionCustomAttributeBarLabelStyle();
    public static string get_DescriptionCustomAttributeLabelsRadialLineSize();
    public static string get_DescriptionCustomAttributePointWidth();
    public static string get_DescriptionCustomAttributeReversalAmount();
    public static string get_DescriptionCustomAttributePolarAreaDrawingStyle();
    public static string get_DescriptionCustomAttributeRadarAreaDrawingStyle();
    public static string get_DescriptionCustomAttributeStackedGroupName();
    public static string get_DescriptionCustomAttributeLineTension();
    public static string get_DescriptionCustomAttributeCandlePriceUpColor();
    public static string get_DescriptionCustomAttributeBarsPriceUpColor();
    public static string get_DescriptionCustomAttributePriceDownColor();
    public static string get_DescriptionCustomAttributeUsedYValueHigh();
    public static string get_DescriptionCustomAttributeUsedYValueLow();
    public static string get_DescriptionCustomAttributeRenkoUsedYValue();
    public static string get_DescriptionCustomAttributeThreeLineBreakUsedYValue();
    public static string get_DescriptionCustomAttributePyramidInsideLabelAlignment();
    public static string get_DescriptionCustomAttributeFunnelInsideLabelAlignment();
    public static string get_DescriptionCustomAttributeErrorBarStyle();
    public static string get_DescriptionCustomAttributePixelPointWidth();
    public static string get_DescriptionCustomAttributeLabelValueType();
    public static string get_DescriptionCustomAttributeUsedYValue();
    public static string get_DescriptionCustomAttributeKagiReversalAmount();
    public static string get_DescriptionCustomAttributeErrorBarType();
    public static string get_DescriptionAttributeChart_ImageStorageMode();
    public static string get_DescriptionKeyWordAverageYValues();
    public static string get_DescriptionKeyWordAxisLabelDataPoint();
    public static string get_DescriptionKeyWordIndexDataPoint();
    public static string get_DescriptionKeyWordLabelDataPoint();
    public static string get_DescriptionKeyWordYValuePercentTotal();
    public static string get_DescriptionKeyWordIndexDataPoint2();
    public static string get_DescriptionKeyWordLegendText();
    public static string get_DescriptionKeyWordMaximumYValues();
    public static string get_DescriptionKeyWordMinimumYValues();
    public static string get_DescriptionKeyWordSeriesName();
    public static string get_DescriptionKeyWordTotalYValues();
    public static string get_DescriptionKeyWordXValue();
    public static string get_DescriptionKeyWordFirstPointYValue();
    public static string get_DescriptionKeyWordLastPointYValue();
    public static string get_DescriptionKeyWordYValue();
    public static string get_DescriptionKeyWordNameIndexDataPoint();
    public static string get_DescriptionKeyWordNameXValue();
    public static string get_DescriptionKeyWordNameYValue();
    public static string get_DescriptionKeyWordNameTotalYValues();
    public static string get_DescriptionKeyWordNameYValuePercentTotal();
    public static string get_DescriptionKeyWordNameIndexTheDataPoint();
    public static string get_DescriptionKeyWordNameLabelDataPoint();
    public static string get_DescriptionKeyWordNameAxisLabelDataPoint();
    public static string get_DescriptionKeyWordNameLegendText();
    public static string get_DescriptionKeyWordNameSeriesName();
    public static string get_DescriptionKeyWordNameAverageYValues();
    public static string get_DescriptionKeyWordNameMaximumYValues();
    public static string get_DescriptionKeyWordNameMinimumYValues();
    public static string get_DescriptionKeyWordNameLastPointYValue();
    public static string get_DescriptionKeyWordNameFirstPointYValue();
    public static string get_DescriptionNumberFormatTypeCurrency();
    public static string get_DescriptionNumberFormatTypeDecimal();
    public static string get_DescriptionNumberFormatTypeScientific();
    public static string get_DescriptionNumberFormatTypeFixedPoint();
    public static string get_DescriptionNumberFormatTypeGeneral();
    public static string get_DescriptionNumberFormatTypeNumber();
    public static string get_DescriptionNumberFormatTypePercent();
    public static string get_DescriptionTypeNone();
    public static string get_DescriptionTypeCustom();
    public static string get_DescriptionTypeEmpty();
    public static string get_DescriptionTypePoint();
    public static string get_LabelKeyFormat();
    public static string get_LabelKeyCustomFormat();
    public static string get_LabelStringWithKeywords();
    public static string get_LabelEditKeyword();
    public static string get_LabelInsertNewKeyword();
    public static string get_LabelStringKeywordsEditor();
    public static string get_LabelKeywordEditor();
    public static string get_LabelDescription();
    public static string get_LabelFormatKeySample();
    public static string get_LabelKeyYValueIndex();
    public static string get_LabelKeyPrecision();
    public static string get_LabelKeyKeywords();
    public static string get_LabelValueFormatting();
    public static string get_LabelButtonOk();
    public static string get_LabelButtonCancel();
    public static string get_DescriptionToolTipCustomFormatCharacters();
    public static string get_DesciptionCustomLabelEditorTitle();
    public static string get_DesciptionCustomLabelFormatInvalid();
    public static string get_LabelStatisticalSumOfSquaresBetweenGroups();
    public static string get_LabelStatisticalSumOfSquaresWithinGroups();
    public static string get_LabelStatisticalSumOfSquaresTotal();
    public static string get_LabelStatisticalDegreesOfFreedomBetweenGroups();
    public static string get_LabelStatisticalDegreesOfFreedomWithinGroups();
    public static string get_LabelStatisticalDegreesOfFreedomTotal();
    public static string get_LabelStatisticalMeanSquareVarianceBetweenGroups();
    public static string get_LabelStatisticalMeanSquareVarianceWithinGroups();
    public static string get_LabelStatisticalFRatio();
    public static string get_LabelStatisticalFCriteria();
    public static string get_LabelStatisticalCorrelation();
    public static string get_LabelStatisticalCovariance();
    public static string get_LabelStatisticalProbability();
    public static string get_LabelStatisticalAverage();
    public static string get_LabelStatisticalVariance();
    public static string get_LabelStatisticalMedian();
    public static string get_LabelStatisticalBetaFunction();
    public static string get_LabelStatisticalGammaFunction();
    public static string get_LabelStatisticalTheFirstGroupMean();
    public static string get_LabelStatisticalTheSecondGroupMean();
    public static string get_LabelStatisticalTheFirstGroupVariance();
    public static string get_LabelStatisticalTheSecondGroupVariance();
    public static string get_LabelStatisticalFValue();
    public static string get_LabelStatisticalFCriticalValueOneTail();
    public static string get_LabelStatisticalZValue();
    public static string get_LabelStatisticalZCriticalValueOneTail();
    public static string get_LabelStatisticalZCriticalValueTwoTail();
    public static string get_LabelStatisticalPZLessEqualSmallZOneTail();
    public static string get_LabelStatisticalPZLessEqualSmallZTwoTail();
    public static string get_LabelStatisticalPFLessEqualSmallFOneTail();
    public static string get_LabelStatisticalTValue();
    public static string get_LabelStatisticalDegreeOfFreedom();
    public static string get_LabelStatisticalPTLessEqualSmallTOneTail();
    public static string get_LabelStatisticalSmallTCrititcalOneTail();
    public static string get_LabelStatisticalPTLessEqualSmallTTwoTail();
    public static string get_LabelStatisticalSmallTCrititcalTwoTail();
    public static string get_MessagePrecisionInvalid();
    public static string get_MessageChangingChartAreaPositionProperty();
    public static string get_MessageChangingChartAreaPositionConfirmAutomatic();
    public static string get_MessageChangingChartAreaPositionConfirmCustom();
    public static string get_MessageChartException();
    public static string get_MessageSite();
    public static string get_MessageStackTrace();
    public static string get_MessageChartTitle();
    public static string get_TitleAxisX();
    public static string get_TitleAxisY();
    public static string get_TitleAxisX2();
    public static string get_TitleAxisY2();
    public static string get_FormulaNamePriceIndicators();
    public static string get_FormulaNameGeneralTechnicalIndicators();
    public static string get_FormulaNameTechnicalVolumeIndicators();
    public static string get_FormulaNameOscillator();
    public static string get_FormulaNameGeneralFormulas();
    public static string get_FormulaNameTimeSeriesAndForecasting();
    public static string get_FormulaNameStatisticalAnalysis();
    public static string get_FormulaNameVolumeIndicators();
    public static string get_LabelTextRow();
    public static string get_DescriptionAttributeBackImage();
    public static string get_DescriptionAttributeMarkerImage();
    public static string get_DescriptionAttributeAnnotationBaseY();
    public static string get_DescriptionAttributeAnnotationWidth();
    public static string get_DescriptionAttributeAnnotationHeight();
    public static string get_DescriptionAttributeAnnotationClipToChartArea();
    public static string get_DescriptionAttributeAnnotationBaseX();
    public static string get_DescriptionAttributeChartImageType();
    public static string get_DescriptionAttributeMultiValueSeparator();
    public static string get_DescriptionAttributeDataSeriesGroupID();
    public static string get_DescriptionAttributeSuppressCodeExceptions();
    public static string get_DescriptionAttributeNoDataMessage();
    public static string get_DescriptionAttributeReverseSeriesOrder();
    public static string get_DescriptionAttributeUserDefined();
    public static string get_DescriptionAttributeChartEvent_GetToolTipText();
    public static string get_DescriptionAttributeArrowAnnotation_ArrowSize();
    public static string get_DescriptionAttributeChartSerializer_Content();
    public static string get_DescriptionAttributeLegend_Enabled();
    public static string get_DescriptionAttributeEnabled5();
    public static string get_DescriptionAttributeAxisScaleBreakStyle_Enabled();
    public static string get_DescriptionAttributeEnabled7();
    public static string get_DescriptionAttributeLabel_Enabled();
    public static string get_DescriptionAttributeLegendItem_Enabled();
    public static string get_DescriptionAttributeAxisScrollBar_Enabled();
    public static string get_DescriptionAttributeEnabled13();
    public static string get_DescriptionAttributeSeries_Enabled();
    public static string get_DescriptionAttributeLegendCell_CellSpan();
    public static string get_DescriptionAttributeCursor_SelectionColor();
    public static string get_DescriptionAttributeInterlaced();
    public static string get_DescriptionAttributeMapArea_Coordinates();
    public static string get_DescriptionAttributeChartEvent_PostPaint();
    public static string get_DescriptionAttributeStripLine_Title();
    public static string get_DescriptionAttributeLegend_Title();
    public static string get_DescriptionAttributeTitle5();
    public static string get_DescriptionAttributeTitle6();
    public static string get_DescriptionAttributeAnnotation_Annotation();
    public static string get_DescriptionAttributeTitleFont();
    public static string get_DescriptionAttributeChartArea_Axes();
    public static string get_DescriptionAttributeChartSerializer_NonSerializableContent();
    public static string get_DescriptionAttributeShadowOffset();
    public static string get_DescriptionAttributeCalloutLineAnchorCap();
    public static string get_DescriptionAttributeMapAreaAttributes();
    public static string get_DescriptionAttributeSubAxis_SubAxis();
    public static string get_DescriptionAttributeMajorGrid();
    public static string get_DescriptionAttributeElementPosition_Y();
    public static string get_DescriptionAttributeAnnotationPathPoint_Y();
    public static string get_DescriptionAttributeToolTipEventArgs_Y();
    public static string get_DescriptionAttributePoint3D_Y();
    public static string get_DescriptionAttributePoint3D_Z();
    public static string get_DescriptionAttributeMajorTickMark();
    public static string get_DescriptionAttributeDrawInfinitive();
    public static string get_DescriptionAttributeAxisDataView_MinSize();
    public static string get_DescriptionAttributeLegendCellColumnCollection_LegendCellColumnCollection();
    public static string get_DescriptionAttributeMarkerOverlapping();
    public static string get_DescriptionAttributeChart_OnCustomizeLegend();
    public static string get_DescriptionAttributeLegendCellColumn_HeaderTextAlignment();
    public static string get_DescriptionAttributeScrollBarEventArgs_MousePositionY();
    public static string get_DescriptionAttributeNamedImage_NamedImage();
    public static string get_DescriptionAttributeScrollBar();
    public static string get_DescriptionAttributeMapArea_MapArea();
    public static string get_DescriptionAttributeLegend_CustomItems();
    public static string get_DescriptionAttributeAnnotationSmartLabelsStyle_AnnotationSmartLabelsStyle();
    public static string get_DescriptionAttributePolylineAnnotation_PolylineAnnotation();
    public static string get_DescriptionAttributeChartEvent_AxisViewChanged();
    public static string get_DescriptionAttributeCrossing();
    public static string get_DescriptionAttributeMargins_Top();
    public static string get_DescriptionAttributeLegendCellColumn_HeaderFont();
    public static string get_DescriptionAttributeLegend_InterlacedRows();
    public static string get_DescriptionAttributeAxisDataView_MinSizeType();
    public static string get_DescriptionAttributeLineWidth();
    public static string get_DescriptionAttributeDataPoint_XValue();
    public static string get_DescriptionAttributeChartArea_AxisY2();
    public static string get_DescriptionAttributeChartArea_AxisX2();
    public static string get_DescriptionAttributeChartEvent_AnnotationPositionChanging();
    public static string get_DescriptionAttributeStripLine_StripLine();
    public static string get_DescriptionAttributeBorderColor();
    public static string get_DescriptionAttributeMarkerBorderColor();
    public static string get_DescriptionAttributeLegendText();
    public static string get_DescriptionAttributeCustomLabel_LabelMark();
    public static string get_DescriptionAttributeTextAntiAliasingQuality();
    public static string get_DescriptionAttributeAllowMoving();
    public static string get_DescriptionAttributeCalloutAnnotation_CalloutAnnotation();
    public static string get_DescriptionAttributeStripLine_Name();
    public static string get_DescriptionAttributeTitle_Name();
    public static string get_DescriptionAttributeName4();
    public static string get_DescriptionAttributeAnnotationPathPoint_Name();
    public static string get_DescriptionAttributeLegendCell_Name();
    public static string get_DescriptionAttributeMapArea_Name();
    public static string get_DescriptionAttributeSeries_Name();
    public static string get_DescriptionAttributeAxis_Name();
    public static string get_DescriptionAttributeNamedImage_Name();
    public static string get_DescriptionAttributeSubAxis_Name();
    public static string get_DescriptionAttributeDataPoint_Name();
    public static string get_DescriptionAttributeLegendCellColumn_Name();
    public static string get_DescriptionAttributeLegendItem_Name();
    public static string get_DescriptionAttributeLegend_Name();
    public static string get_DescriptionAttributeCustomLabel_Name();
    public static string get_DescriptionAttributeChartArea_Name();
    public static string get_DescriptionAttributeCursor_Cursor();
    public static string get_DescriptionAttributeAnchorX();
    public static string get_DescriptionAttributeToolTip();
    public static string get_DescriptionAttributeLegend_TableStyle();
    public static string get_DescriptionAttributeDataPoint_Empty();
    public static string get_DescriptionAttributeScrollBarEventArgs_Handled();
    public static string get_DescriptionAttributeAxisLabel();
    public static string get_DescriptionAttributeAnnotationGroup_AllowPathEditing();
    public static string get_DescriptionAttributeAllowPathEditing3();
    public static string get_DescriptionAttributeChart_OnPaint();
    public static string get_DescriptionAttributeCalloutAnnotation_AnchorOffsetX();
    public static string get_DescriptionAttributeAnchorOffsetX3();
    public static string get_DescriptionAttributeCalloutAnnotation_AnchorOffsetY();
    public static string get_DescriptionAttributeAnchorOffsetY3();
    public static string get_DescriptionAttributeChartEvent_CursorPositionChanging();
    public static string get_DescriptionAttributeScrollBarEventArgs_ButtonType();
    public static string get_DescriptionAttributeLabelsAutoFitStyle();
    public static string get_DescriptionAttributeLabelStyle();
    public static string get_DescriptionAttributeStripLine_IntervalOffsetType();
    public static string get_DescriptionAttributeLabel_IntervalOffsetType();
    public static string get_DescriptionAttributeIntervalOffsetType4();
    public static string get_DescriptionAttributeCursor_IntervalOffsetType();
    public static string get_DescriptionAttributeIntervalOffsetType6();
    public static string get_DescriptionAttributeAxisScaleSegment_IntervalOffsetType();
    public static string get_DescriptionAttributeReverse();
    public static string get_DescriptionAttributeSeries_Points();
    public static string get_DescriptionAttributeBorderSkin_SkinStyle();
    public static string get_DescriptionAttributeChartArea3DStyle_Clustered();
    public static string get_DescriptionAttributeAnchorDataPointName();
    public static string get_DescriptionAttributeChartEvent_AnnotationPositionChanged();
    public static string get_DescriptionAttributeChartArea3DStyle_PointGapDepth();
    public static string get_DescriptionAttributeLegend_Reversed();
    public static string get_DescriptionAttributeAnnotation_AnnotationType();
    public static string get_DescriptionAttributeTextAnnotation_AnnotationType();
    public static string get_DescriptionAttributeAnnotationType();
    public static string get_DescriptionAttributeBorderSkin_FrameBorderDashStyle();
    public static string get_DescriptionAttributeLegend_HeaderSeparatorColor();
    public static string get_DescriptionAttributeChartEvent_AnnotationSelectionChanged();
    public static string get_DescriptionAttributeFont();
    public static string get_DescriptionAttributeLegend_Font();
    public static string get_DescriptionAttributeLegendCellColumn_Font();
    public static string get_DescriptionAttributeLabel_Font();
    public static string get_DescriptionAttributeTitle_Font();
    public static string get_DescriptionAttributeLegendCell_Font();
    public static string get_DescriptionAttributeSeries_ValueMemberX();
    public static string get_DescriptionAttributeArrows();
    public static string get_DescriptionAttributeType();
    public static string get_DescriptionAttributeSeries_Type();
    public static string get_DescriptionAttributeBorder3DAnnotation_Border3DAnnotation();
    public static string get_DescriptionAttributeChart_Images();
    public static string get_DescriptionAttributeLegendToolTip();
    public static string get_DescriptionAttributeCustomLabel_CustomLabel();
    public static string get_DescriptionAttributeChartEvent_AnnotationPlaced();
    public static string get_DescriptionAttributeBackColor();
    public static string get_DescriptionAttributeCalloutBackColor();
    public static string get_DescriptionAttributeFrameBackColor();
    public static string get_DescriptionAttributeTitleBackColor();
    public static string get_DescriptionAttributeLabelBackColor();
    public static string get_DescriptionAttributeHeaderBackColor();
    public static string get_DescriptionAttributeLabel_ShowEndLabels();
    public static string get_DescriptionAttributeLabelToolTip();
    public static string get_DescriptionAttributeSeries_MarkerStep();
    public static string get_DescriptionAttributeTickMark_Style();
    public static string get_DescriptionAttribute_TextOrientation();
    public static string get_DescriptionAttributeLegendItem_Style();
    public static string get_DescriptionAttributeChartArea3DStyle_Rotation();
    public static string get_DescriptionAttributeSizeAlwaysRelative();
    public static string get_DescriptionAttributeSizeAlwaysRelative3();
    public static string get_DescriptionAttributeAnnotationGroup_SizeAlwaysRelative();
    public static string get_DescriptionAttributeChart_BorderlineWidth();
    public static string get_DescriptionAttributeSeries_XValueIndexed();
    public static string get_DescriptionAttributeEllipseAnnotation_EllipseAnnotation();
    public static string get_DescriptionAttributeAnchorAlignment();
    public static string get_DescriptionAttributeWidth();
    public static string get_DescriptionAttributeElementPosition_Width();
    public static string get_DescriptionAttributeAxisXName();
    public static string get_DescriptionAttributeChartArea3DStyle_Inclination();
    public static string get_DescriptionAttributeLegendCollection_LegendCollection();
    public static string get_DescriptionAttributeAxisYName();
    public static string get_DescriptionAttributeAxisScaleSegment_Spacing();
    public static string get_DescriptionAttributeAxisScaleBreakStyle_Spacing();
    public static string get_DescriptionAttributeSelected();
    public static string get_DescriptionAttributeAnnotationGroup_Selected();
    public static string get_DescriptionAttributeVerticalLineAnnotation_VerticalLineAnnotation();
    public static string get_DescriptionAttributeLabelsAutoFitMaxFontSize();
    public static string get_DescriptionAttributeFreeDrawPlacement();
    public static string get_DescriptionAttributeStripLinesCollection_StripLinesCollection();
    public static string get_DescriptionAttributeAxisDataView_IsZoomed();
    public static string get_DescriptionAttributeChartArea3DStyle_Perspective();
    public static string get_DescriptionAttributeChart_OnCustomize();
    public static string get_DescriptionAttributeLabel();
    public static string get_DescriptionAttributeLabel_Label();
    public static string get_DescriptionAttributeStartCap3();
    public static string get_DescriptionAttributeFontColor();
    public static string get_DescriptionAttributeLegendFontColor();
    public static string get_DescriptionAttributeLabel_OffsetLabels();
    public static string get_DescriptionAttributeMargin();
    public static string get_DescriptionAttributeAnnotationPositionChangingEventArgs_AnnotationPositionChangingEventArgs();
    public static string get_DescriptionAttributeCursorEventArgs_NewSelectionStart();
    public static string get_DescriptionAttributeSeries_XSubAxisName();
    public static string get_DescriptionAttributeHideOverlapped();
    public static string get_DescriptionAttributeLegendCellColumn_MaximumWidth();
    public static string get_DescriptionAttributeLegend_InsideChartArea();
    public static string get_DescriptionAttributeImageTransparentColor();
    public static string get_DescriptionAttributeLegend_EquallySpacedItems();
    public static string get_DescriptionAttributeChartArea_CursorY();
    public static string get_DescriptionAttributeChart_Printing();
    public static string get_DescriptionAttributeAxis();
    public static string get_DescriptionAttributeAxis_Axis();
    public static string get_DescriptionAttributeBackImageAlign();
    public static string get_DescriptionAttributeShowInLegend();
    public static string get_DescriptionAttributeChartSerializer_ChartSerializer();
    public static string get_DescriptionAttributeChart_Compression();
    public static string get_DescriptionAttributeChartImage_Compression();
    public static string get_DescriptionAttributeCursor_AutoScroll();
    public static string get_DescriptionAttributeElementPosition_Height();
    public static string get_DescriptionAttributeHeight3();
    public static string get_DescriptionAttributeChart_ViewStateContent();
    public static string get_DescriptionAttributeAxisDataView_SmallScrollSizeType();
    public static string get_DescriptionAttributeLegend_CellColumns();
    public static string get_DescriptionAttributeAxisScrollBar_Buttons();
    public static string get_DescriptionAttributeLegends();
    public static string get_DescriptionAttributeElementPosition_X();
    public static string get_DescriptionAttributeAnnotationPathPoint_X();
    public static string get_DescriptionAttributePoint3D_X();
    public static string get_DescriptionAttributeToolTipEventArgs_X();
    public static string get_DescriptionAttributeCustomAttributesExtended();
    public static string get_DescriptionAttributeMargins_Left();
    public static string get_DescriptionAttributeAxisScrollBar_PositionInside();
    public static string get_DescriptionAttributeSeries_ValueMembersY();
    public static string get_DescriptionAttributeSmartLabelsStyle_SmartLabelsStyle();
    public static string get_DescriptionAttributeChartEvent_SelectionRangeChanging();
    public static string get_DescriptionAttributeLabelsAutoFitMinFontSize();
    public static string get_DescriptionAttributeMaxMovingDistance();
    public static string get_DescriptionAttributeTitle_DockToChartArea();
    public static string get_DescriptionAttributeLegend_DockToChartArea();
    public static string get_DescriptionAttributeChartArea3DStyle_RightAngleAxes();
    public static string get_DescriptionAttributeLegend_LegendStyle();
    public static string get_DescriptionAttributeAxisDataView_AxisDataView();
    public static string get_DescriptionAttributeBorderDashStyle();
    public static string get_DescriptionAttributeLabelBorderDashStyle();
    public static string get_DescriptionAttributeBackSecondaryColor();
    public static string get_DescriptionAttributeBorderSkin_FrameBackSecondaryColor();
    public static string get_DescriptionAttributeLegend_TitleSeparator();
    public static string get_DescriptionAttributeChartArea_InnerPlotPosition();
    public static string get_DescriptionAttributeChartEvent_CustomizeLegend();
    public static string get_DescriptionAttributeAnnotationPathPoint_AnnotationPathPoint();
    public static string get_DescriptionAttributeDataPoint_YValues();
    public static string get_DescriptionAttributeCustomLabel_RowIndex();
    public static string get_DescriptionAttributeSeries_YSubAxisName();
    public static string get_DescriptionAttributeChartArea_AlignType();
    public static string get_DescriptionAttributeAllowResizing();
    public static string get_DescriptionAttributeShowLabelAsValue();
    public static string get_DescriptionAttributeForeColor();
    public static string get_DescriptionAttributePathPoints();
    public static string get_DescriptionAttributeViewEventArgs_NewSizeType();
    public static string get_DescriptionAttributeChart_BuildNumber();
    public static string get_DescriptionAttributeAxisScaleSegmentCollection_AxisScaleSegmentCollection();
    public static string get_DescriptionAttributeMarkerSize();
    public static string get_DescriptionAttributeLegendItem_MarkerSize();
    public static string get_DescriptionAttributeLegendCell_SeriesSymbolSize();
    public static string get_DescriptionAttributeLegendCellColumn_SeriesSymbolSize();
    public static string get_DescriptionAttributeDisabled();
    public static string get_DescriptionAttributeChartSerializer_ResetWhenLoading();
    public static string get_DescriptionAttributeBackGradientStyle();
    public static string get_DescriptionAttributeDataSource();
    public static string get_DescriptionAttributeCustomLabels();
    public static string get_DescriptionAttributeArrowAnnotation_ArrowAnnotation();
    public static string get_DescriptionAttributeCursor_AxisType();
    public static string get_DescriptionAttributeLegendItem_Cells();
    public static string get_DescriptionAttributeBorderSkin();
    public static string get_DescriptionAttributeBorderSkin_BorderSkin();
    public static string get_DescriptionAttributeSubAxisCollection_SubAxisCollection();
    public static string get_DescriptionAttributeAllowSelecting();
    public static string get_DescriptionAttributeChartEvent_Customize();
    public static string get_DescriptionAttributeImageAnnotation_ImageAnnotation();
    public static string get_DescriptionAttributeAxisDataView_SmallScrollSize();
    public static string get_DescriptionAttributeAxisScaleSegment_Interval();
    public static string get_DescriptionAttributeCursor_Interval();
    public static string get_DescriptionAttributeInterval4();
    public static string get_DescriptionAttributeStripLine_Interval();
    public static string get_DescriptionAttributeInterval6();
    public static string get_DescriptionAttributeLabel_Interval();
    public static string get_DescriptionAttributeStripLine_TitleLineAlignment();
    public static string get_DescriptionAttributeMaximum();
    public static string get_DescriptionAttributeElementPosition_Auto();
    public static string get_DescriptionAttributeSeries_YAxisType();
    public static string get_DescriptionAttributeLineDashStyle();
    public static string get_DescriptionAttributeLogarithmBase();
    public static string get_DescriptionAttributeAntiAlias();
    public static string get_DescriptionAttributeImageWrapMode();
    public static string get_DescriptionAttributeChartSerializer_IgnoreUnknownXmlAttributes();
    public static string get_DescriptionAttributeAxisScaleSegment_Tag();
    public static string get_DescriptionAttributeTag();
    public static string get_DescriptionAttributeLegend();
    public static string get_DescriptionAttributeLegend_Legend();
    public static string get_DescriptionAttributeSeries_Legend();
    public static string get_DescriptionAttributeDataPointComparer_DataPointComparer();
    public static string get_DescriptionAttributeBackHatchStyle();
    public static string get_DescriptionAttributeFrameBackHatchStyle();
    public static string get_DescriptionAttributeChartAreaCollection_Item();
    public static string get_DescriptionAttributeLegendCollection_Item();
    public static string get_DescriptionAttributeAnnotationCollection_Item();
    public static string get_DescriptionAttributeSubAxisCollection_Item();
    public static string get_DescriptionAttributeSeriesCollection_Item();
    public static string get_DescriptionAttributeAnnotationPathPointCollection_Item();
    public static string get_DescriptionAttributeLegendCellColumnCollection_Item();
    public static string get_DescriptionAttributeAxisScaleSegmentCollection_Item();
    public static string get_DescriptionAttributeLegendCellCollection_Item();
    public static string get_DescriptionAttributeNamedImagesCollection_Item();
    public static string get_DescriptionAttributeAxisScaleSegment_ScaleMinimum();
    public static string get_DescriptionAttributeSmartLabels();
    public static string get_DescriptionAttributeSeries_SmartLabels();
    public static string get_DescriptionAttributeSmartLabels_SmartLabels();
    public static string get_DescriptionAttributeMinorTickMark();
    public static string get_DescriptionAttributeMapAreasCollection_MapAreasCollection();
    public static string get_DescriptionAttributeMovingDirection();
    public static string get_DescriptionAttributeCursor_UserSelection();
    public static string get_DescriptionAttributeChartArea();
    public static string get_DescriptionAttributeSeries_ChartArea();
    public static string get_DescriptionAttributeChartArea_ChartArea();
    public static string get_DescriptionAttributeToolTipEventArgs_HitTestResult();
    public static string get_DescriptionAttributeAxisScaleSegment_AxisScaleSegment();
    public static string get_DescriptionAttributeLegend_ItemColumnSeparatorColor();
    public static string get_DescriptionAttributeDataManipulator();
    public static string get_DescriptionAttributeTitle_Color();
    public static string get_DescriptionAttributeLegendItem_Color();
    public static string get_DescriptionAttributeColor4();
    public static string get_DescriptionAttributeMargins_Right();
    public static string get_DescriptionAttributeRight3();
    public static string get_DescriptionAttributeChart_OnBackPaint();
    public static string get_DescriptionAttributeLineColor();
    public static string get_DescriptionAttributeCalloutLineColor();
    public static string get_DescriptionAttributeArrowAnnotation_ArrowStyle();
    public static string get_DescriptionAttributeArrowStyle_ArrowStyle();
    public static string get_DescriptionAttributeSeries_XValueType();
    public static string get_DescriptionAttributeAnnotationGroup_Annotations();
    public static string get_DescriptionAttributeAnnotations3();
    public static string get_DescriptionAttributeMinorGrid();
    public static string get_DescriptionAttributeMapArea_Custom();
    public static string get_DescriptionAttributeChart_EnableViewState();
    public static string get_DescriptionAttributeChartArea3DStyle_Enable3D();
    public static string get_DescriptionAttributeInterlacedColor();
    public static string get_DescriptionAttributeLegendCellColumn_Margins();
    public static string get_DescriptionAttributeMargins_Margins();
    public static string get_DescriptionAttributeLegendCell_Margins();
    public static string get_DescriptionAttributeLegendItem_MarkerColor();
    public static string get_DescriptionAttributeMarkerColor3();
    public static string get_DescriptionAttributeChart_Size();
    public static string get_DescriptionAttributeTickMark_Size();
    public static string get_DescriptionAttributeAxisScaleSegment_Size();
    public static string get_DescriptionAttributeAxisDataView_Size();
    public static string get_DescriptionAttributeAxisScrollBar_Size();
    public static string get_DescriptionAttributeViewEventArgs_NewSize();
    public static string get_DescriptionAttributeSeries_XAxisType();
    public static string get_DescriptionAttributeAllowOutsidePlotArea();
    public static string get_DescriptionAttributeLegendItem_MarkerStyle();
    public static string get_DescriptionAttributeMarkerStyle4();
    public static string get_DescriptionAttributeLegendCell_ImageSize();
    public static string get_DescriptionAttributeView();
    public static string get_DescriptionAttributeSeriesCollection_SeriesCollection();
    public static string get_DescriptionAttributeCursorEventArgs_NewPosition();
    public static string get_DescriptionAttributeViewEventArgs_NewPosition();
    public static string get_DescriptionAttributeLegendCell_Image();
    public static string get_DescriptionAttributeNamedImage_Image();
    public static string get_DescriptionAttributeImageAnnotation_Image();
    public static string get_DescriptionAttributeLegendItem_Image();
    public static string get_DescriptionAttributeCustomLabel_Image();
    public static string get_DescriptionAttributeAxisScaleSegment_IntervalOffset();
    public static string get_DescriptionAttributeIntervalOffset3();
    public static string get_DescriptionAttributeLabel_IntervalOffset();
    public static string get_DescriptionAttributeCursor_IntervalOffset();
    public static string get_DescriptionAttributeIntervalOffset6();
    public static string get_DescriptionAttributeStripLine_IntervalOffset();
    public static string get_DescriptionAttributeLegend_DockInsideChartArea();
    public static string get_DescriptionAttributeTitle_DockInsideChartArea();
    public static string get_DescriptionAttributeChart_RenderType();
    public static string get_DescriptionAttributeAxisScaleBreakStyle_CollapsibleSpaceThreshold();
    public static string get_DescriptionAttributeChartEvent_AxisViewChanging();
    public static string get_DescriptionAttributeLabelCalloutStyle_LabelCalloutStyle();
    public static string get_DescriptionAttributePath();
    public static string get_DescriptionAttributeLegendItem_SeriesPointIndex();
    public static string get_DescriptionAttributeMapAreas();
    public static string get_DescriptionAttributeTickMark_TickMark();
    public static string get_DescriptionAttributeLegendCellColumn_LegendCellColumn();
    public static string get_DescriptionAttributeLegendItem_LegendItem();
    public static string get_DescriptionAttributeTitleAlignment();
    public static string get_DescriptionAttributeStripLine_TitleAlignment();
    public static string get_DescriptionAttributeLegend_TitleAlignment();
    public static string get_DescriptionAttributeElementPosition_ElementPosition();
    public static string get_DescriptionAttributeCustomLabel_To();
    public static string get_DescriptionAttributeLabel_FontAngle();
    public static string get_DescriptionAttributeIntervalAutoMode();
    public static string get_DescriptionAttributeStripLine_StripWidth();
    public static string get_DescriptionAttributeCursor_UserEnabled();
    public static string get_DescriptionAttributeBorderSkin_FrameBorderWidth();
    public static string get_DescriptionAttributeAxisScaleSegment_Position();
    public static string get_DescriptionAttributeAxisDataView_Position();
    public static string get_DescriptionAttributeTitle_Position();
    public static string get_DescriptionAttributeLegend_Position();
    public static string get_DescriptionAttributeChartArea_Position();
    public static string get_DescriptionAttributeCursor_Position();
    public static string get_DescriptionAttributeSubAxis_ParentAxis();
    public static string get_DescriptionAttributeAnnotationCollectionEditor_AnnotationCollectionEditor();
    public static string get_DescriptionAttributeBottom();
    public static string get_DescriptionAttributeMargins_Bottom();
    public static string get_DescriptionAttributeAxisScaleBreakStyle_AxisScaleBreakStyle();
    public static string get_DescriptionAttributeLegend_HeaderSeparator();
    public static string get_DescriptionAttributeChartArea3DStyle_PointDepth();
    public static string get_DescriptionAttributeAnnotationGroup_AnnotationGroup();
    public static string get_DescriptionAttributeAnnotationPathPointCollection_AnnotationPathPointCollection();
    public static string get_DescriptionAttributeStripLine_StripWidthType();
    public static string get_DescriptionAttributeCustomLabel_From();
    public static string get_DescriptionAttributePoint3D_PointF();
    public static string get_DescriptionAttributeBorderWidth();
    public static string get_DescriptionAttributeMarkerBorderWidth();
    public static string get_DescriptionAttributeCursor_SelectionEnd();
    public static string get_DescriptionAttributeLineAnnotation_LineAnnotation();
    public static string get_DescriptionAttributeAnnotationSmartLabels_AnnotationSmartLabels();
    public static string get_DescriptionAttributeAnnotationGroup_Visible();
    public static string get_DescriptionAttributeChartArea_Visible();
    public static string get_DescriptionAttributeTitle_Visible();
    public static string get_DescriptionAttributeVisible();
    public static string get_DescriptionAttributeLegendItem_Separator();
    public static string get_DescriptionAttributeLegendCell_CellType();
    public static string get_DescriptionAttributeChart_Serializer();
    public static string get_DescriptionAttributeAxisX();
    public static string get_DescriptionAttributeChartArea_AxisX();
    public static string get_DescriptionAttributeImageType();
    public static string get_DescriptionAttributeCursor_SelectionStart();
    public static string get_DescriptionAttributeLabelsAutoFit();
    public static string get_DescriptionAttributeLegendCellColumn_HeaderText();
    public static string get_DescriptionAttributeMapEnabled();
    public static string get_DescriptionAttributeAxisDataView_Zoomable();
    public static string get_DescriptionAttributeDataManager_PaletteCustomColors();
    public static string get_DescriptionAttributeChart_PaletteCustomColors();
    public static string get_DescriptionAttributeLegend_ItemColumnSeparator();
    public static string get_DescriptionAttributeCursorEventArgs_NewSelectionEnd();
    public static string get_DescriptionAttributeLegendItem_SeriesName();
    public static string get_DescriptionAttributeChartAreas();
    public static string get_DescriptionAttributeChartArea_AlignWithChartArea();
    public static string get_DescriptionAttributeLegend_MaxAutoSize();
    public static string get_DescriptionAttributeGrid_Grid();
    public static string get_DescriptionAttributeChartArea_EquallySizedAxesFont();
    public static string get_DescriptionAttributeChartEvent_CustomizeMapAreas();
    public static string get_DescriptionAttributeChartArea3DStyle_WallWidth();
    public static string get_DescriptionAttributeCustomLabel_Row();
    public static string get_DescriptionAttributeLegend_TitleSeparatorColor();
    public static string get_DescriptionAttributeChartSerializer_TemplateMode();
    public static string get_DescriptionAttributeShadowColor();
    public static string get_DescriptionAttributeAxisScaleBreakStyle_MaxNumberOfBreaks();
    public static string get_DescriptionAttributeChartEvent_AxisScrollBarClicked();
    public static string get_DescriptionAttributeAnchorY();
    public static string get_DescriptionAttributeLegend_AutoFitMinFontSize();
    public static string get_DescriptionAttributeChartEvent_AnnotationTextChanged();
    public static string get_DescriptionAttributeChart_Series();
    public static string get_DescriptionAttributeSeries_Series();
    public static string get_DescriptionAttributeMapArea_Shape();
    public static string get_DescriptionAttributeLegend_TextWrapThreshold();
    public static string get_DescriptionAttributeLabelOutsidePlotAreaStyle_LabelOutsidePlotAreaStyle();
    public static string get_DescriptionAttributeSubAxes();
    public static string get_DescriptionAttributeAxisScaleBreakStyle_StartFromZero();
    public static string get_DescriptionAttributeStartFromZero3();
    public static string get_DescriptionAttributeRectangleAnnotation_RectangleAnnotation();
    public static string get_DescriptionAttributeUrl();
    public static string get_DescriptionAttributeAxisScaleBreakStyle_BreakLineType();
    public static string get_DescriptionAttributeChartEvent_CursorPositionChanged();
    public static string get_DescriptionAttributeChartSerializer_SerializableContent();
    public static string get_DescriptionAttributeCalloutAnnotation_CalloutStyle();
    public static string get_DescriptionAttributeCalloutStyle3();
    public static string get_DescriptionAttributeCalloutStyle_CalloutStyle();
    public static string get_DescriptionAttributeTitle_Docking();
    public static string get_DescriptionAttributeLegend_Docking();
    public static string get_DescriptionAttributeAnnotationGroup_AllowAnchorMoving();
    public static string get_DescriptionAttributeAllowAnchorMoving3();
    public static string get_DescriptionAttributeTitleColor();
    public static string get_DescriptionAttributeStripLine_TitleColor();
    public static string get_DescriptionAttributeLegend_TitleColor();
    public static string get_DescriptionAttributeTitles();
    public static string get_DescriptionAttributePolygonAnnotation_PolygonAnnotation();
    public static string get_DescriptionAttributeLabel_IntervalType();
    public static string get_DescriptionAttributeIntervalType3();
    public static string get_DescriptionAttributeIntervalType4();
    public static string get_DescriptionAttributeStripLine_IntervalType();
    public static string get_DescriptionAttributeAxisScaleSegment_IntervalType();
    public static string get_DescriptionAttributeCursor_IntervalType();
    public static string get_DescriptionAttributeLegendItem_SeparatorColor();
    public static string get_DescriptionAttributeSeries_YValuesPerPoint();
    public static string get_DescriptionAttributeChartEvent_PrePaint();
    public static string get_DescriptionAttributeLegendUrl();
    public static string get_DescriptionAttributeCustomLabel_ImageUrl();
    public static string get_DescriptionAttributeLabel_Format();
    public static string get_DescriptionAttributeChartSerializer_Format();
    public static string get_DescriptionAttributeStripLines();
    public static string get_DescriptionAttributeChart_ViewStateData();
    public static string get_DescriptionAttributeTitle_DockOffset();
    public static string get_DescriptionAttributeAnchorDataPoint();
    public static string get_DescriptionAttributeLabelFormat();
    public static string get_DescriptionAttributeSuppressExceptions();
    public static string get_DescriptionAttributeSeries_EmptyPointStyle();
    public static string get_DescriptionAttributeCustomAttributes();
    public static string get_DescriptionAttributeLegendCellCollection_LegendCellCollection();
    public static string get_DescriptionAttributeCustomLabelsCollection_CustomLabelsCollection();
    public static string get_DescriptionAttributeCustomLabel_MarkColor();
    public static string get_DescriptionAttributePalette();
    public static string get_DescriptionAttributeScaleBreakStyle();
    public static string get_DescriptionAttributeChart_ImageUrl();
    public static string get_DescriptionAttributeLegend_InterlacedRowsColor();
    public static string get_DescriptionAttributeLegendCellColumn_ColumnType();
    public static string get_DescriptionAttributeChartArea_AlignOrientation();
    public static string get_DescriptionAttributeChart_SoftShadows();
    public static string get_DescriptionAttributeSoftShadows3();
    public static string get_DescriptionAttributePrintingManager_PrintDocument();
    public static string get_DescriptionAttributeMinimum();
    public static string get_DescriptionAttributeAxisScaleSegment_ScaleMaximum();
    public static string get_DescriptionAttributeScrollBarEventArgs_MousePositionX();
    public static string get_DescriptionAttributeLabel_TruncatedLabels();
    public static string get_DescriptionAttributeCustomLabel_GridTicks();
    public static string get_DescriptionAttributeImageAnnotation_Alignment();
    public static string get_DescriptionAttributeLegendCellColumn_Alignment();
    public static string get_DescriptionAttributeTitle_Alignment();
    public static string get_DescriptionAttributeLegendCell_Alignment();
    public static string get_DescriptionAttributeLegend_Alignment();
    public static string get_DescriptionAttributeAlignment();
    public static string get_DescriptionAttributeChart_OnCustomizeMapAreas();
    public static string get_DescriptionAttributeSubAxis_LocationOffset();
    public static string get_DescriptionAttributeLegendCellColumn_MinimumWidth();
    public static string get_DescriptionAttributeSelectionPointsStyle();
    public static string get_DescriptionAttributeAxisY();
    public static string get_DescriptionAttributeChartArea_AxisY();
    public static string get_DescriptionAttributeTextFont();
    public static string get_DescriptionAttributeTextFont4();
    public static string get_DescriptionAttributeAxisDataView_SizeType();
    public static string get_DescriptionAttributeMinMovingDistance();
    public static string get_DescriptionAttributeChartArea_CursorX();
    public static string get_DescriptionAttributeAxisDataView_SmallScrollMinSize();
    public static string get_DescriptionAttributeAxisDataView_SmallScrollMinSizeType();
    public static string get_DescriptionAttributeAxisScrollBar_ButtonColor();
    public static string get_DescriptionAttributeArea3DStyle();
    public static string get_DescriptionAttributeChart();
    public static string get_DescriptionAttributeChart_Chart();
    public static string get_DescriptionAttributeBorderSkin_PageColor();
    public static string get_DescriptionAttributeDataPoint_DataPoint();
    public static string get_DescriptionAttributeChartArea3DStyle_Light();
    public static string get_DescriptionAttributeDataPointCustomProperties_DataPointCustomProperties();
    public static string get_DescriptionAttributeLegend_AutoFitText();
    public static string get_DescriptionAttributeAllowTextEditing();
    public static string get_DescriptionAttributeCustomLabel_Text();
    public static string get_DescriptionAttributeLegendCell_Text();
    public static string get_DescriptionAttributeText();
    public static string get_DescriptionAttributeTitle_Text();
    public static string get_DescriptionAttributeLegendCellColumn_Text();
    public static string get_DescriptionAttributeToolTipEventArgs_Text();
    public static string get_DescriptionAttributeMultiline();
    public static string get_DescriptionAttributeTextAnnotation_TextAnnotation();
    public static string get_DescriptionAttributeAnnotationGroup_ClipToChartArea();
    public static string get_DescriptionAttributeSeries_YValueType();
    public static string get_DescriptionAttributeInternalIntervalType();
    public static string get_DescriptionAttributeCalloutAnnotation_CalloutAnchorCap();
    public static string get_DescriptionAttributeLogarithmic();
    public static string get_DescriptionAttributeLegend_ItemColumnSpacing();
    public static string get_DescriptionAttributeMarksNextToAxis();
    public static string get_DescriptionAttributeChartEvent_SelectionRangeChanged();
    public static string get_DescriptionAttributeDataPointCollection_DataPointCollection();
    public static string get_DescriptionAttributeHorizontalLineAnnotation_HorizontalLineAnnotation();
    public static string get_DescriptionAttributeLegendCellColumn_HeaderColor();
    public static string get_DescriptionAttributeLegendCell_LegendCell();
    public static string get_DescriptionAttributeChartImageDescriptionUrl();
    public static string get_DescriptionAttributeChartImageAlternateText();
    public static string get_DescriptionAttributePostBackValue();
    public static string get_DescriptionAttributeTextStyle();
    public static string get_DescriptionAttributeIsMapAreaAttributesEncoded();
    public static string get_CategoryAttributeCellColumns();
    public static string get_CategoryAttributeAxis();
    public static string get_CategoryAttributeEditing();
    public static string get_CategoryAttributeSize();
    public static string get_CategoryAttributePosition();
    public static string get_CategoryAttributeViewState();
    public static string get_CategoryAttributeInterval();
    public static string get_CategoryAttributeAppearance();
    public static string get_CategoryAttributeDocking();
    public static string get_CategoryAttributeDataSource();
    public static string get_CategoryAttributeAxisView();
    public static string get_CategoryAttributeLayout();
    public static string get_CategoryAttribute3D();
    public static string get_CategoryAttributeData();
    public static string get_CategoryAttributeTitle();
    public static string get_CategoryAttributeToolTips();
    public static string get_CategoryAttributeLabels();
    public static string get_CategoryAttributeGridTickMarks();
    public static string get_CategoryAttributeLabelAppearance();
    public static string get_CategoryAttributeHeader();
    public static string get_CategoryAttributeAxes();
    public static string get_CategoryAttributeImage();
    public static string get_CategoryAttributeEmptyPoints();
    public static string get_CategoryAttributeAlignment();
    public static string get_CategoryAttributeAnnotation();
    public static string get_CategoryAttributeMarker();
    public static string get_CategoryAttributeChart();
    public static string get_CategoryAttributeLocation();
    public static string get_CategoryAttributeToolTip();
    public static string get_CategoryAttributeMap();
    public static string get_CategoryAttributeMapArea();
    public static string get_CategoryAttributeLabel();
    public static string get_CategoryAttributeShape();
    public static string get_CategoryAttributeMisc();
    public static string get_CategoryAttributeSerializer();
    public static string get_CategoryAttributeSubAxes();
    public static string get_CategoryAttributeSeriesItems();
    public static string get_CategoryAttributeDataView();
    public static string get_CategoryAttributeCharttitle();
    public static string get_CategoryAttributeLegend();
    public static string get_CategoryAttributeAction();
    public static string get_CategoryAttributeScale();
    public static string get_CategoryAttributeAnnotations();
    public static string get_CategoryAttributeAnchor();
    public static string get_CategoryAttributeBehavior();
    public static string get_CategoryAttributeCursor();
    public static string get_CategoryAttributeAnchorAxes();
    public static string get_CategoryAttributeAccessibility();
    public static string get_FormatErrorString();
    public static string get_ExceptionNameIsEmpty();
    public static string ExceptionImageLoaderUnsupportedType(string typeName);
    public static string ExceptionImageLoaderIncorrectImageUrl(string url);
    public static string ExceptionImageLoaderIncorrectImageLocation(string location);
    public static string ExceptionAnnotationNameIsNotUnique(string name);
    public static string ExceptionAnnotationNameAlreadyExistsInCollection(string name);
    public static string ExceptionAnnotationNameNotFound(string name);
    public static string ExceptionTitleNameIsNotUnique(string name);
    public static string ExceptionTitleNameAddedIsNotUnique(string name);
    public static string ExceptionTitleNameNotFound(string name);
    public static string ExceptionDataSeriesNameNotFound(string name);
    public static string ExceptionDataSeriesPointTypeUnsupported(string type);
    public static string ExceptionDataSeriesYValueIndexNotExists(string yValueIndex, string seriesName);
    public static string ExceptionDataSeriesKeywordFormatInvalid(string format);
    public static string ExceptionDataSeriesChartAreaInvalid(string chartArea, string seriesName);
    public static string ExceptionSeriesNameIsNotUnique(string name);
    public static string ExceptionSeriesNameAddedIsNotUnique(string name);
    public static string ExceptionEditorChartTypeRegistryServiceInObjectInaccessible(string objectName);
    public static string ExceptionLegendDesignerMarginObjectInvalid(string string);
    public static string ExceptionChartAreaAddedIsNotUnique(string name);
    public static string ExceptionChartAreaInsertedIsNotUnique(string name);
    public static string ExceptionChartAreaAlreadyExistsInCollection(string name);
    public static string ExceptionAxisLabelsIntervalTypeUnsupported(string type);
    public static string ExceptionSubAxisNameNotFoundShort(string name);
    public static string ExceptionSubAxisNameIsNotUnique(string name);
    public static string ExceptionNamedImageNotFound(string name);
    public static string ExceptionNamedImageAddedIsNotUnique(string name);
    public static string ExceptionNamedImageInsertedIsNotUnique(string name);
    public static string ExceptionLegendNameIsNotUnique(string name);
    public static string ExceptionLegendNotFound(string name);
    public static string ExceptionLegendAddedIsNotUnique(string name);
    public static string ExceptionLegendDockedChartAreaIsMissing(string name);
    public static string ExceptionLegendReferencedInSeriesNotFound(string seriesName, string legendName);
    public static string ExceptionLegendSeparatorTypeUnknown(string type);
    public static string ExceptionLegendCellTypeUnknown(string type);
    public static string ExceptionLegendColumnAlreadyExistsInCollection(string name);
    public static string ExceptionLegendCellNameAlreadyExistsInCollection(string name);
    public static string ExceptionLegendCellNotFound(string name);
    public static string ExceptionLegendCellColumnNotFound(string name);
    public static string ExceptionLegendCellColumnAlreadyExistsInCollection(string name);
    public static string ExceptionChartAreaNameReferenceInvalid(string chartArea1, string chartArea2);
    public static string ExceptionTraceManagerUnsupportedType(string name);
    public static string ExceptionChartTypeRegistryUnsupportedType(string name);
    public static string ExceptionChartTypeNameIsNotUnique(string name);
    public static string ExceptionChartTypeUnknown(string name);
    public static string ExceptionChartTypeRequiresYValues(string name, string yValues);
    public static string ExceptionChartTypeSecondaryYAxisUnsupported(string name);
    public static string ExceptionChartTypeSecondaryXAxisUnsupported(string name);
    public static string ExceptionChartTypeCanNotCombine(string type1, string type2);
    public static string ExceptionBorderTypeRegistryUnsupportedType(string name);
    public static string ExceptionBorderTypeNameIsNotUnique(string name);
    public static string ExceptionBorderTypeUnknown(string name);
    public static string ExceptionChartSerializerUnsupportedType(string name);
    public static string ExceptionChartSerializerDefaultConstructorUndefined(string property);
    public static string ExceptionChartSerializerTypeUnsupported(string type);
    public static string ExceptionChartSerializerPropertyNameUnknown(string property, string object);
    public static string ExceptionChartSerializerBinaryTypeUnsupported(string type);
    public static string ExceptionChartSerializerBinaryHashCodeDuplicate(string anem1, string name2);
    public static string ExceptionDataManipulatorYValuesIndexExceeded(string formula);
    public static string ExceptionDataManipulatorGroupingFormulaAlreadyDefined(string formulaName);
    public static string ExceptionDataManipulatorGroupingFormulaFormatInvalid(string formula);
    public static string ExceptionDataManipulatorGroupingFormulaNameInvalid(string name);
    public static string ExceptionChartPictureUnsupportedType(string name);
    public static string ExceptionSubAxisNameNotFound(string name);
    public static string ExceptionSubAxisNameAlreadyExistsInCollection(string name);
    public static string ExceptionChartTitleSetIsNotUnique(string name);
    public static string ExceptionChartTitleAddedIsNotUnique(string name);
    public static string ExceptionChartTitleDockedChartAreaIsMissing(string name);
    public static string ExceptionDataManagerUnsupportedType(string name);
    public static string ExceptionKeywordsRegistryUnsupportedType(string name);
    public static string ExceptionCustomAttributesRegistryUnsupportedType(string name);
    public static string ExceptionFormulaModuleNameIsNotUnique(string name);
    public static string ExceptionFormulaModuleRegistryUnsupportedType(string name);
    public static string ExceptionFormulaModuleNameUnknown(string name);
    public static string ExceptionColumnNameNotFound(string name);
    public static string ExceptionDataPointConverterUnavailableSorting(string value, string count);
    public static string ExceptionDataPointYValuesCountMismatch(string count);
    public static string ExceptionDataPointYValuesBindingCountMismatch(string count);
    public static string ExceptionDataPointYValuesSettingCountMismatch(string count);
    public static string ExceptionAttributeNameIsNotUnique(string name);
    public static string ExceptionFormulaInvalidPeriod(string name);
    public static string ExceptionFormulaNotEnoughDataPoints(string name);
    public static string ExceptionKagiAttributeFormatInvalid(string attribute);
    public static string ExceptionKagiAttributeOutOfRange(string name);
    public static string ExceptionFunnelStyleUnknown(string style);
    public static string ExceptionErrorBarTypeInvalid(string type);
    public static string ExceptionErrorBarTypeFormatInvalid(string format);
    public static string ExceptionChartCanNotCombine(string name);
    public static string ExceptionCustomAttributeValueInvalid(string value, string name);
    public static string ExceptionCustomAttributeValueInvalid2(string name);
    public static string ExceptionCustomAttributeAngleOutOfRange(string name);
    public static string ExceptionCustomAttributeIsNotInRange0to1(string name);
    public static string ExceptionCustomAttributeIsNotInRange0to100(string name);
    public static string ExceptionCustomAttributeIsNotLargerThenZiro(string name);
    public static string ExceptionCustomAttributeIsNotInRange0to50(string name);
    public static string ExceptionCustomAttributeSeriesNameNotFound(string attributeName, string seriesName);
    public static string ExceptionCustomAttributeMustBeMoreThenValue(string attributeName, string value);
    public static string ExceptionCustomAttributeMustBeBiggerThenValue(string attributeName, string value);
    public static string ExceptionCustomAttributeMustBeInRange(string attributeName, string fromValue, string toValue);
    public static string ExceptionCustomAttributeTypeUnsupported(string type);
    public static string ExceptionCustomAttributeTypeOrMaximumPossibleValueInvalid(string attributeName);
    public static string ExceptionCustomAttributeTypeOrMinimumPossibleValueUnsupported(string name);
    public static string ExceptionCustomAttributeTypeOrMinimumPossibleValueInvalid(string attributeName);
    public static string ExceptionFormulaDataSeriesNameNotFoundInCollection(string name);
    public static string ExceptionFormulaDataSeriesNameNotFound(string name);
    public static string ExceptionFormulaDataFormatInvalid(string name);
    public static string ExceptionFormulaDataSeriesAreNotAlignedDifferentXValues(string series1, string series2);
    public static string ExceptionFormulaDataSeriesAreNotAlignedDifferentDataPoints(string series1, string series2);
    public static string ExceptionFormulaNotFound(string name);
    public static string ExceptionForecastingNotEnoughDataPoints(string minimum);
    public static string ExceptionValueMustBeGreaterThan(string propertyName, string value);
    public static string ExceptionValueMustBeLessThan(string propertyName, string value);
    public static string ExceptionValueMustBeInRange(string propertyName, string fromValue, string toValue);
    public static string ExceptionHttpHandlerCanNotLoadType(string type);
    public static string ExceptionHttpHandlerImageHandlerInterfaceUnsupported(string name);
    public static string ExceptionHttpHandlerParameterUnknown(string name, string value);
    public static string ExceptionHttpHandlerTempDirectoryInvalid(string directory);
    public static string ExceptionHttpHandlerTempDirectoryUnaccesible(string directory);
    public static string ExceptionHttpHandlerStorageTypeUnsupported(string type);
    public static string EvenLogMessageChartImageFileTimeToLive(string minutes);
    public static string MessageYValueIndexInvalid(string maxIndex);
    public static string AccessibilityTitleName(string name);
    public static string AccessibilityAnnotationName(string name);
    public static string AccessibilityLegendName(string name);
    public static string AccessibilitySeriesName(string name);
    public static string AccessibilityDataPointName(int index);
    public static string AccessibilityDataPointLabelName(int index);
    public static string AccessibilityLegendTitleName(string name);
    public static string AccessibilityChartAreaName(string name);
    public static string AccessibilityChartAxisTitleName(string name);
    public static string AccessibilityChartAxisMajorGridlinesName(string name);
    public static string AccessibilityChartAxisMinorGridlinesName(string name);
    public static string ExceptionNameAlreadyExistsInCollection(string name, string collection);
    public static string ExceptionNameNotFound(string name, string collection);
}
[AttributeUsageAttribute("32767")]
internal class System.Windows.Forms.DataVisualization.Charting.SRCategoryAttribute : CategoryAttribute {
    public SRCategoryAttribute(string category);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class System.Windows.Forms.DataVisualization.Charting.SRDescriptionAttribute : DescriptionAttribute {
    private bool replaced;
    public string Description { get; }
    public SRDescriptionAttribute(string description);
    public virtual string get_Description();
}
public enum System.Windows.Forms.DataVisualization.Charting.StartFromZero : Enum {
    public int value__;
    public static StartFromZero Auto;
    public static StartFromZero Yes;
    public static StartFromZero No;
}
public class System.Windows.Forms.DataVisualization.Charting.StatisticFormula : object {
    private string _tempOutputSeriesName;
    private DataFormula _formulaData;
    internal StatisticFormula(DataFormula formulaData);
    public ZTestResult ZTest(double hypothesizedMeanDifference, double varianceFirstGroup, double varianceSecondGroup, double probability, string firstInputSeriesName, string secondInputSeriesName);
    public TTestResult TTestUnequalVariances(double hypothesizedMeanDifference, double probability, string firstInputSeriesName, string secondInputSeriesName);
    public TTestResult TTestEqualVariances(double hypothesizedMeanDifference, double probability, string firstInputSeriesName, string secondInputSeriesName);
    public TTestResult TTestPaired(double hypothesizedMeanDifference, double probability, string firstInputSeriesName, string secondInputSeriesName);
    private void RemoveEmptyPoints(string seriesName);
    public FTestResult FTest(double probability, string firstInputSeriesName, string secondInputSeriesName);
    public AnovaResult Anova(double probability, string inputSeriesNames);
    public double NormalDistribution(double zValue);
    public double InverseNormalDistribution(double probability);
    public double FDistribution(double value, int firstDegreeOfFreedom, int secondDegreeOfFreedom);
    public double InverseFDistribution(double probability, int firstDegreeOfFreedom, int secondDegreeOfFreedom);
    public double TDistribution(double value, int degreeOfFreedom, bool oneTail);
    public double InverseTDistribution(double probability, int degreeOfFreedom);
    public double Covariance(string firstInputSeriesName, string secondInputSeriesName);
    public double Correlation(string firstInputSeriesName, string secondInputSeriesName);
    public double Mean(string inputSeriesName);
    public double Median(string inputSeriesName);
    public double Variance(string inputSeriesName, bool sampleVariance);
    public double BetaFunction(double m, double n);
    public double GammaFunction(double value);
}
[DefaultPropertyAttribute("IntervalOffset")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_StripLine")]
public class System.Windows.Forms.DataVisualization.Charting.StripLine : ChartElement {
    private double _intervalOffset;
    private double _interval;
    private DateTimeIntervalType _intervalType;
    internal DateTimeIntervalType intervalOffsetType;
    internal bool interlaced;
    private double _stripWidth;
    private DateTimeIntervalType _stripWidthType;
    private Color _backColor;
    private ChartHatchStyle _backHatchStyle;
    private string _backImage;
    private ChartImageWrapMode _backImageWrapMode;
    private Color _backImageTransparentColor;
    private ChartImageAlignmentStyle _backImageAlignment;
    private GradientStyle _backGradientStyle;
    private Color _backSecondaryColor;
    private Color _borderColor;
    private int _borderWidth;
    private ChartDashStyle _borderDashStyle;
    private string _text;
    private Color _foreColor;
    private FontCache _fontCache;
    private Font _font;
    private StringAlignment _textAlignment;
    private StringAlignment _textLineAlignment;
    private string _toolTip;
    private TextOrientation _textOrientation;
    internal Axis Axis { get; }
    private bool IsTextVertical { get; }
    [BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttribute_TextOrientation")]
public TextOrientation TextOrientation { get; public set; }
    [BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeData")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.AxisLabelDateValueConverter")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_IntervalOffset")]
public double IntervalOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[RefreshPropertiesAttribute("1")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_IntervalOffsetType")]
public DateTimeIntervalType IntervalOffsetType { get; public set; }
    [BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeData")]
[DefaultValueAttribute("0")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_Interval")]
public double Interval { get; public set; }
    [RefreshPropertiesAttribute("1")]
[SRCategoryAttribute("CategoryAttributeData")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_IntervalType")]
[BindableAttribute("True")]
public DateTimeIntervalType IntervalType { get; public set; }
    [DefaultValueAttribute("0")]
[SRCategoryAttribute("CategoryAttributeData")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_StripWidth")]
[BindableAttribute("True")]
public double StripWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_StripWidthType")]
[RefreshPropertiesAttribute("1")]
public DateTimeIntervalType StripWidthType { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeBackColor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBorderColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBorderDashStyle")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartDashStyle BorderDashStyle { get; public set; }
    [DefaultValueAttribute("1")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBorderWidth")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[NotifyParentPropertyAttribute("True")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeBackImage")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ImageValueEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public string BackImage { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeImageWrapMode")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartImageWrapMode BackImageWrapMode { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeImageTransparentColor")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color BackImageTransparentColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackImageAlign")]
[BindableAttribute("True")]
public ChartImageAlignmentStyle BackImageAlignment { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.GradientEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientStyle")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
public GradientStyle BackGradientStyle { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeBackSecondaryColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public Color BackSecondaryColor { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.HatchStyleEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackHatchStyle")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeStripLine_Name")]
[BindableAttribute("False")]
[DefaultValueAttribute("StripLine")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public string Name { get; }
    [SRCategoryAttribute("CategoryAttributeTitle")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_Title")]
[NotifyParentPropertyAttribute("True")]
[BindableAttribute("True")]
public string Text { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeStripLine_TitleColor")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRCategoryAttribute("CategoryAttributeTitle")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
public Color ForeColor { get; public set; }
    [BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeTitle")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.StringAlignment", "Far")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_TitleAlignment")]
public StringAlignment TextAlignment { get; public set; }
    [SRCategoryAttribute("CategoryAttributeTitle")]
[NotifyParentPropertyAttribute("True")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.StringAlignment", "Near")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_TitleLineAlignment")]
public StringAlignment TextLineAlignment { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeTitleFont")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[SRCategoryAttribute("CategoryAttributeTitle")]
[NotifyParentPropertyAttribute("True")]
[BindableAttribute("True")]
public Font Font { get; public set; }
    [BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeToolTip")]
[DefaultValueAttribute("")]
[SRCategoryAttribute("CategoryAttributeMapArea")]
public string ToolTip { get; public set; }
    internal Axis get_Axis();
    private bool get_IsTextVertical();
    private TextOrientation GetTextOrientation();
    internal void Paint(ChartGraphics graph, CommonElements common, bool drawLinesOnly);
    private void Draw3DStrip(ChartGraphics graph, RectangleF rect, bool horizontal);
    private void PaintTitle(ChartGraphics graph, PointF point1, PointF point2);
    private void PaintTitle(ChartGraphics graph, RectangleF rect);
    public TextOrientation get_TextOrientation();
    public void set_TextOrientation(TextOrientation value);
    public double get_IntervalOffset();
    public void set_IntervalOffset(double value);
    public DateTimeIntervalType get_IntervalOffsetType();
    public void set_IntervalOffsetType(DateTimeIntervalType value);
    public double get_Interval();
    public void set_Interval(double value);
    public DateTimeIntervalType get_IntervalType();
    public void set_IntervalType(DateTimeIntervalType value);
    public double get_StripWidth();
    public void set_StripWidth(double value);
    public DateTimeIntervalType get_StripWidthType();
    public void set_StripWidthType(DateTimeIntervalType value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public ChartDashStyle get_BorderDashStyle();
    public void set_BorderDashStyle(ChartDashStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public string get_BackImage();
    public void set_BackImage(string value);
    public ChartImageWrapMode get_BackImageWrapMode();
    public void set_BackImageWrapMode(ChartImageWrapMode value);
    public Color get_BackImageTransparentColor();
    public void set_BackImageTransparentColor(Color value);
    public ChartImageAlignmentStyle get_BackImageAlignment();
    public void set_BackImageAlignment(ChartImageAlignmentStyle value);
    public GradientStyle get_BackGradientStyle();
    public void set_BackGradientStyle(GradientStyle value);
    public Color get_BackSecondaryColor();
    public void set_BackSecondaryColor(Color value);
    public ChartHatchStyle get_BackHatchStyle();
    public void set_BackHatchStyle(ChartHatchStyle value);
    public string get_Name();
    public string get_Text();
    public void set_Text(string value);
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public StringAlignment get_TextAlignment();
    public void set_TextAlignment(StringAlignment value);
    public StringAlignment get_TextLineAlignment();
    public void set_TextLineAlignment(StringAlignment value);
    public Font get_Font();
    public void set_Font(Font value);
    public void set_ToolTip(string value);
    public string get_ToolTip();
    private void Invalidate();
    protected virtual void Dispose(bool disposing);
}
[SRDescriptionAttribute("DescriptionAttributeStripLinesCollection_StripLinesCollection")]
public class System.Windows.Forms.DataVisualization.Charting.StripLinesCollection : ChartElementCollection`1<StripLine> {
    internal StripLinesCollection(Axis axis);
}
internal class System.Windows.Forms.DataVisualization.Charting.StripLineTitleAngleConverter : Int32Converter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
[FlagsAttribute]
internal enum System.Windows.Forms.DataVisualization.Charting.SurfaceNames : Enum {
    public int value__;
    public static SurfaceNames Front;
    public static SurfaceNames Back;
    public static SurfaceNames Left;
    public static SurfaceNames Right;
    public static SurfaceNames Top;
    public static SurfaceNames Bottom;
}
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_TextAnnotation")]
public class System.Windows.Forms.DataVisualization.Charting.TextAnnotation : Annotation {
    private string _text;
    private bool _isMultiline;
    internal SizeF contentSize;
    internal bool isEllipse;
    private TextBox _editTextBox;
    [SRDescriptionAttribute("DescriptionAttributeText")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("")]
public string Text { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeMultiline")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("False")]
public bool IsMultiline { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeTextFont4")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
public Font Font { get; public set; }
    [TypeConverterAttribute("System.Drawing.ColorConverter")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
public Color LineColor { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeLineWidth")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("1")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public int LineWidth { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartDashStyle LineDashStyle { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public Color BackColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.HatchStyleEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.GradientEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public GradientStyle BackGradientStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
public Color BackSecondaryColor { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeTextAnnotation_AnnotationType")]
[SerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public string AnnotationType { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeSelectionPointsStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ParenthesizePropertyNameAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
internal SelectionPointsStyle SelectionPointsStyle { get; }
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual bool get_IsMultiline();
    public virtual void set_IsMultiline(bool value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual Color get_LineColor();
    public virtual void set_LineColor(Color value);
    public virtual int get_LineWidth();
    public virtual void set_LineWidth(int value);
    public virtual ChartDashStyle get_LineDashStyle();
    public virtual void set_LineDashStyle(ChartDashStyle value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual ChartHatchStyle get_BackHatchStyle();
    public virtual void set_BackHatchStyle(ChartHatchStyle value);
    public virtual GradientStyle get_BackGradientStyle();
    public virtual void set_BackGradientStyle(GradientStyle value);
    public virtual Color get_BackSecondaryColor();
    public virtual void set_BackSecondaryColor(Color value);
    public virtual string get_AnnotationType();
    internal virtual SelectionPointsStyle get_SelectionPointsStyle();
    internal virtual void Paint(Chart chart, ChartGraphics graphics);
    internal RectangleF DrawText(ChartGraphics graphics, RectangleF textPosition, bool noSpacingForCenteredText, bool getTextPosition);
    public void StopTextEditing();
    private void OnTextBoxLostFocus(object sender, EventArgs e);
    private void OnTextBoxKeyDown(object sender, KeyEventArgs e);
    public void BeginTextEditing();
    internal virtual RectangleF GetContentPosition();
    internal virtual RectangleF GetTextSpacing(Boolean& annotationRelative);
    public virtual void EndPlacement();
}
public enum System.Windows.Forms.DataVisualization.Charting.TextAntiAliasingQuality : Enum {
    public int value__;
    public static TextAntiAliasingQuality Normal;
    public static TextAntiAliasingQuality High;
    public static TextAntiAliasingQuality SystemDefault;
}
public enum System.Windows.Forms.DataVisualization.Charting.TextOrientation : Enum {
    public int value__;
    public static TextOrientation Auto;
    public static TextOrientation Horizontal;
    public static TextOrientation Rotated90;
    public static TextOrientation Rotated270;
    public static TextOrientation Stacked;
}
public enum System.Windows.Forms.DataVisualization.Charting.TextStyle : Enum {
    public int value__;
    public static TextStyle Default;
    public static TextStyle Shadow;
    public static TextStyle Emboss;
    public static TextStyle Embed;
    public static TextStyle Frame;
}
[DefaultPropertyAttribute("Enabled")]
[SRDescriptionAttribute("DescriptionAttributeTickMark_TickMark")]
public class System.Windows.Forms.DataVisualization.Charting.TickMark : Grid {
    private TickMarkStyle _style;
    private float _size;
    [SRDescriptionAttribute("DescriptionAttributeTickMark_Style")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TickMarkStyle TickMarkStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("1")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTickMark_Size")]
public float Size { get; public set; }
    internal TickMark(Axis axis, bool major);
    internal void Paint(ChartGraphics graph, bool backElements);
    private double GetLogMinimum(double current, Series axisSeries);
    internal void PaintCustom(ChartGraphics graph, bool backElements);
    internal void Draw3DTickLine(ChartGraphics graph, PointF point1, PointF point2, bool backElements);
    public TickMarkStyle get_TickMarkStyle();
    public void set_TickMarkStyle(TickMarkStyle value);
    public float get_Size();
    public void set_Size(float value);
}
public enum System.Windows.Forms.DataVisualization.Charting.TickMarkStyle : Enum {
    public int value__;
    public static TickMarkStyle None;
    public static TickMarkStyle OutsideArea;
    public static TickMarkStyle InsideArea;
    public static TickMarkStyle AcrossAxis;
}
[SRDescriptionAttribute("DescriptionAttributeTitle5")]
public class System.Windows.Forms.DataVisualization.Charting.Title : ChartNamedElement {
    internal int titleBorderSpacing;
    private string _text;
    private TextStyle _style;
    private ElementPosition _position;
    private bool _visible;
    private Color _backColor;
    private ChartHatchStyle _backHatchStyle;
    private string _backImage;
    private ChartImageWrapMode _backImageWrapMode;
    private Color _backImageTransparentColor;
    private ChartImageAlignmentStyle _backImageAlignment;
    private GradientStyle _backGradientStyle;
    private Color _backSecondaryColor;
    private int _shadowOffset;
    private Color _shadowColor;
    private Color _borderColor;
    private int _borderWidth;
    private ChartDashStyle _borderDashStyle;
    private FontCache _fontCache;
    private Font _font;
    private Color _foreColor;
    private ContentAlignment _alignment;
    private Docking _docking;
    private string _dockedToChartArea;
    private bool _isDockedInsideChartArea;
    private int _dockingOffset;
    private string _toolTip;
    private TextOrientation _textOrientation;
    [SRDescriptionAttribute("DescriptionAttribute_TextOrientation")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[NotifyParentPropertyAttribute("True")]
[BindableAttribute("True")]
public TextOrientation TextOrientation { get; public set; }
    [ParenthesizePropertyNameAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTitle_Visible")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeDocking")]
[BindableAttribute("True")]
[DefaultValueAttribute("NotSet")]
[SRDescriptionAttribute("DescriptionAttributeTitle_DockToChartArea")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.LegendAreaNameConverter")]
public string DockedToChartArea { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("True")]
[SRCategoryAttribute("CategoryAttributeDocking")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTitle_DockInsideChartArea")]
public bool IsDockedInsideChartArea { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTitle_DockOffset")]
[SRCategoryAttribute("CategoryAttributeDocking")]
[DefaultValueAttribute("0")]
[BindableAttribute("True")]
public int DockingOffset { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeTitle_Position")]
[TypeConverterAttribute("System.Windows.Forms.DataVisualization.Charting.ElementPositionConverter")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[SerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public ElementPosition Position { get; public set; }
    [DefaultValueAttribute("")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[ParenthesizePropertyNameAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTitle_Text")]
public string Text { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeTextStyle")]
public TextStyle TextStyle { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DescriptionAttributeBackColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[NotifyParentPropertyAttribute("True")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color BackColor { get; public set; }
    [TypeConverterAttribute("System.Drawing.ColorConverter")]
[SRDescriptionAttribute("DescriptionAttributeBorderColor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color BorderColor { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBorderDashStyle")]
public ChartDashStyle BorderDashStyle { get; public set; }
    [DefaultValueAttribute("1")]
[NotifyParentPropertyAttribute("True")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBorderWidth")]
public int BorderWidth { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeBackImage")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ImageValueEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public string BackImage { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeImageWrapMode")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
public ChartImageWrapMode BackImageWrapMode { get; public set; }
    [BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DescriptionAttributeImageTransparentColor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color BackImageTransparentColor { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeBackImageAlign")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[NotifyParentPropertyAttribute("True")]
public ChartImageAlignmentStyle BackImageAlignment { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeBackGradientStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.GradientEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
public GradientStyle BackGradientStyle { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackSecondaryColor")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
public Color BackSecondaryColor { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.HatchStyleEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackHatchStyle")]
[BindableAttribute("True")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[NotifyParentPropertyAttribute("True")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeTitle_Font")]
public Font Font { get; public set; }
    [BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeTitle_Color")]
public Color ForeColor { get; public set; }
    [BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttributeDocking")]
[DefaultValueAttribute]
[SRDescriptionAttribute("DescriptionAttributeTitle_Alignment")]
public ContentAlignment Alignment { get; public set; }
    [BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeDocking")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeTitle_Docking")]
public Docking Docking { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[NotifyParentPropertyAttribute("True")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeShadowOffset")]
public int ShadowOffset { get; public set; }
    [TypeConverterAttribute("System.Drawing.ColorConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "128, 0, 0, 0")]
[SRDescriptionAttribute("DescriptionAttributeShadowColor")]
[NotifyParentPropertyAttribute("True")]
public Color ShadowColor { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeToolTip")]
[SRCategoryAttribute("CategoryAttributeToolTip")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    internal bool BackGroundIsVisible { get; }
    private bool IsTextVertical { get; }
    public Title(string text);
    public Title(string text, Docking docking);
    public Title(string text, Docking docking, Font font, Color color);
    private void Initialize(string text, Docking docking, Font font, Color color);
    public TextOrientation get_TextOrientation();
    public void set_TextOrientation(TextOrientation value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public string get_DockedToChartArea();
    public void set_DockedToChartArea(string value);
    public bool get_IsDockedInsideChartArea();
    public void set_IsDockedInsideChartArea(bool value);
    public int get_DockingOffset();
    public void set_DockingOffset(int value);
    public ElementPosition get_Position();
    public void set_Position(ElementPosition value);
    internal bool ShouldSerializePosition();
    public string get_Text();
    public void set_Text(string value);
    public TextStyle get_TextStyle();
    public void set_TextStyle(TextStyle value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public ChartDashStyle get_BorderDashStyle();
    public void set_BorderDashStyle(ChartDashStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public string get_BackImage();
    public void set_BackImage(string value);
    public ChartImageWrapMode get_BackImageWrapMode();
    public void set_BackImageWrapMode(ChartImageWrapMode value);
    public Color get_BackImageTransparentColor();
    public void set_BackImageTransparentColor(Color value);
    public ChartImageAlignmentStyle get_BackImageAlignment();
    public void set_BackImageAlignment(ChartImageAlignmentStyle value);
    public GradientStyle get_BackGradientStyle();
    public void set_BackGradientStyle(GradientStyle value);
    public Color get_BackSecondaryColor();
    public void set_BackSecondaryColor(Color value);
    public ChartHatchStyle get_BackHatchStyle();
    public void set_BackHatchStyle(ChartHatchStyle value);
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public ContentAlignment get_Alignment();
    public void set_Alignment(ContentAlignment value);
    public Docking get_Docking();
    public void set_Docking(Docking value);
    public int get_ShadowOffset();
    public void set_ShadowOffset(int value);
    public Color get_ShadowColor();
    public void set_ShadowColor(Color value);
    public void set_ToolTip(string value);
    public string get_ToolTip();
    internal bool get_BackGroundIsVisible();
    private bool get_IsTextVertical();
    private TextOrientation GetTextOrientation();
    internal bool IsVisible();
    internal void Invalidate(bool invalidateTitleOnly);
    internal void Paint(ChartGraphics chartGraph);
    internal static void DrawStringWithStyle(ChartGraphics chartGraph, string titleText, TextStyle textStyle, Font font, RectangleF absPosition, Color foreColor, Color shadowColor, int shadowOffset, StringFormat format, TextOrientation orientation);
    internal void CalcTitlePosition(ChartGraphics chartGraph, RectangleF& chartAreasRectangle, RectangleF& frameTitlePosition, float elementSpacing);
    protected virtual void Dispose(bool disposing);
}
[SRDescriptionAttribute("DescriptionAttributeTitles")]
public class System.Windows.Forms.DataVisualization.Charting.TitleCollection : ChartNamedElementCollection`1<Title> {
    internal TitleCollection(IChartElement parent);
    public Title Add(string name);
    internal static void CalcOutsideTitlePosition(ChartPicture chartPicture, ChartGraphics chartGraph, ChartArea area, RectangleF& chartAreasRectangle, float elementSpacing);
    internal static void CalcInsideTitlePosition(ChartPicture chartPicture, ChartGraphics chartGraph, float elementSpacing);
    internal void ChartAreaNameReferenceChanged(object sender, NameReferenceChangedEventArgs e);
}
public class System.Windows.Forms.DataVisualization.Charting.ToolTipEventArgs : EventArgs {
    private int x;
    private int y;
    private string text;
    private HitTestResult result;
    [SRDescriptionAttribute("DescriptionAttributeToolTipEventArgs_X")]
public int X { get; }
    [SRDescriptionAttribute("DescriptionAttributeToolTipEventArgs_HitTestResult")]
public HitTestResult HitTestResult { get; }
    [SRDescriptionAttribute("DescriptionAttributeToolTipEventArgs_Y")]
public int Y { get; }
    [SRDescriptionAttribute("DescriptionAttributeToolTipEventArgs_Text")]
public string Text { get; public set; }
    public ToolTipEventArgs(int x, int y, string text, HitTestResult result);
    public int get_X();
    public HitTestResult get_HitTestResult();
    public int get_Y();
    public string get_Text();
    public void set_Text(string value);
}
public class System.Windows.Forms.DataVisualization.Charting.TTestResult : object {
    internal double firstSeriesMean;
    internal double secondSeriesMean;
    internal double firstSeriesVariance;
    internal double secondSeriesVariance;
    internal double tValue;
    internal double degreeOfFreedom;
    internal double probabilityTOneTail;
    internal double tCriticalValueOneTail;
    internal double probabilityTTwoTail;
    internal double tCriticalValueTwoTail;
    public double FirstSeriesMean { get; }
    public double SecondSeriesMean { get; }
    public double FirstSeriesVariance { get; }
    public double SecondSeriesVariance { get; }
    public double TValue { get; }
    public double DegreeOfFreedom { get; }
    public double ProbabilityTOneTail { get; }
    public double TCriticalValueOneTail { get; }
    public double ProbabilityTTwoTail { get; }
    public double TCriticalValueTwoTail { get; }
    public double get_FirstSeriesMean();
    public double get_SecondSeriesMean();
    public double get_FirstSeriesVariance();
    public double get_SecondSeriesVariance();
    public double get_TValue();
    public double get_DegreeOfFreedom();
    public double get_ProbabilityTOneTail();
    public double get_TCriticalValueOneTail();
    public double get_ProbabilityTTwoTail();
    public double get_TCriticalValueTwoTail();
}
internal class System.Windows.Forms.DataVisualization.Charting.Utilities.BinaryFormatSerializer : SerializerBase {
    internal virtual void Serialize(object objectToSerialize, object destination);
    internal void Serialize(object objectToSerialize, string fileName);
    internal void Serialize(object objectToSerialize, Stream stream);
    internal void Serialize(object objectToSerialize, BinaryWriter writer);
    internal virtual void SerializeObject(object objectToSerialize, object parent, string elementName, BinaryWriter writer);
    private void SerializeDataPoint(object objectToSerialize, string elementName, BinaryWriter writer);
    internal virtual void SerializeCollection(object objectToSerialize, string elementName, BinaryWriter writer);
    internal virtual void SerializeProperty(object objectToSerialize, object parent, string elementName, BinaryWriter writer);
    internal void WritePropertyValue(object obj, string elementName, BinaryWriter writer);
    internal void CheckPropertiesID(ArrayList propNames);
    internal virtual void Deserialize(object objectToDeserialize, object source);
    public void Deserialize(object objectToDeserialize, string fileName);
    public void Deserialize(object objectToDeserialize, Stream stream);
    public void Deserialize(object objectToDeserialize, BinaryReader reader);
    protected virtual int DeserializeObject(object objectToDeserialize, object parent, string elementName, BinaryReader reader, bool skipElement);
    private bool SetPropertyValue(object obj, PropertyInfo pi, BinaryReader reader, bool skipElement);
    private PropertyInfo ReadPropertyInfo(object objectToDeserialize, object parent, PropertyInfo[] properties, BinaryReader reader);
}
internal class System.Windows.Forms.DataVisualization.Charting.Utilities.ChartAccessibleObject : ControlAccessibleObject {
    private Chart _chart;
    private List`1<AccessibleObject> _chartAccessibleObjectList;
    private Point _chartScreenPosition;
    private PointF _chartScale;
    public Point ChartScreenPosition { get; }
    public AccessibleRole Role { get; }
    public ChartAccessibleObject(Chart chart);
    public Point get_ChartScreenPosition();
    public virtual AccessibleRole get_Role();
    public void ResetChildren();
    public virtual int GetChildCount();
    public virtual AccessibleObject GetChild(int index);
    private void FillChartAccessibleObjectList();
    public AccessibleObject NavigateFromChild(object chartChildElement, ChartElementType chartElementType, AccessibleNavigation direction);
    public void SelectChild(object chartChildElement, ChartElementType chartElementType, AccessibleSelection selection);
    public bool IsChildSelected(object chartChildElement, ChartElementType chartElementType);
    public Rectangle GetChildBounds(object chartElement, ChartElementType chartElementType, string seriesName, int pointIndex);
}
internal class System.Windows.Forms.DataVisualization.Charting.Utilities.ChartChildAccessibleObject : AccessibleObject {
    internal object chartChildObject;
    internal ChartElementType chartChildObjectType;
    internal ChartAccessibleObject chartAccessibleObject;
    internal AccessibleObject chartAccessibleParentObject;
    internal AccessibleRole role;
    internal string name;
    internal string objectValue;
    protected string seriesName;
    internal int dataPointIndex;
    public Rectangle Bounds { get; }
    public AccessibleObject Parent { get; }
    public string Value { get; public set; }
    public AccessibleRole Role { get; }
    public AccessibleStates State { get; }
    public string Name { get; public set; }
    public ChartChildAccessibleObject(ChartAccessibleObject chartAccessibleObject, object chartChildObject, ChartElementType chartChildObjectType, string name, string objectValue, AccessibleRole role);
    public ChartChildAccessibleObject(ChartAccessibleObject chartAccessibleObject, object chartChildObject, ChartElementType chartChildObjectType, string name, string objectValue, AccessibleRole role, string seriesName, int pointIndex);
    public virtual Rectangle get_Bounds();
    public virtual AccessibleObject get_Parent();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual AccessibleRole get_Role();
    public virtual AccessibleStates get_State();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual AccessibleObject Navigate(AccessibleNavigation direction);
    public virtual void Select(AccessibleSelection selection);
}
internal class System.Windows.Forms.DataVisualization.Charting.Utilities.ChartChildChartAreaAccessibleObject : ChartChildAccessibleObject {
    private List`1<ChartChildAccessibleObject> _childList;
    public ChartChildChartAreaAccessibleObject(ChartAccessibleObject chartAccessibleObject, ChartArea chartArea);
    private void AddAxisAccessibilityObjects(ChartAccessibleObject chartAccessibleObject, Axis axis);
    public virtual AccessibleObject GetChild(int index);
    public virtual int GetChildCount();
}
internal class System.Windows.Forms.DataVisualization.Charting.Utilities.ChartChildLegendAccessibleObject : ChartChildAccessibleObject {
    private List`1<ChartChildAccessibleObject> _childList;
    public ChartChildLegendAccessibleObject(ChartAccessibleObject chartAccessibleObject, Legend legend);
    public virtual AccessibleObject GetChild(int index);
    public virtual int GetChildCount();
}
internal class System.Windows.Forms.DataVisualization.Charting.Utilities.ChartChildSeriesAccessibleObject : ChartChildAccessibleObject {
    private List`1<ChartChildAccessibleObject> _childList;
    public ChartChildSeriesAccessibleObject(ChartAccessibleObject chartAccessibleObject, Series series);
    public virtual AccessibleObject GetChild(int index);
    public virtual int GetChildCount();
}
internal static class System.Windows.Forms.DataVisualization.Charting.Utilities.ChartPaletteColors : object {
    private static Color[] _colorsGrayScale;
    private static Color[] _colorsDefault;
    private static Color[] _colorsPastel;
    private static Color[] _colorsEarth;
    private static Color[] _colorsSemiTransparent;
    private static Color[] _colorsLight;
    private static Color[] _colorsExcel;
    private static Color[] _colorsBerry;
    private static Color[] _colorsChocolate;
    private static Color[] _colorsFire;
    private static Color[] _colorsSeaGreen;
    private static Color[] _colorsBrightPastel;
    private static ChartPaletteColors();
    private static Color[] InitializeGrayScaleColors();
    public static Color[] GetPaletteColors(ChartColorPalette palette);
}
internal enum System.Windows.Forms.DataVisualization.Charting.Utilities.CircularAreaDrawingStyles : Enum {
    public int value__;
    public static CircularAreaDrawingStyles Polygon;
    public static CircularAreaDrawingStyles Circle;
}
internal class System.Windows.Forms.DataVisualization.Charting.Utilities.CustomPropertyInfo : object {
    public string Name;
    public Type ValueType;
    public object DefaultValue;
    public string Description;
    public SeriesChartType[] AppliesToChartType;
    public bool AppliesToSeries;
    public bool AppliesToDataPoint;
    public bool AppliesTo3D;
    public bool AppliesTo2D;
    public object MinValue;
    public object MaxValue;
    public CustomPropertyInfo(string name, Type valueType, object defaultValue, string description, SeriesChartType[] appliesToChartType, bool appliesToSeries, bool appliesToDataPoint);
}
internal static class System.Windows.Forms.DataVisualization.Charting.Utilities.CustomPropertyName : object {
    internal static string DrawSideBySide;
    internal static string EmptyPointValue;
    internal static string BarLabelStyle;
    internal static string StackedGroupName;
    internal static string DrawingStyle;
    internal static string PointWidth;
    internal static string PixelPointWidth;
    internal static string MinPixelPointWidth;
    internal static string MaxPixelPointWidth;
    internal static string PriceUpColor;
    internal static string PriceDownColor;
    internal static string LabelValueType;
    internal static string OpenCloseStyle;
    internal static string ShowOpenClose;
    internal static string BubbleScaleMin;
    internal static string BubbleScaleMax;
    internal static string BubbleMaxSize;
    internal static string BubbleMinSize;
    internal static string BubbleUseSizeForLabel;
    internal static string PieDrawingStyle;
    internal static string CollectedStyle;
    internal static string CollectedThreshold;
    internal static string CollectedThresholdUsePercent;
    internal static string CollectedSliceExploded;
    internal static string CollectedLabel;
    internal static string CollectedLegendText;
    internal static string CollectedToolTip;
    internal static string CollectedColor;
    internal static string CollectedChartShowLegend;
    internal static string CollectedChartShowLabels;
    internal static string PieStartAngle;
    internal static string Exploded;
    internal static string LabelsRadialLineSize;
    internal static string LabelsHorizontalLineSize;
    internal static string PieLabelStyle;
    internal static string MinimumRelativePieSize;
    internal static string _3DLabelLineSize;
    internal static string PieLineColor;
    internal static string PieAutoAxisLabels;
    internal static string DoughnutRadius;
    internal static string LabelStyle;
    internal static string ShowMarkerLines;
    internal static string LineTension;
    internal static string PixelPointDepth;
    internal static string PixelPointGapDepth;
    internal static string PermittedPixelError;
    internal static string CircularLabelsStyle;
    internal static string PolarDrawingStyle;
    internal static string AreaDrawingStyle;
    internal static string RadarDrawingStyle;
    internal static string BoxPlotPercentile;
    internal static string BoxPlotWhiskerPercentile;
    internal static string BoxPlotShowAverage;
    internal static string BoxPlotShowMedian;
    internal static string BoxPlotShowUnusualValues;
    internal static string BoxPlotSeries;
    internal static string ErrorBarStyle;
    internal static string ErrorBarCenterMarkerStyle;
    internal static string ErrorBarSeries;
    internal static string ErrorBarType;
    internal static string UsedYValueHigh;
    internal static string UsedYValueLow;
    internal static string BoxSize;
    internal static string ProportionalSymbols;
    internal static string ReversalAmount;
    internal static string UsedYValue;
    internal static string NumberOfLinesInBreak;
    internal static string FunnelLabelStyle;
    internal static string FunnelNeckWidth;
    internal static string FunnelNeckHeight;
    internal static string FunnelMinPointHeight;
    internal static string Funnel3DRotationAngle;
    internal static string FunnelPointGap;
    internal static string Funnel3DDrawingStyle;
    internal static string FunnelStyle;
    internal static string FunnelInsideLabelAlignment;
    internal static string FunnelOutsideLabelPlacement;
    internal static string CalloutLineColor;
    internal static string PyramidLabelStyle;
    internal static string PyramidMinPointHeight;
    internal static string Pyramid3DRotationAngle;
    internal static string PyramidPointGap;
    internal static string Pyramid3DDrawingStyle;
    internal static string PyramidInsideLabelAlignment;
    internal static string PyramidOutsideLabelPlacement;
    internal static string PyramidValueType;
}
internal class System.Windows.Forms.DataVisualization.Charting.Utilities.CustomPropertyRegistry : object {
    internal ArrayList registeredCustomProperties;
    internal static int MaxValueOfPixelAttribute;
    private static CustomPropertyRegistry();
    [EditorBrowsableAttribute("1")]
private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    private void RegisterProperties();
    public void Register(CustomPropertyInfo customPropertyInfo);
}
internal enum System.Windows.Forms.DataVisualization.Charting.Utilities.EmptyPointTypes : Enum {
    public int value__;
    public static EmptyPointTypes Average;
    public static EmptyPointTypes Zero;
}
internal enum System.Windows.Forms.DataVisualization.Charting.Utilities.ErrorBarMarkerStyles : Enum {
    public int value__;
    public static ErrorBarMarkerStyles None;
    public static ErrorBarMarkerStyles Square;
    public static ErrorBarMarkerStyles Circle;
    public static ErrorBarMarkerStyles Diamond;
    public static ErrorBarMarkerStyles Triangle;
    public static ErrorBarMarkerStyles Cross;
    public static ErrorBarMarkerStyles Star4;
    public static ErrorBarMarkerStyles Star5;
    public static ErrorBarMarkerStyles Star6;
    public static ErrorBarMarkerStyles Star10;
    public static ErrorBarMarkerStyles Line;
}
internal class System.Windows.Forms.DataVisualization.Charting.Utilities.ImageLoader : object {
    private Hashtable _imageData;
    private IServiceContainer _serviceContainer;
    public ImageLoader(IServiceContainer container);
    [EditorBrowsableAttribute("1")]
private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    public sealed virtual void Dispose();
    public Image LoadImage(string imageURL);
    public Image LoadImage(string imageURL, bool saveImage);
    private Image LoadFromFile(string fileName);
    internal bool GetAdjustedImageSize(string name, Graphics graphics, SizeF& size);
    internal static void GetAdjustedImageSize(Image image, Graphics graphics, SizeF& size);
    internal static bool DoDpisMatch(Image image, Graphics graphics);
    internal static Image GetScaledImage(Image image, Graphics graphics);
}
internal class System.Windows.Forms.DataVisualization.Charting.Utilities.KeywordInfo : object {
    public string Name;
    public string Keyword;
    public string KeywordAliases;
    public string Description;
    public string AppliesToTypes;
    public string AppliesToProperties;
    public bool SupportsFormatting;
    public bool SupportsValueIndex;
    public KeywordInfo(string name, string keyword, string keywordAliases, string description, string appliesToTypes, string appliesToProperties, bool supportsFormatting, bool supportsValueIndex);
    public virtual string ToString();
    public String[] GetKeywords();
}
internal static class System.Windows.Forms.DataVisualization.Charting.Utilities.KeywordName : object {
    internal static string Index;
    internal static string ValX;
    internal static string ValY;
    internal static string Val;
    internal static string Total;
    internal static string Percent;
    internal static string Label;
    internal static string AxisLabel;
    internal static string LegendText;
    internal static string SeriesName;
    internal static string Ser;
    internal static string Avg;
    internal static string Max;
    internal static string Min;
    internal static string Last;
    internal static string First;
    internal static string CustomProperty;
}
internal class System.Windows.Forms.DataVisualization.Charting.Utilities.KeywordsRegistry : object {
    internal ArrayList registeredKeywords;
    [EditorBrowsableAttribute("1")]
private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    private void RegisterKeywords();
    public void Register(string name, string keyword, string keywordAliases, string description, string appliesToTypes, string appliesToProperties, bool supportsFormatting, bool supportsValueIndex);
}
[FlagsAttribute]
internal enum System.Windows.Forms.DataVisualization.Charting.Utilities.LabelAlignments : Enum {
    public int value__;
    public static LabelAlignments Auto;
    public static LabelAlignments Top;
    public static LabelAlignments Bottom;
    public static LabelAlignments Right;
    public static LabelAlignments Left;
    public static LabelAlignments TopLeft;
    public static LabelAlignments TopRight;
    public static LabelAlignments BottomLeft;
    public static LabelAlignments BottomRight;
    public static LabelAlignments Center;
}
internal enum System.Windows.Forms.DataVisualization.Charting.Utilities.PolarDrawingStyles : Enum {
    public int value__;
    public static PolarDrawingStyles Line;
    public static PolarDrawingStyles Marker;
}
internal enum System.Windows.Forms.DataVisualization.Charting.Utilities.SerializationStatus : Enum {
    public int value__;
    public static SerializationStatus None;
    public static SerializationStatus Loading;
    public static SerializationStatus Saving;
    public static SerializationStatus Resetting;
}
internal enum System.Windows.Forms.DataVisualization.Charting.Utilities.SerializationVisibility : Enum {
    public int value__;
    public static SerializationVisibility Hidden;
    public static SerializationVisibility Attribute;
    public static SerializationVisibility Element;
}
[AttributeUsageAttribute("32767")]
internal class System.Windows.Forms.DataVisualization.Charting.Utilities.SerializationVisibilityAttribute : Attribute {
    private SerializationVisibility _visibility;
    public SerializationVisibility Visibility { get; }
    internal SerializationVisibilityAttribute(SerializationVisibility visibility);
    public SerializationVisibility get_Visibility();
}
internal abstract class System.Windows.Forms.DataVisualization.Charting.Utilities.SerializerBase : object {
    private bool _isUnknownAttributeIgnored;
    private bool _isTemplateMode;
    private bool _isResetWhenLoading;
    private string _serializableContent;
    private string _nonSerializableContent;
    internal static FontConverter fontConverter;
    internal static ColorConverter colorConverter;
    protected static StringComparer hashCodeProvider;
    private HybridDictionary _converterDict;
    private ArrayList serializableContentList;
    private ArrayList nonSerializableContentList;
    internal bool IsUnknownAttributeIgnored { get; internal set; }
    internal bool IsTemplateMode { get; internal set; }
    internal bool IsResetWhenLoading { get; internal set; }
    internal string SerializableContent { get; internal set; }
    internal string NonSerializableContent { get; internal set; }
    private static SerializerBase();
    internal bool get_IsUnknownAttributeIgnored();
    internal void set_IsUnknownAttributeIgnored(bool value);
    internal bool get_IsTemplateMode();
    internal void set_IsTemplateMode(bool value);
    internal bool get_IsResetWhenLoading();
    internal void set_IsResetWhenLoading(bool value);
    internal string get_SerializableContent();
    internal void set_SerializableContent(string value);
    internal string get_NonSerializableContent();
    internal void set_NonSerializableContent(string value);
    internal virtual void ResetObjectProperties(object objectToReset);
    internal virtual void ResetObjectProperties(object objectToReset, object parent, string elementName);
    internal abstract virtual void Serialize(object objectToSerialize, object destination);
    internal abstract virtual void Deserialize(object objectToDeserialize, object source);
    internal static string FontToString(Font font);
    internal static Font FontFromString(string fontString);
    internal static short GetStringHashCode(string str);
    internal short ReadHashID(BinaryReader reader);
    internal bool IsChartBaseProperty(object objectToSerialize, object parent, PropertyInfo pi);
    internal static string ImageToString(Image image);
    internal static Image ImageFromString(string data);
    internal string GetObjectName(object obj);
    internal object GetListNewItem(IList list, string itemTypeName, String& itemName, Boolean& reusedObject);
    internal bool ShouldSerializeAsAttribute(PropertyInfo pi, object parent);
    internal bool SerializeICollAsAtribute(PropertyInfo pi, object objectToSerialize);
    internal bool IsSerializableContent(string propertyName, object parent);
    private bool IsPropertyInList(ArrayList contentList, string className, string propertyName, Int32& classFitType, Int32& propertyFitType);
    private bool NameMatchMask(ItemInfo itemInfo, string objectName, Int32& type);
    internal TypeConverter FindConverter(PropertyDescriptor pd);
    internal TypeConverter FindConverterByType(TypeConverterAttribute attr);
    private ArrayList GetSerializableContentList();
    private ArrayList GetNonSerializableContentList();
    private void FillContentList(ArrayList list, string content);
    private void CheckWildCars(ItemInfo info);
}
internal enum System.Windows.Forms.DataVisualization.Charting.Utilities.StockLabelValueTypes : Enum {
    public int value__;
    public static StockLabelValueTypes High;
    public static StockLabelValueTypes Low;
    public static StockLabelValueTypes Open;
    public static StockLabelValueTypes Close;
}
internal enum System.Windows.Forms.DataVisualization.Charting.Utilities.StockShowOpenCloseTypes : Enum {
    public int value__;
    public static StockShowOpenCloseTypes Both;
    public static StockShowOpenCloseTypes Open;
    public static StockShowOpenCloseTypes Close;
}
internal static class System.Windows.Forms.DataVisualization.Charting.Utilities.ValueConverter : object {
    public static string FormatValue(Chart chart, object obj, object objTag, double value, string format, ChartValueType valueType, ChartElementType elementType);
}
internal class System.Windows.Forms.DataVisualization.Charting.Utilities.XmlFormatSerializer : SerializerBase {
    internal void Serialize(object objectToSerialize, Stream stream);
    internal void Serialize(object objectToSerialize, XmlWriter xmlWriter);
    internal void Serialize(object objectToSerialize, TextWriter textWriter);
    internal void Serialize(object objectToSerialize, string fileName);
    internal virtual void Serialize(object objectToSerialize, object writer);
    protected virtual void SerializeObject(object objectToSerialize, object parent, string elementName, XmlNode xmlParentNode, XmlDocument xmlDocument);
    internal void SerializeDataPoint(object objectToSerialize, XmlNode xmlParentNode, XmlDocument xmlDocument);
    protected virtual void SerializeCollection(object objectToSerialize, string elementName, XmlNode xmlParentNode, XmlDocument xmlDocument);
    protected virtual void SerializeProperty(object objectToSerialize, object parent, string elementName, XmlNode xmlParentNode, XmlDocument xmlDocument);
    protected string GetXmlValue(object obj, object parent, string elementName);
    private void RemoveEmptyChildNodes(XmlNode xmlNode);
    internal void Deserialize(object objectToDeserialize, Stream stream);
    internal void Deserialize(object objectToDeserialize, XmlReader xmlReader);
    internal void Deserialize(object objectToDeserialize, TextReader textReader);
    internal void Deserialize(object objectToDeserialize, string fileName);
    internal virtual void Deserialize(object objectToDeserialize, object reader);
    internal virtual int DeserializeObject(object objectToDeserialize, object parent, string elementName, XmlNode xmlParentNode, XmlDocument xmlDocument);
    private void SetXmlValue(object obj, string attrName, string attrValue);
}
[SRDescriptionAttribute("DescriptionAttributeVerticalLineAnnotation_VerticalLineAnnotation")]
public class System.Windows.Forms.DataVisualization.Charting.VerticalLineAnnotation : LineAnnotation {
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationType")]
[BindableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeMisc")]
public string AnnotationType { get; }
    public virtual string get_AnnotationType();
    internal virtual void AdjustLineCoordinates(PointF& point1, PointF& point2, RectangleF& selectionRect);
    internal virtual RectangleF GetContentPosition();
}
public class System.Windows.Forms.DataVisualization.Charting.ViewEventArgs : EventArgs {
    private Axis _axis;
    private double _newPosition;
    private double _newSize;
    private DateTimeIntervalType _newSizeType;
    [SRDescriptionAttribute("DescriptionAttributeAxis")]
public Axis Axis { get; }
    [SRDescriptionAttribute("DescriptionAttributeChartArea")]
public ChartArea ChartArea { get; }
    [SRDescriptionAttribute("DescriptionAttributeViewEventArgs_NewPosition")]
public double NewPosition { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeViewEventArgs_NewSize")]
public double NewSize { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeViewEventArgs_NewSizeType")]
public DateTimeIntervalType NewSizeType { get; public set; }
    public ViewEventArgs(Axis axis, double newPosition);
    public ViewEventArgs(Axis axis, double newPosition, double newSize, DateTimeIntervalType newSizeType);
    public Axis get_Axis();
    public ChartArea get_ChartArea();
    public double get_NewPosition();
    public void set_NewPosition(double value);
    public double get_NewSize();
    public void set_NewSize(double value);
    public DateTimeIntervalType get_NewSizeType();
    public void set_NewSizeType(DateTimeIntervalType value);
}
public class System.Windows.Forms.DataVisualization.Charting.ZTestResult : object {
    internal double firstSeriesMean;
    internal double secondSeriesMean;
    internal double firstSeriesVariance;
    internal double secondSeriesVariance;
    internal double zValue;
    internal double probabilityZOneTail;
    internal double zCriticalValueOneTail;
    internal double probabilityZTwoTail;
    internal double zCriticalValueTwoTail;
    public double FirstSeriesMean { get; }
    public double SecondSeriesMean { get; }
    public double FirstSeriesVariance { get; }
    public double SecondSeriesVariance { get; }
    public double ZValue { get; }
    public double ProbabilityZOneTail { get; }
    public double ZCriticalValueOneTail { get; }
    public double ProbabilityZTwoTail { get; }
    public double ZCriticalValueTwoTail { get; }
    public double get_FirstSeriesMean();
    public double get_SecondSeriesMean();
    public double get_FirstSeriesVariance();
    public double get_SecondSeriesVariance();
    public double get_ZValue();
    public double get_ProbabilityZOneTail();
    public double get_ZCriticalValueOneTail();
    public double get_ProbabilityZTwoTail();
    public double get_ZCriticalValueTwoTail();
}
internal static class ThisAssembly : object {
    internal static string Title;
    internal static string Description;
    internal static string DefaultAlias;
    internal static string Copyright;
    internal static string Version;
    internal static string InformationalVersion;
    internal static int DailyBuildNumber;
}
