[ExtensionAttribute]
internal static class Microsoft.CodeAnalysis.Analyzers.AttributeHelpers : object {
    internal static IEnumerable`1<AttributeData> GetApplicableAttributes(INamedTypeSymbol type);
    [ExtensionAttribute]
internal static bool DerivesFrom(INamedTypeSymbol symbol, INamedTypeSymbol candidateBaseType);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.CodeAnalysis.Analyzers.CodeAnalysisDiagnosticsResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AddLanguageSupportToAnalyzerDescription { get; }
    internal static string AddLanguageSupportToAnalyzerMessage { get; }
    internal static string AddLanguageSupportToAnalyzerTitle { get; }
    internal static string ApplyDiagnosticAnalyzerAttribute_1 { get; }
    internal static string ApplyDiagnosticAnalyzerAttribute_2 { get; }
    internal static string CodeActionNeedsEquivalenceKeyDescription { get; }
    internal static string CreateCodeActionWithEquivalenceKeyMessage { get; }
    internal static string CreateCodeActionWithEquivalenceKeyTitle { get; }
    internal static string DoNotIgnoreReturnValueOnImmutableObjectMethodInvocationDescription { get; }
    internal static string DoNotIgnoreReturnValueOnImmutableObjectMethodInvocationMessage { get; }
    internal static string DoNotIgnoreReturnValueOnImmutableObjectMethodInvocationTitle { get; }
    internal static string DoNotStorePerCompilationDataOntoFieldsDescription { get; }
    internal static string DoNotStorePerCompilationDataOntoFieldsMessage { get; }
    internal static string DoNotStorePerCompilationDataOntoFieldsTitle { get; }
    internal static string InternalImplementationOnlyDescription { get; }
    internal static string InternalImplementationOnlyMessage { get; }
    internal static string InternalImplementationOnlyTitle { get; }
    internal static string InvalidReportDiagnosticDescription { get; }
    internal static string InvalidReportDiagnosticMessage { get; }
    internal static string InvalidReportDiagnosticTitle { get; }
    internal static string InvalidSyntaxKindTypeArgumentDescription { get; }
    internal static string InvalidSyntaxKindTypeArgumentMessage { get; }
    internal static string InvalidSyntaxKindTypeArgumentTitle { get; }
    internal static string MissingAttributeMessage { get; }
    internal static string MissingDiagnosticAnalyzerAttributeDescription { get; }
    internal static string MissingDiagnosticAnalyzerAttributeTitle { get; }
    internal static string MissingKindArgumentToRegisterActionDescription { get; }
    internal static string MissingKindArgumentToRegisterActionMessage { get; }
    internal static string MissingKindArgumentToRegisterActionTitle { get; }
    internal static string OverrideCodeActionEquivalenceKeyMessage { get; }
    internal static string OverrideCodeActionEquivalenceKeyTitle { get; }
    internal static string StartActionWithNoRegisteredActionsMessage { get; }
    internal static string StartActionWithNoRegisteredActionsTitle { get; }
    internal static string StartActionWithOnlyEndActionMessage { get; }
    internal static string StartActionWithOnlyEndActionTitle { get; }
    internal static string StatefulAnalyzerRegisterActionsDescription { get; }
    internal static string UnsupportedSymbolKindArgumentToRegisterActionMessage { get; }
    internal static string UnsupportedSymbolKindArgumentToRegisterActionTitle { get; }
    internal static string UseLocalizableStringsInDescriptorDescription { get; }
    internal static string UseLocalizableStringsInDescriptorMessage { get; }
    internal static string UseLocalizableStringsInDescriptorTitle { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AddLanguageSupportToAnalyzerDescription();
    internal static string get_AddLanguageSupportToAnalyzerMessage();
    internal static string get_AddLanguageSupportToAnalyzerTitle();
    internal static string get_ApplyDiagnosticAnalyzerAttribute_1();
    internal static string get_ApplyDiagnosticAnalyzerAttribute_2();
    internal static string get_CodeActionNeedsEquivalenceKeyDescription();
    internal static string get_CreateCodeActionWithEquivalenceKeyMessage();
    internal static string get_CreateCodeActionWithEquivalenceKeyTitle();
    internal static string get_DoNotIgnoreReturnValueOnImmutableObjectMethodInvocationDescription();
    internal static string get_DoNotIgnoreReturnValueOnImmutableObjectMethodInvocationMessage();
    internal static string get_DoNotIgnoreReturnValueOnImmutableObjectMethodInvocationTitle();
    internal static string get_DoNotStorePerCompilationDataOntoFieldsDescription();
    internal static string get_DoNotStorePerCompilationDataOntoFieldsMessage();
    internal static string get_DoNotStorePerCompilationDataOntoFieldsTitle();
    internal static string get_InternalImplementationOnlyDescription();
    internal static string get_InternalImplementationOnlyMessage();
    internal static string get_InternalImplementationOnlyTitle();
    internal static string get_InvalidReportDiagnosticDescription();
    internal static string get_InvalidReportDiagnosticMessage();
    internal static string get_InvalidReportDiagnosticTitle();
    internal static string get_InvalidSyntaxKindTypeArgumentDescription();
    internal static string get_InvalidSyntaxKindTypeArgumentMessage();
    internal static string get_InvalidSyntaxKindTypeArgumentTitle();
    internal static string get_MissingAttributeMessage();
    internal static string get_MissingDiagnosticAnalyzerAttributeDescription();
    internal static string get_MissingDiagnosticAnalyzerAttributeTitle();
    internal static string get_MissingKindArgumentToRegisterActionDescription();
    internal static string get_MissingKindArgumentToRegisterActionMessage();
    internal static string get_MissingKindArgumentToRegisterActionTitle();
    internal static string get_OverrideCodeActionEquivalenceKeyMessage();
    internal static string get_OverrideCodeActionEquivalenceKeyTitle();
    internal static string get_StartActionWithNoRegisteredActionsMessage();
    internal static string get_StartActionWithNoRegisteredActionsTitle();
    internal static string get_StartActionWithOnlyEndActionMessage();
    internal static string get_StartActionWithOnlyEndActionTitle();
    internal static string get_StatefulAnalyzerRegisterActionsDescription();
    internal static string get_UnsupportedSymbolKindArgumentToRegisterActionMessage();
    internal static string get_UnsupportedSymbolKindArgumentToRegisterActionTitle();
    internal static string get_UseLocalizableStringsInDescriptorDescription();
    internal static string get_UseLocalizableStringsInDescriptorMessage();
    internal static string get_UseLocalizableStringsInDescriptorTitle();
}
internal static class Microsoft.CodeAnalysis.Analyzers.DiagnosticCategory : object {
    public static string AnalyzerCorrectness;
    public static string AnalyzerLocalization;
    public static string AnalyzerPerformance;
    public static string Compatibility;
}
internal static class Microsoft.CodeAnalysis.Analyzers.DiagnosticIds : object {
    public static string MissingDiagnosticAnalyzerAttributeRuleId;
    public static string MissingKindArgumentToRegisterActionRuleId;
    public static string UnsupportedSymbolKindArgumentRuleId;
    public static string AddLanguageSupportToAnalyzerRuleId;
    public static string InvalidReportDiagnosticRuleId;
    public static string InvalidSyntaxKindTypeArgumentRuleId;
    public static string UseLocalizableStringsInDescriptorRuleId;
    public static string DoNotStorePerCompilationDataOntoFieldsRuleId;
    public static string InternalImplementationOnlyRuleId;
    public static string CreateCodeActionWithEquivalenceKeyRuleId;
    public static string OverrideCodeActionEquivalenceKeyRuleId;
    public static string StartActionWithNoRegisteredActionsRuleId;
    public static string StartActionWithOnlyEndActionRuleId;
    public static string DoNotIgnoreReturnValueOnImmutableObjectMethodInvocation;
}
public abstract class Microsoft.CodeAnalysis.Analyzers.FixAnalyzers.FixerWithFixAllAnalyzer`1 : DiagnosticAnalyzer {
    private static string s_codeFixProviderMetadataName;
    private static string s_codeActionMetadataName;
    private static string GetFixAllProviderMethodName;
    private static string CreateMethodName;
    private static string EquivalenceKeyPropertyName;
    private static string EquivalenceKeyParameterName;
    private static LocalizableString s_localizableCreateCodeActionWithEquivalenceKeyTitle;
    private static LocalizableString s_localizableCreateCodeActionWithEquivalenceKeyMessage;
    private static LocalizableString s_localizableOverrideCodeActionEquivalenceKeyTitle;
    private static LocalizableString s_localizableOverrideCodeActionEquivalenceKeyMessage;
    private static LocalizableString s_localizableCodeActionNeedsEquivalenceKeyDescription;
    internal static DiagnosticDescriptor CreateCodeActionEquivalenceKeyRule;
    internal static DiagnosticDescriptor OverrideCodeActionEquivalenceKeyRule;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static FixerWithFixAllAnalyzer`1();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private void CreateAnalyzerWithinCompilation(CompilationStartAnalysisContext context);
    protected abstract virtual CompilationAnalyzer<TLanguageKindEnum> GetCompilationAnalyzer(INamedTypeSymbol codeFixProviderSymbol, IMethodSymbol getFixAllProvider, INamedTypeSymbol codeActionSymbol, ImmutableHashSet`1<IMethodSymbol> createMethods, IPropertySymbol equivalenceKeyProperty);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.CodeAnalysis.Analyzers.InternalImplementationOnlyAnalyzer : DiagnosticAnalyzer {
    private static string InternalImplementationOnlyAttributeName;
    private static string InternalImplementationOnlyAttributeFullName;
    private static LocalizableString s_localizableTitle;
    private static LocalizableString s_localizableMessageFormat;
    private static LocalizableString s_localizableDescription;
    public static DiagnosticDescriptor Rule;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static InternalImplementationOnlyAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeSymbol(SymbolAnalysisContext context);
}
[ExtensionAttribute]
internal static class Microsoft.CodeAnalysis.Analyzers.ITypeSymbolExtensions : object {
    [IteratorStateMachineAttribute("Microsoft.CodeAnalysis.Analyzers.ITypeSymbolExtensions/<GetBaseTypesAndThis>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<ITypeSymbol> GetBaseTypesAndThis(ITypeSymbol type);
    [IteratorStateMachineAttribute("Microsoft.CodeAnalysis.Analyzers.ITypeSymbolExtensions/<GetBaseTypes>d__1")]
[ExtensionAttribute]
public static IEnumerable`1<INamedTypeSymbol> GetBaseTypes(ITypeSymbol type);
}
public abstract class Microsoft.CodeAnalysis.Analyzers.MetaAnalyzers.CodeFixes.ApplyDiagnosticAnalyzerAttributeFix : CodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Analyzers.MetaAnalyzers.CodeFixes.ApplyDiagnosticAnalyzerAttributeFix/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    protected abstract virtual SyntaxNode ParseExpression(string expression);
    private void AddFix(string codeFixTitle, CodeFixContext context, SyntaxNode root, SyntaxNode classDecl, SyntaxGenerator generator, String[] languages);
    private Task`1<Document> GetFix(Document document, SyntaxNode root, SyntaxNode classDecl, SyntaxGenerator generator, String[] languages);
    public sealed virtual FixAllProvider GetFixAllProvider();
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.CodeAnalysis.Analyzers.MetaAnalyzers.DiagnosticAnalyzerAttributeAnalyzer : DiagnosticAnalyzerCorrectnessAnalyzer {
    private static LocalizableString s_localizableTitleMissingAttribute;
    private static LocalizableString s_localizableMessageMissingAttribute;
    private static LocalizableString s_localizableDescriptionMissingAttribute;
    public static DiagnosticDescriptor MissingDiagnosticAnalyzerAttributeRule;
    private static LocalizableString s_localizableTitleAddLanguageSupportToAnalyzer;
    private static LocalizableString s_localizableMessageAddLanguageSupportToAnalyzer;
    private static LocalizableString s_localizableDescriptionAddLanguageSupportToAnalyzer;
    public static DiagnosticDescriptor AddLanguageSupportToAnalyzerRule;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DiagnosticAnalyzerAttributeAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    protected virtual DiagnosticAnalyzerSymbolAnalyzer GetDiagnosticAnalyzerSymbolAnalyzer(CompilationStartAnalysisContext compilationContext, INamedTypeSymbol diagnosticAnalyzer, INamedTypeSymbol diagnosticAnalyzerAttribute);
    private static void CheckLanguage(TypedConstant argument, Boolean& supportsCSharp, Boolean& supportsVB);
}
public abstract class Microsoft.CodeAnalysis.Analyzers.MetaAnalyzers.DiagnosticAnalyzerCorrectnessAnalyzer : DiagnosticAnalyzer {
    internal static string DiagnosticAnalyzerTypeFullName;
    internal static string DiagnosticAnalyzerAttributeFullName;
    internal static string DiagnosticFullName;
    internal static string DiagnosticDescriptorFullName;
    internal static string LocalizableStringFullName;
    internal static string AnalysisContextFullName;
    internal static string CompilationStartAnalysisContextFullName;
    internal static string CompilationEndAnalysisContextFullName;
    internal static string SemanticModelAnalysisContextFullName;
    internal static string SymbolAnalysisContextFullName;
    internal static string SyntaxNodeAnalysisContextFullName;
    internal static string SyntaxTreeAnalysisContextFullName;
    internal static string CodeBlockStartAnalysisContextFullName;
    internal static string CodeBlockEndAnalysisContextFullName;
    internal static string SymbolKindFullName;
    internal static string RegisterSyntaxNodeActionName;
    internal static string RegisterSymbolActionName;
    internal static string RegisterCodeBlockStartActionName;
    internal static string RegisterCodeBlockEndActionName;
    internal static string RegisterCodeBlockActionName;
    internal static string RegisterCompilationStartActionName;
    internal static string RegisterCompilationEndActionName;
    internal static string RegisterCompilationActionName;
    internal static string ReportDiagnosticName;
    internal static string SupportedDiagnosticsName;
    internal static string TLanguageKindEnumName;
    private static DiagnosticAnalyzerCorrectnessAnalyzer();
    public virtual void Initialize(AnalysisContext context);
    protected abstract virtual DiagnosticAnalyzerSymbolAnalyzer GetDiagnosticAnalyzerSymbolAnalyzer(CompilationStartAnalysisContext compilationContext, INamedTypeSymbol diagnosticAnalyzer, INamedTypeSymbol diagnosticAnalyzerAttribute);
    [CompilerGeneratedAttribute]
private void <Initialize>b__28_0(CompilationStartAnalysisContext compilationContext);
}
public abstract class Microsoft.CodeAnalysis.Analyzers.MetaAnalyzers.DiagnosticAnalyzerFieldsAnalyzer`4 : DiagnosticAnalyzerCorrectnessAnalyzer {
    private static LocalizableString s_localizableTitle;
    private static LocalizableString s_localizableMessage;
    private static LocalizableString s_localizableDescription;
    private static string s_compilationTypeFullName;
    private static string s_symbolTypeFullName;
    public static DiagnosticDescriptor DoNotStorePerCompilationDataOntoFieldsRule;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DiagnosticAnalyzerFieldsAnalyzer`4();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    protected virtual DiagnosticAnalyzerSymbolAnalyzer GetDiagnosticAnalyzerSymbolAnalyzer(CompilationStartAnalysisContext compilationContext, INamedTypeSymbol diagnosticAnalyzer, INamedTypeSymbol diagnosticAnalyzerAttribute);
}
public abstract class Microsoft.CodeAnalysis.Analyzers.MetaAnalyzers.DiagnosticDescriptorCreationAnalyzer`3 : DiagnosticAnalyzer {
    private static LocalizableString s_localizableTitle;
    private static LocalizableString s_localizableMessage;
    private static LocalizableString s_localizableDescription;
    public static DiagnosticDescriptor UseLocalizableStringsInDescriptorRule;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    protected ImmutableArray`1<TLanguageKindEnum> SyntaxKindsOfInterest { get; }
    private static DiagnosticDescriptorCreationAnalyzer`3();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    protected abstract virtual ImmutableArray`1<TLanguageKindEnum> get_SyntaxKindsOfInterest();
    public virtual void Initialize(AnalysisContext context);
    protected abstract virtual CompilationAnalyzer<TClassDeclarationSyntax, TObjectCreationExpressionSyntax, TLanguageKindEnum> GetAnalyzer(Compilation compilation, INamedTypeSymbol diagnosticDescriptorType);
    [CompilerGeneratedAttribute]
private void <Initialize>b__8_0(CompilationStartAnalysisContext compilationContext);
}
public abstract class Microsoft.CodeAnalysis.Analyzers.MetaAnalyzers.RegisterActionAnalyzer`4 : DiagnosticAnalyzerCorrectnessAnalyzer {
    private static LocalizableString s_localizableTitleMissingKindArgument;
    private static LocalizableString s_localizableMessageMissingKindArgument;
    private static LocalizableString s_localizableDescriptionMissingKindArgument;
    public static DiagnosticDescriptor MissingKindArgumentRule;
    private static LocalizableString s_localizableTitleUnsupportedSymbolKindArgument;
    private static LocalizableString s_localizableMessageUnsupportedSymbolKindArgument;
    public static DiagnosticDescriptor UnsupportedSymbolKindArgumentRule;
    private static LocalizableString s_localizableTitleInvalidSyntaxKindTypeArgument;
    private static LocalizableString s_localizableMessageInvalidSyntaxKindTypeArgument;
    private static LocalizableString s_localizableDescriptionInvalidSyntaxKindTypeArgument;
    public static DiagnosticDescriptor InvalidSyntaxKindTypeArgumentRule;
    private static LocalizableString s_localizableDescriptionStatefulAnalyzerRegisterActionsDescription;
    private static LocalizableString s_localizableTitleStartActionWithNoRegisteredActions;
    private static LocalizableString s_localizableMessageStartActionWithNoRegisteredActions;
    public static DiagnosticDescriptor StartActionWithNoRegisteredActionsRule;
    private static LocalizableString s_localizableTitleStartActionWithOnlyEndAction;
    private static LocalizableString s_localizableMessageStartActionWithOnlyEndAction;
    public static DiagnosticDescriptor StartActionWithOnlyEndActionRule;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static RegisterActionAnalyzer`4();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    protected virtual DiagnosticAnalyzerSymbolAnalyzer GetDiagnosticAnalyzerSymbolAnalyzer(CompilationStartAnalysisContext compilationContext, INamedTypeSymbol diagnosticAnalyzer, INamedTypeSymbol diagnosticAnalyzerAttribute);
    protected abstract virtual RegisterActionCodeBlockAnalyzer<TClassDeclarationSyntax, TInvocationExpressionSyntax, TArgumentSyntax, TLanguageKindEnum> GetCodeBlockAnalyzer(Compilation compilation, INamedTypeSymbol analysisContext, INamedTypeSymbol compilationStartAnalysisContext, INamedTypeSymbol codeBlockStartAnalysisContext, INamedTypeSymbol symbolKind, INamedTypeSymbol diagnosticAnalyzer, INamedTypeSymbol diagnosticAnalyzerAttribute);
}
public abstract class Microsoft.CodeAnalysis.Analyzers.MetaAnalyzers.ReportDiagnosticAnalyzer`4 : DiagnosticAnalyzerCorrectnessAnalyzer {
    private static LocalizableString s_localizableTitle;
    private static LocalizableString s_localizableMessage;
    private static LocalizableString s_localizableDescription;
    public static DiagnosticDescriptor InvalidReportDiagnosticRule;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static ReportDiagnosticAnalyzer`4();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    protected virtual DiagnosticAnalyzerSymbolAnalyzer GetDiagnosticAnalyzerSymbolAnalyzer(CompilationStartAnalysisContext compilationContext, INamedTypeSymbol diagnosticAnalyzer, INamedTypeSymbol diagnosticAnalyzerAttribute);
    protected abstract virtual ReportDiagnosticCompilationAnalyzer<TClassDeclarationSyntax, TInvocationExpressionSyntax, TIdentifierNameSyntax, TVariableDeclaratorSyntax> GetAnalyzer(ImmutableHashSet`1<INamedTypeSymbol> contextTypes, INamedTypeSymbol diagnosticType, INamedTypeSymbol diagnosticDescriptorType, INamedTypeSymbol diagnosticAnalyzer, INamedTypeSymbol diagnosticAnalyzerAttribute);
}
internal class Microsoft.CodeAnalysis.DocumentChangeAction : CodeAction {
    private string _title;
    private Func`2<CancellationToken, Task`1<Document>> _createChangedDocument;
    private string _equivalenceKey;
    public string Title { get; }
    public string EquivalenceKey { get; }
    public DocumentChangeAction(string title, Func`2<CancellationToken, Task`1<Document>> createChangedDocument, string equivalenceKey);
    public virtual string get_Title();
    public virtual string get_EquivalenceKey();
    protected virtual Task`1<Document> GetChangedDocumentAsync(CancellationToken cancellationToken);
}
