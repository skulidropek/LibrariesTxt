[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.CodeAnalysis.CSharp.Analyzers.CSharpImmutableObjectMethodAnalyzer : DiagnosticAnalyzer {
    private static LocalizableString s_localizableTitle;
    private static LocalizableString s_localizableMessage;
    private static LocalizableString s_localizableDescription;
    public static DiagnosticDescriptor DoNotIgnoreReturnValueDiagnosticRule;
    private static string s_solutionFullName;
    private static string s_projectFullName;
    private static string s_documentFullName;
    private static string s_syntaxNodeFullName;
    private static string s_compilationFullName;
    private static string s_Add;
    private static string s_Remove;
    private static string s_Replace;
    private static string s_With;
    private static ImmutableArray`1<string> s_immutableMethodNames;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static CSharpImmutableObjectMethodAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    public void AnalyzeInvocationForIgnoredReturnValue(SyntaxNodeAnalysisContext context, ImmutableArray`1<INamedTypeSymbol> immutableTypeSymbols);
    [CompilerGeneratedAttribute]
private void <Initialize>b__16_0(CompilationStartAnalysisContext compilationContext);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.CodeAnalysis.CSharp.Analyzers.FixAnalyzers.CSharpFixerWithFixAllAnalyzer : FixerWithFixAllAnalyzer`1<SyntaxKind> {
    protected virtual CompilationAnalyzer<SyntaxKind> GetCompilationAnalyzer(INamedTypeSymbol codeFixProviderSymbol, IMethodSymbol getFixAllProvider, INamedTypeSymbol codeActionSymbol, ImmutableHashSet`1<IMethodSymbol> createMethods, IPropertySymbol equivalenceKeyProperty);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeAnalysis.CSharp.Analyzers.MetaAnalyzers.CodeFixes.CSharpApplyDiagnosticAnalyzerAttributeFix : ApplyDiagnosticAnalyzerAttributeFix {
    protected virtual SyntaxNode ParseExpression(string expression);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.CodeAnalysis.CSharp.Analyzers.MetaAnalyzers.CSharpDiagnosticAnalyzerFieldsAnalyzer : DiagnosticAnalyzerFieldsAnalyzer`4<ClassDeclarationSyntax, FieldDeclarationSyntax, TypeSyntax, VariableDeclarationSyntax> {
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.CodeAnalysis.CSharp.Analyzers.MetaAnalyzers.CSharpDiagnosticDescriptorCreationAnalyzer : DiagnosticDescriptorCreationAnalyzer`3<ClassDeclarationSyntax, ObjectCreationExpressionSyntax, SyntaxKind> {
    protected ImmutableArray`1<SyntaxKind> SyntaxKindsOfInterest { get; }
    protected virtual ImmutableArray`1<SyntaxKind> get_SyntaxKindsOfInterest();
    protected virtual CompilationAnalyzer<ClassDeclarationSyntax, ObjectCreationExpressionSyntax, SyntaxKind> GetAnalyzer(Compilation compilation, INamedTypeSymbol diagnosticDescriptorType);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.CodeAnalysis.CSharp.Analyzers.MetaAnalyzers.CSharpRegisterActionAnalyzer : RegisterActionAnalyzer`4<ClassDeclarationSyntax, InvocationExpressionSyntax, ArgumentSyntax, SyntaxKind> {
    internal static string CSharpSyntaxKindName;
    internal static string BasicSyntaxKindName;
    private static CSharpRegisterActionAnalyzer();
    protected virtual RegisterActionCodeBlockAnalyzer<ClassDeclarationSyntax, InvocationExpressionSyntax, ArgumentSyntax, SyntaxKind> GetCodeBlockAnalyzer(Compilation compilation, INamedTypeSymbol analysisContext, INamedTypeSymbol compilationStartAnalysisContext, INamedTypeSymbol codeBlockStartAnalysisContext, INamedTypeSymbol symbolKind, INamedTypeSymbol diagnosticAnalyzer, INamedTypeSymbol diagnosticAnalyzerAttribute);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.CodeAnalysis.CSharp.Analyzers.MetaAnalyzers.CSharpReportDiagnosticAnalyzer : ReportDiagnosticAnalyzer`4<ClassDeclarationSyntax, InvocationExpressionSyntax, IdentifierNameSyntax, VariableDeclaratorSyntax> {
    protected virtual ReportDiagnosticCompilationAnalyzer<ClassDeclarationSyntax, InvocationExpressionSyntax, IdentifierNameSyntax, VariableDeclaratorSyntax> GetAnalyzer(ImmutableHashSet`1<INamedTypeSymbol> contextTypes, INamedTypeSymbol diagnosticType, INamedTypeSymbol diagnosticDescriptorType, INamedTypeSymbol diagnosticAnalyzer, INamedTypeSymbol diagnosticAnalyzerAttribute);
}
