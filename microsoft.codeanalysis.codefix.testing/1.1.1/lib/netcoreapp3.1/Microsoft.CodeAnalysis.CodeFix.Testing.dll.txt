[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Microsoft.CodeAnalysis.Testing.CodeFixTest`1 : CodeActionTest`1<TVerifier> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SolutionState <FixedState>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SolutionState <BatchFixedState>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <NumberOfIncrementalIterations>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <NumberOfFixAllIterations>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <NumberOfFixAllInDocumentIterations>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <NumberOfFixAllInProjectIterations>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CodeFixTestBehaviors <CodeFixTestBehaviors>k__BackingField;
    [ObsoleteAttribute("Use CodeActionIndex instead.")]
[EditorBrowsableAttribute("1")]
public Nullable`1<int> CodeFixIndex { get; public set; }
    [NullableAttribute("2")]
[ObsoleteAttribute("Use CodeActionEquivalenceKey instead.")]
[EditorBrowsableAttribute("1")]
public string CodeFixEquivalenceKey { get; public set; }
    unknown string FixedCode {public set; }
    public SolutionState FixedState { get; }
    unknown string BatchFixedCode {public set; }
    public SolutionState BatchFixedState { get; }
    public Nullable`1<int> NumberOfIncrementalIterations { get; public set; }
    public Nullable`1<int> NumberOfFixAllIterations { get; public set; }
    public Nullable`1<int> NumberOfFixAllInDocumentIterations { get; public set; }
    public Nullable`1<int> NumberOfFixAllInProjectIterations { get; public set; }
    public CodeFixTestBehaviors CodeFixTestBehaviors { get; public set; }
    [ObsoleteAttribute("Use CodeActionValidationMode instead.")]
[EditorBrowsableAttribute("1")]
public CodeFixValidationMode CodeFixValidationMode { get; public set; }
    public Nullable`1<int> get_CodeFixIndex();
    public void set_CodeFixIndex(Nullable`1<int> value);
    [NullableContextAttribute("2")]
public string get_CodeFixEquivalenceKey();
    [NullableContextAttribute("2")]
public void set_CodeFixEquivalenceKey(string value);
    public void set_FixedCode(string value);
    [CompilerGeneratedAttribute]
public SolutionState get_FixedState();
    public void set_BatchFixedCode(string value);
    [CompilerGeneratedAttribute]
public SolutionState get_BatchFixedState();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NumberOfIncrementalIterations();
    [CompilerGeneratedAttribute]
public void set_NumberOfIncrementalIterations(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NumberOfFixAllIterations();
    [CompilerGeneratedAttribute]
public void set_NumberOfFixAllIterations(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NumberOfFixAllInDocumentIterations();
    [CompilerGeneratedAttribute]
public void set_NumberOfFixAllInDocumentIterations(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NumberOfFixAllInProjectIterations();
    [CompilerGeneratedAttribute]
public void set_NumberOfFixAllInProjectIterations(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public CodeFixTestBehaviors get_CodeFixTestBehaviors();
    [CompilerGeneratedAttribute]
public void set_CodeFixTestBehaviors(CodeFixTestBehaviors value);
    public CodeFixValidationMode get_CodeFixValidationMode();
    public void set_CodeFixValidationMode(CodeFixValidationMode value);
    protected abstract virtual IEnumerable`1<CodeFixProvider> GetCodeFixProviders();
    protected virtual bool IsCompilerDiagnosticIncluded(Diagnostic diagnostic, CompilerDiagnostics compilerDiagnostics);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Testing.CodeFixTest`1/<RunImplAsync>d__42")]
[DebuggerStepThroughAttribute]
protected virtual Task RunImplAsync(CancellationToken cancellationToken);
    private bool CodeFixExpected();
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Testing.CodeFixTest`1/<VerifyFixAsync>d__44")]
[DebuggerStepThroughAttribute]
protected Task VerifyFixAsync(SolutionState testState, SolutionState fixedState, SolutionState batchFixedState, IVerifier verifier, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
protected virtual Diagnostic TrySelectDiagnosticToFix(ImmutableArray`1<Diagnostic> fixableDiagnostics);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Testing.CodeFixTest`1/<VerifyFixAsync>d__46")]
[DebuggerStepThroughAttribute]
private Task VerifyFixAsync(string language, ImmutableArray`1<DiagnosticAnalyzer> analyzers, ImmutableArray`1<CodeFixProvider> codeFixProviders, SolutionState oldState, SolutionState newState, int numberOfIterations, Func`10<ImmutableArray`1<DiagnosticAnalyzer>, ImmutableArray`1<CodeFixProvider>, Nullable`1<int>, string, Action`2<CodeAction, IVerifier>, Project, int, IVerifier, CancellationToken, Task`1<ValueTuple`2<Project, ExceptionDispatchInfo>>> getFixedProject, IVerifier verifier, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Testing.CodeFixTest`1/<VerifyProjectAsync>d__47")]
[DebuggerStepThroughAttribute]
private Task VerifyProjectAsync(ProjectState newState, Project project, IVerifier verifier, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Testing.CodeFixTest`1/<FixEachAnalyzerDiagnosticAsync>d__48")]
[DebuggerStepThroughAttribute]
private Task`1<ValueTuple`2<Project, ExceptionDispatchInfo>> FixEachAnalyzerDiagnosticAsync(ImmutableArray`1<DiagnosticAnalyzer> analyzers, ImmutableArray`1<CodeFixProvider> codeFixProviders, Nullable`1<int> codeFixIndex, string codeFixEquivalenceKey, Action`2<CodeAction, IVerifier> codeActionVerifier, Project project, int numberOfIterations, IVerifier verifier, CancellationToken cancellationToken);
    private Task`1<ValueTuple`2<Project, ExceptionDispatchInfo>> FixAllAnalyzerDiagnosticsInDocumentAsync(ImmutableArray`1<DiagnosticAnalyzer> analyzers, ImmutableArray`1<CodeFixProvider> codeFixProviders, Nullable`1<int> codeFixIndex, string codeFixEquivalenceKey, Action`2<CodeAction, IVerifier> codeActionVerifier, Project project, int numberOfIterations, IVerifier verifier, CancellationToken cancellationToken);
    private Task`1<ValueTuple`2<Project, ExceptionDispatchInfo>> FixAllAnalyzerDiagnosticsInProjectAsync(ImmutableArray`1<DiagnosticAnalyzer> analyzers, ImmutableArray`1<CodeFixProvider> codeFixProviders, Nullable`1<int> codeFixIndex, string codeFixEquivalenceKey, Action`2<CodeAction, IVerifier> codeActionVerifier, Project project, int numberOfIterations, IVerifier verifier, CancellationToken cancellationToken);
    private Task`1<ValueTuple`2<Project, ExceptionDispatchInfo>> FixAllAnalyzerDiagnosticsInSolutionAsync(ImmutableArray`1<DiagnosticAnalyzer> analyzers, ImmutableArray`1<CodeFixProvider> codeFixProviders, Nullable`1<int> codeFixIndex, string codeFixEquivalenceKey, Action`2<CodeAction, IVerifier> codeActionVerifier, Project project, int numberOfIterations, IVerifier verifier, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Testing.CodeFixTest`1/<FixAllAnalyerDiagnosticsInScopeAsync>d__52")]
[DebuggerStepThroughAttribute]
private Task`1<ValueTuple`2<Project, ExceptionDispatchInfo>> FixAllAnalyerDiagnosticsInScopeAsync(FixAllScope scope, ImmutableArray`1<DiagnosticAnalyzer> analyzers, ImmutableArray`1<CodeFixProvider> codeFixProviders, Nullable`1<int> codeFixIndex, string codeFixEquivalenceKey, Action`2<CodeAction, IVerifier> codeActionVerifier, Project project, int numberOfIterations, IVerifier verifier, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Testing.CodeFixTest`1/<GetCompilerDiagnosticsAsync>d__53")]
[DebuggerStepThroughAttribute]
private static Task`1<ImmutableArray`1<Diagnostic>> GetCompilerDiagnosticsAsync(Project project, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Testing.CodeFixTest`1/<GetSourceTextFromDocumentAsync>d__54")]
[DebuggerStepThroughAttribute]
private static Task`1<SourceText> GetSourceTextFromDocumentAsync(Document document, CancellationToken cancellationToken);
    private static bool AreDiagnosticsDifferent(ImmutableArray`1<ValueTuple`2<Project, Diagnostic>> analyzerDiagnostics, ImmutableArray`1<ValueTuple`2<Project, Diagnostic>> previousDiagnostics);
    [CompilerGeneratedAttribute]
private bool <IsCompilerDiagnosticIncluded>g__CodeFixProvidersHandleDiagnostic|41_0(Diagnostic localDiagnostic);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private EvaluatedProjectState <RunImplAsync>b__42_2(ProjectState additionalProject);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private EvaluatedProjectState <RunImplAsync>b__42_3(ProjectState additionalProject);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private EvaluatedProjectState <RunImplAsync>b__42_4(ProjectState additionalProject);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private EvaluatedProjectState <VerifyFixAsync>b__46_0(ProjectState additionalProject);
}
[FlagsAttribute]
public enum Microsoft.CodeAnalysis.Testing.CodeFixTestBehaviors : Enum {
    public int value__;
    public static CodeFixTestBehaviors None;
    public static CodeFixTestBehaviors SkipFixAllInDocumentCheck;
    public static CodeFixTestBehaviors SkipFixAllInProjectCheck;
    public static CodeFixTestBehaviors SkipFixAllInSolutionCheck;
    public static CodeFixTestBehaviors SkipFixAllCheck;
    public static CodeFixTestBehaviors FixOne;
}
[ObsoleteAttribute("Use CodeActionValidationMode instead.")]
public enum Microsoft.CodeAnalysis.Testing.CodeFixValidationMode : Enum {
    public int value__;
    public static CodeFixValidationMode None;
    public static CodeFixValidationMode SemanticStructure;
    public static CodeFixValidationMode Full;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.CodeAnalysis.Testing.CodeFixVerifier`4 : object {
    public static DiagnosticResult Diagnostic();
    public static DiagnosticResult Diagnostic(string diagnosticId);
    public static DiagnosticResult Diagnostic(DiagnosticDescriptor descriptor);
    public static Task VerifyAnalyzerAsync(string source, DiagnosticResult[] expected);
    public static Task VerifyCodeFixAsync(string source, string fixedSource);
    public static Task VerifyCodeFixAsync(string source, DiagnosticResult expected, string fixedSource);
    public static Task VerifyCodeFixAsync(string source, DiagnosticResult[] expected, string fixedSource);
}
public class Microsoft.CodeAnalysis.Testing.EmptyCodeFixProvider : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [NullableContextAttribute("1")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.Testing.TestDiagnosticProvider : DiagnosticProvider {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ImmutableArray`1<ValueTuple`2<Project, Diagnostic>> _diagnostics;
    private TestDiagnosticProvider(ImmutableArray`1<ValueTuple`2<Project, Diagnostic>> diagnostics);
    public virtual Task`1<IEnumerable`1<Diagnostic>> GetAllDiagnosticsAsync(Project project, CancellationToken cancellationToken);
    public virtual Task`1<IEnumerable`1<Diagnostic>> GetDocumentDiagnosticsAsync(Document document, CancellationToken cancellationToken);
    public virtual Task`1<IEnumerable`1<Diagnostic>> GetProjectDiagnosticsAsync(Project project, CancellationToken cancellationToken);
    internal static TestDiagnosticProvider Create(ImmutableArray`1<ValueTuple`2<Project, Diagnostic>> diagnostics);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
