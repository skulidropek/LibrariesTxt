[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal abstract class Microsoft.CodeAnalysis.Razor.AssemblyIdentityEqualityComparer : object {
    public static AssemblyIdentityEqualityComparer NameAndVersion;
    private static AssemblyIdentityEqualityComparer();
    public abstract virtual bool Equals(AssemblyIdentity x, AssemblyIdentity y);
    public abstract virtual int GetHashCode(AssemblyIdentity obj);
}
internal class Microsoft.CodeAnalysis.Razor.BindTagHelperDescriptorProvider : object {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorEngine <Engine>k__BackingField;
    public int Order { get; public set; }
    public RazorEngine Engine { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public sealed virtual RazorEngine get_Engine();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Engine(RazorEngine value);
    public sealed virtual void Execute(TagHelperDescriptorProviderContext context);
    private TagHelperDescriptor CreateFallbackBindTagHelper();
    private List`1<ElementBindData> GetElementBindData(Compilation compilation);
    private List`1<TagHelperDescriptor> CreateElementBindTagHelpers(List`1<ElementBindData> data);
    private List`1<TagHelperDescriptor> CreateComponentBindTagHelpers(ICollection`1<TagHelperDescriptor> tagHelpers);
}
internal static class Microsoft.CodeAnalysis.Razor.CodeAnalysisResources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string TagHelper_CouldNotFindMatchingEndBrace { get; }
    internal static string TagHelper_InvalidAttributePrefixNotNull { get; }
    internal static string TagHelper_InvalidAttributeNameNotNullOrEmpty { get; }
    internal static string TagHelper_InvalidAttributePrefixNull { get; }
    internal static string TagHelper_InvalidRequiredAttributeCharacter { get; }
    internal static string TagHelper_InvalidRequiredAttributeMismatchedQuotes { get; }
    internal static string TagHelper_InvalidRequiredAttributeOperator { get; }
    internal static string TagHelper_PartialRequiredAttributeOperator { get; }
    internal static string MarkupTransition_Description { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_TagHelper_CouldNotFindMatchingEndBrace();
    internal static string FormatTagHelper_CouldNotFindMatchingEndBrace(object p0);
    internal static string get_TagHelper_InvalidAttributePrefixNotNull();
    internal static string FormatTagHelper_InvalidAttributePrefixNotNull(object p0, object p1, object p2, object p3, object p4);
    internal static string get_TagHelper_InvalidAttributeNameNotNullOrEmpty();
    internal static string FormatTagHelper_InvalidAttributeNameNotNullOrEmpty(object p0, object p1, object p2, object p3);
    internal static string get_TagHelper_InvalidAttributePrefixNull();
    internal static string FormatTagHelper_InvalidAttributePrefixNull(object p0, object p1, object p2, object p3, object p4);
    internal static string get_TagHelper_InvalidRequiredAttributeCharacter();
    internal static string FormatTagHelper_InvalidRequiredAttributeCharacter(object p0, object p1);
    internal static string get_TagHelper_InvalidRequiredAttributeMismatchedQuotes();
    internal static string FormatTagHelper_InvalidRequiredAttributeMismatchedQuotes(object p0, object p1);
    internal static string get_TagHelper_InvalidRequiredAttributeOperator();
    internal static string FormatTagHelper_InvalidRequiredAttributeOperator(object p0, object p1);
    internal static string get_TagHelper_PartialRequiredAttributeOperator();
    internal static string FormatTagHelper_PartialRequiredAttributeOperator(object p0, object p1);
    internal static string get_MarkupTransition_Description();
}
public class Microsoft.CodeAnalysis.Razor.CompilationTagHelperFeature : RazorEngineFeatureBase {
    private ITagHelperDescriptorProvider[] _providers;
    private IMetadataReferenceFeature _referenceFeature;
    public sealed virtual IReadOnlyList`1<TagHelperDescriptor> GetDescriptors();
    protected virtual void OnInitialized();
    internal static bool IsValidCompilation(Compilation compilation);
}
public static class Microsoft.CodeAnalysis.Razor.CompilerFeatures : object {
    public static void Register(RazorProjectEngineBuilder builder);
}
internal static class Microsoft.CodeAnalysis.Razor.ComponentDetectionConventions : object {
    public static bool IsComponent(INamedTypeSymbol symbol, INamedTypeSymbol icomponentSymbol);
}
internal class Microsoft.CodeAnalysis.Razor.ComponentTagHelperDescriptorProvider : RazorEngineFeatureBase {
    private static SymbolDisplayFormat FullNameTypeDisplayFormat;
    [CompilerGeneratedAttribute]
private bool <IncludeDocumentation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public bool IncludeDocumentation { get; public set; }
    public int Order { get; public set; }
    private static ComponentTagHelperDescriptorProvider();
    [CompilerGeneratedAttribute]
public bool get_IncludeDocumentation();
    [CompilerGeneratedAttribute]
public void set_IncludeDocumentation(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public sealed virtual void Execute(TagHelperDescriptorProviderContext context);
    private TagHelperDescriptor CreateShortNameMatchingDescriptor(ComponentSymbols symbols, INamedTypeSymbol type);
    private TagHelperDescriptor CreateFullyQualifiedNameMatchingDescriptor(ComponentSymbols symbols, INamedTypeSymbol type);
    private TagHelperDescriptorBuilder CreateDescriptorBuilder(ComponentSymbols symbols, INamedTypeSymbol type);
    private void CreateProperty(TagHelperDescriptorBuilder builder, IPropertySymbol property, PropertyKind kind);
    private void CreateTypeParameterProperty(TagHelperDescriptorBuilder builder, ITypeParameterSymbol typeParameter, bool cascade);
    private TagHelperDescriptor CreateChildContentDescriptor(ComponentSymbols symbols, TagHelperDescriptor component, BoundAttributeDescriptor attribute);
    private void CreateContextParameter(TagHelperDescriptorBuilder builder, string childContentName);
    private IEnumerable`1<ValueTuple`2<IPropertySymbol, PropertyKind>> GetProperties(ComponentSymbols symbols, INamedTypeSymbol type);
    [CompilerGeneratedAttribute]
internal static bool <CreateProperty>g__HasTypeParameter|13_1(ITypeSymbol type);
}
public class Microsoft.CodeAnalysis.Razor.DefaultMetadataReferenceFeature : RazorEngineFeatureBase {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<MetadataReference> <References>k__BackingField;
    public IReadOnlyList`1<MetadataReference> References { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<MetadataReference> get_References();
    [CompilerGeneratedAttribute]
public void set_References(IReadOnlyList`1<MetadataReference> value);
}
internal class Microsoft.CodeAnalysis.Razor.DefaultTagHelperDescriptorFactory : object {
    private static string TagHelperNameEnding;
    private INamedTypeSymbol _htmlAttributeNameAttributeSymbol;
    private INamedTypeSymbol _htmlAttributeNotBoundAttributeSymbol;
    private INamedTypeSymbol _htmlTargetElementAttributeSymbol;
    private INamedTypeSymbol _outputElementHintAttributeSymbol;
    private INamedTypeSymbol _iDictionarySymbol;
    private INamedTypeSymbol _restrictChildrenAttributeSymbol;
    private INamedTypeSymbol _editorBrowsableAttributeSymbol;
    internal static SymbolDisplayFormat FullNameTypeDisplayFormat;
    [CompilerGeneratedAttribute]
private bool <ExcludeHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDocumentation>k__BackingField;
    protected bool ExcludeHidden { get; }
    protected bool IncludeDocumentation { get; }
    public DefaultTagHelperDescriptorFactory(Compilation compilation, bool includeDocumentation, bool excludeHidden);
    private static DefaultTagHelperDescriptorFactory();
    [CompilerGeneratedAttribute]
protected bool get_ExcludeHidden();
    [CompilerGeneratedAttribute]
protected bool get_IncludeDocumentation();
    public virtual TagHelperDescriptor CreateDescriptor(INamedTypeSymbol type);
    private void AddTagMatchingRules(INamedTypeSymbol type, TagHelperDescriptorBuilder descriptorBuilder);
    private void AddBoundAttributes(INamedTypeSymbol type, TagHelperDescriptorBuilder builder);
    private void AddAllowedChildren(INamedTypeSymbol type, TagHelperDescriptorBuilder builder);
    private void AddDocumentation(INamedTypeSymbol type, TagHelperDescriptorBuilder builder);
    private void AddTagOutputHint(INamedTypeSymbol type, TagHelperDescriptorBuilder builder);
    private void ConfigureBoundAttribute(BoundAttributeDescriptorBuilder builder, IPropertySymbol property, INamedTypeSymbol containingType);
    private void ConfigureDictionaryBoundAttribute(BoundAttributeDescriptorBuilder builder, IPropertySymbol property, INamedTypeSymbol containingType, AttributeData attributeNameAttribute, string attributeName, bool hasPublicSetter);
    private IReadOnlyList`1<ITypeSymbol> GetDictionaryArgumentTypes(IPropertySymbol property);
    private static string HtmlTargetElementAttribute_Attributes(AttributeData attibute);
    private static string HtmlTargetElementAttribute_ParentTag(AttributeData attibute);
    private static string HtmlTargetElementAttribute_Tag(AttributeData attibute);
    private static TagStructure HtmlTargetElementAttribute_TagStructure(AttributeData attibute);
    private bool IsPotentialDictionaryProperty(IPropertySymbol property);
    private IEnumerable`1<IPropertySymbol> GetAccessibleProperties(INamedTypeSymbol typeSymbol);
    private bool ShouldSkipDescriptorCreation(ISymbol symbol);
    protected static string GetFullName(ITypeSymbol type);
    [CompilerGeneratedAttribute]
private bool <AddTagMatchingRules>b__17_0(AttributeData attribute);
    [CompilerGeneratedAttribute]
private bool <AddTagOutputHint>b__21_0(AttributeData a);
    [CompilerGeneratedAttribute]
private bool <ConfigureBoundAttribute>b__22_0(AttributeData a);
    [CompilerGeneratedAttribute]
private bool <GetDictionaryArgumentTypes>b__24_0(INamedTypeSymbol s);
    [CompilerGeneratedAttribute]
private bool <GetDictionaryArgumentTypes>b__24_1(INamedTypeSymbol s);
    [CompilerGeneratedAttribute]
private bool <IsPotentialDictionaryProperty>b__29_0(INamedTypeSymbol s);
    [CompilerGeneratedAttribute]
private bool <GetAccessibleProperties>b__30_0(AttributeData a);
    [CompilerGeneratedAttribute]
private bool <GetAccessibleProperties>b__30_1(AttributeData a);
    [CompilerGeneratedAttribute]
private bool <ShouldSkipDescriptorCreation>b__31_0(AttributeData a);
}
public class Microsoft.CodeAnalysis.Razor.DefaultTagHelperDescriptorProvider : RazorEngineFeatureBase {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public sealed virtual void Execute(TagHelperDescriptorProviderContext context);
    private bool IsTagHelperAssembly(IAssemblySymbol assembly);
}
internal class Microsoft.CodeAnalysis.Razor.DefaultTypeNameFeature : TypeNameFeature {
    public virtual IReadOnlyList`1<string> ParseTypeParameters(string typeName);
    public virtual TypeNameRewriter CreateGenericTypeRewriter(Dictionary`2<string, string> bindings);
    public virtual TypeNameRewriter CreateGlobalQualifiedTypeNameRewriter(ICollection`1<string> ignore);
    public virtual bool IsLambda(string expression);
}
internal class Microsoft.CodeAnalysis.Razor.EventHandlerTagHelperDescriptorProvider : object {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorEngine <Engine>k__BackingField;
    public int Order { get; public set; }
    public RazorEngine Engine { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public sealed virtual RazorEngine get_Engine();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Engine(RazorEngine value);
    public sealed virtual void Execute(TagHelperDescriptorProviderContext context);
    private List`1<EventHandlerData> GetEventHandlerData(TagHelperDescriptorProviderContext context, Compilation compilation, INamedTypeSymbol eventHandlerAttribute);
    private List`1<TagHelperDescriptor> CreateEventHandlerTagHelpers(List`1<EventHandlerData> data);
}
internal static class Microsoft.CodeAnalysis.Razor.FilePathComparer : object {
    private static StringComparer _instance;
    public static StringComparer Instance { get; }
    public static StringComparer get_Instance();
}
internal static class Microsoft.CodeAnalysis.Razor.FilePathComparison : object {
    private static Nullable`1<StringComparison> _instance;
    public static StringComparison Instance { get; }
    public static StringComparison get_Instance();
}
internal class Microsoft.CodeAnalysis.Razor.GenericTypeNameRewriter : TypeNameRewriter {
    private Dictionary`2<string, string> _bindings;
    public GenericTypeNameRewriter(Dictionary`2<string, string> bindings);
    public virtual string Rewrite(string typeName);
}
internal class Microsoft.CodeAnalysis.Razor.GlobalQualifiedTypeNameRewriter : TypeNameRewriter {
    private HashSet`1<string> _ignore;
    public GlobalQualifiedTypeNameRewriter(ICollection`1<string> ignore);
    public virtual string Rewrite(string typeName);
}
public interface Microsoft.CodeAnalysis.Razor.IMetadataReferenceFeature {
    public IReadOnlyList`1<MetadataReference> References { get; }
    public abstract virtual IReadOnlyList`1<MetadataReference> get_References();
}
internal class Microsoft.CodeAnalysis.Razor.KeyTagHelperDescriptorProvider : object {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorEngine <Engine>k__BackingField;
    public int Order { get; public set; }
    public RazorEngine Engine { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public sealed virtual RazorEngine get_Engine();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Engine(RazorEngine value);
    public sealed virtual void Execute(TagHelperDescriptorProviderContext context);
    private TagHelperDescriptor CreateKeyTagHelper();
}
internal static class Microsoft.CodeAnalysis.Razor.RazorDiagnosticFactory : object {
    private static string DiagnosticPrefix;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidAttributeNameNullOrEmpty;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidAttributePrefixNotNull;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidAttributePrefixNull;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidRequiredAttributeCharacter;
    internal static RazorDiagnosticDescriptor TagHelper_PartialRequiredAttributeOperator;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidRequiredAttributeOperator;
    internal static RazorDiagnosticDescriptor TagHelper_InvalidRequiredAttributeMismatchedQuotes;
    internal static RazorDiagnosticDescriptor TagHelper_CouldNotFindMatchingEndBrace;
    private static RazorDiagnosticFactory();
    public static RazorDiagnostic CreateTagHelper_InvalidAttributeNameNullOrEmpty(string tagHelperDisplayName, string propertyDisplayName);
    public static RazorDiagnostic CreateTagHelper_InvalidAttributePrefixNotNull(string tagHelperDisplayName, string propertyDisplayName);
    public static RazorDiagnostic CreateTagHelper_InvalidAttributePrefixNull(string tagHelperDisplayName, string propertyDisplayName);
    public static RazorDiagnostic CreateTagHelper_InvalidRequiredAttributeCharacter(char invalidCharacter, string requiredAttributes);
    public static RazorDiagnostic CreateTagHelper_PartialRequiredAttributeOperator(char partialOperator, string requiredAttributes);
    public static RazorDiagnostic CreateTagHelper_InvalidRequiredAttributeOperator(char invalidOperator, string requiredAttributes);
    public static RazorDiagnostic CreateTagHelper_InvalidRequiredAttributeMismatchedQuotes(char quote, string requiredAttributes);
    public static RazorDiagnostic CreateTagHelper_CouldNotFindMatchingEndBrace(string requiredAttributes);
}
public static class Microsoft.CodeAnalysis.Razor.RazorLanguage : object {
    public static string Name;
    public static string ContentType;
    public static string CoreContentType;
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Razor.RazorProjectEngineBuilderExtensions : object {
    [ExtensionAttribute]
public static RazorProjectEngineBuilder SetCSharpLanguageVersion(RazorProjectEngineBuilder builder, LanguageVersion csharpLanguageVersion);
}
internal class Microsoft.CodeAnalysis.Razor.RefTagHelperDescriptorProvider : object {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorEngine <Engine>k__BackingField;
    public int Order { get; public set; }
    public RazorEngine Engine { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public sealed virtual RazorEngine get_Engine();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Engine(RazorEngine value);
    public sealed virtual void Execute(TagHelperDescriptorProviderContext context);
    private TagHelperDescriptor CreateRefTagHelper();
}
internal static class Microsoft.CodeAnalysis.Razor.RequiredAttributeParser : object {
    public static void AddRequiredAttributes(string requiredAttributes, TagMatchingRuleDescriptorBuilder ruleBuilder);
}
[ExtensionAttribute]
internal static class Microsoft.CodeAnalysis.Razor.SourceSpanExtensions : object {
    [ExtensionAttribute]
public static TextSpan AsTextSpan(SourceSpan sourceSpan);
}
internal class Microsoft.CodeAnalysis.Razor.SplatTagHelperDescriptorProvider : object {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorEngine <Engine>k__BackingField;
    public int Order { get; public set; }
    public RazorEngine Engine { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public sealed virtual RazorEngine get_Engine();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Engine(RazorEngine value);
    public sealed virtual void Execute(TagHelperDescriptorProviderContext context);
    private TagHelperDescriptor CreateSplatTagHelper();
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Razor.TagHelperDescriptorProviderContextExtensions : object {
    [ExtensionAttribute]
public static Compilation GetCompilation(TagHelperDescriptorProviderContext context);
    [ExtensionAttribute]
public static void SetCompilation(TagHelperDescriptorProviderContext context, Compilation compilation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.CodeAnalysis.Razor.TagHelperTargetAssemblyExtensions : object {
    private static object TargetAssemblyKey;
    private static TagHelperTargetAssemblyExtensions();
    [ExtensionAttribute]
public static IAssemblySymbol GetTargetAssembly(ItemCollection items);
    [ExtensionAttribute]
public static void SetTargetAssembly(ItemCollection items, IAssemblySymbol symbol);
}
internal static class Microsoft.CodeAnalysis.Razor.TagHelperTypes : object {
    public static string ITagHelper;
    public static string IComponent;
    public static string IDictionary;
    public static string HtmlAttributeNameAttribute;
    public static string HtmlAttributeNotBoundAttribute;
    public static string HtmlTargetElementAttribute;
    public static string OutputElementHintAttribute;
    public static string RestrictChildrenAttribute;
}
internal class Microsoft.CodeAnalysis.Razor.TagHelperTypeVisitor : SymbolVisitor {
    private INamedTypeSymbol _interface;
    private List`1<INamedTypeSymbol> _results;
    public TagHelperTypeVisitor(INamedTypeSymbol interface, List`1<INamedTypeSymbol> results);
    public virtual void VisitNamedType(INamedTypeSymbol symbol);
    public virtual void VisitNamespace(INamespaceSymbol symbol);
    internal bool IsTagHelper(INamedTypeSymbol symbol);
}
[ExtensionAttribute]
internal static class Microsoft.CodeAnalysis.Razor.TextChangeExtensions : object {
    [ExtensionAttribute]
public static SourceChange AsSourceChange(TextChange textChange);
}
[ExtensionAttribute]
internal static class Microsoft.CodeAnalysis.Razor.TextSpanExtensions : object {
    [ExtensionAttribute]
public static SourceSpan AsSourceSpan(TextSpan textSpan);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
