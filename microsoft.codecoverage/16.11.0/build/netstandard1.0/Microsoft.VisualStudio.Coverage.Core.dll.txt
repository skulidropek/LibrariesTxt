[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.VisualStudio.Coverage.Core.Configurations.AttributeList : CachingExcludeIncludeList {
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Excluded>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Included>k__BackingField;
    [XmlArrayAttribute("Exclude")]
[XmlArrayItemAttribute("Attribute")]
public ObservableCollection`1<string> Excluded { get; public set; }
    [XmlArrayAttribute("Include")]
[XmlArrayItemAttribute("Attribute")]
public ObservableCollection`1<string> Included { get; public set; }
    [XmlIgnoreAttribute]
protected bool IgnoreCase { get; }
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Excluded();
    [CompilerGeneratedAttribute]
public virtual void set_Excluded(ObservableCollection`1<string> value);
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Included();
    [CompilerGeneratedAttribute]
public virtual void set_Included(ObservableCollection`1<string> value);
    protected virtual bool get_IgnoreCase();
}
public abstract class Microsoft.VisualStudio.Coverage.Core.Configurations.CachingExcludeIncludeList : ExcludeIncludeList {
    private IDictionary`2<string, bool> _includedResults;
    private void Included_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void Excluded_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    public virtual bool IsIncluded(string input);
}
[XmlRootAttribute("CodeCoverage")]
public class Microsoft.VisualStudio.Coverage.Core.Configurations.CodeCoverageConfig : object {
    internal static UInt32 MinimumCommunicationTimeout;
    internal static bool CollectFromChildProcessesDefault;
    internal static bool UseVerifiableInstrumentationDefault;
    internal static bool UseManagedInstrumentationDefault;
    internal static bool ForceVerifiableInstrumentationDefault;
    internal static bool EnableFlatAssemblyDefault;
    internal static bool AllowLowIntegrityProcessesDefault;
    internal static bool ExcludeAutoGeneratedModulesDefault;
    internal static bool SymbolsRestrictOriginalPathAccessDefault;
    internal static bool SymbolsRestrictReferencePathAccessDefault;
    internal static bool SymbolsRestrictDbgAccessDefault;
    internal static bool SymbolsRestrictSystemRootAccessDefault;
    internal static bool SkipNativeInstrumentationDefault;
    [CompilerGeneratedAttribute]
private bool <SplitCoverage>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <CommunicationTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CollectFromChildProcesses>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseVerifiableInstrumentation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceVerifiableInstrumentation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableFlatAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowLowIntegrityProcesses>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SymbolsRestrictOriginalPathAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SymbolsRestrictReferencePathAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SymbolsRestrictDbgAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SymbolsRestrictSystemRootAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeCompilerAutoGeneratedModules>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseManagedInstrumentation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipNativeInstrumentation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CollectAspDotNet>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AllowedUsers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <SymbolSearchPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private EntryPointList <EntryPoints>k__BackingField;
    [CompilerGeneratedAttribute]
private ModuleList <Modules>k__BackingField;
    [CompilerGeneratedAttribute]
private PublicKeyTokenList <PublicKeyTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private CompanyNameList <CompanyNames>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeList <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceList <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private FunctionList <Functions>k__BackingField;
    [XmlIgnoreAttribute]
public bool SplitCoverage { get; public set; }
    [XmlAttributeAttribute("SplitCoverage")]
public string SplitCoverageString { get; public set; }
    [XmlElementAttribute("CommunicationTimeout")]
public UInt32 CommunicationTimeout { get; public set; }
    [XmlIgnoreAttribute]
public bool CollectFromChildProcesses { get; public set; }
    [XmlElementAttribute("CollectFromChildProcesses")]
public string CollectFromChildProcessesString { get; public set; }
    [XmlIgnoreAttribute]
public bool UseVerifiableInstrumentation { get; public set; }
    [XmlElementAttribute("UseVerifiableInstrumentation")]
public string UseVerifiableInstrumentationString { get; public set; }
    [XmlIgnoreAttribute]
public bool ForceVerifiableInstrumentation { get; public set; }
    [XmlElementAttribute("ForceVerifiableInstrumentation")]
public string ForceVerifiableInstrumentationString { get; public set; }
    [XmlIgnoreAttribute]
public bool EnableFlatAssembly { get; public set; }
    [XmlElementAttribute("EnableFlatAssembly")]
public string EnableFlatAssemblyString { get; public set; }
    [XmlIgnoreAttribute]
public bool AllowLowIntegrityProcesses { get; public set; }
    [XmlElementAttribute("AllowLowIntegrityProcesses")]
public string AllowLowIntegrityProcessesString { get; public set; }
    [XmlIgnoreAttribute]
public bool SymbolsRestrictOriginalPathAccess { get; public set; }
    [XmlElementAttribute("SymbolsRestrictOriginalPathAccess")]
public string SymbolsRestrictOriginalPathAccessString { get; public set; }
    [XmlIgnoreAttribute]
public bool SymbolsRestrictReferencePathAccess { get; public set; }
    [XmlElementAttribute("SymbolsRestrictReferencePathAccess")]
public string SymbolsRestrictReferencePathAccessString { get; public set; }
    [XmlIgnoreAttribute]
public bool SymbolsRestrictDbgAccess { get; public set; }
    [XmlElementAttribute("SymbolsRestrictDBGAccess")]
public string SymbolsRestrictDbgAccessString { get; public set; }
    [XmlIgnoreAttribute]
public bool SymbolsRestrictSystemRootAccess { get; public set; }
    [XmlElementAttribute("SymbolsRestrictSystemRootAccess")]
public string SymbolsRestrictSystemRootAccessString { get; public set; }
    [XmlIgnoreAttribute]
public bool ExcludeCompilerAutoGeneratedModules { get; public set; }
    [XmlElementAttribute("ExcludeCompilerAutoGeneratedModules")]
public string ExcludeCompilerAutoGeneratedModulesString { get; public set; }
    [XmlIgnoreAttribute]
public bool UseManagedInstrumentation { get; public set; }
    [XmlElementAttribute("UseManagedInstrumentation")]
public string UseManagedInstrumentationString { get; public set; }
    [XmlIgnoreAttribute]
public bool SkipNativeInstrumentation { get; public set; }
    [XmlElementAttribute("SkipNativeInstrumentation")]
public string SkipNativeInstrumentationString { get; public set; }
    [XmlIgnoreAttribute]
public bool CollectAspDotNet { get; public set; }
    [XmlElementAttribute("CollectAspDotNet")]
public string CollectAspDotNetString { get; public set; }
    [XmlArrayAttribute("AllowedUsers")]
[XmlArrayItemAttribute("User")]
public List`1<string> AllowedUsers { get; public set; }
    [XmlArrayAttribute("SymbolSearchPaths")]
[XmlArrayItemAttribute("Path")]
public List`1<string> SymbolSearchPaths { get; public set; }
    [XmlElementAttribute("EntryPoints")]
public EntryPointList EntryPoints { get; public set; }
    [XmlElementAttribute("ModulePaths")]
public ModuleList Modules { get; public set; }
    [XmlElementAttribute("PublicKeyTokens")]
public PublicKeyTokenList PublicKeyTokens { get; public set; }
    [XmlElementAttribute("CompanyNames")]
public CompanyNameList CompanyNames { get; public set; }
    [XmlElementAttribute("Attributes")]
public AttributeList Attributes { get; public set; }
    [XmlElementAttribute("Sources")]
public SourceList Sources { get; public set; }
    [XmlElementAttribute("Functions")]
public FunctionList Functions { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_SplitCoverage();
    [CompilerGeneratedAttribute]
public void set_SplitCoverage(bool value);
    public string get_SplitCoverageString();
    public void set_SplitCoverageString(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_CommunicationTimeout();
    [CompilerGeneratedAttribute]
public void set_CommunicationTimeout(UInt32 value);
    [CompilerGeneratedAttribute]
public bool get_CollectFromChildProcesses();
    [CompilerGeneratedAttribute]
public void set_CollectFromChildProcesses(bool value);
    public string get_CollectFromChildProcessesString();
    public void set_CollectFromChildProcessesString(string value);
    [CompilerGeneratedAttribute]
public bool get_UseVerifiableInstrumentation();
    [CompilerGeneratedAttribute]
public void set_UseVerifiableInstrumentation(bool value);
    public string get_UseVerifiableInstrumentationString();
    public void set_UseVerifiableInstrumentationString(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceVerifiableInstrumentation();
    [CompilerGeneratedAttribute]
public void set_ForceVerifiableInstrumentation(bool value);
    public string get_ForceVerifiableInstrumentationString();
    public void set_ForceVerifiableInstrumentationString(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableFlatAssembly();
    [CompilerGeneratedAttribute]
public void set_EnableFlatAssembly(bool value);
    public string get_EnableFlatAssemblyString();
    public void set_EnableFlatAssemblyString(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowLowIntegrityProcesses();
    [CompilerGeneratedAttribute]
public void set_AllowLowIntegrityProcesses(bool value);
    public string get_AllowLowIntegrityProcessesString();
    public void set_AllowLowIntegrityProcessesString(string value);
    [CompilerGeneratedAttribute]
public bool get_SymbolsRestrictOriginalPathAccess();
    [CompilerGeneratedAttribute]
public void set_SymbolsRestrictOriginalPathAccess(bool value);
    public string get_SymbolsRestrictOriginalPathAccessString();
    public void set_SymbolsRestrictOriginalPathAccessString(string value);
    [CompilerGeneratedAttribute]
public bool get_SymbolsRestrictReferencePathAccess();
    [CompilerGeneratedAttribute]
public void set_SymbolsRestrictReferencePathAccess(bool value);
    public string get_SymbolsRestrictReferencePathAccessString();
    public void set_SymbolsRestrictReferencePathAccessString(string value);
    [CompilerGeneratedAttribute]
public bool get_SymbolsRestrictDbgAccess();
    [CompilerGeneratedAttribute]
public void set_SymbolsRestrictDbgAccess(bool value);
    public string get_SymbolsRestrictDbgAccessString();
    public void set_SymbolsRestrictDbgAccessString(string value);
    [CompilerGeneratedAttribute]
public bool get_SymbolsRestrictSystemRootAccess();
    [CompilerGeneratedAttribute]
public void set_SymbolsRestrictSystemRootAccess(bool value);
    public string get_SymbolsRestrictSystemRootAccessString();
    public void set_SymbolsRestrictSystemRootAccessString(string value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeCompilerAutoGeneratedModules();
    [CompilerGeneratedAttribute]
public void set_ExcludeCompilerAutoGeneratedModules(bool value);
    public string get_ExcludeCompilerAutoGeneratedModulesString();
    public void set_ExcludeCompilerAutoGeneratedModulesString(string value);
    [CompilerGeneratedAttribute]
public bool get_UseManagedInstrumentation();
    [CompilerGeneratedAttribute]
public void set_UseManagedInstrumentation(bool value);
    public string get_UseManagedInstrumentationString();
    public void set_UseManagedInstrumentationString(string value);
    [CompilerGeneratedAttribute]
public bool get_SkipNativeInstrumentation();
    [CompilerGeneratedAttribute]
public void set_SkipNativeInstrumentation(bool value);
    public string get_SkipNativeInstrumentationString();
    public void set_SkipNativeInstrumentationString(string value);
    [CompilerGeneratedAttribute]
public bool get_CollectAspDotNet();
    [CompilerGeneratedAttribute]
public void set_CollectAspDotNet(bool value);
    public string get_CollectAspDotNetString();
    public void set_CollectAspDotNetString(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AllowedUsers();
    [CompilerGeneratedAttribute]
public void set_AllowedUsers(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_SymbolSearchPaths();
    [CompilerGeneratedAttribute]
public void set_SymbolSearchPaths(List`1<string> value);
    [CompilerGeneratedAttribute]
public EntryPointList get_EntryPoints();
    [CompilerGeneratedAttribute]
public void set_EntryPoints(EntryPointList value);
    [CompilerGeneratedAttribute]
public ModuleList get_Modules();
    [CompilerGeneratedAttribute]
public void set_Modules(ModuleList value);
    [CompilerGeneratedAttribute]
public PublicKeyTokenList get_PublicKeyTokens();
    [CompilerGeneratedAttribute]
public void set_PublicKeyTokens(PublicKeyTokenList value);
    [CompilerGeneratedAttribute]
public CompanyNameList get_CompanyNames();
    [CompilerGeneratedAttribute]
public void set_CompanyNames(CompanyNameList value);
    [CompilerGeneratedAttribute]
public AttributeList get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(AttributeList value);
    [CompilerGeneratedAttribute]
public SourceList get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(SourceList value);
    [CompilerGeneratedAttribute]
public FunctionList get_Functions();
    [CompilerGeneratedAttribute]
public void set_Functions(FunctionList value);
    public bool ShouldSerializeSplitCoverageString();
    public bool ShouldSerializeCommunicationTimeout();
    public bool ShouldSerializeEnableFlatAssemblyString();
    public bool ShouldSerializeAllowLowIntegrityProcessesString();
    public bool ShouldSerializeSymbolsRestrictOriginalPathAccessString();
    public bool ShouldSerializeSymbolsRestrictReferencePathAccessString();
    public bool ShouldSerializeSymbolsRestrictDbgAccessString();
    public bool ShouldSerializeSymbolsRestrictSystemRootAccessString();
    public bool ShouldSerializeExcludeCompilerAutoGeneratedModulesString();
    public bool ShouldSerializeUseManagedInstrumentationString();
    public bool ShouldSerializeSkipNativeInstrumentationString();
}
[XmlRootAttribute("RunSettings")]
public class Microsoft.VisualStudio.Coverage.Core.Configurations.CodeCoverageRunSettings : object {
    [CompilerGeneratedAttribute]
private DataCollectionRunSettings <RunSettings>k__BackingField;
    [XmlElementAttribute("DataCollectionRunSettings")]
public DataCollectionRunSettings RunSettings { get; public set; }
    [CompilerGeneratedAttribute]
public DataCollectionRunSettings get_RunSettings();
    [CompilerGeneratedAttribute]
public void set_RunSettings(DataCollectionRunSettings value);
}
public class Microsoft.VisualStudio.Coverage.Core.Configurations.CompanyNameList : CachingExcludeIncludeList {
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Excluded>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Included>k__BackingField;
    [XmlArrayAttribute("Exclude")]
[XmlArrayItemAttribute("CompanyName")]
public ObservableCollection`1<string> Excluded { get; public set; }
    [XmlArrayAttribute("Include")]
[XmlArrayItemAttribute("CompanyName")]
public ObservableCollection`1<string> Included { get; public set; }
    [XmlIgnoreAttribute]
protected bool IgnoreCase { get; }
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Excluded();
    [CompilerGeneratedAttribute]
public virtual void set_Excluded(ObservableCollection`1<string> value);
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Included();
    [CompilerGeneratedAttribute]
public virtual void set_Included(ObservableCollection`1<string> value);
    protected virtual bool get_IgnoreCase();
}
public class Microsoft.VisualStudio.Coverage.Core.Configurations.DataCollectionRunSettings : object {
    [CompilerGeneratedAttribute]
private List`1<DataCollectorSettings> <DataCollectors>k__BackingField;
    [XmlArrayAttribute("DataCollectors")]
[XmlArrayItemAttribute("DataCollector")]
public List`1<DataCollectorSettings> DataCollectors { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<DataCollectorSettings> get_DataCollectors();
    [CompilerGeneratedAttribute]
public void set_DataCollectors(List`1<DataCollectorSettings> value);
    [ExcludeFromCodeCoverageAttribute]
public static bool op_Equality(DataCollectionRunSettings left, DataCollectionRunSettings right);
    [ExcludeFromCodeCoverageAttribute]
public static bool op_Inequality(DataCollectionRunSettings left, DataCollectionRunSettings right);
    [ExcludeFromCodeCoverageAttribute]
public virtual bool Equals(object obj);
    [ExcludeFromCodeCoverageAttribute]
private bool Equals(DataCollectionRunSettings other);
    [ExcludeFromCodeCoverageAttribute]
public virtual int GetHashCode();
    [ExcludeFromCodeCoverageAttribute]
public virtual string ToString();
}
[XmlRootAttribute("Configuration")]
public class Microsoft.VisualStudio.Coverage.Core.Configurations.DataCollectorConfiguration : object {
    internal static bool ClrIeInstrumentationNetCoreDefault;
    internal static bool ClrIeInstrumentationNetFrameworkDefault;
    internal static bool UseManagedVanguardDefault;
    [CompilerGeneratedAttribute]
private string <Framework>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InjectDotnetAdditionalDeps>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClrIeInstrumentationNetCore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClrIeInstrumentationNetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CoverageLogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstrumentationLogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CoverageFileLogPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManagedVanguardLogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseManagedVanguard>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CoverageFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeCoverageConfig <CodeCoverageConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VanguardInstallDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClrIeX86InstallDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClrIeX64InstallDir>k__BackingField;
    [XmlElementAttribute("Framework")]
public string Framework { get; public set; }
    [XmlIgnoreAttribute]
public bool InjectDotnetAdditionalDeps { get; public set; }
    [XmlElementAttribute("InjectDotnetAdditionalDeps")]
public string InjectDotnetAdditionalDepsString { get; public set; }
    [XmlIgnoreAttribute]
public bool ClrIeInstrumentationNetCore { get; public set; }
    [XmlElementAttribute("CLRIEInstrumentationNetCore")]
public string ClrIeInstrumentationNetCoreString { get; public set; }
    [XmlIgnoreAttribute]
public bool ClrIeInstrumentationNetFramework { get; public set; }
    [XmlElementAttribute("CLRIEInstrumentationNetFramework")]
public string ClrIeInstrumentationNetFrameworkString { get; public set; }
    [XmlElementAttribute("LogFile")]
public string LogFile { get; public set; }
    [XmlElementAttribute("CoverageLogLevel")]
public string CoverageLogLevel { get; public set; }
    [XmlElementAttribute("InstrumentationLogLevel")]
public string InstrumentationLogLevel { get; public set; }
    [XmlElementAttribute("CoverageFileLogPath")]
public string CoverageFileLogPath { get; public set; }
    [XmlElementAttribute("ManagedVanguardLogLevel")]
public string ManagedVanguardLogLevel { get; public set; }
    [XmlIgnoreAttribute]
public bool UseManagedVanguard { get; public set; }
    [XmlElementAttribute("UseManagedVanguard")]
public string UseManagedVanguardString { get; public set; }
    [XmlElementAttribute("CoverageFileName")]
public string CoverageFileName { get; public set; }
    [XmlElementAttribute("CodeCoverage")]
public CodeCoverageConfig CodeCoverageConfig { get; public set; }
    [XmlElementAttribute("VanguardInstallDir")]
public string VanguardInstallDir { get; public set; }
    [XmlElementAttribute("CLRIEX86InstallDir")]
public string ClrIeX86InstallDir { get; public set; }
    [XmlElementAttribute("CLRIEX64InstallDir")]
public string ClrIeX64InstallDir { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Framework();
    [CompilerGeneratedAttribute]
public void set_Framework(string value);
    [CompilerGeneratedAttribute]
public bool get_InjectDotnetAdditionalDeps();
    [CompilerGeneratedAttribute]
public void set_InjectDotnetAdditionalDeps(bool value);
    public string get_InjectDotnetAdditionalDepsString();
    public void set_InjectDotnetAdditionalDepsString(string value);
    [CompilerGeneratedAttribute]
public bool get_ClrIeInstrumentationNetCore();
    [CompilerGeneratedAttribute]
public void set_ClrIeInstrumentationNetCore(bool value);
    public string get_ClrIeInstrumentationNetCoreString();
    public void set_ClrIeInstrumentationNetCoreString(string value);
    [CompilerGeneratedAttribute]
public bool get_ClrIeInstrumentationNetFramework();
    [CompilerGeneratedAttribute]
public void set_ClrIeInstrumentationNetFramework(bool value);
    public string get_ClrIeInstrumentationNetFrameworkString();
    public void set_ClrIeInstrumentationNetFrameworkString(string value);
    [CompilerGeneratedAttribute]
public string get_LogFile();
    [CompilerGeneratedAttribute]
public void set_LogFile(string value);
    [CompilerGeneratedAttribute]
public string get_CoverageLogLevel();
    [CompilerGeneratedAttribute]
public void set_CoverageLogLevel(string value);
    [CompilerGeneratedAttribute]
public string get_InstrumentationLogLevel();
    [CompilerGeneratedAttribute]
public void set_InstrumentationLogLevel(string value);
    [CompilerGeneratedAttribute]
public string get_CoverageFileLogPath();
    [CompilerGeneratedAttribute]
public void set_CoverageFileLogPath(string value);
    [CompilerGeneratedAttribute]
public string get_ManagedVanguardLogLevel();
    [CompilerGeneratedAttribute]
public void set_ManagedVanguardLogLevel(string value);
    [CompilerGeneratedAttribute]
public bool get_UseManagedVanguard();
    [CompilerGeneratedAttribute]
public void set_UseManagedVanguard(bool value);
    public string get_UseManagedVanguardString();
    public void set_UseManagedVanguardString(string value);
    [CompilerGeneratedAttribute]
public string get_CoverageFileName();
    [CompilerGeneratedAttribute]
public void set_CoverageFileName(string value);
    [CompilerGeneratedAttribute]
public CodeCoverageConfig get_CodeCoverageConfig();
    [CompilerGeneratedAttribute]
public void set_CodeCoverageConfig(CodeCoverageConfig value);
    [CompilerGeneratedAttribute]
public string get_VanguardInstallDir();
    [CompilerGeneratedAttribute]
public void set_VanguardInstallDir(string value);
    [CompilerGeneratedAttribute]
public string get_ClrIeX86InstallDir();
    [CompilerGeneratedAttribute]
public void set_ClrIeX86InstallDir(string value);
    [CompilerGeneratedAttribute]
public string get_ClrIeX64InstallDir();
    [CompilerGeneratedAttribute]
public void set_ClrIeX64InstallDir(string value);
}
public class Microsoft.VisualStudio.Coverage.Core.Configurations.DataCollectorSettings : object {
    [CompilerGeneratedAttribute]
private string <FriendlyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyQualifiedName>k__BackingField;
    [CompilerGeneratedAttribute]
private DataCollectorConfiguration <Configuration>k__BackingField;
    [XmlAttributeAttribute("friendlyName")]
public string FriendlyName { get; public set; }
    [XmlAttributeAttribute("uri")]
public string Uri { get; public set; }
    [XmlAttributeAttribute("assemblyQualifiedName")]
public string AssemblyQualifiedName { get; public set; }
    [XmlElementAttribute("Configuration")]
public DataCollectorConfiguration Configuration { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FriendlyName();
    [CompilerGeneratedAttribute]
public void set_FriendlyName(string value);
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyQualifiedName();
    [CompilerGeneratedAttribute]
public void set_AssemblyQualifiedName(string value);
    [CompilerGeneratedAttribute]
public DataCollectorConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(DataCollectorConfiguration value);
}
public class Microsoft.VisualStudio.Coverage.Core.Configurations.EntryPointList : CachingExcludeIncludeList {
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Excluded>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Included>k__BackingField;
    [XmlArrayAttribute("Exclude")]
[XmlArrayItemAttribute("EntryPoint")]
public ObservableCollection`1<string> Excluded { get; public set; }
    [XmlArrayAttribute("Include")]
[XmlArrayItemAttribute("EntryPoint")]
public ObservableCollection`1<string> Included { get; public set; }
    [XmlIgnoreAttribute]
protected bool IgnoreCase { get; }
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Excluded();
    [CompilerGeneratedAttribute]
public virtual void set_Excluded(ObservableCollection`1<string> value);
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Included();
    [CompilerGeneratedAttribute]
public virtual void set_Included(ObservableCollection`1<string> value);
    protected virtual bool get_IgnoreCase();
}
public abstract class Microsoft.VisualStudio.Coverage.Core.Configurations.ExcludeIncludeList : object {
    private IList`1<RegularExpression> _includedExpressions;
    private IList`1<RegularExpression> _excludedExpressions;
    private bool _includeAll;
    private bool _hasInclude;
    private bool _excludeAll;
    [XmlIgnoreAttribute]
public ObservableCollection`1<string> Excluded { get; public set; }
    [XmlIgnoreAttribute]
public ObservableCollection`1<string> Included { get; public set; }
    [XmlIgnoreAttribute]
protected bool IgnoreCase { get; }
    public bool IncludeAll { get; }
    private void Included_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void Excluded_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void UpdateExpressionsList(NotifyCollectionChangedEventArgs e, IList`1<RegularExpression> expressions, Boolean& all);
    public abstract virtual ObservableCollection`1<string> get_Excluded();
    public abstract virtual void set_Excluded(ObservableCollection`1<string> value);
    public abstract virtual ObservableCollection`1<string> get_Included();
    public abstract virtual void set_Included(ObservableCollection`1<string> value);
    protected abstract virtual bool get_IgnoreCase();
    public bool get_IncludeAll();
    public virtual bool IsIncluded(string input);
    public bool IsIncludedExplicitly(string input);
    private bool InternalIsIncluded(string input);
    private bool InternalIsExcluded(string input);
    private bool MatchesExpression(string input, IList`1<RegularExpression> expressions);
    public bool ShouldSerializeExcluded();
    public bool ShouldSerializeIncluded();
}
public class Microsoft.VisualStudio.Coverage.Core.Configurations.FunctionList : ExcludeIncludeList {
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Excluded>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Included>k__BackingField;
    [XmlArrayAttribute("Exclude")]
[XmlArrayItemAttribute("Function")]
public ObservableCollection`1<string> Excluded { get; public set; }
    [XmlArrayAttribute("Include")]
[XmlArrayItemAttribute("Function")]
public ObservableCollection`1<string> Included { get; public set; }
    [XmlIgnoreAttribute]
protected bool IgnoreCase { get; }
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Excluded();
    [CompilerGeneratedAttribute]
public virtual void set_Excluded(ObservableCollection`1<string> value);
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Included();
    [CompilerGeneratedAttribute]
public virtual void set_Included(ObservableCollection`1<string> value);
    protected virtual bool get_IgnoreCase();
}
public class Microsoft.VisualStudio.Coverage.Core.Configurations.ModuleList : ExcludeIncludeList {
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Included>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Excluded>k__BackingField;
    [XmlArrayAttribute("Include")]
[XmlArrayItemAttribute("ModulePath")]
public ObservableCollection`1<string> Included { get; public set; }
    [XmlArrayAttribute("Exclude")]
[XmlArrayItemAttribute("ModulePath")]
public ObservableCollection`1<string> Excluded { get; public set; }
    [XmlIgnoreAttribute]
protected bool IgnoreCase { get; }
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Included();
    [CompilerGeneratedAttribute]
public virtual void set_Included(ObservableCollection`1<string> value);
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Excluded();
    [CompilerGeneratedAttribute]
public virtual void set_Excluded(ObservableCollection`1<string> value);
    protected virtual bool get_IgnoreCase();
}
public class Microsoft.VisualStudio.Coverage.Core.Configurations.PublicKeyTokenList : CachingExcludeIncludeList {
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Excluded>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Included>k__BackingField;
    [XmlArrayAttribute("Exclude")]
[XmlArrayItemAttribute("PublicKeyToken")]
public ObservableCollection`1<string> Excluded { get; public set; }
    [XmlArrayAttribute("Include")]
[XmlArrayItemAttribute("PublicKeyToken")]
public ObservableCollection`1<string> Included { get; public set; }
    [XmlIgnoreAttribute]
protected bool IgnoreCase { get; }
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Excluded();
    [CompilerGeneratedAttribute]
public virtual void set_Excluded(ObservableCollection`1<string> value);
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Included();
    [CompilerGeneratedAttribute]
public virtual void set_Included(ObservableCollection`1<string> value);
    protected virtual bool get_IgnoreCase();
}
internal class Microsoft.VisualStudio.Coverage.Core.Configurations.RegularExpression : SimpleExpression {
    private Regex _regex;
    private bool _valid;
    internal bool IsValid { get; }
    internal RegularExpression(string pattern, bool ignoreCase);
    internal virtual bool Match(string value);
    internal virtual bool get_IsValid();
}
internal class Microsoft.VisualStudio.Coverage.Core.Configurations.SimpleExpression : object {
    private bool _isPrefix;
    private bool _isSuffix;
    private string _pattern;
    private StringComparison _stringComparison;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    internal bool IsValid { get; private set; }
    internal SimpleExpression(string pattern, bool ignoreCase);
    internal virtual bool Match(string value);
    [CompilerGeneratedAttribute]
internal virtual bool get_IsValid();
    [CompilerGeneratedAttribute]
private void set_IsValid(bool value);
    protected static string TrimPrefix(string pattern);
    protected static string TrimSuffix(string pattern);
    private static bool IsSpecialCharacter(char c);
}
public class Microsoft.VisualStudio.Coverage.Core.Configurations.SourceList : CachingExcludeIncludeList {
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Excluded>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Included>k__BackingField;
    [XmlArrayAttribute("Exclude")]
[XmlArrayItemAttribute("Source")]
public ObservableCollection`1<string> Excluded { get; public set; }
    [XmlArrayAttribute("Include")]
[XmlArrayItemAttribute("Source")]
public ObservableCollection`1<string> Included { get; public set; }
    [XmlIgnoreAttribute]
protected bool IgnoreCase { get; }
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Excluded();
    [CompilerGeneratedAttribute]
public virtual void set_Excluded(ObservableCollection`1<string> value);
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Included();
    [CompilerGeneratedAttribute]
public virtual void set_Included(ObservableCollection`1<string> value);
    protected virtual bool get_IgnoreCase();
}
internal static class Microsoft.VisualStudio.Coverage.Core.Constants : object {
    public static ushort CurrentCodeCoverageSchemaVersion;
    public static UInt32 CodeCoverageFileHeaderMagic;
    public static UInt32 CodeCoverageStreamHeaderMagic;
    [CompilerGeneratedAttribute]
private static Guid <ModulesSkippedStreamType>k__BackingField;
    [CompilerGeneratedAttribute]
private static Guid <ModuleDataStreamType>k__BackingField;
    [CompilerGeneratedAttribute]
private static Guid <CoverageDataStreamType>k__BackingField;
    public static string CoverageFileExtension;
    public static string CoverageFileBackupExtension;
    public static string ModuleCoverageFileExtension;
    public static string ModuleCoverageFileBackupExtension;
    public static string ModuleBufferFileExtension;
    public static Guid ModulesSkippedStreamType { get; }
    public static Guid ModuleDataStreamType { get; }
    public static Guid CoverageDataStreamType { get; }
    private static Constants();
    [CompilerGeneratedAttribute]
public static Guid get_ModulesSkippedStreamType();
    [CompilerGeneratedAttribute]
public static Guid get_ModuleDataStreamType();
    [CompilerGeneratedAttribute]
public static Guid get_CoverageDataStreamType();
}
public enum Microsoft.VisualStudio.Coverage.Core.CoverageStatus : Enum {
    public int value__;
    public static CoverageStatus yes;
    public static CoverageStatus partial;
    public static CoverageStatus no;
}
public enum Microsoft.VisualStudio.Coverage.Core.FunctionSkipReason : Enum {
    public int value__;
    public static FunctionSkipReason too_small;
    public static FunctionSkipReason too_large;
    public static FunctionSkipReason source_excluded;
    public static FunctionSkipReason name_excluded;
    public static FunctionSkipReason excluded_inline;
    public static FunctionSkipReason has_external_branch;
    public static FunctionSkipReason is_duplicate;
    public static FunctionSkipReason attribute_excluded;
    public static FunctionSkipReason no_line_information;
    public static FunctionSkipReason instrumentation_failure;
}
internal class Microsoft.VisualStudio.Coverage.Core.IO.BinaryMessageReader : object {
    private bool _haveTag;
    private UInt32 _currentTag;
    [CompilerGeneratedAttribute]
private BinaryReader <Reader>k__BackingField;
    [CompilerGeneratedAttribute]
private long <End>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Start>k__BackingField;
    public BinaryReader Reader { get; }
    public long CurrentPosition { get; }
    public long End { get; }
    public long Start { get; }
    public BinaryMessageReader(BinaryReader reader, long startOffset, long endOffset);
    public BinaryMessageReader(BinaryReader reader, long startOffset, long endOffset, bool sync);
    [CompilerGeneratedAttribute]
public BinaryReader get_Reader();
    public long get_CurrentPosition();
    [CompilerGeneratedAttribute]
public long get_End();
    [CompilerGeneratedAttribute]
public long get_Start();
    public bool HasMessage(ushort messageTag);
    public void Sync();
    public bool CanRead();
    public SuccessMessage ReadSuccessMessage();
    public RegisterClientMessage ReadRegisterClientMessage();
    public RegisterClientResponseMessage ReadRegisterClientResponseMessage();
    public CreateStreamMessage ReadCreateStreamMessage();
    public CreateStreamResponseMessage ReadCreateStreamResponseMessage();
    public WriteStreamMessage ReadWriteStreamMessage();
    public CloseStreamMessage ReadCloseStreamMessage();
    public ClientErrorMessage ReadClientErrorMessage();
    public ShutdownMessage ReadShutdownMessage();
    public WriteStreamBuffersMessage ReadWriteStreamBuffersMessage();
    public ConfigLoggerMessage ReadConfigLoggerMessage();
    public GetCoverageDataMessage ReadGetCoverageDataMessage();
    public InitializeClientMessage ReadInitializeClientMessage();
    public InitializeClientResponseMessage ReadInitializeClientResponseMessage();
    public LoadModuleDataMessage ReadLoadModuleDataMessage();
    public InstrumentedModuleMessage ReadInstrumentedModuleMessage();
    public InstrumentedFunctionMessage ReadInstrumentedFunctionMessage();
    public PreloadModuleDataMessage ReadPreloadModuleDataMessage();
    public PreloadModuleDataResponseMessage ReadPreloadModuleDataResponseMessage();
    public TestCoverageDataMessage ReadTestCoverageDataMessage();
    public ModuleBufferMessage ReadModuleBufferMessage();
    public ModuleInstrumentedMessage ReadModuleInstrumentedMessage();
    private static ModuleInstrumentedMessage ReadModuleInstrumentedMessage(BinaryReader reader);
    public SourceFileDataMessage ReadSourceFileDataMessage();
    public FunctionInstrumentedMessage ReadFunctionInstrumentedMessage();
    private static BlockLineDataMessage ReadBlockLineDataMessage(BinaryReader reader);
    public FunctionSkippedMessage ReadFunctionSkippedMessage();
    public ModuleSkippedMessage ReadModuleSkippedMessage();
}
internal static class Microsoft.VisualStudio.Coverage.Core.IO.BinaryMessageWriter : object {
    public static void WriteSuccessMessage(BinaryWriter writer);
    public static void WriteRegisterClientMessage(BinaryWriter writer, RegisterClientMessage message);
    public static void WriteRegisterClientResponseMessage(BinaryWriter writer);
    public static void WriteCreateStreamMessage(BinaryWriter writer, CreateStreamMessage message);
    public static void WriteCreateStreamResponseMessage(BinaryWriter writer, CreateStreamResponseMessage message);
    public static void WriteWriteStreamMessage(BinaryWriter writer, WriteStreamMessage message);
    public static void WriteCloseStreamMessage(BinaryWriter writer, CloseStreamMessage message);
    public static void WriteClientErrorMessage(BinaryWriter writer, ClientErrorMessage message);
    public static void WriteShutdownMessage(BinaryWriter writer);
    public static void WriteWriteStreamBuffersMessage(BinaryWriter writer, WriteStreamBuffersMessage message);
    public static void WriteConfigLoggerMessage(BinaryWriter writer);
    public static void WriteGetCoverageDataMessage(BinaryWriter writer, GetCoverageDataMessage message);
    public static void WriteInitializeClientMessage(BinaryWriter writer, InitializeClientMessage message);
    public static void WriteInitializeClientResponseMessage(BinaryWriter writer, InitializeClientResponseMessage message);
    public static void WriteLoadModuleDataMessage(BinaryWriter writer, LoadModuleDataMessage message);
    public static void WriteInstrumentedModuleMessage(BinaryWriter writer, InstrumentedModuleMessage message);
    public static void WriteInstrumentedFunctionMessage(BinaryWriter writer, InstrumentedFunctionMessage message);
    public static void WritePreloadModuleDataMessage(BinaryWriter writer, PreloadModuleDataMessage message);
    public static void WritePreloadModuleDataResponseMessage(BinaryWriter writer, PreloadModuleDataResponseMessage message);
    public static void WriteTestCoverageDataMessage(BinaryWriter writer, TestCoverageDataMessage message);
    public static void WriteModuleBufferMessage(BinaryWriter writer, ModuleBufferMessage message);
    public static void WriteModuleInstrumentedMessage(BinaryWriter writer, ModuleInstrumentedMessage message);
    public static void WriteFunctionInstrumentedMessage(BinaryWriter writer, FunctionInstrumentedMessage message);
    public static void WriteFunctionSkippedMessage(BinaryWriter writer, FunctionSkippedMessage message);
    public static void WriteBlockLineDataMessage(BinaryWriter writer, BlockLineDataMessage message, bool addMessageTag);
    public static void WriteSourceFileDataMessage(BinaryWriter writer, SourceFileDataMessage message);
    public static void WriteModuleSkippedMessage(BinaryWriter writer, ModuleSkippedMessage message);
}
internal class Microsoft.VisualStudio.Coverage.Core.IO.FileHeader : object {
    [CompilerGeneratedAttribute]
private UInt32 <Magic>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MessageSchemaVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <StreamsCount>k__BackingField;
    public UInt32 Magic { get; public set; }
    public ushort MessageSchemaVersion { get; public set; }
    public UInt32 StreamsCount { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_Magic();
    [CompilerGeneratedAttribute]
public void set_Magic(UInt32 value);
    [CompilerGeneratedAttribute]
public ushort get_MessageSchemaVersion();
    [CompilerGeneratedAttribute]
public void set_MessageSchemaVersion(ushort value);
    [CompilerGeneratedAttribute]
public UInt32 get_StreamsCount();
    [CompilerGeneratedAttribute]
public void set_StreamsCount(UInt32 value);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.Coverage.Core.IO.IoHelpers : object {
    [ExtensionAttribute]
internal static Guid ReadGuid(BinaryReader reader);
    internal static Char[] ReadChars(BinaryReader reader, int count);
    internal static Char[] ReadChars(BinaryReader reader);
    internal static Byte[] ReadBytes(BinaryReader reader, int count);
    internal static Byte[] ReadBytes(BinaryReader reader);
    internal static string ReadString(BinaryReader reader);
    internal static string ReadStringBytes(BinaryReader reader);
    [ExtensionAttribute]
internal static void Write(BinaryWriter writer, Guid guid);
    internal static void WriteBytes(BinaryWriter writer, Byte[] buffer);
    internal static void WriteString(BinaryWriter writer, string text, bool addLength);
    internal static void WriteStringBytes(BinaryWriter writer, string text, bool addLength);
    internal static void WriteFileHeader(BinaryWriter writer, UInt32 fileHeaderMagic, ushort schemaVersion, UInt32 streamsCount);
    internal static void WriteStreamHeader(BinaryWriter writer, UInt32 streamHeaderMagic, Guid streamType, Guid identifier, UInt32 streamSize, long streamPosition);
    internal static void WriteStreamHeader(BinaryWriter writer, StreamHeader streamHeader);
    internal static void WriteStreamHeader(BinaryWriter writer, UInt32 streamHeaderMagic, Guid streamType, Guid identifier, UInt32 streamSize);
}
internal class Microsoft.VisualStudio.Coverage.Core.IO.StreamHeader : object {
    [CompilerGeneratedAttribute]
private UInt32 <Magic>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <StreamType>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <StreamSize>k__BackingField;
    public UInt32 Magic { get; public set; }
    public Guid StreamType { get; public set; }
    public Guid Identifier { get; public set; }
    public UInt32 StreamSize { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_Magic();
    [CompilerGeneratedAttribute]
public void set_Magic(UInt32 value);
    [CompilerGeneratedAttribute]
public Guid get_StreamType();
    [CompilerGeneratedAttribute]
public void set_StreamType(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(Guid value);
    [CompilerGeneratedAttribute]
public UInt32 get_StreamSize();
    [CompilerGeneratedAttribute]
public void set_StreamSize(UInt32 value);
}
public static class Microsoft.VisualStudio.Coverage.Core.IO.XmlObjectSerializer : object {
    public static void WriteXml(string path, T source);
    public static void WriteXml(string path, T source, bool skipNamespace);
    public static XDocument Serialize(T source);
    public static XDocument Serialize(T source, bool skipNamespace);
    public static T Read(string path);
    public static T Deserialize(XNode document);
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.Control.ClientErrorMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ErrorCode>k__BackingField;
    public string Message { get; public set; }
    public IList`1<string> Arguments { get; public set; }
    public UInt32 ErrorCode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(IList`1<string> value);
    [CompilerGeneratedAttribute]
public UInt32 get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(UInt32 value);
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.Control.CloseStreamMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private UInt32 <StreamId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Discard>k__BackingField;
    public UInt32 StreamId { get; public set; }
    public bool Discard { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_StreamId();
    [CompilerGeneratedAttribute]
public void set_StreamId(UInt32 value);
    [CompilerGeneratedAttribute]
public bool get_Discard();
    [CompilerGeneratedAttribute]
public void set_Discard(bool value);
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.Control.ConfigLoggerMessage : object {
    public static ushort MessageTag;
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.Control.CreateStreamMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private Guid <StreamType>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoClose>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BufferName>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <BufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BufferHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public Guid StreamType { get; public set; }
    public Guid Identifier { get; public set; }
    public bool AutoClose { get; public set; }
    public string BufferName { get; public set; }
    public UInt32 BufferSize { get; public set; }
    public string BufferHeader { get; public set; }
    public Guid Key { get; public set; }
    public string Prefix { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_StreamType();
    [CompilerGeneratedAttribute]
public void set_StreamType(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(Guid value);
    [CompilerGeneratedAttribute]
public bool get_AutoClose();
    [CompilerGeneratedAttribute]
public void set_AutoClose(bool value);
    [CompilerGeneratedAttribute]
public string get_BufferName();
    [CompilerGeneratedAttribute]
public void set_BufferName(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_BufferSize();
    [CompilerGeneratedAttribute]
public void set_BufferSize(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_BufferHeader();
    [CompilerGeneratedAttribute]
public void set_BufferHeader(string value);
    [CompilerGeneratedAttribute]
public Guid get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(Guid value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.Control.CreateStreamResponseMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private UInt32 <StreamId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BufferName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StreamExists>k__BackingField;
    public UInt32 StreamId { get; public set; }
    public string BufferName { get; public set; }
    public bool StreamExists { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_StreamId();
    [CompilerGeneratedAttribute]
public void set_StreamId(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_BufferName();
    [CompilerGeneratedAttribute]
public void set_BufferName(string value);
    [CompilerGeneratedAttribute]
public bool get_StreamExists();
    [CompilerGeneratedAttribute]
public void set_StreamExists(bool value);
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.Control.GetCoverageDataMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private string <OutputFilePath>k__BackingField;
    public string OutputFilePath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_OutputFilePath();
    [CompilerGeneratedAttribute]
public void set_OutputFilePath(string value);
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.Control.InitializeClientMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private UInt32 <SchemaVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ProcessId>k__BackingField;
    public UInt32 SchemaVersion { get; public set; }
    public UInt32 ProcessId { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_SchemaVersion();
    [CompilerGeneratedAttribute]
public void set_SchemaVersion(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_ProcessId();
    [CompilerGeneratedAttribute]
public void set_ProcessId(UInt32 value);
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.Control.InitializeClientResponseMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private bool <IsCodeCoverageEnabled>k__BackingField;
    public bool IsCodeCoverageEnabled { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsCodeCoverageEnabled();
    [CompilerGeneratedAttribute]
public void set_IsCodeCoverageEnabled(bool value);
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.Control.InstrumentedFunctionMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private UInt32 <MetadataToken>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<UInt32> <FunctionBlocks>k__BackingField;
    public UInt32 MetadataToken { get; public set; }
    public UInt32 Offset { get; public set; }
    public IList`1<UInt32> FunctionBlocks { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_MetadataToken();
    [CompilerGeneratedAttribute]
public void set_MetadataToken(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(UInt32 value);
    [CompilerGeneratedAttribute]
public IList`1<UInt32> get_FunctionBlocks();
    [CompilerGeneratedAttribute]
public void set_FunctionBlocks(IList`1<UInt32> value);
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.Control.InstrumentedModuleMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private string <BufferName>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <BufferSize>k__BackingField;
    public string BufferName { get; public set; }
    public UInt32 BufferSize { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BufferName();
    [CompilerGeneratedAttribute]
public void set_BufferName(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_BufferSize();
    [CompilerGeneratedAttribute]
public void set_BufferSize(UInt32 value);
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.Control.LoadModuleDataMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private string <ModulePath>k__BackingField;
    public string ModulePath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ModulePath();
    [CompilerGeneratedAttribute]
public void set_ModulePath(string value);
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.Control.PreloadModuleDataMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private string <ModulePath>k__BackingField;
    public string ModulePath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ModulePath();
    [CompilerGeneratedAttribute]
public void set_ModulePath(string value);
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.Control.PreloadModuleDataResponseMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private bool <IsSupported>k__BackingField;
    public bool IsSupported { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsSupported();
    [CompilerGeneratedAttribute]
public void set_IsSupported(bool value);
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.Control.RegisterClientMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private UInt32 <SchemaVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProcessOwnerSid>k__BackingField;
    public UInt32 SchemaVersion { get; public set; }
    public UInt32 ProcessId { get; public set; }
    public string ProcessOwnerSid { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_SchemaVersion();
    [CompilerGeneratedAttribute]
public void set_SchemaVersion(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_ProcessId();
    [CompilerGeneratedAttribute]
public void set_ProcessId(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_ProcessOwnerSid();
    [CompilerGeneratedAttribute]
public void set_ProcessOwnerSid(string value);
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.Control.RegisterClientResponseMessage : object {
    public static ushort MessageTag;
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.Control.ShutdownMessage : object {
    public static ushort MessageTag;
}
public class Microsoft.VisualStudio.Coverage.Core.Messages.Control.SuccessMessage : object {
    public static ushort MessageTag;
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.Control.WriteStreamBuffersMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private Guid <StreamType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BufferHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResetBuffers>k__BackingField;
    public Guid StreamType { get; public set; }
    public string BufferHeader { get; public set; }
    public bool ResetBuffers { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_StreamType();
    [CompilerGeneratedAttribute]
public void set_StreamType(Guid value);
    [CompilerGeneratedAttribute]
public string get_BufferHeader();
    [CompilerGeneratedAttribute]
public void set_BufferHeader(string value);
    [CompilerGeneratedAttribute]
public bool get_ResetBuffers();
    [CompilerGeneratedAttribute]
public void set_ResetBuffers(bool value);
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.Control.WriteStreamMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private UInt32 <StreamId>k__BackingField;
    public UInt32 StreamId { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_StreamId();
    [CompilerGeneratedAttribute]
public void set_StreamId(UInt32 value);
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.CoverageData.ModuleBufferMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ModuleLinkTime>k__BackingField;
    public string Name { get; public set; }
    public UInt32 ModuleLinkTime { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_ModuleLinkTime();
    [CompilerGeneratedAttribute]
public void set_ModuleLinkTime(UInt32 value);
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.CoverageData.TestCoverageDataMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private string <TestId>k__BackingField;
    public string TestId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TestId();
    [CompilerGeneratedAttribute]
public void set_TestId(string value);
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.ModuleData.BlockLineDataMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private UInt32 <BlockIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <StartLine>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <StartColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <EndLine>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <EndColumn>k__BackingField;
    public UInt32 BlockIndex { get; public set; }
    public UInt32 SourceId { get; public set; }
    public UInt32 StartLine { get; public set; }
    public UInt32 StartColumn { get; public set; }
    public UInt32 EndLine { get; public set; }
    public UInt32 EndColumn { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_BlockIndex();
    [CompilerGeneratedAttribute]
public void set_BlockIndex(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_SourceId();
    [CompilerGeneratedAttribute]
public void set_SourceId(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_StartLine();
    [CompilerGeneratedAttribute]
public void set_StartLine(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_StartColumn();
    [CompilerGeneratedAttribute]
public void set_StartColumn(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_EndLine();
    [CompilerGeneratedAttribute]
public void set_EndLine(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_EndColumn();
    [CompilerGeneratedAttribute]
public void set_EndColumn(UInt32 value);
    public virtual string ToString();
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.ModuleData.FunctionInstrumentedMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private UInt32 <FunctionId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <FunctionRva>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MetadataToken>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <StartBlockIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <BlockCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamespaceName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<BlockLineDataMessage> <LineData>k__BackingField;
    public UInt32 FunctionId { get; public set; }
    public UInt32 FunctionRva { get; public set; }
    public UInt32 MetadataToken { get; public set; }
    public UInt32 StartBlockIndex { get; public set; }
    public UInt32 BlockCount { get; public set; }
    public string Name { get; public set; }
    public string TypeName { get; public set; }
    public string NamespaceName { get; public set; }
    public IList`1<BlockLineDataMessage> LineData { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_FunctionId();
    [CompilerGeneratedAttribute]
public void set_FunctionId(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_FunctionRva();
    [CompilerGeneratedAttribute]
public void set_FunctionRva(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_MetadataToken();
    [CompilerGeneratedAttribute]
public void set_MetadataToken(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_StartBlockIndex();
    [CompilerGeneratedAttribute]
public void set_StartBlockIndex(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_BlockCount();
    [CompilerGeneratedAttribute]
public void set_BlockCount(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_NamespaceName();
    [CompilerGeneratedAttribute]
public void set_NamespaceName(string value);
    [CompilerGeneratedAttribute]
public IList`1<BlockLineDataMessage> get_LineData();
    [CompilerGeneratedAttribute]
public void set_LineData(IList`1<BlockLineDataMessage> value);
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.ModuleData.FunctionSkippedMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private UInt32 <FunctionId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <OriginalFunctionId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MetadataToken>k__BackingField;
    [CompilerGeneratedAttribute]
private FunctionSkipReason <SkipReason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionMessage>k__BackingField;
    public UInt32 FunctionId { get; public set; }
    public UInt32 OriginalFunctionId { get; public set; }
    public UInt32 MetadataToken { get; public set; }
    public FunctionSkipReason SkipReason { get; public set; }
    public string Name { get; public set; }
    public string TypeName { get; public set; }
    public string ExceptionMessage { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_FunctionId();
    [CompilerGeneratedAttribute]
public void set_FunctionId(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_OriginalFunctionId();
    [CompilerGeneratedAttribute]
public void set_OriginalFunctionId(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_MetadataToken();
    [CompilerGeneratedAttribute]
public void set_MetadataToken(UInt32 value);
    [CompilerGeneratedAttribute]
public FunctionSkipReason get_SkipReason();
    [CompilerGeneratedAttribute]
public void set_SkipReason(FunctionSkipReason value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ExceptionMessage();
    [CompilerGeneratedAttribute]
public void set_ExceptionMessage(string value);
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.ModuleData.ModuleInstrumentedMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private Byte[] <ModuleIdentifierBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <CoverageBufferId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ModuleSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ModuleLinkTime>k__BackingField;
    public string ModuleIdentifier { get; }
    public Byte[] ModuleIdentifierBytes { get; public set; }
    public Guid CoverageBufferId { get; public set; }
    public string Path { get; public set; }
    public UInt32 ModuleSize { get; public set; }
    public UInt32 ModuleLinkTime { get; public set; }
    public string get_ModuleIdentifier();
    [CompilerGeneratedAttribute]
public Byte[] get_ModuleIdentifierBytes();
    [CompilerGeneratedAttribute]
public void set_ModuleIdentifierBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public Guid get_CoverageBufferId();
    [CompilerGeneratedAttribute]
public void set_CoverageBufferId(Guid value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_ModuleSize();
    [CompilerGeneratedAttribute]
public void set_ModuleSize(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_ModuleLinkTime();
    [CompilerGeneratedAttribute]
public void set_ModuleLinkTime(UInt32 value);
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.ModuleData.SourceFileDataMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private UInt32 <SourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ChecksumType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Checksum>k__BackingField;
    public UInt32 SourceId { get; public set; }
    public string Path { get; public set; }
    public UInt32 ChecksumType { get; public set; }
    public string Checksum { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_SourceId();
    [CompilerGeneratedAttribute]
public void set_SourceId(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_ChecksumType();
    [CompilerGeneratedAttribute]
public void set_ChecksumType(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_Checksum();
    [CompilerGeneratedAttribute]
public void set_Checksum(string value);
}
internal class Microsoft.VisualStudio.Coverage.Core.Messages.ModulesSkipped.ModuleSkippedMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private ModuleSkipReason <SkipReason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionMessage>k__BackingField;
    public ModuleSkipReason SkipReason { get; public set; }
    public string Path { get; public set; }
    public string ExceptionMessage { get; public set; }
    [CompilerGeneratedAttribute]
public ModuleSkipReason get_SkipReason();
    [CompilerGeneratedAttribute]
public void set_SkipReason(ModuleSkipReason value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_ExceptionMessage();
    [CompilerGeneratedAttribute]
public void set_ExceptionMessage(string value);
}
public enum Microsoft.VisualStudio.Coverage.Core.ModuleSkipReason : Enum {
    public int value__;
    public static ModuleSkipReason no_symbols;
    public static ModuleSkipReason path_is_excluded;
    public static ModuleSkipReason public_key_token_is_excluded;
    public static ModuleSkipReason company_name_is_excluded;
    public static ModuleSkipReason optimized_or_instrumented;
    public static ModuleSkipReason has_fixed_base;
    public static ModuleSkipReason nothing_instrumented;
    public static ModuleSkipReason instrumentation_failure;
    public static ModuleSkipReason configuration_changed;
    public static ModuleSkipReason module_compiler_generated;
}
internal static class Microsoft.VisualStudio.Coverage.Core.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string CoverageFileException { get; }
    internal static string InvalidCoverageFileException { get; }
    internal static string OffsetOutOfRangeExceptionMessage { get; }
    internal static string UnsupportedCoverageFileException { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_CoverageFileException();
    internal static string get_InvalidCoverageFileException();
    internal static string get_OffsetOutOfRangeExceptionMessage();
    internal static string get_UnsupportedCoverageFileException();
}
internal class Microsoft.VisualStudio.Coverage.IO.Coverage.BasicBlockInfo : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <CoverageStatus>k__BackingField;
    public UInt32 Left { get; public set; }
    public UInt32 Right { get; public set; }
    public UInt32 CoverageStatus { get; public set; }
    public BasicBlockInfo(UInt32 left, UInt32 right, UInt32 coverageStatus);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_CoverageStatus();
    [CompilerGeneratedAttribute]
public void set_CoverageStatus(UInt32 value);
    public virtual string ToString();
    public sealed virtual int CompareTo(BasicBlockInfo other);
}
public class Microsoft.VisualStudio.Coverage.IO.Coverage.BlockLineData : object {
    [CompilerGeneratedAttribute]
private UInt32 <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private CoverageStatus <CoverageStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <StartLine>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <StartColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <EndLine>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <EndColumn>k__BackingField;
    [XmlIgnoreAttribute]
public UInt32 Index { get; public set; }
    [XmlAttributeAttribute("source_id")]
public UInt32 SourceId { get; public set; }
    [XmlAttributeAttribute("covered")]
public CoverageStatus CoverageStatus { get; public set; }
    [XmlAttributeAttribute("start_line")]
public UInt32 StartLine { get; public set; }
    [XmlAttributeAttribute("start_column")]
public UInt32 StartColumn { get; public set; }
    [XmlAttributeAttribute("end_line")]
public UInt32 EndLine { get; public set; }
    [XmlAttributeAttribute("end_column")]
public UInt32 EndColumn { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_SourceId();
    [CompilerGeneratedAttribute]
public void set_SourceId(UInt32 value);
    [CompilerGeneratedAttribute]
public CoverageStatus get_CoverageStatus();
    [CompilerGeneratedAttribute]
public void set_CoverageStatus(CoverageStatus value);
    [CompilerGeneratedAttribute]
public UInt32 get_StartLine();
    [CompilerGeneratedAttribute]
public void set_StartLine(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_StartColumn();
    [CompilerGeneratedAttribute]
public void set_StartColumn(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_EndLine();
    [CompilerGeneratedAttribute]
public void set_EndLine(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_EndColumn();
    [CompilerGeneratedAttribute]
public void set_EndColumn(UInt32 value);
    public virtual string ToString();
    public sealed virtual int CompareTo(BlockLineData other);
    public static bool op_Equality(BlockLineData left, BlockLineData right);
    public static bool op_Inequality(BlockLineData left, BlockLineData right);
    public virtual bool Equals(object obj);
    private bool Equals(BlockLineData other);
    public static bool op_LessThan(BlockLineData left, BlockLineData right);
    public static bool op_LessThanOrEqual(BlockLineData left, BlockLineData right);
    public static bool op_GreaterThan(BlockLineData left, BlockLineData right);
    public static bool op_GreaterThanOrEqual(BlockLineData left, BlockLineData right);
    public virtual int GetHashCode();
}
public class Microsoft.VisualStudio.Coverage.IO.Coverage.CoverageBufferData : object {
    [CompilerGeneratedAttribute]
private string <ModuleName>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ModuleLinkTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <CoverageBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Identifier>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ValueTuple`3<Guid, long, long> <CoverageBufferLocation>k__BackingField;
    public string ModuleName { get; public set; }
    public UInt32 ModuleLinkTime { get; public set; }
    internal Byte[] CoverageBuffer { get; internal set; }
    internal Guid Identifier { get; internal set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ValueTuple`3<Guid, long, long> CoverageBufferLocation { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_ModuleName();
    [CompilerGeneratedAttribute]
public void set_ModuleName(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_ModuleLinkTime();
    [CompilerGeneratedAttribute]
public void set_ModuleLinkTime(UInt32 value);
    [CompilerGeneratedAttribute]
internal Byte[] get_CoverageBuffer();
    [CompilerGeneratedAttribute]
internal void set_CoverageBuffer(Byte[] value);
    [CompilerGeneratedAttribute]
internal Guid get_Identifier();
    [CompilerGeneratedAttribute]
internal void set_Identifier(Guid value);
    [CompilerGeneratedAttribute]
internal ValueTuple`3<Guid, long, long> get_CoverageBufferLocation();
    [CompilerGeneratedAttribute]
internal void set_CoverageBufferLocation(ValueTuple`3<Guid, long, long> value);
    public static bool op_Equality(CoverageBufferData left, CoverageBufferData right);
    public static bool op_Inequality(CoverageBufferData left, CoverageBufferData right);
    public virtual bool Equals(object obj);
    private bool Equals(CoverageBufferData other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Microsoft.VisualStudio.Coverage.IO.Coverage.CoverageData : object {
    [CompilerGeneratedAttribute]
private IList`1<Module> <Modules>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SkippedModule> <SkippedModules>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <TestIds>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<ValueTuple`2<long, long>> <SkippedModuleLocations>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<Guid, IList`1<ValueTuple`3<string, long, long>>> <CoverageDataLocations>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, IList`1<ValueTuple`2<long, long>>> <ModuleDataLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <ModuleIds>k__BackingField;
    public IList`1<Module> Modules { get; }
    public IList`1<SkippedModule> SkippedModules { get; }
    public IList`1<string> TestIds { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IList`1<ValueTuple`2<long, long>> SkippedModuleLocations { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IDictionary`2<Guid, IList`1<ValueTuple`3<string, long, long>>> CoverageDataLocations { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IDictionary`2<string, IList`1<ValueTuple`2<long, long>>> ModuleDataLocations { get; }
    internal HashSet`1<string> ModuleIds { get; }
    [CompilerGeneratedAttribute]
public IList`1<Module> get_Modules();
    [CompilerGeneratedAttribute]
public IList`1<SkippedModule> get_SkippedModules();
    [CompilerGeneratedAttribute]
public IList`1<string> get_TestIds();
    [CompilerGeneratedAttribute]
internal IList`1<ValueTuple`2<long, long>> get_SkippedModuleLocations();
    [CompilerGeneratedAttribute]
internal IDictionary`2<Guid, IList`1<ValueTuple`3<string, long, long>>> get_CoverageDataLocations();
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, IList`1<ValueTuple`2<long, long>>> get_ModuleDataLocations();
    [CompilerGeneratedAttribute]
internal HashSet`1<string> get_ModuleIds();
}
public abstract class Microsoft.VisualStudio.Coverage.IO.Coverage.CoverageStatistics : object {
    [CompilerGeneratedAttribute]
private Byte[] <CoverageBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <BlockCount>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <BlocksCovered>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <BlocksNotCovered>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LinesCovered>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LinesPartiallyCovered>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LinesNotCovered>k__BackingField;
    [XmlAttributeAttribute("block_coverage")]
public string BlockCoverage { get; public set; }
    [XmlAttributeAttribute("line_coverage")]
public string LineCoverage { get; public set; }
    [XmlIgnoreAttribute]
public Byte[] CoverageBuffer { get; public set; }
    [XmlIgnoreAttribute]
public UInt32 BlockCount { get; public set; }
    [XmlAttributeAttribute("blocks_covered")]
public UInt32 BlocksCovered { get; public set; }
    [XmlAttributeAttribute("blocks_not_covered")]
public UInt32 BlocksNotCovered { get; public set; }
    [XmlAttributeAttribute("lines_covered")]
public UInt32 LinesCovered { get; public set; }
    [XmlAttributeAttribute("lines_partially_covered")]
public UInt32 LinesPartiallyCovered { get; public set; }
    [XmlAttributeAttribute("lines_not_covered")]
public UInt32 LinesNotCovered { get; public set; }
    public string get_BlockCoverage();
    public void set_BlockCoverage(string value);
    public string get_LineCoverage();
    public void set_LineCoverage(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_CoverageBuffer();
    [CompilerGeneratedAttribute]
public void set_CoverageBuffer(Byte[] value);
    [CompilerGeneratedAttribute]
public UInt32 get_BlockCount();
    [CompilerGeneratedAttribute]
public void set_BlockCount(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_BlocksCovered();
    [CompilerGeneratedAttribute]
public void set_BlocksCovered(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_BlocksNotCovered();
    [CompilerGeneratedAttribute]
public void set_BlocksNotCovered(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_LinesCovered();
    [CompilerGeneratedAttribute]
public void set_LinesCovered(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_LinesPartiallyCovered();
    [CompilerGeneratedAttribute]
public void set_LinesPartiallyCovered(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_LinesNotCovered();
    [CompilerGeneratedAttribute]
public void set_LinesNotCovered(UInt32 value);
    public abstract virtual void CalculateStatistics();
}
public class Microsoft.VisualStudio.Coverage.IO.Coverage.Function : CoverageStatistics {
    private static UInt32 PartiallyCovered;
    private static UInt32 Covered;
    private static UInt32 NotCovered;
    private static UInt32 Unknown;
    [CompilerGeneratedAttribute]
private UInt32 <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MetadataToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamespaceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <StartBlockIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BlockLineData> <LineDataOriginal>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BlockLineData> <LineData>k__BackingField;
    [XmlAttributeAttribute("id")]
public UInt32 Id { get; public set; }
    [XmlIgnoreAttribute]
public UInt32 MetadataToken { get; public set; }
    [XmlAttributeAttribute("token")]
public string TokenString { get; public set; }
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("namespace")]
public string NamespaceName { get; public set; }
    [XmlAttributeAttribute("type_name")]
public string TypeName { get; public set; }
    [XmlIgnoreAttribute]
public UInt32 StartBlockIndex { get; public set; }
    [XmlIgnoreAttribute]
public List`1<BlockLineData> LineDataOriginal { get; public set; }
    [XmlArrayAttribute("ranges")]
[XmlArrayItemAttribute("range")]
public List`1<BlockLineData> LineData { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_MetadataToken();
    [CompilerGeneratedAttribute]
public void set_MetadataToken(UInt32 value);
    public string get_TokenString();
    public void set_TokenString(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_NamespaceName();
    [CompilerGeneratedAttribute]
public void set_NamespaceName(string value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_StartBlockIndex();
    [CompilerGeneratedAttribute]
public void set_StartBlockIndex(UInt32 value);
    [CompilerGeneratedAttribute]
public List`1<BlockLineData> get_LineDataOriginal();
    [CompilerGeneratedAttribute]
public void set_LineDataOriginal(List`1<BlockLineData> value);
    [CompilerGeneratedAttribute]
public List`1<BlockLineData> get_LineData();
    [CompilerGeneratedAttribute]
public void set_LineData(List`1<BlockLineData> value);
    public bool ShouldSerializeNamespaceName();
    public bool ShouldSerializeTokenString();
    internal void Merge(Byte[] buffer, UInt32 offset, UInt32 count);
    public virtual void CalculateStatistics();
    private UInt32[] CalculateStatistics(IList`1<BasicBlockInfo> blockInfos);
    private bool FasterAlgorithm(IList`1<BasicBlockInfo> blockInfos, UInt32[]& statistics);
    private UInt32[] SlowerAlgorithm(IList`1<BasicBlockInfo> blockInfos);
    private bool IsCovered(UInt32 blockIndex);
}
public class Microsoft.VisualStudio.Coverage.IO.Coverage.Module : CoverageStatistics {
    private UInt32 _nextSourceFileId;
    private bool _includeSkippedFunctions;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<ValueTuple`2<UInt32, UInt32>, FunctionInstrumentedMessage> _functionInstrumentedMessagesMap;
    private IDictionary`2<string, UInt32> _sourcePathToIdMap;
    private IDictionary`2<UInt32, SourceFile> _sourceFiles;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<ValueTuple`2<UInt32, UInt32>, SkippedFunction> _skippedFunctions;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<ValueTuple`2<UInt32, UInt32>, Function> _functions;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<FunctionSkippedMessage> <FunctionSkippedMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SourceFileDataMessage> <SourceFileDataMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ImageLinkTime>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ImageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private ModuleInstrumentedMessage <ModuleInstrumentedMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Byte[]> <CoverageBuffers>k__BackingField;
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("path")]
public string Path { get; public set; }
    [XmlIgnoreAttribute]
public string Id { get; public set; }
    [XmlAttributeAttribute("id")]
public string IdString { get; public set; }
    [XmlArrayAttribute("functions")]
[XmlArrayItemAttribute("function")]
public List`1<Function> Functions { get; public set; }
    [XmlArrayAttribute("skipped_functions")]
[XmlArrayItemAttribute("skipped_function")]
public List`1<SkippedFunction> SkippedFunctions { get; public set; }
    internal IList`1<FunctionSkippedMessage> FunctionSkippedMessages { get; }
    [XmlArrayAttribute("source_files")]
[XmlArrayItemAttribute("source_file")]
public List`1<SourceFile> SourceFiles { get; public set; }
    internal IList`1<SourceFileDataMessage> SourceFileDataMessages { get; }
    [XmlIgnoreAttribute]
public UInt32 ImageLinkTime { get; public set; }
    [XmlIgnoreAttribute]
public UInt32 ImageSize { get; public set; }
    internal ModuleInstrumentedMessage ModuleInstrumentedMessage { get; internal set; }
    internal ICollection`1<FunctionInstrumentedMessage> FunctionInstrumentedMessages { get; }
    internal IDictionary`2<string, Byte[]> CoverageBuffers { get; }
    public Module(string id);
    public Module(string id, bool includeSkippedFunctions);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    public string get_IdString();
    public void set_IdString(string value);
    public List`1<Function> get_Functions();
    public void set_Functions(List`1<Function> value);
    public List`1<SkippedFunction> get_SkippedFunctions();
    public void set_SkippedFunctions(List`1<SkippedFunction> value);
    [CompilerGeneratedAttribute]
internal IList`1<FunctionSkippedMessage> get_FunctionSkippedMessages();
    public List`1<SourceFile> get_SourceFiles();
    public void set_SourceFiles(List`1<SourceFile> value);
    [CompilerGeneratedAttribute]
internal IList`1<SourceFileDataMessage> get_SourceFileDataMessages();
    [CompilerGeneratedAttribute]
public UInt32 get_ImageLinkTime();
    [CompilerGeneratedAttribute]
public void set_ImageLinkTime(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_ImageSize();
    [CompilerGeneratedAttribute]
public void set_ImageSize(UInt32 value);
    [CompilerGeneratedAttribute]
internal ModuleInstrumentedMessage get_ModuleInstrumentedMessage();
    [CompilerGeneratedAttribute]
internal void set_ModuleInstrumentedMessage(ModuleInstrumentedMessage value);
    internal ICollection`1<FunctionInstrumentedMessage> get_FunctionInstrumentedMessages();
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, Byte[]> get_CoverageBuffers();
    public bool ShouldSerializeSkipFunctions();
    public bool ShouldSerializeSourceFiles();
    public bool ShouldSerializeSkippedFunctions();
    public ValueTuple`2<SourceFile, bool> AddSourceFile(string path, UInt32 checksumType, string checksum);
    public SourceFile GetSourceFile(UInt32 id);
    public ValueTuple`2<SkippedFunction, bool> AddSkippedFunction(bool checkInFunctions, UInt32 functionId, UInt32 originalFunctionId, UInt32 metadataToken, FunctionSkipReason functionSkipReason, string name, string typeName, string exceptionMessage);
    internal void RemoveSkippedFunction(UInt32 functionId, UInt32 metadataToken);
    internal ValueTuple`2<Function, bool> AddFunction(UInt32 functionId, UInt32 metadataToken, string name, string typeName, string namespaceName, UInt32 blockCount);
    internal ValueTuple`2<Function, bool> AddFunction(Function function);
    internal void AddFunctionInstrumentedMessage(FunctionInstrumentedMessage message);
    internal FunctionInstrumentedMessage GetFunctionInstrumentedMessage(UInt32 functionId, UInt32 metadataToken);
    internal void RemoveFunctionInstrumentedMessage(UInt32 functionId, UInt32 metadataToken);
    internal void UpdateFunctionInstrumentedMessage(FunctionInstrumentedMessage message);
    internal Byte[] GetCoverageBuffer(IList`1<string> testIds);
    public virtual void CalculateStatistics();
}
internal class Microsoft.VisualStudio.Coverage.IO.Coverage.Segment : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Span>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <CoverageStatus>k__BackingField;
    public UInt32 Left { get; public set; }
    public bool Span { get; public set; }
    public UInt32 CoverageStatus { get; public set; }
    public Segment(UInt32 left, bool span);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Span();
    [CompilerGeneratedAttribute]
public void set_Span(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_CoverageStatus();
    [CompilerGeneratedAttribute]
public void set_CoverageStatus(UInt32 value);
    public sealed virtual int CompareTo(Segment other);
    public virtual string ToString();
}
public class Microsoft.VisualStudio.Coverage.IO.Coverage.SkippedFunction : object {
    [CompilerGeneratedAttribute]
private UInt32 <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <OriginalId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MetadataToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private FunctionSkipReason <FunctionSkipReason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionMessage>k__BackingField;
    [XmlAttributeAttribute("id")]
public UInt32 Id { get; public set; }
    [XmlAttributeAttribute("original_id")]
public UInt32 OriginalId { get; public set; }
    [XmlIgnoreAttribute]
public UInt32 MetadataToken { get; public set; }
    [XmlAttributeAttribute("token")]
public string TokenString { get; public set; }
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("type_name")]
public string TypeName { get; public set; }
    [XmlAttributeAttribute("reason")]
public FunctionSkipReason FunctionSkipReason { get; public set; }
    [XmlAttributeAttribute("exception_message")]
public string ExceptionMessage { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_OriginalId();
    [CompilerGeneratedAttribute]
public void set_OriginalId(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_MetadataToken();
    [CompilerGeneratedAttribute]
public void set_MetadataToken(UInt32 value);
    public string get_TokenString();
    public void set_TokenString(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public FunctionSkipReason get_FunctionSkipReason();
    [CompilerGeneratedAttribute]
public void set_FunctionSkipReason(FunctionSkipReason value);
    [CompilerGeneratedAttribute]
public string get_ExceptionMessage();
    [CompilerGeneratedAttribute]
public void set_ExceptionMessage(string value);
    public bool ShouldSerializeOriginalId();
    public bool ShouldSerializeExceptionMessage();
    public bool ShouldSerializeTokenString();
    public static bool op_Equality(SkippedFunction left, SkippedFunction right);
    public static bool op_Inequality(SkippedFunction left, SkippedFunction right);
    public virtual bool Equals(object obj);
    private bool Equals(SkippedFunction other);
    public virtual int GetHashCode();
}
[XmlRootAttribute("skipped_module")]
public class Microsoft.VisualStudio.Coverage.IO.Coverage.SkippedModule : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private ModuleSkipReason <SkipReason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionMessage>k__BackingField;
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("path")]
public string Path { get; public set; }
    [XmlAttributeAttribute("reason")]
public ModuleSkipReason SkipReason { get; public set; }
    [XmlAttributeAttribute("exception_message")]
public string ExceptionMessage { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public ModuleSkipReason get_SkipReason();
    [CompilerGeneratedAttribute]
public void set_SkipReason(ModuleSkipReason value);
    [CompilerGeneratedAttribute]
public string get_ExceptionMessage();
    [CompilerGeneratedAttribute]
public void set_ExceptionMessage(string value);
    public bool ShouldSerializeExceptionMessage();
    public static bool op_Equality(SkippedModule left, SkippedModule right);
    public static bool op_Inequality(SkippedModule left, SkippedModule right);
    public virtual bool Equals(object obj);
    private bool Equals(SkippedModule other);
    public virtual int GetHashCode();
}
public class Microsoft.VisualStudio.Coverage.IO.Coverage.SourceFile : object {
    public static UInt32 NoChecksum;
    public static UInt32 Md5Checksum;
    public static UInt32 Sha1Checksum;
    [CompilerGeneratedAttribute]
private UInt32 <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ChecksumType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Checksum>k__BackingField;
    [XmlAttributeAttribute("id")]
public UInt32 Id { get; public set; }
    [XmlAttributeAttribute("path")]
public string Path { get; public set; }
    [XmlIgnoreAttribute]
public UInt32 ChecksumType { get; public set; }
    [XmlAttributeAttribute("checksum_type")]
public string ChecksumTypeString { get; public set; }
    [XmlIgnoreAttribute]
public string Checksum { get; public set; }
    [XmlAttributeAttribute("checksum")]
public string ChecksumString { get; public set; }
    public SourceFile(UInt32 id, string path, UInt32 checksumType, string checksum);
    [CompilerGeneratedAttribute]
public UInt32 get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_ChecksumType();
    [CompilerGeneratedAttribute]
public void set_ChecksumType(UInt32 value);
    public string get_ChecksumTypeString();
    public void set_ChecksumTypeString(string value);
    [CompilerGeneratedAttribute]
public string get_Checksum();
    [CompilerGeneratedAttribute]
public void set_Checksum(string value);
    public string get_ChecksumString();
    public void set_ChecksumString(string value);
    public bool ShouldSerializeChecksumTypeString();
    public bool ShouldSerializeChecksumString();
    public static bool op_Equality(SourceFile left, SourceFile right);
    public static bool op_Inequality(SourceFile left, SourceFile right);
    public virtual bool Equals(object obj);
    private bool Equals(SourceFile other);
    public virtual int GetHashCode();
}
internal class Microsoft.VisualStudio.Coverage.IO.CoverageBufferFile : CoverageFileBase {
    private CoverageBufferData _coverageBufferData;
    private CoverageBufferFile(string path);
    public static CoverageBufferData Read(string path);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Coverage.IO.CoverageBufferFile/<ReadAsync>d__3")]
public static Task`1<CoverageBufferData> ReadAsync(string path, CancellationToken token);
    public static CoverageBufferData ReadCoverageBufferFile(string path, CancellationToken token);
    protected virtual void ProcessStreamHeader(StreamHeader streamHeader, BinaryReader reader);
    private void RecordCoverageDataStream(BinaryMessageReader reader, Guid identifier);
    private Byte[] GetCoverageBuffer(BinaryReader reader);
    internal static void WriteModuleCoverageBufferData(string outputFolder, Module module, Byte[] coverageBuffer);
    private static void WriteBufferData(BinaryWriter writer, ModuleBufferMessage message, Byte[] coverageBuffer, Guid coverageBufferId);
    internal static Byte[] MergeCoverageBuffer(IEnumerable`1<string> bufferFiles, bool skipInvalidFiles, CancellationToken token);
}
internal class Microsoft.VisualStudio.Coverage.IO.CoverageFile : CoverageFileBase {
    private static int MaxTaskCount;
    private CoverageData _coverageData;
    private bool _cacheCoverageMessages;
    private CoverageFile(string path, bool cacheCoverageMessages);
    public static bool IsValidCoverageFile(string path);
    public long GetModuleCoverageBufferOffset(string moduleName, UInt32 moduleLinkTime);
    public void UpdateModuleCoverageBuffer(long offset, Byte[] coverageBuffer);
    public static string MergeCoverageBufferFiles(string covxFile, IList`1<string> coverageBufferFiles, bool skipInvalidFiles);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Coverage.IO.CoverageFile/<MergeCoverageBufferFilesAsync>d__9")]
public static Task`1<string> MergeCoverageBufferFilesAsync(string covxFile, IList`1<string> coverageBufferFiles, CancellationToken token, bool skipInvalidFiles);
    private static string MergeCoverageBufferFiles(string covxFile, IList`1<string> coverageBufferFiles, bool skipInvalidFiles, CancellationToken token);
    public static CoverageData MergeCoverageFiles(IList`1<string> files, bool skipInvalidFiles, int maxTaskCount);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Coverage.IO.CoverageFile/<MergeCoverageFilesAsync>d__12")]
public static Task`1<CoverageData> MergeCoverageFilesAsync(IList`1<string> files, CancellationToken token, bool skipInvalidFiles, int taskCount);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Coverage.IO.CoverageFile/<CreateMergeTaskAsync>d__13")]
private static Task CreateMergeTaskAsync(Queue`1<ValueTuple`2<string, CoverageFile>> queue, bool skipInvalidFiles, object lockObject, CancellationToken token);
    private static CoverageFile GetCoverageFile(ValueTuple`2<string, CoverageFile> file, bool skipInvalidFiles, CancellationToken token);
    private static bool PrepareMergeTaskInput(Queue`1<ValueTuple`2<string, CoverageFile>> queue, object lockObject, ValueTuple`2& file1, ValueTuple`2& file2);
    private static CoverageFile Merge(CoverageFile file1, CoverageFile file2, CancellationToken token);
    private static void MergeModules(CoverageFile file1, CoverageFile file2, CoverageFile target, CancellationToken token);
    private static void AddModule(CoverageFile file, CoverageFile target, string moduleId);
    private static void MergeModule(CoverageFile target, Module module1, Module module2, CancellationToken token);
    private static void MergeModuleCoverageBuffer(CoverageFile target, Module module1, Module module2, Byte[] coverageBuffer1, Byte[] coverageBuffer2, CancellationToken token);
    private static Byte[] MergeFunctionsCoverageBuffer(Module module1, Module module2, Byte[] coverageBuffer1, Byte[] coverageBuffer2);
    private static UInt32 MergeFunctionMessages(Module module1, Module module2, Byte[] coverageBuffer1, Byte[] coverageBuffer2, List`1<byte> finalCoverageBufferList, UInt32 functionStartIndex, bool mergeCommonMessages, bool addMissingMessagesToModule2);
    private static Byte[] GetBiggerCoverageBuffer(Module module1, Module module2, Byte[] coverageBuffer1, Byte[] coverageBuffer2, FunctionInstrumentedMessage message1, FunctionInstrumentedMessage message2, UInt32 functionBufferCount);
    private static void UpdateSourceIds(Module module1, Module module2, FunctionInstrumentedMessage message2);
    private static void MergeSkippedModules(CoverageFile file1, CoverageFile file2, CoverageFile target, CancellationToken token);
    public static CoverageData Read(string path, bool readModules, bool readSkippedMessages, bool readSkippedModules, bool cacheCoverageMessages);
    public static CoverageData Read(string path, IList`1<string> testIds, bool readModules, bool readSkippedMessages, bool readSkippedModules, bool cacheCoverageMessages);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Coverage.IO.CoverageFile/<ReadAsync>d__28")]
public static Task`1<CoverageData> ReadAsync(string path, CancellationToken token, bool readModules, bool readSkippedFunctions, bool readSkippedModules, bool cacheCoverageMessages);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Coverage.IO.CoverageFile/<ReadAsync>d__29")]
public static Task`1<CoverageData> ReadAsync(string path, CancellationToken token, IList`1<string> testIds, bool readModules, bool readSkippedFunctions, bool readSkippedModules, bool cacheCoverageMessages);
    private static CoverageFile ReadCoverageFile(string path, bool readModules, bool readSkippedFunctions, bool readSkippedModules, bool cacheCoverageMessages, IList`1<string> testIds, CancellationToken token);
    protected virtual void ProcessStreamHeader(StreamHeader streamHeader, BinaryReader reader);
    private void RecordCoverageDataStream(BinaryMessageReader reader, Guid identifier);
    private void RecordModuleStream(BinaryMessageReader reader);
    private void GetSkippedModule(BinaryMessageReader reader, IList`1<SkippedModule> modules);
    private void ReadModuleData(BinaryReader reader, Module module, IList`1<string> testIds, bool readSkippedFunctions);
    private ValueTuple`2<Byte[], List`1<ValueTuple`2<UInt32, Function>>> ReadModuleStream(BinaryReader reader, Module module, IList`1<string> testIds, long streamEnd, bool readSkippedFunctions);
    private Byte[] GetCoverageBuffer(BinaryReader reader, Guid coverageBufferId, IList`1<string> testIds);
    private Byte[] MergeCoverageBuffer(BinaryReader reader, long start, long blockCount, Byte[] buffer);
    private Byte[] AdjustCoverageBuffer(UInt32 currentBlockCount, Module module, List`1<ValueTuple`2<UInt32, Function>> bufferMap, Byte[] coverageBuffer);
    private void ReadSoureFile(BinaryMessageReader reader, Module module, IDictionary`2<UInt32, UInt32> sourceIdMap);
    private ValueTuple`2<UInt32, Function> ReadFunction(BinaryMessageReader reader, Module module, Byte[] coverageBuffer, Dictionary`2<UInt32, UInt32> sourceIdMap);
    private void ReadSkippedMessage(BinaryMessageReader reader, Module module, bool readSkippedFunctions);
    private void ReadSkippedModules(BinaryReader reader);
    private void ReadModules(BinaryReader reader, bool readSkippedFunctions, IList`1<string> testIds);
    public static void SplitCoverageFile(string path, string outputFolder, bool writeSkippedModules, bool generateCoverageBufferFiles);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Coverage.IO.CoverageFile/<SplitCoverageFileAsync>d__46")]
public static Task SplitCoverageFileAsync(string path, string outputFolder, bool writeSkippedModules, bool generateCoverageBufferFiles, CancellationToken token);
    private static void SplitCoverageFile(CoverageFile file, string outputFolder, bool writeSkippedModules, bool generateCoverageBufferFiles, CancellationToken token);
    public static void Write(string path, CoverageData coverageData);
    private static void Write(string path, CoverageData coverageData, CancellationToken token);
    private static void Write(BinaryWriter writer, CoverageData coverageData, CancellationToken token);
    private static void WriteInstrumentedModuleData(BinaryWriter writer, Module module);
    private static void WriteModuleCoverageData(BinaryWriter writer, Module module, Byte[] coverageBuffer);
    private static void WriteSingleSkippedModuleToFile(string outputFolder, SkippedModule module, IList`1<string> writtenModules);
    private static void WriteSkippedModuleData(BinaryWriter writer, SkippedModule module);
    private static void WriteSingleModuleToFile(string outputFolder, Module module, IList`1<string> writtenModules, bool generateCoverageBufferFiles);
    private static void WriteInstrumentedModule(string outputFolder, Module module, Byte[] coverageBuffer, bool generateCoverageBufferFiles);
    private static Byte[] GetAdjustedCoverageBuffer(Module module, Byte[] coverageBuffer);
}
internal abstract class Microsoft.VisualStudio.Coverage.IO.CoverageFileBase : object {
    private static ushort MaximumMessageSchemaVersion;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Path { get; }
    protected CoverageFileBase(string path);
    [CompilerGeneratedAttribute]
public string get_Path();
    internal static FileHeader ReadFileHeader(BinaryReader reader);
    internal static void ValidateFileHeader(FileHeader fileHeader, string path);
    internal static StreamHeader ReadStreamHeader(BinaryReader reader);
    internal static void ValidateStreamHeader(StreamHeader streamHeader, string path);
    protected virtual void ReadFile(BinaryReader reader, CancellationToken token);
    protected abstract virtual void ProcessStreamHeader(StreamHeader streamHeader, BinaryReader reader);
}
public class Microsoft.VisualStudio.Coverage.IO.Exceptions.CoverageFileException : VanguardException {
    public CoverageFileException(string path);
    public CoverageFileException(string path, Exception innerException);
}
public class Microsoft.VisualStudio.Coverage.IO.Exceptions.InvalidBufferCountException : VanguardException {
    public InvalidBufferCountException(string message);
    public InvalidBufferCountException(string message, Exception innerException);
}
public class Microsoft.VisualStudio.Coverage.IO.Exceptions.InvalidCoverageFileException : VanguardException {
    public InvalidCoverageFileException(string path);
    public InvalidCoverageFileException(string path, Exception innerException);
}
public class Microsoft.VisualStudio.Coverage.IO.Exceptions.UnsupportedCoverageFileException : VanguardException {
    public UnsupportedCoverageFileException(string path);
    public UnsupportedCoverageFileException(string path, Exception innerException);
}
public class Microsoft.VisualStudio.Coverage.IO.Exceptions.VanguardException : Exception {
    public VanguardException(string message);
    public VanguardException(string message, Exception innerException);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Coverage.IO.StringExtensions : object {
    [ExtensionAttribute]
public static string GetFileName(string path);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
