internal class Microsoft.VisualStudio.Coverage.Instrumentation.CecilPdbReader : object {
    private PEReader _reader;
    private string _pdbPath;
    private UnmanagedMemoryStream _stream;
    private ModuleDefinition _moduleDefinition;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private Byte[] <IdBytes>k__BackingField;
    public Byte[] IdBytes { get; }
    public CecilPdbReader(PEReader reader, string pdbPath, Byte[] idBytes);
    [CompilerGeneratedAttribute]
public sealed virtual Byte[] get_IdBytes();
    public sealed virtual IEnumerable`1<SequencePointMetadata> GetSequencePoints(MethodDefinitionHandle handle);
    private void Initialize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.Coverage.Instrumentation.Helper : object {
    private static MethodAttributes NoMethodBodyAttributes;
    private static MethodImplAttributes NoMethodBodyImplementationAttributes;
    [ExtensionAttribute]
public static bool HasBody(MethodDefinition methodDefinition);
    public static IDictionary`2<TypeDefinition, TypeMetadata> GetTypes(ReflectionContainer reflectionContainer, TypeDefinitionHandleCollection handles, AssemblyMetadata parent);
    public static TypeMetadata GetType(ReflectionContainer reflectionContainer, TypeDefinitionHandle handle, AssemblyMetadata parent);
    public static IList`1<EventMetadata> GetEvents(ReflectionContainer reflectionContainer, EventDefinitionHandleCollection handles, TypeMetadata parent);
    public static EventMetadata GetEvent(ReflectionContainer reflectionContainer, EventDefinitionHandle handle, TypeMetadata parent);
    public static IList`1<PropertyMetadata> GetProperties(ReflectionContainer reflectionContainer, PropertyDefinitionHandleCollection handles, TypeMetadata parent);
    public static PropertyMetadata GetProperty(ReflectionContainer reflectionContainer, PropertyDefinitionHandle handle, TypeMetadata parent);
    public static IList`1<MethodMetadata> GetMethods(ReflectionContainer reflectionContainer, PropertyAccessors accessors, TypeMetadata parent);
    public static IList`1<MethodMetadata> GetMethods(ReflectionContainer reflectionContainer, EventAccessors accessors, TypeMetadata parent);
    public static IList`1<MethodMetadata> GetMethods(ReflectionContainer reflectionContainer, MethodDefinitionHandleCollection handles, TypeMetadata parent);
    public static MethodMetadata GetMethod(ReflectionContainer reflectionContainer, MethodDefinitionHandle handle, TypeMetadata parent);
    public static string RemoveTypeParameter(string name);
    public static string GetParametersString(ReflectionContainer reflectionContainer, MethodDefinition definition);
    public static string GetParametersString(ReflectionContainer reflectionContainer, TypeDefinition definition);
    internal static Byte[] CalculatePublicKeyToken(ImmutableArray`1<byte> publicKey);
    private static ImmutableArray`1<byte> ComputeSha1(ImmutableArray`1<byte> bytes);
    private static ImmutableArray`1<byte> ComputeSha1(Byte[] bytes);
    private static void AddGenericParameters(MethodDefinition methodDefinition, StringBuilder stringBuilder, SignatureVisualizer visualizer, MethodSignature`1<string> signature);
    private static void AddParameters(ReflectionContainer reflectionContainer, StringBuilder stringBuilder, ParameterHandleCollection parameterHandles, MethodSignature`1<string> signature);
    public static IList`1<CustomAttributeMetadata> GetCustomAttributes(ReflectionContainer reflectionContainer, CustomAttributeHandleCollection handles);
    private static CustomAttributeMetadata GetCustomAttribute(ReflectionContainer reflectionContainer, CustomAttribute customAttribute);
    public static bool IsPartOfExpressionBreakpointsPattern(MethodBlock currentBlock, MethodBlock previousBlock, MethodBlock nextBlock);
    private static bool IsExpressionBreakpointsPattern(Instruction instruction1, Instruction instruction2, Instruction instruction3);
}
internal class Microsoft.VisualStudio.Coverage.Instrumentation.IL.BranchInstruction : Instruction {
    [CompilerGeneratedAttribute]
private int <TargetOffset>k__BackingField;
    public int TargetOffset { get; public set; }
    [CompilerGeneratedAttribute]
public int get_TargetOffset();
    [CompilerGeneratedAttribute]
public void set_TargetOffset(int value);
}
internal class Microsoft.VisualStudio.Coverage.Instrumentation.IL.ExceptionClause : object {
    [CompilerGeneratedAttribute]
private Instruction <TryInstruction>k__BackingField;
    [CompilerGeneratedAttribute]
private Instruction <HandlerInstruction>k__BackingField;
    [CompilerGeneratedAttribute]
private Instruction <FilterInstruction>k__BackingField;
    public Instruction TryInstruction { get; public set; }
    public Instruction HandlerInstruction { get; public set; }
    public Instruction FilterInstruction { get; public set; }
    [CompilerGeneratedAttribute]
public Instruction get_TryInstruction();
    [CompilerGeneratedAttribute]
public void set_TryInstruction(Instruction value);
    [CompilerGeneratedAttribute]
public Instruction get_HandlerInstruction();
    [CompilerGeneratedAttribute]
public void set_HandlerInstruction(Instruction value);
    [CompilerGeneratedAttribute]
public Instruction get_FilterInstruction();
    [CompilerGeneratedAttribute]
public void set_FilterInstruction(Instruction value);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.Coverage.Instrumentation.IL.Extensions : object {
    private static ILOpCodeInfo None;
    private static ILOpCodeInfo Byte;
    private static ILOpCodeInfo ByteBranch;
    private static ILOpCodeInfo Int;
    private static ILOpCodeInfo IntBranch;
    private static ILOpCodeInfo Token;
    private static ILOpCodeInfo Long;
    private static ILOpCodeInfo Single;
    private static ILOpCodeInfo Double;
    private static ILOpCodeInfo Switch;
    private static ILOpCodeInfo TwoNone;
    private static ILOpCodeInfo TwoToken;
    private static ILOpCodeInfo TwoUShort;
    private static ILOpCodeInfo TwoByte;
    private static Extensions();
    [ExtensionAttribute]
public static ILOpCode DecodeOpCode(BlobReader& blob);
    [ExtensionAttribute]
public static InstructionTerminationType GetInstructionTerminationType(ILOpCode opCode);
    [ExtensionAttribute]
public static bool IsShortBranch(ILOpCode opCode);
    [ExtensionAttribute]
public static bool IsDirectBranch(InstructionTerminationType instructionTerminationType);
    [ExtensionAttribute]
public static bool IsIndirectBranch(InstructionTerminationType instructionTerminationType);
    [ExtensionAttribute]
public static bool IsConditionalBranch(InstructionTerminationType instructionTerminationType);
    [ExtensionAttribute]
public static bool IsSwitch(InstructionTerminationType instructionTerminationType);
    [ExtensionAttribute]
public static ILOpCodeInfo GetILOpCodeInfo(ILOpCode opCode);
}
internal enum Microsoft.VisualStudio.Coverage.Instrumentation.IL.ILOpCodeFlags : Enum {
    public int value__;
    public static ILOpCodeFlags None;
    public static ILOpCodeFlags Meta;
    public static ILOpCodeFlags Unused;
    public static ILOpCodeFlags Branch;
}
internal class Microsoft.VisualStudio.Coverage.Instrumentation.IL.ILOpCodeInfo : object {
    [CompilerGeneratedAttribute]
private int <OpCodeLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OperandLength>k__BackingField;
    [CompilerGeneratedAttribute]
private ILOperandType <OperandType>k__BackingField;
    [CompilerGeneratedAttribute]
private ILOpCodeFlags <OpCodeFlags>k__BackingField;
    public int OpCodeLength { get; public set; }
    public int OperandLength { get; public set; }
    public ILOperandType OperandType { get; public set; }
    public ILOpCodeFlags OpCodeFlags { get; public set; }
    public ILOpCodeInfo(int opCodeLength, int operandLength, ILOperandType operandType, ILOpCodeFlags opCodeFlags);
    [CompilerGeneratedAttribute]
public int get_OpCodeLength();
    [CompilerGeneratedAttribute]
public void set_OpCodeLength(int value);
    [CompilerGeneratedAttribute]
public int get_OperandLength();
    [CompilerGeneratedAttribute]
public void set_OperandLength(int value);
    [CompilerGeneratedAttribute]
public ILOperandType get_OperandType();
    [CompilerGeneratedAttribute]
public void set_OperandType(ILOperandType value);
    [CompilerGeneratedAttribute]
public ILOpCodeFlags get_OpCodeFlags();
    [CompilerGeneratedAttribute]
public void set_OpCodeFlags(ILOpCodeFlags value);
}
internal enum Microsoft.VisualStudio.Coverage.Instrumentation.IL.ILOperandType : Enum {
    public int value__;
    public static ILOperandType None;
    public static ILOperandType Byte;
    public static ILOperandType Int;
    public static ILOperandType UShort;
    public static ILOperandType Long;
    public static ILOperandType Single;
    public static ILOperandType Double;
    public static ILOperandType Token;
    public static ILOperandType Switch;
}
internal enum Microsoft.VisualStudio.Coverage.Instrumentation.IL.InstructionTerminationType : Enum {
    public int value__;
    public static InstructionTerminationType FallThrough;
    public static InstructionTerminationType Branch;
    public static InstructionTerminationType ConditionalBranch;
    public static InstructionTerminationType Throw;
    public static InstructionTerminationType Switch;
    public static InstructionTerminationType Call;
    public static InstructionTerminationType IndirectCall;
    public static InstructionTerminationType Return;
    public static InstructionTerminationType Trap;
}
internal class Microsoft.VisualStudio.Coverage.Instrumentation.IL.SwitchInstruction : Instruction {
    [CompilerGeneratedAttribute]
private IList`1<int> <TargetOffsets>k__BackingField;
    public IList`1<int> TargetOffsets { get; public set; }
    public int InstructionSize { get; }
    [CompilerGeneratedAttribute]
public IList`1<int> get_TargetOffsets();
    [CompilerGeneratedAttribute]
public void set_TargetOffsets(IList`1<int> value);
    public virtual int get_InstructionSize();
}
public interface Microsoft.VisualStudio.Coverage.Instrumentation.IPdbReader {
    public Byte[] IdBytes { get; }
    public abstract virtual Byte[] get_IdBytes();
    public abstract virtual IEnumerable`1<SequencePointMetadata> GetSequencePoints(MethodDefinitionHandle handle);
}
public class Microsoft.VisualStudio.Coverage.Instrumentation.Metadata.AssemblyMetadata : object {
    private ReflectionContainer _reflectionContainer;
    private MetadataReader _metadataReader;
    private Stream _stream;
    private bool _disposed;
    private string _name;
    private IDictionary`2<TypeDefinition, TypeMetadata> _typesDictionary;
    private ICollection`1<TypeMetadata> _types;
    private bool _isCodeCoverageEnabledExplicitly;
    [CompilerGeneratedAttribute]
private PEReader <Reader>k__BackingField;
    [CompilerGeneratedAttribute]
private IPdbReader <PdbReader>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeCoverageConfig <CodeCoverageConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <IdBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ImageLinkTime>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ImageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCodeCoverageEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private ModuleSkipReason <ModuleSkipReason>k__BackingField;
    internal PEReader Reader { get; private set; }
    internal IPdbReader PdbReader { get; private set; }
    internal CodeCoverageConfig CodeCoverageConfig { get; }
    public string Name { get; }
    public string Path { get; }
    public string Id { get; private set; }
    public Byte[] IdBytes { get; private set; }
    public Guid Identifier { get; private set; }
    public UInt32 ImageLinkTime { get; private set; }
    public UInt32 ImageSize { get; private set; }
    public bool IsPdbLoaded { get; }
    public bool IsCodeCoverageEnabled { get; private set; }
    public ModuleSkipReason ModuleSkipReason { get; public set; }
    public IDictionary`2<TypeDefinition, TypeMetadata> TypesDictionary { get; }
    public ICollection`1<TypeMetadata> Types { get; }
    public AssemblyMetadata(string path);
    public AssemblyMetadata(string path, CodeCoverageConfig codeCoverageConfig);
    public AssemblyMetadata(string path, CodeCoverageConfig codeCoverageConfig, PEStreamOptions streamOptions);
    public AssemblyMetadata(string path, CodeCoverageConfig codeCoverageConfig, PEStreamOptions streamOptions, MetadataReaderOptions metadataOptions);
    [CompilerGeneratedAttribute]
internal PEReader get_Reader();
    [CompilerGeneratedAttribute]
private void set_Reader(PEReader value);
    [CompilerGeneratedAttribute]
internal IPdbReader get_PdbReader();
    [CompilerGeneratedAttribute]
private void set_PdbReader(IPdbReader value);
    [CompilerGeneratedAttribute]
internal CodeCoverageConfig get_CodeCoverageConfig();
    public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_IdBytes();
    [CompilerGeneratedAttribute]
private void set_IdBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public Guid get_Identifier();
    [CompilerGeneratedAttribute]
private void set_Identifier(Guid value);
    [CompilerGeneratedAttribute]
public UInt32 get_ImageLinkTime();
    [CompilerGeneratedAttribute]
private void set_ImageLinkTime(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_ImageSize();
    [CompilerGeneratedAttribute]
private void set_ImageSize(UInt32 value);
    public bool get_IsPdbLoaded();
    [CompilerGeneratedAttribute]
public bool get_IsCodeCoverageEnabled();
    [CompilerGeneratedAttribute]
private void set_IsCodeCoverageEnabled(bool value);
    [CompilerGeneratedAttribute]
public ModuleSkipReason get_ModuleSkipReason();
    [CompilerGeneratedAttribute]
public void set_ModuleSkipReason(ModuleSkipReason value);
    public IDictionary`2<TypeDefinition, TypeMetadata> get_TypesDictionary();
    public ICollection`1<TypeMetadata> get_Types();
    private bool IsIncluded();
    private void InitializeMetadata(PEStreamOptions streamOptions, MetadataReaderOptions metadataOptions);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.VisualStudio.Coverage.Instrumentation.Metadata.CustomAttributeMetadata : MetadataBase`2<TypeReference, TypeReferenceHandle> {
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    public string Namespace { get; public set; }
    public string FullName { get; }
    public CustomAttributeMetadata(ReflectionContainer reflectionContainer, TypeReference definition, TypeReferenceHandle handle);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_FullName();
}
public class Microsoft.VisualStudio.Coverage.Instrumentation.Metadata.EventMetadata : MetadataBase`2<EventDefinition, EventDefinitionHandle> {
    private TypeMetadata _parent;
    private IList`1<MethodMetadata> _methods;
    private IList`1<CustomAttributeMetadata> _customAttributes;
    public IList`1<MethodMetadata> Methods { get; }
    public IList`1<CustomAttributeMetadata> CustomAttributes { get; }
    public EventMetadata(ReflectionContainer reflectionContainer, EventDefinition definition, EventDefinitionHandle handle, TypeMetadata parent);
    public IList`1<MethodMetadata> get_Methods();
    public IList`1<CustomAttributeMetadata> get_CustomAttributes();
}
internal class Microsoft.VisualStudio.Coverage.Instrumentation.Metadata.Instruction : object {
    [CompilerGeneratedAttribute]
private bool <StartsBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private ILOpCode <OpCode>k__BackingField;
    [CompilerGeneratedAttribute]
private InstructionTerminationType <TerminationType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Instruction> <TargetInstructions>k__BackingField;
    [CompilerGeneratedAttribute]
private ILOpCodeInfo <OpCodeInfo>k__BackingField;
    public bool StartsBlock { get; public set; }
    public ILOpCode OpCode { get; public set; }
    public InstructionTerminationType TerminationType { get; public set; }
    public int Index { get; public set; }
    public int Offset { get; public set; }
    public IList`1<Instruction> TargetInstructions { get; public set; }
    public int TargetInstructionsCount { get; }
    public int InstructionSize { get; }
    public ILOpCodeInfo OpCodeInfo { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_StartsBlock();
    [CompilerGeneratedAttribute]
public void set_StartsBlock(bool value);
    [CompilerGeneratedAttribute]
public ILOpCode get_OpCode();
    [CompilerGeneratedAttribute]
public void set_OpCode(ILOpCode value);
    [CompilerGeneratedAttribute]
public InstructionTerminationType get_TerminationType();
    [CompilerGeneratedAttribute]
public void set_TerminationType(InstructionTerminationType value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(int value);
    [CompilerGeneratedAttribute]
public IList`1<Instruction> get_TargetInstructions();
    [CompilerGeneratedAttribute]
public void set_TargetInstructions(IList`1<Instruction> value);
    public int get_TargetInstructionsCount();
    public virtual int get_InstructionSize();
    [CompilerGeneratedAttribute]
public ILOpCodeInfo get_OpCodeInfo();
    [CompilerGeneratedAttribute]
public void set_OpCodeInfo(ILOpCodeInfo value);
}
public abstract class Microsoft.VisualStudio.Coverage.Instrumentation.Metadata.MetadataBase`2 : object {
    [CompilerGeneratedAttribute]
private ReflectionContainer <ReflectionContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private TDefinition <Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private THandle <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public ReflectionContainer ReflectionContainer { get; }
    public PEReader Reader { get; }
    public MetadataReader MetadataReader { get; }
    public IPdbReader PdbReader { get; }
    public TDefinition Definition { get; }
    public THandle Handle { get; }
    public string Name { get; protected set; }
    protected MetadataBase`2(ReflectionContainer reflectionContainer, TDefinition definition, THandle handle);
    [CompilerGeneratedAttribute]
public ReflectionContainer get_ReflectionContainer();
    public PEReader get_Reader();
    public MetadataReader get_MetadataReader();
    public IPdbReader get_PdbReader();
    [CompilerGeneratedAttribute]
public TDefinition get_Definition();
    [CompilerGeneratedAttribute]
public THandle get_Handle();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected virtual void set_Name(string value);
}
public class Microsoft.VisualStudio.Coverage.Instrumentation.Metadata.MethodBlock : object {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExpressionBreakpointPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Instruction> <Instructions>k__BackingField;
    public int Index { get; public set; }
    public int Offset { get; public set; }
    public bool IsExpressionBreakpointPattern { get; public set; }
    internal IList`1<Instruction> Instructions { get; internal set; }
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(int value);
    [CompilerGeneratedAttribute]
public bool get_IsExpressionBreakpointPattern();
    [CompilerGeneratedAttribute]
public void set_IsExpressionBreakpointPattern(bool value);
    [CompilerGeneratedAttribute]
internal IList`1<Instruction> get_Instructions();
    [CompilerGeneratedAttribute]
internal void set_Instructions(IList`1<Instruction> value);
}
public class Microsoft.VisualStudio.Coverage.Instrumentation.Metadata.MethodMetadata : MetadataBase`2<MethodDefinition, MethodDefinitionHandle> {
    private static int JustMyCodeWithNoSource;
    private TypeMetadata _parent;
    private IDictionary`2<int, MethodBlock> _instructionBlockMap;
    private IList`1<CustomAttributeMetadata> _customAttributes;
    private IList`1<MethodBlock> _methodBlocks;
    private IList`1<Instruction> _instructions;
    private IDictionary`2<int, Instruction> _instructionsMap;
    private IList`1<ExceptionClause> _exceptionClauses;
    private IList`1<SequencePointMetadata> _sequencePoints;
    private string _fullName;
    private string _qualifiedName;
    private Nullable`1<bool> _isCodeCoverageEnabled;
    private Nullable`1<bool> _hasSymbolicInformation;
    [CompilerGeneratedAttribute]
private UInt32 <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MetadataToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConstructor>k__BackingField;
    [CompilerGeneratedAttribute]
private FunctionSkipReason <FunctionSkipReason>k__BackingField;
    public UInt32 Id { get; }
    public UInt32 MetadataToken { get; }
    public string FullName { get; }
    public string QualifiedName { get; }
    public string TypeName { get; }
    public string NamespaceName { get; }
    public string SourceFile { get; private set; }
    public bool IsConstructor { get; private set; }
    public bool HasSymbolicInformation { get; }
    public bool IsCodeCoverageEnabled { get; }
    public FunctionSkipReason FunctionSkipReason { get; private set; }
    public IList`1<CustomAttributeMetadata> CustomAttributes { get; }
    internal IList`1<Instruction> Instructions { get; }
    internal IList`1<ExceptionClause> ExceptionClauses { get; }
    public IList`1<MethodBlock> MethodBlocks { get; }
    public IList`1<SequencePointMetadata> SequencePoints { get; }
    public MethodMetadata(ReflectionContainer reflectionContainer, MethodDefinition definition, MethodDefinitionHandle handle, TypeMetadata parent);
    [CompilerGeneratedAttribute]
public UInt32 get_Id();
    [CompilerGeneratedAttribute]
public UInt32 get_MetadataToken();
    public string get_FullName();
    public string get_QualifiedName();
    public string get_TypeName();
    public string get_NamespaceName();
    [CompilerGeneratedAttribute]
public string get_SourceFile();
    [CompilerGeneratedAttribute]
private void set_SourceFile(string value);
    [CompilerGeneratedAttribute]
public bool get_IsConstructor();
    [CompilerGeneratedAttribute]
private void set_IsConstructor(bool value);
    public bool get_HasSymbolicInformation();
    public bool get_IsCodeCoverageEnabled();
    [CompilerGeneratedAttribute]
public FunctionSkipReason get_FunctionSkipReason();
    [CompilerGeneratedAttribute]
private void set_FunctionSkipReason(FunctionSkipReason value);
    public IList`1<CustomAttributeMetadata> get_CustomAttributes();
    internal IList`1<Instruction> get_Instructions();
    internal IList`1<ExceptionClause> get_ExceptionClauses();
    public IList`1<MethodBlock> get_MethodBlocks();
    public IList`1<SequencePointMetadata> get_SequencePoints();
    private void PopulateName();
    internal void DisassembleFunction();
    private void PopulateInstructions(MethodBodyBlock methodBody);
    private Instruction GetInstruction(BlobReader blob);
    private static Instruction GetBranchInstruction(BlobReader blob, ILOpCode opCode);
    private static Instruction GetSwitchInstruction(BlobReader blob);
    private void PopulateTargetInstructions();
    private void PopulateExceptionClauses(MethodBodyBlock methodBody);
    private void CalculateBlocks();
    private void ProcessBlocks();
    private void PopulateSequencePoints();
    private void PopulateSequencePointForOtherBlocks(SequencePointMetadata sequencePoint, int upperBound, ISet`1<int> alreadyClearedBlocks);
    private void AppendSequencePoint(SequencePointMetadata sequencePoint, ISet`1<int> alreadyClearedBlocks);
    public bool IsIncluded();
}
public class Microsoft.VisualStudio.Coverage.Instrumentation.Metadata.PropertyMetadata : MetadataBase`2<PropertyDefinition, PropertyDefinitionHandle> {
    private TypeMetadata _parent;
    private IList`1<MethodMetadata> _methods;
    private IList`1<CustomAttributeMetadata> _customAttributes;
    public IList`1<MethodMetadata> Methods { get; }
    public IList`1<CustomAttributeMetadata> CustomAttributes { get; }
    public PropertyMetadata(ReflectionContainer reflectionContainer, PropertyDefinition definition, PropertyDefinitionHandle handle, TypeMetadata parent);
    public IList`1<MethodMetadata> get_Methods();
    public IList`1<CustomAttributeMetadata> get_CustomAttributes();
}
public class Microsoft.VisualStudio.Coverage.Instrumentation.Metadata.ReflectionContainer : object {
    [CompilerGeneratedAttribute]
private PEReader <Reader>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataReader <MetadataReader>k__BackingField;
    [CompilerGeneratedAttribute]
private IPdbReader <PdbReader>k__BackingField;
    [CompilerGeneratedAttribute]
private SignatureVisualizer <SignatureVisualizer>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeCoverageConfig <CodeCoverageConfig>k__BackingField;
    public PEReader Reader { get; }
    public MetadataReader MetadataReader { get; }
    public IPdbReader PdbReader { get; }
    internal SignatureVisualizer SignatureVisualizer { get; }
    public CodeCoverageConfig CodeCoverageConfig { get; }
    public ReflectionContainer(PEReader reader, MetadataReader metadataReader, IPdbReader pdbReaderProvider, CodeCoverageConfig codeCoverageConfig);
    [CompilerGeneratedAttribute]
public PEReader get_Reader();
    [CompilerGeneratedAttribute]
public MetadataReader get_MetadataReader();
    [CompilerGeneratedAttribute]
public IPdbReader get_PdbReader();
    [CompilerGeneratedAttribute]
internal SignatureVisualizer get_SignatureVisualizer();
    [CompilerGeneratedAttribute]
public CodeCoverageConfig get_CodeCoverageConfig();
}
public class Microsoft.VisualStudio.Coverage.Instrumentation.Metadata.SequencePointMetadata : object {
    [CompilerGeneratedAttribute]
private bool <IsHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Checksum>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ChecksumAlgorithm>k__BackingField;
    public bool IsHidden { get; public set; }
    public int Offset { get; public set; }
    public int StartLine { get; public set; }
    public int StartColumn { get; public set; }
    public int EndLine { get; public set; }
    public int EndColumn { get; public set; }
    public string SourceFilePath { get; public set; }
    public string Checksum { get; public set; }
    public Guid ChecksumAlgorithm { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsHidden();
    [CompilerGeneratedAttribute]
public void set_IsHidden(bool value);
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(int value);
    [CompilerGeneratedAttribute]
public int get_StartLine();
    [CompilerGeneratedAttribute]
public void set_StartLine(int value);
    [CompilerGeneratedAttribute]
public int get_StartColumn();
    [CompilerGeneratedAttribute]
public void set_StartColumn(int value);
    [CompilerGeneratedAttribute]
public int get_EndLine();
    [CompilerGeneratedAttribute]
public void set_EndLine(int value);
    [CompilerGeneratedAttribute]
public int get_EndColumn();
    [CompilerGeneratedAttribute]
public void set_EndColumn(int value);
    [CompilerGeneratedAttribute]
public string get_SourceFilePath();
    [CompilerGeneratedAttribute]
public void set_SourceFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_Checksum();
    [CompilerGeneratedAttribute]
public void set_Checksum(string value);
    [CompilerGeneratedAttribute]
public Guid get_ChecksumAlgorithm();
    [CompilerGeneratedAttribute]
public void set_ChecksumAlgorithm(Guid value);
}
public class Microsoft.VisualStudio.Coverage.Instrumentation.Metadata.TypeMetadata : MetadataBase`2<TypeDefinition, TypeDefinitionHandle> {
    private IList`1<TypeMetadata> _parentTypes;
    private IList`1<PropertyMetadata> _properties;
    private IList`1<EventMetadata> _events;
    private IList`1<MethodMetadata> _methods;
    private IList`1<CustomAttributeMetadata> _customAttributes;
    private string _name;
    private string _namespaceName;
    private string _fullName;
    private string _constructorName;
    private Nullable`1<bool> _isCodeCoverageEnabled;
    [CompilerGeneratedAttribute]
private AssemblyMetadata <ParentAssembly>k__BackingField;
    public string Name { get; protected set; }
    public string ConstructorName { get; }
    public string FullName { get; }
    public string NamespaceName { get; public set; }
    public AssemblyMetadata ParentAssembly { get; }
    public bool IsCodeCoverageEnabled { get; }
    public IList`1<CustomAttributeMetadata> CustomAttributes { get; }
    public IList`1<PropertyMetadata> Properties { get; }
    public IList`1<EventMetadata> Events { get; }
    public IList`1<MethodMetadata> Methods { get; }
    public TypeMetadata(ReflectionContainer reflectionContainer, TypeDefinition definition, TypeDefinitionHandle handle, AssemblyMetadata parent);
    public virtual string get_Name();
    protected virtual void set_Name(string value);
    public string get_ConstructorName();
    public string get_FullName();
    public string get_NamespaceName();
    public void set_NamespaceName(string value);
    [CompilerGeneratedAttribute]
public AssemblyMetadata get_ParentAssembly();
    public bool get_IsCodeCoverageEnabled();
    public IList`1<CustomAttributeMetadata> get_CustomAttributes();
    public IList`1<PropertyMetadata> get_Properties();
    public IList`1<EventMetadata> get_Events();
    public IList`1<MethodMetadata> get_Methods();
    private bool IsIncluded();
    private void PopulateMetadata(TypeDefinition definition, string postfix);
}
internal static class Microsoft.VisualStudio.Coverage.Instrumentation.PdbReaderProvider : object {
    private static string LegacyPdbPrefix;
    private static Byte[] Buffer;
    private static PdbReaderProvider();
    public static IPdbReader GetPdbDataProvider(AssemblyMetadata assemblyMetadata, MetadataReaderOptions options);
    private static bool LoadPortablePdbReader(AssemblyMetadata assemblyMetadata, DebugDirectoryEntry entry, MetadataReaderProvider& provider, String& pdbPath);
    private static bool TryFindPdbPath(AssemblyMetadata assemblyMetadata, DebugDirectoryEntry entry, String& pdbPath, Stream& stream);
    private static Stream OpenStream(string path);
    private static Byte[] GetIdBytes(PEReader reader, DebugDirectoryEntry entry);
}
internal class Microsoft.VisualStudio.Coverage.Instrumentation.PortablePdbReader : object {
    private MetadataReader _metadataReader;
    private MetadataReaderProvider _metadataReaderProvider;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private string <PdbPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <IdBytes>k__BackingField;
    public string PdbPath { get; }
    public Byte[] IdBytes { get; }
    public PortablePdbReader(MetadataReaderProvider metadataReaderProvider, MetadataReaderOptions options, string pdbPath);
    [CompilerGeneratedAttribute]
public string get_PdbPath();
    [CompilerGeneratedAttribute]
public sealed virtual Byte[] get_IdBytes();
    public sealed virtual IEnumerable`1<SequencePointMetadata> GetSequencePoints(MethodDefinitionHandle handle);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.VisualStudio.Coverage.Instrumentation.SignatureVisualizer : object {
    private MetadataReader _metadataReader;
    private ConcurrentDictionary`2<EntityHandle, string> _handleNameDictionary;
    public SignatureVisualizer(MetadataReader metadataReader);
    public sealed virtual string GetPrimitiveType(PrimitiveTypeCode typeCode);
    private string RowId(EntityHandle handle);
    public sealed virtual string GetTypeFromDefinition(MetadataReader reader, TypeDefinitionHandle handle, byte rawTypeKind);
    public sealed virtual string GetTypeFromReference(MetadataReader reader, TypeReferenceHandle handle, byte rawTypeKind);
    public sealed virtual string GetTypeFromSpecification(MetadataReader reader, MethodDefinition genericContext, TypeSpecificationHandle handle, byte rawTypeKind);
    private string GetFullTypeName(MetadataReader reader, TypeDefinitionHandle handle);
    private string GetFullTypeName(MetadataReader reader, TypeReferenceHandle handle);
    private string GetFullTypeName(string name, string namespaceName, EntityHandle handle);
    public sealed virtual string GetSZArrayType(string elementType);
    public sealed virtual string GetPointerType(string elementType);
    public sealed virtual string GetByReferenceType(string elementType);
    public sealed virtual string GetGenericMethodParameter(MethodDefinition genericContext, int index);
    public sealed virtual string GetGenericTypeParameter(MethodDefinition genericContext, int index);
    public sealed virtual string GetPinnedType(string elementType);
    public sealed virtual string GetGenericInstantiation(string genericType, ImmutableArray`1<string> typeArguments);
    public sealed virtual string GetModifiedType(string modifierType, string unmodifiedType, bool isRequired);
    public sealed virtual string GetArrayType(string elementType, ArrayShape shape);
    public sealed virtual string GetFunctionPointerType(MethodSignature`1<string> signature);
    private static string MethodSignature(MethodSignature`1<string> signature);
}
