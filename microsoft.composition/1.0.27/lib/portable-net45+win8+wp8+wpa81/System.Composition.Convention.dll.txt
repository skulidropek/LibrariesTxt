internal static class Microsoft.Composition.Diagnostics.CompositionTrace : object {
    internal static void Registration_ConstructorConventionOverridden(Type type);
    internal static void Registration_TypeExportConventionOverridden(Type type);
    internal static void Registration_MemberExportConventionOverridden(Type type, MemberInfo member);
    internal static void Registration_MemberImportConventionOverridden(Type type, MemberInfo member);
    internal static void Registration_OnSatisfiedImportNotificationOverridden(Type type, MemberInfo member);
    internal static void Registration_PartCreationConventionOverridden(Type type);
    internal static void Registration_MemberImportConventionMatchedTwice(Type type, MemberInfo member);
    internal static void Registration_PartMetadataConventionOverridden(Type type);
    internal static void Registration_ParameterImportConventionOverridden(ParameterInfo parameter, ConstructorInfo constructor);
}
internal enum Microsoft.Composition.Diagnostics.CompositionTraceId : Enum {
    public ushort value__;
    public static CompositionTraceId Registration_ConstructorConventionOverridden;
    public static CompositionTraceId Registration_TypeExportConventionOverridden;
    public static CompositionTraceId Registration_MemberExportConventionOverridden;
    public static CompositionTraceId Registration_MemberImportConventionOverridden;
    public static CompositionTraceId Registration_PartCreationConventionOverridden;
    public static CompositionTraceId Registration_MemberImportConventionMatchedTwice;
    public static CompositionTraceId Registration_PartMetadataConventionOverridden;
    public static CompositionTraceId Registration_ParameterImportConventionOverridden;
    public static CompositionTraceId Registration_OnSatisfiedImportNotificationOverridden;
}
internal static class Microsoft.Composition.Diagnostics.CompositionTraceSource : object {
    private static DebuggerTraceWriter Source;
    public static bool CanWriteInformation { get; }
    public static bool CanWriteWarning { get; }
    public static bool CanWriteError { get; }
    private static CompositionTraceSource();
    public static bool get_CanWriteInformation();
    public static bool get_CanWriteWarning();
    public static bool get_CanWriteError();
    public static void WriteInformation(CompositionTraceId traceId, string format, Object[] arguments);
    public static void WriteWarning(CompositionTraceId traceId, string format, Object[] arguments);
    public static void WriteError(CompositionTraceId traceId, string format, Object[] arguments);
    private static void EnsureEnabled(bool condition);
}
internal class Microsoft.Composition.Diagnostics.DebuggerTraceWriter : TraceWriter {
    private static string SourceName;
    public bool CanWriteInformation { get; }
    public bool CanWriteWarning { get; }
    public bool CanWriteError { get; }
    private static DebuggerTraceWriter();
    public virtual bool get_CanWriteInformation();
    public virtual bool get_CanWriteWarning();
    public virtual bool get_CanWriteError();
    public virtual void WriteInformation(CompositionTraceId traceId, string format, Object[] arguments);
    public virtual void WriteWarning(CompositionTraceId traceId, string format, Object[] arguments);
    public virtual void WriteError(CompositionTraceId traceId, string format, Object[] arguments);
    private static void WriteEvent(TraceEventType eventType, CompositionTraceId traceId, string format, Object[] arguments);
    internal static string CreateLogMessage(TraceEventType eventType, CompositionTraceId traceId, string format, Object[] arguments);
}
internal abstract class Microsoft.Composition.Diagnostics.TraceWriter : object {
    public bool CanWriteInformation { get; }
    public bool CanWriteWarning { get; }
    public bool CanWriteError { get; }
    public abstract virtual bool get_CanWriteInformation();
    public abstract virtual bool get_CanWriteWarning();
    public abstract virtual bool get_CanWriteError();
    public abstract virtual void WriteInformation(CompositionTraceId traceId, string format, Object[] arguments);
    public abstract virtual void WriteWarning(CompositionTraceId traceId, string format, Object[] arguments);
    public abstract virtual void WriteError(CompositionTraceId traceId, string format, Object[] arguments);
}
internal static class Microsoft.Internal.Assumes : object {
    [DebuggerStepThroughAttribute]
internal static void NotNull(T value);
    [DebuggerStepThroughAttribute]
internal static void NotNull(T1 value1, T2 value2);
    [DebuggerStepThroughAttribute]
internal static void NotNull(T1 value1, T2 value2, T3 value3);
    [DebuggerStepThroughAttribute]
internal static void NotNullOrEmpty(string value);
    [DebuggerStepThroughAttribute]
internal static void IsTrue(bool condition);
    [DebuggerStepThroughAttribute]
internal static void IsTrue(bool condition, string message);
    [DebuggerStepThroughAttribute]
internal static void IsTrue(bool condition, string message, object arg0);
    [DebuggerStepThroughAttribute]
internal static void IsTrue(bool condition, string message, object arg0, object arg1);
    [DebuggerStepThroughAttribute]
internal static void IsTrue(bool condition, string message, object arg0, object arg1, object arg2);
    [DebuggerStepThroughAttribute]
internal static void IsTrue(bool condition, string message, Object[] args);
    [DebuggerStepThroughAttribute]
internal static T NotReachable();
    [DebuggerStepThroughAttribute]
private static Exception UncatchableException(string message);
}
[ExtensionAttribute]
internal static class Microsoft.Internal.AttributeServices : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> GetAttributes(MemberInfo memberInfo);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetAttributes(MemberInfo memberInfo, bool inherit);
    [ExtensionAttribute]
public static T GetFirstAttribute(MemberInfo memberInfo);
    [ExtensionAttribute]
public static T GetFirstAttribute(MemberInfo memberInfo, bool inherit);
    [ExtensionAttribute]
public static bool IsAttributeDefined(MemberInfo memberInfo);
    [ExtensionAttribute]
public static bool IsAttributeDefined(MemberInfo memberInfo, bool inherit);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetAttributes(ParameterInfo parameterInfo);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetAttributes(ParameterInfo parameterInfo, bool inherit);
    [ExtensionAttribute]
public static T GetFirstAttribute(ParameterInfo parameterInfo);
    [ExtensionAttribute]
public static T GetFirstAttribute(ParameterInfo parameterInfo, bool inherit);
    [ExtensionAttribute]
public static bool IsAttributeDefined(ParameterInfo parameterInfo);
    [ExtensionAttribute]
public static bool IsAttributeDefined(ParameterInfo parameterInfo, bool inherit);
}
internal class Microsoft.Internal.Lock : object {
    private object _thisLock;
    public void EnterReadLock();
    public void EnterWriteLock();
    public void ExitReadLock();
    public void ExitWriteLock();
    public sealed virtual void Dispose();
}
internal class Microsoft.Internal.ReadLock : ValueType {
    private Lock _lock;
    private int _isDisposed;
    public ReadLock(Lock lock);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
internal static class Microsoft.Internal.ReflectionServices : object {
    [ExtensionAttribute]
public static bool IsMemberInfoForType(MemberInfo memberInfo);
    [ExtensionAttribute]
public static bool IsMemberInfoForProperty(MemberInfo memberInfo);
    [ExtensionAttribute]
public static bool IsMemberInfoForConstructor(MemberInfo memberInfo);
    [ExtensionAttribute]
public static bool IsMemberInfoForMethod(MemberInfo memberInfo);
}
internal static class Microsoft.Internal.Requires : object {
    [DebuggerStepThroughAttribute]
public static void NotNull(T value, string parameterName);
    [DebuggerStepThroughAttribute]
public static void NotNullOrEmpty(string value, string parameterName);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class Microsoft.Internal.Strings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Argument_ExpressionMustBeNew { get; }
    internal static string Argument_ExpressionMustBePropertyMember { get; }
    internal static string Argument_ExpressionMustBeVoidMethodWithNoArguments { get; }
    internal static string ArgumentException_EmptyString { get; }
    internal static string ArgumentOutOfRange_InvalidEnumInSet { get; }
    internal static string InternalExceptionMessage { get; }
    internal static string Registration_ConstructorConventionOverridden { get; }
    internal static string Registration_MemberExportConventionOverridden { get; }
    internal static string Registration_MemberImportConventionMatchedTwice { get; }
    internal static string Registration_MemberImportConventionOverridden { get; }
    internal static string Registration_OnSatisfiedImportNotificationOverridden { get; }
    internal static string Registration_ParameterImportConventionOverridden { get; }
    internal static string Registration_PartCreationConventionOverridden { get; }
    internal static string Registration_PartMetadataConventionOverridden { get; }
    internal static string Registration_TypeExportConventionOverridden { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Argument_ExpressionMustBeNew();
    internal static string get_Argument_ExpressionMustBePropertyMember();
    internal static string get_Argument_ExpressionMustBeVoidMethodWithNoArguments();
    internal static string get_ArgumentException_EmptyString();
    internal static string get_ArgumentOutOfRange_InvalidEnumInSet();
    internal static string get_InternalExceptionMessage();
    internal static string get_Registration_ConstructorConventionOverridden();
    internal static string get_Registration_MemberExportConventionOverridden();
    internal static string get_Registration_MemberImportConventionMatchedTwice();
    internal static string get_Registration_MemberImportConventionOverridden();
    internal static string get_Registration_OnSatisfiedImportNotificationOverridden();
    internal static string get_Registration_ParameterImportConventionOverridden();
    internal static string get_Registration_PartCreationConventionOverridden();
    internal static string get_Registration_PartMetadataConventionOverridden();
    internal static string get_Registration_TypeExportConventionOverridden();
}
internal class Microsoft.Internal.WriteLock : ValueType {
    private Lock _lock;
    private int _isDisposed;
    public WriteLock(Lock lock);
    public sealed virtual void Dispose();
}
public class System.Composition.Convention.ConventionBuilder : AttributedModelProvider {
    private static List`1<object> EmptyList;
    private Lock _lock;
    private List`1<PartConventionBuilder> _conventions;
    private Dictionary`2<MemberInfo, List`1<Attribute>> _memberInfos;
    private Dictionary`2<ParameterInfo, List`1<Attribute>> _parameters;
    private static ConventionBuilder();
    public PartConventionBuilder`1<T> ForTypesDerivedFrom();
    public PartConventionBuilder ForTypesDerivedFrom(Type type);
    public PartConventionBuilder`1<T> ForType();
    public PartConventionBuilder ForType(Type type);
    public PartConventionBuilder`1<T> ForTypesMatching(Predicate`1<Type> typeFilter);
    public PartConventionBuilder ForTypesMatching(Predicate`1<Type> typeFilter);
    private IEnumerable`1<Tuple`2<object, List`1<Attribute>>> EvaluateThisTypeInfoAgainstTheConvention(TypeInfo typeInfo);
    public virtual IEnumerable`1<Attribute> GetCustomAttributes(Type reflectedType, MemberInfo member);
    private List`1<Attribute> ReadMemberCustomAttributes(Type reflectedType, MemberInfo member);
    public virtual IEnumerable`1<Attribute> GetCustomAttributes(Type reflectedType, ParameterInfo parameter);
    private List`1<Attribute> ReadParameterCustomAttributes(Type reflectedType, ParameterInfo parameter);
    private static bool IsGenericDescendentOf(TypeInfo openType, TypeInfo baseType);
    private static bool IsDescendentOf(Type type, Type baseType);
    [CompilerGeneratedAttribute]
private static bool <ForTypesDerivedFrom>b__0(Type t);
    [CompilerGeneratedAttribute]
private static bool <ForType>b__4(Type t);
}
public class System.Composition.Convention.ExportConventionBuilder : object {
    private string _contractName;
    private Type _contractType;
    private List`1<Tuple`2<string, object>> _metadataItems;
    private List`1<Tuple`2<string, Func`2<Type, object>>> _metadataItemFuncs;
    private Func`2<Type, string> _getContractNameFromPartType;
    public ExportConventionBuilder AsContractType();
    public ExportConventionBuilder AsContractType(Type type);
    public ExportConventionBuilder AsContractName(string contractName);
    public ExportConventionBuilder AsContractName(Func`2<Type, string> getContractNameFromPartType);
    public ExportConventionBuilder AddMetadata(string name, object value);
    public ExportConventionBuilder AddMetadata(string name, Func`2<Type, object> getValueFromPartType);
    internal void BuildAttributes(Type type, List`1& attributes);
}
public class System.Composition.Convention.ImportConventionBuilder : object {
    private static Type[] SupportedImportManyTypes;
    private string _contractName;
    private Nullable`1<bool> _asMany;
    private bool _allowDefault;
    private Func`2<Type, string> _getContractNameFromPartType;
    private List`1<Tuple`2<string, object>> _metadataConstraintItems;
    private List`1<Tuple`2<string, Func`2<Type, object>>> _metadataConstraintItemFuncs;
    private static ImportConventionBuilder();
    public ImportConventionBuilder AsContractName(string contractName);
    public ImportConventionBuilder AsContractName(Func`2<Type, string> getContractNameFromPartType);
    public ImportConventionBuilder AsMany();
    public ImportConventionBuilder AsMany(bool isMany);
    public ImportConventionBuilder AllowDefault();
    public ImportConventionBuilder AddMetadataConstraint(string name, object value);
    public ImportConventionBuilder AddMetadataConstraint(string name, Func`2<Type, object> getConstraintValueFromPartType);
    internal void BuildAttributes(Type type, List`1& attributes);
    private bool IsSupportedImportManyType(TypeInfo typeInfo);
}
public abstract class System.Composition.Convention.ParameterImportConventionBuilder : object {
    public T Import();
    public T Import(Action`1<ImportConventionBuilder> configure);
}
public class System.Composition.Convention.PartConventionBuilder : object {
    private Type[] _emptyTypeArray;
    private static List`1<Attribute> _onImportsSatisfiedAttributeList;
    private static List`1<Attribute> ImportingConstructorList;
    private static Type ExportAttributeType;
    private List`1<ExportConventionBuilder> _typeExportBuilders;
    private List`1<ImportConventionBuilder> _constructorImportBuilders;
    private bool _isShared;
    private string _sharingBoundary;
    private List`1<Tuple`2<string, object>> _metadataItems;
    private List`1<Tuple`2<string, Func`2<Type, object>>> _metadataItemFuncs;
    private Func`2<IEnumerable`1<ConstructorInfo>, ConstructorInfo> _constructorFilter;
    private Action`2<ParameterInfo, ImportConventionBuilder> _configureConstuctorImports;
    private List`1<Tuple`3<Predicate`1<PropertyInfo>, Action`2<PropertyInfo, ExportConventionBuilder>, Type>> _propertyExports;
    private List`1<Tuple`2<Predicate`1<PropertyInfo>, Action`2<PropertyInfo, ImportConventionBuilder>>> _propertyImports;
    private List`1<Tuple`2<Predicate`1<Type>, Action`2<Type, ExportConventionBuilder>>> _interfaceExports;
    private List`1<Predicate`1<MethodInfo>> _methodImportsSatisfiedNotifications;
    [CompilerGeneratedAttribute]
private Predicate`1<Type> <SelectType>k__BackingField;
    [CompilerGeneratedAttribute]
private static Predicate`1<Type> CS$<>9__CachedAnonymousMethodDelegate1;
    internal Predicate`1<Type> SelectType { get; private set; }
    internal PartConventionBuilder(Predicate`1<Type> selectType);
    private static PartConventionBuilder();
    [CompilerGeneratedAttribute]
internal Predicate`1<Type> get_SelectType();
    [CompilerGeneratedAttribute]
private void set_SelectType(Predicate`1<Type> value);
    public PartConventionBuilder Export();
    public PartConventionBuilder Export(Action`1<ExportConventionBuilder> exportConfiguration);
    public PartConventionBuilder Export();
    public PartConventionBuilder Export(Action`1<ExportConventionBuilder> exportConfiguration);
    public PartConventionBuilder SelectConstructor(Func`2<IEnumerable`1<ConstructorInfo>, ConstructorInfo> constructorSelector);
    public PartConventionBuilder SelectConstructor(Func`2<IEnumerable`1<ConstructorInfo>, ConstructorInfo> constructorSelector, Action`2<ParameterInfo, ImportConventionBuilder> importConfiguration);
    public PartConventionBuilder ExportInterfaces(Predicate`1<Type> interfaceFilter);
    public PartConventionBuilder ExportInterfaces();
    public PartConventionBuilder ExportInterfaces(Predicate`1<Type> interfaceFilter, Action`2<Type, ExportConventionBuilder> exportConfiguration);
    private PartConventionBuilder ExportInterfacesImpl(Predicate`1<Type> interfaceFilter, Action`2<Type, ExportConventionBuilder> exportConfiguration);
    public PartConventionBuilder ExportProperties(Predicate`1<PropertyInfo> propertyFilter);
    public PartConventionBuilder ExportProperties(Predicate`1<PropertyInfo> propertyFilter, Action`2<PropertyInfo, ExportConventionBuilder> exportConfiguration);
    private PartConventionBuilder ExportPropertiesImpl(Predicate`1<PropertyInfo> propertyFilter, Action`2<PropertyInfo, ExportConventionBuilder> exportConfiguration);
    public PartConventionBuilder ExportProperties(Predicate`1<PropertyInfo> propertyFilter);
    public PartConventionBuilder ExportProperties(Predicate`1<PropertyInfo> propertyFilter, Action`2<PropertyInfo, ExportConventionBuilder> exportConfiguration);
    private PartConventionBuilder ExportPropertiesImpl(Predicate`1<PropertyInfo> propertyFilter, Action`2<PropertyInfo, ExportConventionBuilder> exportConfiguration);
    public PartConventionBuilder ImportProperties(Predicate`1<PropertyInfo> propertyFilter);
    public PartConventionBuilder ImportProperties(Predicate`1<PropertyInfo> propertyFilter, Action`2<PropertyInfo, ImportConventionBuilder> importConfiguration);
    private PartConventionBuilder ImportPropertiesImpl(Predicate`1<PropertyInfo> propertyFilter, Action`2<PropertyInfo, ImportConventionBuilder> importConfiguration);
    public PartConventionBuilder ImportProperties(Predicate`1<PropertyInfo> propertyFilter);
    public PartConventionBuilder ImportProperties(Predicate`1<PropertyInfo> propertyFilter, Action`2<PropertyInfo, ImportConventionBuilder> importConfiguration);
    private PartConventionBuilder ImportPropertiesImpl(Predicate`1<PropertyInfo> propertyFilter, Action`2<PropertyInfo, ImportConventionBuilder> importConfiguration);
    public PartConventionBuilder NotifyImportsSatisfied(Predicate`1<MethodInfo> methodFilter);
    public PartConventionBuilder Shared();
    public PartConventionBuilder Shared(string sharingBoundary);
    private PartConventionBuilder SharedImpl(string sharingBoundary);
    public PartConventionBuilder AddPartMetadata(string name, object value);
    public PartConventionBuilder AddPartMetadata(string name, Func`2<Type, object> getValueFromPartType);
    private static bool MemberHasExportMetadata(MemberInfo member);
    internal IEnumerable`1<Attribute> BuildTypeAttributes(Type type);
    internal bool BuildConstructorAttributes(Type type, List`1& configuredMembers);
    internal static void BuildDefaultConstructorAttributes(Type type, List`1& configuredMembers);
    private static void ConfigureConstructorAttributes(ConstructorInfo constructorInfo, List`1& configuredMembers, Action`2<ParameterInfo, ImportConventionBuilder> configureConstuctorImports);
    internal void BuildOnImportsSatisfiedNotification(Type type, List`1& configuredMembers);
    internal void BuildPropertyAttributes(Type type, List`1& configuredMembers);
    private static IEnumerable`1<ConstructorInfo> FindLongestConstructors(IEnumerable`1<ConstructorInfo> constructors);
    [CompilerGeneratedAttribute]
private static bool <ExportInterfaces>b__0(Type t);
}
public class System.Composition.Convention.PartConventionBuilder`1 : PartConventionBuilder {
    internal PartConventionBuilder`1(Predicate`1<Type> selectType);
    public PartConventionBuilder`1<T> SelectConstructor(Expression`1<Func`2<ParameterImportConventionBuilder, T>> constructorSelector);
    public PartConventionBuilder`1<T> ExportProperty(Expression`1<Func`2<T, object>> propertySelector);
    public PartConventionBuilder`1<T> ExportProperty(Expression`1<Func`2<T, object>> propertySelector, Action`1<ExportConventionBuilder> exportConfiguration);
    public PartConventionBuilder`1<T> ExportProperty(Expression`1<Func`2<T, object>> propertySelector);
    public PartConventionBuilder`1<T> ExportProperty(Expression`1<Func`2<T, object>> propertySelector, Action`1<ExportConventionBuilder> exportConfiguration);
    public PartConventionBuilder`1<T> ImportProperty(Expression`1<Func`2<T, object>> propertySelector);
    public PartConventionBuilder`1<T> ImportProperty(Expression`1<Func`2<T, object>> propertySelector, Action`1<ImportConventionBuilder> importConfiguration);
    public PartConventionBuilder`1<T> ImportProperty(Expression`1<Func`2<T, object>> propertySelector);
    public PartConventionBuilder`1<T> ImportProperty(Expression`1<Func`2<T, object>> propertySelector, Action`1<ImportConventionBuilder> importConfiguration);
    public PartConventionBuilder`1<T> NotifyImportsSatisfied(Expression`1<Action`1<T>> methodSelector);
}
internal static class System.Composition.ExceptionBuilder : object {
    public static ArgumentException Argument_ExpressionMustBeNew(string parameterName);
    public static ArgumentException Argument_ExpressionMustBePropertyMember(string parameterName);
    public static ArgumentException Argument_ExpressionMustBeVoidMethodWithNoArguments(string methodName);
    private static ArgumentException CreateArgumentException(string message, string parameterName);
    private static string Format(string format, String[] arguments);
}
