public class Microsoft.Data.OperationAbortedException : SystemException {
}
public class Microsoft.Data.Sql.SqlNotificationRequest : object {
    public string Options { get; public set; }
    public int Timeout { get; public set; }
    public string UserData { get; public set; }
    public SqlNotificationRequest(string userData, string options, int timeout);
    public string get_Options();
    public void set_Options(string value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public string get_UserData();
    public void set_UserData(string value);
}
public enum Microsoft.Data.SqlClient.ApplicationIntent : Enum {
    public int value__;
    public static ApplicationIntent ReadOnly;
    public static ApplicationIntent ReadWrite;
}
public class Microsoft.Data.SqlClient.DataClassification.ColumnSensitivity : object {
    public ReadOnlyCollection`1<SensitivityProperty> SensitivityProperties { get; }
    public ColumnSensitivity(IList`1<SensitivityProperty> sensitivityProperties);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<SensitivityProperty> get_SensitivityProperties();
}
public class Microsoft.Data.SqlClient.DataClassification.InformationType : object {
    public string Id { get; }
    public string Name { get; }
    public InformationType(string name, string id);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Name();
}
public class Microsoft.Data.SqlClient.DataClassification.Label : object {
    public string Id { get; }
    public string Name { get; }
    public Label(string name, string id);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Name();
}
public class Microsoft.Data.SqlClient.DataClassification.SensitivityClassification : object {
    public ReadOnlyCollection`1<ColumnSensitivity> ColumnSensitivities { get; }
    public ReadOnlyCollection`1<InformationType> InformationTypes { get; }
    public ReadOnlyCollection`1<Label> Labels { get; }
    public SensitivityClassification(IList`1<Label> labels, IList`1<InformationType> informationTypes, IList`1<ColumnSensitivity> columnSensitivity);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<ColumnSensitivity> get_ColumnSensitivities();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<InformationType> get_InformationTypes();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<Label> get_Labels();
}
public class Microsoft.Data.SqlClient.DataClassification.SensitivityProperty : object {
    public InformationType InformationType { get; }
    public Label Label { get; }
    public SensitivityProperty(Label label, InformationType informationType);
    [CompilerGeneratedAttribute]
public InformationType get_InformationType();
    [CompilerGeneratedAttribute]
public Label get_Label();
}
public class Microsoft.Data.SqlClient.OnChangeEventHandler : MulticastDelegate {
    public OnChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlNotificationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlNotificationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Microsoft.Data.SqlClient.Server.DataAccessKind : Enum {
    public int value__;
    public static DataAccessKind None;
    public static DataAccessKind Read;
}
public enum Microsoft.Data.SqlClient.Server.Format : Enum {
    public int value__;
    public static Format Native;
    public static Format Unknown;
    public static Format UserDefined;
}
public interface Microsoft.Data.SqlClient.Server.IBinarySerialize {
    public abstract virtual void Read(BinaryReader r);
    public abstract virtual void Write(BinaryWriter w);
}
public class Microsoft.Data.SqlClient.Server.InvalidUdtException : SystemException {
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Data.SqlClient.Server.SqlDataRecord : object {
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public SqlDataRecord(SqlMetaData[] metaData);
    public virtual int get_FieldCount();
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual string GetDataTypeName(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual DateTimeOffset GetDateTimeOffset(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual SqlBinary GetSqlBinary(int ordinal);
    public virtual SqlBoolean GetSqlBoolean(int ordinal);
    public virtual SqlByte GetSqlByte(int ordinal);
    public virtual SqlBytes GetSqlBytes(int ordinal);
    public virtual SqlChars GetSqlChars(int ordinal);
    public virtual SqlDateTime GetSqlDateTime(int ordinal);
    public virtual SqlDecimal GetSqlDecimal(int ordinal);
    public virtual SqlDouble GetSqlDouble(int ordinal);
    public virtual Type GetSqlFieldType(int ordinal);
    public virtual SqlGuid GetSqlGuid(int ordinal);
    public virtual SqlInt16 GetSqlInt16(int ordinal);
    public virtual SqlInt32 GetSqlInt32(int ordinal);
    public virtual SqlInt64 GetSqlInt64(int ordinal);
    public virtual SqlMetaData GetSqlMetaData(int ordinal);
    public virtual SqlMoney GetSqlMoney(int ordinal);
    public virtual SqlSingle GetSqlSingle(int ordinal);
    public virtual SqlString GetSqlString(int ordinal);
    public virtual object GetSqlValue(int ordinal);
    public virtual int GetSqlValues(Object[] values);
    public virtual SqlXml GetSqlXml(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual TimeSpan GetTimeSpan(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int ordinal);
    public virtual void SetBoolean(int ordinal, bool value);
    public virtual void SetByte(int ordinal, byte value);
    public virtual void SetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual void SetChar(int ordinal, char value);
    public virtual void SetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual void SetDateTime(int ordinal, DateTime value);
    public virtual void SetDateTimeOffset(int ordinal, DateTimeOffset value);
    public virtual void SetDBNull(int ordinal);
    public virtual void SetDecimal(int ordinal, decimal value);
    public virtual void SetDouble(int ordinal, double value);
    public virtual void SetFloat(int ordinal, float value);
    public virtual void SetGuid(int ordinal, Guid value);
    public virtual void SetInt16(int ordinal, short value);
    public virtual void SetInt32(int ordinal, int value);
    public virtual void SetInt64(int ordinal, long value);
    public virtual void SetSqlBinary(int ordinal, SqlBinary value);
    public virtual void SetSqlBoolean(int ordinal, SqlBoolean value);
    public virtual void SetSqlByte(int ordinal, SqlByte value);
    public virtual void SetSqlBytes(int ordinal, SqlBytes value);
    public virtual void SetSqlChars(int ordinal, SqlChars value);
    public virtual void SetSqlDateTime(int ordinal, SqlDateTime value);
    public virtual void SetSqlDecimal(int ordinal, SqlDecimal value);
    public virtual void SetSqlDouble(int ordinal, SqlDouble value);
    public virtual void SetSqlGuid(int ordinal, SqlGuid value);
    public virtual void SetSqlInt16(int ordinal, SqlInt16 value);
    public virtual void SetSqlInt32(int ordinal, SqlInt32 value);
    public virtual void SetSqlInt64(int ordinal, SqlInt64 value);
    public virtual void SetSqlMoney(int ordinal, SqlMoney value);
    public virtual void SetSqlSingle(int ordinal, SqlSingle value);
    public virtual void SetSqlString(int ordinal, SqlString value);
    public virtual void SetSqlXml(int ordinal, SqlXml value);
    public virtual void SetString(int ordinal, string value);
    public virtual void SetTimeSpan(int ordinal, TimeSpan value);
    public virtual void SetValue(int ordinal, object value);
    public virtual int SetValues(Object[] values);
    private sealed virtual override IDataReader System.Data.IDataRecord.GetData(int ordinal);
}
[AttributeUsageAttribute("64")]
public class Microsoft.Data.SqlClient.Server.SqlFunctionAttribute : Attribute {
    public DataAccessKind DataAccess { get; public set; }
    public string FillRowMethodName { get; public set; }
    public bool IsDeterministic { get; public set; }
    public bool IsPrecise { get; public set; }
    public string Name { get; public set; }
    public SystemDataAccessKind SystemDataAccess { get; public set; }
    public string TableDefinition { get; public set; }
    public DataAccessKind get_DataAccess();
    public void set_DataAccess(DataAccessKind value);
    public string get_FillRowMethodName();
    public void set_FillRowMethodName(string value);
    public bool get_IsDeterministic();
    public void set_IsDeterministic(bool value);
    public bool get_IsPrecise();
    public void set_IsPrecise(bool value);
    public string get_Name();
    public void set_Name(string value);
    public SystemDataAccessKind get_SystemDataAccess();
    public void set_SystemDataAccess(SystemDataAccessKind value);
    public string get_TableDefinition();
    public void set_TableDefinition(string value);
}
public class Microsoft.Data.SqlClient.Server.SqlMetaData : object {
    public SqlCompareOptions CompareOptions { get; }
    public DbType DbType { get; }
    public bool IsUniqueKey { get; }
    public long LocaleId { get; }
    public static long Max { get; }
    public long MaxLength { get; }
    public string Name { get; }
    public byte Precision { get; }
    public byte Scale { get; }
    public SortOrder SortOrder { get; }
    public int SortOrdinal { get; }
    public SqlDbType SqlDbType { get; }
    public Type Type { get; }
    public string TypeName { get; }
    public bool UseServerDefault { get; }
    public string XmlSchemaCollectionDatabase { get; }
    public string XmlSchemaCollectionName { get; }
    public string XmlSchemaCollectionOwningSchema { get; }
    public SqlMetaData(string name, SqlDbType dbType);
    public SqlMetaData(string name, SqlDbType dbType, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, byte precision, byte scale);
    public SqlMetaData(string name, SqlDbType dbType, byte precision, byte scale, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, byte precision, byte scale, long locale, SqlCompareOptions compareOptions, Type userDefinedType);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, long locale, SqlCompareOptions compareOptions);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, long locale, SqlCompareOptions compareOptions, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, string database, string owningSchema, string objectName);
    public SqlMetaData(string name, SqlDbType dbType, string database, string owningSchema, string objectName, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, Type userDefinedType);
    public SqlMetaData(string name, SqlDbType dbType, Type userDefinedType, string serverTypeName);
    public SqlMetaData(string name, SqlDbType dbType, Type userDefinedType, string serverTypeName, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlCompareOptions get_CompareOptions();
    public DbType get_DbType();
    public bool get_IsUniqueKey();
    public long get_LocaleId();
    public static long get_Max();
    public long get_MaxLength();
    public string get_Name();
    public byte get_Precision();
    public byte get_Scale();
    public SortOrder get_SortOrder();
    public int get_SortOrdinal();
    public SqlDbType get_SqlDbType();
    public Type get_Type();
    public string get_TypeName();
    public bool get_UseServerDefault();
    public string get_XmlSchemaCollectionDatabase();
    public string get_XmlSchemaCollectionName();
    public string get_XmlSchemaCollectionOwningSchema();
    public bool Adjust(bool value);
    public byte Adjust(byte value);
    public Byte[] Adjust(Byte[] value);
    public char Adjust(char value);
    public Char[] Adjust(Char[] value);
    public SqlBinary Adjust(SqlBinary value);
    public SqlBoolean Adjust(SqlBoolean value);
    public SqlByte Adjust(SqlByte value);
    public SqlBytes Adjust(SqlBytes value);
    public SqlChars Adjust(SqlChars value);
    public SqlDateTime Adjust(SqlDateTime value);
    public SqlDecimal Adjust(SqlDecimal value);
    public SqlDouble Adjust(SqlDouble value);
    public SqlGuid Adjust(SqlGuid value);
    public SqlInt16 Adjust(SqlInt16 value);
    public SqlInt32 Adjust(SqlInt32 value);
    public SqlInt64 Adjust(SqlInt64 value);
    public SqlMoney Adjust(SqlMoney value);
    public SqlSingle Adjust(SqlSingle value);
    public SqlString Adjust(SqlString value);
    public SqlXml Adjust(SqlXml value);
    public DateTime Adjust(DateTime value);
    public DateTimeOffset Adjust(DateTimeOffset value);
    public decimal Adjust(decimal value);
    public double Adjust(double value);
    public Guid Adjust(Guid value);
    public short Adjust(short value);
    public int Adjust(int value);
    public long Adjust(long value);
    public object Adjust(object value);
    public float Adjust(float value);
    public string Adjust(string value);
    public TimeSpan Adjust(TimeSpan value);
    public static SqlMetaData InferFromValue(object value, string name);
}
[AttributeUsageAttribute("64")]
public class Microsoft.Data.SqlClient.Server.SqlMethodAttribute : SqlFunctionAttribute {
    public bool InvokeIfReceiverIsNull { get; public set; }
    public bool IsMutator { get; public set; }
    public bool OnNullCall { get; public set; }
    public bool get_InvokeIfReceiverIsNull();
    public void set_InvokeIfReceiverIsNull(bool value);
    public bool get_IsMutator();
    public void set_IsMutator(bool value);
    public bool get_OnNullCall();
    public void set_OnNullCall(bool value);
}
[AttributeUsageAttribute("12")]
public class Microsoft.Data.SqlClient.Server.SqlUserDefinedAggregateAttribute : Attribute {
    public static int MaxByteSizeValue;
    public Format Format { get; }
    public bool IsInvariantToDuplicates { get; public set; }
    public bool IsInvariantToNulls { get; public set; }
    public bool IsInvariantToOrder { get; public set; }
    public bool IsNullIfEmpty { get; public set; }
    public int MaxByteSize { get; public set; }
    public string Name { get; public set; }
    public SqlUserDefinedAggregateAttribute(Format format);
    public Format get_Format();
    public bool get_IsInvariantToDuplicates();
    public void set_IsInvariantToDuplicates(bool value);
    public bool get_IsInvariantToNulls();
    public void set_IsInvariantToNulls(bool value);
    public bool get_IsInvariantToOrder();
    public void set_IsInvariantToOrder(bool value);
    public bool get_IsNullIfEmpty();
    public void set_IsNullIfEmpty(bool value);
    public int get_MaxByteSize();
    public void set_MaxByteSize(int value);
    public string get_Name();
    public void set_Name(string value);
}
[AttributeUsageAttribute("12")]
public class Microsoft.Data.SqlClient.Server.SqlUserDefinedTypeAttribute : Attribute {
    public Format Format { get; }
    public bool IsByteOrdered { get; public set; }
    public bool IsFixedLength { get; public set; }
    public int MaxByteSize { get; public set; }
    public string Name { get; public set; }
    public string ValidationMethodName { get; public set; }
    public SqlUserDefinedTypeAttribute(Format format);
    public Format get_Format();
    public bool get_IsByteOrdered();
    public void set_IsByteOrdered(bool value);
    public bool get_IsFixedLength();
    public void set_IsFixedLength(bool value);
    public int get_MaxByteSize();
    public void set_MaxByteSize(int value);
    public string get_Name();
    public void set_Name(string value);
    public string get_ValidationMethodName();
    public void set_ValidationMethodName(string value);
}
public enum Microsoft.Data.SqlClient.Server.SystemDataAccessKind : Enum {
    public int value__;
    public static SystemDataAccessKind None;
    public static SystemDataAccessKind Read;
}
public enum Microsoft.Data.SqlClient.SortOrder : Enum {
    public int value__;
    public static SortOrder Ascending;
    public static SortOrder Descending;
    public static SortOrder Unspecified;
}
public abstract class Microsoft.Data.SqlClient.SqlAuthenticationInitializer : object {
    public abstract virtual void Initialize();
}
public enum Microsoft.Data.SqlClient.SqlAuthenticationMethod : Enum {
    public int value__;
    public static SqlAuthenticationMethod ActiveDirectoryIntegrated;
    public static SqlAuthenticationMethod ActiveDirectoryInteractive;
    public static SqlAuthenticationMethod ActiveDirectoryPassword;
    public static SqlAuthenticationMethod NotSpecified;
    public static SqlAuthenticationMethod SqlPassword;
}
public class Microsoft.Data.SqlClient.SqlAuthenticationParameters : object {
    public SqlAuthenticationMethod AuthenticationMethod { get; }
    public string Authority { get; }
    public Guid ConnectionId { get; }
    public string DatabaseName { get; }
    public string Password { get; }
    public string Resource { get; }
    public string ServerName { get; }
    public string UserId { get; }
    protected SqlAuthenticationParameters(SqlAuthenticationMethod authenticationMethod, string serverName, string databaseName, string resource, string authority, string userId, string password, Guid connectionId);
    [CompilerGeneratedAttribute]
public SqlAuthenticationMethod get_AuthenticationMethod();
    [CompilerGeneratedAttribute]
public string get_Authority();
    [CompilerGeneratedAttribute]
public Guid get_ConnectionId();
    [CompilerGeneratedAttribute]
public string get_DatabaseName();
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
public string get_ServerName();
    [CompilerGeneratedAttribute]
public string get_UserId();
}
public abstract class Microsoft.Data.SqlClient.SqlAuthenticationProvider : object {
    public abstract virtual Task`1<SqlAuthenticationToken> AcquireTokenAsync(SqlAuthenticationParameters parameters);
    public virtual void BeforeLoad(SqlAuthenticationMethod authenticationMethod);
    public virtual void BeforeUnload(SqlAuthenticationMethod authenticationMethod);
    public static SqlAuthenticationProvider GetProvider(SqlAuthenticationMethod authenticationMethod);
    public abstract virtual bool IsSupported(SqlAuthenticationMethod authenticationMethod);
    public static bool SetProvider(SqlAuthenticationMethod authenticationMethod, SqlAuthenticationProvider provider);
}
public class Microsoft.Data.SqlClient.SqlAuthenticationToken : object {
    public string AccessToken { get; }
    public DateTimeOffset ExpiresOn { get; }
    public SqlAuthenticationToken(string accessToken, DateTimeOffset expiresOn);
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_ExpiresOn();
}
public class Microsoft.Data.SqlClient.SqlBulkCopy : object {
    public int BatchSize { get; public set; }
    public int BulkCopyTimeout { get; public set; }
    public SqlBulkCopyColumnMappingCollection ColumnMappings { get; }
    public string DestinationTableName { get; public set; }
    public bool EnableStreaming { get; public set; }
    public int NotifyAfter { get; public set; }
    public SqlBulkCopy(SqlConnection connection);
    public SqlBulkCopy(SqlConnection connection, SqlBulkCopyOptions copyOptions, SqlTransaction externalTransaction);
    public SqlBulkCopy(string connectionString);
    public SqlBulkCopy(string connectionString, SqlBulkCopyOptions copyOptions);
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public int get_BulkCopyTimeout();
    public void set_BulkCopyTimeout(int value);
    public SqlBulkCopyColumnMappingCollection get_ColumnMappings();
    public string get_DestinationTableName();
    public void set_DestinationTableName(string value);
    public bool get_EnableStreaming();
    public void set_EnableStreaming(bool value);
    public int get_NotifyAfter();
    public void set_NotifyAfter(int value);
    public void add_SqlRowsCopied(SqlRowsCopiedEventHandler value);
    public void remove_SqlRowsCopied(SqlRowsCopiedEventHandler value);
    public void Close();
    private sealed virtual override void System.IDisposable.Dispose();
    public void WriteToServer(DbDataReader reader);
    public void WriteToServer(DataRow[] rows);
    public void WriteToServer(DataTable table);
    public void WriteToServer(DataTable table, DataRowState rowState);
    public void WriteToServer(IDataReader reader);
    public Task WriteToServerAsync(DbDataReader reader);
    public Task WriteToServerAsync(DbDataReader reader, CancellationToken cancellationToken);
    public Task WriteToServerAsync(DataRow[] rows);
    public Task WriteToServerAsync(DataRow[] rows, CancellationToken cancellationToken);
    public Task WriteToServerAsync(DataTable table);
    public Task WriteToServerAsync(DataTable table, DataRowState rowState);
    public Task WriteToServerAsync(DataTable table, DataRowState rowState, CancellationToken cancellationToken);
    public Task WriteToServerAsync(DataTable table, CancellationToken cancellationToken);
    public Task WriteToServerAsync(IDataReader reader);
    public Task WriteToServerAsync(IDataReader reader, CancellationToken cancellationToken);
}
public class Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping : object {
    public string DestinationColumn { get; public set; }
    public int DestinationOrdinal { get; public set; }
    public string SourceColumn { get; public set; }
    public int SourceOrdinal { get; public set; }
    public SqlBulkCopyColumnMapping(int sourceColumnOrdinal, int destinationOrdinal);
    public SqlBulkCopyColumnMapping(int sourceColumnOrdinal, string destinationColumn);
    public SqlBulkCopyColumnMapping(string sourceColumn, int destinationOrdinal);
    public SqlBulkCopyColumnMapping(string sourceColumn, string destinationColumn);
    public string get_DestinationColumn();
    public void set_DestinationColumn(string value);
    public int get_DestinationOrdinal();
    public void set_DestinationOrdinal(int value);
    public string get_SourceColumn();
    public void set_SourceColumn(string value);
    public int get_SourceOrdinal();
    public void set_SourceOrdinal(int value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection : CollectionBase {
    public SqlBulkCopyColumnMapping Item { get; }
    public SqlBulkCopyColumnMapping get_Item(int index);
    public SqlBulkCopyColumnMapping Add(SqlBulkCopyColumnMapping bulkCopyColumnMapping);
    public SqlBulkCopyColumnMapping Add(int sourceColumnIndex, int destinationColumnIndex);
    public SqlBulkCopyColumnMapping Add(int sourceColumnIndex, string destinationColumn);
    public SqlBulkCopyColumnMapping Add(string sourceColumn, int destinationColumnIndex);
    public SqlBulkCopyColumnMapping Add(string sourceColumn, string destinationColumn);
    public void Clear();
    public bool Contains(SqlBulkCopyColumnMapping value);
    public void CopyTo(SqlBulkCopyColumnMapping[] array, int index);
    public int IndexOf(SqlBulkCopyColumnMapping value);
    public void Insert(int index, SqlBulkCopyColumnMapping value);
    public void Remove(SqlBulkCopyColumnMapping value);
    public void RemoveAt(int index);
}
[FlagsAttribute]
public enum Microsoft.Data.SqlClient.SqlBulkCopyOptions : Enum {
    public int value__;
    public static SqlBulkCopyOptions AllowEncryptedValueModifications;
    public static SqlBulkCopyOptions CheckConstraints;
    public static SqlBulkCopyOptions Default;
    public static SqlBulkCopyOptions FireTriggers;
    public static SqlBulkCopyOptions KeepIdentity;
    public static SqlBulkCopyOptions KeepNulls;
    public static SqlBulkCopyOptions TableLock;
    public static SqlBulkCopyOptions UseInternalTransaction;
}
public class Microsoft.Data.SqlClient.SqlClientFactory : DbProviderFactory {
    public static SqlClientFactory Instance;
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
}
public static class Microsoft.Data.SqlClient.SqlClientMetaDataCollectionNames : object {
    public static string Columns;
    public static string Databases;
    public static string ForeignKeys;
    public static string IndexColumns;
    public static string Indexes;
    public static string Parameters;
    public static string ProcedureColumns;
    public static string Procedures;
    public static string Tables;
    public static string UserDefinedTypes;
    public static string Users;
    public static string ViewColumns;
    public static string Views;
}
[DefaultEventAttribute("RecordsAffected")]
[DesignerAttribute("Microsoft.VSDesigner.Data.VS.SqlCommandDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemAttribute("True")]
public class Microsoft.Data.SqlClient.SqlCommand : DbCommand {
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.SQL.Design.SqlCommandTextEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[RefreshPropertiesAttribute("1")]
public string CommandText { get; public set; }
    public int CommandTimeout { get; public set; }
    [DefaultValueAttribute("1")]
[RefreshPropertiesAttribute("1")]
public CommandType CommandType { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public SqlConnection Connection { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    protected DbParameterCollection DbParameterCollection { get; }
    protected DbTransaction DbTransaction { get; protected set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("True")]
[DesignOnlyAttribute("True")]
[EditorBrowsableAttribute("1")]
public bool DesignTimeVisible { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public SqlNotificationRequest Notification { get; public set; }
    public SqlParameterCollection Parameters { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public SqlTransaction Transaction { get; public set; }
    [DefaultValueAttribute("3")]
public UpdateRowSource UpdatedRowSource { get; public set; }
    public SqlCommand(string cmdText);
    public SqlCommand(string cmdText, SqlConnection connection);
    public SqlCommand(string cmdText, SqlConnection connection, SqlTransaction transaction);
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public SqlConnection get_Connection();
    public void set_Connection(SqlConnection value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    protected virtual DbParameterCollection get_DbParameterCollection();
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    public SqlNotificationRequest get_Notification();
    public void set_Notification(SqlNotificationRequest value);
    public SqlParameterCollection get_Parameters();
    public SqlTransaction get_Transaction();
    public void set_Transaction(SqlTransaction value);
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    public void add_StatementCompleted(StatementCompletedEventHandler value);
    public void remove_StatementCompleted(StatementCompletedEventHandler value);
    public IAsyncResult BeginExecuteNonQuery();
    public IAsyncResult BeginExecuteNonQuery(AsyncCallback callback, object stateObject);
    public IAsyncResult BeginExecuteReader();
    public IAsyncResult BeginExecuteReader(AsyncCallback callback, object stateObject);
    public IAsyncResult BeginExecuteReader(AsyncCallback callback, object stateObject, CommandBehavior behavior);
    public IAsyncResult BeginExecuteReader(CommandBehavior behavior);
    public IAsyncResult BeginExecuteXmlReader();
    public IAsyncResult BeginExecuteXmlReader(AsyncCallback callback, object stateObject);
    public virtual void Cancel();
    public SqlCommand Clone();
    protected virtual DbParameter CreateDbParameter();
    public SqlParameter CreateParameter();
    protected virtual void Dispose(bool disposing);
    public int EndExecuteNonQuery(IAsyncResult asyncResult);
    public SqlDataReader EndExecuteReader(IAsyncResult asyncResult);
    public XmlReader EndExecuteXmlReader(IAsyncResult asyncResult);
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public virtual int ExecuteNonQuery();
    public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    public SqlDataReader ExecuteReader();
    public SqlDataReader ExecuteReader(CommandBehavior behavior);
    public Task`1<SqlDataReader> ExecuteReaderAsync();
    public Task`1<SqlDataReader> ExecuteReaderAsync(CommandBehavior behavior);
    public Task`1<SqlDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public Task`1<SqlDataReader> ExecuteReaderAsync(CancellationToken cancellationToken);
    public virtual object ExecuteScalar();
    public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    public XmlReader ExecuteXmlReader();
    public Task`1<XmlReader> ExecuteXmlReaderAsync();
    public Task`1<XmlReader> ExecuteXmlReaderAsync(CancellationToken cancellationToken);
    public virtual void Prepare();
    [DesignerSerializationVisibilityAttribute("2")]
public void ResetCommandTimeout();
    private sealed virtual override object System.ICloneable.Clone();
}
public class Microsoft.Data.SqlClient.SqlCommandBuilder : DbCommandBuilder {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public CatalogLocation CatalogLocation { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public string CatalogSeparator { get; public set; }
    [DefaultValueAttribute("")]
public SqlDataAdapter DataAdapter { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public string QuotePrefix { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public string QuoteSuffix { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public string SchemaSeparator { get; public set; }
    public SqlCommandBuilder(SqlDataAdapter adapter);
    public virtual CatalogLocation get_CatalogLocation();
    public virtual void set_CatalogLocation(CatalogLocation value);
    public virtual string get_CatalogSeparator();
    public virtual void set_CatalogSeparator(string value);
    public SqlDataAdapter get_DataAdapter();
    public void set_DataAdapter(SqlDataAdapter value);
    public virtual string get_QuotePrefix();
    public virtual void set_QuotePrefix(string value);
    public virtual string get_QuoteSuffix();
    public virtual void set_QuoteSuffix(string value);
    public virtual string get_SchemaSeparator();
    public virtual void set_SchemaSeparator(string value);
    protected virtual void ApplyParameterInfo(DbParameter parameter, DataRow datarow, StatementType statementType, bool whereClause);
    public static void DeriveParameters(SqlCommand command);
    public SqlCommand GetDeleteCommand();
    public SqlCommand GetDeleteCommand(bool useColumnsForParameterNames);
    public SqlCommand GetInsertCommand();
    public SqlCommand GetInsertCommand(bool useColumnsForParameterNames);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterName(string parameterName);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    protected virtual DataTable GetSchemaTable(DbCommand srcCommand);
    public SqlCommand GetUpdateCommand();
    public SqlCommand GetUpdateCommand(bool useColumnsForParameterNames);
    protected virtual DbCommand InitializeCommand(DbCommand command);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
}
[DefaultEventAttribute("InfoMessage")]
public class Microsoft.Data.SqlClient.SqlConnection : DbConnection {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string AccessToken { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public Guid ClientConnectionId { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.SQL.Design.SqlConnectionStringEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[RefreshPropertiesAttribute("1")]
[SettingsBindableAttribute("True")]
public string ConnectionString { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public int ConnectionTimeout { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public SqlCredential Credential { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public string Database { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
public string DataSource { get; }
    public bool FireInfoMessageEventOnUserErrors { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public int PacketSize { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string ServerVersion { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ConnectionState State { get; }
    [DefaultValueAttribute("False")]
public bool StatisticsEnabled { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public string WorkstationId { get; }
    public SqlConnection(string connectionString);
    public SqlConnection(string connectionString, SqlCredential credential);
    public string get_AccessToken();
    public void set_AccessToken(string value);
    public Guid get_ClientConnectionId();
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public virtual int get_ConnectionTimeout();
    public SqlCredential get_Credential();
    public void set_Credential(SqlCredential value);
    public virtual string get_Database();
    public virtual string get_DataSource();
    public bool get_FireInfoMessageEventOnUserErrors();
    public void set_FireInfoMessageEventOnUserErrors(bool value);
    public int get_PacketSize();
    public virtual string get_ServerVersion();
    public virtual ConnectionState get_State();
    public bool get_StatisticsEnabled();
    public void set_StatisticsEnabled(bool value);
    public string get_WorkstationId();
    public void add_InfoMessage(SqlInfoMessageEventHandler value);
    public void remove_InfoMessage(SqlInfoMessageEventHandler value);
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public SqlTransaction BeginTransaction();
    public SqlTransaction BeginTransaction(IsolationLevel iso);
    public SqlTransaction BeginTransaction(IsolationLevel iso, string transactionName);
    public SqlTransaction BeginTransaction(string transactionName);
    public virtual void ChangeDatabase(string database);
    public static void ChangePassword(string connectionString, SqlCredential credential, SecureString newSecurePassword);
    public static void ChangePassword(string connectionString, string newPassword);
    public static void ClearAllPools();
    public static void ClearPool(SqlConnection connection);
    public virtual void Close();
    public SqlCommand CreateCommand();
    protected virtual DbCommand CreateDbCommand();
    protected virtual void Dispose(bool disposing);
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    public virtual void Open();
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    public void ResetStatistics();
    public IDictionary RetrieveStatistics();
    private sealed virtual override object System.ICloneable.Clone();
}
[DefaultMemberAttribute("Item")]
[DefaultPropertyAttribute("DataSource")]
public class Microsoft.Data.SqlClient.SqlConnectionStringBuilder : DbConnectionStringBuilder {
    [DisplayNameAttribute("ApplicationIntent")]
[RefreshPropertiesAttribute("1")]
public ApplicationIntent ApplicationIntent { get; public set; }
    [DisplayNameAttribute("Application Name")]
[RefreshPropertiesAttribute("1")]
public string ApplicationName { get; public set; }
    [DisplayNameAttribute("AttachDbFilename")]
[EditorAttribute("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[RefreshPropertiesAttribute("1")]
public string AttachDBFilename { get; public set; }
    [DisplayNameAttribute("Authentication")]
[RefreshPropertiesAttribute("1")]
public SqlAuthenticationMethod Authentication { get; public set; }
    [DisplayNameAttribute("ConnectRetryCount")]
[RefreshPropertiesAttribute("1")]
public int ConnectRetryCount { get; public set; }
    [DisplayNameAttribute("ConnectRetryInterval")]
[RefreshPropertiesAttribute("1")]
public int ConnectRetryInterval { get; public set; }
    [DisplayNameAttribute("Connect Timeout")]
[RefreshPropertiesAttribute("1")]
public int ConnectTimeout { get; public set; }
    [DisplayNameAttribute("Current Language")]
[RefreshPropertiesAttribute("1")]
public string CurrentLanguage { get; public set; }
    [DisplayNameAttribute("Data Source")]
[RefreshPropertiesAttribute("1")]
public string DataSource { get; public set; }
    [DisplayNameAttribute("Encrypt")]
[RefreshPropertiesAttribute("1")]
public bool Encrypt { get; public set; }
    [DisplayNameAttribute("Enlist")]
[RefreshPropertiesAttribute("1")]
public bool Enlist { get; public set; }
    [DisplayNameAttribute("Failover Partner")]
[RefreshPropertiesAttribute("1")]
public string FailoverPartner { get; public set; }
    [DisplayNameAttribute("Initial Catalog")]
[RefreshPropertiesAttribute("1")]
public string InitialCatalog { get; public set; }
    [DisplayNameAttribute("Integrated Security")]
[RefreshPropertiesAttribute("1")]
public bool IntegratedSecurity { get; public set; }
    public bool IsFixedSize { get; }
    public object Item { get; public set; }
    public ICollection Keys { get; }
    [DisplayNameAttribute("Load Balance Timeout")]
[RefreshPropertiesAttribute("1")]
public int LoadBalanceTimeout { get; public set; }
    [DisplayNameAttribute("Max Pool Size")]
[RefreshPropertiesAttribute("1")]
public int MaxPoolSize { get; public set; }
    [DisplayNameAttribute("Min Pool Size")]
[RefreshPropertiesAttribute("1")]
public int MinPoolSize { get; public set; }
    [DisplayNameAttribute("MultipleActiveResultSets")]
[RefreshPropertiesAttribute("1")]
public bool MultipleActiveResultSets { get; public set; }
    [DisplayNameAttribute("MultiSubnetFailover")]
[RefreshPropertiesAttribute("1")]
public bool MultiSubnetFailover { get; public set; }
    [DisplayNameAttribute("Packet Size")]
[RefreshPropertiesAttribute("1")]
public int PacketSize { get; public set; }
    [DisplayNameAttribute("Password")]
[PasswordPropertyTextAttribute("True")]
[RefreshPropertiesAttribute("1")]
public string Password { get; public set; }
    [DisplayNameAttribute("Persist Security Info")]
[RefreshPropertiesAttribute("1")]
public bool PersistSecurityInfo { get; public set; }
    [DisplayNameAttribute("Pooling")]
[RefreshPropertiesAttribute("1")]
public bool Pooling { get; public set; }
    [DisplayNameAttribute("Replication")]
[RefreshPropertiesAttribute("1")]
public bool Replication { get; public set; }
    [DisplayNameAttribute("Transaction Binding")]
[RefreshPropertiesAttribute("1")]
public string TransactionBinding { get; public set; }
    [DisplayNameAttribute("TrustServerCertificate")]
[RefreshPropertiesAttribute("1")]
public bool TrustServerCertificate { get; public set; }
    [DisplayNameAttribute("Type System Version")]
[RefreshPropertiesAttribute("1")]
public string TypeSystemVersion { get; public set; }
    [DisplayNameAttribute("User ID")]
[RefreshPropertiesAttribute("1")]
public string UserID { get; public set; }
    [DisplayNameAttribute("User Instance")]
[RefreshPropertiesAttribute("1")]
public bool UserInstance { get; public set; }
    public ICollection Values { get; }
    [DisplayNameAttribute("Workstation ID")]
[RefreshPropertiesAttribute("1")]
public string WorkstationID { get; public set; }
    public SqlConnectionStringBuilder(string connectionString);
    public ApplicationIntent get_ApplicationIntent();
    public void set_ApplicationIntent(ApplicationIntent value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_AttachDBFilename();
    public void set_AttachDBFilename(string value);
    public SqlAuthenticationMethod get_Authentication();
    public void set_Authentication(SqlAuthenticationMethod value);
    public int get_ConnectRetryCount();
    public void set_ConnectRetryCount(int value);
    public int get_ConnectRetryInterval();
    public void set_ConnectRetryInterval(int value);
    public int get_ConnectTimeout();
    public void set_ConnectTimeout(int value);
    public string get_CurrentLanguage();
    public void set_CurrentLanguage(string value);
    public string get_DataSource();
    public void set_DataSource(string value);
    public bool get_Encrypt();
    public void set_Encrypt(bool value);
    public bool get_Enlist();
    public void set_Enlist(bool value);
    public string get_FailoverPartner();
    public void set_FailoverPartner(string value);
    public string get_InitialCatalog();
    public void set_InitialCatalog(string value);
    public bool get_IntegratedSecurity();
    public void set_IntegratedSecurity(bool value);
    public virtual bool get_IsFixedSize();
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public virtual ICollection get_Keys();
    public int get_LoadBalanceTimeout();
    public void set_LoadBalanceTimeout(int value);
    public int get_MaxPoolSize();
    public void set_MaxPoolSize(int value);
    public int get_MinPoolSize();
    public void set_MinPoolSize(int value);
    public bool get_MultipleActiveResultSets();
    public void set_MultipleActiveResultSets(bool value);
    public bool get_MultiSubnetFailover();
    public void set_MultiSubnetFailover(bool value);
    public int get_PacketSize();
    public void set_PacketSize(int value);
    public string get_Password();
    public void set_Password(string value);
    public bool get_PersistSecurityInfo();
    public void set_PersistSecurityInfo(bool value);
    public bool get_Pooling();
    public void set_Pooling(bool value);
    public bool get_Replication();
    public void set_Replication(bool value);
    public string get_TransactionBinding();
    public void set_TransactionBinding(string value);
    public bool get_TrustServerCertificate();
    public void set_TrustServerCertificate(bool value);
    public string get_TypeSystemVersion();
    public void set_TypeSystemVersion(string value);
    public string get_UserID();
    public void set_UserID(string value);
    public bool get_UserInstance();
    public void set_UserInstance(bool value);
    public virtual ICollection get_Values();
    public string get_WorkstationID();
    public void set_WorkstationID(string value);
    public virtual void Clear();
    public virtual bool ContainsKey(string keyword);
    public virtual bool Remove(string keyword);
    public virtual bool ShouldSerialize(string keyword);
    public virtual bool TryGetValue(string keyword, Object& value);
}
public class Microsoft.Data.SqlClient.SqlCredential : object {
    public SecureString Password { get; }
    public string UserId { get; }
    public SqlCredential(string userId, SecureString password);
    public SecureString get_Password();
    public string get_UserId();
}
[DefaultEventAttribute("RowUpdated")]
[DesignerAttribute("Microsoft.VSDesigner.Data.VS.SqlDataAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemAttribute("Microsoft.VSDesigner.Data.VS.SqlDataAdapterToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class Microsoft.Data.SqlClient.SqlDataAdapter : DbDataAdapter {
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public SqlCommand DeleteCommand { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public SqlCommand InsertCommand { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public SqlCommand SelectCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; private set; }
    private IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; private set; }
    private IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; private set; }
    private IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; private set; }
    public int UpdateBatchSize { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public SqlCommand UpdateCommand { get; public set; }
    public SqlDataAdapter(SqlCommand selectCommand);
    public SqlDataAdapter(string selectCommandText, SqlConnection selectConnection);
    public SqlDataAdapter(string selectCommandText, string selectConnectionString);
    public SqlCommand get_DeleteCommand();
    public void set_DeleteCommand(SqlCommand value);
    public SqlCommand get_InsertCommand();
    public void set_InsertCommand(SqlCommand value);
    public SqlCommand get_SelectCommand();
    public void set_SelectCommand(SqlCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_InsertCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_SelectCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value);
    public virtual int get_UpdateBatchSize();
    public virtual void set_UpdateBatchSize(int value);
    public SqlCommand get_UpdateCommand();
    public void set_UpdateCommand(SqlCommand value);
    public void add_RowUpdated(SqlRowUpdatedEventHandler value);
    public void remove_RowUpdated(SqlRowUpdatedEventHandler value);
    public void add_RowUpdating(SqlRowUpdatingEventHandler value);
    public void remove_RowUpdating(SqlRowUpdatingEventHandler value);
    protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
    private sealed virtual override object System.ICloneable.Clone();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Data.SqlClient.SqlDataReader : DbDataReader {
    protected SqlConnection Connection { get; }
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public object Item { get; }
    public object Item { get; }
    public int RecordsAffected { get; }
    public SensitivityClassification SensitivityClassification { get; }
    public int VisibleFieldCount { get; }
    protected SqlConnection get_Connection();
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public virtual object get_Item(int i);
    public virtual object get_Item(string name);
    public virtual int get_RecordsAffected();
    [CompilerGeneratedAttribute]
public SensitivityClassification get_SensitivityClassification();
    public virtual int get_VisibleFieldCount();
    public virtual void Close();
    public virtual bool GetBoolean(int i);
    public virtual byte GetByte(int i);
    public virtual long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    [EditorBrowsableAttribute("1")]
public virtual char GetChar(int i);
    public virtual long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public virtual string GetDataTypeName(int i);
    public virtual DateTime GetDateTime(int i);
    public virtual DateTimeOffset GetDateTimeOffset(int i);
    public virtual decimal GetDecimal(int i);
    public virtual double GetDouble(int i);
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetFieldType(int i);
    public virtual Task`1<T> GetFieldValueAsync(int i, CancellationToken cancellationToken);
    public virtual T GetFieldValue(int i);
    public virtual float GetFloat(int i);
    public virtual Guid GetGuid(int i);
    public virtual short GetInt16(int i);
    public virtual int GetInt32(int i);
    public virtual long GetInt64(int i);
    public virtual string GetName(int i);
    public virtual int GetOrdinal(string name);
    public virtual Type GetProviderSpecificFieldType(int i);
    public virtual object GetProviderSpecificValue(int i);
    public virtual int GetProviderSpecificValues(Object[] values);
    public virtual DataTable GetSchemaTable();
    public virtual SqlBinary GetSqlBinary(int i);
    public virtual SqlBoolean GetSqlBoolean(int i);
    public virtual SqlByte GetSqlByte(int i);
    public virtual SqlBytes GetSqlBytes(int i);
    public virtual SqlChars GetSqlChars(int i);
    public virtual SqlDateTime GetSqlDateTime(int i);
    public virtual SqlDecimal GetSqlDecimal(int i);
    public virtual SqlDouble GetSqlDouble(int i);
    public virtual SqlGuid GetSqlGuid(int i);
    public virtual SqlInt16 GetSqlInt16(int i);
    public virtual SqlInt32 GetSqlInt32(int i);
    public virtual SqlInt64 GetSqlInt64(int i);
    public virtual SqlMoney GetSqlMoney(int i);
    public virtual SqlSingle GetSqlSingle(int i);
    public virtual SqlString GetSqlString(int i);
    public virtual object GetSqlValue(int i);
    public virtual int GetSqlValues(Object[] values);
    public virtual SqlXml GetSqlXml(int i);
    public virtual Stream GetStream(int i);
    public virtual string GetString(int i);
    public virtual TextReader GetTextReader(int i);
    public virtual TimeSpan GetTimeSpan(int i);
    public virtual object GetValue(int i);
    public virtual int GetValues(Object[] values);
    public virtual XmlReader GetXmlReader(int i);
    protected internal bool IsCommandBehavior(CommandBehavior condition);
    public virtual bool IsDBNull(int i);
    public virtual Task`1<bool> IsDBNullAsync(int i, CancellationToken cancellationToken);
    public virtual bool NextResult();
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    public virtual bool Read();
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
private sealed virtual override IDataReader System.Data.IDataRecord.GetData(int i);
}
public class Microsoft.Data.SqlClient.SqlDependency : object {
    public bool HasChanges { get; }
    public string Id { get; }
    public SqlDependency(SqlCommand command);
    public SqlDependency(SqlCommand command, string options, int timeout);
    public bool get_HasChanges();
    public string get_Id();
    public void add_OnChange(OnChangeEventHandler value);
    public void remove_OnChange(OnChangeEventHandler value);
    public void AddCommandDependency(SqlCommand command);
    public static bool Start(string connectionString);
    public static bool Start(string connectionString, string queue);
    public static bool Stop(string connectionString);
    public static bool Stop(string connectionString, string queue);
}
public class Microsoft.Data.SqlClient.SqlError : object {
    public byte Class { get; }
    public int LineNumber { get; }
    public string Message { get; }
    public int Number { get; }
    public string Procedure { get; }
    public string Server { get; }
    public string Source { get; }
    public byte State { get; }
    public byte get_Class();
    public int get_LineNumber();
    public string get_Message();
    public int get_Number();
    public string get_Procedure();
    public string get_Server();
    public string get_Source();
    public byte get_State();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class Microsoft.Data.SqlClient.SqlErrorCollection : object {
    public int Count { get; }
    public SqlError Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public sealed virtual int get_Count();
    public SqlError get_Item(int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public void CopyTo(SqlError[] array, int index);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
public class Microsoft.Data.SqlClient.SqlException : DbException {
    public byte Class { get; }
    public Guid ClientConnectionId { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public SqlErrorCollection Errors { get; }
    public int LineNumber { get; }
    public int Number { get; }
    public string Procedure { get; }
    public string Server { get; }
    public string Source { get; }
    public byte State { get; }
    public byte get_Class();
    public Guid get_ClientConnectionId();
    public SqlErrorCollection get_Errors();
    public int get_LineNumber();
    public int get_Number();
    public string get_Procedure();
    public string get_Server();
    public virtual string get_Source();
    public byte get_State();
    public virtual void GetObjectData(SerializationInfo si, StreamingContext context);
    public virtual string ToString();
}
public class Microsoft.Data.SqlClient.SqlInfoMessageEventArgs : EventArgs {
    public SqlErrorCollection Errors { get; }
    public string Message { get; }
    public string Source { get; }
    public SqlErrorCollection get_Errors();
    public string get_Message();
    public string get_Source();
    public virtual string ToString();
}
public class Microsoft.Data.SqlClient.SqlInfoMessageEventHandler : MulticastDelegate {
    public SqlInfoMessageEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlInfoMessageEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlInfoMessageEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Data.SqlClient.SqlNotificationEventArgs : EventArgs {
    public SqlNotificationInfo Info { get; }
    public SqlNotificationSource Source { get; }
    public SqlNotificationType Type { get; }
    public SqlNotificationEventArgs(SqlNotificationType type, SqlNotificationInfo info, SqlNotificationSource source);
    public SqlNotificationInfo get_Info();
    public SqlNotificationSource get_Source();
    public SqlNotificationType get_Type();
}
public enum Microsoft.Data.SqlClient.SqlNotificationInfo : Enum {
    public int value__;
    public static SqlNotificationInfo AlreadyChanged;
    public static SqlNotificationInfo Alter;
    public static SqlNotificationInfo Delete;
    public static SqlNotificationInfo Drop;
    public static SqlNotificationInfo Error;
    public static SqlNotificationInfo Expired;
    public static SqlNotificationInfo Insert;
    public static SqlNotificationInfo Invalid;
    public static SqlNotificationInfo Isolation;
    public static SqlNotificationInfo Merge;
    public static SqlNotificationInfo Options;
    public static SqlNotificationInfo PreviousFire;
    public static SqlNotificationInfo Query;
    public static SqlNotificationInfo Resource;
    public static SqlNotificationInfo Restart;
    public static SqlNotificationInfo TemplateLimit;
    public static SqlNotificationInfo Truncate;
    public static SqlNotificationInfo Unknown;
    public static SqlNotificationInfo Update;
}
public enum Microsoft.Data.SqlClient.SqlNotificationSource : Enum {
    public int value__;
    public static SqlNotificationSource Client;
    public static SqlNotificationSource Data;
    public static SqlNotificationSource Database;
    public static SqlNotificationSource Environment;
    public static SqlNotificationSource Execution;
    public static SqlNotificationSource Object;
    public static SqlNotificationSource Owner;
    public static SqlNotificationSource Statement;
    public static SqlNotificationSource System;
    public static SqlNotificationSource Timeout;
    public static SqlNotificationSource Unknown;
}
public enum Microsoft.Data.SqlClient.SqlNotificationType : Enum {
    public int value__;
    public static SqlNotificationType Change;
    public static SqlNotificationType Subscribe;
    public static SqlNotificationType Unknown;
}
public class Microsoft.Data.SqlClient.SqlParameter : DbParameter {
    [BrowsableAttribute("False")]
public SqlCompareOptions CompareInfo { get; public set; }
    public DbType DbType { get; public set; }
    [RefreshPropertiesAttribute("1")]
public ParameterDirection Direction { get; public set; }
    [DefaultValueAttribute("False")]
public bool IsNullable { get; public set; }
    [BrowsableAttribute("False")]
public int LocaleId { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public int Offset { get; public set; }
    public string ParameterName { get; public set; }
    [DefaultValueAttribute("0")]
public byte Precision { get; public set; }
    [DefaultValueAttribute("0")]
public byte Scale { get; public set; }
    public int Size { get; public set; }
    public string SourceColumn { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    public DataRowVersion SourceVersion { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DbProviderSpecificTypePropertyAttribute("True")]
public SqlDbType SqlDbType { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public object SqlValue { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public string TypeName { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public string UdtTypeName { get; public set; }
    [RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Value { get; public set; }
    public string XmlSchemaCollectionDatabase { get; public set; }
    public string XmlSchemaCollectionName { get; public set; }
    public string XmlSchemaCollectionOwningSchema { get; public set; }
    public SqlParameter(string parameterName, SqlDbType dbType);
    public SqlParameter(string parameterName, SqlDbType dbType, int size);
    [EditorBrowsableAttribute("2")]
public SqlParameter(string parameterName, SqlDbType dbType, int size, ParameterDirection direction, bool isNullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value);
    public SqlParameter(string parameterName, SqlDbType dbType, int size, ParameterDirection direction, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, bool sourceColumnNullMapping, object value, string xmlSchemaCollectionDatabase, string xmlSchemaCollectionOwningSchema, string xmlSchemaCollectionName);
    public SqlParameter(string parameterName, SqlDbType dbType, int size, string sourceColumn);
    public SqlParameter(string parameterName, object value);
    public SqlCompareOptions get_CompareInfo();
    public void set_CompareInfo(SqlCompareOptions value);
    public virtual DbType get_DbType();
    public virtual void set_DbType(DbType value);
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    public virtual bool get_IsNullable();
    public virtual void set_IsNullable(bool value);
    public int get_LocaleId();
    public void set_LocaleId(int value);
    public int get_Offset();
    public void set_Offset(int value);
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    public sealed virtual byte get_Precision();
    public sealed virtual void set_Precision(byte value);
    public sealed virtual byte get_Scale();
    public sealed virtual void set_Scale(byte value);
    public virtual int get_Size();
    public virtual void set_Size(int value);
    public virtual string get_SourceColumn();
    public virtual void set_SourceColumn(string value);
    public virtual bool get_SourceColumnNullMapping();
    public virtual void set_SourceColumnNullMapping(bool value);
    public virtual DataRowVersion get_SourceVersion();
    public virtual void set_SourceVersion(DataRowVersion value);
    public SqlDbType get_SqlDbType();
    public void set_SqlDbType(SqlDbType value);
    public object get_SqlValue();
    public void set_SqlValue(object value);
    public string get_TypeName();
    public void set_TypeName(string value);
    public string get_UdtTypeName();
    public void set_UdtTypeName(string value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public string get_XmlSchemaCollectionDatabase();
    public void set_XmlSchemaCollectionDatabase(string value);
    public string get_XmlSchemaCollectionName();
    public void set_XmlSchemaCollectionName(string value);
    public string get_XmlSchemaCollectionOwningSchema();
    public void set_XmlSchemaCollectionOwningSchema(string value);
    public virtual void ResetDbType();
    public void ResetSqlDbType();
    private sealed virtual override object System.ICloneable.Clone();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBParametersEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ListBindableAttribute("False")]
public class Microsoft.Data.SqlClient.SqlParameterCollection : DbParameterCollection {
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public SqlParameter Item { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public SqlParameter Item { get; public set; }
    public object SyncRoot { get; }
    public virtual int get_Count();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public SqlParameter get_Item(int index);
    public void set_Item(int index, SqlParameter value);
    public SqlParameter get_Item(string parameterName);
    public void set_Item(string parameterName, SqlParameter value);
    public virtual object get_SyncRoot();
    public SqlParameter Add(SqlParameter value);
    [EditorBrowsableAttribute("1")]
public virtual int Add(object value);
    public SqlParameter Add(string parameterName, SqlDbType sqlDbType);
    public SqlParameter Add(string parameterName, SqlDbType sqlDbType, int size);
    public SqlParameter Add(string parameterName, SqlDbType sqlDbType, int size, string sourceColumn);
    public void AddRange(SqlParameter[] values);
    public virtual void AddRange(Array values);
    public SqlParameter AddWithValue(string parameterName, object value);
    public virtual void Clear();
    public bool Contains(SqlParameter value);
    public virtual bool Contains(object value);
    public virtual bool Contains(string value);
    public void CopyTo(SqlParameter[] array, int index);
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    protected virtual DbParameter GetParameter(int index);
    protected virtual DbParameter GetParameter(string parameterName);
    public int IndexOf(SqlParameter value);
    public virtual int IndexOf(object value);
    public virtual int IndexOf(string parameterName);
    public void Insert(int index, SqlParameter value);
    public virtual void Insert(int index, object value);
    public void Remove(SqlParameter value);
    public virtual void Remove(object value);
    public virtual void RemoveAt(int index);
    public virtual void RemoveAt(string parameterName);
    protected virtual void SetParameter(int index, DbParameter value);
    protected virtual void SetParameter(string parameterName, DbParameter value);
}
public class Microsoft.Data.SqlClient.SqlRowsCopiedEventArgs : EventArgs {
    public bool Abort { get; public set; }
    public long RowsCopied { get; }
    public SqlRowsCopiedEventArgs(long rowsCopied);
    public bool get_Abort();
    public void set_Abort(bool value);
    public long get_RowsCopied();
}
public class Microsoft.Data.SqlClient.SqlRowsCopiedEventHandler : MulticastDelegate {
    public SqlRowsCopiedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlRowsCopiedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlRowsCopiedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Data.SqlClient.SqlRowUpdatedEventArgs : RowUpdatedEventArgs {
    public SqlCommand Command { get; }
    public SqlRowUpdatedEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public SqlCommand get_Command();
}
public class Microsoft.Data.SqlClient.SqlRowUpdatedEventHandler : MulticastDelegate {
    public SqlRowUpdatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlRowUpdatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlRowUpdatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Data.SqlClient.SqlRowUpdatingEventArgs : RowUpdatingEventArgs {
    protected IDbCommand BaseCommand { get; protected set; }
    public SqlCommand Command { get; public set; }
    public SqlRowUpdatingEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual IDbCommand get_BaseCommand();
    protected virtual void set_BaseCommand(IDbCommand value);
    public SqlCommand get_Command();
    public void set_Command(SqlCommand value);
}
public class Microsoft.Data.SqlClient.SqlRowUpdatingEventHandler : MulticastDelegate {
    public SqlRowUpdatingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlRowUpdatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlRowUpdatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Data.SqlClient.SqlTransaction : DbTransaction {
    public SqlConnection Connection { get; }
    protected DbConnection DbConnection { get; }
    public IsolationLevel IsolationLevel { get; }
    public SqlConnection get_Connection();
    protected virtual DbConnection get_DbConnection();
    public virtual IsolationLevel get_IsolationLevel();
    public virtual void Commit();
    protected virtual void Dispose(bool disposing);
    public virtual void Rollback();
    public void Rollback(string transactionName);
    public void Save(string savePointName);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.SR : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ADP_BadParameterName { get; }
    internal static string ADP_CalledTwice { get; }
    internal static string ADP_ClosedConnectionError { get; }
    internal static string ADP_CollectionIndexInt32 { get; }
    internal static string ADP_CollectionIndexString { get; }
    internal static string ADP_CollectionInvalidType { get; }
    internal static string ADP_CollectionIsNotParent { get; }
    internal static string ADP_CollectionNullValue { get; }
    internal static string ADP_CollectionRemoveInvalidObject { get; }
    internal static string ADP_CommandTextRequired { get; }
    internal static string ADP_ConnectionAlreadyOpen { get; }
    internal static string ADP_ConnectionIsDisabled { get; }
    internal static string ADP_ConnectionRequired { get; }
    internal static string ADP_ConnectionStateMsg { get; }
    internal static string ADP_ConnectionStateMsg_Closed { get; }
    internal static string ADP_ConnectionStateMsg_Connecting { get; }
    internal static string ADP_ConnectionStateMsg_Open { get; }
    internal static string ADP_ConnectionStateMsg_OpenExecuting { get; }
    internal static string ADP_ConnectionStateMsg_OpenFetching { get; }
    internal static string ADP_ConnectionStringSyntax { get; }
    internal static string ADP_DataReaderClosed { get; }
    internal static string ADP_DbTypeNotSupported { get; }
    internal static string ADP_DeriveParametersNotSupported { get; }
    internal static string ADP_DoubleValuedProperty { get; }
    internal static string ADP_EmptyDatabaseName { get; }
    internal static string ADP_InternalConnectionError { get; }
    internal static string ADP_InternalProviderError { get; }
    internal static string ADP_InvalidArgumentLength { get; }
    internal static string ADP_InvalidCommandTimeout { get; }
    internal static string ADP_InvalidConnectionOptionValue { get; }
    internal static string ADP_InvalidConnectionOptionValueLength { get; }
    internal static string ADP_InvalidDataDirectory { get; }
    internal static string ADP_InvalidDataLength2 { get; }
    internal static string ADP_InvalidDataType { get; }
    internal static string ADP_InvalidDestinationBufferIndex { get; }
    internal static string ADP_InvalidEnumerationValue { get; }
    internal static string ADP_InvalidMetaDataValue { get; }
    internal static string ADP_InvalidMinMaxPoolSizeValues { get; }
    internal static string ADP_InvalidMixedUsageOfAccessTokenAndAuthentication { get; }
    internal static string ADP_InvalidMixedUsageOfAccessTokenAndIntegratedSecurity { get; }
    internal static string ADP_InvalidMixedUsageOfAccessTokenAndUserIDPassword { get; }
    internal static string ADP_InvalidMixedUsageOfCredentialAndAccessToken { get; }
    internal static string ADP_InvalidMixedUsageOfSecureAndClearCredential { get; }
    internal static string ADP_InvalidMixedUsageOfSecureCredentialAndIntegratedSecurity { get; }
    internal static string ADP_InvalidMultipartName { get; }
    internal static string ADP_InvalidMultipartNameQuoteUsage { get; }
    internal static string ADP_InvalidMultipartNameToManyParts { get; }
    internal static string ADP_InvalidOffsetValue { get; }
    internal static string ADP_InvalidPrefixSuffix { get; }
    internal static string ADP_InvalidSeekOrigin { get; }
    internal static string ADP_InvalidSizeValue { get; }
    internal static string ADP_InvalidSourceBufferIndex { get; }
    internal static string ADP_KeywordNotSupported { get; }
    internal static string ADP_LocalTransactionPresent { get; }
    internal static string ADP_MismatchedAsyncResult { get; }
    internal static string ADP_MissingConnectionOptionValue { get; }
    internal static string ADP_MustBeReadOnly { get; }
    internal static string ADP_NegativeParameter { get; }
    internal static string ADP_NoConnectionString { get; }
    internal static string ADP_NonPooledOpenTimeout { get; }
    internal static string ADP_NonSeqByteAccess { get; }
    internal static string ADP_NonSequentialColumnAccess { get; }
    internal static string ADP_NoStoredProcedureExists { get; }
    internal static string ADP_NotSupportedEnumerationValue { get; }
    internal static string ADP_OpenConnectionPropertySet { get; }
    internal static string ADP_OpenConnectionRequired { get; }
    internal static string ADP_OpenReaderExists { get; }
    internal static string ADP_OperationAborted { get; }
    internal static string ADP_OperationAbortedExceptionMessage { get; }
    internal static string ADP_ParallelTransactionsNotSupported { get; }
    internal static string ADP_ParameterConversionFailed { get; }
    internal static string ADP_ParameterValueOutOfRange { get; }
    internal static string ADP_PendingAsyncOperation { get; }
    internal static string ADP_PooledOpenTimeout { get; }
    internal static string ADP_PrepareParameterScale { get; }
    internal static string ADP_PrepareParameterSize { get; }
    internal static string ADP_PrepareParameterType { get; }
    internal static string ADP_SingleValuedProperty { get; }
    internal static string ADP_StreamClosed { get; }
    internal static string ADP_TransactionCompletedButNotDisposed { get; }
    internal static string ADP_TransactionConnectionMismatch { get; }
    internal static string ADP_TransactionPresent { get; }
    internal static string ADP_TransactionRequired { get; }
    internal static string ADP_TransactionZombied { get; }
    internal static string ADP_UninitializedParameterSize { get; }
    internal static string ADP_UnknownDataType { get; }
    internal static string ADP_UnknownDataTypeCode { get; }
    internal static string ADP_VersionDoesNotSupportDataType { get; }
    internal static string Arg_ArrayPlusOffTooSmall { get; }
    internal static string Arg_RankMultiDimNotSupported { get; }
    internal static string Arg_RemoveArgNotFound { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string AttestationTokenSignatureValidationFailed { get; }
    internal static string AZURESQL_ChinaEndpoint { get; }
    internal static string AZURESQL_GenericEndpoint { get; }
    internal static string AZURESQL_GermanEndpoint { get; }
    internal static string AZURESQL_UsGovEndpoint { get; }
    internal static string Data_InvalidOffsetLength { get; }
    internal static string EnclaveRetrySleepInSecondsValueException { get; }
    internal static string EnclaveSessionInvalidationFailed { get; }
    internal static string event_OperationReturnedSomething { get; }
    internal static string ExpiredAttestationToken { get; }
    internal static string FailToCreateEnclaveSession { get; }
    internal static string FailToParseAttestationInfo { get; }
    internal static string FailToParseAttestationToken { get; }
    internal static string GetAttestationSigningCertificateFailedInvalidCertificate { get; }
    internal static string GetAttestationSigningCertificateRequestFailedFormat { get; }
    internal static string GetAttestationTokenSigningKeysFailed { get; }
    internal static string GetSharedSecretFailed { get; }
    internal static string GT_Disabled { get; }
    internal static string IEnumerableOfSqlDataRecordHasNoRows { get; }
    internal static string InvalidArgumentToBase64UrlDecoder { get; }
    internal static string InvalidArgumentToSHA256 { get; }
    internal static string InvalidAttestationToken { get; }
    internal static string InvalidClaimInAttestationToken { get; }
    internal static string InvalidSchemaTableOrdinals { get; }
    internal static string LocalDB_FailedGetDLLHandle { get; }
    internal static string LocalDB_MethodNotFound { get; }
    internal static string LocalDB_UnobtainableMessage { get; }
    internal static string LocalDBNotSupported { get; }
    internal static string MDF_AmbigousCollectionName { get; }
    internal static string MDF_CollectionNameISNotUnique { get; }
    internal static string MDF_DataTableDoesNotExist { get; }
    internal static string MDF_IncorrectNumberOfDataSourceInformationRows { get; }
    internal static string MDF_InvalidXml { get; }
    internal static string MDF_InvalidXmlInvalidValue { get; }
    internal static string MDF_InvalidXmlMissingColumn { get; }
    internal static string MDF_MissingDataSourceInformationColumn { get; }
    internal static string MDF_MissingRestrictionColumn { get; }
    internal static string MDF_MissingRestrictionRow { get; }
    internal static string MDF_NoColumns { get; }
    internal static string MDF_QueryFailed { get; }
    internal static string MDF_TooManyRestrictions { get; }
    internal static string MDF_UnableToBuildCollection { get; }
    internal static string MDF_UndefinedCollection { get; }
    internal static string MDF_UnsupportedVersion { get; }
    internal static string MissingClaimInAttestationToken { get; }
    internal static string net_auth_message_not_encrypted { get; }
    internal static string net_context_buffer_too_small { get; }
    internal static string net_gssapi_operation_failed { get; }
    internal static string net_gssapi_operation_failed_detailed { get; }
    internal static string net_invalid_enum { get; }
    internal static string net_log_operation_failed_with_error { get; }
    internal static string net_MethodNotImplementedException { get; }
    internal static string net_nego_channel_binding_not_supported { get; }
    internal static string net_nego_not_supported_empty_target_with_defaultcreds { get; }
    internal static string net_nego_protection_level_not_supported { get; }
    internal static string net_nego_server_not_supported { get; }
    internal static string net_ntlm_not_possible_default_cred { get; }
    internal static string net_securitypackagesupport { get; }
    internal static string NullSchemaTableDataTypeNotSupported { get; }
    internal static string PlatformNotSupported_DataSqlClient { get; }
    internal static string SNI_ERROR_1 { get; }
    internal static string SNI_ERROR_11 { get; }
    internal static string SNI_ERROR_12 { get; }
    internal static string SNI_ERROR_13 { get; }
    internal static string SNI_ERROR_14 { get; }
    internal static string SNI_ERROR_15 { get; }
    internal static string SNI_ERROR_16 { get; }
    internal static string SNI_ERROR_17 { get; }
    internal static string SNI_ERROR_18 { get; }
    internal static string SNI_ERROR_19 { get; }
    internal static string SNI_ERROR_2 { get; }
    internal static string SNI_ERROR_20 { get; }
    internal static string SNI_ERROR_21 { get; }
    internal static string SNI_ERROR_22 { get; }
    internal static string SNI_ERROR_23 { get; }
    internal static string SNI_ERROR_24 { get; }
    internal static string SNI_ERROR_25 { get; }
    internal static string SNI_ERROR_26 { get; }
    internal static string SNI_ERROR_27 { get; }
    internal static string SNI_ERROR_28 { get; }
    internal static string SNI_ERROR_29 { get; }
    internal static string SNI_ERROR_3 { get; }
    internal static string SNI_ERROR_30 { get; }
    internal static string SNI_ERROR_31 { get; }
    internal static string SNI_ERROR_32 { get; }
    internal static string SNI_ERROR_33 { get; }
    internal static string SNI_ERROR_34 { get; }
    internal static string SNI_ERROR_35 { get; }
    internal static string SNI_ERROR_36 { get; }
    internal static string SNI_ERROR_37 { get; }
    internal static string SNI_ERROR_38 { get; }
    internal static string SNI_ERROR_39 { get; }
    internal static string SNI_ERROR_40 { get; }
    internal static string SNI_ERROR_41 { get; }
    internal static string SNI_ERROR_42 { get; }
    internal static string SNI_ERROR_43 { get; }
    internal static string SNI_ERROR_44 { get; }
    internal static string SNI_ERROR_47 { get; }
    internal static string SNI_ERROR_48 { get; }
    internal static string SNI_ERROR_49 { get; }
    internal static string SNI_ERROR_5 { get; }
    internal static string SNI_ERROR_50 { get; }
    internal static string SNI_ERROR_51 { get; }
    internal static string SNI_ERROR_52 { get; }
    internal static string SNI_ERROR_53 { get; }
    internal static string SNI_ERROR_54 { get; }
    internal static string SNI_ERROR_55 { get; }
    internal static string SNI_ERROR_56 { get; }
    internal static string SNI_ERROR_57 { get; }
    internal static string SNI_ERROR_6 { get; }
    internal static string SNI_ERROR_7 { get; }
    internal static string SNI_ERROR_8 { get; }
    internal static string SNI_ERROR_9 { get; }
    internal static string SNI_PN0 { get; }
    internal static string SNI_PN1 { get; }
    internal static string SNI_PN2 { get; }
    internal static string SNI_PN3 { get; }
    internal static string SNI_PN4 { get; }
    internal static string SNI_PN5 { get; }
    internal static string SNI_PN6 { get; }
    internal static string SNI_PN7 { get; }
    internal static string SNI_PN8 { get; }
    internal static string SNI_PN9 { get; }
    internal static string Snix_AutoEnlist { get; }
    internal static string Snix_Close { get; }
    internal static string Snix_Connect { get; }
    internal static string Snix_EnableMars { get; }
    internal static string Snix_Execute { get; }
    internal static string Snix_GetMarsSession { get; }
    internal static string Snix_Login { get; }
    internal static string Snix_LoginSspi { get; }
    internal static string Snix_PreLogin { get; }
    internal static string Snix_PreLoginBeforeSuccessfulWrite { get; }
    internal static string Snix_ProcessSspi { get; }
    internal static string Snix_Read { get; }
    internal static string Snix_SendRows { get; }
    internal static string SQL_AuthenticationAndIntegratedSecurity { get; }
    internal static string SQL_BatchedUpdatesNotAvailableOnContextConnection { get; }
    internal static string SQL_BulkCopyDestinationTableName { get; }
    internal static string SQL_BulkLoadCannotConvertValue { get; }
    internal static string SQL_BulkLoadConflictingTransactionOption { get; }
    internal static string SQL_BulkLoadExistingTransaction { get; }
    internal static string SQL_BulkLoadInvalidDestinationTable { get; }
    internal static string SQL_BulkLoadInvalidOperationInsideEvent { get; }
    internal static string SQL_BulkLoadInvalidTimeout { get; }
    internal static string SQL_BulkLoadInvalidVariantValue { get; }
    internal static string Sql_BulkLoadLcidMismatch { get; }
    internal static string SQL_BulkLoadMappingInaccessible { get; }
    internal static string SQL_BulkLoadMappingsNamesOrOrdinalsOnly { get; }
    internal static string SQL_BulkLoadMissingDestinationTable { get; }
    internal static string SQL_BulkLoadNoCollation { get; }
    internal static string SQL_BulkLoadNonMatchingColumnMapping { get; }
    internal static string SQL_BulkLoadNonMatchingColumnName { get; }
    internal static string SQL_BulkLoadNotAllowDBNull { get; }
    internal static string SQL_BulkLoadPendingOperation { get; }
    internal static string SQL_BulkLoadStringTooLong { get; }
    internal static string SQL_CannotCreateAuthInitializer { get; }
    internal static string SQL_CannotCreateAuthProvider { get; }
    internal static string SQL_CannotCreateNormalizer { get; }
    internal static string SQL_CannotFindAuthProvider { get; }
    internal static string SQL_CannotGetAuthProviderConfig { get; }
    internal static string SQL_CannotGetDTCAddress { get; }
    internal static string SQL_CannotInitializeAuthProvider { get; }
    internal static string SQL_CannotModifyPropertyAsyncOperationInProgress { get; }
    internal static string SQL_ChangePasswordArgumentMissing { get; }
    internal static string SQL_ChangePasswordConflictsWithSSPI { get; }
    internal static string SQL_ChangePasswordRequiresYukon { get; }
    internal static string SQL_ChangePasswordUseOfUnallowedKey { get; }
    internal static string SQL_ConnectionDoomed { get; }
    internal static string SQL_ConnectionLockedForBcpEvent { get; }
    internal static string SQL_CredentialsNotProvided { get; }
    internal static string SQL_CultureIdError { get; }
    internal static string SQL_DbTypeNotSupportedOnThisPlatform { get; }
    internal static string SQL_Duration_Login_Begin { get; }
    internal static string SQL_Duration_Login_ProcessConnectionAuth { get; }
    internal static string SQL_Duration_PostLogin { get; }
    internal static string SQL_Duration_PreLogin_Begin { get; }
    internal static string SQL_Duration_PreLoginHandshake { get; }
    internal static string SQL_EncryptionNotSupportedByClient { get; }
    internal static string SQL_EncryptionNotSupportedByServer { get; }
    internal static string SQL_EnumeratedRecordFieldCountChanged { get; }
    internal static string SQL_EnumeratedRecordMetaDataChanged { get; }
    internal static string SQL_ExClientConnectionId { get; }
    internal static string SQL_ExErrorNumberStateClass { get; }
    internal static string SQL_ExOriginalClientConnectionId { get; }
    internal static string SQL_ExRoutingDestination { get; }
    internal static string SQL_GlobalizationInvariantModeNotSupported { get; }
    internal static string SQL_InstanceFailure { get; }
    internal static string SQL_IntegratedWithUserIDAndPassword { get; }
    internal static string SQL_InteractiveWithoutUserID { get; }
    internal static string SQL_InteractiveWithPassword { get; }
    internal static string Sql_InternalError { get; }
    internal static string SQL_InvalidBufferSizeOrIndex { get; }
    internal static string SQL_InvalidDataLength { get; }
    internal static string SQL_InvalidInternalPacketSize { get; }
    internal static string SQL_InvalidPacketSizeValue { get; }
    internal static string SQL_InvalidParameterNameLength { get; }
    internal static string SQL_InvalidParameterTypeNameFormat { get; }
    internal static string SQL_InvalidPartnerConfiguration { get; }
    internal static string SQL_InvalidRead { get; }
    internal static string SQL_InvalidSQLServerVersionUnknown { get; }
    internal static string SQL_InvalidSSPIPacketSize { get; }
    internal static string SQL_InvalidTDSPacketSize { get; }
    internal static string SQL_InvalidTDSVersion { get; }
    internal static string SQL_InvalidUdt3PartNameFormat { get; }
    internal static string SQL_KerberosTicketMissingError { get; }
    internal static string SQL_MarsUnsupportedOnConnection { get; }
    internal static string SQL_MoneyOverflow { get; }
    internal static string SQL_MSALFailure { get; }
    internal static string SQL_MSALInnerException { get; }
    internal static string SQL_NetworkLibraryNotSupported { get; }
    internal static string SQL_NonBlobColumn { get; }
    internal static string SQL_NonCharColumn { get; }
    internal static string SQL_NonLocalSSEInstance { get; }
    internal static string SQL_NonXmlResult { get; }
    internal static string SQL_NotSupportedEnumerationValue { get; }
    internal static string SQL_NullEmptyTransactionName { get; }
    internal static string SQL_OpenResultCountExceeded { get; }
    internal static string SQL_OperationCancelled { get; }
    internal static string SQL_ParameterCannotBeEmpty { get; }
    internal static string SQL_ParameterInvalidVariant { get; }
    internal static string SQL_ParameterTypeNameRequired { get; }
    internal static string SQL_ParsingError { get; }
    internal static string SQL_ParsingErrorAuthLibraryType { get; }
    internal static string SQL_ParsingErrorFeatureId { get; }
    internal static string SQL_ParsingErrorLength { get; }
    internal static string SQL_ParsingErrorOffset { get; }
    internal static string SQL_ParsingErrorStatus { get; }
    internal static string SQL_ParsingErrorToken { get; }
    internal static string SQL_ParsingErrorValue { get; }
    internal static string SQL_ParsingErrorWithState { get; }
    internal static string SQL_PendingBeginXXXExists { get; }
    internal static string SQL_PrecisionValueOutOfRange { get; }
    internal static string SQL_ScaleValueOutOfRange { get; }
    internal static string SQL_SevereError { get; }
    internal static string SQL_SmallDateTimeOverflow { get; }
    internal static string SQL_SNIPacketAllocationFailure { get; }
    internal static string SQL_SqlCommandCommandText { get; }
    internal static string SQL_SqlServerBrowserNotAccessible { get; }
    internal static string SQL_SSPIGenerateError { get; }
    internal static string SQL_SSPIInitializeError { get; }
    internal static string SQL_StreamNotSupportOnColumnType { get; }
    internal static string SQL_StreamReadNotSupported { get; }
    internal static string SQL_StreamSeekNotSupported { get; }
    internal static string SQL_StreamWriteNotSupported { get; }
    internal static string SQL_TDSParserTableName { get; }
    internal static string SQL_TextReaderNotSupportOnColumnType { get; }
    internal static string SQL_Timeout { get; }
    internal static string SQL_Timeout_Execution { get; }
    internal static string SQL_Timeout_FailoverInfo { get; }
    internal static string SQL_Timeout_Login_Begin { get; }
    internal static string SQL_Timeout_Login_ProcessConnectionAuth { get; }
    internal static string SQL_Timeout_PostLogin { get; }
    internal static string SQL_Timeout_PreLogin_Begin { get; }
    internal static string SQL_Timeout_PreLogin_ConsumeHandshake { get; }
    internal static string SQL_Timeout_PreLogin_InitializeConnection { get; }
    internal static string SQL_Timeout_PreLogin_SendHandshake { get; }
    internal static string SQL_Timeout_RoutingDestinationInfo { get; }
    internal static string SQL_TimeOverflow { get; }
    internal static string SQL_TimeScaleValueOutOfRange { get; }
    internal static string SQL_TypeName { get; }
    internal static string SQL_UDTTypeName { get; }
    internal static string SQL_UnknownSysTxIsolationLevel { get; }
    internal static string SQL_UnsupportedAuthentication { get; }
    internal static string SQL_UnsupportedAuthenticationByProvider { get; }
    internal static string SQL_UnsupportedFeature { get; }
    internal static string SQL_UnsupportedKeyword { get; }
    internal static string SQL_UnsupportedSqlAuthenticationMethod { get; }
    internal static string SQL_UnsupportedSysTxVersion { get; }
    internal static string SQL_UnsupportedToken { get; }
    internal static string SQL_UserInstanceFailoverNotCompatible { get; }
    internal static string SQL_UserInstanceFailure { get; }
    internal static string SQL_WrongType { get; }
    internal static string SQL_XmlReaderNotSupportOnColumnType { get; }
    internal static string SqlConvert_ConvertFailed { get; }
    internal static string SQLCR_AllAttemptsFailed { get; }
    internal static string SQLCR_EncryptionChanged { get; }
    internal static string SQLCR_InvalidConnectRetryCountValue { get; }
    internal static string SQLCR_InvalidConnectRetryIntervalValue { get; }
    internal static string SQLCR_NextAttemptWillExceedQueryTimeout { get; }
    internal static string SQLCR_NoCRAckAtReconnection { get; }
    internal static string SQLCR_TDSVestionNotPreserved { get; }
    internal static string SQLCR_UnrecoverableClient { get; }
    internal static string SQLCR_UnrecoverableServer { get; }
    internal static string SqlDelegatedTransaction_PromotionFailed { get; }
    internal static string SqlDependency_DatabaseBrokerDisabled { get; }
    internal static string SqlDependency_DefaultOptionsButNoStart { get; }
    internal static string SqlDependency_DuplicateStart { get; }
    internal static string SqlDependency_EventNoDuplicate { get; }
    internal static string SqlDependency_IdMismatch { get; }
    internal static string SqlDependency_InvalidTimeout { get; }
    internal static string SqlDependency_NoMatchingServerDatabaseStart { get; }
    internal static string SqlDependency_NoMatchingServerStart { get; }
    internal static string SqlFileStream_FileAlreadyInTransaction { get; }
    internal static string SqlFileStream_InvalidParameter { get; }
    internal static string SqlFileStream_InvalidPath { get; }
    internal static string SqlFileStream_NotSupported { get; }
    internal static string SqlFileStream_PathNotValidDiskResource { get; }
    internal static string SqlMetaData_InvalidSqlDbTypeForConstructorFormat { get; }
    internal static string SqlMetaData_NameTooLong { get; }
    internal static string SqlMetaData_SpecifyBothSortOrderAndOrdinal { get; }
    internal static string SqlMisc_AlreadyFilledMessage { get; }
    internal static string SqlMisc_ArithOverflowMessage { get; }
    internal static string SqlMisc_ClosedXmlReaderMessage { get; }
    internal static string SqlMisc_CompareDiffCollationMessage { get; }
    internal static string SqlMisc_ConcatDiffCollationMessage { get; }
    internal static string SqlMisc_ConversionOverflowMessage { get; }
    internal static string SqlMisc_DateTimeOverflowMessage { get; }
    internal static string SqlMisc_DivideByZeroMessage { get; }
    internal static string SqlMisc_FormatMessage { get; }
    internal static string SqlMisc_InvalidArraySizeMessage { get; }
    internal static string SqlMisc_InvalidDateTimeMessage { get; }
    internal static string SqlMisc_InvalidFlagMessage { get; }
    internal static string SqlMisc_InvalidOpStreamClosed { get; }
    internal static string SqlMisc_InvalidOpStreamNonReadable { get; }
    internal static string SqlMisc_InvalidOpStreamNonSeekable { get; }
    internal static string SqlMisc_InvalidOpStreamNonWritable { get; }
    internal static string SqlMisc_InvalidPrecScaleMessage { get; }
    internal static string SqlMisc_MessageString { get; }
    internal static string SqlMisc_NotFilledMessage { get; }
    internal static string SqlMisc_NullString { get; }
    internal static string SqlMisc_NullValueMessage { get; }
    internal static string SqlMisc_NumeToDecOverflowMessage { get; }
    internal static string SqlMisc_StreamErrorMessage { get; }
    internal static string SqlMisc_SubclassMustOverride { get; }
    internal static string SqlMisc_TimeZoneSpecifiedMessage { get; }
    internal static string SqlMisc_TruncationMaxDataMessage { get; }
    internal static string SqlMisc_TruncationMessage { get; }
    internal static string SQLMSF_FailoverPartnerNotSupported { get; }
    internal static string SQLNotify_AlreadyHasCommand { get; }
    internal static string SqlParameter_DBNullNotSupportedForTVP { get; }
    internal static string SqlParameter_InvalidTableDerivedPrecisionForTvp { get; }
    internal static string SqlParameter_UnexpectedTypeNameForNonStruct { get; }
    internal static string SqlParameter_UnsupportedTVPOutputParameter { get; }
    internal static string SqlProvider_DuplicateSortOrdinal { get; }
    internal static string SqlProvider_InvalidDataColumnMaxLength { get; }
    internal static string SqlProvider_InvalidDataColumnType { get; }
    internal static string SqlProvider_MissingSortOrdinal { get; }
    internal static string SqlProvider_NotEnoughColumnsInStructuredType { get; }
    internal static string SqlProvider_SortOrdinalGreaterThanFieldCount { get; }
    internal static string SQLROR_FailoverNotSupported { get; }
    internal static string SQLROR_InvalidRoutingInfo { get; }
    internal static string SQLROR_RecursiveRoutingNotSupported { get; }
    internal static string SQLROR_TimeoutAfterRoutingInfo { get; }
    internal static string SQLROR_UnexpectedRoutingInfo { get; }
    internal static string SQLUDT_InvalidSqlType { get; }
    internal static string SqlUdt_InvalidUdtMessage { get; }
    internal static string SQLUDT_InvalidUdtTypeName { get; }
    internal static string SQLUDT_MaxByteSizeValue { get; }
    internal static string SQLUDT_Unexpected { get; }
    internal static string SQLUDT_UnexpectedUdtTypeName { get; }
    internal static string SqlUdtReason_NoUdtAttribute { get; }
    internal static string SSPIInvalidHandleType { get; }
    internal static string TCE_AttestationInfoNotReturnedFromSQLServer { get; }
    internal static string TCE_BatchedUpdateColumnEncryptionSettingMismatch { get; }
    internal static string TCE_CannotCreateSqlColumnEncryptionEnclaveProvider { get; }
    internal static string TCE_CannotGetSqlColumnEncryptionEnclaveProviderConfig { get; }
    internal static string TCE_CanOnlyCallOnce { get; }
    internal static string TCE_CertificateNotFound { get; }
    internal static string TCE_CertificateNotFoundSysErr { get; }
    internal static string TCE_CertificateWithNoPrivateKey { get; }
    internal static string TCE_CertificateWithNoPrivateKeySysErr { get; }
    internal static string TCE_ColumnDecryptionFailed { get; }
    internal static string TCE_ColumnEncryptionKeysNotFound { get; }
    internal static string TCE_ColumnMasterKeySignatureNotFound { get; }
    internal static string TCE_ColumnMasterKeySignatureVerificationFailed { get; }
    internal static string TCE_DecryptionFailed { get; }
    internal static string TCE_EmptyArgumentInConstructorInternal { get; }
    internal static string TCE_EmptyArgumentInternal { get; }
    internal static string TCE_EmptyCertificateThumbprint { get; }
    internal static string TCE_EmptyCertificateThumbprintSysErr { get; }
    internal static string TCE_EmptyCngKeyId { get; }
    internal static string TCE_EmptyCngKeyIdSysErr { get; }
    internal static string TCE_EmptyCngName { get; }
    internal static string TCE_EmptyCngNameSysErr { get; }
    internal static string TCE_EmptyColumnEncryptionKey { get; }
    internal static string TCE_EmptyCspKeyId { get; }
    internal static string TCE_EmptyCspKeyIdSysErr { get; }
    internal static string TCE_EmptyCspName { get; }
    internal static string TCE_EmptyCspNameSysErr { get; }
    internal static string TCE_EmptyEncryptedColumnEncryptionKey { get; }
    internal static string TCE_EmptyProviderName { get; }
    internal static string TCE_EnclaveComputationsNotSupported { get; }
    internal static string TCE_EnclaveProviderNotFound { get; }
    internal static string TCE_DbConnectionString_AttestationProtocol { get; }
    internal static string TCE_EnclaveTypeNotSupported { get; }
    internal static string TCE_AttestationProtocolNotSupportEnclaveType { get; }
    internal static string TCE_AttestationProtocolNotSpecifiedForGeneratingEnclavePackage { get; }
    internal static string TCE_EnclaveProvidersNotConfiguredForEnclaveBasedQuery { get; }
    internal static string TCE_EnclaveTypeNotReturned { get; }
    internal static string TCE_EnclaveTypeNullForEnclaveBasedQuery { get; }
    internal static string TCE_ExceptionWhenGeneratingEnclavePackage { get; }
    internal static string TCE_FailedToEncryptRegisterRulesBytePackage { get; }
    internal static string TCE_InsufficientBuffer { get; }
    internal static string TCE_InvalidAlgorithmVersion { get; }
    internal static string TCE_InvalidAlgorithmVersionInEncryptedCEK { get; }
    internal static string TCE_InvalidAttestationParameterUnableToConvertToUnsignedInt { get; }
    internal static string TCE_InvalidAuthenticationTag { get; }
    internal static string TCE_InvalidCertificateLocation { get; }
    internal static string TCE_InvalidCertificateLocationSysErr { get; }
    internal static string TCE_InvalidCertificatePath { get; }
    internal static string TCE_InvalidCertificatePathSysErr { get; }
    internal static string TCE_InvalidCertificateSignature { get; }
    internal static string TCE_InvalidCertificateStore { get; }
    internal static string TCE_InvalidCertificateStoreSysErr { get; }
    internal static string TCE_InvalidCiphertextLengthInEncryptedCEK { get; }
    internal static string TCE_InvalidCiphertextLengthInEncryptedCEKCng { get; }
    internal static string TCE_InvalidCiphertextLengthInEncryptedCEKCsp { get; }
    internal static string TCE_InvalidCipherTextSize { get; }
    internal static string TCE_InvalidCngKey { get; }
    internal static string TCE_InvalidCngKeySysErr { get; }
    internal static string TCE_InvalidCngPath { get; }
    internal static string TCE_InvalidCngPathSysErr { get; }
    internal static string TCE_InvalidCspKeyId { get; }
    internal static string TCE_InvalidCspKeyIdSysErr { get; }
    internal static string TCE_InvalidCspName { get; }
    internal static string TCE_InvalidCspNameSysErr { get; }
    internal static string TCE_InvalidCspPath { get; }
    internal static string TCE_InvalidCspPathSysErr { get; }
    internal static string TCE_InvalidCustomKeyStoreProviderName { get; }
    internal static string TCE_InvalidDatabaseIdUnableToCastToUnsignedInt { get; }
    internal static string TCE_InvalidEncryptionKeyOrdinalEnclaveMetadata { get; }
    internal static string TCE_InvalidEncryptionKeyOrdinalParameterMetadata { get; }
    internal static string TCE_InvalidEncryptionType { get; }
    internal static string TCE_InvalidKeyEncryptionAlgorithm { get; }
    internal static string TCE_InvalidKeyEncryptionAlgorithmSysErr { get; }
    internal static string TCE_InvalidKeyIdUnableToCastToUnsignedShort { get; }
    internal static string TCE_InvalidKeySize { get; }
    internal static string TCE_InvalidKeyStoreProviderName { get; }
    internal static string TCE_InvalidSignature { get; }
    internal static string TCE_InvalidSignatureInEncryptedCEK { get; }
    internal static string TCE_InvalidSignatureInEncryptedCEKCng { get; }
    internal static string TCE_InvalidSignatureInEncryptedCEKCsp { get; }
    internal static string TCE_KeyDecryptionFailed { get; }
    internal static string TCE_KeyDecryptionFailedCertStore { get; }
    internal static string TCE_LargeCertificatePathLength { get; }
    internal static string TCE_LargeCertificatePathLengthSysErr { get; }
    internal static string TCE_MultipleRowsReturnedForAttestationInfo { get; }
    internal static string TCE_NoAttestationUrlSpecifiedForEnclaveBasedQueryGeneratingEnclavePackage { get; }
    internal static string TCE_NoAttestationUrlSpecifiedForEnclaveBasedQuerySpDescribe { get; }
    internal static string TCE_NotSupportedByServer { get; }
    internal static string TCE_NullArgumentInConstructorInternal { get; }
    internal static string TCE_NullArgumentInternal { get; }
    internal static string TCE_NullCertificatePath { get; }
    internal static string TCE_NullCertificatePathSysErr { get; }
    internal static string TCE_NullCipherText { get; }
    internal static string TCE_NullCngPath { get; }
    internal static string TCE_NullCngPathSysErr { get; }
    internal static string TCE_NullColumnEncryptionAlgorithm { get; }
    internal static string TCE_NullColumnEncryptionKey { get; }
    internal static string TCE_NullColumnEncryptionKeySysErr { get; }
    internal static string TCE_NullCspPath { get; }
    internal static string TCE_NullCspPathSysErr { get; }
    internal static string TCE_NullCustomKeyStoreProviderDictionary { get; }
    internal static string TCE_NullEnclavePackageForEnclaveBasedQuery { get; }
    internal static string TCE_NullEnclaveSessionDuringQueryExecution { get; }
    internal static string TCE_NullEnclaveSessionReturnedFromProvider { get; }
    internal static string TCE_NullEncryptedColumnEncryptionKey { get; }
    internal static string TCE_NullKeyEncryptionAlgorithm { get; }
    internal static string TCE_NullKeyEncryptionAlgorithmSysErr { get; }
    internal static string TCE_NullPlainText { get; }
    internal static string TCE_NullProviderValue { get; }
    internal static string TCE_OffsetOutOfBounds { get; }
    internal static string TCE_ParamDecryptionFailed { get; }
    internal static string TCE_ParamEncryptionFailed { get; }
    internal static string TCE_ParamEncryptionMetaDataMissing { get; }
    internal static string TCE_ParamInvalidForceColumnEncryptionSetting { get; }
    internal static string TCE_ParamUnExpectedEncryptionMetadata { get; }
    internal static string TCE_ProcEncryptionMetaDataMissing { get; }
    internal static string TCE_SequentialAccessNotSupportedOnEncryptedColumn { get; }
    internal static string TCE_SqlColumnEncryptionEnclaveProviderNameCannotBeEmpty { get; }
    internal static string TCE_StreamNotSupportOnEncryptedColumn { get; }
    internal static string TCE_UnableToVerifyColumnMasterKeySignature { get; }
    internal static string TCE_UnexpectedDescribeParamFormatAttestationInfo { get; }
    internal static string TCE_UnexpectedDescribeParamFormatParameterMetadata { get; }
    internal static string TCE_UnknownColumnEncryptionAlgorithm { get; }
    internal static string TCE_UnknownColumnEncryptionAlgorithmId { get; }
    internal static string TCE_UnrecognizedKeyStoreProviderName { get; }
    internal static string TCE_UnsupportedDatatype { get; }
    internal static string TCE_UnsupportedNormalizationVersion { get; }
    internal static string TCE_UntrustedKeyPath { get; }
    internal static string VerifyEnclaveDebuggable { get; }
    internal static string VerifyEnclavePolicyFailedFormat { get; }
    internal static string VerifyEnclaveReportFailed { get; }
    internal static string VerifyEnclaveReportFormatFailed { get; }
    internal static string VerifyHealthCertificateChainFormat { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ADP_BadParameterName();
    internal static string get_ADP_CalledTwice();
    internal static string get_ADP_ClosedConnectionError();
    internal static string get_ADP_CollectionIndexInt32();
    internal static string get_ADP_CollectionIndexString();
    internal static string get_ADP_CollectionInvalidType();
    internal static string get_ADP_CollectionIsNotParent();
    internal static string get_ADP_CollectionNullValue();
    internal static string get_ADP_CollectionRemoveInvalidObject();
    internal static string get_ADP_CommandTextRequired();
    internal static string get_ADP_ConnectionAlreadyOpen();
    internal static string get_ADP_ConnectionIsDisabled();
    internal static string get_ADP_ConnectionRequired();
    internal static string get_ADP_ConnectionStateMsg();
    internal static string get_ADP_ConnectionStateMsg_Closed();
    internal static string get_ADP_ConnectionStateMsg_Connecting();
    internal static string get_ADP_ConnectionStateMsg_Open();
    internal static string get_ADP_ConnectionStateMsg_OpenExecuting();
    internal static string get_ADP_ConnectionStateMsg_OpenFetching();
    internal static string get_ADP_ConnectionStringSyntax();
    internal static string get_ADP_DataReaderClosed();
    internal static string get_ADP_DbTypeNotSupported();
    internal static string get_ADP_DeriveParametersNotSupported();
    internal static string get_ADP_DoubleValuedProperty();
    internal static string get_ADP_EmptyDatabaseName();
    internal static string get_ADP_InternalConnectionError();
    internal static string get_ADP_InternalProviderError();
    internal static string get_ADP_InvalidArgumentLength();
    internal static string get_ADP_InvalidCommandTimeout();
    internal static string get_ADP_InvalidConnectionOptionValue();
    internal static string get_ADP_InvalidConnectionOptionValueLength();
    internal static string get_ADP_InvalidDataDirectory();
    internal static string get_ADP_InvalidDataLength2();
    internal static string get_ADP_InvalidDataType();
    internal static string get_ADP_InvalidDestinationBufferIndex();
    internal static string get_ADP_InvalidEnumerationValue();
    internal static string get_ADP_InvalidMetaDataValue();
    internal static string get_ADP_InvalidMinMaxPoolSizeValues();
    internal static string get_ADP_InvalidMixedUsageOfAccessTokenAndAuthentication();
    internal static string get_ADP_InvalidMixedUsageOfAccessTokenAndIntegratedSecurity();
    internal static string get_ADP_InvalidMixedUsageOfAccessTokenAndUserIDPassword();
    internal static string get_ADP_InvalidMixedUsageOfCredentialAndAccessToken();
    internal static string get_ADP_InvalidMixedUsageOfSecureAndClearCredential();
    internal static string get_ADP_InvalidMixedUsageOfSecureCredentialAndIntegratedSecurity();
    internal static string get_ADP_InvalidMultipartName();
    internal static string get_ADP_InvalidMultipartNameQuoteUsage();
    internal static string get_ADP_InvalidMultipartNameToManyParts();
    internal static string get_ADP_InvalidOffsetValue();
    internal static string get_ADP_InvalidPrefixSuffix();
    internal static string get_ADP_InvalidSeekOrigin();
    internal static string get_ADP_InvalidSizeValue();
    internal static string get_ADP_InvalidSourceBufferIndex();
    internal static string get_ADP_KeywordNotSupported();
    internal static string get_ADP_LocalTransactionPresent();
    internal static string get_ADP_MismatchedAsyncResult();
    internal static string get_ADP_MissingConnectionOptionValue();
    internal static string get_ADP_MustBeReadOnly();
    internal static string get_ADP_NegativeParameter();
    internal static string get_ADP_NoConnectionString();
    internal static string get_ADP_NonPooledOpenTimeout();
    internal static string get_ADP_NonSeqByteAccess();
    internal static string get_ADP_NonSequentialColumnAccess();
    internal static string get_ADP_NoStoredProcedureExists();
    internal static string get_ADP_NotSupportedEnumerationValue();
    internal static string get_ADP_OpenConnectionPropertySet();
    internal static string get_ADP_OpenConnectionRequired();
    internal static string get_ADP_OpenReaderExists();
    internal static string get_ADP_OperationAborted();
    internal static string get_ADP_OperationAbortedExceptionMessage();
    internal static string get_ADP_ParallelTransactionsNotSupported();
    internal static string get_ADP_ParameterConversionFailed();
    internal static string get_ADP_ParameterValueOutOfRange();
    internal static string get_ADP_PendingAsyncOperation();
    internal static string get_ADP_PooledOpenTimeout();
    internal static string get_ADP_PrepareParameterScale();
    internal static string get_ADP_PrepareParameterSize();
    internal static string get_ADP_PrepareParameterType();
    internal static string get_ADP_SingleValuedProperty();
    internal static string get_ADP_StreamClosed();
    internal static string get_ADP_TransactionCompletedButNotDisposed();
    internal static string get_ADP_TransactionConnectionMismatch();
    internal static string get_ADP_TransactionPresent();
    internal static string get_ADP_TransactionRequired();
    internal static string get_ADP_TransactionZombied();
    internal static string get_ADP_UninitializedParameterSize();
    internal static string get_ADP_UnknownDataType();
    internal static string get_ADP_UnknownDataTypeCode();
    internal static string get_ADP_VersionDoesNotSupportDataType();
    internal static string get_Arg_ArrayPlusOffTooSmall();
    internal static string get_Arg_RankMultiDimNotSupported();
    internal static string get_Arg_RemoveArgNotFound();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_AttestationTokenSignatureValidationFailed();
    internal static string get_AZURESQL_ChinaEndpoint();
    internal static string get_AZURESQL_GenericEndpoint();
    internal static string get_AZURESQL_GermanEndpoint();
    internal static string get_AZURESQL_UsGovEndpoint();
    internal static string get_Data_InvalidOffsetLength();
    internal static string get_EnclaveRetrySleepInSecondsValueException();
    internal static string get_EnclaveSessionInvalidationFailed();
    internal static string get_event_OperationReturnedSomething();
    internal static string get_ExpiredAttestationToken();
    internal static string get_FailToCreateEnclaveSession();
    internal static string get_FailToParseAttestationInfo();
    internal static string get_FailToParseAttestationToken();
    internal static string get_GetAttestationSigningCertificateFailedInvalidCertificate();
    internal static string get_GetAttestationSigningCertificateRequestFailedFormat();
    internal static string get_GetAttestationTokenSigningKeysFailed();
    internal static string get_GetSharedSecretFailed();
    internal static string get_GT_Disabled();
    internal static string get_IEnumerableOfSqlDataRecordHasNoRows();
    internal static string get_InvalidArgumentToBase64UrlDecoder();
    internal static string get_InvalidArgumentToSHA256();
    internal static string get_InvalidAttestationToken();
    internal static string get_InvalidClaimInAttestationToken();
    internal static string get_InvalidSchemaTableOrdinals();
    internal static string get_LocalDB_FailedGetDLLHandle();
    internal static string get_LocalDB_MethodNotFound();
    internal static string get_LocalDB_UnobtainableMessage();
    internal static string get_LocalDBNotSupported();
    internal static string get_MDF_AmbigousCollectionName();
    internal static string get_MDF_CollectionNameISNotUnique();
    internal static string get_MDF_DataTableDoesNotExist();
    internal static string get_MDF_IncorrectNumberOfDataSourceInformationRows();
    internal static string get_MDF_InvalidXml();
    internal static string get_MDF_InvalidXmlInvalidValue();
    internal static string get_MDF_InvalidXmlMissingColumn();
    internal static string get_MDF_MissingDataSourceInformationColumn();
    internal static string get_MDF_MissingRestrictionColumn();
    internal static string get_MDF_MissingRestrictionRow();
    internal static string get_MDF_NoColumns();
    internal static string get_MDF_QueryFailed();
    internal static string get_MDF_TooManyRestrictions();
    internal static string get_MDF_UnableToBuildCollection();
    internal static string get_MDF_UndefinedCollection();
    internal static string get_MDF_UnsupportedVersion();
    internal static string get_MissingClaimInAttestationToken();
    internal static string get_net_auth_message_not_encrypted();
    internal static string get_net_context_buffer_too_small();
    internal static string get_net_gssapi_operation_failed();
    internal static string get_net_gssapi_operation_failed_detailed();
    internal static string get_net_invalid_enum();
    internal static string get_net_log_operation_failed_with_error();
    internal static string get_net_MethodNotImplementedException();
    internal static string get_net_nego_channel_binding_not_supported();
    internal static string get_net_nego_not_supported_empty_target_with_defaultcreds();
    internal static string get_net_nego_protection_level_not_supported();
    internal static string get_net_nego_server_not_supported();
    internal static string get_net_ntlm_not_possible_default_cred();
    internal static string get_net_securitypackagesupport();
    internal static string get_NullSchemaTableDataTypeNotSupported();
    internal static string get_PlatformNotSupported_DataSqlClient();
    internal static string get_SNI_ERROR_1();
    internal static string get_SNI_ERROR_11();
    internal static string get_SNI_ERROR_12();
    internal static string get_SNI_ERROR_13();
    internal static string get_SNI_ERROR_14();
    internal static string get_SNI_ERROR_15();
    internal static string get_SNI_ERROR_16();
    internal static string get_SNI_ERROR_17();
    internal static string get_SNI_ERROR_18();
    internal static string get_SNI_ERROR_19();
    internal static string get_SNI_ERROR_2();
    internal static string get_SNI_ERROR_20();
    internal static string get_SNI_ERROR_21();
    internal static string get_SNI_ERROR_22();
    internal static string get_SNI_ERROR_23();
    internal static string get_SNI_ERROR_24();
    internal static string get_SNI_ERROR_25();
    internal static string get_SNI_ERROR_26();
    internal static string get_SNI_ERROR_27();
    internal static string get_SNI_ERROR_28();
    internal static string get_SNI_ERROR_29();
    internal static string get_SNI_ERROR_3();
    internal static string get_SNI_ERROR_30();
    internal static string get_SNI_ERROR_31();
    internal static string get_SNI_ERROR_32();
    internal static string get_SNI_ERROR_33();
    internal static string get_SNI_ERROR_34();
    internal static string get_SNI_ERROR_35();
    internal static string get_SNI_ERROR_36();
    internal static string get_SNI_ERROR_37();
    internal static string get_SNI_ERROR_38();
    internal static string get_SNI_ERROR_39();
    internal static string get_SNI_ERROR_40();
    internal static string get_SNI_ERROR_41();
    internal static string get_SNI_ERROR_42();
    internal static string get_SNI_ERROR_43();
    internal static string get_SNI_ERROR_44();
    internal static string get_SNI_ERROR_47();
    internal static string get_SNI_ERROR_48();
    internal static string get_SNI_ERROR_49();
    internal static string get_SNI_ERROR_5();
    internal static string get_SNI_ERROR_50();
    internal static string get_SNI_ERROR_51();
    internal static string get_SNI_ERROR_52();
    internal static string get_SNI_ERROR_53();
    internal static string get_SNI_ERROR_54();
    internal static string get_SNI_ERROR_55();
    internal static string get_SNI_ERROR_56();
    internal static string get_SNI_ERROR_57();
    internal static string get_SNI_ERROR_6();
    internal static string get_SNI_ERROR_7();
    internal static string get_SNI_ERROR_8();
    internal static string get_SNI_ERROR_9();
    internal static string get_SNI_PN0();
    internal static string get_SNI_PN1();
    internal static string get_SNI_PN2();
    internal static string get_SNI_PN3();
    internal static string get_SNI_PN4();
    internal static string get_SNI_PN5();
    internal static string get_SNI_PN6();
    internal static string get_SNI_PN7();
    internal static string get_SNI_PN8();
    internal static string get_SNI_PN9();
    internal static string get_Snix_AutoEnlist();
    internal static string get_Snix_Close();
    internal static string get_Snix_Connect();
    internal static string get_Snix_EnableMars();
    internal static string get_Snix_Execute();
    internal static string get_Snix_GetMarsSession();
    internal static string get_Snix_Login();
    internal static string get_Snix_LoginSspi();
    internal static string get_Snix_PreLogin();
    internal static string get_Snix_PreLoginBeforeSuccessfulWrite();
    internal static string get_Snix_ProcessSspi();
    internal static string get_Snix_Read();
    internal static string get_Snix_SendRows();
    internal static string get_SQL_AuthenticationAndIntegratedSecurity();
    internal static string get_SQL_BatchedUpdatesNotAvailableOnContextConnection();
    internal static string get_SQL_BulkCopyDestinationTableName();
    internal static string get_SQL_BulkLoadCannotConvertValue();
    internal static string get_SQL_BulkLoadConflictingTransactionOption();
    internal static string get_SQL_BulkLoadExistingTransaction();
    internal static string get_SQL_BulkLoadInvalidDestinationTable();
    internal static string get_SQL_BulkLoadInvalidOperationInsideEvent();
    internal static string get_SQL_BulkLoadInvalidTimeout();
    internal static string get_SQL_BulkLoadInvalidVariantValue();
    internal static string get_Sql_BulkLoadLcidMismatch();
    internal static string get_SQL_BulkLoadMappingInaccessible();
    internal static string get_SQL_BulkLoadMappingsNamesOrOrdinalsOnly();
    internal static string get_SQL_BulkLoadMissingDestinationTable();
    internal static string get_SQL_BulkLoadNoCollation();
    internal static string get_SQL_BulkLoadNonMatchingColumnMapping();
    internal static string get_SQL_BulkLoadNonMatchingColumnName();
    internal static string get_SQL_BulkLoadNotAllowDBNull();
    internal static string get_SQL_BulkLoadPendingOperation();
    internal static string get_SQL_BulkLoadStringTooLong();
    internal static string get_SQL_CannotCreateAuthInitializer();
    internal static string get_SQL_CannotCreateAuthProvider();
    internal static string get_SQL_CannotCreateNormalizer();
    internal static string get_SQL_CannotFindAuthProvider();
    internal static string get_SQL_CannotGetAuthProviderConfig();
    internal static string get_SQL_CannotGetDTCAddress();
    internal static string get_SQL_CannotInitializeAuthProvider();
    internal static string get_SQL_CannotModifyPropertyAsyncOperationInProgress();
    internal static string get_SQL_ChangePasswordArgumentMissing();
    internal static string get_SQL_ChangePasswordConflictsWithSSPI();
    internal static string get_SQL_ChangePasswordRequiresYukon();
    internal static string get_SQL_ChangePasswordUseOfUnallowedKey();
    internal static string get_SQL_ConnectionDoomed();
    internal static string get_SQL_ConnectionLockedForBcpEvent();
    internal static string get_SQL_CredentialsNotProvided();
    internal static string get_SQL_CultureIdError();
    internal static string get_SQL_DbTypeNotSupportedOnThisPlatform();
    internal static string get_SQL_Duration_Login_Begin();
    internal static string get_SQL_Duration_Login_ProcessConnectionAuth();
    internal static string get_SQL_Duration_PostLogin();
    internal static string get_SQL_Duration_PreLogin_Begin();
    internal static string get_SQL_Duration_PreLoginHandshake();
    internal static string get_SQL_EncryptionNotSupportedByClient();
    internal static string get_SQL_EncryptionNotSupportedByServer();
    internal static string get_SQL_EnumeratedRecordFieldCountChanged();
    internal static string get_SQL_EnumeratedRecordMetaDataChanged();
    internal static string get_SQL_ExClientConnectionId();
    internal static string get_SQL_ExErrorNumberStateClass();
    internal static string get_SQL_ExOriginalClientConnectionId();
    internal static string get_SQL_ExRoutingDestination();
    internal static string get_SQL_GlobalizationInvariantModeNotSupported();
    internal static string get_SQL_InstanceFailure();
    internal static string get_SQL_IntegratedWithUserIDAndPassword();
    internal static string get_SQL_InteractiveWithoutUserID();
    internal static string get_SQL_InteractiveWithPassword();
    internal static string get_Sql_InternalError();
    internal static string get_SQL_InvalidBufferSizeOrIndex();
    internal static string get_SQL_InvalidDataLength();
    internal static string get_SQL_InvalidInternalPacketSize();
    internal static string get_SQL_InvalidPacketSizeValue();
    internal static string get_SQL_InvalidParameterNameLength();
    internal static string get_SQL_InvalidParameterTypeNameFormat();
    internal static string get_SQL_InvalidPartnerConfiguration();
    internal static string get_SQL_InvalidRead();
    internal static string get_SQL_InvalidSQLServerVersionUnknown();
    internal static string get_SQL_InvalidSSPIPacketSize();
    internal static string get_SQL_InvalidTDSPacketSize();
    internal static string get_SQL_InvalidTDSVersion();
    internal static string get_SQL_InvalidUdt3PartNameFormat();
    internal static string get_SQL_KerberosTicketMissingError();
    internal static string get_SQL_MarsUnsupportedOnConnection();
    internal static string get_SQL_MoneyOverflow();
    internal static string get_SQL_MSALFailure();
    internal static string get_SQL_MSALInnerException();
    internal static string get_SQL_NetworkLibraryNotSupported();
    internal static string get_SQL_NonBlobColumn();
    internal static string get_SQL_NonCharColumn();
    internal static string get_SQL_NonLocalSSEInstance();
    internal static string get_SQL_NonXmlResult();
    internal static string get_SQL_NotSupportedEnumerationValue();
    internal static string get_SQL_NullEmptyTransactionName();
    internal static string get_SQL_OpenResultCountExceeded();
    internal static string get_SQL_OperationCancelled();
    internal static string get_SQL_ParameterCannotBeEmpty();
    internal static string get_SQL_ParameterInvalidVariant();
    internal static string get_SQL_ParameterTypeNameRequired();
    internal static string get_SQL_ParsingError();
    internal static string get_SQL_ParsingErrorAuthLibraryType();
    internal static string get_SQL_ParsingErrorFeatureId();
    internal static string get_SQL_ParsingErrorLength();
    internal static string get_SQL_ParsingErrorOffset();
    internal static string get_SQL_ParsingErrorStatus();
    internal static string get_SQL_ParsingErrorToken();
    internal static string get_SQL_ParsingErrorValue();
    internal static string get_SQL_ParsingErrorWithState();
    internal static string get_SQL_PendingBeginXXXExists();
    internal static string get_SQL_PrecisionValueOutOfRange();
    internal static string get_SQL_ScaleValueOutOfRange();
    internal static string get_SQL_SevereError();
    internal static string get_SQL_SmallDateTimeOverflow();
    internal static string get_SQL_SNIPacketAllocationFailure();
    internal static string get_SQL_SqlCommandCommandText();
    internal static string get_SQL_SqlServerBrowserNotAccessible();
    internal static string get_SQL_SSPIGenerateError();
    internal static string get_SQL_SSPIInitializeError();
    internal static string get_SQL_StreamNotSupportOnColumnType();
    internal static string get_SQL_StreamReadNotSupported();
    internal static string get_SQL_StreamSeekNotSupported();
    internal static string get_SQL_StreamWriteNotSupported();
    internal static string get_SQL_TDSParserTableName();
    internal static string get_SQL_TextReaderNotSupportOnColumnType();
    internal static string get_SQL_Timeout();
    internal static string get_SQL_Timeout_Execution();
    internal static string get_SQL_Timeout_FailoverInfo();
    internal static string get_SQL_Timeout_Login_Begin();
    internal static string get_SQL_Timeout_Login_ProcessConnectionAuth();
    internal static string get_SQL_Timeout_PostLogin();
    internal static string get_SQL_Timeout_PreLogin_Begin();
    internal static string get_SQL_Timeout_PreLogin_ConsumeHandshake();
    internal static string get_SQL_Timeout_PreLogin_InitializeConnection();
    internal static string get_SQL_Timeout_PreLogin_SendHandshake();
    internal static string get_SQL_Timeout_RoutingDestinationInfo();
    internal static string get_SQL_TimeOverflow();
    internal static string get_SQL_TimeScaleValueOutOfRange();
    internal static string get_SQL_TypeName();
    internal static string get_SQL_UDTTypeName();
    internal static string get_SQL_UnknownSysTxIsolationLevel();
    internal static string get_SQL_UnsupportedAuthentication();
    internal static string get_SQL_UnsupportedAuthenticationByProvider();
    internal static string get_SQL_UnsupportedFeature();
    internal static string get_SQL_UnsupportedKeyword();
    internal static string get_SQL_UnsupportedSqlAuthenticationMethod();
    internal static string get_SQL_UnsupportedSysTxVersion();
    internal static string get_SQL_UnsupportedToken();
    internal static string get_SQL_UserInstanceFailoverNotCompatible();
    internal static string get_SQL_UserInstanceFailure();
    internal static string get_SQL_WrongType();
    internal static string get_SQL_XmlReaderNotSupportOnColumnType();
    internal static string get_SqlConvert_ConvertFailed();
    internal static string get_SQLCR_AllAttemptsFailed();
    internal static string get_SQLCR_EncryptionChanged();
    internal static string get_SQLCR_InvalidConnectRetryCountValue();
    internal static string get_SQLCR_InvalidConnectRetryIntervalValue();
    internal static string get_SQLCR_NextAttemptWillExceedQueryTimeout();
    internal static string get_SQLCR_NoCRAckAtReconnection();
    internal static string get_SQLCR_TDSVestionNotPreserved();
    internal static string get_SQLCR_UnrecoverableClient();
    internal static string get_SQLCR_UnrecoverableServer();
    internal static string get_SqlDelegatedTransaction_PromotionFailed();
    internal static string get_SqlDependency_DatabaseBrokerDisabled();
    internal static string get_SqlDependency_DefaultOptionsButNoStart();
    internal static string get_SqlDependency_DuplicateStart();
    internal static string get_SqlDependency_EventNoDuplicate();
    internal static string get_SqlDependency_IdMismatch();
    internal static string get_SqlDependency_InvalidTimeout();
    internal static string get_SqlDependency_NoMatchingServerDatabaseStart();
    internal static string get_SqlDependency_NoMatchingServerStart();
    internal static string get_SqlFileStream_FileAlreadyInTransaction();
    internal static string get_SqlFileStream_InvalidParameter();
    internal static string get_SqlFileStream_InvalidPath();
    internal static string get_SqlFileStream_NotSupported();
    internal static string get_SqlFileStream_PathNotValidDiskResource();
    internal static string get_SqlMetaData_InvalidSqlDbTypeForConstructorFormat();
    internal static string get_SqlMetaData_NameTooLong();
    internal static string get_SqlMetaData_SpecifyBothSortOrderAndOrdinal();
    internal static string get_SqlMisc_AlreadyFilledMessage();
    internal static string get_SqlMisc_ArithOverflowMessage();
    internal static string get_SqlMisc_ClosedXmlReaderMessage();
    internal static string get_SqlMisc_CompareDiffCollationMessage();
    internal static string get_SqlMisc_ConcatDiffCollationMessage();
    internal static string get_SqlMisc_ConversionOverflowMessage();
    internal static string get_SqlMisc_DateTimeOverflowMessage();
    internal static string get_SqlMisc_DivideByZeroMessage();
    internal static string get_SqlMisc_FormatMessage();
    internal static string get_SqlMisc_InvalidArraySizeMessage();
    internal static string get_SqlMisc_InvalidDateTimeMessage();
    internal static string get_SqlMisc_InvalidFlagMessage();
    internal static string get_SqlMisc_InvalidOpStreamClosed();
    internal static string get_SqlMisc_InvalidOpStreamNonReadable();
    internal static string get_SqlMisc_InvalidOpStreamNonSeekable();
    internal static string get_SqlMisc_InvalidOpStreamNonWritable();
    internal static string get_SqlMisc_InvalidPrecScaleMessage();
    internal static string get_SqlMisc_MessageString();
    internal static string get_SqlMisc_NotFilledMessage();
    internal static string get_SqlMisc_NullString();
    internal static string get_SqlMisc_NullValueMessage();
    internal static string get_SqlMisc_NumeToDecOverflowMessage();
    internal static string get_SqlMisc_StreamErrorMessage();
    internal static string get_SqlMisc_SubclassMustOverride();
    internal static string get_SqlMisc_TimeZoneSpecifiedMessage();
    internal static string get_SqlMisc_TruncationMaxDataMessage();
    internal static string get_SqlMisc_TruncationMessage();
    internal static string get_SQLMSF_FailoverPartnerNotSupported();
    internal static string get_SQLNotify_AlreadyHasCommand();
    internal static string get_SqlParameter_DBNullNotSupportedForTVP();
    internal static string get_SqlParameter_InvalidTableDerivedPrecisionForTvp();
    internal static string get_SqlParameter_UnexpectedTypeNameForNonStruct();
    internal static string get_SqlParameter_UnsupportedTVPOutputParameter();
    internal static string get_SqlProvider_DuplicateSortOrdinal();
    internal static string get_SqlProvider_InvalidDataColumnMaxLength();
    internal static string get_SqlProvider_InvalidDataColumnType();
    internal static string get_SqlProvider_MissingSortOrdinal();
    internal static string get_SqlProvider_NotEnoughColumnsInStructuredType();
    internal static string get_SqlProvider_SortOrdinalGreaterThanFieldCount();
    internal static string get_SQLROR_FailoverNotSupported();
    internal static string get_SQLROR_InvalidRoutingInfo();
    internal static string get_SQLROR_RecursiveRoutingNotSupported();
    internal static string get_SQLROR_TimeoutAfterRoutingInfo();
    internal static string get_SQLROR_UnexpectedRoutingInfo();
    internal static string get_SQLUDT_InvalidSqlType();
    internal static string get_SqlUdt_InvalidUdtMessage();
    internal static string get_SQLUDT_InvalidUdtTypeName();
    internal static string get_SQLUDT_MaxByteSizeValue();
    internal static string get_SQLUDT_Unexpected();
    internal static string get_SQLUDT_UnexpectedUdtTypeName();
    internal static string get_SqlUdtReason_NoUdtAttribute();
    internal static string get_SSPIInvalidHandleType();
    internal static string get_TCE_AttestationInfoNotReturnedFromSQLServer();
    internal static string get_TCE_BatchedUpdateColumnEncryptionSettingMismatch();
    internal static string get_TCE_CannotCreateSqlColumnEncryptionEnclaveProvider();
    internal static string get_TCE_CannotGetSqlColumnEncryptionEnclaveProviderConfig();
    internal static string get_TCE_CanOnlyCallOnce();
    internal static string get_TCE_CertificateNotFound();
    internal static string get_TCE_CertificateNotFoundSysErr();
    internal static string get_TCE_CertificateWithNoPrivateKey();
    internal static string get_TCE_CertificateWithNoPrivateKeySysErr();
    internal static string get_TCE_ColumnDecryptionFailed();
    internal static string get_TCE_ColumnEncryptionKeysNotFound();
    internal static string get_TCE_ColumnMasterKeySignatureNotFound();
    internal static string get_TCE_ColumnMasterKeySignatureVerificationFailed();
    internal static string get_TCE_DecryptionFailed();
    internal static string get_TCE_EmptyArgumentInConstructorInternal();
    internal static string get_TCE_EmptyArgumentInternal();
    internal static string get_TCE_EmptyCertificateThumbprint();
    internal static string get_TCE_EmptyCertificateThumbprintSysErr();
    internal static string get_TCE_EmptyCngKeyId();
    internal static string get_TCE_EmptyCngKeyIdSysErr();
    internal static string get_TCE_EmptyCngName();
    internal static string get_TCE_EmptyCngNameSysErr();
    internal static string get_TCE_EmptyColumnEncryptionKey();
    internal static string get_TCE_EmptyCspKeyId();
    internal static string get_TCE_EmptyCspKeyIdSysErr();
    internal static string get_TCE_EmptyCspName();
    internal static string get_TCE_EmptyCspNameSysErr();
    internal static string get_TCE_EmptyEncryptedColumnEncryptionKey();
    internal static string get_TCE_EmptyProviderName();
    internal static string get_TCE_EnclaveComputationsNotSupported();
    internal static string get_TCE_EnclaveProviderNotFound();
    internal static string get_TCE_DbConnectionString_AttestationProtocol();
    internal static string get_TCE_EnclaveTypeNotSupported();
    internal static string get_TCE_AttestationProtocolNotSupportEnclaveType();
    internal static string get_TCE_AttestationProtocolNotSpecifiedForGeneratingEnclavePackage();
    internal static string get_TCE_EnclaveProvidersNotConfiguredForEnclaveBasedQuery();
    internal static string get_TCE_EnclaveTypeNotReturned();
    internal static string get_TCE_EnclaveTypeNullForEnclaveBasedQuery();
    internal static string get_TCE_ExceptionWhenGeneratingEnclavePackage();
    internal static string get_TCE_FailedToEncryptRegisterRulesBytePackage();
    internal static string get_TCE_InsufficientBuffer();
    internal static string get_TCE_InvalidAlgorithmVersion();
    internal static string get_TCE_InvalidAlgorithmVersionInEncryptedCEK();
    internal static string get_TCE_InvalidAttestationParameterUnableToConvertToUnsignedInt();
    internal static string get_TCE_InvalidAuthenticationTag();
    internal static string get_TCE_InvalidCertificateLocation();
    internal static string get_TCE_InvalidCertificateLocationSysErr();
    internal static string get_TCE_InvalidCertificatePath();
    internal static string get_TCE_InvalidCertificatePathSysErr();
    internal static string get_TCE_InvalidCertificateSignature();
    internal static string get_TCE_InvalidCertificateStore();
    internal static string get_TCE_InvalidCertificateStoreSysErr();
    internal static string get_TCE_InvalidCiphertextLengthInEncryptedCEK();
    internal static string get_TCE_InvalidCiphertextLengthInEncryptedCEKCng();
    internal static string get_TCE_InvalidCiphertextLengthInEncryptedCEKCsp();
    internal static string get_TCE_InvalidCipherTextSize();
    internal static string get_TCE_InvalidCngKey();
    internal static string get_TCE_InvalidCngKeySysErr();
    internal static string get_TCE_InvalidCngPath();
    internal static string get_TCE_InvalidCngPathSysErr();
    internal static string get_TCE_InvalidCspKeyId();
    internal static string get_TCE_InvalidCspKeyIdSysErr();
    internal static string get_TCE_InvalidCspName();
    internal static string get_TCE_InvalidCspNameSysErr();
    internal static string get_TCE_InvalidCspPath();
    internal static string get_TCE_InvalidCspPathSysErr();
    internal static string get_TCE_InvalidCustomKeyStoreProviderName();
    internal static string get_TCE_InvalidDatabaseIdUnableToCastToUnsignedInt();
    internal static string get_TCE_InvalidEncryptionKeyOrdinalEnclaveMetadata();
    internal static string get_TCE_InvalidEncryptionKeyOrdinalParameterMetadata();
    internal static string get_TCE_InvalidEncryptionType();
    internal static string get_TCE_InvalidKeyEncryptionAlgorithm();
    internal static string get_TCE_InvalidKeyEncryptionAlgorithmSysErr();
    internal static string get_TCE_InvalidKeyIdUnableToCastToUnsignedShort();
    internal static string get_TCE_InvalidKeySize();
    internal static string get_TCE_InvalidKeyStoreProviderName();
    internal static string get_TCE_InvalidSignature();
    internal static string get_TCE_InvalidSignatureInEncryptedCEK();
    internal static string get_TCE_InvalidSignatureInEncryptedCEKCng();
    internal static string get_TCE_InvalidSignatureInEncryptedCEKCsp();
    internal static string get_TCE_KeyDecryptionFailed();
    internal static string get_TCE_KeyDecryptionFailedCertStore();
    internal static string get_TCE_LargeCertificatePathLength();
    internal static string get_TCE_LargeCertificatePathLengthSysErr();
    internal static string get_TCE_MultipleRowsReturnedForAttestationInfo();
    internal static string get_TCE_NoAttestationUrlSpecifiedForEnclaveBasedQueryGeneratingEnclavePackage();
    internal static string get_TCE_NoAttestationUrlSpecifiedForEnclaveBasedQuerySpDescribe();
    internal static string get_TCE_NotSupportedByServer();
    internal static string get_TCE_NullArgumentInConstructorInternal();
    internal static string get_TCE_NullArgumentInternal();
    internal static string get_TCE_NullCertificatePath();
    internal static string get_TCE_NullCertificatePathSysErr();
    internal static string get_TCE_NullCipherText();
    internal static string get_TCE_NullCngPath();
    internal static string get_TCE_NullCngPathSysErr();
    internal static string get_TCE_NullColumnEncryptionAlgorithm();
    internal static string get_TCE_NullColumnEncryptionKey();
    internal static string get_TCE_NullColumnEncryptionKeySysErr();
    internal static string get_TCE_NullCspPath();
    internal static string get_TCE_NullCspPathSysErr();
    internal static string get_TCE_NullCustomKeyStoreProviderDictionary();
    internal static string get_TCE_NullEnclavePackageForEnclaveBasedQuery();
    internal static string get_TCE_NullEnclaveSessionDuringQueryExecution();
    internal static string get_TCE_NullEnclaveSessionReturnedFromProvider();
    internal static string get_TCE_NullEncryptedColumnEncryptionKey();
    internal static string get_TCE_NullKeyEncryptionAlgorithm();
    internal static string get_TCE_NullKeyEncryptionAlgorithmSysErr();
    internal static string get_TCE_NullPlainText();
    internal static string get_TCE_NullProviderValue();
    internal static string get_TCE_OffsetOutOfBounds();
    internal static string get_TCE_ParamDecryptionFailed();
    internal static string get_TCE_ParamEncryptionFailed();
    internal static string get_TCE_ParamEncryptionMetaDataMissing();
    internal static string get_TCE_ParamInvalidForceColumnEncryptionSetting();
    internal static string get_TCE_ParamUnExpectedEncryptionMetadata();
    internal static string get_TCE_ProcEncryptionMetaDataMissing();
    internal static string get_TCE_SequentialAccessNotSupportedOnEncryptedColumn();
    internal static string get_TCE_SqlColumnEncryptionEnclaveProviderNameCannotBeEmpty();
    internal static string get_TCE_StreamNotSupportOnEncryptedColumn();
    internal static string get_TCE_UnableToVerifyColumnMasterKeySignature();
    internal static string get_TCE_UnexpectedDescribeParamFormatAttestationInfo();
    internal static string get_TCE_UnexpectedDescribeParamFormatParameterMetadata();
    internal static string get_TCE_UnknownColumnEncryptionAlgorithm();
    internal static string get_TCE_UnknownColumnEncryptionAlgorithmId();
    internal static string get_TCE_UnrecognizedKeyStoreProviderName();
    internal static string get_TCE_UnsupportedDatatype();
    internal static string get_TCE_UnsupportedNormalizationVersion();
    internal static string get_TCE_UntrustedKeyPath();
    internal static string get_VerifyEnclaveDebuggable();
    internal static string get_VerifyEnclavePolicyFailedFormat();
    internal static string get_VerifyEnclaveReportFailed();
    internal static string get_VerifyEnclaveReportFormatFailed();
    internal static string get_VerifyHealthCertificateChainFormat();
}
internal class System.SRHelper : SR {
    private static SRHelper loader;
    private ResourceManager resources;
    private static CultureInfo CultureHelper { get; }
    public static ResourceManager Resources { get; }
    private static SRHelper();
    private static SRHelper GetLoader();
    private static CultureInfo get_CultureHelper();
    public static ResourceManager get_Resources();
    private static bool UsingResourceKeys();
    public static string GetResourceString(string res);
    public static string GetString(string res, Object[] args);
    public static string Format(string resourceFormat, Object[] args);
    public static string Format(string resourceFormat, object p1);
    public static string Format(string resourceFormat, object p1, object p2);
    public static string Format(string resourceFormat, object p1, object p2, object p3);
}
internal static class System.ThisAssembly : object {
    internal static string InformationalVersion;
}
