public class Microsoft.Data.OperationAbortedException : SystemException {
}
public class Microsoft.Data.Sql.SqlNotificationRequest : object {
    public string Options { get; public set; }
    public int Timeout { get; public set; }
    public string UserData { get; public set; }
    public SqlNotificationRequest(string userData, string options, int timeout);
    public string get_Options();
    public void set_Options(string value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public string get_UserData();
    public void set_UserData(string value);
}
public enum Microsoft.Data.SqlClient.ApplicationIntent : Enum {
    public int value__;
    public static ApplicationIntent ReadOnly;
    public static ApplicationIntent ReadWrite;
}
public class Microsoft.Data.SqlClient.DataClassification.ColumnSensitivity : object {
    public ReadOnlyCollection`1<SensitivityProperty> SensitivityProperties { get; }
    public ColumnSensitivity(IList`1<SensitivityProperty> sensitivityProperties);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<SensitivityProperty> get_SensitivityProperties();
}
public class Microsoft.Data.SqlClient.DataClassification.InformationType : object {
    public string Id { get; }
    public string Name { get; }
    public InformationType(string name, string id);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Name();
}
public class Microsoft.Data.SqlClient.DataClassification.Label : object {
    public string Id { get; }
    public string Name { get; }
    public Label(string name, string id);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Name();
}
public class Microsoft.Data.SqlClient.DataClassification.SensitivityClassification : object {
    public ReadOnlyCollection`1<ColumnSensitivity> ColumnSensitivities { get; }
    public ReadOnlyCollection`1<InformationType> InformationTypes { get; }
    public ReadOnlyCollection`1<Label> Labels { get; }
    public SensitivityClassification(IList`1<Label> labels, IList`1<InformationType> informationTypes, IList`1<ColumnSensitivity> columnSensitivity);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<ColumnSensitivity> get_ColumnSensitivities();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<InformationType> get_InformationTypes();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<Label> get_Labels();
}
public class Microsoft.Data.SqlClient.DataClassification.SensitivityProperty : object {
    public InformationType InformationType { get; }
    public Label Label { get; }
    public SensitivityProperty(Label label, InformationType informationType);
    [CompilerGeneratedAttribute]
public InformationType get_InformationType();
    [CompilerGeneratedAttribute]
public Label get_Label();
}
public class Microsoft.Data.SqlClient.OnChangeEventHandler : MulticastDelegate {
    public OnChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlNotificationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlNotificationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Microsoft.Data.SqlClient.PoolBlockingPeriod : Enum {
    public int value__;
    public static PoolBlockingPeriod Auto;
    public static PoolBlockingPeriod AlwaysBlock;
    public static PoolBlockingPeriod NeverBlock;
}
public enum Microsoft.Data.SqlClient.Server.DataAccessKind : Enum {
    public int value__;
    public static DataAccessKind None;
    public static DataAccessKind Read;
}
public enum Microsoft.Data.SqlClient.Server.Format : Enum {
    public int value__;
    public static Format Unknown;
    public static Format Native;
    public static Format UserDefined;
}
public interface Microsoft.Data.SqlClient.Server.IBinarySerialize {
    public abstract virtual void Read(BinaryReader r);
    public abstract virtual void Write(BinaryWriter w);
}
public class Microsoft.Data.SqlClient.Server.InvalidUdtException : SystemException {
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Data.SqlClient.Server.SqlDataRecord : object {
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public SqlDataRecord(SqlMetaData[] metaData);
    public virtual int get_FieldCount();
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    private sealed virtual override IDataReader System.Data.IDataRecord.GetData(int ordinal);
    public virtual string GetDataTypeName(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual DateTimeOffset GetDateTimeOffset(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual SqlBinary GetSqlBinary(int ordinal);
    public virtual SqlBoolean GetSqlBoolean(int ordinal);
    public virtual SqlByte GetSqlByte(int ordinal);
    public virtual SqlBytes GetSqlBytes(int ordinal);
    public virtual SqlChars GetSqlChars(int ordinal);
    public virtual SqlDateTime GetSqlDateTime(int ordinal);
    public virtual SqlDecimal GetSqlDecimal(int ordinal);
    public virtual SqlDouble GetSqlDouble(int ordinal);
    public virtual Type GetSqlFieldType(int ordinal);
    public virtual SqlGuid GetSqlGuid(int ordinal);
    public virtual SqlInt16 GetSqlInt16(int ordinal);
    public virtual SqlInt32 GetSqlInt32(int ordinal);
    public virtual SqlInt64 GetSqlInt64(int ordinal);
    public virtual SqlMetaData GetSqlMetaData(int ordinal);
    public virtual SqlMoney GetSqlMoney(int ordinal);
    public virtual SqlSingle GetSqlSingle(int ordinal);
    public virtual SqlString GetSqlString(int ordinal);
    public virtual object GetSqlValue(int ordinal);
    public virtual int GetSqlValues(Object[] values);
    public virtual SqlXml GetSqlXml(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual TimeSpan GetTimeSpan(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int ordinal);
    public virtual void SetBoolean(int ordinal, bool value);
    public virtual void SetByte(int ordinal, byte value);
    public virtual void SetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual void SetChar(int ordinal, char value);
    public virtual void SetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual void SetDateTime(int ordinal, DateTime value);
    public virtual void SetDateTimeOffset(int ordinal, DateTimeOffset value);
    public virtual void SetDBNull(int ordinal);
    public virtual void SetDecimal(int ordinal, decimal value);
    public virtual void SetDouble(int ordinal, double value);
    public virtual void SetFloat(int ordinal, float value);
    public virtual void SetGuid(int ordinal, Guid value);
    public virtual void SetInt16(int ordinal, short value);
    public virtual void SetInt32(int ordinal, int value);
    public virtual void SetInt64(int ordinal, long value);
    public virtual void SetSqlBinary(int ordinal, SqlBinary value);
    public virtual void SetSqlBoolean(int ordinal, SqlBoolean value);
    public virtual void SetSqlByte(int ordinal, SqlByte value);
    public virtual void SetSqlBytes(int ordinal, SqlBytes value);
    public virtual void SetSqlChars(int ordinal, SqlChars value);
    public virtual void SetSqlDateTime(int ordinal, SqlDateTime value);
    public virtual void SetSqlDecimal(int ordinal, SqlDecimal value);
    public virtual void SetSqlDouble(int ordinal, SqlDouble value);
    public virtual void SetSqlGuid(int ordinal, SqlGuid value);
    public virtual void SetSqlInt16(int ordinal, SqlInt16 value);
    public virtual void SetSqlInt32(int ordinal, SqlInt32 value);
    public virtual void SetSqlInt64(int ordinal, SqlInt64 value);
    public virtual void SetSqlMoney(int ordinal, SqlMoney value);
    public virtual void SetSqlSingle(int ordinal, SqlSingle value);
    public virtual void SetSqlString(int ordinal, SqlString value);
    public virtual void SetSqlXml(int ordinal, SqlXml value);
    public virtual void SetString(int ordinal, string value);
    public virtual void SetTimeSpan(int ordinal, TimeSpan value);
    public virtual void SetValue(int ordinal, object value);
    public virtual int SetValues(Object[] values);
}
[AttributeUsageAttribute("10624")]
public class Microsoft.Data.SqlClient.Server.SqlFacetAttribute : Attribute {
    public bool IsFixedLength { get; public set; }
    public bool IsNullable { get; public set; }
    public int MaxSize { get; public set; }
    public int Precision { get; public set; }
    public int Scale { get; public set; }
    public bool get_IsFixedLength();
    public void set_IsFixedLength(bool value);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    public int get_MaxSize();
    public void set_MaxSize(int value);
    public int get_Precision();
    public void set_Precision(int value);
    public int get_Scale();
    public void set_Scale(int value);
}
[AttributeUsageAttribute("64")]
public class Microsoft.Data.SqlClient.Server.SqlFunctionAttribute : Attribute {
    public bool IsDeterministic { get; public set; }
    public DataAccessKind DataAccess { get; public set; }
    public SystemDataAccessKind SystemDataAccess { get; public set; }
    public bool IsPrecise { get; public set; }
    public string Name { get; public set; }
    public string TableDefinition { get; public set; }
    public string FillRowMethodName { get; public set; }
    public bool get_IsDeterministic();
    public void set_IsDeterministic(bool value);
    public DataAccessKind get_DataAccess();
    public void set_DataAccess(DataAccessKind value);
    public SystemDataAccessKind get_SystemDataAccess();
    public void set_SystemDataAccess(SystemDataAccessKind value);
    public bool get_IsPrecise();
    public void set_IsPrecise(bool value);
    public string get_Name();
    public void set_Name(string value);
    public string get_TableDefinition();
    public void set_TableDefinition(string value);
    public string get_FillRowMethodName();
    public void set_FillRowMethodName(string value);
}
public class Microsoft.Data.SqlClient.Server.SqlMetaData : object {
    public SqlCompareOptions CompareOptions { get; }
    public DbType DbType { get; }
    public bool IsUniqueKey { get; }
    public long LocaleId { get; }
    public static long Max { get; }
    public long MaxLength { get; }
    public string Name { get; }
    public byte Precision { get; }
    public byte Scale { get; }
    public SortOrder SortOrder { get; }
    public int SortOrdinal { get; }
    public SqlDbType SqlDbType { get; }
    public Type Type { get; }
    public string TypeName { get; }
    public bool UseServerDefault { get; }
    public string XmlSchemaCollectionDatabase { get; }
    public string XmlSchemaCollectionName { get; }
    public string XmlSchemaCollectionOwningSchema { get; }
    public SqlMetaData(string name, SqlDbType dbType);
    public SqlMetaData(string name, SqlDbType dbType, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, byte precision, byte scale);
    public SqlMetaData(string name, SqlDbType dbType, byte precision, byte scale, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, byte precision, byte scale, long locale, SqlCompareOptions compareOptions, Type userDefinedType);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, long locale, SqlCompareOptions compareOptions);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, long locale, SqlCompareOptions compareOptions, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, string database, string owningSchema, string objectName);
    public SqlMetaData(string name, SqlDbType dbType, string database, string owningSchema, string objectName, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, Type userDefinedType);
    public SqlMetaData(string name, SqlDbType dbType, Type userDefinedType, string serverTypeName);
    public SqlMetaData(string name, SqlDbType dbType, Type userDefinedType, string serverTypeName, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlCompareOptions get_CompareOptions();
    public DbType get_DbType();
    public bool get_IsUniqueKey();
    public long get_LocaleId();
    public static long get_Max();
    public long get_MaxLength();
    public string get_Name();
    public byte get_Precision();
    public byte get_Scale();
    public SortOrder get_SortOrder();
    public int get_SortOrdinal();
    public SqlDbType get_SqlDbType();
    public Type get_Type();
    public string get_TypeName();
    public bool get_UseServerDefault();
    public string get_XmlSchemaCollectionDatabase();
    public string get_XmlSchemaCollectionName();
    public string get_XmlSchemaCollectionOwningSchema();
    public bool Adjust(bool value);
    public byte Adjust(byte value);
    public Byte[] Adjust(Byte[] value);
    public char Adjust(char value);
    public Char[] Adjust(Char[] value);
    public SqlBinary Adjust(SqlBinary value);
    public SqlBoolean Adjust(SqlBoolean value);
    public SqlByte Adjust(SqlByte value);
    public SqlBytes Adjust(SqlBytes value);
    public SqlChars Adjust(SqlChars value);
    public SqlDateTime Adjust(SqlDateTime value);
    public SqlDecimal Adjust(SqlDecimal value);
    public SqlDouble Adjust(SqlDouble value);
    public SqlGuid Adjust(SqlGuid value);
    public SqlInt16 Adjust(SqlInt16 value);
    public SqlInt32 Adjust(SqlInt32 value);
    public SqlInt64 Adjust(SqlInt64 value);
    public SqlMoney Adjust(SqlMoney value);
    public SqlSingle Adjust(SqlSingle value);
    public SqlString Adjust(SqlString value);
    public SqlXml Adjust(SqlXml value);
    public DateTime Adjust(DateTime value);
    public DateTimeOffset Adjust(DateTimeOffset value);
    public decimal Adjust(decimal value);
    public double Adjust(double value);
    public Guid Adjust(Guid value);
    public short Adjust(short value);
    public int Adjust(int value);
    public long Adjust(long value);
    public object Adjust(object value);
    public float Adjust(float value);
    public string Adjust(string value);
    public TimeSpan Adjust(TimeSpan value);
    public static SqlMetaData InferFromValue(object value, string name);
}
[AttributeUsageAttribute("64")]
public class Microsoft.Data.SqlClient.Server.SqlMethodAttribute : SqlFunctionAttribute {
    public bool OnNullCall { get; public set; }
    public bool IsMutator { get; public set; }
    public bool InvokeIfReceiverIsNull { get; public set; }
    public bool get_OnNullCall();
    public void set_OnNullCall(bool value);
    public bool get_IsMutator();
    public void set_IsMutator(bool value);
    public bool get_InvokeIfReceiverIsNull();
    public void set_InvokeIfReceiverIsNull(bool value);
}
[AttributeUsageAttribute("12")]
public class Microsoft.Data.SqlClient.Server.SqlUserDefinedAggregateAttribute : Attribute {
    public static int MaxByteSizeValue;
    public int MaxByteSize { get; public set; }
    public bool IsInvariantToDuplicates { get; public set; }
    public bool IsInvariantToNulls { get; public set; }
    public bool IsInvariantToOrder { get; public set; }
    public bool IsNullIfEmpty { get; public set; }
    public Format Format { get; }
    public string Name { get; public set; }
    public SqlUserDefinedAggregateAttribute(Format format);
    public int get_MaxByteSize();
    public void set_MaxByteSize(int value);
    public bool get_IsInvariantToDuplicates();
    public void set_IsInvariantToDuplicates(bool value);
    public bool get_IsInvariantToNulls();
    public void set_IsInvariantToNulls(bool value);
    public bool get_IsInvariantToOrder();
    public void set_IsInvariantToOrder(bool value);
    public bool get_IsNullIfEmpty();
    public void set_IsNullIfEmpty(bool value);
    public Format get_Format();
    public string get_Name();
    public void set_Name(string value);
}
[AttributeUsageAttribute("12")]
public class Microsoft.Data.SqlClient.Server.SqlUserDefinedTypeAttribute : Attribute {
    public int MaxByteSize { get; public set; }
    public bool IsFixedLength { get; public set; }
    public bool IsByteOrdered { get; public set; }
    public Format Format { get; }
    public string ValidationMethodName { get; public set; }
    public string Name { get; public set; }
    public SqlUserDefinedTypeAttribute(Format format);
    public int get_MaxByteSize();
    public void set_MaxByteSize(int value);
    public bool get_IsFixedLength();
    public void set_IsFixedLength(bool value);
    public bool get_IsByteOrdered();
    public void set_IsByteOrdered(bool value);
    public Format get_Format();
    public string get_ValidationMethodName();
    public void set_ValidationMethodName(string value);
    public string get_Name();
    public void set_Name(string value);
}
public enum Microsoft.Data.SqlClient.Server.SystemDataAccessKind : Enum {
    public int value__;
    public static SystemDataAccessKind None;
    public static SystemDataAccessKind Read;
}
public enum Microsoft.Data.SqlClient.SortOrder : Enum {
    public int value__;
    public static SortOrder Unspecified;
    public static SortOrder Ascending;
    public static SortOrder Descending;
}
public abstract class Microsoft.Data.SqlClient.SqlAuthenticationInitializer : object {
    public abstract virtual void Initialize();
}
public enum Microsoft.Data.SqlClient.SqlAuthenticationMethod : Enum {
    public int value__;
    public static SqlAuthenticationMethod ActiveDirectoryIntegrated;
    public static SqlAuthenticationMethod ActiveDirectoryInteractive;
    public static SqlAuthenticationMethod ActiveDirectoryPassword;
    public static SqlAuthenticationMethod NotSpecified;
    public static SqlAuthenticationMethod SqlPassword;
}
public class Microsoft.Data.SqlClient.SqlAuthenticationParameters : object {
    public SqlAuthenticationMethod AuthenticationMethod { get; }
    public string Authority { get; }
    public Guid ConnectionId { get; }
    public string DatabaseName { get; }
    public string Password { get; }
    public string Resource { get; }
    public string ServerName { get; }
    public string UserId { get; }
    protected SqlAuthenticationParameters(SqlAuthenticationMethod authenticationMethod, string serverName, string databaseName, string resource, string authority, string userId, string password, Guid connectionId);
    [CompilerGeneratedAttribute]
public SqlAuthenticationMethod get_AuthenticationMethod();
    [CompilerGeneratedAttribute]
public string get_Authority();
    [CompilerGeneratedAttribute]
public Guid get_ConnectionId();
    [CompilerGeneratedAttribute]
public string get_DatabaseName();
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
public string get_ServerName();
    [CompilerGeneratedAttribute]
public string get_UserId();
}
public abstract class Microsoft.Data.SqlClient.SqlAuthenticationProvider : object {
    public abstract virtual Task`1<SqlAuthenticationToken> AcquireTokenAsync(SqlAuthenticationParameters parameters);
    public virtual void BeforeLoad(SqlAuthenticationMethod authenticationMethod);
    public virtual void BeforeUnload(SqlAuthenticationMethod authenticationMethod);
    public static SqlAuthenticationProvider GetProvider(SqlAuthenticationMethod authenticationMethod);
    public abstract virtual bool IsSupported(SqlAuthenticationMethod authenticationMethod);
    public static bool SetProvider(SqlAuthenticationMethod authenticationMethod, SqlAuthenticationProvider provider);
}
public class Microsoft.Data.SqlClient.SqlAuthenticationToken : object {
    public string AccessToken { get; }
    public DateTimeOffset ExpiresOn { get; }
    public SqlAuthenticationToken(string accessToken, DateTimeOffset expiresOn);
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_ExpiresOn();
}
public class Microsoft.Data.SqlClient.SqlBulkCopy : object {
    public int BatchSize { get; public set; }
    public int BulkCopyTimeout { get; public set; }
    public bool EnableStreaming { get; public set; }
    public SqlBulkCopyColumnMappingCollection ColumnMappings { get; }
    public string DestinationTableName { get; public set; }
    public int NotifyAfter { get; public set; }
    public SqlBulkCopy(SqlConnection connection);
    public SqlBulkCopy(SqlConnection connection, SqlBulkCopyOptions copyOptions, SqlTransaction externalTransaction);
    public SqlBulkCopy(string connectionString);
    public SqlBulkCopy(string connectionString, SqlBulkCopyOptions copyOptions);
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public int get_BulkCopyTimeout();
    public void set_BulkCopyTimeout(int value);
    public bool get_EnableStreaming();
    public void set_EnableStreaming(bool value);
    public SqlBulkCopyColumnMappingCollection get_ColumnMappings();
    public string get_DestinationTableName();
    public void set_DestinationTableName(string value);
    public int get_NotifyAfter();
    public void set_NotifyAfter(int value);
    public void add_SqlRowsCopied(SqlRowsCopiedEventHandler value);
    public void remove_SqlRowsCopied(SqlRowsCopiedEventHandler value);
    public void Close();
    private sealed virtual override void System.IDisposable.Dispose();
    public void WriteToServer(DbDataReader reader);
    public void WriteToServer(DataTable table);
    public void WriteToServer(DataTable table, DataRowState rowState);
    public void WriteToServer(DataRow[] rows);
    public void WriteToServer(IDataReader reader);
    public Task WriteToServerAsync(DbDataReader reader);
    public Task WriteToServerAsync(DbDataReader reader, CancellationToken cancellationToken);
    public Task WriteToServerAsync(DataRow[] rows);
    public Task WriteToServerAsync(DataRow[] rows, CancellationToken cancellationToken);
    public Task WriteToServerAsync(DataTable table);
    public Task WriteToServerAsync(DataTable table, DataRowState rowState);
    public Task WriteToServerAsync(DataTable table, DataRowState rowState, CancellationToken cancellationToken);
    public Task WriteToServerAsync(DataTable table, CancellationToken cancellationToken);
    public Task WriteToServerAsync(IDataReader reader);
    public Task WriteToServerAsync(IDataReader reader, CancellationToken cancellationToken);
}
public class Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping : object {
    public string DestinationColumn { get; public set; }
    public int DestinationOrdinal { get; public set; }
    public string SourceColumn { get; public set; }
    public int SourceOrdinal { get; public set; }
    public SqlBulkCopyColumnMapping(int sourceColumnOrdinal, int destinationOrdinal);
    public SqlBulkCopyColumnMapping(int sourceColumnOrdinal, string destinationColumn);
    public SqlBulkCopyColumnMapping(string sourceColumn, int destinationOrdinal);
    public SqlBulkCopyColumnMapping(string sourceColumn, string destinationColumn);
    public string get_DestinationColumn();
    public void set_DestinationColumn(string value);
    public int get_DestinationOrdinal();
    public void set_DestinationOrdinal(int value);
    public string get_SourceColumn();
    public void set_SourceColumn(string value);
    public int get_SourceOrdinal();
    public void set_SourceOrdinal(int value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection : CollectionBase {
    public SqlBulkCopyColumnMapping Item { get; }
    public SqlBulkCopyColumnMapping get_Item(int index);
    public SqlBulkCopyColumnMapping Add(SqlBulkCopyColumnMapping bulkCopyColumnMapping);
    public SqlBulkCopyColumnMapping Add(int sourceColumnIndex, int destinationColumnIndex);
    public SqlBulkCopyColumnMapping Add(int sourceColumnIndex, string destinationColumn);
    public SqlBulkCopyColumnMapping Add(string sourceColumn, int destinationColumnIndex);
    public SqlBulkCopyColumnMapping Add(string sourceColumn, string destinationColumn);
    public void Clear();
    public bool Contains(SqlBulkCopyColumnMapping value);
    public void CopyTo(SqlBulkCopyColumnMapping[] array, int index);
    public int IndexOf(SqlBulkCopyColumnMapping value);
    public void Insert(int index, SqlBulkCopyColumnMapping value);
    public void Remove(SqlBulkCopyColumnMapping value);
    public void RemoveAt(int index);
}
[FlagsAttribute]
public enum Microsoft.Data.SqlClient.SqlBulkCopyOptions : Enum {
    public int value__;
    public static SqlBulkCopyOptions AllowEncryptedValueModifications;
    public static SqlBulkCopyOptions CheckConstraints;
    public static SqlBulkCopyOptions Default;
    public static SqlBulkCopyOptions FireTriggers;
    public static SqlBulkCopyOptions KeepIdentity;
    public static SqlBulkCopyOptions KeepNulls;
    public static SqlBulkCopyOptions TableLock;
    public static SqlBulkCopyOptions UseInternalTransaction;
}
public class Microsoft.Data.SqlClient.SqlClientFactory : DbProviderFactory {
    public static SqlClientFactory Instance;
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
}
public static class Microsoft.Data.SqlClient.SqlClientMetaDataCollectionNames : object {
    public static string Columns;
    public static string Databases;
    public static string ForeignKeys;
    public static string IndexColumns;
    public static string Indexes;
    public static string Parameters;
    public static string ProcedureColumns;
    public static string Procedures;
    public static string Tables;
    public static string UserDefinedTypes;
    public static string Users;
    public static string ViewColumns;
    public static string Views;
}
public class Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider : SqlColumnEncryptionKeyStoreProvider {
    public static string ProviderName;
    public virtual Byte[] DecryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] encryptedColumnEncryptionKey);
    public virtual Byte[] EncryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] columnEncryptionKey);
    public virtual Byte[] SignColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations);
    public virtual bool VerifyColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations, Byte[] signature);
}
public class Microsoft.Data.SqlClient.SqlColumnEncryptionCngProvider : SqlColumnEncryptionKeyStoreProvider {
    public static string ProviderName;
    public virtual Byte[] DecryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] encryptedColumnEncryptionKey);
    public virtual Byte[] EncryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] columnEncryptionKey);
    public virtual Byte[] SignColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations);
    public virtual bool VerifyColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations, Byte[] signature);
}
public class Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider : SqlColumnEncryptionKeyStoreProvider {
    public static string ProviderName;
    public virtual Byte[] DecryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] encryptedColumnEncryptionKey);
    public virtual Byte[] EncryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] columnEncryptionKey);
    public virtual Byte[] SignColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations);
    public virtual bool VerifyColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations, Byte[] signature);
}
public abstract class Microsoft.Data.SqlClient.SqlColumnEncryptionEnclaveProvider : object {
    public abstract virtual void CreateEnclaveSession(Byte[] enclaveAttestationInfo, ECDiffieHellmanCng clientDiffieHellmanKey, string attestationUrl, string servername, SqlEnclaveSession& sqlEnclaveSession, Int64& counter);
    public abstract virtual SqlEnclaveAttestationParameters GetAttestationParameters();
    public abstract virtual void GetEnclaveSession(string serverName, string attestationUrl, SqlEnclaveSession& sqlEnclaveSession, Int64& counter);
    public abstract virtual void InvalidateEnclaveSession(string serverName, string enclaveAttestationUrl, SqlEnclaveSession enclaveSession);
}
public abstract class Microsoft.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider : object {
    public abstract virtual Byte[] DecryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] encryptedColumnEncryptionKey);
    public abstract virtual Byte[] EncryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] columnEncryptionKey);
    public virtual Byte[] SignColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations);
    public virtual bool VerifyColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations, Byte[] signature);
}
[DefaultEventAttribute("RecordsAffected")]
[DesignerAttribute("Microsoft.VSDesigner.Data.VS.SqlCommandDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemAttribute("True")]
public class Microsoft.Data.SqlClient.SqlCommand : DbCommand {
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.SQL.Design.SqlCommandTextEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[RefreshPropertiesAttribute("1")]
public string CommandText { get; public set; }
    public int CommandTimeout { get; public set; }
    [DefaultValueAttribute("1")]
[RefreshPropertiesAttribute("1")]
public CommandType CommandType { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public SqlConnection Connection { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    protected DbParameterCollection DbParameterCollection { get; }
    protected DbTransaction DbTransaction { get; protected set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("True")]
[DesignOnlyAttribute("True")]
[EditorBrowsableAttribute("1")]
public bool DesignTimeVisible { get; public set; }
    public SqlParameterCollection Parameters { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public SqlTransaction Transaction { get; public set; }
    [DefaultValueAttribute("3")]
public UpdateRowSource UpdatedRowSource { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public SqlNotificationRequest Notification { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public SqlCommandColumnEncryptionSetting ColumnEncryptionSetting { get; }
    public SqlCommand(string cmdText);
    public SqlCommand(string cmdText, SqlConnection connection);
    public SqlCommand(string cmdText, SqlConnection connection, SqlTransaction transaction);
    public SqlCommand(string cmdText, SqlConnection connection, SqlTransaction transaction, SqlCommandColumnEncryptionSetting columnEncryptionSetting);
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public SqlConnection get_Connection();
    public void set_Connection(SqlConnection value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    protected virtual DbParameterCollection get_DbParameterCollection();
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    public SqlParameterCollection get_Parameters();
    public SqlTransaction get_Transaction();
    public void set_Transaction(SqlTransaction value);
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    public void add_StatementCompleted(StatementCompletedEventHandler value);
    public void remove_StatementCompleted(StatementCompletedEventHandler value);
    public IAsyncResult BeginExecuteNonQuery();
    public IAsyncResult BeginExecuteNonQuery(AsyncCallback callback, object stateObject);
    public IAsyncResult BeginExecuteReader();
    public IAsyncResult BeginExecuteReader(AsyncCallback callback, object stateObject);
    public IAsyncResult BeginExecuteReader(AsyncCallback callback, object stateObject, CommandBehavior behavior);
    public IAsyncResult BeginExecuteReader(CommandBehavior behavior);
    public IAsyncResult BeginExecuteXmlReader();
    public IAsyncResult BeginExecuteXmlReader(AsyncCallback callback, object stateObject);
    public virtual void Cancel();
    private sealed virtual override object System.ICloneable.Clone();
    public SqlCommand Clone();
    protected virtual DbParameter CreateDbParameter();
    public SqlParameter CreateParameter();
    public int EndExecuteNonQuery(IAsyncResult asyncResult);
    public SqlDataReader EndExecuteReader(IAsyncResult asyncResult);
    public XmlReader EndExecuteXmlReader(IAsyncResult asyncResult);
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public virtual int ExecuteNonQuery();
    public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    public SqlDataReader ExecuteReader();
    public SqlDataReader ExecuteReader(CommandBehavior behavior);
    public Task`1<SqlDataReader> ExecuteReaderAsync();
    public Task`1<SqlDataReader> ExecuteReaderAsync(CommandBehavior behavior);
    public Task`1<SqlDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public Task`1<SqlDataReader> ExecuteReaderAsync(CancellationToken cancellationToken);
    public virtual object ExecuteScalar();
    public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    public XmlReader ExecuteXmlReader();
    public Task`1<XmlReader> ExecuteXmlReaderAsync();
    public Task`1<XmlReader> ExecuteXmlReaderAsync(CancellationToken cancellationToken);
    public virtual void Prepare();
    public SqlNotificationRequest get_Notification();
    public void set_Notification(SqlNotificationRequest value);
    [DesignerSerializationVisibilityAttribute("2")]
public void ResetCommandTimeout();
    protected virtual void Dispose(bool disposing);
    public SqlCommandColumnEncryptionSetting get_ColumnEncryptionSetting();
}
public class Microsoft.Data.SqlClient.SqlCommandBuilder : DbCommandBuilder {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public CatalogLocation CatalogLocation { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public string CatalogSeparator { get; public set; }
    [DefaultValueAttribute("")]
public SqlDataAdapter DataAdapter { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public string QuotePrefix { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public string QuoteSuffix { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public string SchemaSeparator { get; public set; }
    public SqlCommandBuilder(SqlDataAdapter adapter);
    public virtual CatalogLocation get_CatalogLocation();
    public virtual void set_CatalogLocation(CatalogLocation value);
    public virtual string get_CatalogSeparator();
    public virtual void set_CatalogSeparator(string value);
    public SqlDataAdapter get_DataAdapter();
    public void set_DataAdapter(SqlDataAdapter value);
    public static void DeriveParameters(SqlCommand command);
    public virtual string get_QuotePrefix();
    public virtual void set_QuotePrefix(string value);
    public virtual string get_QuoteSuffix();
    public virtual void set_QuoteSuffix(string value);
    public virtual string get_SchemaSeparator();
    public virtual void set_SchemaSeparator(string value);
    protected virtual void ApplyParameterInfo(DbParameter parameter, DataRow datarow, StatementType statementType, bool whereClause);
    public SqlCommand GetDeleteCommand();
    public SqlCommand GetDeleteCommand(bool useColumnsForParameterNames);
    public SqlCommand GetInsertCommand();
    public SqlCommand GetInsertCommand(bool useColumnsForParameterNames);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterName(string parameterName);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    protected virtual DataTable GetSchemaTable(DbCommand srcCommand);
    public SqlCommand GetUpdateCommand();
    public SqlCommand GetUpdateCommand(bool useColumnsForParameterNames);
    protected virtual DbCommand InitializeCommand(DbCommand command);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
}
public enum Microsoft.Data.SqlClient.SqlCommandColumnEncryptionSetting : Enum {
    public int value__;
    public static SqlCommandColumnEncryptionSetting Disabled;
    public static SqlCommandColumnEncryptionSetting Enabled;
    public static SqlCommandColumnEncryptionSetting ResultSetOnly;
    public static SqlCommandColumnEncryptionSetting UseConnectionSetting;
}
[DefaultEventAttribute("InfoMessage")]
public class Microsoft.Data.SqlClient.SqlConnection : DbConnection {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string AccessToken { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public Guid ClientConnectionId { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.SQL.Design.SqlConnectionStringEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[RefreshPropertiesAttribute("1")]
[SettingsBindableAttribute("True")]
public string ConnectionString { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public int ConnectionTimeout { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public SqlCredential Credential { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public string Database { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
public string DataSource { get; }
    public bool FireInfoMessageEventOnUserErrors { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public int PacketSize { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string ServerVersion { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ConnectionState State { get; }
    [DefaultValueAttribute("False")]
public bool StatisticsEnabled { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public string WorkstationId { get; }
    public static TimeSpan ColumnEncryptionKeyCacheTtl { get; public set; }
    public static bool ColumnEncryptionQueryMetadataCacheEnabled { get; public set; }
    public static IDictionary`2<string, IList`1<string>> ColumnEncryptionTrustedMasterKeyPaths { get; }
    public SqlConnection(string connectionString);
    public SqlConnection(string connectionString, SqlCredential credential);
    public string get_AccessToken();
    public void set_AccessToken(string value);
    public Guid get_ClientConnectionId();
    private sealed virtual override object System.ICloneable.Clone();
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public virtual int get_ConnectionTimeout();
    public SqlCredential get_Credential();
    public void set_Credential(SqlCredential value);
    public virtual string get_Database();
    public virtual string get_DataSource();
    public bool get_FireInfoMessageEventOnUserErrors();
    public void set_FireInfoMessageEventOnUserErrors(bool value);
    public int get_PacketSize();
    public virtual string get_ServerVersion();
    public virtual ConnectionState get_State();
    public bool get_StatisticsEnabled();
    public void set_StatisticsEnabled(bool value);
    public string get_WorkstationId();
    public void add_InfoMessage(SqlInfoMessageEventHandler value);
    public void remove_InfoMessage(SqlInfoMessageEventHandler value);
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public SqlTransaction BeginTransaction();
    public SqlTransaction BeginTransaction(IsolationLevel iso);
    public SqlTransaction BeginTransaction(IsolationLevel iso, string transactionName);
    public SqlTransaction BeginTransaction(string transactionName);
    public virtual void ChangeDatabase(string database);
    public static void ChangePassword(string connectionString, SqlCredential credential, SecureString newSecurePassword);
    public static void ChangePassword(string connectionString, string newPassword);
    public static void ClearAllPools();
    public static void ClearPool(SqlConnection connection);
    public virtual void Close();
    public SqlCommand CreateCommand();
    protected virtual DbCommand CreateDbCommand();
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    public virtual void Open();
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    public void ResetStatistics();
    public IDictionary RetrieveStatistics();
    protected virtual void Dispose(bool disposing);
    public static TimeSpan get_ColumnEncryptionKeyCacheTtl();
    public static void set_ColumnEncryptionKeyCacheTtl(TimeSpan value);
    public static bool get_ColumnEncryptionQueryMetadataCacheEnabled();
    public static void set_ColumnEncryptionQueryMetadataCacheEnabled(bool value);
    public static IDictionary`2<string, IList`1<string>> get_ColumnEncryptionTrustedMasterKeyPaths();
    public static void RegisterColumnEncryptionKeyStoreProviders(IDictionary`2<string, SqlColumnEncryptionKeyStoreProvider> customProviders);
}
public enum Microsoft.Data.SqlClient.SqlConnectionAttestationProtocol : Enum {
    public int value__;
    public static SqlConnectionAttestationProtocol NotSpecified;
    public static SqlConnectionAttestationProtocol AAS;
    public static SqlConnectionAttestationProtocol HGS;
}
public enum Microsoft.Data.SqlClient.SqlConnectionColumnEncryptionSetting : Enum {
    public int value__;
    public static SqlConnectionColumnEncryptionSetting Disabled;
    public static SqlConnectionColumnEncryptionSetting Enabled;
}
[DefaultMemberAttribute("Item")]
[DefaultPropertyAttribute("DataSource")]
public class Microsoft.Data.SqlClient.SqlConnectionStringBuilder : DbConnectionStringBuilder {
    [DisplayNameAttribute("ApplicationIntent")]
[RefreshPropertiesAttribute("1")]
public ApplicationIntent ApplicationIntent { get; public set; }
    [DisplayNameAttribute("Application Name")]
[RefreshPropertiesAttribute("1")]
public string ApplicationName { get; public set; }
    [DisplayNameAttribute("AttachDbFilename")]
[EditorAttribute("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[RefreshPropertiesAttribute("1")]
public string AttachDBFilename { get; public set; }
    [DisplayNameAttribute("Authentication")]
[RefreshPropertiesAttribute("1")]
public SqlAuthenticationMethod Authentication { get; public set; }
    [DisplayNameAttribute("ConnectRetryCount")]
[RefreshPropertiesAttribute("1")]
public int ConnectRetryCount { get; public set; }
    [DisplayNameAttribute("ConnectRetryInterval")]
[RefreshPropertiesAttribute("1")]
public int ConnectRetryInterval { get; public set; }
    [DisplayNameAttribute("Connect Timeout")]
[RefreshPropertiesAttribute("1")]
public int ConnectTimeout { get; public set; }
    [DisplayNameAttribute("Current Language")]
[RefreshPropertiesAttribute("1")]
public string CurrentLanguage { get; public set; }
    [DisplayNameAttribute("Data Source")]
[RefreshPropertiesAttribute("1")]
public string DataSource { get; public set; }
    [DisplayNameAttribute("Encrypt")]
[RefreshPropertiesAttribute("1")]
public bool Encrypt { get; public set; }
    [DisplayNameAttribute("Enlist")]
[RefreshPropertiesAttribute("1")]
public bool Enlist { get; public set; }
    [DisplayNameAttribute("Failover Partner")]
[RefreshPropertiesAttribute("1")]
public string FailoverPartner { get; public set; }
    [DisplayNameAttribute("Initial Catalog")]
[RefreshPropertiesAttribute("1")]
public string InitialCatalog { get; public set; }
    [DisplayNameAttribute("Integrated Security")]
[RefreshPropertiesAttribute("1")]
public bool IntegratedSecurity { get; public set; }
    public bool IsFixedSize { get; }
    public object Item { get; public set; }
    public ICollection Keys { get; }
    [DisplayNameAttribute("Load Balance Timeout")]
[RefreshPropertiesAttribute("1")]
public int LoadBalanceTimeout { get; public set; }
    [DisplayNameAttribute("Max Pool Size")]
[RefreshPropertiesAttribute("1")]
public int MaxPoolSize { get; public set; }
    [DisplayNameAttribute("Min Pool Size")]
[RefreshPropertiesAttribute("1")]
public int MinPoolSize { get; public set; }
    [DisplayNameAttribute("MultipleActiveResultSets")]
[RefreshPropertiesAttribute("1")]
public bool MultipleActiveResultSets { get; public set; }
    [DisplayNameAttribute("MultiSubnetFailover")]
[RefreshPropertiesAttribute("1")]
public bool MultiSubnetFailover { get; public set; }
    [DisplayNameAttribute("Packet Size")]
[RefreshPropertiesAttribute("1")]
public int PacketSize { get; public set; }
    [DisplayNameAttribute("Password")]
[PasswordPropertyTextAttribute("True")]
[RefreshPropertiesAttribute("1")]
public string Password { get; public set; }
    [DisplayNameAttribute("Persist Security Info")]
[RefreshPropertiesAttribute("1")]
public bool PersistSecurityInfo { get; public set; }
    [DisplayNameAttribute("Pooling")]
[RefreshPropertiesAttribute("1")]
public bool Pooling { get; public set; }
    [DisplayNameAttribute("Replication")]
[RefreshPropertiesAttribute("1")]
public bool Replication { get; public set; }
    [DisplayNameAttribute("Transaction Binding")]
[RefreshPropertiesAttribute("1")]
public string TransactionBinding { get; public set; }
    [DisplayNameAttribute("TrustServerCertificate")]
[RefreshPropertiesAttribute("1")]
public bool TrustServerCertificate { get; public set; }
    [DisplayNameAttribute("Type System Version")]
[RefreshPropertiesAttribute("1")]
public string TypeSystemVersion { get; public set; }
    [DisplayNameAttribute("User ID")]
[RefreshPropertiesAttribute("1")]
public string UserID { get; public set; }
    [DisplayNameAttribute("User Instance")]
[RefreshPropertiesAttribute("1")]
public bool UserInstance { get; public set; }
    public ICollection Values { get; }
    [DisplayNameAttribute("Workstation ID")]
[RefreshPropertiesAttribute("1")]
public string WorkstationID { get; public set; }
    public PoolBlockingPeriod PoolBlockingPeriod { get; public set; }
    public SqlConnectionColumnEncryptionSetting ColumnEncryptionSetting { get; public set; }
    public string EnclaveAttestationUrl { get; public set; }
    public SqlConnectionAttestationProtocol AttestationProtocol { get; public set; }
    public SqlConnectionStringBuilder(string connectionString);
    public ApplicationIntent get_ApplicationIntent();
    public void set_ApplicationIntent(ApplicationIntent value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_AttachDBFilename();
    public void set_AttachDBFilename(string value);
    public SqlAuthenticationMethod get_Authentication();
    public void set_Authentication(SqlAuthenticationMethod value);
    public int get_ConnectRetryCount();
    public void set_ConnectRetryCount(int value);
    public int get_ConnectRetryInterval();
    public void set_ConnectRetryInterval(int value);
    public int get_ConnectTimeout();
    public void set_ConnectTimeout(int value);
    public string get_CurrentLanguage();
    public void set_CurrentLanguage(string value);
    public string get_DataSource();
    public void set_DataSource(string value);
    public bool get_Encrypt();
    public void set_Encrypt(bool value);
    public bool get_Enlist();
    public void set_Enlist(bool value);
    public string get_FailoverPartner();
    public void set_FailoverPartner(string value);
    public string get_InitialCatalog();
    public void set_InitialCatalog(string value);
    public bool get_IntegratedSecurity();
    public void set_IntegratedSecurity(bool value);
    public virtual bool get_IsFixedSize();
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public virtual ICollection get_Keys();
    public int get_LoadBalanceTimeout();
    public void set_LoadBalanceTimeout(int value);
    public int get_MaxPoolSize();
    public void set_MaxPoolSize(int value);
    public int get_MinPoolSize();
    public void set_MinPoolSize(int value);
    public bool get_MultipleActiveResultSets();
    public void set_MultipleActiveResultSets(bool value);
    public bool get_MultiSubnetFailover();
    public void set_MultiSubnetFailover(bool value);
    public int get_PacketSize();
    public void set_PacketSize(int value);
    public string get_Password();
    public void set_Password(string value);
    public bool get_PersistSecurityInfo();
    public void set_PersistSecurityInfo(bool value);
    public bool get_Pooling();
    public void set_Pooling(bool value);
    public bool get_Replication();
    public void set_Replication(bool value);
    public string get_TransactionBinding();
    public void set_TransactionBinding(string value);
    public bool get_TrustServerCertificate();
    public void set_TrustServerCertificate(bool value);
    public string get_TypeSystemVersion();
    public void set_TypeSystemVersion(string value);
    public string get_UserID();
    public void set_UserID(string value);
    public bool get_UserInstance();
    public void set_UserInstance(bool value);
    public virtual ICollection get_Values();
    public string get_WorkstationID();
    public void set_WorkstationID(string value);
    public virtual void Clear();
    public virtual bool ContainsKey(string keyword);
    public virtual bool Remove(string keyword);
    public virtual bool ShouldSerialize(string keyword);
    public virtual bool TryGetValue(string keyword, Object& value);
    public PoolBlockingPeriod get_PoolBlockingPeriod();
    public void set_PoolBlockingPeriod(PoolBlockingPeriod value);
    public SqlConnectionColumnEncryptionSetting get_ColumnEncryptionSetting();
    public void set_ColumnEncryptionSetting(SqlConnectionColumnEncryptionSetting value);
    public string get_EnclaveAttestationUrl();
    public void set_EnclaveAttestationUrl(string value);
    public SqlConnectionAttestationProtocol get_AttestationProtocol();
    public void set_AttestationProtocol(SqlConnectionAttestationProtocol value);
}
public class Microsoft.Data.SqlClient.SqlCredential : object {
    public SecureString Password { get; }
    public string UserId { get; }
    public SqlCredential(string userId, SecureString password);
    public SecureString get_Password();
    public string get_UserId();
}
[DefaultEventAttribute("RowUpdated")]
[DesignerAttribute("Microsoft.VSDesigner.Data.VS.SqlDataAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemAttribute("Microsoft.VSDesigner.Data.VS.SqlDataAdapterToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class Microsoft.Data.SqlClient.SqlDataAdapter : DbDataAdapter {
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public SqlCommand DeleteCommand { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public SqlCommand InsertCommand { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public SqlCommand SelectCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; private set; }
    private IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; private set; }
    private IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; private set; }
    private IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; private set; }
    public int UpdateBatchSize { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public SqlCommand UpdateCommand { get; public set; }
    public SqlDataAdapter(SqlCommand selectCommand);
    public SqlDataAdapter(string selectCommandText, SqlConnection selectConnection);
    public SqlDataAdapter(string selectCommandText, string selectConnectionString);
    public SqlCommand get_DeleteCommand();
    public void set_DeleteCommand(SqlCommand value);
    public SqlCommand get_InsertCommand();
    public void set_InsertCommand(SqlCommand value);
    public SqlCommand get_SelectCommand();
    public void set_SelectCommand(SqlCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_InsertCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_SelectCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value);
    public virtual int get_UpdateBatchSize();
    public virtual void set_UpdateBatchSize(int value);
    public SqlCommand get_UpdateCommand();
    public void set_UpdateCommand(SqlCommand value);
    public void add_RowUpdated(SqlRowUpdatedEventHandler value);
    public void remove_RowUpdated(SqlRowUpdatedEventHandler value);
    public void add_RowUpdating(SqlRowUpdatingEventHandler value);
    public void remove_RowUpdating(SqlRowUpdatingEventHandler value);
    protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
    private sealed virtual override object System.ICloneable.Clone();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Data.SqlClient.SqlDataReader : DbDataReader {
    protected SqlConnection Connection { get; }
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public object Item { get; }
    public object Item { get; }
    public int RecordsAffected { get; }
    public SensitivityClassification SensitivityClassification { get; }
    public int VisibleFieldCount { get; }
    protected SqlConnection get_Connection();
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public virtual object get_Item(int i);
    public virtual object get_Item(string name);
    public virtual int get_RecordsAffected();
    [CompilerGeneratedAttribute]
public SensitivityClassification get_SensitivityClassification();
    public virtual int get_VisibleFieldCount();
    public virtual void Close();
    public virtual bool GetBoolean(int i);
    public virtual byte GetByte(int i);
    public virtual long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    [EditorBrowsableAttribute("1")]
public virtual char GetChar(int i);
    public virtual long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public virtual string GetDataTypeName(int i);
    public virtual DateTime GetDateTime(int i);
    public virtual DateTimeOffset GetDateTimeOffset(int i);
    public virtual decimal GetDecimal(int i);
    public virtual double GetDouble(int i);
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetFieldType(int i);
    public virtual T GetFieldValue(int i);
    public virtual Task`1<T> GetFieldValueAsync(int i, CancellationToken cancellationToken);
    public virtual float GetFloat(int i);
    public virtual Guid GetGuid(int i);
    public virtual short GetInt16(int i);
    public virtual int GetInt32(int i);
    public virtual long GetInt64(int i);
    public virtual string GetName(int i);
    public virtual int GetOrdinal(string name);
    public virtual Type GetProviderSpecificFieldType(int i);
    public virtual object GetProviderSpecificValue(int i);
    public virtual int GetProviderSpecificValues(Object[] values);
    public virtual SqlBinary GetSqlBinary(int i);
    public virtual SqlBoolean GetSqlBoolean(int i);
    public virtual SqlByte GetSqlByte(int i);
    public virtual SqlBytes GetSqlBytes(int i);
    public virtual SqlChars GetSqlChars(int i);
    public virtual SqlDateTime GetSqlDateTime(int i);
    public virtual SqlDecimal GetSqlDecimal(int i);
    public virtual SqlDouble GetSqlDouble(int i);
    public virtual SqlGuid GetSqlGuid(int i);
    public virtual SqlInt16 GetSqlInt16(int i);
    public virtual SqlInt32 GetSqlInt32(int i);
    public virtual SqlInt64 GetSqlInt64(int i);
    public virtual SqlMoney GetSqlMoney(int i);
    public virtual SqlSingle GetSqlSingle(int i);
    public virtual SqlString GetSqlString(int i);
    public virtual object GetSqlValue(int i);
    public virtual int GetSqlValues(Object[] values);
    public virtual SqlXml GetSqlXml(int i);
    public virtual DataTable GetSchemaTable();
    public virtual Stream GetStream(int i);
    public virtual string GetString(int i);
    public virtual TextReader GetTextReader(int i);
    public virtual TimeSpan GetTimeSpan(int i);
    public virtual object GetValue(int i);
    public virtual int GetValues(Object[] values);
    public virtual XmlReader GetXmlReader(int i);
    protected internal bool IsCommandBehavior(CommandBehavior condition);
    public virtual bool IsDBNull(int i);
    public virtual Task`1<bool> IsDBNullAsync(int i, CancellationToken cancellationToken);
    public virtual bool NextResult();
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    public virtual bool Read();
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
private sealed virtual override IDataReader System.Data.IDataRecord.GetData(int i);
    public sealed virtual ReadOnlyCollection`1<DbColumn> GetColumnSchema();
}
public class Microsoft.Data.SqlClient.SqlDependency : object {
    public bool HasChanges { get; }
    public string Id { get; }
    public SqlDependency(SqlCommand command);
    public SqlDependency(SqlCommand command, string options, int timeout);
    public bool get_HasChanges();
    public string get_Id();
    public void add_OnChange(OnChangeEventHandler value);
    public void remove_OnChange(OnChangeEventHandler value);
    public void AddCommandDependency(SqlCommand command);
    public static bool Start(string connectionString);
    public static bool Start(string connectionString, string queue);
    public static bool Stop(string connectionString);
    public static bool Stop(string connectionString, string queue);
}
public class Microsoft.Data.SqlClient.SqlEnclaveAttestationParameters : object {
    public ECDiffieHellmanCng ClientDiffieHellmanKey { get; }
    public int Protocol { get; }
    public SqlEnclaveAttestationParameters(int protocol, Byte[] input, ECDiffieHellmanCng clientDiffieHellmanKey);
    [CompilerGeneratedAttribute]
public ECDiffieHellmanCng get_ClientDiffieHellmanKey();
    [CompilerGeneratedAttribute]
public int get_Protocol();
    public Byte[] GetInput();
}
public class Microsoft.Data.SqlClient.SqlEnclaveSession : object {
    public long SessionId { get; }
    public SqlEnclaveSession(Byte[] sessionKey, long sessionId);
    [CompilerGeneratedAttribute]
public long get_SessionId();
    public Byte[] GetSessionKey();
}
public class Microsoft.Data.SqlClient.SqlError : object {
    public byte Class { get; }
    public int LineNumber { get; }
    public string Message { get; }
    public int Number { get; }
    public string Procedure { get; }
    public string Server { get; }
    public string Source { get; }
    public byte State { get; }
    public byte get_Class();
    public int get_LineNumber();
    public string get_Message();
    public int get_Number();
    public string get_Procedure();
    public string get_Server();
    public string get_Source();
    public byte get_State();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class Microsoft.Data.SqlClient.SqlErrorCollection : object {
    public int Count { get; }
    public SqlError Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public sealed virtual int get_Count();
    public SqlError get_Item(int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(SqlError[] array, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
public class Microsoft.Data.SqlClient.SqlException : DbException {
    public byte Class { get; }
    public Guid ClientConnectionId { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public SqlErrorCollection Errors { get; }
    public int LineNumber { get; }
    public int Number { get; }
    public string Procedure { get; }
    public string Server { get; }
    public string Source { get; }
    public byte State { get; }
    public byte get_Class();
    public Guid get_ClientConnectionId();
    public SqlErrorCollection get_Errors();
    public int get_LineNumber();
    public int get_Number();
    public string get_Procedure();
    public string get_Server();
    public virtual string get_Source();
    public byte get_State();
    public virtual void GetObjectData(SerializationInfo si, StreamingContext context);
    public virtual string ToString();
}
public class Microsoft.Data.SqlClient.SqlInfoMessageEventArgs : EventArgs {
    public SqlErrorCollection Errors { get; }
    public string Message { get; }
    public string Source { get; }
    public SqlErrorCollection get_Errors();
    public string get_Message();
    public string get_Source();
    public virtual string ToString();
}
public class Microsoft.Data.SqlClient.SqlInfoMessageEventHandler : MulticastDelegate {
    public SqlInfoMessageEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlInfoMessageEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlInfoMessageEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Data.SqlClient.SqlNotificationEventArgs : EventArgs {
    public SqlNotificationInfo Info { get; }
    public SqlNotificationSource Source { get; }
    public SqlNotificationType Type { get; }
    public SqlNotificationEventArgs(SqlNotificationType type, SqlNotificationInfo info, SqlNotificationSource source);
    public SqlNotificationInfo get_Info();
    public SqlNotificationSource get_Source();
    public SqlNotificationType get_Type();
}
public enum Microsoft.Data.SqlClient.SqlNotificationInfo : Enum {
    public int value__;
    public static SqlNotificationInfo AlreadyChanged;
    public static SqlNotificationInfo Alter;
    public static SqlNotificationInfo Delete;
    public static SqlNotificationInfo Drop;
    public static SqlNotificationInfo Error;
    public static SqlNotificationInfo Expired;
    public static SqlNotificationInfo Insert;
    public static SqlNotificationInfo Invalid;
    public static SqlNotificationInfo Isolation;
    public static SqlNotificationInfo Merge;
    public static SqlNotificationInfo Options;
    public static SqlNotificationInfo PreviousFire;
    public static SqlNotificationInfo Query;
    public static SqlNotificationInfo Resource;
    public static SqlNotificationInfo Restart;
    public static SqlNotificationInfo TemplateLimit;
    public static SqlNotificationInfo Truncate;
    public static SqlNotificationInfo Unknown;
    public static SqlNotificationInfo Update;
}
public enum Microsoft.Data.SqlClient.SqlNotificationSource : Enum {
    public int value__;
    public static SqlNotificationSource Client;
    public static SqlNotificationSource Data;
    public static SqlNotificationSource Database;
    public static SqlNotificationSource Environment;
    public static SqlNotificationSource Execution;
    public static SqlNotificationSource Object;
    public static SqlNotificationSource Owner;
    public static SqlNotificationSource Statement;
    public static SqlNotificationSource System;
    public static SqlNotificationSource Timeout;
    public static SqlNotificationSource Unknown;
}
public enum Microsoft.Data.SqlClient.SqlNotificationType : Enum {
    public int value__;
    public static SqlNotificationType Change;
    public static SqlNotificationType Subscribe;
    public static SqlNotificationType Unknown;
}
[TypeConverterAttribute("Microsoft.Data.SqlClient.SqlParameter/SqlParameterConverter")]
public class Microsoft.Data.SqlClient.SqlParameter : DbParameter {
    [BrowsableAttribute("False")]
public SqlCompareOptions CompareInfo { get; public set; }
    public DbType DbType { get; public set; }
    [RefreshPropertiesAttribute("1")]
public ParameterDirection Direction { get; public set; }
    [DefaultValueAttribute("False")]
public bool IsNullable { get; public set; }
    [BrowsableAttribute("False")]
public int LocaleId { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public int Offset { get; public set; }
    public string ParameterName { get; public set; }
    [DefaultValueAttribute("0")]
public byte Precision { get; public set; }
    [DefaultValueAttribute("0")]
public byte Scale { get; public set; }
    public int Size { get; public set; }
    public string SourceColumn { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    public DataRowVersion SourceVersion { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DbProviderSpecificTypePropertyAttribute("True")]
public SqlDbType SqlDbType { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public object SqlValue { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public string TypeName { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public string UdtTypeName { get; public set; }
    [RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Value { get; public set; }
    public string XmlSchemaCollectionDatabase { get; public set; }
    public string XmlSchemaCollectionName { get; public set; }
    public string XmlSchemaCollectionOwningSchema { get; public set; }
    public bool ForceColumnEncryption { get; public set; }
    public SqlParameter(string parameterName, SqlDbType dbType);
    public SqlParameter(string parameterName, SqlDbType dbType, int size);
    [EditorBrowsableAttribute("2")]
public SqlParameter(string parameterName, SqlDbType dbType, int size, ParameterDirection direction, bool isNullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value);
    public SqlParameter(string parameterName, SqlDbType dbType, int size, ParameterDirection direction, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, bool sourceColumnNullMapping, object value, string xmlSchemaCollectionDatabase, string xmlSchemaCollectionOwningSchema, string xmlSchemaCollectionName);
    public SqlParameter(string parameterName, SqlDbType dbType, int size, string sourceColumn);
    public SqlParameter(string parameterName, object value);
    private sealed virtual override object System.ICloneable.Clone();
    public SqlCompareOptions get_CompareInfo();
    public void set_CompareInfo(SqlCompareOptions value);
    public virtual DbType get_DbType();
    public virtual void set_DbType(DbType value);
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    public virtual bool get_IsNullable();
    public virtual void set_IsNullable(bool value);
    public int get_LocaleId();
    public void set_LocaleId(int value);
    public int get_Offset();
    public void set_Offset(int value);
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    public sealed virtual byte get_Precision();
    public sealed virtual void set_Precision(byte value);
    public sealed virtual byte get_Scale();
    public sealed virtual void set_Scale(byte value);
    public virtual int get_Size();
    public virtual void set_Size(int value);
    public virtual string get_SourceColumn();
    public virtual void set_SourceColumn(string value);
    public virtual bool get_SourceColumnNullMapping();
    public virtual void set_SourceColumnNullMapping(bool value);
    public virtual DataRowVersion get_SourceVersion();
    public virtual void set_SourceVersion(DataRowVersion value);
    public SqlDbType get_SqlDbType();
    public void set_SqlDbType(SqlDbType value);
    public object get_SqlValue();
    public void set_SqlValue(object value);
    public string get_TypeName();
    public void set_TypeName(string value);
    public string get_UdtTypeName();
    public void set_UdtTypeName(string value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public string get_XmlSchemaCollectionDatabase();
    public void set_XmlSchemaCollectionDatabase(string value);
    public string get_XmlSchemaCollectionName();
    public void set_XmlSchemaCollectionName(string value);
    public string get_XmlSchemaCollectionOwningSchema();
    public void set_XmlSchemaCollectionOwningSchema(string value);
    public virtual void ResetDbType();
    public void ResetSqlDbType();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public bool get_ForceColumnEncryption();
    [CompilerGeneratedAttribute]
public void set_ForceColumnEncryption(bool value);
}
[DefaultMemberAttribute("Item")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBParametersEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ListBindableAttribute("False")]
public class Microsoft.Data.SqlClient.SqlParameterCollection : DbParameterCollection {
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public SqlParameter Item { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public SqlParameter Item { get; public set; }
    public object SyncRoot { get; }
    public virtual int get_Count();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public SqlParameter get_Item(int index);
    public void set_Item(int index, SqlParameter value);
    public SqlParameter get_Item(string parameterName);
    public void set_Item(string parameterName, SqlParameter value);
    public virtual object get_SyncRoot();
    public SqlParameter Add(SqlParameter value);
    [EditorBrowsableAttribute("1")]
public virtual int Add(object value);
    public SqlParameter Add(string parameterName, SqlDbType sqlDbType);
    public SqlParameter Add(string parameterName, SqlDbType sqlDbType, int size);
    public SqlParameter Add(string parameterName, SqlDbType sqlDbType, int size, string sourceColumn);
    public void AddRange(SqlParameter[] values);
    public virtual void AddRange(Array values);
    public SqlParameter AddWithValue(string parameterName, object value);
    public virtual void Clear();
    public bool Contains(SqlParameter value);
    public virtual bool Contains(object value);
    public virtual bool Contains(string value);
    public virtual void CopyTo(Array array, int index);
    public void CopyTo(SqlParameter[] array, int index);
    public virtual IEnumerator GetEnumerator();
    protected virtual DbParameter GetParameter(int index);
    protected virtual DbParameter GetParameter(string parameterName);
    public int IndexOf(SqlParameter value);
    public virtual int IndexOf(object value);
    public virtual int IndexOf(string parameterName);
    public void Insert(int index, SqlParameter value);
    public virtual void Insert(int index, object value);
    public void Remove(SqlParameter value);
    public virtual void Remove(object value);
    public virtual void RemoveAt(int index);
    public virtual void RemoveAt(string parameterName);
    protected virtual void SetParameter(int index, DbParameter value);
    protected virtual void SetParameter(string parameterName, DbParameter value);
}
public class Microsoft.Data.SqlClient.SqlRowsCopiedEventArgs : EventArgs {
    public bool Abort { get; public set; }
    public long RowsCopied { get; }
    public SqlRowsCopiedEventArgs(long rowsCopied);
    public bool get_Abort();
    public void set_Abort(bool value);
    public long get_RowsCopied();
}
public class Microsoft.Data.SqlClient.SqlRowsCopiedEventHandler : MulticastDelegate {
    public SqlRowsCopiedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlRowsCopiedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlRowsCopiedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Data.SqlClient.SqlRowUpdatedEventArgs : RowUpdatedEventArgs {
    public SqlCommand Command { get; }
    public SqlRowUpdatedEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public SqlCommand get_Command();
}
public class Microsoft.Data.SqlClient.SqlRowUpdatedEventHandler : MulticastDelegate {
    public SqlRowUpdatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlRowUpdatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlRowUpdatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Data.SqlClient.SqlRowUpdatingEventArgs : RowUpdatingEventArgs {
    protected IDbCommand BaseCommand { get; protected set; }
    public SqlCommand Command { get; public set; }
    public SqlRowUpdatingEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual IDbCommand get_BaseCommand();
    protected virtual void set_BaseCommand(IDbCommand value);
    public SqlCommand get_Command();
    public void set_Command(SqlCommand value);
}
public class Microsoft.Data.SqlClient.SqlRowUpdatingEventHandler : MulticastDelegate {
    public SqlRowUpdatingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlRowUpdatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlRowUpdatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Data.SqlClient.SqlTransaction : DbTransaction {
    public SqlConnection Connection { get; }
    protected DbConnection DbConnection { get; }
    public IsolationLevel IsolationLevel { get; }
    public SqlConnection get_Connection();
    protected virtual DbConnection get_DbConnection();
    public virtual IsolationLevel get_IsolationLevel();
    public virtual void Commit();
    protected virtual void Dispose(bool disposing);
    public virtual void Rollback();
    public void Rollback(string transactionName);
    public void Save(string savePointName);
}
public class Microsoft.Data.SqlTypes.SqlFileStream : Stream {
    public string Name { get; }
    public Byte[] TransactionContext { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; }
    public int WriteTimeout { get; }
    public SqlFileStream(string path, Byte[] transactionContext, FileAccess access);
    public SqlFileStream(string path, Byte[] transactionContext, FileAccess access, FileOptions options, long allocationSize);
    public string get_Name();
    public Byte[] get_TransactionContext();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual int get_WriteTimeout();
    public virtual void Flush();
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
}
