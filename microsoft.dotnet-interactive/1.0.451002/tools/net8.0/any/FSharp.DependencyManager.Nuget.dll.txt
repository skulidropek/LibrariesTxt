[CompilationMappingAttribute("3")]
internal class FSDependencyManager.SR : object {
    internal static Lazy`1<ResourceManager> resources;
    internal static Type funTyC;
    internal static bool swallowResourceText;
    internal static int init@14;
    internal static bool SwallowResourceText { get; internal set; }
    private static SR();
    internal static bool get_SwallowResourceText();
    internal static void set_SwallowResourceText(bool b);
    internal static string cantReferenceSystemPackage(string a0);
    internal static string requiresAValue(string a0);
    internal static string unableToApplyImplicitArgument(int a0);
    internal static string notUsed();
    internal static string loadNugetPackage();
    internal static string version();
    internal static string highestVersion();
    internal static string sourceDirectoryDoesntExist(string a0);
    internal static string timedoutResolvingPackages(string a0, string a1);
    internal static string invalidTimeoutValue(string a0);
    internal static string missingTimeoutValue();
    internal static void RunStartupValidation();
    [CompilerGeneratedAttribute]
internal static Assembly getCurrentAssembly();
    [CompilerGeneratedAttribute]
internal static Type getTypeInfo(Type t);
    [CompilerGeneratedAttribute]
internal static string GetString(string name);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal static object mkFunctionValue(Type[] tys, FSharpFunc`2<object, object> impl);
    [CompilerGeneratedAttribute]
internal static bool isNamedType(Type ty);
    [CompilerGeneratedAttribute]
internal static bool isFunctionType(Type ty1);
    [CompilerGeneratedAttribute]
internal static Tuple`2<Type, Type[]> destFunTy(Type ty);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal static object buildFunctionForOneArgPat(Type ty, FSharpFunc`2<Type, FSharpFunc`2<object, object>> impl);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal static object capture1(string fmt, int i, FSharpList`1<object> args, Type ty, FSharpFunc`2<FSharpList`1<object>, FSharpFunc`2<Type, FSharpFunc`2<int, object>>> go);
    [CompilerGeneratedAttribute]
internal static string postProcessString(string s);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal static T createMessageString(string messageString, PrintfFormat`4<T, Unit, string, string> fmt);
    [CompilerGeneratedAttribute]
internal static T GetStringFunc(string messageID, PrintfFormat`4<T, Unit, string, string> fmt);
}
[CompilationMappingAttribute("7")]
internal static class FSharp.BuildProperties : object {
    internal static string fsProductVersion { get; }
    internal static string fsLanguageVersion { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static string get_fsProductVersion();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static string get_fsLanguageVersion();
}
[AttributeUsageAttribute("5")]
[CompilationMappingAttribute("3")]
public class FSharp.DependencyManager.Nuget.DependencyManagerAttribute : Attribute {
}
[DependencyManagerAttribute]
[CompilationMappingAttribute("3")]
public class FSharp.DependencyManager.Nuget.FSharpDependencyManager : object {
    internal bool useResultsCache;
    internal string key;
    internal string name;
    internal ConcurrentDictionary`2<string, string> generatedScripts;
    internal Lazy`1<string> projectDirectory;
    internal Lazy`1<string> cacheDirectory;
    public string Name { get; }
    public string Key { get; }
    public String[] HelpMessages { get; }
    public FSharpDependencyManager(FSharpOption`1<string> outputDirectory, bool useResultsCache);
    public FSharpDependencyManager(FSharpOption`1<string> outputDirectory);
    public string get_Name();
    public string get_Key();
    public String[] get_HelpMessages();
    public void ClearResultsCache();
    public object ResolveDependencies(string scriptDirectory, string scriptName, string scriptExt, IEnumerable`1<Tuple`2<string, string>> packageManagerTextLines, string targetFrameworkMoniker, string runtimeIdentifier, int timeout);
    [CompilerGeneratedAttribute]
internal void deleteScripts();
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal void emitFile(string fileName, string body);
    [CompilerGeneratedAttribute]
internal PackageBuildResolutionResult prepareDependencyResolutionFiles(string scriptDirectory, string scriptExt, IEnumerable`1<Tuple`2<string, string>> directiveLines, string targetFrameworkMoniker, string runtimeIdentifier, int timeout);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal FSharpOption`1<PackageBuildResolutionResult> tryGetResultsForResolutionHash(FSharpOption`1<string> hash, Lazy`1<string> projectDirectory);
}
[CompilationMappingAttribute("7")]
internal static class FSharp.DependencyManager.Nuget.FSharpDependencyManagerModule : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static string concat(string s, string v);
    internal static String[] validateAndFormatRestoreSources(string sources);
    internal static IEnumerable`1<string> formatPackageReference(PackageReference p);
    internal static void validatePackageName@81(string package, string packageName);
    internal static FSharpOption`1<PackageReference> addInclude@104(string scriptExt, PackageReference current, string v);
    internal static FSharpOption`1<PackageReference> setVersion@115(PackageReference current, string v);
    internal static FSharpOption`1<PackageReference> parsePackageReferenceOption'@85(string scriptExt, FSharpFunc`2<FSharpOption`1<FSharpOption`1<string>>, Unit> setBinLogPath, FSharpFunc`2<FSharpOption`1<int>, Unit> setTimeout, FSharpList`1<Tuple`2<FSharpOption`1<string>, FSharpOption`1<string>>> options, int implicitArgumentCount, FSharpOption`1<PackageReference> packageReference);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpOption`1<PackageReference> parsePackageReferenceOption(string scriptExt, FSharpFunc`2<FSharpOption`1<FSharpOption`1<string>>, Unit> setBinLogPath, FSharpFunc`2<FSharpOption`1<int>, Unit> setTimeout, string line);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static Tuple`3<FSharpList`1<PackageReference>, FSharpOption`1<FSharpOption`1<string>>, FSharpOption`1<int>> parsePackageReference(string scriptExt, FSharpList`1<string> lines);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static Tuple`3<FSharpList`1<PackageReference>, FSharpOption`1<FSharpOption`1<string>>, FSharpOption`1<int>> parsePackageDirective(string scriptExt, FSharpList`1<Tuple`2<string, string>> lines);
    internal static FSharpOption`1<string> computeHashForResolutionInputs(string scriptExt, IEnumerable`1<Tuple`2<string, string>> directiveLines, string targetFrameworkMoniker, string runtimeIdentifier);
}
[CompilationMappingAttribute("2")]
public class FSharp.DependencyManager.Nuget.PackageBuildResolutionResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal bool success@;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal string projectPath@;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal String[] stdOut@;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal String[] stdErr@;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal FSharpOption`1<string> resolutionsFile@;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal Resolution[] resolutions@;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal FSharpList`1<string> references@;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal FSharpList`1<string> loads@;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal FSharpList`1<string> includes@;
    [CompilationMappingAttribute("4", "0")]
public bool success { get; }
    [CompilationMappingAttribute("4", "1")]
public string projectPath { get; }
    [CompilationMappingAttribute("4", "2")]
public String[] stdOut { get; }
    [CompilationMappingAttribute("4", "3")]
public String[] stdErr { get; }
    [CompilationMappingAttribute("4", "4")]
public FSharpOption`1<string> resolutionsFile { get; }
    [CompilationMappingAttribute("4", "5")]
public Resolution[] resolutions { get; }
    [CompilationMappingAttribute("4", "6")]
public FSharpList`1<string> references { get; }
    [CompilationMappingAttribute("4", "7")]
public FSharpList`1<string> loads { get; }
    [CompilationMappingAttribute("4", "8")]
public FSharpList`1<string> includes { get; }
    [DynamicDependencyAttribute("1632", "FSharp.DependencyManager.Nuget.PackageBuildResolutionResult")]
public PackageBuildResolutionResult(bool success, string projectPath, String[] stdOut, String[] stdErr, FSharpOption`1<string> resolutionsFile, Resolution[] resolutions, FSharpList`1<string> references, FSharpList`1<string> loads, FSharpList`1<string> includes);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_success();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public string get_projectPath();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public String[] get_stdOut();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public String[] get_stdErr();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public FSharpOption`1<string> get_resolutionsFile();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public Resolution[] get_resolutions();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public FSharpList`1<string> get_references();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public FSharpList`1<string> get_loads();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public FSharpList`1<string> get_includes();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(PackageBuildResolutionResult obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj, IComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj, IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(PackageBuildResolutionResult obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj);
}
[CompilationMappingAttribute("2")]
public class FSharp.DependencyManager.Nuget.PackageReference : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal string Include@;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal string Version@;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal string RestoreSources@;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal string Script@;
    [CompilationMappingAttribute("4", "0")]
public string Include { get; }
    [CompilationMappingAttribute("4", "1")]
public string Version { get; }
    [CompilationMappingAttribute("4", "2")]
public string RestoreSources { get; }
    [CompilationMappingAttribute("4", "3")]
public string Script { get; }
    [DynamicDependencyAttribute("1632", "FSharp.DependencyManager.Nuget.PackageReference")]
public PackageReference(string include, string version, string restoreSources, string script);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public string get_Include();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public string get_RestoreSources();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public string get_Script();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(PackageReference obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj, IComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj, IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(PackageReference obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj);
}
[CompilationMappingAttribute("7")]
internal static class FSharp.DependencyManager.Nuget.ProjectFile : object {
    internal static string fsxExt { get; }
    internal static string csxExt { get; }
    internal static string generateProjectFile { get; }
    internal static string generateProjectNugetConfigFile { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static string get_fsxExt();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static string get_csxExt();
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static string makeScriptFromReferences(IEnumerable`1<string> references, string poundRprefix);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static string get_generateProjectFile();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static string get_generateProjectNugetConfigFile();
}
[CompilationMappingAttribute("2")]
public class FSharp.DependencyManager.Nuget.Resolution : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal string NugetPackageId@;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal string NugetPackageVersion@;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal string PackageRoot@;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal string FullPath@;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal string AssetType@;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal string IsNotImplementationReference@;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal string InitializeSourcePath@;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal string NativePath@;
    [CompilationMappingAttribute("4", "0")]
public string NugetPackageId { get; }
    [CompilationMappingAttribute("4", "1")]
public string NugetPackageVersion { get; }
    [CompilationMappingAttribute("4", "2")]
public string PackageRoot { get; }
    [CompilationMappingAttribute("4", "3")]
public string FullPath { get; }
    [CompilationMappingAttribute("4", "4")]
public string AssetType { get; }
    [CompilationMappingAttribute("4", "5")]
public string IsNotImplementationReference { get; }
    [CompilationMappingAttribute("4", "6")]
public string InitializeSourcePath { get; }
    [CompilationMappingAttribute("4", "7")]
public string NativePath { get; }
    [DynamicDependencyAttribute("1632", "FSharp.DependencyManager.Nuget.Resolution")]
public Resolution(string nugetPackageId, string nugetPackageVersion, string packageRoot, string fullPath, string assetType, string isNotImplementationReference, string initializeSourcePath, string nativePath);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public string get_NugetPackageId();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public string get_NugetPackageVersion();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public string get_PackageRoot();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public string get_FullPath();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public string get_AssetType();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public string get_IsNotImplementationReference();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public string get_InitializeSourcePath();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public string get_NativePath();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(Resolution obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj, IComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj, IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(Resolution obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj);
}
[ClassAttribute]
[CompilationMappingAttribute("3")]
public class FSharp.DependencyManager.Nuget.ResolveDependenciesResult : object {
    internal bool success;
    internal String[] stdOut;
    internal String[] stdError;
    internal IEnumerable`1<string> sourceFiles;
    internal IEnumerable`1<string> roots;
    internal IEnumerable`1<string> resolutions;
    public bool Success { get; }
    public String[] StdOut { get; }
    public String[] StdError { get; }
    public IEnumerable`1<string> Resolutions { get; }
    public IEnumerable`1<string> SourceFiles { get; }
    public IEnumerable`1<string> Roots { get; }
    internal ResolveDependenciesResult(bool success, String[] stdOut, String[] stdError, IEnumerable`1<string> resolutions, IEnumerable`1<string> sourceFiles, IEnumerable`1<string> roots);
    public bool get_Success();
    public String[] get_StdOut();
    public String[] get_StdError();
    public IEnumerable`1<string> get_Resolutions();
    public IEnumerable`1<string> get_SourceFiles();
    public IEnumerable`1<string> get_Roots();
}
[CompilationMappingAttribute("7")]
internal static class FSharp.DependencyManager.Nuget.Utilities : object {
    [CompilationMappingAttribute("9")]
internal static Char[] trimChars { get; }
    internal static bool verifyFilesExist(FSharpList`1<string> files);
    internal static String[] findLoadsFromResolutions(Resolution[] resolutions);
    internal static String[] findReferencesFromResolutions(Resolution[] resolutions);
    internal static String[] findIncludesFromResolutions(Resolution[] resolutions);
    internal static Resolution[] getResolutionsFromFile(string resolutionsFile);
    internal static Char[] get_trimChars();
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static bool isNotQuotedQuotation(string text, int n);
    internal static FSharpOption`1<string> stringAsOpt@134(string text);
    internal static Tuple`2<FSharpOption`1<string>, FSharpOption`1<string>> split@131(string option);
    internal static FSharpList`1<Tuple`2<FSharpOption`1<string>, FSharpOption`1<string>>> getOptions(string text);
    internal static void outputDataReceived@182(List`1<string> outputList, FSharpRef`1<FSharpFunc`2<Unit, object>> outputlock, string message);
    internal static void errorDataReceived@186(List`1<string> errorsList, FSharpRef`1<FSharpFunc`2<Unit, object>> errorslock, string message);
    [CompilerGeneratedAttribute]
internal static Tuple`3<bool, String[], String[]> executeTool$cont@177(FSharpOption`1<string> pathToExe, string arguments, string workingDir, IEnumerable`1<Tuple`2<string, string>> environment, int timeout, Unit unitVar);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static Tuple`3<bool, String[], String[]> executeTool(FSharpOption`1<string> pathToExe, string arguments, string workingDir, IEnumerable`1<Tuple`2<string, string>> environment, int timeout);
    internal static string arguments@241(string projectPath, string binLoggingArguments, string prefix);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static PackageBuildResolutionResult buildProject(string projectPath, FSharpOption`1<FSharpOption`1<string>> binLogPath, FSharpOption`1<int> timeout);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static string generateSourcesFromNugetConfigs(string scriptDirectory, a workingDir, int timeout);
    internal static Byte[] computeSha256HashOfBytes(Byte[] bytes);
}
[CompilationMappingAttribute("7")]
internal static class Internal.Utilities.FSharpEnvironment : object {
    [CompilationMappingAttribute("9")]
internal static string FSharpBannerVersion { get; }
    [CompilationMappingAttribute("9")]
internal static string FSharpProductName { get; }
    [CompilationMappingAttribute("9")]
internal static FSharpOption`1<string> FSharpCoreLibRunningVersion { get; }
    internal static string FSharpBinaryMetadataFormatRevision { get; }
    [CompilationMappingAttribute("9")]
internal static bool isRunningOnCoreClr { get; }
    [CompilationMappingAttribute("9")]
internal static String[] toolingCompatibleVersions { get; }
    [CompilationMappingAttribute("9")]
internal static String[] toolPaths { get; }
    internal static string getFSharpCoreLibraryName { get; }
    internal static string fsiLibraryName { get; }
    [CompilationMappingAttribute("9")]
internal static bool isWindows { get; }
    [CompilationMappingAttribute("9")]
internal static string dotnet { get; }
    internal static string get_FSharpBannerVersion();
    internal static string get_FSharpProductName();
    internal static FSharpOption`1<string> get_FSharpCoreLibRunningVersion();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static string get_FSharpBinaryMetadataFormatRevision();
    internal static bool get_isRunningOnCoreClr();
    internal static FSharpOption`1<string> tryCurrentDomain();
    internal static FSharpOption`1<string> BinFolderOfDefaultFSharpCompiler(FSharpOption`1<string> probePoint);
    internal static String[] get_toolingCompatibleVersions();
    internal static String[] get_toolPaths();
    internal static FSharpList`1<string> toolingCompatiblePaths();
    internal static IEnumerable`1<string> searchToolPath(string compilerToolPath);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static IEnumerable`1<string> searchToolPaths(FSharpOption`1<string> path, IEnumerable`1<string> compilerToolPaths);
    internal static FSharpOption`1<Assembly> loadFromLocation@174(FSharpFunc`2<FSharpOption`1<string>, FSharpFunc`2<Exception, FSharpOption`1<Assembly>>> raiseError, string designTimeAssemblyPath);
    internal static IEnumerable`1<string> searchParentDirChain@180(FSharpList`1<string> compilerToolPaths, FSharpOption`1<string> path, string assemblyName);
    internal static FSharpOption`1<Assembly> loadFromParentDirRelativeToRuntimeAssemblyLocation@196(string runTimeAssemblyFileName, FSharpFunc`2<FSharpOption`1<string>, FSharpFunc`2<Exception, FSharpOption`1<Assembly>>> raiseError, FSharpList`1<string> compilerToolPaths, string designTimeAssemblyName);
    internal static FSharpOption`1<Assembly> getTypeProviderAssembly(string runTimeAssemblyFileName, string designTimeAssemblyName, FSharpList`1<string> compilerToolPaths, FSharpFunc`2<FSharpOption`1<string>, FSharpFunc`2<Exception, FSharpOption`1<Assembly>>> raiseError);
    internal static IEnumerable`1<string> getCompilerToolsDesignTimeAssemblyPaths(IEnumerable`1<string> compilerToolPaths);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static string get_getFSharpCoreLibraryName();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static string get_fsiLibraryName();
    internal static string getFSharpCompilerLocationWithDefaultFromType(Type defaultLocation);
    internal static string getFSharpCompilerLocation();
    internal static string getDefaultFSharpCoreLocation();
    internal static string getDefaultFsiLibraryLocation();
    internal static bool get_isWindows();
    internal static string get_dotnet();
    internal static FSharpOption`1<string> getDotnetGlobalHostPath();
    internal static FSharpOption`1<string> probePathForDotnetHost@310(Unit unitVar0);
    internal static FSharpOption`1<string> getDotnetHostPath();
    internal static String[] getDotnetHostDirectories();
    internal static FSharpOption`1<string> getDotnetHostDirectory();
    internal static DirectoryInfo[] getDotnetHostSubDirectories(string path);
}
[FlagsAttribute]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal enum System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes : Enum {
    public int value__;
    public static DynamicallyAccessedMemberTypes All;
    public static DynamicallyAccessedMemberTypes None;
    public static DynamicallyAccessedMemberTypes PublicParameterlessConstructor;
    public static DynamicallyAccessedMemberTypes PublicConstructors;
    public static DynamicallyAccessedMemberTypes NonPublicConstructors;
    public static DynamicallyAccessedMemberTypes PublicMethods;
    public static DynamicallyAccessedMemberTypes NonPublicMethods;
    public static DynamicallyAccessedMemberTypes PublicFields;
    public static DynamicallyAccessedMemberTypes NonPublicFields;
    public static DynamicallyAccessedMemberTypes PublicNestedTypes;
    public static DynamicallyAccessedMemberTypes NonPublicNestedTypes;
    public static DynamicallyAccessedMemberTypes PublicProperties;
    public static DynamicallyAccessedMemberTypes NonPublicProperties;
    public static DynamicallyAccessedMemberTypes PublicEvents;
    public static DynamicallyAccessedMemberTypes NonPublicEvents;
    public static DynamicallyAccessedMemberTypes Interfaces;
}
internal class System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
private DynamicallyAccessedMemberTypes MemberType@;
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
private Type Type@;
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public DynamicallyAccessedMemberTypes MemberType { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public Type Type { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes MemberType, Type Type);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public DynamicallyAccessedMemberTypes get_MemberType();
}
[CompilationMappingAttribute("3")]
internal class UtilsStrings.SR : object {
    internal static Lazy`1<ResourceManager> resources;
    internal static Type funTyC;
    internal static bool swallowResourceText;
    internal static int init@14;
    internal static bool SwallowResourceText { get; internal set; }
    private static SR();
    internal static bool get_SwallowResourceText();
    internal static void set_SwallowResourceText(bool b);
    internal static string buildProductName(string a0);
    internal static string fSharpBannerVersion(string a0, string a1);
    internal static void RunStartupValidation();
    [CompilerGeneratedAttribute]
internal static Assembly getCurrentAssembly();
    [CompilerGeneratedAttribute]
internal static Type getTypeInfo(Type t);
    [CompilerGeneratedAttribute]
internal static string GetString(string name);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal static object mkFunctionValue(Type[] tys, FSharpFunc`2<object, object> impl);
    [CompilerGeneratedAttribute]
internal static bool isNamedType(Type ty);
    [CompilerGeneratedAttribute]
internal static bool isFunctionType(Type ty1);
    [CompilerGeneratedAttribute]
internal static Tuple`2<Type, Type[]> destFunTy(Type ty);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal static object buildFunctionForOneArgPat(Type ty, FSharpFunc`2<Type, FSharpFunc`2<object, object>> impl);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal static object capture1(string fmt, int i, FSharpList`1<object> args, Type ty, FSharpFunc`2<FSharpList`1<object>, FSharpFunc`2<Type, FSharpFunc`2<int, object>>> go);
    [CompilerGeneratedAttribute]
internal static string postProcessString(string s);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal static T createMessageString(string messageString, PrintfFormat`4<T, Unit, string, string> fmt);
    [CompilerGeneratedAttribute]
internal static T GetStringFunc(string messageID, PrintfFormat`4<T, Unit, string, string> fmt);
}
