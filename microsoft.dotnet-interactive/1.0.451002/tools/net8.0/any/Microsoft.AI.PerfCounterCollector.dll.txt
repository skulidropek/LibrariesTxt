internal class Microsoft.ApplicationInsights.Common.ApplicationNameProvider : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    private static string GetApplicationName();
}
internal class Microsoft.ApplicationInsights.Common.AppMapCorrelationEventSource : EventSource {
    public static AppMapCorrelationEventSource Log;
    private ApplicationNameProvider applicationNameProvider;
    private static AppMapCorrelationEventSource();
    [EventAttribute("1")]
public void FetchAppIdFailed(string exception, string appDomainName);
    [EventAttribute("2")]
public void SetCrossComponentCorrelationHeaderFailed(string exception, string appDomainName);
    [EventAttribute("3")]
public void GetCrossComponentCorrelationHeaderFailed(string exception, string appDomainName);
    [EventAttribute("4")]
public void GetComponentRoleNameHeaderFailed(string exception, string appDomainName);
    [EventAttribute("5")]
public void UnknownError(string exception, string appDomainName);
    [EventAttribute("6")]
public void FetchAppIdFailedWithResponseCode(string httpStatusCode, string appDomainName);
}
internal static class Microsoft.ApplicationInsights.Common.ArrayExtensions : object {
    internal static T[] Empty();
}
[ExtensionAttribute]
public static class Microsoft.ApplicationInsights.Common.ConditionalWeakTableExtensions : object {
    [ExtensionAttribute]
public static void AddIfNotExists(ConditionalWeakTable`2<TKey, TValue> conditionalWeakTable, TKey key, TValue value);
}
internal class Microsoft.ApplicationInsights.Common.ExceptionUtilities : object {
    internal static string GetExceptionDetailString(Exception ex);
}
[ExtensionAttribute]
internal static class Microsoft.ApplicationInsights.Common.GuidExtensions : object {
    [ExtensionAttribute]
public static string ToStringInvariant(Guid guid, string format);
}
internal static class Microsoft.ApplicationInsights.Common.HeadersUtilities : object {
    public static string GetHeaderKeyValue(IEnumerable`1<string> headerValues, string keyName);
    public static IDictionary`2<string, string> GetHeaderDictionary(IEnumerable`1<string> headerValues);
    public static IEnumerable`1<string> UpdateHeaderWithKeyValue(IEnumerable`1<string> headerValues, string keyName, string keyValue);
    public static string SanitizeString(string input);
    private static string TrimSubstring(string value, int startIndex, int endIndex);
}
internal static class Microsoft.ApplicationInsights.Common.Internal.ExperimentalConstants : object {
    public static string DeferRequestTrackingProperties;
}
internal static class Microsoft.ApplicationInsights.Common.Internal.InjectionGuardConstants : object {
    public static int AppIdMaxLength;
    public static int RequestHeaderMaxLength;
    public static int ContextHeaderKeyMaxLength;
    public static int ContextHeaderValueMaxLength;
    public static int TraceParentHeaderMaxLength;
    public static int TraceStateHeaderMaxLength;
    public static int TraceStateMaxPairs;
    public static int QuickPulseResponseHeaderMaxLength;
}
internal static class Microsoft.ApplicationInsights.Common.Internal.StringUtilities : object {
    public static string EnforceMaxLength(string input, int maxLength);
    [ObsoleteAttribute("Use System.Diagnostics.ActivityTraceId.CreateRandom().ToHexString() instead.")]
public static string GenerateTraceId();
    [ObsoleteAttribute("Use System.Diagnostics.ActivitySpanId.CreateRandom().ToHexString() instead.")]
public static string GenerateSpanId();
    [ObsoleteAttribute("Obsolete, use spanId instead")]
public static string FormatRequestId(string traceId, string spanId);
}
internal class Microsoft.ApplicationInsights.Common.PropertyFetcher : object {
    private string propertyName;
    private PropertyFetch modreq(System.Runtime.CompilerServices.IsVolatile) innerFetcher;
    public PropertyFetcher(string propertyName);
    public object Fetch(object obj);
}
internal static class Microsoft.ApplicationInsights.Common.RequestResponseHeaders : object {
    public static string RequestContextHeader;
    public static string RequestContextCorrelationSourceKey;
    public static string RequestContextCorrelationTargetKey;
    public static string StandardParentIdHeader;
    public static string StandardRootIdHeader;
    public static string RequestIdHeader;
    public static string CorrelationContextHeader;
    public static string AccessControlExposeHeadersHeader;
}
internal class Microsoft.ApplicationInsights.Common.SdkVersionUtils : object {
    internal static string GetSdkVersion(string versionPrefix);
}
[ExtensionAttribute]
internal static class Microsoft.ApplicationInsights.Common.WebHeaderCollectionExtensions : object {
    private static string KeyValuePairSeparator;
    private static int CorrelationContextHeaderMaxLength;
    private static int CorrelationContextMaxPairs;
    [ExtensionAttribute]
public static string GetNameValueHeaderValue(NameValueCollection headers, string headerName, string keyName);
    [ExtensionAttribute]
public static IDictionary`2<string, string> GetNameValueCollectionFromHeader(NameValueCollection headers, string headerName);
    [ExtensionAttribute]
public static void SetNameValueHeaderValue(NameValueCollection headers, string headerName, string keyName, string value);
    [ExtensionAttribute]
public static void SetHeaderFromNameValueCollection(NameValueCollection headers, string headerName, IEnumerable`1<KeyValuePair`2<string, string>> keyValuePairs);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetHeaderValue(NameValueCollection headers, string headerName, int maxStringLength, int maxItems);
    [ExtensionAttribute]
public static void ReadActivityBaggage(NameValueCollection headers, Activity activity);
    private static string FormatKeyValueHeader(string key, string value);
}
internal class Microsoft.ApplicationInsights.Extensibility.Filtering.AccumulatedValues : object {
    private AggregationType aggregationType;
    private SpinLock spinLock;
    private long count;
    private double sum;
    private double max;
    private double min;
    [CompilerGeneratedAttribute]
private string <MetricId>k__BackingField;
    public string MetricId { get; }
    public AccumulatedValues(string metricId, AggregationType aggregationType);
    [CompilerGeneratedAttribute]
public string get_MetricId();
    public void AddValue(double value);
    public double CalculateAggregation(Int64& count);
}
internal enum Microsoft.ApplicationInsights.Extensibility.Filtering.AggregationType : Enum {
    public int value__;
    public static AggregationType Avg;
    public static AggregationType Sum;
    public static AggregationType Min;
    public static AggregationType Max;
}
internal class Microsoft.ApplicationInsights.Extensibility.Filtering.CalculatedMetric`1 : object {
    private static string ProjectionCount;
    private static MethodInfo DoubleParseMethodInfo;
    private static MethodInfo ObjectToStringMethodInfo;
    private static MethodInfo DoubleToStringMethodInfo;
    private CalculatedMetricInfo info;
    private List`1<FilterConjunctionGroup`1<TTelemetry>> filterGroups;
    private Func`2<TTelemetry, double> projectionLambda;
    public string Id { get; }
    public AggregationType AggregationType { get; }
    public CalculatedMetric`1(CalculatedMetricInfo info, CollectionConfigurationError[]& errors);
    private static CalculatedMetric`1();
    public string get_Id();
    public AggregationType get_AggregationType();
    public bool CheckFilters(TTelemetry document, CollectionConfigurationError[]& errors);
    public double Project(TTelemetry document);
    public virtual string ToString();
    private void CreateFilters(CollectionConfigurationError[]& errors);
    private void CreateProjection();
}
[DataContractAttribute]
internal class Microsoft.ApplicationInsights.Extensibility.Filtering.CalculatedMetricInfo : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private TelemetryType <TelemetryType>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterConjunctionGroupInfo[] <FilterGroups>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Projection>k__BackingField;
    [CompilerGeneratedAttribute]
private AggregationType <Aggregation>k__BackingField;
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public string TelemetryTypeForSerialization { get; public set; }
    public TelemetryType TelemetryType { get; public set; }
    [DataMemberAttribute]
public FilterConjunctionGroupInfo[] FilterGroups { get; public set; }
    [DataMemberAttribute]
public string Projection { get; public set; }
    [DataMemberAttribute]
public string AggregationForSerialization { get; public set; }
    public AggregationType Aggregation { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    public string get_TelemetryTypeForSerialization();
    public void set_TelemetryTypeForSerialization(string value);
    [CompilerGeneratedAttribute]
public TelemetryType get_TelemetryType();
    [CompilerGeneratedAttribute]
public void set_TelemetryType(TelemetryType value);
    [CompilerGeneratedAttribute]
public FilterConjunctionGroupInfo[] get_FilterGroups();
    [CompilerGeneratedAttribute]
public void set_FilterGroups(FilterConjunctionGroupInfo[] value);
    [CompilerGeneratedAttribute]
public string get_Projection();
    [CompilerGeneratedAttribute]
public void set_Projection(string value);
    public string get_AggregationForSerialization();
    public void set_AggregationForSerialization(string value);
    [CompilerGeneratedAttribute]
public AggregationType get_Aggregation();
    [CompilerGeneratedAttribute]
public void set_Aggregation(AggregationType value);
    public virtual string ToString();
    private string FilterGroupsToString();
}
internal class Microsoft.ApplicationInsights.Extensibility.Filtering.CollectionConfiguration : object {
    private CollectionConfigurationInfo info;
    private List`1<CalculatedMetric`1<RequestTelemetry>> requestTelemetryMetrics;
    private List`1<CalculatedMetric`1<DependencyTelemetry>> dependencyTelemetryMetrics;
    private List`1<CalculatedMetric`1<ExceptionTelemetry>> exceptionTelemetryMetrics;
    private List`1<CalculatedMetric`1<EventTelemetry>> eventTelemetryMetrics;
    private List`1<CalculatedMetric`1<TraceTelemetry>> traceTelemetryMetrics;
    private List`1<DocumentStream> documentStreams;
    private List`1<Tuple`2<string, AggregationType>> telemetryMetadata;
    private List`1<Tuple`2<string, string>> performanceCounters;
    public IEnumerable`1<CalculatedMetric`1<RequestTelemetry>> RequestMetrics { get; }
    public IEnumerable`1<CalculatedMetric`1<DependencyTelemetry>> DependencyMetrics { get; }
    public IEnumerable`1<CalculatedMetric`1<ExceptionTelemetry>> ExceptionMetrics { get; }
    public IEnumerable`1<CalculatedMetric`1<EventTelemetry>> EventMetrics { get; }
    public IEnumerable`1<CalculatedMetric`1<TraceTelemetry>> TraceMetrics { get; }
    public IEnumerable`1<Tuple`2<string, AggregationType>> TelemetryMetadata { get; }
    public IEnumerable`1<DocumentStream> DocumentStreams { get; }
    public IEnumerable`1<Tuple`2<string, string>> PerformanceCounters { get; }
    public string ETag { get; }
    public CollectionConfiguration(CollectionConfigurationInfo info, CollectionConfigurationError[]& errors, Clock timeProvider, IEnumerable`1<DocumentStream> previousDocumentStreams);
    public IEnumerable`1<CalculatedMetric`1<RequestTelemetry>> get_RequestMetrics();
    public IEnumerable`1<CalculatedMetric`1<DependencyTelemetry>> get_DependencyMetrics();
    public IEnumerable`1<CalculatedMetric`1<ExceptionTelemetry>> get_ExceptionMetrics();
    public IEnumerable`1<CalculatedMetric`1<EventTelemetry>> get_EventMetrics();
    public IEnumerable`1<CalculatedMetric`1<TraceTelemetry>> get_TraceMetrics();
    public IEnumerable`1<Tuple`2<string, AggregationType>> get_TelemetryMetadata();
    public IEnumerable`1<DocumentStream> get_DocumentStreams();
    public IEnumerable`1<Tuple`2<string, string>> get_PerformanceCounters();
    public string get_ETag();
    private static void AddMetric(CalculatedMetricInfo metricInfo, List`1<CalculatedMetric`1<TTelemetry>> metrics, CollectionConfigurationError[]& errors);
    private void CreatePerformanceCounters(CollectionConfigurationError[]& errors);
    private void CreateDocumentStreams(CollectionConfigurationError[]& errors, Clock timeProvider, IEnumerable`1<DocumentStream> previousDocumentStreams);
    private void CreateTelemetryMetrics(CollectionConfigurationError[]& errors);
    private void CreateMetadata();
}
internal class Microsoft.ApplicationInsights.Extensibility.Filtering.CollectionConfigurationAccumulator : object {
    private long referenceCount;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, AccumulatedValues> <MetricAccumulators>k__BackingField;
    [CompilerGeneratedAttribute]
private CollectionConfiguration <CollectionConfiguration>k__BackingField;
    public Dictionary`2<string, AccumulatedValues> MetricAccumulators { get; }
    public CollectionConfiguration CollectionConfiguration { get; }
    public CollectionConfigurationAccumulator(CollectionConfiguration collectionConfiguration);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, AccumulatedValues> get_MetricAccumulators();
    [CompilerGeneratedAttribute]
public CollectionConfiguration get_CollectionConfiguration();
    public void AddRef();
    public void Release();
    public long GetRef();
}
[DataContractAttribute]
internal class Microsoft.ApplicationInsights.Extensibility.Filtering.CollectionConfigurationError : object {
    [CompilerGeneratedAttribute]
private CollectionConfigurationErrorType <ErrorType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullException>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Data>k__BackingField;
    [DataMemberAttribute]
public string CollectionConfigurationErrorTypeForSerialization { get; public set; }
    public CollectionConfigurationErrorType ErrorType { get; public set; }
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public string FullException { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> Data { get; public set; }
    public string get_CollectionConfigurationErrorTypeForSerialization();
    public void set_CollectionConfigurationErrorTypeForSerialization(string value);
    [CompilerGeneratedAttribute]
public CollectionConfigurationErrorType get_ErrorType();
    [CompilerGeneratedAttribute]
public void set_ErrorType(CollectionConfigurationErrorType value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_FullException();
    [CompilerGeneratedAttribute]
public void set_FullException(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Dictionary`2<string, string> value);
    public static CollectionConfigurationError CreateError(CollectionConfigurationErrorType errorType, string message, Exception exception, Tuple`2[] data);
}
internal enum Microsoft.ApplicationInsights.Extensibility.Filtering.CollectionConfigurationErrorType : Enum {
    public int value__;
    public static CollectionConfigurationErrorType PerformanceCounterParsing;
    public static CollectionConfigurationErrorType PerformanceCounterUnexpected;
    public static CollectionConfigurationErrorType PerformanceCounterDuplicateIds;
    public static CollectionConfigurationErrorType DocumentStreamDuplicateIds;
    public static CollectionConfigurationErrorType DocumentStreamFailureToCreate;
    public static CollectionConfigurationErrorType DocumentStreamFailureToCreateFilterUnexpected;
    public static CollectionConfigurationErrorType MetricDuplicateIds;
    public static CollectionConfigurationErrorType MetricTelemetryTypeUnsupported;
    public static CollectionConfigurationErrorType MetricFailureToCreate;
    public static CollectionConfigurationErrorType MetricFailureToCreateFilterUnexpected;
    public static CollectionConfigurationErrorType FilterFailureToCreateUnexpected;
    public static CollectionConfigurationErrorType CollectionConfigurationFailureToCreateUnexpected;
}
[DataContractAttribute]
internal class Microsoft.ApplicationInsights.Extensibility.Filtering.CollectionConfigurationInfo : object {
    [CompilerGeneratedAttribute]
private string <ETag>k__BackingField;
    [CompilerGeneratedAttribute]
private QuotaConfigurationInfo <QuotaInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private CalculatedMetricInfo[] <Metrics>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentStreamInfo[] <DocumentStreams>k__BackingField;
    [DataMemberAttribute]
public string ETag { get; public set; }
    [DataMemberAttribute]
public QuotaConfigurationInfo QuotaInfo { get; public set; }
    [DataMemberAttribute]
public CalculatedMetricInfo[] Metrics { get; public set; }
    [DataMemberAttribute]
public DocumentStreamInfo[] DocumentStreams { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ETag();
    [CompilerGeneratedAttribute]
public void set_ETag(string value);
    [CompilerGeneratedAttribute]
public QuotaConfigurationInfo get_QuotaInfo();
    [CompilerGeneratedAttribute]
public void set_QuotaInfo(QuotaConfigurationInfo value);
    [CompilerGeneratedAttribute]
public CalculatedMetricInfo[] get_Metrics();
    [CompilerGeneratedAttribute]
public void set_Metrics(CalculatedMetricInfo[] value);
    [CompilerGeneratedAttribute]
public DocumentStreamInfo[] get_DocumentStreams();
    [CompilerGeneratedAttribute]
public void set_DocumentStreams(DocumentStreamInfo[] value);
}
[DataContractAttribute]
internal class Microsoft.ApplicationInsights.Extensibility.Filtering.DocumentFilterConjunctionGroupInfo : object {
    [CompilerGeneratedAttribute]
private TelemetryType <TelemetryType>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterConjunctionGroupInfo <Filters>k__BackingField;
    [DataMemberAttribute]
public string TelemetryTypeForSerialization { get; public set; }
    public TelemetryType TelemetryType { get; public set; }
    [DataMemberAttribute]
public FilterConjunctionGroupInfo Filters { get; public set; }
    public string get_TelemetryTypeForSerialization();
    public void set_TelemetryTypeForSerialization(string value);
    [CompilerGeneratedAttribute]
public TelemetryType get_TelemetryType();
    [CompilerGeneratedAttribute]
public void set_TelemetryType(TelemetryType value);
    [CompilerGeneratedAttribute]
public FilterConjunctionGroupInfo get_Filters();
    [CompilerGeneratedAttribute]
public void set_Filters(FilterConjunctionGroupInfo value);
    public virtual string ToString();
}
internal class Microsoft.ApplicationInsights.Extensibility.Filtering.DocumentStream : object {
    private static float DefaultMaxTelemetryQuota;
    private static float InitialTelemetryQuota;
    private DocumentStreamInfo info;
    private List`1<FilterConjunctionGroup`1<RequestTelemetry>> requestFilterGroups;
    private List`1<FilterConjunctionGroup`1<DependencyTelemetry>> dependencyFilterGroups;
    private List`1<FilterConjunctionGroup`1<ExceptionTelemetry>> exceptionFilterGroups;
    private List`1<FilterConjunctionGroup`1<EventTelemetry>> eventFilterGroups;
    private List`1<FilterConjunctionGroup`1<TraceTelemetry>> traceFilterGroups;
    [CompilerGeneratedAttribute]
private QuickPulseQuotaTracker <RequestQuotaTracker>k__BackingField;
    [CompilerGeneratedAttribute]
private QuickPulseQuotaTracker <DependencyQuotaTracker>k__BackingField;
    [CompilerGeneratedAttribute]
private QuickPulseQuotaTracker <ExceptionQuotaTracker>k__BackingField;
    [CompilerGeneratedAttribute]
private QuickPulseQuotaTracker <EventQuotaTracker>k__BackingField;
    [CompilerGeneratedAttribute]
private QuickPulseQuotaTracker <TraceQuotaTracker>k__BackingField;
    public QuickPulseQuotaTracker RequestQuotaTracker { get; }
    public QuickPulseQuotaTracker DependencyQuotaTracker { get; }
    public QuickPulseQuotaTracker ExceptionQuotaTracker { get; }
    public QuickPulseQuotaTracker EventQuotaTracker { get; }
    public QuickPulseQuotaTracker TraceQuotaTracker { get; }
    public string Id { get; }
    public DocumentStream(DocumentStreamInfo info, CollectionConfigurationError[]& errors, Clock timeProvider, Nullable`1<float> initialRequestQuota, Nullable`1<float> initialDependencyQuota, Nullable`1<float> initialExceptionQuota, Nullable`1<float> initialEventQuota, Nullable`1<float> initialTraceQuota, Nullable`1<float> maxRequestQuota, Nullable`1<float> maxDependencyQuota, Nullable`1<float> maxExceptionQuota, Nullable`1<float> maxEventQuota, Nullable`1<float> maxTraceQuota, Nullable`1<float> quotaAccrualRatePerSec);
    [CompilerGeneratedAttribute]
public QuickPulseQuotaTracker get_RequestQuotaTracker();
    [CompilerGeneratedAttribute]
public QuickPulseQuotaTracker get_DependencyQuotaTracker();
    [CompilerGeneratedAttribute]
public QuickPulseQuotaTracker get_ExceptionQuotaTracker();
    [CompilerGeneratedAttribute]
public QuickPulseQuotaTracker get_EventQuotaTracker();
    [CompilerGeneratedAttribute]
public QuickPulseQuotaTracker get_TraceQuotaTracker();
    public string get_Id();
    public bool CheckFilters(RequestTelemetry document, CollectionConfigurationError[]& errors);
    public bool CheckFilters(DependencyTelemetry document, CollectionConfigurationError[]& errors);
    public bool CheckFilters(ExceptionTelemetry document, CollectionConfigurationError[]& errors);
    public bool CheckFilters(EventTelemetry document, CollectionConfigurationError[]& errors);
    public bool CheckFilters(TraceTelemetry document, CollectionConfigurationError[]& errors);
    private static bool CheckFilters(List`1<FilterConjunctionGroup`1<TTelemetry>> filterGroups, TTelemetry document, CollectionConfigurationError[]& errors);
    private static bool CheckFiltersGeneric(TTelemetry document, FilterConjunctionGroup`1<TTelemetry> filterGroup, List`1<CollectionConfigurationError> errorList);
    private void CreateFilters(CollectionConfigurationError[]& errors);
}
[DataContractAttribute]
internal class Microsoft.ApplicationInsights.Extensibility.Filtering.DocumentStreamInfo : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentFilterConjunctionGroupInfo[] <DocumentFilterGroups>k__BackingField;
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public DocumentFilterConjunctionGroupInfo[] DocumentFilterGroups { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public DocumentFilterConjunctionGroupInfo[] get_DocumentFilterGroups();
    [CompilerGeneratedAttribute]
public void set_DocumentFilterGroups(DocumentFilterConjunctionGroupInfo[] value);
}
internal class Microsoft.ApplicationInsights.Extensibility.Filtering.Filter`1 : object {
    private static string FieldNameCustomDimensionsPrefix;
    private static string FieldNameCustomMetricsPrefix;
    private static string FieldNameAsterisk;
    private static string CustomMetricsPropertyName;
    private static string CustomDimensionsPropertyName;
    private static char FieldNameTrainSeparator;
    private static MethodInfo DoubleToStringMethodInfo;
    private static MethodInfo NullableDoubleToStringMethodInfo;
    private static MethodInfo ObjectToStringMethodInfo;
    private static MethodInfo ValueTypeToStringMethodInfo;
    private static MethodInfo UriToStringMethodInfo;
    private static MethodInfo StringIndexOfMethodInfo;
    private static MethodInfo StringEqualsMethodInfo;
    private static MethodInfo DoubleTryParseMethodInfo;
    private static MethodInfo DictionaryStringStringTryGetValueMethodInfo;
    private static MethodInfo DictionaryStringDoubleTryGetValueMethodInfo;
    private static MethodInfo DictionaryStringStringScanMethodInfo;
    private static MethodInfo DictionaryStringDoubleScanMethodInfo;
    private static ConstantExpression DoubleDefaultNumberStyles;
    private static ConstantExpression InvariantCulture;
    private Func`2<TTelemetry, bool> filterLambda;
    private Nullable`1<double> comparandDouble;
    private Nullable`1<bool> comparandBoolean;
    private Nullable`1<TimeSpan> comparandTimeSpan;
    private string comparand;
    private Predicate predicate;
    private string fieldName;
    private FilterInfo info;
    public Filter`1(FilterInfo filterInfo);
    private static Filter`1();
    public bool Check(TTelemetry document);
    public virtual string ToString();
    internal static Expression ProduceFieldExpression(ParameterExpression documentExpression, string fieldName, FieldNameType<TTelemetry> fieldNameType);
    internal static Type GetFieldType(string fieldName, FieldNameType& fieldNameType);
    private static Expression CreateDictionaryAccessExpression(ParameterExpression documentExpression, string dictionaryName, MethodInfo tryGetValueMethodInfo, Type valueType, string keyValue);
    private static MethodInfo GetMethodInfo(Expression`1<Func`2<T, TResult>> expression);
    private static MethodInfo GetMethodInfo(Expression`1<Func`3<T1, T2, TResult>> expression);
    private static Type GetPropertyTypeFromFieldName(string fieldName);
    private static void ValidateInput(FilterInfo filterInfo);
    private static bool ScanDictionary(IDictionary`2<string, string> dict, string searchValue);
    private static bool ScanDictionary(IDictionary`2<string, double> dict, string searchValue);
    private Expression ProduceComparatorExpressionForSingleFieldCondition(Expression fieldExpression, Type fieldType, bool isFieldTypeNullable);
    private Expression ProduceComparatorExpressionForAnyFieldCondition(ParameterExpression documentExpression);
    private Expression CreateStringToDoubleComparisonBlock(Expression fieldExpression, Predicate predicate);
    private void ThrowOnInvalidFilter(Type fieldType, bool conditionToThrow);
    [CompilerGeneratedAttribute]
private bool <ProduceComparatorExpressionForSingleFieldCondition>b__41_0(TimeSpan fieldValue);
    [CompilerGeneratedAttribute]
private bool <ProduceComparatorExpressionForSingleFieldCondition>b__41_1(TimeSpan fieldValue);
    [CompilerGeneratedAttribute]
private bool <ProduceComparatorExpressionForSingleFieldCondition>b__41_2(TimeSpan fieldValue);
    [CompilerGeneratedAttribute]
private bool <ProduceComparatorExpressionForSingleFieldCondition>b__41_3(TimeSpan fieldValue);
    [CompilerGeneratedAttribute]
private bool <ProduceComparatorExpressionForSingleFieldCondition>b__41_4(TimeSpan fieldValue);
    [CompilerGeneratedAttribute]
private bool <ProduceComparatorExpressionForSingleFieldCondition>b__41_5(TimeSpan fieldValue);
}
internal class Microsoft.ApplicationInsights.Extensibility.Filtering.FilterConjunctionGroup`1 : object {
    private FilterConjunctionGroupInfo info;
    private List`1<Filter`1<TTelemetry>> filters;
    public FilterConjunctionGroup`1(FilterConjunctionGroupInfo info, CollectionConfigurationError[]& errors);
    public bool CheckFilters(TTelemetry document, CollectionConfigurationError[]& errors);
    private void CreateFilters(CollectionConfigurationError[]& errors);
}
[DataContractAttribute]
internal class Microsoft.ApplicationInsights.Extensibility.Filtering.FilterConjunctionGroupInfo : object {
    [CompilerGeneratedAttribute]
private FilterInfo[] <Filters>k__BackingField;
    [DataMemberAttribute]
public FilterInfo[] Filters { get; public set; }
    [CompilerGeneratedAttribute]
public FilterInfo[] get_Filters();
    [CompilerGeneratedAttribute]
public void set_Filters(FilterInfo[] value);
    public virtual string ToString();
}
[DataContractAttribute]
internal class Microsoft.ApplicationInsights.Extensibility.Filtering.FilterInfo : object {
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private Predicate <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comparand>k__BackingField;
    [DataMemberAttribute]
public string FieldName { get; public set; }
    [DataMemberAttribute]
public string PredicateForSerialization { get; public set; }
    public Predicate Predicate { get; public set; }
    [DataMemberAttribute]
public string Comparand { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    public string get_PredicateForSerialization();
    public void set_PredicateForSerialization(string value);
    [CompilerGeneratedAttribute]
public Predicate get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Predicate value);
    [CompilerGeneratedAttribute]
public string get_Comparand();
    [CompilerGeneratedAttribute]
public void set_Comparand(string value);
    public virtual string ToString();
    public virtual int GetHashCode();
}
internal enum Microsoft.ApplicationInsights.Extensibility.Filtering.Predicate : Enum {
    public int value__;
    public static Predicate Equal;
    public static Predicate NotEqual;
    public static Predicate LessThan;
    public static Predicate GreaterThan;
    public static Predicate LessThanOrEqual;
    public static Predicate GreaterThanOrEqual;
    public static Predicate Contains;
    public static Predicate DoesNotContain;
}
internal enum Microsoft.ApplicationInsights.Extensibility.Filtering.TelemetryType : Enum {
    public int value__;
    public static TelemetryType Request;
    public static TelemetryType Dependency;
    public static TelemetryType Exception;
    public static TelemetryType Event;
    public static TelemetryType PerformanceCounter;
    public static TelemetryType Trace;
}
internal interface Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.ICounterValue {
    public abstract virtual double Collect();
}
internal interface Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.IPerformanceCollector {
    public IEnumerable`1<PerformanceCounterData> PerformanceCounters { get; }
    public abstract virtual IEnumerable`1<PerformanceCounterData> get_PerformanceCounters();
    public abstract virtual IEnumerable`1<Tuple`2<PerformanceCounterData, double>> Collect(Action`2<string, Exception> onReadingFailure);
    public abstract virtual void RefreshCounters();
    public abstract virtual void RegisterCounter(string perfCounter, string reportAs, String& error, bool blockCounterWithInstancePlaceHolder);
    public abstract virtual void RemoveCounter(string perfCounter, string reportAs);
}
[EventSourceAttribute]
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.PerformanceCollectorEventSource : EventSource {
    private ApplicationNameProvider applicationNameProvider;
    [CompilerGeneratedAttribute]
private static PerformanceCollectorEventSource <Log>k__BackingField;
    public static PerformanceCollectorEventSource Log { get; }
    private static PerformanceCollectorEventSource();
    [CompilerGeneratedAttribute]
public static PerformanceCollectorEventSource get_Log();
    [EventAttribute("1")]
public void ModuleIsBeingInitializedEvent(string message, string applicationName);
    [EventAttribute("3")]
public void CounterRegisteredEvent(string counter, string applicationName);
    [EventAttribute("4")]
public void CountersRefreshedEvent(string countersRefreshedCount, string applicationName);
    [EventAttribute("5")]
public void CounterRegistrationFailedEvent(string e, string counter, string applicationName);
    [EventAttribute("6")]
public void CounterParsingFailedEvent(string e, string counter, string applicationName);
    [EventAttribute("8")]
public void CounterCheckConfigurationEvent(string misconfiguredCountersCount, string e, string applicationName);
    [EventAttribute("15")]
public void RunningUnderIisExpress(string applicationName);
    [EventAttribute("9")]
public void CounterCollectionAttemptEvent(string applicationName);
    [EventAttribute("10")]
public void CounterCollectionSuccessEvent(long counterCount, long operationDurationInMs, string applicationName);
    [EventAttribute("11")]
public void CounterReadingFailedEvent(string e, string counter, string applicationName);
    [EventAttribute("12")]
public void TelemetrySendFailedEvent(string e, string applicationName);
    [EventAttribute("13")]
public void UnknownErrorEvent(string e, string applicationName);
    [EventAttribute("14")]
public void TroubleshootingMessageEvent(string message, string applicationName);
    [EventAttribute("16")]
public void CounterNotWebAppSupported(string counterName, string applicationName);
    [EventAttribute("17")]
public void AccessingEnvironmentVariableFailedWarning(string environmentVariable, string exceptionMessage, string applicationName);
    [EventAttribute("18")]
public void WebAppCounterRegistrationFailedEvent(string e, string counter, string applicationName);
    [EventAttribute("19")]
public void WebAppCounterNegativeValue(double lastCollectedValue, double previouslyCollectedValue, string counterName, string applicationName);
    [EventAttribute("20")]
public void ProcessorsCountIncorrectValueError(string count, string applicationName);
    [EventAttribute("21")]
public void PerfCounterNetCoreOnlyOnAzureWebApp(string applicationName);
    [EventAttribute("22")]
public void CounterNotXPlatformSupported(string counterName, string applicationName);
    [EventAttribute("23")]
public void InitializedWithCollector(string collectorName, string applicationName);
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.PerformanceCounterData : object {
    [CompilerGeneratedAttribute]
private PerformanceCounterStructure <PerformanceCounter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportAs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsesInstanceNamePlaceholder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInBadState>k__BackingField;
    public PerformanceCounterStructure PerformanceCounter { get; private set; }
    public string OriginalString { get; private set; }
    public string ReportAs { get; private set; }
    public bool UsesInstanceNamePlaceholder { get; private set; }
    public bool IsInBadState { get; private set; }
    public PerformanceCounterData(string originalString, string reportAs, bool usesInstanceNamePlaceholder, bool isInBadState, string categoryName, string counterName, string instanceName);
    public PerformanceCounterData(string originalString, string reportAs, bool usesInstanceNamePlaceholder, bool isInBadState, PerformanceCounterStructure counter);
    [CompilerGeneratedAttribute]
public PerformanceCounterStructure get_PerformanceCounter();
    [CompilerGeneratedAttribute]
private void set_PerformanceCounter(PerformanceCounterStructure value);
    [CompilerGeneratedAttribute]
public string get_OriginalString();
    [CompilerGeneratedAttribute]
private void set_OriginalString(string value);
    [CompilerGeneratedAttribute]
public string get_ReportAs();
    [CompilerGeneratedAttribute]
private void set_ReportAs(string value);
    [CompilerGeneratedAttribute]
public bool get_UsesInstanceNamePlaceholder();
    [CompilerGeneratedAttribute]
private void set_UsesInstanceNamePlaceholder(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsInBadState();
    [CompilerGeneratedAttribute]
private void set_IsInBadState(bool value);
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.PerformanceCounterStructure : object {
    [CompilerGeneratedAttribute]
private string <CategoryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CounterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceName>k__BackingField;
    public string CategoryName { get; public set; }
    public string CounterName { get; public set; }
    public string InstanceName { get; public set; }
    public PerformanceCounterStructure(string categoryName, string counterName, string instanceName);
    [CompilerGeneratedAttribute]
public string get_CategoryName();
    [CompilerGeneratedAttribute]
public void set_CategoryName(string value);
    [CompilerGeneratedAttribute]
public string get_CounterName();
    [CompilerGeneratedAttribute]
public void set_CounterName(string value);
    [CompilerGeneratedAttribute]
public string get_InstanceName();
    [CompilerGeneratedAttribute]
public void set_InstanceName(string value);
}
internal static class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.PerformanceCounterUtility : object {
    public static bool IsWindows;
    internal static Nullable`1<bool> isAzureWebApp;
    private static string Win32ProcessInstancePlaceholder;
    private static string ClrProcessInstancePlaceholder;
    private static string W3SvcProcessInstancePlaceholder;
    private static string Win32ProcessCategoryName;
    private static string ClrProcessCategoryName;
    private static string Win32ProcessCounterName;
    private static string ClrProcessCounterName;
    private static string StandardSdkVersionPrefix;
    private static string AzureWebAppSdkVersionPrefix;
    private static string AzureWebAppCoreSdkVersionPrefix;
    private static string WebSiteEnvironmentVariable;
    private static string WebSiteIsolationEnvironmentVariable;
    private static string WebSiteIsolationHyperV;
    private static ConcurrentDictionary`2<string, Tuple`3<DateTime, PerformanceCounterCategory, InstanceDataCollectionCollection>> cache;
    private static ConcurrentDictionary`2<string, string> PlaceholderCache;
    private static Regex InstancePlaceholderRegex;
    private static Regex PerformanceCounterRegex;
    private static PerformanceCounterUtility();
    public static string FormatPerformanceCounter(PerformanceCounter pc);
    public static bool IsPerfCounterSupported();
    public static IPerformanceCollector GetPerformanceCollector();
    public static string FormatPerformanceCounter(PerformanceCounterStructure pc);
    public static bool IsWebAppRunningInAzure();
    public static Nullable`1<int> GetProcessorCount();
    public static string SDKVersionPrefix();
    public static string FormatPerformanceCounter(string categoryName, string counterName, string instanceName);
    public static PerformanceCounterStructure CreateAndValidateCounter(string perfCounterName, IEnumerable`1<string> win32Instances, IEnumerable`1<string> clrInstances, bool supportInstanceNames, Boolean& usesInstanceNamePlaceholder, String& error);
    public static PerformanceCounterStructure ParsePerformanceCounter(string performanceCounter, IEnumerable`1<string> win32Instances, IEnumerable`1<string> clrInstances, bool supportInstanceNames, Boolean& usesInstanceNamePlaceholder);
    public static void InvalidatePlaceholderCache();
    public static Match MatchInstancePlaceholder(string instanceName);
    internal static string GetInstanceForCurrentW3SvcWorker();
    internal static string GetInstanceFromApplicationDomain(string domainFriendlyName);
    internal static string GetInstanceForWin32Process(IEnumerable`1<string> win32Instances);
    internal static string GetInstanceForClrProcess(IEnumerable`1<string> clrInstances);
    internal static IList`1<string> GetWin32ProcessInstances();
    internal static IList`1<string> GetClrProcessInstances();
    private static string ExpandInstanceName(string instanceName, IEnumerable`1<string> win32Instances, IEnumerable`1<string> clrInstances, bool supportInstanceNames, Boolean& usesPlaceholder);
    private static string FindProcessInstance(int pid, IEnumerable`1<string> instances, string categoryName, string counterName);
    private static IList`1<string> GetInstances(string categoryName);
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.Helpers.Clock : object {
    public DateTimeOffset UtcNow { get; }
    public virtual DateTimeOffset get_UtcNow();
}
internal interface Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.Helpers.IQuickPulseModuleScheduler {
    public abstract virtual IQuickPulseModuleSchedulerHandle Execute(Action`1<CancellationToken> action);
}
internal interface Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.Helpers.IQuickPulseModuleSchedulerHandle {
    public abstract virtual void Stop(bool wait);
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.Helpers.QuickPulseCollectionTimeSlotManager : object {
    public virtual DateTimeOffset GetNextCollectionTimeSlot(DateTimeOffset currentTime);
}
[FlagsAttribute]
internal enum Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.Helpers.QuickPulseCounter : Enum {
    public int value__;
    public static QuickPulseCounter Bytes;
    public static QuickPulseCounter ProcessorTime;
}
internal static class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.Helpers.QuickPulseDefaults : object {
    public static Uri QuickPulseServiceEndpoint;
    private static Dictionary`2<QuickPulseCounter, string> DefaultPerformanceCountersToCollect;
    private static Dictionary`2<QuickPulseCounter, string> WebAppDefaultPerformanceCountersToCollect;
    private static Dictionary`2<string, string> WebAppToStandardCounterMapping;
    public static Dictionary`2<QuickPulseCounter, string> DefaultCountersToCollect { get; }
    public static Dictionary`2<string, string> DefaultCounterOriginalStringMapping { get; }
    private static QuickPulseDefaults();
    public static Dictionary`2<QuickPulseCounter, string> get_DefaultCountersToCollect();
    public static Dictionary`2<string, string> get_DefaultCounterOriginalStringMapping();
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.Helpers.QuickPulseQuotaTracker : object {
    private float quotaAccrualRatePerSec;
    private DateTimeOffset startedTrackingTime;
    private Clock timeProvider;
    private float currentQuota;
    private float maxQuota;
    private long lastQuotaAccrualFullSeconds;
    public float CurrentQuota { get; }
    public float MaxQuota { get; }
    public bool QuotaExhausted { get; }
    public QuickPulseQuotaTracker(Clock timeProvider, float maxQuota, float startQuota, Nullable`1<float> quotaAccrualRatePerSec);
    public float get_CurrentQuota();
    public float get_MaxQuota();
    public bool get_QuotaExhausted();
    public bool ApplyQuota();
    private bool UseQuota();
    private void AccrueQuota(long currentTimeFullSeconds);
    private void IncreaseQuota(long seconds);
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.Helpers.QuickPulseTaskModuleScheduler : object {
    public static QuickPulseTaskModuleScheduler Instance;
    private static QuickPulseTaskModuleScheduler();
    public sealed virtual IQuickPulseModuleSchedulerHandle Execute(Action`1<CancellationToken> action);
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.Helpers.QuickPulseThreadState : object {
    public Boolean modreq(System.Runtime.CompilerServices.IsVolatile) IsStopRequested;
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.Helpers.QuickPulseTimings : object {
    [CompilerGeneratedAttribute]
private TimeSpan <ServicePollingInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ServicePollingBackedOffInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TimeToServicePollingBackOff>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <CollectionInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TimeToCollectionBackOff>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <CatastrophicFailureTimeout>k__BackingField;
    public static QuickPulseTimings Default { get; }
    public TimeSpan ServicePollingInterval { get; private set; }
    public TimeSpan ServicePollingBackedOffInterval { get; private set; }
    public TimeSpan TimeToServicePollingBackOff { get; private set; }
    public TimeSpan CollectionInterval { get; private set; }
    public TimeSpan TimeToCollectionBackOff { get; private set; }
    public TimeSpan CatastrophicFailureTimeout { get; private set; }
    public QuickPulseTimings(TimeSpan servicePollingInterval, TimeSpan servicePollingBackedOffInterval, TimeSpan timeToServicePollingBackOff, TimeSpan collectionInterval, TimeSpan timeToCollectionBackOff, TimeSpan catastrophicFailuretimeout);
    public QuickPulseTimings(TimeSpan servicePollingInterval, TimeSpan collectionInterval);
    public static QuickPulseTimings get_Default();
    [CompilerGeneratedAttribute]
public TimeSpan get_ServicePollingInterval();
    [CompilerGeneratedAttribute]
private void set_ServicePollingInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ServicePollingBackedOffInterval();
    [CompilerGeneratedAttribute]
private void set_ServicePollingBackedOffInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_TimeToServicePollingBackOff();
    [CompilerGeneratedAttribute]
private void set_TimeToServicePollingBackOff(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_CollectionInterval();
    [CompilerGeneratedAttribute]
private void set_CollectionInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_TimeToCollectionBackOff();
    [CompilerGeneratedAttribute]
private void set_TimeToCollectionBackOff(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_CatastrophicFailureTimeout();
    [CompilerGeneratedAttribute]
private void set_CatastrophicFailureTimeout(TimeSpan value);
}
internal interface Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.IQuickPulseDataAccumulatorManager {
    public QuickPulseDataAccumulator CurrentDataAccumulator { get; }
    public abstract virtual QuickPulseDataAccumulator get_CurrentDataAccumulator();
    public abstract virtual QuickPulseDataAccumulator CompleteCurrentDataAccumulator(CollectionConfiguration collectionConfiguration);
}
internal interface Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.IQuickPulsePerfLib {
    public abstract virtual CategorySample GetCategorySample(int categoryIndex, int counterIndex);
    public abstract virtual void Initialize();
    public abstract virtual void Close();
}
internal interface Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.IQuickPulseProcessProvider {
    public abstract virtual void Initialize();
    public abstract virtual void Close();
    public abstract virtual IEnumerable`1<QuickPulseProcess> GetProcesses(Nullable`1& totalTime);
}
internal interface Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.IQuickPulseServiceClient {
    public Uri CurrentServiceUri { get; }
    public abstract virtual Uri get_CurrentServiceUri();
    public abstract virtual Nullable`1<bool> Ping(string instrumentationKey, DateTimeOffset timestamp, string configurationETag, string authApiKey, string authToken, CollectionConfigurationInfo& configurationInfo, Nullable`1& servicePollingIntervalHint);
    public abstract virtual Nullable`1<bool> SubmitSamples(IEnumerable`1<QuickPulseDataSample> samples, string instrumentationKey, string configurationETag, string authApiKey, string authToken, CollectionConfigurationInfo& configurationInfo, CollectionConfigurationError[] collectionConfigurationErrors);
}
internal interface Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.IQuickPulseTopCpuCollector {
    public bool InitializationFailed { get; }
    public bool AccessDenied { get; }
    public abstract virtual bool get_InitializationFailed();
    public abstract virtual bool get_AccessDenied();
    public abstract virtual IEnumerable`1<Tuple`2<string, int>> GetTopProcessesByCpu(int topN);
    public abstract virtual void Initialize();
    public abstract virtual void Close();
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.PerfLib.CategorySample : object {
    public Dictionary`2<int, CounterDefinitionSample> CounterTable;
    public Dictionary`2<string, int> InstanceNameTable;
    private PerfLib library;
    public CategorySample(Byte[] data, int categoryNameIndex, int counterNameIndex, PerfLib library);
    private static bool IsBaseCounter(int type);
    private String[] GetInstanceNamesFromIndex(int categoryIndex);
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.PerfLib.CounterDefinitionSample : object {
    internal int NameIndex;
    internal int CounterType;
    internal Int64[] InstanceValues;
    private int size;
    private int offset;
    public CounterDefinitionSample(PERF_COUNTER_DEFINITION perfCounter, int instanceNumber);
    public void SetInstanceValue(int index, IntPtr dataRef);
    public long GetInstanceValue(int instanceIndex);
    private long ReadValue(IntPtr pointer);
}
internal static class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.PerfLib.NativeMethods : object {
    public static int WAIT_TIMEOUT;
    public static int ERROR_NOT_READY;
    public static int ERROR_LOCK_FAILED;
    public static int ERROR_BUSY;
    public static int PERF_SIZE_DWORD;
    public static int PERF_SIZE_LARGE;
    public static int PERF_SIZE_ZERO;
    public static int PERF_TYPE_COUNTER;
    public static int PERF_COUNTER_BASE;
    public static int PERF_MULTI_COUNTER;
    public static int PERF_DISPLAY_NOSHOW;
    public static int PERF_COUNTER_NODATA;
    public static int PERF_SAMPLE_BASE;
    public static int PERF_AVERAGE_BASE;
    public static int PERF_COUNTER_MULTI_BASE;
    public static int PERF_RAW_BASE;
    public static int PERF_LARGE_RAW_BASE;
    public static int ERROR_ACCESS_DENIED;
    public static int ERROR_INVALID_HANDLE;
    public static int RPC_S_SERVER_UNAVAILABLE;
    public static int RPC_S_CALL_FAILED;
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.PerfLib.PerfLib : object {
    private static PerfLib library;
    private PerformanceMonitor performanceMonitor;
    public static PerfLib GetPerfLib();
    public sealed virtual CategorySample GetCategorySample(int categoryIndex, int counterIndex);
    public sealed virtual void Initialize();
    public sealed virtual void Close();
    public Byte[] GetPerformanceData(string categoryIndex);
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.PerfLib.PerformanceMonitor : object {
    private static Byte[] emptyResult;
    private static PerformanceMonitor();
    public void Close();
    public Byte[] GetData(string categoryIndex);
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.QuickPulseCollectionStateManager : object {
    private IQuickPulseServiceClient serviceClient;
    private Clock timeProvider;
    private QuickPulseTimings timings;
    private Action onStartCollection;
    private Action onStopCollection;
    private Func`1<IList`1<QuickPulseDataSample>> onSubmitSamples;
    private Action`1<IList`1<QuickPulseDataSample>> onReturnFailedSamples;
    private Func`2<CollectionConfigurationInfo, CollectionConfigurationError[]> onUpdatedConfiguration;
    private Action`1<Uri> onUpdatedServiceEndpoint;
    private TimeSpan coolDownTimeout;
    private List`1<CollectionConfigurationError> collectionConfigurationErrors;
    private TelemetryConfiguration telemetryConfiguration;
    private DateTimeOffset lastSuccessfulPing;
    private DateTimeOffset lastSuccessfulSubmit;
    private bool isCollectingData;
    private bool firstStateUpdate;
    private string currentConfigurationETag;
    private Nullable`1<TimeSpan> latestServicePollingIntervalHint;
    public bool IsCollectingData { get; private set; }
    public QuickPulseCollectionStateManager(TelemetryConfiguration telemetryConfiguration, IQuickPulseServiceClient serviceClient, Clock timeProvider, QuickPulseTimings timings, Action onStartCollection, Action onStopCollection, Func`1<IList`1<QuickPulseDataSample>> onSubmitSamples, Action`1<IList`1<QuickPulseDataSample>> onReturnFailedSamples, Func`2<CollectionConfigurationInfo, CollectionConfigurationError[]> onUpdatedConfiguration, Action`1<Uri> onUpdatedServiceEndpoint);
    public bool get_IsCollectingData();
    private void set_IsCollectingData(bool value);
    public TimeSpan UpdateState(string instrumentationKey, string authApiKey);
    private void UpdateConfiguration(CollectionConfigurationInfo configurationInfo);
    private TimeSpan DetermineBackOffs();
    private void ResetLastSuccessful();
}
internal static class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.QuickPulseConstants : object {
    internal static string AuthorizationHeaderName;
    internal static string AuthorizationTokenPrefix;
    internal static string XMsQpsSubscribedHeaderName;
    internal static string XMsQpsTransmissionTimeHeaderName;
    internal static string XMsQpsConfigurationETagHeaderName;
    internal static string XMsQpsInstanceNameHeaderName;
    internal static string XMsQpsStreamIdHeaderName;
    internal static string XMsQpsMachineNameHeaderName;
    internal static string XMsQpsRoleNameHeaderName;
    internal static string XMsQpsInvariantVersionHeaderName;
    internal static string XMsQpsAuthApiKeyHeaderName;
    internal static string XMsQpsServicePollingIntervalHintHeaderName;
    internal static string XMsQpsServiceEndpointRedirectHeaderName;
    internal static String[] XMsQpsAuthOpaqueHeaderNames;
    private static QuickPulseConstants();
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.QuickPulseDataAccumulator : object {
    public Nullable`1<DateTimeOffset> StartTimestamp;
    public Nullable`1<DateTimeOffset> EndTimestamp;
    public long AIRequestCountAndDurationInTicks;
    public long AIRequestSuccessCount;
    public long AIRequestFailureCount;
    public long AIDependencyCallCountAndDurationInTicks;
    public long AIDependencyCallSuccessCount;
    public long AIDependencyCallFailureCount;
    public long AIExceptionCount;
    public bool GlobalDocumentQuotaReached;
    private static long MaxCount;
    private static long MaxDuration;
    [CompilerGeneratedAttribute]
private ConcurrentStack`1<ITelemetryDocument> <TelemetryDocuments>k__BackingField;
    [CompilerGeneratedAttribute]
private CollectionConfigurationAccumulator <CollectionConfigurationAccumulator>k__BackingField;
    public long AIRequestCount { get; }
    public long AIRequestDurationInTicks { get; }
    public long AIDependencyCallCount { get; }
    public long AIDependencyCallDurationInTicks { get; }
    public ConcurrentStack`1<ITelemetryDocument> TelemetryDocuments { get; public set; }
    public CollectionConfigurationAccumulator CollectionConfigurationAccumulator { get; private set; }
    public QuickPulseDataAccumulator(CollectionConfiguration collectionConfiguration);
    public long get_AIRequestCount();
    public long get_AIRequestDurationInTicks();
    public long get_AIDependencyCallCount();
    public long get_AIDependencyCallDurationInTicks();
    [CompilerGeneratedAttribute]
public ConcurrentStack`1<ITelemetryDocument> get_TelemetryDocuments();
    [CompilerGeneratedAttribute]
public void set_TelemetryDocuments(ConcurrentStack`1<ITelemetryDocument> value);
    [CompilerGeneratedAttribute]
public CollectionConfigurationAccumulator get_CollectionConfigurationAccumulator();
    [CompilerGeneratedAttribute]
private void set_CollectionConfigurationAccumulator(CollectionConfigurationAccumulator value);
    public static long EncodeCountAndDuration(long count, long duration);
    public static Tuple`2<long, long> DecodeCountAndDuration(long countAndDuration);
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.QuickPulseDataAccumulatorManager : object {
    private QuickPulseDataAccumulator currentDataAccumulator;
    private QuickPulseDataAccumulator completedDataAccumulator;
    public QuickPulseDataAccumulator CurrentDataAccumulator { get; }
    public QuickPulseDataAccumulatorManager(CollectionConfiguration collectionConfiguration);
    public sealed virtual QuickPulseDataAccumulator get_CurrentDataAccumulator();
    public sealed virtual QuickPulseDataAccumulator CompleteCurrentDataAccumulator(CollectionConfiguration collectionConfiguration);
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.QuickPulseDataSample : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <EndTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AIRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AIRequestsPerSecond>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AIRequestDurationAveInMs>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AIRequestsFailedPerSecond>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AIRequestsSucceededPerSecond>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AIDependencyCalls>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AIDependencyCallsPerSecond>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AIDependencyCallDurationAveInMs>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AIDependencyCallsFailedPerSecond>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AIDependencyCallsSucceededPerSecond>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AIExceptionsPerSecond>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GlobalDocumentQuotaReached>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, double> <PerfCountersLookup>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Tuple`2<string, int>> <TopCpuData>k__BackingField;
    [CompilerGeneratedAttribute]
private ITelemetryDocument[] <TelemetryDocuments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TopCpuDataAccessDenied>k__BackingField;
    [CompilerGeneratedAttribute]
private CollectionConfigurationAccumulator <CollectionConfigurationAccumulator>k__BackingField;
    public DateTimeOffset StartTimestamp { get; }
    public DateTimeOffset EndTimestamp { get; }
    public int AIRequests { get; private set; }
    public double AIRequestsPerSecond { get; private set; }
    public double AIRequestDurationAveInMs { get; private set; }
    public double AIRequestsFailedPerSecond { get; private set; }
    public double AIRequestsSucceededPerSecond { get; private set; }
    public int AIDependencyCalls { get; private set; }
    public double AIDependencyCallsPerSecond { get; private set; }
    public double AIDependencyCallDurationAveInMs { get; private set; }
    public double AIDependencyCallsFailedPerSecond { get; private set; }
    public double AIDependencyCallsSucceededPerSecond { get; private set; }
    public double AIExceptionsPerSecond { get; private set; }
    public bool GlobalDocumentQuotaReached { get; private set; }
    public IDictionary`2<string, double> PerfCountersLookup { get; private set; }
    public IEnumerable`1<Tuple`2<string, int>> TopCpuData { get; private set; }
    public ITelemetryDocument[] TelemetryDocuments { get; private set; }
    public bool TopCpuDataAccessDenied { get; private set; }
    public CollectionConfigurationAccumulator CollectionConfigurationAccumulator { get; private set; }
    public QuickPulseDataSample(QuickPulseDataAccumulator accumulator, IDictionary`2<string, Tuple`2<PerformanceCounterData, double>> perfData, IEnumerable`1<Tuple`2<string, int>> topCpuData, bool topCpuDataAccessDenied);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_StartTimestamp();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_EndTimestamp();
    [CompilerGeneratedAttribute]
public int get_AIRequests();
    [CompilerGeneratedAttribute]
private void set_AIRequests(int value);
    [CompilerGeneratedAttribute]
public double get_AIRequestsPerSecond();
    [CompilerGeneratedAttribute]
private void set_AIRequestsPerSecond(double value);
    [CompilerGeneratedAttribute]
public double get_AIRequestDurationAveInMs();
    [CompilerGeneratedAttribute]
private void set_AIRequestDurationAveInMs(double value);
    [CompilerGeneratedAttribute]
public double get_AIRequestsFailedPerSecond();
    [CompilerGeneratedAttribute]
private void set_AIRequestsFailedPerSecond(double value);
    [CompilerGeneratedAttribute]
public double get_AIRequestsSucceededPerSecond();
    [CompilerGeneratedAttribute]
private void set_AIRequestsSucceededPerSecond(double value);
    [CompilerGeneratedAttribute]
public int get_AIDependencyCalls();
    [CompilerGeneratedAttribute]
private void set_AIDependencyCalls(int value);
    [CompilerGeneratedAttribute]
public double get_AIDependencyCallsPerSecond();
    [CompilerGeneratedAttribute]
private void set_AIDependencyCallsPerSecond(double value);
    [CompilerGeneratedAttribute]
public double get_AIDependencyCallDurationAveInMs();
    [CompilerGeneratedAttribute]
private void set_AIDependencyCallDurationAveInMs(double value);
    [CompilerGeneratedAttribute]
public double get_AIDependencyCallsFailedPerSecond();
    [CompilerGeneratedAttribute]
private void set_AIDependencyCallsFailedPerSecond(double value);
    [CompilerGeneratedAttribute]
public double get_AIDependencyCallsSucceededPerSecond();
    [CompilerGeneratedAttribute]
private void set_AIDependencyCallsSucceededPerSecond(double value);
    [CompilerGeneratedAttribute]
public double get_AIExceptionsPerSecond();
    [CompilerGeneratedAttribute]
private void set_AIExceptionsPerSecond(double value);
    [CompilerGeneratedAttribute]
public bool get_GlobalDocumentQuotaReached();
    [CompilerGeneratedAttribute]
private void set_GlobalDocumentQuotaReached(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, double> get_PerfCountersLookup();
    [CompilerGeneratedAttribute]
private void set_PerfCountersLookup(IDictionary`2<string, double> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Tuple`2<string, int>> get_TopCpuData();
    [CompilerGeneratedAttribute]
private void set_TopCpuData(IEnumerable`1<Tuple`2<string, int>> value);
    [CompilerGeneratedAttribute]
public ITelemetryDocument[] get_TelemetryDocuments();
    [CompilerGeneratedAttribute]
private void set_TelemetryDocuments(ITelemetryDocument[] value);
    [CompilerGeneratedAttribute]
public bool get_TopCpuDataAccessDenied();
    [CompilerGeneratedAttribute]
private void set_TopCpuDataAccessDenied(bool value);
    [CompilerGeneratedAttribute]
public CollectionConfigurationAccumulator get_CollectionConfigurationAccumulator();
    [CompilerGeneratedAttribute]
private void set_CollectionConfigurationAccumulator(CollectionConfigurationAccumulator value);
}
[EventSourceAttribute]
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.QuickPulseEventSource : EventSource {
    private static QuickPulseEventSource Logger;
    private ApplicationNameProvider applicationNameProvider;
    public static QuickPulseEventSource Log { get; }
    private static QuickPulseEventSource();
    public static QuickPulseEventSource get_Log();
    [EventAttribute("1")]
public void ModuleIsBeingInitializedEvent(string serviceEndpoint, bool disableFullTelemetryItems, bool disableTopCpuProcesses, string authApiKey, string applicationName);
    [EventAttribute("3")]
public void CounterRegisteredEvent(string counter, string applicationName);
    [EventAttribute("5")]
public void CounterRegistrationFailedEvent(string e, string counter, string applicationName);
    [EventAttribute("6")]
public void CounterParsingFailedEvent(string e, string counter, string applicationName);
    [EventAttribute("11")]
public void CounterReadingFailedEvent(string e, string counter, string applicationName);
    [EventAttribute("20")]
public void ProcessesReadingFailedEvent(string e, string applicationName);
    [EventAttribute("12")]
public void ServiceCommunicationFailedEvent(string e, string applicationName);
    [EventAttribute("13")]
public void UnknownErrorEvent(string e, string applicationName);
    [EventAttribute("14")]
public void TroubleshootingMessageEvent(string message, string applicationName);
    [EventAttribute("21")]
public void CollectionConfigurationSampleCooldownEvent(bool cooledDown, string applicationName);
    [EventAttribute("15")]
public void SampleSubmittedEvent(string outgoingEtag, string incomingEtag, string response, string applicationName);
    [EventAttribute("16")]
public void PingSentEvent(string outgoingEtag, string incomingEtag, string response, string applicationName);
    [EventAttribute("17")]
public void StateTimerTickFinishedEvent(long elapsedMs, string applicationName);
    [EventAttribute("18")]
public void CollectionTimerTickFinishedEvent(long elapsedMs, string applicationName);
    [EventAttribute("19")]
public void SampleStoredEvent(int bufferLength, string applicationName);
    [EventAttribute("7")]
public void ProcessorRegistered(string count, string applicationName);
    [EventAttribute("22")]
public void CollectionConfigurationUpdating(string oldEtag, string newEtag, string configuration, string applicationName);
    [EventAttribute("23")]
public void CollectionConfigurationUpdateFailed(string oldEtag, string newEtag, string configuration, string e, string applicationName);
    [EventAttribute("24")]
public void FailedToGetAuthToken(string applicationName);
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.QuickPulseProcess : object {
    [CompilerGeneratedAttribute]
private string <ProcessName>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TotalProcessorTime>k__BackingField;
    public string ProcessName { get; }
    public TimeSpan TotalProcessorTime { get; }
    public QuickPulseProcess(string processName, TimeSpan totalProcessorTime);
    [CompilerGeneratedAttribute]
public string get_ProcessName();
    [CompilerGeneratedAttribute]
public TimeSpan get_TotalProcessorTime();
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.QuickPulseProcessProvider : object {
    private IQuickPulsePerfLib perfLib;
    public QuickPulseProcessProvider(IQuickPulsePerfLib perfLib);
    public sealed virtual void Initialize();
    public sealed virtual void Close();
    public sealed virtual IEnumerable`1<QuickPulseProcess> GetProcesses(Nullable`1& totalTime);
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.QuickPulseServiceClient : object {
    private string instanceName;
    private string roleName;
    private string streamId;
    private string machineName;
    private string version;
    private TimeSpan timeout;
    private Clock timeProvider;
    private bool isWebApp;
    private int processorCount;
    private DataContractJsonSerializer serializerDataPoint;
    private DataContractJsonSerializer serializerDataPointArray;
    private DataContractJsonSerializer deserializerServerResponse;
    private Dictionary`2<string, string> authOpaqueHeaderValues;
    private HttpClient httpClient;
    private Uri currentServiceUri;
    public Uri CurrentServiceUri { get; private set; }
    public QuickPulseServiceClient(Uri serviceUri, string instanceName, string roleName, string streamId, string machineName, string version, Clock timeProvider, bool isWebApp, int processorCount, Nullable`1<TimeSpan> timeout);
    public sealed virtual Uri get_CurrentServiceUri();
    private void set_CurrentServiceUri(Uri value);
    public sealed virtual Nullable`1<bool> Ping(string instrumentationKey, DateTimeOffset timestamp, string configurationETag, string authApiKey, string authToken, CollectionConfigurationInfo& configurationInfo, Nullable`1& servicePollingIntervalHint);
    public sealed virtual Nullable`1<bool> SubmitSamples(IEnumerable`1<QuickPulseDataSample> samples, string instrumentationKey, string configurationETag, string authApiKey, string authToken, CollectionConfigurationInfo& configurationInfo, CollectionConfigurationError[] collectionConfigurationErrors);
    public sealed virtual void Dispose();
    private Nullable`1<bool> SendRequest(string requestUri, bool includeIdentityHeaders, string configurationETag, string authApiKey, string authToken, CollectionConfigurationInfo& configurationInfo, Nullable`1& servicePollingIntervalHint, Action`1<Stream> onWriteRequestBody);
    private Nullable`1<bool> ProcessResponse(HttpResponseMessage response, string configurationETag, CollectionConfigurationInfo& configurationInfo, Nullable`1& servicePollingIntervalHint);
    private static double Round(double value);
    private void WritePingData(DateTimeOffset timestamp, Stream stream);
    private void WriteSamples(IEnumerable`1<QuickPulseDataSample> samples, string instrumentationKey, Stream stream, CollectionConfigurationError[] errors);
    private static IEnumerable`1<MetricPoint> CreateCalculatedMetrics(QuickPulseDataSample sample);
    private static IEnumerable`1<MetricPoint> CreateDefaultMetrics(QuickPulseDataSample sample);
    private void AddHeaders(HttpRequestMessage request, bool includeIdentityHeaders, string configurationETag, string authApiKey, string authToken);
    private void Dispose(bool disposing);
}
[ExtensionAttribute]
internal static class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.QuickPulseServiceClientHelpers : object {
    [ExtensionAttribute]
public static string GetValueSafe(HttpHeaders headers, string name);
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.QuickPulse.QuickPulseTopCpuCollector : object {
    private static Tuple`2[] emptyResult;
    [CompilerGeneratedAttribute]
private bool <InitializationFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AccessDenied>k__BackingField;
    public bool InitializationFailed { get; }
    public bool AccessDenied { get; }
    public QuickPulseTopCpuCollector(Clock timeProvider, IQuickPulseProcessProvider processProvider);
    private static QuickPulseTopCpuCollector();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_InitializationFailed();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AccessDenied();
    public sealed virtual IEnumerable`1<Tuple`2<string, int>> GetTopProcessesByCpu(int topN);
    public sealed virtual void Initialize();
    public sealed virtual void Close();
}
[DataContractAttribute]
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.ServiceContract.QuotaConfigurationInfo : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <InitialQuota>k__BackingField;
    [CompilerGeneratedAttribute]
private float <MaxQuota>k__BackingField;
    [CompilerGeneratedAttribute]
private float <QuotaAccrualRatePerSec>k__BackingField;
    [DataMemberAttribute]
public Nullable`1<float> InitialQuota { get; public set; }
    [DataMemberAttribute]
public float MaxQuota { get; public set; }
    [DataMemberAttribute]
public float QuotaAccrualRatePerSec { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_InitialQuota();
    [CompilerGeneratedAttribute]
public void set_InitialQuota(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public float get_MaxQuota();
    [CompilerGeneratedAttribute]
public void set_MaxQuota(float value);
    [CompilerGeneratedAttribute]
public float get_QuotaAccrualRatePerSec();
    [CompilerGeneratedAttribute]
public void set_QuotaAccrualRatePerSec(float value);
}
internal static class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.StandardPerfCollector.CounterFactory : object {
    internal static ICounterValue GetCounter(string originalString, string categoryName, string counterName, string instanceName);
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.StandardPerfCollector.NormalizedProcessCPUPerformanceCounter : object {
    private int processorsCount;
    private bool isInitialized;
    private PerformanceCounter performanceCounter;
    internal NormalizedProcessCPUPerformanceCounter(string instanceName);
    public sealed virtual double Collect();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.StandardPerfCollector.StandardPerformanceCollector : object {
    private List`1<Tuple`2<PerformanceCounterData, ICounterValue>> performanceCounters;
    private IEnumerable`1<string> win32Instances;
    private IEnumerable`1<string> clrInstances;
    private bool dependendentInstancesLoaded;
    public IEnumerable`1<PerformanceCounterData> PerformanceCounters { get; }
    public sealed virtual IEnumerable`1<PerformanceCounterData> get_PerformanceCounters();
    public sealed virtual IEnumerable`1<Tuple`2<PerformanceCounterData, double>> Collect(Action`2<string, Exception> onReadingFailure);
    public sealed virtual void RefreshCounters();
    public sealed virtual void RegisterCounter(string perfCounterName, string reportAs, String& error, bool blockCounterWithInstancePlaceHolder);
    public sealed virtual void RemoveCounter(string perfCounter, string reportAs);
    public sealed virtual void Dispose();
    private void RefreshPerformanceCounter(PerformanceCounterData pcd);
    private void LoadDependentInstances();
    private void RefreshCounter(PerformanceCounterData pcd);
    private void RegisterCounter(string originalString, string reportAs, PerformanceCounterStructure pc, bool usesInstanceNamePlaceholder, String& error);
    private void RegisterPerformanceCounter(string originalString, string reportAs, string categoryName, string counterName, string instanceName, bool usesInstanceNamePlaceholder);
    private void Dispose(bool disposing);
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.StandardPerfCollector.StandardPerformanceCounter : object {
    private PerformanceCounter performanceCounter;
    internal StandardPerformanceCounter(string categoryName, string counterName, string instanceName);
    public sealed virtual double Collect();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
internal interface Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.Timer.ITimer {
    public abstract virtual void ScheduleNextTick(TimeSpan dueTime);
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.Timer.Timer : object {
    private Timer timer;
    public Timer(TimerCallback callback);
    public sealed virtual void ScheduleNextTick(TimeSpan dueTime);
    public void Stop();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[FlagsAttribute]
internal enum Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.WebAppPerfCollector.AzureWebApEnvironmentVariables : Enum {
    public int value__;
    public static AzureWebApEnvironmentVariables AspDotNet;
    public static AzureWebApEnvironmentVariables App;
    public static AzureWebApEnvironmentVariables CLR;
    public static AzureWebApEnvironmentVariables All;
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.WebAppPerfCollector.CacheHelper : object {
    private static CacheHelper CacheHelperInstance;
    private IMemoryCache cache;
    public static CacheHelper Instance { get; }
    private static CacheHelper();
    public static CacheHelper get_Instance();
    public static long PerformanceCounterValue(string performanceCounterName, string json);
    public sealed virtual long GetCounterValue(string name, AzureWebApEnvironmentVariables environmentVariable);
    public void SaveToCache(string cacheKey, object toCache, DateTimeOffset absoluteExpiration);
    public object GetFromCache(string cacheKey);
    public bool IsInCache(string cacheKey);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
internal static class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.WebAppPerfCollector.CounterFactory : object {
    public static ICounterValue GetCounter(string counterName, string reportAs);
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.WebAppPerfCollector.CPUPercenageGauge : object {
    private string name;
    private double lastCollectedValue;
    private DateTimeOffset lastCollectedTime;
    private ICounterValue valueProvider;
    public CPUPercenageGauge(string name, ICounterValue value);
    public sealed virtual double Collect();
    protected virtual double CollectPercentage();
}
internal interface Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.WebAppPerfCollector.ICachedEnvironmentVariableAccess {
    public abstract virtual long GetCounterValue(string name, AzureWebApEnvironmentVariables environmentVariable);
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.WebAppPerfCollector.NormalizedCPUPercentageGauge : CPUPercenageGauge {
    private bool isInitialized;
    private int processorsCount;
    public NormalizedCPUPercentageGauge(string name, ICounterValue value);
    protected virtual double CollectPercentage();
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.WebAppPerfCollector.PerformanceCounterImplementation : object {
    private Dictionary`2<AzureWebApEnvironmentVariables, string> environmentVariableMapping;
    public string GetAzureWebAppEnvironmentVariables(AzureWebApEnvironmentVariables environmentVariable);
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.WebAppPerfCollector.RateCounterGauge : object {
    private string name;
    private string jsonId;
    private AzureWebApEnvironmentVariables environmentVariable;
    private ICounterValue counter;
    private double lastValue;
    private ICachedEnvironmentVariableAccess cacheHelper;
    private DateTimeOffset lastCollectedTime;
    public RateCounterGauge(string name, string jsonId, AzureWebApEnvironmentVariables environmentVariable, ICounterValue counter);
    internal RateCounterGauge(string name, string jsonId, AzureWebApEnvironmentVariables environmentVariable, ICounterValue counter, ICachedEnvironmentVariableAccess cache);
    public sealed virtual double Collect();
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.WebAppPerfCollector.RatioCounterGauge : object {
    private ICounterValue numeratorGauge;
    private ICounterValue denominatorGauge;
    private string name;
    private double scale;
    public RatioCounterGauge(string name, ICounterValue numeratorGauge, ICounterValue denominatorGauge, double scale);
    public sealed virtual double Collect();
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.WebAppPerfCollector.RawCounterGauge : object {
    private string name;
    private string jsonId;
    private AzureWebApEnvironmentVariables environmentVariable;
    private ICachedEnvironmentVariableAccess cacheHelper;
    public RawCounterGauge(string name, string jsonId, AzureWebApEnvironmentVariables environmentVariable);
    internal RawCounterGauge(string name, string jsonId, AzureWebApEnvironmentVariables environmentVariable, ICachedEnvironmentVariableAccess cache);
    public sealed virtual double Collect();
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.WebAppPerfCollector.SumUpCountersGauge : object {
    private List`1<ICounterValue> gaugesToSum;
    private string name;
    public SumUpCountersGauge(string name, ICounterValue[] gauges);
    public sealed virtual double Collect();
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.WebAppPerfCollector.WebAppPerformanceCollector : object {
    private List`1<Tuple`2<PerformanceCounterData, ICounterValue>> performanceCounters;
    public IEnumerable`1<PerformanceCounterData> PerformanceCounters { get; }
    public sealed virtual IEnumerable`1<PerformanceCounterData> get_PerformanceCounters();
    public sealed virtual IEnumerable`1<Tuple`2<PerformanceCounterData, double>> Collect(Action`2<string, Exception> onReadingFailure);
    public sealed virtual void RefreshCounters();
    public sealed virtual void RegisterCounter(string perfCounter, string reportAs, String& error, bool blockCounterWithInstancePlaceHolder);
    public sealed virtual void RemoveCounter(string perfCounter, string reportAs);
    public void RefreshPerformanceCounter(PerformanceCounterData pcd);
    private static double CollectCounter(string coutnerOriginalString, ICounterValue counter);
    private static string GetCounterReportAsName(string counterName, string reportAs);
    private void RegisterPerformanceCounter(string originalString, string reportAs, string categoryName, string counterName, string instanceName, bool usesInstanceNamePlaceholder);
}
internal static class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.XPlatform.CounterFactoryXPlatform : object {
    internal static ICounterValue GetCounter(string counterName);
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.XPlatform.PerformanceCollectorXPlatform : object {
    private List`1<Tuple`2<PerformanceCounterData, ICounterValue>> performanceCounters;
    public IEnumerable`1<PerformanceCounterData> PerformanceCounters { get; }
    public sealed virtual IEnumerable`1<PerformanceCounterData> get_PerformanceCounters();
    public sealed virtual IEnumerable`1<Tuple`2<PerformanceCounterData, double>> Collect(Action`2<string, Exception> onReadingFailure);
    public sealed virtual void RefreshCounters();
    public sealed virtual void RegisterCounter(string perfCounter, string reportAs, String& error, bool blockCounterWithInstancePlaceHolder);
    public sealed virtual void RemoveCounter(string perfCounter, string reportAs);
    public void RefreshPerformanceCounter(PerformanceCounterData pcd);
    private static double CollectCounter(string counterOriginalString, ICounterValue counter);
    private static string GetCounterReportAsName(string counterName, string reportAs);
    private void RegisterPerformanceCounter(string originalString, string reportAs, string categoryName, string counterName, string instanceName, bool usesInstanceNamePlaceholder);
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.XPlatform.XPlatProcessCPUPerformanceCounter : object {
    private double lastCollectedValue;
    private DateTimeOffset lastCollectedTime;
    public virtual double Collect();
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.XPlatform.XPlatProcessCPUPerformanceCounterNormalized : XPlatProcessCPUPerformanceCounter {
    private bool isInitialized;
    private int processorsCount;
    public virtual double Collect();
}
internal class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.Implementation.XPlatform.XPlatProcessMemoryPerformanceCounter : object {
    public sealed virtual double Collect();
}
public class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.PerformanceCollectorModule : object {
    private object lockObject;
    private List`1<PerformanceCounterCollectionRequest> defaultCounters;
    private IPerformanceCollector collector;
    private TimeSpan registrationPeriod;
    private bool defaultCountersInitialized;
    private TimeSpan collectionPeriod;
    private DateTime lastRefreshTimestamp;
    private TelemetryClient client;
    private TelemetryConfiguration telemetryConfiguration;
    private Timer timer;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PerformanceCounterCollectionRequest> <Counters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableIISExpressPerformanceCounters>k__BackingField;
    internal bool IsInitialized { get; private set; }
    public IList`1<PerformanceCounterCollectionRequest> Counters { get; private set; }
    public IList`1<PerformanceCounterCollectionRequest> DefaultCounters { get; }
    public bool EnableIISExpressPerformanceCounters { get; public set; }
    internal TimeSpan CollectionPeriod { get; internal set; }
    internal PerformanceCollectorModule(IPerformanceCollector collectorMock);
    [CompilerGeneratedAttribute]
internal bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private void set_IsInitialized(bool value);
    [CompilerGeneratedAttribute]
public IList`1<PerformanceCounterCollectionRequest> get_Counters();
    [CompilerGeneratedAttribute]
private void set_Counters(IList`1<PerformanceCounterCollectionRequest> value);
    public IList`1<PerformanceCounterCollectionRequest> get_DefaultCounters();
    [CompilerGeneratedAttribute]
public bool get_EnableIISExpressPerformanceCounters();
    [CompilerGeneratedAttribute]
public void set_EnableIISExpressPerformanceCounters(bool value);
    internal TimeSpan get_CollectionPeriod();
    internal void set_CollectionPeriod(TimeSpan value);
    public sealed virtual void Initialize(TelemetryConfiguration configuration);
    public sealed virtual void Dispose();
    private static bool IsRunningUnderIisExpress();
    private void Dispose(bool disposing);
    private void TimerCallback(object state);
    private void EnsurePerformanceCountersRegistered();
    private void ProcessCustomCounters();
    private static MetricTelemetry CreateTelemetry(PerformanceCounterData pc, double value);
}
public class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.PerformanceCounterCollectionRequest : object {
    [CompilerGeneratedAttribute]
private string <PerformanceCounter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportAs>k__BackingField;
    public string PerformanceCounter { get; public set; }
    public string ReportAs { get; public set; }
    public PerformanceCounterCollectionRequest(string performanceCounter, string reportAs);
    [CompilerGeneratedAttribute]
public string get_PerformanceCounter();
    [CompilerGeneratedAttribute]
public void set_PerformanceCounter(string value);
    [CompilerGeneratedAttribute]
public string get_ReportAs();
    [CompilerGeneratedAttribute]
public void set_ReportAs(string value);
}
internal interface Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.QuickPulse.IQuickPulseTelemetryProcessor {
    public Uri ServiceEndpoint { get; public set; }
    public abstract virtual Uri get_ServiceEndpoint();
    public abstract virtual void set_ServiceEndpoint(Uri value);
    public abstract virtual void StartCollection(IQuickPulseDataAccumulatorManager accumulatorManager, Uri serviceEndpoint, TelemetryConfiguration configuration, bool disableFullTelemetryItems);
    public abstract virtual void StopCollection();
    public abstract virtual void UpdateGlobalQuotas(Clock timeProvider, QuotaConfigurationInfo quotaInfo);
}
public class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.QuickPulse.QuickPulseTelemetryModule : object {
    internal static IQuickPulseModuleScheduler ModuleScheduler;
    internal LinkedList`1<IQuickPulseTelemetryProcessor> TelemetryProcessors;
    internal IQuickPulseServiceClient ServiceClient;
    private static int MaxSampleStorageSize;
    private static int TopCpuCount;
    private object moduleInitializationLock;
    private object telemetryProcessorsLock;
    private object collectedSamplesLock;
    private object performanceCollectorUpdateLock;
    private LinkedList`1<QuickPulseDataSample> collectedSamples;
    private TelemetryConfiguration config;
    private IQuickPulseModuleSchedulerHandle collectionThread;
    private IQuickPulseModuleSchedulerHandle stateThread;
    private Clock timeProvider;
    private QuickPulseTimings timings;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    private QuickPulseCollectionTimeSlotManager collectionTimeSlotManager;
    private IQuickPulseDataAccumulatorManager dataAccumulatorManager;
    private QuickPulseCollectionStateManager stateManager;
    private IPerformanceCollector performanceCollector;
    private IQuickPulseTopCpuCollector topCpuCollector;
    private CollectionConfiguration collectionConfiguration;
    [CompilerGeneratedAttribute]
private string <QuickPulseServiceEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableFullTelemetryItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableTopCpuProcesses>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationApiKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerId>k__BackingField;
    internal bool IsInitialized { get; private set; }
    public string QuickPulseServiceEndpoint { get; public set; }
    public bool DisableFullTelemetryItems { get; public set; }
    public bool DisableTopCpuProcesses { get; public set; }
    public string AuthenticationApiKey { get; public set; }
    public string ServerId { get; public set; }
    internal QuickPulseTelemetryModule(QuickPulseCollectionTimeSlotManager collectionTimeSlotManager, QuickPulseDataAccumulatorManager dataAccumulatorManager, IQuickPulseServiceClient serviceClient, IPerformanceCollector performanceCollector, IQuickPulseTopCpuCollector topCpuCollector, QuickPulseTimings timings);
    private static QuickPulseTelemetryModule();
    [CompilerGeneratedAttribute]
internal bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private void set_IsInitialized(bool value);
    [CompilerGeneratedAttribute]
public string get_QuickPulseServiceEndpoint();
    [CompilerGeneratedAttribute]
public void set_QuickPulseServiceEndpoint(string value);
    [CompilerGeneratedAttribute]
public bool get_DisableFullTelemetryItems();
    [CompilerGeneratedAttribute]
public void set_DisableFullTelemetryItems(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableTopCpuProcesses();
    [CompilerGeneratedAttribute]
public void set_DisableTopCpuProcesses(bool value);
    [CompilerGeneratedAttribute]
public string get_AuthenticationApiKey();
    [CompilerGeneratedAttribute]
public void set_AuthenticationApiKey(string value);
    [CompilerGeneratedAttribute]
public string get_ServerId();
    [CompilerGeneratedAttribute]
public void set_ServerId(string value);
    public sealed virtual void Dispose();
    public sealed virtual void Initialize(TelemetryConfiguration configuration);
    public void RegisterTelemetryProcessor(ITelemetryProcessor telemetryProcessor);
    private static void ValidateConfiguration(TelemetryConfiguration configuration);
    private static CloudContext GetCloudContext(TelemetryConfiguration configuration);
    private static string GetStreamId();
    private static QuickPulseDataSample CreateDataSample(QuickPulseDataAccumulator accumulator, IEnumerable`1<Tuple`2<PerformanceCounterData, double>> perfData, IEnumerable`1<Tuple`2<string, int>> topCpuData, bool topCpuDataAccessDenied);
    private void UpdatePerformanceCollector(IEnumerable`1<Tuple`2<string, string>> performanceCountersToCollect, CollectionConfigurationError[]& errors);
    private void CreateStateThread();
    private void InitializeServiceClient(TelemetryConfiguration configuration);
    private void StateThreadWorker(CancellationToken cancellationToken);
    private void CollectionThreadWorker(CancellationToken cancellationToken);
    private void InitializeCollectionThread();
    private void CloseCollectionThread();
    private void CollectData();
    private void StoreSample(QuickPulseDataSample sample);
    private QuickPulseDataSample CollectSample();
    private void OnStartCollection();
    private void CreateCollectionThread();
    private void EndCollectionThread();
    private void OnStopCollection();
    private IList`1<QuickPulseDataSample> OnSubmitSamples();
    private void OnReturnFailedSamples(IList`1<QuickPulseDataSample> samples);
    private CollectionConfigurationError[] OnUpdatedConfiguration(CollectionConfigurationInfo configurationInfo);
    private void OnUpdatedServiceEndpoint(Uri newServiceEndpoint);
    private void Dispose(bool disposing);
}
public class Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.QuickPulse.QuickPulseTelemetryProcessor : object {
    private static string TelemetryDocumentContractVersion;
    private static float MaxGlobalTelemetryQuota;
    private static float InitialGlobalTelemetryQuota;
    private static int MaxFieldLength;
    private static int MaxPropertyCount;
    private static string SpecialDependencyPropertyName;
    private static string ExceptionMessageSeparator;
    private QuickPulseQuotaTracker globalQuotaTracker;
    private IQuickPulseDataAccumulatorManager dataAccumulatorManager;
    private Uri currentServiceEndpoint;
    private TelemetryConfiguration config;
    private bool isCollecting;
    private bool disableFullTelemetryItems;
    [CompilerGeneratedAttribute]
private bool <EvaluateDisabledTrackingProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private ITelemetryProcessor <Next>k__BackingField;
    private Uri Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.QuickPulse.IQuickPulseTelemetryProcessor.ServiceEndpoint { get; private set; }
    internal bool EvaluateDisabledTrackingProperties { get; internal set; }
    private ITelemetryProcessor Next { get; }
    public QuickPulseTelemetryProcessor(ITelemetryProcessor next);
    internal QuickPulseTelemetryProcessor(ITelemetryProcessor next, Clock timeProvider, Nullable`1<float> maxGlobalTelemetryQuota, Nullable`1<float> initialGlobalTelemetryQuota, Nullable`1<float> quotaAccrualRatePerSec);
    private sealed virtual override Uri Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.QuickPulse.IQuickPulseTelemetryProcessor.get_ServiceEndpoint();
    private sealed virtual override void Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.QuickPulse.IQuickPulseTelemetryProcessor.set_ServiceEndpoint(Uri value);
    [CompilerGeneratedAttribute]
internal bool get_EvaluateDisabledTrackingProperties();
    [CompilerGeneratedAttribute]
internal void set_EvaluateDisabledTrackingProperties(bool value);
    [CompilerGeneratedAttribute]
private ITelemetryProcessor get_Next();
    public sealed virtual void Initialize(TelemetryConfiguration configuration);
    private sealed virtual override void Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.QuickPulse.IQuickPulseTelemetryProcessor.UpdateGlobalQuotas(Clock timeProvider, QuotaConfigurationInfo quotaInfo);
    private sealed virtual override void Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.QuickPulse.IQuickPulseTelemetryProcessor.StartCollection(IQuickPulseDataAccumulatorManager accumulatorManager, Uri serviceEndpoint, TelemetryConfiguration configuration, bool disableFullTelemetryItems);
    private sealed virtual override void Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.QuickPulse.IQuickPulseTelemetryProcessor.StopCollection();
    public sealed virtual void Process(ITelemetry telemetry);
    private static ITelemetryDocument ConvertDependencyToTelemetryDocument(DependencyTelemetry dependencyTelemetry);
    private static ITelemetryDocument ConvertExceptionToTelemetryDocument(ExceptionTelemetry exceptionTelemetry);
    private static ITelemetryDocument ConvertEventToTelemetryDocument(EventTelemetry eventTelemetry);
    private static ITelemetryDocument ConvertTraceToTelemetryDocument(TraceTelemetry traceTelemetry);
    private static void SetCommonTelemetryDocumentData(ITelemetryDocument telemetryDocument, ITelemetry telemetry);
    private static string ExpandExceptionMessage(ExceptionTelemetry exceptionTelemetry);
    [IteratorStateMachineAttribute("Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.QuickPulse.QuickPulseTelemetryProcessor/<FlattenMessages>d__36")]
private static IEnumerable`1<string> FlattenMessages(Exception exception);
    private static bool IsRequestSuccessful(RequestTelemetry request);
    private static string TruncateValue(string value);
    private static KeyValuePair`2[] GetProperties(ISupportProperties telemetry, string specialPropertyName);
    private static void ProcessMetrics(CollectionConfigurationAccumulator configurationAccumulatorLocal, IEnumerable`1<CalculatedMetric`1<TTelemetry>> metrics, TTelemetry telemetry, CollectionConfigurationError[]& filteringErrors, String& projectionError);
    private void ProcessTelemetry(ITelemetry telemetry);
    private ITelemetryDocument ConvertRequestToTelemetryDocument(RequestTelemetry requestTelemetry);
    private ITelemetryDocument CreateTelemetryDocument(TTelemetry telemetry, IEnumerable`1<DocumentStream> documentStreams, Func`2<DocumentStream, QuickPulseQuotaTracker> getQuotaTracker, Func`2<DocumentStream, bool> checkDocumentStreamFilters, Func`2<TTelemetry, ITelemetryDocument> convertTelemetryToTelemetryDocument);
    private void UpdateExceptionAggregates();
    private void UpdateDependencyAggregates(DependencyTelemetry dependencyTelemetry);
    private void UpdateRequestAggregates(RequestTelemetry requestTelemetry);
    private void RegisterSelfWithQuickPulseTelemetryModule();
}
[EditorBrowsableAttribute("1")]
internal static class Microsoft.ApplicationInsights.W3C.Internal.W3CConstants : object {
    public static string TraceParentHeader;
    public static string TraceStateHeader;
    [ObsoleteAttribute("Dot not use.")]
public static string ApplicationIdTraceStateField;
    [ObsoleteAttribute("Dot not use.")]
public static string AzureTracestateNamespace;
    [ObsoleteAttribute("Dot not use.")]
public static char TracestateAzureSeparator;
    internal static string LegacyRootPropertyIdKey;
}
internal static class Microsoft.ApplicationInsights.W3C.Internal.W3CUtilities : object {
    internal static string GetRootId(string legacyId);
    internal static bool TryGetTraceId(string legacyId, ReadOnlySpan`1& traceId);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[DataContractAttribute]
internal class Microsoft.ManagementServices.RealTimeDataProcessing.QuickPulseService.DependencyTelemetryDocument : ValueType {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResultCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DependencyTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyValuePair`2[] <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalNodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloudRoleName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloudRoleInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DocumentStreamIds>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public DateTimeOffset Timestamp { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Target { get; public set; }
    [DataMemberAttribute]
public DateTimeOffset StartTime { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> Success { get; public set; }
    [DataMemberAttribute]
public TimeSpan Duration { get; public set; }
    [DataMemberAttribute]
public string OperationId { get; public set; }
    [DataMemberAttribute]
public string ResultCode { get; public set; }
    [DataMemberAttribute]
public string CommandName { get; public set; }
    [DataMemberAttribute]
public string DependencyTypeName { get; public set; }
    [DataMemberAttribute]
public KeyValuePair`2[] Properties { get; public set; }
    [DataMemberAttribute]
public string OperationName { get; public set; }
    [DataMemberAttribute]
public string InternalNodeName { get; public set; }
    [DataMemberAttribute]
public string CloudRoleName { get; public set; }
    [DataMemberAttribute]
public string CloudRoleInstance { get; public set; }
    [DataMemberAttribute]
public string DocumentType { get; private set; }
    [DataMemberAttribute]
public String[] DocumentStreamIds { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTimeOffset value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public DateTimeOffset get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(DateTimeOffset value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<bool> get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(Nullable`1<bool> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_OperationId();
    [CompilerGeneratedAttribute]
public void set_OperationId(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_ResultCode();
    [CompilerGeneratedAttribute]
public void set_ResultCode(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_CommandName();
    [CompilerGeneratedAttribute]
public void set_CommandName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_DependencyTypeName();
    [CompilerGeneratedAttribute]
public void set_DependencyTypeName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual KeyValuePair`2[] get_Properties();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Properties(KeyValuePair`2[] value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_OperationName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OperationName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_InternalNodeName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InternalNodeName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_CloudRoleName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CloudRoleName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_CloudRoleInstance();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CloudRoleInstance(string value);
    public sealed virtual string get_DocumentType();
    private void set_DocumentType(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual String[] get_DocumentStreamIds();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DocumentStreamIds(String[] value);
}
[DataContractAttribute]
internal class Microsoft.ManagementServices.RealTimeDataProcessing.QuickPulseService.EventTelemetryDocument : ValueType {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyValuePair`2[] <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalNodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloudRoleName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloudRoleInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DocumentStreamIds>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public DateTimeOffset Timestamp { get; public set; }
    [DataMemberAttribute]
public string OperationId { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public KeyValuePair`2[] Properties { get; public set; }
    [DataMemberAttribute]
public string OperationName { get; public set; }
    [DataMemberAttribute]
public string InternalNodeName { get; public set; }
    [DataMemberAttribute]
public string CloudRoleName { get; public set; }
    [DataMemberAttribute]
public string CloudRoleInstance { get; public set; }
    [DataMemberAttribute]
public string DocumentType { get; private set; }
    [DataMemberAttribute]
public String[] DocumentStreamIds { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTimeOffset value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_OperationId();
    [CompilerGeneratedAttribute]
public void set_OperationId(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual KeyValuePair`2[] get_Properties();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Properties(KeyValuePair`2[] value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_OperationName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OperationName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_InternalNodeName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InternalNodeName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_CloudRoleName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CloudRoleName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_CloudRoleInstance();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CloudRoleInstance(string value);
    public sealed virtual string get_DocumentType();
    private void set_DocumentType(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual String[] get_DocumentStreamIds();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DocumentStreamIds(String[] value);
}
[DataContractAttribute]
internal class Microsoft.ManagementServices.RealTimeDataProcessing.QuickPulseService.ExceptionTelemetryDocument : ValueType {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SeverityLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationId>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyValuePair`2[] <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalNodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloudRoleName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloudRoleInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DocumentStreamIds>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public string SeverityLevel { get; public set; }
    [DataMemberAttribute]
public string Exception { get; public set; }
    [DataMemberAttribute]
public string ExceptionType { get; public set; }
    [DataMemberAttribute]
public string ExceptionMessage { get; public set; }
    [DataMemberAttribute]
public string OperationId { get; public set; }
    [DataMemberAttribute]
public KeyValuePair`2[] Properties { get; public set; }
    [DataMemberAttribute]
public string OperationName { get; public set; }
    [DataMemberAttribute]
public string InternalNodeName { get; public set; }
    [DataMemberAttribute]
public string CloudRoleName { get; public set; }
    [DataMemberAttribute]
public string CloudRoleInstance { get; public set; }
    [DataMemberAttribute]
public string DocumentType { get; private set; }
    [DataMemberAttribute]
public String[] DocumentStreamIds { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_SeverityLevel();
    [CompilerGeneratedAttribute]
public void set_SeverityLevel(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_ExceptionType();
    [CompilerGeneratedAttribute]
public void set_ExceptionType(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_ExceptionMessage();
    [CompilerGeneratedAttribute]
public void set_ExceptionMessage(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_OperationId();
    [CompilerGeneratedAttribute]
public void set_OperationId(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual KeyValuePair`2[] get_Properties();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Properties(KeyValuePair`2[] value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_OperationName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OperationName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_InternalNodeName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InternalNodeName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_CloudRoleName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CloudRoleName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_CloudRoleInstance();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CloudRoleInstance(string value);
    public sealed virtual string get_DocumentType();
    private void set_DocumentType(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual String[] get_DocumentStreamIds();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DocumentStreamIds(String[] value);
}
internal interface Microsoft.ManagementServices.RealTimeDataProcessing.QuickPulseService.ITelemetryDocument {
    public Guid Id { get; }
    public string Version { get; }
    public string OperationName { get; public set; }
    public string InternalNodeName { get; public set; }
    public string CloudRoleName { get; public set; }
    public string CloudRoleInstance { get; public set; }
    public KeyValuePair`2[] Properties { get; public set; }
    public string DocumentType { get; }
    public String[] DocumentStreamIds { get; public set; }
    public abstract virtual Guid get_Id();
    public abstract virtual string get_Version();
    public abstract virtual string get_OperationName();
    public abstract virtual void set_OperationName(string value);
    public abstract virtual string get_InternalNodeName();
    public abstract virtual void set_InternalNodeName(string value);
    public abstract virtual string get_CloudRoleName();
    public abstract virtual void set_CloudRoleName(string value);
    public abstract virtual string get_CloudRoleInstance();
    public abstract virtual void set_CloudRoleInstance(string value);
    public abstract virtual KeyValuePair`2[] get_Properties();
    public abstract virtual void set_Properties(KeyValuePair`2[] value);
    public abstract virtual string get_DocumentType();
    public abstract virtual String[] get_DocumentStreamIds();
    public abstract virtual void set_DocumentStreamIds(String[] value);
}
[DataContractAttribute]
internal class Microsoft.ManagementServices.RealTimeDataProcessing.QuickPulseService.MetricPoint : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Weight>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public double Value { get; public set; }
    [DataMemberAttribute]
public int Weight { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Weight();
    [CompilerGeneratedAttribute]
public void set_Weight(int value);
}
[DataContractAttribute]
[KnownTypeAttribute("Microsoft.ManagementServices.RealTimeDataProcessing.QuickPulseService.RequestTelemetryDocument")]
[KnownTypeAttribute("Microsoft.ManagementServices.RealTimeDataProcessing.QuickPulseService.DependencyTelemetryDocument")]
[KnownTypeAttribute("Microsoft.ManagementServices.RealTimeDataProcessing.QuickPulseService.ExceptionTelemetryDocument")]
[KnownTypeAttribute("Microsoft.ManagementServices.RealTimeDataProcessing.QuickPulseService.EventTelemetryDocument")]
[KnownTypeAttribute("Microsoft.ManagementServices.RealTimeDataProcessing.QuickPulseService.TraceTelemetryDocument")]
internal class Microsoft.ManagementServices.RealTimeDataProcessing.QuickPulseService.MonitoringDataPoint : ValueType {
    public static int CurrentInvariantVersion;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InvariantVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstrumentationKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StreamId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MachineName>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWebApp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PerformanceCollectionSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProcessorCount>k__BackingField;
    [CompilerGeneratedAttribute]
private MetricPoint[] <Metrics>k__BackingField;
    [CompilerGeneratedAttribute]
private ITelemetryDocument[] <Documents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GlobalDocumentQuotaReached>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessCpuData[] <TopCpuProcesses>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TopCpuDataAccessDenied>k__BackingField;
    [CompilerGeneratedAttribute]
private CollectionConfigurationError[] <CollectionConfigurationErrors>k__BackingField;
    [DataMemberAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public int InvariantVersion { get; public set; }
    [DataMemberAttribute]
public string InstrumentationKey { get; public set; }
    [DataMemberAttribute]
public string Instance { get; public set; }
    [DataMemberAttribute]
public string RoleName { get; public set; }
    [DataMemberAttribute]
public string StreamId { get; public set; }
    [DataMemberAttribute]
public string MachineName { get; public set; }
    [DataMemberAttribute]
public DateTime Timestamp { get; public set; }
    [DataMemberAttribute]
public bool IsWebApp { get; public set; }
    [DataMemberAttribute]
public bool PerformanceCollectionSupported { get; public set; }
    [DataMemberAttribute]
public int ProcessorCount { get; public set; }
    [DataMemberAttribute]
public MetricPoint[] Metrics { get; public set; }
    [DataMemberAttribute]
public ITelemetryDocument[] Documents { get; public set; }
    [DataMemberAttribute]
public bool GlobalDocumentQuotaReached { get; public set; }
    [DataMemberAttribute]
public ProcessCpuData[] TopCpuProcesses { get; public set; }
    [DataMemberAttribute]
public bool TopCpuDataAccessDenied { get; public set; }
    [DataMemberAttribute]
public CollectionConfigurationError[] CollectionConfigurationErrors { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_InvariantVersion();
    [CompilerGeneratedAttribute]
public void set_InvariantVersion(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_InstrumentationKey();
    [CompilerGeneratedAttribute]
public void set_InstrumentationKey(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Instance();
    [CompilerGeneratedAttribute]
public void set_Instance(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_RoleName();
    [CompilerGeneratedAttribute]
public void set_RoleName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_StreamId();
    [CompilerGeneratedAttribute]
public void set_StreamId(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_MachineName();
    [CompilerGeneratedAttribute]
public void set_MachineName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsWebApp();
    [CompilerGeneratedAttribute]
public void set_IsWebApp(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_PerformanceCollectionSupported();
    [CompilerGeneratedAttribute]
public void set_PerformanceCollectionSupported(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_ProcessorCount();
    [CompilerGeneratedAttribute]
public void set_ProcessorCount(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public MetricPoint[] get_Metrics();
    [CompilerGeneratedAttribute]
public void set_Metrics(MetricPoint[] value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ITelemetryDocument[] get_Documents();
    [CompilerGeneratedAttribute]
public void set_Documents(ITelemetryDocument[] value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_GlobalDocumentQuotaReached();
    [CompilerGeneratedAttribute]
public void set_GlobalDocumentQuotaReached(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ProcessCpuData[] get_TopCpuProcesses();
    [CompilerGeneratedAttribute]
public void set_TopCpuProcesses(ProcessCpuData[] value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_TopCpuDataAccessDenied();
    [CompilerGeneratedAttribute]
public void set_TopCpuDataAccessDenied(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public CollectionConfigurationError[] get_CollectionConfigurationErrors();
    [CompilerGeneratedAttribute]
public void set_CollectionConfigurationErrors(CollectionConfigurationError[] value);
}
[DataContractAttribute]
internal class Microsoft.ManagementServices.RealTimeDataProcessing.QuickPulseService.ProcessCpuData : ValueType {
    [CompilerGeneratedAttribute]
private string <ProcessName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CpuPercentage>k__BackingField;
    [DataMemberAttribute]
public string ProcessName { get; public set; }
    [DataMemberAttribute]
public int CpuPercentage { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_ProcessName();
    [CompilerGeneratedAttribute]
public void set_ProcessName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_CpuPercentage();
    [CompilerGeneratedAttribute]
public void set_CpuPercentage(int value);
}
[DataContractAttribute]
internal class Microsoft.ManagementServices.RealTimeDataProcessing.QuickPulseService.RequestTelemetryDocument : ValueType {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyValuePair`2[] <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalNodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloudRoleName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloudRoleInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DocumentStreamIds>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public DateTimeOffset Timestamp { get; public set; }
    [DataMemberAttribute]
public string OperationId { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> Success { get; public set; }
    [DataMemberAttribute]
public TimeSpan Duration { get; public set; }
    [DataMemberAttribute]
public string ResponseCode { get; public set; }
    [DataMemberAttribute]
public Uri Url { get; public set; }
    [DataMemberAttribute]
public KeyValuePair`2[] Properties { get; public set; }
    [DataMemberAttribute]
public string OperationName { get; public set; }
    [DataMemberAttribute]
public string InternalNodeName { get; public set; }
    [DataMemberAttribute]
public string CloudRoleName { get; public set; }
    [DataMemberAttribute]
public string CloudRoleInstance { get; public set; }
    [DataMemberAttribute]
public string DocumentType { get; private set; }
    [DataMemberAttribute]
public String[] DocumentStreamIds { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTimeOffset value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_OperationId();
    [CompilerGeneratedAttribute]
public void set_OperationId(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<bool> get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(Nullable`1<bool> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_ResponseCode();
    [CompilerGeneratedAttribute]
public void set_ResponseCode(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Uri get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(Uri value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual KeyValuePair`2[] get_Properties();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Properties(KeyValuePair`2[] value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_OperationName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OperationName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_InternalNodeName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InternalNodeName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_CloudRoleName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CloudRoleName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_CloudRoleInstance();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CloudRoleInstance(string value);
    public sealed virtual string get_DocumentType();
    private void set_DocumentType(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual String[] get_DocumentStreamIds();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DocumentStreamIds(String[] value);
}
internal enum Microsoft.ManagementServices.RealTimeDataProcessing.QuickPulseService.TelemetryDocumentType : Enum {
    public int value__;
    public static TelemetryDocumentType Unknown;
    public static TelemetryDocumentType Request;
    public static TelemetryDocumentType RemoteDependency;
    public static TelemetryDocumentType Exception;
    public static TelemetryDocumentType Event;
    public static TelemetryDocumentType Trace;
}
[DataContractAttribute]
internal class Microsoft.ManagementServices.RealTimeDataProcessing.QuickPulseService.TraceTelemetryDocument : ValueType {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SeverityLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyValuePair`2[] <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalNodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloudRoleName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloudRoleInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DocumentStreamIds>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public DateTimeOffset Timestamp { get; public set; }
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public string SeverityLevel { get; public set; }
    [DataMemberAttribute]
public KeyValuePair`2[] Properties { get; public set; }
    [DataMemberAttribute]
public string OperationName { get; public set; }
    [DataMemberAttribute]
public string InternalNodeName { get; public set; }
    [DataMemberAttribute]
public string CloudRoleName { get; public set; }
    [DataMemberAttribute]
public string CloudRoleInstance { get; public set; }
    [DataMemberAttribute]
public string DocumentType { get; private set; }
    [DataMemberAttribute]
public String[] DocumentStreamIds { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTimeOffset value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_SeverityLevel();
    [CompilerGeneratedAttribute]
public void set_SeverityLevel(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual KeyValuePair`2[] get_Properties();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Properties(KeyValuePair`2[] value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_OperationName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OperationName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_InternalNodeName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InternalNodeName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_CloudRoleName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CloudRoleName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_CloudRoleInstance();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CloudRoleInstance(string value);
    public sealed virtual string get_DocumentType();
    private void set_DocumentType(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual String[] get_DocumentStreamIds();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DocumentStreamIds(String[] value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
