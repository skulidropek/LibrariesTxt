internal static class AssemblyInfo : object {
    public static string PublicKey;
    public static string MoqPublicKey;
}
internal class Microsoft.ApplicationInsights.Common.ApplicationNameProvider : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    private static string GetApplicationName();
}
internal class Microsoft.ApplicationInsights.Common.AppMapCorrelationEventSource : EventSource {
    public static AppMapCorrelationEventSource Log;
    private ApplicationNameProvider applicationNameProvider;
    private static AppMapCorrelationEventSource();
    [EventAttribute("1")]
public void FetchAppIdFailed(string exception, string appDomainName);
    [EventAttribute("2")]
public void SetCrossComponentCorrelationHeaderFailed(string exception, string appDomainName);
    [EventAttribute("3")]
public void GetCrossComponentCorrelationHeaderFailed(string exception, string appDomainName);
    [EventAttribute("4")]
public void GetComponentRoleNameHeaderFailed(string exception, string appDomainName);
    [EventAttribute("5")]
public void UnknownError(string exception, string appDomainName);
    [EventAttribute("6")]
public void FetchAppIdFailedWithResponseCode(string httpStatusCode, string appDomainName);
}
internal static class Microsoft.ApplicationInsights.Common.ArrayExtensions : object {
    internal static T[] Empty();
}
[ExtensionAttribute]
public static class Microsoft.ApplicationInsights.Common.ConditionalWeakTableExtensions : object {
    [ExtensionAttribute]
public static void AddIfNotExists(ConditionalWeakTable`2<TKey, TValue> conditionalWeakTable, TKey key, TValue value);
}
internal class Microsoft.ApplicationInsights.Common.ExceptionUtilities : object {
    internal static string GetExceptionDetailString(Exception ex);
}
[ExtensionAttribute]
internal static class Microsoft.ApplicationInsights.Common.GuidExtensions : object {
    [ExtensionAttribute]
public static string ToStringInvariant(Guid guid, string format);
}
internal static class Microsoft.ApplicationInsights.Common.HeadersUtilities : object {
    public static string GetHeaderKeyValue(IEnumerable`1<string> headerValues, string keyName);
    public static IDictionary`2<string, string> GetHeaderDictionary(IEnumerable`1<string> headerValues);
    public static IEnumerable`1<string> UpdateHeaderWithKeyValue(IEnumerable`1<string> headerValues, string keyName, string keyValue);
    public static string SanitizeString(string input);
    private static string TrimSubstring(string value, int startIndex, int endIndex);
}
internal static class Microsoft.ApplicationInsights.Common.Internal.ExperimentalConstants : object {
    public static string DeferRequestTrackingProperties;
}
internal static class Microsoft.ApplicationInsights.Common.Internal.InjectionGuardConstants : object {
    public static int AppIdMaxLength;
    public static int RequestHeaderMaxLength;
    public static int ContextHeaderKeyMaxLength;
    public static int ContextHeaderValueMaxLength;
    public static int TraceParentHeaderMaxLength;
    public static int TraceStateHeaderMaxLength;
    public static int TraceStateMaxPairs;
    public static int QuickPulseResponseHeaderMaxLength;
}
internal static class Microsoft.ApplicationInsights.Common.Internal.StringUtilities : object {
    public static string EnforceMaxLength(string input, int maxLength);
    [ObsoleteAttribute("Use System.Diagnostics.ActivityTraceId.CreateRandom().ToHexString() instead.")]
public static string GenerateTraceId();
    [ObsoleteAttribute("Use System.Diagnostics.ActivitySpanId.CreateRandom().ToHexString() instead.")]
public static string GenerateSpanId();
    [ObsoleteAttribute("Obsolete, use spanId instead")]
public static string FormatRequestId(string traceId, string spanId);
}
internal class Microsoft.ApplicationInsights.Common.PropertyFetcher : object {
    private string propertyName;
    private PropertyFetch modreq(System.Runtime.CompilerServices.IsVolatile) innerFetcher;
    public PropertyFetcher(string propertyName);
    public object Fetch(object obj);
}
internal static class Microsoft.ApplicationInsights.Common.RequestResponseHeaders : object {
    public static string RequestContextHeader;
    public static string RequestContextCorrelationSourceKey;
    public static string RequestContextCorrelationTargetKey;
    public static string StandardParentIdHeader;
    public static string StandardRootIdHeader;
    public static string RequestIdHeader;
    public static string CorrelationContextHeader;
    public static string AccessControlExposeHeadersHeader;
}
internal class Microsoft.ApplicationInsights.Common.SdkVersionUtils : object {
    internal static string GetSdkVersion(string versionPrefix);
}
[ExtensionAttribute]
internal static class Microsoft.ApplicationInsights.Common.WebHeaderCollectionExtensions : object {
    private static string KeyValuePairSeparator;
    private static int CorrelationContextHeaderMaxLength;
    private static int CorrelationContextMaxPairs;
    [ExtensionAttribute]
public static string GetNameValueHeaderValue(NameValueCollection headers, string headerName, string keyName);
    [ExtensionAttribute]
public static IDictionary`2<string, string> GetNameValueCollectionFromHeader(NameValueCollection headers, string headerName);
    [ExtensionAttribute]
public static void SetNameValueHeaderValue(NameValueCollection headers, string headerName, string keyName, string value);
    [ExtensionAttribute]
public static void SetHeaderFromNameValueCollection(NameValueCollection headers, string headerName, IEnumerable`1<KeyValuePair`2<string, string>> keyValuePairs);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetHeaderValue(NameValueCollection headers, string headerName, int maxStringLength, int maxItems);
    [ExtensionAttribute]
public static void ReadActivityBaggage(NameValueCollection headers, Activity activity);
    private static string FormatKeyValueHeader(string key, string value);
}
[EditorBrowsableAttribute("1")]
internal static class Microsoft.ApplicationInsights.W3C.Internal.W3CConstants : object {
    public static string TraceParentHeader;
    public static string TraceStateHeader;
    [ObsoleteAttribute("Dot not use.")]
public static string ApplicationIdTraceStateField;
    [ObsoleteAttribute("Dot not use.")]
public static string AzureTracestateNamespace;
    [ObsoleteAttribute("Dot not use.")]
public static char TracestateAzureSeparator;
    internal static string LegacyRootPropertyIdKey;
}
internal static class Microsoft.ApplicationInsights.W3C.Internal.W3CUtilities : object {
    internal static string GetRootId(string legacyId);
    internal static bool TryGetTraceId(string legacyId, ReadOnlySpan`1& traceId);
}
public class Microsoft.ApplicationInsights.WindowsServer.AppServicesHeartbeatTelemetryModule : object {
    internal KeyValuePair`2[] WebHeartbeatPropertyNameEnvVarMap;
    private IHeartbeatPropertyManager heartbeatManager;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    [EditorBrowsableAttribute("1")]
public IHeartbeatPropertyManager HeartbeatPropertyManager { get; public set; }
    internal bool IsInitialized { get; private set; }
    internal AppServicesHeartbeatTelemetryModule(IHeartbeatPropertyManager hbeatPropManager);
    public IHeartbeatPropertyManager get_HeartbeatPropertyManager();
    public void set_HeartbeatPropertyManager(IHeartbeatPropertyManager value);
    [CompilerGeneratedAttribute]
internal bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private void set_IsInitialized(bool value);
    public sealed virtual void Initialize(TelemetryConfiguration configuration);
    public void UpdateHeartbeatWithAppServiceEnvVarValues();
    public sealed virtual void Dispose();
    private bool AddAppServiceEnvironmentVariablesToHeartbeat(IHeartbeatPropertyManager hbeatManager, bool isUpdateOperation);
}
public class Microsoft.ApplicationInsights.WindowsServer.AzureInstanceMetadataTelemetryModule : object {
    private object lockObject;
    private IHeartbeatPropertyManager heartbeatManager;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    [EditorBrowsableAttribute("1")]
public IHeartbeatPropertyManager HeartbeatPropertyManager { get; public set; }
    internal bool IsInitialized { get; private set; }
    internal AzureInstanceMetadataTelemetryModule(IHeartbeatPropertyManager heartbeatPropertyManager);
    public IHeartbeatPropertyManager get_HeartbeatPropertyManager();
    public void set_HeartbeatPropertyManager(IHeartbeatPropertyManager value);
    [CompilerGeneratedAttribute]
internal bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private void set_IsInitialized(bool value);
    public sealed virtual void Initialize(TelemetryConfiguration unused);
}
public class Microsoft.ApplicationInsights.WindowsServer.AzureWebAppRoleEnvironmentTelemetryInitializer : object {
    internal string WebAppHostNameEnvironmentVariable;
    private static string WebAppSuffix;
    private string nodeName;
    private string roleName;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) updateEnvVars;
    public sealed virtual void Initialize(ITelemetry telemetry);
    public sealed virtual void Dispose();
    private string GetRoleName();
    private string GetNodeName();
    private void UpdateEnvironmentValues();
}
public class Microsoft.ApplicationInsights.WindowsServer.BuildInfoConfigComponentVersionTelemetryInitializer : object {
    private static string BuildInfoConfigFilename;
    private string version;
    public sealed virtual void Initialize(ITelemetry telemetry);
    protected virtual XElement LoadBuildInfoConfig();
    private string GetVersion();
}
public class Microsoft.ApplicationInsights.WindowsServer.DeveloperModeWithDebuggerAttachedTelemetryModule : object {
    internal static Func`1<bool> IsDebuggerAttached;
    private static DeveloperModeWithDebuggerAttachedTelemetryModule();
    public sealed virtual void Initialize(TelemetryConfiguration configuration);
}
[ObsoleteAttribute("A telemetry context initializer that used to populate role instance name. Preserved for backward compatibility.")]
[EditorBrowsableAttribute("1")]
public class Microsoft.ApplicationInsights.WindowsServer.DomainNameRoleInstanceTelemetryInitializer : object {
    public sealed virtual void Initialize(ITelemetry telemetry);
}
[EditorBrowsableAttribute("1")]
internal class Microsoft.ApplicationInsights.WindowsServer.Implementation.AppServiceEnvironmentVariableMonitor : EnvironmentVariableMonitor {
    public MonitoredAppServiceEnvVarUpdated MonitoredAppServiceEnvVarUpdatedEvent;
    internal static TimeSpan DefaultMonitorInterval;
    internal static IReadOnlyCollection`1<string> PreloadedMonitoredEnvironmentVariables;
    private static AppServiceEnvironmentVariableMonitor SingletonInstance;
    public static AppServiceEnvironmentVariableMonitor Instance { get; }
    internal static TimeSpan MonitorInterval { get; internal set; }
    private static AppServiceEnvironmentVariableMonitor();
    public static AppServiceEnvironmentVariableMonitor get_Instance();
    internal static TimeSpan get_MonitorInterval();
    internal static void set_MonitorInterval(TimeSpan value);
    protected virtual void OnEnvironmentVariableUpdated();
}
internal class Microsoft.ApplicationInsights.WindowsServer.Implementation.AzureComputeMetadataHeartbeatPropertyProvider : object {
    internal static string HeartbeatPropertyPrefix;
    internal IReadOnlyCollection`1<string> ExpectedAzureImsFields;
    private bool isAzureMetadataCheckCompleted;
    private IAzureMetadataRequestor azureInstanceMetadataRequestor;
    internal AzureComputeMetadataHeartbeatPropertyProvider(IAzureMetadataRequestor azureInstanceMetadataHandler);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.WindowsServer.Implementation.AzureComputeMetadataHeartbeatPropertyProvider/<SetDefaultPayloadAsync>d__5")]
public Task`1<bool> SetDefaultPayloadAsync(IHeartbeatPropertyManager provider);
}
internal class Microsoft.ApplicationInsights.WindowsServer.Implementation.AzureMetadataRequestor : object {
    internal static string AzureImsApiVersion;
    internal static string AzureImsJsonFormat;
    internal static int AzureImsMaxResponseBufferSize;
    internal TimeSpan AzureImsRequestTimeout;
    [CompilerGeneratedAttribute]
private string <BaseAimsUri>k__BackingField;
    internal string BaseAimsUri { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_BaseAimsUri();
    [CompilerGeneratedAttribute]
internal void set_BaseAimsUri(string value);
    public sealed virtual Task`1<AzureInstanceComputeMetadata> GetAzureComputeMetadataAsync();
    internal virtual HttpClient GetHttpClient();
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.WindowsServer.Implementation.AzureMetadataRequestor/<MakeAzureMetadataRequestAsync>d__10")]
private Task`1<AzureInstanceComputeMetadata> MakeAzureMetadataRequestAsync(string metadataRequestUrl);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.WindowsServer.Implementation.AzureMetadataRequestor/<MakeWebRequestAsync>d__11")]
private Task`1<AzureInstanceComputeMetadata> MakeWebRequestAsync(string requestUrl);
}
[DataContractAttribute]
internal class Microsoft.ApplicationInsights.WindowsServer.Implementation.DataContracts.AzureInstanceComputeMetadata : object {
    private static int ResourceGroupNameLengthMax;
    private static int ResourceGroupNameLengthMin;
    private static string ResourceGroupNameValidChars;
    private static int NameLenghtMax;
    private static int NameLengthMin;
    private static string NameValidChars;
    private static int RegexTimeoutMs;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Offer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PlacementGroupId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PlatformFaultDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PlatformUpdateDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Publisher>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceGroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sku>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubscriptionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VmId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VmSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VmScaleSetName>k__BackingField;
    [DataMemberAttribute]
internal string Location { get; internal set; }
    [DataMemberAttribute]
internal string Name { get; internal set; }
    [DataMemberAttribute]
internal string Offer { get; internal set; }
    [DataMemberAttribute]
internal string OsType { get; internal set; }
    [DataMemberAttribute]
internal string PlacementGroupId { get; internal set; }
    [DataMemberAttribute]
internal string PlatformFaultDomain { get; internal set; }
    [DataMemberAttribute]
internal string PlatformUpdateDomain { get; internal set; }
    [DataMemberAttribute]
internal string Publisher { get; internal set; }
    [DataMemberAttribute]
internal string ResourceGroupName { get; internal set; }
    [DataMemberAttribute]
internal string Sku { get; internal set; }
    [DataMemberAttribute]
internal string SubscriptionId { get; internal set; }
    [DataMemberAttribute]
internal string Tags { get; internal set; }
    [DataMemberAttribute]
internal string Version { get; internal set; }
    [DataMemberAttribute]
internal string VmId { get; internal set; }
    [DataMemberAttribute]
internal string VmSize { get; internal set; }
    [DataMemberAttribute]
internal string VmScaleSetName { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_Location();
    [CompilerGeneratedAttribute]
internal void set_Location(string value);
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
internal string get_Offer();
    [CompilerGeneratedAttribute]
internal void set_Offer(string value);
    [CompilerGeneratedAttribute]
internal string get_OsType();
    [CompilerGeneratedAttribute]
internal void set_OsType(string value);
    [CompilerGeneratedAttribute]
internal string get_PlacementGroupId();
    [CompilerGeneratedAttribute]
internal void set_PlacementGroupId(string value);
    [CompilerGeneratedAttribute]
internal string get_PlatformFaultDomain();
    [CompilerGeneratedAttribute]
internal void set_PlatformFaultDomain(string value);
    [CompilerGeneratedAttribute]
internal string get_PlatformUpdateDomain();
    [CompilerGeneratedAttribute]
internal void set_PlatformUpdateDomain(string value);
    [CompilerGeneratedAttribute]
internal string get_Publisher();
    [CompilerGeneratedAttribute]
internal void set_Publisher(string value);
    [CompilerGeneratedAttribute]
internal string get_ResourceGroupName();
    [CompilerGeneratedAttribute]
internal void set_ResourceGroupName(string value);
    [CompilerGeneratedAttribute]
internal string get_Sku();
    [CompilerGeneratedAttribute]
internal void set_Sku(string value);
    [CompilerGeneratedAttribute]
internal string get_SubscriptionId();
    [CompilerGeneratedAttribute]
internal void set_SubscriptionId(string value);
    [CompilerGeneratedAttribute]
internal string get_Tags();
    [CompilerGeneratedAttribute]
internal void set_Tags(string value);
    [CompilerGeneratedAttribute]
internal string get_Version();
    [CompilerGeneratedAttribute]
internal void set_Version(string value);
    [CompilerGeneratedAttribute]
internal string get_VmId();
    [CompilerGeneratedAttribute]
internal void set_VmId(string value);
    [CompilerGeneratedAttribute]
internal string get_VmSize();
    [CompilerGeneratedAttribute]
internal void set_VmSize(string value);
    [CompilerGeneratedAttribute]
internal string get_VmScaleSetName();
    [CompilerGeneratedAttribute]
internal void set_VmScaleSetName(string value);
    internal string GetValueForField(string fieldName);
    internal string VerifyExpectedValue(string fieldName);
}
internal abstract class Microsoft.ApplicationInsights.WindowsServer.Implementation.EnvironmentVariableMonitor : object {
    protected ConcurrentDictionary`2<string, string> CheckedValues;
    protected TimeSpan MinimumCheckInterval;
    protected Boolean modreq(System.Runtime.CompilerServices.IsVolatile) isEnabled;
    protected TimeSpan checkInterval;
    private Timer environmentCheckTimer;
    protected EnvironmentVariableMonitor(IEnumerable`1<string> envVars, TimeSpan checkInterval);
    public void GetCurrentEnvironmentVariableValue(string envVarName, String& value);
    public sealed virtual void Dispose();
    protected abstract virtual void OnEnvironmentVariableUpdated();
    protected void CheckVariablesIntermittent(object state);
    private void Dispose(bool disposing);
}
internal static class Microsoft.ApplicationInsights.WindowsServer.Implementation.HeartbeatPropertyManagerProvider : object {
    public static IHeartbeatPropertyManager GetHeartbeatPropertyManager();
}
internal interface Microsoft.ApplicationInsights.WindowsServer.Implementation.IAzureMetadataRequestor {
    public abstract virtual Task`1<AzureInstanceComputeMetadata> GetAzureComputeMetadataAsync();
}
internal class Microsoft.ApplicationInsights.WindowsServer.Implementation.MonitoredAppServiceEnvVarUpdated : MulticastDelegate {
    public MonitoredAppServiceEnvVarUpdated(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[EventSourceAttribute]
internal class Microsoft.ApplicationInsights.WindowsServer.Implementation.WindowsServerEventSource : EventSource {
    public static WindowsServerEventSource Log;
    private ApplicationNameProvider applicationNameProvider;
    private static WindowsServerEventSource();
    [EventAttribute("1")]
public void TelemetryInitializerLoaded(string typeName, string appDomainName);
    [EventAttribute("2")]
public void TypeExtensionsTypeNotLoaded(string typeName, string appDomainName);
    [EventAttribute("3")]
public void TypeExtensionsAssemblyNotLoaded(string assemblyName, string appDomainName);
    [EventAttribute("4")]
public void BuildInfoConfigBrokenXmlError(string msg, string appDomainName);
    [EventAttribute("5")]
public void BuildInfoConfigLoaded(string path, string appDomainName);
    [EventAttribute("6")]
public void BuildInfoConfigNotFound(string path, string appDomainName);
    [EventAttribute("7")]
public void DeviceContextWmiFailureWarning(string error, string appDomainName);
    [EventAttribute("8")]
public void TaskSchedulerOnUnobservedTaskException(string appDomainName);
    [EventAttribute("9")]
public void CurrentDomainOnUnhandledException(string appDomainName);
    [EventAttribute("10")]
public void FirstChanceExceptionCallbackExeptionIsNull(string appDomainName);
    [EventAttribute("11")]
public void FirstChanceExceptionCallbackCalled(string appDomainName);
    [EventAttribute("12")]
public void FirstChanceExceptionCallbackException(string exception, string appDomainName);
    [EventAttribute("13")]
public void UnobservedTaskExceptionThrewUnhandledException(string exception, string appDomainName);
    [EventAttribute("14")]
public void UnknownErrorOccured(string source, string exception, string applicationName);
    [EventAttribute("15")]
public void AccessingEnvironmentVariableFailedWarning(string environmentVariable, string exceptionMessage, string applicationName);
    [EventAttribute("16")]
public void AzureRoleEnvironmentTelemetryInitializerNotInitializedInWebApp(string applicationName);
    [EventAttribute("17")]
public void AssemblyLoadSuccess(string assembly, string location, string appDomain, string applicationName);
    [EventAttribute("18")]
public void AssemblyLoadAttemptFailed(string assembly, string exceptionMessage, string applicationName);
    [EventAttribute("19")]
public void AssemblyLoadFailedAllVersion(string assembly, string applicationName);
    [EventAttribute("20")]
public void AzureRoleEnvironmentContextReaderInitializedSuccess(string roleName, string roleInstanceName, string applicationName);
    [EventAttribute("21")]
public void AzureRoleEnvironmentContextReaderInitializationFailed(string applicationName);
    [EventAttribute("22")]
public void AzureRoleEnvironmentContextReaderAppDomainTroubleshoot(string domainName, string msg, string applicationName);
    [EventAttribute("23")]
public void AzureRoleEnvironmentContextReaderInitializationDuration(long durationMsec, string applicationName);
    [EventAttribute("24")]
public void CannotObtainAzureInstanceMetadata(string applicationName);
    [EventAttribute("25")]
public void AzureInstanceMetadataRequestFailure(string requestUrl, string ex, string innerEx, string appDomainName);
    [EventAttribute("26")]
public void AzureInstanceMetadataFieldCountUnexpected(int expectedCount, int receivedCount, string applicationName);
    [EventAttribute("27")]
public void AzureInstanceMetadataFieldNameUnexpected(string unexpectedFieldName, string applicationName);
    [EventAttribute("28")]
public void AzureInstanceMetadataValueForFieldInvalid(string fieldWithInvalidValue, string applicationName);
    [EventAttribute("29")]
public void AzureInstanceMetadataWasntAddedToHeartbeatProperties(string azureImsFieldName, string azureImsFieldValue, string applicationName);
    [EventAttribute("30")]
public void AzureInstanceMetadataNotAdded(string applicationName);
    [EventAttribute("31")]
public void AzureInstanceMetadataFailureWithException(string exception, string innerException, string applicationName);
    [EventAttribute("32")]
public void AzureInstanceMetadataFailureSettingDefaultPayload(string exception, string innerException, string applicationName);
    [EventAttribute("33")]
public void AppServiceHeartbeatPropertyAquisitionFailed(string envVarName, string exceptionStr, string appDomainName);
    [EventAttribute("34")]
public void AppServiceHeartbeatManagerAccessFailure(string exceptionStr, string appDomainName);
    [EventAttribute("35")]
public void AppServiceHeartbeatManagerNotAvailable(string appDomainName);
    [EventAttribute("36")]
public void AppServiceHeartbeatPropertySettingFails(string exceptionStr, string appDomainName);
    [EventAttribute("37")]
public void AppServiceHeartbeatSetCalledWithNullManager(string appDomainName);
    [EventAttribute("38")]
public void EnvironmentVarMonitorFailedDispose(string exceptionMsg, string appDomainName);
    [EventAttribute("39")]
public void SecurityExceptionThrownAccessingEnvironmentVariable(string environmentVariableName, string exceptionMsg, string appDomainName);
    [EventAttribute("40")]
public void GeneralFailureOccursDuringCheckForEnvironmentVariables(string exceptionMsg, string appDomainName);
}
public class Microsoft.ApplicationInsights.WindowsServer.UnobservedExceptionTelemetryModule : object {
    private Action`1<EventHandler`1<UnobservedTaskExceptionEventArgs>> registerAction;
    private Action`1<EventHandler`1<UnobservedTaskExceptionEventArgs>> unregisterAction;
    private object lockObject;
    private TelemetryClient telemetryClient;
    private bool isInitialized;
    internal UnobservedExceptionTelemetryModule(Action`1<EventHandler`1<UnobservedTaskExceptionEventArgs>> registerAction, Action`1<EventHandler`1<UnobservedTaskExceptionEventArgs>> unregisterAction);
    public sealed virtual void Initialize(TelemetryConfiguration configuration);
    public sealed virtual void Dispose();
    private void TaskSchedulerOnUnobservedTaskException(object sender, UnobservedTaskExceptionEventArgs unobservedTaskExceptionEventArgs);
}
