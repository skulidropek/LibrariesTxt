internal static class AssemblyInfo : object {
    public static string PublicKey;
    public static string MoqPublicKey;
}
internal class Microsoft.ApplicationInsights.AspNetCore.ApplicationInsightsStartupFilter : object {
    private ILogger`1<ApplicationInsightsStartupFilter> logger;
    public ApplicationInsightsStartupFilter(ILogger`1<ApplicationInsightsStartupFilter> logger);
    public sealed virtual Action`1<IApplicationBuilder> Configure(Action`1<IApplicationBuilder> next);
}
internal class Microsoft.ApplicationInsights.AspNetCore.DiagnosticListeners.ExceptionUtilities : object {
    internal static string GetExceptionDetailString(Exception ex);
}
internal static class Microsoft.ApplicationInsights.AspNetCore.DiagnosticListeners.HeadersUtilities : object {
    public static string GetHeaderKeyValue(IEnumerable`1<string> headerValues, string keyName);
    public static StringValues SetHeaderKeyValue(String[] currentHeaders, string key, string value);
    public static string SanitizeString(string input);
    private static bool HeaderMatchesKey(string headerValue, string key);
}
internal class Microsoft.ApplicationInsights.AspNetCore.DiagnosticListeners.HostingDiagnosticListener : object {
    internal static string LegacyRootIdProperty;
    private static string ActivityCreatedByHostingDiagnosticListener;
    private static string ProactiveSamplingFeatureFlagName;
    private static string ConditionalAppIdFeatureFlagName;
    private static ActiveSubsciptionManager SubscriptionManager;
    private AspNetCoreMajorVersion aspNetCoreMajorVersion;
    private bool proactiveSamplingEnabled;
    private bool conditionalAppIdEnabled;
    private TelemetryConfiguration configuration;
    private TelemetryClient client;
    private IApplicationIdProvider applicationIdProvider;
    private string sdkVersion;
    private bool injectResponseHeaders;
    private bool trackExceptions;
    private bool enableW3CHeaders;
    private PropertyFetcher httpContextFetcherOnBeforeAction;
    private PropertyFetcher httpContextFetcherOnBeforeAction30;
    private PropertyFetcher routeDataFetcher;
    private PropertyFetcher routeDataFetcher30;
    private PropertyFetcher routeValuesFetcher;
    private PropertyFetcher httpContextFetcherStart;
    private PropertyFetcher httpContextFetcherStop;
    private PropertyFetcher httpContextFetcherDiagExceptionUnhandled;
    private PropertyFetcher httpContextFetcherDiagExceptionHandled;
    private PropertyFetcher exceptionFetcherDiagExceptionUnhandled;
    private PropertyFetcher exceptionFetcherDiagExceptionHandled;
    private string lastIKeyLookedUp;
    private string lastAppIdUsed;
    [CompilerGeneratedAttribute]
private string <ListenerName>k__BackingField;
    public string ListenerName { get; }
    public HostingDiagnosticListener(TelemetryClient client, IApplicationIdProvider applicationIdProvider, bool injectResponseHeaders, bool trackExceptions, bool enableW3CHeaders, AspNetCoreMajorVersion aspNetCoreMajorVersion);
    public HostingDiagnosticListener(TelemetryConfiguration configuration, TelemetryClient client, IApplicationIdProvider applicationIdProvider, bool injectResponseHeaders, bool trackExceptions, bool enableW3CHeaders, AspNetCoreMajorVersion aspNetCoreMajorVersion);
    private static HostingDiagnosticListener();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ListenerName();
    public static void OnBeforeAction(HttpContext httpContext, IDictionary`2<string, object> routeValues);
    public sealed virtual void OnSubscribe();
    public void OnHttpRequestInStart(HttpContext httpContext);
    public void OnHttpRequestInStop(HttpContext httpContext);
    public void OnDiagnosticsHandledException(HttpContext httpContext, Exception exception);
    public void OnDiagnosticsUnhandledException(HttpContext httpContext, Exception exception);
    public sealed virtual void Dispose();
    public sealed virtual void OnNext(KeyValuePair`2<string, object> value);
    public sealed virtual void OnError(Exception error);
    public sealed virtual void OnCompleted();
    private static string GetParentId(Activity activity, string originalParentId);
    private static void CopyActivityPropertiesFromAspNetCore(Activity currentActivity, Activity newActivity);
    private static string ExtractOperationIdFromRequestId(string originalParentId);
    private static bool TryGetW3CCompatibleTraceId(string requestId, ReadOnlySpan`1& result);
    private static void ReadCorrelationContext(IHeaderDictionary requestHeaders, Activity activity);
    private static void ReadTraceState(IHeaderDictionary requestHeaders, Activity activity);
    private static string GetNameFromRouteContext(IDictionary`2<string, object> routeValues);
    private void AddAppIdToResponseIfRequired(HttpContext httpContext, RequestTelemetry requestTelemetry);
    private RequestTelemetry InitializeRequestTelemetry(HttpContext httpContext, Activity activity, long timestamp, string legacyRootId);
    private string GetAppIdFromRequestHeader(IHeaderDictionary requestHeaders, string instrumentationKey);
    private void SetAppIdInResponseHeader(HttpContext httpContext, RequestTelemetry requestTelemetry);
    private void EndRequest(HttpContext httpContext, long timestamp);
    private void OnException(HttpContext httpContext, Exception exception);
}
internal static class Microsoft.ApplicationInsights.AspNetCore.DiagnosticListeners.HttpHeadersUtilities : object {
    internal static IEnumerable`1<string> GetHeaderValues(IHeaderDictionary headers, string headerName);
    internal static string GetHeaderKeyValue(IHeaderDictionary headers, string headerName, string keyName);
    internal static string GetRequestContextKeyValue(IHeaderDictionary headers, string keyName);
    internal static bool ContainsRequestContextKeyValue(IHeaderDictionary headers, string keyName);
    internal static void SetRequestContextKeyValue(IHeaderDictionary headers, string keyName, string keyValue);
    internal static void SetHeaderKeyValue(IHeaderDictionary headers, string headerName, string keyName, string keyValue);
    internal static String[] SafeGetCommaSeparatedHeaderValues(IHeaderDictionary headers, string headerName, int maxLength, int maxItems);
}
internal interface Microsoft.ApplicationInsights.AspNetCore.DiagnosticListeners.IApplicationInsightDiagnosticListener {
    public string ListenerName { get; }
    public abstract virtual string get_ListenerName();
    public abstract virtual void OnSubscribe();
}
internal class Microsoft.ApplicationInsights.AspNetCore.DiagnosticListeners.Implementation.PropertyFetcher : object {
    private string propertyName;
    private PropertyFetch modreq(System.Runtime.CompilerServices.IsVolatile) innerFetcher;
    public PropertyFetcher(string propertyName);
    public object Fetch(object obj);
}
[ObsoleteAttribute("This class was merged with HostingDiagnosticsListener to optimize Diagnostics Source subscription performance")]
public class Microsoft.ApplicationInsights.AspNetCore.DiagnosticListeners.MvcDiagnosticsListener : object {
    private PropertyFetcher httpContextFetcher;
    private PropertyFetcher routeDataFetcher;
    private PropertyFetcher routeValuesFetcher;
    [CompilerGeneratedAttribute]
private string <ListenerName>k__BackingField;
    public string ListenerName { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_ListenerName();
    public void OnBeforeAction(HttpContext httpContext, IDictionary`2<string, object> routeValues);
    public sealed virtual void OnSubscribe();
    public sealed virtual void OnNext(KeyValuePair`2<string, object> value);
    public sealed virtual void OnError(Exception error);
    public sealed virtual void OnCompleted();
    public sealed virtual void Dispose();
    private static string GetNameFromRouteContext(IDictionary`2<string, object> routeValues);
}
internal static class Microsoft.ApplicationInsights.AspNetCore.DiagnosticListeners.RequestResponseHeaders : object {
    public static string RequestContextHeader;
    public static string RequestContextSourceKey;
    public static string RequestContextTargetKey;
    public static string RequestIdHeader;
    public static string CorrelationContextHeader;
    public static string TraceParentHeader;
    public static string TraceStateHeader;
}
[ObsoleteAttribute("Exceptions are automatically tracked with new RequestTrackingTelemetryModule")]
public class Microsoft.ApplicationInsights.AspNetCore.ExceptionTrackingMiddleware : object {
    private RequestDelegate next;
    private TelemetryClient telemetryClient;
    private string sdkVersion;
    public ExceptionTrackingMiddleware(RequestDelegate next, TelemetryClient client);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.AspNetCore.ExceptionTrackingMiddleware/<Invoke>d__4")]
public Task Invoke(HttpContext httpContext);
}
[EventSourceAttribute]
internal class Microsoft.ApplicationInsights.AspNetCore.Extensibility.Implementation.Tracing.AspNetCoreEventSource : EventSource {
    public static AspNetCoreEventSource Instance;
    private ApplicationNameProvider applicationNameProvider;
    private static AspNetCoreEventSource();
    [EventAttribute("2")]
public void LogTelemetryInitializerBaseInitializeContextNull(string appDomainName);
    [EventAttribute("4")]
public void LogTelemetryInitializerBaseInitializeRequestNull(string appDomainName);
    [EventAttribute("5")]
public void LogClientIpHeaderTelemetryInitializerOnInitializeTelemetryIpNull(string appDomainName);
    [EventAttribute("6")]
public void LogWebSessionTelemetryInitializerOnInitializeTelemetrySessionIdNull(string appDomainName);
    [EventAttribute("7")]
public void LogWebUserTelemetryInitializerOnInitializeTelemetrySessionIdNull(string appDomainName);
    [EventAttribute("9")]
public void LogHostingDiagnosticListenerOnHttpRequestInStartActivityNull(string appDomainName);
    [EventAttribute("11")]
public void UnableToFindModuleToConfigure(string moduleType, string appDomainName);
    [EventAttribute("13")]
public void NotActiveListenerNoTracking(string evntName, string activityId, string appDomainName);
    [EventAttribute("14")]
public void LogError(string errorMessage, string appDomainName);
    [EventAttribute("15")]
public void RequestTrackingModuleInitializationFailed(string errorMessage, string appDomainName);
    [EventAttribute("16")]
public void DiagnosticListenerWarning(string callback, string errorMessage, string appDomainName);
    [EventAttribute("17")]
public void TelemetryConfigurationSetupFailure(string errorMessage, string appDomainName);
    [EventAttribute("18")]
public void TelemetryItemWasSampledOutAtHead(string operationId, string appDomainName);
    [EventAttribute("19")]
public void HostingListenerInformational(AspNetCoreMajorVersion hostingVersion, string message, string appDomainName);
    [EventAttribute("20")]
public void HostingListenerVerbose(string message, string appDomainName);
    [EventAttribute("21")]
public void RequestTelemetryCreated(string correlationFormat, string requestId, string requestOperationId, string appDomainName);
    [EventAttribute("22")]
public void HostingListenerWarning(string message, string exception, string appDomainName);
    [EventAttribute("23")]
public void LogInformational(string message, string appDomainName);
    [EventAttribute("24")]
public void LogAzureAppServiceRoleNameFromHostNameHeaderInitializerWarning(string exception, string appDomainName);
    [EventAttribute("25")]
public void TelemetryModuleInitialziationSetupFailure(string moduleName, string errorMessage, string appDomainName);
}
public class Microsoft.ApplicationInsights.AspNetCore.Extensions.ApplicationInsightsServiceOptions : object {
    [CompilerGeneratedAttribute]
private bool <EnableQuickPulseMetricStream>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnablePerformanceCounterCollectionModule>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableAppServicesHeartbeatTelemetryModule>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableAzureInstanceMetadataTelemetryModule>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDependencyTrackingTelemetryModule>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableEventCounterCollectionModule>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableAdaptiveSampling>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstrumentationKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DeveloperMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndpointAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDebugLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableHeartbeat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddAutoCollectedMetricExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestCollectionOptions <RequestCollectionOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableRequestTrackingTelemetryModule>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableAuthenticationTrackingJavaScript>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDiagnosticsTelemetryModule>k__BackingField;
    [CompilerGeneratedAttribute]
private DependencyCollectionOptions <DependencyCollectionOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableActiveTelemetryConfigurationSetup>k__BackingField;
    public bool EnableQuickPulseMetricStream { get; public set; }
    public bool EnablePerformanceCounterCollectionModule { get; public set; }
    public bool EnableAppServicesHeartbeatTelemetryModule { get; public set; }
    public bool EnableAzureInstanceMetadataTelemetryModule { get; public set; }
    public bool EnableDependencyTrackingTelemetryModule { get; public set; }
    public bool EnableEventCounterCollectionModule { get; public set; }
    public bool EnableAdaptiveSampling { get; public set; }
    [ObsoleteAttribute("InstrumentationKey based global ingestion is being deprecated. Use ApplicationInsightsServiceOptions.ConnectionString. See https://github.com/microsoft/ApplicationInsights-dotnet/issues/2560 for more details.")]
public string InstrumentationKey { get; public set; }
    public string ConnectionString { get; public set; }
    public string ApplicationVersion { get; public set; }
    public Nullable`1<bool> DeveloperMode { get; public set; }
    public string EndpointAddress { get; public set; }
    public bool EnableDebugLogger { get; public set; }
    public bool EnableHeartbeat { get; public set; }
    public bool AddAutoCollectedMetricExtractor { get; public set; }
    public RequestCollectionOptions RequestCollectionOptions { get; }
    public bool EnableRequestTrackingTelemetryModule { get; public set; }
    public bool EnableAuthenticationTrackingJavaScript { get; public set; }
    public bool EnableDiagnosticsTelemetryModule { get; public set; }
    public DependencyCollectionOptions DependencyCollectionOptions { get; }
    public bool EnableActiveTelemetryConfigurationSetup { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EnableQuickPulseMetricStream();
    [CompilerGeneratedAttribute]
public void set_EnableQuickPulseMetricStream(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnablePerformanceCounterCollectionModule();
    [CompilerGeneratedAttribute]
public void set_EnablePerformanceCounterCollectionModule(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableAppServicesHeartbeatTelemetryModule();
    [CompilerGeneratedAttribute]
public void set_EnableAppServicesHeartbeatTelemetryModule(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableAzureInstanceMetadataTelemetryModule();
    [CompilerGeneratedAttribute]
public void set_EnableAzureInstanceMetadataTelemetryModule(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableDependencyTrackingTelemetryModule();
    [CompilerGeneratedAttribute]
public void set_EnableDependencyTrackingTelemetryModule(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableEventCounterCollectionModule();
    [CompilerGeneratedAttribute]
public void set_EnableEventCounterCollectionModule(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableAdaptiveSampling();
    [CompilerGeneratedAttribute]
public void set_EnableAdaptiveSampling(bool value);
    [CompilerGeneratedAttribute]
public string get_InstrumentationKey();
    [CompilerGeneratedAttribute]
public void set_InstrumentationKey(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationVersion();
    [CompilerGeneratedAttribute]
public void set_ApplicationVersion(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DeveloperMode();
    [CompilerGeneratedAttribute]
public void set_DeveloperMode(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_EndpointAddress();
    [CompilerGeneratedAttribute]
public void set_EndpointAddress(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableDebugLogger();
    [CompilerGeneratedAttribute]
public void set_EnableDebugLogger(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableHeartbeat();
    [CompilerGeneratedAttribute]
public void set_EnableHeartbeat(bool value);
    [CompilerGeneratedAttribute]
public bool get_AddAutoCollectedMetricExtractor();
    [CompilerGeneratedAttribute]
public void set_AddAutoCollectedMetricExtractor(bool value);
    [CompilerGeneratedAttribute]
public RequestCollectionOptions get_RequestCollectionOptions();
    [CompilerGeneratedAttribute]
public bool get_EnableRequestTrackingTelemetryModule();
    [CompilerGeneratedAttribute]
public void set_EnableRequestTrackingTelemetryModule(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableAuthenticationTrackingJavaScript();
    [CompilerGeneratedAttribute]
public void set_EnableAuthenticationTrackingJavaScript(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableDiagnosticsTelemetryModule();
    [CompilerGeneratedAttribute]
public void set_EnableDiagnosticsTelemetryModule(bool value);
    [CompilerGeneratedAttribute]
public DependencyCollectionOptions get_DependencyCollectionOptions();
    [CompilerGeneratedAttribute]
public bool get_EnableActiveTelemetryConfigurationSetup();
    [CompilerGeneratedAttribute]
public void set_EnableActiveTelemetryConfigurationSetup(bool value);
    internal void CopyPropertiesTo(ApplicationInsightsServiceOptions target);
}
public class Microsoft.ApplicationInsights.AspNetCore.Extensions.DependencyCollectionOptions : object {
    [CompilerGeneratedAttribute]
private bool <EnableLegacyCorrelationHeadersInjection>k__BackingField;
    public bool EnableLegacyCorrelationHeadersInjection { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EnableLegacyCorrelationHeadersInjection();
    [CompilerGeneratedAttribute]
public void set_EnableLegacyCorrelationHeadersInjection(bool value);
}
[ExtensionAttribute]
public static class Microsoft.ApplicationInsights.AspNetCore.Extensions.HttpRequestExtensions : object {
    private static string UnknownHostName;
    private static string MultipleHostName;
    private static string Comma;
    [ExtensionAttribute]
public static Uri GetUri(HttpRequest request);
}
public class Microsoft.ApplicationInsights.AspNetCore.Extensions.RequestCollectionOptions : object {
    [CompilerGeneratedAttribute]
private bool <InjectResponseHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrackExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableW3CDistributedTracing>k__BackingField;
    public bool InjectResponseHeaders { get; public set; }
    public bool TrackExceptions { get; public set; }
    [ObsoleteAttribute("This flag is obsolete and noop. Use System.Diagnostics.Activity.DefaultIdFormat (along with ForceDefaultIdFormat) flags instead.")]
public bool EnableW3CDistributedTracing { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_InjectResponseHeaders();
    [CompilerGeneratedAttribute]
public void set_InjectResponseHeaders(bool value);
    [CompilerGeneratedAttribute]
public bool get_TrackExceptions();
    [CompilerGeneratedAttribute]
public void set_TrackExceptions(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableW3CDistributedTracing();
    [CompilerGeneratedAttribute]
public void set_EnableW3CDistributedTracing(bool value);
}
public interface Microsoft.ApplicationInsights.AspNetCore.IJavaScriptSnippet {
    public string FullScript { get; }
    public abstract virtual string get_FullScript();
}
internal enum Microsoft.ApplicationInsights.AspNetCore.Implementation.AspNetCoreMajorVersion : Enum {
    public int value__;
    public static AspNetCoreMajorVersion One;
    public static AspNetCoreMajorVersion Two;
    public static AspNetCoreMajorVersion Three;
}
internal class Microsoft.ApplicationInsights.AspNetCore.Implementation.RoleNameContainer : object {
    private static string WebAppHostNameHeaderName;
    private static string WebAppHostNameEnvironmentVariable;
    private string roleName;
    [CompilerGeneratedAttribute]
private static RoleNameContainer <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAzureWebApp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostNameSuffix>k__BackingField;
    public static RoleNameContainer Instance { get; public set; }
    public string RoleName { get; public set; }
    public bool IsAzureWebApp { get; private set; }
    public string HostNameSuffix { get; private set; }
    public RoleNameContainer(string hostNameSuffix);
    [CompilerGeneratedAttribute]
public static RoleNameContainer get_Instance();
    [CompilerGeneratedAttribute]
public static void set_Instance(RoleNameContainer value);
    public string get_RoleName();
    public void set_RoleName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsAzureWebApp();
    [CompilerGeneratedAttribute]
private void set_IsAzureWebApp(bool value);
    [CompilerGeneratedAttribute]
public string get_HostNameSuffix();
    [CompilerGeneratedAttribute]
private void set_HostNameSuffix(string value);
    public void Set(IHeaderDictionary requestHeaders);
    private void ParseAndSetRoleName(string input);
}
public interface Microsoft.ApplicationInsights.AspNetCore.ITelemetryModuleConfigurator {
    public Type TelemetryModuleType { get; }
    public abstract virtual Type get_TelemetryModuleType();
    [ObsoleteAttribute("Use Configure(ITelemetryModule telemetryModule, ApplicationInsightsServiceOptions options) instead.")]
public abstract virtual void Configure(ITelemetryModule telemetryModule);
    public abstract virtual void Configure(ITelemetryModule telemetryModule, ApplicationInsightsServiceOptions options);
}
public interface Microsoft.ApplicationInsights.AspNetCore.ITelemetryProcessorFactory {
    public abstract virtual ITelemetryProcessor Create(ITelemetryProcessor nextProcessor);
}
public class Microsoft.ApplicationInsights.AspNetCore.JavaScriptSnippet : object {
    private static string ScriptTagBegin;
    private static string ScriptTagEnd;
    private static string Snippet;
    private static string AuthSnippet;
    private IHttpContextAccessor httpContextAccessor;
    private TelemetryConfiguration telemetryConfiguration;
    private bool enableAuthSnippet;
    private JavaScriptEncoder encoder;
    public string FullScript { get; }
    public string ScriptBody { get; }
    public JavaScriptSnippet(TelemetryConfiguration telemetryConfiguration, IOptions`1<ApplicationInsightsServiceOptions> serviceOptions, IHttpContextAccessor httpContextAccessor, JavaScriptEncoder encoder);
    private static JavaScriptSnippet();
    public sealed virtual string get_FullScript();
    public string get_ScriptBody();
    private bool IsAvailable();
}
internal class Microsoft.ApplicationInsights.AspNetCore.Logging.ApplicationInsightsLogger : object {
    public static string VersionPrefix;
    private string categoryName;
    private TelemetryClient telemetryClient;
    private Func`3<string, LogLevel, bool> filter;
    private ApplicationInsightsLoggerOptions options;
    private string sdkVersion;
    public ApplicationInsightsLogger(string name, TelemetryClient telemetryClient, Func`3<string, LogLevel, bool> filter, ApplicationInsightsLoggerOptions options);
    public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    private static SeverityLevel GetSeverityLevel(LogLevel logLevel);
    private void PopulateTelemetry(ITelemetry telemetry, IReadOnlyList`1<KeyValuePair`2<string, object>> stateDictionary, EventId eventId);
}
internal class Microsoft.ApplicationInsights.AspNetCore.Logging.ApplicationInsightsLoggerEvents : object {
    [CompilerGeneratedAttribute]
private Action LoggerAdded;
    [CompilerGeneratedAttribute]
public void add_LoggerAdded(Action value);
    [CompilerGeneratedAttribute]
public void remove_LoggerAdded(Action value);
    public void OnLoggerAdded();
}
[ObsoleteAttribute("Use Microsoft.Extensions.Logging.ApplicationInsights.AddApplicationInsights.ApplicationInsightsLoggerOptions from Microsoft.Extensions.Logging.ApplicationInsights package")]
public class Microsoft.ApplicationInsights.AspNetCore.Logging.ApplicationInsightsLoggerOptions : object {
    [CompilerGeneratedAttribute]
private bool <TrackExceptionsAsExceptionTelemetry>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeEventId>k__BackingField;
    public bool TrackExceptionsAsExceptionTelemetry { get; public set; }
    public bool IncludeEventId { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_TrackExceptionsAsExceptionTelemetry();
    [CompilerGeneratedAttribute]
public void set_TrackExceptionsAsExceptionTelemetry(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeEventId();
    [CompilerGeneratedAttribute]
public void set_IncludeEventId(bool value);
}
[ObsoleteAttribute]
internal class Microsoft.ApplicationInsights.AspNetCore.Logging.ApplicationInsightsLoggerProvider : object {
    private TelemetryClient telemetryClient;
    private Func`3<string, LogLevel, bool> filter;
    private ApplicationInsightsLoggerOptions options;
    public ApplicationInsightsLoggerProvider(TelemetryClient telemetryClient, Func`3<string, LogLevel, bool> filter, IOptions`1<ApplicationInsightsLoggerOptions> options);
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
}
internal class Microsoft.ApplicationInsights.AspNetCore.NoOpTelemetryModule : object {
    public sealed virtual void Initialize(TelemetryConfiguration configuration);
}
public class Microsoft.ApplicationInsights.AspNetCore.RequestTrackingTelemetryModule : object {
    internal bool IsInitialized;
    private static Predicate`1<string> HostingPredicate;
    private object lockObject;
    private IApplicationIdProvider applicationIdProvider;
    private TelemetryClient telemetryClient;
    private ConcurrentBag`1<IDisposable> subscriptions;
    private HostingDiagnosticListener diagnosticListener;
    [CompilerGeneratedAttribute]
private RequestCollectionOptions <CollectionOptions>k__BackingField;
    public RequestCollectionOptions CollectionOptions { get; public set; }
    public RequestTrackingTelemetryModule(IApplicationIdProvider applicationIdProvider);
    private static RequestTrackingTelemetryModule();
    [CompilerGeneratedAttribute]
public RequestCollectionOptions get_CollectionOptions();
    [CompilerGeneratedAttribute]
public void set_CollectionOptions(RequestCollectionOptions value);
    public sealed virtual void Initialize(TelemetryConfiguration configuration);
    private sealed virtual override void System.IObserver<System.Diagnostics.DiagnosticListener>.OnNext(DiagnosticListener value);
    private sealed virtual override void System.IObserver<System.Diagnostics.DiagnosticListener>.OnError(Exception error);
    private sealed virtual override void System.IObserver<System.Diagnostics.DiagnosticListener>.OnCompleted();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Microsoft.ApplicationInsights.AspNetCore.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string JavaScriptAuthSnippet { get; }
    public static string JavaScriptSnippet { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_JavaScriptAuthSnippet();
    public static string get_JavaScriptSnippet();
}
internal class Microsoft.ApplicationInsights.AspNetCore.SdkVersionUtils : object {
    public static string VersionPrefix;
    internal static string GetVersion();
    internal static string GetVersion(string versionPrefix);
    private static string GetAssemblyVersion();
}
public class Microsoft.ApplicationInsights.AspNetCore.TelemetryInitializers.AspNetCoreEnvironmentTelemetryInitializer : object {
    private static string AspNetCoreEnvironmentPropertyName;
    private IHostingEnvironment environment;
    public AspNetCoreEnvironmentTelemetryInitializer(IHostingEnvironment environment);
    public sealed virtual void Initialize(ITelemetry telemetry);
}
public class Microsoft.ApplicationInsights.AspNetCore.TelemetryInitializers.AzureAppServiceRoleNameFromHostNameHeaderInitializer : object {
    public string WebAppSuffix { get; public set; }
    public AzureAppServiceRoleNameFromHostNameHeaderInitializer(string webAppSuffix);
    public string get_WebAppSuffix();
    public void set_WebAppSuffix(string value);
    public sealed virtual void Initialize(ITelemetry telemetry);
}
public class Microsoft.ApplicationInsights.AspNetCore.TelemetryInitializers.ClientIpHeaderTelemetryInitializer : TelemetryInitializerBase {
    private static string HeaderNameDefault;
    private Char[] headerValuesSeparatorDefault;
    private Char[] headerValueSeparators;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <HeaderNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseFirstIp>k__BackingField;
    public ICollection`1<string> HeaderNames { get; }
    public string HeaderValueSeparators { get; public set; }
    public bool UseFirstIp { get; public set; }
    public ClientIpHeaderTelemetryInitializer(IHttpContextAccessor httpContextAccessor);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_HeaderNames();
    public string get_HeaderValueSeparators();
    public void set_HeaderValueSeparators(string value);
    [CompilerGeneratedAttribute]
public bool get_UseFirstIp();
    [CompilerGeneratedAttribute]
public void set_UseFirstIp(bool value);
    protected virtual void OnInitializeTelemetry(HttpContext platformContext, RequestTelemetry requestTelemetry, ITelemetry telemetry);
    private static bool TryParseIpWithPort(string input, String& ipAddressString);
    private string GetIpFromHeader(string clientIpsFromHeader);
}
public class Microsoft.ApplicationInsights.AspNetCore.TelemetryInitializers.ComponentVersionTelemetryInitializer : object {
    private string version;
    public ComponentVersionTelemetryInitializer(IOptions`1<ApplicationInsightsServiceOptions> options);
    public sealed virtual void Initialize(ITelemetry telemetry);
}
public class Microsoft.ApplicationInsights.AspNetCore.TelemetryInitializers.DomainNameRoleInstanceTelemetryInitializer : object {
    private string roleInstanceName;
    public sealed virtual void Initialize(ITelemetry telemetry);
    private string GetMachineName();
}
public class Microsoft.ApplicationInsights.AspNetCore.TelemetryInitializers.OperationNameTelemetryInitializer : TelemetryInitializerBase {
    public OperationNameTelemetryInitializer(IHttpContextAccessor httpContextAccessor);
    protected virtual void OnInitializeTelemetry(HttpContext platformContext, RequestTelemetry requestTelemetry, ITelemetry telemetry);
}
public class Microsoft.ApplicationInsights.AspNetCore.TelemetryInitializers.SyntheticTelemetryInitializer : TelemetryInitializerBase {
    private static string SyntheticTestRunId;
    private static string SyntheticTestLocation;
    private static string SyntheticSourceHeaderValue;
    public SyntheticTelemetryInitializer(IHttpContextAccessor httpContextAccessor);
    protected virtual void OnInitializeTelemetry(HttpContext platformContext, RequestTelemetry requestTelemetry, ITelemetry telemetry);
}
public abstract class Microsoft.ApplicationInsights.AspNetCore.TelemetryInitializers.TelemetryInitializerBase : object {
    private IHttpContextAccessor httpContextAccessor;
    public TelemetryInitializerBase(IHttpContextAccessor httpContextAccessor);
    public sealed virtual void Initialize(ITelemetry telemetry);
    protected abstract virtual void OnInitializeTelemetry(HttpContext platformContext, RequestTelemetry requestTelemetry, ITelemetry telemetry);
}
public class Microsoft.ApplicationInsights.AspNetCore.TelemetryInitializers.WebSessionTelemetryInitializer : TelemetryInitializerBase {
    private static string WebSessionCookieName;
    public WebSessionTelemetryInitializer(IHttpContextAccessor httpContextAccessor);
    protected virtual void OnInitializeTelemetry(HttpContext platformContext, RequestTelemetry requestTelemetry, ITelemetry telemetry);
    private static void UpdateRequestTelemetryFromPlatformContext(RequestTelemetry requestTelemetry, HttpContext platformContext);
}
public class Microsoft.ApplicationInsights.AspNetCore.TelemetryInitializers.WebUserTelemetryInitializer : TelemetryInitializerBase {
    private static string WebUserCookieName;
    public WebUserTelemetryInitializer(IHttpContextAccessor httpContextAccessor);
    protected virtual void OnInitializeTelemetry(HttpContext platformContext, RequestTelemetry requestTelemetry, ITelemetry telemetry);
    private static void UpdateRequestTelemetryFromPlatformContext(RequestTelemetry requestTelemetry, HttpContext platformContext);
}
internal class Microsoft.ApplicationInsights.AspNetCore.TelemetryModuleConfigurator : object {
    private Action`2<ITelemetryModule, ApplicationInsightsServiceOptions> configure;
    [CompilerGeneratedAttribute]
private Type <TelemetryModuleType>k__BackingField;
    public Type TelemetryModuleType { get; }
    public TelemetryModuleConfigurator(Action`2<ITelemetryModule, ApplicationInsightsServiceOptions> configure, Type telemetryModuleType);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_TelemetryModuleType();
    [ObsoleteAttribute("Use Configure(ITelemetryModule telemetryModule, ApplicationInsightsServiceOptions options) instead.", "True")]
public sealed virtual void Configure(ITelemetryModule telemetryModule);
    public sealed virtual void Configure(ITelemetryModule telemetryModule, ApplicationInsightsServiceOptions options);
}
internal class Microsoft.ApplicationInsights.AspNetCore.TelemetryProcessorFactory : object {
    private IServiceProvider serviceProvider;
    private Type telemetryProcessorType;
    public TelemetryProcessorFactory(IServiceProvider serviceProvider, Type telemetryProcessorType);
    public sealed virtual ITelemetryProcessor Create(ITelemetryProcessor next);
}
internal class Microsoft.ApplicationInsights.Shared.Internals.ApplicationNameProvider : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    private static string GetApplicationName();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Hosting.ApplicationInsightsWebHostBuilderExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("This method is deprecated in favor of AddApplicationInsightsTelemetry() extension method on IServiceCollection.")]
public static IWebHostBuilder UseApplicationInsights(IWebHostBuilder webHostBuilder);
    [ExtensionAttribute]
[ObsoleteAttribute("This method is deprecated in favor of AddApplicationInsightsTelemetry(string instrumentationKey) extension method on IServiceCollection.")]
public static IWebHostBuilder UseApplicationInsights(IWebHostBuilder webHostBuilder, string instrumentationKey);
}
internal class Microsoft.AspNetCore.Hosting.DefaultApplicationInsightsServiceConfigureOptions : object {
    private IHostingEnvironment hostingEnvironment;
    private IConfiguration userConfiguration;
    public DefaultApplicationInsightsServiceConfigureOptions(IHostingEnvironment hostingEnvironment, IConfiguration configuration);
    public sealed virtual void Configure(ApplicationInsightsServiceOptions options);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ApplicationInsightsExtensions : object {
    private static string VersionKeyFromConfig;
    private static string InstrumentationKeyFromConfig;
    private static string ConnectionStringFromConfig;
    private static string DeveloperModeFromConfig;
    private static string EndpointAddressFromConfig;
    private static string InstrumentationKeyForWebSites;
    private static string ConnectionStringEnvironmentVariable;
    private static string DeveloperModeForWebSites;
    private static string EndpointAddressForWebSites;
    private static string ApplicationInsightsSectionFromConfig;
    private static string TelemetryChannelSectionFromConfig;
    private static string EventSourceNameForSystemRuntime;
    private static string EventSourceNameForAspNetCoreHosting;
    [ExtensionAttribute]
[ObsoleteAttribute("This middleware is no longer needed. Enable Request monitoring using services.AddApplicationInsights")]
public static IApplicationBuilder UseApplicationInsightsRequestTelemetry(IApplicationBuilder app);
    [ExtensionAttribute]
[ObsoleteAttribute("This middleware is no longer needed to track exceptions as they are automatically tracked by RequestTrackingTelemetryModule")]
public static IApplicationBuilder UseApplicationInsightsExceptionTelemetry(IApplicationBuilder app);
    [ExtensionAttribute]
[ObsoleteAttribute("InstrumentationKey based global ingestion is being deprecated. Use the AddApplicationInsightsTelemetry() overload which accepts Action<ApplicationInsightsServiceOptions> and set ApplicationInsightsServiceOptions.ConnectionString. See https://github.com/microsoft/ApplicationInsights-dotnet/issues/2560 for more details.")]
public static IServiceCollection AddApplicationInsightsTelemetry(IServiceCollection services, string instrumentationKey);
    [ExtensionAttribute]
public static IServiceCollection AddApplicationInsightsTelemetry(IServiceCollection services, IConfiguration configuration);
    [ExtensionAttribute]
public static IServiceCollection AddApplicationInsightsTelemetry(IServiceCollection services, Action`1<ApplicationInsightsServiceOptions> options);
    [ExtensionAttribute]
public static IServiceCollection AddApplicationInsightsTelemetry(IServiceCollection services, ApplicationInsightsServiceOptions options);
    [ExtensionAttribute]
public static IServiceCollection AddApplicationInsightsTelemetry(IServiceCollection services);
    private static void AddAspNetCoreWebTelemetryInitializers(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddApplicationInsightsTelemetryProcessor(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddApplicationInsightsTelemetryProcessor(IServiceCollection services, Type telemetryProcessorType);
    [ExtensionAttribute]
[ObsoleteAttribute("Use ConfigureTelemetryModule overload that accepts ApplicationInsightsServiceOptions.")]
public static IServiceCollection ConfigureTelemetryModule(IServiceCollection services, Action`1<T> configModule);
    [ExtensionAttribute]
public static IServiceCollection ConfigureTelemetryModule(IServiceCollection services, Action`2<T, ApplicationInsightsServiceOptions> configModule);
    [ExtensionAttribute]
[ObsoleteAttribute("InstrumentationKey based global ingestion is being deprecated. Use the AddApplicationInsightsSettings() overload which accepts string ConnectionString. See https://github.com/microsoft/ApplicationInsights-dotnet/issues/2560 for more details.")]
public static IConfigurationBuilder AddApplicationInsightsSettings(IConfigurationBuilder configurationSourceRoot, Nullable`1<bool> developerMode, string endpointAddress, string instrumentationKey);
    [ExtensionAttribute]
public static IConfigurationBuilder AddApplicationInsightsSettings(IConfigurationBuilder configurationSourceRoot, string connectionString, Nullable`1<bool> developerMode, string endpointAddress, string instrumentationKey);
    internal static void AddTelemetryConfiguration(IConfiguration config, ApplicationInsightsServiceOptions serviceOptions);
    [ExtensionAttribute]
internal static void AddSingletonIfNotExists(IServiceCollection services);
    [ExtensionAttribute]
private static bool TryGetValue(IConfiguration config, string primaryKey, String& value, string backupKey);
    private static bool IsApplicationInsightsAdded(IServiceCollection services);
    private static void AddCommonInitializers(IServiceCollection services);
    private static void AddCommonTelemetryModules(IServiceCollection services);
    private static void AddTelemetryChannel(IServiceCollection services);
    private static void AddDefaultApplicationIdProvider(IServiceCollection services);
    private static void AddTelemetryConfigAndClient(IServiceCollection services);
    private static void AddAndConfigureDependencyTracking(IServiceCollection services);
    private static void AddApplicationInsightsLoggerProvider(IServiceCollection services);
}
internal class Microsoft.Extensions.DependencyInjection.TelemetryConfigurationOptions : object {
    private static object LockObject;
    [CompilerGeneratedAttribute]
private TelemetryConfiguration <Value>k__BackingField;
    public TelemetryConfiguration Value { get; }
    public TelemetryConfigurationOptions(IEnumerable`1<IConfigureOptions`1<TelemetryConfiguration>> configureOptions, IOptions`1<ApplicationInsightsServiceOptions> applicationInsightsServiceOptions);
    private static TelemetryConfigurationOptions();
    [CompilerGeneratedAttribute]
public sealed virtual TelemetryConfiguration get_Value();
    private static bool IsActiveConfigured(string instrumentationKey);
}
internal class Microsoft.Extensions.DependencyInjection.TelemetryConfigurationOptionsSetup : object {
    private ApplicationInsightsServiceOptions applicationInsightsServiceOptions;
    private IEnumerable`1<ITelemetryInitializer> initializers;
    private IEnumerable`1<ITelemetryModule> modules;
    private ITelemetryChannel telemetryChannel;
    private IEnumerable`1<ITelemetryProcessorFactory> telemetryProcessorFactories;
    private IEnumerable`1<ITelemetryModuleConfigurator> telemetryModuleConfigurators;
    private IApplicationIdProvider applicationIdProvider;
    public TelemetryConfigurationOptionsSetup(IServiceProvider serviceProvider, IOptions`1<ApplicationInsightsServiceOptions> applicationInsightsServiceOptions, IEnumerable`1<ITelemetryInitializer> initializers, IEnumerable`1<ITelemetryModule> modules, IEnumerable`1<ITelemetryProcessorFactory> telemetryProcessorFactories, IEnumerable`1<ITelemetryModuleConfigurator> telemetryModuleConfigurators);
    public sealed virtual void Configure(TelemetryConfiguration configuration);
    private static void DisposeIfDisposable(ITelemetryModule module);
    private void AddQuickPulse(TelemetryConfiguration configuration);
    private void AddSampling(TelemetryConfiguration configuration);
    private void AddAutoCollectedMetricExtractor(TelemetryConfiguration configuration);
    private void DisableHeartBeatIfConfigured();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.ApplicationInsightsLoggerFactoryExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("ApplicationInsightsLoggerProvider is now enabled by default when enabling ApplicationInsights monitoring using UseApplicationInsights extension method on IWebHostBuilder or AddApplicationInsightsTelemetry extension method on IServiceCollection. From 2.7.0-beta3 onwards, calling this method will result in double logging and filters applied will not get applied. If interested in using just logging provider, then please use Microsoft.Extensions.Logging.ApplicationInsightsLoggingBuilderExtensions.AddApplicationInsights from Microsoft.Extensions.Logging.ApplicationInsights package. Read more https://aka.ms/ApplicationInsightsILoggerFaq")]
public static ILoggerFactory AddApplicationInsights(ILoggerFactory factory, IServiceProvider serviceProvider);
    [ExtensionAttribute]
[ObsoleteAttribute("ApplicationInsightsLoggerProvider is now enabled by default when enabling ApplicationInsights monitoring using UseApplicationInsights extension method on IWebHostBuilder or AddApplicationInsightsTelemetry extension method on IServiceCollection. From 2.7.0-beta3 onwards, calling this method will result in double logging and filters applied will not get applied. If interested in using just logging provider, then please use Microsoft.Extensions.Logging.ApplicationInsightsLoggingBuilderExtensions.AddApplicationInsights from Microsoft.Extensions.Logging.ApplicationInsights package. Read more https://aka.ms/ApplicationInsightsILoggerFaq")]
public static ILoggerFactory AddApplicationInsights(ILoggerFactory factory, IServiceProvider serviceProvider, LogLevel minLevel);
    [ExtensionAttribute]
[ObsoleteAttribute("ApplicationInsightsLoggerProvider is now enabled by default when enabling ApplicationInsights monitoring using UseApplicationInsights extension method on IWebHostBuilder or AddApplicationInsightsTelemetry extension method on IServiceCollection. From 2.7.0-beta3 onwards, calling this method will result in double logging and filters applied will not get applied. If interested in using just logging provider, then please use Microsoft.Extensions.Logging.ApplicationInsightsLoggingBuilderExtensions.AddApplicationInsights from Microsoft.Extensions.Logging.ApplicationInsights package. Read more https://aka.ms/ApplicationInsightsILoggerFaq")]
public static ILoggerFactory AddApplicationInsights(ILoggerFactory factory, IServiceProvider serviceProvider, Func`3<string, LogLevel, bool> filter);
    [ExtensionAttribute]
[ObsoleteAttribute("ApplicationInsightsLoggerProvider is now enabled by default when enabling ApplicationInsights monitoring using UseApplicationInsights extension method on IWebHostBuilder or AddApplicationInsightsTelemetry extension method on IServiceCollection. From 2.7.0-beta3 onwards, calling this method will result in double logging and filters applied will not get applied. If interested in using just logging provider, then please use Microsoft.Extensions.Logging.ApplicationInsightsLoggingBuilderExtensions.AddApplicationInsights from Microsoft.Extensions.Logging.ApplicationInsights package. Read more https://aka.ms/ApplicationInsightsILoggerFaq")]
public static ILoggerFactory AddApplicationInsights(ILoggerFactory factory, IServiceProvider serviceProvider, Func`3<string, LogLevel, bool> filter, Action loggerAddedCallback);
}
[AttributeUsageAttribute("4")]
internal class Microsoft.Extensions.Logging.ProviderAliasAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    public string Alias { get; }
    public ProviderAliasAttribute(string alias);
    [CompilerGeneratedAttribute]
public string get_Alias();
}
