[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.DotNet.Interactive.CSharp.CachingMetadataResolver : MetadataReferenceResolver {
    private ConcurrentDictionary`2<AssemblyIdentity, PortableExecutableReference> _resolvedAssembliesCache;
    private ConcurrentDictionary`2<ValueTuple`3<string, string, MetadataReferenceProperties>, ImmutableArray`1<PortableExecutableReference>> _xmlReferencesCache;
    private ScriptMetadataResolver _resolver;
    private string _baseDirectory;
    [CompilerGeneratedAttribute]
private static CachingMetadataResolver <Default>k__BackingField;
    public static CachingMetadataResolver Default { get; }
    public bool ResolveMissingAssemblies { get; }
    public ImmutableArray`1<string> SearchPaths { get; }
    private CachingMetadataResolver(ImmutableArray`1<string> searchPaths, string baseDirectory);
    private static CachingMetadataResolver();
    [CompilerGeneratedAttribute]
public static CachingMetadataResolver get_Default();
    public virtual ImmutableArray`1<PortableExecutableReference> ResolveReference(string reference, string baseFilePath, MetadataReferenceProperties properties);
    public virtual bool get_ResolveMissingAssemblies();
    public virtual PortableExecutableReference ResolveMissingAssembly(MetadataReference definition, AssemblyIdentity referenceIdentity);
    public CachingMetadataResolver WithBaseDirectory(string baseDirectory);
    public ImmutableArray`1<string> get_SearchPaths();
    internal static PortableExecutableReference ResolveReferenceWithXmlDocumentationProvider(string path, MetadataReferenceProperties properties);
    public sealed virtual bool Equals(ScriptMetadataResolver other);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
internal static class Microsoft.DotNet.Interactive.CSharp.CompletionExtensions : object {
    private static ImmutableArray`1<string> KindTags;
    private static CompletionExtensions();
    [ExtensionAttribute]
public static string GetKind(CompletionItem completionItem);
    [ExtensionAttribute]
public static CompletionItem ToModel(CompletionItem item, CompletionDescription description);
}
public class Microsoft.DotNet.Interactive.CSharp.CSharpKernel : Kernel {
    internal static string DefaultKernelName;
    private static MethodInfo _hasReturnValueMethod;
    protected CSharpParseOptions _csharpParseOptions;
    private InteractiveWorkspace _workspace;
    private ScriptOptions _scriptOptions;
    private string _workingDirectory;
    [CompilerGeneratedAttribute]
private ScriptState <ScriptState>k__BackingField;
    public ScriptState ScriptState { get; private set; }
    private bool HasReturnValue { get; }
    public CSharpKernel(string name);
    private static CSharpKernel();
    [CompilerGeneratedAttribute]
public ScriptState get_ScriptState();
    [CompilerGeneratedAttribute]
private void set_ScriptState(ScriptState value);
    private Task`1<bool> IsCompleteSubmissionAsync(string code);
    private sealed virtual override Task Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.RequestValueInfos>.HandleAsync(RequestValueInfos command, KernelInvocationContext context);
    private sealed virtual override Task Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.RequestValue>.HandleAsync(RequestValue command, KernelInvocationContext context);
    public bool TryGetValue(string name, T& value);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.CSharp.CSharpKernel/<Microsoft-DotNet-Interactive-IKernelCommandHandler<Microsoft-DotNet-Interactive-Commands-SendValue>-HandleAsync>d__16")]
private sealed virtual override Task Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.SendValue>.HandleAsync(SendValue command, KernelInvocationContext context);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.CSharp.CSharpKernel/<SetValueAsync>d__17")]
public Task SetValueAsync(string name, object value, Type declaredType);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.CSharp.CSharpKernel/<Microsoft-DotNet-Interactive-IKernelCommandHandler<Microsoft-DotNet-Interactive-Commands-RequestHoverText>-HandleAsync>d__18")]
private sealed virtual override Task Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.RequestHoverText>.HandleAsync(RequestHoverText command, KernelInvocationContext context);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.CSharp.CSharpKernel/<Microsoft-DotNet-Interactive-IKernelCommandHandler<Microsoft-DotNet-Interactive-Commands-RequestSignatureHelp>-HandleAsync>d__19")]
private sealed virtual override Task Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.RequestSignatureHelp>.HandleAsync(RequestSignatureHelp command, KernelInvocationContext context);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.CSharp.CSharpKernel/<EnsureWorkspaceIsInitializedAsync>d__20")]
private Task EnsureWorkspaceIsInitializedAsync(KernelInvocationContext context);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.CSharp.CSharpKernel/<Microsoft-DotNet-Interactive-IKernelCommandHandler<Microsoft-DotNet-Interactive-Commands-SubmitCode>-HandleAsync>d__21")]
private sealed virtual override Task Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.SubmitCode>.HandleAsync(SubmitCode submitCode, KernelInvocationContext context);
    private sealed virtual override Task Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.ChangeWorkingDirectory>.HandleAsync(ChangeWorkingDirectory command, KernelInvocationContext context);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.CSharp.CSharpKernel/<RunAsync>d__23")]
private Task RunAsync(string code, CancellationToken cancellationToken, Func`2<Exception, bool> catchException);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.CSharp.CSharpKernel/<Microsoft-DotNet-Interactive-IKernelCommandHandler<Microsoft-DotNet-Interactive-Commands-RequestCompletions>-HandleAsync>d__24")]
private sealed virtual override Task Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.RequestCompletions>.HandleAsync(RequestCompletions command, KernelInvocationContext context);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.CSharp.CSharpKernel/<GetCompletionList>d__25")]
private Task`1<IEnumerable`1<CompletionItem>> GetCompletionList(string code, int cursorPosition, CancellationToken contextCancellationToken);
    internal DiagnosticsProduced GetDiagnosticsProduced(KernelCommand command, ImmutableArray`1<Diagnostic> diagnostics);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.CSharp.CSharpKernel/<Microsoft-DotNet-Interactive-IKernelCommandHandler<Microsoft-DotNet-Interactive-Commands-RequestDiagnostics>-HandleAsync>d__27")]
private sealed virtual override Task Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.RequestDiagnostics>.HandleAsync(RequestDiagnostics command, KernelInvocationContext context);
    private bool get_HasReturnValue();
    public void AddAssemblyReferences(IEnumerable`1<string> assemblyPaths);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0();
    [CompilerGeneratedAttribute]
private void <RunAsync>g__UpdateScriptOptionsIfWorkingDirectoryChanged|23_0();
}
[ExtensionAttribute]
public static class Microsoft.DotNet.Interactive.CSharp.CSharpKernelExtensions : object {
    [ExtensionAttribute]
public static CSharpKernel UseKernelHelpers(CSharpKernel kernel);
}
[ExtensionAttribute]
internal static class Microsoft.DotNet.Interactive.CSharp.EnumerableExtensions : object {
    [ExtensionAttribute]
public static IOrderedEnumerable`1<T> OrderBy(IEnumerable`1<T> source, Comparison`1<T> compare);
}
internal class Microsoft.DotNet.Interactive.CSharp.InteractiveWorkspace : Workspace {
    private ProjectId _previousSubmissionProjectId;
    private ProjectId _workingProjectId;
    private CompositeDisposable _disposables;
    private int _submissionCount;
    private CSharpParseOptions _parseOptions;
    private Compilation _currentCompilation;
    private DocumentId _workingDocumentId;
    private IReadOnlyCollection`1<MetadataReference> _referenceAssemblies;
    private List`1<MetadataReference> _packageManagerReferences;
    private SemaphoreSlim _workspaceLock;
    private static string ResolveRefAssemblyPath();
    private static bool TryParseVersion(string versionString, Version& v);
    private static IReadOnlyCollection`1<MetadataReference> ResolveRefAssemblies();
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.CSharp.InteractiveWorkspace/<UpdateWorkspaceAsync>d__14")]
public Task UpdateWorkspaceAsync(ScriptState scriptState);
    private Solution RemoveWorkingProjectFromSolution(Solution solution);
    private IReadOnlyCollection`1<MetadataReference> GetReferenceSet(Compilation compilation);
    private void AddNewWorkingProjectToSolution(Compilation previousCompilation, ProjectId projectReferenceProjectId);
    private Solution CreateProjectAndAddToSolution(ProjectId projectId, string assemblyName, CompilationOptions compilationOptions, Solution solution, ProjectId projectReferenceProjectId, IEnumerable`1<MetadataReference> metadataReferences);
    private ProjectId AddProjectWithPreviousSubmissionToSolution(Compilation compilation, string code, ProjectId projectId, ProjectId projectReferenceProjectId);
    public Document ForkDocumentForLanguageServices(string code);
    public void AddPackageManagerReference(MetadataReference reference);
    protected virtual void Dispose(bool finalize);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0();
}
[ExtensionAttribute]
public static class Microsoft.DotNet.Interactive.CSharp.LanguageServiceExtensions : object {
    [ExtensionAttribute]
public static string ToMarkdownString(QuickInfoItem info);
}
[ExtensionAttribute]
internal static class Microsoft.DotNet.Interactive.CSharp.ScriptExecutionExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.CSharp.ScriptExecutionExtensions/<UntilCancelled>d__0")]
[ExtensionAttribute]
public static Task`1<ScriptState`1<object>> UntilCancelled(Task`1<ScriptState`1<object>> source, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class Microsoft.DotNet.Interactive.CSharp.SignatureHelp.CheckForStaticExtension : object {
    [ExtensionAttribute]
public static bool IsInStaticContext(SyntaxNode node);
    public static SyntaxTokenList GetModifiers(SyntaxNode member);
    [ExtensionAttribute]
public static bool IsFoundUnder(SyntaxNode node, Func`2<TParent, SyntaxNode> childGetter);
    [ExtensionAttribute]
public static TNode GetAncestor(SyntaxNode node);
    [ExtensionAttribute]
private static SyntaxNode GetParent(SyntaxNode node);
    [IteratorStateMachineAttribute("Microsoft.DotNet.Interactive.CSharp.SignatureHelp.CheckForStaticExtension/<GetAncestorsOrThis>d__5`1")]
[ExtensionAttribute]
public static IEnumerable`1<TNode> GetAncestorsOrThis(SyntaxNode node);
}
internal static class Microsoft.DotNet.Interactive.CSharp.SignatureHelp.DocumentationConverter : object {
    public static string ConvertDocumentation(string xmlDocumentation, string lineEnding);
    private static string TrimMultiLineString(string input, string lineEnding);
    private static string GetCref(string cref);
}
internal class Microsoft.DotNet.Interactive.CSharp.SignatureHelp.InvocationContext : object {
    [CompilerGeneratedAttribute]
private SemanticModel <SemanticModel>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private SyntaxNode <Receiver>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TypeInfo> <ArgumentTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SyntaxToken> <Separators>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInStaticContext>k__BackingField;
    public SemanticModel SemanticModel { get; }
    public int Position { get; }
    public SyntaxNode Receiver { get; }
    public IEnumerable`1<TypeInfo> ArgumentTypes { get; }
    public IEnumerable`1<SyntaxToken> Separators { get; }
    public bool IsInStaticContext { get; }
    public InvocationContext(SemanticModel semModel, int position, SyntaxNode receiver, ArgumentListSyntax argList, bool isStatic);
    public InvocationContext(SemanticModel semModel, int position, SyntaxNode receiver, AttributeArgumentListSyntax argList, bool isStatic);
    [CompilerGeneratedAttribute]
public SemanticModel get_SemanticModel();
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public SyntaxNode get_Receiver();
    [CompilerGeneratedAttribute]
public IEnumerable`1<TypeInfo> get_ArgumentTypes();
    [CompilerGeneratedAttribute]
public IEnumerable`1<SyntaxToken> get_Separators();
    [CompilerGeneratedAttribute]
public bool get_IsInStaticContext();
}
internal static class Microsoft.DotNet.Interactive.CSharp.SignatureHelp.SignatureHelpGenerator : object {
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.CSharp.SignatureHelp.SignatureHelpGenerator/<GenerateSignatureInformation>d__0")]
public static Task`1<SignatureHelpProduced> GenerateSignatureInformation(Document document, RequestSignatureHelp command, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.CSharp.SignatureHelp.SignatureHelpGenerator/<GetInvocation>d__1")]
private static Task`1<InvocationContext> GetInvocation(Document document, LinePosition linePosition, CancellationToken cancellationToken);
    private static int InvocationScore(IMethodSymbol symbol, IEnumerable`1<TypeInfo> types);
    private static SignatureInformation BuildSignature(IMethodSymbol symbol);
}
[ExtensionAttribute]
internal static class Microsoft.DotNet.Interactive.CSharp.TypeExtensions : object {
    [ExtensionAttribute]
public static void WriteCSharpDeclarationTo(Type type, TextWriter writer, bool excludeNamespace);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
