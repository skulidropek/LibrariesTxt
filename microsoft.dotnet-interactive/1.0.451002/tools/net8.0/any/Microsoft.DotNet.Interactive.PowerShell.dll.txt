internal class Microsoft.DotNet.Interactive.PowerShell.AuthResponse : object {
    [CompilerGeneratedAttribute]
private string <token_type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <scope>k__BackingField;
    [CompilerGeneratedAttribute]
private int <expires_in>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ext_expires_in>k__BackingField;
    [CompilerGeneratedAttribute]
private int <not_before>k__BackingField;
    [CompilerGeneratedAttribute]
private string <resource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <access_token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <refresh_token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <id_token>k__BackingField;
    public string token_type { get; public set; }
    public string scope { get; public set; }
    [JsonConverterAttribute("Microsoft.DotNet.Interactive.PowerShell.IntToStringConverter")]
public int expires_in { get; public set; }
    [JsonConverterAttribute("Microsoft.DotNet.Interactive.PowerShell.IntToStringConverter")]
public int ext_expires_in { get; public set; }
    [JsonConverterAttribute("Microsoft.DotNet.Interactive.PowerShell.IntToStringConverter")]
public int not_before { get; public set; }
    public string resource { get; public set; }
    public string access_token { get; public set; }
    public string refresh_token { get; public set; }
    public string id_token { get; public set; }
    [CompilerGeneratedAttribute]
public string get_token_type();
    [CompilerGeneratedAttribute]
public void set_token_type(string value);
    [CompilerGeneratedAttribute]
public string get_scope();
    [CompilerGeneratedAttribute]
public void set_scope(string value);
    [CompilerGeneratedAttribute]
public int get_expires_in();
    [CompilerGeneratedAttribute]
public void set_expires_in(int value);
    [CompilerGeneratedAttribute]
public int get_ext_expires_in();
    [CompilerGeneratedAttribute]
public void set_ext_expires_in(int value);
    [CompilerGeneratedAttribute]
public int get_not_before();
    [CompilerGeneratedAttribute]
public void set_not_before(int value);
    [CompilerGeneratedAttribute]
public string get_resource();
    [CompilerGeneratedAttribute]
public void set_resource(string value);
    [CompilerGeneratedAttribute]
public string get_access_token();
    [CompilerGeneratedAttribute]
public void set_access_token(string value);
    [CompilerGeneratedAttribute]
public string get_refresh_token();
    [CompilerGeneratedAttribute]
public void set_refresh_token(string value);
    [CompilerGeneratedAttribute]
public string get_id_token();
    [CompilerGeneratedAttribute]
public void set_id_token(string value);
}
internal class Microsoft.DotNet.Interactive.PowerShell.AuthResponsePending : object {
    [CompilerGeneratedAttribute]
private string <error>k__BackingField;
    [CompilerGeneratedAttribute]
private string <error_description>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <error_codes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <trace_id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <correlation_id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <error_uri>k__BackingField;
    public string error { get; public set; }
    public string error_description { get; public set; }
    public Int32[] error_codes { get; public set; }
    public string timestamp { get; public set; }
    public string trace_id { get; public set; }
    public string correlation_id { get; public set; }
    public string error_uri { get; public set; }
    [CompilerGeneratedAttribute]
public string get_error();
    [CompilerGeneratedAttribute]
public void set_error(string value);
    [CompilerGeneratedAttribute]
public string get_error_description();
    [CompilerGeneratedAttribute]
public void set_error_description(string value);
    [CompilerGeneratedAttribute]
public Int32[] get_error_codes();
    [CompilerGeneratedAttribute]
public void set_error_codes(Int32[] value);
    [CompilerGeneratedAttribute]
public string get_timestamp();
    [CompilerGeneratedAttribute]
public void set_timestamp(string value);
    [CompilerGeneratedAttribute]
public string get_trace_id();
    [CompilerGeneratedAttribute]
public void set_trace_id(string value);
    [CompilerGeneratedAttribute]
public string get_correlation_id();
    [CompilerGeneratedAttribute]
public void set_correlation_id(string value);
    [CompilerGeneratedAttribute]
public string get_error_uri();
    [CompilerGeneratedAttribute]
public void set_error_uri(string value);
}
internal class Microsoft.DotNet.Interactive.PowerShell.AzShellConnectionUtils : object {
    private static string ClientId;
    private static string UserAgent;
    private static string CommandToStartPwsh;
    private static string CommandToSetPrompt;
    private static string PwshPrompt;
    private static Byte[] _exitSessionCommand;
    private static string _cachedAccessToken;
    private static string _cachedRefreshToken;
    private static string _cachedTenantId;
    private HttpClient _httpClient;
    private ClientWebSocket _socket;
    private Pipe _pipe;
    private Timer _tokenRenewTimer;
    private string _requestedTenantId;
    private bool _sessionInitialized;
    private TaskCompletionSource`1<object> _codeExecutedTaskSource;
    internal AzShellConnectionUtils(string tenantId);
    internal AzShellConnectionUtils(bool reset);
    private static AzShellConnectionUtils();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.PowerShell.AzShellConnectionUtils/<ConnectAndInitializeAzShell>d__19")]
internal Task`1<bool> ConnectAndInitializeAzShell(int terminalWidth, int terminalHeight);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.PowerShell.AzShellConnectionUtils/<ExitSession>d__20")]
internal Task ExitSession();
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.PowerShell.AzShellConnectionUtils/<SendCommand>d__21")]
internal Task SendCommand(string command, bool waitForExecutionCompletion);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.PowerShell.AzShellConnectionUtils/<SendCommand>d__22")]
private Task SendCommand(Byte[] command, bool waitForExecutionCompletion);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.PowerShell.AzShellConnectionUtils/<OnTimedEvent>d__23")]
private void OnTimedEvent(object source, ElapsedEventArgs e);
    private void ResetState();
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.PowerShell.AzShellConnectionUtils/<FillPipeAsync>d__25")]
private Task FillPipeAsync(ClientWebSocket socket, PipeWriter writer);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.PowerShell.AzShellConnectionUtils/<ReadPipeAsync>d__26")]
private Task ReadPipeAsync(PipeReader reader);
    private bool ProcessMessageDuringSession(string line, bool noRemainingBytes);
    private void ProcessMessageAtSessionInitialization(string line);
    private string GetUtf8String(ReadOnlySequence`1<byte> buffer);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.PowerShell.AzShellConnectionUtils/<RefreshToken>d__30")]
private Task RefreshToken();
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.PowerShell.AzShellConnectionUtils/<RequestTerminal>d__31")]
private Task`1<string> RequestTerminal(string uri, int width, int height);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.PowerShell.AzShellConnectionUtils/<GetTenantId>d__32")]
private Task`1<string> GetTenantId();
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.PowerShell.AzShellConnectionUtils/<ReadCloudShellUserSettings>d__33")]
private Task`1<CloudShellSettings> ReadCloudShellUserSettings();
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.PowerShell.AzShellConnectionUtils/<RequestCloudShell>d__34")]
private Task`1<string> RequestCloudShell();
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.PowerShell.AzShellConnectionUtils/<GetDeviceCode>d__35")]
private Task GetDeviceCode();
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.PowerShell.AzShellConnectionUtils/<SendWebRequest>d__36")]
private Task`1<HttpResponseMessage> SendWebRequest(string resourceUri, string body, string contentType, string token, HttpMethod method);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.PowerShell.AzShellConnectionUtils/<ThrowForFailedRequest>d__37")]
private Task ThrowForFailedRequest(HttpResponseMessage response, string parentErrorTemplate);
}
internal class Microsoft.DotNet.Interactive.PowerShell.AzureTenant : object {
    [CompilerGeneratedAttribute]
private string <id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <tenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <countryCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <displayName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <domains>k__BackingField;
    public string id { get; public set; }
    public string tenantId { get; public set; }
    public string countryCode { get; public set; }
    public string displayName { get; public set; }
    public String[] domains { get; public set; }
    [CompilerGeneratedAttribute]
public string get_id();
    [CompilerGeneratedAttribute]
public void set_id(string value);
    [CompilerGeneratedAttribute]
public string get_tenantId();
    [CompilerGeneratedAttribute]
public void set_tenantId(string value);
    [CompilerGeneratedAttribute]
public string get_countryCode();
    [CompilerGeneratedAttribute]
public void set_countryCode(string value);
    [CompilerGeneratedAttribute]
public string get_displayName();
    [CompilerGeneratedAttribute]
public void set_displayName(string value);
    [CompilerGeneratedAttribute]
public String[] get_domains();
    [CompilerGeneratedAttribute]
public void set_domains(String[] value);
}
internal class Microsoft.DotNet.Interactive.PowerShell.AzureTenantResponse : object {
    [CompilerGeneratedAttribute]
private AzureTenant[] <value>k__BackingField;
    public AzureTenant[] value { get; public set; }
    [CompilerGeneratedAttribute]
public AzureTenant[] get_value();
    [CompilerGeneratedAttribute]
public void set_value(AzureTenant[] value);
}
internal class Microsoft.DotNet.Interactive.PowerShell.CloudShellResponse : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <properties>k__BackingField;
    public Dictionary`2<string, string> properties { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_properties();
    [CompilerGeneratedAttribute]
public void set_properties(Dictionary`2<string, string> value);
}
internal class Microsoft.DotNet.Interactive.PowerShell.CloudShellSettingProperties : object {
    [CompilerGeneratedAttribute]
private string <preferredLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private StorageProfile <storageProfile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <preferredShellType>k__BackingField;
    public string preferredLocation { get; public set; }
    public StorageProfile storageProfile { get; public set; }
    public string preferredShellType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_preferredLocation();
    [CompilerGeneratedAttribute]
public void set_preferredLocation(string value);
    [CompilerGeneratedAttribute]
public StorageProfile get_storageProfile();
    [CompilerGeneratedAttribute]
public void set_storageProfile(StorageProfile value);
    [CompilerGeneratedAttribute]
public string get_preferredShellType();
    [CompilerGeneratedAttribute]
public void set_preferredShellType(string value);
}
internal class Microsoft.DotNet.Interactive.PowerShell.CloudShellSettings : object {
    [CompilerGeneratedAttribute]
private CloudShellSettingProperties <properties>k__BackingField;
    public CloudShellSettingProperties properties { get; public set; }
    [CompilerGeneratedAttribute]
public CloudShellSettingProperties get_properties();
    [CompilerGeneratedAttribute]
public void set_properties(CloudShellSettingProperties value);
}
internal class Microsoft.DotNet.Interactive.PowerShell.CloudShellTerminal : object {
    [CompilerGeneratedAttribute]
private string <id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <socketUri>k__BackingField;
    [CompilerGeneratedAttribute]
private int <idleTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <tokenUpdated>k__BackingField;
    [CompilerGeneratedAttribute]
private string <rootDirectory>k__BackingField;
    public string id { get; public set; }
    public string socketUri { get; public set; }
    [JsonConverterAttribute("Microsoft.DotNet.Interactive.PowerShell.IntToStringConverter")]
public int idleTimeout { get; public set; }
    public bool tokenUpdated { get; public set; }
    public string rootDirectory { get; public set; }
    [CompilerGeneratedAttribute]
public string get_id();
    [CompilerGeneratedAttribute]
public void set_id(string value);
    [CompilerGeneratedAttribute]
public string get_socketUri();
    [CompilerGeneratedAttribute]
public void set_socketUri(string value);
    [CompilerGeneratedAttribute]
public int get_idleTimeout();
    [CompilerGeneratedAttribute]
public void set_idleTimeout(int value);
    [CompilerGeneratedAttribute]
public bool get_tokenUpdated();
    [CompilerGeneratedAttribute]
public void set_tokenUpdated(bool value);
    [CompilerGeneratedAttribute]
public string get_rootDirectory();
    [CompilerGeneratedAttribute]
public void set_rootDirectory(string value);
}
[CmdletAttribute("Enter", "AzShell")]
public class Microsoft.DotNet.Interactive.PowerShell.Commands.EnterAzShellCommand : PSCmdlet {
    private static string TenantIdSetName;
    private static string DefaultSetName;
    [CompilerGeneratedAttribute]
private Guid <TenantId>k__BackingField;
    [ParameterAttribute]
public SwitchParameter Reset;
    [ParameterAttribute]
public Guid TenantId { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(Guid value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Out", "Display")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.DotNet.Interactive.PowerShell.Commands.OutDisplayCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private object <InputObject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomMimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <PassThru>k__BackingField;
    [ParameterAttribute]
[AllowNullAttribute]
public object InputObject { get; public set; }
    [ParameterAttribute]
[ValidateSetAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string MimeType { get; public set; }
    [ParameterAttribute]
public string CustomMimeType { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [CompilerGeneratedAttribute]
public object get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(object value);
    [CompilerGeneratedAttribute]
public string get_MimeType();
    [CompilerGeneratedAttribute]
public void set_MimeType(string value);
    [CompilerGeneratedAttribute]
public string get_CustomMimeType();
    [CompilerGeneratedAttribute]
public void set_CustomMimeType(string value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_PassThru();
    [CompilerGeneratedAttribute]
public void set_PassThru(SwitchParameter value);
    protected virtual void ProcessRecord();
}
internal class Microsoft.DotNet.Interactive.PowerShell.DeviceCodeResponse : object {
    [CompilerGeneratedAttribute]
private string <user_code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <device_code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <verification_url>k__BackingField;
    [CompilerGeneratedAttribute]
private int <expires_in>k__BackingField;
    [CompilerGeneratedAttribute]
private int <interval>k__BackingField;
    [CompilerGeneratedAttribute]
private string <message>k__BackingField;
    public string user_code { get; public set; }
    public string device_code { get; public set; }
    public string verification_url { get; public set; }
    [JsonConverterAttribute("Microsoft.DotNet.Interactive.PowerShell.IntToStringConverter")]
public int expires_in { get; public set; }
    [JsonConverterAttribute("Microsoft.DotNet.Interactive.PowerShell.IntToStringConverter")]
public int interval { get; public set; }
    public string message { get; public set; }
    [CompilerGeneratedAttribute]
public string get_user_code();
    [CompilerGeneratedAttribute]
public void set_user_code(string value);
    [CompilerGeneratedAttribute]
public string get_device_code();
    [CompilerGeneratedAttribute]
public void set_device_code(string value);
    [CompilerGeneratedAttribute]
public string get_verification_url();
    [CompilerGeneratedAttribute]
public void set_verification_url(string value);
    [CompilerGeneratedAttribute]
public int get_expires_in();
    [CompilerGeneratedAttribute]
public void set_expires_in(int value);
    [CompilerGeneratedAttribute]
public int get_interval();
    [CompilerGeneratedAttribute]
public void set_interval(int value);
    [CompilerGeneratedAttribute]
public string get_message();
    [CompilerGeneratedAttribute]
public void set_message(string value);
}
internal static class Microsoft.DotNet.Interactive.PowerShell.DollarProfileHelper : object {
    private static string _profileName;
    private static string _configPath;
    [CompilerGeneratedAttribute]
private static string <AllUsersCurrentHost>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <CurrentUserCurrentHost>k__BackingField;
    internal static string AllUsersCurrentHost { get; }
    internal static string CurrentUserCurrentHost { get; }
    private static DollarProfileHelper();
    [CompilerGeneratedAttribute]
internal static string get_AllUsersCurrentHost();
    [CompilerGeneratedAttribute]
internal static string get_CurrentUserCurrentHost();
    private static string GetFullProfileFilePath(bool forCurrentUser);
    public static PSObject GetProfileValue();
}
internal class Microsoft.DotNet.Interactive.PowerShell.FailedRequest : object {
    [CompilerGeneratedAttribute]
private FailedRequestError <error>k__BackingField;
    public FailedRequestError error { get; public set; }
    [CompilerGeneratedAttribute]
public FailedRequestError get_error();
    [CompilerGeneratedAttribute]
public void set_error(FailedRequestError value);
}
internal class Microsoft.DotNet.Interactive.PowerShell.FailedRequestError : object {
    [CompilerGeneratedAttribute]
private string <code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <message>k__BackingField;
    public string code { get; public set; }
    public string message { get; public set; }
    [CompilerGeneratedAttribute]
public string get_code();
    [CompilerGeneratedAttribute]
public void set_code(string value);
    [CompilerGeneratedAttribute]
public string get_message();
    [CompilerGeneratedAttribute]
public void set_message(string value);
}
internal class Microsoft.DotNet.Interactive.PowerShell.Host.ConsoleColorProxy : object {
    private PSKernelHostUserInterface _ui;
    public ConsoleColor FormatAccentColor { get; public set; }
    public ConsoleColor ErrorAccentColor { get; public set; }
    public ConsoleColor ErrorForegroundColor { get; public set; }
    public ConsoleColor ErrorBackgroundColor { get; public set; }
    public ConsoleColor WarningForegroundColor { get; public set; }
    public ConsoleColor WarningBackgroundColor { get; public set; }
    public ConsoleColor DebugForegroundColor { get; public set; }
    public ConsoleColor DebugBackgroundColor { get; public set; }
    public ConsoleColor VerboseForegroundColor { get; public set; }
    public ConsoleColor VerboseBackgroundColor { get; public set; }
    public ConsoleColor ProgressForegroundColor { get; public set; }
    public ConsoleColor ProgressBackgroundColor { get; public set; }
    public ConsoleColorProxy(PSKernelHostUserInterface ui);
    public ConsoleColor get_FormatAccentColor();
    public void set_FormatAccentColor(ConsoleColor value);
    public ConsoleColor get_ErrorAccentColor();
    public void set_ErrorAccentColor(ConsoleColor value);
    public ConsoleColor get_ErrorForegroundColor();
    public void set_ErrorForegroundColor(ConsoleColor value);
    public ConsoleColor get_ErrorBackgroundColor();
    public void set_ErrorBackgroundColor(ConsoleColor value);
    public ConsoleColor get_WarningForegroundColor();
    public void set_WarningForegroundColor(ConsoleColor value);
    public ConsoleColor get_WarningBackgroundColor();
    public void set_WarningBackgroundColor(ConsoleColor value);
    public ConsoleColor get_DebugForegroundColor();
    public void set_DebugForegroundColor(ConsoleColor value);
    public ConsoleColor get_DebugBackgroundColor();
    public void set_DebugBackgroundColor(ConsoleColor value);
    public ConsoleColor get_VerboseForegroundColor();
    public void set_VerboseForegroundColor(ConsoleColor value);
    public ConsoleColor get_VerboseBackgroundColor();
    public void set_VerboseBackgroundColor(ConsoleColor value);
    public ConsoleColor get_ProgressForegroundColor();
    public void set_ProgressForegroundColor(ConsoleColor value);
    public ConsoleColor get_ProgressBackgroundColor();
    public void set_ProgressBackgroundColor(ConsoleColor value);
}
internal class Microsoft.DotNet.Interactive.PowerShell.Host.Progress.PendingProgress : object {
    private static int maxNodeCount;
    private List`1<ProgressNode> _topLevelNodes;
    private int _nodeCount;
    internal void Update(long sourceId, ProgressRecord record);
    private void EvictNode();
    private void RemoveNode(List`1<ProgressNode> nodes, int indexToRemove);
    private void RemoveNodeAndPromoteChildren(List`1<ProgressNode> nodes, int indexToRemove);
    private void AddNode(List`1<ProgressNode> nodes, ProgressNode nodeToAdd);
    private ProgressNode FindOldestLeafmostNodeHelper(List`1<ProgressNode> treeToSearch, List`1& listWhereFound, Int32& indexWhereFound);
    private ProgressNode FindOldestLeafmostNode(List`1& listWhereFound, Int32& indexWhereFound);
    private ProgressNode FindNodeById(long sourceId, int activityId);
    private ProgressNode FindNodeById(long sourceId, int activityId, List`1& listWhereFound, Int32& indexWhereFound);
    private ProgressNode FindOldestNodeOfGivenStyle(List`1<ProgressNode> nodes, int oldestSoFar, RenderStyle style);
    private void AgeNodesAndResetStyle();
    internal List`1<string> Render(int maxWidth, int maxHeight, PSKernelHostUserInterface ui);
    private void RenderHelper(List`1<string> strings, List`1<ProgressNode> nodes, int indentation, int maxWidth, PSHostRawUserInterface rawUI);
    private int TallyHeight(PSHostRawUserInterface rawUi, int maxHeight, int maxWidth);
    private bool CompressToFitHelper(PSHostRawUserInterface rawUi, int maxHeight, int maxWidth, Int32& nodesCompressed, RenderStyle priorStyle, RenderStyle newStyle);
    private int CompressToFit(PSHostRawUserInterface rawUi, int maxHeight, int maxWidth);
}
internal class Microsoft.DotNet.Interactive.PowerShell.Host.Progress.ProgressNode : ProgressRecord {
    internal List`1<ProgressNode> Children;
    [CompilerGeneratedAttribute]
private int <Age>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderStyle <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SourceId>k__BackingField;
    internal int Age { get; internal set; }
    internal RenderStyle Style { get; internal set; }
    internal long SourceId { get; internal set; }
    private int LinesRequiredInCompactStyle { get; }
    internal ProgressNode(long sourceId, ProgressRecord record);
    [CompilerGeneratedAttribute]
internal int get_Age();
    [CompilerGeneratedAttribute]
internal void set_Age(int value);
    [CompilerGeneratedAttribute]
internal RenderStyle get_Style();
    [CompilerGeneratedAttribute]
internal void set_Style(RenderStyle value);
    [CompilerGeneratedAttribute]
internal long get_SourceId();
    [CompilerGeneratedAttribute]
internal void set_SourceId(long value);
    internal void Render(List`1<string> strCollection, int indentation, int maxWidth, PSHostRawUserInterface rawUI);
    private void RenderFull(List`1<string> strCollection, int indentation, int maxWidth, PSHostRawUserInterface rawUI, bool isFullPlus);
    private static void RenderFullDescription(string description, string indent, int maxWidth, PSHostRawUserInterface rawUi, List`1<string> strCollection, bool isFullPlus);
    private void RenderCompact(List`1<string> strCollection, int indentation, int maxWidth, PSHostRawUserInterface rawUI);
    private void RenderMinimal(List`1<string> strCollection, int indentation, int maxWidth, PSHostRawUserInterface rawUI);
    internal int LinesRequiredMethod(PSHostRawUserInterface rawUi, int maxWidth);
    private int LinesRequiredInFullStyleMethod(PSHostRawUserInterface rawUi, int maxWidth, bool isFullPlus);
    private int get_LinesRequiredInCompactStyle();
}
internal class Microsoft.DotNet.Interactive.PowerShell.Host.Progress.ProgressPane : object {
    private DisplayedValue _displayValue;
    private PSKernelHostUserInterface _ui;
    internal ProgressPane(PSKernelHostUserInterface ui);
    internal void Hide();
    internal void Show(PendingProgress pendingProgress);
}
internal enum Microsoft.DotNet.Interactive.PowerShell.Host.Progress.RenderStyle : Enum {
    public int value__;
    public static RenderStyle Invisible;
    public static RenderStyle Minimal;
    public static RenderStyle Compact;
    public static RenderStyle Full;
    public static RenderStyle FullPlus;
}
public class Microsoft.DotNet.Interactive.PowerShell.Host.PSKernelHost : PSHost {
    private PowerShellKernel _powerShell;
    private static string HostName;
    private PSKernelHostUserInterface _ui;
    [CompilerGeneratedAttribute]
private Guid <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private PSObject <PrivateData>k__BackingField;
    public string Name { get; }
    public Guid InstanceId { get; }
    public Version Version { get; }
    public PSHostUserInterface UI { get; }
    public PSObject PrivateData { get; }
    public CultureInfo CurrentCulture { get; }
    public CultureInfo CurrentUICulture { get; }
    public bool IsRunspacePushed { get; }
    public Runspace Runspace { get; }
    internal PSKernelHost(PowerShellKernel powerShell);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual Guid get_InstanceId();
    [CompilerGeneratedAttribute]
public virtual Version get_Version();
    public virtual PSHostUserInterface get_UI();
    [CompilerGeneratedAttribute]
public virtual PSObject get_PrivateData();
    public virtual CultureInfo get_CurrentCulture();
    public virtual CultureInfo get_CurrentUICulture();
    public virtual void EnterNestedPrompt();
    public virtual void ExitNestedPrompt();
    public virtual void NotifyBeginApplication();
    public virtual void NotifyEndApplication();
    public virtual void SetShouldExit(int exitCode);
    public sealed virtual bool get_IsRunspacePushed();
    public sealed virtual Runspace get_Runspace();
    public sealed virtual void PopRunspace();
    public sealed virtual void PushRunspace(Runspace runspace);
}
public class Microsoft.DotNet.Interactive.PowerShell.Host.PSKernelHostRawUserInterface : PSHostRawUserInterface {
    private Size _bufferSize;
    private ConsoleColor _foregroundColor;
    private ConsoleColor _backgroundColor;
    private static string NotSupportedFeatureMsg;
    public ConsoleColor ForegroundColor { get; public set; }
    public ConsoleColor BackgroundColor { get; public set; }
    public Size BufferSize { get; public set; }
    public Size WindowSize { get; public set; }
    public Size MaxPhysicalWindowSize { get; }
    public Size MaxWindowSize { get; }
    public int CursorSize { get; public set; }
    public Coordinates CursorPosition { get; public set; }
    public bool KeyAvailable { get; }
    public Coordinates WindowPosition { get; public set; }
    public string WindowTitle { get; public set; }
    public virtual ConsoleColor get_ForegroundColor();
    public virtual void set_ForegroundColor(ConsoleColor value);
    public virtual ConsoleColor get_BackgroundColor();
    public virtual void set_BackgroundColor(ConsoleColor value);
    public virtual Size get_BufferSize();
    public virtual void set_BufferSize(Size value);
    public virtual Size get_WindowSize();
    public virtual void set_WindowSize(Size value);
    public virtual Size get_MaxPhysicalWindowSize();
    public virtual Size get_MaxWindowSize();
    public virtual int LengthInBufferCells(string source, int offset);
    public virtual int LengthInBufferCells(string source);
    public virtual int LengthInBufferCells(char c);
    public virtual int get_CursorSize();
    public virtual void set_CursorSize(int value);
    public virtual Coordinates get_CursorPosition();
    public virtual void set_CursorPosition(Coordinates value);
    public virtual bool get_KeyAvailable();
    public virtual Coordinates get_WindowPosition();
    public virtual void set_WindowPosition(Coordinates value);
    public virtual string get_WindowTitle();
    public virtual void set_WindowTitle(string value);
    public virtual void FlushInputBuffer();
    public virtual BufferCell[0...,0...] GetBufferContents(Rectangle rectangle);
    public virtual KeyInfo ReadKey(ReadKeyOptions options);
    public virtual void ScrollBufferContents(Rectangle source, Coordinates destination, Rectangle clip, BufferCell fill);
    public virtual void SetBufferContents(Coordinates origin, BufferCell[0...,0...] contents);
    public virtual void SetBufferContents(Rectangle rectangle, BufferCell fill);
}
public class Microsoft.DotNet.Interactive.PowerShell.Host.PSKernelHostUserInterface : PSHostUserInterface {
    private PowerShellKernel _powerShellKernel;
    private PSKernelHostRawUserInterface _rawUI;
    private object _instanceLock;
    [CompilerGeneratedAttribute]
private ConsoleColor <FormatAccentColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <ErrorAccentColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <ErrorForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <ErrorBackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <WarningForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <WarningBackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <DebugForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <DebugBackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <VerboseForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <VerboseBackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <ProgressForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <ProgressBackgroundColor>k__BackingField;
    private static int UpdateTimerThreshold;
    private static int ToRender;
    private static int ToNotRender;
    private Timer _progPaneUpdateTimer;
    private ProgressPane _progPane;
    private PendingProgress _pendingProgress;
    private int progPaneUpdateFlag;
    private static char PromptCommandPrefix;
    public PSHostRawUserInterface RawUI { get; }
    public bool SupportsVirtualTerminal { get; }
    public ConsoleColor FormatAccentColor { get; public set; }
    public ConsoleColor ErrorAccentColor { get; public set; }
    public ConsoleColor ErrorForegroundColor { get; public set; }
    public ConsoleColor ErrorBackgroundColor { get; public set; }
    public ConsoleColor WarningForegroundColor { get; public set; }
    public ConsoleColor WarningBackgroundColor { get; public set; }
    public ConsoleColor DebugForegroundColor { get; public set; }
    public ConsoleColor DebugBackgroundColor { get; public set; }
    public ConsoleColor VerboseForegroundColor { get; public set; }
    public ConsoleColor VerboseBackgroundColor { get; public set; }
    public ConsoleColor ProgressForegroundColor { get; public set; }
    public ConsoleColor ProgressBackgroundColor { get; public set; }
    private ConsoleColor PromptColor { get; }
    private ConsoleColor DefaultPromptColor { get; }
    internal PSKernelHostUserInterface(PowerShellKernel powerShellKernel);
    public virtual PSHostRawUserInterface get_RawUI();
    public virtual bool get_SupportsVirtualTerminal();
    public virtual PSCredential PromptForCredential(string caption, string message, string userName, string targetName);
    public virtual PSCredential PromptForCredential(string caption, string message, string userName, string targetName, PSCredentialTypes allowedCredentialTypes, PSCredentialUIOptions options);
    private string ReadInput(string prompt);
    private PasswordString ReadPassword(string prompt);
    public virtual string ReadLine();
    public virtual SecureString ReadLineAsSecureString();
    public virtual void Write(ConsoleColor foregroundColor, ConsoleColor backgroundColor, string value);
    public virtual void Write(string value);
    public virtual void WriteLine();
    public virtual void WriteLine(ConsoleColor foregroundColor, ConsoleColor backgroundColor, string value);
    public virtual void WriteLine(string value);
    public virtual void WriteInformation(InformationRecord record);
    public virtual void WriteErrorLine(string value);
    public virtual void WriteDebugLine(string message);
    public virtual void WriteVerboseLine(string message);
    public virtual void WriteWarningLine(string message);
    [CompilerGeneratedAttribute]
public ConsoleColor get_FormatAccentColor();
    [CompilerGeneratedAttribute]
public void set_FormatAccentColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_ErrorAccentColor();
    [CompilerGeneratedAttribute]
public void set_ErrorAccentColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_ErrorForegroundColor();
    [CompilerGeneratedAttribute]
public void set_ErrorForegroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_ErrorBackgroundColor();
    [CompilerGeneratedAttribute]
public void set_ErrorBackgroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_WarningForegroundColor();
    [CompilerGeneratedAttribute]
public void set_WarningForegroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_WarningBackgroundColor();
    [CompilerGeneratedAttribute]
public void set_WarningBackgroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_DebugForegroundColor();
    [CompilerGeneratedAttribute]
public void set_DebugForegroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_DebugBackgroundColor();
    [CompilerGeneratedAttribute]
public void set_DebugBackgroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_VerboseForegroundColor();
    [CompilerGeneratedAttribute]
public void set_VerboseForegroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_VerboseBackgroundColor();
    [CompilerGeneratedAttribute]
public void set_VerboseBackgroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_ProgressForegroundColor();
    [CompilerGeneratedAttribute]
public void set_ProgressForegroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_ProgressBackgroundColor();
    [CompilerGeneratedAttribute]
public void set_ProgressBackgroundColor(ConsoleColor value);
    public virtual void WriteProgress(long sourceId, ProgressRecord record);
    internal void ResetProgress();
    private void ProgressPaneUpdateTimerElapsed(object sender);
    private ConsoleColor get_PromptColor();
    private ConsoleColor get_DefaultPromptColor();
    public virtual Dictionary`2<string, PSObject> Prompt(string caption, string message, Collection`1<FieldDescription> descriptions);
    private string PromptForSingleItem(Type fieldType, FieldDescription fieldDescription, string fieldPrompt, bool isListInput, Boolean& listInputDone, Object& convertedObj);
    private string PromptReadInput(FieldDescription fieldDescription, string fieldPrompt, bool isListInput, Boolean& listInputDone);
    private string PromptCommandMode(string input, FieldDescription desc, Boolean& inputDone);
    private bool PromptTryConvertTo(Type fieldType, string inputString, Object& convertedObj);
    public virtual int PromptForChoice(string caption, string message, Collection`1<ChoiceDescription> choices, int defaultChoice);
    public sealed virtual Collection`1<int> PromptForChoice(string caption, string message, Collection`1<ChoiceDescription> choices, IEnumerable`1<int> defaultChoices);
    internal static String[0...,0...] BuildHotkeysAndPlainLabels(Collection`1<ChoiceDescription> choices);
    private static int DetermineChoicePicked(string response, Collection`1<ChoiceDescription> choices, String[0...,0...] hotkeysAndPlainLabels);
    private void ShowChoiceHelp(Collection`1<ChoiceDescription> choices, String[0...,0...] hotkeysAndPlainLabels);
    private void WriteChoicePrompt(String[0...,0...] hotkeysAndPlainLabels, Dictionary`2<int, bool> defaultChoiceKeys, bool shouldEmulateForMultipleChoiceSelection);
    private void WriteChoiceHelper(string text, ConsoleColor fg, ConsoleColor bg, Int32& lineLen);
}
internal static class Microsoft.DotNet.Interactive.PowerShell.Host.StringUtil : object {
    private static int IndentCacheMax;
    private static String[] IndentCache;
    private static StringUtil();
    internal static string Format(string formatSpec, object arg);
    internal static string Format(string formatSpec, object arg1, object arg2);
    internal static string Format(string formatSpec, Object[] args);
    internal static string TruncateToBufferCellWidth(PSHostRawUserInterface rawUI, string toTruncate, int maxWidthInBufferCells);
    internal static string Padding(int countOfSpaces);
}
internal static class Microsoft.DotNet.Interactive.PowerShell.Host.VTColorUtils : object {
    internal static string EscapeCharacters;
    internal static string ResetColor;
    internal static string BoldColor;
    internal static ConsoleColor DefaultConsoleColor;
    private static String[] BackgroundColorMap;
    private static String[] ForegroundColorMap;
    private static VTColorUtils();
    private static bool IsValidColor(ConsoleColor color, Boolean& isDefaultColor);
    internal static string CombineColorSequences(ConsoleColor fg, ConsoleColor bg);
    internal static string CombineColorSequences(string fg, string bg);
    internal static string MapColorToEscapeSequence(ConsoleColor color, bool isBackground);
    [CompilerGeneratedAttribute]
internal static string <CombineColorSequences>g__ExtractCode|8_0(string s);
}
internal class Microsoft.DotNet.Interactive.PowerShell.IntToStringConverter : JsonConverter`1<int> {
    public virtual int Read(Utf8JsonReader& reader, Type type, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, int value, JsonSerializerOptions options);
}
[ExtensionAttribute]
internal static class Microsoft.DotNet.Interactive.PowerShell.PowerShellExtensions : object {
    private static PSInvocationSettings _settings;
    private static PowerShellExtensions();
    [ExtensionAttribute]
public static void InvokeAndClearCommands(PowerShell pwsh);
    [ExtensionAttribute]
internal static SecureString GetSecureStringPassword(PasswordString pwdString);
    [ExtensionAttribute]
internal static object Unwrap(PSObject psObj);
}
public class Microsoft.DotNet.Interactive.PowerShell.PowerShellKernel : Kernel {
    private static string PSTelemetryEnvName;
    private static string PSTelemetryChannel;
    private static string PSModulePathEnvName;
    internal static string DefaultKernelName;
    internal static string LanguageName;
    private static CmdletInfo _outDefaultCommand;
    private static PropertyInfo _writeStreamProperty;
    private static object _errorStreamValue;
    private static MethodInfo _addAccelerator;
    private PSKernelHost _psHost;
    private Lazy`1<PowerShell> _lazyPwsh;
    [CompilerGeneratedAttribute]
private Func`2<string, string> <ReadInput>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, PasswordString> <ReadPassword>k__BackingField;
    [CompilerGeneratedAttribute]
private AzShellConnectionUtils <AzShell>k__BackingField;
    private HashSet`1<string> _suppressedValueInfoNames;
    private PowerShell pwsh { get; }
    public Func`2<string, string> ReadInput { get; public set; }
    public Func`2<string, PasswordString> ReadPassword { get; public set; }
    internal AzShellConnectionUtils AzShell { get; internal set; }
    internal int DefaultRunspaceId { get; }
    private static PowerShellKernel();
    public PowerShellKernel(string name);
    private PowerShell get_pwsh();
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_ReadInput();
    [CompilerGeneratedAttribute]
public void set_ReadInput(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public Func`2<string, PasswordString> get_ReadPassword();
    [CompilerGeneratedAttribute]
public void set_ReadPassword(Func`2<string, PasswordString> value);
    [CompilerGeneratedAttribute]
internal AzShellConnectionUtils get_AzShell();
    [CompilerGeneratedAttribute]
internal void set_AzShell(AzShellConnectionUtils value);
    internal int get_DefaultRunspaceId();
    private PowerShell CreatePowerShell();
    public void AddModulePath(string modulePath);
    public void AddAccelerator(string name, Type type);
    public bool TryGetValue(string name, T& value);
    private sealed virtual override Task Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.RequestValueInfos>.HandleAsync(RequestValueInfos command, KernelInvocationContext context);
    private sealed virtual override Task Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.RequestValue>.HandleAsync(RequestValue command, KernelInvocationContext context);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.PowerShell.PowerShellKernel/<Microsoft-DotNet-Interactive-IKernelCommandHandler<Microsoft-DotNet-Interactive-Commands-SendValue>-HandleAsync>d__37")]
private sealed virtual override Task Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.SendValue>.HandleAsync(SendValue command, KernelInvocationContext context);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.PowerShell.PowerShellKernel/<Microsoft-DotNet-Interactive-IKernelCommandHandler<Microsoft-DotNet-Interactive-Commands-SubmitCode>-HandleAsync>d__38")]
private sealed virtual override Task Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.SubmitCode>.HandleAsync(SubmitCode submitCode, KernelInvocationContext context);
    private sealed virtual override Task Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.RequestCompletions>.HandleAsync(RequestCompletions requestCompletions, KernelInvocationContext context);
    private sealed virtual override Task Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.RequestDiagnostics>.HandleAsync(RequestDiagnostics requestDiagnostics, KernelInvocationContext context);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.PowerShell.PowerShellKernel/<RunSubmitCodeInAzShell>d__41")]
private Task RunSubmitCodeInAzShell(string code);
    private void RunSubmitCodeLocally(string code);
    private static bool IsCompleteSubmission(string code, ParseError[]& errors);
    private void ReportError(ErrorRecord error);
    private void ReportException(Exception e);
    private static Diagnostic ToDiagnostic(ParseError parseError);
    [CompilerGeneratedAttribute]
private Task <Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.SendValue>.HandleAsync>g__SetAsync|37_0(string name, object value, Type declaredType);
}
[ExtensionAttribute]
public static class Microsoft.DotNet.Interactive.PowerShell.PowerShellKernelExtensions : object {
    [ExtensionAttribute]
public static PowerShellKernel UseProfiles(PowerShellKernel kernel);
}
internal class Microsoft.DotNet.Interactive.PowerShell.StorageProfile : object {
    [CompilerGeneratedAttribute]
private string <storageAccountResourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <fileShareName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <diskSizeInGB>k__BackingField;
    public string storageAccountResourceId { get; public set; }
    public string fileShareName { get; public set; }
    public int diskSizeInGB { get; public set; }
    [CompilerGeneratedAttribute]
public string get_storageAccountResourceId();
    [CompilerGeneratedAttribute]
public void set_storageAccountResourceId(string value);
    [CompilerGeneratedAttribute]
public string get_fileShareName();
    [CompilerGeneratedAttribute]
public void set_fileShareName(string value);
    [CompilerGeneratedAttribute]
public int get_diskSizeInGB();
    [CompilerGeneratedAttribute]
public void set_diskSizeInGB(int value);
}
