public class Microsoft.DotNet.Interactive.Telemetry.BuildInfo : object {
    [CompilerGeneratedAttribute]
private string <AssemblyVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyInformationalVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    public string AssemblyVersion { get; public set; }
    public string BuildDate { get; public set; }
    public string AssemblyInformationalVersion { get; public set; }
    public string AssemblyName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AssemblyVersion();
    [CompilerGeneratedAttribute]
public void set_AssemblyVersion(string value);
    [CompilerGeneratedAttribute]
public string get_BuildDate();
    [CompilerGeneratedAttribute]
public void set_BuildDate(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyInformationalVersion();
    [CompilerGeneratedAttribute]
public void set_AssemblyInformationalVersion(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    public static BuildInfo GetBuildInfo(Assembly assembly);
}
internal class Microsoft.DotNet.Interactive.Telemetry.DockerContainerDetectorForTelemetry : object {
    public sealed virtual IsDockerContainerResult IsDockerContainer();
    private static bool ReadProcToDetectDockerInLinux();
}
public class Microsoft.DotNet.Interactive.Telemetry.FakeFirstTimeUseNoticeSentinel : object {
    [CompilerGeneratedAttribute]
private bool <SentinelExists>k__BackingField;
    public bool SentinelExists { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_SentinelExists();
    [CompilerGeneratedAttribute]
public void set_SentinelExists(bool value);
    public sealed virtual void CreateIfNotExists();
    public sealed virtual bool Exists();
}
public class Microsoft.DotNet.Interactive.Telemetry.FirstTimeUseNoticeSentinel : object {
    public static string SkipFirstTimeExperienceEnvironmentVariableName;
    private string _sentinel;
    private string _folderPath;
    private Func`2<string, bool> _fileExists;
    private Func`2<string, bool> _directoryExists;
    private Action`1<string> _createDirectory;
    private Action`1<string> _createEmptyFile;
    private string SentinelPath { get; }
    public FirstTimeUseNoticeSentinel(string productVersion);
    public FirstTimeUseNoticeSentinel(string productVersion, string folderPath, Func`2<string, bool> fileExists, Func`2<string, bool> directoryExists, Action`1<string> createDirectory, Action`1<string> createEmptyFile);
    private string get_SentinelPath();
    public sealed virtual bool Exists();
    public sealed virtual void CreateIfNotExists();
}
public interface Microsoft.DotNet.Interactive.Telemetry.IDockerContainerDetector {
    public abstract virtual IsDockerContainerResult IsDockerContainer();
}
public interface Microsoft.DotNet.Interactive.Telemetry.IFirstTimeUseNoticeSentinel {
    public abstract virtual bool Exists();
    public abstract virtual void CreateIfNotExists();
}
public enum Microsoft.DotNet.Interactive.Telemetry.IsDockerContainerResult : Enum {
    public int value__;
    public static IsDockerContainerResult True;
    public static IsDockerContainerResult False;
    public static IsDockerContainerResult Unknown;
}
public interface Microsoft.DotNet.Interactive.Telemetry.ITelemetrySender {
    public bool Enabled { get; }
    public abstract virtual bool get_Enabled();
    public abstract virtual void TrackEvent(string eventName, IDictionary`2<string, string> properties, IDictionary`2<string, double> measurements);
}
public interface Microsoft.DotNet.Interactive.Telemetry.IUserLevelCacheWriter {
    public abstract virtual string RunWithCache(string cacheKey, Func`1<string> getValueToCache);
}
internal static class Microsoft.DotNet.Interactive.Telemetry.MacAddressGetter : object {
    private static string InvalidMacAddress;
    private static string MacRegex;
    private static string ZeroRegex;
    private static int ErrorFileNotFound;
    public static string GetMacAddress();
    private static string GetMacAddressCore();
    private static string ParseMACAddress(string shelloutput);
    private static string GetIpCommandOutput();
    private static string GetShellOutMacAddressOutput();
    private static string GetMacAddressByNetworkInterface();
    private static List`1<string> GetMacAddressesByNetworkInterface();
}
public class Microsoft.DotNet.Interactive.Telemetry.NothingUserLevelCacheWriter : object {
    public sealed virtual string RunWithCache(string cacheKey, Func`1<string> getValueToCache);
}
internal static class Microsoft.DotNet.Interactive.Telemetry.Paths : object {
    private static string DotnetHomeVariableName;
    private static string DotnetProfileDirectoryName;
    private static string ToolsShimFolderName;
    [CompilerGeneratedAttribute]
private static string <DotnetToolsPath>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <UserProfile>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <NugetCache>k__BackingField;
    public static string InstallDirectory;
    public static string DotnetUserProfileFolderPath { get; }
    public static string DotnetHomePath { get; }
    public static string DotnetToolsPath { get; }
    public static string UserProfile { get; }
    public static string NugetCache { get; }
    private static Paths();
    public static string get_DotnetUserProfileFolderPath();
    public static string get_DotnetHomePath();
    [CompilerGeneratedAttribute]
public static string get_DotnetToolsPath();
    [CompilerGeneratedAttribute]
public static string get_UserProfile();
    [CompilerGeneratedAttribute]
public static string get_NugetCache();
}
[ExtensionAttribute]
internal static class Microsoft.DotNet.Interactive.Telemetry.ProcessStartInfoExtensions : object {
    [ExtensionAttribute]
public static int ExecuteAndCaptureOutput(ProcessStartInfo startInfo, String& stdOut, String& stdErr);
}
[ExtensionAttribute]
public static class Microsoft.DotNet.Interactive.Telemetry.Sha256Hasher : object {
    [ExtensionAttribute]
public static string ToSha256Hash(string text);
    [ExtensionAttribute]
public static string ToSha256HashWithNormalizedCasing(string text);
    private static string HashInFormat(SHA256 sha256, string text);
}
public class Microsoft.DotNet.Interactive.Telemetry.StartupTelemetryEventBuilder : object {
    private Func`2<string, string> _hash;
    private HashSet`1<string> _clearTextProperties;
    private static CommandRule[] Rules { get; }
    public StartupTelemetryEventBuilder(Func`2<string, string> hash);
    public IEnumerable`1<TelemetryEvent> GetTelemetryEventsFrom(ParseResult parseResult);
    private TelemetryEvent CreateEntry(IEnumerable`1<KeyValuePair`2<string, string>> entryItems);
    private static CommandRuleItem Option(string option, String[] values, string entryKey);
    private static CommandRuleItem Arg(string value, TokenType type, string entryKey, bool isOptional);
    private static CommandRuleItem Ignore(TokenType type, bool isOptional);
    private static CommandRule[] get_Rules();
    private static string GetFrontendName(DirectiveCollection directives, CommandResult commandResult);
    [CompilerGeneratedAttribute]
internal static Token <GetTelemetryEventsFrom>g__NextToken|3_10(<>c__DisplayClass3_1& );
}
public class Microsoft.DotNet.Interactive.Telemetry.StreamForwarder : object {
    private static Char[] s_ignoreCharacters;
    private static char s_flushBuilderCharacter;
    private StringBuilder _builder;
    private StringWriter _capture;
    public string CapturedOutput { get; }
    private static StreamForwarder();
    public string get_CapturedOutput();
    public StreamForwarder Capture();
    public Task BeginRead(TextReader reader);
    public void Read(TextReader reader);
    private void WriteBuilder();
    private void WriteLine(string str);
    private void ThrowIfCaptureSet();
}
public class Microsoft.DotNet.Interactive.Telemetry.TelemetryCommonProperties : object {
    private string _productVersion;
    private IUserLevelCacheWriter _userLevelCacheWriter;
    private IDockerContainerDetector _dockerContainerDetector;
    private Func`2<string, string> _hasher;
    private Func`1<string> _getMACAddress;
    private static string OSVersion;
    private static string OSPlatform;
    private static string RuntimeId;
    private static string ProductVersion;
    private static string DockerContainer;
    private static string MachineId;
    private static string KernelVersion;
    private static string MachineIdCacheKey;
    private static string IsDockerContainerCacheKey;
    public TelemetryCommonProperties(string productVersion, Func`2<string, string> hasher, Func`1<string> getMACAddress, IDockerContainerDetector dockerContainerDetector, IUserLevelCacheWriter userLevelCacheWriter);
    public Dictionary`2<string, string> GetTelemetryCommonProperties();
    private string GetMachineId();
    private string IsDockerContainer();
    private static string GetKernelVersion();
    [CompilerGeneratedAttribute]
private string <GetMachineId>b__16_0();
    [CompilerGeneratedAttribute]
private string <IsDockerContainer>b__17_0();
}
public class Microsoft.DotNet.Interactive.Telemetry.TelemetryEvent : object {
    [CompilerGeneratedAttribute]
private string <EventName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, double> <Metrics>k__BackingField;
    public string EventName { get; }
    public IDictionary`2<string, string> Properties { get; }
    public IDictionary`2<string, double> Metrics { get; }
    public TelemetryEvent(string eventName, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics);
    [CompilerGeneratedAttribute]
public string get_EventName();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, double> get_Metrics();
}
public class Microsoft.DotNet.Interactive.Telemetry.TelemetrySender : object {
    private IFirstTimeUseNoticeSentinel _firstTimeUseNoticeSentinel;
    private string _eventsNamespace;
    private string _appInsightsConnectionString;
    private string _currentSessionId;
    private TelemetryClient _client;
    private Dictionary`2<string, string> _commonProperties;
    private Dictionary`2<string, double> _commonMetrics;
    private Task _trackEventTask;
    private static string DefaultAppInsightsConnectionString;
    public static string TelemetryOptOutEnvironmentVariableName;
    public static string WelcomeMessage;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    public bool Enabled { get; }
    public static bool SkipFirstTimeExperience { get; }
    public static bool IsRunningInDockerContainer { get; }
    public TelemetrySender(string productVersion, IFirstTimeUseNoticeSentinel firstTimeUseNoticeSentinel, string eventsNamespace, string appInsightsConnectionString);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    public static bool get_SkipFirstTimeExperience();
    public static bool get_IsRunningInDockerContainer();
    private static bool GetEnvironmentVariableAsBool(string name);
    public sealed virtual void TrackEvent(string eventName, IDictionary`2<string, string> properties, IDictionary`2<string, double> measurements);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.Telemetry.TelemetrySender/<FlushedAsync>d__21")]
public Task FlushedAsync();
    public void TrackStartupEvent(ParseResult parseResult, StartupTelemetryEventBuilder eventBuilder);
    protected virtual void InitializeTelemetry(string productVersion);
    protected virtual void DoTrackEvent(string eventName, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics);
    private Dictionary`2<string, double> GetEventMetrics(IDictionary`2<string, double> measurements);
    private Dictionary`2<string, string> GetEventProperties(IDictionary`2<string, string> properties);
    public bool FirstTimeUseNoticeSentinelExists();
    public void CreateFirstTimeUseNoticeSentinelIfNotExists();
}
public class Microsoft.DotNet.Interactive.Telemetry.UserLevelCacheWriter : object {
    private string _productVersion;
    private string _dotnetTryUserProfileFolderPath;
    private Func`2<string, bool> _fileExists;
    private Func`2<string, bool> _directoryExists;
    private Action`1<string> _createDirectory;
    private Action`2<string, string> _writeAllText;
    private Func`2<string, string> _readAllText;
    public UserLevelCacheWriter(string productVersion);
    public UserLevelCacheWriter(string productVersion, string dotnetTryUserProfileFolderPath, Func`2<string, bool> fileExists, Func`2<string, bool> directoryExists, Action`1<string> createDirectory, Action`2<string, string> writeAllText, Func`2<string, string> readAllText);
    public sealed virtual string RunWithCache(string cacheKey, Func`1<string> getValueToCache);
    private string GetCacheFilePath(string cacheKey);
}
