[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class Namotion.Reflection.ArrayExt : object {
    [NullableContextAttribute("1")]
public static T[] Empty();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Namotion.Reflection.CachedType : object {
    [NullableAttribute("2")]
private Type _type;
    private bool _isNullableType;
    [NullableAttribute("2")]
private string _typeName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Attribute[] _inheritedAttributes;
    [NullableAttribute("2")]
internal object _genericArguments;
    [NullableAttribute("2")]
internal object _originalGenericArguments;
    [NullableAttribute("2")]
internal object _elementType;
    [CompilerGeneratedAttribute]
private Type <OriginalType>k__BackingField;
    [NullableAttribute("2")]
private TypeInfo _typeInfo;
    public Type OriginalType { get; }
    public IEnumerable`1<Attribute> Attributes { get; }
    public string TypeName { get; }
    public TypeInfo TypeInfo { get; }
    public Attribute[] InheritedAttributes { get; }
    public Type Type { get; }
    public bool IsNullableType { get; }
    public CachedType[] GenericArguments { get; }
    public CachedType[] OriginalGenericArguments { get; }
    [NullableAttribute("2")]
public CachedType ElementType { get; }
    internal CachedType(Type type);
    public static void ClearCache();
    public static Type op_Implicit(CachedType type);
    [CompilerGeneratedAttribute]
public Type get_OriginalType();
    public virtual IEnumerable`1<Attribute> get_Attributes();
    public string get_TypeName();
    public TypeInfo get_TypeInfo();
    public Attribute[] get_InheritedAttributes();
    public Type get_Type();
    public bool get_IsNullableType();
    public CachedType[] get_GenericArguments();
    public CachedType[] get_OriginalGenericArguments();
    [NullableContextAttribute("2")]
public CachedType get_ElementType();
    [NullableContextAttribute("0")]
public T GetInheritedAttribute();
    public IEnumerable`1<T> GetInheritedAttributes();
    public virtual string ToString();
    protected virtual CachedType GetCachedType(Type type, Int32& nullableFlagsIndex);
    protected void UpdateOriginalGenericArguments();
    protected void UpdateOriginalGenericArguments(Int32& nullableFlagsIndex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Namotion.Reflection.CachingXDocument : object {
    private static XName XNameDoc;
    private static XName XNameMembers;
    private static XName XNameMember;
    private static XName XNameName;
    private object _lock;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, XElement> _elementByNameCache;
    private XDocument _document;
    [NullableContextAttribute("2")]
internal CachingXDocument(string pathToXmlFile);
    private static CachingXDocument();
    internal XElement GetXmlDocsElement(string name);
    internal static XElement GetXmlDocsElement(XDocument document, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Namotion.Reflection.ContextualAccessorInfo : ContextualMemberInfo {
    public ContextualType AccessorType { get; }
    public Nullability Nullability { get; }
    public Attribute[] ContextAttributes { get; }
    public abstract virtual ContextualType get_AccessorType();
    public Nullability get_Nullability();
    public Attribute[] get_ContextAttributes();
    [NullableContextAttribute("2")]
public abstract virtual object GetValue(object obj);
    [NullableContextAttribute("2")]
public abstract virtual void SetValue(object obj, object value);
    [NullableContextAttribute("2")]
public T GetContextAttribute();
    public IEnumerable`1<T> GetContextAttributes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Namotion.Reflection.ContextualFieldInfo : ContextualAccessorInfo {
    [NullableAttribute("2")]
private string _name;
    [CompilerGeneratedAttribute]
private FieldInfo <FieldInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ContextualType <FieldType>k__BackingField;
    public FieldInfo FieldInfo { get; }
    public MemberInfo MemberInfo { get; }
    public ContextualType AccessorType { get; }
    public ContextualType FieldType { get; private set; }
    public string Name { get; }
    internal ContextualFieldInfo(FieldInfo fieldInfo, Int32& nullableFlagsIndex, Byte[] nullableFlags);
    [CompilerGeneratedAttribute]
public FieldInfo get_FieldInfo();
    public virtual MemberInfo get_MemberInfo();
    public virtual ContextualType get_AccessorType();
    [CompilerGeneratedAttribute]
public ContextualType get_FieldType();
    [CompilerGeneratedAttribute]
private void set_FieldType(ContextualType value);
    public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual object GetValue(object obj);
    [NullableContextAttribute("2")]
public virtual void SetValue(object obj, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Namotion.Reflection.ContextualMemberInfo : object {
    public MemberInfo MemberInfo { get; }
    public string Name { get; }
    public abstract virtual MemberInfo get_MemberInfo();
    public abstract virtual string get_Name();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Namotion.Reflection.ContextualMethodInfo : ContextualMemberInfo {
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ContextualParameterInfo[] <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ContextualParameterInfo <ReturnParameter>k__BackingField;
    public MethodInfo MethodInfo { get; }
    public string Name { get; }
    public ContextualParameterInfo[] Parameters { get; }
    public ContextualParameterInfo ReturnParameter { get; }
    public MemberInfo MemberInfo { get; }
    internal ContextualMethodInfo(MethodInfo methodInfo, ContextualParameterInfo returnParameter, IEnumerable`1<ContextualParameterInfo> parameters);
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public ContextualParameterInfo[] get_Parameters();
    [CompilerGeneratedAttribute]
public ContextualParameterInfo get_ReturnParameter();
    public virtual MemberInfo get_MemberInfo();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Namotion.Reflection.ContextualParameterInfo : ContextualType {
    [NullableAttribute("2")]
private string _name;
    [CompilerGeneratedAttribute]
private ParameterInfo <ParameterInfo>k__BackingField;
    public ParameterInfo ParameterInfo { get; }
    public string Name { get; }
    internal ContextualParameterInfo(ParameterInfo parameterInfo, Int32& nullableFlagsIndex, Byte[] nullableFlags);
    [CompilerGeneratedAttribute]
public ParameterInfo get_ParameterInfo();
    public string get_Name();
    public virtual string ToString();
    private static Attribute[] GetContextualAttributes(ParameterInfo parameterInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Namotion.Reflection.ContextualPropertyInfo : ContextualAccessorInfo {
    [NullableAttribute("2")]
private string _name;
    private Nullable`1<bool> _canWrite;
    private Nullable`1<bool> _canRead;
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ContextualType <PropertyType>k__BackingField;
    [NullableAttribute("2")]
private IPropertyReader _propertyReader;
    [NullableAttribute("2")]
private IPropertyWriter _propertyWriter;
    public PropertyInfo PropertyInfo { get; }
    public ContextualType AccessorType { get; }
    public ContextualType PropertyType { get; private set; }
    public string Name { get; }
    public MemberInfo MemberInfo { get; }
    public bool CanWrite { get; }
    public bool CanRead { get; }
    internal ContextualPropertyInfo(PropertyInfo propertyInfo, Int32& nullableFlagsIndex, Byte[] nullableFlags);
    [CompilerGeneratedAttribute]
public PropertyInfo get_PropertyInfo();
    public virtual ContextualType get_AccessorType();
    [CompilerGeneratedAttribute]
public ContextualType get_PropertyType();
    [CompilerGeneratedAttribute]
private void set_PropertyType(ContextualType value);
    public virtual string get_Name();
    public virtual MemberInfo get_MemberInfo();
    public bool get_CanWrite();
    public bool get_CanRead();
    [NullableContextAttribute("2")]
public virtual object GetValue(object obj);
    [NullableContextAttribute("2")]
public virtual void SetValue(object obj, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Namotion.Reflection.ContextualType : CachedType {
    private static Byte[] _emptyNullableFlags;
    private int _nullableFlagsIndex;
    [NullableAttribute("2")]
private Byte[] _nullableFlags;
    private Nullable`1<Nullability> nullability;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ContextualMethodInfo[] _methods;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ContextualPropertyInfo[] _properties;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ContextualFieldInfo[] _fields;
    private Nullable`1<bool> _isValueType;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ContextualType <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private Attribute[] <ContextAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullability <OriginalNullability>k__BackingField;
    [NullableAttribute("2")]
private ContextualType _enumerableItemType;
    [NullableAttribute("2")]
public ContextualType Parent { get; }
    public Attribute[] ContextAttributes { get; private set; }
    public Nullability OriginalNullability { get; private set; }
    public IEnumerable`1<Attribute> Attributes { get; }
    public ContextualType[] GenericArguments { get; }
    public ContextualType[] OriginalGenericArguments { get; }
    [NullableAttribute("2")]
public ContextualType ElementType { get; }
    [NullableAttribute("2")]
public ContextualType EnumerableItemType { get; }
    [NullableAttribute("2")]
public ContextualType BaseType { get; }
    public Nullability Nullability { get; }
    public bool IsValueType { get; }
    public ContextualPropertyInfo[] Properties { get; }
    public ContextualMethodInfo[] Methods { get; }
    public ContextualFieldInfo[] Fields { get; }
    internal ContextualType(Type type, IEnumerable`1<Attribute> contextAttributes, ContextualType parent, Int32& nullableFlagsIndex, Byte[] nullableFlags, NullableFlagsSource[] customAttributeProviders);
    private static ContextualType();
    internal static ContextualType ForType(Type type, IEnumerable`1<Attribute> contextAttributes);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ContextualType get_Parent();
    [CompilerGeneratedAttribute]
public Attribute[] get_ContextAttributes();
    [CompilerGeneratedAttribute]
private void set_ContextAttributes(Attribute[] value);
    [CompilerGeneratedAttribute]
public Nullability get_OriginalNullability();
    [CompilerGeneratedAttribute]
private void set_OriginalNullability(Nullability value);
    public virtual IEnumerable`1<Attribute> get_Attributes();
    public ContextualType[] get_GenericArguments();
    public ContextualType[] get_OriginalGenericArguments();
    [NullableContextAttribute("2")]
public ContextualType get_ElementType();
    [NullableContextAttribute("2")]
public ContextualType get_EnumerableItemType();
    [NullableContextAttribute("2")]
public ContextualType get_BaseType();
    public Nullability get_Nullability();
    public bool get_IsValueType();
    [NullableContextAttribute("0")]
public T GetContextAttribute();
    public IEnumerable`1<T> GetContextAttributes();
    [NullableContextAttribute("2")]
public T GetAttribute();
    public IEnumerable`1<T> GetAttributes();
    public ContextualPropertyInfo[] get_Properties();
    public ContextualMethodInfo[] get_Methods();
    public ContextualFieldInfo[] get_Fields();
    public ContextualPropertyInfo GetProperty(string propertyName);
    public ContextualFieldInfo GetField(string fieldName);
    public virtual string ToString();
    protected virtual CachedType GetCachedType(Type type, Int32& nullableFlagsIndex);
    private void InitializeNullableFlagsAndOriginalNullability(Int32& nullableFlagsIndex, NullableFlagsSource[] customAttributeProviders);
    private Byte[] GetFlagsFromNullableAttribute(Attribute nullableAttribute);
    private static Byte[] GetFlagsFromCustomAttributeProviders(NullableFlagsSource[] customAttributeProviders);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private ContextualPropertyInfo <get_Properties>b__43_0(PropertyInfo property);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private ContextualFieldInfo <get_Fields>b__47_0(FieldInfo field);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Namotion.Reflection.ContextualTypeExtensions : object {
    private static ConcurrentDictionary`2<CacheKey, object> Cache;
    private static ContextualTypeExtensions();
    internal static void ClearCache();
    [ExtensionAttribute]
public static ContextualType ToContextualType(Type type);
    [ExtensionAttribute]
public static CachedType ToCachedType(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<ContextualAccessorInfo> GetContextualAccessors(Type type);
    [ExtensionAttribute]
public static ContextualPropertyInfo[] GetContextualProperties(Type type);
    [ExtensionAttribute]
public static ContextualFieldInfo[] GetContextualFields(Type type);
    [ExtensionAttribute]
public static ContextualType ToContextualType(Type type, IEnumerable`1<Attribute> attributes);
    [ExtensionAttribute]
public static ContextualParameterInfo ToContextualParameter(ParameterInfo parameterInfo);
    [ExtensionAttribute]
public static ContextualPropertyInfo ToContextualProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static ContextualFieldInfo ToContextualField(FieldInfo fieldInfo);
    [ExtensionAttribute]
public static ContextualAccessorInfo ToContextualAccessor(MemberInfo memberInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Namotion.Reflection.EnumerableExtensions : object {
    [IteratorStateMachineAttribute("Namotion.Reflection.EnumerableExtensions/<GetAssignableToTypeName>d__0`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> GetAssignableToTypeName(IEnumerable`1<T> objects, string typeName, TypeNameStyle typeNameStyle);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T FirstAssignableToTypeNameOrDefault(IEnumerable`1<T> objects, string typeName, TypeNameStyle typeNameStyle);
    [ExtensionAttribute]
public static Type GetCommonBaseType(IEnumerable`1<Type> types);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static T GetSingleOrDefault(Attribute[] attributes);
    [CompilerGeneratedAttribute]
internal static void <GetSingleOrDefault>g__ThrowInvalidOperation|3_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Namotion.Reflection.Infrastructure.DynamicApis : object {
    public static bool SupportsFileApis { get; }
    public static bool SupportsPathApis { get; }
    public static bool SupportsDirectoryApis { get; }
    public static bool SupportsXPathApis { get; }
    public static bool get_SupportsFileApis();
    public static bool get_SupportsPathApis();
    public static bool get_SupportsDirectoryApis();
    public static bool get_SupportsXPathApis();
    public static string DirectoryGetCurrentDirectory();
    public static bool FileExists(string filePath);
    public static string FileReadAllText(string filePath);
    public static bool DirectoryExists(string directoryPath);
    public static String[] DirectoryGetAllFiles(string path, string searchPattern);
    public static String[] DirectoryGetFiles(string path, string searchPattern);
    public static string PathCombine(string path1, string path2);
    public static string PathGetDirectoryName(string filePath);
    public static object XPathEvaluate(XDocument document, string path);
}
[NullableContextAttribute("2")]
internal interface Namotion.Reflection.IPropertyReader {
    public abstract virtual object GetValue(object obj);
}
[NullableContextAttribute("2")]
internal interface Namotion.Reflection.IPropertyWriter {
    public abstract virtual void SetValue(object obj, object value);
}
public enum Namotion.Reflection.Nullability : Enum {
    public int value__;
    public static Nullability Unknown;
    public static Nullability NotNullable;
    public static Nullability Nullable;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Namotion.Reflection.NullableFlagsSource : ValueType {
    private static Dictionary`2<CacheKey, NullableFlagsSource> _nullableCache;
    [NullableAttribute("2")]
public Byte[] NullableFlags;
    private NullableFlagsSource(Type type, Assembly assembly);
    private NullableFlagsSource(MemberInfo memberInfo);
    private static NullableFlagsSource();
    public static NullableFlagsSource Create(Type type, Assembly assembly);
    public static NullableFlagsSource Create(MemberInfo member);
    private static Byte[] GetNullableFlags(T provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Namotion.Reflection.ObjectExtensions : object {
    [CompilerGeneratedAttribute]
private static bool <DisableNullabilityValidation>k__BackingField;
    public static bool DisableNullabilityValidation { get; public set; }
    [ExtensionAttribute]
public static bool HasProperty(object obj, string propertyName);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T TryGetPropertyValue(object obj, string propertyName, T defaultValue);
    [CompilerGeneratedAttribute]
public static bool get_DisableNullabilityValidation();
    [CompilerGeneratedAttribute]
public static void set_DisableNullabilityValidation(bool value);
    [ExtensionAttribute]
public static bool HasValidNullability(object obj, bool checkChildren);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void EnsureValidNullability(object obj, bool checkChildren);
    [ExtensionAttribute]
public static IEnumerable`1<string> ValidateNullability(object obj, bool checkChildren);
    private static void ValidateNullability(object obj, ContextualType type, HashSet`1<object> checkedObjects, List`1<string> errors, bool stopFirstFail);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Namotion.Reflection.PropertyReader : object {
    private static Type GenericTypeDefinition;
    private static PropertyReader();
    public static IPropertyReader Create(Type objectType, Type valueType, PropertyInfo propertyInfo);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Namotion.Reflection.PropertyReader`2 : object {
    [NullableAttribute("1")]
private PropertyInfo _propertyInfo;
    private Func`2<TObject, TValue> _getter;
    [NullableContextAttribute("1")]
public PropertyReader`2(PropertyInfo propertyInfo);
    public TValue GetValue(TObject obj);
    private sealed virtual override object Namotion.Reflection.IPropertyReader.GetValue(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Namotion.Reflection.PropertyWriter : object {
    private static Type GenericTypeDefinition;
    private static PropertyWriter();
    public static IPropertyWriter Create(Type objectType, Type valueType, PropertyInfo propertyInfo);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Namotion.Reflection.PropertyWriter`2 : object {
    [NullableAttribute("1")]
private PropertyInfo _propertyInfo;
    private Action`2<TObject, TValue> _setter;
    [NullableContextAttribute("1")]
public PropertyWriter`2(PropertyInfo propertyInfo);
    public void SetValue(TObject obj, TValue value);
    private sealed virtual override void Namotion.Reflection.IPropertyWriter.SetValue(object obj, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Namotion.Reflection.StringBuilderExtensions : object {
    [ExtensionAttribute]
public static StringBuilder Append(StringBuilder stringBuilder, String[] values);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static StringBuilder Append(StringBuilder stringBuilder, string value1, string value2, string value3, string value4, string value5, string value6);
    private static void AppendStringToStringBuilder(StringBuilder stringBuilder, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Namotion.Reflection.StringExtensions : object {
    [ExtensionAttribute]
public static string FirstToken(string s, char splitChar);
    [ExtensionAttribute]
public static string LastToken(string s, char splitChar);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Namotion.Reflection.TypeExtensions : object {
    [ExtensionAttribute]
public static bool IsAssignableToTypeName(CachedType type, string typeName, TypeNameStyle typeNameStyle);
    [ExtensionAttribute]
public static bool IsAssignableToTypeName(Type type, string typeName, TypeNameStyle typeNameStyle);
    [ExtensionAttribute]
public static bool InheritsFromTypeName(Type type, string typeName, TypeNameStyle typeNameStyle);
    [ExtensionAttribute]
public static Type GetEnumerableItemType(Type type);
    [ExtensionAttribute]
private static Type[] GetGenericTypeArgumentsOfTypeOrBaseTypes(Type type);
    [ExtensionAttribute]
public static string GetDisplayName(Type type);
    private static string GetName(CachedType cType);
    private static string GetNullableDisplayName(CachedType type, string actual);
}
public enum Namotion.Reflection.TypeNameStyle : Enum {
    public int value__;
    public static TypeNameStyle Name;
    public static TypeNameStyle FullName;
}
public static class Namotion.Reflection.XmlDocs : object {
    public static void ClearCache();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Namotion.Reflection.XmlDocsExtensions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<string, CachingXDocument> Cache;
    private static Char[] ToXmlDocsContentTrimChars;
    private static Char[] RemoveLineBreakWhiteSpacesTrimChars;
    private static Regex LineBreakRegex;
    private static Regex runtimeConfigRegex;
    private static XmlDocsExtensions();
    internal static void ClearCache();
    [ExtensionAttribute]
public static string GetXmlDocsSummary(CachedType type, XmlDocsOptions options);
    [ExtensionAttribute]
public static string GetXmlDocsRemarks(CachedType type, XmlDocsOptions options);
    [ExtensionAttribute]
public static string GetXmlDocsTag(CachedType type, string tagName, XmlDocsOptions options);
    [ExtensionAttribute]
public static string GetXmlDocsSummary(ContextualMemberInfo member, XmlDocsOptions options);
    [ExtensionAttribute]
public static string GetXmlDocsRemarks(ContextualMemberInfo member, XmlDocsOptions options);
    [ExtensionAttribute]
public static string GetXmlDocsTag(ContextualMemberInfo member, string tagName, XmlDocsOptions options);
    [ExtensionAttribute]
public static string GetXmlDocs(ContextualParameterInfo parameter, XmlDocsOptions options);
    [ExtensionAttribute]
public static string GetXmlDocsSummary(Type type, XmlDocsOptions options);
    [ExtensionAttribute]
public static string GetXmlDocsRemarks(Type type, XmlDocsOptions options);
    [ExtensionAttribute]
public static string GetXmlDocsTag(Type type, string tagName, XmlDocsOptions options);
    [ExtensionAttribute]
public static string GetXmlDocsSummary(MemberInfo member, XmlDocsOptions options);
    [ExtensionAttribute]
public static string GetXmlDocsRemarks(MemberInfo member, XmlDocsOptions options);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static XElement GetXmlDocsElement(MemberInfo member, XmlDocsOptions options);
    [ExtensionAttribute]
public static XElement GetXmlDocsElement(MemberInfo member, string pathToXmlFile, XmlDocsOptions options);
    [ExtensionAttribute]
public static string GetXmlDocsTag(MemberInfo member, string tagName, XmlDocsOptions options);
    [ExtensionAttribute]
public static string GetXmlDocsRecordPropertySummary(PropertyInfo member, XmlDocsOptions options);
    [ExtensionAttribute]
public static string GetXmlDocs(ParameterInfo parameter, XmlDocsOptions options);
    [ExtensionAttribute]
public static XElement GetXmlDocsElement(ParameterInfo parameter, string pathToXmlFile, XmlDocsOptions options);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string ToXmlDocsContent(XElement element, XmlDocsOptions options);
    [ExtensionAttribute]
private static XElement GetXmlDocs(ParameterInfo parameter, string pathToXmlFile, XmlDocsOptions options);
    [NullableContextAttribute("2")]
private static CachingXDocument TryGetXmlDocsDocument(AssemblyName assemblyName, string pathToXmlFile, bool resolveExternalXmlDocs);
    private static bool IsAssemblyIgnored(AssemblyName assemblyName, bool resolveExternalXmlDocs);
    [ExtensionAttribute]
private static XElement GetXmlDocsElement(MemberInfo member, CachingXDocument xml);
    [ExtensionAttribute]
internal static XElement GetXmlDocsElement(XDocument xml, string name);
    [ExtensionAttribute]
private static XElement GetXmlDocsElement(ParameterInfo parameter, CachingXDocument xml, XmlDocsOptions options);
    [ExtensionAttribute]
private static void ReplaceInheritdocElements(MemberInfo member, XElement element, XmlDocsOptions options);
    [ExtensionAttribute]
private static void ProcessInheritdocInterfaceElements(MemberInfo member, XElement child, XmlDocsOptions options);
    private static string RemoveLineBreakWhiteSpaces(string documentation);
    internal static string GetMemberElementName(object member);
    [NullableContextAttribute("2")]
public static string GetXmlDocsPath(Assembly assembly, XmlDocsOptions options);
    [ExtensionAttribute]
private static void ProcessInheritDocTypeElements(MemberInfo member, XElement child, XmlDocsOptions options);
    private static Type GetTypeByXmlDocTypeName(string xmlDocTypeName, Assembly assembly);
    private static string NormalizeTypeName(string typeName);
    [NullableContextAttribute("2")]
private static string GetPathByOs(object assembly, AssemblyName assemblyName);
    private static string GetXmlAssemblyFilePathForWindows(object assembly, AssemblyName assemblyName);
    private static string GetXmlDocsPathFromNuGetCacheOrDotNetSdk(string assemblyDirectory, AssemblyName assemblyName);
    private static string GetXmlDocsPathFromNuGetCacheFile(string nuGetCacheFile, AssemblyName assemblyName);
    private static string GetCacheKey(string assemblyFullName, bool resolveExternalXmlDocs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Namotion.Reflection.XmlDocsFormatting : object {
    private static Dictionary`2<XmlDocsFormattingMode, Func`3<StringBuilder, XElement, StringBuilder>> formattingFunctions;
    private static Dictionary`2<string, Func`3<StringBuilder, XElement, StringBuilder>> htmlTagMap;
    private static Dictionary`2<string, Func`3<StringBuilder, XElement, StringBuilder>> markdownTagMap;
    private static XmlDocsFormatting();
    [ExtensionAttribute]
public static StringBuilder AppendFormattedElement(StringBuilder stringBuilder, XElement element, XmlDocsFormattingMode formattingMode);
    [ExtensionAttribute]
private static StringBuilder AppendUnformattedElement(StringBuilder stringBuilder, XElement element);
    private static StringBuilder AppendHtmlFormattedElement(StringBuilder stringBuilder, XElement element);
    private static StringBuilder AppendMarkdownFormattedElement(StringBuilder stringBuilder, XElement element);
    private static StringBuilder AppendMapFormattedElement(StringBuilder stringBuilder, XElement element, Dictionary`2<string, Func`3<StringBuilder, XElement, StringBuilder>> map);
    private static StringBuilder AppendSimpleTaggedElement(StringBuilder stringBuilder, XElement element, string startTag, string endTag);
}
public enum Namotion.Reflection.XmlDocsFormattingMode : Enum {
    public int value__;
    public static XmlDocsFormattingMode None;
    public static XmlDocsFormattingMode Html;
    public static XmlDocsFormattingMode Markdown;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Namotion.Reflection.XmlDocsKeys : object {
    public static string SummaryElement;
    public static string RemarksElement;
    public static string ParamElement;
    public static string ParamNameAttribute;
    public static string ParamRefElement;
    public static string ParamRefNameAttribute;
    public static string SeeElement;
    public static string SeeLangwordAttribute;
    public static string SeeCrefAttribute;
    public static string SeeHrefAttribute;
    public static string ReturnsElement;
    public static string InheritDocElement;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Namotion.Reflection.XmlDocsOptions : object {
    [CompilerGeneratedAttribute]
private static XmlDocsOptions <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResolveExternalXmlDocs>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlDocsFormattingMode <FormattingMode>k__BackingField;
    public static XmlDocsOptions Default { get; }
    public bool ResolveExternalXmlDocs { get; public set; }
    public XmlDocsFormattingMode FormattingMode { get; public set; }
    private static XmlDocsOptions();
    [CompilerGeneratedAttribute]
public static XmlDocsOptions get_Default();
    [CompilerGeneratedAttribute]
public bool get_ResolveExternalXmlDocs();
    [CompilerGeneratedAttribute]
public void set_ResolveExternalXmlDocs(bool value);
    [CompilerGeneratedAttribute]
public XmlDocsFormattingMode get_FormattingMode();
    [CompilerGeneratedAttribute]
public void set_FormattingMode(XmlDocsFormattingMode value);
}
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
