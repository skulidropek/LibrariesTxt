internal static class FxResources.System.ServiceProcess.ServiceController.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
public enum System.ServiceProcess.PowerBroadcastStatus : Enum {
    public int value__;
    public static PowerBroadcastStatus QuerySuspend;
    public static PowerBroadcastStatus QuerySuspendFailed;
    public static PowerBroadcastStatus Suspend;
    public static PowerBroadcastStatus ResumeCritical;
    public static PowerBroadcastStatus ResumeSuspend;
    public static PowerBroadcastStatus BatteryLow;
    public static PowerBroadcastStatus PowerStatusChange;
    public static PowerBroadcastStatus OemEvent;
    public static PowerBroadcastStatus ResumeAutomatic;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ServiceProcess.ServiceBase : Component {
    public static int MaxNameLength;
    [DefaultValueAttribute("True")]
public bool AutoLog { get; public set; }
    [DefaultValueAttribute("False")]
public bool CanHandlePowerEvent { get; public set; }
    [DefaultValueAttribute("False")]
public bool CanHandleSessionChangeEvent { get; public set; }
    [DefaultValueAttribute("False")]
public bool CanPauseAndContinue { get; public set; }
    [DefaultValueAttribute("False")]
public bool CanShutdown { get; public set; }
    [DefaultValueAttribute("True")]
public bool CanStop { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public EventLog EventLog { get; }
    public int ExitCode { get; public set; }
    [EditorBrowsableAttribute("2")]
protected IntPtr ServiceHandle { get; }
    public string ServiceName { get; public set; }
    public bool get_AutoLog();
    public void set_AutoLog(bool value);
    public bool get_CanHandlePowerEvent();
    public void set_CanHandlePowerEvent(bool value);
    public bool get_CanHandleSessionChangeEvent();
    public void set_CanHandleSessionChangeEvent(bool value);
    public bool get_CanPauseAndContinue();
    public void set_CanPauseAndContinue(bool value);
    public bool get_CanShutdown();
    public void set_CanShutdown(bool value);
    public bool get_CanStop();
    public void set_CanStop(bool value);
    public virtual EventLog get_EventLog();
    public int get_ExitCode();
    public void set_ExitCode(int value);
    protected IntPtr get_ServiceHandle();
    public string get_ServiceName();
    public void set_ServiceName(string value);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnContinue();
    protected virtual void OnCustomCommand(int command);
    protected virtual void OnPause();
    protected virtual bool OnPowerEvent(PowerBroadcastStatus powerStatus);
    protected virtual void OnSessionChange(SessionChangeDescription changeDescription);
    protected virtual void OnShutdown();
    protected virtual void OnStart(String[] args);
    protected virtual void OnStop();
    public void RequestAdditionalTime(int milliseconds);
    public static void Run(ServiceBase service);
    public static void Run(ServiceBase[] services);
    [EditorBrowsableAttribute("1")]
public void ServiceMainCallback(int argCount, IntPtr argPointer);
    public void Stop();
    public void RequestAdditionalTime(TimeSpan time);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DesignerAttribute("System.ServiceProcess.Design.ServiceControllerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.ServiceProcess.ServiceController : Component {
    public bool CanPauseAndContinue { get; }
    public bool CanShutdown { get; }
    public bool CanStop { get; }
    public ServiceController[] DependentServices { get; }
    public string DisplayName { get; public set; }
    public string MachineName { get; public set; }
    public SafeHandle ServiceHandle { get; }
    public string ServiceName { get; public set; }
    public ServiceController[] ServicesDependedOn { get; }
    public ServiceType ServiceType { get; }
    public ServiceStartMode StartType { get; }
    public ServiceControllerStatus Status { get; }
    public ServiceController(string name);
    public ServiceController(string name, string machineName);
    public bool get_CanPauseAndContinue();
    public bool get_CanShutdown();
    public bool get_CanStop();
    public ServiceController[] get_DependentServices();
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_MachineName();
    public void set_MachineName(string value);
    public SafeHandle get_ServiceHandle();
    public string get_ServiceName();
    public void set_ServiceName(string value);
    public ServiceController[] get_ServicesDependedOn();
    public ServiceType get_ServiceType();
    public ServiceStartMode get_StartType();
    public ServiceControllerStatus get_Status();
    public void Close();
    public void Continue();
    protected virtual void Dispose(bool disposing);
    public void ExecuteCommand(int command);
    public static ServiceController[] GetDevices();
    public static ServiceController[] GetDevices(string machineName);
    public static ServiceController[] GetServices();
    public static ServiceController[] GetServices(string machineName);
    public void Pause();
    public void Refresh();
    public void Start();
    public void Start(String[] args);
    public void Stop();
    public void WaitForStatus(ServiceControllerStatus desiredStatus);
    public void WaitForStatus(ServiceControllerStatus desiredStatus, TimeSpan timeout);
    public void Stop(bool stopDependentServices);
}
public enum System.ServiceProcess.ServiceControllerStatus : Enum {
    public int value__;
    public static ServiceControllerStatus Stopped;
    public static ServiceControllerStatus StartPending;
    public static ServiceControllerStatus StopPending;
    public static ServiceControllerStatus Running;
    public static ServiceControllerStatus ContinuePending;
    public static ServiceControllerStatus PausePending;
    public static ServiceControllerStatus Paused;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
public class System.ServiceProcess.ServiceProcessDescriptionAttribute : DescriptionAttribute {
    public string Description { get; }
    public ServiceProcessDescriptionAttribute(string description);
    public virtual string get_Description();
}
public enum System.ServiceProcess.ServiceStartMode : Enum {
    public int value__;
    public static ServiceStartMode Boot;
    public static ServiceStartMode System;
    public static ServiceStartMode Automatic;
    public static ServiceStartMode Manual;
    public static ServiceStartMode Disabled;
}
[FlagsAttribute]
public enum System.ServiceProcess.ServiceType : Enum {
    public int value__;
    public static ServiceType KernelDriver;
    public static ServiceType FileSystemDriver;
    public static ServiceType Adapter;
    public static ServiceType RecognizerDriver;
    public static ServiceType Win32OwnProcess;
    public static ServiceType Win32ShareProcess;
    public static ServiceType InteractiveProcess;
}
[IsReadOnlyAttribute]
public class System.ServiceProcess.SessionChangeDescription : ValueType {
    private int _dummyPrimitive;
    public SessionChangeReason Reason { get; }
    public int SessionId { get; }
    public SessionChangeReason get_Reason();
    public int get_SessionId();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SessionChangeDescription changeDescription);
    public virtual int GetHashCode();
    public static bool op_Equality(SessionChangeDescription a, SessionChangeDescription b);
    public static bool op_Inequality(SessionChangeDescription a, SessionChangeDescription b);
}
public enum System.ServiceProcess.SessionChangeReason : Enum {
    public int value__;
    public static SessionChangeReason ConsoleConnect;
    public static SessionChangeReason ConsoleDisconnect;
    public static SessionChangeReason RemoteConnect;
    public static SessionChangeReason RemoteDisconnect;
    public static SessionChangeReason SessionLogon;
    public static SessionChangeReason SessionLogoff;
    public static SessionChangeReason SessionLock;
    public static SessionChangeReason SessionUnlock;
    public static SessionChangeReason SessionRemoteControl;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.ServiceProcess.TimeoutException : SystemException {
    [NullableContextAttribute("1")]
protected TimeoutException(SerializationInfo info, StreamingContext context);
    public TimeoutException(string message);
    public TimeoutException(string message, Exception innerException);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ArgsCantBeNull { get; }
    internal static string BadMachineName { get; }
    internal static string CannotStart { get; }
    internal static string InvalidEnumArgument { get; }
    internal static string InvalidParameter { get; }
    internal static string NoService { get; }
    internal static string OpenSC { get; }
    internal static string OpenService { get; }
    internal static string PauseService { get; }
    internal static string ResumeService { get; }
    internal static string StopService { get; }
    internal static string Timeout { get; }
    internal static string PlatformNotSupported_ServiceController { get; }
    internal static string CannotChangeProperties { get; }
    internal static string CannotChangeName { get; }
    internal static string ServiceName { get; }
    internal static string NoServices { get; }
    internal static string CantStartFromCommandLine { get; }
    internal static string NotInPendingState { get; }
    internal static string StartSuccessful { get; }
    internal static string StopSuccessful { get; }
    internal static string PauseSuccessful { get; }
    internal static string ContinueSuccessful { get; }
    internal static string CommandSuccessful { get; }
    internal static string StartFailed { get; }
    internal static string StopFailed { get; }
    internal static string PauseFailed { get; }
    internal static string ContinueFailed { get; }
    internal static string SessionChangeFailed { get; }
    internal static string CommandFailed { get; }
    internal static string ShutdownOK { get; }
    internal static string ShutdownFailed { get; }
    internal static string PowerEventOK { get; }
    internal static string PowerEventFailed { get; }
    internal static string ControlService { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ArgsCantBeNull();
    internal static string get_BadMachineName();
    internal static string get_CannotStart();
    internal static string get_InvalidEnumArgument();
    internal static string get_InvalidParameter();
    internal static string get_NoService();
    internal static string get_OpenSC();
    internal static string get_OpenService();
    internal static string get_PauseService();
    internal static string get_ResumeService();
    internal static string get_StopService();
    internal static string get_Timeout();
    internal static string get_PlatformNotSupported_ServiceController();
    internal static string get_CannotChangeProperties();
    internal static string get_CannotChangeName();
    internal static string get_ServiceName();
    internal static string get_NoServices();
    internal static string get_CantStartFromCommandLine();
    internal static string get_NotInPendingState();
    internal static string get_StartSuccessful();
    internal static string get_StopSuccessful();
    internal static string get_PauseSuccessful();
    internal static string get_ContinueSuccessful();
    internal static string get_CommandSuccessful();
    internal static string get_StartFailed();
    internal static string get_StopFailed();
    internal static string get_PauseFailed();
    internal static string get_ContinueFailed();
    internal static string get_SessionChangeFailed();
    internal static string get_CommandFailed();
    internal static string get_ShutdownOK();
    internal static string get_ShutdownFailed();
    internal static string get_PowerEventOK();
    internal static string get_PowerEventFailed();
    internal static string get_ControlService();
}
