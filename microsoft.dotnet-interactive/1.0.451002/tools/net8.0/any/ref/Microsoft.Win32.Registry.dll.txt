[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Win32.Registry : object {
    public static RegistryKey ClassesRoot;
    public static RegistryKey CurrentConfig;
    public static RegistryKey CurrentUser;
    public static RegistryKey LocalMachine;
    public static RegistryKey PerformanceData;
    public static RegistryKey Users;
    [NullableContextAttribute("2")]
public static object GetValue(string keyName, string valueName, object defaultValue);
    public static void SetValue(string keyName, string valueName, object value);
    public static void SetValue(string keyName, string valueName, object value, RegistryValueKind valueKind);
}
public enum Microsoft.Win32.RegistryHive : Enum {
    public int value__;
    public static RegistryHive ClassesRoot;
    public static RegistryHive CurrentUser;
    public static RegistryHive LocalMachine;
    public static RegistryHive Users;
    public static RegistryHive PerformanceData;
    public static RegistryHive CurrentConfig;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Win32.RegistryKey : MarshalByRefObject {
    public SafeRegistryHandle Handle { get; }
    public string Name { get; }
    public int SubKeyCount { get; }
    public int ValueCount { get; }
    public RegistryView View { get; }
    public SafeRegistryHandle get_Handle();
    public string get_Name();
    public int get_SubKeyCount();
    public int get_ValueCount();
    public RegistryView get_View();
    public void Close();
    public RegistryKey CreateSubKey(string subkey);
    public RegistryKey CreateSubKey(string subkey, RegistryKeyPermissionCheck permissionCheck);
    public RegistryKey CreateSubKey(string subkey, RegistryKeyPermissionCheck permissionCheck, RegistryOptions registryOptions);
    public RegistryKey CreateSubKey(string subkey, RegistryKeyPermissionCheck permissionCheck, RegistryOptions registryOptions, RegistrySecurity registrySecurity);
    public RegistryKey CreateSubKey(string subkey, RegistryKeyPermissionCheck permissionCheck, RegistrySecurity registrySecurity);
    public RegistryKey CreateSubKey(string subkey, bool writable);
    public RegistryKey CreateSubKey(string subkey, bool writable, RegistryOptions options);
    public void DeleteSubKey(string subkey);
    public void DeleteSubKey(string subkey, bool throwOnMissingSubKey);
    public void DeleteSubKeyTree(string subkey);
    public void DeleteSubKeyTree(string subkey, bool throwOnMissingSubKey);
    public void DeleteValue(string name);
    public void DeleteValue(string name, bool throwOnMissingValue);
    public sealed virtual void Dispose();
    public void Flush();
    public static RegistryKey FromHandle(SafeRegistryHandle handle);
    public static RegistryKey FromHandle(SafeRegistryHandle handle, RegistryView view);
    public RegistrySecurity GetAccessControl();
    public RegistrySecurity GetAccessControl(AccessControlSections includeSections);
    public String[] GetSubKeyNames();
    [NullableContextAttribute("2")]
public object GetValue(string name);
    [NullableContextAttribute("2")]
public object GetValue(string name, object defaultValue);
    [NullableContextAttribute("2")]
public object GetValue(string name, object defaultValue, RegistryValueOptions options);
    [NullableContextAttribute("2")]
public RegistryValueKind GetValueKind(string name);
    public String[] GetValueNames();
    public static RegistryKey OpenBaseKey(RegistryHive hKey, RegistryView view);
    public static RegistryKey OpenRemoteBaseKey(RegistryHive hKey, string machineName);
    public static RegistryKey OpenRemoteBaseKey(RegistryHive hKey, string machineName, RegistryView view);
    public RegistryKey OpenSubKey(string name);
    public RegistryKey OpenSubKey(string name, RegistryKeyPermissionCheck permissionCheck);
    public RegistryKey OpenSubKey(string name, RegistryKeyPermissionCheck permissionCheck, RegistryRights rights);
    public RegistryKey OpenSubKey(string name, bool writable);
    public RegistryKey OpenSubKey(string name, RegistryRights rights);
    public void SetAccessControl(RegistrySecurity registrySecurity);
    public void SetValue(string name, object value);
    public void SetValue(string name, object value, RegistryValueKind valueKind);
    public virtual string ToString();
}
public enum Microsoft.Win32.RegistryKeyPermissionCheck : Enum {
    public int value__;
    public static RegistryKeyPermissionCheck Default;
    public static RegistryKeyPermissionCheck ReadSubTree;
    public static RegistryKeyPermissionCheck ReadWriteSubTree;
}
[FlagsAttribute]
public enum Microsoft.Win32.RegistryOptions : Enum {
    public int value__;
    public static RegistryOptions None;
    public static RegistryOptions Volatile;
}
public enum Microsoft.Win32.RegistryValueKind : Enum {
    public int value__;
    public static RegistryValueKind None;
    public static RegistryValueKind Unknown;
    public static RegistryValueKind String;
    public static RegistryValueKind ExpandString;
    public static RegistryValueKind Binary;
    public static RegistryValueKind DWord;
    public static RegistryValueKind MultiString;
    public static RegistryValueKind QWord;
}
[FlagsAttribute]
public enum Microsoft.Win32.RegistryValueOptions : Enum {
    public int value__;
    public static RegistryValueOptions None;
    public static RegistryValueOptions DoNotExpandEnvironmentNames;
}
public enum Microsoft.Win32.RegistryView : Enum {
    public int value__;
    public static RegistryView Default;
    public static RegistryView Registry64;
    public static RegistryView Registry32;
}
public class Microsoft.Win32.SafeHandles.SafeRegistryHandle : SafeHandleZeroOrMinusOneIsInvalid {
    public SafeRegistryHandle(IntPtr preexistingHandle, bool ownsHandle);
    protected virtual bool ReleaseHandle();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.AccessControl.RegistryAccessRule : AccessRule {
    public RegistryRights RegistryRights { get; }
    public RegistryAccessRule(IdentityReference identity, RegistryRights registryRights, AccessControlType type);
    public RegistryAccessRule(IdentityReference identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public RegistryAccessRule(string identity, RegistryRights registryRights, AccessControlType type);
    public RegistryAccessRule(string identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public RegistryRights get_RegistryRights();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.AccessControl.RegistryAuditRule : AuditRule {
    public RegistryRights RegistryRights { get; }
    public RegistryAuditRule(IdentityReference identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    public RegistryAuditRule(string identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    public RegistryRights get_RegistryRights();
}
[FlagsAttribute]
public enum System.Security.AccessControl.RegistryRights : Enum {
    public int value__;
    public static RegistryRights QueryValues;
    public static RegistryRights SetValue;
    public static RegistryRights CreateSubKey;
    public static RegistryRights EnumerateSubKeys;
    public static RegistryRights Notify;
    public static RegistryRights CreateLink;
    public static RegistryRights Delete;
    public static RegistryRights ReadPermissions;
    public static RegistryRights WriteKey;
    public static RegistryRights ExecuteKey;
    public static RegistryRights ReadKey;
    public static RegistryRights ChangePermissions;
    public static RegistryRights TakeOwnership;
    public static RegistryRights FullControl;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.AccessControl.RegistrySecurity : NativeObjectSecurity {
    public Type AccessRightType { get; }
    public Type AccessRuleType { get; }
    public Type AuditRuleType { get; }
    public virtual Type get_AccessRightType();
    public virtual Type get_AccessRuleType();
    public virtual Type get_AuditRuleType();
    public virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public void AddAccessRule(RegistryAccessRule rule);
    public void AddAuditRule(RegistryAuditRule rule);
    public virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    public bool RemoveAccessRule(RegistryAccessRule rule);
    public void RemoveAccessRuleAll(RegistryAccessRule rule);
    public void RemoveAccessRuleSpecific(RegistryAccessRule rule);
    public bool RemoveAuditRule(RegistryAuditRule rule);
    public void RemoveAuditRuleAll(RegistryAuditRule rule);
    public void RemoveAuditRuleSpecific(RegistryAuditRule rule);
    public void ResetAccessRule(RegistryAccessRule rule);
    public void SetAccessRule(RegistryAccessRule rule);
    public void SetAuditRule(RegistryAuditRule rule);
}
