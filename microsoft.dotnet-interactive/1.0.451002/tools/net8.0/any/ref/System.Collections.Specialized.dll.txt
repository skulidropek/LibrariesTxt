[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[DefaultMemberAttribute("Item")]
public class System.Collections.Specialized.BitVector32 : ValueType {
    private int _dummyPrimitive;
    public int Data { get; }
    public int Item { get; public set; }
    public bool Item { get; public set; }
    public BitVector32(BitVector32 value);
    public BitVector32(int data);
    public int get_Data();
    public int get_Item(Section section);
    public void set_Item(Section section, int value);
    public bool get_Item(int bit);
    public void set_Item(int bit, bool value);
    public static int CreateMask();
    public static int CreateMask(int previous);
    public static Section CreateSection(short maxValue);
    public static Section CreateSection(short maxValue, Section previous);
    public sealed virtual bool Equals(BitVector32 other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object o);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public static string ToString(BitVector32 value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Collections.Specialized.HybridDictionary : object {
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    public ICollection Keys { get; }
    public object SyncRoot { get; }
    public ICollection Values { get; }
    public HybridDictionary(bool caseInsensitive);
    public HybridDictionary(int initialSize);
    public HybridDictionary(int initialSize, bool caseInsensitive);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_Item(object key);
    public sealed virtual void set_Item(object key, object value);
    public sealed virtual ICollection get_Keys();
    public sealed virtual object get_SyncRoot();
    public sealed virtual ICollection get_Values();
    public sealed virtual void Add(object key, object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object key);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IDictionaryEnumerator GetEnumerator();
    public sealed virtual void Remove(object key);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public interface System.Collections.Specialized.IOrderedDictionary {
    [NullableAttribute("2")]
public object Item { get; public set; }
    [NullableContextAttribute("2")]
public abstract virtual object get_Item(int index);
    [NullableContextAttribute("2")]
public abstract virtual void set_Item(int index, object value);
    [NullableContextAttribute("1")]
public abstract virtual IDictionaryEnumerator GetEnumerator();
    [NullableContextAttribute("1")]
public abstract virtual void Insert(int index, object key, object value);
    public abstract virtual void RemoveAt(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Collections.Specialized.ListDictionary : object {
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    public ICollection Keys { get; }
    public object SyncRoot { get; }
    public ICollection Values { get; }
    [NullableContextAttribute("2")]
public ListDictionary(IComparer comparer);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_Item(object key);
    public sealed virtual void set_Item(object key, object value);
    public sealed virtual ICollection get_Keys();
    public sealed virtual object get_SyncRoot();
    public sealed virtual ICollection get_Values();
    public sealed virtual void Add(object key, object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object key);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IDictionaryEnumerator GetEnumerator();
    public sealed virtual void Remove(object key);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class System.Collections.Specialized.NameObjectCollectionBase : object {
    public int Count { get; }
    protected bool IsReadOnly { get; protected set; }
    [NullableAttribute("1")]
public KeysCollection Keys { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    [NullableAttribute("1")]
private object System.Collections.ICollection.SyncRoot { get; }
    protected NameObjectCollectionBase(IEqualityComparer equalityComparer);
    [ObsoleteAttribute("This constructor has been deprecated. Use NameObjectCollectionBase(IEqualityComparer) instead.")]
protected NameObjectCollectionBase(IHashCodeProvider hashProvider, IComparer comparer);
    protected NameObjectCollectionBase(int capacity);
    protected NameObjectCollectionBase(int capacity, IEqualityComparer equalityComparer);
    [ObsoleteAttribute("This constructor has been deprecated. Use NameObjectCollectionBase(Int32, IEqualityComparer) instead.")]
protected NameObjectCollectionBase(int capacity, IHashCodeProvider hashProvider, IComparer comparer);
    [NullableContextAttribute("1")]
protected NameObjectCollectionBase(SerializationInfo info, StreamingContext context);
    public virtual int get_Count();
    protected bool get_IsReadOnly();
    protected void set_IsReadOnly(bool value);
    [NullableContextAttribute("1")]
public virtual KeysCollection get_Keys();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    protected void BaseAdd(string name, object value);
    protected void BaseClear();
    protected object BaseGet(int index);
    protected object BaseGet(string name);
    protected String[] BaseGetAllKeys();
    protected Object[] BaseGetAllValues();
    [NullableContextAttribute("1")]
protected Object[] BaseGetAllValues(Type type);
    protected string BaseGetKey(int index);
    protected bool BaseHasKeys();
    protected void BaseRemove(string name);
    protected void BaseRemoveAt(int index);
    protected void BaseSet(int index, object value);
    protected void BaseSet(string name, object value);
    [NullableContextAttribute("1")]
public virtual IEnumerator GetEnumerator();
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual void OnDeserialization(object sender);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Collections.Specialized.NameValueCollection : NameObjectCollectionBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] AllKeys { get; }
    public string Item { get; }
    public string Item { get; public set; }
    public NameValueCollection(IEqualityComparer equalityComparer);
    [ObsoleteAttribute("This constructor has been deprecated. Use NameValueCollection(IEqualityComparer) instead.")]
public NameValueCollection(IHashCodeProvider hashProvider, IComparer comparer);
    [NullableContextAttribute("1")]
public NameValueCollection(NameValueCollection col);
    public NameValueCollection(int capacity);
    public NameValueCollection(int capacity, IEqualityComparer equalityComparer);
    [ObsoleteAttribute("This constructor has been deprecated. Use NameValueCollection(Int32, IEqualityComparer) instead.")]
public NameValueCollection(int capacity, IHashCodeProvider hashProvider, IComparer comparer);
    [NullableContextAttribute("1")]
public NameValueCollection(int capacity, NameValueCollection col);
    [NullableContextAttribute("1")]
protected NameValueCollection(SerializationInfo info, StreamingContext context);
    public virtual String[] get_AllKeys();
    public string get_Item(int index);
    public string get_Item(string name);
    public void set_Item(string name, string value);
    [NullableContextAttribute("1")]
public void Add(NameValueCollection c);
    public virtual void Add(string name, string value);
    public virtual void Clear();
    [NullableContextAttribute("1")]
public void CopyTo(Array dest, int index);
    public virtual string Get(int index);
    public virtual string Get(string name);
    public virtual string GetKey(int index);
    public virtual String[] GetValues(int index);
    public virtual String[] GetValues(string name);
    public bool HasKeys();
    protected void InvalidateCachedArrays();
    public virtual void Remove(string name);
    public virtual void Set(string name, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Collections.Specialized.OrderedDictionary : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    public ICollection Keys { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    public ICollection Values { get; }
    [NullableContextAttribute("2")]
public OrderedDictionary(IEqualityComparer comparer);
    public OrderedDictionary(int capacity);
    [NullableContextAttribute("2")]
public OrderedDictionary(int capacity, IEqualityComparer comparer);
    protected OrderedDictionary(SerializationInfo info, StreamingContext context);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    [NullableContextAttribute("2")]
public sealed virtual object get_Item(int index);
    [NullableContextAttribute("2")]
public sealed virtual void set_Item(int index, object value);
    public sealed virtual object get_Item(object key);
    public sealed virtual void set_Item(object key, object value);
    public sealed virtual ICollection get_Keys();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    public sealed virtual ICollection get_Values();
    public sealed virtual void Add(object key, object value);
    public OrderedDictionary AsReadOnly();
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object key);
    public sealed virtual void CopyTo(Array array, int index);
    public virtual IDictionaryEnumerator GetEnumerator();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual void Insert(int index, object key, object value);
    [NullableContextAttribute("2")]
protected virtual void OnDeserialization(object sender);
    public sealed virtual void Remove(object key);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Collections.Specialized.StringCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public string Item { get; public set; }
    [NullableAttribute("1")]
public object SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public sealed virtual int get_Count();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public string get_Item(int index);
    public void set_Item(int index, string value);
    [NullableContextAttribute("1")]
public sealed virtual object get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public int Add(string value);
    [NullableContextAttribute("1")]
public void AddRange(String[] value);
    public sealed virtual void Clear();
    public bool Contains(string value);
    [NullableContextAttribute("1")]
public void CopyTo(String[] array, int index);
    [NullableContextAttribute("1")]
public StringEnumerator GetEnumerator();
    public int IndexOf(string value);
    public void Insert(int index, string value);
    public void Remove(string value);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DesignerSerializerAttribute("System.Diagnostics.Design.StringDictionaryCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Collections.Specialized.StringDictionary : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    [NullableAttribute("2")]
public string Item { get; public set; }
    public ICollection Keys { get; }
    public object SyncRoot { get; }
    public ICollection Values { get; }
    public virtual int get_Count();
    public virtual bool get_IsSynchronized();
    public virtual string get_Item(string key);
    public virtual void set_Item(string key, string value);
    public virtual ICollection get_Keys();
    public virtual object get_SyncRoot();
    public virtual ICollection get_Values();
    public virtual void Add(string key, string value);
    public virtual void Clear();
    public virtual bool ContainsKey(string key);
    [NullableContextAttribute("2")]
public virtual bool ContainsValue(string value);
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    public virtual void Remove(string key);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Collections.Specialized.StringEnumerator : object {
    public string Current { get; }
    public string get_Current();
    public bool MoveNext();
    public void Reset();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
