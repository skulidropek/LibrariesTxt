[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Diagnostics.Activity : object {
    public ActivityTraceFlags ActivityTraceFlags { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, string>> Baggage { get; }
    [NullableAttribute("2")]
public static Activity Current { get; public set; }
    public static ActivityIdFormat DefaultIdFormat { get; public set; }
    public TimeSpan Duration { get; }
    public static bool ForceDefaultIdFormat { get; public set; }
    [NullableAttribute("2")]
public string Id { get; }
    public bool HasRemoteParent { get; }
    public bool IsAllDataRequested { get; public set; }
    public bool IsStopped { get; }
    public ActivityIdFormat IdFormat { get; }
    public ActivityKind Kind { get; }
    public string OperationName { get; }
    public string DisplayName { get; public set; }
    public ActivitySource Source { get; }
    [NullableAttribute("2")]
public Activity Parent { get; }
    [NullableAttribute("2")]
public string ParentId { get; }
    public ActivitySpanId ParentSpanId { get; }
    public bool Recorded { get; }
    [NullableAttribute("2")]
public string RootId { get; }
    public ActivitySpanId SpanId { get; }
    public DateTime StartTimeUtc { get; }
    public ActivityStatusCode Status { get; }
    [NullableAttribute("2")]
public string StatusDescription { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, string>> Tags { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, object>> TagObjects { get; }
    public IEnumerable`1<ActivityEvent> Events { get; }
    public IEnumerable`1<ActivityLink> Links { get; }
    public ActivityTraceId TraceId { get; }
    [NullableAttribute("2")]
public string TraceStateString { get; public set; }
    [NullableAttribute("2")]
public static Func`1<ActivityTraceId> TraceIdGenerator { get; public set; }
    public ActivityContext Context { get; }
    public Activity(string operationName);
    public ActivityTraceFlags get_ActivityTraceFlags();
    public void set_ActivityTraceFlags(ActivityTraceFlags value);
    public IEnumerable`1<KeyValuePair`2<string, string>> get_Baggage();
    [NullableContextAttribute("2")]
public static Activity get_Current();
    [NullableContextAttribute("2")]
public static void set_Current(Activity value);
    [NullableContextAttribute("2")]
public static void add_CurrentChanged(EventHandler`1<ActivityChangedEventArgs> value);
    [NullableContextAttribute("2")]
public static void remove_CurrentChanged(EventHandler`1<ActivityChangedEventArgs> value);
    public static ActivityIdFormat get_DefaultIdFormat();
    public static void set_DefaultIdFormat(ActivityIdFormat value);
    public TimeSpan get_Duration();
    public static bool get_ForceDefaultIdFormat();
    public static void set_ForceDefaultIdFormat(bool value);
    [NullableContextAttribute("2")]
public string get_Id();
    public bool get_HasRemoteParent();
    public bool get_IsAllDataRequested();
    public void set_IsAllDataRequested(bool value);
    public bool get_IsStopped();
    public ActivityIdFormat get_IdFormat();
    public ActivityKind get_Kind();
    public string get_OperationName();
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public ActivitySource get_Source();
    [NullableContextAttribute("2")]
public Activity get_Parent();
    [NullableContextAttribute("2")]
public string get_ParentId();
    public ActivitySpanId get_ParentSpanId();
    public bool get_Recorded();
    [NullableContextAttribute("2")]
public string get_RootId();
    public ActivitySpanId get_SpanId();
    public DateTime get_StartTimeUtc();
    public ActivityStatusCode get_Status();
    [NullableContextAttribute("2")]
public string get_StatusDescription();
    public IEnumerable`1<KeyValuePair`2<string, string>> get_Tags();
    public IEnumerable`1<KeyValuePair`2<string, object>> get_TagObjects();
    public IEnumerable`1<ActivityEvent> get_Events();
    public IEnumerable`1<ActivityLink> get_Links();
    public ActivityTraceId get_TraceId();
    [NullableContextAttribute("2")]
public string get_TraceStateString();
    [NullableContextAttribute("2")]
public void set_TraceStateString(string value);
    public Activity AddBaggage(string key, string value);
    public Activity AddEvent(ActivityEvent e);
    public Activity AddTag(string key, string value);
    public Activity AddTag(string key, object value);
    public Activity SetTag(string key, object value);
    public Activity SetBaggage(string key, string value);
    public string GetBaggageItem(string key);
    public object GetTagItem(string key);
    public Activity SetEndTime(DateTime endTimeUtc);
    [NullableContextAttribute("2")]
public static Func`1<ActivityTraceId> get_TraceIdGenerator();
    [NullableContextAttribute("2")]
public static void set_TraceIdGenerator(Func`1<ActivityTraceId> value);
    public Activity SetIdFormat(ActivityIdFormat format);
    public Activity SetParentId(ActivityTraceId traceId, ActivitySpanId spanId, ActivityTraceFlags activityTraceFlags);
    public Activity SetParentId(string parentId);
    public Activity SetStartTime(DateTime startTimeUtc);
    public Activity SetStatus(ActivityStatusCode code, string description);
    public Activity Start();
    public void Stop();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void SetCustomProperty(string propertyName, object propertyValue);
    public object GetCustomProperty(string propertyName);
    public ActivityContext get_Context();
    public Enumerator`1<KeyValuePair`2<string, object>> EnumerateTagObjects();
    [NullableContextAttribute("0")]
public Enumerator`1<ActivityEvent> EnumerateEvents();
    [NullableContextAttribute("0")]
public Enumerator`1<ActivityLink> EnumerateLinks();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Diagnostics.ActivityChangedEventArgs : ValueType {
    public Activity Previous { get; public set; }
    public Activity Current { get; public set; }
    public Activity get_Previous();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Previous(Activity value);
    public Activity get_Current();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Current(Activity value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Diagnostics.ActivityContext : ValueType {
    public ActivityTraceId TraceId { get; }
    public ActivitySpanId SpanId { get; }
    public ActivityTraceFlags TraceFlags { get; }
    public string TraceState { get; }
    public bool IsRemote { get; }
    public ActivityContext(ActivityTraceId traceId, ActivitySpanId spanId, ActivityTraceFlags traceFlags, string traceState, bool isRemote);
    public ActivityTraceId get_TraceId();
    public ActivitySpanId get_SpanId();
    public ActivityTraceFlags get_TraceFlags();
    public string get_TraceState();
    public bool get_IsRemote();
    public static bool TryParse(string traceParent, string traceState, ActivityContext& context);
    public static bool TryParse(string traceParent, string traceState, bool isRemote, ActivityContext& context);
    [NullableContextAttribute("1")]
public static ActivityContext Parse(string traceParent, string traceState);
    public static bool op_Equality(ActivityContext left, ActivityContext right);
    public static bool op_Inequality(ActivityContext left, ActivityContext right);
    public sealed virtual bool Equals(ActivityContext value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Diagnostics.ActivityCreationOptions`1 : ValueType {
    public ActivitySource Source { get; }
    public string Name { get; }
    public ActivityKind Kind { get; }
    public T Parent { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, object>> Tags { get; }
    [NullableAttribute("2")]
public IEnumerable`1<ActivityLink> Links { get; }
    public ActivityTagsCollection SamplingTags { get; }
    public ActivityTraceId TraceId { get; }
    [NullableAttribute("2")]
public string TraceState { get; public set; }
    public ActivitySource get_Source();
    public string get_Name();
    public ActivityKind get_Kind();
    public T get_Parent();
    public IEnumerable`1<KeyValuePair`2<string, object>> get_Tags();
    [NullableContextAttribute("2")]
public IEnumerable`1<ActivityLink> get_Links();
    public ActivityTagsCollection get_SamplingTags();
    public ActivityTraceId get_TraceId();
    [NullableContextAttribute("2")]
public string get_TraceState();
    [NullableContextAttribute("2")]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TraceState(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Diagnostics.ActivityEvent : ValueType {
    public string Name { get; }
    public DateTimeOffset Timestamp { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, object>> Tags { get; }
    public ActivityEvent(string name);
    public ActivityEvent(string name, DateTimeOffset timestamp, ActivityTagsCollection tags);
    public string get_Name();
    public DateTimeOffset get_Timestamp();
    public IEnumerable`1<KeyValuePair`2<string, object>> get_Tags();
    public Enumerator`1<KeyValuePair`2<string, object>> EnumerateTagObjects();
}
public enum System.Diagnostics.ActivityIdFormat : Enum {
    public int value__;
    public static ActivityIdFormat Unknown;
    public static ActivityIdFormat Hierarchical;
    public static ActivityIdFormat W3C;
}
public enum System.Diagnostics.ActivityKind : Enum {
    public int value__;
    public static ActivityKind Internal;
    public static ActivityKind Server;
    public static ActivityKind Client;
    public static ActivityKind Producer;
    public static ActivityKind Consumer;
}
[IsReadOnlyAttribute]
public class System.Diagnostics.ActivityLink : ValueType {
    public ActivityContext Context { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, object>> Tags { get; }
    [NullableContextAttribute("2")]
public ActivityLink(ActivityContext context, ActivityTagsCollection tags);
    public ActivityContext get_Context();
    public IEnumerable`1<KeyValuePair`2<string, object>> get_Tags();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ActivityLink value);
    public static bool op_Equality(ActivityLink left, ActivityLink right);
    public static bool op_Inequality(ActivityLink left, ActivityLink right);
    public virtual int GetHashCode();
    public Enumerator`1<KeyValuePair`2<string, object>> EnumerateTagObjects();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Diagnostics.ActivityListener : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<Activity> ActivityStarted { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<Activity> ActivityStopped { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<ActivitySource, bool> ShouldListenTo { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SampleActivity`1<string> SampleUsingParentId { get; public set; }
    public SampleActivity`1<ActivityContext> Sample { get; public set; }
    public Action`1<Activity> get_ActivityStarted();
    public void set_ActivityStarted(Action`1<Activity> value);
    public Action`1<Activity> get_ActivityStopped();
    public void set_ActivityStopped(Action`1<Activity> value);
    public Func`2<ActivitySource, bool> get_ShouldListenTo();
    public void set_ShouldListenTo(Func`2<ActivitySource, bool> value);
    public SampleActivity`1<string> get_SampleUsingParentId();
    public void set_SampleUsingParentId(SampleActivity`1<string> value);
    public SampleActivity`1<ActivityContext> get_Sample();
    public void set_Sample(SampleActivity`1<ActivityContext> value);
    public sealed virtual void Dispose();
}
public enum System.Diagnostics.ActivitySamplingResult : Enum {
    public int value__;
    public static ActivitySamplingResult None;
    public static ActivitySamplingResult PropagationData;
    public static ActivitySamplingResult AllData;
    public static ActivitySamplingResult AllDataAndRecorded;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Diagnostics.ActivitySource : object {
    [NullableAttribute("1")]
public string Name { get; }
    public string Version { get; }
    [NullableContextAttribute("1")]
public ActivitySource(string name, string version);
    [NullableContextAttribute("1")]
public string get_Name();
    public string get_Version();
    public bool HasListeners();
    [NullableContextAttribute("1")]
public Activity CreateActivity(string name, ActivityKind kind);
    public Activity CreateActivity(string name, ActivityKind kind, ActivityContext parentContext, IEnumerable`1<KeyValuePair`2<string, object>> tags, IEnumerable`1<ActivityLink> links, ActivityIdFormat idFormat);
    public Activity CreateActivity(string name, ActivityKind kind, string parentId, IEnumerable`1<KeyValuePair`2<string, object>> tags, IEnumerable`1<ActivityLink> links, ActivityIdFormat idFormat);
    [NullableContextAttribute("1")]
public Activity StartActivity(string name, ActivityKind kind);
    public Activity StartActivity(string name, ActivityKind kind, ActivityContext parentContext, IEnumerable`1<KeyValuePair`2<string, object>> tags, IEnumerable`1<ActivityLink> links, DateTimeOffset startTime);
    public Activity StartActivity(string name, ActivityKind kind, string parentId, IEnumerable`1<KeyValuePair`2<string, object>> tags, IEnumerable`1<ActivityLink> links, DateTimeOffset startTime);
    public Activity StartActivity(ActivityKind kind, ActivityContext parentContext, IEnumerable`1<KeyValuePair`2<string, object>> tags, IEnumerable`1<ActivityLink> links, DateTimeOffset startTime, string name);
    [NullableContextAttribute("1")]
public static void AddActivityListener(ActivityListener listener);
    public sealed virtual void Dispose();
}
[IsReadOnlyAttribute]
public class System.Diagnostics.ActivitySpanId : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public void CopyTo(Span`1<byte> destination);
    public static ActivitySpanId CreateFromBytes(ReadOnlySpan`1<byte> idData);
    public static ActivitySpanId CreateFromString(ReadOnlySpan`1<char> idData);
    public static ActivitySpanId CreateFromUtf8String(ReadOnlySpan`1<byte> idData);
    public static ActivitySpanId CreateRandom();
    public sealed virtual bool Equals(ActivitySpanId spanId);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ActivitySpanId spanId1, ActivitySpanId spandId2);
    public static bool op_Inequality(ActivitySpanId spanId1, ActivitySpanId spandId2);
    [NullableContextAttribute("1")]
public string ToHexString();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public enum System.Diagnostics.ActivityStatusCode : Enum {
    public int value__;
    public static ActivityStatusCode Unset;
    public static ActivityStatusCode Ok;
    public static ActivityStatusCode Error;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Diagnostics.ActivityTagsCollection : object {
    [NullableAttribute("2")]
public object Item { get; public set; }
    public ICollection`1<string> Keys { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollection`1<object> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ActivityTagsCollection(IEnumerable`1<KeyValuePair`2<string, object>> list);
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(string key, object value);
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
    public sealed virtual bool Remove(string key);
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public sealed virtual bool TryGetValue(string key, Object& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public Enumerator GetEnumerator();
}
[FlagsAttribute]
public enum System.Diagnostics.ActivityTraceFlags : Enum {
    public int value__;
    public static ActivityTraceFlags None;
    public static ActivityTraceFlags Recorded;
}
[IsReadOnlyAttribute]
public class System.Diagnostics.ActivityTraceId : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public void CopyTo(Span`1<byte> destination);
    public static ActivityTraceId CreateFromBytes(ReadOnlySpan`1<byte> idData);
    public static ActivityTraceId CreateFromString(ReadOnlySpan`1<char> idData);
    public static ActivityTraceId CreateFromUtf8String(ReadOnlySpan`1<byte> idData);
    public static ActivityTraceId CreateRandom();
    public sealed virtual bool Equals(ActivityTraceId traceId);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ActivityTraceId traceId1, ActivityTraceId traceId2);
    public static bool op_Inequality(ActivityTraceId traceId1, ActivityTraceId traceId2);
    [NullableContextAttribute("1")]
public string ToHexString();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Diagnostics.DiagnosticListener : DiagnosticSource {
    public static IObservable`1<DiagnosticListener> AllListeners { get; }
    public string Name { get; }
    public DiagnosticListener(string name);
    public static IObservable`1<DiagnosticListener> get_AllListeners();
    public string get_Name();
    public virtual void Dispose();
    public bool IsEnabled();
    public virtual bool IsEnabled(string name);
    [NullableContextAttribute("2")]
public virtual bool IsEnabled(string name, object arg1, object arg2);
    public virtual IDisposable Subscribe(IObserver`1<KeyValuePair`2<string, object>> observer);
    public virtual IDisposable Subscribe(IObserver`1<KeyValuePair`2<string, object>> observer, Func`4<string, object, object, bool> isEnabled);
    public virtual IDisposable Subscribe(IObserver`1<KeyValuePair`2<string, object>> observer, Predicate`1<string> isEnabled);
    public virtual string ToString();
    [RequiresUnreferencedCodeAttribute("The type of object being written to DiagnosticSource cannot be discovered statically.")]
public virtual void Write(string name, object value);
    public virtual void OnActivityExport(Activity activity, object payload);
    public virtual void OnActivityImport(Activity activity, object payload);
    public virtual IDisposable Subscribe(IObserver`1<KeyValuePair`2<string, object>> observer, Func`4<string, object, object, bool> isEnabled, Action`2<Activity, object> onActivityImport, Action`2<Activity, object> onActivityExport);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Diagnostics.DiagnosticSource : object {
    public abstract virtual bool IsEnabled(string name);
    [NullableContextAttribute("2")]
public virtual bool IsEnabled(string name, object arg1, object arg2);
    [RequiresUnreferencedCodeAttribute("The type of object being written to DiagnosticSource cannot be discovered statically.")]
public abstract virtual void Write(string name, object value);
    public virtual void OnActivityExport(Activity activity, object payload);
    public virtual void OnActivityImport(Activity activity, object payload);
    [RequiresUnreferencedCodeAttribute("The type of object being written to DiagnosticSource cannot be discovered statically.")]
public Activity StartActivity(Activity activity, object args);
    [RequiresUnreferencedCodeAttribute("The type of object being written to DiagnosticSource cannot be discovered statically.")]
public void StopActivity(Activity activity, object args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Diagnostics.DistributedContextPropagator : object {
    [CompilerGeneratedAttribute]
private static DistributedContextPropagator <Current>k__BackingField;
    public IReadOnlyCollection`1<string> Fields { get; }
    public static DistributedContextPropagator Current { get; public set; }
    public abstract virtual IReadOnlyCollection`1<string> get_Fields();
    [NullableContextAttribute("2")]
public abstract virtual void Inject(Activity activity, object carrier, PropagatorSetterCallback setter);
    [NullableContextAttribute("2")]
public abstract virtual void ExtractTraceIdAndState(object carrier, PropagatorGetterCallback getter, String& traceId, String& traceState);
    [NullableContextAttribute("2")]
public abstract virtual IEnumerable`1<KeyValuePair`2<string, string>> ExtractBaggage(object carrier, PropagatorGetterCallback getter);
    [CompilerGeneratedAttribute]
public static DistributedContextPropagator get_Current();
    [CompilerGeneratedAttribute]
public static void set_Current(DistributedContextPropagator value);
    public static DistributedContextPropagator CreateDefaultPropagator();
    public static DistributedContextPropagator CreatePassThroughPropagator();
    public static DistributedContextPropagator CreateNoOutputPropagator();
}
public class System.Diagnostics.Metrics.Counter`1 : Instrument`1<T> {
    internal Counter`1(Meter meter, string name, string unit, string description);
    public void Add(T delta);
    public void Add(T delta, KeyValuePair`2<string, object> tag);
    public void Add(T delta, KeyValuePair`2<string, object> tag1, KeyValuePair`2<string, object> tag2);
    public void Add(T delta, KeyValuePair`2<string, object> tag1, KeyValuePair`2<string, object> tag2, KeyValuePair`2<string, object> tag3);
    public void Add(T delta, ReadOnlySpan`1<KeyValuePair`2<string, object>> tags);
    public void Add(T delta, KeyValuePair`2[] tags);
    public void Add(T delta, TagList& tagList);
}
public class System.Diagnostics.Metrics.Histogram`1 : Instrument`1<T> {
    internal Histogram`1(Meter meter, string name, string unit, string description);
    public void Record(T value);
    public void Record(T value, KeyValuePair`2<string, object> tag);
    public void Record(T value, KeyValuePair`2<string, object> tag1, KeyValuePair`2<string, object> tag2);
    public void Record(T value, KeyValuePair`2<string, object> tag1, KeyValuePair`2<string, object> tag2, KeyValuePair`2<string, object> tag3);
    public void Record(T value, TagList& tagList);
    public void Record(T value, ReadOnlySpan`1<KeyValuePair`2<string, object>> tags);
    public void Record(T value, KeyValuePair`2[] tags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Diagnostics.Metrics.Instrument : object {
    [NullableAttribute("2")]
public string Description { get; }
    public bool Enabled { get; }
    public bool IsObservable { get; }
    public Meter Meter { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public string Unit { get; }
    protected Instrument(Meter meter, string name, string unit, string description);
    [NullableContextAttribute("2")]
public string get_Description();
    public bool get_Enabled();
    public virtual bool get_IsObservable();
    public Meter get_Meter();
    public string get_Name();
    protected void Publish();
    [NullableContextAttribute("2")]
public string get_Unit();
}
public abstract class System.Diagnostics.Metrics.Instrument`1 : Instrument {
    [NullableContextAttribute("1")]
protected Instrument`1(Meter meter, string name, string unit, string description);
    protected void RecordMeasurement(T measurement);
    protected void RecordMeasurement(T measurement, KeyValuePair`2<string, object> tag);
    protected void RecordMeasurement(T measurement, KeyValuePair`2<string, object> tag1, KeyValuePair`2<string, object> tag2);
    protected void RecordMeasurement(T measurement, KeyValuePair`2<string, object> tag1, KeyValuePair`2<string, object> tag2, KeyValuePair`2<string, object> tag3);
    protected void RecordMeasurement(T measurement, TagList& tagList);
    protected void RecordMeasurement(T measurement, ReadOnlySpan`1<KeyValuePair`2<string, object>> tags);
}
[IsReadOnlyAttribute]
public class System.Diagnostics.Metrics.Measurement`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ReadOnlySpan`1<KeyValuePair`2<string, object>> Tags { get; }
    public T Value { get; }
    public Measurement`1(T value);
    public Measurement`1(T value, IEnumerable`1<KeyValuePair`2<string, object>> tags);
    public Measurement`1(T value, KeyValuePair`2[] tags);
    public Measurement`1(T value, ReadOnlySpan`1<KeyValuePair`2<string, object>> tags);
    public ReadOnlySpan`1<KeyValuePair`2<string, object>> get_Tags();
    public T get_Value();
}
public class System.Diagnostics.Metrics.MeasurementCallback`1 : MulticastDelegate {
    public MeasurementCallback`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(Instrument instrument, T measurement, ReadOnlySpan`1<KeyValuePair`2<string, object>> tags, object state);
    public virtual IAsyncResult BeginInvoke(Instrument instrument, T measurement, ReadOnlySpan`1<KeyValuePair`2<string, object>> tags, object state, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Diagnostics.Metrics.Meter : object {
    [NullableAttribute("1")]
public string Name { get; }
    public string Version { get; }
    [NullableContextAttribute("1")]
public Meter(string name);
    [NullableContextAttribute("1")]
public Meter(string name, string version);
    public Counter`1<T> CreateCounter(string name, string unit, string description);
    public UpDownCounter`1<T> CreateUpDownCounter(string name, string unit, string description);
    public Histogram`1<T> CreateHistogram(string name, string unit, string description);
    public ObservableCounter`1<T> CreateObservableCounter(string name, Func`1<T> observeValue, string unit, string description);
    public ObservableCounter`1<T> CreateObservableCounter(string name, Func`1<Measurement`1<T>> observeValue, string unit, string description);
    public ObservableCounter`1<T> CreateObservableCounter(string name, Func`1<IEnumerable`1<Measurement`1<T>>> observeValues, string unit, string description);
    public ObservableUpDownCounter`1<T> CreateObservableUpDownCounter(string name, Func`1<T> observeValue, string unit, string description);
    public ObservableUpDownCounter`1<T> CreateObservableUpDownCounter(string name, Func`1<Measurement`1<T>> observeValue, string unit, string description);
    public ObservableUpDownCounter`1<T> CreateObservableUpDownCounter(string name, Func`1<IEnumerable`1<Measurement`1<T>>> observeValues, string unit, string description);
    public ObservableGauge`1<T> CreateObservableGauge(string name, Func`1<T> observeValue, string unit, string description);
    public ObservableGauge`1<T> CreateObservableGauge(string name, Func`1<Measurement`1<T>> observeValue, string unit, string description);
    public ObservableGauge`1<T> CreateObservableGauge(string name, Func`1<IEnumerable`1<Measurement`1<T>>> observeValues, string unit, string description);
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
public string get_Name();
    public string get_Version();
}
public class System.Diagnostics.Metrics.MeterListener : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<Instrument, MeterListener> InstrumentPublished { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<Instrument, object> MeasurementsCompleted { get; public set; }
    [NullableContextAttribute("1")]
public object DisableMeasurementEvents(Instrument instrument);
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
public void EnableMeasurementEvents(Instrument instrument, object state);
    public Action`2<Instrument, MeterListener> get_InstrumentPublished();
    public void set_InstrumentPublished(Action`2<Instrument, MeterListener> value);
    public Action`2<Instrument, object> get_MeasurementsCompleted();
    public void set_MeasurementsCompleted(Action`2<Instrument, object> value);
    public void RecordObservableInstruments();
    public void SetMeasurementEventCallback(MeasurementCallback`1<T> measurementCallback);
    public void Start();
}
public class System.Diagnostics.Metrics.ObservableCounter`1 : ObservableInstrument`1<T> {
    internal ObservableCounter`1(Meter meter, string name, string unit, string description);
    protected virtual IEnumerable`1<Measurement`1<T>> Observe();
}
public class System.Diagnostics.Metrics.ObservableGauge`1 : ObservableInstrument`1<T> {
    internal ObservableGauge`1(Meter meter, string name, string unit, string description);
    protected virtual IEnumerable`1<Measurement`1<T>> Observe();
}
public abstract class System.Diagnostics.Metrics.ObservableInstrument`1 : Instrument {
    public bool IsObservable { get; }
    [NullableContextAttribute("1")]
protected ObservableInstrument`1(Meter meter, string name, string unit, string description);
    public virtual bool get_IsObservable();
    protected abstract virtual IEnumerable`1<Measurement`1<T>> Observe();
}
public class System.Diagnostics.Metrics.ObservableUpDownCounter`1 : ObservableInstrument`1<T> {
    internal ObservableUpDownCounter`1(Meter meter, string name, string unit, string description);
    protected virtual IEnumerable`1<Measurement`1<T>> Observe();
}
public class System.Diagnostics.Metrics.UpDownCounter`1 : Instrument`1<T> {
    internal UpDownCounter`1(Meter meter, string name, string unit, string description);
    public void Add(T delta);
    public void Add(T delta, KeyValuePair`2<string, object> tag);
    public void Add(T delta, KeyValuePair`2<string, object> tag1, KeyValuePair`2<string, object> tag2);
    public void Add(T delta, KeyValuePair`2<string, object> tag1, KeyValuePair`2<string, object> tag2, KeyValuePair`2<string, object> tag3);
    public void Add(T delta, ReadOnlySpan`1<KeyValuePair`2<string, object>> tags);
    public void Add(T delta, KeyValuePair`2[] tags);
    public void Add(T delta, TagList& tagList);
}
public class System.Diagnostics.SampleActivity`1 : MulticastDelegate {
    public SampleActivity`1(object object, IntPtr method);
    public virtual ActivitySamplingResult Invoke(ActivityCreationOptions`1& options);
    public virtual IAsyncResult BeginInvoke(ActivityCreationOptions`1& options, AsyncCallback callback, object object);
    public virtual ActivitySamplingResult EndInvoke(ActivityCreationOptions`1& options, IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class System.Diagnostics.TagList : ValueType {
    public int Count { get; }
    public bool IsReadOnly { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public KeyValuePair`2<string, object> Item { get; public set; }
    public TagList(ReadOnlySpan`1<KeyValuePair`2<string, object>> tagList);
    [IsReadOnlyAttribute]
public sealed virtual int get_Count();
    [IsReadOnlyAttribute]
public sealed virtual bool get_IsReadOnly();
    [IsReadOnlyAttribute]
public sealed virtual KeyValuePair`2<string, object> get_Item(int index);
    public sealed virtual void set_Item(int index, KeyValuePair`2<string, object> value);
    [NullableContextAttribute("1")]
public void Add(string key, object value);
    public sealed virtual void Add(KeyValuePair`2<string, object> tag);
    [IsReadOnlyAttribute]
public void CopyTo(Span`1<KeyValuePair`2<string, object>> tags);
    public sealed virtual void Insert(int index, KeyValuePair`2<string, object> item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Clear();
    [IsReadOnlyAttribute]
public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    [IsReadOnlyAttribute]
public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    [IsReadOnlyAttribute]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    [IsReadOnlyAttribute]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IsReadOnlyAttribute]
public sealed virtual int IndexOf(KeyValuePair`2<string, object> item);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
