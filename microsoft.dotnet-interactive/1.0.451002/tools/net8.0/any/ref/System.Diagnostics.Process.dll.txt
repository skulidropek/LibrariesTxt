[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.Win32.SafeHandles.SafeProcessHandle : SafeHandleZeroOrMinusOneIsInvalid {
    public SafeProcessHandle(IntPtr existingHandle, bool ownsHandle);
    protected virtual bool ReleaseHandle();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Diagnostics.DataReceivedEventArgs : EventArgs {
    public string Data { get; }
    public string get_Data();
}
public class System.Diagnostics.DataReceivedEventHandler : MulticastDelegate {
    public DataReceivedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataReceivedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataReceivedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
public class System.Diagnostics.MonitoringDescriptionAttribute : DescriptionAttribute {
    public string Description { get; }
    public MonitoringDescriptionAttribute(string description);
    public virtual string get_Description();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DesignerAttribute("System.Diagnostics.Design.ProcessDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Diagnostics.Process : Component {
    public int BasePriority { get; }
    public bool EnableRaisingEvents { get; public set; }
    public int ExitCode { get; }
    public DateTime ExitTime { get; }
    public IntPtr Handle { get; }
    public int HandleCount { get; }
    public bool HasExited { get; }
    public int Id { get; }
    public string MachineName { get; }
    [NullableAttribute("2")]
public ProcessModule MainModule { get; }
    public IntPtr MainWindowHandle { get; }
    public string MainWindowTitle { get; }
    public IntPtr MaxWorkingSet { get; public set; }
    public IntPtr MinWorkingSet { get; public set; }
    public ProcessModuleCollection Modules { get; }
    [ObsoleteAttribute("Process.NonpagedSystemMemorySize has been deprecated because the type of the property can't represent all valid results. Use System.Diagnostics.Process.NonpagedSystemMemorySize64 instead.")]
public int NonpagedSystemMemorySize { get; }
    public long NonpagedSystemMemorySize64 { get; }
    [ObsoleteAttribute("Process.PagedMemorySize has been deprecated because the type of the property can't represent all valid results. Use System.Diagnostics.Process.PagedMemorySize64 instead.")]
public int PagedMemorySize { get; }
    public long PagedMemorySize64 { get; }
    [ObsoleteAttribute("Process.PagedSystemMemorySize has been deprecated because the type of the property can't represent all valid results. Use System.Diagnostics.Process.PagedSystemMemorySize64 instead.")]
public int PagedSystemMemorySize { get; }
    public long PagedSystemMemorySize64 { get; }
    [ObsoleteAttribute("Process.PeakPagedMemorySize has been deprecated because the type of the property can't represent all valid results. Use System.Diagnostics.Process.PeakPagedMemorySize64 instead.")]
public int PeakPagedMemorySize { get; }
    public long PeakPagedMemorySize64 { get; }
    [ObsoleteAttribute("Process.PeakVirtualMemorySize has been deprecated because the type of the property can't represent all valid results. Use System.Diagnostics.Process.PeakVirtualMemorySize64 instead.")]
public int PeakVirtualMemorySize { get; }
    public long PeakVirtualMemorySize64 { get; }
    [ObsoleteAttribute("Process.PeakWorkingSet has been deprecated because the type of the property can't represent all valid results. Use System.Diagnostics.Process.PeakWorkingSet64 instead.")]
public int PeakWorkingSet { get; }
    public long PeakWorkingSet64 { get; }
    public bool PriorityBoostEnabled { get; public set; }
    public ProcessPriorityClass PriorityClass { get; public set; }
    [ObsoleteAttribute("Process.PrivateMemorySize has been deprecated because the type of the property can't represent all valid results. Use System.Diagnostics.Process.PrivateMemorySize64 instead.")]
public int PrivateMemorySize { get; }
    public long PrivateMemorySize64 { get; }
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public TimeSpan PrivilegedProcessorTime { get; }
    public string ProcessName { get; }
    [SupportedOSPlatformAttribute("windows")]
[SupportedOSPlatformAttribute("linux")]
public IntPtr ProcessorAffinity { get; public set; }
    public bool Responding { get; }
    public SafeProcessHandle SafeHandle { get; }
    public int SessionId { get; }
    public StreamReader StandardError { get; }
    public StreamWriter StandardInput { get; }
    public StreamReader StandardOutput { get; }
    public ProcessStartInfo StartInfo { get; public set; }
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public DateTime StartTime { get; }
    [NullableAttribute("2")]
public ISynchronizeInvoke SynchronizingObject { get; public set; }
    public ProcessThreadCollection Threads { get; }
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public TimeSpan TotalProcessorTime { get; }
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public TimeSpan UserProcessorTime { get; }
    [ObsoleteAttribute("Process.VirtualMemorySize has been deprecated because the type of the property can't represent all valid results. Use System.Diagnostics.Process.VirtualMemorySize64 instead.")]
public int VirtualMemorySize { get; }
    public long VirtualMemorySize64 { get; }
    [ObsoleteAttribute("Process.WorkingSet has been deprecated because the type of the property can't represent all valid results. Use System.Diagnostics.Process.WorkingSet64 instead.")]
public int WorkingSet { get; }
    public long WorkingSet64 { get; }
    public int get_BasePriority();
    public bool get_EnableRaisingEvents();
    public void set_EnableRaisingEvents(bool value);
    public int get_ExitCode();
    public DateTime get_ExitTime();
    public IntPtr get_Handle();
    public int get_HandleCount();
    public bool get_HasExited();
    public int get_Id();
    public string get_MachineName();
    [NullableContextAttribute("2")]
public ProcessModule get_MainModule();
    public IntPtr get_MainWindowHandle();
    public string get_MainWindowTitle();
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public IntPtr get_MaxWorkingSet();
    [SupportedOSPlatformAttribute("freebsd")]
[SupportedOSPlatformAttribute("macos")]
[SupportedOSPlatformAttribute("maccatalyst")]
[SupportedOSPlatformAttribute("windows")]
public void set_MaxWorkingSet(IntPtr value);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public IntPtr get_MinWorkingSet();
    [SupportedOSPlatformAttribute("freebsd")]
[SupportedOSPlatformAttribute("macos")]
[SupportedOSPlatformAttribute("maccatalyst")]
[SupportedOSPlatformAttribute("windows")]
public void set_MinWorkingSet(IntPtr value);
    public ProcessModuleCollection get_Modules();
    public int get_NonpagedSystemMemorySize();
    public long get_NonpagedSystemMemorySize64();
    public int get_PagedMemorySize();
    public long get_PagedMemorySize64();
    public int get_PagedSystemMemorySize();
    public long get_PagedSystemMemorySize64();
    public int get_PeakPagedMemorySize();
    public long get_PeakPagedMemorySize64();
    public int get_PeakVirtualMemorySize();
    public long get_PeakVirtualMemorySize64();
    public int get_PeakWorkingSet();
    public long get_PeakWorkingSet64();
    public bool get_PriorityBoostEnabled();
    public void set_PriorityBoostEnabled(bool value);
    public ProcessPriorityClass get_PriorityClass();
    public void set_PriorityClass(ProcessPriorityClass value);
    public int get_PrivateMemorySize();
    public long get_PrivateMemorySize64();
    public TimeSpan get_PrivilegedProcessorTime();
    public string get_ProcessName();
    public IntPtr get_ProcessorAffinity();
    public void set_ProcessorAffinity(IntPtr value);
    public bool get_Responding();
    public SafeProcessHandle get_SafeHandle();
    public int get_SessionId();
    public StreamReader get_StandardError();
    public StreamWriter get_StandardInput();
    public StreamReader get_StandardOutput();
    public ProcessStartInfo get_StartInfo();
    public void set_StartInfo(ProcessStartInfo value);
    public DateTime get_StartTime();
    [NullableContextAttribute("2")]
public ISynchronizeInvoke get_SynchronizingObject();
    [NullableContextAttribute("2")]
public void set_SynchronizingObject(ISynchronizeInvoke value);
    public ProcessThreadCollection get_Threads();
    public TimeSpan get_TotalProcessorTime();
    public TimeSpan get_UserProcessorTime();
    public int get_VirtualMemorySize();
    public long get_VirtualMemorySize64();
    public int get_WorkingSet();
    public long get_WorkingSet64();
    [NullableContextAttribute("2")]
public void add_ErrorDataReceived(DataReceivedEventHandler value);
    [NullableContextAttribute("2")]
public void remove_ErrorDataReceived(DataReceivedEventHandler value);
    public void add_Exited(EventHandler value);
    public void remove_Exited(EventHandler value);
    [NullableContextAttribute("2")]
public void add_OutputDataReceived(DataReceivedEventHandler value);
    [NullableContextAttribute("2")]
public void remove_OutputDataReceived(DataReceivedEventHandler value);
    public void BeginErrorReadLine();
    public void BeginOutputReadLine();
    public void CancelErrorRead();
    public void CancelOutputRead();
    public void Close();
    public bool CloseMainWindow();
    protected virtual void Dispose(bool disposing);
    public static void EnterDebugMode();
    public static Process GetCurrentProcess();
    public static Process GetProcessById(int processId);
    public static Process GetProcessById(int processId, string machineName);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public static Process[] GetProcesses();
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public static Process[] GetProcesses(string machineName);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public static Process[] GetProcessesByName(string processName);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public static Process[] GetProcessesByName(string processName, string machineName);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public void Kill();
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public void Kill(bool entireProcessTree);
    public static void LeaveDebugMode();
    protected void OnExited();
    public void Refresh();
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public bool Start();
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public static Process Start(ProcessStartInfo startInfo);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public static Process Start(string fileName);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public static Process Start(string fileName, string arguments);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public static Process Start(string fileName, IEnumerable`1<string> arguments);
    [CLSCompliantAttribute("False")]
[SupportedOSPlatformAttribute("windows")]
public static Process Start(string fileName, string userName, SecureString password, string domain);
    [CLSCompliantAttribute("False")]
[SupportedOSPlatformAttribute("windows")]
public static Process Start(string fileName, string arguments, string userName, SecureString password, string domain);
    public virtual string ToString();
    public void WaitForExit();
    public bool WaitForExit(int milliseconds);
    public bool WaitForExit(TimeSpan timeout);
    public Task WaitForExitAsync(CancellationToken cancellationToken);
    public bool WaitForInputIdle();
    public bool WaitForInputIdle(int milliseconds);
    public bool WaitForInputIdle(TimeSpan timeout);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DesignerAttribute("System.Diagnostics.Design.ProcessModuleDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Diagnostics.ProcessModule : Component {
    public IntPtr BaseAddress { get; }
    public IntPtr EntryPointAddress { get; }
    public string FileName { get; }
    public FileVersionInfo FileVersionInfo { get; }
    public int ModuleMemorySize { get; }
    public string ModuleName { get; }
    public IntPtr get_BaseAddress();
    public IntPtr get_EntryPointAddress();
    public string get_FileName();
    public FileVersionInfo get_FileVersionInfo();
    public int get_ModuleMemorySize();
    public string get_ModuleName();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Diagnostics.ProcessModuleCollection : ReadOnlyCollectionBase {
    public ProcessModule Item { get; }
    public ProcessModuleCollection(ProcessModule[] processModules);
    public ProcessModule get_Item(int index);
    public bool Contains(ProcessModule module);
    public void CopyTo(ProcessModule[] array, int index);
    public int IndexOf(ProcessModule module);
}
public enum System.Diagnostics.ProcessPriorityClass : Enum {
    public int value__;
    public static ProcessPriorityClass Normal;
    public static ProcessPriorityClass Idle;
    public static ProcessPriorityClass High;
    public static ProcessPriorityClass RealTime;
    public static ProcessPriorityClass BelowNormal;
    public static ProcessPriorityClass AboveNormal;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Diagnostics.ProcessStartInfo : object {
    public Collection`1<string> ArgumentList { get; }
    public string Arguments { get; public set; }
    public bool CreateNoWindow { get; public set; }
    [SupportedOSPlatformAttribute("windows")]
public string Domain { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, string> Environment { get; }
    [EditorAttribute("System.Diagnostics.Design.StringDictionaryEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public StringDictionary EnvironmentVariables { get; }
    public bool ErrorDialog { get; public set; }
    public IntPtr ErrorDialogParentHandle { get; public set; }
    [EditorAttribute("System.Diagnostics.Design.StartFileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string FileName { get; public set; }
    [SupportedOSPlatformAttribute("windows")]
public bool LoadUserProfile { get; public set; }
    [NullableAttribute("2")]
[CLSCompliantAttribute("False")]
[SupportedOSPlatformAttribute("windows")]
public SecureString Password { get; public set; }
    [NullableAttribute("2")]
[SupportedOSPlatformAttribute("windows")]
public string PasswordInClearText { get; public set; }
    public bool RedirectStandardError { get; public set; }
    public bool RedirectStandardInput { get; public set; }
    public bool RedirectStandardOutput { get; public set; }
    [NullableAttribute("2")]
public Encoding StandardErrorEncoding { get; public set; }
    [NullableAttribute("2")]
public Encoding StandardInputEncoding { get; public set; }
    [NullableAttribute("2")]
public Encoding StandardOutputEncoding { get; public set; }
    public string UserName { get; public set; }
    public bool UseShellExecute { get; public set; }
    [DefaultValueAttribute("")]
public string Verb { get; public set; }
    public String[] Verbs { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ProcessWindowStyle WindowStyle { get; public set; }
    [EditorAttribute("System.Diagnostics.Design.WorkingDirectoryEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string WorkingDirectory { get; public set; }
    public ProcessStartInfo(string fileName);
    public ProcessStartInfo(string fileName, string arguments);
    public Collection`1<string> get_ArgumentList();
    public string get_Arguments();
    public void set_Arguments(string value);
    public bool get_CreateNoWindow();
    public void set_CreateNoWindow(bool value);
    public string get_Domain();
    public void set_Domain(string value);
    public IDictionary`2<string, string> get_Environment();
    public StringDictionary get_EnvironmentVariables();
    public bool get_ErrorDialog();
    public void set_ErrorDialog(bool value);
    public IntPtr get_ErrorDialogParentHandle();
    public void set_ErrorDialogParentHandle(IntPtr value);
    public string get_FileName();
    public void set_FileName(string value);
    public bool get_LoadUserProfile();
    public void set_LoadUserProfile(bool value);
    [NullableContextAttribute("2")]
public SecureString get_Password();
    [NullableContextAttribute("2")]
public void set_Password(SecureString value);
    [NullableContextAttribute("2")]
public string get_PasswordInClearText();
    [NullableContextAttribute("2")]
public void set_PasswordInClearText(string value);
    public bool get_RedirectStandardError();
    public void set_RedirectStandardError(bool value);
    public bool get_RedirectStandardInput();
    public void set_RedirectStandardInput(bool value);
    public bool get_RedirectStandardOutput();
    public void set_RedirectStandardOutput(bool value);
    [NullableContextAttribute("2")]
public Encoding get_StandardErrorEncoding();
    [NullableContextAttribute("2")]
public void set_StandardErrorEncoding(Encoding value);
    [NullableContextAttribute("2")]
public Encoding get_StandardInputEncoding();
    [NullableContextAttribute("2")]
public void set_StandardInputEncoding(Encoding value);
    [NullableContextAttribute("2")]
public Encoding get_StandardOutputEncoding();
    [NullableContextAttribute("2")]
public void set_StandardOutputEncoding(Encoding value);
    public string get_UserName();
    public void set_UserName(string value);
    public bool get_UseShellExecute();
    public void set_UseShellExecute(bool value);
    public string get_Verb();
    public void set_Verb(string value);
    public String[] get_Verbs();
    public ProcessWindowStyle get_WindowStyle();
    public void set_WindowStyle(ProcessWindowStyle value);
    public string get_WorkingDirectory();
    public void set_WorkingDirectory(string value);
}
[DesignerAttribute("System.Diagnostics.Design.ProcessThreadDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Diagnostics.ProcessThread : Component {
    public int BasePriority { get; }
    public int CurrentPriority { get; }
    public int Id { get; }
    unknown int IdealProcessor {public set; }
    public bool PriorityBoostEnabled { get; public set; }
    public ThreadPriorityLevel PriorityLevel { get; public set; }
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public TimeSpan PrivilegedProcessorTime { get; }
    [SupportedOSPlatformAttribute("windows")]
unknown IntPtr ProcessorAffinity {public set; }
    public IntPtr StartAddress { get; }
    [SupportedOSPlatformAttribute("windows")]
[SupportedOSPlatformAttribute("linux")]
public DateTime StartTime { get; }
    public ThreadState ThreadState { get; }
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public TimeSpan TotalProcessorTime { get; }
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public TimeSpan UserProcessorTime { get; }
    public ThreadWaitReason WaitReason { get; }
    public int get_BasePriority();
    public int get_CurrentPriority();
    public int get_Id();
    public void set_IdealProcessor(int value);
    public bool get_PriorityBoostEnabled();
    public void set_PriorityBoostEnabled(bool value);
    [SupportedOSPlatformAttribute("windows")]
[SupportedOSPlatformAttribute("linux")]
[SupportedOSPlatformAttribute("freebsd")]
public ThreadPriorityLevel get_PriorityLevel();
    [SupportedOSPlatformAttribute("windows")]
public void set_PriorityLevel(ThreadPriorityLevel value);
    public TimeSpan get_PrivilegedProcessorTime();
    public void set_ProcessorAffinity(IntPtr value);
    public IntPtr get_StartAddress();
    public DateTime get_StartTime();
    public ThreadState get_ThreadState();
    public TimeSpan get_TotalProcessorTime();
    public TimeSpan get_UserProcessorTime();
    public ThreadWaitReason get_WaitReason();
    public void ResetIdealProcessor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Diagnostics.ProcessThreadCollection : ReadOnlyCollectionBase {
    public ProcessThread Item { get; }
    public ProcessThreadCollection(ProcessThread[] processThreads);
    public ProcessThread get_Item(int index);
    public int Add(ProcessThread thread);
    public bool Contains(ProcessThread thread);
    public void CopyTo(ProcessThread[] array, int index);
    public int IndexOf(ProcessThread thread);
    public void Insert(int index, ProcessThread thread);
    public void Remove(ProcessThread thread);
}
public enum System.Diagnostics.ProcessWindowStyle : Enum {
    public int value__;
    public static ProcessWindowStyle Normal;
    public static ProcessWindowStyle Hidden;
    public static ProcessWindowStyle Minimized;
    public static ProcessWindowStyle Maximized;
}
public enum System.Diagnostics.ThreadPriorityLevel : Enum {
    public int value__;
    public static ThreadPriorityLevel Idle;
    public static ThreadPriorityLevel Lowest;
    public static ThreadPriorityLevel BelowNormal;
    public static ThreadPriorityLevel Normal;
    public static ThreadPriorityLevel AboveNormal;
    public static ThreadPriorityLevel Highest;
    public static ThreadPriorityLevel TimeCritical;
}
public enum System.Diagnostics.ThreadState : Enum {
    public int value__;
    public static ThreadState Initialized;
    public static ThreadState Ready;
    public static ThreadState Running;
    public static ThreadState Standby;
    public static ThreadState Terminated;
    public static ThreadState Wait;
    public static ThreadState Transition;
    public static ThreadState Unknown;
}
public enum System.Diagnostics.ThreadWaitReason : Enum {
    public int value__;
    public static ThreadWaitReason Executive;
    public static ThreadWaitReason FreePage;
    public static ThreadWaitReason PageIn;
    public static ThreadWaitReason SystemAllocation;
    public static ThreadWaitReason ExecutionDelay;
    public static ThreadWaitReason Suspended;
    public static ThreadWaitReason UserRequest;
    public static ThreadWaitReason EventPairHigh;
    public static ThreadWaitReason EventPairLow;
    public static ThreadWaitReason LpcReceive;
    public static ThreadWaitReason LpcReply;
    public static ThreadWaitReason VirtualMemory;
    public static ThreadWaitReason PageOut;
    public static ThreadWaitReason Unknown;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
