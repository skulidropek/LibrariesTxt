[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[UnsupportedOSPlatformAttribute("browser")]
public abstract class System.Diagnostics.Tracing.DiagnosticCounter : object {
    public string DisplayName { get; public set; }
    public string DisplayUnits { get; public set; }
    public EventSource EventSource { get; }
    public string Name { get; }
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_DisplayUnits();
    public void set_DisplayUnits(string value);
    public EventSource get_EventSource();
    public string get_Name();
    public void AddMetadata(string key, string value);
    public sealed virtual void Dispose();
}
[FlagsAttribute]
public enum System.Diagnostics.Tracing.EventActivityOptions : Enum {
    public int value__;
    public static EventActivityOptions None;
    public static EventActivityOptions Disable;
    public static EventActivityOptions Recursive;
    public static EventActivityOptions Detachable;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class System.Diagnostics.Tracing.EventAttribute : Attribute {
    public EventActivityOptions ActivityOptions { get; public set; }
    public EventChannel Channel { get; public set; }
    public int EventId { get; }
    public EventKeywords Keywords { get; public set; }
    public EventLevel Level { get; public set; }
    public string Message { get; public set; }
    public EventOpcode Opcode { get; public set; }
    public EventTags Tags { get; public set; }
    public EventTask Task { get; public set; }
    public byte Version { get; public set; }
    public EventAttribute(int eventId);
    public EventActivityOptions get_ActivityOptions();
    public void set_ActivityOptions(EventActivityOptions value);
    public EventChannel get_Channel();
    public void set_Channel(EventChannel value);
    public int get_EventId();
    public EventKeywords get_Keywords();
    public void set_Keywords(EventKeywords value);
    public EventLevel get_Level();
    public void set_Level(EventLevel value);
    public string get_Message();
    public void set_Message(string value);
    public EventOpcode get_Opcode();
    public void set_Opcode(EventOpcode value);
    public EventTags get_Tags();
    public void set_Tags(EventTags value);
    public EventTask get_Task();
    public void set_Task(EventTask value);
    public byte get_Version();
    public void set_Version(byte value);
}
public enum System.Diagnostics.Tracing.EventChannel : Enum {
    public byte value__;
    public static EventChannel None;
    public static EventChannel Admin;
    public static EventChannel Operational;
    public static EventChannel Analytic;
    public static EventChannel Debug;
}
public enum System.Diagnostics.Tracing.EventCommand : Enum {
    public int value__;
    public static EventCommand Disable;
    public static EventCommand Enable;
    public static EventCommand SendManifest;
    public static EventCommand Update;
}
public class System.Diagnostics.Tracing.EventCommandEventArgs : EventArgs {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, string> Arguments { get; }
    public EventCommand Command { get; }
    public IDictionary`2<string, string> get_Arguments();
    public EventCommand get_Command();
    public bool DisableEvent(int eventId);
    public bool EnableEvent(int eventId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[UnsupportedOSPlatformAttribute("browser")]
public class System.Diagnostics.Tracing.EventCounter : DiagnosticCounter {
    public EventCounter(string name, EventSource eventSource);
    public virtual string ToString();
    public void WriteMetric(double value);
    public void WriteMetric(float value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("12")]
public class System.Diagnostics.Tracing.EventDataAttribute : Attribute {
    public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
}
[AttributeUsageAttribute("128")]
public class System.Diagnostics.Tracing.EventFieldAttribute : Attribute {
    public EventFieldFormat Format { get; public set; }
    public EventFieldTags Tags { get; public set; }
    public EventFieldFormat get_Format();
    public void set_Format(EventFieldFormat value);
    public EventFieldTags get_Tags();
    public void set_Tags(EventFieldTags value);
}
public enum System.Diagnostics.Tracing.EventFieldFormat : Enum {
    public int value__;
    public static EventFieldFormat Default;
    public static EventFieldFormat String;
    public static EventFieldFormat Boolean;
    public static EventFieldFormat Hexadecimal;
    public static EventFieldFormat Xml;
    public static EventFieldFormat Json;
    public static EventFieldFormat HResult;
}
[FlagsAttribute]
public enum System.Diagnostics.Tracing.EventFieldTags : Enum {
    public int value__;
    public static EventFieldTags None;
}
[AttributeUsageAttribute("128")]
public class System.Diagnostics.Tracing.EventIgnoreAttribute : Attribute {
}
[FlagsAttribute]
public enum System.Diagnostics.Tracing.EventKeywords : Enum {
    public long value__;
    public static EventKeywords All;
    public static EventKeywords None;
    public static EventKeywords MicrosoftTelemetry;
    public static EventKeywords WdiContext;
    public static EventKeywords WdiDiagnostic;
    public static EventKeywords Sqm;
    public static EventKeywords AuditFailure;
    public static EventKeywords CorrelationHint;
    public static EventKeywords AuditSuccess;
    public static EventKeywords EventLogClassic;
}
public enum System.Diagnostics.Tracing.EventLevel : Enum {
    public int value__;
    public static EventLevel LogAlways;
    public static EventLevel Critical;
    public static EventLevel Error;
    public static EventLevel Warning;
    public static EventLevel Informational;
    public static EventLevel Verbose;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Diagnostics.Tracing.EventListener : object {
    public void add_EventSourceCreated(EventHandler`1<EventSourceCreatedEventArgs> value);
    public void remove_EventSourceCreated(EventHandler`1<EventSourceCreatedEventArgs> value);
    public void add_EventWritten(EventHandler`1<EventWrittenEventArgs> value);
    public void remove_EventWritten(EventHandler`1<EventWrittenEventArgs> value);
    public void DisableEvents(EventSource eventSource);
    public virtual void Dispose();
    public void EnableEvents(EventSource eventSource, EventLevel level);
    public void EnableEvents(EventSource eventSource, EventLevel level, EventKeywords matchAnyKeyword);
    public void EnableEvents(EventSource eventSource, EventLevel level, EventKeywords matchAnyKeyword, IDictionary`2<string, string> arguments);
    protected static int EventSourceIndex(EventSource eventSource);
    protected internal virtual void OnEventSourceCreated(EventSource eventSource);
    protected internal virtual void OnEventWritten(EventWrittenEventArgs eventData);
}
[FlagsAttribute]
public enum System.Diagnostics.Tracing.EventManifestOptions : Enum {
    public int value__;
    public static EventManifestOptions None;
    public static EventManifestOptions Strict;
    public static EventManifestOptions AllCultures;
    public static EventManifestOptions OnlyIfNeededForRegistration;
    public static EventManifestOptions AllowEventSourceOverride;
}
public enum System.Diagnostics.Tracing.EventOpcode : Enum {
    public int value__;
    public static EventOpcode Info;
    public static EventOpcode Start;
    public static EventOpcode Stop;
    public static EventOpcode DataCollectionStart;
    public static EventOpcode DataCollectionStop;
    public static EventOpcode Extension;
    public static EventOpcode Reply;
    public static EventOpcode Resume;
    public static EventOpcode Suspend;
    public static EventOpcode Send;
    public static EventOpcode Receive;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DynamicallyAccessedMembersAttribute("-1")]
public class System.Diagnostics.Tracing.EventSource : object {
    public Exception ConstructionException { get; }
    public static Guid CurrentThreadActivityId { get; }
    public Guid Guid { get; }
    [NullableAttribute("1")]
public string Name { get; }
    public EventSourceSettings Settings { get; }
    protected EventSource(bool throwOnEventWriteErrors);
    protected EventSource(EventSourceSettings settings);
    protected EventSource(EventSourceSettings settings, String[] traits);
    [NullableContextAttribute("1")]
public EventSource(string eventSourceName);
    [NullableContextAttribute("1")]
public EventSource(string eventSourceName, EventSourceSettings config);
    [NullableContextAttribute("1")]
public EventSource(string eventSourceName, EventSourceSettings config, String[] traits);
    public Exception get_ConstructionException();
    public static Guid get_CurrentThreadActivityId();
    public Guid get_Guid();
    [NullableContextAttribute("1")]
public string get_Name();
    public EventSourceSettings get_Settings();
    public void add_EventCommandExecuted(EventHandler`1<EventCommandEventArgs> value);
    public void remove_EventCommandExecuted(EventHandler`1<EventCommandEventArgs> value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public static string GenerateManifest(Type eventSourceType, string assemblyPathToIncludeInManifest);
    public static string GenerateManifest(Type eventSourceType, string assemblyPathToIncludeInManifest, EventManifestOptions flags);
    [NullableContextAttribute("1")]
public static Guid GetGuid(Type eventSourceType);
    [NullableContextAttribute("1")]
public static string GetName(Type eventSourceType);
    [NullableContextAttribute("1")]
public static IEnumerable`1<EventSource> GetSources();
    [NullableContextAttribute("1")]
public string GetTrait(string key);
    public bool IsEnabled();
    public bool IsEnabled(EventLevel level, EventKeywords keywords);
    public bool IsEnabled(EventLevel level, EventKeywords keywords, EventChannel channel);
    [NullableContextAttribute("1")]
protected virtual void OnEventCommand(EventCommandEventArgs command);
    [NullableContextAttribute("1")]
public static void SendCommand(EventSource eventSource, EventCommand command, IDictionary`2<string, string> commandArguments);
    public static void SetCurrentThreadActivityId(Guid activityId);
    public static void SetCurrentThreadActivityId(Guid activityId, Guid& oldActivityThatWillContinue);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public void Write(string eventName);
    public void Write(string eventName, EventSourceOptions options);
    protected void WriteEvent(int eventId);
    protected void WriteEvent(int eventId, Byte[] arg1);
    protected void WriteEvent(int eventId, int arg1);
    protected void WriteEvent(int eventId, int arg1, int arg2);
    protected void WriteEvent(int eventId, int arg1, int arg2, int arg3);
    protected void WriteEvent(int eventId, int arg1, string arg2);
    protected void WriteEvent(int eventId, long arg1);
    protected void WriteEvent(int eventId, long arg1, Byte[] arg2);
    protected void WriteEvent(int eventId, long arg1, long arg2);
    protected void WriteEvent(int eventId, long arg1, long arg2, long arg3);
    protected void WriteEvent(int eventId, long arg1, string arg2);
    [RequiresUnreferencedCodeAttribute("EventSource will serialize the whole object graph. Trimmer will not safely handle this case because properties may be trimmed. This can be suppressed if the object is a primitive type")]
protected void WriteEvent(int eventId, Object[] args);
    protected void WriteEvent(int eventId, string arg1);
    protected void WriteEvent(int eventId, string arg1, int arg2);
    protected void WriteEvent(int eventId, string arg1, int arg2, int arg3);
    protected void WriteEvent(int eventId, string arg1, long arg2);
    protected void WriteEvent(int eventId, string arg1, string arg2);
    protected void WriteEvent(int eventId, string arg1, string arg2, string arg3);
    [NullableContextAttribute("0")]
[RequiresUnreferencedCodeAttribute("EventSource will serialize the whole object graph. Trimmer will not safely handle this case because properties may be trimmed. This can be suppressed if the object is a primitive type")]
[CLSCompliantAttribute("False")]
protected void WriteEventCore(int eventId, int eventDataCount, EventData* data);
    [RequiresUnreferencedCodeAttribute("EventSource will serialize the whole object graph. Trimmer will not safely handle this case because properties may be trimmed. This can be suppressed if the object is a primitive type")]
protected void WriteEventWithRelatedActivityId(int eventId, Guid relatedActivityId, Object[] args);
    [NullableContextAttribute("0")]
[RequiresUnreferencedCodeAttribute("EventSource will serialize the whole object graph. Trimmer will not safely handle this case because properties may be trimmed. This can be suppressed if the object is a primitive type")]
[CLSCompliantAttribute("False")]
protected void WriteEventWithRelatedActivityIdCore(int eventId, Guid* relatedActivityId, int eventDataCount, EventData* data);
    [RequiresUnreferencedCodeAttribute("EventSource will serialize the whole object graph. Trimmer will not safely handle this case because properties may be trimmed. This can be suppressed if the object is a primitive type")]
public void Write(string eventName, EventSourceOptions options, T data);
    [RequiresUnreferencedCodeAttribute("EventSource will serialize the whole object graph. Trimmer will not safely handle this case because properties may be trimmed. This can be suppressed if the object is a primitive type")]
public void Write(string eventName, EventSourceOptions& options, Guid& activityId, Guid& relatedActivityId, T& data);
    [RequiresUnreferencedCodeAttribute("EventSource will serialize the whole object graph. Trimmer will not safely handle this case because properties may be trimmed. This can be suppressed if the object is a primitive type")]
public void Write(string eventName, EventSourceOptions& options, T& data);
    [RequiresUnreferencedCodeAttribute("EventSource will serialize the whole object graph. Trimmer will not safely handle this case because properties may be trimmed. This can be suppressed if the object is a primitive type")]
public void Write(string eventName, T data);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class System.Diagnostics.Tracing.EventSourceAttribute : Attribute {
    public string Guid { get; public set; }
    public string LocalizationResources { get; public set; }
    public string Name { get; public set; }
    public string get_Guid();
    public void set_Guid(string value);
    public string get_LocalizationResources();
    public void set_LocalizationResources(string value);
    public string get_Name();
    public void set_Name(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Diagnostics.Tracing.EventSourceCreatedEventArgs : EventArgs {
    public EventSource EventSource { get; }
    public EventSource get_EventSource();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Diagnostics.Tracing.EventSourceException : Exception {
    [NullableContextAttribute("1")]
protected EventSourceException(SerializationInfo info, StreamingContext context);
    public EventSourceException(string message);
    public EventSourceException(string message, Exception innerException);
}
public class System.Diagnostics.Tracing.EventSourceOptions : ValueType {
    private int _dummyPrimitive;
    public EventActivityOptions ActivityOptions { get; public set; }
    public EventKeywords Keywords { get; public set; }
    public EventLevel Level { get; public set; }
    public EventOpcode Opcode { get; public set; }
    public EventTags Tags { get; public set; }
    public EventActivityOptions get_ActivityOptions();
    public void set_ActivityOptions(EventActivityOptions value);
    public EventKeywords get_Keywords();
    public void set_Keywords(EventKeywords value);
    public EventLevel get_Level();
    public void set_Level(EventLevel value);
    public EventOpcode get_Opcode();
    public void set_Opcode(EventOpcode value);
    public EventTags get_Tags();
    public void set_Tags(EventTags value);
}
[FlagsAttribute]
public enum System.Diagnostics.Tracing.EventSourceSettings : Enum {
    public int value__;
    public static EventSourceSettings Default;
    public static EventSourceSettings ThrowOnEventWriteErrors;
    public static EventSourceSettings EtwManifestEventFormat;
    public static EventSourceSettings EtwSelfDescribingEventFormat;
}
[FlagsAttribute]
public enum System.Diagnostics.Tracing.EventTags : Enum {
    public int value__;
    public static EventTags None;
}
public enum System.Diagnostics.Tracing.EventTask : Enum {
    public int value__;
    public static EventTask None;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Diagnostics.Tracing.EventWrittenEventArgs : EventArgs {
    public Guid ActivityId { get; }
    public EventChannel Channel { get; }
    public int EventId { get; }
    public string EventName { get; }
    [NullableAttribute("1")]
public EventSource EventSource { get; }
    public EventKeywords Keywords { get; }
    public EventLevel Level { get; }
    public string Message { get; }
    public EventOpcode Opcode { get; }
    public long OSThreadId { get; }
    public ReadOnlyCollection`1<object> Payload { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ReadOnlyCollection`1<string> PayloadNames { get; }
    public Guid RelatedActivityId { get; }
    public EventTags Tags { get; }
    public EventTask Task { get; }
    public DateTime TimeStamp { get; }
    public byte Version { get; }
    public Guid get_ActivityId();
    public EventChannel get_Channel();
    public int get_EventId();
    public string get_EventName();
    [NullableContextAttribute("1")]
public EventSource get_EventSource();
    public EventKeywords get_Keywords();
    public EventLevel get_Level();
    public string get_Message();
    public EventOpcode get_Opcode();
    public long get_OSThreadId();
    public ReadOnlyCollection`1<object> get_Payload();
    public ReadOnlyCollection`1<string> get_PayloadNames();
    public Guid get_RelatedActivityId();
    public EventTags get_Tags();
    public EventTask get_Task();
    public DateTime get_TimeStamp();
    public byte get_Version();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[UnsupportedOSPlatformAttribute("browser")]
public class System.Diagnostics.Tracing.IncrementingEventCounter : DiagnosticCounter {
    public TimeSpan DisplayRateTimeScale { get; public set; }
    public IncrementingEventCounter(string name, EventSource eventSource);
    public TimeSpan get_DisplayRateTimeScale();
    public void set_DisplayRateTimeScale(TimeSpan value);
    public void Increment(double increment);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[UnsupportedOSPlatformAttribute("browser")]
public class System.Diagnostics.Tracing.IncrementingPollingCounter : DiagnosticCounter {
    public TimeSpan DisplayRateTimeScale { get; public set; }
    public IncrementingPollingCounter(string name, EventSource eventSource, Func`1<double> totalValueProvider);
    public TimeSpan get_DisplayRateTimeScale();
    public void set_DisplayRateTimeScale(TimeSpan value);
    public virtual string ToString();
}
[AttributeUsageAttribute("64")]
public class System.Diagnostics.Tracing.NonEventAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[UnsupportedOSPlatformAttribute("browser")]
public class System.Diagnostics.Tracing.PollingCounter : DiagnosticCounter {
    public PollingCounter(string name, EventSource eventSource, Func`1<double> metricProvider);
    public virtual string ToString();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
