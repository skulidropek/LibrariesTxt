[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public abstract class System.Linq.EnumerableExecutor : object {
}
public class System.Linq.EnumerableExecutor`1 : EnumerableExecutor {
    [NullableContextAttribute("1")]
public EnumerableExecutor`1(Expression expression);
}
public abstract class System.Linq.EnumerableQuery : object {
}
[RequiresUnreferencedCodeAttribute("Enumerating in-memory collections as IQueryable can require unreferenced code because expressions referencing IQueryable extension methods can get rebound to IEnumerable extension methods. The IEnumerable extension methods could be trimmed causing the application to fail at runtime.")]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public class System.Linq.EnumerableQuery`1 : EnumerableQuery {
    [NullableAttribute("1")]
private Type System.Linq.IQueryable.ElementType { get; }
    [NullableAttribute("1")]
private Expression System.Linq.IQueryable.Expression { get; }
    [NullableAttribute("1")]
private IQueryProvider System.Linq.IQueryable.Provider { get; }
    [NullableContextAttribute("1")]
public EnumerableQuery`1(IEnumerable`1<T> enumerable);
    [NullableContextAttribute("1")]
public EnumerableQuery`1(Expression expression);
    private sealed virtual override Type System.Linq.IQueryable.get_ElementType();
    private sealed virtual override Expression System.Linq.IQueryable.get_Expression();
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IQueryable System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override IQueryable`1<TElement> System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override object System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override TElement System.Linq.IQueryProvider.Execute(Expression expression);
    [NullableContextAttribute("2")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Linq.Queryable : object {
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource Aggregate(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, TSource, TSource>> func);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TAccumulate Aggregate(IQueryable`1<TSource> source, TAccumulate seed, Expression`1<Func`3<TAccumulate, TSource, TAccumulate>> func);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TResult Aggregate(IQueryable`1<TSource> source, TAccumulate seed, Expression`1<Func`3<TAccumulate, TSource, TAccumulate>> func, Expression`1<Func`2<TAccumulate, TResult>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static bool All(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static bool Any(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static bool Any(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> Append(IQueryable`1<TSource> source, TSource element);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("Enumerating in-memory collections as IQueryable can require unreferenced code because expressions referencing IQueryable extension methods can get rebound to IEnumerable extension methods. The IEnumerable extension methods could be trimmed causing the application to fail at runtime.")]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable AsQueryable(IEnumerable source);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("Enumerating in-memory collections as IQueryable can require unreferenced code because expressions referencing IQueryable extension methods can get rebound to IEnumerable extension methods. The IEnumerable extension methods could be trimmed causing the application to fail at runtime.")]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TElement> AsQueryable(IEnumerable`1<TElement> source);
    [ExtensionAttribute]
public static decimal Average(IQueryable`1<decimal> source);
    [ExtensionAttribute]
public static double Average(IQueryable`1<double> source);
    [ExtensionAttribute]
public static double Average(IQueryable`1<int> source);
    [ExtensionAttribute]
public static double Average(IQueryable`1<long> source);
    [ExtensionAttribute]
public static Nullable`1<decimal> Average(IQueryable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
public static Nullable`1<double> Average(IQueryable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static Nullable`1<double> Average(IQueryable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static Nullable`1<double> Average(IQueryable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static Nullable`1<float> Average(IQueryable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static float Average(IQueryable`1<float> source);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static decimal Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static double Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static double Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static double Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static Nullable`1<decimal> Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static Nullable`1<double> Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static Nullable`1<double> Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static Nullable`1<double> Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static Nullable`1<float> Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static float Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TResult> Cast(IQueryable source);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource[]> Chunk(IQueryable`1<TSource> source, int size);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> Concat(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static bool Contains(IQueryable`1<TSource> source, TSource item);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static bool Contains(IQueryable`1<TSource> source, TSource item, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static int Count(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static int Count(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> DefaultIfEmpty(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> DefaultIfEmpty(IQueryable`1<TSource> source, TSource defaultValue);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> DistinctBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> DistinctBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> Distinct(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> Distinct(IQueryable`1<TSource> source, IEqualityComparer`1<TSource> comparer);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource ElementAtOrDefault(IQueryable`1<TSource> source, Index index);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource ElementAtOrDefault(IQueryable`1<TSource> source, int index);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource ElementAt(IQueryable`1<TSource> source, Index index);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource ElementAt(IQueryable`1<TSource> source, int index);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> ExceptBy(IQueryable`1<TSource> source1, IEnumerable`1<TKey> source2, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> ExceptBy(IQueryable`1<TSource> source1, IEnumerable`1<TKey> source2, Expression`1<Func`2<TSource, TKey>> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> Except(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> Except(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2, IEqualityComparer`1<TSource> comparer);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource FirstOrDefault(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource FirstOrDefault(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource FirstOrDefault(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, TSource defaultValue);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource FirstOrDefault(IQueryable`1<TSource> source, TSource defaultValue);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource First(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource First(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<IGrouping`2<TKey, TSource>> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<IGrouping`2<TKey, TSource>> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<IGrouping`2<TKey, TElement>> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<IGrouping`2<TKey, TElement>> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TResult> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`3<TKey, IEnumerable`1<TSource>, TResult>> resultSelector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TResult> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`3<TKey, IEnumerable`1<TSource>, TResult>> resultSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TResult> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, Expression`1<Func`3<TKey, IEnumerable`1<TElement>, TResult>> resultSelector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TResult> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, Expression`1<Func`3<TKey, IEnumerable`1<TElement>, TResult>> resultSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TResult> GroupJoin(IQueryable`1<TOuter> outer, IEnumerable`1<TInner> inner, Expression`1<Func`2<TOuter, TKey>> outerKeySelector, Expression`1<Func`2<TInner, TKey>> innerKeySelector, Expression`1<Func`3<TOuter, IEnumerable`1<TInner>, TResult>> resultSelector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TResult> GroupJoin(IQueryable`1<TOuter> outer, IEnumerable`1<TInner> inner, Expression`1<Func`2<TOuter, TKey>> outerKeySelector, Expression`1<Func`2<TInner, TKey>> innerKeySelector, Expression`1<Func`3<TOuter, IEnumerable`1<TInner>, TResult>> resultSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> IntersectBy(IQueryable`1<TSource> source1, IEnumerable`1<TKey> source2, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> IntersectBy(IQueryable`1<TSource> source1, IEnumerable`1<TKey> source2, Expression`1<Func`2<TSource, TKey>> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> Intersect(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> Intersect(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TResult> Join(IQueryable`1<TOuter> outer, IEnumerable`1<TInner> inner, Expression`1<Func`2<TOuter, TKey>> outerKeySelector, Expression`1<Func`2<TInner, TKey>> innerKeySelector, Expression`1<Func`3<TOuter, TInner, TResult>> resultSelector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TResult> Join(IQueryable`1<TOuter> outer, IEnumerable`1<TInner> inner, Expression`1<Func`2<TOuter, TKey>> outerKeySelector, Expression`1<Func`2<TInner, TKey>> innerKeySelector, Expression`1<Func`3<TOuter, TInner, TResult>> resultSelector, IEqualityComparer`1<TKey> comparer);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource LastOrDefault(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource LastOrDefault(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource LastOrDefault(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, TSource defaultValue);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource LastOrDefault(IQueryable`1<TSource> source, TSource defaultValue);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource Last(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource Last(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static long LongCount(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static long LongCount(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource MaxBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource MaxBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TSource> comparer);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource Max(IQueryable`1<TSource> source);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource Max(IQueryable`1<TSource> source, IComparer`1<TSource> comparer);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TResult Max(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource MinBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource MinBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TSource> comparer);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource Min(IQueryable`1<TSource> source);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource Min(IQueryable`1<TSource> source, IComparer`1<TSource> comparer);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TResult Min(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TResult> OfType(IQueryable source);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IOrderedQueryable`1<TSource> OrderByDescending(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IOrderedQueryable`1<TSource> OrderByDescending(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IOrderedQueryable`1<TSource> OrderBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IOrderedQueryable`1<TSource> OrderBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IOrderedQueryable`1<T> OrderDescending(IQueryable`1<T> source);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IOrderedQueryable`1<T> OrderDescending(IQueryable`1<T> source, IComparer`1<T> comparer);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IOrderedQueryable`1<T> Order(IQueryable`1<T> source);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IOrderedQueryable`1<T> Order(IQueryable`1<T> source, IComparer`1<T> comparer);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> Prepend(IQueryable`1<TSource> source, TSource element);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> Reverse(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TResult> SelectMany(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, IEnumerable`1<TResult>>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TResult> SelectMany(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, IEnumerable`1<TResult>>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TResult> SelectMany(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, IEnumerable`1<TCollection>>> collectionSelector, Expression`1<Func`3<TSource, TCollection, TResult>> resultSelector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TResult> SelectMany(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, IEnumerable`1<TCollection>>> collectionSelector, Expression`1<Func`3<TSource, TCollection, TResult>> resultSelector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TResult> Select(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, TResult>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TResult> Select(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static bool SequenceEqual(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static bool SequenceEqual(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2, IEqualityComparer`1<TSource> comparer);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource SingleOrDefault(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource SingleOrDefault(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource SingleOrDefault(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, TSource defaultValue);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource SingleOrDefault(IQueryable`1<TSource> source, TSource defaultValue);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource Single(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static TSource Single(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> SkipLast(IQueryable`1<TSource> source, int count);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> SkipWhile(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> SkipWhile(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, bool>> predicate);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> Skip(IQueryable`1<TSource> source, int count);
    [ExtensionAttribute]
public static decimal Sum(IQueryable`1<decimal> source);
    [ExtensionAttribute]
public static double Sum(IQueryable`1<double> source);
    [ExtensionAttribute]
public static int Sum(IQueryable`1<int> source);
    [ExtensionAttribute]
public static long Sum(IQueryable`1<long> source);
    [ExtensionAttribute]
public static Nullable`1<decimal> Sum(IQueryable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
public static Nullable`1<double> Sum(IQueryable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static Nullable`1<int> Sum(IQueryable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static Nullable`1<long> Sum(IQueryable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static Nullable`1<float> Sum(IQueryable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static float Sum(IQueryable`1<float> source);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static decimal Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static double Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static int Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static long Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static Nullable`1<decimal> Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static Nullable`1<double> Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static Nullable`1<int> Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static Nullable`1<long> Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static Nullable`1<float> Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static float Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> TakeLast(IQueryable`1<TSource> source, int count);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> TakeWhile(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> TakeWhile(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, bool>> predicate);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> Take(IQueryable`1<TSource> source, int count);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> Take(IQueryable`1<TSource> source, Range range);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IOrderedQueryable`1<TSource> ThenByDescending(IOrderedQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IOrderedQueryable`1<TSource> ThenByDescending(IOrderedQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IOrderedQueryable`1<TSource> ThenBy(IOrderedQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IOrderedQueryable`1<TSource> ThenBy(IOrderedQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> UnionBy(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> UnionBy(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2, Expression`1<Func`2<TSource, TKey>> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> Union(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> Union(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> Where(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TSource> Where(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, bool>> predicate);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<ValueTuple`2<TFirst, TSecond>> Zip(IQueryable`1<TFirst> source1, IEnumerable`1<TSecond> source2);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<ValueTuple`3<TFirst, TSecond, TThird>> Zip(IQueryable`1<TFirst> source1, IEnumerable`1<TSecond> source2, IEnumerable`1<TThird> source3);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Enumerating collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TResult> Zip(IQueryable`1<TFirst> source1, IEnumerable`1<TSecond> source2, Expression`1<Func`3<TFirst, TSecond, TResult>> resultSelector);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
