[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public enum System.Net.NetworkInformation.DuplicateAddressDetectionState : Enum {
    public int value__;
    public static DuplicateAddressDetectionState Invalid;
    public static DuplicateAddressDetectionState Tentative;
    public static DuplicateAddressDetectionState Duplicate;
    public static DuplicateAddressDetectionState Deprecated;
    public static DuplicateAddressDetectionState Preferred;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Net.NetworkInformation.GatewayIPAddressInformation : object {
    public IPAddress Address { get; }
    public abstract virtual IPAddress get_Address();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Net.NetworkInformation.GatewayIPAddressInformationCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public GatewayIPAddressInformation Item { get; }
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual GatewayIPAddressInformation get_Item(int index);
    public virtual void Add(GatewayIPAddressInformation address);
    public virtual void Clear();
    public virtual bool Contains(GatewayIPAddressInformation address);
    public virtual void CopyTo(GatewayIPAddressInformation[] array, int offset);
    public virtual IEnumerator`1<GatewayIPAddressInformation> GetEnumerator();
    public virtual bool Remove(GatewayIPAddressInformation address);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public abstract class System.Net.NetworkInformation.IcmpV4Statistics : object {
    public long AddressMaskRepliesReceived { get; }
    public long AddressMaskRepliesSent { get; }
    public long AddressMaskRequestsReceived { get; }
    public long AddressMaskRequestsSent { get; }
    public long DestinationUnreachableMessagesReceived { get; }
    public long DestinationUnreachableMessagesSent { get; }
    public long EchoRepliesReceived { get; }
    public long EchoRepliesSent { get; }
    public long EchoRequestsReceived { get; }
    public long EchoRequestsSent { get; }
    [UnsupportedOSPlatformAttribute("freebsd")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("osx")]
[UnsupportedOSPlatformAttribute("tvos")]
public long ErrorsReceived { get; }
    [UnsupportedOSPlatformAttribute("freebsd")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("osx")]
[UnsupportedOSPlatformAttribute("tvos")]
public long ErrorsSent { get; }
    [UnsupportedOSPlatformAttribute("freebsd")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("osx")]
[UnsupportedOSPlatformAttribute("tvos")]
public long MessagesReceived { get; }
    [UnsupportedOSPlatformAttribute("freebsd")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("osx")]
[UnsupportedOSPlatformAttribute("tvos")]
public long MessagesSent { get; }
    public long ParameterProblemsReceived { get; }
    public long ParameterProblemsSent { get; }
    public long RedirectsReceived { get; }
    public long RedirectsSent { get; }
    public long SourceQuenchesReceived { get; }
    public long SourceQuenchesSent { get; }
    public long TimeExceededMessagesReceived { get; }
    public long TimeExceededMessagesSent { get; }
    public long TimestampRepliesReceived { get; }
    public long TimestampRepliesSent { get; }
    public long TimestampRequestsReceived { get; }
    public long TimestampRequestsSent { get; }
    public abstract virtual long get_AddressMaskRepliesReceived();
    public abstract virtual long get_AddressMaskRepliesSent();
    public abstract virtual long get_AddressMaskRequestsReceived();
    public abstract virtual long get_AddressMaskRequestsSent();
    public abstract virtual long get_DestinationUnreachableMessagesReceived();
    public abstract virtual long get_DestinationUnreachableMessagesSent();
    public abstract virtual long get_EchoRepliesReceived();
    public abstract virtual long get_EchoRepliesSent();
    public abstract virtual long get_EchoRequestsReceived();
    public abstract virtual long get_EchoRequestsSent();
    public abstract virtual long get_ErrorsReceived();
    public abstract virtual long get_ErrorsSent();
    public abstract virtual long get_MessagesReceived();
    public abstract virtual long get_MessagesSent();
    public abstract virtual long get_ParameterProblemsReceived();
    public abstract virtual long get_ParameterProblemsSent();
    public abstract virtual long get_RedirectsReceived();
    public abstract virtual long get_RedirectsSent();
    public abstract virtual long get_SourceQuenchesReceived();
    public abstract virtual long get_SourceQuenchesSent();
    public abstract virtual long get_TimeExceededMessagesReceived();
    public abstract virtual long get_TimeExceededMessagesSent();
    public abstract virtual long get_TimestampRepliesReceived();
    public abstract virtual long get_TimestampRepliesSent();
    public abstract virtual long get_TimestampRequestsReceived();
    public abstract virtual long get_TimestampRequestsSent();
}
public abstract class System.Net.NetworkInformation.IcmpV6Statistics : object {
    public long DestinationUnreachableMessagesReceived { get; }
    public long DestinationUnreachableMessagesSent { get; }
    public long EchoRepliesReceived { get; }
    public long EchoRepliesSent { get; }
    public long EchoRequestsReceived { get; }
    public long EchoRequestsSent { get; }
    [UnsupportedOSPlatformAttribute("freebsd")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("osx")]
[UnsupportedOSPlatformAttribute("tvos")]
public long ErrorsReceived { get; }
    [UnsupportedOSPlatformAttribute("freebsd")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("osx")]
[UnsupportedOSPlatformAttribute("tvos")]
public long ErrorsSent { get; }
    public long MembershipQueriesReceived { get; }
    public long MembershipQueriesSent { get; }
    public long MembershipReductionsReceived { get; }
    public long MembershipReductionsSent { get; }
    public long MembershipReportsReceived { get; }
    public long MembershipReportsSent { get; }
    [UnsupportedOSPlatformAttribute("freebsd")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("osx")]
[UnsupportedOSPlatformAttribute("tvos")]
public long MessagesReceived { get; }
    [UnsupportedOSPlatformAttribute("freebsd")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("osx")]
[UnsupportedOSPlatformAttribute("tvos")]
public long MessagesSent { get; }
    public long NeighborAdvertisementsReceived { get; }
    public long NeighborAdvertisementsSent { get; }
    public long NeighborSolicitsReceived { get; }
    public long NeighborSolicitsSent { get; }
    public long PacketTooBigMessagesReceived { get; }
    public long PacketTooBigMessagesSent { get; }
    public long ParameterProblemsReceived { get; }
    public long ParameterProblemsSent { get; }
    public long RedirectsReceived { get; }
    public long RedirectsSent { get; }
    public long RouterAdvertisementsReceived { get; }
    public long RouterAdvertisementsSent { get; }
    public long RouterSolicitsReceived { get; }
    public long RouterSolicitsSent { get; }
    public long TimeExceededMessagesReceived { get; }
    public long TimeExceededMessagesSent { get; }
    public abstract virtual long get_DestinationUnreachableMessagesReceived();
    public abstract virtual long get_DestinationUnreachableMessagesSent();
    public abstract virtual long get_EchoRepliesReceived();
    public abstract virtual long get_EchoRepliesSent();
    public abstract virtual long get_EchoRequestsReceived();
    public abstract virtual long get_EchoRequestsSent();
    public abstract virtual long get_ErrorsReceived();
    public abstract virtual long get_ErrorsSent();
    public abstract virtual long get_MembershipQueriesReceived();
    public abstract virtual long get_MembershipQueriesSent();
    public abstract virtual long get_MembershipReductionsReceived();
    public abstract virtual long get_MembershipReductionsSent();
    public abstract virtual long get_MembershipReportsReceived();
    public abstract virtual long get_MembershipReportsSent();
    public abstract virtual long get_MessagesReceived();
    public abstract virtual long get_MessagesSent();
    public abstract virtual long get_NeighborAdvertisementsReceived();
    public abstract virtual long get_NeighborAdvertisementsSent();
    public abstract virtual long get_NeighborSolicitsReceived();
    public abstract virtual long get_NeighborSolicitsSent();
    public abstract virtual long get_PacketTooBigMessagesReceived();
    public abstract virtual long get_PacketTooBigMessagesSent();
    public abstract virtual long get_ParameterProblemsReceived();
    public abstract virtual long get_ParameterProblemsSent();
    public abstract virtual long get_RedirectsReceived();
    public abstract virtual long get_RedirectsSent();
    public abstract virtual long get_RouterAdvertisementsReceived();
    public abstract virtual long get_RouterAdvertisementsSent();
    public abstract virtual long get_RouterSolicitsReceived();
    public abstract virtual long get_RouterSolicitsSent();
    public abstract virtual long get_TimeExceededMessagesReceived();
    public abstract virtual long get_TimeExceededMessagesSent();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Net.NetworkInformation.IPAddressInformation : object {
    public IPAddress Address { get; }
    [SupportedOSPlatformAttribute("windows")]
public bool IsDnsEligible { get; }
    [SupportedOSPlatformAttribute("windows")]
public bool IsTransient { get; }
    public abstract virtual IPAddress get_Address();
    public abstract virtual bool get_IsDnsEligible();
    public abstract virtual bool get_IsTransient();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Net.NetworkInformation.IPAddressInformationCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public IPAddressInformation Item { get; }
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual IPAddressInformation get_Item(int index);
    public virtual void Add(IPAddressInformation address);
    public virtual void Clear();
    public virtual bool Contains(IPAddressInformation address);
    public virtual void CopyTo(IPAddressInformation[] array, int offset);
    public virtual IEnumerator`1<IPAddressInformation> GetEnumerator();
    public virtual bool Remove(IPAddressInformation address);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Net.NetworkInformation.IPGlobalProperties : object {
    [UnsupportedOSPlatformAttribute("android")]
public string DhcpScopeName { get; }
    public string DomainName { get; }
    public string HostName { get; }
    [UnsupportedOSPlatformAttribute("android")]
public bool IsWinsProxy { get; }
    public NetBiosNodeType NodeType { get; }
    public abstract virtual string get_DhcpScopeName();
    public abstract virtual string get_DomainName();
    public abstract virtual string get_HostName();
    public abstract virtual bool get_IsWinsProxy();
    public abstract virtual NetBiosNodeType get_NodeType();
    [NullableContextAttribute("2")]
public virtual IAsyncResult BeginGetUnicastAddresses(AsyncCallback callback, object state);
    public virtual UnicastIPAddressInformationCollection EndGetUnicastAddresses(IAsyncResult asyncResult);
    [UnsupportedOSPlatformAttribute("android")]
public abstract virtual TcpConnectionInformation[] GetActiveTcpConnections();
    [UnsupportedOSPlatformAttribute("android")]
public abstract virtual IPEndPoint[] GetActiveTcpListeners();
    [UnsupportedOSPlatformAttribute("android")]
public abstract virtual IPEndPoint[] GetActiveUdpListeners();
    [UnsupportedOSPlatformAttribute("android")]
public abstract virtual IcmpV4Statistics GetIcmpV4Statistics();
    [UnsupportedOSPlatformAttribute("android")]
public abstract virtual IcmpV6Statistics GetIcmpV6Statistics();
    [UnsupportedOSPlatformAttribute("illumos")]
[UnsupportedOSPlatformAttribute("solaris")]
public static IPGlobalProperties GetIPGlobalProperties();
    public abstract virtual IPGlobalStatistics GetIPv4GlobalStatistics();
    [UnsupportedOSPlatformAttribute("freebsd")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("osx")]
[UnsupportedOSPlatformAttribute("tvos")]
public abstract virtual IPGlobalStatistics GetIPv6GlobalStatistics();
    [UnsupportedOSPlatformAttribute("android")]
public abstract virtual TcpStatistics GetTcpIPv4Statistics();
    [UnsupportedOSPlatformAttribute("android")]
public abstract virtual TcpStatistics GetTcpIPv6Statistics();
    [UnsupportedOSPlatformAttribute("android")]
public abstract virtual UdpStatistics GetUdpIPv4Statistics();
    [UnsupportedOSPlatformAttribute("android")]
public abstract virtual UdpStatistics GetUdpIPv6Statistics();
    public virtual UnicastIPAddressInformationCollection GetUnicastAddresses();
    public virtual Task`1<UnicastIPAddressInformationCollection> GetUnicastAddressesAsync();
}
public abstract class System.Net.NetworkInformation.IPGlobalStatistics : object {
    [UnsupportedOSPlatformAttribute("android")]
public int DefaultTtl { get; }
    [UnsupportedOSPlatformAttribute("android")]
public bool ForwardingEnabled { get; }
    public int NumberOfInterfaces { get; }
    public int NumberOfIPAddresses { get; }
    [UnsupportedOSPlatformAttribute("android")]
public int NumberOfRoutes { get; }
    [UnsupportedOSPlatformAttribute("android")]
public long OutputPacketRequests { get; }
    [UnsupportedOSPlatformAttribute("android")]
public long OutputPacketRoutingDiscards { get; }
    [UnsupportedOSPlatformAttribute("android")]
public long OutputPacketsDiscarded { get; }
    [UnsupportedOSPlatformAttribute("android")]
public long OutputPacketsWithNoRoute { get; }
    [UnsupportedOSPlatformAttribute("android")]
public long PacketFragmentFailures { get; }
    [UnsupportedOSPlatformAttribute("android")]
public long PacketReassembliesRequired { get; }
    [UnsupportedOSPlatformAttribute("android")]
public long PacketReassemblyFailures { get; }
    [UnsupportedOSPlatformAttribute("android")]
public long PacketReassemblyTimeout { get; }
    [UnsupportedOSPlatformAttribute("android")]
public long PacketsFragmented { get; }
    [UnsupportedOSPlatformAttribute("android")]
public long PacketsReassembled { get; }
    [UnsupportedOSPlatformAttribute("android")]
public long ReceivedPackets { get; }
    [UnsupportedOSPlatformAttribute("android")]
public long ReceivedPacketsDelivered { get; }
    [UnsupportedOSPlatformAttribute("android")]
public long ReceivedPacketsDiscarded { get; }
    [UnsupportedOSPlatformAttribute("android")]
public long ReceivedPacketsForwarded { get; }
    [UnsupportedOSPlatformAttribute("android")]
public long ReceivedPacketsWithAddressErrors { get; }
    [UnsupportedOSPlatformAttribute("android")]
public long ReceivedPacketsWithHeadersErrors { get; }
    [UnsupportedOSPlatformAttribute("android")]
public long ReceivedPacketsWithUnknownProtocol { get; }
    public abstract virtual int get_DefaultTtl();
    public abstract virtual bool get_ForwardingEnabled();
    public abstract virtual int get_NumberOfInterfaces();
    public abstract virtual int get_NumberOfIPAddresses();
    public abstract virtual int get_NumberOfRoutes();
    public abstract virtual long get_OutputPacketRequests();
    public abstract virtual long get_OutputPacketRoutingDiscards();
    public abstract virtual long get_OutputPacketsDiscarded();
    public abstract virtual long get_OutputPacketsWithNoRoute();
    public abstract virtual long get_PacketFragmentFailures();
    public abstract virtual long get_PacketReassembliesRequired();
    public abstract virtual long get_PacketReassemblyFailures();
    public abstract virtual long get_PacketReassemblyTimeout();
    public abstract virtual long get_PacketsFragmented();
    public abstract virtual long get_PacketsReassembled();
    public abstract virtual long get_ReceivedPackets();
    public abstract virtual long get_ReceivedPacketsDelivered();
    public abstract virtual long get_ReceivedPacketsDiscarded();
    public abstract virtual long get_ReceivedPacketsForwarded();
    public abstract virtual long get_ReceivedPacketsWithAddressErrors();
    public abstract virtual long get_ReceivedPacketsWithHeadersErrors();
    public abstract virtual long get_ReceivedPacketsWithUnknownProtocol();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Net.NetworkInformation.IPInterfaceProperties : object {
    [SupportedOSPlatformAttribute("windows")]
public IPAddressInformationCollection AnycastAddresses { get; }
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("freebsd")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("osx")]
[UnsupportedOSPlatformAttribute("tvos")]
public IPAddressCollection DhcpServerAddresses { get; }
    [UnsupportedOSPlatformAttribute("android")]
public IPAddressCollection DnsAddresses { get; }
    [UnsupportedOSPlatformAttribute("android")]
public string DnsSuffix { get; }
    [UnsupportedOSPlatformAttribute("android")]
public GatewayIPAddressInformationCollection GatewayAddresses { get; }
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("freebsd")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("osx")]
[UnsupportedOSPlatformAttribute("tvos")]
public bool IsDnsEnabled { get; }
    [SupportedOSPlatformAttribute("windows")]
public bool IsDynamicDnsEnabled { get; }
    public MulticastIPAddressInformationCollection MulticastAddresses { get; }
    public UnicastIPAddressInformationCollection UnicastAddresses { get; }
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("freebsd")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("osx")]
[UnsupportedOSPlatformAttribute("tvos")]
public IPAddressCollection WinsServersAddresses { get; }
    public abstract virtual IPAddressInformationCollection get_AnycastAddresses();
    public abstract virtual IPAddressCollection get_DhcpServerAddresses();
    public abstract virtual IPAddressCollection get_DnsAddresses();
    public abstract virtual string get_DnsSuffix();
    public abstract virtual GatewayIPAddressInformationCollection get_GatewayAddresses();
    public abstract virtual bool get_IsDnsEnabled();
    public abstract virtual bool get_IsDynamicDnsEnabled();
    public abstract virtual MulticastIPAddressInformationCollection get_MulticastAddresses();
    public abstract virtual UnicastIPAddressInformationCollection get_UnicastAddresses();
    public abstract virtual IPAddressCollection get_WinsServersAddresses();
    public abstract virtual IPv4InterfaceProperties GetIPv4Properties();
    public abstract virtual IPv6InterfaceProperties GetIPv6Properties();
}
public abstract class System.Net.NetworkInformation.IPInterfaceStatistics : object {
    public long BytesReceived { get; }
    public long BytesSent { get; }
    public long IncomingPacketsDiscarded { get; }
    public long IncomingPacketsWithErrors { get; }
    [UnsupportedOSPlatformAttribute("linux")]
public long IncomingUnknownProtocolPackets { get; }
    public long NonUnicastPacketsReceived { get; }
    [UnsupportedOSPlatformAttribute("linux")]
public long NonUnicastPacketsSent { get; }
    [UnsupportedOSPlatformAttribute("freebsd")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("osx")]
[UnsupportedOSPlatformAttribute("tvos")]
public long OutgoingPacketsDiscarded { get; }
    public long OutgoingPacketsWithErrors { get; }
    public long OutputQueueLength { get; }
    public long UnicastPacketsReceived { get; }
    public long UnicastPacketsSent { get; }
    public abstract virtual long get_BytesReceived();
    public abstract virtual long get_BytesSent();
    public abstract virtual long get_IncomingPacketsDiscarded();
    public abstract virtual long get_IncomingPacketsWithErrors();
    public abstract virtual long get_IncomingUnknownProtocolPackets();
    public abstract virtual long get_NonUnicastPacketsReceived();
    public abstract virtual long get_NonUnicastPacketsSent();
    public abstract virtual long get_OutgoingPacketsDiscarded();
    public abstract virtual long get_OutgoingPacketsWithErrors();
    public abstract virtual long get_OutputQueueLength();
    public abstract virtual long get_UnicastPacketsReceived();
    public abstract virtual long get_UnicastPacketsSent();
}
public abstract class System.Net.NetworkInformation.IPv4InterfaceProperties : object {
    public int Index { get; }
    [SupportedOSPlatformAttribute("windows")]
public bool IsAutomaticPrivateAddressingActive { get; }
    [SupportedOSPlatformAttribute("windows")]
public bool IsAutomaticPrivateAddressingEnabled { get; }
    [SupportedOSPlatformAttribute("windows")]
public bool IsDhcpEnabled { get; }
    [SupportedOSPlatformAttribute("windows")]
[SupportedOSPlatformAttribute("linux")]
public bool IsForwardingEnabled { get; }
    public int Mtu { get; }
    [SupportedOSPlatformAttribute("windows")]
[SupportedOSPlatformAttribute("linux")]
public bool UsesWins { get; }
    public abstract virtual int get_Index();
    public abstract virtual bool get_IsAutomaticPrivateAddressingActive();
    public abstract virtual bool get_IsAutomaticPrivateAddressingEnabled();
    public abstract virtual bool get_IsDhcpEnabled();
    public abstract virtual bool get_IsForwardingEnabled();
    public abstract virtual int get_Mtu();
    public abstract virtual bool get_UsesWins();
}
public abstract class System.Net.NetworkInformation.IPv4InterfaceStatistics : object {
    public long BytesReceived { get; }
    public long BytesSent { get; }
    public long IncomingPacketsDiscarded { get; }
    public long IncomingPacketsWithErrors { get; }
    public long IncomingUnknownProtocolPackets { get; }
    public long NonUnicastPacketsReceived { get; }
    public long NonUnicastPacketsSent { get; }
    [UnsupportedOSPlatformAttribute("freebsd")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("osx")]
[UnsupportedOSPlatformAttribute("tvos")]
public long OutgoingPacketsDiscarded { get; }
    public long OutgoingPacketsWithErrors { get; }
    public long OutputQueueLength { get; }
    public long UnicastPacketsReceived { get; }
    public long UnicastPacketsSent { get; }
    public abstract virtual long get_BytesReceived();
    public abstract virtual long get_BytesSent();
    public abstract virtual long get_IncomingPacketsDiscarded();
    public abstract virtual long get_IncomingPacketsWithErrors();
    public abstract virtual long get_IncomingUnknownProtocolPackets();
    public abstract virtual long get_NonUnicastPacketsReceived();
    public abstract virtual long get_NonUnicastPacketsSent();
    public abstract virtual long get_OutgoingPacketsDiscarded();
    public abstract virtual long get_OutgoingPacketsWithErrors();
    public abstract virtual long get_OutputQueueLength();
    public abstract virtual long get_UnicastPacketsReceived();
    public abstract virtual long get_UnicastPacketsSent();
}
public abstract class System.Net.NetworkInformation.IPv6InterfaceProperties : object {
    public int Index { get; }
    public int Mtu { get; }
    public abstract virtual int get_Index();
    public abstract virtual int get_Mtu();
    [UnsupportedOSPlatformAttribute("freebsd")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("osx")]
[UnsupportedOSPlatformAttribute("tvos")]
public virtual long GetScopeId(ScopeLevel scopeLevel);
}
public abstract class System.Net.NetworkInformation.MulticastIPAddressInformation : IPAddressInformation {
    [SupportedOSPlatformAttribute("windows")]
public long AddressPreferredLifetime { get; }
    [SupportedOSPlatformAttribute("windows")]
public long AddressValidLifetime { get; }
    [SupportedOSPlatformAttribute("windows")]
public long DhcpLeaseLifetime { get; }
    [SupportedOSPlatformAttribute("windows")]
public DuplicateAddressDetectionState DuplicateAddressDetectionState { get; }
    [SupportedOSPlatformAttribute("windows")]
public PrefixOrigin PrefixOrigin { get; }
    [SupportedOSPlatformAttribute("windows")]
public SuffixOrigin SuffixOrigin { get; }
    public abstract virtual long get_AddressPreferredLifetime();
    public abstract virtual long get_AddressValidLifetime();
    public abstract virtual long get_DhcpLeaseLifetime();
    public abstract virtual DuplicateAddressDetectionState get_DuplicateAddressDetectionState();
    public abstract virtual PrefixOrigin get_PrefixOrigin();
    public abstract virtual SuffixOrigin get_SuffixOrigin();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Net.NetworkInformation.MulticastIPAddressInformationCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public MulticastIPAddressInformation Item { get; }
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual MulticastIPAddressInformation get_Item(int index);
    public virtual void Add(MulticastIPAddressInformation address);
    public virtual void Clear();
    public virtual bool Contains(MulticastIPAddressInformation address);
    public virtual void CopyTo(MulticastIPAddressInformation[] array, int offset);
    public virtual IEnumerator`1<MulticastIPAddressInformation> GetEnumerator();
    public virtual bool Remove(MulticastIPAddressInformation address);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum System.Net.NetworkInformation.NetBiosNodeType : Enum {
    public int value__;
    public static NetBiosNodeType Unknown;
    public static NetBiosNodeType Broadcast;
    public static NetBiosNodeType Peer2Peer;
    public static NetBiosNodeType Mixed;
    public static NetBiosNodeType Hybrid;
}
public class System.Net.NetworkInformation.NetworkAddressChangedEventHandler : MulticastDelegate {
    public NetworkAddressChangedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, EventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler : MulticastDelegate {
    public NetworkAvailabilityChangedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, NetworkAvailabilityEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NetworkAvailabilityEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.NetworkInformation.NetworkAvailabilityEventArgs : EventArgs {
    public bool IsAvailable { get; }
    public bool get_IsAvailable();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Net.NetworkInformation.NetworkChange : object {
    public static void add_NetworkAddressChanged(NetworkAddressChangedEventHandler value);
    public static void remove_NetworkAddressChanged(NetworkAddressChangedEventHandler value);
    public static void add_NetworkAvailabilityChanged(NetworkAvailabilityChangedEventHandler value);
    public static void remove_NetworkAvailabilityChanged(NetworkAvailabilityChangedEventHandler value);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
public static void RegisterNetworkChange(NetworkChange nc);
}
public class System.Net.NetworkInformation.NetworkInformationException : Win32Exception {
    public int ErrorCode { get; }
    public NetworkInformationException(int errorCode);
    [NullableContextAttribute("1")]
protected NetworkInformationException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public virtual int get_ErrorCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Net.NetworkInformation.NetworkInterface : object {
    public string Description { get; }
    public string Id { get; }
    [UnsupportedOSPlatformAttribute("illumos")]
[UnsupportedOSPlatformAttribute("solaris")]
public static int IPv6LoopbackInterfaceIndex { get; }
    public bool IsReceiveOnly { get; }
    [UnsupportedOSPlatformAttribute("illumos")]
[UnsupportedOSPlatformAttribute("solaris")]
public static int LoopbackInterfaceIndex { get; }
    public string Name { get; }
    public NetworkInterfaceType NetworkInterfaceType { get; }
    public OperationalStatus OperationalStatus { get; }
    public long Speed { get; }
    public bool SupportsMulticast { get; }
    public virtual string get_Description();
    public virtual string get_Id();
    public static int get_IPv6LoopbackInterfaceIndex();
    public virtual bool get_IsReceiveOnly();
    public static int get_LoopbackInterfaceIndex();
    public virtual string get_Name();
    public virtual NetworkInterfaceType get_NetworkInterfaceType();
    public virtual OperationalStatus get_OperationalStatus();
    public virtual long get_Speed();
    public virtual bool get_SupportsMulticast();
    [UnsupportedOSPlatformAttribute("illumos")]
[UnsupportedOSPlatformAttribute("solaris")]
public static NetworkInterface[] GetAllNetworkInterfaces();
    public virtual IPInterfaceProperties GetIPProperties();
    [UnsupportedOSPlatformAttribute("android")]
public virtual IPInterfaceStatistics GetIPStatistics();
    [UnsupportedOSPlatformAttribute("android")]
public virtual IPv4InterfaceStatistics GetIPv4Statistics();
    [UnsupportedOSPlatformAttribute("illumos")]
[UnsupportedOSPlatformAttribute("solaris")]
public static bool GetIsNetworkAvailable();
    public virtual PhysicalAddress GetPhysicalAddress();
    public virtual bool Supports(NetworkInterfaceComponent networkInterfaceComponent);
}
public enum System.Net.NetworkInformation.NetworkInterfaceComponent : Enum {
    public int value__;
    public static NetworkInterfaceComponent IPv4;
    public static NetworkInterfaceComponent IPv6;
}
public enum System.Net.NetworkInformation.NetworkInterfaceType : Enum {
    public int value__;
    public static NetworkInterfaceType Unknown;
    public static NetworkInterfaceType Ethernet;
    public static NetworkInterfaceType TokenRing;
    public static NetworkInterfaceType Fddi;
    public static NetworkInterfaceType BasicIsdn;
    public static NetworkInterfaceType PrimaryIsdn;
    public static NetworkInterfaceType Ppp;
    public static NetworkInterfaceType Loopback;
    public static NetworkInterfaceType Ethernet3Megabit;
    public static NetworkInterfaceType Slip;
    public static NetworkInterfaceType Atm;
    public static NetworkInterfaceType GenericModem;
    public static NetworkInterfaceType FastEthernetT;
    public static NetworkInterfaceType Isdn;
    public static NetworkInterfaceType FastEthernetFx;
    public static NetworkInterfaceType Wireless80211;
    public static NetworkInterfaceType AsymmetricDsl;
    public static NetworkInterfaceType RateAdaptDsl;
    public static NetworkInterfaceType SymmetricDsl;
    public static NetworkInterfaceType VeryHighSpeedDsl;
    public static NetworkInterfaceType IPOverAtm;
    public static NetworkInterfaceType GigabitEthernet;
    public static NetworkInterfaceType Tunnel;
    public static NetworkInterfaceType MultiRateSymmetricDsl;
    public static NetworkInterfaceType HighPerformanceSerialBus;
    public static NetworkInterfaceType Wman;
    public static NetworkInterfaceType Wwanpp;
    public static NetworkInterfaceType Wwanpp2;
}
public enum System.Net.NetworkInformation.OperationalStatus : Enum {
    public int value__;
    public static OperationalStatus Up;
    public static OperationalStatus Down;
    public static OperationalStatus Testing;
    public static OperationalStatus Unknown;
    public static OperationalStatus Dormant;
    public static OperationalStatus NotPresent;
    public static OperationalStatus LowerLayerDown;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.NetworkInformation.PhysicalAddress : object {
    public static PhysicalAddress None;
    public PhysicalAddress(Byte[] address);
    [NullableContextAttribute("2")]
public virtual bool Equals(object comparand);
    public Byte[] GetAddressBytes();
    public virtual int GetHashCode();
    [NullableContextAttribute("0")]
public static PhysicalAddress Parse(ReadOnlySpan`1<char> address);
    public static PhysicalAddress Parse(string address);
    public virtual string ToString();
    [NullableContextAttribute("0")]
public static bool TryParse(ReadOnlySpan`1<char> address, PhysicalAddress& value);
    [NullableContextAttribute("2")]
public static bool TryParse(string address, PhysicalAddress& value);
}
public enum System.Net.NetworkInformation.PrefixOrigin : Enum {
    public int value__;
    public static PrefixOrigin Other;
    public static PrefixOrigin Manual;
    public static PrefixOrigin WellKnown;
    public static PrefixOrigin Dhcp;
    public static PrefixOrigin RouterAdvertisement;
}
public enum System.Net.NetworkInformation.ScopeLevel : Enum {
    public int value__;
    public static ScopeLevel None;
    public static ScopeLevel Interface;
    public static ScopeLevel Link;
    public static ScopeLevel Subnet;
    public static ScopeLevel Admin;
    public static ScopeLevel Site;
    public static ScopeLevel Organization;
    public static ScopeLevel Global;
}
public enum System.Net.NetworkInformation.SuffixOrigin : Enum {
    public int value__;
    public static SuffixOrigin Other;
    public static SuffixOrigin Manual;
    public static SuffixOrigin WellKnown;
    public static SuffixOrigin OriginDhcp;
    public static SuffixOrigin LinkLayerAddress;
    public static SuffixOrigin Random;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Net.NetworkInformation.TcpConnectionInformation : object {
    public IPEndPoint LocalEndPoint { get; }
    public IPEndPoint RemoteEndPoint { get; }
    public TcpState State { get; }
    public abstract virtual IPEndPoint get_LocalEndPoint();
    public abstract virtual IPEndPoint get_RemoteEndPoint();
    public abstract virtual TcpState get_State();
}
public enum System.Net.NetworkInformation.TcpState : Enum {
    public int value__;
    public static TcpState Unknown;
    public static TcpState Closed;
    public static TcpState Listen;
    public static TcpState SynSent;
    public static TcpState SynReceived;
    public static TcpState Established;
    public static TcpState FinWait1;
    public static TcpState FinWait2;
    public static TcpState CloseWait;
    public static TcpState Closing;
    public static TcpState LastAck;
    public static TcpState TimeWait;
    public static TcpState DeleteTcb;
}
public abstract class System.Net.NetworkInformation.TcpStatistics : object {
    public long ConnectionsAccepted { get; }
    public long ConnectionsInitiated { get; }
    public long CumulativeConnections { get; }
    public long CurrentConnections { get; }
    public long ErrorsReceived { get; }
    public long FailedConnectionAttempts { get; }
    public long MaximumConnections { get; }
    public long MaximumTransmissionTimeout { get; }
    public long MinimumTransmissionTimeout { get; }
    public long ResetConnections { get; }
    public long ResetsSent { get; }
    public long SegmentsReceived { get; }
    public long SegmentsResent { get; }
    public long SegmentsSent { get; }
    public abstract virtual long get_ConnectionsAccepted();
    public abstract virtual long get_ConnectionsInitiated();
    public abstract virtual long get_CumulativeConnections();
    public abstract virtual long get_CurrentConnections();
    public abstract virtual long get_ErrorsReceived();
    public abstract virtual long get_FailedConnectionAttempts();
    public abstract virtual long get_MaximumConnections();
    public abstract virtual long get_MaximumTransmissionTimeout();
    public abstract virtual long get_MinimumTransmissionTimeout();
    public abstract virtual long get_ResetConnections();
    public abstract virtual long get_ResetsSent();
    public abstract virtual long get_SegmentsReceived();
    public abstract virtual long get_SegmentsResent();
    public abstract virtual long get_SegmentsSent();
}
public abstract class System.Net.NetworkInformation.UdpStatistics : object {
    public long DatagramsReceived { get; }
    public long DatagramsSent { get; }
    public long IncomingDatagramsDiscarded { get; }
    public long IncomingDatagramsWithErrors { get; }
    public int UdpListeners { get; }
    public abstract virtual long get_DatagramsReceived();
    public abstract virtual long get_DatagramsSent();
    public abstract virtual long get_IncomingDatagramsDiscarded();
    public abstract virtual long get_IncomingDatagramsWithErrors();
    public abstract virtual int get_UdpListeners();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Net.NetworkInformation.UnicastIPAddressInformation : IPAddressInformation {
    [SupportedOSPlatformAttribute("windows")]
public long AddressPreferredLifetime { get; }
    [SupportedOSPlatformAttribute("windows")]
public long AddressValidLifetime { get; }
    [SupportedOSPlatformAttribute("windows")]
public long DhcpLeaseLifetime { get; }
    [SupportedOSPlatformAttribute("windows")]
public DuplicateAddressDetectionState DuplicateAddressDetectionState { get; }
    public IPAddress IPv4Mask { get; }
    public int PrefixLength { get; }
    [SupportedOSPlatformAttribute("windows")]
public PrefixOrigin PrefixOrigin { get; }
    [SupportedOSPlatformAttribute("windows")]
public SuffixOrigin SuffixOrigin { get; }
    public abstract virtual long get_AddressPreferredLifetime();
    public abstract virtual long get_AddressValidLifetime();
    public abstract virtual long get_DhcpLeaseLifetime();
    public abstract virtual DuplicateAddressDetectionState get_DuplicateAddressDetectionState();
    public abstract virtual IPAddress get_IPv4Mask();
    public virtual int get_PrefixLength();
    public abstract virtual PrefixOrigin get_PrefixOrigin();
    public abstract virtual SuffixOrigin get_SuffixOrigin();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Net.NetworkInformation.UnicastIPAddressInformationCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public UnicastIPAddressInformation Item { get; }
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual UnicastIPAddressInformation get_Item(int index);
    public virtual void Add(UnicastIPAddressInformation address);
    public virtual void Clear();
    public virtual bool Contains(UnicastIPAddressInformation address);
    public virtual void CopyTo(UnicastIPAddressInformation[] array, int offset);
    public virtual IEnumerator`1<UnicastIPAddressInformation> GetEnumerator();
    public virtual bool Remove(UnicastIPAddressInformation address);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
