[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[FlagsAttribute]
public enum System.Reflection.AssemblyFlags : Enum {
    public int value__;
    public static AssemblyFlags PublicKey;
    public static AssemblyFlags Retargetable;
    public static AssemblyFlags WindowsRuntime;
    public static AssemblyFlags ContentTypeMask;
    public static AssemblyFlags DisableJitCompileOptimizer;
    public static AssemblyFlags EnableJitCompileTracking;
}
public enum System.Reflection.AssemblyHashAlgorithm : Enum {
    public int value__;
    public static AssemblyHashAlgorithm None;
    public static AssemblyHashAlgorithm MD5;
    public static AssemblyHashAlgorithm Sha1;
    public static AssemblyHashAlgorithm Sha256;
    public static AssemblyHashAlgorithm Sha384;
    public static AssemblyHashAlgorithm Sha512;
}
public enum System.Reflection.DeclarativeSecurityAction : Enum {
    public short value__;
    public static DeclarativeSecurityAction None;
    public static DeclarativeSecurityAction Demand;
    public static DeclarativeSecurityAction Assert;
    public static DeclarativeSecurityAction Deny;
    public static DeclarativeSecurityAction PermitOnly;
    public static DeclarativeSecurityAction LinkDemand;
    public static DeclarativeSecurityAction InheritanceDemand;
    public static DeclarativeSecurityAction RequestMinimum;
    public static DeclarativeSecurityAction RequestOptional;
    public static DeclarativeSecurityAction RequestRefuse;
}
[FlagsAttribute]
public enum System.Reflection.ManifestResourceAttributes : Enum {
    public int value__;
    public static ManifestResourceAttributes Public;
    public static ManifestResourceAttributes Private;
    public static ManifestResourceAttributes VisibilityMask;
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.ArrayShape : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public ImmutableArray`1<int> LowerBounds { get; }
    public int Rank { get; }
    public ImmutableArray`1<int> Sizes { get; }
    public ArrayShape(int rank, ImmutableArray`1<int> sizes, ImmutableArray`1<int> lowerBounds);
    public ImmutableArray`1<int> get_LowerBounds();
    public int get_Rank();
    public ImmutableArray`1<int> get_Sizes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.AssemblyDefinition : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public StringHandle Culture { get; }
    public AssemblyFlags Flags { get; }
    public AssemblyHashAlgorithm HashAlgorithm { get; }
    public StringHandle Name { get; }
    public BlobHandle PublicKey { get; }
    public Version Version { get; }
    public StringHandle get_Culture();
    public AssemblyFlags get_Flags();
    public AssemblyHashAlgorithm get_HashAlgorithm();
    public StringHandle get_Name();
    public BlobHandle get_PublicKey();
    public Version get_Version();
    public CustomAttributeHandleCollection GetCustomAttributes();
    public DeclarativeSecurityAttributeHandleCollection GetDeclarativeSecurityAttributes();
    public AssemblyName GetAssemblyName();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.AssemblyDefinitionHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(AssemblyDefinitionHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(AssemblyDefinitionHandle left, AssemblyDefinitionHandle right);
    public static AssemblyDefinitionHandle op_Explicit(EntityHandle handle);
    public static AssemblyDefinitionHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(AssemblyDefinitionHandle handle);
    public static Handle op_Implicit(AssemblyDefinitionHandle handle);
    public static bool op_Inequality(AssemblyDefinitionHandle left, AssemblyDefinitionHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.AssemblyFile : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public bool ContainsMetadata { get; }
    public BlobHandle HashValue { get; }
    public StringHandle Name { get; }
    public bool get_ContainsMetadata();
    public BlobHandle get_HashValue();
    public StringHandle get_Name();
    public CustomAttributeHandleCollection GetCustomAttributes();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.AssemblyFileHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(AssemblyFileHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(AssemblyFileHandle left, AssemblyFileHandle right);
    public static AssemblyFileHandle op_Explicit(EntityHandle handle);
    public static AssemblyFileHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(AssemblyFileHandle handle);
    public static Handle op_Implicit(AssemblyFileHandle handle);
    public static bool op_Inequality(AssemblyFileHandle left, AssemblyFileHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.AssemblyFileHandleCollection : ValueType {
    private int _dummyPrimitive;
    public int Count { get; }
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<AssemblyFileHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.AssemblyFileHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.AssemblyReference : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public StringHandle Culture { get; }
    public AssemblyFlags Flags { get; }
    public BlobHandle HashValue { get; }
    public StringHandle Name { get; }
    public BlobHandle PublicKeyOrToken { get; }
    public Version Version { get; }
    public StringHandle get_Culture();
    public AssemblyFlags get_Flags();
    public BlobHandle get_HashValue();
    public StringHandle get_Name();
    public BlobHandle get_PublicKeyOrToken();
    public Version get_Version();
    public CustomAttributeHandleCollection GetCustomAttributes();
    public AssemblyName GetAssemblyName();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.AssemblyReferenceHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(AssemblyReferenceHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(AssemblyReferenceHandle left, AssemblyReferenceHandle right);
    public static AssemblyReferenceHandle op_Explicit(EntityHandle handle);
    public static AssemblyReferenceHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(AssemblyReferenceHandle handle);
    public static Handle op_Implicit(AssemblyReferenceHandle handle);
    public static bool op_Inequality(AssemblyReferenceHandle left, AssemblyReferenceHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.AssemblyReferenceHandleCollection : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public int Count { get; }
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<AssemblyReferenceHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.AssemblyReferenceHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Blob : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public bool IsDefault { get; }
    public int Length { get; }
    public bool get_IsDefault();
    public int get_Length();
    public ArraySegment`1<byte> GetBytes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.Metadata.BlobBuilder : object {
    protected internal int ChunkCapacity { get; }
    public int Count { get; }
    protected int FreeBytes { get; }
    public BlobBuilder(int capacity);
    protected internal int get_ChunkCapacity();
    public int get_Count();
    protected int get_FreeBytes();
    public void Align(int alignment);
    protected virtual BlobBuilder AllocateChunk(int minimalSize);
    public void Clear();
    public bool ContentEquals(BlobBuilder other);
    protected void Free();
    protected virtual void FreeChunk();
    public Blobs GetBlobs();
    public void LinkPrefix(BlobBuilder prefix);
    public void LinkSuffix(BlobBuilder suffix);
    public void PadTo(int position);
    public Blob ReserveBytes(int byteCount);
    public Byte[] ToArray();
    public Byte[] ToArray(int start, int byteCount);
    [NullableContextAttribute("0")]
public ImmutableArray`1<byte> ToImmutableArray();
    [NullableContextAttribute("0")]
public ImmutableArray`1<byte> ToImmutableArray(int start, int byteCount);
    public int TryWriteBytes(Stream source, int byteCount);
    public void WriteBoolean(bool value);
    public void WriteByte(byte value);
    [NullableContextAttribute("0")]
public void WriteBytes(Byte* buffer, int byteCount);
    public void WriteBytes(byte value, int byteCount);
    public void WriteBytes(Byte[] buffer);
    public void WriteBytes(Byte[] buffer, int start, int byteCount);
    [NullableContextAttribute("0")]
public void WriteBytes(ImmutableArray`1<byte> buffer);
    [NullableContextAttribute("0")]
public void WriteBytes(ImmutableArray`1<byte> buffer, int start, int byteCount);
    public void WriteCompressedInteger(int value);
    public void WriteCompressedSignedInteger(int value);
    [NullableContextAttribute("2")]
public void WriteConstant(object value);
    public void WriteContentTo(Stream destination);
    public void WriteContentTo(BlobBuilder destination);
    public void WriteContentTo(BlobWriter& destination);
    public void WriteDateTime(DateTime value);
    public void WriteDecimal(decimal value);
    public void WriteDouble(double value);
    public void WriteGuid(Guid value);
    public void WriteInt16(short value);
    public void WriteInt16BE(short value);
    public void WriteInt32(int value);
    public void WriteInt32BE(int value);
    public void WriteInt64(long value);
    public void WriteReference(int reference, bool isSmall);
    public void WriteSByte(sbyte value);
    [NullableContextAttribute("2")]
public void WriteSerializedString(string value);
    public void WriteSingle(float value);
    public void WriteUInt16(ushort value);
    public void WriteUInt16BE(ushort value);
    public void WriteUInt32(UInt32 value);
    public void WriteUInt32BE(UInt32 value);
    public void WriteUInt64(ulong value);
    public void WriteUserString(string value);
    public void WriteUTF16(Char[] value);
    public void WriteUTF16(string value);
    public void WriteUTF8(string value, bool allowUnpairedSurrogates);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.BlobContentId : ValueType {
    private int _dummyPrimitive;
    public Guid Guid { get; }
    public bool IsDefault { get; }
    public UInt32 Stamp { get; }
    [NullableContextAttribute("1")]
public BlobContentId(Byte[] id);
    public BlobContentId(ImmutableArray`1<byte> id);
    public BlobContentId(Guid guid, UInt32 stamp);
    public Guid get_Guid();
    public bool get_IsDefault();
    public UInt32 get_Stamp();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(BlobContentId other);
    [NullableContextAttribute("1")]
public static BlobContentId FromHash(Byte[] hashCode);
    public static BlobContentId FromHash(ImmutableArray`1<byte> hashCode);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public static Func`2<IEnumerable`1<Blob>, BlobContentId> GetTimeBasedProvider();
    public static bool op_Equality(BlobContentId left, BlobContentId right);
    public static bool op_Inequality(BlobContentId left, BlobContentId right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.BlobHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(BlobHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(BlobHandle left, BlobHandle right);
    public static BlobHandle op_Explicit(Handle handle);
    public static Handle op_Implicit(BlobHandle handle);
    public static bool op_Inequality(BlobHandle left, BlobHandle right);
}
public class System.Reflection.Metadata.BlobReader : ValueType {
    private int _dummyPrimitive;
    public Byte* CurrentPointer { get; }
    public int Length { get; }
    public int Offset { get; public set; }
    public int RemainingBytes { get; }
    public Byte* StartPointer { get; }
    public BlobReader(Byte* buffer, int length);
    public Byte* get_CurrentPointer();
    public int get_Length();
    public int get_Offset();
    public void set_Offset(int value);
    public int get_RemainingBytes();
    public Byte* get_StartPointer();
    public void Align(byte alignment);
    public int IndexOf(byte value);
    public BlobHandle ReadBlobHandle();
    public bool ReadBoolean();
    public byte ReadByte();
    [NullableContextAttribute("1")]
public Byte[] ReadBytes(int byteCount);
    [NullableContextAttribute("1")]
public void ReadBytes(int byteCount, Byte[] buffer, int bufferOffset);
    public char ReadChar();
    public int ReadCompressedInteger();
    public int ReadCompressedSignedInteger();
    [NullableContextAttribute("2")]
public object ReadConstant(ConstantTypeCode typeCode);
    public DateTime ReadDateTime();
    public decimal ReadDecimal();
    public double ReadDouble();
    public Guid ReadGuid();
    public short ReadInt16();
    public int ReadInt32();
    public long ReadInt64();
    public sbyte ReadSByte();
    public SerializationTypeCode ReadSerializationTypeCode();
    [NullableContextAttribute("2")]
public string ReadSerializedString();
    public SignatureHeader ReadSignatureHeader();
    public SignatureTypeCode ReadSignatureTypeCode();
    public float ReadSingle();
    public EntityHandle ReadTypeHandle();
    public ushort ReadUInt16();
    public UInt32 ReadUInt32();
    public ulong ReadUInt64();
    [NullableContextAttribute("1")]
public string ReadUTF16(int byteCount);
    [NullableContextAttribute("1")]
public string ReadUTF8(int byteCount);
    public void Reset();
    public bool TryReadCompressedInteger(Int32& value);
    public bool TryReadCompressedSignedInteger(Int32& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.Metadata.BlobWriter : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public Blob Blob { get; }
    public int Length { get; }
    public int Offset { get; public set; }
    public int RemainingBytes { get; }
    public BlobWriter(Byte[] buffer);
    public BlobWriter(Byte[] buffer, int start, int count);
    public BlobWriter(int size);
    public BlobWriter(Blob blob);
    public Blob get_Blob();
    public int get_Length();
    public int get_Offset();
    public void set_Offset(int value);
    public int get_RemainingBytes();
    public void Align(int alignment);
    public void Clear();
    public bool ContentEquals(BlobWriter other);
    public void PadTo(int offset);
    public Byte[] ToArray();
    public Byte[] ToArray(int start, int byteCount);
    [NullableContextAttribute("0")]
public ImmutableArray`1<byte> ToImmutableArray();
    [NullableContextAttribute("0")]
public ImmutableArray`1<byte> ToImmutableArray(int start, int byteCount);
    public void WriteBoolean(bool value);
    public void WriteByte(byte value);
    [NullableContextAttribute("0")]
public void WriteBytes(Byte* buffer, int byteCount);
    public void WriteBytes(byte value, int byteCount);
    public void WriteBytes(Byte[] buffer);
    public void WriteBytes(Byte[] buffer, int start, int byteCount);
    [NullableContextAttribute("0")]
public void WriteBytes(ImmutableArray`1<byte> buffer);
    [NullableContextAttribute("0")]
public void WriteBytes(ImmutableArray`1<byte> buffer, int start, int byteCount);
    public int WriteBytes(Stream source, int byteCount);
    public void WriteBytes(BlobBuilder source);
    public void WriteCompressedInteger(int value);
    public void WriteCompressedSignedInteger(int value);
    [NullableContextAttribute("2")]
public void WriteConstant(object value);
    public void WriteDateTime(DateTime value);
    public void WriteDecimal(decimal value);
    public void WriteDouble(double value);
    public void WriteGuid(Guid value);
    public void WriteInt16(short value);
    public void WriteInt16BE(short value);
    public void WriteInt32(int value);
    public void WriteInt32BE(int value);
    public void WriteInt64(long value);
    public void WriteReference(int reference, bool isSmall);
    public void WriteSByte(sbyte value);
    [NullableContextAttribute("2")]
public void WriteSerializedString(string str);
    public void WriteSingle(float value);
    public void WriteUInt16(ushort value);
    public void WriteUInt16BE(ushort value);
    public void WriteUInt32(UInt32 value);
    public void WriteUInt32BE(UInt32 value);
    public void WriteUInt64(ulong value);
    public void WriteUserString(string value);
    public void WriteUTF16(Char[] value);
    public void WriteUTF16(string value);
    public void WriteUTF8(string value, bool allowUnpairedSurrogates);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Constant : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public EntityHandle Parent { get; }
    public ConstantTypeCode TypeCode { get; }
    public BlobHandle Value { get; }
    public EntityHandle get_Parent();
    public ConstantTypeCode get_TypeCode();
    public BlobHandle get_Value();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.ConstantHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ConstantHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(ConstantHandle left, ConstantHandle right);
    public static ConstantHandle op_Explicit(EntityHandle handle);
    public static ConstantHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(ConstantHandle handle);
    public static Handle op_Implicit(ConstantHandle handle);
    public static bool op_Inequality(ConstantHandle left, ConstantHandle right);
}
public enum System.Reflection.Metadata.ConstantTypeCode : Enum {
    public byte value__;
    public static ConstantTypeCode Invalid;
    public static ConstantTypeCode Boolean;
    public static ConstantTypeCode Char;
    public static ConstantTypeCode SByte;
    public static ConstantTypeCode Byte;
    public static ConstantTypeCode Int16;
    public static ConstantTypeCode UInt16;
    public static ConstantTypeCode Int32;
    public static ConstantTypeCode UInt32;
    public static ConstantTypeCode Int64;
    public static ConstantTypeCode UInt64;
    public static ConstantTypeCode Single;
    public static ConstantTypeCode Double;
    public static ConstantTypeCode String;
    public static ConstantTypeCode NullReference;
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.CustomAttribute : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public EntityHandle Constructor { get; }
    public EntityHandle Parent { get; }
    public BlobHandle Value { get; }
    public EntityHandle get_Constructor();
    public EntityHandle get_Parent();
    public BlobHandle get_Value();
    [NullableContextAttribute("1")]
public CustomAttributeValue`1<TType> DecodeValue(ICustomAttributeTypeProvider`1<TType> provider);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.CustomAttributeHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CustomAttributeHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(CustomAttributeHandle left, CustomAttributeHandle right);
    public static CustomAttributeHandle op_Explicit(EntityHandle handle);
    public static CustomAttributeHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(CustomAttributeHandle handle);
    public static Handle op_Implicit(CustomAttributeHandle handle);
    public static bool op_Inequality(CustomAttributeHandle left, CustomAttributeHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.CustomAttributeHandleCollection : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public int Count { get; }
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<CustomAttributeHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.CustomAttributeHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.CustomAttributeNamedArgument`1 : ValueType {
    private TType _Type_k__BackingField;
    private object _dummy;
    private int _dummyPrimitive;
    public CustomAttributeNamedArgumentKind Kind { get; }
    public string Name { get; }
    [NullableAttribute("1")]
public TType Type { get; }
    public object Value { get; }
    public CustomAttributeNamedArgument`1(string name, CustomAttributeNamedArgumentKind kind, TType type, object value);
    public CustomAttributeNamedArgumentKind get_Kind();
    public string get_Name();
    [NullableContextAttribute("1")]
public TType get_Type();
    public object get_Value();
}
public enum System.Reflection.Metadata.CustomAttributeNamedArgumentKind : Enum {
    public byte value__;
    public static CustomAttributeNamedArgumentKind Field;
    public static CustomAttributeNamedArgumentKind Property;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.CustomAttributeTypedArgument`1 : ValueType {
    private TType _Type_k__BackingField;
    private object _dummy;
    private int _dummyPrimitive;
    public TType Type { get; }
    [NullableAttribute("2")]
public object Value { get; }
    public CustomAttributeTypedArgument`1(TType type, object value);
    public TType get_Type();
    [NullableContextAttribute("2")]
public object get_Value();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.CustomAttributeValue`1 : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<CustomAttributeTypedArgument`1<TType>> FixedArguments { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<CustomAttributeNamedArgument`1<TType>> NamedArguments { get; }
    public CustomAttributeValue`1(ImmutableArray`1<CustomAttributeTypedArgument`1<TType>> fixedArguments, ImmutableArray`1<CustomAttributeNamedArgument`1<TType>> namedArguments);
    public ImmutableArray`1<CustomAttributeTypedArgument`1<TType>> get_FixedArguments();
    public ImmutableArray`1<CustomAttributeNamedArgument`1<TType>> get_NamedArguments();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.CustomDebugInformation : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public GuidHandle Kind { get; }
    public EntityHandle Parent { get; }
    public BlobHandle Value { get; }
    public GuidHandle get_Kind();
    public EntityHandle get_Parent();
    public BlobHandle get_Value();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.CustomDebugInformationHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CustomDebugInformationHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(CustomDebugInformationHandle left, CustomDebugInformationHandle right);
    public static CustomDebugInformationHandle op_Explicit(EntityHandle handle);
    public static CustomDebugInformationHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(CustomDebugInformationHandle handle);
    public static Handle op_Implicit(CustomDebugInformationHandle handle);
    public static bool op_Inequality(CustomDebugInformationHandle left, CustomDebugInformationHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.CustomDebugInformationHandleCollection : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public int Count { get; }
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<CustomDebugInformationHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.CustomDebugInformationHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Reflection.Metadata.DebugMetadataHeader : object {
    public MethodDefinitionHandle EntryPoint { get; }
    public ImmutableArray`1<byte> Id { get; }
    public int IdStartOffset { get; }
    public MethodDefinitionHandle get_EntryPoint();
    public ImmutableArray`1<byte> get_Id();
    public int get_IdStartOffset();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.DeclarativeSecurityAttribute : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public DeclarativeSecurityAction Action { get; }
    public EntityHandle Parent { get; }
    public BlobHandle PermissionSet { get; }
    public DeclarativeSecurityAction get_Action();
    public EntityHandle get_Parent();
    public BlobHandle get_PermissionSet();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.DeclarativeSecurityAttributeHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(DeclarativeSecurityAttributeHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(DeclarativeSecurityAttributeHandle left, DeclarativeSecurityAttributeHandle right);
    public static DeclarativeSecurityAttributeHandle op_Explicit(EntityHandle handle);
    public static DeclarativeSecurityAttributeHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(DeclarativeSecurityAttributeHandle handle);
    public static Handle op_Implicit(DeclarativeSecurityAttributeHandle handle);
    public static bool op_Inequality(DeclarativeSecurityAttributeHandle left, DeclarativeSecurityAttributeHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.DeclarativeSecurityAttributeHandleCollection : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public int Count { get; }
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<DeclarativeSecurityAttributeHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.DeclarativeSecurityAttributeHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Document : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobHandle Hash { get; }
    public GuidHandle HashAlgorithm { get; }
    public GuidHandle Language { get; }
    public DocumentNameBlobHandle Name { get; }
    public BlobHandle get_Hash();
    public GuidHandle get_HashAlgorithm();
    public GuidHandle get_Language();
    public DocumentNameBlobHandle get_Name();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.DocumentHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(DocumentHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(DocumentHandle left, DocumentHandle right);
    public static DocumentHandle op_Explicit(EntityHandle handle);
    public static DocumentHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(DocumentHandle handle);
    public static Handle op_Implicit(DocumentHandle handle);
    public static bool op_Inequality(DocumentHandle left, DocumentHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.DocumentHandleCollection : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public int Count { get; }
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<DocumentHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.DocumentHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.DocumentNameBlobHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(DocumentNameBlobHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(DocumentNameBlobHandle left, DocumentNameBlobHandle right);
    public static DocumentNameBlobHandle op_Explicit(BlobHandle handle);
    public static BlobHandle op_Implicit(DocumentNameBlobHandle handle);
    public static bool op_Inequality(DocumentNameBlobHandle left, DocumentNameBlobHandle right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.ArrayShapeEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public ArrayShapeEncoder(BlobBuilder builder);
    public BlobBuilder get_Builder();
    [NullableContextAttribute("0")]
public void Shape(int rank, ImmutableArray`1<int> sizes, ImmutableArray`1<int> lowerBounds);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.BlobEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public BlobEncoder(BlobBuilder builder);
    public BlobBuilder get_Builder();
    public void CustomAttributeSignature(Action`1<FixedArgumentsEncoder> fixedArguments, Action`1<CustomAttributeNamedArgumentsEncoder> namedArguments);
    public void CustomAttributeSignature(FixedArgumentsEncoder& fixedArguments, CustomAttributeNamedArgumentsEncoder& namedArguments);
    public FieldTypeEncoder Field();
    public SignatureTypeEncoder FieldSignature();
    public LocalVariablesEncoder LocalVariableSignature(int variableCount);
    public MethodSignatureEncoder MethodSignature(SignatureCallingConvention convention, int genericParameterCount, bool isInstanceMethod);
    public GenericTypeArgumentsEncoder MethodSpecificationSignature(int genericArgumentCount);
    public NamedArgumentsEncoder PermissionSetArguments(int argumentCount);
    public PermissionSetEncoder PermissionSetBlob(int attributeCount);
    public MethodSignatureEncoder PropertySignature(bool isInstanceProperty);
    public SignatureTypeEncoder TypeSpecificationSignature();
}
public static class System.Reflection.Metadata.Ecma335.CodedIndex : object {
    public static int CustomAttributeType(EntityHandle handle);
    public static int HasConstant(EntityHandle handle);
    public static int HasCustomAttribute(EntityHandle handle);
    public static int HasCustomDebugInformation(EntityHandle handle);
    public static int HasDeclSecurity(EntityHandle handle);
    public static int HasFieldMarshal(EntityHandle handle);
    public static int HasSemantics(EntityHandle handle);
    public static int Implementation(EntityHandle handle);
    public static int MemberForwarded(EntityHandle handle);
    public static int MemberRefParent(EntityHandle handle);
    public static int MethodDefOrRef(EntityHandle handle);
    public static int ResolutionScope(EntityHandle handle);
    public static int TypeDefOrRef(EntityHandle handle);
    public static int TypeDefOrRefOrSpec(EntityHandle handle);
    public static int TypeOrMethodDef(EntityHandle handle);
}
public class System.Reflection.Metadata.Ecma335.ControlFlowBuilder : object {
    public void AddCatchRegion(LabelHandle tryStart, LabelHandle tryEnd, LabelHandle handlerStart, LabelHandle handlerEnd, EntityHandle catchType);
    public void AddFaultRegion(LabelHandle tryStart, LabelHandle tryEnd, LabelHandle handlerStart, LabelHandle handlerEnd);
    public void AddFilterRegion(LabelHandle tryStart, LabelHandle tryEnd, LabelHandle handlerStart, LabelHandle handlerEnd, LabelHandle filterStart);
    public void AddFinallyRegion(LabelHandle tryStart, LabelHandle tryEnd, LabelHandle handlerStart, LabelHandle handlerEnd);
    public void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public CustomAttributeArrayTypeEncoder(BlobBuilder builder);
    public BlobBuilder get_Builder();
    public CustomAttributeElementTypeEncoder ElementType();
    public void ObjectArray();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public CustomAttributeElementTypeEncoder(BlobBuilder builder);
    public BlobBuilder get_Builder();
    public void Boolean();
    public void Byte();
    public void Char();
    public void Double();
    public void Enum(string enumTypeName);
    public void Int16();
    public void Int32();
    public void Int64();
    public void PrimitiveType(PrimitiveSerializationTypeCode type);
    public void SByte();
    public void Single();
    public void String();
    public void SystemType();
    public void UInt16();
    public void UInt32();
    public void UInt64();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.CustomAttributeNamedArgumentsEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public CustomAttributeNamedArgumentsEncoder(BlobBuilder builder);
    public BlobBuilder get_Builder();
    public NamedArgumentsEncoder Count(int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.CustomModifiersEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public CustomModifiersEncoder(BlobBuilder builder);
    public BlobBuilder get_Builder();
    public CustomModifiersEncoder AddModifier(EntityHandle type, bool isOptional);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.EditAndContinueLogEntry : ValueType {
    private int _dummyPrimitive;
    public EntityHandle Handle { get; }
    public EditAndContinueOperation Operation { get; }
    public EditAndContinueLogEntry(EntityHandle handle, EditAndContinueOperation operation);
    public EntityHandle get_Handle();
    public EditAndContinueOperation get_Operation();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(EditAndContinueLogEntry other);
    public virtual int GetHashCode();
}
public enum System.Reflection.Metadata.Ecma335.EditAndContinueOperation : Enum {
    public int value__;
    public static EditAndContinueOperation Default;
    public static EditAndContinueOperation AddMethod;
    public static EditAndContinueOperation AddField;
    public static EditAndContinueOperation AddParameter;
    public static EditAndContinueOperation AddProperty;
    public static EditAndContinueOperation AddEvent;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.ExceptionRegionEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public bool HasSmallFormat { get; }
    public BlobBuilder get_Builder();
    public bool get_HasSmallFormat();
    public ExceptionRegionEncoder Add(ExceptionRegionKind kind, int tryOffset, int tryLength, int handlerOffset, int handlerLength, EntityHandle catchType, int filterOffset);
    public ExceptionRegionEncoder AddCatch(int tryOffset, int tryLength, int handlerOffset, int handlerLength, EntityHandle catchType);
    public ExceptionRegionEncoder AddFault(int tryOffset, int tryLength, int handlerOffset, int handlerLength);
    public ExceptionRegionEncoder AddFilter(int tryOffset, int tryLength, int handlerOffset, int handlerLength, int filterOffset);
    public ExceptionRegionEncoder AddFinally(int tryOffset, int tryLength, int handlerOffset, int handlerLength);
    public static bool IsSmallExceptionRegion(int startOffset, int length);
    public static bool IsSmallRegionCount(int exceptionRegionCount);
}
[ExtensionAttribute]
public static class System.Reflection.Metadata.Ecma335.ExportedTypeExtensions : object {
    [ExtensionAttribute]
public static int GetTypeDefinitionId(ExportedType exportedType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.FieldTypeEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public FieldTypeEncoder(BlobBuilder builder);
    public BlobBuilder get_Builder();
    public CustomModifiersEncoder CustomModifiers();
    public SignatureTypeEncoder Type(bool isByRef);
    public void TypedReference();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.FixedArgumentsEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public FixedArgumentsEncoder(BlobBuilder builder);
    public BlobBuilder get_Builder();
    public LiteralEncoder AddArgument();
}
public enum System.Reflection.Metadata.Ecma335.FunctionPointerAttributes : Enum {
    public int value__;
    public static FunctionPointerAttributes None;
    public static FunctionPointerAttributes HasThis;
    public static FunctionPointerAttributes HasExplicitThis;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.GenericTypeArgumentsEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public GenericTypeArgumentsEncoder(BlobBuilder builder);
    public BlobBuilder get_Builder();
    public SignatureTypeEncoder AddArgument();
}
public enum System.Reflection.Metadata.Ecma335.HeapIndex : Enum {
    public int value__;
    public static HeapIndex UserString;
    public static HeapIndex String;
    public static HeapIndex Blob;
    public static HeapIndex Guid;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.InstructionEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder CodeBuilder { get; }
    [NullableAttribute("2")]
public ControlFlowBuilder ControlFlowBuilder { get; }
    public int Offset { get; }
    public InstructionEncoder(BlobBuilder codeBuilder, ControlFlowBuilder controlFlowBuilder);
    public BlobBuilder get_CodeBuilder();
    [NullableContextAttribute("2")]
public ControlFlowBuilder get_ControlFlowBuilder();
    public int get_Offset();
    public void Branch(ILOpCode code, LabelHandle label);
    public void Call(EntityHandle methodHandle);
    public void Call(MemberReferenceHandle methodHandle);
    public void Call(MethodDefinitionHandle methodHandle);
    public void Call(MethodSpecificationHandle methodHandle);
    public void CallIndirect(StandaloneSignatureHandle signature);
    public LabelHandle DefineLabel();
    public void LoadArgument(int argumentIndex);
    public void LoadArgumentAddress(int argumentIndex);
    public void LoadConstantI4(int value);
    public void LoadConstantI8(long value);
    public void LoadConstantR4(float value);
    public void LoadConstantR8(double value);
    public void LoadLocal(int slotIndex);
    public void LoadLocalAddress(int slotIndex);
    public void LoadString(UserStringHandle handle);
    public void MarkLabel(LabelHandle label);
    public void OpCode(ILOpCode code);
    public void StoreArgument(int argumentIndex);
    public void StoreLocal(int slotIndex);
    public void Token(int token);
    public void Token(EntityHandle handle);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.LabelHandle : ValueType {
    private int _dummyPrimitive;
    public int Id { get; }
    public bool IsNil { get; }
    public int get_Id();
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(LabelHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(LabelHandle left, LabelHandle right);
    public static bool op_Inequality(LabelHandle left, LabelHandle right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.LiteralEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public LiteralEncoder(BlobBuilder builder);
    public BlobBuilder get_Builder();
    public ScalarEncoder Scalar();
    public void TaggedScalar(Action`1<CustomAttributeElementTypeEncoder> type, Action`1<ScalarEncoder> scalar);
    public void TaggedScalar(CustomAttributeElementTypeEncoder& type, ScalarEncoder& scalar);
    public void TaggedVector(Action`1<CustomAttributeArrayTypeEncoder> arrayType, Action`1<VectorEncoder> vector);
    public void TaggedVector(CustomAttributeArrayTypeEncoder& arrayType, VectorEncoder& vector);
    public VectorEncoder Vector();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.LiteralsEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public LiteralsEncoder(BlobBuilder builder);
    public BlobBuilder get_Builder();
    public LiteralEncoder AddLiteral();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.LocalVariablesEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public LocalVariablesEncoder(BlobBuilder builder);
    public BlobBuilder get_Builder();
    public LocalVariableTypeEncoder AddVariable();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.LocalVariableTypeEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public LocalVariableTypeEncoder(BlobBuilder builder);
    public BlobBuilder get_Builder();
    public CustomModifiersEncoder CustomModifiers();
    public SignatureTypeEncoder Type(bool isByRef, bool isPinned);
    public void TypedReference();
}
public class System.Reflection.Metadata.Ecma335.MetadataAggregator : object {
    [NullableContextAttribute("2")]
public MetadataAggregator(IReadOnlyList`1<int> baseTableRowCounts, IReadOnlyList`1<int> baseHeapSizes, IReadOnlyList`1<MetadataReader> deltaReaders);
    [NullableContextAttribute("1")]
public MetadataAggregator(MetadataReader baseReader, IReadOnlyList`1<MetadataReader> deltaReaders);
    public Handle GetGenerationHandle(Handle handle, Int32& generation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.Metadata.Ecma335.MetadataBuilder : object {
    public MetadataBuilder(int userStringHeapStartOffset, int stringHeapStartOffset, int blobHeapStartOffset, int guidHeapStartOffset);
    public AssemblyDefinitionHandle AddAssembly(StringHandle name, Version version, StringHandle culture, BlobHandle publicKey, AssemblyFlags flags, AssemblyHashAlgorithm hashAlgorithm);
    public AssemblyFileHandle AddAssemblyFile(StringHandle name, BlobHandle hashValue, bool containsMetadata);
    public AssemblyReferenceHandle AddAssemblyReference(StringHandle name, Version version, StringHandle culture, BlobHandle publicKeyOrToken, AssemblyFlags flags, BlobHandle hashValue);
    [NullableContextAttribute("2")]
public ConstantHandle AddConstant(EntityHandle parent, object value);
    public CustomAttributeHandle AddCustomAttribute(EntityHandle parent, EntityHandle constructor, BlobHandle value);
    public CustomDebugInformationHandle AddCustomDebugInformation(EntityHandle parent, GuidHandle kind, BlobHandle value);
    public DeclarativeSecurityAttributeHandle AddDeclarativeSecurityAttribute(EntityHandle parent, DeclarativeSecurityAction action, BlobHandle permissionSet);
    public DocumentHandle AddDocument(BlobHandle name, GuidHandle hashAlgorithm, BlobHandle hash, GuidHandle language);
    public void AddEncLogEntry(EntityHandle entity, EditAndContinueOperation code);
    public void AddEncMapEntry(EntityHandle entity);
    public EventDefinitionHandle AddEvent(EventAttributes attributes, StringHandle name, EntityHandle type);
    public void AddEventMap(TypeDefinitionHandle declaringType, EventDefinitionHandle eventList);
    public ExportedTypeHandle AddExportedType(TypeAttributes attributes, StringHandle namespace, StringHandle name, EntityHandle implementation, int typeDefinitionId);
    public FieldDefinitionHandle AddFieldDefinition(FieldAttributes attributes, StringHandle name, BlobHandle signature);
    public void AddFieldLayout(FieldDefinitionHandle field, int offset);
    public void AddFieldRelativeVirtualAddress(FieldDefinitionHandle field, int offset);
    public GenericParameterHandle AddGenericParameter(EntityHandle parent, GenericParameterAttributes attributes, StringHandle name, int index);
    public GenericParameterConstraintHandle AddGenericParameterConstraint(GenericParameterHandle genericParameter, EntityHandle constraint);
    public ImportScopeHandle AddImportScope(ImportScopeHandle parentScope, BlobHandle imports);
    public InterfaceImplementationHandle AddInterfaceImplementation(TypeDefinitionHandle type, EntityHandle implementedInterface);
    public LocalConstantHandle AddLocalConstant(StringHandle name, BlobHandle signature);
    public LocalScopeHandle AddLocalScope(MethodDefinitionHandle method, ImportScopeHandle importScope, LocalVariableHandle variableList, LocalConstantHandle constantList, int startOffset, int length);
    public LocalVariableHandle AddLocalVariable(LocalVariableAttributes attributes, int index, StringHandle name);
    public ManifestResourceHandle AddManifestResource(ManifestResourceAttributes attributes, StringHandle name, EntityHandle implementation, UInt32 offset);
    public void AddMarshallingDescriptor(EntityHandle parent, BlobHandle descriptor);
    public MemberReferenceHandle AddMemberReference(EntityHandle parent, StringHandle name, BlobHandle signature);
    public MethodDebugInformationHandle AddMethodDebugInformation(DocumentHandle document, BlobHandle sequencePoints);
    public MethodDefinitionHandle AddMethodDefinition(MethodAttributes attributes, MethodImplAttributes implAttributes, StringHandle name, BlobHandle signature, int bodyOffset, ParameterHandle parameterList);
    public MethodImplementationHandle AddMethodImplementation(TypeDefinitionHandle type, EntityHandle methodBody, EntityHandle methodDeclaration);
    public void AddMethodImport(MethodDefinitionHandle method, MethodImportAttributes attributes, StringHandle name, ModuleReferenceHandle module);
    public void AddMethodSemantics(EntityHandle association, MethodSemanticsAttributes semantics, MethodDefinitionHandle methodDefinition);
    public MethodSpecificationHandle AddMethodSpecification(EntityHandle method, BlobHandle instantiation);
    public ModuleDefinitionHandle AddModule(int generation, StringHandle moduleName, GuidHandle mvid, GuidHandle encId, GuidHandle encBaseId);
    public ModuleReferenceHandle AddModuleReference(StringHandle moduleName);
    public void AddNestedType(TypeDefinitionHandle type, TypeDefinitionHandle enclosingType);
    public ParameterHandle AddParameter(ParameterAttributes attributes, StringHandle name, int sequenceNumber);
    public PropertyDefinitionHandle AddProperty(PropertyAttributes attributes, StringHandle name, BlobHandle signature);
    public void AddPropertyMap(TypeDefinitionHandle declaringType, PropertyDefinitionHandle propertyList);
    public StandaloneSignatureHandle AddStandaloneSignature(BlobHandle signature);
    public void AddStateMachineMethod(MethodDefinitionHandle moveNextMethod, MethodDefinitionHandle kickoffMethod);
    public TypeDefinitionHandle AddTypeDefinition(TypeAttributes attributes, StringHandle namespace, StringHandle name, EntityHandle baseType, FieldDefinitionHandle fieldList, MethodDefinitionHandle methodList);
    public void AddTypeLayout(TypeDefinitionHandle type, ushort packingSize, UInt32 size);
    public TypeReferenceHandle AddTypeReference(EntityHandle resolutionScope, StringHandle namespace, StringHandle name);
    public TypeSpecificationHandle AddTypeSpecification(BlobHandle signature);
    public BlobHandle GetOrAddBlob(Byte[] value);
    [NullableContextAttribute("0")]
public BlobHandle GetOrAddBlob(ImmutableArray`1<byte> value);
    public BlobHandle GetOrAddBlob(BlobBuilder value);
    public BlobHandle GetOrAddBlobUTF16(string value);
    public BlobHandle GetOrAddBlobUTF8(string value, bool allowUnpairedSurrogates);
    [NullableContextAttribute("2")]
public BlobHandle GetOrAddConstantBlob(object value);
    public BlobHandle GetOrAddDocumentName(string value);
    public GuidHandle GetOrAddGuid(Guid guid);
    public StringHandle GetOrAddString(string value);
    public UserStringHandle GetOrAddUserString(string value);
    public int GetRowCount(TableIndex table);
    [NullableContextAttribute("0")]
public ImmutableArray`1<int> GetRowCounts();
    [NullableContextAttribute("0")]
public ReservedBlob`1<GuidHandle> ReserveGuid();
    [NullableContextAttribute("0")]
public ReservedBlob`1<UserStringHandle> ReserveUserString(int length);
    public void SetCapacity(HeapIndex heap, int byteCount);
    public void SetCapacity(TableIndex table, int rowCount);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Reflection.Metadata.Ecma335.MetadataReaderExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<EditAndContinueLogEntry> GetEditAndContinueLogEntries(MetadataReader reader);
    [ExtensionAttribute]
public static IEnumerable`1<EntityHandle> GetEditAndContinueMapEntries(MetadataReader reader);
    [ExtensionAttribute]
public static int GetHeapMetadataOffset(MetadataReader reader, HeapIndex heapIndex);
    [ExtensionAttribute]
public static int GetHeapSize(MetadataReader reader, HeapIndex heapIndex);
    [ExtensionAttribute]
public static BlobHandle GetNextHandle(MetadataReader reader, BlobHandle handle);
    [ExtensionAttribute]
public static StringHandle GetNextHandle(MetadataReader reader, StringHandle handle);
    [ExtensionAttribute]
public static UserStringHandle GetNextHandle(MetadataReader reader, UserStringHandle handle);
    [ExtensionAttribute]
public static int GetTableMetadataOffset(MetadataReader reader, TableIndex tableIndex);
    [ExtensionAttribute]
public static int GetTableRowCount(MetadataReader reader, TableIndex tableIndex);
    [ExtensionAttribute]
public static int GetTableRowSize(MetadataReader reader, TableIndex tableIndex);
    [ExtensionAttribute]
public static IEnumerable`1<TypeDefinitionHandle> GetTypesWithEvents(MetadataReader reader);
    [ExtensionAttribute]
public static IEnumerable`1<TypeDefinitionHandle> GetTypesWithProperties(MetadataReader reader);
    [ExtensionAttribute]
public static SignatureTypeKind ResolveSignatureTypeKind(MetadataReader reader, EntityHandle typeHandle, byte rawTypeKind);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.Metadata.Ecma335.MetadataRootBuilder : object {
    public string MetadataVersion { get; }
    public MetadataSizes Sizes { get; }
    public bool SuppressValidation { get; }
    public MetadataRootBuilder(MetadataBuilder tablesAndHeaps, string metadataVersion, bool suppressValidation);
    public string get_MetadataVersion();
    public MetadataSizes get_Sizes();
    public bool get_SuppressValidation();
    public void Serialize(BlobBuilder builder, int methodBodyStreamRva, int mappedFieldDataStreamRva);
}
public class System.Reflection.Metadata.Ecma335.MetadataSizes : object {
    public ImmutableArray`1<int> ExternalRowCounts { get; }
    public ImmutableArray`1<int> HeapSizes { get; }
    public ImmutableArray`1<int> RowCounts { get; }
    public ImmutableArray`1<int> get_ExternalRowCounts();
    public ImmutableArray`1<int> get_HeapSizes();
    public ImmutableArray`1<int> get_RowCounts();
    public int GetAlignedHeapSize(HeapIndex index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Reflection.Metadata.Ecma335.MetadataTokens : object {
    public static int HeapCount;
    public static int TableCount;
    public static AssemblyFileHandle AssemblyFileHandle(int rowNumber);
    public static AssemblyReferenceHandle AssemblyReferenceHandle(int rowNumber);
    public static BlobHandle BlobHandle(int offset);
    public static ConstantHandle ConstantHandle(int rowNumber);
    public static CustomAttributeHandle CustomAttributeHandle(int rowNumber);
    public static CustomDebugInformationHandle CustomDebugInformationHandle(int rowNumber);
    public static DeclarativeSecurityAttributeHandle DeclarativeSecurityAttributeHandle(int rowNumber);
    public static DocumentHandle DocumentHandle(int rowNumber);
    public static DocumentNameBlobHandle DocumentNameBlobHandle(int offset);
    public static EntityHandle EntityHandle(int token);
    public static EntityHandle EntityHandle(TableIndex tableIndex, int rowNumber);
    public static EventDefinitionHandle EventDefinitionHandle(int rowNumber);
    public static ExportedTypeHandle ExportedTypeHandle(int rowNumber);
    public static FieldDefinitionHandle FieldDefinitionHandle(int rowNumber);
    public static GenericParameterConstraintHandle GenericParameterConstraintHandle(int rowNumber);
    public static GenericParameterHandle GenericParameterHandle(int rowNumber);
    public static int GetHeapOffset(BlobHandle handle);
    public static int GetHeapOffset(GuidHandle handle);
    public static int GetHeapOffset(Handle handle);
    [ExtensionAttribute]
public static int GetHeapOffset(MetadataReader reader, Handle handle);
    public static int GetHeapOffset(StringHandle handle);
    public static int GetHeapOffset(UserStringHandle handle);
    public static int GetRowNumber(EntityHandle handle);
    [ExtensionAttribute]
public static int GetRowNumber(MetadataReader reader, EntityHandle handle);
    public static int GetToken(EntityHandle handle);
    public static int GetToken(Handle handle);
    [ExtensionAttribute]
public static int GetToken(MetadataReader reader, EntityHandle handle);
    [ExtensionAttribute]
public static int GetToken(MetadataReader reader, Handle handle);
    public static GuidHandle GuidHandle(int offset);
    public static Handle Handle(int token);
    public static EntityHandle Handle(TableIndex tableIndex, int rowNumber);
    public static ImportScopeHandle ImportScopeHandle(int rowNumber);
    public static InterfaceImplementationHandle InterfaceImplementationHandle(int rowNumber);
    public static LocalConstantHandle LocalConstantHandle(int rowNumber);
    public static LocalScopeHandle LocalScopeHandle(int rowNumber);
    public static LocalVariableHandle LocalVariableHandle(int rowNumber);
    public static ManifestResourceHandle ManifestResourceHandle(int rowNumber);
    public static MemberReferenceHandle MemberReferenceHandle(int rowNumber);
    public static MethodDebugInformationHandle MethodDebugInformationHandle(int rowNumber);
    public static MethodDefinitionHandle MethodDefinitionHandle(int rowNumber);
    public static MethodImplementationHandle MethodImplementationHandle(int rowNumber);
    public static MethodSpecificationHandle MethodSpecificationHandle(int rowNumber);
    public static ModuleReferenceHandle ModuleReferenceHandle(int rowNumber);
    public static ParameterHandle ParameterHandle(int rowNumber);
    public static PropertyDefinitionHandle PropertyDefinitionHandle(int rowNumber);
    public static StandaloneSignatureHandle StandaloneSignatureHandle(int rowNumber);
    public static StringHandle StringHandle(int offset);
    public static bool TryGetHeapIndex(HandleKind type, HeapIndex& index);
    public static bool TryGetTableIndex(HandleKind type, TableIndex& index);
    public static TypeDefinitionHandle TypeDefinitionHandle(int rowNumber);
    public static TypeReferenceHandle TypeReferenceHandle(int rowNumber);
    public static TypeSpecificationHandle TypeSpecificationHandle(int rowNumber);
    public static UserStringHandle UserStringHandle(int offset);
}
[FlagsAttribute]
public enum System.Reflection.Metadata.Ecma335.MethodBodyAttributes : Enum {
    public int value__;
    public static MethodBodyAttributes None;
    public static MethodBodyAttributes InitLocals;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.MethodBodyStreamEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public MethodBodyStreamEncoder(BlobBuilder builder);
    public BlobBuilder get_Builder();
    public MethodBody AddMethodBody(int codeSize, int maxStack, int exceptionRegionCount, bool hasSmallExceptionRegions, StandaloneSignatureHandle localVariablesSignature, MethodBodyAttributes attributes);
    public MethodBody AddMethodBody(int codeSize, int maxStack, int exceptionRegionCount, bool hasSmallExceptionRegions, StandaloneSignatureHandle localVariablesSignature, MethodBodyAttributes attributes, bool hasDynamicStackAllocation);
    public int AddMethodBody(InstructionEncoder instructionEncoder, int maxStack, StandaloneSignatureHandle localVariablesSignature, MethodBodyAttributes attributes);
    public int AddMethodBody(InstructionEncoder instructionEncoder, int maxStack, StandaloneSignatureHandle localVariablesSignature, MethodBodyAttributes attributes, bool hasDynamicStackAllocation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.MethodSignatureEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public bool HasVarArgs { get; }
    public MethodSignatureEncoder(BlobBuilder builder, bool hasVarArgs);
    public BlobBuilder get_Builder();
    public bool get_HasVarArgs();
    public void Parameters(int parameterCount, Action`1<ReturnTypeEncoder> returnType, Action`1<ParametersEncoder> parameters);
    public void Parameters(int parameterCount, ReturnTypeEncoder& returnType, ParametersEncoder& parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.NamedArgumentsEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public NamedArgumentsEncoder(BlobBuilder builder);
    public BlobBuilder get_Builder();
    public void AddArgument(bool isField, Action`1<NamedArgumentTypeEncoder> type, Action`1<NameEncoder> name, Action`1<LiteralEncoder> literal);
    public void AddArgument(bool isField, NamedArgumentTypeEncoder& type, NameEncoder& name, LiteralEncoder& literal);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.NamedArgumentTypeEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public NamedArgumentTypeEncoder(BlobBuilder builder);
    public BlobBuilder get_Builder();
    public void Object();
    public CustomAttributeElementTypeEncoder ScalarType();
    public CustomAttributeArrayTypeEncoder SZArray();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.NameEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public NameEncoder(BlobBuilder builder);
    public BlobBuilder get_Builder();
    public void Name(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.ParametersEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public bool HasVarArgs { get; }
    public ParametersEncoder(BlobBuilder builder, bool hasVarArgs);
    public BlobBuilder get_Builder();
    public bool get_HasVarArgs();
    public ParameterTypeEncoder AddParameter();
    public ParametersEncoder StartVarArgs();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.ParameterTypeEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public ParameterTypeEncoder(BlobBuilder builder);
    public BlobBuilder get_Builder();
    public CustomModifiersEncoder CustomModifiers();
    public SignatureTypeEncoder Type(bool isByRef);
    public void TypedReference();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.PermissionSetEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public PermissionSetEncoder(BlobBuilder builder);
    public BlobBuilder get_Builder();
    [NullableContextAttribute("0")]
public PermissionSetEncoder AddPermission(string typeName, ImmutableArray`1<byte> encodedArguments);
    public PermissionSetEncoder AddPermission(string typeName, BlobBuilder encodedArguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.Metadata.Ecma335.PortablePdbBuilder : object {
    public ushort FormatVersion { get; }
    public Func`2<IEnumerable`1<Blob>, BlobContentId> IdProvider { get; }
    public string MetadataVersion { get; }
    [NullableContextAttribute("0")]
public PortablePdbBuilder(MetadataBuilder tablesAndHeaps, ImmutableArray`1<int> typeSystemRowCounts, MethodDefinitionHandle entryPoint, Func`2<IEnumerable`1<Blob>, BlobContentId> idProvider);
    public ushort get_FormatVersion();
    public Func`2<IEnumerable`1<Blob>, BlobContentId> get_IdProvider();
    public string get_MetadataVersion();
    public BlobContentId Serialize(BlobBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.ReturnTypeEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public ReturnTypeEncoder(BlobBuilder builder);
    public BlobBuilder get_Builder();
    public CustomModifiersEncoder CustomModifiers();
    public SignatureTypeEncoder Type(bool isByRef);
    public void TypedReference();
    public void Void();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.ScalarEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public ScalarEncoder(BlobBuilder builder);
    public BlobBuilder get_Builder();
    [NullableContextAttribute("2")]
public void Constant(object value);
    public void NullArray();
    [NullableContextAttribute("2")]
public void SystemType(string serializedTypeName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.SignatureDecoder`2 : ValueType {
    private TGenericContext _genericContext;
    private object _dummy;
    private int _dummyPrimitive;
    public SignatureDecoder`2(ISignatureTypeProvider`2<TType, TGenericContext> provider, MetadataReader metadataReader, TGenericContext genericContext);
    public TType DecodeFieldSignature(BlobReader& blobReader);
    public ImmutableArray`1<TType> DecodeLocalSignature(BlobReader& blobReader);
    public MethodSignature`1<TType> DecodeMethodSignature(BlobReader& blobReader);
    public ImmutableArray`1<TType> DecodeMethodSpecificationSignature(BlobReader& blobReader);
    public TType DecodeType(BlobReader& blobReader, bool allowTypeSpecifications);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.SignatureTypeEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public SignatureTypeEncoder(BlobBuilder builder);
    public BlobBuilder get_Builder();
    public void Array(Action`1<SignatureTypeEncoder> elementType, Action`1<ArrayShapeEncoder> arrayShape);
    public void Array(SignatureTypeEncoder& elementType, ArrayShapeEncoder& arrayShape);
    public void Boolean();
    public void Byte();
    public void Char();
    public CustomModifiersEncoder CustomModifiers();
    public void Double();
    public MethodSignatureEncoder FunctionPointer(SignatureCallingConvention convention, FunctionPointerAttributes attributes, int genericParameterCount);
    public GenericTypeArgumentsEncoder GenericInstantiation(EntityHandle genericType, int genericArgumentCount, bool isValueType);
    public void GenericMethodTypeParameter(int parameterIndex);
    public void GenericTypeParameter(int parameterIndex);
    public void Int16();
    public void Int32();
    public void Int64();
    public void IntPtr();
    public void Object();
    public SignatureTypeEncoder Pointer();
    public void PrimitiveType(PrimitiveTypeCode type);
    public void SByte();
    public void Single();
    public void String();
    public SignatureTypeEncoder SZArray();
    public void Type(EntityHandle type, bool isValueType);
    public void UInt16();
    public void UInt32();
    public void UInt64();
    public void UIntPtr();
    public void VoidPointer();
}
public enum System.Reflection.Metadata.Ecma335.TableIndex : Enum {
    public byte value__;
    public static TableIndex Module;
    public static TableIndex TypeRef;
    public static TableIndex TypeDef;
    public static TableIndex FieldPtr;
    public static TableIndex Field;
    public static TableIndex MethodPtr;
    public static TableIndex MethodDef;
    public static TableIndex ParamPtr;
    public static TableIndex Param;
    public static TableIndex InterfaceImpl;
    public static TableIndex MemberRef;
    public static TableIndex Constant;
    public static TableIndex CustomAttribute;
    public static TableIndex FieldMarshal;
    public static TableIndex DeclSecurity;
    public static TableIndex ClassLayout;
    public static TableIndex FieldLayout;
    public static TableIndex StandAloneSig;
    public static TableIndex EventMap;
    public static TableIndex EventPtr;
    public static TableIndex Event;
    public static TableIndex PropertyMap;
    public static TableIndex PropertyPtr;
    public static TableIndex Property;
    public static TableIndex MethodSemantics;
    public static TableIndex MethodImpl;
    public static TableIndex ModuleRef;
    public static TableIndex TypeSpec;
    public static TableIndex ImplMap;
    public static TableIndex FieldRva;
    public static TableIndex EncLog;
    public static TableIndex EncMap;
    public static TableIndex Assembly;
    public static TableIndex AssemblyProcessor;
    public static TableIndex AssemblyOS;
    public static TableIndex AssemblyRef;
    public static TableIndex AssemblyRefProcessor;
    public static TableIndex AssemblyRefOS;
    public static TableIndex File;
    public static TableIndex ExportedType;
    public static TableIndex ManifestResource;
    public static TableIndex NestedClass;
    public static TableIndex GenericParam;
    public static TableIndex MethodSpec;
    public static TableIndex GenericParamConstraint;
    public static TableIndex Document;
    public static TableIndex MethodDebugInformation;
    public static TableIndex LocalScope;
    public static TableIndex LocalVariable;
    public static TableIndex LocalConstant;
    public static TableIndex ImportScope;
    public static TableIndex StateMachineMethod;
    public static TableIndex CustomDebugInformation;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Ecma335.VectorEncoder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobBuilder Builder { get; }
    public VectorEncoder(BlobBuilder builder);
    public BlobBuilder get_Builder();
    public LiteralsEncoder Count(int count);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.EntityHandle : ValueType {
    private int _dummyPrimitive;
    public static AssemblyDefinitionHandle AssemblyDefinition;
    public static ModuleDefinitionHandle ModuleDefinition;
    public bool IsNil { get; }
    public HandleKind Kind { get; }
    public bool get_IsNil();
    public HandleKind get_Kind();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(EntityHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(EntityHandle left, EntityHandle right);
    public static EntityHandle op_Explicit(Handle handle);
    public static Handle op_Implicit(EntityHandle handle);
    public static bool op_Inequality(EntityHandle left, EntityHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.EventAccessors : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public MethodDefinitionHandle Adder { get; }
    public ImmutableArray`1<MethodDefinitionHandle> Others { get; }
    public MethodDefinitionHandle Raiser { get; }
    public MethodDefinitionHandle Remover { get; }
    public MethodDefinitionHandle get_Adder();
    public ImmutableArray`1<MethodDefinitionHandle> get_Others();
    public MethodDefinitionHandle get_Raiser();
    public MethodDefinitionHandle get_Remover();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.EventDefinition : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public EventAttributes Attributes { get; }
    public StringHandle Name { get; }
    public EntityHandle Type { get; }
    public EventAttributes get_Attributes();
    public StringHandle get_Name();
    public EntityHandle get_Type();
    public EventAccessors GetAccessors();
    public CustomAttributeHandleCollection GetCustomAttributes();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.EventDefinitionHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(EventDefinitionHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(EventDefinitionHandle left, EventDefinitionHandle right);
    public static EventDefinitionHandle op_Explicit(EntityHandle handle);
    public static EventDefinitionHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(EventDefinitionHandle handle);
    public static Handle op_Implicit(EventDefinitionHandle handle);
    public static bool op_Inequality(EventDefinitionHandle left, EventDefinitionHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.EventDefinitionHandleCollection : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public int Count { get; }
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<EventDefinitionHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.EventDefinitionHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.ExceptionRegion : ValueType {
    private int _dummyPrimitive;
    public EntityHandle CatchType { get; }
    public int FilterOffset { get; }
    public int HandlerLength { get; }
    public int HandlerOffset { get; }
    public ExceptionRegionKind Kind { get; }
    public int TryLength { get; }
    public int TryOffset { get; }
    public EntityHandle get_CatchType();
    public int get_FilterOffset();
    public int get_HandlerLength();
    public int get_HandlerOffset();
    public ExceptionRegionKind get_Kind();
    public int get_TryLength();
    public int get_TryOffset();
}
public enum System.Reflection.Metadata.ExceptionRegionKind : Enum {
    public ushort value__;
    public static ExceptionRegionKind Catch;
    public static ExceptionRegionKind Filter;
    public static ExceptionRegionKind Finally;
    public static ExceptionRegionKind Fault;
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.ExportedType : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public TypeAttributes Attributes { get; }
    public EntityHandle Implementation { get; }
    public bool IsForwarder { get; }
    public StringHandle Name { get; }
    public StringHandle Namespace { get; }
    public NamespaceDefinitionHandle NamespaceDefinition { get; }
    public TypeAttributes get_Attributes();
    public EntityHandle get_Implementation();
    public bool get_IsForwarder();
    public StringHandle get_Name();
    public StringHandle get_Namespace();
    public NamespaceDefinitionHandle get_NamespaceDefinition();
    public CustomAttributeHandleCollection GetCustomAttributes();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.ExportedTypeHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ExportedTypeHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(ExportedTypeHandle left, ExportedTypeHandle right);
    public static ExportedTypeHandle op_Explicit(EntityHandle handle);
    public static ExportedTypeHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(ExportedTypeHandle handle);
    public static Handle op_Implicit(ExportedTypeHandle handle);
    public static bool op_Inequality(ExportedTypeHandle left, ExportedTypeHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.ExportedTypeHandleCollection : ValueType {
    private int _dummyPrimitive;
    public int Count { get; }
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<ExportedTypeHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.ExportedTypeHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.FieldDefinition : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public FieldAttributes Attributes { get; }
    public StringHandle Name { get; }
    public BlobHandle Signature { get; }
    public FieldAttributes get_Attributes();
    public StringHandle get_Name();
    public BlobHandle get_Signature();
    [NullableContextAttribute("1")]
public TType DecodeSignature(ISignatureTypeProvider`2<TType, TGenericContext> provider, TGenericContext genericContext);
    public CustomAttributeHandleCollection GetCustomAttributes();
    public TypeDefinitionHandle GetDeclaringType();
    public ConstantHandle GetDefaultValue();
    public BlobHandle GetMarshallingDescriptor();
    public int GetOffset();
    public int GetRelativeVirtualAddress();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.FieldDefinitionHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(FieldDefinitionHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(FieldDefinitionHandle left, FieldDefinitionHandle right);
    public static FieldDefinitionHandle op_Explicit(EntityHandle handle);
    public static FieldDefinitionHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(FieldDefinitionHandle handle);
    public static Handle op_Implicit(FieldDefinitionHandle handle);
    public static bool op_Inequality(FieldDefinitionHandle left, FieldDefinitionHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.FieldDefinitionHandleCollection : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public int Count { get; }
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<FieldDefinitionHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.FieldDefinitionHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.GenericParameter : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public GenericParameterAttributes Attributes { get; }
    public int Index { get; }
    public StringHandle Name { get; }
    public EntityHandle Parent { get; }
    public GenericParameterAttributes get_Attributes();
    public int get_Index();
    public StringHandle get_Name();
    public EntityHandle get_Parent();
    public GenericParameterConstraintHandleCollection GetConstraints();
    public CustomAttributeHandleCollection GetCustomAttributes();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.GenericParameterConstraint : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public GenericParameterHandle Parameter { get; }
    public EntityHandle Type { get; }
    public GenericParameterHandle get_Parameter();
    public EntityHandle get_Type();
    public CustomAttributeHandleCollection GetCustomAttributes();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.GenericParameterConstraintHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(GenericParameterConstraintHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(GenericParameterConstraintHandle left, GenericParameterConstraintHandle right);
    public static GenericParameterConstraintHandle op_Explicit(EntityHandle handle);
    public static GenericParameterConstraintHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(GenericParameterConstraintHandle handle);
    public static Handle op_Implicit(GenericParameterConstraintHandle handle);
    public static bool op_Inequality(GenericParameterConstraintHandle left, GenericParameterConstraintHandle right);
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
public class System.Reflection.Metadata.GenericParameterConstraintHandleCollection : ValueType {
    private int _dummyPrimitive;
    public int Count { get; }
    public GenericParameterConstraintHandle Item { get; }
    public sealed virtual int get_Count();
    public sealed virtual GenericParameterConstraintHandle get_Item(int index);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<GenericParameterConstraintHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.GenericParameterConstraintHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.GenericParameterHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(GenericParameterHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(GenericParameterHandle left, GenericParameterHandle right);
    public static GenericParameterHandle op_Explicit(EntityHandle handle);
    public static GenericParameterHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(GenericParameterHandle handle);
    public static Handle op_Implicit(GenericParameterHandle handle);
    public static bool op_Inequality(GenericParameterHandle left, GenericParameterHandle right);
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
public class System.Reflection.Metadata.GenericParameterHandleCollection : ValueType {
    private int _dummyPrimitive;
    public int Count { get; }
    public GenericParameterHandle Item { get; }
    public sealed virtual int get_Count();
    public sealed virtual GenericParameterHandle get_Item(int index);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<GenericParameterHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.GenericParameterHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.GuidHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(GuidHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(GuidHandle left, GuidHandle right);
    public static GuidHandle op_Explicit(Handle handle);
    public static Handle op_Implicit(GuidHandle handle);
    public static bool op_Inequality(GuidHandle left, GuidHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Handle : ValueType {
    private int _dummyPrimitive;
    public static AssemblyDefinitionHandle AssemblyDefinition;
    public static ModuleDefinitionHandle ModuleDefinition;
    public bool IsNil { get; }
    public HandleKind Kind { get; }
    public bool get_IsNil();
    public HandleKind get_Kind();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Handle other);
    public virtual int GetHashCode();
    public static bool op_Equality(Handle left, Handle right);
    public static bool op_Inequality(Handle left, Handle right);
}
public class System.Reflection.Metadata.HandleComparer : object {
    [NullableAttribute("1")]
public static HandleComparer Default { get; }
    [NullableContextAttribute("1")]
public static HandleComparer get_Default();
    public sealed virtual int Compare(EntityHandle x, EntityHandle y);
    public sealed virtual int Compare(Handle x, Handle y);
    public sealed virtual bool Equals(EntityHandle x, EntityHandle y);
    public sealed virtual bool Equals(Handle x, Handle y);
    public sealed virtual int GetHashCode(EntityHandle obj);
    public sealed virtual int GetHashCode(Handle obj);
}
public enum System.Reflection.Metadata.HandleKind : Enum {
    public byte value__;
    public static HandleKind ModuleDefinition;
    public static HandleKind TypeReference;
    public static HandleKind TypeDefinition;
    public static HandleKind FieldDefinition;
    public static HandleKind MethodDefinition;
    public static HandleKind Parameter;
    public static HandleKind InterfaceImplementation;
    public static HandleKind MemberReference;
    public static HandleKind Constant;
    public static HandleKind CustomAttribute;
    public static HandleKind DeclarativeSecurityAttribute;
    public static HandleKind StandaloneSignature;
    public static HandleKind EventDefinition;
    public static HandleKind PropertyDefinition;
    public static HandleKind MethodImplementation;
    public static HandleKind ModuleReference;
    public static HandleKind TypeSpecification;
    public static HandleKind AssemblyDefinition;
    public static HandleKind AssemblyReference;
    public static HandleKind AssemblyFile;
    public static HandleKind ExportedType;
    public static HandleKind ManifestResource;
    public static HandleKind GenericParameter;
    public static HandleKind MethodSpecification;
    public static HandleKind GenericParameterConstraint;
    public static HandleKind Document;
    public static HandleKind MethodDebugInformation;
    public static HandleKind LocalScope;
    public static HandleKind LocalVariable;
    public static HandleKind LocalConstant;
    public static HandleKind ImportScope;
    public static HandleKind CustomDebugInformation;
    public static HandleKind UserString;
    public static HandleKind Blob;
    public static HandleKind Guid;
    public static HandleKind String;
    public static HandleKind NamespaceDefinition;
}
[NullableContextAttribute("1")]
public interface System.Reflection.Metadata.IConstructedTypeProvider`1 {
    public abstract virtual TType GetArrayType(TType elementType, ArrayShape shape);
    public abstract virtual TType GetByReferenceType(TType elementType);
    public abstract virtual TType GetGenericInstantiation(TType genericType, ImmutableArray`1<TType> typeArguments);
    public abstract virtual TType GetPointerType(TType elementType);
}
[NullableContextAttribute("1")]
public interface System.Reflection.Metadata.ICustomAttributeTypeProvider`1 {
    public abstract virtual TType GetSystemType();
    public abstract virtual TType GetTypeFromSerializedName(string name);
    public abstract virtual PrimitiveTypeCode GetUnderlyingEnumType(TType type);
    public abstract virtual bool IsSystemType(TType type);
}
public enum System.Reflection.Metadata.ILOpCode : Enum {
    public ushort value__;
    public static ILOpCode Nop;
    public static ILOpCode Break;
    public static ILOpCode Ldarg_0;
    public static ILOpCode Ldarg_1;
    public static ILOpCode Ldarg_2;
    public static ILOpCode Ldarg_3;
    public static ILOpCode Ldloc_0;
    public static ILOpCode Ldloc_1;
    public static ILOpCode Ldloc_2;
    public static ILOpCode Ldloc_3;
    public static ILOpCode Stloc_0;
    public static ILOpCode Stloc_1;
    public static ILOpCode Stloc_2;
    public static ILOpCode Stloc_3;
    public static ILOpCode Ldarg_s;
    public static ILOpCode Ldarga_s;
    public static ILOpCode Starg_s;
    public static ILOpCode Ldloc_s;
    public static ILOpCode Ldloca_s;
    public static ILOpCode Stloc_s;
    public static ILOpCode Ldnull;
    public static ILOpCode Ldc_i4_m1;
    public static ILOpCode Ldc_i4_0;
    public static ILOpCode Ldc_i4_1;
    public static ILOpCode Ldc_i4_2;
    public static ILOpCode Ldc_i4_3;
    public static ILOpCode Ldc_i4_4;
    public static ILOpCode Ldc_i4_5;
    public static ILOpCode Ldc_i4_6;
    public static ILOpCode Ldc_i4_7;
    public static ILOpCode Ldc_i4_8;
    public static ILOpCode Ldc_i4_s;
    public static ILOpCode Ldc_i4;
    public static ILOpCode Ldc_i8;
    public static ILOpCode Ldc_r4;
    public static ILOpCode Ldc_r8;
    public static ILOpCode Dup;
    public static ILOpCode Pop;
    public static ILOpCode Jmp;
    public static ILOpCode Call;
    public static ILOpCode Calli;
    public static ILOpCode Ret;
    public static ILOpCode Br_s;
    public static ILOpCode Brfalse_s;
    public static ILOpCode Brtrue_s;
    public static ILOpCode Beq_s;
    public static ILOpCode Bge_s;
    public static ILOpCode Bgt_s;
    public static ILOpCode Ble_s;
    public static ILOpCode Blt_s;
    public static ILOpCode Bne_un_s;
    public static ILOpCode Bge_un_s;
    public static ILOpCode Bgt_un_s;
    public static ILOpCode Ble_un_s;
    public static ILOpCode Blt_un_s;
    public static ILOpCode Br;
    public static ILOpCode Brfalse;
    public static ILOpCode Brtrue;
    public static ILOpCode Beq;
    public static ILOpCode Bge;
    public static ILOpCode Bgt;
    public static ILOpCode Ble;
    public static ILOpCode Blt;
    public static ILOpCode Bne_un;
    public static ILOpCode Bge_un;
    public static ILOpCode Bgt_un;
    public static ILOpCode Ble_un;
    public static ILOpCode Blt_un;
    public static ILOpCode Switch;
    public static ILOpCode Ldind_i1;
    public static ILOpCode Ldind_u1;
    public static ILOpCode Ldind_i2;
    public static ILOpCode Ldind_u2;
    public static ILOpCode Ldind_i4;
    public static ILOpCode Ldind_u4;
    public static ILOpCode Ldind_i8;
    public static ILOpCode Ldind_i;
    public static ILOpCode Ldind_r4;
    public static ILOpCode Ldind_r8;
    public static ILOpCode Ldind_ref;
    public static ILOpCode Stind_ref;
    public static ILOpCode Stind_i1;
    public static ILOpCode Stind_i2;
    public static ILOpCode Stind_i4;
    public static ILOpCode Stind_i8;
    public static ILOpCode Stind_r4;
    public static ILOpCode Stind_r8;
    public static ILOpCode Add;
    public static ILOpCode Sub;
    public static ILOpCode Mul;
    public static ILOpCode Div;
    public static ILOpCode Div_un;
    public static ILOpCode Rem;
    public static ILOpCode Rem_un;
    public static ILOpCode And;
    public static ILOpCode Or;
    public static ILOpCode Xor;
    public static ILOpCode Shl;
    public static ILOpCode Shr;
    public static ILOpCode Shr_un;
    public static ILOpCode Neg;
    public static ILOpCode Not;
    public static ILOpCode Conv_i1;
    public static ILOpCode Conv_i2;
    public static ILOpCode Conv_i4;
    public static ILOpCode Conv_i8;
    public static ILOpCode Conv_r4;
    public static ILOpCode Conv_r8;
    public static ILOpCode Conv_u4;
    public static ILOpCode Conv_u8;
    public static ILOpCode Callvirt;
    public static ILOpCode Cpobj;
    public static ILOpCode Ldobj;
    public static ILOpCode Ldstr;
    public static ILOpCode Newobj;
    public static ILOpCode Castclass;
    public static ILOpCode Isinst;
    public static ILOpCode Conv_r_un;
    public static ILOpCode Unbox;
    public static ILOpCode Throw;
    public static ILOpCode Ldfld;
    public static ILOpCode Ldflda;
    public static ILOpCode Stfld;
    public static ILOpCode Ldsfld;
    public static ILOpCode Ldsflda;
    public static ILOpCode Stsfld;
    public static ILOpCode Stobj;
    public static ILOpCode Conv_ovf_i1_un;
    public static ILOpCode Conv_ovf_i2_un;
    public static ILOpCode Conv_ovf_i4_un;
    public static ILOpCode Conv_ovf_i8_un;
    public static ILOpCode Conv_ovf_u1_un;
    public static ILOpCode Conv_ovf_u2_un;
    public static ILOpCode Conv_ovf_u4_un;
    public static ILOpCode Conv_ovf_u8_un;
    public static ILOpCode Conv_ovf_i_un;
    public static ILOpCode Conv_ovf_u_un;
    public static ILOpCode Box;
    public static ILOpCode Newarr;
    public static ILOpCode Ldlen;
    public static ILOpCode Ldelema;
    public static ILOpCode Ldelem_i1;
    public static ILOpCode Ldelem_u1;
    public static ILOpCode Ldelem_i2;
    public static ILOpCode Ldelem_u2;
    public static ILOpCode Ldelem_i4;
    public static ILOpCode Ldelem_u4;
    public static ILOpCode Ldelem_i8;
    public static ILOpCode Ldelem_i;
    public static ILOpCode Ldelem_r4;
    public static ILOpCode Ldelem_r8;
    public static ILOpCode Ldelem_ref;
    public static ILOpCode Stelem_i;
    public static ILOpCode Stelem_i1;
    public static ILOpCode Stelem_i2;
    public static ILOpCode Stelem_i4;
    public static ILOpCode Stelem_i8;
    public static ILOpCode Stelem_r4;
    public static ILOpCode Stelem_r8;
    public static ILOpCode Stelem_ref;
    public static ILOpCode Ldelem;
    public static ILOpCode Stelem;
    public static ILOpCode Unbox_any;
    public static ILOpCode Conv_ovf_i1;
    public static ILOpCode Conv_ovf_u1;
    public static ILOpCode Conv_ovf_i2;
    public static ILOpCode Conv_ovf_u2;
    public static ILOpCode Conv_ovf_i4;
    public static ILOpCode Conv_ovf_u4;
    public static ILOpCode Conv_ovf_i8;
    public static ILOpCode Conv_ovf_u8;
    public static ILOpCode Refanyval;
    public static ILOpCode Ckfinite;
    public static ILOpCode Mkrefany;
    public static ILOpCode Ldtoken;
    public static ILOpCode Conv_u2;
    public static ILOpCode Conv_u1;
    public static ILOpCode Conv_i;
    public static ILOpCode Conv_ovf_i;
    public static ILOpCode Conv_ovf_u;
    public static ILOpCode Add_ovf;
    public static ILOpCode Add_ovf_un;
    public static ILOpCode Mul_ovf;
    public static ILOpCode Mul_ovf_un;
    public static ILOpCode Sub_ovf;
    public static ILOpCode Sub_ovf_un;
    public static ILOpCode Endfinally;
    public static ILOpCode Leave;
    public static ILOpCode Leave_s;
    public static ILOpCode Stind_i;
    public static ILOpCode Conv_u;
    public static ILOpCode Arglist;
    public static ILOpCode Ceq;
    public static ILOpCode Cgt;
    public static ILOpCode Cgt_un;
    public static ILOpCode Clt;
    public static ILOpCode Clt_un;
    public static ILOpCode Ldftn;
    public static ILOpCode Ldvirtftn;
    public static ILOpCode Ldarg;
    public static ILOpCode Ldarga;
    public static ILOpCode Starg;
    public static ILOpCode Ldloc;
    public static ILOpCode Ldloca;
    public static ILOpCode Stloc;
    public static ILOpCode Localloc;
    public static ILOpCode Endfilter;
    public static ILOpCode Unaligned;
    public static ILOpCode Volatile;
    public static ILOpCode Tail;
    public static ILOpCode Initobj;
    public static ILOpCode Constrained;
    public static ILOpCode Cpblk;
    public static ILOpCode Initblk;
    public static ILOpCode Rethrow;
    public static ILOpCode Sizeof;
    public static ILOpCode Refanytype;
    public static ILOpCode Readonly;
}
[ExtensionAttribute]
public static class System.Reflection.Metadata.ILOpCodeExtensions : object {
    [ExtensionAttribute]
public static int GetBranchOperandSize(ILOpCode opCode);
    [ExtensionAttribute]
public static ILOpCode GetLongBranch(ILOpCode opCode);
    [ExtensionAttribute]
public static ILOpCode GetShortBranch(ILOpCode opCode);
    [ExtensionAttribute]
public static bool IsBranch(ILOpCode opCode);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Reflection.Metadata.ImageFormatLimitationException : Exception {
    public ImageFormatLimitationException(string message);
    public ImageFormatLimitationException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected ImageFormatLimitationException(SerializationInfo info, StreamingContext context);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.ImportDefinition : ValueType {
    private int _dummyPrimitive;
    public BlobHandle Alias { get; }
    public ImportDefinitionKind Kind { get; }
    public AssemblyReferenceHandle TargetAssembly { get; }
    public BlobHandle TargetNamespace { get; }
    public EntityHandle TargetType { get; }
    public BlobHandle get_Alias();
    public ImportDefinitionKind get_Kind();
    public AssemblyReferenceHandle get_TargetAssembly();
    public BlobHandle get_TargetNamespace();
    public EntityHandle get_TargetType();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.ImportDefinitionCollection : ValueType {
    private int _dummyPrimitive;
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<ImportDefinition> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.ImportDefinition>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum System.Reflection.Metadata.ImportDefinitionKind : Enum {
    public int value__;
    public static ImportDefinitionKind ImportNamespace;
    public static ImportDefinitionKind ImportAssemblyNamespace;
    public static ImportDefinitionKind ImportType;
    public static ImportDefinitionKind ImportXmlNamespace;
    public static ImportDefinitionKind ImportAssemblyReferenceAlias;
    public static ImportDefinitionKind AliasAssemblyReference;
    public static ImportDefinitionKind AliasNamespace;
    public static ImportDefinitionKind AliasAssemblyNamespace;
    public static ImportDefinitionKind AliasType;
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.ImportScope : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobHandle ImportsBlob { get; }
    public ImportScopeHandle Parent { get; }
    public BlobHandle get_ImportsBlob();
    public ImportScopeHandle get_Parent();
    public ImportDefinitionCollection GetImports();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.ImportScopeCollection : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public int Count { get; }
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<ImportScopeHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.ImportScopeHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.ImportScopeHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ImportScopeHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(ImportScopeHandle left, ImportScopeHandle right);
    public static ImportScopeHandle op_Explicit(EntityHandle handle);
    public static ImportScopeHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(ImportScopeHandle handle);
    public static Handle op_Implicit(ImportScopeHandle handle);
    public static bool op_Inequality(ImportScopeHandle left, ImportScopeHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.InterfaceImplementation : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public EntityHandle Interface { get; }
    public EntityHandle get_Interface();
    public CustomAttributeHandleCollection GetCustomAttributes();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.InterfaceImplementationHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(InterfaceImplementationHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(InterfaceImplementationHandle left, InterfaceImplementationHandle right);
    public static InterfaceImplementationHandle op_Explicit(EntityHandle handle);
    public static InterfaceImplementationHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(InterfaceImplementationHandle handle);
    public static Handle op_Implicit(InterfaceImplementationHandle handle);
    public static bool op_Inequality(InterfaceImplementationHandle left, InterfaceImplementationHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.InterfaceImplementationHandleCollection : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public int Count { get; }
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<InterfaceImplementationHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.InterfaceImplementationHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
public interface System.Reflection.Metadata.ISignatureTypeProvider`2 {
    public abstract virtual TType GetFunctionPointerType(MethodSignature`1<TType> signature);
    public abstract virtual TType GetGenericMethodParameter(TGenericContext genericContext, int index);
    public abstract virtual TType GetGenericTypeParameter(TGenericContext genericContext, int index);
    public abstract virtual TType GetModifiedType(TType modifier, TType unmodifiedType, bool isRequired);
    public abstract virtual TType GetPinnedType(TType elementType);
    public abstract virtual TType GetTypeFromSpecification(MetadataReader reader, TGenericContext genericContext, TypeSpecificationHandle handle, byte rawTypeKind);
}
[NullableContextAttribute("1")]
public interface System.Reflection.Metadata.ISimpleTypeProvider`1 {
    public abstract virtual TType GetPrimitiveType(PrimitiveTypeCode typeCode);
    public abstract virtual TType GetTypeFromDefinition(MetadataReader reader, TypeDefinitionHandle handle, byte rawTypeKind);
    public abstract virtual TType GetTypeFromReference(MetadataReader reader, TypeReferenceHandle handle, byte rawTypeKind);
}
[NullableContextAttribute("1")]
public interface System.Reflection.Metadata.ISZArrayTypeProvider`1 {
    public abstract virtual TType GetSZArrayType(TType elementType);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.LocalConstant : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public StringHandle Name { get; }
    public BlobHandle Signature { get; }
    public StringHandle get_Name();
    public BlobHandle get_Signature();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.LocalConstantHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(LocalConstantHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(LocalConstantHandle left, LocalConstantHandle right);
    public static LocalConstantHandle op_Explicit(EntityHandle handle);
    public static LocalConstantHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(LocalConstantHandle handle);
    public static Handle op_Implicit(LocalConstantHandle handle);
    public static bool op_Inequality(LocalConstantHandle left, LocalConstantHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.LocalConstantHandleCollection : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public int Count { get; }
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<LocalConstantHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.LocalConstantHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.LocalScope : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public int EndOffset { get; }
    public ImportScopeHandle ImportScope { get; }
    public int Length { get; }
    public MethodDefinitionHandle Method { get; }
    public int StartOffset { get; }
    public int get_EndOffset();
    public ImportScopeHandle get_ImportScope();
    public int get_Length();
    public MethodDefinitionHandle get_Method();
    public int get_StartOffset();
    public ChildrenEnumerator GetChildren();
    public LocalConstantHandleCollection GetLocalConstants();
    public LocalVariableHandleCollection GetLocalVariables();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.LocalScopeHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(LocalScopeHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(LocalScopeHandle left, LocalScopeHandle right);
    public static LocalScopeHandle op_Explicit(EntityHandle handle);
    public static LocalScopeHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(LocalScopeHandle handle);
    public static Handle op_Implicit(LocalScopeHandle handle);
    public static bool op_Inequality(LocalScopeHandle left, LocalScopeHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.LocalScopeHandleCollection : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public int Count { get; }
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<LocalScopeHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.LocalScopeHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.LocalVariable : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public LocalVariableAttributes Attributes { get; }
    public int Index { get; }
    public StringHandle Name { get; }
    public LocalVariableAttributes get_Attributes();
    public int get_Index();
    public StringHandle get_Name();
}
[FlagsAttribute]
public enum System.Reflection.Metadata.LocalVariableAttributes : Enum {
    public int value__;
    public static LocalVariableAttributes None;
    public static LocalVariableAttributes DebuggerHidden;
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.LocalVariableHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(LocalVariableHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(LocalVariableHandle left, LocalVariableHandle right);
    public static LocalVariableHandle op_Explicit(EntityHandle handle);
    public static LocalVariableHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(LocalVariableHandle handle);
    public static Handle op_Implicit(LocalVariableHandle handle);
    public static bool op_Inequality(LocalVariableHandle left, LocalVariableHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.LocalVariableHandleCollection : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public int Count { get; }
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<LocalVariableHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.LocalVariableHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.ManifestResource : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public ManifestResourceAttributes Attributes { get; }
    public EntityHandle Implementation { get; }
    public StringHandle Name { get; }
    public long Offset { get; }
    public ManifestResourceAttributes get_Attributes();
    public EntityHandle get_Implementation();
    public StringHandle get_Name();
    public long get_Offset();
    public CustomAttributeHandleCollection GetCustomAttributes();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.ManifestResourceHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ManifestResourceHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(ManifestResourceHandle left, ManifestResourceHandle right);
    public static ManifestResourceHandle op_Explicit(EntityHandle handle);
    public static ManifestResourceHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(ManifestResourceHandle handle);
    public static Handle op_Implicit(ManifestResourceHandle handle);
    public static bool op_Inequality(ManifestResourceHandle left, ManifestResourceHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.ManifestResourceHandleCollection : ValueType {
    private int _dummyPrimitive;
    public int Count { get; }
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<ManifestResourceHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.ManifestResourceHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.MemberReference : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public StringHandle Name { get; }
    public EntityHandle Parent { get; }
    public BlobHandle Signature { get; }
    public StringHandle get_Name();
    public EntityHandle get_Parent();
    public BlobHandle get_Signature();
    public TType DecodeFieldSignature(ISignatureTypeProvider`2<TType, TGenericContext> provider, TGenericContext genericContext);
    public MethodSignature`1<TType> DecodeMethodSignature(ISignatureTypeProvider`2<TType, TGenericContext> provider, TGenericContext genericContext);
    public CustomAttributeHandleCollection GetCustomAttributes();
    public MemberReferenceKind GetKind();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.MemberReferenceHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MemberReferenceHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(MemberReferenceHandle left, MemberReferenceHandle right);
    public static MemberReferenceHandle op_Explicit(EntityHandle handle);
    public static MemberReferenceHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(MemberReferenceHandle handle);
    public static Handle op_Implicit(MemberReferenceHandle handle);
    public static bool op_Inequality(MemberReferenceHandle left, MemberReferenceHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.MemberReferenceHandleCollection : ValueType {
    private int _dummyPrimitive;
    public int Count { get; }
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<MemberReferenceHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.MemberReferenceHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum System.Reflection.Metadata.MemberReferenceKind : Enum {
    public int value__;
    public static MemberReferenceKind Method;
    public static MemberReferenceKind Field;
}
public enum System.Reflection.Metadata.MetadataKind : Enum {
    public int value__;
    public static MetadataKind Ecma335;
    public static MetadataKind WindowsMetadata;
    public static MetadataKind ManagedWindowsMetadata;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.Metadata.MetadataReader : object {
    public AssemblyFileHandleCollection AssemblyFiles { get; }
    public AssemblyReferenceHandleCollection AssemblyReferences { get; }
    public CustomAttributeHandleCollection CustomAttributes { get; }
    public CustomDebugInformationHandleCollection CustomDebugInformation { get; }
    [NullableAttribute("2")]
public DebugMetadataHeader DebugMetadataHeader { get; }
    public DeclarativeSecurityAttributeHandleCollection DeclarativeSecurityAttributes { get; }
    public DocumentHandleCollection Documents { get; }
    public EventDefinitionHandleCollection EventDefinitions { get; }
    public ExportedTypeHandleCollection ExportedTypes { get; }
    public FieldDefinitionHandleCollection FieldDefinitions { get; }
    public ImportScopeCollection ImportScopes { get; }
    public bool IsAssembly { get; }
    public LocalConstantHandleCollection LocalConstants { get; }
    public LocalScopeHandleCollection LocalScopes { get; }
    public LocalVariableHandleCollection LocalVariables { get; }
    public ManifestResourceHandleCollection ManifestResources { get; }
    public MemberReferenceHandleCollection MemberReferences { get; }
    public MetadataKind MetadataKind { get; }
    public int MetadataLength { get; }
    [NullableAttribute("0")]
public Byte* MetadataPointer { get; }
    public string MetadataVersion { get; }
    public MethodDebugInformationHandleCollection MethodDebugInformation { get; }
    public MethodDefinitionHandleCollection MethodDefinitions { get; }
    public MetadataReaderOptions Options { get; }
    public PropertyDefinitionHandleCollection PropertyDefinitions { get; }
    public MetadataStringComparer StringComparer { get; }
    public TypeDefinitionHandleCollection TypeDefinitions { get; }
    public TypeReferenceHandleCollection TypeReferences { get; }
    public MetadataStringDecoder UTF8Decoder { get; }
    [NullableContextAttribute("0")]
public MetadataReader(Byte* metadata, int length);
    [NullableContextAttribute("0")]
public MetadataReader(Byte* metadata, int length, MetadataReaderOptions options);
    [NullableContextAttribute("0")]
public MetadataReader(Byte* metadata, int length, MetadataReaderOptions options, MetadataStringDecoder utf8Decoder);
    public AssemblyFileHandleCollection get_AssemblyFiles();
    public AssemblyReferenceHandleCollection get_AssemblyReferences();
    public CustomAttributeHandleCollection get_CustomAttributes();
    public CustomDebugInformationHandleCollection get_CustomDebugInformation();
    [NullableContextAttribute("2")]
public DebugMetadataHeader get_DebugMetadataHeader();
    public DeclarativeSecurityAttributeHandleCollection get_DeclarativeSecurityAttributes();
    public DocumentHandleCollection get_Documents();
    public EventDefinitionHandleCollection get_EventDefinitions();
    public ExportedTypeHandleCollection get_ExportedTypes();
    public FieldDefinitionHandleCollection get_FieldDefinitions();
    public ImportScopeCollection get_ImportScopes();
    public bool get_IsAssembly();
    public LocalConstantHandleCollection get_LocalConstants();
    public LocalScopeHandleCollection get_LocalScopes();
    public LocalVariableHandleCollection get_LocalVariables();
    public ManifestResourceHandleCollection get_ManifestResources();
    public MemberReferenceHandleCollection get_MemberReferences();
    public MetadataKind get_MetadataKind();
    public int get_MetadataLength();
    [NullableContextAttribute("0")]
public Byte* get_MetadataPointer();
    public string get_MetadataVersion();
    public MethodDebugInformationHandleCollection get_MethodDebugInformation();
    public MethodDefinitionHandleCollection get_MethodDefinitions();
    public MetadataReaderOptions get_Options();
    public PropertyDefinitionHandleCollection get_PropertyDefinitions();
    public MetadataStringComparer get_StringComparer();
    public TypeDefinitionHandleCollection get_TypeDefinitions();
    public TypeReferenceHandleCollection get_TypeReferences();
    public MetadataStringDecoder get_UTF8Decoder();
    public AssemblyDefinition GetAssemblyDefinition();
    public AssemblyFile GetAssemblyFile(AssemblyFileHandle handle);
    public static AssemblyName GetAssemblyName(string assemblyFile);
    public AssemblyReference GetAssemblyReference(AssemblyReferenceHandle handle);
    public Byte[] GetBlobBytes(BlobHandle handle);
    [NullableContextAttribute("0")]
public ImmutableArray`1<byte> GetBlobContent(BlobHandle handle);
    public BlobReader GetBlobReader(BlobHandle handle);
    public BlobReader GetBlobReader(StringHandle handle);
    public Constant GetConstant(ConstantHandle handle);
    public CustomAttribute GetCustomAttribute(CustomAttributeHandle handle);
    public CustomAttributeHandleCollection GetCustomAttributes(EntityHandle handle);
    public CustomDebugInformation GetCustomDebugInformation(CustomDebugInformationHandle handle);
    public CustomDebugInformationHandleCollection GetCustomDebugInformation(EntityHandle handle);
    public DeclarativeSecurityAttribute GetDeclarativeSecurityAttribute(DeclarativeSecurityAttributeHandle handle);
    public Document GetDocument(DocumentHandle handle);
    public EventDefinition GetEventDefinition(EventDefinitionHandle handle);
    public ExportedType GetExportedType(ExportedTypeHandle handle);
    public FieldDefinition GetFieldDefinition(FieldDefinitionHandle handle);
    public GenericParameter GetGenericParameter(GenericParameterHandle handle);
    public GenericParameterConstraint GetGenericParameterConstraint(GenericParameterConstraintHandle handle);
    public Guid GetGuid(GuidHandle handle);
    public ImportScope GetImportScope(ImportScopeHandle handle);
    public InterfaceImplementation GetInterfaceImplementation(InterfaceImplementationHandle handle);
    public LocalConstant GetLocalConstant(LocalConstantHandle handle);
    public LocalScope GetLocalScope(LocalScopeHandle handle);
    public LocalScopeHandleCollection GetLocalScopes(MethodDebugInformationHandle handle);
    public LocalScopeHandleCollection GetLocalScopes(MethodDefinitionHandle handle);
    public LocalVariable GetLocalVariable(LocalVariableHandle handle);
    public ManifestResource GetManifestResource(ManifestResourceHandle handle);
    public MemberReference GetMemberReference(MemberReferenceHandle handle);
    public MethodDebugInformation GetMethodDebugInformation(MethodDebugInformationHandle handle);
    public MethodDebugInformation GetMethodDebugInformation(MethodDefinitionHandle handle);
    public MethodDefinition GetMethodDefinition(MethodDefinitionHandle handle);
    public MethodImplementation GetMethodImplementation(MethodImplementationHandle handle);
    public MethodSpecification GetMethodSpecification(MethodSpecificationHandle handle);
    public ModuleDefinition GetModuleDefinition();
    public ModuleReference GetModuleReference(ModuleReferenceHandle handle);
    public NamespaceDefinition GetNamespaceDefinition(NamespaceDefinitionHandle handle);
    public NamespaceDefinition GetNamespaceDefinitionRoot();
    public Parameter GetParameter(ParameterHandle handle);
    public PropertyDefinition GetPropertyDefinition(PropertyDefinitionHandle handle);
    public StandaloneSignature GetStandaloneSignature(StandaloneSignatureHandle handle);
    public string GetString(DocumentNameBlobHandle handle);
    public string GetString(NamespaceDefinitionHandle handle);
    public string GetString(StringHandle handle);
    public TypeDefinition GetTypeDefinition(TypeDefinitionHandle handle);
    public TypeReference GetTypeReference(TypeReferenceHandle handle);
    public TypeSpecification GetTypeSpecification(TypeSpecificationHandle handle);
    public string GetUserString(UserStringHandle handle);
}
[FlagsAttribute]
public enum System.Reflection.Metadata.MetadataReaderOptions : Enum {
    public int value__;
    public static MetadataReaderOptions None;
    public static MetadataReaderOptions ApplyWindowsRuntimeProjections;
    public static MetadataReaderOptions Default;
}
public class System.Reflection.Metadata.MetadataReaderProvider : object {
    public sealed virtual void Dispose();
    public static MetadataReaderProvider FromMetadataImage(Byte* start, int size);
    public static MetadataReaderProvider FromMetadataImage(ImmutableArray`1<byte> image);
    [NullableContextAttribute("1")]
public static MetadataReaderProvider FromMetadataStream(Stream stream, MetadataStreamOptions options, int size);
    public static MetadataReaderProvider FromPortablePdbImage(Byte* start, int size);
    public static MetadataReaderProvider FromPortablePdbImage(ImmutableArray`1<byte> image);
    [NullableContextAttribute("1")]
public static MetadataReaderProvider FromPortablePdbStream(Stream stream, MetadataStreamOptions options, int size);
    [NullableContextAttribute("1")]
public MetadataReader GetMetadataReader(MetadataReaderOptions options, MetadataStringDecoder utf8Decoder);
}
[FlagsAttribute]
public enum System.Reflection.Metadata.MetadataStreamOptions : Enum {
    public int value__;
    public static MetadataStreamOptions Default;
    public static MetadataStreamOptions LeaveOpen;
    public static MetadataStreamOptions PrefetchMetadata;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.MetadataStringComparer : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public bool Equals(DocumentNameBlobHandle handle, string value);
    public bool Equals(DocumentNameBlobHandle handle, string value, bool ignoreCase);
    public bool Equals(NamespaceDefinitionHandle handle, string value);
    public bool Equals(NamespaceDefinitionHandle handle, string value, bool ignoreCase);
    public bool Equals(StringHandle handle, string value);
    public bool Equals(StringHandle handle, string value, bool ignoreCase);
    public bool StartsWith(StringHandle handle, string value);
    public bool StartsWith(StringHandle handle, string value, bool ignoreCase);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.Metadata.MetadataStringDecoder : object {
    public static MetadataStringDecoder DefaultUTF8 { get; }
    public Encoding Encoding { get; }
    public MetadataStringDecoder(Encoding encoding);
    public static MetadataStringDecoder get_DefaultUTF8();
    public Encoding get_Encoding();
    [NullableContextAttribute("0")]
public virtual string GetString(Byte* bytes, int byteCount);
}
public class System.Reflection.Metadata.MethodBodyBlock : object {
    public ImmutableArray`1<ExceptionRegion> ExceptionRegions { get; }
    public StandaloneSignatureHandle LocalSignature { get; }
    public bool LocalVariablesInitialized { get; }
    public int MaxStack { get; }
    public int Size { get; }
    public ImmutableArray`1<ExceptionRegion> get_ExceptionRegions();
    public StandaloneSignatureHandle get_LocalSignature();
    public bool get_LocalVariablesInitialized();
    public int get_MaxStack();
    public int get_Size();
    [NullableContextAttribute("1")]
public static MethodBodyBlock Create(BlobReader reader);
    [NullableContextAttribute("2")]
public Byte[] GetILBytes();
    public ImmutableArray`1<byte> GetILContent();
    public BlobReader GetILReader();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.MethodDebugInformation : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public DocumentHandle Document { get; }
    public StandaloneSignatureHandle LocalSignature { get; }
    public BlobHandle SequencePointsBlob { get; }
    public DocumentHandle get_Document();
    public StandaloneSignatureHandle get_LocalSignature();
    public BlobHandle get_SequencePointsBlob();
    public SequencePointCollection GetSequencePoints();
    public MethodDefinitionHandle GetStateMachineKickoffMethod();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.MethodDebugInformationHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MethodDebugInformationHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(MethodDebugInformationHandle left, MethodDebugInformationHandle right);
    public static MethodDebugInformationHandle op_Explicit(EntityHandle handle);
    public static MethodDebugInformationHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(MethodDebugInformationHandle handle);
    public static Handle op_Implicit(MethodDebugInformationHandle handle);
    public static bool op_Inequality(MethodDebugInformationHandle left, MethodDebugInformationHandle right);
    public MethodDefinitionHandle ToDefinitionHandle();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.MethodDebugInformationHandleCollection : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public int Count { get; }
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<MethodDebugInformationHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.MethodDebugInformationHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.MethodDefinition : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public MethodAttributes Attributes { get; }
    public MethodImplAttributes ImplAttributes { get; }
    public StringHandle Name { get; }
    public int RelativeVirtualAddress { get; }
    public BlobHandle Signature { get; }
    public MethodAttributes get_Attributes();
    public MethodImplAttributes get_ImplAttributes();
    public StringHandle get_Name();
    public int get_RelativeVirtualAddress();
    public BlobHandle get_Signature();
    [NullableContextAttribute("1")]
public MethodSignature`1<TType> DecodeSignature(ISignatureTypeProvider`2<TType, TGenericContext> provider, TGenericContext genericContext);
    public CustomAttributeHandleCollection GetCustomAttributes();
    public DeclarativeSecurityAttributeHandleCollection GetDeclarativeSecurityAttributes();
    public TypeDefinitionHandle GetDeclaringType();
    public GenericParameterHandleCollection GetGenericParameters();
    public MethodImport GetImport();
    public ParameterHandleCollection GetParameters();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.MethodDefinitionHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MethodDefinitionHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(MethodDefinitionHandle left, MethodDefinitionHandle right);
    public static MethodDefinitionHandle op_Explicit(EntityHandle handle);
    public static MethodDefinitionHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(MethodDefinitionHandle handle);
    public static Handle op_Implicit(MethodDefinitionHandle handle);
    public static bool op_Inequality(MethodDefinitionHandle left, MethodDefinitionHandle right);
    public MethodDebugInformationHandle ToDebugInformationHandle();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.MethodDefinitionHandleCollection : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public int Count { get; }
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<MethodDefinitionHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.MethodDefinitionHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.MethodImplementation : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public EntityHandle MethodBody { get; }
    public EntityHandle MethodDeclaration { get; }
    public TypeDefinitionHandle Type { get; }
    public EntityHandle get_MethodBody();
    public EntityHandle get_MethodDeclaration();
    public TypeDefinitionHandle get_Type();
    public CustomAttributeHandleCollection GetCustomAttributes();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.MethodImplementationHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MethodImplementationHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(MethodImplementationHandle left, MethodImplementationHandle right);
    public static MethodImplementationHandle op_Explicit(EntityHandle handle);
    public static MethodImplementationHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(MethodImplementationHandle handle);
    public static Handle op_Implicit(MethodImplementationHandle handle);
    public static bool op_Inequality(MethodImplementationHandle left, MethodImplementationHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.MethodImplementationHandleCollection : ValueType {
    private int _dummyPrimitive;
    public int Count { get; }
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<MethodImplementationHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.MethodImplementationHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.MethodImport : ValueType {
    private int _dummyPrimitive;
    public MethodImportAttributes Attributes { get; }
    public ModuleReferenceHandle Module { get; }
    public StringHandle Name { get; }
    public MethodImportAttributes get_Attributes();
    public ModuleReferenceHandle get_Module();
    public StringHandle get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.MethodSignature`1 : ValueType {
    private TType _ReturnType_k__BackingField;
    private object _dummy;
    private int _dummyPrimitive;
    public int GenericParameterCount { get; }
    public SignatureHeader Header { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<TType> ParameterTypes { get; }
    public int RequiredParameterCount { get; }
    public TType ReturnType { get; }
    public MethodSignature`1(SignatureHeader header, TType returnType, int requiredParameterCount, int genericParameterCount, ImmutableArray`1<TType> parameterTypes);
    public int get_GenericParameterCount();
    public SignatureHeader get_Header();
    public ImmutableArray`1<TType> get_ParameterTypes();
    public int get_RequiredParameterCount();
    public TType get_ReturnType();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.MethodSpecification : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public EntityHandle Method { get; }
    public BlobHandle Signature { get; }
    public EntityHandle get_Method();
    public BlobHandle get_Signature();
    [NullableContextAttribute("1")]
public ImmutableArray`1<TType> DecodeSignature(ISignatureTypeProvider`2<TType, TGenericContext> provider, TGenericContext genericContext);
    public CustomAttributeHandleCollection GetCustomAttributes();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.MethodSpecificationHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MethodSpecificationHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(MethodSpecificationHandle left, MethodSpecificationHandle right);
    public static MethodSpecificationHandle op_Explicit(EntityHandle handle);
    public static MethodSpecificationHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(MethodSpecificationHandle handle);
    public static Handle op_Implicit(MethodSpecificationHandle handle);
    public static bool op_Inequality(MethodSpecificationHandle left, MethodSpecificationHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.ModuleDefinition : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public GuidHandle BaseGenerationId { get; }
    public int Generation { get; }
    public GuidHandle GenerationId { get; }
    public GuidHandle Mvid { get; }
    public StringHandle Name { get; }
    public GuidHandle get_BaseGenerationId();
    public int get_Generation();
    public GuidHandle get_GenerationId();
    public GuidHandle get_Mvid();
    public StringHandle get_Name();
    public CustomAttributeHandleCollection GetCustomAttributes();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.ModuleDefinitionHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ModuleDefinitionHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(ModuleDefinitionHandle left, ModuleDefinitionHandle right);
    public static ModuleDefinitionHandle op_Explicit(EntityHandle handle);
    public static ModuleDefinitionHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(ModuleDefinitionHandle handle);
    public static Handle op_Implicit(ModuleDefinitionHandle handle);
    public static bool op_Inequality(ModuleDefinitionHandle left, ModuleDefinitionHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.ModuleReference : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public StringHandle Name { get; }
    public StringHandle get_Name();
    public CustomAttributeHandleCollection GetCustomAttributes();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.ModuleReferenceHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ModuleReferenceHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(ModuleReferenceHandle left, ModuleReferenceHandle right);
    public static ModuleReferenceHandle op_Explicit(EntityHandle handle);
    public static ModuleReferenceHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(ModuleReferenceHandle handle);
    public static Handle op_Implicit(ModuleReferenceHandle handle);
    public static bool op_Inequality(ModuleReferenceHandle left, ModuleReferenceHandle right);
}
public class System.Reflection.Metadata.NamespaceDefinition : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public ImmutableArray`1<ExportedTypeHandle> ExportedTypes { get; }
    public StringHandle Name { get; }
    public ImmutableArray`1<NamespaceDefinitionHandle> NamespaceDefinitions { get; }
    public NamespaceDefinitionHandle Parent { get; }
    public ImmutableArray`1<TypeDefinitionHandle> TypeDefinitions { get; }
    public ImmutableArray`1<ExportedTypeHandle> get_ExportedTypes();
    public StringHandle get_Name();
    public ImmutableArray`1<NamespaceDefinitionHandle> get_NamespaceDefinitions();
    public NamespaceDefinitionHandle get_Parent();
    public ImmutableArray`1<TypeDefinitionHandle> get_TypeDefinitions();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.NamespaceDefinitionHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(NamespaceDefinitionHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(NamespaceDefinitionHandle left, NamespaceDefinitionHandle right);
    public static NamespaceDefinitionHandle op_Explicit(Handle handle);
    public static Handle op_Implicit(NamespaceDefinitionHandle handle);
    public static bool op_Inequality(NamespaceDefinitionHandle left, NamespaceDefinitionHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.Parameter : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public ParameterAttributes Attributes { get; }
    public StringHandle Name { get; }
    public int SequenceNumber { get; }
    public ParameterAttributes get_Attributes();
    public StringHandle get_Name();
    public int get_SequenceNumber();
    public CustomAttributeHandleCollection GetCustomAttributes();
    public ConstantHandle GetDefaultValue();
    public BlobHandle GetMarshallingDescriptor();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.ParameterHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ParameterHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(ParameterHandle left, ParameterHandle right);
    public static ParameterHandle op_Explicit(EntityHandle handle);
    public static ParameterHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(ParameterHandle handle);
    public static Handle op_Implicit(ParameterHandle handle);
    public static bool op_Inequality(ParameterHandle left, ParameterHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.ParameterHandleCollection : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public int Count { get; }
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<ParameterHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.ParameterHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class System.Reflection.Metadata.PEReaderExtensions : object {
    [ExtensionAttribute]
public static MetadataReader GetMetadataReader(PEReader peReader);
    [ExtensionAttribute]
public static MetadataReader GetMetadataReader(PEReader peReader, MetadataReaderOptions options);
    [ExtensionAttribute]
public static MetadataReader GetMetadataReader(PEReader peReader, MetadataReaderOptions options, MetadataStringDecoder utf8Decoder);
    [ExtensionAttribute]
public static MethodBodyBlock GetMethodBody(PEReader peReader, int relativeVirtualAddress);
}
public enum System.Reflection.Metadata.PrimitiveSerializationTypeCode : Enum {
    public byte value__;
    public static PrimitiveSerializationTypeCode Boolean;
    public static PrimitiveSerializationTypeCode Char;
    public static PrimitiveSerializationTypeCode SByte;
    public static PrimitiveSerializationTypeCode Byte;
    public static PrimitiveSerializationTypeCode Int16;
    public static PrimitiveSerializationTypeCode UInt16;
    public static PrimitiveSerializationTypeCode Int32;
    public static PrimitiveSerializationTypeCode UInt32;
    public static PrimitiveSerializationTypeCode Int64;
    public static PrimitiveSerializationTypeCode UInt64;
    public static PrimitiveSerializationTypeCode Single;
    public static PrimitiveSerializationTypeCode Double;
    public static PrimitiveSerializationTypeCode String;
}
public enum System.Reflection.Metadata.PrimitiveTypeCode : Enum {
    public byte value__;
    public static PrimitiveTypeCode Void;
    public static PrimitiveTypeCode Boolean;
    public static PrimitiveTypeCode Char;
    public static PrimitiveTypeCode SByte;
    public static PrimitiveTypeCode Byte;
    public static PrimitiveTypeCode Int16;
    public static PrimitiveTypeCode UInt16;
    public static PrimitiveTypeCode Int32;
    public static PrimitiveTypeCode UInt32;
    public static PrimitiveTypeCode Int64;
    public static PrimitiveTypeCode UInt64;
    public static PrimitiveTypeCode Single;
    public static PrimitiveTypeCode Double;
    public static PrimitiveTypeCode String;
    public static PrimitiveTypeCode TypedReference;
    public static PrimitiveTypeCode IntPtr;
    public static PrimitiveTypeCode UIntPtr;
    public static PrimitiveTypeCode Object;
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.PropertyAccessors : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public MethodDefinitionHandle Getter { get; }
    public ImmutableArray`1<MethodDefinitionHandle> Others { get; }
    public MethodDefinitionHandle Setter { get; }
    public MethodDefinitionHandle get_Getter();
    public ImmutableArray`1<MethodDefinitionHandle> get_Others();
    public MethodDefinitionHandle get_Setter();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.PropertyDefinition : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public PropertyAttributes Attributes { get; }
    public StringHandle Name { get; }
    public BlobHandle Signature { get; }
    public PropertyAttributes get_Attributes();
    public StringHandle get_Name();
    public BlobHandle get_Signature();
    [NullableContextAttribute("1")]
public MethodSignature`1<TType> DecodeSignature(ISignatureTypeProvider`2<TType, TGenericContext> provider, TGenericContext genericContext);
    public PropertyAccessors GetAccessors();
    public CustomAttributeHandleCollection GetCustomAttributes();
    public ConstantHandle GetDefaultValue();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.PropertyDefinitionHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(PropertyDefinitionHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(PropertyDefinitionHandle left, PropertyDefinitionHandle right);
    public static PropertyDefinitionHandle op_Explicit(EntityHandle handle);
    public static PropertyDefinitionHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(PropertyDefinitionHandle handle);
    public static Handle op_Implicit(PropertyDefinitionHandle handle);
    public static bool op_Inequality(PropertyDefinitionHandle left, PropertyDefinitionHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.PropertyDefinitionHandleCollection : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public int Count { get; }
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<PropertyDefinitionHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.PropertyDefinitionHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.ReservedBlob`1 : ValueType {
    private THandle _Handle_k__BackingField;
    private object _dummy;
    private int _dummyPrimitive;
    public Blob Content { get; }
    public THandle Handle { get; }
    public Blob get_Content();
    public THandle get_Handle();
    public BlobWriter CreateWriter();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.SequencePoint : ValueType {
    private int _dummyPrimitive;
    public static int HiddenLine;
    public DocumentHandle Document { get; }
    public int EndColumn { get; }
    public int EndLine { get; }
    public bool IsHidden { get; }
    public int Offset { get; }
    public int StartColumn { get; }
    public int StartLine { get; }
    public DocumentHandle get_Document();
    public int get_EndColumn();
    public int get_EndLine();
    public bool get_IsHidden();
    public int get_Offset();
    public int get_StartColumn();
    public int get_StartLine();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SequencePoint other);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.SequencePointCollection : ValueType {
    private int _dummyPrimitive;
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<SequencePoint> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.SequencePoint>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum System.Reflection.Metadata.SerializationTypeCode : Enum {
    public byte value__;
    public static SerializationTypeCode Invalid;
    public static SerializationTypeCode Boolean;
    public static SerializationTypeCode Char;
    public static SerializationTypeCode SByte;
    public static SerializationTypeCode Byte;
    public static SerializationTypeCode Int16;
    public static SerializationTypeCode UInt16;
    public static SerializationTypeCode Int32;
    public static SerializationTypeCode UInt32;
    public static SerializationTypeCode Int64;
    public static SerializationTypeCode UInt64;
    public static SerializationTypeCode Single;
    public static SerializationTypeCode Double;
    public static SerializationTypeCode String;
    public static SerializationTypeCode SZArray;
    public static SerializationTypeCode Type;
    public static SerializationTypeCode TaggedObject;
    public static SerializationTypeCode Enum;
}
[FlagsAttribute]
public enum System.Reflection.Metadata.SignatureAttributes : Enum {
    public byte value__;
    public static SignatureAttributes None;
    public static SignatureAttributes Generic;
    public static SignatureAttributes Instance;
    public static SignatureAttributes ExplicitThis;
}
public enum System.Reflection.Metadata.SignatureCallingConvention : Enum {
    public byte value__;
    public static SignatureCallingConvention Default;
    public static SignatureCallingConvention CDecl;
    public static SignatureCallingConvention StdCall;
    public static SignatureCallingConvention ThisCall;
    public static SignatureCallingConvention FastCall;
    public static SignatureCallingConvention VarArgs;
    public static SignatureCallingConvention Unmanaged;
}
public class System.Reflection.Metadata.SignatureHeader : ValueType {
    private int _dummyPrimitive;
    public static byte CallingConventionOrKindMask;
    public SignatureAttributes Attributes { get; }
    public SignatureCallingConvention CallingConvention { get; }
    public bool HasExplicitThis { get; }
    public bool IsGeneric { get; }
    public bool IsInstance { get; }
    public SignatureKind Kind { get; }
    public byte RawValue { get; }
    public SignatureHeader(byte rawValue);
    public SignatureHeader(SignatureKind kind, SignatureCallingConvention convention, SignatureAttributes attributes);
    public SignatureAttributes get_Attributes();
    public SignatureCallingConvention get_CallingConvention();
    public bool get_HasExplicitThis();
    public bool get_IsGeneric();
    public bool get_IsInstance();
    public SignatureKind get_Kind();
    public byte get_RawValue();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SignatureHeader other);
    public virtual int GetHashCode();
    public static bool op_Equality(SignatureHeader left, SignatureHeader right);
    public static bool op_Inequality(SignatureHeader left, SignatureHeader right);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public enum System.Reflection.Metadata.SignatureKind : Enum {
    public byte value__;
    public static SignatureKind Method;
    public static SignatureKind Field;
    public static SignatureKind LocalVariables;
    public static SignatureKind Property;
    public static SignatureKind MethodSpecification;
}
public enum System.Reflection.Metadata.SignatureTypeCode : Enum {
    public byte value__;
    public static SignatureTypeCode Invalid;
    public static SignatureTypeCode Void;
    public static SignatureTypeCode Boolean;
    public static SignatureTypeCode Char;
    public static SignatureTypeCode SByte;
    public static SignatureTypeCode Byte;
    public static SignatureTypeCode Int16;
    public static SignatureTypeCode UInt16;
    public static SignatureTypeCode Int32;
    public static SignatureTypeCode UInt32;
    public static SignatureTypeCode Int64;
    public static SignatureTypeCode UInt64;
    public static SignatureTypeCode Single;
    public static SignatureTypeCode Double;
    public static SignatureTypeCode String;
    public static SignatureTypeCode Pointer;
    public static SignatureTypeCode ByReference;
    public static SignatureTypeCode GenericTypeParameter;
    public static SignatureTypeCode Array;
    public static SignatureTypeCode GenericTypeInstance;
    public static SignatureTypeCode TypedReference;
    public static SignatureTypeCode IntPtr;
    public static SignatureTypeCode UIntPtr;
    public static SignatureTypeCode FunctionPointer;
    public static SignatureTypeCode Object;
    public static SignatureTypeCode SZArray;
    public static SignatureTypeCode GenericMethodParameter;
    public static SignatureTypeCode RequiredModifier;
    public static SignatureTypeCode OptionalModifier;
    public static SignatureTypeCode TypeHandle;
    public static SignatureTypeCode Sentinel;
    public static SignatureTypeCode Pinned;
}
public enum System.Reflection.Metadata.SignatureTypeKind : Enum {
    public byte value__;
    public static SignatureTypeKind Unknown;
    public static SignatureTypeKind ValueType;
    public static SignatureTypeKind Class;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.StandaloneSignature : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobHandle Signature { get; }
    public BlobHandle get_Signature();
    public ImmutableArray`1<TType> DecodeLocalSignature(ISignatureTypeProvider`2<TType, TGenericContext> provider, TGenericContext genericContext);
    public MethodSignature`1<TType> DecodeMethodSignature(ISignatureTypeProvider`2<TType, TGenericContext> provider, TGenericContext genericContext);
    public CustomAttributeHandleCollection GetCustomAttributes();
    public StandaloneSignatureKind GetKind();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.StandaloneSignatureHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(StandaloneSignatureHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(StandaloneSignatureHandle left, StandaloneSignatureHandle right);
    public static StandaloneSignatureHandle op_Explicit(EntityHandle handle);
    public static StandaloneSignatureHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(StandaloneSignatureHandle handle);
    public static Handle op_Implicit(StandaloneSignatureHandle handle);
    public static bool op_Inequality(StandaloneSignatureHandle left, StandaloneSignatureHandle right);
}
public enum System.Reflection.Metadata.StandaloneSignatureKind : Enum {
    public int value__;
    public static StandaloneSignatureKind Method;
    public static StandaloneSignatureKind LocalVariables;
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.StringHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(StringHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(StringHandle left, StringHandle right);
    public static StringHandle op_Explicit(Handle handle);
    public static Handle op_Implicit(StringHandle handle);
    public static bool op_Inequality(StringHandle left, StringHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.TypeDefinition : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public TypeAttributes Attributes { get; }
    public EntityHandle BaseType { get; }
    public bool IsNested { get; }
    public StringHandle Name { get; }
    public StringHandle Namespace { get; }
    public NamespaceDefinitionHandle NamespaceDefinition { get; }
    public TypeAttributes get_Attributes();
    public EntityHandle get_BaseType();
    public bool get_IsNested();
    public StringHandle get_Name();
    public StringHandle get_Namespace();
    public NamespaceDefinitionHandle get_NamespaceDefinition();
    public CustomAttributeHandleCollection GetCustomAttributes();
    public DeclarativeSecurityAttributeHandleCollection GetDeclarativeSecurityAttributes();
    public TypeDefinitionHandle GetDeclaringType();
    public EventDefinitionHandleCollection GetEvents();
    public FieldDefinitionHandleCollection GetFields();
    public GenericParameterHandleCollection GetGenericParameters();
    public InterfaceImplementationHandleCollection GetInterfaceImplementations();
    public TypeLayout GetLayout();
    public MethodImplementationHandleCollection GetMethodImplementations();
    public MethodDefinitionHandleCollection GetMethods();
    public ImmutableArray`1<TypeDefinitionHandle> GetNestedTypes();
    public PropertyDefinitionHandleCollection GetProperties();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.TypeDefinitionHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TypeDefinitionHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(TypeDefinitionHandle left, TypeDefinitionHandle right);
    public static TypeDefinitionHandle op_Explicit(EntityHandle handle);
    public static TypeDefinitionHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(TypeDefinitionHandle handle);
    public static Handle op_Implicit(TypeDefinitionHandle handle);
    public static bool op_Inequality(TypeDefinitionHandle left, TypeDefinitionHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.TypeDefinitionHandleCollection : ValueType {
    private int _dummyPrimitive;
    public int Count { get; }
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<TypeDefinitionHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.TypeDefinitionHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.TypeLayout : ValueType {
    private int _dummyPrimitive;
    public bool IsDefault { get; }
    public int PackingSize { get; }
    public int Size { get; }
    public TypeLayout(int size, int packingSize);
    public bool get_IsDefault();
    public int get_PackingSize();
    public int get_Size();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.TypeReference : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public StringHandle Name { get; }
    public StringHandle Namespace { get; }
    public EntityHandle ResolutionScope { get; }
    public StringHandle get_Name();
    public StringHandle get_Namespace();
    public EntityHandle get_ResolutionScope();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.TypeReferenceHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TypeReferenceHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(TypeReferenceHandle left, TypeReferenceHandle right);
    public static TypeReferenceHandle op_Explicit(EntityHandle handle);
    public static TypeReferenceHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(TypeReferenceHandle handle);
    public static Handle op_Implicit(TypeReferenceHandle handle);
    public static bool op_Inequality(TypeReferenceHandle left, TypeReferenceHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.TypeReferenceHandleCollection : ValueType {
    private int _dummyPrimitive;
    public int Count { get; }
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<TypeReferenceHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.TypeReferenceHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.TypeSpecification : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public BlobHandle Signature { get; }
    public BlobHandle get_Signature();
    [NullableContextAttribute("1")]
public TType DecodeSignature(ISignatureTypeProvider`2<TType, TGenericContext> provider, TGenericContext genericContext);
    public CustomAttributeHandleCollection GetCustomAttributes();
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.TypeSpecificationHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TypeSpecificationHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(TypeSpecificationHandle left, TypeSpecificationHandle right);
    public static TypeSpecificationHandle op_Explicit(EntityHandle handle);
    public static TypeSpecificationHandle op_Explicit(Handle handle);
    public static EntityHandle op_Implicit(TypeSpecificationHandle handle);
    public static Handle op_Implicit(TypeSpecificationHandle handle);
    public static bool op_Inequality(TypeSpecificationHandle left, TypeSpecificationHandle right);
}
[IsReadOnlyAttribute]
public class System.Reflection.Metadata.UserStringHandle : ValueType {
    private int _dummyPrimitive;
    public bool IsNil { get; }
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(UserStringHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(UserStringHandle left, UserStringHandle right);
    public static UserStringHandle op_Explicit(Handle handle);
    public static Handle op_Implicit(UserStringHandle handle);
    public static bool op_Inequality(UserStringHandle left, UserStringHandle right);
}
[FlagsAttribute]
public enum System.Reflection.MethodImportAttributes : Enum {
    public short value__;
    public static MethodImportAttributes None;
    public static MethodImportAttributes ExactSpelling;
    public static MethodImportAttributes CharSetAnsi;
    public static MethodImportAttributes CharSetUnicode;
    public static MethodImportAttributes CharSetAuto;
    public static MethodImportAttributes CharSetMask;
    public static MethodImportAttributes BestFitMappingEnable;
    public static MethodImportAttributes BestFitMappingDisable;
    public static MethodImportAttributes BestFitMappingMask;
    public static MethodImportAttributes SetLastError;
    public static MethodImportAttributes CallingConventionWinApi;
    public static MethodImportAttributes CallingConventionCDecl;
    public static MethodImportAttributes CallingConventionStdCall;
    public static MethodImportAttributes CallingConventionThisCall;
    public static MethodImportAttributes CallingConventionFastCall;
    public static MethodImportAttributes CallingConventionMask;
    public static MethodImportAttributes ThrowOnUnmappableCharEnable;
    public static MethodImportAttributes ThrowOnUnmappableCharDisable;
    public static MethodImportAttributes ThrowOnUnmappableCharMask;
}
[FlagsAttribute]
public enum System.Reflection.MethodSemanticsAttributes : Enum {
    public int value__;
    public static MethodSemanticsAttributes Setter;
    public static MethodSemanticsAttributes Getter;
    public static MethodSemanticsAttributes Other;
    public static MethodSemanticsAttributes Adder;
    public static MethodSemanticsAttributes Remover;
    public static MethodSemanticsAttributes Raiser;
}
[FlagsAttribute]
public enum System.Reflection.PortableExecutable.Characteristics : Enum {
    public ushort value__;
    public static Characteristics RelocsStripped;
    public static Characteristics ExecutableImage;
    public static Characteristics LineNumsStripped;
    public static Characteristics LocalSymsStripped;
    public static Characteristics AggressiveWSTrim;
    public static Characteristics LargeAddressAware;
    public static Characteristics BytesReversedLo;
    public static Characteristics Bit32Machine;
    public static Characteristics DebugStripped;
    public static Characteristics RemovableRunFromSwap;
    public static Characteristics NetRunFromSwap;
    public static Characteristics System;
    public static Characteristics Dll;
    public static Characteristics UpSystemOnly;
    public static Characteristics BytesReversedHi;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.PortableExecutable.CodeViewDebugDirectoryData : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public int Age { get; }
    public Guid Guid { get; }
    public string Path { get; }
    public int get_Age();
    public Guid get_Guid();
    public string get_Path();
}
public class System.Reflection.PortableExecutable.CoffHeader : object {
    public Characteristics Characteristics { get; }
    public Machine Machine { get; }
    public short NumberOfSections { get; }
    public int NumberOfSymbols { get; }
    public int PointerToSymbolTable { get; }
    public short SizeOfOptionalHeader { get; }
    public int TimeDateStamp { get; }
    public Characteristics get_Characteristics();
    public Machine get_Machine();
    public short get_NumberOfSections();
    public int get_NumberOfSymbols();
    public int get_PointerToSymbolTable();
    public short get_SizeOfOptionalHeader();
    public int get_TimeDateStamp();
}
[FlagsAttribute]
public enum System.Reflection.PortableExecutable.CorFlags : Enum {
    public int value__;
    public static CorFlags ILOnly;
    public static CorFlags Requires32Bit;
    public static CorFlags ILLibrary;
    public static CorFlags StrongNameSigned;
    public static CorFlags NativeEntryPoint;
    public static CorFlags TrackDebugData;
    public static CorFlags Prefers32Bit;
}
public class System.Reflection.PortableExecutable.CorHeader : object {
    public DirectoryEntry CodeManagerTableDirectory { get; }
    public int EntryPointTokenOrRelativeVirtualAddress { get; }
    public DirectoryEntry ExportAddressTableJumpsDirectory { get; }
    public CorFlags Flags { get; }
    public ushort MajorRuntimeVersion { get; }
    public DirectoryEntry ManagedNativeHeaderDirectory { get; }
    public DirectoryEntry MetadataDirectory { get; }
    public ushort MinorRuntimeVersion { get; }
    public DirectoryEntry ResourcesDirectory { get; }
    public DirectoryEntry StrongNameSignatureDirectory { get; }
    public DirectoryEntry VtableFixupsDirectory { get; }
    public DirectoryEntry get_CodeManagerTableDirectory();
    public int get_EntryPointTokenOrRelativeVirtualAddress();
    public DirectoryEntry get_ExportAddressTableJumpsDirectory();
    public CorFlags get_Flags();
    public ushort get_MajorRuntimeVersion();
    public DirectoryEntry get_ManagedNativeHeaderDirectory();
    public DirectoryEntry get_MetadataDirectory();
    public ushort get_MinorRuntimeVersion();
    public DirectoryEntry get_ResourcesDirectory();
    public DirectoryEntry get_StrongNameSignatureDirectory();
    public DirectoryEntry get_VtableFixupsDirectory();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.PortableExecutable.DebugDirectoryBuilder : object {
    public void AddCodeViewEntry(string pdbPath, BlobContentId pdbContentId, ushort portablePdbVersion);
    public void AddCodeViewEntry(string pdbPath, BlobContentId pdbContentId, ushort portablePdbVersion, int age);
    public void AddEmbeddedPortablePdbEntry(BlobBuilder debugMetadata, ushort portablePdbVersion);
    public void AddEntry(DebugDirectoryEntryType type, UInt32 version, UInt32 stamp);
    public void AddEntry(DebugDirectoryEntryType type, UInt32 version, UInt32 stamp, TData data, Action`2<BlobBuilder, TData> dataSerializer);
    [NullableContextAttribute("0")]
public void AddPdbChecksumEntry(string algorithmName, ImmutableArray`1<byte> checksum);
    public void AddReproducibleEntry();
}
[IsReadOnlyAttribute]
public class System.Reflection.PortableExecutable.DebugDirectoryEntry : ValueType {
    private int _dummyPrimitive;
    public int DataPointer { get; }
    public int DataRelativeVirtualAddress { get; }
    public int DataSize { get; }
    public bool IsPortableCodeView { get; }
    public ushort MajorVersion { get; }
    public ushort MinorVersion { get; }
    public UInt32 Stamp { get; }
    public DebugDirectoryEntryType Type { get; }
    public DebugDirectoryEntry(UInt32 stamp, ushort majorVersion, ushort minorVersion, DebugDirectoryEntryType type, int dataSize, int dataRelativeVirtualAddress, int dataPointer);
    public int get_DataPointer();
    public int get_DataRelativeVirtualAddress();
    public int get_DataSize();
    public bool get_IsPortableCodeView();
    public ushort get_MajorVersion();
    public ushort get_MinorVersion();
    public UInt32 get_Stamp();
    public DebugDirectoryEntryType get_Type();
}
public enum System.Reflection.PortableExecutable.DebugDirectoryEntryType : Enum {
    public int value__;
    public static DebugDirectoryEntryType Unknown;
    public static DebugDirectoryEntryType Coff;
    public static DebugDirectoryEntryType CodeView;
    public static DebugDirectoryEntryType Reproducible;
    public static DebugDirectoryEntryType EmbeddedPortablePdb;
    public static DebugDirectoryEntryType PdbChecksum;
}
[IsReadOnlyAttribute]
public class System.Reflection.PortableExecutable.DirectoryEntry : ValueType {
    public int RelativeVirtualAddress;
    public int Size;
    public DirectoryEntry(int relativeVirtualAddress, int size);
}
[FlagsAttribute]
public enum System.Reflection.PortableExecutable.DllCharacteristics : Enum {
    public ushort value__;
    public static DllCharacteristics ProcessInit;
    public static DllCharacteristics ProcessTerm;
    public static DllCharacteristics ThreadInit;
    public static DllCharacteristics ThreadTerm;
    public static DllCharacteristics HighEntropyVirtualAddressSpace;
    public static DllCharacteristics DynamicBase;
    public static DllCharacteristics NxCompatible;
    public static DllCharacteristics NoIsolation;
    public static DllCharacteristics NoSeh;
    public static DllCharacteristics NoBind;
    public static DllCharacteristics AppContainer;
    public static DllCharacteristics WdmDriver;
    public static DllCharacteristics TerminalServerAware;
}
public enum System.Reflection.PortableExecutable.Machine : Enum {
    public ushort value__;
    public static Machine Unknown;
    public static Machine I386;
    public static Machine WceMipsV2;
    public static Machine Alpha;
    public static Machine SH3;
    public static Machine SH3Dsp;
    public static Machine SH3E;
    public static Machine SH4;
    public static Machine SH5;
    public static Machine Arm;
    public static Machine Thumb;
    public static Machine ArmThumb2;
    public static Machine AM33;
    public static Machine PowerPC;
    public static Machine PowerPCFP;
    public static Machine IA64;
    public static Machine MIPS16;
    public static Machine Alpha64;
    public static Machine MipsFpu;
    public static Machine MipsFpu16;
    public static Machine Tricore;
    public static Machine Ebc;
    public static Machine Amd64;
    public static Machine M32R;
    public static Machine Arm64;
    public static Machine LoongArch32;
    public static Machine LoongArch64;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.PortableExecutable.ManagedPEBuilder : PEBuilder {
    public static int ManagedResourcesDataAlignment;
    public static int MappedFieldDataAlignment;
    [NullableContextAttribute("2")]
public ManagedPEBuilder(PEHeaderBuilder header, MetadataRootBuilder metadataRootBuilder, BlobBuilder ilStream, BlobBuilder mappedFieldData, BlobBuilder managedResources, ResourceSectionBuilder nativeResources, DebugDirectoryBuilder debugDirectoryBuilder, int strongNameSignatureSize, MethodDefinitionHandle entryPoint, CorFlags flags, Func`2<IEnumerable`1<Blob>, BlobContentId> deterministicIdProvider);
    [NullableContextAttribute("0")]
protected virtual ImmutableArray`1<Section> CreateSections();
    protected internal virtual PEDirectoriesBuilder GetDirectories();
    protected virtual BlobBuilder SerializeSection(string name, SectionLocation location);
    public void Sign(BlobBuilder peImage, Func`2<IEnumerable`1<Blob>, Byte[]> signatureProvider);
}
[IsReadOnlyAttribute]
public class System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    [NullableAttribute("1")]
public string AlgorithmName { get; }
    public ImmutableArray`1<byte> Checksum { get; }
    [NullableContextAttribute("1")]
public string get_AlgorithmName();
    public ImmutableArray`1<byte> get_Checksum();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Reflection.PortableExecutable.PEBuilder : object {
    public PEHeaderBuilder Header { get; }
    public Func`2<IEnumerable`1<Blob>, BlobContentId> IdProvider { get; }
    public bool IsDeterministic { get; }
    protected PEBuilder(PEHeaderBuilder header, Func`2<IEnumerable`1<Blob>, BlobContentId> deterministicIdProvider);
    public PEHeaderBuilder get_Header();
    public Func`2<IEnumerable`1<Blob>, BlobContentId> get_IdProvider();
    public bool get_IsDeterministic();
    [NullableContextAttribute("0")]
protected abstract virtual ImmutableArray`1<Section> CreateSections();
    protected internal abstract virtual PEDirectoriesBuilder GetDirectories();
    [NullableContextAttribute("0")]
protected ImmutableArray`1<Section> GetSections();
    public BlobContentId Serialize(BlobBuilder builder);
    protected abstract virtual BlobBuilder SerializeSection(string name, SectionLocation location);
}
public class System.Reflection.PortableExecutable.PEDirectoriesBuilder : object {
    public int AddressOfEntryPoint { get; public set; }
    public DirectoryEntry BaseRelocationTable { get; public set; }
    public DirectoryEntry BoundImportTable { get; public set; }
    public DirectoryEntry CopyrightTable { get; public set; }
    public DirectoryEntry CorHeaderTable { get; public set; }
    public DirectoryEntry DebugTable { get; public set; }
    public DirectoryEntry DelayImportTable { get; public set; }
    public DirectoryEntry ExceptionTable { get; public set; }
    public DirectoryEntry ExportTable { get; public set; }
    public DirectoryEntry GlobalPointerTable { get; public set; }
    public DirectoryEntry ImportAddressTable { get; public set; }
    public DirectoryEntry ImportTable { get; public set; }
    public DirectoryEntry LoadConfigTable { get; public set; }
    public DirectoryEntry ResourceTable { get; public set; }
    public DirectoryEntry ThreadLocalStorageTable { get; public set; }
    public int get_AddressOfEntryPoint();
    public void set_AddressOfEntryPoint(int value);
    public DirectoryEntry get_BaseRelocationTable();
    public void set_BaseRelocationTable(DirectoryEntry value);
    public DirectoryEntry get_BoundImportTable();
    public void set_BoundImportTable(DirectoryEntry value);
    public DirectoryEntry get_CopyrightTable();
    public void set_CopyrightTable(DirectoryEntry value);
    public DirectoryEntry get_CorHeaderTable();
    public void set_CorHeaderTable(DirectoryEntry value);
    public DirectoryEntry get_DebugTable();
    public void set_DebugTable(DirectoryEntry value);
    public DirectoryEntry get_DelayImportTable();
    public void set_DelayImportTable(DirectoryEntry value);
    public DirectoryEntry get_ExceptionTable();
    public void set_ExceptionTable(DirectoryEntry value);
    public DirectoryEntry get_ExportTable();
    public void set_ExportTable(DirectoryEntry value);
    public DirectoryEntry get_GlobalPointerTable();
    public void set_GlobalPointerTable(DirectoryEntry value);
    public DirectoryEntry get_ImportAddressTable();
    public void set_ImportAddressTable(DirectoryEntry value);
    public DirectoryEntry get_ImportTable();
    public void set_ImportTable(DirectoryEntry value);
    public DirectoryEntry get_LoadConfigTable();
    public void set_LoadConfigTable(DirectoryEntry value);
    public DirectoryEntry get_ResourceTable();
    public void set_ResourceTable(DirectoryEntry value);
    public DirectoryEntry get_ThreadLocalStorageTable();
    public void set_ThreadLocalStorageTable(DirectoryEntry value);
}
public class System.Reflection.PortableExecutable.PEHeader : object {
    public int AddressOfEntryPoint { get; }
    public int BaseOfCode { get; }
    public int BaseOfData { get; }
    public DirectoryEntry BaseRelocationTableDirectory { get; }
    public DirectoryEntry BoundImportTableDirectory { get; }
    public DirectoryEntry CertificateTableDirectory { get; }
    public UInt32 CheckSum { get; }
    public DirectoryEntry CopyrightTableDirectory { get; }
    public DirectoryEntry CorHeaderTableDirectory { get; }
    public DirectoryEntry DebugTableDirectory { get; }
    public DirectoryEntry DelayImportTableDirectory { get; }
    public DllCharacteristics DllCharacteristics { get; }
    public DirectoryEntry ExceptionTableDirectory { get; }
    public DirectoryEntry ExportTableDirectory { get; }
    public int FileAlignment { get; }
    public DirectoryEntry GlobalPointerTableDirectory { get; }
    public ulong ImageBase { get; }
    public DirectoryEntry ImportAddressTableDirectory { get; }
    public DirectoryEntry ImportTableDirectory { get; }
    public DirectoryEntry LoadConfigTableDirectory { get; }
    public PEMagic Magic { get; }
    public ushort MajorImageVersion { get; }
    public byte MajorLinkerVersion { get; }
    public ushort MajorOperatingSystemVersion { get; }
    public ushort MajorSubsystemVersion { get; }
    public ushort MinorImageVersion { get; }
    public byte MinorLinkerVersion { get; }
    public ushort MinorOperatingSystemVersion { get; }
    public ushort MinorSubsystemVersion { get; }
    public int NumberOfRvaAndSizes { get; }
    public DirectoryEntry ResourceTableDirectory { get; }
    public int SectionAlignment { get; }
    public int SizeOfCode { get; }
    public int SizeOfHeaders { get; }
    public ulong SizeOfHeapCommit { get; }
    public ulong SizeOfHeapReserve { get; }
    public int SizeOfImage { get; }
    public int SizeOfInitializedData { get; }
    public ulong SizeOfStackCommit { get; }
    public ulong SizeOfStackReserve { get; }
    public int SizeOfUninitializedData { get; }
    public Subsystem Subsystem { get; }
    public DirectoryEntry ThreadLocalStorageTableDirectory { get; }
    public int get_AddressOfEntryPoint();
    public int get_BaseOfCode();
    public int get_BaseOfData();
    public DirectoryEntry get_BaseRelocationTableDirectory();
    public DirectoryEntry get_BoundImportTableDirectory();
    public DirectoryEntry get_CertificateTableDirectory();
    public UInt32 get_CheckSum();
    public DirectoryEntry get_CopyrightTableDirectory();
    public DirectoryEntry get_CorHeaderTableDirectory();
    public DirectoryEntry get_DebugTableDirectory();
    public DirectoryEntry get_DelayImportTableDirectory();
    public DllCharacteristics get_DllCharacteristics();
    public DirectoryEntry get_ExceptionTableDirectory();
    public DirectoryEntry get_ExportTableDirectory();
    public int get_FileAlignment();
    public DirectoryEntry get_GlobalPointerTableDirectory();
    public ulong get_ImageBase();
    public DirectoryEntry get_ImportAddressTableDirectory();
    public DirectoryEntry get_ImportTableDirectory();
    public DirectoryEntry get_LoadConfigTableDirectory();
    public PEMagic get_Magic();
    public ushort get_MajorImageVersion();
    public byte get_MajorLinkerVersion();
    public ushort get_MajorOperatingSystemVersion();
    public ushort get_MajorSubsystemVersion();
    public ushort get_MinorImageVersion();
    public byte get_MinorLinkerVersion();
    public ushort get_MinorOperatingSystemVersion();
    public ushort get_MinorSubsystemVersion();
    public int get_NumberOfRvaAndSizes();
    public DirectoryEntry get_ResourceTableDirectory();
    public int get_SectionAlignment();
    public int get_SizeOfCode();
    public int get_SizeOfHeaders();
    public ulong get_SizeOfHeapCommit();
    public ulong get_SizeOfHeapReserve();
    public int get_SizeOfImage();
    public int get_SizeOfInitializedData();
    public ulong get_SizeOfStackCommit();
    public ulong get_SizeOfStackReserve();
    public int get_SizeOfUninitializedData();
    public Subsystem get_Subsystem();
    public DirectoryEntry get_ThreadLocalStorageTableDirectory();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.PortableExecutable.PEHeaderBuilder : object {
    public DllCharacteristics DllCharacteristics { get; }
    public int FileAlignment { get; }
    public ulong ImageBase { get; }
    public Characteristics ImageCharacteristics { get; }
    public Machine Machine { get; }
    public ushort MajorImageVersion { get; }
    public byte MajorLinkerVersion { get; }
    public ushort MajorOperatingSystemVersion { get; }
    public ushort MajorSubsystemVersion { get; }
    public ushort MinorImageVersion { get; }
    public byte MinorLinkerVersion { get; }
    public ushort MinorOperatingSystemVersion { get; }
    public ushort MinorSubsystemVersion { get; }
    public int SectionAlignment { get; }
    public ulong SizeOfHeapCommit { get; }
    public ulong SizeOfHeapReserve { get; }
    public ulong SizeOfStackCommit { get; }
    public ulong SizeOfStackReserve { get; }
    public Subsystem Subsystem { get; }
    public PEHeaderBuilder(Machine machine, int sectionAlignment, int fileAlignment, ulong imageBase, byte majorLinkerVersion, byte minorLinkerVersion, ushort majorOperatingSystemVersion, ushort minorOperatingSystemVersion, ushort majorImageVersion, ushort minorImageVersion, ushort majorSubsystemVersion, ushort minorSubsystemVersion, Subsystem subsystem, DllCharacteristics dllCharacteristics, Characteristics imageCharacteristics, ulong sizeOfStackReserve, ulong sizeOfStackCommit, ulong sizeOfHeapReserve, ulong sizeOfHeapCommit);
    public DllCharacteristics get_DllCharacteristics();
    public int get_FileAlignment();
    public ulong get_ImageBase();
    public Characteristics get_ImageCharacteristics();
    public Machine get_Machine();
    public ushort get_MajorImageVersion();
    public byte get_MajorLinkerVersion();
    public ushort get_MajorOperatingSystemVersion();
    public ushort get_MajorSubsystemVersion();
    public ushort get_MinorImageVersion();
    public byte get_MinorLinkerVersion();
    public ushort get_MinorOperatingSystemVersion();
    public ushort get_MinorSubsystemVersion();
    public int get_SectionAlignment();
    public ulong get_SizeOfHeapCommit();
    public ulong get_SizeOfHeapReserve();
    public ulong get_SizeOfStackCommit();
    public ulong get_SizeOfStackReserve();
    public Subsystem get_Subsystem();
    public static PEHeaderBuilder CreateExecutableHeader();
    public static PEHeaderBuilder CreateLibraryHeader();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.PortableExecutable.PEHeaders : object {
    public CoffHeader CoffHeader { get; }
    public int CoffHeaderStartOffset { get; }
    [NullableAttribute("2")]
public CorHeader CorHeader { get; }
    public int CorHeaderStartOffset { get; }
    public bool IsCoffOnly { get; }
    public bool IsConsoleApplication { get; }
    public bool IsDll { get; }
    public bool IsExe { get; }
    public int MetadataSize { get; }
    public int MetadataStartOffset { get; }
    [NullableAttribute("2")]
public PEHeader PEHeader { get; }
    public int PEHeaderStartOffset { get; }
    [NullableAttribute("0")]
public ImmutableArray`1<SectionHeader> SectionHeaders { get; }
    public PEHeaders(Stream peStream);
    public PEHeaders(Stream peStream, int size);
    public PEHeaders(Stream peStream, int size, bool isLoadedImage);
    public CoffHeader get_CoffHeader();
    public int get_CoffHeaderStartOffset();
    [NullableContextAttribute("2")]
public CorHeader get_CorHeader();
    public int get_CorHeaderStartOffset();
    public bool get_IsCoffOnly();
    public bool get_IsConsoleApplication();
    public bool get_IsDll();
    public bool get_IsExe();
    public int get_MetadataSize();
    public int get_MetadataStartOffset();
    [NullableContextAttribute("2")]
public PEHeader get_PEHeader();
    public int get_PEHeaderStartOffset();
    [NullableContextAttribute("0")]
public ImmutableArray`1<SectionHeader> get_SectionHeaders();
    public int GetContainingSectionIndex(int relativeVirtualAddress);
    public bool TryGetDirectoryOffset(DirectoryEntry directory, Int32& offset);
}
public enum System.Reflection.PortableExecutable.PEMagic : Enum {
    public ushort value__;
    public static PEMagic PE32;
    public static PEMagic PE32Plus;
}
[IsReadOnlyAttribute]
public class System.Reflection.PortableExecutable.PEMemoryBlock : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public int Length { get; }
    public Byte* Pointer { get; }
    public int get_Length();
    public Byte* get_Pointer();
    public ImmutableArray`1<byte> GetContent();
    public ImmutableArray`1<byte> GetContent(int start, int length);
    public BlobReader GetReader();
    public BlobReader GetReader(int start, int length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.PortableExecutable.PEReader : object {
    public bool HasMetadata { get; }
    public bool IsEntireImageAvailable { get; }
    public bool IsLoadedImage { get; }
    public PEHeaders PEHeaders { get; }
    [NullableContextAttribute("0")]
public PEReader(Byte* peImage, int size);
    [NullableContextAttribute("0")]
public PEReader(Byte* peImage, int size, bool isLoadedImage);
    [NullableContextAttribute("0")]
public PEReader(ImmutableArray`1<byte> peImage);
    public PEReader(Stream peStream);
    public PEReader(Stream peStream, PEStreamOptions options);
    public PEReader(Stream peStream, PEStreamOptions options, int size);
    public bool get_HasMetadata();
    public bool get_IsEntireImageAvailable();
    public bool get_IsLoadedImage();
    public PEHeaders get_PEHeaders();
    public sealed virtual void Dispose();
    public PEMemoryBlock GetEntireImage();
    public PEMemoryBlock GetMetadata();
    public PEMemoryBlock GetSectionData(int relativeVirtualAddress);
    public PEMemoryBlock GetSectionData(string sectionName);
    public CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData(DebugDirectoryEntry entry);
    [NullableContextAttribute("0")]
public ImmutableArray`1<DebugDirectoryEntry> ReadDebugDirectory();
    public MetadataReaderProvider ReadEmbeddedPortablePdbDebugDirectoryData(DebugDirectoryEntry entry);
    public PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData(DebugDirectoryEntry entry);
    [NullableContextAttribute("2")]
public bool TryOpenAssociatedPortablePdb(string peImagePath, Func`2<string, Stream> pdbFileStreamProvider, MetadataReaderProvider& pdbReaderProvider, String& pdbPath);
}
[FlagsAttribute]
public enum System.Reflection.PortableExecutable.PEStreamOptions : Enum {
    public int value__;
    public static PEStreamOptions Default;
    public static PEStreamOptions LeaveOpen;
    public static PEStreamOptions PrefetchMetadata;
    public static PEStreamOptions PrefetchEntireImage;
    public static PEStreamOptions IsLoadedImage;
}
public abstract class System.Reflection.PortableExecutable.ResourceSectionBuilder : object {
    [NullableContextAttribute("1")]
protected internal abstract virtual void Serialize(BlobBuilder builder, SectionLocation location);
}
[FlagsAttribute]
public enum System.Reflection.PortableExecutable.SectionCharacteristics : Enum {
    public UInt32 value__;
    public static SectionCharacteristics TypeReg;
    public static SectionCharacteristics TypeDSect;
    public static SectionCharacteristics TypeNoLoad;
    public static SectionCharacteristics TypeGroup;
    public static SectionCharacteristics TypeNoPad;
    public static SectionCharacteristics TypeCopy;
    public static SectionCharacteristics ContainsCode;
    public static SectionCharacteristics ContainsInitializedData;
    public static SectionCharacteristics ContainsUninitializedData;
    public static SectionCharacteristics LinkerOther;
    public static SectionCharacteristics LinkerInfo;
    public static SectionCharacteristics TypeOver;
    public static SectionCharacteristics LinkerRemove;
    public static SectionCharacteristics LinkerComdat;
    public static SectionCharacteristics MemProtected;
    public static SectionCharacteristics NoDeferSpecExc;
    public static SectionCharacteristics GPRel;
    public static SectionCharacteristics MemFardata;
    public static SectionCharacteristics MemSysheap;
    public static SectionCharacteristics Mem16Bit;
    public static SectionCharacteristics MemPurgeable;
    public static SectionCharacteristics MemLocked;
    public static SectionCharacteristics MemPreload;
    public static SectionCharacteristics Align1Bytes;
    public static SectionCharacteristics Align2Bytes;
    public static SectionCharacteristics Align4Bytes;
    public static SectionCharacteristics Align8Bytes;
    public static SectionCharacteristics Align16Bytes;
    public static SectionCharacteristics Align32Bytes;
    public static SectionCharacteristics Align64Bytes;
    public static SectionCharacteristics Align128Bytes;
    public static SectionCharacteristics Align256Bytes;
    public static SectionCharacteristics Align512Bytes;
    public static SectionCharacteristics Align1024Bytes;
    public static SectionCharacteristics Align2048Bytes;
    public static SectionCharacteristics Align4096Bytes;
    public static SectionCharacteristics Align8192Bytes;
    public static SectionCharacteristics AlignMask;
    public static SectionCharacteristics LinkerNRelocOvfl;
    public static SectionCharacteristics MemDiscardable;
    public static SectionCharacteristics MemNotCached;
    public static SectionCharacteristics MemNotPaged;
    public static SectionCharacteristics MemShared;
    public static SectionCharacteristics MemExecute;
    public static SectionCharacteristics MemRead;
    public static SectionCharacteristics MemWrite;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reflection.PortableExecutable.SectionHeader : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public string Name { get; }
    public ushort NumberOfLineNumbers { get; }
    public ushort NumberOfRelocations { get; }
    public int PointerToLineNumbers { get; }
    public int PointerToRawData { get; }
    public int PointerToRelocations { get; }
    public SectionCharacteristics SectionCharacteristics { get; }
    public int SizeOfRawData { get; }
    public int VirtualAddress { get; }
    public int VirtualSize { get; }
    public string get_Name();
    public ushort get_NumberOfLineNumbers();
    public ushort get_NumberOfRelocations();
    public int get_PointerToLineNumbers();
    public int get_PointerToRawData();
    public int get_PointerToRelocations();
    public SectionCharacteristics get_SectionCharacteristics();
    public int get_SizeOfRawData();
    public int get_VirtualAddress();
    public int get_VirtualSize();
}
[IsReadOnlyAttribute]
public class System.Reflection.PortableExecutable.SectionLocation : ValueType {
    private int _dummyPrimitive;
    public int PointerToRawData { get; }
    public int RelativeVirtualAddress { get; }
    public SectionLocation(int relativeVirtualAddress, int pointerToRawData);
    public int get_PointerToRawData();
    public int get_RelativeVirtualAddress();
}
public enum System.Reflection.PortableExecutable.Subsystem : Enum {
    public ushort value__;
    public static Subsystem Unknown;
    public static Subsystem Native;
    public static Subsystem WindowsGui;
    public static Subsystem WindowsCui;
    public static Subsystem OS2Cui;
    public static Subsystem PosixCui;
    public static Subsystem NativeWindows;
    public static Subsystem WindowsCEGui;
    public static Subsystem EfiApplication;
    public static Subsystem EfiBootServiceDriver;
    public static Subsystem EfiRuntimeDriver;
    public static Subsystem EfiRom;
    public static Subsystem Xbox;
    public static Subsystem WindowsBootApplication;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
