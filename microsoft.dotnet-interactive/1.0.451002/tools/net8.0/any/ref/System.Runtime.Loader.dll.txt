[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class System.Reflection.Metadata.AssemblyExtensions : object {
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static bool TryGetRawMetadata(Assembly assembly, Byte*& blob, Int32& length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class System.Reflection.Metadata.MetadataUpdateHandlerAttribute : Attribute {
    [DynamicallyAccessedMembersAttribute("-1")]
public Type HandlerType { get; }
    public MetadataUpdateHandlerAttribute(Type handlerType);
    public Type get_HandlerType();
}
public static class System.Reflection.Metadata.MetadataUpdater : object {
    public static bool IsSupported { get; }
    public static void ApplyUpdate(Assembly assembly, ReadOnlySpan`1<byte> metadataDelta, ReadOnlySpan`1<byte> ilDelta, ReadOnlySpan`1<byte> pdbDelta);
    public static bool get_IsSupported();
}
[AttributeUsageAttribute("12")]
public class System.Runtime.CompilerServices.CreateNewOnMetadataUpdateAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("12")]
public class System.Runtime.CompilerServices.MetadataUpdateOriginalTypeAttribute : Attribute {
    public Type OriginalType { get; }
    public MetadataUpdateOriginalTypeAttribute(Type originalType);
    public Type get_OriginalType();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public class System.Runtime.Loader.AssemblyDependencyResolver : object {
    public AssemblyDependencyResolver(string componentAssemblyPath);
    public string ResolveAssemblyToPath(AssemblyName assemblyName);
    public string ResolveUnmanagedDllToPath(string unmanagedDllName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Runtime.Loader.AssemblyLoadContext : object {
    public static IEnumerable`1<AssemblyLoadContext> All { get; }
    public IEnumerable`1<Assembly> Assemblies { get; }
    [NullableAttribute("2")]
public static AssemblyLoadContext CurrentContextualReflectionContext { get; }
    public static AssemblyLoadContext Default { get; }
    public bool IsCollectible { get; }
    [NullableAttribute("2")]
public string Name { get; }
    protected AssemblyLoadContext(bool isCollectible);
    [NullableContextAttribute("2")]
public AssemblyLoadContext(string name, bool isCollectible);
    public static IEnumerable`1<AssemblyLoadContext> get_All();
    public IEnumerable`1<Assembly> get_Assemblies();
    [NullableContextAttribute("2")]
public static AssemblyLoadContext get_CurrentContextualReflectionContext();
    public static AssemblyLoadContext get_Default();
    public bool get_IsCollectible();
    [NullableContextAttribute("2")]
public string get_Name();
    public void add_Resolving(Func`3<AssemblyLoadContext, AssemblyName, Assembly> value);
    public void remove_Resolving(Func`3<AssemblyLoadContext, AssemblyName, Assembly> value);
    public void add_ResolvingUnmanagedDll(Func`3<Assembly, string, IntPtr> value);
    public void remove_ResolvingUnmanagedDll(Func`3<Assembly, string, IntPtr> value);
    public void add_Unloading(Action`1<AssemblyLoadContext> value);
    public void remove_Unloading(Action`1<AssemblyLoadContext> value);
    public ContextualReflectionScope EnterContextualReflection();
    [NullableContextAttribute("2")]
public static ContextualReflectionScope EnterContextualReflection(Assembly activating);
    protected virtual override void Finalize();
    public static AssemblyName GetAssemblyName(string assemblyPath);
    public static AssemblyLoadContext GetLoadContext(Assembly assembly);
    protected virtual Assembly Load(AssemblyName assemblyName);
    public Assembly LoadFromAssemblyName(AssemblyName assemblyName);
    [RequiresUnreferencedCodeAttribute("Types and members the loaded assembly depends on might be removed")]
public Assembly LoadFromAssemblyPath(string assemblyPath);
    [RequiresUnreferencedCodeAttribute("Types and members the loaded assembly depends on might be removed")]
public Assembly LoadFromNativeImagePath(string nativeImagePath, string assemblyPath);
    [RequiresUnreferencedCodeAttribute("Types and members the loaded assembly depends on might be removed")]
public Assembly LoadFromStream(Stream assembly);
    [RequiresUnreferencedCodeAttribute("Types and members the loaded assembly depends on might be removed")]
public Assembly LoadFromStream(Stream assembly, Stream assemblySymbols);
    protected virtual IntPtr LoadUnmanagedDll(string unmanagedDllName);
    protected IntPtr LoadUnmanagedDllFromPath(string unmanagedDllPath);
    public void SetProfileOptimizationRoot(string directoryPath);
    [NullableContextAttribute("2")]
public void StartProfileOptimization(string profile);
    public virtual string ToString();
    public void Unload();
}
