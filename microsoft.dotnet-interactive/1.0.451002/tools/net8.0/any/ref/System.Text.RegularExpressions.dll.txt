[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
public class System.Text.RegularExpressions.Capture : object {
    public int Index { get; }
    public int Length { get; }
    [NullableAttribute("1")]
public string Value { get; }
    public ReadOnlySpan`1<char> ValueSpan { get; }
    public int get_Index();
    public int get_Length();
    [NullableContextAttribute("1")]
public string get_Value();
    public ReadOnlySpan`1<char> get_ValueSpan();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Text.RegularExpressions.CaptureCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public Capture Item { get; }
    public object SyncRoot { get; }
    private Capture System.Collections.Generic.IList<System.Text.RegularExpressions.Capture>.Item { get; private set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    [NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual Capture get_Item(int i);
    public sealed virtual object get_SyncRoot();
    private sealed virtual override Capture System.Collections.Generic.IList<System.Text.RegularExpressions.Capture>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<System.Text.RegularExpressions.Capture>.set_Item(int index, Capture value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int arrayIndex);
    public sealed virtual void CopyTo(Capture[] array, int arrayIndex);
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Text.RegularExpressions.Capture>.Add(Capture item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Text.RegularExpressions.Capture>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Text.RegularExpressions.Capture>.Contains(Capture item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Text.RegularExpressions.Capture>.Remove(Capture item);
    private sealed virtual override IEnumerator`1<Capture> System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Capture>.GetEnumerator();
    private sealed virtual override int System.Collections.Generic.IList<System.Text.RegularExpressions.Capture>.IndexOf(Capture item);
    private sealed virtual override void System.Collections.Generic.IList<System.Text.RegularExpressions.Capture>.Insert(int index, Capture item);
    private sealed virtual override void System.Collections.Generic.IList<System.Text.RegularExpressions.Capture>.RemoveAt(int index);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class System.Text.RegularExpressions.GeneratedRegexAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <CultureName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private RegexOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MatchTimeoutMilliseconds>k__BackingField;
    public string CultureName { get; }
    public string Pattern { get; }
    public RegexOptions Options { get; }
    public int MatchTimeoutMilliseconds { get; }
    public GeneratedRegexAttribute(string pattern);
    public GeneratedRegexAttribute(string pattern, RegexOptions options);
    public GeneratedRegexAttribute(string pattern, RegexOptions options, string cultureName);
    public GeneratedRegexAttribute(string pattern, RegexOptions options, int matchTimeoutMilliseconds);
    public GeneratedRegexAttribute(string pattern, RegexOptions options, int matchTimeoutMilliseconds, string cultureName);
    [CompilerGeneratedAttribute]
public string get_CultureName();
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
public RegexOptions get_Options();
    [CompilerGeneratedAttribute]
public int get_MatchTimeoutMilliseconds();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Text.RegularExpressions.Group : Capture {
    public CaptureCollection Captures { get; }
    public string Name { get; }
    public bool Success { get; }
    public CaptureCollection get_Captures();
    public string get_Name();
    public bool get_Success();
    public static Group Synchronized(Group inner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Text.RegularExpressions.GroupCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public Group Item { get; }
    public Group Item { get; }
    public IEnumerable`1<string> Keys { get; }
    public object SyncRoot { get; }
    private Group System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.Item { get; private set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    [NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    public IEnumerable`1<Group> Values { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual Group get_Item(int groupnum);
    public sealed virtual Group get_Item(string groupname);
    public sealed virtual IEnumerable`1<string> get_Keys();
    public sealed virtual object get_SyncRoot();
    private sealed virtual override Group System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.set_Item(int index, Group value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual IEnumerable`1<Group> get_Values();
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void CopyTo(Array array, int arrayIndex);
    public sealed virtual void CopyTo(Group[] array, int arrayIndex);
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Add(Group item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Contains(Group item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Remove(Group item);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, Group>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Text.RegularExpressions.Group>>.GetEnumerator();
    private sealed virtual override IEnumerator`1<Group> System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Group>.GetEnumerator();
    private sealed virtual override int System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.IndexOf(Group item);
    private sealed virtual override void System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.Insert(int index, Group item);
    private sealed virtual override void System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.RemoveAt(int index);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    public sealed virtual bool TryGetValue(string key, Group& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Text.RegularExpressions.Match : Group {
    public static Match Empty { get; }
    public GroupCollection Groups { get; }
    public static Match get_Empty();
    public virtual GroupCollection get_Groups();
    public Match NextMatch();
    public virtual string Result(string replacement);
    public static Match Synchronized(Match inner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Text.RegularExpressions.MatchCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public Match Item { get; }
    public object SyncRoot { get; }
    private Match System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.Item { get; private set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    [NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public virtual Match get_Item(int i);
    public sealed virtual object get_SyncRoot();
    private sealed virtual override Match System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.set_Item(int index, Match value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int arrayIndex);
    public sealed virtual void CopyTo(Match[] array, int arrayIndex);
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Add(Match item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Contains(Match item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Remove(Match item);
    private sealed virtual override IEnumerator`1<Match> System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Match>.GetEnumerator();
    private sealed virtual override int System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.IndexOf(Match item);
    private sealed virtual override void System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.Insert(int index, Match item);
    private sealed virtual override void System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.RemoveAt(int index);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
}
public class System.Text.RegularExpressions.MatchEvaluator : MulticastDelegate {
    public MatchEvaluator(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(Match match);
    public virtual IAsyncResult BeginInvoke(Match match, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Text.RegularExpressions.Regex : object {
    [NullableAttribute("2")]
protected internal Hashtable capnames;
    [NullableAttribute("2")]
protected internal Hashtable caps;
    protected internal int capsize;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected internal String[] capslist;
    [NullableAttribute("2")]
protected internal RegexRunnerFactory factory;
    public static TimeSpan InfiniteMatchTimeout;
    protected internal TimeSpan internalMatchTimeout;
    [NullableAttribute("2")]
[StringSyntaxAttribute("Regex")]
protected internal string pattern;
    protected internal RegexOptions roptions;
    public static int CacheSize { get; public set; }
    [NullableAttribute("2")]
[CLSCompliantAttribute("False")]
protected IDictionary CapNames { get; protected set; }
    [NullableAttribute("2")]
[CLSCompliantAttribute("False")]
protected IDictionary Caps { get; protected set; }
    public TimeSpan MatchTimeout { get; }
    public RegexOptions Options { get; }
    public bool RightToLeft { get; }
    protected Regex(SerializationInfo info, StreamingContext context);
    public Regex(string pattern);
    public Regex(string pattern, RegexOptions options);
    public Regex(string pattern, RegexOptions options, TimeSpan matchTimeout);
    public static int get_CacheSize();
    public static void set_CacheSize(int value);
    [NullableContextAttribute("2")]
protected IDictionary get_CapNames();
    [NullableContextAttribute("2")]
protected void set_CapNames(IDictionary value);
    [NullableContextAttribute("2")]
protected IDictionary get_Caps();
    [NullableContextAttribute("2")]
protected void set_Caps(IDictionary value);
    public TimeSpan get_MatchTimeout();
    public RegexOptions get_Options();
    public bool get_RightToLeft();
    [ObsoleteAttribute("Regex.CompileToAssembly is obsolete and not supported. Use the GeneratedRegexAttribute with the regular expression source generator instead.")]
public static void CompileToAssembly(RegexCompilationInfo[] regexinfos, AssemblyName assemblyname);
    [ObsoleteAttribute("Regex.CompileToAssembly is obsolete and not supported. Use the GeneratedRegexAttribute with the regular expression source generator instead.")]
public static void CompileToAssembly(RegexCompilationInfo[] regexinfos, AssemblyName assemblyname, CustomAttributeBuilder[] attributes);
    [ObsoleteAttribute("Regex.CompileToAssembly is obsolete and not supported. Use the GeneratedRegexAttribute with the regular expression source generator instead.")]
public static void CompileToAssembly(RegexCompilationInfo[] regexinfos, AssemblyName assemblyname, CustomAttributeBuilder[] attributes, string resourceFile);
    public int Count(string input);
    [NullableContextAttribute("0")]
public int Count(ReadOnlySpan`1<char> input);
    [NullableContextAttribute("0")]
public int Count(ReadOnlySpan`1<char> input, int startat);
    public static int Count(string input, string pattern);
    public static int Count(string input, string pattern, RegexOptions options);
    public static int Count(string input, string pattern, RegexOptions options, TimeSpan matchTimeout);
    [NullableContextAttribute("0")]
public static int Count(ReadOnlySpan`1<char> input, string pattern);
    [NullableContextAttribute("0")]
public static int Count(ReadOnlySpan`1<char> input, string pattern, RegexOptions options);
    [NullableContextAttribute("0")]
public static int Count(ReadOnlySpan`1<char> input, string pattern, RegexOptions options, TimeSpan matchTimeout);
    public static string Escape(string str);
    [NullableContextAttribute("0")]
public ValueMatchEnumerator EnumerateMatches(ReadOnlySpan`1<char> input);
    [NullableContextAttribute("0")]
public ValueMatchEnumerator EnumerateMatches(ReadOnlySpan`1<char> input, int startat);
    [NullableContextAttribute("0")]
public static ValueMatchEnumerator EnumerateMatches(ReadOnlySpan`1<char> input, string pattern);
    [NullableContextAttribute("0")]
public static ValueMatchEnumerator EnumerateMatches(ReadOnlySpan`1<char> input, string pattern, RegexOptions options);
    [NullableContextAttribute("0")]
public static ValueMatchEnumerator EnumerateMatches(ReadOnlySpan`1<char> input, string pattern, RegexOptions options, TimeSpan matchTimeout);
    public String[] GetGroupNames();
    public Int32[] GetGroupNumbers();
    public string GroupNameFromNumber(int i);
    public int GroupNumberFromName(string name);
    protected void InitializeReferences();
    [NullableContextAttribute("0")]
public bool IsMatch(ReadOnlySpan`1<char> input);
    [NullableContextAttribute("0")]
public bool IsMatch(ReadOnlySpan`1<char> input, int startat);
    [NullableContextAttribute("0")]
public static bool IsMatch(ReadOnlySpan`1<char> input, string pattern);
    [NullableContextAttribute("0")]
public static bool IsMatch(ReadOnlySpan`1<char> input, string pattern, RegexOptions options);
    [NullableContextAttribute("0")]
public static bool IsMatch(ReadOnlySpan`1<char> input, string pattern, RegexOptions options, TimeSpan matchTimeout);
    public bool IsMatch(string input);
    public bool IsMatch(string input, int startat);
    public static bool IsMatch(string input, string pattern);
    public static bool IsMatch(string input, string pattern, RegexOptions options);
    public static bool IsMatch(string input, string pattern, RegexOptions options, TimeSpan matchTimeout);
    public Match Match(string input);
    public Match Match(string input, int startat);
    public Match Match(string input, int beginning, int length);
    public static Match Match(string input, string pattern);
    public static Match Match(string input, string pattern, RegexOptions options);
    public static Match Match(string input, string pattern, RegexOptions options, TimeSpan matchTimeout);
    public MatchCollection Matches(string input);
    public MatchCollection Matches(string input, int startat);
    public static MatchCollection Matches(string input, string pattern);
    public static MatchCollection Matches(string input, string pattern, RegexOptions options);
    public static MatchCollection Matches(string input, string pattern, RegexOptions options, TimeSpan matchTimeout);
    public string Replace(string input, string replacement);
    public string Replace(string input, string replacement, int count);
    public string Replace(string input, string replacement, int count, int startat);
    public static string Replace(string input, string pattern, string replacement);
    public static string Replace(string input, string pattern, string replacement, RegexOptions options);
    public static string Replace(string input, string pattern, string replacement, RegexOptions options, TimeSpan matchTimeout);
    public static string Replace(string input, string pattern, MatchEvaluator evaluator);
    public static string Replace(string input, string pattern, MatchEvaluator evaluator, RegexOptions options);
    public static string Replace(string input, string pattern, MatchEvaluator evaluator, RegexOptions options, TimeSpan matchTimeout);
    public string Replace(string input, MatchEvaluator evaluator);
    public string Replace(string input, MatchEvaluator evaluator, int count);
    public string Replace(string input, MatchEvaluator evaluator, int count, int startat);
    public String[] Split(string input);
    public String[] Split(string input, int count);
    public String[] Split(string input, int count, int startat);
    public static String[] Split(string input, string pattern);
    public static String[] Split(string input, string pattern, RegexOptions options);
    public static String[] Split(string input, string pattern, RegexOptions options, TimeSpan matchTimeout);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context);
    public virtual string ToString();
    public static string Unescape(string str);
    protected bool UseOptionC();
    protected internal bool UseOptionR();
    protected internal static void ValidateMatchTimeout(TimeSpan matchTimeout);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Regex.CompileToAssembly is obsolete and not supported. Use the GeneratedRegexAttribute with the regular expression source generator instead.")]
public class System.Text.RegularExpressions.RegexCompilationInfo : object {
    public bool IsPublic { get; public set; }
    public TimeSpan MatchTimeout { get; public set; }
    public string Name { get; public set; }
    public string Namespace { get; public set; }
    public RegexOptions Options { get; public set; }
    public string Pattern { get; public set; }
    public RegexCompilationInfo(string pattern, RegexOptions options, string name, string fullnamespace, bool ispublic);
    public RegexCompilationInfo(string pattern, RegexOptions options, string name, string fullnamespace, bool ispublic, TimeSpan matchTimeout);
    public bool get_IsPublic();
    public void set_IsPublic(bool value);
    public TimeSpan get_MatchTimeout();
    public void set_MatchTimeout(TimeSpan value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public RegexOptions get_Options();
    public void set_Options(RegexOptions value);
    public string get_Pattern();
    public void set_Pattern(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Text.RegularExpressions.RegexMatchTimeoutException : TimeoutException {
    public string Input { get; }
    public TimeSpan MatchTimeout { get; }
    public string Pattern { get; }
    protected RegexMatchTimeoutException(SerializationInfo info, StreamingContext context);
    public RegexMatchTimeoutException(string message);
    public RegexMatchTimeoutException(string message, Exception inner);
    public RegexMatchTimeoutException(string regexInput, string regexPattern, TimeSpan matchTimeout);
    public string get_Input();
    public TimeSpan get_MatchTimeout();
    public string get_Pattern();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
[FlagsAttribute]
public enum System.Text.RegularExpressions.RegexOptions : Enum {
    public int value__;
    public static RegexOptions None;
    public static RegexOptions IgnoreCase;
    public static RegexOptions Multiline;
    public static RegexOptions ExplicitCapture;
    public static RegexOptions Compiled;
    public static RegexOptions Singleline;
    public static RegexOptions IgnorePatternWhitespace;
    public static RegexOptions RightToLeft;
    public static RegexOptions ECMAScript;
    public static RegexOptions CultureInvariant;
    public static RegexOptions NonBacktracking;
}
public enum System.Text.RegularExpressions.RegexParseError : Enum {
    public int value__;
    public static RegexParseError Unknown;
    public static RegexParseError AlternationHasTooManyConditions;
    public static RegexParseError AlternationHasMalformedCondition;
    public static RegexParseError InvalidUnicodePropertyEscape;
    public static RegexParseError MalformedUnicodePropertyEscape;
    public static RegexParseError UnrecognizedEscape;
    public static RegexParseError UnrecognizedControlCharacter;
    public static RegexParseError MissingControlCharacter;
    public static RegexParseError InsufficientOrInvalidHexDigits;
    public static RegexParseError QuantifierOrCaptureGroupOutOfRange;
    public static RegexParseError UndefinedNamedReference;
    public static RegexParseError UndefinedNumberedReference;
    public static RegexParseError MalformedNamedReference;
    public static RegexParseError UnescapedEndingBackslash;
    public static RegexParseError UnterminatedComment;
    public static RegexParseError InvalidGroupingConstruct;
    public static RegexParseError AlternationHasNamedCapture;
    public static RegexParseError AlternationHasComment;
    public static RegexParseError AlternationHasMalformedReference;
    public static RegexParseError AlternationHasUndefinedReference;
    public static RegexParseError CaptureGroupNameInvalid;
    public static RegexParseError CaptureGroupOfZero;
    public static RegexParseError UnterminatedBracket;
    public static RegexParseError ExclusionGroupNotLast;
    public static RegexParseError ReversedCharacterRange;
    public static RegexParseError ShorthandClassInCharacterRange;
    public static RegexParseError InsufficientClosingParentheses;
    public static RegexParseError ReversedQuantifierRange;
    public static RegexParseError NestedQuantifiersNotParenthesized;
    public static RegexParseError QuantifierAfterNothing;
    public static RegexParseError InsufficientOpeningParentheses;
    public static RegexParseError UnrecognizedUnicodeProperty;
}
public class System.Text.RegularExpressions.RegexParseException : ArgumentException {
    public RegexParseError Error { get; }
    public int Offset { get; }
    public RegexParseError get_Error();
    public int get_Offset();
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class System.Text.RegularExpressions.RegexRunner : object {
    protected internal Int32[] runcrawl;
    protected internal int runcrawlpos;
    protected internal Match runmatch;
    protected internal Regex runregex;
    protected internal Int32[] runstack;
    protected internal int runstackpos;
    protected internal string runtext;
    protected internal int runtextbeg;
    protected internal int runtextend;
    protected internal int runtextpos;
    protected internal int runtextstart;
    protected internal Int32[] runtrack;
    protected internal int runtrackcount;
    protected internal int runtrackpos;
    protected void Capture(int capnum, int start, int end);
    [NullableContextAttribute("1")]
protected static bool CharInClass(char ch, string charClass);
    [NullableContextAttribute("1")]
protected static bool CharInSet(char ch, string set, string category);
    protected void CheckTimeout();
    protected void Crawl(int i);
    protected int Crawlpos();
    protected void DoubleCrawl();
    protected void DoubleStack();
    protected void DoubleTrack();
    protected void EnsureStorage();
    protected virtual bool FindFirstChar();
    protected virtual void Go();
    protected virtual void InitTrackCount();
    protected bool IsBoundary(int index, int startpos, int endpos);
    protected bool IsECMABoundary(int index, int startpos, int endpos);
    protected bool IsMatched(int cap);
    protected int MatchIndex(int cap);
    protected int MatchLength(int cap);
    protected int Popcrawl();
    [NullableContextAttribute("1")]
protected internal Match Scan(Regex regex, string text, int textbeg, int textend, int textstart, int prevlen, bool quick);
    [NullableContextAttribute("1")]
protected internal Match Scan(Regex regex, string text, int textbeg, int textend, int textstart, int prevlen, bool quick, TimeSpan timeout);
    [NullableContextAttribute("0")]
protected internal virtual void Scan(ReadOnlySpan`1<char> text);
    protected void TransferCapture(int capnum, int uncapnum, int start, int end);
    protected void Uncapture();
}
public abstract class System.Text.RegularExpressions.RegexRunnerFactory : object {
    [NullableContextAttribute("1")]
protected internal abstract virtual RegexRunner CreateInstance();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[IsReadOnlyAttribute]
public class System.Text.RegularExpressions.ValueMatch : ValueType {
    private int _dummyPrimitive;
    public int Index { get; }
    public int Length { get; }
    public int get_Index();
    public int get_Length();
}
