[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[CLSCompliantAttribute("False")]
public class System.Threading.IOCompletionCallback : MulticastDelegate {
    public IOCompletionCallback(object object, IntPtr method);
    public virtual void Invoke(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* pOVERLAP);
    public virtual IAsyncResult BeginInvoke(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* pOVERLAP, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Threading.NativeOverlapped : ValueType {
    public IntPtr EventHandle;
    public IntPtr InternalHigh;
    public IntPtr InternalLow;
    public int OffsetHigh;
    public int OffsetLow;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Threading.Overlapped : object {
    public IAsyncResult AsyncResult { get; public set; }
    [ObsoleteAttribute("Overlapped.EventHandle is not 64-bit compatible and has been deprecated. Use EventHandleIntPtr instead.")]
public int EventHandle { get; public set; }
    public IntPtr EventHandleIntPtr { get; public set; }
    public int OffsetHigh { get; public set; }
    public int OffsetLow { get; public set; }
    [ObsoleteAttribute("This constructor is not 64-bit compatible and has been deprecated. Use the constructor that accepts an IntPtr for the event handle instead.")]
public Overlapped(int offsetLo, int offsetHi, int hEvent, IAsyncResult ar);
    public Overlapped(int offsetLo, int offsetHi, IntPtr hEvent, IAsyncResult ar);
    public IAsyncResult get_AsyncResult();
    public void set_AsyncResult(IAsyncResult value);
    public int get_EventHandle();
    public void set_EventHandle(int value);
    public IntPtr get_EventHandleIntPtr();
    public void set_EventHandleIntPtr(IntPtr value);
    public int get_OffsetHigh();
    public void set_OffsetHigh(int value);
    public int get_OffsetLow();
    public void set_OffsetLow(int value);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
public static void Free(NativeOverlapped* nativeOverlappedPtr);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
[ObsoleteAttribute("This overload is not safe and has been deprecated. Use Pack(IOCompletionCallback?, object?) instead.")]
public NativeOverlapped* Pack(IOCompletionCallback iocb);
    [CLSCompliantAttribute("False")]
public NativeOverlapped* Pack(IOCompletionCallback iocb, object userData);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
public static Overlapped Unpack(NativeOverlapped* nativeOverlappedPtr);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
[ObsoleteAttribute("This overload is not safe and has been deprecated. Use UnsafePack(IOCompletionCallback?, object?) instead.")]
public NativeOverlapped* UnsafePack(IOCompletionCallback iocb);
    [CLSCompliantAttribute("False")]
public NativeOverlapped* UnsafePack(IOCompletionCallback iocb, object userData);
}
public class System.Threading.PreAllocatedOverlapped : object {
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public PreAllocatedOverlapped(IOCompletionCallback callback, object state, object pinData);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    [NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public static PreAllocatedOverlapped UnsafeCreate(IOCompletionCallback callback, object state, object pinData);
}
public class System.Threading.ThreadPoolBoundHandle : object {
    [NullableAttribute("1")]
public SafeHandle Handle { get; }
    [NullableContextAttribute("1")]
public SafeHandle get_Handle();
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public NativeOverlapped* AllocateNativeOverlapped(IOCompletionCallback callback, object state, object pinData);
    [CLSCompliantAttribute("False")]
public NativeOverlapped* AllocateNativeOverlapped(PreAllocatedOverlapped preAllocated);
    [NullableContextAttribute("1")]
public static ThreadPoolBoundHandle BindHandle(SafeHandle handle);
    public sealed virtual void Dispose();
    [CLSCompliantAttribute("False")]
public void FreeNativeOverlapped(NativeOverlapped* overlapped);
    [CLSCompliantAttribute("False")]
public static object GetNativeOverlappedState(NativeOverlapped* overlapped);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public NativeOverlapped* UnsafeAllocateNativeOverlapped(IOCompletionCallback callback, object state, object pinData);
}
