[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[UnsupportedOSPlatformAttribute("browser")]
public class System.Transactions.CommittableTransaction : Transaction {
    [NullableAttribute("2")]
private object System.IAsyncResult.AsyncState { get; }
    [NullableAttribute("1")]
private WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }
    private bool System.IAsyncResult.CompletedSynchronously { get; }
    private bool System.IAsyncResult.IsCompleted { get; }
    public CommittableTransaction(TimeSpan timeout);
    public CommittableTransaction(TransactionOptions options);
    private sealed virtual override object System.IAsyncResult.get_AsyncState();
    private sealed virtual override WaitHandle System.IAsyncResult.get_AsyncWaitHandle();
    private sealed virtual override bool System.IAsyncResult.get_CompletedSynchronously();
    private sealed virtual override bool System.IAsyncResult.get_IsCompleted();
    [NullableContextAttribute("2")]
public IAsyncResult BeginCommit(AsyncCallback asyncCallback, object asyncState);
    public void Commit();
    [NullableContextAttribute("1")]
public void EndCommit(IAsyncResult asyncResult);
}
public enum System.Transactions.DependentCloneOption : Enum {
    public int value__;
    public static DependentCloneOption BlockCommitUntilComplete;
    public static DependentCloneOption RollbackIfNotComplete;
}
public class System.Transactions.DependentTransaction : Transaction {
    public void Complete();
}
public class System.Transactions.Enlistment : object {
    public void Done();
}
[FlagsAttribute]
public enum System.Transactions.EnlistmentOptions : Enum {
    public int value__;
    public static EnlistmentOptions None;
    public static EnlistmentOptions EnlistDuringPrepareRequired;
}
public enum System.Transactions.EnterpriseServicesInteropOption : Enum {
    public int value__;
    public static EnterpriseServicesInteropOption None;
    public static EnterpriseServicesInteropOption Automatic;
    public static EnterpriseServicesInteropOption Full;
}
public class System.Transactions.HostCurrentTransactionCallback : MulticastDelegate {
    public HostCurrentTransactionCallback(object object, IntPtr method);
    [NullableContextAttribute("2")]
public virtual Transaction Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual Transaction EndInvoke(IAsyncResult result);
}
[InterfaceTypeAttribute("1")]
public interface System.Transactions.IDtcTransaction {
    public abstract virtual void Abort(IntPtr reason, int retaining, int async);
    public abstract virtual void Commit(int retaining, int commitType, int reserved);
    public abstract virtual void GetTransactionInfo(IntPtr transactionInformation);
}
[NullableContextAttribute("1")]
public interface System.Transactions.IEnlistmentNotification {
    public abstract virtual void Commit(Enlistment enlistment);
    public abstract virtual void InDoubt(Enlistment enlistment);
    public abstract virtual void Prepare(PreparingEnlistment preparingEnlistment);
    public abstract virtual void Rollback(Enlistment enlistment);
}
[NullableContextAttribute("1")]
public interface System.Transactions.IPromotableSinglePhaseNotification {
    public abstract virtual void Initialize();
    public abstract virtual void Rollback(SinglePhaseEnlistment singlePhaseEnlistment);
    public abstract virtual void SinglePhaseCommit(SinglePhaseEnlistment singlePhaseEnlistment);
}
public interface System.Transactions.ISimpleTransactionSuperior {
    public abstract virtual void Rollback();
}
public interface System.Transactions.ISinglePhaseNotification {
    [NullableContextAttribute("1")]
public abstract virtual void SinglePhaseCommit(SinglePhaseEnlistment singlePhaseEnlistment);
}
public enum System.Transactions.IsolationLevel : Enum {
    public int value__;
    public static IsolationLevel Serializable;
    public static IsolationLevel RepeatableRead;
    public static IsolationLevel ReadCommitted;
    public static IsolationLevel ReadUncommitted;
    public static IsolationLevel Snapshot;
    public static IsolationLevel Chaos;
    public static IsolationLevel Unspecified;
}
[NullableContextAttribute("2")]
public interface System.Transactions.ITransactionPromoter {
    public abstract virtual Byte[] Promote();
}
public class System.Transactions.PreparingEnlistment : Enlistment {
    public void ForceRollback();
    [NullableContextAttribute("2")]
public void ForceRollback(Exception e);
    public void Prepared();
    [NullableContextAttribute("1")]
public Byte[] RecoveryInformation();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Transactions.SinglePhaseEnlistment : Enlistment {
    public void Aborted();
    public void Aborted(Exception e);
    public void Committed();
    public void InDoubt();
    public void InDoubt(Exception e);
}
public class System.Transactions.SubordinateTransaction : Transaction {
    [NullableContextAttribute("1")]
public SubordinateTransaction(IsolationLevel isoLevel, ISimpleTransactionSuperior superior);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Transactions.Transaction : object {
    [NullableAttribute("2")]
public static Transaction Current { get; public set; }
    public IsolationLevel IsolationLevel { get; }
    public Guid PromoterType { get; }
    public TransactionInformation TransactionInformation { get; }
    [NullableContextAttribute("2")]
public static Transaction get_Current();
    [NullableContextAttribute("2")]
public static void set_Current(Transaction value);
    public IsolationLevel get_IsolationLevel();
    public Guid get_PromoterType();
    public TransactionInformation get_TransactionInformation();
    [NullableContextAttribute("2")]
public void add_TransactionCompleted(TransactionCompletedEventHandler value);
    [NullableContextAttribute("2")]
public void remove_TransactionCompleted(TransactionCompletedEventHandler value);
    public Transaction Clone();
    public DependentTransaction DependentClone(DependentCloneOption cloneOption);
    public sealed virtual void Dispose();
    public Enlistment EnlistDurable(Guid resourceManagerIdentifier, IEnlistmentNotification enlistmentNotification, EnlistmentOptions enlistmentOptions);
    public Enlistment EnlistDurable(Guid resourceManagerIdentifier, ISinglePhaseNotification singlePhaseNotification, EnlistmentOptions enlistmentOptions);
    public bool EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification promotableSinglePhaseNotification);
    public bool EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification promotableSinglePhaseNotification, Guid promoterType);
    public Enlistment EnlistVolatile(IEnlistmentNotification enlistmentNotification, EnlistmentOptions enlistmentOptions);
    public Enlistment EnlistVolatile(ISinglePhaseNotification singlePhaseNotification, EnlistmentOptions enlistmentOptions);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public Byte[] GetPromotedToken();
    [NullableContextAttribute("2")]
public static bool op_Equality(Transaction x, Transaction y);
    [NullableContextAttribute("2")]
public static bool op_Inequality(Transaction x, Transaction y);
    public Enlistment PromoteAndEnlistDurable(Guid resourceManagerIdentifier, IPromotableSinglePhaseNotification promotableNotification, ISinglePhaseNotification enlistmentNotification, EnlistmentOptions enlistmentOptions);
    public void Rollback();
    [NullableContextAttribute("2")]
public void Rollback(Exception e);
    public void SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification promotableNotification, Guid distributedTransactionIdentifier);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Transactions.TransactionAbortedException : TransactionException {
    [NullableContextAttribute("1")]
protected TransactionAbortedException(SerializationInfo info, StreamingContext context);
    public TransactionAbortedException(string message);
    public TransactionAbortedException(string message, Exception innerException);
}
public class System.Transactions.TransactionCompletedEventHandler : MulticastDelegate {
    public TransactionCompletedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, TransactionEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TransactionEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Transactions.TransactionEventArgs : EventArgs {
    public Transaction Transaction { get; }
    public Transaction get_Transaction();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Transactions.TransactionException : SystemException {
    [NullableContextAttribute("1")]
protected TransactionException(SerializationInfo info, StreamingContext context);
    public TransactionException(string message);
    public TransactionException(string message, Exception innerException);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Transactions.TransactionInDoubtException : TransactionException {
    [NullableContextAttribute("1")]
protected TransactionInDoubtException(SerializationInfo info, StreamingContext context);
    public TransactionInDoubtException(string message);
    public TransactionInDoubtException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Transactions.TransactionInformation : object {
    public DateTime CreationTime { get; }
    public Guid DistributedIdentifier { get; }
    public string LocalIdentifier { get; }
    public TransactionStatus Status { get; }
    public DateTime get_CreationTime();
    public Guid get_DistributedIdentifier();
    public string get_LocalIdentifier();
    public TransactionStatus get_Status();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Transactions.TransactionInterop : object {
    public static Guid PromoterTypeDtc;
    public static IDtcTransaction GetDtcTransaction(Transaction transaction);
    public static Byte[] GetExportCookie(Transaction transaction, Byte[] whereabouts);
    public static Transaction GetTransactionFromDtcTransaction(IDtcTransaction transactionNative);
    public static Transaction GetTransactionFromExportCookie(Byte[] cookie);
    public static Transaction GetTransactionFromTransmitterPropagationToken(Byte[] propagationToken);
    public static Byte[] GetTransmitterPropagationToken(Transaction transaction);
    public static Byte[] GetWhereabouts();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class System.Transactions.TransactionManager : object {
    [CompilerGeneratedAttribute]
private static bool <ImplicitDistributedTransactions>k__BackingField;
    public static TimeSpan DefaultTimeout { get; public set; }
    public static HostCurrentTransactionCallback HostCurrentCallback { get; public set; }
    public static TimeSpan MaximumTimeout { get; public set; }
    public static bool ImplicitDistributedTransactions { get; public set; }
    public static TimeSpan get_DefaultTimeout();
    public static void set_DefaultTimeout(TimeSpan value);
    public static HostCurrentTransactionCallback get_HostCurrentCallback();
    public static void set_HostCurrentCallback(HostCurrentTransactionCallback value);
    public static TimeSpan get_MaximumTimeout();
    public static void set_MaximumTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public static bool get_ImplicitDistributedTransactions();
    [CompilerGeneratedAttribute]
[SupportedOSPlatformAttribute("windows")]
[RequiresUnreferencedCodeAttribute("Distributed transactions support may not be compatible with trimming. If your program creates a distributed transaction via System.Transactions, the correctness of the application cannot be guaranteed after trimming.")]
public static void set_ImplicitDistributedTransactions(bool value);
    public static void add_DistributedTransactionStarted(TransactionStartedEventHandler value);
    public static void remove_DistributedTransactionStarted(TransactionStartedEventHandler value);
    public static void RecoveryComplete(Guid resourceManagerIdentifier);
    [NullableContextAttribute("1")]
public static Enlistment Reenlist(Guid resourceManagerIdentifier, Byte[] recoveryInformation, IEnlistmentNotification enlistmentNotification);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Transactions.TransactionManagerCommunicationException : TransactionException {
    [NullableContextAttribute("1")]
protected TransactionManagerCommunicationException(SerializationInfo info, StreamingContext context);
    public TransactionManagerCommunicationException(string message);
    public TransactionManagerCommunicationException(string message, Exception innerException);
}
public class System.Transactions.TransactionOptions : ValueType {
    private int _dummyPrimitive;
    public IsolationLevel IsolationLevel { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public IsolationLevel get_IsolationLevel();
    public void set_IsolationLevel(IsolationLevel value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TransactionOptions other);
    public virtual int GetHashCode();
    public static bool op_Equality(TransactionOptions x, TransactionOptions y);
    public static bool op_Inequality(TransactionOptions x, TransactionOptions y);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Transactions.TransactionPromotionException : TransactionException {
    [NullableContextAttribute("1")]
protected TransactionPromotionException(SerializationInfo info, StreamingContext context);
    public TransactionPromotionException(string message);
    public TransactionPromotionException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[UnsupportedOSPlatformAttribute("browser")]
public class System.Transactions.TransactionScope : object {
    public TransactionScope(Transaction transactionToUse);
    public TransactionScope(Transaction transactionToUse, TimeSpan scopeTimeout);
    public TransactionScope(Transaction transactionToUse, TimeSpan scopeTimeout, EnterpriseServicesInteropOption interopOption);
    public TransactionScope(Transaction transactionToUse, TimeSpan scopeTimeout, TransactionScopeAsyncFlowOption asyncFlowOption);
    public TransactionScope(Transaction transactionToUse, TransactionScopeAsyncFlowOption asyncFlowOption);
    public TransactionScope(TransactionScopeAsyncFlowOption asyncFlowOption);
    public TransactionScope(TransactionScopeOption scopeOption);
    public TransactionScope(TransactionScopeOption scopeOption, TimeSpan scopeTimeout);
    public TransactionScope(TransactionScopeOption scopeOption, TimeSpan scopeTimeout, TransactionScopeAsyncFlowOption asyncFlowOption);
    public TransactionScope(TransactionScopeOption scopeOption, TransactionOptions transactionOptions);
    public TransactionScope(TransactionScopeOption scopeOption, TransactionOptions transactionOptions, EnterpriseServicesInteropOption interopOption);
    public TransactionScope(TransactionScopeOption scopeOption, TransactionOptions transactionOptions, TransactionScopeAsyncFlowOption asyncFlowOption);
    public TransactionScope(TransactionScopeOption scopeOption, TransactionScopeAsyncFlowOption asyncFlowOption);
    public void Complete();
    public sealed virtual void Dispose();
}
public enum System.Transactions.TransactionScopeAsyncFlowOption : Enum {
    public int value__;
    public static TransactionScopeAsyncFlowOption Suppress;
    public static TransactionScopeAsyncFlowOption Enabled;
}
public enum System.Transactions.TransactionScopeOption : Enum {
    public int value__;
    public static TransactionScopeOption Required;
    public static TransactionScopeOption RequiresNew;
    public static TransactionScopeOption Suppress;
}
public class System.Transactions.TransactionStartedEventHandler : MulticastDelegate {
    public TransactionStartedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, TransactionEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TransactionEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Transactions.TransactionStatus : Enum {
    public int value__;
    public static TransactionStatus Active;
    public static TransactionStatus Committed;
    public static TransactionStatus Aborted;
    public static TransactionStatus InDoubt;
}
