internal static class FxResources.System.Data.Odbc.SR : object {
}
internal static class Interop : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class System.Data.Common.ADP : object {
    private static Task`1<bool> _trueTask;
    private static Task`1<bool> _falseTask;
    internal static CompareOptions DefaultCompareOptions;
    internal static int DefaultConnectionTimeout;
    private static Type s_stackOverflowType;
    private static Type s_outOfMemoryType;
    private static Type s_threadAbortType;
    private static Type s_nullReferenceType;
    private static Type s_accessViolationType;
    private static Type s_securityType;
    internal static string BeginTransaction;
    internal static string ChangeDatabase;
    internal static string CommitTransaction;
    internal static string CommandTimeout;
    internal static string DeriveParameters;
    internal static string ExecuteReader;
    internal static string ExecuteNonQuery;
    internal static string ExecuteScalar;
    internal static string GetSchema;
    internal static string GetSchemaTable;
    internal static string Parameter;
    internal static string ParameterName;
    internal static string Prepare;
    internal static string RollbackTransaction;
    internal static string QuoteIdentifier;
    internal static string UnquoteIdentifier;
    internal static int DecimalMaxPrecision;
    internal static int DecimalMaxPrecision28;
    internal static int DefaultCommandTimeout;
    internal static IntPtr PtrZero;
    internal static int PtrSize;
    internal static Task`1<bool> TrueTask { get; }
    internal static Task`1<bool> FalseTask { get; }
    private static ADP();
    internal static Task`1<bool> get_TrueTask();
    internal static Task`1<bool> get_FalseTask();
    internal static void TraceExceptionAsReturnValue(Exception e);
    internal static void TraceExceptionWithoutRethrow(Exception e);
    internal static ArgumentException Argument(string error);
    internal static ArgumentException Argument(string error, Exception inner);
    internal static ArgumentException Argument(string error, string parameter);
    internal static ArgumentNullException ArgumentNull(string parameter);
    internal static ArgumentNullException ArgumentNull(string parameter, string error);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string parameterName);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string message, string parameterName);
    internal static IndexOutOfRangeException IndexOutOfRange(string error);
    internal static InvalidCastException InvalidCast(string error);
    internal static InvalidCastException InvalidCast(string error, Exception inner);
    internal static InvalidOperationException InvalidOperation(string error);
    internal static NotSupportedException NotSupported();
    internal static NotSupportedException NotSupported(string error);
    internal static bool RemoveStringQuotes(string quotePrefix, string quoteSuffix, string quotedString, String& unquotedString);
    internal static ArgumentOutOfRangeException NotSupportedEnumerationValue(Type type, string value, string method);
    internal static InvalidOperationException DataAdapter(string error);
    private static InvalidOperationException Provider(string error);
    internal static ArgumentException InvalidMultipartName(string property, string value);
    internal static ArgumentException InvalidMultipartNameIncorrectUsageOfQuotes(string property, string value);
    internal static ArgumentException InvalidMultipartNameToManyParts(string property, string value, int limit);
    internal static void CheckArgumentNull(object value, string parameterName);
    internal static bool IsCatchableExceptionType(Exception e);
    internal static bool IsCatchableOrSecurityExceptionType(Exception e);
    internal static ArgumentOutOfRangeException InvalidEnumerationValue(Type type, int value);
    internal static ArgumentException ConnectionStringSyntax(int index);
    internal static ArgumentException KeywordNotSupported(string keyword);
    internal static ArgumentException ConvertFailed(Type fromType, Type toType, Exception innerException);
    internal static Exception InvalidConnectionOptionValue(string key);
    internal static Exception InvalidConnectionOptionValue(string key, Exception inner);
    internal static ArgumentException CollectionRemoveInvalidObject(Type itemType, ICollection collection);
    internal static ArgumentNullException CollectionNullValue(string parameter, Type collection, Type itemType);
    internal static IndexOutOfRangeException CollectionIndexInt32(int index, Type collection, int count);
    internal static IndexOutOfRangeException CollectionIndexString(Type itemType, string propertyName, string propertyValue, Type collection);
    internal static InvalidCastException CollectionInvalidType(Type collection, Type itemType, object invalidValue);
    private static string ConnectionStateMsg(ConnectionState state);
    internal static Exception StreamClosed(string method);
    internal static string BuildQuotedString(string quotePrefix, string quoteSuffix, string unQuotedString);
    internal static string AppendQuotedString(StringBuilder buffer, string quotePrefix, string quoteSuffix, string unQuotedString);
    internal static ArgumentException ParametersIsNotParent(Type parameterType, ICollection collection);
    internal static ArgumentException ParametersIsParent(Type parameterType, ICollection collection);
    internal static Exception InternalError(InternalErrorCode internalError);
    internal static Exception DataReaderClosed(string method);
    internal static ArgumentOutOfRangeException InvalidSourceBufferIndex(int maxLen, long srcOffset, string parameterName);
    internal static ArgumentOutOfRangeException InvalidDestinationBufferIndex(int maxLen, int dstOffset, string parameterName);
    internal static IndexOutOfRangeException InvalidBufferSizeOrIndex(int numBytes, int bufferIndex);
    internal static Exception InvalidDataLength(long length);
    internal static bool CompareInsensitiveInvariant(string strvalue, string strconst);
    internal static int DstCompare(string strA, string strB);
    internal static bool IsEmptyArray(String[] array);
    internal static bool IsNull(object value);
    internal static Exception InvalidSeekOrigin(string parameterName);
    internal static void SetCurrentTransaction(Transaction transaction);
    internal static Timer UnsafeCreateTimer(TimerCallback callback, object state, int dueTime, int period);
    internal static Exception ExceptionWithStackTrace(Exception e);
    internal static TimeoutException TimeoutException(string error);
    internal static InvalidOperationException InvalidOperation(string error, Exception inner);
    internal static InvalidCastException InvalidCast();
    internal static void CheckArgumentLength(string value, string parameterName);
    internal static ArgumentOutOfRangeException InvalidCommandType(CommandType value);
    internal static ArgumentOutOfRangeException InvalidDataRowVersion(DataRowVersion value);
    internal static ArgumentOutOfRangeException InvalidIsolationLevel(IsolationLevel value);
    internal static ArgumentOutOfRangeException InvalidKeyRestrictionBehavior(KeyRestrictionBehavior value);
    internal static ArgumentOutOfRangeException InvalidParameterDirection(ParameterDirection value);
    internal static ArgumentOutOfRangeException InvalidUpdateRowSource(UpdateRowSource value);
    internal static InvalidOperationException InvalidDataDirectory();
    internal static ArgumentException InvalidKeyname(string parameterName);
    internal static ArgumentException InvalidValue(string parameterName);
    internal static InvalidOperationException NoConnectionString();
    internal static Exception MethodNotImplemented(string methodName);
    internal static Exception OdbcNoTypesFromProvider();
    internal static Exception PooledOpenTimeout();
    internal static Exception NonPooledOpenTimeout();
    internal static InvalidOperationException TransactionConnectionMismatch();
    internal static InvalidOperationException TransactionRequired(string method);
    internal static Exception CommandTextRequired(string method);
    internal static InvalidOperationException ConnectionRequired(string method);
    internal static InvalidOperationException OpenConnectionRequired(string method, ConnectionState state);
    internal static Exception OpenReaderExists();
    internal static Exception OpenReaderExists(Exception e);
    internal static Exception NonSeqByteAccess(long badIndex, long currIndex, string method);
    internal static Exception NumericToDecimalOverflow();
    internal static Exception InvalidCommandTimeout(int value);
    internal static Exception DeriveParametersNotSupported(IDbCommand value);
    internal static Exception UninitializedParameterSize(int index, Type dataType);
    internal static InvalidOperationException QuotePrefixNotSet(string method);
    internal static Exception ConnectionIsDisabled(Exception InnerException);
    internal static Exception ClosedConnectionError();
    internal static Exception ConnectionAlreadyOpen(ConnectionState state);
    internal static Exception OpenConnectionPropertySet(string property, ConnectionState state);
    internal static Exception EmptyDatabaseName();
    internal static Exception DatabaseNameTooLong();
    internal static Exception InternalConnectionError(ConnectionError internalError);
    internal static Exception DataReaderNoData();
    internal static ArgumentException InvalidDataType(TypeCode typecode);
    internal static ArgumentException UnknownDataType(Type dataType);
    internal static ArgumentException DbTypeNotSupported(DbType type, Type enumtype);
    internal static ArgumentException UnknownDataTypeCode(Type dataType, TypeCode typeCode);
    internal static ArgumentException InvalidOffsetValue(int value);
    internal static ArgumentException InvalidSizeValue(int value);
    internal static Exception ParameterConversionFailed(object value, Type destType, Exception inner);
    internal static Exception ParametersMappingIndex(int index, IDataParameterCollection collection);
    internal static Exception ParametersSourceIndex(string parameterName, IDataParameterCollection collection, Type parameterType);
    internal static Exception ParameterNull(string parameter, IDataParameterCollection collection, Type parameterType);
    internal static Exception InvalidParameterType(IDataParameterCollection collection, Type parameterType, object invalidValue);
    internal static Exception ParallelTransactionsNotSupported(IDbConnection obj);
    internal static Exception TransactionZombied(IDbTransaction obj);
    internal static Exception OffsetOutOfRangeException();
    internal static Exception AmbiguousCollectionName(string collectionName);
    internal static Exception CollectionNameIsNotUnique(string collectionName);
    internal static Exception DataTableDoesNotExist(string collectionName);
    internal static Exception IncorrectNumberOfDataSourceInformationRows();
    internal static ArgumentException InvalidRestrictionValue(string collectionName, string restrictionName, string restrictionValue);
    internal static Exception InvalidXml();
    internal static Exception InvalidXmlMissingColumn(string collectionName, string columnName);
    internal static Exception InvalidXmlInvalidValue(string collectionName, string columnName);
    internal static Exception MissingDataSourceInformationColumn();
    internal static Exception MissingRestrictionColumn();
    internal static Exception MissingRestrictionRow();
    internal static Exception NoColumns();
    internal static Exception QueryFailed(string collectionName, Exception e);
    internal static Exception TooManyRestrictions(string collectionName);
    internal static Exception UnableToBuildCollection(string collectionName);
    internal static Exception UndefinedCollection(string collectionName);
    internal static Exception UndefinedPopulationMechanism(string populationMechanism);
    internal static Exception UnsupportedVersion(string collectionName);
    internal static Delegate FindBuilder(MulticastDelegate mcd);
    internal static bool NeedManualEnlistment();
    internal static long TimerCurrent();
    internal static long TimerFromSeconds(int seconds);
    internal static bool TimerHasExpired(long timerExpire);
    internal static long TimerRemaining(long timerExpire);
    internal static long TimerRemainingMilliseconds(long timerExpire);
    internal static long TimerToMilliseconds(long timerValue);
    internal static void EscapeSpecialCharacters(string unescapedString, StringBuilder escapedString);
    internal static string GetFullPath(string filename);
    internal static int StringLength(string inputString);
    internal static IntPtr IntPtrOffset(IntPtr pbase, int offset);
}
internal abstract class System.Data.Common.DataStorage : object {
    internal static bool IsSqlType(object storageType);
}
internal static class System.Data.Common.DbConnectionOptionKeywords : object {
    internal static string Driver;
    internal static string Pwd;
    internal static string UID;
    internal static string DataProvider;
    internal static string ExtendedProperties;
    internal static string FileName;
    internal static string Provider;
    internal static string RemoteProvider;
    internal static string Password;
    internal static string UserID;
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Common.DbConnectionOptions : object {
    internal bool _hasUserIdKeyword;
    internal bool _useOdbcRules;
    internal static string DataDirectory;
    private static Regex s_connectionStringValidKeyRegex;
    private static Regex s_connectionStringQuoteValueRegex;
    private static Regex s_connectionStringQuoteOdbcValueRegex;
    private string _usersConnectionString;
    private Dictionary`2<string, string> _parsetable;
    internal NameValuePair _keyChain;
    internal bool _hasPasswordKeyword;
    internal bool HasBlankPassword { get; }
    public bool IsEmpty { get; }
    internal Dictionary`2<string, string> Parsetable { get; }
    public ICollection Keys { get; }
    public string Item { get; }
    internal bool HasPersistablePassword { get; }
    public DbConnectionOptions(string connectionString);
    public DbConnectionOptions(string connectionString, Dictionary`2<string, string> synonyms, bool useOdbcRules);
    protected DbConnectionOptions(DbConnectionOptions connectionOptions);
    private static DbConnectionOptions();
    internal string UsersConnectionStringForTrace();
    internal bool get_HasBlankPassword();
    public bool get_IsEmpty();
    internal Dictionary`2<string, string> get_Parsetable();
    public ICollection get_Keys();
    public string get_Item(string keyword);
    internal static void AppendKeyValuePairBuilder(StringBuilder builder, string keyName, string keyValue, bool useOdbcRules);
    public bool ConvertValueToIntegratedSecurity();
    internal static bool ConvertValueToIntegratedSecurityInternal(string stringValue);
    public int ConvertValueToInt32(string keyName, int defaultValue);
    internal static int ConvertToInt32Internal(string keyname, string stringValue);
    public string ConvertValueToString(string keyName, string defaultValue);
    public bool ContainsKey(string keyword);
    internal static string ExpandDataDirectory(string keyword, string value, String& datadir);
    internal string ExpandDataDirectories(String& filename, Int32& position);
    internal string ExpandKeyword(string keyword, string replacementValue);
    internal static void ValidateKeyValuePair(string keyword, string value);
    public string UsersConnectionString(bool hidePassword);
    private string UsersConnectionString(bool hidePassword, bool forceHidePassword);
    internal bool get_HasPersistablePassword();
    public bool ConvertValueToBoolean(string keyName, bool defaultValue);
    internal static bool ConvertValueToBooleanInternal(string keyName, string stringValue);
    private static bool CompareInsensitiveInvariant(string strvalue, string strconst);
    private static string GetKeyName(StringBuilder buffer);
    private static string GetKeyValue(StringBuilder buffer, bool trimWhitespace);
    internal static int GetKeyValuePair(string connectionString, int currentPosition, StringBuilder buffer, bool useOdbcRules, String& keyname, String& keyvalue);
    private static bool IsValueValidInternal(string keyvalue);
    private static bool IsKeyNameValid(string keyname);
    private static NameValuePair ParseInternal(Dictionary`2<string, string> parsetable, string connectionString, bool buildChain, Dictionary`2<string, string> synonyms, bool firstKey);
    internal NameValuePair ReplacePasswordPwd(String& constr, bool fakePassword);
}
internal class System.Data.Common.DbConnectionPoolKey : object {
    private string _connectionString;
    internal string ConnectionString { get; internal set; }
    internal DbConnectionPoolKey(string connectionString);
    private DbConnectionPoolKey(DbConnectionPoolKey key);
    public sealed virtual object Clone();
    internal string get_ConnectionString();
    internal void set_ConnectionString(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Common.DBConnectionString : object {
    private string _encryptedUsersConnectionString;
    private Dictionary`2<string, string> _parsetable;
    private NameValuePair _keychain;
    private bool _hasPassword;
    private String[] _restrictionValues;
    private string _restrictions;
    private KeyRestrictionBehavior _behavior;
    private string _encryptedActualConnectionString;
    internal KeyRestrictionBehavior Behavior { get; }
    internal string ConnectionString { get; }
    internal bool IsEmpty { get; }
    internal NameValuePair KeyChain { get; }
    internal string Restrictions { get; }
    internal string Item { get; }
    internal DBConnectionString(string value, string restrictions, KeyRestrictionBehavior behavior, Dictionary`2<string, string> synonyms, bool useOdbcRules);
    internal DBConnectionString(DbConnectionOptions connectionOptions);
    private DBConnectionString(DbConnectionOptions connectionOptions, string restrictions, KeyRestrictionBehavior behavior, Dictionary`2<string, string> synonyms, bool mustCloneDictionary);
    private DBConnectionString(DBConnectionString connectionString, String[] restrictionValues, KeyRestrictionBehavior behavior);
    internal KeyRestrictionBehavior get_Behavior();
    internal string get_ConnectionString();
    internal bool get_IsEmpty();
    internal NameValuePair get_KeyChain();
    internal string get_Restrictions();
    internal string get_Item(string keyword);
    internal bool ContainsKey(string keyword);
    internal DBConnectionString Intersect(DBConnectionString entry);
    [ConditionalAttribute("DEBUG")]
private static void ValidateCombinedSet(DBConnectionString componentSet, DBConnectionString combinedSet);
    private bool IsRestrictedKeyword(string key);
    internal bool IsSupersetOf(DBConnectionString entry);
    private static String[] NewRestrictionAllowOnly(String[] allowonly, String[] preventusage);
    private static String[] NewRestrictionIntersect(String[] a, String[] b);
    private static String[] NoDuplicateUnion(String[] a, String[] b);
    private static String[] ParseRestrictions(string restrictions, Dictionary`2<string, string> synonyms);
    internal static String[] RemoveDuplicates(String[] restrictions);
    [ConditionalAttribute("DEBUG")]
private static void Verify(String[] restrictionValues);
}
internal static class System.Data.Common.DbConnectionStringBuilderUtil : object {
    internal static bool ConvertToBoolean(object value);
    internal static bool ConvertToIntegratedSecurity(object value);
    internal static int ConvertToInt32(object value);
    internal static string ConvertToString(object value);
}
internal static class System.Data.Common.DbConnectionStringDefaults : object {
    internal static string Driver;
    internal static string Dsn;
    internal static bool AdoNetPooler;
    internal static string FileName;
    internal static int OleDbServices;
    internal static string Provider;
    internal static bool Unicode;
    internal static bool OmitOracleConnectionName;
    internal static string ApplicationName;
    internal static bool AsynchronousProcessing;
    internal static string AttachDBFilename;
    internal static int ConnectTimeout;
    internal static bool ConnectionReset;
    internal static bool ContextConnection;
    internal static string CurrentLanguage;
    internal static string DataSource;
    internal static bool Encrypt;
    internal static bool Enlist;
    internal static string FailoverPartner;
    internal static string InitialCatalog;
    internal static bool IntegratedSecurity;
    internal static int LoadBalanceTimeout;
    internal static bool MultipleActiveResultSets;
    internal static bool MultiSubnetFailover;
    internal static bool TransparentNetworkIPResolution;
    internal static int MaxPoolSize;
    internal static int MinPoolSize;
    internal static string NetworkLibrary;
    internal static int PacketSize;
    internal static string Password;
    internal static bool PersistSecurityInfo;
    internal static bool Pooling;
    internal static bool TrustServerCertificate;
    internal static string TypeSystemVersion;
    internal static string UserID;
    internal static bool UserInstance;
    internal static bool Replication;
    internal static string WorkstationID;
    internal static string TransactionBinding;
    internal static int ConnectRetryCount;
    internal static int ConnectRetryInterval;
}
internal static class System.Data.Common.DbConnectionStringKeywords : object {
    internal static string Driver;
    internal static string Dsn;
    internal static string FileDsn;
    internal static string SaveFile;
    internal static string FileName;
    internal static string OleDbServices;
    internal static string Provider;
    internal static string Unicode;
    internal static string OmitOracleConnectionName;
    internal static string ApplicationIntent;
    internal static string ApplicationName;
    internal static string AsynchronousProcessing;
    internal static string AttachDBFilename;
    internal static string ConnectTimeout;
    internal static string ConnectionReset;
    internal static string ContextConnection;
    internal static string CurrentLanguage;
    internal static string Encrypt;
    internal static string FailoverPartner;
    internal static string InitialCatalog;
    internal static string MultipleActiveResultSets;
    internal static string MultiSubnetFailover;
    internal static string TransparentNetworkIPResolution;
    internal static string NetworkLibrary;
    internal static string PacketSize;
    internal static string Replication;
    internal static string TransactionBinding;
    internal static string TrustServerCertificate;
    internal static string TypeSystemVersion;
    internal static string UserInstance;
    internal static string WorkstationID;
    internal static string ConnectRetryCount;
    internal static string ConnectRetryInterval;
    internal static string Authentication;
    internal static string Certificate;
    internal static string ColumnEncryptionSetting;
    internal static string PoolBlockingPeriod;
    internal static string DataSource;
    internal static string IntegratedSecurity;
    internal static string Password;
    internal static string PersistSecurityInfo;
    internal static string UserID;
    internal static string Enlist;
    internal static string LoadBalanceTimeout;
    internal static string MaxPoolSize;
    internal static string Pooling;
    internal static string MinPoolSize;
}
internal static class System.Data.Common.MultipartIdentifier : object {
    private static int MaxParts;
    internal static int ServerIndex;
    internal static int CatalogIndex;
    internal static int SchemaIndex;
    internal static int TableIndex;
    internal static String[] ParseMultipartIdentifier(string name, string leftQuote, string rightQuote, string property, bool ThrowOnEmptyMultipartName);
    private static void IncrementStringCount(string name, String[] ary, Int32& position, string property);
    private static bool IsWhitespace(char ch);
    internal static String[] ParseMultipartIdentifier(string name, string leftQuote, string rightQuote, char separator, int limit, bool removequotes, string property, bool ThrowOnEmptyMultipartName);
}
internal class System.Data.Common.NameValuePair : object {
    private string _name;
    private string _value;
    private int _length;
    private NameValuePair _next;
    internal int Length { get; }
    internal string Name { get; }
    internal string Value { get; }
    internal NameValuePair Next { get; internal set; }
    internal NameValuePair(string name, string value, int length);
    internal int get_Length();
    internal string get_Name();
    internal string get_Value();
    internal NameValuePair get_Next();
    internal void set_Next(NameValuePair value);
}
internal class System.Data.Common.NameValuePermission : object {
    private string _value;
    private DBConnectionString _entry;
    private NameValuePermission[] _tree;
    private NameValuePermission(string keyword);
    private NameValuePermission(string value, DBConnectionString entry);
    private NameValuePermission(NameValuePermission permit);
    private sealed virtual override int System.IComparable.CompareTo(object a);
    internal static void AddEntry(NameValuePermission kvtree, ArrayList entries, DBConnectionString entry);
    internal void Intersect(ArrayList entries, NameValuePermission target);
    private void Add(NameValuePermission permit);
    internal bool CheckValueForKeyPermit(DBConnectionString parsetable);
    private NameValuePermission CheckKeyForValue(string keyInQuestion);
    internal NameValuePermission CopyNameValue();
}
internal class System.Data.Odbc.CMDWrapper : object {
    private OdbcStatementHandle _stmt;
    private OdbcStatementHandle _keyinfostmt;
    internal OdbcDescriptorHandle _hdesc;
    internal CNativeBuffer _nativeParameterBuffer;
    internal CNativeBuffer _dataReaderBuf;
    private OdbcConnection _connection;
    private bool _canceling;
    internal bool _hasBoundColumns;
    internal bool _ssKeyInfoModeOn;
    internal bool _ssKeyInfoModeOff;
    internal bool Canceling { get; internal set; }
    internal OdbcConnection Connection { get; }
    unknown bool HasBoundColumns {internal set; }
    internal OdbcStatementHandle StatementHandle { get; }
    internal OdbcStatementHandle KeyInfoStatement { get; }
    internal CMDWrapper(OdbcConnection connection);
    internal bool get_Canceling();
    internal void set_Canceling(bool value);
    internal OdbcConnection get_Connection();
    internal void set_HasBoundColumns(bool value);
    internal OdbcStatementHandle get_StatementHandle();
    internal OdbcStatementHandle get_KeyInfoStatement();
    internal void CreateKeyInfoStatementHandle();
    internal void CreateStatementHandle();
    internal void Dispose();
    private void DisposeDescriptorHandle();
    internal void DisposeStatementHandle();
    internal void DisposeKeyInfoStatementHandle();
    internal void FreeStatementHandle(STMT stmt);
    internal void FreeKeyInfoStatementHandle(STMT stmt);
    internal OdbcDescriptorHandle GetDescriptorHandle(SQL_ATTR attribute);
    internal string GetDiagSqlState();
    internal void StatementErrorHandler(SQLRETURN retcode);
    internal void UnbindStmtColumns();
}
internal class System.Data.Odbc.CNativeBuffer : DbBuffer {
    internal short ShortLength { get; }
    internal CNativeBuffer(int initialSize);
    internal short get_ShortLength();
    internal object MarshalToManaged(int offset, SQL_C sqlctype, int cb);
    internal void MarshalToNative(int offset, object value, SQL_C sqlctype, int sizeorprecision, int valueOffset);
    internal HandleRef PtrOffset(int offset, int length);
    internal void WriteODBCDateTime(int offset, DateTime value);
}
internal class System.Data.Odbc.CStringTokenizer : object {
    private StringBuilder _token;
    private string _sqlstatement;
    private char _quote;
    private char _escape;
    private int _len;
    private int _idx;
    internal int CurrentPosition { get; }
    internal CStringTokenizer(string text, char quote, char escape);
    internal int get_CurrentPosition();
    internal string NextToken();
    private int GetTokenFromBracket(int curidx);
    private int GetTokenFromQuote(int curidx);
    private static bool IsValidNameChar(char ch);
    internal int FindTokenIndex(string tokenString);
    internal bool StartsWith(string tokenString);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Odbc.DbCache : object {
    private Boolean[] _isBadValue;
    private DbSchemaInfo[] _schema;
    private Object[] _values;
    private OdbcDataReader _record;
    internal int _count;
    internal bool _randomaccess;
    internal object Item { get; internal set; }
    internal int Count { get; }
    internal Object[] Values { get; }
    internal DbCache(OdbcDataReader record, int count);
    internal object get_Item(int i);
    internal void set_Item(int i, object value);
    internal int get_Count();
    internal void InvalidateValue(int i);
    internal Object[] get_Values();
    internal object AccessIndex(int i);
    internal DbSchemaInfo GetSchema(int i);
    internal void FlushValues();
}
internal class System.Data.Odbc.DbSchemaInfo : object {
    internal string _name;
    internal string _typename;
    internal Type _type;
    internal Nullable`1<SQL_TYPE> _dbtype;
}
internal static class System.Data.Odbc.ODBC : object {
    internal static string Pwd;
    internal static Exception ConnectionClosed();
    internal static Exception OpenConnectionNoOwner();
    internal static Exception UnknownSQLType(SQL_TYPE sqltype);
    internal static ArgumentException GetSchemaRestrictionRequired();
    internal static ArgumentOutOfRangeException NotSupportedEnumerationValue(Type type, int value);
    internal static ArgumentOutOfRangeException NotSupportedCommandType(CommandType value);
    internal static ArgumentOutOfRangeException NotSupportedIsolationLevel(IsolationLevel value);
    internal static InvalidOperationException NoMappingForSqlTransactionLevel(int value);
    internal static Exception NegativeArgument();
    internal static Exception CantSetPropertyOnOpenConnection();
    internal static Exception CantEnableConnectionpooling(SQLRETURN retcode);
    internal static Exception CantAllocateEnvironmentHandle(SQLRETURN retcode);
    internal static Exception FailedToGetDescriptorHandle(SQLRETURN retcode);
    internal static Exception NotInTransaction();
    internal static Exception UnknownOdbcType(OdbcType odbctype);
    internal static void TraceODBC(int level, string method, SQLRETURN retcode);
    internal static short ShortStringLength(string inputString);
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public static class System.Data.Odbc.ODBC32 : object {
    internal static short SQL_COMMIT;
    internal static short SQL_ROLLBACK;
    internal static IntPtr SQL_AUTOCOMMIT_OFF;
    internal static IntPtr SQL_AUTOCOMMIT_ON;
    private static int SIGNED_OFFSET;
    private static int UNSIGNED_OFFSET;
    internal static short SQL_ALL_TYPES;
    internal static IntPtr SQL_HANDLE_NULL;
    internal static int SQL_NULL_DATA;
    internal static int SQL_NO_TOTAL;
    internal static int SQL_DEFAULT_PARAM;
    internal static int COLUMN_NAME;
    internal static int COLUMN_TYPE;
    internal static int DATA_TYPE;
    internal static int COLUMN_SIZE;
    internal static int DECIMAL_DIGITS;
    internal static int NUM_PREC_RADIX;
    internal static IntPtr SQL_OV_ODBC3;
    internal static int SQL_NTS;
    internal static IntPtr SQL_CP_OFF;
    internal static IntPtr SQL_CP_ONE_PER_DRIVER;
    internal static IntPtr SQL_CP_ONE_PER_HENV;
    internal static int SQL_CD_TRUE;
    internal static int SQL_CD_FALSE;
    internal static int SQL_DTC_DONE;
    internal static int SQL_IS_POINTER;
    internal static int SQL_IS_PTR;
    internal static short SQL_DIAG_SQLSTATE;
    internal static short SQL_RESULT_COL;
    private static ODBC32();
    internal static string RetcodeToString(SQLRETURN retcode);
    internal static OdbcErrorCollection GetDiagErrors(string source, OdbcHandle hrHandle, SQLRETURN retcode);
    internal static void GetDiagErrors(OdbcErrorCollection errors, string source, OdbcHandle hrHandle, SQLRETURN retcode);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DesignerAttribute("Microsoft.VSDesigner.Data.VS.OdbcCommandDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemAttribute("True")]
public class System.Data.Odbc.OdbcCommand : DbCommand {
    private static int s_objectTypeCount;
    internal int ObjectID;
    private string _commandText;
    private CommandType _commandType;
    private int _commandTimeout;
    private UpdateRowSource _updatedRowSource;
    private bool _designTimeInvisible;
    private bool _isPrepared;
    private OdbcConnection _connection;
    private OdbcTransaction _transaction;
    private WeakReference _weakDataReaderReference;
    private CMDWrapper _cmdWrapper;
    private OdbcParameterCollection _parameterCollection;
    private ConnectionState _cmdState;
    internal bool Canceling { get; }
    [NullableAttribute("1")]
[EditorAttribute("Microsoft.VSDesigner.Data.Odbc.Design.OdbcCommandTextEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string CommandText { get; public set; }
    public int CommandTimeout { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public CommandType CommandType { get; public set; }
    [EditorAttribute("Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public OdbcConnection Connection { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    [NullableAttribute("1")]
protected DbParameterCollection DbParameterCollection { get; }
    protected DbTransaction DbTransaction { get; protected set; }
    [DefaultValueAttribute("True")]
[DesignOnlyAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool DesignTimeVisible { get; public set; }
    internal bool HasParameters { get; }
    [NullableAttribute("1")]
[DesignerSerializationVisibilityAttribute("2")]
public OdbcParameterCollection Parameters { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public OdbcTransaction Transaction { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public UpdateRowSource UpdatedRowSource { get; public set; }
    public OdbcCommand(string cmdText);
    public OdbcCommand(string cmdText, OdbcConnection connection);
    public OdbcCommand(string cmdText, OdbcConnection connection, OdbcTransaction transaction);
    private void DisposeDeadDataReader();
    private void DisposeDataReader();
    internal void DisconnectFromDataReaderAndConnection();
    protected virtual void Dispose(bool disposing);
    internal bool get_Canceling();
    [NullableContextAttribute("1")]
public virtual string get_CommandText();
    [NullableContextAttribute("1")]
public virtual void set_CommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public void ResetCommandTimeout();
    private bool ShouldSerializeCommandTimeout();
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public OdbcConnection get_Connection();
    public void set_Connection(OdbcConnection value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    [NullableContextAttribute("1")]
protected virtual DbParameterCollection get_DbParameterCollection();
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    internal bool get_HasParameters();
    [NullableContextAttribute("1")]
public OdbcParameterCollection get_Parameters();
    public OdbcTransaction get_Transaction();
    public void set_Transaction(OdbcTransaction value);
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    internal OdbcDescriptorHandle GetDescriptorHandle(SQL_ATTR attribute);
    internal CMDWrapper GetStatementHandle();
    public virtual void Cancel();
    private sealed virtual override object System.ICloneable.Clone();
    internal bool RecoverFromConnection();
    private void CloseCommandWrapper();
    internal void CloseFromConnection();
    internal void CloseFromDataReader();
    [NullableContextAttribute("1")]
public OdbcParameter CreateParameter();
    [NullableContextAttribute("1")]
protected virtual DbParameter CreateDbParameter();
    [NullableContextAttribute("1")]
protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    public virtual int ExecuteNonQuery();
    [NullableContextAttribute("1")]
public OdbcDataReader ExecuteReader();
    [NullableContextAttribute("1")]
public OdbcDataReader ExecuteReader(CommandBehavior behavior);
    internal OdbcDataReader ExecuteReaderFromSQLMethod(Object[] methodArguments, SQL_API method);
    private OdbcDataReader ExecuteReaderObject(CommandBehavior behavior, string method, bool needReader);
    private OdbcDataReader ExecuteReaderObject(CommandBehavior behavior, string method, bool needReader, Object[] methodArguments, SQL_API odbcApiMethod);
    public virtual object ExecuteScalar();
    internal string GetDiagSqlState();
    private void PropertyChanging();
    public virtual void Prepare();
    private void TrySetStatementAttribute(OdbcStatementHandle stmt, SQL_ATTR stmtAttribute, IntPtr value);
    private void ValidateOpenConnection(string methodName);
    private void ValidateConnectionAndTransaction(string method);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Data.Odbc.OdbcCommandBuilder : DbCommandBuilder {
    [NullableAttribute("2")]
public OdbcDataAdapter DataAdapter { get; public set; }
    [NullableContextAttribute("2")]
public OdbcCommandBuilder(OdbcDataAdapter adapter);
    [NullableContextAttribute("2")]
public OdbcDataAdapter get_DataAdapter();
    [NullableContextAttribute("2")]
public void set_DataAdapter(OdbcDataAdapter value);
    private void OdbcRowUpdatingHandler(object sender, OdbcRowUpdatingEventArgs ruevent);
    public OdbcCommand GetInsertCommand();
    public OdbcCommand GetInsertCommand(bool useColumnsForParameterNames);
    public OdbcCommand GetUpdateCommand();
    public OdbcCommand GetUpdateCommand(bool useColumnsForParameterNames);
    public OdbcCommand GetDeleteCommand();
    public OdbcCommand GetDeleteCommand(bool useColumnsForParameterNames);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterName(string parameterName);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    protected virtual void ApplyParameterInfo(DbParameter parameter, DataRow datarow, StatementType statementType, bool whereClause);
    public static void DeriveParameters(OdbcCommand command);
    private static OdbcParameter[] DeriveParametersFromStoredProcedure(OdbcConnection connection, OdbcCommand command);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    public string QuoteIdentifier(string unquotedIdentifier, OdbcConnection connection);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
    public string UnquoteIdentifier(string quotedIdentifier, OdbcConnection connection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Data.Odbc.OdbcConnection : DbConnection {
    private int _connectionTimeout;
    private OdbcInfoMessageEventHandler _infoMessageEventHandler;
    private WeakReference _weakTransaction;
    private OdbcConnectionHandle _connectionHandle;
    private static DbConnectionFactory s_connectionFactory;
    private DbConnectionOptions _userConnectionOptions;
    private DbConnectionPoolGroup _poolGroup;
    private DbConnectionInternal _innerConnection;
    private int _closeCount;
    [NullableAttribute("2")]
internal OdbcConnectionHandle ConnectionHandle { get; internal set; }
    [EditorAttribute("Microsoft.VSDesigner.Data.Odbc.Design.OdbcConnectionStringEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string ConnectionString { get; public set; }
    [DefaultValueAttribute("15")]
[DesignerSerializationVisibilityAttribute("0")]
public int ConnectionTimeout { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public string Database { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string DataSource { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string ServerVersion { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ConnectionState State { get; }
    internal OdbcConnectionPoolGroupProviderInfo ProviderInfo { get; }
    internal ConnectionState InternalState { get; }
    internal bool IsOpen { get; }
    [NullableAttribute("2")]
internal OdbcTransaction LocalTransaction { get; internal set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Driver { get; }
    internal bool IsV3Driver { get; }
    internal int CloseCount { get; }
    internal static DbConnectionFactory ConnectionFactory { get; }
    [NullableAttribute("2")]
internal DbConnectionOptions ConnectionOptions { get; }
    internal DbConnectionInternal InnerConnection { get; }
    [NullableAttribute("2")]
internal DbConnectionPoolGroup PoolGroup { get; internal set; }
    [NullableAttribute("2")]
internal DbConnectionOptions UserConnectionOptions { get; }
    [NullableContextAttribute("2")]
public OdbcConnection(string connectionString);
    private OdbcConnection(OdbcConnection connection);
    private static OdbcConnection();
    internal OdbcConnectionHandle get_ConnectionHandle();
    internal void set_ConnectionHandle(OdbcConnectionHandle value);
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public int get_ConnectionTimeout();
    public void set_ConnectionTimeout(int value);
    public virtual string get_Database();
    public virtual string get_DataSource();
    public virtual string get_ServerVersion();
    public virtual ConnectionState get_State();
    internal OdbcConnectionPoolGroupProviderInfo get_ProviderInfo();
    internal ConnectionState get_InternalState();
    internal bool get_IsOpen();
    internal OdbcTransaction get_LocalTransaction();
    internal void set_LocalTransaction(OdbcTransaction value);
    public string get_Driver();
    internal bool get_IsV3Driver();
    [NullableContextAttribute("2")]
public void add_InfoMessage(OdbcInfoMessageEventHandler value);
    [NullableContextAttribute("2")]
public void remove_InfoMessage(OdbcInfoMessageEventHandler value);
    internal char EscapeChar(string method);
    internal string QuoteChar(string method);
    public OdbcTransaction BeginTransaction();
    public OdbcTransaction BeginTransaction(IsolationLevel isolevel);
    private void RollbackDeadTransaction();
    public virtual void ChangeDatabase(string value);
    internal void CheckState(string method);
    private sealed virtual override object System.ICloneable.Clone();
    internal bool ConnectionIsAlive(Exception innerException);
    public OdbcCommand CreateCommand();
    internal OdbcStatementHandle CreateStatementHandle();
    public virtual void Close();
    internal string GetConnectAttrString(SQL_ATTR attribute);
    internal int GetConnectAttr(SQL_ATTR attribute, HANDLER handler);
    private string GetDiagSqlState();
    internal SQLRETURN GetInfoInt16Unhandled(SQL_INFO info, Int16& resultValue);
    internal SQLRETURN GetInfoInt32Unhandled(SQL_INFO info, Int32& resultValue);
    private int GetInfoInt32Unhandled(SQL_INFO infotype);
    internal string GetInfoStringUnhandled(SQL_INFO info);
    private string GetInfoStringUnhandled(SQL_INFO info, bool handleError);
    internal Exception HandleErrorNoThrow(OdbcHandle hrHandle, SQLRETURN retcode);
    internal void HandleError(OdbcHandle hrHandle, SQLRETURN retcode);
    public virtual void Open();
    private void OnInfoMessage(OdbcInfoMessageEventArgs args);
    public static void ReleaseObjectPool();
    internal OdbcTransaction SetStateExecuting(string method, OdbcTransaction transaction);
    internal void SetSupportedType(SQL_TYPE sqltype);
    internal void FlagRestrictedSqlBindType(SQL_TYPE sqltype);
    internal void FlagUnsupportedConnectAttr(SQL_ATTR Attribute);
    internal void FlagUnsupportedStmtAttr(SQL_ATTR Attribute);
    internal void FlagUnsupportedColAttr(SQL_DESC v3FieldId, SQL_COLUMN v2FieldId);
    internal bool SQLGetFunctions(SQL_API odbcFunction);
    internal bool TestTypeSupport(SQL_TYPE sqltype);
    internal bool TestRestrictedSqlBindType(SQL_TYPE sqltype);
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    internal OdbcTransaction Open_BeginTransaction(IsolationLevel isolevel);
    internal void Open_ChangeDatabase(string value);
    internal string Open_GetServerVersion();
    private void CopyFrom(OdbcConnection connection);
    internal int get_CloseCount();
    internal static DbConnectionFactory get_ConnectionFactory();
    internal DbConnectionOptions get_ConnectionOptions();
    private string ConnectionString_Get();
    private void ConnectionString_Set(string value);
    private void ConnectionString_Set(DbConnectionPoolKey key);
    internal DbConnectionInternal get_InnerConnection();
    internal DbConnectionPoolGroup get_PoolGroup();
    internal void set_PoolGroup(DbConnectionPoolGroup value);
    internal DbConnectionOptions get_UserConnectionOptions();
    internal void Abort(Exception e);
    internal void AddWeakReference(object value, int tag);
    protected virtual DbCommand CreateDbCommand();
    protected virtual void Dispose(bool disposing);
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    internal void NotifyWeakReference(int message);
    internal void PermissionDemand();
    internal void RemoveWeakReference(object value);
    internal void SetInnerConnectionEvent(DbConnectionInternal to);
    internal bool SetInnerConnectionFrom(DbConnectionInternal to, DbConnectionInternal from);
    internal void SetInnerConnectionTo(DbConnectionInternal to);
}
internal class System.Data.Odbc.OdbcConnectionFactory : DbConnectionFactory {
    public static OdbcConnectionFactory SingletonInstance;
    public DbProviderFactory ProviderFactory { get; }
    private static OdbcConnectionFactory();
    public virtual DbProviderFactory get_ProviderFactory();
    protected virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningObject);
    protected virtual DbConnectionOptions CreateConnectionOptions(string connectionString, DbConnectionOptions previous);
    protected virtual DbConnectionPoolGroupOptions CreateConnectionPoolGroupOptions(DbConnectionOptions connectionOptions);
    internal virtual DbConnectionPoolGroupProviderInfo CreateConnectionPoolGroupProviderInfo(DbConnectionOptions connectionOptions);
    protected virtual DbMetaDataFactory CreateMetaDataFactory(DbConnectionInternal internalConnection);
    internal virtual DbConnectionPoolGroup GetConnectionPoolGroup(DbConnection connection);
    internal virtual DbConnectionInternal GetInnerConnection(DbConnection connection);
    internal virtual void PermissionDemand(DbConnection outerConnection);
    internal virtual void SetConnectionPoolGroup(DbConnection outerConnection, DbConnectionPoolGroup poolGroup);
    internal virtual void SetInnerConnectionEvent(DbConnection owningObject, DbConnectionInternal to);
    internal virtual bool SetInnerConnectionFrom(DbConnection owningObject, DbConnectionInternal to, DbConnectionInternal from);
    internal virtual void SetInnerConnectionTo(DbConnection owningObject, DbConnectionInternal to);
}
internal class System.Data.Odbc.OdbcConnectionHandle : OdbcHandle {
    private HandleState _handleState;
    internal OdbcConnectionHandle(OdbcConnection connection, OdbcConnectionString constr, OdbcEnvironmentHandle environmentHandle);
    private SQLRETURN AutoCommitOff();
    internal SQLRETURN BeginTransaction(IsolationLevel& isolevel);
    internal SQLRETURN CompleteTransaction(short transactionOperation);
    private SQLRETURN CompleteTransaction(short transactionOperation, IntPtr handle);
    private SQLRETURN Connect(string connectionString);
    protected virtual bool ReleaseHandle();
    internal SQLRETURN GetConnectionAttribute(SQL_ATTR attribute, Byte[] buffer, Int32& cbActual);
    internal SQLRETURN GetFunctions(SQL_API fFunction, Int16& fExists);
    internal SQLRETURN GetInfo2(SQL_INFO info, Byte[] buffer, Int16& cbActual);
    internal SQLRETURN GetInfo1(SQL_INFO info, Byte[] buffer);
    internal SQLRETURN SetConnectionAttribute2(SQL_ATTR attribute, IntPtr value, int length);
    internal SQLRETURN SetConnectionAttribute3(SQL_ATTR attribute, string buffer, int length);
}
internal class System.Data.Odbc.OdbcConnectionOpen : DbConnectionInternal {
    internal OdbcConnection OuterConnection { get; }
    public string ServerVersion { get; }
    internal OdbcConnectionOpen(OdbcConnection outerConnection, OdbcConnectionString connectionOptions);
    internal OdbcConnection get_OuterConnection();
    public virtual string get_ServerVersion();
    protected virtual void Activate();
    public virtual DbTransaction BeginTransaction(IsolationLevel isolevel);
    internal OdbcTransaction BeginOdbcTransaction(IsolationLevel isolevel);
    public virtual void ChangeDatabase(string value);
    protected virtual DbReferenceCollection CreateReferenceCollection();
    protected virtual void Deactivate();
}
internal class System.Data.Odbc.OdbcConnectionPoolGroupProviderInfo : DbConnectionPoolGroupProviderInfo {
    private string _driverName;
    private string _driverVersion;
    private string _quoteChar;
    private char _escapeChar;
    private bool _hasQuoteChar;
    private bool _hasEscapeChar;
    private bool _isV3Driver;
    private int _supportedSQLTypes;
    private int _testedSQLTypes;
    private int _restrictedSQLBindTypes;
    private bool _noCurrentCatalog;
    private bool _noConnectionDead;
    private bool _noQueryTimeout;
    private bool _noSqlSoptSSNoBrowseTable;
    private bool _noSqlSoptSSHiddenColumns;
    private bool _noSqlCASSColumnKey;
    private bool _noSqlPrimaryKeys;
    internal string DriverName { get; internal set; }
    internal string DriverVersion { get; internal set; }
    internal bool HasQuoteChar { get; }
    internal bool HasEscapeChar { get; }
    internal string QuoteChar { get; internal set; }
    internal char EscapeChar { get; internal set; }
    internal bool IsV3Driver { get; internal set; }
    internal int SupportedSQLTypes { get; internal set; }
    internal int TestedSQLTypes { get; internal set; }
    internal int RestrictedSQLBindTypes { get; internal set; }
    internal bool NoCurrentCatalog { get; internal set; }
    internal bool NoConnectionDead { get; internal set; }
    internal bool NoQueryTimeout { get; internal set; }
    internal bool NoSqlSoptSSNoBrowseTable { get; internal set; }
    internal bool NoSqlSoptSSHiddenColumns { get; internal set; }
    internal bool NoSqlCASSColumnKey { get; internal set; }
    internal bool NoSqlPrimaryKeys { get; internal set; }
    internal string get_DriverName();
    internal void set_DriverName(string value);
    internal string get_DriverVersion();
    internal void set_DriverVersion(string value);
    internal bool get_HasQuoteChar();
    internal bool get_HasEscapeChar();
    internal string get_QuoteChar();
    internal void set_QuoteChar(string value);
    internal char get_EscapeChar();
    internal void set_EscapeChar(char value);
    internal bool get_IsV3Driver();
    internal void set_IsV3Driver(bool value);
    internal int get_SupportedSQLTypes();
    internal void set_SupportedSQLTypes(int value);
    internal int get_TestedSQLTypes();
    internal void set_TestedSQLTypes(int value);
    internal int get_RestrictedSQLBindTypes();
    internal void set_RestrictedSQLBindTypes(int value);
    internal bool get_NoCurrentCatalog();
    internal void set_NoCurrentCatalog(bool value);
    internal bool get_NoConnectionDead();
    internal void set_NoConnectionDead(bool value);
    internal bool get_NoQueryTimeout();
    internal void set_NoQueryTimeout(bool value);
    internal bool get_NoSqlSoptSSNoBrowseTable();
    internal void set_NoSqlSoptSSNoBrowseTable(bool value);
    internal bool get_NoSqlSoptSSHiddenColumns();
    internal void set_NoSqlSoptSSHiddenColumns(bool value);
    internal bool get_NoSqlCASSColumnKey();
    internal void set_NoSqlCASSColumnKey(bool value);
    internal bool get_NoSqlPrimaryKeys();
    internal void set_NoSqlPrimaryKeys(bool value);
}
internal class System.Data.Odbc.OdbcConnectionString : DbConnectionOptions {
    private string _expandedConnectionString;
    internal OdbcConnectionString(string connectionString, bool validate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Data.Odbc.OdbcConnectionStringBuilder : DbConnectionStringBuilder {
    private static String[] s_validKeywords;
    private static Dictionary`2<string, Keywords> s_keywords;
    private String[] _knownKeywords;
    private string _dsn;
    private string _driver;
    public object Item { get; public set; }
    [DisplayNameAttribute("Driver")]
public string Driver { get; public set; }
    [DisplayNameAttribute("Dsn")]
public string Dsn { get; public set; }
    public ICollection Keys { get; }
    [NullableContextAttribute("2")]
public OdbcConnectionStringBuilder(string connectionString);
    private static OdbcConnectionStringBuilder();
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public string get_Driver();
    public void set_Driver(string value);
    public string get_Dsn();
    public void set_Dsn(string value);
    public virtual ICollection get_Keys();
    public virtual void Clear();
    public virtual bool ContainsKey(string keyword);
    private static string ConvertToString(object value);
    private object GetAt(Keywords index);
    public virtual bool Remove(string keyword);
    private void Reset(Keywords index);
    private void SetValue(string keyword, string value);
    public virtual bool TryGetValue(string keyword, Object& value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DesignerAttribute("Microsoft.VSDesigner.Data.VS.OdbcDataAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemAttribute("Microsoft.VSDesigner.Data.VS.OdbcDataAdapterToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Data.Odbc.OdbcDataAdapter : DbDataAdapter {
    private static object s_eventRowUpdated;
    private static object s_eventRowUpdating;
    private OdbcCommand _deleteCommand;
    private OdbcCommand _insertCommand;
    private OdbcCommand _selectCommand;
    private OdbcCommand _updateCommand;
    [EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public OdbcCommand DeleteCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; private set; }
    [EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public OdbcCommand InsertCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; private set; }
    [EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public OdbcCommand SelectCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; private set; }
    [EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public OdbcCommand UpdateCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; private set; }
    public OdbcDataAdapter(OdbcCommand selectCommand);
    public OdbcDataAdapter(string selectCommandText, OdbcConnection selectConnection);
    public OdbcDataAdapter(string selectCommandText, string selectConnectionString);
    private OdbcDataAdapter(OdbcDataAdapter from);
    private static OdbcDataAdapter();
    public OdbcCommand get_DeleteCommand();
    public void set_DeleteCommand(OdbcCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value);
    public OdbcCommand get_InsertCommand();
    public void set_InsertCommand(OdbcCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_InsertCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value);
    public OdbcCommand get_SelectCommand();
    public void set_SelectCommand(OdbcCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_SelectCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value);
    public OdbcCommand get_UpdateCommand();
    public void set_UpdateCommand(OdbcCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value);
    public void add_RowUpdated(OdbcRowUpdatedEventHandler value);
    public void remove_RowUpdated(OdbcRowUpdatedEventHandler value);
    public void add_RowUpdating(OdbcRowUpdatingEventHandler value);
    public void remove_RowUpdating(OdbcRowUpdatingEventHandler value);
    private sealed virtual override object System.ICloneable.Clone();
    [NullableContextAttribute("1")]
protected virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    [NullableContextAttribute("1")]
protected virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    [NullableContextAttribute("1")]
protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    [NullableContextAttribute("1")]
protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Data.Odbc.OdbcDataReader : DbDataReader {
    private OdbcCommand _command;
    private int _recordAffected;
    private FieldNameLookup _fieldNameLookup;
    private DbCache _dataCache;
    private HasRowsStatus _hasRows;
    private bool _isClosed;
    private bool _isRead;
    private bool _isValidResult;
    private bool _noMoreResults;
    private bool _noMoreRows;
    private bool _skipReadOnce;
    private int _hiddenColumns;
    private CommandBehavior _commandBehavior;
    private int _row;
    private int _column;
    private long _sequentialBytesRead;
    private static int s_objectTypeCount;
    internal int ObjectID;
    private MetaData[] _metadata;
    private DataTable _schemaTable;
    private string _cmdText;
    private CMDWrapper _cmdWrapper;
    private CNativeBuffer Buffer { get; }
    [NullableAttribute("2")]
private OdbcConnection Connection { get; }
    [NullableAttribute("2")]
internal OdbcCommand Command { get; internal set; }
    private OdbcStatementHandle StatementHandle { get; }
    private OdbcStatementHandle KeyInfoStatementHandle { get; }
    internal bool IsCancelingCommand { get; }
    internal bool IsNonCancelingCommand { get; }
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public object Item { get; }
    public object Item { get; }
    internal OdbcDataReader(OdbcCommand command, CMDWrapper cmdWrapper, CommandBehavior commandbehavior);
    private CNativeBuffer get_Buffer();
    private OdbcConnection get_Connection();
    internal OdbcCommand get_Command();
    internal void set_Command(OdbcCommand value);
    private OdbcStatementHandle get_StatementHandle();
    private OdbcStatementHandle get_KeyInfoStatementHandle();
    internal bool IsBehavior(CommandBehavior behavior);
    internal bool get_IsCancelingCommand();
    internal bool get_IsNonCancelingCommand();
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    internal SQLRETURN FieldCountNoThrow(Int16& cColsAffected);
    public virtual bool get_IsClosed();
    private SQLLEN GetRowCount();
    internal int CalculateRecordsAffected(int cRowsAffected);
    public virtual int get_RecordsAffected();
    public virtual object get_Item(int i);
    public virtual object get_Item(string value);
    public virtual void Close();
    private void Close(bool disposing);
    protected virtual void Dispose(bool disposing);
    public virtual string GetDataTypeName(int i);
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetFieldType(int i);
    public virtual string GetName(int i);
    public virtual int GetOrdinal(string value);
    private int IndexOf(string value);
    private bool IsCommandBehavior(CommandBehavior condition);
    internal object GetValue(int i, TypeMap typemap);
    public virtual object GetValue(int i);
    public virtual int GetValues(Object[] values);
    private TypeMap GetSqlType(int i);
    public virtual bool IsDBNull(int i);
    public virtual byte GetByte(int i);
    private object internalGetByte(int i);
    public virtual char GetChar(int i);
    private object internalGetChar(int i);
    public virtual short GetInt16(int i);
    private object internalGetInt16(int i);
    public virtual int GetInt32(int i);
    private object internalGetInt32(int i);
    public virtual long GetInt64(int i);
    private object internalGetInt64(int i);
    public virtual bool GetBoolean(int i);
    private object internalGetBoolean(int i);
    public virtual float GetFloat(int i);
    private object internalGetFloat(int i);
    public DateTime GetDate(int i);
    private object internalGetDate(int i);
    public virtual DateTime GetDateTime(int i);
    private object internalGetDateTime(int i);
    public virtual decimal GetDecimal(int i);
    private object internalGetDecimal(int i);
    public virtual double GetDouble(int i);
    private object internalGetDouble(int i);
    public virtual Guid GetGuid(int i);
    private object internalGetGuid(int i);
    public virtual string GetString(int i);
    private object internalGetString(int i);
    public TimeSpan GetTime(int i);
    private object internalGetTime(int i);
    private void SetCurrentRowColumnInfo(int row, int column);
    [NullableContextAttribute("2")]
public virtual long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    [NullableContextAttribute("2")]
public virtual long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    private long GetBytesOrChars(int i, long dataIndex, Array buffer, bool isCharsBuffer, int bufferIndex, int length);
    private int readBytesOrCharsSequentialAccess(int i, Array buffer, bool isCharsBuffer, int bufferIndex, long bytesOrCharsLength);
    private object internalGetBytes(int i);
    private SQLLEN GetColAttribute(int iColumn, SQL_DESC v3FieldId, SQL_COLUMN v2FieldId, HANDLER handler);
    private string GetColAttributeStr(int i, SQL_DESC v3FieldId, SQL_COLUMN v2FieldId, HANDLER handler);
    private string GetDescFieldStr(int i, SQL_DESC attribute, HANDLER handler);
    private bool QueryFieldInfo(int i, SQL_C sqlctype, Int32& cbLengthOrIndicator);
    private bool GetData(int i, SQL_C sqlctype);
    private bool GetData(int i, SQL_C sqlctype, int cb, Int32& cbLengthOrIndicator);
    public virtual bool Read();
    internal void FirstResult();
    public virtual bool NextResult();
    private bool NextResult(bool disposing, bool allresults);
    private void BuildMetaDataInfo();
    private DataTable NewSchemaTable();
    [NullableContextAttribute("2")]
public virtual DataTable GetSchemaTable();
    internal int RetrieveKeyInfo(bool needkeyinfo, QualifiedTableName qualifiedTableName, bool quoted);
    private int RetrieveKeyInfoFromStatistics(QualifiedTableName qualifiedTableName, bool quoted);
    internal static bool SameIndexColumn(string currentindexname, string indexname, int ordinal, int ncols);
    internal int GetOrdinalFromBaseColName(string columnname);
    internal int GetOrdinalFromBaseColName(string columnname, string tablename);
    internal string GetTableNameFromCommandText();
    internal void SetBaseTableNames(QualifiedTableName qualifiedTableName);
}
internal class System.Data.Odbc.OdbcDescriptorHandle : OdbcHandle {
    internal OdbcDescriptorHandle(OdbcStatementHandle statementHandle, SQL_ATTR attribute);
    internal SQLRETURN GetDescriptionField(int i, SQL_DESC attribute, CNativeBuffer buffer, Int32& numericAttribute);
    internal SQLRETURN SetDescriptionField1(short ordinal, SQL_DESC type, IntPtr value);
    internal SQLRETURN SetDescriptionField2(short ordinal, SQL_DESC type, HandleRef value);
}
internal static class System.Data.Odbc.OdbcEnvironment : object {
    private static object s_globalEnvironmentHandle;
    private static object s_globalEnvironmentHandleLock;
    private static OdbcEnvironment();
    internal static OdbcEnvironmentHandle GetGlobalEnvironmentHandle();
    internal static void ReleaseObjectPool();
}
internal class System.Data.Odbc.OdbcEnvironmentHandle : OdbcHandle {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.Odbc.OdbcError : object {
    internal string _message;
    internal string _state;
    internal int _nativeerror;
    internal string _source;
    public string Message { get; }
    public string SQLState { get; }
    public int NativeError { get; }
    public string Source { get; }
    internal OdbcError(string source, string message, string state, int nativeerror);
    public string get_Message();
    public string get_SQLState();
    public int get_NativeError();
    public string get_Source();
    internal void SetSource(string Source);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.Odbc.OdbcErrorCollection : object {
    private ArrayList _items;
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    public int Count { get; }
    public OdbcError Item { get; }
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public sealed virtual int get_Count();
    public OdbcError get_Item(int i);
    internal void Add(OdbcError error);
    public sealed virtual void CopyTo(Array array, int i);
    public void CopyTo(OdbcError[] array, int i);
    public sealed virtual IEnumerator GetEnumerator();
    internal void SetSource(string Source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.Odbc.OdbcException : DbException {
    private OdbcErrorCollection _odbcErrors;
    public OdbcErrorCollection Errors { get; }
    public string Source { get; }
    internal OdbcException(string message, OdbcErrorCollection errors);
    private OdbcException(SerializationInfo si, StreamingContext sc);
    internal static OdbcException CreateException(OdbcErrorCollection errors, SQLRETURN retcode);
    public OdbcErrorCollection get_Errors();
    public virtual void GetObjectData(SerializationInfo si, StreamingContext context);
    public virtual string get_Source();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Data.Odbc.OdbcFactory : DbProviderFactory {
    public static OdbcFactory Instance;
    private static OdbcFactory();
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
}
internal abstract class System.Data.Odbc.OdbcHandle : SafeHandle {
    private SQL_HANDLE _handleType;
    private OdbcHandle _parentHandle;
    internal SQL_HANDLE HandleType { get; }
    public bool IsInvalid { get; }
    protected OdbcHandle(SQL_HANDLE handleType, OdbcHandle parentHandle);
    internal OdbcHandle(OdbcStatementHandle parentHandle, SQL_ATTR attribute);
    internal SQL_HANDLE get_HandleType();
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
    internal SQLRETURN GetDiagnosticField(String& sqlState);
    internal SQLRETURN GetDiagnosticRecord(short record, String& sqlState, StringBuilder messageBuilder, Int32& nativeError, Int16& cchActual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Data.Odbc.OdbcInfoMessageEventArgs : EventArgs {
    private OdbcErrorCollection _errors;
    public OdbcErrorCollection Errors { get; }
    public string Message { get; }
    internal OdbcInfoMessageEventArgs(OdbcErrorCollection errors);
    public OdbcErrorCollection get_Errors();
    public string get_Message();
    public virtual string ToString();
}
public class System.Data.Odbc.OdbcInfoMessageEventHandler : MulticastDelegate {
    public OdbcInfoMessageEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, OdbcInfoMessageEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OdbcInfoMessageEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Data.Odbc.OdbcMetaDataCollectionNames : object {
    public static string Columns;
    public static string Indexes;
    public static string Procedures;
    public static string ProcedureColumns;
    public static string ProcedureParameters;
    public static string Tables;
    public static string Views;
    private static OdbcMetaDataCollectionNames();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Data.Odbc.OdbcMetaDataColumnNames : object {
    public static string BooleanFalseLiteral;
    public static string BooleanTrueLiteral;
    public static string SQLType;
    private static OdbcMetaDataColumnNames();
}
internal class System.Data.Odbc.OdbcMetaDataFactory : DbMetaDataFactory {
    private static string _collectionName;
    private static string _populationMechanism;
    private static string _prepareCollection;
    private SchemaFunctionName[] _schemaMapping;
    internal static Char[] KeywordSeparatorChar;
    internal OdbcMetaDataFactory(Stream XMLStream, string serverVersion, string serverVersionNormalized, OdbcConnection connection);
    private static OdbcMetaDataFactory();
    private static object BooleanFromODBC(object odbcSource);
    private static OdbcCommand GetCommand(OdbcConnection connection);
    private static DataTable DataTableFromDataReader(IDataReader reader, string tableName);
    private static void DataTableFromDataReaderDataTypes(DataTable dataTypesTable, OdbcDataReader dataReader, OdbcConnection connection);
    private static DataTable DataTableFromDataReaderIndex(IDataReader reader, string tableName, string restrictionIndexName);
    private static DataTable DataTableFromDataReaderProcedureColumns(IDataReader reader, string tableName, bool isColumn);
    private static DataTable DataTableFromDataReaderProcedures(IDataReader reader, string tableName, short procedureType);
    private static void FillOutRestrictions(int restrictionsCount, String[] restrictions, Object[] allRestrictions, string collectionName);
    private static DataTable GetColumnsCollection(String[] restrictions, OdbcConnection connection);
    private DataTable GetDataSourceInformationCollection(String[] restrictions, OdbcConnection connection);
    private DataTable GetDataTypesCollection(String[] restrictions, OdbcConnection connection);
    private static DataTable GetIndexCollection(String[] restrictions, OdbcConnection connection);
    private static DataTable GetProcedureColumnsCollection(String[] restrictions, OdbcConnection connection, bool isColumns);
    private static DataTable GetProceduresCollection(String[] restrictions, OdbcConnection connection);
    private DataTable GetReservedWordsCollection(String[] restrictions, OdbcConnection connection);
    private static DataTable GetTablesCollection(String[] restrictions, OdbcConnection connection, bool isTables);
    private static bool IncludeIndexRow(object rowIndexName, string restrictionIndexName, short rowIndexType);
    private static DataTable NewDataTableFromReader(IDataReader reader, Object[]& values, string tableName);
    protected virtual DataTable PrepareCollection(string collectionName, String[] restrictions, DbConnection connection);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Data.Odbc.OdbcParameter : DbParameter {
    private bool _hasChanged;
    private bool _userSpecifiedType;
    private TypeMap _typemap;
    private TypeMap _bindtype;
    private string _parameterName;
    private byte _precision;
    private byte _scale;
    private bool _hasScale;
    private SQL_C _boundSqlCType;
    private SQL_TYPE _boundParameterType;
    private int _boundSize;
    private int _boundScale;
    private IntPtr _boundBuffer;
    private IntPtr _boundIntbuffer;
    private TypeMap _originalbindtype;
    private byte _internalPrecision;
    private bool _internalShouldSerializeSize;
    private int _internalSize;
    private ParameterDirection _internalDirection;
    private byte _internalScale;
    private int _internalOffset;
    internal bool _internalUserSpecifiedType;
    private object _internalValue;
    private int _preparedOffset;
    private int _preparedSize;
    private int _preparedBufferSize;
    private object _preparedValue;
    private int _preparedIntOffset;
    private int _preparedValueOffset;
    private SQL_C _prepared_Sql_C_Type;
    private object _value;
    private object _parent;
    private ParameterDirection _direction;
    private int _size;
    private int _offset;
    private string _sourceColumn;
    private DataRowVersion _sourceVersion;
    private bool _sourceColumnNullMapping;
    private bool _isNullable;
    private object _coercedValue;
    public DbType DbType { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DbProviderSpecificTypePropertyAttribute("True")]
public OdbcType OdbcType { get; public set; }
    unknown bool HasChanged {internal set; }
    internal bool UserSpecifiedType { get; }
    [NullableAttribute("1")]
public string ParameterName { get; public set; }
    public byte Precision { get; public set; }
    internal byte PrecisionInternal { get; internal set; }
    public byte Scale { get; public set; }
    internal byte ScaleInternal { get; internal set; }
    public object Value { get; public set; }
    private object CoercedValue { get; private set; }
    public ParameterDirection Direction { get; public set; }
    public bool IsNullable { get; public set; }
    public int Offset { get; public set; }
    public int Size { get; public set; }
    [NullableAttribute("1")]
public string SourceColumn { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    public DataRowVersion SourceVersion { get; public set; }
    public OdbcParameter(string name, object value);
    public OdbcParameter(string name, OdbcType type);
    public OdbcParameter(string name, OdbcType type, int size);
    public OdbcParameter(string name, OdbcType type, int size, string sourcecolumn);
    [EditorBrowsableAttribute("2")]
public OdbcParameter(string parameterName, OdbcType odbcType, int size, ParameterDirection parameterDirection, bool isNullable, byte precision, byte scale, string srcColumn, DataRowVersion srcVersion, object value);
    [EditorBrowsableAttribute("2")]
public OdbcParameter(string parameterName, OdbcType odbcType, int size, ParameterDirection parameterDirection, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, bool sourceColumnNullMapping, object value);
    private OdbcParameter(OdbcParameter source);
    public virtual DbType get_DbType();
    public virtual void set_DbType(DbType value);
    public virtual void ResetDbType();
    public OdbcType get_OdbcType();
    public void set_OdbcType(OdbcType value);
    public void ResetOdbcType();
    internal void set_HasChanged(bool value);
    internal bool get_UserSpecifiedType();
    [NullableContextAttribute("1")]
public virtual string get_ParameterName();
    [NullableContextAttribute("1")]
public virtual void set_ParameterName(string value);
    public sealed virtual byte get_Precision();
    public sealed virtual void set_Precision(byte value);
    internal byte get_PrecisionInternal();
    internal void set_PrecisionInternal(byte value);
    private bool ShouldSerializePrecision();
    public sealed virtual byte get_Scale();
    public sealed virtual void set_Scale(byte value);
    internal byte get_ScaleInternal();
    internal void set_ScaleInternal(byte value);
    private bool ShouldSerializeScale();
    private bool ShouldSerializeScale(byte scale);
    private int GetColumnSize(object value, int offset, int ordinal);
    private int GetValueSize(object value, int offset);
    private int GetParameterSize(object value, int offset, int ordinal);
    private byte GetParameterPrecision(object value);
    private byte GetParameterScale(object value);
    private sealed virtual override object System.ICloneable.Clone();
    private void CopyParameterInternal();
    private void CloneHelper(OdbcParameter destination);
    internal void ClearBinding();
    internal void PrepareForBind(OdbcCommand command, short ordinal, Int32& parameterBufferSize);
    internal void Bind(OdbcStatementHandle hstmt, OdbcCommand command, short ordinal, CNativeBuffer parameterBuffer, bool allowReentrance);
    internal void GetOutputValue(CNativeBuffer parameterBuffer);
    private object ProcessAndGetParameterValue();
    private void PropertyChanging();
    private void PropertyTypeChanging();
    internal void SetInputValue(object value, SQL_C sql_c_type, int cbsize, int sizeorprecision, int offset, CNativeBuffer parameterBuffer);
    private SQL_PARAM SqlDirectionFromParameterDirection();
    public virtual object get_Value();
    public virtual void set_Value(object value);
    private static byte ValuePrecision(object value);
    private static byte ValueScale(object value);
    private static int ValueSize(object value);
    private object get_CoercedValue();
    private void set_CoercedValue(object value);
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    public virtual bool get_IsNullable();
    public virtual void set_IsNullable(bool value);
    public int get_Offset();
    public void set_Offset(int value);
    public virtual int get_Size();
    public virtual void set_Size(int value);
    private bool ShouldSerializeSize();
    [NullableContextAttribute("1")]
public virtual string get_SourceColumn();
    [NullableContextAttribute("1")]
public virtual void set_SourceColumn(string value);
    public virtual bool get_SourceColumnNullMapping();
    public virtual void set_SourceColumnNullMapping(bool value);
    public virtual DataRowVersion get_SourceVersion();
    public virtual void set_SourceVersion(DataRowVersion value);
    private void CloneHelperCore(OdbcParameter destination);
    internal object CompareExchangeParent(object value, object comparand);
    internal void ResetParent();
    [NullableContextAttribute("1")]
public virtual string ToString();
    private static byte ValuePrecisionCore(object value);
    private static byte ValueScaleCore(object value);
    private static int ValueSizeCore(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBParametersEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Data.Odbc.OdbcParameterCollection : DbParameterCollection {
    private bool _rebindCollection;
    private static Type s_itemType;
    private List`1<OdbcParameter> _items;
    internal bool RebindCollection { get; internal set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public OdbcParameter Item { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public OdbcParameter Item { get; public set; }
    public int Count { get; }
    private List`1<OdbcParameter> InnerList { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    private static OdbcParameterCollection();
    internal bool get_RebindCollection();
    internal void set_RebindCollection(bool value);
    public OdbcParameter get_Item(int index);
    public void set_Item(int index, OdbcParameter value);
    public OdbcParameter get_Item(string parameterName);
    public void set_Item(string parameterName, OdbcParameter value);
    public OdbcParameter Add(OdbcParameter value);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Add(String parameterName, Object value) has been deprecated. Use AddWithValue(String parameterName, Object value) instead.")]
public OdbcParameter Add(string parameterName, object value);
    [NullableContextAttribute("2")]
public OdbcParameter AddWithValue(string parameterName, object value);
    public OdbcParameter Add(string parameterName, OdbcType odbcType);
    public OdbcParameter Add(string parameterName, OdbcType odbcType, int size);
    [NullableContextAttribute("2")]
public OdbcParameter Add(string parameterName, OdbcType odbcType, int size, string sourceColumn);
    public void AddRange(OdbcParameter[] values);
    internal void Bind(OdbcCommand command, CMDWrapper cmdWrapper, CNativeBuffer parameterBuffer);
    internal int CalcParameterBufferSize(OdbcCommand command);
    internal void ClearBindings();
    public virtual bool Contains(string value);
    public bool Contains(OdbcParameter value);
    public void CopyTo(OdbcParameter[] array, int index);
    private void OnChange();
    internal void GetOutputValues(CMDWrapper cmdWrapper);
    public int IndexOf(OdbcParameter value);
    public void Insert(int index, OdbcParameter value);
    public void Remove(OdbcParameter value);
    public virtual int get_Count();
    private List`1<OdbcParameter> get_InnerList();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual int Add(object value);
    public virtual void AddRange(Array values);
    private int CheckName(string parameterName);
    public virtual void Clear();
    public virtual bool Contains(object value);
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    protected virtual DbParameter GetParameter(int index);
    protected virtual DbParameter GetParameter(string parameterName);
    private static int IndexOf(List`1<OdbcParameter> items, string parameterName);
    public virtual int IndexOf(string parameterName);
    public virtual int IndexOf(object value);
    public virtual void Insert(int index, object value);
    private void RangeCheck(int index);
    public virtual void Remove(object value);
    public virtual void RemoveAt(int index);
    public virtual void RemoveAt(string parameterName);
    private void RemoveIndex(int index);
    private void Replace(int index, object newValue);
    protected virtual void SetParameter(int index, DbParameter value);
    protected virtual void SetParameter(string parameterName, DbParameter value);
    private void Validate(int index, object value);
    private void ValidateType(object value);
}
internal class System.Data.Odbc.OdbcReferenceCollection : DbReferenceCollection {
    internal static int Closing;
    internal static int Recover;
    internal static int CommandTag;
    public virtual void Add(object value, int tag);
    protected virtual void NotifyItem(int message, int tag, object value);
    public virtual void Remove(object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Data.Odbc.OdbcRowUpdatedEventArgs : RowUpdatedEventArgs {
    public OdbcCommand Command { get; }
    [NullableContextAttribute("1")]
public OdbcRowUpdatedEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public OdbcCommand get_Command();
}
public class System.Data.Odbc.OdbcRowUpdatedEventHandler : MulticastDelegate {
    public OdbcRowUpdatedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, OdbcRowUpdatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OdbcRowUpdatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Data.Odbc.OdbcRowUpdatingEventArgs : RowUpdatingEventArgs {
    public OdbcCommand Command { get; public set; }
    protected IDbCommand BaseCommand { get; protected set; }
    [NullableContextAttribute("1")]
public OdbcRowUpdatingEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public OdbcCommand get_Command();
    public void set_Command(OdbcCommand value);
    protected virtual IDbCommand get_BaseCommand();
    protected virtual void set_BaseCommand(IDbCommand value);
}
public class System.Data.Odbc.OdbcRowUpdatingEventHandler : MulticastDelegate {
    public OdbcRowUpdatingEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, OdbcRowUpdatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OdbcRowUpdatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Data.Odbc.OdbcStatementHandle : OdbcHandle {
    internal OdbcStatementHandle(OdbcConnectionHandle connectionHandle);
    internal SQLRETURN BindColumn2(int columnNumber, SQL_C targetType, HandleRef buffer, IntPtr length, IntPtr srLen_or_Ind);
    internal SQLRETURN BindColumn3(int columnNumber, SQL_C targetType, IntPtr srLen_or_Ind);
    internal SQLRETURN BindParameter(short ordinal, short parameterDirection, SQL_C sqlctype, SQL_TYPE sqltype, IntPtr cchSize, IntPtr scale, HandleRef buffer, IntPtr bufferLength, HandleRef intbuffer);
    internal SQLRETURN Cancel();
    internal SQLRETURN CloseCursor();
    internal SQLRETURN ColumnAttribute(int columnNumber, short fieldIdentifier, CNativeBuffer characterAttribute, Int16& stringLength, SQLLEN& numericAttribute);
    internal SQLRETURN Columns(string tableCatalog, string tableSchema, string tableName, string columnName);
    internal SQLRETURN Execute();
    internal SQLRETURN ExecuteDirect(string commandText);
    internal SQLRETURN Fetch();
    internal SQLRETURN FreeStatement(STMT stmt);
    internal SQLRETURN GetData(int index, SQL_C sqlctype, CNativeBuffer buffer, int cb, IntPtr& cbActual);
    internal SQLRETURN GetStatementAttribute(SQL_ATTR attribute, IntPtr& value, Int32& stringLength);
    internal SQLRETURN GetTypeInfo(short fSqlType);
    internal SQLRETURN MoreResults();
    internal SQLRETURN NumberOfResultColumns(Int16& columnsAffected);
    internal SQLRETURN Prepare(string commandText);
    internal SQLRETURN PrimaryKeys(string catalogName, string schemaName, string tableName);
    internal SQLRETURN Procedures(string procedureCatalog, string procedureSchema, string procedureName);
    internal SQLRETURN ProcedureColumns(string procedureCatalog, string procedureSchema, string procedureName, string columnName);
    internal SQLRETURN RowCount(SQLLEN& rowCount);
    internal SQLRETURN SetStatementAttribute(SQL_ATTR attribute, IntPtr value, SQL_IS stringLength);
    internal SQLRETURN SpecialColumns(string quotedTable);
    internal SQLRETURN Statistics(string tableCatalog, string tableSchema, string tableName, short unique, short accuracy);
    internal SQLRETURN Statistics(string tableName);
    internal SQLRETURN Tables(string tableCatalog, string tableSchema, string tableName, string tableType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Data.Odbc.OdbcTransaction : DbTransaction {
    private OdbcConnection _connection;
    private IsolationLevel _isolevel;
    private OdbcConnectionHandle _handle;
    public OdbcConnection Connection { get; }
    protected DbConnection DbConnection { get; }
    public IsolationLevel IsolationLevel { get; }
    internal OdbcTransaction(OdbcConnection connection, IsolationLevel isolevel, OdbcConnectionHandle handle);
    public OdbcConnection get_Connection();
    protected virtual DbConnection get_DbConnection();
    public virtual IsolationLevel get_IsolationLevel();
    public virtual void Commit();
    protected virtual void Dispose(bool disposing);
    public virtual void Rollback();
}
public enum System.Data.Odbc.OdbcType : Enum {
    public int value__;
    public static OdbcType BigInt;
    public static OdbcType Binary;
    public static OdbcType Bit;
    public static OdbcType Char;
    public static OdbcType DateTime;
    public static OdbcType Decimal;
    public static OdbcType Numeric;
    public static OdbcType Double;
    public static OdbcType Image;
    public static OdbcType Int;
    public static OdbcType NChar;
    public static OdbcType NText;
    public static OdbcType NVarChar;
    public static OdbcType Real;
    public static OdbcType UniqueIdentifier;
    public static OdbcType SmallDateTime;
    public static OdbcType SmallInt;
    public static OdbcType Text;
    public static OdbcType Timestamp;
    public static OdbcType TinyInt;
    public static OdbcType VarBinary;
    public static OdbcType VarChar;
    public static OdbcType Date;
    public static OdbcType Time;
}
[IsReadOnlyAttribute]
internal class System.Data.Odbc.SQLLEN : ValueType {
    private IntPtr _value;
    internal SQLLEN(int value);
    internal SQLLEN(long value);
    internal SQLLEN(IntPtr value);
    public static SQLLEN op_Implicit(int value);
    public static SQLLEN op_Explicit(long value);
    public static int op_Implicit(SQLLEN value);
    public static long op_Explicit(SQLLEN value);
    public long ToInt64();
}
internal class System.Data.Odbc.TypeMap : object {
    private static TypeMap s_bigInt;
    private static TypeMap s_binary;
    private static TypeMap s_bit;
    internal static TypeMap _Char;
    private static TypeMap s_dateTime;
    private static TypeMap s_date;
    private static TypeMap s_time;
    private static TypeMap s_decimal;
    private static TypeMap s_double;
    internal static TypeMap _Image;
    private static TypeMap s_int;
    private static TypeMap s_NChar;
    internal static TypeMap _NText;
    private static TypeMap s_numeric;
    internal static TypeMap _NVarChar;
    private static TypeMap s_real;
    private static TypeMap s_uniqueId;
    private static TypeMap s_smallDT;
    private static TypeMap s_smallInt;
    internal static TypeMap _Text;
    private static TypeMap s_timestamp;
    private static TypeMap s_tinyInt;
    private static TypeMap s_varBinary;
    internal static TypeMap _VarChar;
    private static TypeMap s_variant;
    private static TypeMap s_UDT;
    private static TypeMap s_XML;
    internal OdbcType _odbcType;
    internal DbType _dbType;
    internal Type _type;
    internal SQL_TYPE _sql_type;
    internal SQL_C _sql_c;
    internal SQL_C _param_sql_c;
    internal int _bufferSize;
    internal int _columnSize;
    internal bool _signType;
    private TypeMap(OdbcType odbcType, DbType dbType, Type type, SQL_TYPE sql_type, SQL_C sql_c, SQL_C param_sql_c, int bsize, int csize, bool signType);
    private static TypeMap();
    internal static TypeMap FromOdbcType(OdbcType odbcType);
    internal static TypeMap FromDbType(DbType dbType);
    internal static TypeMap FromSystemType(Type dataType);
    internal static TypeMap FromSqlType(SQL_TYPE sqltype);
    internal static TypeMap UpgradeSignedType(TypeMap typeMap, bool unsigned);
}
internal class System.Data.ProviderBase.BasicFieldNameLookup : object {
    private Dictionary`2<string, int> _fieldNameLookup;
    private String[] _fieldNames;
    private CompareInfo _compareInfo;
    public BasicFieldNameLookup(String[] fieldNames);
    public BasicFieldNameLookup(ReadOnlyCollection`1<string> columnNames);
    public BasicFieldNameLookup(IDataReader reader);
    public int GetOrdinal(string fieldName);
    public int IndexOfName(string fieldName);
    public int IndexOf(string fieldName);
    protected virtual CompareInfo GetCompareInfo();
    private int LinearIndexOf(string fieldName, CompareOptions compareOptions);
    private void GenerateLookup();
}
internal abstract class System.Data.ProviderBase.DbBuffer : SafeHandle {
    private int _bufferLength;
    private static int BaseOffset { get; }
    public bool IsInvalid { get; }
    internal int Length { get; }
    protected DbBuffer(int initialSize);
    protected DbBuffer(IntPtr invalidHandleValue, bool ownsHandle);
    private static int get_BaseOffset();
    public virtual bool get_IsInvalid();
    internal int get_Length();
    internal string PtrToStringUni(int offset);
    internal string PtrToStringUni(int offset, int length);
    internal byte ReadByte(int offset);
    internal Byte[] ReadBytes(int offset, int length);
    internal Byte[] ReadBytes(int offset, Byte[] destination, int startIndex, int length);
    internal char ReadChar(int offset);
    internal Char[] ReadChars(int offset, Char[] destination, int startIndex, int length);
    internal double ReadDouble(int offset);
    internal short ReadInt16(int offset);
    internal void ReadInt16Array(int offset, Int16[] destination, int startIndex, int length);
    internal int ReadInt32(int offset);
    internal void ReadInt32Array(int offset, Int32[] destination, int startIndex, int length);
    internal long ReadInt64(int offset);
    internal IntPtr ReadIntPtr(int offset);
    internal float ReadSingle(int offset);
    protected virtual bool ReleaseHandle();
    private void StructureToPtr(int offset, object structure);
    internal void WriteByte(int offset, byte value);
    internal void WriteBytes(int offset, Byte[] source, int startIndex, int length);
    internal void WriteCharArray(int offset, Char[] source, int startIndex, int length);
    internal void WriteDouble(int offset, double value);
    internal void WriteInt16(int offset, short value);
    internal void WriteInt16Array(int offset, Int16[] source, int startIndex, int length);
    internal void WriteInt32(int offset, int value);
    internal void WriteInt32Array(int offset, Int32[] source, int startIndex, int length);
    internal void WriteInt64(int offset, long value);
    internal void WriteIntPtr(int offset, IntPtr value);
    internal void WriteSingle(int offset, float value);
    internal void ZeroMemory();
    internal Guid ReadGuid(int offset);
    internal void WriteGuid(int offset, Guid value);
    internal DateTime ReadDate(int offset);
    internal void WriteDate(int offset, DateTime value);
    internal TimeSpan ReadTime(int offset);
    internal void WriteTime(int offset, TimeSpan value);
    internal DateTime ReadDateTime(int offset);
    internal void WriteDateTime(int offset, DateTime value);
    internal decimal ReadNumeric(int offset);
    internal void WriteNumeric(int offset, decimal value, byte precision);
    [ConditionalAttribute("DEBUG")]
protected void ValidateCheck(int offset, int count);
    protected void Validate(int offset, int count);
}
internal abstract class System.Data.ProviderBase.DbConnectionBusy : DbConnectionClosed {
    protected DbConnectionBusy(ConnectionState state);
    internal virtual bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
}
internal abstract class System.Data.ProviderBase.DbConnectionClosed : DbConnectionInternal {
    public string ServerVersion { get; }
    protected DbConnectionClosed(ConnectionState state, bool hidePassword, bool allowSetConnectionString);
    public virtual string get_ServerVersion();
    public virtual DbTransaction BeginTransaction(IsolationLevel il);
    public virtual void ChangeDatabase(string database);
    internal virtual void CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory);
    protected virtual void Deactivate();
    protected internal virtual DataTable GetSchema(DbConnectionFactory factory, DbConnectionPoolGroup poolGroup, DbConnection outerConnection, string collectionName, String[] restrictions);
    protected virtual DbReferenceCollection CreateReferenceCollection();
    internal virtual bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    protected virtual void Activate();
}
internal class System.Data.ProviderBase.DbConnectionClosedBusy : DbConnectionBusy {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionClosedBusy();
}
internal class System.Data.ProviderBase.DbConnectionClosedConnecting : DbConnectionBusy {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionClosedConnecting();
    internal virtual void CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory);
    internal virtual bool TryReplaceConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    internal virtual bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
}
internal class System.Data.ProviderBase.DbConnectionClosedNeverOpened : DbConnectionClosed {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionClosedNeverOpened();
}
internal class System.Data.ProviderBase.DbConnectionClosedPreviouslyOpened : DbConnectionClosed {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionClosedPreviouslyOpened();
    internal virtual bool TryReplaceConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
}
internal abstract class System.Data.ProviderBase.DbConnectionFactory : object {
    private Dictionary`2<DbConnectionPoolKey, DbConnectionPoolGroup> _connectionPoolGroups;
    private List`1<DbConnectionPool> _poolsToRelease;
    private List`1<DbConnectionPoolGroup> _poolGroupsToRelease;
    private Timer _pruningTimer;
    private static int PruningDueTime;
    private static int PruningPeriod;
    private static UInt32 s_pendingOpenNonPooledNext;
    private static Task`1[] s_pendingOpenNonPooled;
    private static Task`1<DbConnectionInternal> s_completedTask;
    public DbProviderFactory ProviderFactory { get; }
    private static DbConnectionFactory();
    public abstract virtual DbProviderFactory get_ProviderFactory();
    public void ClearAllPools();
    public void ClearPool(DbConnection connection);
    public void ClearPool(DbConnectionPoolKey key);
    internal virtual DbConnectionPoolProviderInfo CreateConnectionPoolProviderInfo(DbConnectionOptions connectionOptions);
    internal DbConnectionInternal CreateNonPooledConnection(DbConnection owningConnection, DbConnectionPoolGroup poolGroup, DbConnectionOptions userOptions);
    internal DbConnectionInternal CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions);
    internal virtual DbConnectionPoolGroupProviderInfo CreateConnectionPoolGroupProviderInfo(DbConnectionOptions connectionOptions);
    private Timer CreatePruningTimer();
    protected DbConnectionOptions FindConnectionOptions(DbConnectionPoolKey key);
    private static Task`1<DbConnectionInternal> GetCompletedTask();
    private DbConnectionPool GetConnectionPool(DbConnection owningObject, DbConnectionPoolGroup connectionPoolGroup);
    internal DbConnectionPoolGroup GetConnectionPoolGroup(DbConnectionPoolKey key, DbConnectionPoolGroupOptions poolOptions, DbConnectionOptions& userConnectionOptions);
    private void PruneConnectionPoolGroups(object state);
    internal void QueuePoolForRelease(DbConnectionPool pool, bool clearing);
    internal void QueuePoolGroupForRelease(DbConnectionPoolGroup poolGroup);
    protected virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions);
    internal DbMetaDataFactory GetMetaDataFactory(DbConnectionPoolGroup connectionPoolGroup, DbConnectionInternal internalConnection);
    protected abstract virtual DbMetaDataFactory CreateMetaDataFactory(DbConnectionInternal internalConnection);
    protected abstract virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection);
    protected abstract virtual DbConnectionOptions CreateConnectionOptions(string connectionString, DbConnectionOptions previous);
    protected abstract virtual DbConnectionPoolGroupOptions CreateConnectionPoolGroupOptions(DbConnectionOptions options);
    internal abstract virtual DbConnectionPoolGroup GetConnectionPoolGroup(DbConnection connection);
    internal abstract virtual DbConnectionInternal GetInnerConnection(DbConnection connection);
    internal abstract virtual void PermissionDemand(DbConnection outerConnection);
    internal abstract virtual void SetConnectionPoolGroup(DbConnection outerConnection, DbConnectionPoolGroup poolGroup);
    internal abstract virtual void SetInnerConnectionEvent(DbConnection owningObject, DbConnectionInternal to);
    internal abstract virtual bool SetInnerConnectionFrom(DbConnection owningObject, DbConnectionInternal to, DbConnectionInternal from);
    internal abstract virtual void SetInnerConnectionTo(DbConnection owningObject, DbConnectionInternal to);
    internal bool TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection);
}
internal abstract class System.Data.ProviderBase.DbConnectionInternal : object {
    internal static StateChangeEventArgs StateChangeClosed;
    internal static StateChangeEventArgs StateChangeOpen;
    private bool _allowSetConnectionString;
    private bool _hidePassword;
    private ConnectionState _state;
    private WeakReference _owningObject;
    private DbConnectionPool _connectionPool;
    private DbReferenceCollection _referenceCollection;
    private int _pooledCount;
    private bool _connectionIsDoomed;
    private bool _cannotBePooled;
    private DateTime _createTime;
    internal bool AllowSetConnectionString { get; }
    internal bool CanBePooled { get; }
    protected internal bool IsConnectionDoomed { get; }
    internal bool IsEmancipated { get; }
    internal bool IsInPool { get; }
    protected internal object Owner { get; }
    internal DbConnectionPool Pool { get; }
    protected internal DbReferenceCollection ReferenceCollection { get; }
    public string ServerVersion { get; }
    public string ServerVersionNormalized { get; }
    public bool ShouldHidePassword { get; }
    public ConnectionState State { get; }
    internal DbConnectionInternal(ConnectionState state, bool hidePassword, bool allowSetConnectionString);
    private static DbConnectionInternal();
    internal bool get_AllowSetConnectionString();
    internal bool get_CanBePooled();
    protected internal bool get_IsConnectionDoomed();
    internal bool get_IsEmancipated();
    internal bool get_IsInPool();
    protected internal object get_Owner();
    internal DbConnectionPool get_Pool();
    protected internal DbReferenceCollection get_ReferenceCollection();
    public abstract virtual string get_ServerVersion();
    public virtual string get_ServerVersionNormalized();
    public bool get_ShouldHidePassword();
    public ConnectionState get_State();
    internal void AddWeakReference(object value, int tag);
    public abstract virtual DbTransaction BeginTransaction(IsolationLevel il);
    public virtual void ChangeDatabase(string value);
    internal virtual void PrepareForReplaceConnection();
    protected virtual void PrepareForCloseConnection();
    protected virtual object ObtainAdditionalLocksForClose();
    protected virtual void ReleaseAdditionalLocksForClose(object lockToken);
    protected virtual DbReferenceCollection CreateReferenceCollection();
    protected abstract virtual void Deactivate();
    internal void DeactivateConnection();
    protected internal void DoNotPoolThisConnection();
    protected internal void DoomThisConnection();
    protected internal virtual DataTable GetSchema(DbConnectionFactory factory, DbConnectionPoolGroup poolGroup, DbConnection outerConnection, string collectionName, String[] restrictions);
    internal void MakeNonPooledObject(object owningObject);
    internal void MakePooledConnection(DbConnectionPool connectionPool);
    internal void NotifyWeakReference(int message);
    internal virtual void OpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory);
    internal virtual bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    internal virtual bool TryReplaceConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    protected bool TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    internal void PrePush(object expectedOwner);
    internal void PostPop(object newOwner);
    internal void RemoveWeakReference(object value);
    internal virtual bool IsConnectionAlive(bool throwOnException);
    protected abstract virtual void Activate();
    internal void ActivateConnection();
    internal virtual void CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory);
    public virtual void Dispose();
}
internal class System.Data.ProviderBase.DbConnectionOpenBusy : DbConnectionBusy {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionOpenBusy();
}
internal class System.Data.ProviderBase.DbConnectionPool : object {
    private static int MAX_Q_SIZE;
    private static int SEMAPHORE_HANDLE;
    private static int ERROR_HANDLE;
    private static int CREATION_HANDLE;
    private static int BOGUS_HANDLE;
    private static int ERROR_WAIT_DEFAULT;
    private static Random s_random;
    private int _cleanupWait;
    private DbConnectionPoolIdentity _identity;
    private DbConnectionFactory _connectionFactory;
    private DbConnectionPoolGroup _connectionPoolGroup;
    private DbConnectionPoolGroupOptions _connectionPoolGroupOptions;
    private DbConnectionPoolProviderInfo _connectionPoolProviderInfo;
    private State _state;
    private ConcurrentStack`1<DbConnectionInternal> _stackOld;
    private ConcurrentStack`1<DbConnectionInternal> _stackNew;
    private ConcurrentQueue`1<PendingGetConnection> _pendingOpens;
    private int _pendingOpensWaiting;
    private WaitCallback _poolCreateRequest;
    private int _waitCount;
    private PoolWaitHandles _waitHandles;
    private Exception _resError;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _errorOccurred;
    private int _errorWait;
    private Timer _errorTimer;
    private Timer _cleanupTimer;
    private List`1<DbConnectionInternal> _objectList;
    private int _totalObjects;
    private int CreationTimeout { get; }
    internal int Count { get; }
    internal DbConnectionFactory ConnectionFactory { get; }
    internal bool ErrorOccurred { get; }
    internal TimeSpan LoadBalanceTimeout { get; }
    private bool NeedToReplenish { get; }
    internal DbConnectionPoolIdentity Identity { get; }
    internal bool IsRunning { get; }
    private int MaxPoolSize { get; }
    private int MinPoolSize { get; }
    internal DbConnectionPoolGroup PoolGroup { get; }
    internal DbConnectionPoolGroupOptions PoolGroupOptions { get; }
    internal DbConnectionPoolProviderInfo ProviderInfo { get; }
    internal bool UseLoadBalancing { get; }
    private bool UsingIntegrateSecurity { get; }
    internal DbConnectionPool(DbConnectionFactory connectionFactory, DbConnectionPoolGroup connectionPoolGroup, DbConnectionPoolIdentity identity, DbConnectionPoolProviderInfo connectionPoolProviderInfo);
    private static DbConnectionPool();
    private int get_CreationTimeout();
    internal int get_Count();
    internal DbConnectionFactory get_ConnectionFactory();
    internal bool get_ErrorOccurred();
    internal TimeSpan get_LoadBalanceTimeout();
    private bool get_NeedToReplenish();
    internal DbConnectionPoolIdentity get_Identity();
    internal bool get_IsRunning();
    private int get_MaxPoolSize();
    private int get_MinPoolSize();
    internal DbConnectionPoolGroup get_PoolGroup();
    internal DbConnectionPoolGroupOptions get_PoolGroupOptions();
    internal DbConnectionPoolProviderInfo get_ProviderInfo();
    internal bool get_UseLoadBalancing();
    private bool get_UsingIntegrateSecurity();
    private void CleanupCallback(object state);
    internal void Clear();
    private Timer CreateCleanupTimer();
    private DbConnectionInternal CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection);
    private void DeactivateObject(DbConnectionInternal obj);
    internal void DestroyObject(DbConnectionInternal obj);
    private void ErrorCallback(object state);
    private Exception TryCloneCachedException();
    private void WaitForPendingOpen();
    internal bool TryGetConnection(DbConnection owningObject, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions, DbConnectionInternal& connection);
    private bool TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, bool allowCreate, bool onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection);
    private void PrepareConnection(DbConnection owningObject, DbConnectionInternal obj);
    internal DbConnectionInternal ReplaceConnection(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection);
    private DbConnectionInternal GetFromGeneralPool();
    private void PoolCreateRequest(object state);
    internal void PutNewObject(DbConnectionInternal obj);
    internal void PutObject(DbConnectionInternal obj, object owningObject);
    private void QueuePoolCreateRequest();
    private bool ReclaimEmancipatedObjects();
    internal void Startup();
    internal void Shutdown();
    private DbConnectionInternal UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection);
}
internal class System.Data.ProviderBase.DbConnectionPoolGroup : object {
    private DbConnectionOptions _connectionOptions;
    private DbConnectionPoolKey _poolKey;
    private DbConnectionPoolGroupOptions _poolGroupOptions;
    private ConcurrentDictionary`2<DbConnectionPoolIdentity, DbConnectionPool> _poolCollection;
    private int _state;
    private DbConnectionPoolGroupProviderInfo _providerInfo;
    private DbMetaDataFactory _metaDataFactory;
    private static int PoolGroupStateActive;
    private static int PoolGroupStateIdle;
    private static int PoolGroupStateDisabled;
    internal DbConnectionOptions ConnectionOptions { get; }
    internal DbConnectionPoolKey PoolKey { get; }
    internal DbConnectionPoolGroupProviderInfo ProviderInfo { get; internal set; }
    internal bool IsDisabled { get; }
    internal DbConnectionPoolGroupOptions PoolGroupOptions { get; }
    internal DbMetaDataFactory MetaDataFactory { get; internal set; }
    internal DbConnectionPoolGroup(DbConnectionOptions connectionOptions, DbConnectionPoolKey key, DbConnectionPoolGroupOptions poolGroupOptions);
    internal DbConnectionOptions get_ConnectionOptions();
    internal DbConnectionPoolKey get_PoolKey();
    internal DbConnectionPoolGroupProviderInfo get_ProviderInfo();
    internal void set_ProviderInfo(DbConnectionPoolGroupProviderInfo value);
    internal bool get_IsDisabled();
    internal DbConnectionPoolGroupOptions get_PoolGroupOptions();
    internal DbMetaDataFactory get_MetaDataFactory();
    internal void set_MetaDataFactory(DbMetaDataFactory value);
    internal int Clear();
    internal DbConnectionPool GetConnectionPool(DbConnectionFactory connectionFactory);
    private bool MarkPoolGroupAsActive();
    internal bool Prune();
}
internal class System.Data.ProviderBase.DbConnectionPoolGroupOptions : object {
    private bool _poolByIdentity;
    private int _minPoolSize;
    private int _maxPoolSize;
    private int _creationTimeout;
    private TimeSpan _loadBalanceTimeout;
    private bool _useLoadBalancing;
    public int CreationTimeout { get; }
    public TimeSpan LoadBalanceTimeout { get; }
    public int MaxPoolSize { get; }
    public int MinPoolSize { get; }
    public bool PoolByIdentity { get; }
    public bool UseLoadBalancing { get; }
    public DbConnectionPoolGroupOptions(bool poolByIdentity, int minPoolSize, int maxPoolSize, int creationTimeout, int loadBalanceTimeout);
    public int get_CreationTimeout();
    public TimeSpan get_LoadBalanceTimeout();
    public int get_MaxPoolSize();
    public int get_MinPoolSize();
    public bool get_PoolByIdentity();
    public bool get_UseLoadBalancing();
}
internal class System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo : object {
    private DbConnectionPoolGroup _poolGroup;
    internal DbConnectionPoolGroup PoolGroup { get; internal set; }
    internal DbConnectionPoolGroup get_PoolGroup();
    internal void set_PoolGroup(DbConnectionPoolGroup value);
}
internal class System.Data.ProviderBase.DbConnectionPoolIdentity : object {
    public static DbConnectionPoolIdentity NoIdentity;
    private string _sidString;
    private bool _isRestricted;
    private bool _isNetwork;
    private int _hashCode;
    internal bool IsRestricted { get; }
    private DbConnectionPoolIdentity(string sidString, bool isRestricted, bool isNetwork);
    private static DbConnectionPoolIdentity();
    internal bool get_IsRestricted();
    internal static DbConnectionPoolIdentity GetCurrent();
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
}
internal class System.Data.ProviderBase.DbConnectionPoolProviderInfo : object {
}
internal class System.Data.ProviderBase.DbMetaDataFactory : object {
    private DataSet _metaDataCollectionsDataSet;
    private string _normalizedServerVersion;
    private string _serverVersionString;
    private static string _collectionName;
    private static string _populationMechanism;
    private static string _populationString;
    private static string _maximumVersion;
    private static string _minimumVersion;
    private static string _dataSourceProductVersionNormalized;
    private static string _dataSourceProductVersion;
    private static string _restrictionNumber;
    private static string _numberOfRestrictions;
    private static string _restrictionName;
    private static string _parameterName;
    private static string _dataTable;
    private static string _sqlCommand;
    private static string _prepareCollection;
    protected DataSet CollectionDataSet { get; }
    protected string ServerVersion { get; }
    protected string ServerVersionNormalized { get; }
    public DbMetaDataFactory(Stream xmlStream, string serverVersion, string normalizedServerVersion);
    protected DataSet get_CollectionDataSet();
    protected string get_ServerVersion();
    protected string get_ServerVersionNormalized();
    protected DataTable CloneAndFilterCollection(string collectionName, String[] hiddenColumnNames);
    public void Dispose();
    protected virtual void Dispose(bool disposing);
    private DataTable ExecuteCommand(DataRow requestedCollectionRow, String[] restrictions, DbConnection connection);
    private static DataColumn[] FilterColumns(DataTable sourceTable, String[] hiddenColumnNames, DataColumnCollection destinationColumns);
    internal DataRow FindMetaDataCollectionRow(string collectionName);
    private void FixUpVersion(DataTable dataSourceInfoTable);
    private string GetParameterName(string neededCollectionName, int neededRestrictionNumber);
    public virtual DataTable GetSchema(DbConnection connection, string collectionName, String[] restrictions);
    private static bool IncludeThisColumn(DataColumn sourceColumn, String[] hiddenColumnNames);
    protected virtual DataTable PrepareCollection(string collectionName, String[] restrictions, DbConnection connection);
    private bool SupportedByCurrentVersion(DataRow requestedCollectionRow);
}
internal abstract class System.Data.ProviderBase.DbReferenceCollection : object {
    private static int LockPollTime;
    private static int DefaultCollectionSize;
    private CollectionEntry[] _items;
    private object _itemLock;
    private int _optimisticCount;
    private int _lastItemIndex;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isNotifying;
    public abstract virtual void Add(object value, int tag);
    protected void AddItem(object value, int tag);
    internal T FindItem(int tag, Func`2<T, bool> filterMethod);
    public void Notify(int message);
    protected abstract virtual void NotifyItem(int message, int tag, object value);
    public abstract virtual void Remove(object value);
    protected void RemoveItem(object value);
    private void TryEnterItemLock(Boolean& lockObtained);
    private void ExitItemLockIfNeeded(bool lockObtained);
}
internal class System.Data.ProviderBase.FieldNameLookup : BasicFieldNameLookup {
    private int _defaultLocaleID;
    public FieldNameLookup(String[] fieldNames, int defaultLocaleID);
    public FieldNameLookup(ReadOnlyCollection`1<string> columnNames, int defaultLocaleID);
    public FieldNameLookup(IDataReader reader, int defaultLocaleID);
    protected virtual CompareInfo GetCompareInfo();
}
internal class System.Data.ProviderBase.TimeoutTimer : object {
    private long _timerExpire;
    private bool _isInfiniteTimeout;
    internal static long InfiniteTimeout;
    internal bool IsExpired { get; }
    internal bool IsInfinite { get; }
    internal long LegacyTimerExpire { get; }
    internal long MillisecondsRemaining { get; }
    internal static TimeoutTimer StartSecondsTimeout(int seconds);
    internal static TimeoutTimer StartMillisecondsTimeout(long milliseconds);
    internal void SetTimeoutSeconds(int seconds);
    internal bool get_IsExpired();
    internal bool get_IsInfinite();
    internal long get_LegacyTimerExpire();
    internal long get_MillisecondsRemaining();
}
internal static class System.Data.SafeNativeMethods : object {
    internal static IntPtr LocalAlloc(IntPtr initialSize);
    internal static void LocalFree(IntPtr ptr);
    internal static void ZeroMemory(IntPtr ptr, int length);
}
internal static class System.HResults : object {
    internal static int OdbcException;
}
internal static class System.NotImplemented : object {
    internal static Exception ByDesign { get; }
    internal static Exception get_ByDesign();
    internal static Exception ByDesignWithMessage(string message);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[CustomMarshallerAttribute("System.Runtime.InteropServices.HandleRef", "1", "System.Runtime.InteropServices.Marshalling.HandleRefMarshaller/KeepAliveMarshaller")]
internal static class System.Runtime.InteropServices.Marshalling.HandleRefMarshaller : object {
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ADP_CollectionIndexInt32 { get; }
    internal static string ADP_CollectionIndexString { get; }
    internal static string ADP_CollectionInvalidType { get; }
    internal static string ADP_CollectionIsNotParent { get; }
    internal static string ADP_CollectionNullValue { get; }
    internal static string ADP_CollectionRemoveInvalidObject { get; }
    internal static string ADP_CollectionUniqueValue { get; }
    internal static string ADP_ConnectionAlreadyOpen { get; }
    internal static string ADP_ConnectionStateMsg_Closed { get; }
    internal static string ADP_ConnectionStateMsg_Connecting { get; }
    internal static string ADP_ConnectionStateMsg_Open { get; }
    internal static string ADP_ConnectionStateMsg_OpenExecuting { get; }
    internal static string ADP_ConnectionStateMsg_OpenFetching { get; }
    internal static string ADP_ConnectionStateMsg { get; }
    internal static string ADP_ConnectionStringSyntax { get; }
    internal static string ADP_DataReaderClosed { get; }
    internal static string ADP_EmptyString { get; }
    internal static string ADP_InternalConnectionError { get; }
    internal static string ADP_InvalidDataDirectory { get; }
    internal static string ADP_InvalidEnumerationValue { get; }
    internal static string ADP_InvalidKey { get; }
    internal static string ADP_InvalidOffsetValue { get; }
    internal static string ADP_InvalidValue { get; }
    internal static string ADP_NoConnectionString { get; }
    internal static string ADP_OpenConnectionPropertySet { get; }
    internal static string ADP_PooledOpenTimeout { get; }
    internal static string ADP_NonPooledOpenTimeout { get; }
    internal static string ADP_QuotePrefixNotSet { get; }
    internal static string MDF_QueryFailed { get; }
    internal static string MDF_TooManyRestrictions { get; }
    internal static string MDF_InvalidRestrictionValue { get; }
    internal static string MDF_UndefinedCollection { get; }
    internal static string MDF_UndefinedPopulationMechanism { get; }
    internal static string MDF_UnsupportedVersion { get; }
    internal static string MDF_MissingDataSourceInformationColumn { get; }
    internal static string MDF_IncorrectNumberOfDataSourceInformationRows { get; }
    internal static string MDF_MissingRestrictionColumn { get; }
    internal static string MDF_MissingRestrictionRow { get; }
    internal static string MDF_NoColumns { get; }
    internal static string MDF_UnableToBuildCollection { get; }
    internal static string MDF_AmbiguousCollectionName { get; }
    internal static string MDF_CollectionNameISNotUnique { get; }
    internal static string MDF_DataTableDoesNotExist { get; }
    internal static string MDF_InvalidXml { get; }
    internal static string MDF_InvalidXmlMissingColumn { get; }
    internal static string MDF_InvalidXmlInvalidValue { get; }
    internal static string SqlConvert_ConvertFailed { get; }
    internal static string ADP_InvalidConnectionOptionValue { get; }
    internal static string ADP_KeywordNotSupported { get; }
    internal static string ADP_InternalProviderError { get; }
    internal static string ADP_InvalidMultipartName { get; }
    internal static string ADP_InvalidMultipartNameQuoteUsage { get; }
    internal static string ADP_InvalidMultipartNameToManyParts { get; }
    internal static string ADP_NotSupportedEnumerationValue { get; }
    internal static string ADP_StreamClosed { get; }
    internal static string ADP_InvalidSourceBufferIndex { get; }
    internal static string ADP_InvalidDestinationBufferIndex { get; }
    internal static string SQL_InvalidBufferSizeOrIndex { get; }
    internal static string SQL_InvalidDataLength { get; }
    internal static string ADP_InvalidSeekOrigin { get; }
    internal static string SQL_WrongType { get; }
    internal static string ODBC_ODBCCommandText { get; }
    internal static string ODBC_NotSupportedEnumerationValue { get; }
    internal static string ADP_CommandTextRequired { get; }
    internal static string ADP_ConnectionRequired { get; }
    internal static string ADP_OpenConnectionRequired { get; }
    internal static string ADP_TransactionConnectionMismatch { get; }
    internal static string ADP_TransactionRequired { get; }
    internal static string ADP_OpenReaderExists { get; }
    internal static string ADP_DeriveParametersNotSupported { get; }
    internal static string ADP_InvalidCommandTimeout { get; }
    internal static string ADP_UninitializedParameterSize { get; }
    internal static string ADP_ClosedConnectionError { get; }
    internal static string ADP_ConnectionIsDisabled { get; }
    internal static string ADP_EmptyDatabaseName { get; }
    internal static string ADP_DatabaseNameTooLong { get; }
    internal static string ADP_DataReaderNoData { get; }
    internal static string ADP_NumericToDecimalOverflow { get; }
    internal static string ADP_InvalidDataType { get; }
    internal static string ADP_UnknownDataType { get; }
    internal static string ADP_UnknownDataTypeCode { get; }
    internal static string ADP_DbTypeNotSupported { get; }
    internal static string ADP_InvalidSizeValue { get; }
    internal static string ADP_ParameterConversionFailed { get; }
    internal static string ADP_ParallelTransactionsNotSupported { get; }
    internal static string ADP_TransactionZombied { get; }
    internal static string ADP_NonSeqByteAccess { get; }
    internal static string ADP_OffsetOutOfRangeException { get; }
    internal static string ODBC_GetSchemaRestrictionRequired { get; }
    internal static string ADP_OdbcNoTypesFromProvider { get; }
    internal static string Odbc_UnknownSQLType { get; }
    internal static string Odbc_NegativeArgument { get; }
    internal static string Odbc_CantSetPropertyOnOpenConnection { get; }
    internal static string Odbc_NoMappingForSqlTransactionLevel { get; }
    internal static string Odbc_CantEnableConnectionpooling { get; }
    internal static string Odbc_CantAllocateEnvironmentHandle { get; }
    internal static string Odbc_FailedToGetDescriptorHandle { get; }
    internal static string Odbc_NotInTransaction { get; }
    internal static string Odbc_ExceptionMessage { get; }
    internal static string Odbc_ConnectionClosed { get; }
    internal static string Odbc_OpenConnectionNoOwner { get; }
    internal static string Odbc_PlatformNotSupported { get; }
    internal static string Odbc_UnixOdbcNotFound { get; }
    private static SR();
    internal static string GetString(string value);
    internal static string GetString(string format, Object[] args);
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ADP_CollectionIndexInt32();
    internal static string get_ADP_CollectionIndexString();
    internal static string get_ADP_CollectionInvalidType();
    internal static string get_ADP_CollectionIsNotParent();
    internal static string get_ADP_CollectionNullValue();
    internal static string get_ADP_CollectionRemoveInvalidObject();
    internal static string get_ADP_CollectionUniqueValue();
    internal static string get_ADP_ConnectionAlreadyOpen();
    internal static string get_ADP_ConnectionStateMsg_Closed();
    internal static string get_ADP_ConnectionStateMsg_Connecting();
    internal static string get_ADP_ConnectionStateMsg_Open();
    internal static string get_ADP_ConnectionStateMsg_OpenExecuting();
    internal static string get_ADP_ConnectionStateMsg_OpenFetching();
    internal static string get_ADP_ConnectionStateMsg();
    internal static string get_ADP_ConnectionStringSyntax();
    internal static string get_ADP_DataReaderClosed();
    internal static string get_ADP_EmptyString();
    internal static string get_ADP_InternalConnectionError();
    internal static string get_ADP_InvalidDataDirectory();
    internal static string get_ADP_InvalidEnumerationValue();
    internal static string get_ADP_InvalidKey();
    internal static string get_ADP_InvalidOffsetValue();
    internal static string get_ADP_InvalidValue();
    internal static string get_ADP_NoConnectionString();
    internal static string get_ADP_OpenConnectionPropertySet();
    internal static string get_ADP_PooledOpenTimeout();
    internal static string get_ADP_NonPooledOpenTimeout();
    internal static string get_ADP_QuotePrefixNotSet();
    internal static string get_MDF_QueryFailed();
    internal static string get_MDF_TooManyRestrictions();
    internal static string get_MDF_InvalidRestrictionValue();
    internal static string get_MDF_UndefinedCollection();
    internal static string get_MDF_UndefinedPopulationMechanism();
    internal static string get_MDF_UnsupportedVersion();
    internal static string get_MDF_MissingDataSourceInformationColumn();
    internal static string get_MDF_IncorrectNumberOfDataSourceInformationRows();
    internal static string get_MDF_MissingRestrictionColumn();
    internal static string get_MDF_MissingRestrictionRow();
    internal static string get_MDF_NoColumns();
    internal static string get_MDF_UnableToBuildCollection();
    internal static string get_MDF_AmbiguousCollectionName();
    internal static string get_MDF_CollectionNameISNotUnique();
    internal static string get_MDF_DataTableDoesNotExist();
    internal static string get_MDF_InvalidXml();
    internal static string get_MDF_InvalidXmlMissingColumn();
    internal static string get_MDF_InvalidXmlInvalidValue();
    internal static string get_SqlConvert_ConvertFailed();
    internal static string get_ADP_InvalidConnectionOptionValue();
    internal static string get_ADP_KeywordNotSupported();
    internal static string get_ADP_InternalProviderError();
    internal static string get_ADP_InvalidMultipartName();
    internal static string get_ADP_InvalidMultipartNameQuoteUsage();
    internal static string get_ADP_InvalidMultipartNameToManyParts();
    internal static string get_ADP_NotSupportedEnumerationValue();
    internal static string get_ADP_StreamClosed();
    internal static string get_ADP_InvalidSourceBufferIndex();
    internal static string get_ADP_InvalidDestinationBufferIndex();
    internal static string get_SQL_InvalidBufferSizeOrIndex();
    internal static string get_SQL_InvalidDataLength();
    internal static string get_ADP_InvalidSeekOrigin();
    internal static string get_SQL_WrongType();
    internal static string get_ODBC_ODBCCommandText();
    internal static string get_ODBC_NotSupportedEnumerationValue();
    internal static string get_ADP_CommandTextRequired();
    internal static string get_ADP_ConnectionRequired();
    internal static string get_ADP_OpenConnectionRequired();
    internal static string get_ADP_TransactionConnectionMismatch();
    internal static string get_ADP_TransactionRequired();
    internal static string get_ADP_OpenReaderExists();
    internal static string get_ADP_DeriveParametersNotSupported();
    internal static string get_ADP_InvalidCommandTimeout();
    internal static string get_ADP_UninitializedParameterSize();
    internal static string get_ADP_ClosedConnectionError();
    internal static string get_ADP_ConnectionIsDisabled();
    internal static string get_ADP_EmptyDatabaseName();
    internal static string get_ADP_DatabaseNameTooLong();
    internal static string get_ADP_DataReaderNoData();
    internal static string get_ADP_NumericToDecimalOverflow();
    internal static string get_ADP_InvalidDataType();
    internal static string get_ADP_UnknownDataType();
    internal static string get_ADP_UnknownDataTypeCode();
    internal static string get_ADP_DbTypeNotSupported();
    internal static string get_ADP_InvalidSizeValue();
    internal static string get_ADP_ParameterConversionFailed();
    internal static string get_ADP_ParallelTransactionsNotSupported();
    internal static string get_ADP_TransactionZombied();
    internal static string get_ADP_NonSeqByteAccess();
    internal static string get_ADP_OffsetOutOfRangeException();
    internal static string get_ODBC_GetSchemaRestrictionRequired();
    internal static string get_ADP_OdbcNoTypesFromProvider();
    internal static string get_Odbc_UnknownSQLType();
    internal static string get_Odbc_NegativeArgument();
    internal static string get_Odbc_CantSetPropertyOnOpenConnection();
    internal static string get_Odbc_NoMappingForSqlTransactionLevel();
    internal static string get_Odbc_CantEnableConnectionpooling();
    internal static string get_Odbc_CantAllocateEnvironmentHandle();
    internal static string get_Odbc_FailedToGetDescriptorHandle();
    internal static string get_Odbc_NotInTransaction();
    internal static string get_Odbc_ExceptionMessage();
    internal static string get_Odbc_ConnectionClosed();
    internal static string get_Odbc_OpenConnectionNoOwner();
    internal static string get_Odbc_PlatformNotSupported();
    internal static string get_Odbc_UnixOdbcNotFound();
}
