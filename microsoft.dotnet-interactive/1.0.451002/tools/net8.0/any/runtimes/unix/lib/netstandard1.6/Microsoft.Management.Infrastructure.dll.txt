public class Microsoft.Management.Infrastructure.CimClass : object {
    private CimSystemProperties _systemProperties;
    private MI_Class _classHandle;
    private bool _disposed;
    internal MI_Class ClassHandle { get; }
    public string CimSuperClassName { get; }
    public CimClass CimSuperClass { get; }
    public CimReadOnlyKeyedCollection`1<CimPropertyDeclaration> CimClassProperties { get; }
    public CimReadOnlyKeyedCollection`1<CimQualifier> CimClassQualifiers { get; }
    public CimReadOnlyKeyedCollection`1<CimMethodDeclaration> CimClassMethods { get; }
    public CimSystemProperties CimSystemProperties { get; }
    internal CimClass(MI_Class handle);
    internal MI_Class get_ClassHandle();
    public string get_CimSuperClassName();
    public CimClass get_CimSuperClass();
    public CimReadOnlyKeyedCollection`1<CimPropertyDeclaration> get_CimClassProperties();
    public CimReadOnlyKeyedCollection`1<CimQualifier> get_CimClassQualifiers();
    public CimReadOnlyKeyedCollection`1<CimMethodDeclaration> get_CimClassMethods();
    public CimSystemProperties get_CimSystemProperties();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    internal void AssertNotDisposed();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
public static class Microsoft.Management.Infrastructure.CimConverter : object {
    private static Dictionary`2<Type, CimType> _dotNetTypeToScalarCimType;
    private static Dictionary`2<Type, CimType> _dotNetTypeToArrayCimType;
    private static CimConverter();
    public static Type GetDotNetType(CimType cimType);
    private static void InitializeDotNetTypeToCimTypeDictionaries();
    public static CimType GetCimType(Type dotNetType);
    private static CimType GetCimTypeFromDotNetValue(object dotNetValue);
    internal static CimType GetCimTypeFromDotNetValueOrThrowAnException(object dotNetValue);
}
public class Microsoft.Management.Infrastructure.CimException : Exception {
    private CimInstance _errorData;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NativeErrorCode <NativeErrorCode>k__BackingField;
    private static string serializationId_ErrorData;
    private bool _disposed;
    public NativeErrorCode NativeErrorCode { get; private set; }
    public CimInstance ErrorData { get; }
    public string MessageId { get; }
    public string ErrorSource { get; }
    public ushort ErrorType { get; }
    public UInt32 StatusCode { get; }
    internal CimException(MI_Result errorCode, string errorMessage, MI_Instance errorDetailsHandle);
    internal CimException(MI_Result errorCode, string errorMessage, MI_Instance errorDetailsHandle, string exceptionMessage);
    public CimException(CimInstance cimError);
    public CimException(string message);
    public CimException(string message, Exception innerException);
    [CompilerGeneratedAttribute]
public NativeErrorCode get_NativeErrorCode();
    [CompilerGeneratedAttribute]
private void set_NativeErrorCode(NativeErrorCode value);
    private static string GetExceptionMessage(CimInstance cimError);
    private static string GetExceptionMessage(MI_Instance errorDetailsHandle);
    private static string GetExceptionMessage(MI_Result errorCode, string errorMessage, MI_Instance errorDetailsHandle);
    public CimInstance get_ErrorData();
    private bool TryGetErrorDataProperty(string propertyName, T& propertyValue);
    private static bool TryGetErrorDataProperty(CimInstance errorData, string propertyName, T& propertyValue);
    public string get_MessageId();
    public string get_ErrorSource();
    public ushort get_ErrorType();
    public UInt32 get_StatusCode();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void AssertNotDisposed();
    internal static void ThrowIfMiResultFailure(MI_Result result);
    internal static void ThrowIfMiResultFailure(MI_Result result, MI_Instance errorData);
    internal static void ThrowIfMiResultFailure(MI_Result result, string errorMessage, MI_Instance errorData);
    internal static CimException GetExceptionIfMiResultFailure(MI_Result result, string errorMessage, MI_Instance errorData);
}
[FlagsAttribute]
public enum Microsoft.Management.Infrastructure.CimFlags : Enum {
    public long value__;
    public static CimFlags None;
    public static CimFlags Class;
    public static CimFlags Method;
    public static CimFlags Property;
    public static CimFlags Parameter;
    public static CimFlags Association;
    public static CimFlags Indication;
    public static CimFlags Reference;
    public static CimFlags Any;
    public static CimFlags EnableOverride;
    public static CimFlags DisableOverride;
    public static CimFlags Restricted;
    public static CimFlags ToSubclass;
    public static CimFlags Translatable;
    public static CimFlags Key;
    public static CimFlags In;
    public static CimFlags Out;
    public static CimFlags Required;
    public static CimFlags Static;
    public static CimFlags Abstract;
    public static CimFlags Terminal;
    public static CimFlags Expensive;
    public static CimFlags Stream;
    public static CimFlags ReadOnly;
    public static CimFlags NotModified;
    public static CimFlags NullValue;
    public static CimFlags Borrow;
    public static CimFlags Adopt;
}
public class Microsoft.Management.Infrastructure.CimInstance : object {
    private MI_Instance nativeInstance;
    private CimSystemProperties _systemProperties;
    private bool _disposed;
    private static string serializationId_MiXml;
    private static string serializationId_CimSessionComputerName;
    private Guid _CimSessionInstanceID;
    private string _CimSessionComputerName;
    internal MI_Instance InstanceHandle { get; }
    public CimClass CimClass { get; }
    public CimKeyedCollection`1<CimProperty> CimInstanceProperties { get; }
    public CimSystemProperties CimSystemProperties { get; }
    internal CimInstance(MI_Instance handle);
    public CimInstance(CimInstance cimInstanceToClone);
    public CimInstance(string className);
    public CimInstance(string className, string namespaceName);
    public CimInstance(CimClass cimClass);
    internal MI_Instance get_InstanceHandle();
    protected virtual override void Finalize();
    public CimClass get_CimClass();
    public CimKeyedCollection`1<CimProperty> get_CimInstanceProperties();
    public CimSystemProperties get_CimSystemProperties();
    internal static string GetCimSystemPath(CimSystemProperties sysProperties, IEnumerator cimPropertiesEnumerator);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    internal void AssertNotDisposed();
    public Guid GetCimSessionInstanceId();
    internal void SetCimSessionInstanceId(Guid instanceID);
    public string GetCimSessionComputerName();
    internal void SetCimSessionComputerName(string computerName);
    public virtual string ToString();
}
public abstract class Microsoft.Management.Infrastructure.CimMethodDeclaration : object {
    public string Name { get; }
    public CimType ReturnType { get; }
    public CimReadOnlyKeyedCollection`1<CimMethodParameterDeclaration> Parameters { get; }
    public CimReadOnlyKeyedCollection`1<CimQualifier> Qualifiers { get; }
    public abstract virtual string get_Name();
    public abstract virtual CimType get_ReturnType();
    public abstract virtual CimReadOnlyKeyedCollection`1<CimMethodParameterDeclaration> get_Parameters();
    public abstract virtual CimReadOnlyKeyedCollection`1<CimQualifier> get_Qualifiers();
    public virtual string ToString();
}
public abstract class Microsoft.Management.Infrastructure.CimMethodParameter : object {
    public string Name { get; }
    public object Value { get; public set; }
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    public abstract virtual string get_Name();
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public abstract virtual CimType get_CimType();
    public abstract virtual CimFlags get_Flags();
    public static CimMethodParameter Create(string name, object value, CimFlags flags);
    public static CimMethodParameter Create(string name, object value, CimType type, CimFlags flags);
    public virtual string ToString();
}
public abstract class Microsoft.Management.Infrastructure.CimMethodParameterDeclaration : object {
    public string Name { get; }
    public CimType CimType { get; }
    public CimReadOnlyKeyedCollection`1<CimQualifier> Qualifiers { get; }
    public string ReferenceClassName { get; }
    public abstract virtual string get_Name();
    public abstract virtual CimType get_CimType();
    public abstract virtual CimReadOnlyKeyedCollection`1<CimQualifier> get_Qualifiers();
    public abstract virtual string get_ReferenceClassName();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Management.Infrastructure.CimMethodParametersCollection : CimKeyedCollection`1<CimMethodParameter> {
    private CimInstance _backingInstance;
    private bool _disposed;
    internal MI_Instance InstanceHandleForMethodInvocation { get; }
    public int Count { get; }
    public CimMethodParameter Item { get; }
    internal CimMethodParametersCollection(CimInstance backingInstance);
    internal MI_Instance get_InstanceHandleForMethodInvocation();
    public virtual void Add(CimMethodParameter newParameter);
    public virtual int get_Count();
    public virtual CimMethodParameter get_Item(string parameterName);
    public virtual IEnumerator`1<CimMethodParameter> GetEnumerator();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void AssertNotDisposed();
    [CompilerGeneratedAttribute]
private CimMethodParameterBackedByCimProperty <GetEnumerator>b__10_0(CimProperty p);
}
public class Microsoft.Management.Infrastructure.CimMethodResult : CimMethodResultBase {
    private CimMethodParametersCollection _backingMethodParametersCollection;
    private bool _disposed;
    public CimMethodParameter ReturnValue { get; }
    public CimReadOnlyKeyedCollection`1<CimMethodParameter> OutParameters { get; }
    internal CimMethodResult(CimInstance backingInstance);
    public CimMethodParameter get_ReturnValue();
    public CimReadOnlyKeyedCollection`1<CimMethodParameter> get_OutParameters();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void AssertNotDisposed();
}
public abstract class Microsoft.Management.Infrastructure.CimMethodResultBase : object {
}
public class Microsoft.Management.Infrastructure.CimMethodStreamedResult : CimMethodResultBase {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <ItemValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CimType <ItemType>k__BackingField;
    public string ParameterName { get; private set; }
    public object ItemValue { get; private set; }
    public CimType ItemType { get; private set; }
    internal CimMethodStreamedResult(string parameterName, object parameterValue, CimType parameterType);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
private void set_ParameterName(string value);
    [CompilerGeneratedAttribute]
public object get_ItemValue();
    [CompilerGeneratedAttribute]
private void set_ItemValue(object value);
    [CompilerGeneratedAttribute]
public CimType get_ItemType();
    [CompilerGeneratedAttribute]
private void set_ItemType(CimType value);
}
public abstract class Microsoft.Management.Infrastructure.CimProperty : object {
    public string Name { get; }
    public object Value { get; public set; }
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    public bool IsValueModified { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public abstract virtual CimType get_CimType();
    public abstract virtual CimFlags get_Flags();
    public virtual bool get_IsValueModified();
    public virtual void set_IsValueModified(bool value);
    public static CimProperty Create(string name, object value, CimFlags flags);
    public static CimProperty Create(string name, object value, CimType type, CimFlags flags);
    public virtual string ToString();
    internal static MI_Value ConvertToNativeLayer(object value, CimType cimType);
}
public abstract class Microsoft.Management.Infrastructure.CimPropertyDeclaration : object {
    public string Name { get; }
    public object Value { get; }
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    public CimReadOnlyKeyedCollection`1<CimQualifier> Qualifiers { get; }
    public string ReferenceClassName { get; }
    public abstract virtual string get_Name();
    public abstract virtual object get_Value();
    public abstract virtual CimType get_CimType();
    public abstract virtual CimFlags get_Flags();
    public abstract virtual CimReadOnlyKeyedCollection`1<CimQualifier> get_Qualifiers();
    public abstract virtual string get_ReferenceClassName();
    public virtual string ToString();
}
public abstract class Microsoft.Management.Infrastructure.CimQualifier : object {
    public string Name { get; }
    public object Value { get; }
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    public abstract virtual string get_Name();
    public abstract virtual object get_Value();
    public abstract virtual CimType get_CimType();
    public abstract virtual CimFlags get_Flags();
    public virtual string ToString();
}
public class Microsoft.Management.Infrastructure.CimSession : object {
    private MI_Session _handle;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ComputerName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Guid <InstanceId>k__BackingField;
    private object _disposeThreadSafetyLock;
    private bool _disposed;
    public string ComputerName { get; private set; }
    public Guid InstanceId { get; private set; }
    private CimSession(MI_Session handle, string computerName);
    [CompilerGeneratedAttribute]
public string get_ComputerName();
    [CompilerGeneratedAttribute]
private void set_ComputerName(string value);
    [CompilerGeneratedAttribute]
public Guid get_InstanceId();
    [CompilerGeneratedAttribute]
private void set_InstanceId(Guid value);
    public static CimSession Create(string computerName);
    public static CimSession Create(string computerName, CimSessionOptions sessionOptions);
    public static CimAsyncResult`1<CimSession> CreateAsync(string computerName);
    public static CimAsyncResult`1<CimSession> CreateAsync(string computerName, CimSessionOptions sessionOptions);
    public void Close();
    public CimAsyncStatus CloseAsync();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void AssertNotDisposed();
    public CimInstance GetInstance(string namespaceName, CimInstance instanceId);
    public CimInstance GetInstance(string namespaceName, CimInstance instanceId, CimOperationOptions options);
    public CimAsyncResult`1<CimInstance> GetInstanceAsync(string namespaceName, CimInstance instanceId);
    public CimAsyncResult`1<CimInstance> GetInstanceAsync(string namespaceName, CimInstance instanceId, CimOperationOptions options);
    private MI_Operation GetInstanceCore(string namespaceName, CimInstance instanceId, CimOperationOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public CimInstance ModifyInstance(CimInstance instance);
    public CimInstance ModifyInstance(string namespaceName, CimInstance instance);
    public CimInstance ModifyInstance(string namespaceName, CimInstance instance, CimOperationOptions options);
    public CimAsyncResult`1<CimInstance> ModifyInstanceAsync(CimInstance instance);
    public CimAsyncResult`1<CimInstance> ModifyInstanceAsync(string namespaceName, CimInstance instance);
    public CimAsyncResult`1<CimInstance> ModifyInstanceAsync(string namespaceName, CimInstance instance, CimOperationOptions options);
    private MI_Operation ModifyInstanceCore(string namespaceName, CimInstance instance, CimOperationOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public CimInstance CreateInstance(string namespaceName, CimInstance instance);
    public CimInstance CreateInstance(string namespaceName, CimInstance instance, CimOperationOptions options);
    public CimAsyncResult`1<CimInstance> CreateInstanceAsync(string namespaceName, CimInstance instance);
    public CimAsyncResult`1<CimInstance> CreateInstanceAsync(string namespaceName, CimInstance instance, CimOperationOptions options);
    private MI_Operation CreateInstanceCore(string namespaceName, CimInstance instance, CimOperationOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public void DeleteInstance(CimInstance instance);
    public void DeleteInstance(string namespaceName, CimInstance instance);
    public void DeleteInstance(string namespaceName, CimInstance instance, CimOperationOptions options);
    public CimAsyncStatus DeleteInstanceAsync(CimInstance instance);
    public CimAsyncStatus DeleteInstanceAsync(string namespaceName, CimInstance instance);
    public CimAsyncStatus DeleteInstanceAsync(string namespaceName, CimInstance instance, CimOperationOptions options);
    private MI_Operation DeleteInstanceCore(string namespaceName, CimInstance instance, CimOperationOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public IEnumerable`1<CimSubscriptionResult> Subscribe(string namespaceName, string queryDialect, string queryExpression);
    public IEnumerable`1<CimSubscriptionResult> Subscribe(string namespaceName, string queryDialect, string queryExpression, CimOperationOptions operationOptions);
    public IEnumerable`1<CimSubscriptionResult> Subscribe(string namespaceName, string queryDialect, string queryExpression, CimSubscriptionDeliveryOptions options);
    public IEnumerable`1<CimSubscriptionResult> Subscribe(string namespaceName, string queryDialect, string queryExpression, CimOperationOptions operationOptions, CimSubscriptionDeliveryOptions options);
    public CimAsyncMultipleResults`1<CimSubscriptionResult> SubscribeAsync(string namespaceName, string queryDialect, string queryExpression);
    public CimAsyncMultipleResults`1<CimSubscriptionResult> SubscribeAsync(string namespaceName, string queryDialect, string queryExpression, CimOperationOptions operationOptions);
    public CimAsyncMultipleResults`1<CimSubscriptionResult> SubscribeAsync(string namespaceName, string queryDialect, string queryExpression, CimSubscriptionDeliveryOptions options);
    public CimAsyncMultipleResults`1<CimSubscriptionResult> SubscribeAsync(string namespaceName, string queryDialect, string queryExpression, CimOperationOptions operationOptions, CimSubscriptionDeliveryOptions options);
    private MI_Operation SubscribeCore(string namespaceName, string queryDialect, string queryExpression, CimOperationOptions operationOptions, CimSubscriptionDeliveryOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public IEnumerable`1<CimInstance> EnumerateInstances(string namespaceName, string className);
    public IEnumerable`1<CimInstance> EnumerateInstances(string namespaceName, string className, CimOperationOptions options);
    public CimAsyncMultipleResults`1<CimInstance> EnumerateInstancesAsync(string namespaceName, string className);
    public CimAsyncMultipleResults`1<CimInstance> EnumerateInstancesAsync(string namespaceName, string className, CimOperationOptions options);
    private MI_Operation EnumerateInstancesCore(string namespaceName, string className, CimOperationOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public IEnumerable`1<CimInstance> QueryInstances(string namespaceName, string queryDialect, string queryExpression);
    public IEnumerable`1<CimInstance> QueryInstances(string namespaceName, string queryDialect, string queryExpression, CimOperationOptions options);
    public CimAsyncMultipleResults`1<CimInstance> QueryInstancesAsync(string namespaceName, string queryDialect, string queryExpression);
    public CimAsyncMultipleResults`1<CimInstance> QueryInstancesAsync(string namespaceName, string queryDialect, string queryExpression, CimOperationOptions options);
    private MI_Operation QueryInstancesCore(string namespaceName, string queryDialect, string queryExpression, CimOperationOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public IEnumerable`1<CimInstance> EnumerateAssociatedInstances(string namespaceName, CimInstance sourceInstance, string associationClassName, string resultClassName, string sourceRole, string resultRole);
    public IEnumerable`1<CimInstance> EnumerateAssociatedInstances(string namespaceName, CimInstance sourceInstance, string associationClassName, string resultClassName, string sourceRole, string resultRole, CimOperationOptions options);
    public CimAsyncMultipleResults`1<CimInstance> EnumerateAssociatedInstancesAsync(string namespaceName, CimInstance sourceInstance, string associationClassName, string resultClassName, string sourceRole, string resultRole);
    public CimAsyncMultipleResults`1<CimInstance> EnumerateAssociatedInstancesAsync(string namespaceName, CimInstance sourceInstance, string associationClassName, string resultClassName, string sourceRole, string resultRole, CimOperationOptions options);
    private MI_Operation EnumerateAssociatedInstancesCore(string namespaceName, CimInstance sourceInstance, string associationClassName, string resultClassName, string sourceRole, string resultRole, CimOperationOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public IEnumerable`1<CimInstance> EnumerateReferencingInstances(string namespaceName, CimInstance sourceInstance, string associationClassName, string sourceRole);
    public IEnumerable`1<CimInstance> EnumerateReferencingInstances(string namespaceName, CimInstance sourceInstance, string associationClassName, string sourceRole, CimOperationOptions options);
    public CimAsyncMultipleResults`1<CimInstance> EnumerateReferencingInstancesAsync(string namespaceName, CimInstance sourceInstance, string associationClassName, string sourceRole);
    public CimAsyncMultipleResults`1<CimInstance> EnumerateReferencingInstancesAsync(string namespaceName, CimInstance sourceInstance, string associationClassName, string sourceRole, CimOperationOptions options);
    private MI_Operation EnumerateReferencingInstancesCore(string namespaceName, CimInstance sourceInstance, string associationClassName, string sourceRole, CimOperationOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public CimMethodResult InvokeMethod(CimInstance instance, string methodName, CimMethodParametersCollection methodParameters);
    public CimMethodResult InvokeMethod(string namespaceName, CimInstance instance, string methodName, CimMethodParametersCollection methodParameters);
    public CimMethodResult InvokeMethod(string namespaceName, CimInstance instance, string methodName, CimMethodParametersCollection methodParameters, CimOperationOptions options);
    public CimAsyncResult`1<CimMethodResult> InvokeMethodAsync(CimInstance instance, string methodName, CimMethodParametersCollection methodParameters);
    public CimAsyncResult`1<CimMethodResult> InvokeMethodAsync(string namespaceName, CimInstance instance, string methodName, CimMethodParametersCollection methodParameters);
    public CimAsyncMultipleResults`1<CimMethodResultBase> InvokeMethodAsync(string namespaceName, CimInstance instance, string methodName, CimMethodParametersCollection methodParameters, CimOperationOptions options);
    public CimMethodResult InvokeMethod(string namespaceName, string className, string methodName, CimMethodParametersCollection methodParameters);
    public CimMethodResult InvokeMethod(string namespaceName, string className, string methodName, CimMethodParametersCollection methodParameters, CimOperationOptions options);
    public CimAsyncResult`1<CimMethodResult> InvokeMethodAsync(string namespaceName, string className, string methodName, CimMethodParametersCollection methodParameters);
    public CimAsyncMultipleResults`1<CimMethodResultBase> InvokeMethodAsync(string namespaceName, string className, string methodName, CimMethodParametersCollection methodParameters, CimOperationOptions options);
    private MI_Operation InvokeMethodCore(string namespaceName, string className, CimInstance instance, string methodName, CimMethodParametersCollection methodParameters, CimOperationOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public CimClass GetClass(string namespaceName, string className);
    public CimClass GetClass(string namespaceName, string className, CimOperationOptions options);
    public CimAsyncResult`1<CimClass> GetClassAsync(string namespaceName, string className);
    public CimAsyncResult`1<CimClass> GetClassAsync(string namespaceName, string className, CimOperationOptions options);
    private MI_Operation GetClassCore(string namespaceName, string className, CimOperationOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public IEnumerable`1<CimClass> EnumerateClasses(string namespaceName);
    public IEnumerable`1<CimClass> EnumerateClasses(string namespaceName, string className);
    public IEnumerable`1<CimClass> EnumerateClasses(string namespaceName, string className, CimOperationOptions options);
    public CimAsyncMultipleResults`1<CimClass> EnumerateClassesAsync(string namespaceName);
    public CimAsyncMultipleResults`1<CimClass> EnumerateClassesAsync(string namespaceName, string className);
    public CimAsyncMultipleResults`1<CimClass> EnumerateClassesAsync(string namespaceName, string className, CimOperationOptions options);
    private MI_Operation EnumerateClassesCore(string namespaceName, string className, CimOperationOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public bool TestConnection();
    public bool TestConnection(CimInstance& instance, CimException& exception);
    public CimAsyncResult`1<CimInstance> TestConnectionAsync();
    private MI_Operation TestConnectionCore(CimOperationOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <CloseAsync>b__15_0(IObserver`1<object> observer);
    [CompilerGeneratedAttribute]
private MI_Operation <TestConnection>b__99_0(CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    [CompilerGeneratedAttribute]
private MI_Operation <TestConnectionAsync>b__100_0(CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
}
public enum Microsoft.Management.Infrastructure.CimSubscriptionDeliveryType : Enum {
    public int value__;
    public static CimSubscriptionDeliveryType None;
    public static CimSubscriptionDeliveryType Push;
    public static CimSubscriptionDeliveryType Pull;
}
public class Microsoft.Management.Infrastructure.CimSubscriptionResult : object {
    private CimInstance _resultInstance;
    private string _bookmark;
    private string _machineId;
    private bool _disposed;
    public string Bookmark { get; }
    public string MachineId { get; }
    public CimInstance Instance { get; }
    internal CimSubscriptionResult(MI_Instance handle, string bookmark, string machineId);
    public string get_Bookmark();
    public string get_MachineId();
    public CimInstance get_Instance();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void AssertNotDisposed();
}
public class Microsoft.Management.Infrastructure.CimSystemProperties : object {
    private string _namespace;
    private string _serverName;
    private string _className;
    private string _path;
    public string Namespace { get; }
    public string ServerName { get; }
    public string ClassName { get; }
    public string Path { get; }
    internal void UpdateCimSystemProperties(string systemNamespace, string serverName, string className);
    internal void UpdateSystemPath(string Path);
    public string get_Namespace();
    public string get_ServerName();
    public string get_ClassName();
    public string get_Path();
}
public enum Microsoft.Management.Infrastructure.CimType : Enum {
    public int value__;
    public static CimType Unknown;
    public static CimType Boolean;
    public static CimType UInt8;
    public static CimType SInt8;
    public static CimType UInt16;
    public static CimType SInt16;
    public static CimType UInt32;
    public static CimType SInt32;
    public static CimType UInt64;
    public static CimType SInt64;
    public static CimType Real32;
    public static CimType Real64;
    public static CimType Char16;
    public static CimType DateTime;
    public static CimType String;
    public static CimType Reference;
    public static CimType Instance;
    public static CimType BooleanArray;
    public static CimType UInt8Array;
    public static CimType SInt8Array;
    public static CimType UInt16Array;
    public static CimType SInt16Array;
    public static CimType UInt32Array;
    public static CimType SInt32Array;
    public static CimType UInt64Array;
    public static CimType SInt64Array;
    public static CimType Real32Array;
    public static CimType Real64Array;
    public static CimType Char16Array;
    public static CimType DateTimeArray;
    public static CimType StringArray;
    public static CimType ReferenceArray;
    public static CimType InstanceArray;
}
public class Microsoft.Management.Infrastructure.Generic.CimAsyncMultipleResults`1 : object {
    private IObservable`1<T> _wrappedObservable;
    internal CimAsyncMultipleResults`1(IObservable`1<T> wrappedObservable);
    public sealed virtual IDisposable Subscribe(IObserver`1<T> observer);
}
public class Microsoft.Management.Infrastructure.Generic.CimAsyncResult`1 : object {
    private IObservable`1<T> _wrappedObservable;
    internal CimAsyncResult`1(IObservable`1<T> wrappedObservable);
    public sealed virtual IDisposable Subscribe(IObserver`1<T> observer);
}
public class Microsoft.Management.Infrastructure.Generic.CimAsyncStatus : object {
    private IObservable`1<object> _wrappedObservable;
    internal CimAsyncStatus(IObservable`1<object> wrappedObservable);
    public sealed virtual IDisposable Subscribe(IObserver`1<object> observer);
}
public abstract class Microsoft.Management.Infrastructure.Generic.CimKeyedCollection`1 : CimReadOnlyKeyedCollection`1<T> {
    public abstract virtual void Add(T newItem);
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.Management.Infrastructure.Generic.CimReadOnlyKeyedCollection`1 : object {
    public int Count { get; }
    public T Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual T get_Item(string itemName);
    public abstract virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class Microsoft.Management.Infrastructure.Internal.CimApplication : object {
    internal static string ApplicationID;
    private static Lazy`1<MI_Application> LazyHandle;
    public static MI_Application Handle { get; }
    private static CimApplication();
    private static MI_Application GetApplicationHandle();
    public static MI_Application get_Handle();
}
internal class Microsoft.Management.Infrastructure.Internal.CimOperationCallbackProcessingContext : object {
    private bool inUserCode;
    private object managedOperationContext;
    internal bool InUserCode { get; internal set; }
    internal object ManagedOperationContext { get; }
    internal CimOperationCallbackProcessingContext(object managedOperationContext);
    internal bool get_InUserCode();
    internal void set_InUserCode(bool value);
    internal object get_ManagedOperationContext();
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Internal.ClassHandleExtensionMethods : object {
    [ExtensionAttribute]
public static MI_Class Clone(MI_Class handleToClone);
    [ExtensionAttribute]
public static MI_Class[] CloneMIArray(MI_Class[] arrayToClone);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Management.Infrastructure.Internal.Data.CimClassPropertiesCollection : CimReadOnlyKeyedCollection`1<CimPropertyDeclaration> {
    private MI_Class classHandle;
    public int Count { get; }
    public CimPropertyDeclaration Item { get; }
    internal CimClassPropertiesCollection(MI_Class classHandle);
    public virtual int get_Count();
    public virtual CimPropertyDeclaration get_Item(string propertyName);
    [IteratorStateMachineAttribute("Microsoft.Management.Infrastructure.Internal.Data.CimClassPropertiesCollection/<GetEnumerator>d__6")]
public virtual IEnumerator`1<CimPropertyDeclaration> GetEnumerator();
}
internal class Microsoft.Management.Infrastructure.Internal.Data.CimClassPropertyOfClass : CimPropertyDeclaration {
    private MI_Class classHandle;
    private int index;
    public string Name { get; }
    public object Value { get; }
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    public CimReadOnlyKeyedCollection`1<CimQualifier> Qualifiers { get; }
    public string ReferenceClassName { get; }
    internal CimClassPropertyOfClass(MI_Class classHandle, int index);
    public virtual string get_Name();
    public virtual object get_Value();
    public virtual CimType get_CimType();
    public virtual CimFlags get_Flags();
    public virtual CimReadOnlyKeyedCollection`1<CimQualifier> get_Qualifiers();
    public virtual string get_ReferenceClassName();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Management.Infrastructure.Internal.Data.CimClassQualifierCollection : CimReadOnlyKeyedCollection`1<CimQualifier> {
    private MI_Class classHandle;
    public int Count { get; }
    public CimQualifier Item { get; }
    internal CimClassQualifierCollection(MI_Class classHandle);
    public virtual int get_Count();
    public virtual CimQualifier get_Item(string qualifierName);
    [IteratorStateMachineAttribute("Microsoft.Management.Infrastructure.Internal.Data.CimClassQualifierCollection/<GetEnumerator>d__6")]
public virtual IEnumerator`1<CimQualifier> GetEnumerator();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Management.Infrastructure.Internal.Data.CimMethodDeclarationCollection : CimReadOnlyKeyedCollection`1<CimMethodDeclaration> {
    private MI_Class classHandle;
    public int Count { get; }
    public CimMethodDeclaration Item { get; }
    internal CimMethodDeclarationCollection(MI_Class classHandle);
    public virtual int get_Count();
    public virtual CimMethodDeclaration get_Item(string methodName);
    [IteratorStateMachineAttribute("Microsoft.Management.Infrastructure.Internal.Data.CimMethodDeclarationCollection/<GetEnumerator>d__6")]
public virtual IEnumerator`1<CimMethodDeclaration> GetEnumerator();
}
internal class Microsoft.Management.Infrastructure.Internal.Data.CimMethodDeclarationOfClass : CimMethodDeclaration {
    private MI_Class classHandle;
    private int index;
    public string Name { get; }
    public CimType ReturnType { get; }
    public CimReadOnlyKeyedCollection`1<CimMethodParameterDeclaration> Parameters { get; }
    public CimReadOnlyKeyedCollection`1<CimQualifier> Qualifiers { get; }
    internal CimMethodDeclarationOfClass(MI_Class classHandle, int index);
    public virtual string get_Name();
    public virtual CimType get_ReturnType();
    public virtual CimReadOnlyKeyedCollection`1<CimMethodParameterDeclaration> get_Parameters();
    public virtual CimReadOnlyKeyedCollection`1<CimQualifier> get_Qualifiers();
}
internal class Microsoft.Management.Infrastructure.Internal.Data.CimMethodParameterBackedByCimProperty : CimMethodParameter {
    private CimProperty _backingProperty;
    private string _cimSessionComputerName;
    private Guid _cimSessionInstanceId;
    public string Name { get; }
    public object Value { get; public set; }
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    internal CimMethodParameterBackedByCimProperty(CimProperty backingProperty);
    internal CimMethodParameterBackedByCimProperty(CimProperty backingProperty, string cimSessionComputerName, Guid cimSessionInstanceId);
    private void Initialize(string cimSessionComputerName, Guid cimSessionInstanceId);
    private void ProcessPropertyValue(object objectValue);
    public virtual string get_Name();
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public virtual CimType get_CimType();
    public virtual CimFlags get_Flags();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Management.Infrastructure.Internal.Data.CimMethodParameterDeclarationCollection : CimReadOnlyKeyedCollection`1<CimMethodParameterDeclaration> {
    private MI_Class classHandle;
    private int methodIndex;
    public int Count { get; }
    public CimMethodParameterDeclaration Item { get; }
    internal CimMethodParameterDeclarationCollection(MI_Class classHandle, int index);
    public virtual int get_Count();
    public virtual CimMethodParameterDeclaration get_Item(string parameterName);
    [IteratorStateMachineAttribute("Microsoft.Management.Infrastructure.Internal.Data.CimMethodParameterDeclarationCollection/<GetEnumerator>d__7")]
public virtual IEnumerator`1<CimMethodParameterDeclaration> GetEnumerator();
}
internal class Microsoft.Management.Infrastructure.Internal.Data.CimMethodParameterDeclarationOfMethod : CimMethodParameterDeclaration {
    private MI_Class classHandle;
    private int index;
    private int parameterName;
    public string Name { get; }
    public CimType CimType { get; }
    public CimReadOnlyKeyedCollection`1<CimQualifier> Qualifiers { get; }
    public string ReferenceClassName { get; }
    internal CimMethodParameterDeclarationOfMethod(MI_Class classHandle, int index, int name);
    public virtual string get_Name();
    public virtual CimType get_CimType();
    public virtual CimReadOnlyKeyedCollection`1<CimQualifier> get_Qualifiers();
    public virtual string get_ReferenceClassName();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Management.Infrastructure.Internal.Data.CimMethodParameterQualifierCollection : CimReadOnlyKeyedCollection`1<CimQualifier> {
    private MI_Class classHandle;
    private int methodIndex;
    private int parameterName;
    public int Count { get; }
    public CimQualifier Item { get; }
    internal CimMethodParameterQualifierCollection(MI_Class classHandle, int methodIndex, int parameterName);
    public virtual int get_Count();
    public virtual CimQualifier get_Item(string qualifierName);
    [IteratorStateMachineAttribute("Microsoft.Management.Infrastructure.Internal.Data.CimMethodParameterQualifierCollection/<GetEnumerator>d__8")]
public virtual IEnumerator`1<CimQualifier> GetEnumerator();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Management.Infrastructure.Internal.Data.CimMethodQualifierCollection : CimReadOnlyKeyedCollection`1<CimQualifier> {
    private MI_Class classHandle;
    private int methodIndex;
    public int Count { get; }
    public CimQualifier Item { get; }
    internal CimMethodQualifierCollection(MI_Class classHandle, int index);
    public virtual int get_Count();
    public virtual CimQualifier get_Item(string methodName);
    [IteratorStateMachineAttribute("Microsoft.Management.Infrastructure.Internal.Data.CimMethodQualifierCollection/<GetEnumerator>d__7")]
public virtual IEnumerator`1<CimQualifier> GetEnumerator();
}
internal class Microsoft.Management.Infrastructure.Internal.Data.CimMethodQualifierDeclarationOfMethod : CimQualifier {
    private MI_Class classHandle;
    private int qualifierIndex;
    private int methodIndex;
    public string Name { get; }
    public object Value { get; }
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    internal CimMethodQualifierDeclarationOfMethod(MI_Class classHandle, int methodIndex, int qualifierIndex);
    public virtual string get_Name();
    public virtual object get_Value();
    public virtual CimType get_CimType();
    public virtual CimFlags get_Flags();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Management.Infrastructure.Internal.Data.CimPropertiesCollection : CimKeyedCollection`1<CimProperty> {
    private CimInstance _instance;
    public int Count { get; }
    public CimProperty Item { get; }
    internal CimPropertiesCollection(CimInstance instance);
    public virtual void Add(CimProperty newProperty);
    public virtual int get_Count();
    public virtual CimProperty get_Item(string propertyName);
    [IteratorStateMachineAttribute("Microsoft.Management.Infrastructure.Internal.Data.CimPropertiesCollection/<GetEnumerator>d__7")]
public virtual IEnumerator`1<CimProperty> GetEnumerator();
}
internal class Microsoft.Management.Infrastructure.Internal.Data.CimPropertyOfInstance : CimProperty {
    private CimInstance _instance;
    private int _index;
    private Lazy`1<CimPropertyStandalone> _actual;
    public string Name { get; }
    public object Value { get; public set; }
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    public bool IsValueModified { get; public set; }
    internal CimPropertyOfInstance(CimInstance instance, int index);
    public virtual string get_Name();
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public virtual CimType get_CimType();
    public virtual CimFlags get_Flags();
    public virtual bool get_IsValueModified();
    public virtual void set_IsValueModified(bool value);
    private CimPropertyStandalone GetProperty();
    private void ResetInnerProperty();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Management.Infrastructure.Internal.Data.CimPropertyQualifierCollection : CimReadOnlyKeyedCollection`1<CimQualifier> {
    private MI_Class classHandle;
    private string name;
    public int Count { get; }
    public CimQualifier Item { get; }
    internal CimPropertyQualifierCollection(MI_Class classHandle, string name);
    public virtual int get_Count();
    public virtual CimQualifier get_Item(string qualifierName);
    [IteratorStateMachineAttribute("Microsoft.Management.Infrastructure.Internal.Data.CimPropertyQualifierCollection/<GetEnumerator>d__7")]
public virtual IEnumerator`1<CimQualifier> GetEnumerator();
}
internal class Microsoft.Management.Infrastructure.Internal.Data.CimPropertyStandalone : CimProperty {
    private string _name;
    private object _value;
    private CimType _cimType;
    private CimFlags _flags;
    public string Name { get; }
    public object Value { get; public set; }
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    public bool IsValueModified { get; public set; }
    internal CimPropertyStandalone(string name, object value, CimType cimType, CimFlags flags);
    public virtual string get_Name();
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public virtual CimType get_CimType();
    public virtual CimFlags get_Flags();
    public virtual bool get_IsValueModified();
    public virtual void set_IsValueModified(bool value);
}
internal class Microsoft.Management.Infrastructure.Internal.Data.CimQualifierOfClass : CimQualifier {
    private MI_Class classHandle;
    private int index;
    public string Name { get; }
    public object Value { get; }
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    internal CimQualifierOfClass(MI_Class classHandle, int index);
    public virtual string get_Name();
    public virtual object get_Value();
    public virtual CimType get_CimType();
    public virtual CimFlags get_Flags();
}
internal class Microsoft.Management.Infrastructure.Internal.Data.CimQualifierOfMethodParameter : CimQualifier {
    private MI_Class classHandle;
    private int qualifierIndex;
    private int parameterName;
    private int methodIndex;
    public string Name { get; }
    public object Value { get; }
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    internal CimQualifierOfMethodParameter(MI_Class classHandle, int methodIndex, int parameterName, int index);
    public virtual string get_Name();
    public virtual object get_Value();
    public virtual CimType get_CimType();
    public virtual CimFlags get_Flags();
}
internal class Microsoft.Management.Infrastructure.Internal.Data.CimQualifierOfProperty : CimQualifier {
    private MI_Class classHandle;
    private int index;
    private string propertyName;
    public string Name { get; }
    public object Value { get; }
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    internal CimQualifierOfProperty(MI_Class classHandle, string propertyName, int index);
    public virtual string get_Name();
    public virtual object get_Value();
    public virtual CimType get_CimType();
    public virtual CimFlags get_Flags();
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Internal.Helpers : object {
    [ExtensionAttribute]
public static void SafeInvoke(EventHandler`1<T> eventHandler, object sender, T eventArgs);
    public static void ValidateNoNullElements(IList list);
    public static string ToStringFromNameAndValue(string name, object value);
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Internal.InstanceHandleExtensionMethods : object {
    [ExtensionAttribute]
public static MI_Instance Clone(MI_Instance handleToClone);
    [ExtensionAttribute]
public static MI_Instance[] CloneMIArray(MI_Instance[] arrayToClone);
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Internal.MiFlagsExtensionMethods : object {
    [ExtensionAttribute]
public static CimFlags ToCimFlags(MI_Flags miFlags);
    [ExtensionAttribute]
public static MI_Flags FromCimFlags(CimFlags cimFlags);
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Internal.MiTypeExtensionMethods : object {
    [ExtensionAttribute]
public static CimType ToCimType(MI_Type miType);
    [ExtensionAttribute]
public static MI_Type FromCimType(CimType cimType);
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Internal.NativeErrorCodeExtensionMethods : object {
    [ExtensionAttribute]
public static NativeErrorCode ToNativeErrorCode(MI_Result miResult);
}
internal enum Microsoft.Management.Infrastructure.Internal.Operations.CancellationMode : Enum {
    public int value__;
    public static CancellationMode NoCancellationOccured;
    public static CancellationMode ThrowOperationCancelledException;
    public static CancellationMode SilentlyStopProducingResults;
    public static CancellationMode IgnoreCancellationRequests;
}
internal abstract class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncCallbacksReceiverBase : object {
    private CimOperation _operation;
    private object _operationLock;
    private List`1<Action`1<CimOperation>> _operationPendingActions;
    private object _suppressFurtherUserCallbacksLock;
    private bool _suppressFurtherUserCallbacks;
    protected CimOperation Operation { get; }
    internal void SetOperation(CimOperation operation);
    private void SupressCallbacksWhenRequestedViaCancellation(object sender, EventArgs e);
    protected void InvokeWhenOperationIsSet(Action`1<CimOperation> action);
    protected CimOperation get_Operation();
    private static void DisposeOperationWhenPossibleWorker(CimOperation cimOperation);
    protected void DisposeOperationWhenPossible();
    internal void CallUnderOriginalExecutionContext(Action action);
    internal void CallIntoUserCallback(CimOperationCallbackProcessingContext callbackProcessingContext, Action userCallback, bool serializeCallbacks, bool suppressFurtherUserCallbacks);
    internal abstract virtual void ReportInternalError(CimOperationCallbackProcessingContext callbackProcessingContext, Exception internalError);
    private void ReportInternalErrorCore(CimOperationCallbackProcessingContext callbackProcessingContext, Exception internalError);
    public virtual void RegisterAcceptedAsyncCallbacks(MI_OperationCallbacks operationCallbacks, CimOperationOptions operationOptions);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncCancellationDisposable : object {
    private CimOperation _operation;
    private bool _disposed;
    private object _disposeThreadSafetyLock;
    internal CimAsyncCancellationDisposable(CimOperation operation);
    public sealed virtual void Dispose();
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncClassObservable : CimAsyncObservableBase`2<CimAsyncClassObserverProxy, CimClass> {
    private bool _shortenLifetimeOfResults;
    internal CimAsyncClassObservable(CimOperationOptions operationOptions, Func`2<CimAsyncCallbacksReceiverBase, MI_Operation> operationStarter);
    internal virtual CimAsyncClassObserverProxy CreateObserverProxy(IObserver`1<CimClass> observer);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncClassObserverProxy : CimAsyncObserverProxyBase`1<CimClass> {
    private bool _shortenLifetimeOfResults;
    internal CimAsyncClassObserverProxy(IObserver`1<CimClass> observer, bool shortenLifetimeOfResults);
    internal void ClassCallback(CimOperationCallbackProcessingContext callbackProcessingContext, MI_Operation operationHandle, MI_Class ClassHandle, bool moreResults, MI_Result operationResult, string errorMessage, MI_Instance errorDetailsHandle);
    public virtual void RegisterAcceptedAsyncCallbacks(MI_OperationCallbacks operationCallbacks, CimOperationOptions operationOptions);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncDelegatedObservable`1 : object {
    private Action`1<IObserver`1<T>> _subscribe;
    internal CimAsyncDelegatedObservable`1(Action`1<IObserver`1<T>> subscribe);
    public sealed virtual IDisposable Subscribe(IObserver`1<T> observer);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncIndicationObservable : CimAsyncObservableBase`2<CimAsyncIndicationObserverProxy, CimSubscriptionResult> {
    private bool _shortenLifetimeOfResults;
    internal CimAsyncIndicationObservable(CimOperationOptions operationOptions, Func`2<CimAsyncCallbacksReceiverBase, MI_Operation> operationStarter);
    internal virtual CimAsyncIndicationObserverProxy CreateObserverProxy(IObserver`1<CimSubscriptionResult> observer);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncIndicationObserverProxy : CimAsyncObserverProxyBase`1<CimSubscriptionResult> {
    private bool _shortenLifetimeOfResults;
    internal CimAsyncIndicationObserverProxy(IObserver`1<CimSubscriptionResult> observer, bool shortenLifetimeOfResults);
    internal void IndicationResultCallback(CimOperationCallbackProcessingContext callbackProcessingContext, MI_Operation operationHandle, MI_Instance instanceHandle, string bookMark, string machineID, bool moreResults, MI_Result operationResult, string errorMessage, MI_Instance errorDetailsHandle);
    public virtual void RegisterAcceptedAsyncCallbacks(MI_OperationCallbacks operationCallbacks, CimOperationOptions operationOptions);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncInstanceObservable : CimAsyncObservableBase`2<CimAsyncInstanceObserverProxy, CimInstance> {
    private bool _shortenLifetimeOfResults;
    private Guid _CimSessionInstanceID;
    private string _CimSessionComputerName;
    internal CimAsyncInstanceObservable(CimOperationOptions operationOptions, Guid cimSessionInstanceID, string cimSessionComputerName, Func`2<CimAsyncCallbacksReceiverBase, MI_Operation> operationStarter);
    internal virtual CimAsyncInstanceObserverProxy CreateObserverProxy(IObserver`1<CimInstance> observer);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncInstanceObserverProxy : CimAsyncObserverProxyBase`1<CimInstance> {
    private bool _shortenLifetimeOfResults;
    private Guid _CimSessionInstanceID;
    private string _CimSessionComputerName;
    internal CimAsyncInstanceObserverProxy(IObserver`1<CimInstance> observer, Guid cimSessionInstanceID, string cimSessionComputerName, bool shortenLifetimeOfResults);
    internal void InstanceResultCallback(CimOperationCallbackProcessingContext callbackProcessingContext, MI_Operation operationHandle, MI_Instance instanceHandle, bool moreResults, MI_Result operationResult, string errorMessage, MI_Instance errorDetailsHandle);
    public virtual void RegisterAcceptedAsyncCallbacks(MI_OperationCallbacks operationCallbacks, CimOperationOptions operationOptions);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncMethodResultObservable : CimAsyncObservableBase`2<CimAsyncMethodResultObserverProxy, CimMethodResultBase> {
    private bool _shortenLifetimeOfResults;
    private Guid _CimSessionInstanceID;
    private string _CimSessionComputerName;
    internal CimAsyncMethodResultObservable(CimOperationOptions operationOptions, Guid cimSessionInstanceID, string cimSessionComputerName, Func`2<CimAsyncCallbacksReceiverBase, MI_Operation> operationStarter);
    internal virtual CimAsyncMethodResultObserverProxy CreateObserverProxy(IObserver`1<CimMethodResultBase> observer);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncMethodResultObserverProxy : CimAsyncObserverProxyBase`1<CimMethodResultBase> {
    private bool _shortenLifetimeOfResults;
    private Guid _CimSessionInstanceID;
    private string _CimSessionComputerName;
    internal CimAsyncMethodResultObserverProxy(IObserver`1<CimMethodResultBase> observer, Guid cimSessionInstanceID, string cimSessionComputerName, bool shortenLifetimeOfResults);
    internal void InstanceResultCallback(CimOperationCallbackProcessingContext callbackProcessingContext, MI_Operation operationHandle, MI_Instance instanceHandle, bool moreResults, MI_Result operationResult, string errorMessage, MI_Instance errorDetailsHandle);
    public virtual void RegisterAcceptedAsyncCallbacks(MI_OperationCallbacks operationCallbacks, CimOperationOptions operationOptions);
}
internal abstract class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncObservableBase`2 : object {
    private Func`2<CimAsyncCallbacksReceiverBase, MI_Operation> _operationStarter;
    private Nullable`1<CancellationToken> _cancellationToken;
    private bool _reportOperationStarted;
    internal CimAsyncObservableBase`2(CimOperationOptions operationOptions, Func`2<CimAsyncCallbacksReceiverBase, MI_Operation> operationStarter);
    internal abstract virtual TObserverProxy CreateObserverProxy(IObserver`1<TResult> observer);
    public sealed virtual IDisposable Subscribe(IObserver`1<TResult> observer);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncObserverProxyBase`1 : CimAsyncCallbacksReceiverBase {
    private IObserver`1<T> _observer;
    private bool _reportOperationStarted;
    internal CimAsyncObserverProxyBase`1(IObserver`1<T> observer);
    internal void SetReportOperationStarted(bool reportOperationStarted);
    internal void ProcessNativeCallback(CimOperationCallbackProcessingContext callbackProcessingContext, T currentItem, bool moreResults, MI_Result operationResult, string errorMessage, MI_Instance errorDetailsHandle);
    private void ProcessEndOfResultsWorker(CimOperationCallbackProcessingContext callbackProcessingContext, CimOperation cimOperation, Exception exception);
    private void OnErrorInternal(CimOperationCallbackProcessingContext callbackProcessingContext, Exception exception);
    private void OnCompletedInternal(CimOperationCallbackProcessingContext callbackProcessingContext);
    private void OnNextInternal(CimOperationCallbackProcessingContext callbackProcessingContext, T item);
    internal virtual void ReportInternalError(CimOperationCallbackProcessingContext callbackProcessingContext, Exception internalError);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimOperation : object {
    private MI_Operation _handle;
    private IDisposable _cancellationTokenRegistration;
    private object _cancellationModeLock;
    private CancellationMode _cancellationMode;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<EventArgs> Cancelled;
    private bool _disposed;
    internal CancellationMode CancellationMode { get; }
    internal MI_Operation Handle { get; }
    internal CimOperation(MI_Operation handle, Nullable`1<CancellationToken> cancellationToken);
    internal CancellationMode get_CancellationMode();
    internal void Cancel(CancellationMode cancellationMode);
    [CompilerGeneratedAttribute]
internal void add_Cancelled(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_Cancelled(EventHandler`1<EventArgs> value);
    internal void IgnoreSubsequentCancellationRequests();
    internal MI_Operation get_Handle();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void AssertNotDisposed();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0();
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimSyncClassEnumerable : CimSyncEnumerableBase`2<CimClass, CimSyncClassEnumerator> {
    private bool _shortenLifetimeOfResults;
    internal CimSyncClassEnumerable(CimOperationOptions operationOptions, Func`2<CimAsyncCallbacksReceiverBase, MI_Operation> operationStarter);
    internal virtual CimSyncClassEnumerator CreateEnumerator();
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimSyncClassEnumerator : CimSyncEnumeratorBase`1<CimClass> {
    internal CimSyncClassEnumerator(bool shortenLifetimeOfResults);
    internal virtual MI_Result NativeMoveNext(MI_Operation operationHandle, CimClass& currentItem, Boolean& moreResults, MI_Result& operationResult, String& errorMessage, MI_Instance& errorDetailsHandle);
}
internal abstract class Microsoft.Management.Infrastructure.Internal.Operations.CimSyncEnumerableBase`2 : object {
    private Nullable`1<CancellationToken> _cancellationToken;
    private Func`2<CimAsyncCallbacksReceiverBase, MI_Operation> _operationStarter;
    internal CimSyncEnumerableBase`2(CimOperationOptions operationOptions, Func`2<CimAsyncCallbacksReceiverBase, MI_Operation> operationStarter);
    internal abstract virtual TEnumerator CreateEnumerator();
    public sealed virtual IEnumerator`1<TItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal abstract class Microsoft.Management.Infrastructure.Internal.Operations.CimSyncEnumeratorBase`1 : CimAsyncCallbacksReceiverBase {
    private bool _moreResultsAreExpected;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ShortenLifetimeOfResults>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T <Current>k__BackingField;
    private bool _disposed;
    private object _disposeThreadSafetyLock;
    private Exception _internalErrorWhileProcessingAsyncCallback;
    private object _internalErrorWhileProcessingAsyncCallbackLock;
    internal bool ShortenLifetimeOfResults { get; private set; }
    public T Current { get; private set; }
    private object System.Collections.IEnumerator.Current { get; }
    internal CimSyncEnumeratorBase`1(bool shortenLifetimeOfResults);
    [CompilerGeneratedAttribute]
internal bool get_ShortenLifetimeOfResults();
    [CompilerGeneratedAttribute]
private void set_ShortenLifetimeOfResults(bool value);
    internal abstract virtual MI_Result NativeMoveNext(MI_Operation operationHandle, T& currentItem, Boolean& moreResults, MI_Result& operationResult, String& errorMessage, MI_Instance& errorDetailsHandle);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(T value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void DisposeCurrentItemIfNeeded();
    internal void AssertNotDisposed();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    internal virtual void ReportInternalError(CimOperationCallbackProcessingContext callbackProcessingContext, Exception internalError);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimSyncIndicationEnumerable : CimSyncEnumerableBase`2<CimSubscriptionResult, CimSyncIndicationEnumerator> {
    private bool _shortenLifetimeOfResults;
    internal CimSyncIndicationEnumerable(CimOperationOptions operationOptions, Func`2<CimAsyncCallbacksReceiverBase, MI_Operation> operationStarter);
    internal virtual CimSyncIndicationEnumerator CreateEnumerator();
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimSyncIndicationEnumerator : CimSyncEnumeratorBase`1<CimSubscriptionResult> {
    internal CimSyncIndicationEnumerator(bool shortenLifetimeOfResults);
    internal virtual MI_Result NativeMoveNext(MI_Operation operationHandle, CimSubscriptionResult& currentItem, Boolean& moreResults, MI_Result& operationResult, String& errorMessage, MI_Instance& errorDetailsHandle);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimSyncInstanceEnumerable : CimSyncEnumerableBase`2<CimInstance, CimSyncInstanceEnumerator> {
    private bool _shortenLifetimeOfResults;
    private Guid _CimSessionInstanceID;
    private string _CimSessionComputerName;
    internal CimSyncInstanceEnumerable(CimOperationOptions operationOptions, Guid cimSessionInstanceID, string cimSessionComputerName, Func`2<CimAsyncCallbacksReceiverBase, MI_Operation> operationStarter);
    internal virtual CimSyncInstanceEnumerator CreateEnumerator();
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimSyncInstanceEnumerator : CimSyncEnumeratorBase`1<CimInstance> {
    private Guid _CimSessionInstanceID;
    private string _CimSessionComputerName;
    internal CimSyncInstanceEnumerator(Guid cimSessionInstanceID, string cimSessionComputerName, bool shortenLifetimeOfResults);
    internal virtual MI_Result NativeMoveNext(MI_Operation operationHandle, CimInstance& currentItem, Boolean& moreResults, MI_Result& operationResult, String& errorMessage, MI_Instance& errorDetailsHandle);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.ConvertingObservable`2 : object {
    private IObservable`1<TWrappedType> _wrappedObservable;
    internal ConvertingObservable`2(IObservable`1<TWrappedType> wrappedObservable);
    public sealed virtual IDisposable Subscribe(IObserver`1<TTargetType> observer);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.EmptyDisposable : object {
    private static Lazy`1<EmptyDisposable> lazySingleton;
    internal static EmptyDisposable Singleton { get; }
    private static EmptyDisposable();
    public sealed virtual void Dispose();
    internal static EmptyDisposable get_Singleton();
}
internal static class Microsoft.Management.Infrastructure.Internal.SanityHelpers : object {
    public static void AssertUnusedArg(object shouldBeNull);
}
internal static class Microsoft.Management.Infrastructure.Internal.ValueHelpers : object {
    internal static void ThrowIfMismatchedType(MI_Type type, object managedValue);
    internal static object CloneManagedObject(object managedValue, CimType type);
    internal static MI_Value ConvertToNativeLayer(object value, CimType cimType);
    internal static MI_Value ConvertToNativeLayer(object value);
    internal static object ConvertFromNativeLayer(MI_Value value, MI_Type type, MI_Flags flags, CimInstance parent, bool clone);
}
internal class Microsoft.Management.Infrastructure.Native.MI_Application : MI_NativeObjectWithFT`1<MI_ApplicationFT> {
    internal static MI_Application Null { get; }
    private static MI_Application();
    private MI_Application(bool isDirect);
    private MI_Application(IntPtr existingPtr);
    internal static MI_Result Initialize(string applicationId, MI_Instance& extendedError, MI_Application& application);
    internal MI_Result NewSession(string protocol, string destination, MI_DestinationOptions options, MI_SessionCreationCallbacks callbacks, MI_Instance& extendedError, MI_Session& session);
    internal static MI_Application NewDirectPtr();
    internal static MI_Application NewIndirectPtr();
    internal static MI_Application NewFromDirectPtr(IntPtr ptr);
    internal static MI_Application get_Null();
    internal MI_Result Close();
    internal MI_Result NewHostedProvider(string namespaceName, string providerName, IntPtr mi_Main, MI_Instance& extendedError, IntPtr provider);
    internal MI_Result NewInstance(string className, MI_ClassDecl classRTTI, MI_Instance& instance);
    internal MI_Result NewDestinationOptions(MI_DestinationOptions& options);
    internal MI_Result NewOperationOptions(bool customOptionsMustUnderstand, MI_OperationOptions& operationOptions);
    internal MI_Result NewSubscriptionDeliveryOptions(MI_SubscriptionDeliveryType deliveryType, MI_SubscriptionDeliveryOptions& deliveryOptions);
    internal MI_Result NewSerializer(MI_SerializerFlags flags, string format, MI_Serializer& serializer);
    internal MI_Result NewDeserializer(MI_SerializerFlags flags, string format, MI_Deserializer& deserializer);
    internal MI_Result NewInstanceFromClass(string className, MI_Class classObject, MI_Instance& instance);
    internal MI_Result NewParameterSet(MI_ClassDecl classDecl, MI_ParameterSet& parameterSet);
}
internal class Microsoft.Management.Infrastructure.Native.MI_Array : ValueType {
    internal IntPtr data;
    internal UInt32 size;
    public static int MI_ArraySize;
    private static MI_Array();
    public static T[] ReadAsManagedPointerArray(IntPtr miArrayPtr, Func`2<IntPtr, T> conversion);
    public static void WritePointerArray(IntPtr miArrayPtr, IntPtr[] ptrs);
    public static void WriteNativeObjectPointers(IntPtr miArrayPtr, MI_NativeObject[] objects);
}
public class Microsoft.Management.Infrastructure.Native.MI_AuthType : object {
    public static string DEFAULT;
    public static string NONE;
    public static string DIGEST;
    public static string NEGO_WITH_CREDS;
    public static string NEGO_NO_CREDS;
    public static string BASIC;
    public static string KERBEROS;
    public static string CLIENT_CERTS;
    public static string NTLM;
    public static string CREDSSP;
    public static string ISSUER_CERT;
    private static MI_AuthType();
}
public enum Microsoft.Management.Infrastructure.Native.MI_CallbackMode : Enum {
    public UInt32 value__;
    public static MI_CallbackMode Report;
    public static MI_CallbackMode Inquire;
    public static MI_CallbackMode Ignore;
}
internal enum Microsoft.Management.Infrastructure.Native.MI_CancellationReason : Enum {
    public UInt32 value__;
    public static MI_CancellationReason MI_REASON_NONE;
    public static MI_CancellationReason MI_REASON_TIMEOUT;
    public static MI_CancellationReason MI_REASON_SHUTDOWN;
    public static MI_CancellationReason MI_REASON_SERVICESTOP;
}
internal class Microsoft.Management.Infrastructure.Native.MI_Class : MI_NativeObjectWithFT`1<MI_ClassFT> {
    private static int MI_ClassMembersFTOffset;
    private static int MI_ClassMembersSize;
    internal static MI_Class Null { get; }
    protected int FunctionTableOffset { get; }
    protected int MembersSize { get; }
    private MI_Class(bool isDirect);
    private MI_Class(IntPtr existingPtr);
    private static MI_Class();
    internal MI_Result GetElement(string name, MI_Value& value, Boolean& valueExists, MI_Type& type, String& referenceClass, MI_QualifierSet& qualifierSet, MI_Flags& flags, UInt32& index);
    internal MI_Result GetElementAt(UInt32 index, String& name, MI_Value& value, Boolean& valueExists, MI_Type& type, String& referenceClass, MI_QualifierSet& qualifierSet, MI_Flags& flags);
    internal MI_Result GetClassQualifierSet(MI_QualifierSet& qualifierSet);
    internal MI_Result GetMethod(string name, MI_QualifierSet& qualifierSet, MI_ParameterSet& parameterSet, UInt32& index);
    internal MI_Result GetMethodAt(UInt32 index, String& name, MI_QualifierSet& qualifierSet, MI_ParameterSet& parameterSet);
    internal static MI_Class NewDirectPtr();
    internal static MI_Class NewIndirectPtr();
    internal static MI_Class NewFromDirectPtr(IntPtr ptr);
    internal static MI_Class get_Null();
    protected virtual int get_FunctionTableOffset();
    protected virtual int get_MembersSize();
    internal MI_Result GetClassName(String& className);
    internal MI_Result GetNameSpace(String& nameSpace);
    internal MI_Result GetServerName(String& serverName);
    internal MI_Result GetElementCount(UInt32& count);
    internal MI_Result GetMethodCount(UInt32& count);
    internal MI_Result GetParentClassName(String& name);
    internal MI_Result GetParentClass(MI_Class& parentClass);
    internal MI_Result Delete();
    internal MI_Result Clone(MI_Class& newClass);
}
internal class Microsoft.Management.Infrastructure.Native.MI_ClassDecl : MI_NativeObject {
    private static int MI_ClassDeclMembersSize;
    internal static MI_ClassDecl Null { get; }
    protected int MembersSize { get; }
    private MI_ClassDecl(bool isDirect);
    private MI_ClassDecl(IntPtr existingPtr);
    private static MI_ClassDecl();
    internal static MI_ClassDecl NewDirectPtr();
    internal static MI_ClassDecl NewIndirectPtr();
    internal static MI_ClassDecl NewFromDirectPtr(IntPtr ptr);
    internal static MI_ClassDecl get_Null();
    protected virtual int get_MembersSize();
}
internal class Microsoft.Management.Infrastructure.Native.MI_Datetime : ValueType {
    internal bool isTimestamp;
    internal MI_Timestamp timestamp;
    internal MI_Interval interval;
    private static DateTime maxValidCimTimestamp;
    internal MI_Datetime(TimeSpan interval);
    internal MI_Datetime(DateTime datetime);
    private static MI_Datetime();
    internal static MI_Datetime ConvertToDateTime(object value);
    internal object ConvertFromNativeLayer();
}
internal class Microsoft.Management.Infrastructure.Native.MI_Deserializer : MI_NativeObjectWithFT`1<MI_MOFDeserializerFT> {
    internal static int MI_DeserializerMembersReserved2Offset;
    private static int MI_DeserializerMembersSize;
    private string format;
    internal static MI_Deserializer Null { get; }
    protected int FunctionTableOffset { get; }
    protected int MembersSize { get; }
    private MI_DeserializerFT commonFT { get; }
    private MI_Deserializer(string format);
    private MI_Deserializer(string format, Func`1<MI_MOFDeserializerFT> mftThunk);
    private static MI_Deserializer();
    internal static MI_Deserializer NewDirectPtr(string format);
    internal static MI_Deserializer get_Null();
    protected virtual int get_FunctionTableOffset();
    protected virtual int get_MembersSize();
    internal MI_Result Close();
    internal MI_Result DeserializeClass(MI_SerializerFlags flags, IntPtr serializedBuffer, UInt32 serializedBufferLength, MI_Class parentClass, string serverName, string namespaceName, IntPtr classObjectNeeded, IntPtr classObjectNeededContext, UInt32& serializedBufferRead, MI_Class& classObject, MI_Instance& cimErrorDetails);
    internal MI_Result DeserializeClass(MI_SerializerFlags flags, Byte[] serializedBuffer, MI_Class parentClass, string serverName, string namespaceName, IntPtr classObjectNeeded, IntPtr classObjectNeededContext, UInt32& serializedBufferRead, MI_Class& classObject, MI_Instance& cimErrorDetails);
    internal MI_Result Class_GetClassName(IntPtr serializedBuffer, UInt32 serializedBufferLength, string className, UInt32& classNameLength, MI_Instance& cimErrorDetails);
    internal MI_Result Class_GetParentClassName(IntPtr serializedBuffer, UInt32 serializedBufferLength, string parentClassName, UInt32& parentClassNameLength, MI_Instance& cimErrorDetails);
    internal MI_Result DeserializeInstance(MI_SerializerFlags flags, Byte[] serializedBuffer, MI_Class[] classObjects, MI_Deserializer_ClassObjectNeeded classObjectNeeded, UInt32& serializedBufferRead, MI_Instance& instanceObject, MI_Instance& cimErrorDetails);
    internal MI_Result DeserializeClassArray(MI_SerializerFlags flags, MI_OperationOptions options, MI_DeserializerCallbacks deserializerCallbacks, IntPtr serializedBuffer, UInt32 serializedBufferLength, MI_Class[] classDefinitions, string serverName, string namespaceName, UInt32& serializedBufferRead, MI_ExtendedArray& classes, MI_Instance& cimErrorDetails);
    internal MI_Result DeserializeClassArray(MI_SerializerFlags flags, MI_OperationOptions options, MI_DeserializerCallbacks deserializerCallbacks, Byte[] serializedBuffer, MI_Class[] classDefinitions, string serverName, string namespaceName, UInt32& serializedBufferRead, MI_ExtendedArray& classes, MI_Instance& cimErrorDetails);
    internal MI_Result DeserializeInstanceArray(MI_SerializerFlags flags, MI_OperationOptions options, MI_DeserializerCallbacks deserializerCallbacks, IntPtr serializedBuffer, UInt32 serializedBufferLength, MI_Class[] classDefinitions, UInt32& serializedBufferRead, MI_ExtendedArray& instances, MI_Instance& cimErrorDetails);
    internal MI_Result DeserializeInstanceArray(MI_SerializerFlags flags, MI_OperationOptions options, MI_DeserializerCallbacks deserializerCallbacks, Byte[] serializedBuffer, MI_Class[] classDefinitions, UInt32& serializedBufferRead, MI_ExtendedArray& instances, MI_Instance& cimErrorDetails);
    internal MI_Result Instance_GetClassName(IntPtr serializedBuffer, UInt32 serializedBufferLength, string className, UInt32& classNameLength, MI_Instance& cimErrorDetails);
    private MI_Result DeserializeInstance(MI_SerializerFlags flags, IntPtr serializedBuffer, UInt32 serializedBufferLength, MI_Class[] classObjects, MI_Deserializer_ClassObjectNeededNative classObjectNeeded, IntPtr classObjectNeededContext, UInt32& serializedBufferRead, MI_Instance& instanceObject, MI_Instance& cimErrorDetails);
    private MI_DeserializerFT get_commonFT();
}
internal class Microsoft.Management.Infrastructure.Native.MI_DeserializerCallbacks : object {
    private IntPtr classObjectNeededContext;
    internal MI_Deserializer_ClassObjectNeeded classObjectNeeded;
    private IntPtr includedFileContext;
    private IntPtr getIncludedFileContent;
    private IntPtr freeIncludedFileContent;
    private IntPtr reserved_instanceResultContext;
    private IntPtr reserved_instanceResult;
    private IntPtr reserved_classResultcontext;
    private IntPtr reserved_classResult;
    private IntPtr classObjectNeededOnIdContext;
    private IntPtr classObjectNeededOnId;
    private IntPtr classObjectAndIdContext;
    private IntPtr classObjectAndId;
    private IntPtr qualifierDeclNeededContext;
    private IntPtr qualifierDeclNeeded;
    internal MI_DeserializerCallbacksNative GetNativeCallbacks(string format);
    internal static MI_Deserializer_ClassObjectNeededNative GetNativeClassObjectNeededCallback(string format, MI_Deserializer_ClassObjectNeeded managedCallback);
}
internal class Microsoft.Management.Infrastructure.Native.MI_DestinationOptions : MI_NativeObjectWithFT`1<MI_DestinationOptionsFT> {
    internal static MI_DestinationOptions Null { get; }
    private static MI_DestinationOptions();
    private MI_DestinationOptions(bool isDirect);
    private MI_DestinationOptions(IntPtr existingPtr);
    internal MI_Result SetInterval(string optionName, MI_Interval value, MI_DestinationOptionsFlags flags);
    internal MI_Result GetInterval(string optionName, MI_Interval& value, UInt32& index, MI_DestinationOptionsFlags& flags);
    internal static MI_DestinationOptions NewDirectPtr();
    internal static MI_DestinationOptions NewIndirectPtr();
    internal static MI_DestinationOptions NewFromDirectPtr(IntPtr ptr);
    internal static MI_DestinationOptions get_Null();
    internal void Delete();
    internal MI_Result SetString(string optionName, string value, MI_DestinationOptionsFlags flags);
    internal MI_Result SetNumber(string optionName, UInt32 value, MI_DestinationOptionsFlags flags);
    internal MI_Result AddCredentials(string optionName, MI_UserCredentials credentials, MI_DestinationOptionsFlags flags);
    internal MI_Result GetString(string optionName, String& value, UInt32& index, MI_DestinationOptionsFlags& flags);
    internal MI_Result GetNumber(string optionName, UInt32& value, UInt32& index, MI_DestinationOptionsFlags& flags);
    internal MI_Result GetOptionCount(UInt32& count);
    internal MI_Result GetOptionAt(UInt32 index, String& optionName, MI_Value value, MI_Type& type, MI_DestinationOptionsFlags& flags);
    internal MI_Result GetOption(string optionName, MI_Value value, MI_Type& type, UInt32& index, MI_DestinationOptionsFlags& flags);
    internal MI_Result GetCredentialsCount(UInt32& count);
    internal MI_Result GetCredentialsAt(UInt32 index, String& optionName, MI_UserCredentials& credentials, MI_DestinationOptionsFlags& flags);
    internal MI_Result GetCredentialsPasswordAt(UInt32 index, String& optionName, string password, UInt32 bufferLength, UInt32& passwordLength, MI_DestinationOptionsFlags& flags);
    internal MI_Result Clone(MI_DestinationOptions& newDestinationOptions);
}
internal enum Microsoft.Management.Infrastructure.Native.MI_DestinationOptionsFlags : Enum {
    public UInt32 value__;
    public static MI_DestinationOptionsFlags Unused;
}
internal class Microsoft.Management.Infrastructure.Native.MI_ExtendedArray : MI_NativeObjectWithFT`1<MI_ExtendedArrayFT> {
    private static int MI_ExtendedArrayMembersFTOffset;
    private static int MI_ExtendedArrayMembersSize;
    internal static MI_ExtendedArray Null { get; }
    protected int FunctionTableOffset { get; }
    protected int MembersSize { get; }
    private MI_ExtendedArray(bool isDirect);
    private MI_ExtendedArray(IntPtr existingPtr);
    private static MI_ExtendedArray();
    protected virtual override void Finalize();
    internal static MI_ExtendedArray NewDirectPtr();
    internal static MI_ExtendedArray NewDirectPtr(IntPtr[] ptrs);
    internal static MI_ExtendedArray NewIndirectPtr();
    internal static MI_ExtendedArray NewFromDirectPtr(IntPtr ptr);
    internal void AssertValidInternalState();
    public T[] ReadAsManagedPointerArray(Func`2<IntPtr, T> conversion);
    public void WritePointerArray(IntPtr[] ptrs);
    internal static MI_ExtendedArray get_Null();
    protected virtual int get_FunctionTableOffset();
    protected virtual int get_MembersSize();
    internal MI_Result Delete();
}
[FlagsAttribute]
internal enum Microsoft.Management.Infrastructure.Native.MI_Flags : Enum {
    public int value__;
    public static MI_Flags None;
    public static MI_Flags MI_FLAG_CLASS;
    public static MI_Flags MI_FLAG_METHOD;
    public static MI_Flags MI_FLAG_PROPERTY;
    public static MI_Flags MI_FLAG_PARAMETER;
    public static MI_Flags MI_FLAG_ASSOCIATION;
    public static MI_Flags MI_FLAG_INDICATION;
    public static MI_Flags MI_FLAG_REFERENCE;
    public static MI_Flags MI_FLAG_ANY;
    public static MI_Flags MI_FLAG_ENABLEOVERRIDE;
    public static MI_Flags MI_FLAG_DISABLEOVERRIDE;
    public static MI_Flags MI_FLAG_RESTRICTED;
    public static MI_Flags MI_FLAG_TOSUBCLASS;
    public static MI_Flags MI_FLAG_TRANSLATABLE;
    public static MI_Flags MI_FLAG_KEY;
    public static MI_Flags MI_FLAG_IN;
    public static MI_Flags MI_FLAG_OUT;
    public static MI_Flags MI_FLAG_REQUIRED;
    public static MI_Flags MI_FLAG_STATIC;
    public static MI_Flags MI_FLAG_ABSTRACT;
    public static MI_Flags MI_FLAG_TERMINAL;
    public static MI_Flags MI_FLAG_EXPENSIVE;
    public static MI_Flags MI_FLAG_STREAM;
    public static MI_Flags MI_FLAG_READONLY;
    public static MI_Flags MI_FLAG_EXTENDED;
    public static MI_Flags MI_FLAG_NOT_MODIFIED;
    public static MI_Flags MI_FLAG_VERSION;
    public static MI_Flags MI_FLAG_NULL;
    public static MI_Flags MI_FLAG_BORROW;
    public static MI_Flags MI_FLAG_ADOPT;
}
internal static class Microsoft.Management.Infrastructure.Native.MI_FunctionTableCache : object {
    internal static ConcurrentDictionary`2<IntPtr, object> functionPtrCache;
    private static MI_FunctionTableCache();
    internal static T GetFTAsOffsetFromPtr(IntPtr ptr, int offset);
}
public enum Microsoft.Management.Infrastructure.Native.MI_ImpersonationType : Enum {
    public UInt32 value__;
    public static MI_ImpersonationType Default;
    public static MI_ImpersonationType None;
    public static MI_ImpersonationType Identify;
    public static MI_ImpersonationType Impersonate;
    public static MI_ImpersonationType Delegate;
}
internal class Microsoft.Management.Infrastructure.Native.MI_Instance : MI_NativeObjectWithFT`1<MI_InstanceFT> {
    private static int MI_InstanceMembersFTOffset;
    private static int MI_InstanceMembersSize;
    internal static MI_Instance Null { get; }
    protected int FunctionTableOffset { get; }
    protected int MembersSize { get; }
    private MI_Instance(bool isDirect);
    private MI_Instance(IntPtr existingPtr);
    private static MI_Instance();
    internal MI_Result GetElement(string name, MI_Value& value, MI_Type& type, MI_Flags& flags, UInt32& index);
    internal MI_Result GetElementAt(UInt32 index, String& name, MI_Value& value, MI_Type& type, MI_Flags& flags);
    internal static MI_Instance NewDirectPtr();
    internal static MI_Instance NewIndirectPtr();
    internal static MI_Instance NewFromDirectPtr(IntPtr ptr);
    internal void AssertValidInternalState();
    internal static MI_Instance get_Null();
    protected virtual int get_FunctionTableOffset();
    protected virtual int get_MembersSize();
    internal MI_Result Clone(MI_Instance& newInstance);
    internal MI_Result Destruct();
    internal MI_Result Delete();
    internal MI_Result IsA(MI_ClassDecl classDecl, Boolean& flag);
    internal MI_Result GetClassName(String& className);
    internal MI_Result SetNameSpace(string nameSpace);
    internal MI_Result GetNameSpace(String& nameSpace);
    internal MI_Result GetElementCount(UInt32& count);
    internal MI_Result AddElement(string name, MI_Value value, MI_Type type, MI_Flags flags);
    internal MI_Result SetElement(string name, MI_Value value, MI_Type type, MI_Flags flags);
    internal MI_Result SetElementAt(UInt32 index, MI_Value value, MI_Type type, MI_Flags flags);
    internal MI_Result ClearElement(string name);
    internal MI_Result ClearElementAt(UInt32 index);
    internal MI_Result GetServerName(String& name);
    internal MI_Result SetServerName(string name);
    internal MI_Result GetClass(MI_Class& instanceClass);
}
internal class Microsoft.Management.Infrastructure.Native.MI_Interval : ValueType {
    internal UInt32 days;
    internal UInt32 hours;
    internal UInt32 minutes;
    internal UInt32 seconds;
    internal UInt32 microseconds;
    internal UInt32 __padding1;
    internal UInt32 __padding2;
    internal UInt32 __padding3;
    public static TimeSpan op_Implicit(MI_Interval interval);
    public static MI_Interval op_Implicit(TimeSpan timespan);
}
[FlagsAttribute]
internal enum Microsoft.Management.Infrastructure.Native.MI_ModuleFlags : Enum {
    public int value__;
    public static MI_ModuleFlags MI_MODULE_FLAG_STANDARD_QUALIFIERS;
    public static MI_ModuleFlags MI_MODULE_FLAG_DESCRIPTIONS;
    public static MI_ModuleFlags MI_MODULE_FLAG_VALUES;
    public static MI_ModuleFlags MI_MODULE_FLAG_MAPPING_STRINGS;
    public static MI_ModuleFlags MI_MODULE_FLAG_BOOLEANS;
    public static MI_ModuleFlags MI_MODULE_FLAG_CPLUSPLUS;
    public static MI_ModuleFlags MI_MODULE_FLAG_LOCALIZED;
    public static MI_ModuleFlags MI_MODULE_FLAG_FILTER_SUPPORT;
}
internal abstract class Microsoft.Management.Infrastructure.Native.MI_NativeObject : object {
    protected static int MI_NativeObjectNormalMembersLayoutSize;
    protected IntPtr allocatedData;
    protected bool isDirect;
    protected int MembersSize { get; }
    internal bool IsNull { get; }
    internal IntPtr Ptr { get; }
    protected MI_NativeObject(bool isDirect);
    protected MI_NativeObject(IntPtr existingPtr);
    private static MI_NativeObject();
    public virtual void Dispose();
    protected virtual int get_MembersSize();
    internal static ArrayPtr GetPointerArray(MI_NativeObject[] objects);
    internal bool get_IsNull();
    internal IntPtr get_Ptr();
    protected void ZeroPtr();
}
internal abstract class Microsoft.Management.Infrastructure.Native.MI_NativeObjectWithFT`1 : MI_NativeObject {
    protected static int MI_NativeObjectNormalMembersLayoutFTOffset;
    protected Lazy`1<FunctionTableType> mft;
    protected int FunctionTableOffset { get; }
    protected FunctionTableType ft { get; }
    protected MI_NativeObjectWithFT`1(bool isDirect);
    protected MI_NativeObjectWithFT`1(IntPtr existingPtr);
    protected MI_NativeObjectWithFT`1(bool isDirect, Func`1<FunctionTableType> mftThunk);
    protected MI_NativeObjectWithFT`1(IntPtr existingPtr, Func`1<FunctionTableType> mftThunk);
    private static MI_NativeObjectWithFT`1();
    public static DirectPtr op_Implicit(MI_NativeObjectWithFT`1<FunctionTableType> instance);
    private void SetupMFT(Func`1<FunctionTableType> mftThunk);
    private FunctionTableType MarshalFT();
    protected static void CheckMembersTableMatchesNormalLayout(string ftMember);
    protected virtual int get_FunctionTableOffset();
    protected FunctionTableType get_ft();
}
internal class Microsoft.Management.Infrastructure.Native.MI_Operation : MI_NativeObjectWithFT`1<MI_OperationFT> {
    internal static MI_Operation Null { get; }
    private static MI_Operation();
    private MI_Operation(bool isDirect);
    private MI_Operation(IntPtr existingPtr);
    internal static MI_Operation NewDirectPtr();
    internal static MI_Operation NewIndirectPtr();
    internal static MI_Operation NewFromDirectPtr(IntPtr ptr);
    internal void AssertValidInternalState();
    internal static MI_Operation get_Null();
    internal MI_Result Close();
    internal MI_Result Cancel(MI_CancellationReason reason);
    internal MI_Result GetSession(MI_Session session);
    internal MI_Result GetInstance(MI_Instance& instance, Boolean& moreResults, MI_Result& result, String& errorMessage, MI_Instance& completionDetails);
    internal MI_Result GetIndication(MI_Instance& instance, String& bookmark, String& machineID, Boolean& moreResults, MI_Result& result, String& errorMessage, MI_Instance& completionDetails);
    internal MI_Result GetClass(MI_Class& classResult, Boolean& moreResults, MI_Result& result, String& errorMessage, MI_Instance& completionDetails);
}
internal enum Microsoft.Management.Infrastructure.Native.MI_OperationCallback_ResponseType : Enum {
    public UInt32 value__;
    public static MI_OperationCallback_ResponseType No;
    public static MI_OperationCallback_ResponseType Yes;
    public static MI_OperationCallback_ResponseType NoToAll;
    public static MI_OperationCallback_ResponseType YesToAll;
}
internal class Microsoft.Management.Infrastructure.Native.MI_OperationCallbacks : object {
    internal MI_OperationCallback_PromptUser promptUser;
    internal MI_OperationCallback_WriteError writeError;
    internal MI_OperationCallback_WriteMessage writeMessage;
    internal MI_OperationCallback_WriteProgress writeProgress;
    internal MI_OperationCallback_Instance instanceResult;
    internal MI_OperationCallback_Indication indicationResult;
    internal MI_OperationCallback_Class classResult;
    internal MI_OperationCallback_StreamedParameter streamedParameterResult;
}
[FlagsAttribute]
internal enum Microsoft.Management.Infrastructure.Native.MI_OperationFlags : Enum {
    public int value__;
    public static MI_OperationFlags Default;
    public static MI_OperationFlags MI_OPERATIONFLAGS_AUTOMATIC_ACK_RESULTS;
    public static MI_OperationFlags MI_OPERATIONFLAGS_MANUAL_ACK_RESULTS;
    public static MI_OperationFlags MI_OPERATIONFLAGS_NO_RTTI;
    public static MI_OperationFlags MI_OPERATIONFLAGS_BASIC_RTTI;
    public static MI_OperationFlags MI_OPERATIONFLAGS_STANDARD_RTTI;
    public static MI_OperationFlags MI_OPERATIONFLAGS_FULL_RTTI;
    public static MI_OperationFlags MI_OPERATIONFLAGS_DEFAULT_RTTI;
    public static MI_OperationFlags MI_OPERATIONFLAGS_NON_LOCALIZED_QUALIFIERS;
    public static MI_OperationFlags MI_OPERATIONFLAGS_LOCALIZED_QUALIFIERS;
    public static MI_OperationFlags MI_OPERATIONFLAGS_NON_EXPENSIVE_PROPERTIES_ONLY;
    public static MI_OperationFlags MI_OPERATIONFLAGS_EXPENSIVE_PROPERTIES;
    public static MI_OperationFlags MI_OPERATIONFLAGS_POLYMORPHISM_DEEP;
    public static MI_OperationFlags MI_OPERATIONFLAGS_POLYMORPHISM_SHALLOW;
    public static MI_OperationFlags MI_OPERATIONFLAGS_POLYMORPHISM_DEEP_BASE_PROPS_ONLY;
    public static MI_OperationFlags MI_OPERATIONFLAGS_REPORT_OPERATION_STARTED;
}
internal class Microsoft.Management.Infrastructure.Native.MI_OperationOptions : MI_NativeObjectWithFT`1<MI_OperationOptionsFT> {
    internal static MI_OperationOptions Null { get; }
    private static MI_OperationOptions();
    private MI_OperationOptions(bool isDirect);
    private MI_OperationOptions(IntPtr existingPtr);
    internal MI_Result SetInterval(string optionName, MI_Interval value, MI_OperationOptionsFlags flags);
    internal MI_Result GetInterval(string optionName, MI_Interval& value, UInt32& index, MI_OperationOptionsFlags& flags);
    internal static MI_OperationOptions NewDirectPtr();
    internal static MI_OperationOptions NewIndirectPtr();
    internal static MI_OperationOptions NewFromDirectPtr(IntPtr ptr);
    internal static MI_OperationOptions get_Null();
    internal void Delete();
    internal MI_Result SetString(string optionName, string value, MI_OperationOptionsFlags flags);
    internal MI_Result SetNumber(string optionName, UInt32 value, MI_OperationOptionsFlags flags);
    internal MI_Result SetCustomOption(string optionName, MI_Type valueType, MI_Value value, bool mustComply, MI_OperationOptionsFlags flags);
    internal MI_Result GetString(string optionName, String& value, UInt32& index, MI_OperationOptionsFlags& flags);
    internal MI_Result GetNumber(string optionName, UInt32& value, UInt32& index, MI_OperationOptionsFlags& flags);
    internal MI_Result GetOptionCount(UInt32& count);
    internal MI_Result GetOptionAt(UInt32 index, String& optionName, MI_Value value, MI_Type& type, MI_OperationOptionsFlags& flags);
    internal MI_Result GetOption(string optionName, MI_Value value, MI_Type& type, UInt32& index, MI_OperationOptionsFlags& flags);
    internal MI_Result GetEnabledChannels(string optionName, UInt32& channels, UInt32 bufferLength, UInt32& channelCount, MI_OperationOptionsFlags& flags);
    internal MI_Result Clone(MI_OperationOptions& newOperationOptions);
}
internal enum Microsoft.Management.Infrastructure.Native.MI_OperationOptionsFlags : Enum {
    public UInt32 value__;
    public static MI_OperationOptionsFlags Unused;
}
public class Microsoft.Management.Infrastructure.Native.MI_PacketEncoding : object {
    public static string Default;
    public static string UTF8;
    public static string UTF16;
    private static MI_PacketEncoding();
}
internal class Microsoft.Management.Infrastructure.Native.MI_ParameterSet : MI_NativeObjectWithFT`1<MI_ParameterSetFT> {
    internal static MI_ParameterSet Null { get; }
    private static MI_ParameterSet();
    private MI_ParameterSet(bool isDirect);
    private MI_ParameterSet(IntPtr existingPtr);
    internal MI_Result GetParameterAt(UInt32 index, String& name, MI_Type& parameterType, String& referenceClass, MI_QualifierSet& qualifierSet);
    internal MI_Result GetParameter(string name, MI_Type& parameterType, String& referenceClass, MI_QualifierSet& qualifierSet, UInt32& index);
    internal static MI_ParameterSet NewDirectPtr();
    internal static MI_ParameterSet NewIndirectPtr();
    internal static MI_ParameterSet NewFromDirectPtr(IntPtr ptr);
    internal static MI_ParameterSet get_Null();
    internal MI_Result GetMethodReturnType(MI_Type& returnType, MI_QualifierSet qualifierSet);
    internal MI_Result GetParameterCount(UInt32& count);
}
internal class Microsoft.Management.Infrastructure.Native.MI_PlatformSpecific : object {
    internal static UnmanagedType AppropriateStringType;
    internal static CharSet AppropriateCharSet;
    internal static CallingConvention MiMainCallConvention;
    internal static CallingConvention MiCallConvention;
    internal static string MI;
    internal static string MOFCodecHost;
    internal static string PtrToString(IntPtr ptr);
    internal static IntPtr StringToPtr(string str);
}
internal enum Microsoft.Management.Infrastructure.Native.MI_PromptType : Enum {
    public UInt32 value__;
    public static MI_PromptType Normal;
    public static MI_PromptType Critical;
}
internal class Microsoft.Management.Infrastructure.Native.MI_PropertyDecl : object {
    private static int MI_PropertyDeclMembersSize;
    private static int MI_PropertyDeclValueOffset;
    private IntPtr ptr;
    private MI_PropertyDecl(MI_Flags flags, UInt32 code, string name, IntPtr qualifiers, UInt32 numQualifiers, MI_Type type, string className, UInt32 subscript, UInt32 offset, string origin, string propagator, IntPtr value);
    private static MI_PropertyDecl();
    protected virtual override void Finalize();
    private void AllocateQualifierDecl(MI_Flags flags, UInt32 code, string name, IntPtr qualifiers, UInt32 numQualifiers, MI_Type type, string className, UInt32 subscript, UInt32 offset, string origin, string propagator, IntPtr value);
    internal static MI_PropertyDecl NewDirectPtr(MI_Flags flags, UInt32 code, string name, IntPtr qualifiers, UInt32 numQualifiers, MI_Type type, string className, UInt32 subscript, UInt32 offset, string origin, string propagator, IntPtr value);
}
internal class Microsoft.Management.Infrastructure.Native.MI_Protocol : object {
    internal static string DCOM;
    internal static string WSMan;
}
public class Microsoft.Management.Infrastructure.Native.MI_ProxyType : object {
    public static string None;
    public static string WinHTTP;
    public static string Auto;
    public static string IE;
    private static MI_ProxyType();
}
internal class Microsoft.Management.Infrastructure.Native.MI_QualifierDecl : object {
    private static int MI_QualifierDeclMembersSize;
    private static int MI_QualifierDeclValueOffset;
    private IntPtr ptr;
    private MI_QualifierDecl(string name, MI_Type type, MI_Flags scope, MI_Flags flavor, UInt32 subscript, IntPtr value);
    private MI_QualifierDecl(string name, MI_Type type, MI_Flags scope, MI_Flags flavor, UInt32 subscript, bool value);
    private static MI_QualifierDecl();
    protected virtual override void Finalize();
    private void AllocateQualifierDecl(string name, MI_Type type, MI_Flags scope, MI_Flags flavor, UInt32 subscript, IntPtr value);
    internal static MI_QualifierDecl NewDirectPtr(string name, MI_Type type, MI_Flags scope, MI_Flags flavor, UInt32 subscript, IntPtr value);
    internal static MI_QualifierDecl NewDirectPtr(string name, MI_Type type, MI_Flags scope, MI_Flags flavor, UInt32 subscript, bool value);
}
internal class Microsoft.Management.Infrastructure.Native.MI_QualifierSet : MI_NativeObjectWithFT`1<MI_QualifierSetFT> {
    internal static MI_QualifierSet Null { get; }
    private static MI_QualifierSet();
    private MI_QualifierSet(bool isDirect);
    private MI_QualifierSet(IntPtr existingPtr);
    internal MI_Result GetQualifier(string name, MI_Type& qualifierType, MI_Flags& qualifierFlags, MI_Value& qualifierValue, UInt32& index);
    internal MI_Result GetQualifierAt(UInt32 index, String& name, MI_Type& qualifierType, MI_Flags& qualifierFlags, MI_Value& qualifierValue);
    internal static MI_QualifierSet NewDirectPtr();
    internal static MI_QualifierSet NewIndirectPtr();
    internal static MI_QualifierSet NewFromDirectPtr(IntPtr ptr);
    internal static MI_QualifierSet get_Null();
    internal MI_Result GetQualifierCount(UInt32& count);
}
internal enum Microsoft.Management.Infrastructure.Native.MI_Result : Enum {
    public UInt32 value__;
    public static MI_Result MI_RESULT_OK;
    public static MI_Result MI_RESULT_FAILED;
    public static MI_Result MI_RESULT_ACCESS_DENIED;
    public static MI_Result MI_RESULT_INVALID_NAMESPACE;
    public static MI_Result MI_RESULT_INVALID_PARAMETER;
    public static MI_Result MI_RESULT_INVALID_CLASS;
    public static MI_Result MI_RESULT_NOT_FOUND;
    public static MI_Result MI_RESULT_NOT_SUPPORTED;
    public static MI_Result MI_RESULT_CLASS_HAS_CHILDREN;
    public static MI_Result MI_RESULT_CLASS_HAS_INSTANCES;
    public static MI_Result MI_RESULT_INVALID_SUPERCLASS;
    public static MI_Result MI_RESULT_ALREADY_EXISTS;
    public static MI_Result MI_RESULT_NO_SUCH_PROPERTY;
    public static MI_Result MI_RESULT_TYPE_MISMATCH;
    public static MI_Result MI_RESULT_QUERY_LANGUAGE_NOT_SUPPORTED;
    public static MI_Result MI_RESULT_INVALID_QUERY;
    public static MI_Result MI_RESULT_METHOD_NOT_AVAILABLE;
    public static MI_Result MI_RESULT_METHOD_NOT_FOUND;
    public static MI_Result MI_RESULT_NAMESPACE_NOT_EMPTY;
    public static MI_Result MI_RESULT_INVALID_ENUMERATION_CONTEXT;
    public static MI_Result MI_RESULT_INVALID_OPERATION_TIMEOUT;
    public static MI_Result MI_RESULT_PULL_HAS_BEEN_ABANDONED;
    public static MI_Result MI_RESULT_PULL_CANNOT_BE_ABANDONED;
    public static MI_Result MI_RESULT_FILTERED_ENUMERATION_NOT_SUPPORTED;
    public static MI_Result MI_RESULT_CONTINUATION_ON_ERROR_NOT_SUPPORTED;
    public static MI_Result MI_RESULT_SERVER_LIMITS_EXCEEDED;
    public static MI_Result MI_RESULT_SERVER_IS_SHUTTING_DOWN;
}
internal static class Microsoft.Management.Infrastructure.Native.MI_SerializationFormat : object {
    internal static string XML;
    internal static string MOF;
}
internal class Microsoft.Management.Infrastructure.Native.MI_SerializationFTHelpers : object {
    private static Lazy`1<SerializationFTPair> XmlSerializationFTs;
    internal static MI_SerializerFT XMLSerializationFT { get; }
    internal static MI_DeserializerFT XMLDeserializationFT { get; }
    private static MI_SerializationFTHelpers();
    internal static MI_SerializerFT get_XMLSerializationFT();
    internal static MI_DeserializerFT get_XMLDeserializationFT();
    private static SerializationFTPair GetXmlSerializationFTs();
}
internal class Microsoft.Management.Infrastructure.Native.MI_Serializer : MI_NativeObjectWithFT`1<MI_SerializerFT> {
    private static int MI_SerializerMembersSize;
    internal static int MI_SerializerMembersReserved2Offset;
    internal static MI_Serializer Null { get; }
    protected int FunctionTableOffset { get; }
    protected int MembersSize { get; }
    private MI_Serializer(Func`1<MI_SerializerFT> mftThunk);
    private static MI_Serializer();
    internal static MI_Serializer NewDirectPtr(string format);
    internal static MI_Serializer get_Null();
    protected virtual int get_FunctionTableOffset();
    protected virtual int get_MembersSize();
    internal MI_Result Close();
    internal MI_Result SerializeClass(MI_SerializerFlags flags, MI_Class classObject, IntPtr clientBuffer, UInt32 clientBufferLength, UInt32& clientBufferNeeded);
    internal MI_Result SerializeClass(MI_SerializerFlags flags, MI_Class classObject, Byte[]& clientBuffer);
    internal MI_Result SerializeInstance(MI_SerializerFlags flags, MI_Instance instanceObject, Byte[]& clientBuffer);
    internal MI_Result SerializeInstance(MI_SerializerFlags flags, MI_Instance instanceObject, IntPtr clientBuffer, UInt32 clientBufferLength, UInt32& clientBufferNeeded);
}
internal enum Microsoft.Management.Infrastructure.Native.MI_SerializerFlags : Enum {
    public int value__;
    public static MI_SerializerFlags None;
}
internal class Microsoft.Management.Infrastructure.Native.MI_Session : MI_NativeObjectWithFT`1<MI_SessionFT> {
    internal static MI_Session Null { get; }
    private static MI_Session();
    private MI_Session(bool isDirect);
    private MI_Session(IntPtr existingPtr);
    internal void GetInstance(MI_OperationFlags flags, MI_OperationOptions options, string namespaceName, MI_Instance inboundInstance, MI_OperationCallbacks callbacks, MI_Operation& operation);
    internal void ModifyInstance(MI_OperationFlags flags, MI_OperationOptions options, string namespaceName, MI_Instance inboundInstance, MI_OperationCallbacks callbacks, MI_Operation& operation);
    internal void CreateInstance(MI_OperationFlags flags, MI_OperationOptions options, string namespaceName, MI_Instance inboundInstance, MI_OperationCallbacks callbacks, MI_Operation& operation);
    internal void DeleteInstance(MI_OperationFlags flags, MI_OperationOptions options, string namespaceName, MI_Instance inboundInstance, MI_OperationCallbacks callbacks, MI_Operation& operation);
    internal void Invoke(MI_OperationFlags flags, MI_OperationOptions options, string namespaceName, string className, string methodName, MI_Instance inboundInstance, MI_Instance inboundProperties, MI_OperationCallbacks callbacks, MI_Operation& operation);
    internal void EnumerateInstances(MI_OperationFlags flags, MI_OperationOptions options, string namespaceName, string className, bool keysOnly, MI_OperationCallbacks callbacks, MI_Operation& operation);
    internal void QueryInstances(MI_OperationFlags flags, MI_OperationOptions options, string namespaceName, string queryDialect, string queryExpression, MI_OperationCallbacks callbacks, MI_Operation& operation);
    internal void AssociatorInstances(MI_OperationFlags flags, MI_OperationOptions options, string namespaceName, MI_Instance instanceKeys, string assocClass, string resultClass, string role, string resultRole, bool keysOnly, MI_OperationCallbacks callbacks, MI_Operation& operation);
    internal void ReferenceInstances(MI_OperationFlags flags, MI_OperationOptions options, string namespaceName, MI_Instance instanceKeys, string resultClass, string role, bool keysOnly, MI_OperationCallbacks callbacks, MI_Operation& operation);
    internal void Subscribe(MI_OperationFlags flags, MI_OperationOptions options, string namespaceName, string queryDialect, string queryExpression, MI_SubscriptionDeliveryOptions deliverOptions, MI_OperationCallbacks callbacks, MI_Operation& operation);
    internal void GetClass(MI_OperationFlags flags, MI_OperationOptions options, string namespaceName, string className, MI_OperationCallbacks callbacks, MI_Operation& operation);
    internal void EnumerateClasses(MI_OperationFlags flags, MI_OperationOptions options, string namespaceName, string className, bool classNamesOnly, MI_OperationCallbacks callbacks, MI_Operation& operation);
    internal void TestConnection(MI_OperationFlags flags, MI_OperationCallbacks callbacks, MI_Operation& operation);
    internal static MI_Session NewDirectPtr();
    internal static MI_Session NewIndirectPtr();
    internal static MI_Session NewFromDirectPtr(IntPtr ptr);
    internal void AssertValidInternalState();
    internal static MI_Session get_Null();
    internal MI_Result Close(IntPtr completionContext, MI_Session_Close_CompletionCallback completionCallback);
    internal MI_Result GetApplication(MI_Application application);
}
internal class Microsoft.Management.Infrastructure.Native.MI_SessionCreationCallbacks : object {
    internal MI_SessionCallbacks_WriteMessage writeMessage;
    internal MI_SessionCallbacks_WriteError writeError;
    internal static MI_SessionCreationCallbacks Null { get; }
    internal static MI_SessionCreationCallbacks get_Null();
}
internal class Microsoft.Management.Infrastructure.Native.MI_String : object {
    private IntPtr ptr;
    internal string Value { get; }
    private MI_String(IntPtr ptr);
    public static IntPtr op_Implicit(MI_String wrapper);
    internal static MI_String NewIndirectPtr();
    internal static MI_String NewFromDirectPtr(IntPtr existingPtr);
    internal string get_Value();
}
internal class Microsoft.Management.Infrastructure.Native.MI_SubscriptionDeliveryOptions : MI_NativeObjectWithFT`1<MI_SubscriptionDeliveryOptionsFT> {
    internal static MI_SubscriptionDeliveryOptions Null { get; }
    private static MI_SubscriptionDeliveryOptions();
    private MI_SubscriptionDeliveryOptions(bool isDirect);
    private MI_SubscriptionDeliveryOptions(IntPtr existingPtr);
    internal MI_Result SetDateTime(string optionName, MI_Datetime value, UInt32 flags);
    internal MI_Result SetInterval(string optionName, MI_Interval value, UInt32 flags);
    internal MI_Result GetDateTime(string optionName, MI_Datetime& value, UInt32& index, UInt32& flags);
    internal MI_Result GetInterval(string optionName, MI_Interval& value, UInt32& index, UInt32& flags);
    internal static MI_SubscriptionDeliveryOptions NewDirectPtr();
    internal static MI_SubscriptionDeliveryOptions NewIndirectPtr();
    internal static MI_SubscriptionDeliveryOptions NewFromDirectPtr(IntPtr ptr);
    internal static MI_SubscriptionDeliveryOptions get_Null();
    internal MI_Result SetString(string optionName, string value, UInt32 flags);
    internal MI_Result SetNumber(string optionName, UInt32 value, UInt32 flags);
    internal MI_Result AddCredentials(string optionName, MI_UserCredentials credentials, UInt32 flags);
    internal MI_Result Delete();
    internal MI_Result GetString(string optionName, String& value, UInt32& index, UInt32& flags);
    internal MI_Result GetNumber(string optionName, UInt32& value, UInt32& index, UInt32& flags);
    internal MI_Result GetOptionCount(UInt32& count);
    internal MI_Result GetOptionAt(UInt32 index, String& optionName, MI_Value value, MI_Type& type, UInt32& flags);
    internal MI_Result GetOption(string optionName, MI_Value value, MI_Type& type, UInt32& index, UInt32& flags);
    internal MI_Result GetCredentialsCount(UInt32& count);
    internal MI_Result GetCredentialsAt(UInt32 index, String& optionName, MI_UserCredentials credentials, UInt32& flags);
    internal MI_Result GetCredentialsPasswordAt(UInt32 index, String& optionName, string password, UInt32 bufferLength, UInt32& passwordLength, UInt32& flags);
    internal MI_Result Clone(MI_SubscriptionDeliveryOptions& newSubscriptionDeliveryOptions);
}
internal enum Microsoft.Management.Infrastructure.Native.MI_SubscriptionDeliveryType : Enum {
    public UInt32 value__;
    public static MI_SubscriptionDeliveryType MI_SubscriptionDeliveryType_Pull;
    public static MI_SubscriptionDeliveryType MI_SubscriptionDeliveryType_Push;
}
internal class Microsoft.Management.Infrastructure.Native.MI_Timestamp : ValueType {
    internal UInt32 year;
    internal UInt32 month;
    internal UInt32 day;
    internal UInt32 hour;
    internal UInt32 minute;
    internal UInt32 second;
    internal UInt32 microseconds;
    internal int utc;
}
public class Microsoft.Management.Infrastructure.Native.MI_Transport : object {
    public static string HTTPS;
    public static string HTTP;
    private static MI_Transport();
}
internal enum Microsoft.Management.Infrastructure.Native.MI_Type : Enum {
    public UInt32 value__;
    public static MI_Type MI_BOOLEAN;
    public static MI_Type MI_UINT8;
    public static MI_Type MI_SINT8;
    public static MI_Type MI_UINT16;
    public static MI_Type MI_SINT16;
    public static MI_Type MI_UINT32;
    public static MI_Type MI_SINT32;
    public static MI_Type MI_UINT64;
    public static MI_Type MI_SINT64;
    public static MI_Type MI_REAL32;
    public static MI_Type MI_REAL64;
    public static MI_Type MI_CHAR16;
    public static MI_Type MI_DATETIME;
    public static MI_Type MI_STRING;
    public static MI_Type MI_REFERENCE;
    public static MI_Type MI_INSTANCE;
    public static MI_Type MI_BOOLEANA;
    public static MI_Type MI_UINT8A;
    public static MI_Type MI_SINT8A;
    public static MI_Type MI_UINT16A;
    public static MI_Type MI_SINT16A;
    public static MI_Type MI_UINT32A;
    public static MI_Type MI_SINT32A;
    public static MI_Type MI_UINT64A;
    public static MI_Type MI_SINT64A;
    public static MI_Type MI_REAL32A;
    public static MI_Type MI_REAL64A;
    public static MI_Type MI_CHAR16A;
    public static MI_Type MI_DATETIMEA;
    public static MI_Type MI_STRINGA;
    public static MI_Type MI_REFERENCEA;
    public static MI_Type MI_INSTANCEA;
}
internal class Microsoft.Management.Infrastructure.Native.MI_TypeFlags : object {
    internal static MI_Type MI_ARRAY;
}
internal class Microsoft.Management.Infrastructure.Native.MI_UserCredentials : ValueType {
    internal IntPtr authenticationType;
    internal MI_UsernamePasswordCreds usernamePassword;
    internal IntPtr certificateThumbprint;
    internal string authenticationTypeString { get; }
    internal string get_authenticationTypeString();
}
internal class Microsoft.Management.Infrastructure.Native.MI_Value : MI_NativeObject {
    private static int ByteSize;
    private Nullable`1<MI_Type> type;
    internal static int MI_ValueSize;
    protected int MembersSize { get; }
    internal string String { get; internal set; }
    internal bool Boolean { get; internal set; }
    internal MI_Instance Instance { get; internal set; }
    internal MI_Instance Reference { get; internal set; }
    internal String[] StringA { get; internal set; }
    internal Boolean[] BooleanA { get; internal set; }
    internal MI_Instance[] InstanceA { get; internal set; }
    internal MI_Instance[] ReferenceA { get; internal set; }
    internal static MI_Value Null { get; }
    internal Nullable`1<MI_Type> Type { get; }
    internal byte Uint8 { get; internal set; }
    internal sbyte Sint8 { get; internal set; }
    internal ushort Uint16 { get; internal set; }
    internal short Sint16 { get; internal set; }
    internal UInt32 Uint32 { get; internal set; }
    internal int Sint32 { get; internal set; }
    internal ulong Uint64 { get; internal set; }
    internal long Sint64 { get; internal set; }
    internal float Real32 { get; internal set; }
    internal double Real64 { get; internal set; }
    internal char Char16 { get; internal set; }
    internal MI_Datetime Datetime { get; internal set; }
    internal Byte[] Uint8A { get; internal set; }
    internal SByte[] Sint8A { get; internal set; }
    internal UInt16[] Uint16A { get; internal set; }
    internal Int16[] Sint16A { get; internal set; }
    internal UInt32[] Uint32A { get; internal set; }
    internal Int32[] Sint32A { get; internal set; }
    internal UInt64[] Uint64A { get; internal set; }
    internal Int64[] Sint64A { get; internal set; }
    internal Single[] Real32A { get; internal set; }
    internal Double[] Real64A { get; internal set; }
    internal Char[] Char16A { get; internal set; }
    internal MI_Datetime[] DatetimeA { get; internal set; }
    private static MI_Value();
    protected virtual int get_MembersSize();
    protected virtual override void Finalize();
    public virtual void Dispose();
    internal void DisownMemory();
    private void Dispose(bool disposing);
    internal string get_String();
    internal void set_String(string value);
    internal bool get_Boolean();
    internal void set_Boolean(bool value);
    internal MI_Instance get_Instance();
    internal void set_Instance(MI_Instance value);
    internal MI_Instance get_Reference();
    internal void set_Reference(MI_Instance value);
    internal String[] get_StringA();
    internal void set_StringA(String[] value);
    internal Boolean[] get_BooleanA();
    internal void set_BooleanA(Boolean[] value);
    internal MI_Instance[] get_InstanceA();
    internal void set_InstanceA(MI_Instance[] value);
    internal MI_Instance[] get_ReferenceA();
    internal void set_ReferenceA(MI_Instance[] value);
    internal static MI_Value NewDirectPtr();
    internal static MI_Value get_Null();
    internal Nullable`1<MI_Type> get_Type();
    private void WipeData();
    private void Free();
    internal byte get_Uint8();
    internal void set_Uint8(byte value);
    internal sbyte get_Sint8();
    internal void set_Sint8(sbyte value);
    internal ushort get_Uint16();
    internal void set_Uint16(ushort value);
    internal short get_Sint16();
    internal void set_Sint16(short value);
    internal UInt32 get_Uint32();
    internal void set_Uint32(UInt32 value);
    internal int get_Sint32();
    internal void set_Sint32(int value);
    internal ulong get_Uint64();
    internal void set_Uint64(ulong value);
    internal long get_Sint64();
    internal void set_Sint64(long value);
    internal float get_Real32();
    internal void set_Real32(float value);
    internal double get_Real64();
    internal void set_Real64(double value);
    internal char get_Char16();
    internal void set_Char16(char value);
    internal MI_Datetime get_Datetime();
    internal void set_Datetime(MI_Datetime value);
    internal Byte[] get_Uint8A();
    internal void set_Uint8A(Byte[] value);
    internal SByte[] get_Sint8A();
    internal void set_Sint8A(SByte[] value);
    internal UInt16[] get_Uint16A();
    internal void set_Uint16A(UInt16[] value);
    internal Int16[] get_Sint16A();
    internal void set_Sint16A(Int16[] value);
    internal UInt32[] get_Uint32A();
    internal void set_Uint32A(UInt32[] value);
    internal Int32[] get_Sint32A();
    internal void set_Sint32A(Int32[] value);
    internal UInt64[] get_Uint64A();
    internal void set_Uint64A(UInt64[] value);
    internal Int64[] get_Sint64A();
    internal void set_Sint64A(Int64[] value);
    internal Single[] get_Real32A();
    internal void set_Real32A(Single[] value);
    internal Double[] get_Real64A();
    internal void set_Real64A(Double[] value);
    internal Char[] get_Char16A();
    internal void set_Char16A(Char[] value);
    internal MI_Datetime[] get_DatetimeA();
    internal void set_DatetimeA(MI_Datetime[] value);
    internal object GetValue(MI_Type type);
}
internal enum Microsoft.Management.Infrastructure.Native.MI_WriteMessageChannel : Enum {
    public UInt32 value__;
    public static MI_WriteMessageChannel Warning;
    public static MI_WriteMessageChannel Verbose;
    public static MI_WriteMessageChannel Debug;
}
public class Microsoft.Management.Infrastructure.Native.NativeCimCredential : object {
    private SecureString passwordSecureStr;
    private bool credentialIsCertificate;
    internal NativeCimCredential(bool bIsCertificate, SecureString secureStr);
    internal SecureString GetSecureString();
    internal void AssertValidInternalState();
    internal static void CreateCimCredential(string authenticationMechanism, string certificateThumbprint, NativeCimCredential& credential);
    internal static void CreateCimCredential(string authenticationMechanism, string domain, string userName, SecureString password, NativeCimCredential& credential);
    internal static void CreateCimCredential(string authenticationMechanism, NativeCimCredential& credential);
    internal static void CreateCimCredential(CertificateAuthenticationMechanism authenticationMechanism, string certificateThumbprint, NativeCimCredential& credential);
    internal static void CreateCimCredential(PasswordAuthenticationMechanism authenticationMechanism, string domain, string userName, SecureString password, NativeCimCredential& credential);
    internal static void CreateCimCredential(ImpersonatedAuthenticationMechanism authenticationMechanism, NativeCimCredential& credential);
}
internal static class Microsoft.Management.Infrastructure.Native.NativeMethods : object {
    internal static int IntPtrSize;
    private static NativeMethods();
    internal static MI_Result MI_Application_InitializeV1(UInt32 flags, string applicationID, IndirectPtr extendedError, DirectPtr application);
    internal static MI_Result MI_Application_NewSerializer_Mof(DirectPtr application, MI_SerializerFlags flags, string format, DirectPtr serializer);
    internal static MI_Result MI_Application_NewDeserializer_Mof(DirectPtr application, MI_SerializerFlags flags, string format, DirectPtr serializer);
    internal static IntPtr LoadLibrary(string lpFileName);
    internal static bool FreeLibrary(IntPtr hModule);
    internal static IntPtr GetProcAddress(IntPtr hModule, string procName);
    internal static void memcpy(Byte* dst, Byte* src, int size, UInt32 count);
    internal static void memset(IntPtr dst, byte val, int byteCount);
    private static void memset(Byte* dst, byte val, UInt32 byteCount);
}
public enum Microsoft.Management.Infrastructure.NativeErrorCode : Enum {
    public int value__;
    public static NativeErrorCode Ok;
    public static NativeErrorCode Failed;
    public static NativeErrorCode AccessDenied;
    public static NativeErrorCode InvalidNamespace;
    public static NativeErrorCode InvalidParameter;
    public static NativeErrorCode InvalidClass;
    public static NativeErrorCode NotFound;
    public static NativeErrorCode NotSupported;
    public static NativeErrorCode ClassHasChildren;
    public static NativeErrorCode ClassHasInstances;
    public static NativeErrorCode InvalidSuperClass;
    public static NativeErrorCode AlreadyExists;
    public static NativeErrorCode NoSuchProperty;
    public static NativeErrorCode TypeMismatch;
    public static NativeErrorCode QueryLanguageNotSupported;
    public static NativeErrorCode InvalidQuery;
    public static NativeErrorCode MethodNotAvailable;
    public static NativeErrorCode MethodNotFound;
    public static NativeErrorCode NamespaceNotEmpty;
    public static NativeErrorCode InvalidEnumerationContext;
    public static NativeErrorCode InvalidOperationTimeout;
    public static NativeErrorCode PullHasBeenAbandoned;
    public static NativeErrorCode PullCannotBeAbandoned;
    public static NativeErrorCode FilteredEnumerationNotSupported;
    public static NativeErrorCode ContinuationOnErrorNotSupported;
    public static NativeErrorCode ServerLimitsExceeded;
    public static NativeErrorCode ServerIsShuttingDown;
}
public enum Microsoft.Management.Infrastructure.Options.CertificateAuthenticationMechanism : Enum {
    public int value__;
    public static CertificateAuthenticationMechanism Default;
    public static CertificateAuthenticationMechanism ClientCertificate;
    public static CertificateAuthenticationMechanism IssuerCertificate;
}
public enum Microsoft.Management.Infrastructure.Options.CimCallbackMode : Enum {
    public int value__;
    public static CimCallbackMode None;
    public static CimCallbackMode Report;
    public static CimCallbackMode Inquire;
    public static CimCallbackMode Ignore;
}
public class Microsoft.Management.Infrastructure.Options.CimCredential : object {
    private NativeCimCredential credential;
    public CimCredential(string authenticationMechanism, string certificateThumbprint);
    public CimCredential(string authenticationMechanism, string domain, string userName, SecureString password);
    public CimCredential(string authenticationMechanism);
    public CimCredential(CertificateAuthenticationMechanism authenticationMechanism, string certificateThumbprint);
    public CimCredential(PasswordAuthenticationMechanism authenticationMechanism, string domain, string userName, SecureString password);
    public CimCredential(ImpersonatedAuthenticationMechanism authenticationMechanism);
}
[FlagsAttribute]
public enum Microsoft.Management.Infrastructure.Options.CimOperationFlags : Enum {
    public long value__;
    public static CimOperationFlags None;
    public static CimOperationFlags NoTypeInformation;
    public static CimOperationFlags BasicTypeInformation;
    public static CimOperationFlags StandardTypeInformation;
    public static CimOperationFlags FullTypeInformation;
    public static CimOperationFlags LocalizedQualifiers;
    public static CimOperationFlags ExpensiveProperties;
    public static CimOperationFlags PolymorphismShallow;
    public static CimOperationFlags PolymorphismDeepBasePropsOnly;
    public static CimOperationFlags ReportOperationStarted;
}
public class Microsoft.Management.Infrastructure.Options.CimOperationOptions : object {
    private Lazy`1<MI_OperationOptions> _operationOptionsHandle;
    private MI_OperationCallbacks _operationCallback;
    private WriteMessageCallback _writeMessageCallback;
    private WriteProgressCallback _writeProgressCallback;
    private WriteErrorCallback _writeErrorCallback;
    private PromptUserCallback _promptUserCallback;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<CancellationToken> <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <KeysOnly>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ClassNamesOnly>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CimOperationFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <EnableMethodResultStreaming>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ShortenLifetimeOfResults>k__BackingField;
    private int _disposed;
    private MI_OperationOptions OperationOptionsHandleOnDemand { get; }
    internal MI_OperationOptions OperationOptionsHandle { get; }
    internal MI_OperationCallbacks OperationCallback { get; }
    public TimeSpan Timeout { get; public set; }
    public Uri ResourceUriPrefix { get; public set; }
    public Uri ResourceUri { get; public set; }
    public bool UseMachineId { get; public set; }
    public CimCallbackMode WriteErrorMode { get; public set; }
    public CimCallbackMode PromptUserMode { get; public set; }
    unknown WriteMessageCallback WriteMessage {public set; }
    unknown WriteProgressCallback WriteProgress {public set; }
    unknown WriteErrorCallback WriteError {public set; }
    unknown PromptUserCallback PromptUser {public set; }
    public Nullable`1<CancellationToken> CancellationToken { get; public set; }
    public bool KeysOnly { get; public set; }
    public bool ClassNamesOnly { get; public set; }
    public CimOperationFlags Flags { get; public set; }
    public bool ReportOperationStarted { get; }
    public bool EnableMethodResultStreaming { get; public set; }
    public bool ShortenLifetimeOfResults { get; public set; }
    public bool IsDisposed { get; }
    public CimOperationOptions(bool mustUnderstand);
    public CimOperationOptions(CimOperationOptions optionsToClone);
    private MI_OperationOptions get_OperationOptionsHandleOnDemand();
    internal MI_OperationOptions get_OperationOptionsHandle();
    internal MI_OperationCallbacks get_OperationCallback();
    public void set_Timeout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_ResourceUriPrefix(Uri value);
    public Uri get_ResourceUriPrefix();
    public void set_ResourceUri(Uri value);
    public Uri get_ResourceUri();
    public void set_UseMachineId(bool value);
    public bool get_UseMachineId();
    public void SetOption(string optionName, string optionValue);
    public void SetPromptUserRegularMode(CimCallbackMode callbackMode, bool automaticConfirmation);
    public void SetOption(string optionName, UInt32 optionValue);
    internal void WriteMessageCallbackInternal(CimOperationCallbackProcessingContext callbackProcessingContext, MI_Operation operationHandle, UInt32 channel, string message);
    private void WriteProgressCallbackInternal(CimOperationCallbackProcessingContext callbackProcessingContext, MI_Operation operationHandle, string activity, string currentOperation, string statusDescription, UInt32 percentageCompleted, UInt32 secondsRemaining);
    internal void WriteErrorCallbackInternal(CimOperationCallbackProcessingContext callbackProcessingContext, MI_Operation operationHandle, MI_Instance instanceHandle, MI_OperationCallback_ResponseType& response);
    internal void PromptUserCallbackInternal(CimOperationCallbackProcessingContext callbackProcessingContext, MI_Operation operationHandle, string message, MI_PromptType promptType, MI_OperationCallback_ResponseType& response);
    public void set_WriteErrorMode(CimCallbackMode value);
    public CimCallbackMode get_WriteErrorMode();
    public void set_PromptUserMode(CimCallbackMode value);
    public CimCallbackMode get_PromptUserMode();
    public void set_WriteMessage(WriteMessageCallback value);
    public void set_WriteProgress(WriteProgressCallback value);
    public void set_WriteError(WriteErrorCallback value);
    public void set_PromptUser(PromptUserCallback value);
    public void EnableChannel(UInt32 channelNumber);
    public void DisableChannel(UInt32 channelNumber);
    public void SetCustomOption(string optionName, bool optionValue, bool mustComply);
    public void SetCustomOption(string optionName, byte optionValue, bool mustComply);
    public void SetCustomOption(string optionName, sbyte optionValue, bool mustComply);
    public void SetCustomOption(string optionName, ushort optionValue, bool mustComply);
    public void SetCustomOption(string optionName, short optionValue, bool mustComply);
    public void SetCustomOption(string optionName, UInt32 optionValue, bool mustComply);
    public void SetCustomOption(string optionName, int optionValue, bool mustComply);
    public void SetCustomOption(string optionName, ulong optionValue, bool mustComply);
    public void SetCustomOption(string optionName, long optionValue, bool mustComply);
    public void SetCustomOption(string optionName, float optionValue, bool mustComply);
    public void SetCustomOption(string optionName, double optionValue, bool mustComply);
    public void SetCustomOption(string optionName, char optionValue, bool mustComply);
    public void SetCustomOption(string optionName, string optionValue, bool mustComply);
    public void SetCustomOption(string optionName, object optionValue, CimType cimType, bool mustComply);
    [CompilerGeneratedAttribute]
public Nullable`1<CancellationToken> get_CancellationToken();
    [CompilerGeneratedAttribute]
public void set_CancellationToken(Nullable`1<CancellationToken> value);
    [CompilerGeneratedAttribute]
public bool get_KeysOnly();
    [CompilerGeneratedAttribute]
public void set_KeysOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_ClassNamesOnly();
    [CompilerGeneratedAttribute]
public void set_ClassNamesOnly(bool value);
    [CompilerGeneratedAttribute]
public CimOperationFlags get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(CimOperationFlags value);
    public bool get_ReportOperationStarted();
    [CompilerGeneratedAttribute]
public bool get_EnableMethodResultStreaming();
    [CompilerGeneratedAttribute]
public void set_EnableMethodResultStreaming(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShortenLifetimeOfResults();
    [CompilerGeneratedAttribute]
public void set_ShortenLifetimeOfResults(bool value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public bool get_IsDisposed();
    internal void AssertNotDisposed();
}
public enum Microsoft.Management.Infrastructure.Options.CimPromptType : Enum {
    public int value__;
    public static CimPromptType None;
    public static CimPromptType Normal;
    public static CimPromptType Critical;
}
public enum Microsoft.Management.Infrastructure.Options.CimResponseType : Enum {
    public int value__;
    public static CimResponseType None;
    public static CimResponseType No;
    public static CimResponseType Yes;
    public static CimResponseType NoToAll;
    public static CimResponseType YesToAll;
}
public class Microsoft.Management.Infrastructure.Options.CimSessionOptions : object {
    private Lazy`1<MI_DestinationOptions> _destinationOptionsHandle;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Protocol>k__BackingField;
    private bool _disposed;
    internal MI_DestinationOptions DestinationOptionsHandleOnDemand { get; }
    internal MI_DestinationOptions DestinationOptionsHandle { get; }
    internal string Protocol { get; private set; }
    public TimeSpan Timeout { get; public set; }
    public CultureInfo Culture { get; public set; }
    public CultureInfo UICulture { get; public set; }
    protected CimSessionOptions(string protocol);
    private CimSessionOptions(string protocol, bool validateProtocol);
    internal CimSessionOptions(CimSessionOptions optionsToClone);
    internal MI_DestinationOptions get_DestinationOptionsHandleOnDemand();
    internal MI_DestinationOptions get_DestinationOptionsHandle();
    [CompilerGeneratedAttribute]
internal string get_Protocol();
    [CompilerGeneratedAttribute]
private void set_Protocol(string value);
    public void SetCustomOption(string optionName, string optionValue);
    public void SetCustomOption(string optionName, UInt32 optionValue);
    public void AddDestinationCredentials(CimCredential credential);
    public void set_Timeout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Culture(CultureInfo value);
    public CultureInfo get_Culture();
    public void set_UICulture(CultureInfo value);
    public CultureInfo get_UICulture();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void AssertNotDisposed();
}
public class Microsoft.Management.Infrastructure.Options.CimSubscriptionDeliveryOptions : object {
    private MI_SubscriptionDeliveryOptions _subscriptionDeliveryOptionsHandle;
    private bool _disposed;
    internal MI_SubscriptionDeliveryOptions SubscriptionDeliveryOptionsHandle { get; }
    public CimSubscriptionDeliveryOptions(CimSubscriptionDeliveryType types);
    public CimSubscriptionDeliveryOptions(CimSubscriptionDeliveryOptions optionsToClone);
    internal MI_SubscriptionDeliveryOptions get_SubscriptionDeliveryOptionsHandle();
    private void Initialize(CimSubscriptionDeliveryType types);
    public void SetString(string optionName, string optionValue, UInt32 flags);
    public void SetNumber(string optionName, UInt32 optionValue, UInt32 flags);
    public void SetDateTime(string optionName, DateTime optionValue, UInt32 flags);
    public void SetDateTime(string optionName, TimeSpan optionValue, UInt32 flags);
    public void SetInterval(string optionName, TimeSpan optionValue, UInt32 flags);
    public void AddCredentials(string optionName, CimCredential optionValue, UInt32 flags);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void AssertNotDisposed();
}
public enum Microsoft.Management.Infrastructure.Options.CimWriteMessageChannel : Enum {
    public int value__;
    public static CimWriteMessageChannel Warning;
    public static CimWriteMessageChannel Verbose;
    public static CimWriteMessageChannel Debug;
}
public class Microsoft.Management.Infrastructure.Options.DComSessionOptions : CimSessionOptions {
    public bool PacketPrivacy { get; public set; }
    public bool PacketIntegrity { get; public set; }
    public ImpersonationType Impersonation { get; public set; }
    public DComSessionOptions(DComSessionOptions optionsToClone);
    public void set_PacketPrivacy(bool value);
    public bool get_PacketPrivacy();
    public void set_PacketIntegrity(bool value);
    public bool get_PacketIntegrity();
    public void set_Impersonation(ImpersonationType value);
    public ImpersonationType get_Impersonation();
}
public enum Microsoft.Management.Infrastructure.Options.ImpersonatedAuthenticationMechanism : Enum {
    public int value__;
    public static ImpersonatedAuthenticationMechanism None;
    public static ImpersonatedAuthenticationMechanism Negotiate;
    public static ImpersonatedAuthenticationMechanism Kerberos;
    public static ImpersonatedAuthenticationMechanism NtlmDomain;
}
public enum Microsoft.Management.Infrastructure.Options.ImpersonationType : Enum {
    public UInt32 value__;
    public static ImpersonationType None;
    public static ImpersonationType Default;
    public static ImpersonationType Delegate;
    public static ImpersonationType Identify;
    public static ImpersonationType Impersonate;
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Options.Internal.CimSubscriptionDeliveryOptionssExtensionMethods : object {
    [ExtensionAttribute]
internal static MI_SubscriptionDeliveryOptions GetSubscriptionDeliveryOptionsHandle(CimSubscriptionDeliveryOptions deliveryOptions);
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Options.Internal.ImpersonationTypeExtensionMethods : object {
    [ExtensionAttribute]
public static MI_ImpersonationType ToNativeType(ImpersonationType impersonationType);
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Options.Internal.OperationFlagsExtensionMethods : object {
    [ExtensionAttribute]
public static MI_OperationFlags ToNative(CimOperationFlags operationFlags);
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Options.Internal.OperationOptionsExtensionMethods : object {
    [ExtensionAttribute]
internal static MI_OperationCallbacks GetOperationCallbacks(CimOperationOptions operationOptions);
    [ExtensionAttribute]
internal static MI_OperationCallbacks GetOperationCallbacks(CimOperationOptions operationOptions, CimAsyncCallbacksReceiverBase acceptCallbacksReceiver);
    [ExtensionAttribute]
internal static MI_OperationFlags GetOperationFlags(CimOperationOptions operationOptions);
    [ExtensionAttribute]
internal static MI_OperationOptions GetOperationOptionsHandle(CimOperationOptions operationOptions);
    [ExtensionAttribute]
internal static bool GetKeysOnly(CimOperationOptions operationOptions);
    [ExtensionAttribute]
internal static bool GetClassNamesOnly(CimOperationOptions operationOptions);
    [ExtensionAttribute]
internal static Nullable`1<CancellationToken> GetCancellationToken(CimOperationOptions operationOptions);
    [ExtensionAttribute]
internal static bool GetShortenLifetimeOfResults(CimOperationOptions operationOptions);
    [ExtensionAttribute]
internal static bool GetReportOperationStarted(CimOperationOptions operationOptions);
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Options.Internal.PacketEncodingExtensionMethods : object {
    [ExtensionAttribute]
public static string ToNativeType(PacketEncoding packetEncoding);
    public static PacketEncoding FromNativeType(string packetEncoding);
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Options.Internal.ProxyTypeExtensionMethods : object {
    [ExtensionAttribute]
public static string ToNativeType(ProxyType proxyType);
    public static ProxyType FromNativeType(string proxyType);
}
public enum Microsoft.Management.Infrastructure.Options.PacketEncoding : Enum {
    public int value__;
    public static PacketEncoding Default;
    public static PacketEncoding Utf8;
    public static PacketEncoding Utf16;
}
public enum Microsoft.Management.Infrastructure.Options.PasswordAuthenticationMechanism : Enum {
    public int value__;
    public static PasswordAuthenticationMechanism Default;
    public static PasswordAuthenticationMechanism Digest;
    public static PasswordAuthenticationMechanism Negotiate;
    public static PasswordAuthenticationMechanism Basic;
    public static PasswordAuthenticationMechanism Kerberos;
    public static PasswordAuthenticationMechanism NtlmDomain;
    public static PasswordAuthenticationMechanism CredSsp;
}
public class Microsoft.Management.Infrastructure.Options.PromptUserCallback : MulticastDelegate {
    public PromptUserCallback(object object, IntPtr method);
    public virtual CimResponseType Invoke(string message, CimPromptType promptType);
    public virtual IAsyncResult BeginInvoke(string message, CimPromptType promptType, AsyncCallback callback, object object);
    public virtual CimResponseType EndInvoke(IAsyncResult result);
}
public enum Microsoft.Management.Infrastructure.Options.ProxyType : Enum {
    public int value__;
    public static ProxyType None;
    public static ProxyType WinHttp;
    public static ProxyType Auto;
    public static ProxyType InternetExplorer;
}
public class Microsoft.Management.Infrastructure.Options.WriteErrorCallback : MulticastDelegate {
    public WriteErrorCallback(object object, IntPtr method);
    public virtual CimResponseType Invoke(CimInstance cimError);
    public virtual IAsyncResult BeginInvoke(CimInstance cimError, AsyncCallback callback, object object);
    public virtual CimResponseType EndInvoke(IAsyncResult result);
}
public class Microsoft.Management.Infrastructure.Options.WriteMessageCallback : MulticastDelegate {
    public WriteMessageCallback(object object, IntPtr method);
    public virtual void Invoke(UInt32 channel, string message);
    public virtual IAsyncResult BeginInvoke(UInt32 channel, string message, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Management.Infrastructure.Options.WriteProgressCallback : MulticastDelegate {
    public WriteProgressCallback(object object, IntPtr method);
    public virtual void Invoke(string activity, string currentOperation, string statusDescription, UInt32 percentageCompleted, UInt32 secondsRemaining);
    public virtual IAsyncResult BeginInvoke(string activity, string currentOperation, string statusDescription, UInt32 percentageCompleted, UInt32 secondsRemaining, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Management.Infrastructure.Options.WSManSessionOptions : CimSessionOptions {
    public UInt32 DestinationPort { get; public set; }
    public UInt32 MaxEnvelopeSize { get; public set; }
    public bool CertCACheck { get; public set; }
    public bool CertCNCheck { get; public set; }
    public bool CertRevocationCheck { get; public set; }
    public bool UseSsl { get; public set; }
    public ProxyType ProxyType { get; public set; }
    public PacketEncoding PacketEncoding { get; public set; }
    public bool NoEncryption { get; public set; }
    public bool EncodePortInServicePrincipalName { get; public set; }
    public Uri HttpUrlPrefix { get; public set; }
    public WSManSessionOptions(WSManSessionOptions optionsToClone);
    public void set_DestinationPort(UInt32 value);
    public UInt32 get_DestinationPort();
    public void set_MaxEnvelopeSize(UInt32 value);
    public UInt32 get_MaxEnvelopeSize();
    public void set_CertCACheck(bool value);
    public bool get_CertCACheck();
    public void set_CertCNCheck(bool value);
    public bool get_CertCNCheck();
    public void set_CertRevocationCheck(bool value);
    public bool get_CertRevocationCheck();
    public void set_UseSsl(bool value);
    public bool get_UseSsl();
    public void set_ProxyType(ProxyType value);
    public ProxyType get_ProxyType();
    public void set_PacketEncoding(PacketEncoding value);
    public PacketEncoding get_PacketEncoding();
    public void set_NoEncryption(bool value);
    public bool get_NoEncryption();
    public void set_EncodePortInServicePrincipalName(bool value);
    public bool get_EncodePortInServicePrincipalName();
    public void set_HttpUrlPrefix(Uri value);
    public Uri get_HttpUrlPrefix();
    public void AddProxyCredentials(CimCredential credential);
}
public class Microsoft.Management.Infrastructure.Serialization.CimDeserializer : object {
    private MI_Deserializer _myHandle;
    private bool _disposed;
    private CimDeserializer(string format, UInt32 flags);
    public static CimDeserializer Create();
    public static CimDeserializer Create(string format, UInt32 flags);
    public CimInstance DeserializeInstance(Byte[] serializedData, UInt32& offset);
    internal MI_Instance DeserializeInstanceHandle(Byte[] serializedData, UInt32& offset, IEnumerable`1<CimClass> cimClasses);
    public CimInstance DeserializeInstance(Byte[] serializedData, UInt32& offset, IEnumerable`1<CimClass> cimClasses);
    public CimClass DeserializeClass(Byte[] serializedData, UInt32& offset);
    internal MI_Class DeserializeClassHandle(Byte[] serializedData, UInt32& offset, CimClass parentClass, string computerName, string namespaceName);
    public CimClass DeserializeClass(Byte[] serializedData, UInt32& offset, CimClass parentClass);
    public CimClass DeserializeClass(Byte[] serializedData, UInt32& offset, CimClass parentClass, string computerName, string namespaceName);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    internal void AssertNotDisposed();
}
internal class Microsoft.Management.Infrastructure.Serialization.CimMofDeserializer : object {
    private MI_Deserializer _myHandle;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MofDeserializerSchemaValidationOption <SchemaValidationOption>k__BackingField;
    private bool _disposed;
    public MofDeserializerSchemaValidationOption SchemaValidationOption { get; public set; }
    internal static MI_Deserializer_ClassObjectNeeded CreateClassObjectNeededCallbackDelegate(OnClassNeeded wrappedcallback);
    [CompilerGeneratedAttribute]
public MofDeserializerSchemaValidationOption get_SchemaValidationOption();
    [CompilerGeneratedAttribute]
public void set_SchemaValidationOption(MofDeserializerSchemaValidationOption value);
    private CimOperationOptions GetOperationOptions();
    public static CimMofDeserializer Create();
    internal MI_Instance[] DeserializeInstanceHandle(Byte[] serializedData, UInt32& offset, IEnumerable`1<CimClass> cimClasses, OnClassNeeded onClassNeededCallback, GetIncludedFileContent getIncludedFileCallback);
    public IEnumerable`1<CimInstance> DeserializeInstances(Byte[] serializedData, UInt32& offset);
    public IEnumerable`1<CimInstance> DeserializeInstances(Byte[] serializedData, UInt32& offset, OnClassNeeded onClassNeededCallback, GetIncludedFileContent getIncludedFileCallback);
    public IEnumerable`1<CimInstance> DeserializeInstances(Byte[] serializedData, UInt32& offset, IEnumerable`1<CimClass> cimClasses, OnClassNeeded onClassNeededCallback, GetIncludedFileContent getIncludedFileCallback);
    internal MI_Class[] DeserializeClassHandle(Byte[] serializedData, UInt32& offset, IEnumerable`1<CimClass> cimClasses, string computerName, string namespaceName, OnClassNeeded onClassNeededCallback, GetIncludedFileContent getIncludedFileCallback);
    public IEnumerable`1<CimClass> DeserializeClasses(Byte[] serializedData, UInt32& offset);
    public IEnumerable`1<CimClass> DeserializeClasses(Byte[] serializedData, UInt32& offset, IEnumerable`1<CimClass> classes);
    public IEnumerable`1<CimClass> DeserializeClasses(Byte[] serializedData, UInt32& offset, IEnumerable`1<CimClass> classes, OnClassNeeded onClassNeededCallback, GetIncludedFileContent getIncludedFileCallback);
    public IEnumerable`1<CimClass> DeserializeClasses(Byte[] serializedData, UInt32& offset, IEnumerable`1<CimClass> classes, string computerName, string namespaceName, OnClassNeeded onClassNeededCallback, GetIncludedFileContent getIncludedFileCallback);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    internal void AssertNotDisposed();
}
internal static class Microsoft.Management.Infrastructure.Serialization.CimMofSerializer : object {
    private static CimSerializer CreateCimMofSerializer(string format, UInt32 flags);
    public static CimSerializer Create();
}
public class Microsoft.Management.Infrastructure.Serialization.CimSerializer : object {
    private MI_Serializer _myHandle;
    private bool _disposed;
    private CimSerializer(string format, UInt32 flags);
    internal CimSerializer(MI_Serializer handle);
    public static CimSerializer Create();
    public static CimSerializer Create(string format, UInt32 flags);
    public bool Serialize(CimInstance cimInstance, InstanceSerializationOptions options, Byte[] buffer, UInt32& offset);
    public bool Serialize(CimClass cimClass, ClassSerializationOptions options, Byte[] buffer, UInt32& offset);
    public Byte[] Serialize(CimInstance cimInstance, InstanceSerializationOptions options);
    public Byte[] Serialize(CimClass cimClass, ClassSerializationOptions options);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    internal void AssertNotDisposed();
}
[FlagsAttribute]
public enum Microsoft.Management.Infrastructure.Serialization.ClassSerializationOptions : Enum {
    public UInt32 value__;
    public static ClassSerializationOptions None;
    public static ClassSerializationOptions IncludeParentClasses;
}
[FlagsAttribute]
public enum Microsoft.Management.Infrastructure.Serialization.InstanceSerializationOptions : Enum {
    public UInt32 value__;
    public static InstanceSerializationOptions None;
    public static InstanceSerializationOptions IncludeClasses;
}
internal enum Microsoft.Management.Infrastructure.Serialization.MofDeserializerSchemaValidationOption : Enum {
    public int value__;
    public static MofDeserializerSchemaValidationOption Default;
    public static MofDeserializerSchemaValidationOption Strict;
    public static MofDeserializerSchemaValidationOption Loose;
    public static MofDeserializerSchemaValidationOption IgnorePropertyType;
    public static MofDeserializerSchemaValidationOption Ignore;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Management.Infrastructure.Strings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AppDomainIsBeingUnloaded { get; }
    internal static string ArrayCannotContainNullElements { get; }
    internal static string CimClassToString { get; }
    internal static string CimInstanceNamespaceIsNull { get; }
    internal static string CimInstanceToStringFullData { get; }
    internal static string CimInstanceToStringNoCaption { get; }
    internal static string CimInstanceToStringNoKeys { get; }
    internal static string CimNameAndValueToString { get; }
    internal static string CimSessionToString { get; }
    internal static string DotNetValueToCimTypeConversionNotPossible { get; }
    internal static string UnknownError { get; }
    internal static string UnrecognizedProtocolName { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AppDomainIsBeingUnloaded();
    internal static string get_ArrayCannotContainNullElements();
    internal static string get_CimClassToString();
    internal static string get_CimInstanceNamespaceIsNull();
    internal static string get_CimInstanceToStringFullData();
    internal static string get_CimInstanceToStringNoCaption();
    internal static string get_CimInstanceToStringNoKeys();
    internal static string get_CimNameAndValueToString();
    internal static string get_CimSessionToString();
    internal static string get_DotNetValueToCimTypeConversionNotPossible();
    internal static string get_UnknownError();
    internal static string get_UnrecognizedProtocolName();
}
