[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class AddMember : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string WrongMemberCount { get; }
    internal static string CannotAddMemberType { get; }
    internal static string Value2ShouldNotBeSpecified { get; }
    internal static string Value1Prompt { get; }
    internal static string Value1AndValue2AreNotBothNull { get; }
    internal static string MemberAlreadyExists { get; }
    internal static string CannotRemoveTypeDataMember { get; }
    internal static string AliasReferenceShouldNotBeNullOrEmpty { get; }
    internal static string Value1ShouldNotBeNull { get; }
    internal static string Value2ShouldNotBeNull { get; }
    internal static string InvalidValueForNotePropertyName { get; }
    internal static string NotePropertyNameShouldNotBeNull { get; }
    internal static string TypeNameShouldNotBeEmpty { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_WrongMemberCount();
    internal static string get_CannotAddMemberType();
    internal static string get_Value2ShouldNotBeSpecified();
    internal static string get_Value1Prompt();
    internal static string get_Value1AndValue2AreNotBothNull();
    internal static string get_MemberAlreadyExists();
    internal static string get_CannotRemoveTypeDataMember();
    internal static string get_AliasReferenceShouldNotBeNullOrEmpty();
    internal static string get_Value1ShouldNotBeNull();
    internal static string get_Value2ShouldNotBeNull();
    internal static string get_InvalidValueForNotePropertyName();
    internal static string get_NotePropertyNameShouldNotBeNull();
    internal static string get_TypeNameShouldNotBeEmpty();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class AddTypeStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AlreadyCompiledandLoaded { get; }
    internal static string MethodDefinitionNotPublic { get; }
    internal static string TypeDefinitionNotPublic { get; }
    internal static string FromMemberNotSupported { get; }
    internal static string FileExtensionNotSupported { get; }
    internal static string MultipleExtensionsNotSupported { get; }
    internal static string LanguageAndProviderSpecified { get; }
    internal static string AmbiguousAssemblyName { get; }
    internal static string AssemblyNotFound { get; }
    internal static string TypeAlreadyExists { get; }
    internal static string OutputAssemblyDidNotResolve { get; }
    internal static string CompilerErrors { get; }
    internal static string AssemblyLoadErrors { get; }
    internal static string OutputTypeRequiresOutputAssembly { get; }
    internal static string CannotDefineNewType { get; }
    internal static string ReferenceAssemblyIgnored { get; }
    internal static string AssemblyTypeNotSupported { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AlreadyCompiledandLoaded();
    internal static string get_MethodDefinitionNotPublic();
    internal static string get_TypeDefinitionNotPublic();
    internal static string get_FromMemberNotSupported();
    internal static string get_FileExtensionNotSupported();
    internal static string get_MultipleExtensionsNotSupported();
    internal static string get_LanguageAndProviderSpecified();
    internal static string get_AmbiguousAssemblyName();
    internal static string get_AssemblyNotFound();
    internal static string get_TypeAlreadyExists();
    internal static string get_OutputAssemblyDidNotResolve();
    internal static string get_CompilerErrors();
    internal static string get_AssemblyLoadErrors();
    internal static string get_OutputTypeRequiresOutputAssembly();
    internal static string get_CannotDefineNewType();
    internal static string get_ReferenceAssemblyIgnored();
    internal static string get_AssemblyTypeNotSupported();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class AliasCommandStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string SetAliasAction { get; }
    internal static string SetAliasTarget { get; }
    internal static string NewAliasAction { get; }
    internal static string NewAliasTarget { get; }
    internal static string ImportAliasAction { get; }
    internal static string ImportAliasTarget { get; }
    internal static string ExportAliasToFileSystemOnly { get; }
    internal static string ExportAliasPathResolvedToMultiple { get; }
    internal static string ExportAliasFileOpenFailed { get; }
    internal static string ExportAliasHeaderTitle { get; }
    internal static string ExportAliasHeaderUser { get; }
    internal static string ExportAliasHeaderDate { get; }
    internal static string ExportAliasHeaderMachine { get; }
    internal static string ImportAliasFromFileSystemOnly { get; }
    internal static string ImportAliasPathResolvedToMultiple { get; }
    internal static string ImportAliasFileOpenFailed { get; }
    internal static string ImportAliasFileInvalidFormat { get; }
    internal static string ImportAliasOptionsError { get; }
    internal static string NoAliasFound { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_SetAliasAction();
    internal static string get_SetAliasTarget();
    internal static string get_NewAliasAction();
    internal static string get_NewAliasTarget();
    internal static string get_ImportAliasAction();
    internal static string get_ImportAliasTarget();
    internal static string get_ExportAliasToFileSystemOnly();
    internal static string get_ExportAliasPathResolvedToMultiple();
    internal static string get_ExportAliasFileOpenFailed();
    internal static string get_ExportAliasHeaderTitle();
    internal static string get_ExportAliasHeaderUser();
    internal static string get_ExportAliasHeaderDate();
    internal static string get_ExportAliasHeaderMachine();
    internal static string get_ImportAliasFromFileSystemOnly();
    internal static string get_ImportAliasPathResolvedToMultiple();
    internal static string get_ImportAliasFileOpenFailed();
    internal static string get_ImportAliasFileInvalidFormat();
    internal static string get_ImportAliasOptionsError();
    internal static string get_NoAliasFound();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ConvertFromStringData : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InvalidDataLine { get; }
    internal static string DataItemAlreadyDefined { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InvalidDataLine();
    internal static string get_DataItemAlreadyDefined();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ConvertHTMLStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string MetaPropertyNotFound { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_MetaPropertyNotFound();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ConvertMarkdownStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InvalidInputObjectType { get; }
    internal static string InputFileNotFound { get; }
    internal static string FileSystemPathsOnly { get; }
    internal static string MarkdownInfoInvalid { get; }
    internal static string InvalidParameterSet { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InvalidInputObjectType();
    internal static string get_InputFileNotFound();
    internal static string get_FileSystemPathsOnly();
    internal static string get_MarkdownInfoInvalid();
    internal static string get_InvalidParameterSet();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class CsvCommandStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CannotAppendCsvWithMismatchedPropertyNames { get; }
    internal static string CannotSpecifyQuoteFieldsAndUseQuotes { get; }
    internal static string CannotSpecifyIncludeTypeInformationAndNoTypeInformation { get; }
    internal static string CannotSpecifyPathAndLiteralPath { get; }
    internal static string UseDefaultNameForUnspecifiedHeader { get; }
    internal static string FileNameIsAMandatoryParameter { get; }
    internal static string ReconcilePreexistingPropertyNamesMethodShouldOnlyGetCalledWhenAppending { get; }
    internal static string ReconcilePreexistingPropertyNamesMethodShouldOnlyGetCalledWhenPreexistingPropertyNamesHaveBeenReadSuccessfully { get; }
    internal static string BuildPropertyNamesMethodShouldBeCalledOnlyOncePerCmdletInstance { get; }
    internal static string TypeHierarchyShouldNotHaveNullValues { get; }
    internal static string EOFIsReached { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CannotAppendCsvWithMismatchedPropertyNames();
    internal static string get_CannotSpecifyQuoteFieldsAndUseQuotes();
    internal static string get_CannotSpecifyIncludeTypeInformationAndNoTypeInformation();
    internal static string get_CannotSpecifyPathAndLiteralPath();
    internal static string get_UseDefaultNameForUnspecifiedHeader();
    internal static string get_FileNameIsAMandatoryParameter();
    internal static string get_ReconcilePreexistingPropertyNamesMethodShouldOnlyGetCalledWhenAppending();
    internal static string get_ReconcilePreexistingPropertyNamesMethodShouldOnlyGetCalledWhenPreexistingPropertyNamesHaveBeenReadSuccessfully();
    internal static string get_BuildPropertyNamesMethodShouldBeCalledOnlyOncePerCmdletInstance();
    internal static string get_TypeHierarchyShouldNotHaveNullValues();
    internal static string get_EOFIsReached();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Debugger : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string LineLessThanOne { get; }
    internal static string BreakpointIdNotFound { get; }
    internal static string FileDoesNotExist { get; }
    internal static string WrongExtension { get; }
    internal static string RemoteDebuggerNotSupported { get; }
    internal static string CannotSetBreakpointInconsistentLanguageMode { get; }
    internal static string RemoteDebuggerNotSupportedInHost { get; }
    internal static string RunspaceDebuggingCannotDebugDefaultRunspace { get; }
    internal static string RunspaceDebuggingNoHostRunspaceOrDebugger { get; }
    internal static string RunspaceDebuggingNoHost { get; }
    internal static string RunspaceDebuggingTooManyRunspacesFound { get; }
    internal static string RunspaceDebuggingEndSession { get; }
    internal static string RunspaceDebuggingScriptCompleted { get; }
    internal static string RunspaceDebuggingStarted { get; }
    internal static string RunspaceOptionInvalidRunspaceState { get; }
    internal static string PersistDebugPreferenceFailure { get; }
    internal static string RunspaceOptionNoDebugger { get; }
    internal static string RunspaceDebuggingNoRunspaceFound { get; }
    internal static string DebugBreakMessage { get; }
    internal static string RunspaceInstanceIdNotFound { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_LineLessThanOne();
    internal static string get_BreakpointIdNotFound();
    internal static string get_FileDoesNotExist();
    internal static string get_WrongExtension();
    internal static string get_RemoteDebuggerNotSupported();
    internal static string get_CannotSetBreakpointInconsistentLanguageMode();
    internal static string get_RemoteDebuggerNotSupportedInHost();
    internal static string get_RunspaceDebuggingCannotDebugDefaultRunspace();
    internal static string get_RunspaceDebuggingNoHostRunspaceOrDebugger();
    internal static string get_RunspaceDebuggingNoHost();
    internal static string get_RunspaceDebuggingTooManyRunspacesFound();
    internal static string get_RunspaceDebuggingEndSession();
    internal static string get_RunspaceDebuggingScriptCompleted();
    internal static string get_RunspaceDebuggingStarted();
    internal static string get_RunspaceOptionInvalidRunspaceState();
    internal static string get_PersistDebugPreferenceFailure();
    internal static string get_RunspaceOptionNoDebugger();
    internal static string get_RunspaceDebuggingNoRunspaceFound();
    internal static string get_DebugBreakMessage();
    internal static string get_RunspaceInstanceIdNotFound();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class EventingStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string SourceIdentifierNotFound { get; }
    internal static string EventIdentifierNotFound { get; }
    internal static string EventSubscriptionSourceNotFound { get; }
    internal static string EventSubscriptionNotFound { get; }
    internal static string EventSubscription { get; }
    internal static string EventResource { get; }
    internal static string ActionMandatoryForLocal { get; }
    internal static string Unsubscribe { get; }
    internal static string Remove { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_SourceIdentifierNotFound();
    internal static string get_EventIdentifierNotFound();
    internal static string get_EventSubscriptionSourceNotFound();
    internal static string get_EventSubscriptionNotFound();
    internal static string get_EventSubscription();
    internal static string get_EventResource();
    internal static string get_ActionMandatoryForLocal();
    internal static string get_Unsubscribe();
    internal static string get_Remove();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class FormatAndOut_out_gridview : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DataNotQualifiedForGridView { get; }
    internal static string RestartPowerShell { get; }
    internal static string TypeColumnName { get; }
    internal static string ValueColumnName { get; }
    internal static string IndexColumnName { get; }
    internal static string CommandNotFound { get; }
    internal static string MoreThanOneCommand { get; }
    internal static string CannotWriteToConsoleInputBuffer { get; }
    internal static string PropertyValidate { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DataNotQualifiedForGridView();
    internal static string get_RestartPowerShell();
    internal static string get_TypeColumnName();
    internal static string get_ValueColumnName();
    internal static string get_IndexColumnName();
    internal static string get_CommandNotFound();
    internal static string get_MoreThanOneCommand();
    internal static string get_CannotWriteToConsoleInputBuffer();
    internal static string get_PropertyValidate();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class GetMember : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string NoObjectSpecified { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_NoObjectSpecified();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class GetRandomCommandStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string MaxMustBeGreaterThanZeroApi { get; }
    internal static string MinGreaterThanOrEqualMax { get; }
    internal static string MinGreaterThanOrEqualMaxApi { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_MaxMustBeGreaterThanZeroApi();
    internal static string get_MinGreaterThanOrEqualMax();
    internal static string get_MinGreaterThanOrEqualMaxApi();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class GetUptimeStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string GetUptimePlatformIsNotSupported { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_GetUptimePlatformIsNotSupported();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class HostStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InvalidColorErrorTemplate { get; }
    internal static string NoStringToEvalulateError { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InvalidColorErrorTemplate();
    internal static string get_NoStringToEvalulateError();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class HttpCommandStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string EmptyUri { get; }
    internal static string Error { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_EmptyUri();
    internal static string get_Error();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ImplicitRemotingStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ErrorMalformedDataFromRemoteCommand { get; }
    internal static string ErrorRequiredRemoteCommandNotFound { get; }
    internal static string ErrorFromRemoteCommand { get; }
    internal static string ErrorNoResultsFromRemoteEnd { get; }
    internal static string ErrorCannotCreateTemporaryFile { get; }
    internal static string ErrorNoRunspaceForThisModule { get; }
    internal static string ErrorCouldntResolveAlias { get; }
    internal static string ErrorSkippedNonRequestedCommand { get; }
    internal static string ErrorSkippedNonRequestedTypeDefinition { get; }
    internal static string ErrorSkippedUnsafeCommandName { get; }
    internal static string ErrorSkippedUnsafeParameterName { get; }
    internal static string ErrorSkippedUnsafeParameterSetName { get; }
    internal static string ErrorSkippedUnsafeAliasName { get; }
    internal static string ErrorCommandSkippedBecauseOfShadowing { get; }
    internal static string ErrorNoCommandsImportedBecauseOfSkipping { get; }
    internal static string ProxyModuleDescription { get; }
    internal static string EventSourceIdentifier { get; }
    internal static string ModuleHeaderTitle { get; }
    internal static string ModuleHeaderDate { get; }
    internal static string ModuleHeaderCommand { get; }
    internal static string ModuleHeaderCommandLine { get; }
    internal static string ModuleHeaderRunspaceOverrideParameter { get; }
    internal static string CreateNewRunspaceMessageTemplate { get; }
    internal static string ProxyRunspaceNameTemplate { get; }
    internal static string ProgressActivity { get; }
    internal static string ProgressStatusGetCommandStart { get; }
    internal static string ProgressStatusGetCommandProgress { get; }
    internal static string ProgressStatusGetFormatDataStart { get; }
    internal static string ProgressStatusGetFormatDataProgress { get; }
    internal static string ProgressStatusProxyGeneration { get; }
    internal static string ProgressStatusCompleted { get; }
    internal static string CredentialRequestTitle { get; }
    internal static string CredentialRequestBody { get; }
    internal static string ProxyCredentialRequestBody { get; }
    internal static string WarningMismatchedImplicitRemotingHash { get; }
    internal static string CertificateNeeded { get; }
    internal static string InvalidSigningOperation { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ErrorMalformedDataFromRemoteCommand();
    internal static string get_ErrorRequiredRemoteCommandNotFound();
    internal static string get_ErrorFromRemoteCommand();
    internal static string get_ErrorNoResultsFromRemoteEnd();
    internal static string get_ErrorCannotCreateTemporaryFile();
    internal static string get_ErrorNoRunspaceForThisModule();
    internal static string get_ErrorCouldntResolveAlias();
    internal static string get_ErrorSkippedNonRequestedCommand();
    internal static string get_ErrorSkippedNonRequestedTypeDefinition();
    internal static string get_ErrorSkippedUnsafeCommandName();
    internal static string get_ErrorSkippedUnsafeParameterName();
    internal static string get_ErrorSkippedUnsafeParameterSetName();
    internal static string get_ErrorSkippedUnsafeAliasName();
    internal static string get_ErrorCommandSkippedBecauseOfShadowing();
    internal static string get_ErrorNoCommandsImportedBecauseOfSkipping();
    internal static string get_ProxyModuleDescription();
    internal static string get_EventSourceIdentifier();
    internal static string get_ModuleHeaderTitle();
    internal static string get_ModuleHeaderDate();
    internal static string get_ModuleHeaderCommand();
    internal static string get_ModuleHeaderCommandLine();
    internal static string get_ModuleHeaderRunspaceOverrideParameter();
    internal static string get_CreateNewRunspaceMessageTemplate();
    internal static string get_ProxyRunspaceNameTemplate();
    internal static string get_ProgressActivity();
    internal static string get_ProgressStatusGetCommandStart();
    internal static string get_ProgressStatusGetCommandProgress();
    internal static string get_ProgressStatusGetFormatDataStart();
    internal static string get_ProgressStatusGetFormatDataProgress();
    internal static string get_ProgressStatusProxyGeneration();
    internal static string get_ProgressStatusCompleted();
    internal static string get_CredentialRequestTitle();
    internal static string get_CredentialRequestBody();
    internal static string get_ProxyCredentialRequestBody();
    internal static string get_WarningMismatchedImplicitRemotingHash();
    internal static string get_CertificateNeeded();
    internal static string get_InvalidSigningOperation();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ImportLocalizedDataStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string FileNotExist { get; }
    internal static string NotCalledFromAScriptFile { get; }
    internal static string ErrorOpeningFile { get; }
    internal static string ErrorLoadingDataFile { get; }
    internal static string FileNameParameterCannotHavePath { get; }
    internal static string CannotFindPsd1File { get; }
    internal static string CannotDefineSupportedCommand { get; }
    internal static string IncorrectVariableName { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_FileNotExist();
    internal static string get_NotCalledFromAScriptFile();
    internal static string get_ErrorOpeningFile();
    internal static string get_ErrorLoadingDataFile();
    internal static string get_FileNameParameterCannotHavePath();
    internal static string get_CannotFindPsd1File();
    internal static string get_CannotDefineSupportedCommand();
    internal static string get_IncorrectVariableName();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class MatchStringStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string FileOpenError { get; }
    internal static string FileReadError { get; }
    internal static string FilterContextWarning { get; }
    internal static string InvalidRegex { get; }
    internal static string CannotSpecifyCultureWithoutSimpleMatch { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_FileOpenError();
    internal static string get_FileReadError();
    internal static string get_FilterContextWarning();
    internal static string get_InvalidRegex();
    internal static string get_CannotSpecifyCultureWithoutSimpleMatch();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class MeasureObjectStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string PropertyNotFound { get; }
    internal static string NonNumericProperty { get; }
    internal static string NonNumericInputObject { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_PropertyNotFound();
    internal static string get_NonNumericProperty();
    internal static string get_NonNumericInputObject();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CmdletAttribute("Add", "Member")]
public class Microsoft.PowerShell.Commands.AddMemberCommand : PSCmdlet {
    private static object s_notSpecified;
    private PSObject _inputObject;
    private PSMemberTypes _memberType;
    private string _memberName;
    private object _value1;
    private object _value2;
    private string _typeName;
    private bool _force;
    private bool _passThru;
    private static string NotePropertySingleMemberSet;
    private static string NotePropertyMultiMemberSet;
    private string _notePropertyName;
    private object _notePropertyValue;
    private IDictionary _property;
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public PSObject InputObject { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public PSMemberTypes MemberType { get; public set; }
    [ParameterAttribute]
public string Name { get; public set; }
    [ParameterAttribute]
public object Value { get; public set; }
    [ParameterAttribute]
public object SecondValue { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string TypeName { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
[ValidateNotePropertyNameAttribute]
[NotePropertyTransformationAttribute]
[ValidateNotNullOrEmptyAttribute]
public string NotePropertyName { get; public set; }
    [ParameterAttribute]
[AllowNullAttribute]
public object NotePropertyValue { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public IDictionary NotePropertyMembers { get; public set; }
    private static AddMemberCommand();
    private static bool HasBeenSpecified(object obj);
    public PSObject get_InputObject();
    public void set_InputObject(PSObject value);
    public PSMemberTypes get_MemberType();
    public void set_MemberType(PSMemberTypes value);
    public string get_Name();
    public void set_Name(string value);
    public object get_Value();
    public void set_Value(object value);
    public object get_SecondValue();
    public void set_SecondValue(object value);
    public string get_TypeName();
    public void set_TypeName(string value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    public string get_NotePropertyName();
    public void set_NotePropertyName(string value);
    public object get_NotePropertyValue();
    public void set_NotePropertyValue(object value);
    public IDictionary get_NotePropertyMembers();
    public void set_NotePropertyMembers(IDictionary value);
    private static object GetParameterType(object sourceValue, Type destinationType);
    private void EnsureValue1AndValue2AreNotBothNull();
    private void EnsureValue1IsNotNull();
    private void EnsureValue2IsNotNull();
    private void EnsureValue1HasBeenSpecified();
    private void EnsureValue2HasNotBeenSpecified();
    private PSMemberInfo GetAliasProperty();
    private PSMemberInfo GetCodeMethod();
    private PSMemberInfo GetCodeProperty();
    private PSMemberInfo GetMemberSet();
    private PSMemberInfo GetNoteProperty();
    private PSMemberInfo GetPropertySet();
    private PSMemberInfo GetScriptMethod();
    private PSMemberInfo GetScriptProperty();
    protected virtual void ProcessRecord();
    private bool AddMemberToTarget(PSMemberInfo member);
    private void ProcessNotePropertyMultiMemberSet();
    private void UpdateTypeNames();
    private ErrorRecord NewError(string errorId, string resourceId, object targetObject, Object[] args);
}
[CmdletAttribute("Add", "Type")]
[OutputTypeAttribute("System.Type")]
public class Microsoft.PowerShell.Commands.AddTypeCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private string _sourceCode;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <UsingNamespace>k__BackingField;
    private String[] _paths;
    [CompilerGeneratedAttribute]
private String[] <AssemblyName>k__BackingField;
    private bool _loadAssembly;
    [CompilerGeneratedAttribute]
private Language <Language>k__BackingField;
    private String[] _referencedAssemblies;
    private string _outputAssembly;
    [CompilerGeneratedAttribute]
private OutputAssemblyType <OutputType>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <PassThru>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <IgnoreWarnings>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <CompilerOptions>k__BackingField;
    private static string s_netcoreAppRefFolder;
    private static string s_frameworkFolder;
    private static Lazy`1<PortableExecutableReference[]> s_autoReferencedAssemblies;
    private static Lazy`1<HashSet`1<string>> s_refAssemblyNamesToIgnore;
    private static Lazy`1<IEnumerable`1<PortableExecutableReference>> s_defaultAssemblies;
    private static HashSet`1<string> s_sourceTypesCache;
    private static Dictionary`2<int, Assembly> s_sourceAssemblyCache;
    private static string s_defaultSdkDirectory;
    private static ReportDiagnostic defaultDiagnosticOption;
    private static String[] s_writeInformationTags;
    private int _syntaxTreesHash;
    private static string FromMemberParameterSetName;
    private static string FromSourceParameterSetName;
    private static string FromPathParameterSetName;
    private static string FromLiteralPathParameterSetName;
    private static string FromAssemblyNameParameterSetName;
    [ParameterAttribute]
[ValidateTrustedDataAttribute]
public string TypeDefinition { get; public set; }
    [ParameterAttribute]
[ValidateTrustedDataAttribute]
public string Name { get; public set; }
    [ParameterAttribute]
public String[] MemberDefinition { get; public set; }
    [ParameterAttribute]
[AllowNullAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Namespace { get; public set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] UsingNamespace { get; public set; }
    [ParameterAttribute]
[ValidateTrustedDataAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateTrustedDataAttribute]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateTrustedDataAttribute]
public String[] AssemblyName { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public Language Language { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] ReferencedAssemblies { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string OutputAssembly { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public OutputAssemblyType OutputType { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public SwitchParameter IgnoreWarnings { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] CompilerOptions { get; public set; }
    private bool InMemory { get; }
    private static AddTypeCommand();
    public string get_TypeDefinition();
    public void set_TypeDefinition(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public String[] get_MemberDefinition();
    public void set_MemberDefinition(String[] value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public String[] get_UsingNamespace();
    [CompilerGeneratedAttribute]
public void set_UsingNamespace(String[] value);
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    private void ProcessPaths(List`1<string> resolvedPaths);
    [CompilerGeneratedAttribute]
public String[] get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(String[] value);
    [CompilerGeneratedAttribute]
public Language get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(Language value);
    public String[] get_ReferencedAssemblies();
    public void set_ReferencedAssemblies(String[] value);
    public string get_OutputAssembly();
    public void set_OutputAssembly(string value);
    [CompilerGeneratedAttribute]
public OutputAssemblyType get_OutputType();
    [CompilerGeneratedAttribute]
public void set_OutputType(OutputAssemblyType value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_PassThru();
    [CompilerGeneratedAttribute]
public void set_PassThru(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_IgnoreWarnings();
    [CompilerGeneratedAttribute]
public void set_IgnoreWarnings(SwitchParameter value);
    [CompilerGeneratedAttribute]
public String[] get_CompilerOptions();
    [CompilerGeneratedAttribute]
public void set_CompilerOptions(String[] value);
    private string GenerateTypeSource(string typeNamespace, string typeName, string sourceCodeText, Language language);
    private static string GetMethodTemplate(Language language);
    private static string GetNamespaceTemplate(Language language);
    private static string GetUsingTemplate(Language language);
    private string GetUsingSet(Language language);
    protected virtual void BeginProcessing();
    protected virtual void EndProcessing();
    private bool get_InMemory();
    private void LoadAssemblies(IEnumerable`1<string> assemblies);
    private static IEnumerable`1<PortableExecutableReference> InitDefaultRefAssemblies();
    private static HashSet`1<string> InitRefAssemblyNamesToIgnore();
    private static PortableExecutableReference[] InitAutoIncludedRefAssemblies();
    private static string GetReferenceAssemblyPathBasedOnType(Type type);
    private string ResolveAssemblyName(string assembly, bool isForReferenceAssembly);
    private static Assembly LoadAssemblyHelper(string assemblyName);
    private IEnumerable`1<PortableExecutableReference> GetPortableExecutableReferences();
    private void WriteTypes(Assembly assembly);
    private static OutputKind OutputAssemblyTypeToOutputKind(OutputAssemblyType outputType);
    private CommandLineArguments ParseCompilerOption(IEnumerable`1<string> args);
    private SyntaxTree ParseSourceText(SourceText sourceText, ParseOptions parseOptions, string path);
    private CompilationOptions GetDefaultCompilationOptions();
    private bool isSourceCodeUpdated(List`1<SyntaxTree> syntaxTrees, Assembly& assembly);
    private void SourceCodeProcessing();
    private void CompileToAssembly(List`1<SyntaxTree> syntaxTrees, CompilationOptions compilationOptions, EmitOptions emitOptions);
    private void CheckDuplicateTypes(Compilation compilation, ConcurrentBag`1& newTypes);
    private static void CacheNewTypes(ConcurrentBag`1<string> newTypes);
    private void CacheAssembly(Assembly assembly);
    private void DoEmitAndLoadAssembly(Compilation compilation, EmitOptions emitOptions);
    private void HandleCompilerErrors(ImmutableArray`1<Diagnostic> compilerDiagnostics);
    private static string BuildErrorMessage(Diagnostic diagnisticRecord);
    private static int SyntaxTreeArrayGetHashCode(IEnumerable`1<SyntaxTree> sts);
    private static int SyntaxTreeGetHashCode(SyntaxTree st);
}
internal class Microsoft.PowerShell.Commands.ArgumentToTypeNameTransformationAttribute : ArgumentTransformationAttribute {
    public virtual object Transform(EngineIntrinsics engineIntrinsics, object inputData);
}
public abstract class Microsoft.PowerShell.Commands.BaseCsvWritingCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private char <Delimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <UseCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <IncludeTypeInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <NoTypeInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <QuoteFields>k__BackingField;
    [CompilerGeneratedAttribute]
private QuoteKind <UseQuotes>k__BackingField;
    [ParameterAttribute]
[ValidateNotNullAttribute]
public char Delimiter { get; public set; }
    [ParameterAttribute]
public SwitchParameter UseCulture { get; public set; }
    public PSObject InputObject { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter IncludeTypeInformation { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter NoTypeInformation { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] QuoteFields { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public QuoteKind UseQuotes { get; public set; }
    [CompilerGeneratedAttribute]
public char get_Delimiter();
    [CompilerGeneratedAttribute]
public void set_Delimiter(char value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_UseCulture();
    [CompilerGeneratedAttribute]
public void set_UseCulture(SwitchParameter value);
    public abstract virtual PSObject get_InputObject();
    public abstract virtual void set_InputObject(PSObject value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_IncludeTypeInformation();
    [CompilerGeneratedAttribute]
public void set_IncludeTypeInformation(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_NoTypeInformation();
    [CompilerGeneratedAttribute]
public void set_NoTypeInformation(SwitchParameter value);
    [CompilerGeneratedAttribute]
public String[] get_QuoteFields();
    [CompilerGeneratedAttribute]
public void set_QuoteFields(String[] value);
    [CompilerGeneratedAttribute]
public QuoteKind get_UseQuotes();
    [CompilerGeneratedAttribute]
public void set_UseQuotes(QuoteKind value);
    public virtual void WriteCsvLine(string line);
    protected virtual void BeginProcessing();
}
public class Microsoft.PowerShell.Commands.BasicHtmlWebResponseObject : WebResponseObject {
    private static Regex s_attribNameValueRegex;
    private static Regex s_attribsRegex;
    private static Regex s_imageRegex;
    private static Regex s_inputFieldRegex;
    private static Regex s_linkRegex;
    private static Regex s_tagRegex;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    private WebCmdletElementCollection _inputFields;
    private WebCmdletElementCollection _links;
    private WebCmdletElementCollection _images;
    public string Content { get; private set; }
    public Encoding Encoding { get; private set; }
    public WebCmdletElementCollection InputFields { get; }
    public WebCmdletElementCollection Links { get; }
    public WebCmdletElementCollection Images { get; }
    public BasicHtmlWebResponseObject(HttpResponseMessage response);
    public BasicHtmlWebResponseObject(HttpResponseMessage response, Stream contentStream);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(string value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(Encoding value);
    public WebCmdletElementCollection get_InputFields();
    public WebCmdletElementCollection get_Links();
    public WebCmdletElementCollection get_Images();
    protected void InitializeContent();
    private static PSObject CreateHtmlObject(string html, string tagName);
    private static void EnsureHtmlParser();
    private void InitializeRawContent(HttpResponseMessage baseResponse);
    private static void ParseAttributes(string outerHtml, PSObject elementObject);
}
public enum Microsoft.PowerShell.Commands.BreakpointType : Enum {
    public int value__;
    public static BreakpointType Line;
    public static BreakpointType Variable;
    public static BreakpointType Command;
}
public class Microsoft.PowerShell.Commands.ByteCollection : object {
    [CompilerGeneratedAttribute]
private ulong <Offset64>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Bytes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    private static int BytesPerLine;
    private string _hexBytes;
    private string _ascii;
    [ObsoleteAttribute("The property is deprecated, please use Offset64 instead.", "True")]
public UInt32 Offset { get; private set; }
    public ulong Offset64 { get; private set; }
    public Byte[] Bytes { get; }
    public string Path { get; }
    public string HexOffset { get; }
    public string Label { get; }
    public string HexBytes { get; }
    public string Ascii { get; }
    [ObsoleteAttribute("The constructor is deprecated.", "True")]
public ByteCollection(UInt32 offset, Byte[] value, string path);
    public ByteCollection(ulong offset, Byte[] value, string path);
    [ObsoleteAttribute("The constructor is deprecated.", "True")]
public ByteCollection(UInt32 offset, Byte[] value);
    public ByteCollection(ulong offset, Byte[] value);
    public ByteCollection(ulong offset, string label, Byte[] value);
    public ByteCollection(Byte[] value);
    public UInt32 get_Offset();
    private void set_Offset(UInt32 value);
    [CompilerGeneratedAttribute]
public ulong get_Offset64();
    [CompilerGeneratedAttribute]
private void set_Offset64(ulong value);
    [CompilerGeneratedAttribute]
public Byte[] get_Bytes();
    [CompilerGeneratedAttribute]
public string get_Path();
    public string get_HexOffset();
    [CompilerGeneratedAttribute]
public string get_Label();
    public string get_HexBytes();
    public string get_Ascii();
    public virtual string ToString();
}
[CmdletAttribute("Clear", "Variable")]
[OutputTypeAttribute("System.Management.Automation.PSVariable")]
public class Microsoft.PowerShell.Commands.ClearVariableCommand : VariableCommandBase {
    [CompilerGeneratedAttribute]
private String[] <Name>k__BackingField;
    private bool _force;
    private bool _passThru;
    [ParameterAttribute]
public String[] Name { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(String[] value);
    public String[] get_Include();
    public void set_Include(String[] value);
    public String[] get_Exclude();
    public void set_Exclude(String[] value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    protected virtual void ProcessRecord();
    private PSVariable ClearValue(PSVariable matchingVariable);
}
internal abstract class Microsoft.PowerShell.Commands.ColumnInfo : object {
    protected string displayName;
    protected string staleObjectPropertyName;
    internal ColumnInfo(string staleObjectPropertyName, string displayName);
    internal string StaleObjectPropertyName();
    internal string DisplayName();
    internal abstract virtual object GetValue(PSObject liveObject);
    internal Type GetValueType(PSObject liveObject, Object& columnValue);
    internal static object LimitString(object src);
}
public abstract class Microsoft.PowerShell.Commands.CommonRunspaceCommandBase : PSCmdlet {
    protected static string RunspaceParameterSet;
    protected static string RunspaceNameParameterSet;
    protected static string RunspaceIdParameterSet;
    protected static string RunspaceInstanceIdParameterSet;
    protected static string ProcessNameParameterSet;
    [CompilerGeneratedAttribute]
private String[] <RunspaceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Runspace[] <Runspace>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <RunspaceId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid[] <RunspaceInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProcessName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AppDomainName>k__BackingField;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] RunspaceName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Runspace[] Runspace { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Int32[] RunspaceId { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Guid[] RunspaceInstanceId { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ProcessName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] AppDomainName { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_RunspaceName();
    [CompilerGeneratedAttribute]
public void set_RunspaceName(String[] value);
    [CompilerGeneratedAttribute]
public Runspace[] get_Runspace();
    [CompilerGeneratedAttribute]
public void set_Runspace(Runspace[] value);
    [CompilerGeneratedAttribute]
public Int32[] get_RunspaceId();
    [CompilerGeneratedAttribute]
public void set_RunspaceId(Int32[] value);
    [CompilerGeneratedAttribute]
public Guid[] get_RunspaceInstanceId();
    [CompilerGeneratedAttribute]
public void set_RunspaceInstanceId(Guid[] value);
    [CompilerGeneratedAttribute]
public string get_ProcessName();
    [CompilerGeneratedAttribute]
public void set_ProcessName(string value);
    [CompilerGeneratedAttribute]
public String[] get_AppDomainName();
    [CompilerGeneratedAttribute]
public void set_AppDomainName(String[] value);
    protected IReadOnlyList`1<Runspace> GetRunspaces();
    protected Debugger GetDebuggerFromRunspace(Runspace runspace);
    protected void SetDebugPreferenceHelper(string processName, String[] appDomainName, bool enable, string fullyQualifiedErrorId);
}
[CmdletAttribute("Compare", "Object")]
public class Microsoft.PowerShell.Commands.CompareObjectCommand : ObjectCmdletBase {
    [CompilerGeneratedAttribute]
private PSObject[] <ReferenceObject>k__BackingField;
    [CompilerGeneratedAttribute]
private PSObject[] <DifferenceObject>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SyncWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Property>k__BackingField;
    private bool _excludeDifferent;
    private bool _includeEqual;
    private bool _isIncludeEqualSpecified;
    private bool _passThru;
    private List`1<OrderByPropertyEntry> _referenceEntries;
    private List`1<OrderByPropertyEntry> _referenceEntryBacklog;
    private List`1<OrderByPropertyEntry> _differenceEntryBacklog;
    private OrderByProperty _orderByProperty;
    private OrderByPropertyComparer _comparer;
    private int _referenceObjectIndex;
    private static string SideIndicatorPropertyName;
    private static string SideIndicatorMatch;
    private static string SideIndicatorReference;
    private static string SideIndicatorDifference;
    private static string InputObjectPropertyName;
    [ParameterAttribute]
[AllowEmptyCollectionAttribute]
public PSObject[] ReferenceObject { get; public set; }
    [ParameterAttribute]
[AllowEmptyCollectionAttribute]
public PSObject[] DifferenceObject { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int SyncWindow { get; public set; }
    [ParameterAttribute]
public Object[] Property { get; public set; }
    [ParameterAttribute]
public SwitchParameter ExcludeDifferent { get; public set; }
    [ParameterAttribute]
public SwitchParameter IncludeEqual { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [CompilerGeneratedAttribute]
public PSObject[] get_ReferenceObject();
    [CompilerGeneratedAttribute]
public void set_ReferenceObject(PSObject[] value);
    [CompilerGeneratedAttribute]
public PSObject[] get_DifferenceObject();
    [CompilerGeneratedAttribute]
public void set_DifferenceObject(PSObject[] value);
    [CompilerGeneratedAttribute]
public int get_SyncWindow();
    [CompilerGeneratedAttribute]
public void set_SyncWindow(int value);
    [CompilerGeneratedAttribute]
public Object[] get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(Object[] value);
    public SwitchParameter get_ExcludeDifferent();
    public void set_ExcludeDifferent(SwitchParameter value);
    public SwitchParameter get_IncludeEqual();
    public void set_IncludeEqual(SwitchParameter value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    private void Process(OrderByPropertyEntry differenceEntry);
    private void InitComparer();
    private OrderByPropertyEntry MatchAndRemove(OrderByPropertyEntry match, List`1<OrderByPropertyEntry> list);
    private void EmitMatch(OrderByPropertyEntry entry);
    private void EmitDifferenceOnly(OrderByPropertyEntry entry);
    private void EmitReferenceOnly(OrderByPropertyEntry entry);
    private void Emit(OrderByPropertyEntry entry, string sideIndicator);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    private void HandleDifferenceObjectOnly();
    private void HandleReferenceObjectOnly();
}
public class Microsoft.PowerShell.Commands.ConsoleColorCmdlet : PSCmdlet {
    private ConsoleColor _fgColor;
    private ConsoleColor _bgColor;
    private bool _isFgColorSet;
    private bool _isBgColorSet;
    private Type _consoleColorEnumType;
    [ParameterAttribute]
public ConsoleColor ForegroundColor { get; public set; }
    [ParameterAttribute]
public ConsoleColor BackgroundColor { get; public set; }
    public ConsoleColor get_ForegroundColor();
    public void set_ForegroundColor(ConsoleColor value);
    public ConsoleColor get_BackgroundColor();
    public void set_BackgroundColor(ConsoleColor value);
    private static ErrorRecord BuildOutOfRangeErrorRecord(object val, string errorId);
}
internal static class Microsoft.PowerShell.Commands.ContentHelper : object {
    private static string _defaultCodePage;
    private static Char[] s_contentTypeParamSeparator;
    private static ContentHelper();
    internal static string GetContentType(HttpResponseMessage response);
    internal static Encoding GetDefaultEncoding();
    internal static Encoding GetEncoding(HttpResponseMessage response);
    internal static Encoding GetEncodingOrDefault(string characterSet);
    internal static StringBuilder GetRawContentHeader(HttpResponseMessage response);
    internal static bool IsJson(string contentType);
    internal static bool IsText(string contentType);
    internal static bool IsXml(string contentType);
    private static bool CheckIsJson(string contentType);
    private static bool CheckIsText(string contentType);
    private static bool CheckIsXml(string contentType);
    private static string GetContentTypeSignature(string contentType);
}
[CmdletAttribute("ConvertFrom", "Csv")]
public class Microsoft.PowerShell.Commands.ConvertFromCsvCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private char <Delimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <UseCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private PSObject[] <InputObject>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Header>k__BackingField;
    private bool _alreadyWarnedUnspecifiedNames;
    private string _typeName;
    [ParameterAttribute]
[ValidateNotNullAttribute]
[ValidateNotNullOrEmptyAttribute]
public char Delimiter { get; public set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
[ValidateNotNullOrEmptyAttribute]
public SwitchParameter UseCulture { get; public set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
[ValidateNotNullOrEmptyAttribute]
public PSObject[] InputObject { get; public set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Header { get; public set; }
    [CompilerGeneratedAttribute]
public char get_Delimiter();
    [CompilerGeneratedAttribute]
public void set_Delimiter(char value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_UseCulture();
    [CompilerGeneratedAttribute]
public void set_UseCulture(SwitchParameter value);
    [CompilerGeneratedAttribute]
public PSObject[] get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSObject[] value);
    [CompilerGeneratedAttribute]
public String[] get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(String[] value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("ConvertFrom", "Json")]
public class Microsoft.PowerShell.Commands.ConvertFromJsonCommand : Cmdlet {
    [CompilerGeneratedAttribute]
private string <InputObject>k__BackingField;
    private List`1<string> _inputObjectBuffer;
    [CompilerGeneratedAttribute]
private SwitchParameter <AsHashtable>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Depth>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <NoEnumerate>k__BackingField;
    [ParameterAttribute]
[AllowEmptyStringAttribute]
public string InputObject { get; public set; }
    [ParameterAttribute]
public SwitchParameter AsHashtable { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("0")]
public int Depth { get; public set; }
    [ParameterAttribute]
public SwitchParameter NoEnumerate { get; public set; }
    [CompilerGeneratedAttribute]
public string get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(string value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_AsHashtable();
    [CompilerGeneratedAttribute]
public void set_AsHashtable(SwitchParameter value);
    [CompilerGeneratedAttribute]
public int get_Depth();
    [CompilerGeneratedAttribute]
public void set_Depth(int value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_NoEnumerate();
    [CompilerGeneratedAttribute]
public void set_NoEnumerate(SwitchParameter value);
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    private bool ConvertFromJsonHelper(string input);
}
[CmdletAttribute("ConvertFrom", "Markdown")]
[OutputTypeAttribute("Microsoft.PowerShell.MarkdownRender.MarkdownInfo")]
public class Microsoft.PowerShell.Commands.ConvertFromMarkdownCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private String[] <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <LiteralPath>k__BackingField;
    [CompilerGeneratedAttribute]
private PSObject <InputObject>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <AsVT100EncodedString>k__BackingField;
    private static string PathParameterSet;
    private static string LiteralPathParameterSet;
    private static string InputObjParamSet;
    private MarkdownConversionType _conversionType;
    private PSMarkdownOptionInfo _mdOption;
    [ValidateNotNullOrEmptyAttribute]
[ParameterAttribute]
public String[] Path { get; public set; }
    [ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public String[] LiteralPath { get; public set; }
    [ValidateNotNullOrEmptyAttribute]
[ParameterAttribute]
public PSObject InputObject { get; public set; }
    [ParameterAttribute]
public SwitchParameter AsVT100EncodedString { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_LiteralPath();
    [CompilerGeneratedAttribute]
public void set_LiteralPath(String[] value);
    [CompilerGeneratedAttribute]
public PSObject get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSObject value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_AsVT100EncodedString();
    [CompilerGeneratedAttribute]
public void set_AsVT100EncodedString(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    private void ConvertEachFile(IEnumerable`1<string> paths, MarkdownConversionType conversionType, bool isLiteral, PSMarkdownOptionInfo optionInfo);
    [AsyncStateMachineAttribute("Microsoft.PowerShell.Commands.ConvertFromMarkdownCommand/<ReadContentFromFile>d__24")]
private Task`1<string> ReadContentFromFile(string filePath);
    private List`1<string> ResolvePath(string path, bool isLiteral);
}
[CmdletAttribute("ConvertFrom", "SddlString")]
[OutputTypeAttribute("Microsoft.PowerShell.Commands.SecurityDescriptorInfo")]
public class Microsoft.PowerShell.Commands.ConvertFromSddlStringCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private string <Sddl>k__BackingField;
    private AccessRightTypeNames _type;
    private bool _isTypeSet;
    [ParameterAttribute]
public string Sddl { get; public set; }
    [ParameterAttribute]
public AccessRightTypeNames Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Sddl();
    [CompilerGeneratedAttribute]
public void set_Sddl(string value);
    public AccessRightTypeNames get_Type();
    public void set_Type(AccessRightTypeNames value);
    private static string ConvertToNTAccount(SecurityIdentifier securityIdentifier);
    private static List`1<string> GetApplicableAccessRights(int accessMask, Nullable`1<AccessRightTypeNames> typeName);
    private static Type GetRealAccessRightType(AccessRightTypeNames typeName);
    private static String[] ConvertAccessControlListToStrings(CommonAcl acl, Nullable`1<AccessRightTypeNames> typeName);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("ConvertFrom", "StringData")]
[OutputTypeAttribute("System.Collections.Hashtable")]
public class Microsoft.PowerShell.Commands.ConvertFromStringDataCommand : PSCmdlet {
    private string _stringData;
    [CompilerGeneratedAttribute]
private char <Delimiter>k__BackingField;
    [ParameterAttribute]
[AllowEmptyStringAttribute]
public string StringData { get; public set; }
    [ParameterAttribute]
public char Delimiter { get; public set; }
    public string get_StringData();
    public void set_StringData(string value);
    [CompilerGeneratedAttribute]
public char get_Delimiter();
    [CompilerGeneratedAttribute]
public void set_Delimiter(char value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("ConvertTo", "Csv")]
[OutputTypeAttribute("System.String")]
public class Microsoft.PowerShell.Commands.ConvertToCsvCommand : BaseCsvWritingCommand {
    [CompilerGeneratedAttribute]
private PSObject <InputObject>k__BackingField;
    private IList`1<string> _propertyNames;
    private ExportCsvHelper _helper;
    [ParameterAttribute]
public PSObject InputObject { get; public set; }
    [CompilerGeneratedAttribute]
public virtual PSObject get_InputObject();
    [CompilerGeneratedAttribute]
public virtual void set_InputObject(PSObject value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    public virtual void WriteCsvLine(string line);
}
[CmdletAttribute("ConvertTo", "Html")]
[OutputTypeAttribute("System.String")]
public class Microsoft.PowerShell.Commands.ConvertToHtmlCommand : PSCmdlet {
    private PSObject _inputObject;
    private Object[] _property;
    private String[] _body;
    private String[] _head;
    private string _title;
    private string _as;
    private Uri _cssuri;
    private bool _cssuriSpecified;
    private SwitchParameter _fragment;
    private String[] _postContent;
    private String[] _preContent;
    private Hashtable _meta;
    private bool _metaSpecified;
    private string _charset;
    private bool _charsetSpecified;
    private bool _transitional;
    private int _numberObjects;
    private bool _isTHWritten;
    private List`1<MshParameter> _propertyMshParameterList;
    private List`1<MshParameter> _resolvedNameMshParameters;
    [ParameterAttribute]
public PSObject InputObject { get; public set; }
    [ParameterAttribute]
public Object[] Property { get; public set; }
    [ParameterAttribute]
public String[] Body { get; public set; }
    [ParameterAttribute]
public String[] Head { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Title { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[ValidateSetAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string As { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public Uri CssUri { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public SwitchParameter Fragment { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] PostContent { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] PreContent { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Hashtable Meta { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[ValidatePatternAttribute("^[A-Za-z0-9]\w+\S+[A-Za-z0-9]$")]
public string Charset { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public SwitchParameter Transitional { get; public set; }
    public PSObject get_InputObject();
    public void set_InputObject(PSObject value);
    public Object[] get_Property();
    public void set_Property(Object[] value);
    public String[] get_Body();
    public void set_Body(String[] value);
    public String[] get_Head();
    public void set_Head(String[] value);
    public string get_Title();
    public void set_Title(string value);
    public string get_As();
    public void set_As(string value);
    public Uri get_CssUri();
    public void set_CssUri(Uri value);
    public SwitchParameter get_Fragment();
    public void set_Fragment(SwitchParameter value);
    public String[] get_PostContent();
    public void set_PostContent(String[] value);
    public String[] get_PreContent();
    public void set_PreContent(String[] value);
    public Hashtable get_Meta();
    public void set_Meta(Hashtable value);
    public string get_Charset();
    public void set_Charset(string value);
    public SwitchParameter get_Transitional();
    public void set_Transitional(SwitchParameter value);
    private List`1<MshParameter> ProcessParameter(Object[] properties);
    private void InitializeResolvedNameMshParameters();
    private static Hashtable CreateAuxPropertyHT(string label, string alignment, string width);
    private static string SafeToString(object obj);
    protected virtual void BeginProcessing();
    private void WriteColumns(List`1<MshParameter> mshParams);
    private void WriteListEntry();
    private static void WritePropertyName(StringBuilder Listtag, MshParameter p);
    private void WritePropertyValue(StringBuilder Listtag, MshParameter p);
    private static void WriteTableHeader(StringBuilder THtag, List`1<MshParameter> resolvedNameMshParameters);
    private void WriteTableRow(StringBuilder TRtag, List`1<MshParameter> resolvedNameMshParameters);
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
[CmdletAttribute("ConvertTo", "Json")]
[OutputTypeAttribute("System.String")]
public class Microsoft.PowerShell.Commands.ConvertToJsonCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private object <InputObject>k__BackingField;
    private int _depth;
    private CancellationTokenSource _cancellationSource;
    [CompilerGeneratedAttribute]
private SwitchParameter <Compress>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <EnumsAsStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <AsArray>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEscapeHandling <EscapeHandling>k__BackingField;
    private List`1<object> _inputObjects;
    [ParameterAttribute]
[AllowNullAttribute]
public object InputObject { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Depth { get; public set; }
    [ParameterAttribute]
public SwitchParameter Compress { get; public set; }
    [ParameterAttribute]
public SwitchParameter EnumsAsStrings { get; public set; }
    [ParameterAttribute]
public SwitchParameter AsArray { get; public set; }
    [ParameterAttribute]
public StringEscapeHandling EscapeHandling { get; public set; }
    [CompilerGeneratedAttribute]
public object get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(object value);
    public int get_Depth();
    public void set_Depth(int value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Compress();
    [CompilerGeneratedAttribute]
public void set_Compress(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_EnumsAsStrings();
    [CompilerGeneratedAttribute]
public void set_EnumsAsStrings(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_AsArray();
    [CompilerGeneratedAttribute]
public void set_AsArray(SwitchParameter value);
    [CompilerGeneratedAttribute]
public StringEscapeHandling get_EscapeHandling();
    [CompilerGeneratedAttribute]
public void set_EscapeHandling(StringEscapeHandling value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
}
[CmdletAttribute("ConvertTo", "Xml")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.Commands.ConvertToXmlCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private int <Depth>k__BackingField;
    [CompilerGeneratedAttribute]
private PSObject <InputObject>k__BackingField;
    private bool _notypeinformation;
    [CompilerGeneratedAttribute]
private string <As>k__BackingField;
    private XmlWriter _xw;
    private CustomSerialization _serializer;
    private MemoryStream _ms;
    private bool _disposed;
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Depth { get; public set; }
    [ParameterAttribute]
[AllowNullAttribute]
public PSObject InputObject { get; public set; }
    [ParameterAttribute]
public SwitchParameter NoTypeInformation { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[ValidateSetAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string As { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Depth();
    [CompilerGeneratedAttribute]
public void set_Depth(int value);
    [CompilerGeneratedAttribute]
public PSObject get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSObject value);
    public SwitchParameter get_NoTypeInformation();
    public void set_NoTypeInformation(SwitchParameter value);
    [CompilerGeneratedAttribute]
public string get_As();
    [CompilerGeneratedAttribute]
public void set_As(string value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
    private void CreateMemoryStream();
    private void CleanUp();
    public sealed virtual void Dispose();
}
internal class Microsoft.PowerShell.Commands.CSVHelper : object {
    [CompilerGeneratedAttribute]
private char <Delimiter>k__BackingField;
    internal char Delimiter { get; }
    internal CSVHelper(char delimiter);
    [CompilerGeneratedAttribute]
internal char get_Delimiter();
    internal Collection`1<string> ParseCsv(string csv);
}
[CmdletAttribute("Debug", "Runspace")]
public class Microsoft.PowerShell.Commands.DebugRunspaceCommand : PSCmdlet {
    private static string RunspaceParameterSet;
    private static string NameParameterSet;
    private static string IdParameterSet;
    private static string InstanceIdParameterSet;
    private Runspace _runspace;
    private Debugger _debugger;
    private PSDataCollection`1<PSStreamObject> _debugBlockingCollection;
    private PSDataCollection`1<PSStreamObject> _debugAccumulateCollection;
    private Pipeline _runningPipeline;
    private PowerShell _runningPowerShell;
    private bool _debugging;
    private ManualResetEventSlim _newRunningScriptEvent;
    private RunspaceAvailability _previousRunspaceAvailability;
    [CompilerGeneratedAttribute]
private Runspace <Runspace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <BreakAll>k__BackingField;
    [ParameterAttribute]
public Runspace Runspace { get; public set; }
    [ParameterAttribute]
public string Name { get; public set; }
    [ParameterAttribute]
public int Id { get; public set; }
    [ParameterAttribute]
public Guid InstanceId { get; public set; }
    [ParameterAttribute]
public SwitchParameter BreakAll { get; public set; }
    [CompilerGeneratedAttribute]
public Runspace get_Runspace();
    [CompilerGeneratedAttribute]
public void set_Runspace(Runspace value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public Guid get_InstanceId();
    [CompilerGeneratedAttribute]
public void set_InstanceId(Guid value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_BreakAll();
    [CompilerGeneratedAttribute]
public void set_BreakAll(SwitchParameter value);
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
    private void WaitAndReceiveRunspaceOutput();
    private void HostWriteLine(string line);
    private void AddDataEventHandlers();
    private void RemoveDataEventHandlers();
    private void HandleRunspaceAvailabilityChanged(object sender, RunspaceAvailabilityEventArgs e);
    private void HandleDebuggerNestedDebuggingCancelledEvent(object sender, EventArgs e);
    private void HandlePipelineOutputDataReady(object sender, EventArgs e);
    private void HandlePipelineErrorDataReady(object sender, EventArgs e);
    private void WritePipelineCollection(Collection`1<T> collection, PSStreamObjectType psStreamType);
    private void HandlePowerShellOutputBufferDataAdding(object sender, DataAddingEventArgs e);
    private void HandlePowerShellErrorBufferDataAdding(object sender, DataAddingEventArgs e);
    private void HandlePowerShellPStreamItem(PSStreamObject streamItem);
    private void AddToDebugBlockingCollection(PSStreamObject streamItem);
    private void PrepareRunspace(Runspace runspace);
    private void RestoreRunspace(Runspace runspace);
    private void EnableHostDebugger(Runspace runspace, bool enabled);
    private static void SetLocalMode(Debugger debugger, bool localMode);
}
[CmdletAttribute("Disable", "PSBreakpoint")]
[OutputTypeAttribute("System.Management.Automation.Breakpoint")]
public class Microsoft.PowerShell.Commands.DisablePSBreakpointCommand : PSBreakpointUpdaterCommandBase {
    [CompilerGeneratedAttribute]
private SwitchParameter <PassThru>k__BackingField;
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [CompilerGeneratedAttribute]
public SwitchParameter get_PassThru();
    [CompilerGeneratedAttribute]
public void set_PassThru(SwitchParameter value);
    protected virtual void ProcessBreakpoint(Breakpoint breakpoint);
}
[CmdletAttribute("Disable", "RunspaceDebug")]
public class Microsoft.PowerShell.Commands.DisableRunspaceDebugCommand : CommonRunspaceCommandBase {
    protected virtual void ProcessRecord();
}
public enum Microsoft.PowerShell.Commands.DisplayHintType : Enum {
    public int value__;
    public static DisplayHintType Date;
    public static DisplayHintType Time;
    public static DisplayHintType DateTime;
}
[CmdletAttribute("Enable", "PSBreakpoint")]
[OutputTypeAttribute("System.Management.Automation.Breakpoint")]
public class Microsoft.PowerShell.Commands.EnablePSBreakpointCommand : PSBreakpointUpdaterCommandBase {
    [CompilerGeneratedAttribute]
private SwitchParameter <PassThru>k__BackingField;
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [CompilerGeneratedAttribute]
public SwitchParameter get_PassThru();
    [CompilerGeneratedAttribute]
public void set_PassThru(SwitchParameter value);
    protected virtual void ProcessBreakpoint(Breakpoint breakpoint);
}
[CmdletAttribute("Enable", "RunspaceDebug")]
public class Microsoft.PowerShell.Commands.EnableRunspaceDebugCommand : CommonRunspaceCommandBase {
    [CompilerGeneratedAttribute]
private SwitchParameter <BreakAll>k__BackingField;
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public SwitchParameter BreakAll { get; public set; }
    [CompilerGeneratedAttribute]
public SwitchParameter get_BreakAll();
    [CompilerGeneratedAttribute]
public void set_BreakAll(SwitchParameter value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Export", "Alias")]
[OutputTypeAttribute("System.Management.Automation.AliasInfo")]
public class Microsoft.PowerShell.Commands.ExportAliasCommand : PSCmdlet {
    private string _path;
    private bool _isLiteralPath;
    private String[] _names;
    private bool _passThru;
    [CompilerGeneratedAttribute]
private ExportAliasFormat <As>k__BackingField;
    private bool _append;
    private bool _force;
    private bool _noclobber;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    private Collection`1<AliasInfo> _matchingAliases;
    [ParameterAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string LiteralPath { get; public set; }
    [ParameterAttribute]
public String[] Name { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
public ExportAliasFormat As { get; public set; }
    [ParameterAttribute]
public SwitchParameter Append { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter NoClobber { get; public set; }
    [ParameterAttribute]
public string Description { get; public set; }
    [ParameterAttribute]
public string Scope { get; public set; }
    public string get_Path();
    public void set_Path(string value);
    public string get_LiteralPath();
    public void set_LiteralPath(string value);
    public String[] get_Name();
    public void set_Name(String[] value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    [CompilerGeneratedAttribute]
public ExportAliasFormat get_As();
    [CompilerGeneratedAttribute]
public void set_As(ExportAliasFormat value);
    public SwitchParameter get_Append();
    public void set_Append(SwitchParameter value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public SwitchParameter get_NoClobber();
    public void set_NoClobber(SwitchParameter value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    private static string GetAliasLine(AliasInfo alias, string formatString);
    private void WriteHeader(StreamWriter writer);
    private static void WriteFormattedResourceString(StreamWriter writer, string resourceId, Object[] args);
    private StreamWriter OpenFile(FileInfo& readOnlyFileInfo);
    private void ThrowFileOpenError(Exception e, string pathWithError);
}
public enum Microsoft.PowerShell.Commands.ExportAliasFormat : Enum {
    public int value__;
    public static ExportAliasFormat Csv;
    public static ExportAliasFormat Script;
}
[CmdletAttribute("Export", "Clixml")]
public class Microsoft.PowerShell.Commands.ExportClixmlCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private int <Depth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    private bool _isLiteralPath;
    [CompilerGeneratedAttribute]
private PSObject <InputObject>k__BackingField;
    private bool _force;
    private bool _noclobber;
    private Encoding _encoding;
    private FileStream _fs;
    private XmlWriter _xw;
    private Serializer _serializer;
    private FileInfo _readOnlyFileInfo;
    private bool _disposed;
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Depth { get; public set; }
    [ParameterAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string LiteralPath { get; public set; }
    [ParameterAttribute]
[AllowNullAttribute]
public PSObject InputObject { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter NoClobber { get; public set; }
    [ParameterAttribute]
[ArgumentToEncodingTransformationAttribute]
[ArgumentEncodingCompletionsAttribute]
[ValidateNotNullOrEmptyAttribute]
public Encoding Encoding { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Depth();
    [CompilerGeneratedAttribute]
public void set_Depth(int value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    public string get_LiteralPath();
    public void set_LiteralPath(string value);
    [CompilerGeneratedAttribute]
public PSObject get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSObject value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public SwitchParameter get_NoClobber();
    public void set_NoClobber(SwitchParameter value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
    private void CreateFileStream();
    private void CleanUp();
    public sealed virtual void Dispose();
}
[CmdletAttribute("Export", "Csv")]
public class Microsoft.PowerShell.Commands.ExportCsvCommand : BaseCsvWritingCommand {
    [CompilerGeneratedAttribute]
private PSObject <InputObject>k__BackingField;
    private string _path;
    private bool _specifiedPath;
    private bool _isLiteralPath;
    [CompilerGeneratedAttribute]
private SwitchParameter <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <NoClobber>k__BackingField;
    private Encoding _encoding;
    [CompilerGeneratedAttribute]
private SwitchParameter <Append>k__BackingField;
    private bool _isActuallyAppending;
    private bool _shouldProcess;
    private IList`1<string> _propertyNames;
    private IList`1<string> _preexistingPropertyNames;
    private ExportCsvHelper _helper;
    private FileStream _fs;
    private StreamWriter _sw;
    private FileInfo _readOnlyFileInfo;
    private bool _disposed;
    [ParameterAttribute]
public PSObject InputObject { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string LiteralPath { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter NoClobber { get; public set; }
    [ParameterAttribute]
[ArgumentToEncodingTransformationAttribute]
[ArgumentEncodingCompletionsAttribute]
[ValidateNotNullOrEmptyAttribute]
public Encoding Encoding { get; public set; }
    [ParameterAttribute]
public SwitchParameter Append { get; public set; }
    [CompilerGeneratedAttribute]
public virtual PSObject get_InputObject();
    [CompilerGeneratedAttribute]
public virtual void set_InputObject(PSObject value);
    public string get_Path();
    public void set_Path(string value);
    public string get_LiteralPath();
    public void set_LiteralPath(string value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_NoClobber();
    [CompilerGeneratedAttribute]
public void set_NoClobber(SwitchParameter value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Append();
    [CompilerGeneratedAttribute]
public void set_Append(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    private void CreateFileStream();
    private void CleanUp();
    private void ReconcilePreexistingPropertyNames();
    public virtual void WriteCsvLine(string line);
    public sealed virtual void Dispose();
}
internal class Microsoft.PowerShell.Commands.ExportCsvHelper : object {
    private char _delimiter;
    private QuoteKind _quoteKind;
    private HashSet`1<string> _quoteFields;
    private StringBuilder _outputString;
    private bool _disposed;
    internal ExportCsvHelper(char delimiter, QuoteKind quoteKind, String[] quoteFields);
    internal static IList`1<string> BuildPropertyNames(PSObject source, IList`1<string> propertyNames);
    internal string ConvertPropertyNamesCSV(IList`1<string> propertyNames);
    internal string ConvertPSObjectToCSV(PSObject mshObject, IList`1<string> propertyNames);
    internal static string GetToStringValueForProperty(PSPropertyInfo property);
    internal static string GetTypeString(PSObject source);
    internal static void AppendStringWithEscapeAlways(StringBuilder dest, string source);
    public sealed virtual void Dispose();
}
[CmdletAttribute("Export", "FormatData")]
public class Microsoft.PowerShell.Commands.ExportFormatDataCommand : PSCmdlet {
    private ExtendedTypeDefinition[] _typeDefinition;
    private string _filepath;
    private bool _isLiteralPath;
    private List`1<ExtendedTypeDefinition> _typeDefinitions;
    private bool _force;
    private bool _noclobber;
    private bool _includescriptblock;
    [ParameterAttribute]
public ExtendedTypeDefinition[] InputObject { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string LiteralPath { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter NoClobber { get; public set; }
    [ParameterAttribute]
public SwitchParameter IncludeScriptBlock { get; public set; }
    public ExtendedTypeDefinition[] get_InputObject();
    public void set_InputObject(ExtendedTypeDefinition[] value);
    public string get_Path();
    public void set_Path(string value);
    public string get_LiteralPath();
    public void set_LiteralPath(string value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public SwitchParameter get_NoClobber();
    public void set_NoClobber(SwitchParameter value);
    public SwitchParameter get_IncludeScriptBlock();
    public void set_IncludeScriptBlock(SwitchParameter value);
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
[CmdletAttribute("Export", "PSSession")]
[OutputTypeAttribute("System.IO.FileInfo")]
public class Microsoft.PowerShell.Commands.ExportPSSessionCommand : ImplicitRemotingCommandBase {
    [CompilerGeneratedAttribute]
private string <OutputModule>k__BackingField;
    private bool _force;
    private Encoding _encoding;
    private static string getChildItemScript;
    private static string copyItemScript;
    public static Version VersionOfScriptGenerator { get; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string OutputModule { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
[ArgumentToEncodingTransformationAttribute]
[ArgumentEncodingCompletionsAttribute]
[ValidateNotNullOrEmptyAttribute]
public Encoding Encoding { get; public set; }
    public static Version get_VersionOfScriptGenerator();
    [CompilerGeneratedAttribute]
public string get_OutputModule();
    [CompilerGeneratedAttribute]
public void set_OutputModule(string value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    private void DisplayDirectory(List`1<string> generatedFiles);
    protected virtual void BeginProcessing();
}
internal class Microsoft.PowerShell.Commands.ExpressionColumnInfo : ColumnInfo {
    private PSPropertyExpression _expression;
    internal ExpressionColumnInfo(string staleObjectPropertyName, string displayName, PSPropertyExpression expression);
    internal virtual object GetValue(PSObject liveObject);
}
public class Microsoft.PowerShell.Commands.FileHashInfo : object {
    [CompilerGeneratedAttribute]
private string <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Algorithm { get; public set; }
    public string Hash { get; public set; }
    public string Path { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Algorithm();
    [CompilerGeneratedAttribute]
public void set_Algorithm(string value);
    [CompilerGeneratedAttribute]
public string get_Hash();
    [CompilerGeneratedAttribute]
public void set_Hash(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
}
[CmdletAttribute("Format", "Custom")]
public class Microsoft.PowerShell.Commands.FormatCustomCommand : OuterFormatShapeCommandBase {
    private Object[] _props;
    private int _depth;
    [ParameterAttribute]
public Object[] Property { get; public set; }
    [ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
[ParameterAttribute]
public int Depth { get; public set; }
    public Object[] get_Property();
    public void set_Property(Object[] value);
    public int get_Depth();
    public void set_Depth(int value);
    internal virtual FormattingCommandLineParameters GetCommandLineParameters();
}
[CmdletAttribute("Format", "Hex")]
[OutputTypeAttribute("Microsoft.PowerShell.Commands.ByteCollection")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.Commands.FormatHex : PSCmdlet {
    private static int BUFFERSIZE;
    private List`1<byte> _inputBuffer;
    private bool _groupInput;
    private Type _lastInputType;
    [CompilerGeneratedAttribute]
private String[] <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <LiteralPath>k__BackingField;
    [CompilerGeneratedAttribute]
private PSObject <InputObject>k__BackingField;
    private Encoding _encoding;
    [CompilerGeneratedAttribute]
private long <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Raw>k__BackingField;
    private static Random _idGenerator;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public PSObject InputObject { get; public set; }
    [ParameterAttribute]
[ArgumentToEncodingTransformationAttribute]
[ArgumentEncodingCompletionsAttribute]
[ValidateNotNullOrEmptyAttribute]
public Encoding Encoding { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("0")]
public long Count { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("1")]
public long Offset { get; public set; }
    [ParameterAttribute]
[ObsoleteAttribute("Raw parameter is deprecated.", "True")]
public SwitchParameter Raw { get; public set; }
    private static FormatHex();
    [CompilerGeneratedAttribute]
public String[] get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_LiteralPath();
    [CompilerGeneratedAttribute]
public void set_LiteralPath(String[] value);
    [CompilerGeneratedAttribute]
public PSObject get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSObject value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public long get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(long value);
    [CompilerGeneratedAttribute]
public long get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(long value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Raw();
    [CompilerGeneratedAttribute]
public void set_Raw(SwitchParameter value);
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    private List`1<string> ResolvePaths(String[] path, bool literalPath);
    private void ProcessPath(List`1<string> pathsToProcess);
    private void ProcessFileContent(string path);
    private void ProcessString(string originalString);
    private static string GetGroupLabel(Type inputType);
    private void FlushInputBuffer();
    private void ProcessInputObjects(PSObject inputObject);
    private Byte[] ConvertToBytes(object inputObject);
    private void WriteHexadecimal(Span`1<byte> inputBytes, string path, long offset);
    private void WriteHexadecimal(Span`1<byte> inputBytes, long offset, string label);
}
[CmdletAttribute("Format", "List")]
public class Microsoft.PowerShell.Commands.FormatListCommand : OuterFormatTableAndListBase {
}
[CmdletAttribute("Format", "Table")]
public class Microsoft.PowerShell.Commands.FormatTableCommand : OuterFormatTableBase {
}
[CmdletAttribute("Format", "Wide")]
public class Microsoft.PowerShell.Commands.FormatWideCommand : OuterFormatShapeCommandBase {
    private object _prop;
    private Nullable`1<bool> _autosize;
    private Nullable`1<int> _column;
    [ParameterAttribute]
public object Property { get; public set; }
    [ParameterAttribute]
public SwitchParameter AutoSize { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Column { get; public set; }
    public object get_Property();
    public void set_Property(object value);
    public SwitchParameter get_AutoSize();
    public void set_AutoSize(SwitchParameter value);
    public int get_Column();
    public void set_Column(int value);
    internal virtual FormattingCommandLineParameters GetCommandLineParameters();
}
public class Microsoft.PowerShell.Commands.FormObject : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Fields>k__BackingField;
    public string Id { get; }
    public string Method { get; }
    public string Action { get; }
    public Dictionary`2<string, string> Fields { get; }
    public FormObject(string id, string method, string action);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Fields();
    internal void AddField(string key, string value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.PowerShell.Commands.FormObjectCollection : Collection`1<FormObject> {
    public FormObject Item { get; }
    public FormObject get_Item(string key);
}
public class Microsoft.PowerShell.Commands.GenericMeasureInfo : MeasureInfo {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Average>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Sum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Maximum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <StandardDeviation>k__BackingField;
    public int Count { get; public set; }
    public Nullable`1<double> Average { get; public set; }
    public Nullable`1<double> Sum { get; public set; }
    public Nullable`1<double> Maximum { get; public set; }
    public Nullable`1<double> Minimum { get; public set; }
    public Nullable`1<double> StandardDeviation { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Average();
    [CompilerGeneratedAttribute]
public void set_Average(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Sum();
    [CompilerGeneratedAttribute]
public void set_Sum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Maximum();
    [CompilerGeneratedAttribute]
public void set_Maximum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Minimum();
    [CompilerGeneratedAttribute]
public void set_Minimum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_StandardDeviation();
    [CompilerGeneratedAttribute]
public void set_StandardDeviation(Nullable`1<double> value);
}
public class Microsoft.PowerShell.Commands.GenericObjectMeasureInfo : MeasureInfo {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Average>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Sum>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Maximum>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <StandardDeviation>k__BackingField;
    public int Count { get; public set; }
    public Nullable`1<double> Average { get; public set; }
    public Nullable`1<double> Sum { get; public set; }
    public object Maximum { get; public set; }
    public object Minimum { get; public set; }
    public Nullable`1<double> StandardDeviation { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Average();
    [CompilerGeneratedAttribute]
public void set_Average(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Sum();
    [CompilerGeneratedAttribute]
public void set_Sum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public object get_Maximum();
    [CompilerGeneratedAttribute]
public void set_Maximum(object value);
    [CompilerGeneratedAttribute]
public object get_Minimum();
    [CompilerGeneratedAttribute]
public void set_Minimum(object value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_StandardDeviation();
    [CompilerGeneratedAttribute]
public void set_StandardDeviation(Nullable`1<double> value);
}
[CmdletAttribute("Get", "Alias")]
[OutputTypeAttribute("System.Management.Automation.AliasInfo")]
public class Microsoft.PowerShell.Commands.GetAliasCommand : PSCmdlet {
    private String[] _names;
    private String[] _excludes;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Definition>k__BackingField;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Name { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    [ParameterAttribute]
public string Scope { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Definition { get; public set; }
    public String[] get_Name();
    public void set_Name(String[] value);
    public String[] get_Exclude();
    public void set_Exclude(String[] value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public String[] get_Definition();
    [CompilerGeneratedAttribute]
public void set_Definition(String[] value);
    protected virtual void ProcessRecord();
    private void WriteMatches(string value, string parametersetname);
}
[CmdletAttribute("Get", "Culture")]
[OutputTypeAttribute("System.Globalization.CultureInfo")]
public class Microsoft.PowerShell.Commands.GetCultureCommand : PSCmdlet {
    private static string CurrentCultureParameterSet;
    private static string NameParameterSet;
    private static string ListAvailableParameterSet;
    [CompilerGeneratedAttribute]
private String[] <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <NoUserOverrides>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <ListAvailable>k__BackingField;
    [ParameterAttribute]
[ValidateSetAttribute("Microsoft.PowerShell.Commands.ValidateCultureNamesGenerator")]
[ValidateNotNullAttribute]
public String[] Name { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public SwitchParameter NoUserOverrides { get; public set; }
    [ParameterAttribute]
public SwitchParameter ListAvailable { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(String[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_NoUserOverrides();
    [CompilerGeneratedAttribute]
public void set_NoUserOverrides(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_ListAvailable();
    [CompilerGeneratedAttribute]
public void set_ListAvailable(SwitchParameter value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "Date")]
[OutputTypeAttribute("System.String")]
[OutputTypeAttribute("System.DateTime")]
public class Microsoft.PowerShell.Commands.GetDateCommand : Cmdlet {
    private DateTime _date;
    private bool _dateSpecified;
    private static long MinimumUnixTimeSecond;
    private static long MaximumUnixTimeSecond;
    private long _unixTimeSeconds;
    private bool _unixTimeSecondsSpecified;
    private int _year;
    private bool _yearSpecified;
    private int _month;
    private bool _monthSpecified;
    private int _day;
    private bool _daySpecified;
    private int _hour;
    private bool _hourSpecified;
    private int _minute;
    private bool _minuteSpecified;
    private int _second;
    private bool _secondSpecified;
    private int _millisecond;
    private bool _millisecondSpecified;
    [CompilerGeneratedAttribute]
private DisplayHintType <DisplayHint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <AsUTC>k__BackingField;
    private static DateTime s_epoch;
    private static string DateAndFormatParameterSet;
    private static string DateAndUFormatParameterSet;
    private static string UnixTimeSecondsAndFormatParameterSet;
    private static string UnixTimeSecondsAndUFormatParameterSet;
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public DateTime Date { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public long UnixTimeSeconds { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Year { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Month { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Day { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Hour { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Minute { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Second { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Millisecond { get; public set; }
    [ParameterAttribute]
public DisplayHintType DisplayHint { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public string UFormat { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ArgumentCompletionsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Format { get; public set; }
    [ParameterAttribute]
public SwitchParameter AsUTC { get; public set; }
    private static GetDateCommand();
    public DateTime get_Date();
    public void set_Date(DateTime value);
    public long get_UnixTimeSeconds();
    public void set_UnixTimeSeconds(long value);
    public int get_Year();
    public void set_Year(int value);
    public int get_Month();
    public void set_Month(int value);
    public int get_Day();
    public void set_Day(int value);
    public int get_Hour();
    public void set_Hour(int value);
    public int get_Minute();
    public void set_Minute(int value);
    public int get_Second();
    public void set_Second(int value);
    public int get_Millisecond();
    public void set_Millisecond(int value);
    [CompilerGeneratedAttribute]
public DisplayHintType get_DisplayHint();
    [CompilerGeneratedAttribute]
public void set_DisplayHint(DisplayHintType value);
    [CompilerGeneratedAttribute]
public string get_UFormat();
    [CompilerGeneratedAttribute]
public void set_UFormat(string value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_AsUTC();
    [CompilerGeneratedAttribute]
public void set_AsUTC(SwitchParameter value);
    protected virtual void ProcessRecord();
    private string UFormatDateString(DateTime dateTime);
}
[CmdletAttribute("Get", "Error")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.Commands.GetErrorCommand : PSCmdlet {
    internal static string ErrorParameterSetName;
    internal static string NewestParameterSetName;
    internal static string AliasNewest;
    internal static string ErrorRecordPSExtendedError;
    internal static string ExceptionPSExtendedError;
    [CompilerGeneratedAttribute]
private PSObject <InputObject>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Newest>k__BackingField;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public PSObject InputObject { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Newest { get; public set; }
    [CompilerGeneratedAttribute]
public PSObject get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSObject value);
    [CompilerGeneratedAttribute]
public int get_Newest();
    [CompilerGeneratedAttribute]
public void set_Newest(int value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "Event")]
[OutputTypeAttribute("System.Management.Automation.PSEventArgs")]
public class Microsoft.PowerShell.Commands.GetEventCommand : PSCmdlet {
    private string _sourceIdentifier;
    private int _eventId;
    private WildcardPattern _matchPattern;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string SourceIdentifier { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int EventIdentifier { get; public set; }
    public string get_SourceIdentifier();
    public void set_SourceIdentifier(string value);
    public int get_EventIdentifier();
    public void set_EventIdentifier(int value);
    protected virtual void EndProcessing();
}
[CmdletAttribute("Get", "EventSubscriber")]
[OutputTypeAttribute("System.Management.Automation.PSEventSubscriber")]
public class Microsoft.PowerShell.Commands.GetEventSubscriberCommand : PSCmdlet {
    private string _sourceIdentifier;
    [CompilerGeneratedAttribute]
private int <SubscriptionId>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Force>k__BackingField;
    private WildcardPattern _matchPattern;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string SourceIdentifier { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int SubscriptionId { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    public string get_SourceIdentifier();
    public void set_SourceIdentifier(string value);
    [CompilerGeneratedAttribute]
public int get_SubscriptionId();
    [CompilerGeneratedAttribute]
public void set_SubscriptionId(int value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(SwitchParameter value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "FileHash")]
[OutputTypeAttribute("Microsoft.PowerShell.Commands.FileHashInfo")]
public class Microsoft.PowerShell.Commands.GetFileHashCommand : HashCmdletBase {
    private String[] _paths;
    [CompilerGeneratedAttribute]
private Stream <InputStream>k__BackingField;
    private static string PathParameterSet;
    private static string LiteralPathParameterSet;
    private static string StreamParameterSet;
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public Stream InputStream { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    [CompilerGeneratedAttribute]
public Stream get_InputStream();
    [CompilerGeneratedAttribute]
public void set_InputStream(Stream value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    private bool ComputeFileHash(string path, String& hash);
    private void WriteHashResult(string Algorithm, string hash, string path);
}
[CmdletAttribute("Get", "FormatData")]
[OutputTypeAttribute("System.Management.Automation.ExtendedTypeDefinition")]
public class Microsoft.PowerShell.Commands.GetFormatDataCommand : PSCmdlet {
    private String[] _typename;
    private WildcardPattern[] _filter;
    [CompilerGeneratedAttribute]
private Version <PowerShellVersion>k__BackingField;
    [ValidateNotNullOrEmptyAttribute]
[ParameterAttribute]
public String[] TypeName { get; public set; }
    [ParameterAttribute]
public Version PowerShellVersion { get; public set; }
    public String[] get_TypeName();
    public void set_TypeName(String[] value);
    [CompilerGeneratedAttribute]
public Version get_PowerShellVersion();
    [CompilerGeneratedAttribute]
public void set_PowerShellVersion(Version value);
    protected virtual void BeginProcessing();
    private static Dictionary`2<string, List`1<string>> GetTypeGroupMap(IEnumerable`1<TypeGroupDefinition> groupDefinitions);
    protected virtual void ProcessRecord();
    private static ConsolidatedString CreateConsolidatedTypeName(ViewDefinition definition, Dictionary`2<string, List`1<string>> typeGroupMap);
    private bool ShouldGenerateView(ConsolidatedString consolidatedTypeName);
}
[CmdletAttribute("Get", "Host")]
[OutputTypeAttribute("System.Management.Automation.Host.PSHost")]
public class Microsoft.PowerShell.Commands.GetHostCommand : PSCmdlet {
    protected virtual void BeginProcessing();
}
[CmdletAttribute("Get", "MarkdownOption")]
[OutputTypeAttribute("Microsoft.PowerShell.MarkdownRender.PSMarkdownOptionInfo")]
public class Microsoft.PowerShell.Commands.GetMarkdownOptionCommand : PSCmdlet {
    private static string MarkdownOptionInfoVariableName;
    protected virtual void EndProcessing();
}
[CmdletAttribute("Get", "Member")]
[OutputTypeAttribute("Microsoft.PowerShell.Commands.MemberDefinition")]
public class Microsoft.PowerShell.Commands.GetMemberCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private PSObject <InputObject>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private PSMemberTypes <MemberType>k__BackingField;
    [CompilerGeneratedAttribute]
private PSMemberViewTypes <View>k__BackingField;
    private bool _staticParameter;
    private MshMemberMatchOptions _matchOptions;
    private HybridDictionary _typesAlreadyDisplayed;
    [ParameterAttribute]
public PSObject InputObject { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Name { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public PSMemberTypes MemberType { get; public set; }
    [ParameterAttribute]
public PSMemberViewTypes View { get; public set; }
    [ParameterAttribute]
public SwitchParameter Static { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [CompilerGeneratedAttribute]
public PSObject get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSObject value);
    [CompilerGeneratedAttribute]
public String[] get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(String[] value);
    [CompilerGeneratedAttribute]
public PSMemberTypes get_MemberType();
    [CompilerGeneratedAttribute]
public void set_MemberType(PSMemberTypes value);
    [CompilerGeneratedAttribute]
public PSMemberViewTypes get_View();
    [CompilerGeneratedAttribute]
public void set_View(PSMemberViewTypes value);
    public SwitchParameter get_Static();
    public void set_Static(SwitchParameter value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
[CmdletAttribute("Get", "PSBreakpoint")]
[OutputTypeAttribute("System.Management.Automation.CommandBreakpoint")]
[OutputTypeAttribute("System.Management.Automation.LineBreakpoint")]
[OutputTypeAttribute("System.Management.Automation.VariableBreakpoint")]
[OutputTypeAttribute("System.Management.Automation.Breakpoint")]
public class Microsoft.PowerShell.Commands.GetPSBreakpointCommand : PSBreakpointAccessorCommandBase {
    internal static string TypeParameterSetName;
    internal static string IdParameterSetName;
    [CompilerGeneratedAttribute]
private String[] <Script>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Variable>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private BreakpointType[] <Type>k__BackingField;
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Script { get; public set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
public Int32[] Id { get; public set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
public String[] Variable { get; public set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
public String[] Command { get; public set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
public BreakpointType[] Type { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Script();
    [CompilerGeneratedAttribute]
public void set_Script(String[] value);
    [CompilerGeneratedAttribute]
public Int32[] get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Int32[] value);
    [CompilerGeneratedAttribute]
public String[] get_Variable();
    [CompilerGeneratedAttribute]
public void set_Variable(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(String[] value);
    [CompilerGeneratedAttribute]
public BreakpointType[] get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(BreakpointType[] value);
    protected virtual void ProcessRecord();
    private static List`1<Breakpoint> Filter(List`1<Breakpoint> input, T[] filter, FilterSelector`1<T> selector);
    [CompilerGeneratedAttribute]
private bool <ProcessRecord>b__22_4(Breakpoint breakpoint, string script);
}
[CmdletAttribute("Get", "PSCallStack")]
[OutputTypeAttribute("System.Management.Automation.CallStackFrame")]
public class Microsoft.PowerShell.Commands.GetPSCallStackCommand : PSCmdlet {
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "Random")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.Commands.GetRandomCommand : PSCmdlet {
    private static string RandomNumberParameterSet;
    private static string RandomListItemParameterSet;
    private static string ShuffleParameterSet;
    private static Object[] _nullInArray;
    private MyParameterSet _effectiveParameterSet;
    private static ReaderWriterLockSlim s_runspaceGeneratorMapLock;
    private static Dictionary`2<Guid, PolymorphicRandomNumberGenerator> s_runspaceGeneratorMap;
    private PolymorphicRandomNumberGenerator _generator;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SetSeed>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Maximum>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Minimum>k__BackingField;
    private List`1<object> _chosenListItems;
    private int _numberOfProcessedListItems;
    [CompilerGeneratedAttribute]
private Object[] <InputObject>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Shuffle>k__BackingField;
    private MyParameterSet EffectiveParameterSet { get; }
    private PolymorphicRandomNumberGenerator Generator { get; private set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
public Nullable`1<int> SetSeed { get; public set; }
    [ParameterAttribute]
public object Maximum { get; public set; }
    [ParameterAttribute]
public object Minimum { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AllowNullAttribute]
public Object[] InputObject { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Count { get; public set; }
    [ParameterAttribute]
public SwitchParameter Shuffle { get; public set; }
    private static GetRandomCommand();
    private MyParameterSet get_EffectiveParameterSet();
    private void ThrowMinGreaterThanOrEqualMax(object minValue, object maxValue);
    private static void CurrentRunspace_StateChanged(object sender, RunspaceStateEventArgs e);
    private PolymorphicRandomNumberGenerator get_Generator();
    private void set_Generator(PolymorphicRandomNumberGenerator value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SetSeed();
    [CompilerGeneratedAttribute]
public void set_SetSeed(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public object get_Maximum();
    [CompilerGeneratedAttribute]
public void set_Maximum(object value);
    [CompilerGeneratedAttribute]
public object get_Minimum();
    [CompilerGeneratedAttribute]
public void set_Minimum(object value);
    private static bool IsInt(object o);
    private static bool IsInt64(object o);
    private static object ProcessOperand(object o);
    private static double ConvertToDouble(object o, double defaultIfNull);
    [CompilerGeneratedAttribute]
public Object[] get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(Object[] value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Shuffle();
    [CompilerGeneratedAttribute]
public void set_Shuffle(SwitchParameter value);
    private double GetRandomDouble(double minValue, double maxValue);
    private long GetRandomInt64(long minValue, long maxValue);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
[CmdletAttribute("Get", "Runspace")]
[OutputTypeAttribute("System.Management.Automation.Runspaces.Runspace")]
public class Microsoft.PowerShell.Commands.GetRunspaceCommand : PSCmdlet {
    private static string NameParameterSet;
    private static string IdParameterSet;
    private static string InstanceIdParameterSet;
    [CompilerGeneratedAttribute]
private String[] <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid[] <InstanceId>k__BackingField;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Name { get; public set; }
    [ParameterAttribute]
public Int32[] Id { get; public set; }
    [ParameterAttribute]
public Guid[] InstanceId { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(String[] value);
    [CompilerGeneratedAttribute]
public Int32[] get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Int32[] value);
    [CompilerGeneratedAttribute]
public Guid[] get_InstanceId();
    [CompilerGeneratedAttribute]
public void set_InstanceId(Guid[] value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "RunspaceDebug")]
[OutputTypeAttribute("Microsoft.PowerShell.Commands.PSRunspaceDebug")]
public class Microsoft.PowerShell.Commands.GetRunspaceDebugCommand : CommonRunspaceCommandBase {
    protected virtual void ProcessRecord();
}
internal static class Microsoft.PowerShell.Commands.GetRunspaceUtils : object {
    internal static IReadOnlyList`1<Runspace> GetAllRunspaces();
    internal static IReadOnlyList`1<Runspace> GetRunspacesByName(String[] names);
    internal static IReadOnlyList`1<Runspace> GetRunspacesById(Int32[] ids);
    internal static IReadOnlyList`1<Runspace> GetRunspacesByInstanceId(Guid[] instanceIds);
}
[CmdletAttribute("Get", "TraceSource")]
[OutputTypeAttribute("System.Management.Automation.PSTraceSource")]
public class Microsoft.PowerShell.Commands.GetTraceSourceCommand : TraceCommandBase {
    private String[] _names;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Name { get; public set; }
    public String[] get_Name();
    public void set_Name(String[] value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "TypeData")]
[OutputTypeAttribute("System.Management.Automation.PSObject")]
public class Microsoft.PowerShell.Commands.GetTypeDataCommand : PSCmdlet {
    private WildcardPattern[] _filter;
    [CompilerGeneratedAttribute]
private String[] <TypeName>k__BackingField;
    [ValidateNotNullOrEmptyAttribute]
[ParameterAttribute]
public String[] TypeName { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(String[] value);
    private void ValidateTypeName();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "UICulture")]
[OutputTypeAttribute("System.Globalization.CultureInfo")]
public class Microsoft.PowerShell.Commands.GetUICultureCommand : PSCmdlet {
    protected virtual void BeginProcessing();
}
[CmdletAttribute("Get", "Unique")]
public class Microsoft.PowerShell.Commands.GetUniqueCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private PSObject <InputObject>k__BackingField;
    private bool _asString;
    private bool _onType;
    private PSObject _lastObject;
    private string _lastObjectAsString;
    private ObjectCommandComparer _comparer;
    [ParameterAttribute]
public PSObject InputObject { get; public set; }
    [ParameterAttribute]
public SwitchParameter AsString { get; public set; }
    [ParameterAttribute]
public SwitchParameter OnType { get; public set; }
    [CompilerGeneratedAttribute]
public PSObject get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSObject value);
    public SwitchParameter get_AsString();
    public void set_AsString(SwitchParameter value);
    public SwitchParameter get_OnType();
    public void set_OnType(SwitchParameter value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "Uptime")]
[OutputTypeAttribute("System.TimeSpan")]
[OutputTypeAttribute("System.DateTime")]
public class Microsoft.PowerShell.Commands.GetUptimeCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private SwitchParameter <Since>k__BackingField;
    private static string TimespanParameterSet;
    private static string SinceParameterSet;
    [ParameterAttribute]
public SwitchParameter Since { get; public set; }
    [CompilerGeneratedAttribute]
public SwitchParameter get_Since();
    [CompilerGeneratedAttribute]
public void set_Since(SwitchParameter value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "Variable")]
[OutputTypeAttribute("System.Management.Automation.PSVariable")]
public class Microsoft.PowerShell.Commands.GetVariableCommand : VariableCommandBase {
    private String[] _name;
    private bool _valueOnly;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Name { get; public set; }
    [ParameterAttribute]
public SwitchParameter ValueOnly { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    public String[] get_Name();
    public void set_Name(String[] value);
    public SwitchParameter get_ValueOnly();
    public void set_ValueOnly(SwitchParameter value);
    public String[] get_Include();
    public void set_Include(String[] value);
    public String[] get_Exclude();
    public void set_Exclude(String[] value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "Verb")]
[OutputTypeAttribute("System.Management.Automation.VerbInfo")]
public class Microsoft.PowerShell.Commands.GetVerbCommand : Cmdlet {
    [CompilerGeneratedAttribute]
private String[] <Verb>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Group>k__BackingField;
    [ParameterAttribute]
public String[] Verb { get; public set; }
    [ParameterAttribute]
[ValidateSetAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Group { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Verb();
    [CompilerGeneratedAttribute]
public void set_Verb(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Group();
    [CompilerGeneratedAttribute]
public void set_Group(String[] value);
    protected virtual void ProcessRecord();
}
[DebuggerDisplayAttribute("{Name} ({Count})")]
public class Microsoft.PowerShell.Commands.GroupInfo : object {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<PSObject> <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private OrderByPropertyEntry <GroupValue>k__BackingField;
    public ArrayList Values { get; }
    public int Count { get; internal set; }
    public Collection`1<PSObject> Group { get; }
    public string Name { get; }
    internal OrderByPropertyEntry GroupValue { get; }
    internal GroupInfo(OrderByPropertyEntry groupValue);
    internal virtual void Add(PSObject groupValue);
    private static string BuildName(List`1<ObjectCommandPropertyValue> propValues);
    public ArrayList get_Values();
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
internal void set_Count(int value);
    [CompilerGeneratedAttribute]
public Collection`1<PSObject> get_Group();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal OrderByPropertyEntry get_GroupValue();
}
public class Microsoft.PowerShell.Commands.GroupInfoNoElement : GroupInfo {
    internal GroupInfoNoElement(OrderByPropertyEntry groupValue);
    internal virtual void Add(PSObject groupValue);
}
[CmdletAttribute("Group", "Object")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.Commands.GroupObjectCommand : ObjectBase {
    [TraceSourceAttribute("GroupObjectCommand", "Class that has group base implementation")]
private static PSTraceSource s_tracer;
    [CompilerGeneratedAttribute]
private SwitchParameter <NoElement>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <AsHashTable>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <AsString>k__BackingField;
    private List`1<GroupInfo> _groups;
    private OrderByProperty _orderByProperty;
    private Dictionary`2<object, GroupInfo> _tupleToGroupInfoMappingDictionary;
    private List`1<OrderByPropertyEntry> _entriesToOrder;
    private OrderByPropertyComparer _orderByPropertyComparer;
    private bool _hasProcessedFirstInputObject;
    private bool _hasDifferentValueTypes;
    private Type[] _propertyTypesCandidate;
    [ParameterAttribute]
public SwitchParameter NoElement { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter AsHashTable { get; public set; }
    [ParameterAttribute]
public SwitchParameter AsString { get; public set; }
    private static GroupObjectCommand();
    [CompilerGeneratedAttribute]
public SwitchParameter get_NoElement();
    [CompilerGeneratedAttribute]
public void set_NoElement(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_AsHashTable();
    [CompilerGeneratedAttribute]
public void set_AsHashTable(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_AsString();
    [CompilerGeneratedAttribute]
public void set_AsString(SwitchParameter value);
    private static void DoGrouping(OrderByPropertyEntry currentObjectEntry, bool noElement, List`1<GroupInfo> groups, Dictionary`2<object, GroupInfo> groupInfoDictionary, OrderByPropertyComparer orderByPropertyComparer);
    private static void DoOrderedGrouping(OrderByPropertyEntry currentObjectEntry, bool noElement, List`1<GroupInfo> groups, Dictionary`2<object, GroupInfo> groupInfoDictionary, OrderByPropertyComparer orderByPropertyComparer);
    private void WriteNonTerminatingError(Exception exception, string resourceIdAndErrorId, ErrorCategory category);
    protected virtual void ProcessRecord();
    private void UpdateOrderPropertyTypeInfo(List`1<ObjectCommandPropertyValue> currentEntryOrderValues);
    protected virtual void EndProcessing();
}
internal class Microsoft.PowerShell.Commands.GroupObjectExpressionParameterDefinition : CommandParameterDefinition {
    protected virtual void SetEntries();
}
public class Microsoft.PowerShell.Commands.HashCmdletBase : PSCmdlet {
    private string _Algorithm;
    protected HashAlgorithm hasher;
    [ParameterAttribute]
[ValidateSetAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Algorithm { get; public set; }
    public string get_Algorithm();
    public void set_Algorithm(string value);
    protected void InitHasher(string Algorithm);
}
internal class Microsoft.PowerShell.Commands.HeaderInfo : object {
    private List`1<ColumnInfo> _columns;
    internal void AddColumn(ColumnInfo col);
    internal PSObject AddColumnsToWindow(OutWindowProxy windowProxy, PSObject liveObject);
    internal PSObject CreateStalePSObject(PSObject liveObject);
}
internal static class Microsoft.PowerShell.Commands.HttpKnownHeaderNames : object {
    public static string Accept;
    public static string AcceptCharset;
    public static string AcceptEncoding;
    public static string AcceptLanguage;
    public static string AcceptRanges;
    public static string Age;
    public static string Allow;
    public static string Authorization;
    public static string CacheControl;
    public static string Connection;
    public static string ContentDisposition;
    public static string ContentEncoding;
    public static string ContentLanguage;
    public static string ContentLength;
    public static string ContentLocation;
    public static string ContentMD5;
    public static string ContentRange;
    public static string ContentType;
    public static string Cookie;
    public static string Cookie2;
    public static string Date;
    public static string ETag;
    public static string Expect;
    public static string Expires;
    public static string From;
    public static string Host;
    public static string IfMatch;
    public static string IfModifiedSince;
    public static string IfNoneMatch;
    public static string IfRange;
    public static string IfUnmodifiedSince;
    public static string KeepAlive;
    public static string LastModified;
    public static string Location;
    public static string MaxForwards;
    public static string Origin;
    public static string P3P;
    public static string Pragma;
    public static string ProxyAuthenticate;
    public static string ProxyAuthorization;
    public static string ProxyConnection;
    public static string Range;
    public static string Referer;
    public static string RetryAfter;
    public static string SecWebSocketAccept;
    public static string SecWebSocketExtensions;
    public static string SecWebSocketKey;
    public static string SecWebSocketProtocol;
    public static string SecWebSocketVersion;
    public static string Server;
    public static string SetCookie;
    public static string SetCookie2;
    public static string TE;
    public static string Trailer;
    public static string TransferEncoding;
    public static string Upgrade;
    public static string UserAgent;
    public static string Vary;
    public static string Via;
    public static string WWWAuthenticate;
    public static string Warning;
    public static string XAspNetVersion;
    public static string XPoweredBy;
    private static HashSet`1<string> s_contentHeaderSet;
    internal static HashSet`1<string> ContentHeaders { get; }
    private static HttpKnownHeaderNames();
    internal static HashSet`1<string> get_ContentHeaders();
}
public class Microsoft.PowerShell.Commands.HttpResponseException : HttpRequestException {
    [CompilerGeneratedAttribute]
private HttpResponseMessage <Response>k__BackingField;
    public HttpResponseMessage Response { get; }
    public HttpResponseException(string message, HttpResponseMessage response);
    [CompilerGeneratedAttribute]
public HttpResponseMessage get_Response();
}
internal class Microsoft.PowerShell.Commands.HttpVersionCompletionsAttribute : ArgumentCompletionsAttribute {
    [NullableAttribute("1")]
public static String[] AllowedVersions;
    private static HttpVersionCompletionsAttribute();
}
internal class Microsoft.PowerShell.Commands.ImplicitRemotingCodeGenerator : object {
    internal static Version VersionOfScriptWriter;
    private PSSession _remoteRunspaceInfo;
    private Guid _moduleGuid;
    private InvocationInfo _invocationInfo;
    private static string SectionSeparator;
    private static string ManifestTemplate;
    private static string TopCommentTemplate;
    private static string HeaderTemplate;
    private static string HelperFunctionsWriteMessage;
    private static string HelperFunctionsSetImplicitRunspaceTemplate;
    private static string HelperFunctionsGetSessionOptionTemplate;
    private static string ProxyCredentialParameterTemplate;
    private static string HelperFunctionsGetImplicitRunspaceTemplate;
    private static string ReimportTemplate;
    private static string NewRunspaceTemplate;
    private static string NewVMRunspaceTemplate;
    private static string NewContainerRunspaceTemplate;
    private static string ComputerNameParameterTemplate;
    private static string VMIdParameterTemplate;
    private static string ContainerIdParameterTemplate;
    private static string AuthenticationMechanismParameterTemplate;
    private static string CredentialParameterTemplate;
    private static string CertificateThumbprintParameterTemplate;
    private static string HelperFunctionsModifyParameters;
    private static string CommandProxyTemplate;
    private static string ExportFunctionsTemplate;
    private static string SetAliasTemplate;
    private static string ExportAliasesTemplate;
    internal ImplicitRemotingCodeGenerator(PSSession remoteRunspaceInfo, Guid moduleGuid, InvocationInfo invocationInfo);
    private static ImplicitRemotingCodeGenerator();
    private string GetConnectionString();
    private static string EscapeFunctionNameForRemoteHelp(string name);
    private static void GenerateSectionSeparator(TextWriter writer);
    private void GenerateManifest(TextWriter writer, string psm1fileName, string formatPs1xmlFileName);
    private void GenerateTopComment(TextWriter writer);
    private void GenerateModuleHeader(TextWriter writer);
    private static void GenerateHelperFunctionsWriteMessage(TextWriter writer);
    private static void GenerateHelperFunctionsSetImplicitRunspace(TextWriter writer);
    private void GenerateHelperFunctionsGetSessionOption(TextWriter writer);
    private PSPrimitiveDictionary GetApplicationArguments();
    private string GenerateNewPSSessionOption();
    private string GenerateProxyCredentialParameter(WSManConnectionInfo wsmanConnectionInfo);
    private void GenerateHelperFunctionsGetImplicitRunspace(TextWriter writer);
    private string GenerateReimportingOfModules();
    private string GenerateNewRunspaceExpression();
    private string GenerateConnectionStringForNewRunspace();
    private string GenerateAllowRedirectionParameter();
    private string GenerateAuthenticationMechanismParameter();
    private string GenerateCredentialParameter();
    private string GenerateCertificateThumbprintParameter();
    private static void GenerateHelperFunctionsClientSideParameters(TextWriter writer);
    private void GenerateHelperFunctions(TextWriter writer);
    private static void GenerateCommandProxy(TextWriter writer, CommandMetadata commandMetadata);
    private static void GenerateCommandProxy(TextWriter writer, IEnumerable`1<CommandMetadata> listOfCommandMetadata);
    private static void GenerateExportDeclaration(TextWriter writer, IEnumerable`1<CommandMetadata> listOfCommandMetadata);
    private static List`1<string> GetListOfCommandNames(IEnumerable`1<CommandMetadata> listOfCommandMetadata);
    private static string GenerateArrayString(IEnumerable`1<string> listOfStrings);
    private static void GenerateAliases(TextWriter writer, Dictionary`2<string, string> alias2resolvedCommandName);
    private static void GenerateFormatFile(TextWriter writer, List`1<ExtendedTypeDefinition> listOfFormatData);
    internal List`1<string> GenerateProxyModule(DirectoryInfo moduleRootDirectory, string fileNamePrefix, Encoding encoding, bool force, List`1<CommandMetadata> listOfCommandMetadata, Dictionary`2<string, string> alias2resolvedCommandName, List`1<ExtendedTypeDefinition> listOfFormatData, X509Certificate2 certificate);
}
public class Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase : PSCmdlet {
    internal static string ImplicitRemotingKey;
    internal static string ImplicitRemotingHashKey;
    internal static string ImplicitRemotingCommandsToSkipKey;
    private String[] _commandNameParameter;
    private Collection`1<WildcardPattern> _commandNamePatterns;
    [CompilerGeneratedAttribute]
private SwitchParameter <AllowClobber>k__BackingField;
    private Object[] _commandArgs;
    private CommandTypes _commandType;
    private String[] _PSSnapins;
    internal bool IsModuleSpecified;
    private ModuleSpecification[] _moduleSpecifications;
    internal bool IsFullyQualifiedModuleSpecified;
    private bool _commandParameterSpecified;
    private String[] _formatTypeNameParameter;
    private Collection`1<WildcardPattern> _formatTypeNamePatterns;
    private bool _formatTypeNamesSpecified;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2 <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private PSSession <Session>k__BackingField;
    private List`1<string> _commandsSkippedBecauseOfShadowing;
    private Dictionary`2<string, object> _existingCommands;
    private List`1<string> _commandSkipListFromServer;
    private bool _assumeMeasureObjectIsAvailable;
    private DateTime _lastTimeProgressWasWritten;
    [CompilerGeneratedAttribute]
private Guid <ModuleGuid>k__BackingField;
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] CommandName { get; public set; }
    [ParameterAttribute]
public SwitchParameter AllowClobber { get; public set; }
    [ParameterAttribute]
[AllowNullAttribute]
[AllowEmptyCollectionAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] ArgumentList { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CommandTypes CommandType { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullAttribute]
public String[] Module { get; public set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
public ModuleSpecification[] FullyQualifiedModule { get; public set; }
    [ParameterAttribute]
public String[] FormatTypeName { get; public set; }
    internal string Prefix { get; internal set; }
    [ParameterAttribute]
public X509Certificate2 Certificate { get; public set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
public PSSession Session { get; public set; }
    private Dictionary`2<string, object> ExistingCommands { get; }
    private List`1<string> CommandSkipListFromServer { get; }
    internal Guid ModuleGuid { get; }
    public String[] get_CommandName();
    public void set_CommandName(String[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_AllowClobber();
    [CompilerGeneratedAttribute]
public void set_AllowClobber(SwitchParameter value);
    public Object[] get_ArgumentList();
    public void set_ArgumentList(Object[] value);
    public CommandTypes get_CommandType();
    public void set_CommandType(CommandTypes value);
    public String[] get_Module();
    public void set_Module(String[] value);
    public ModuleSpecification[] get_FullyQualifiedModule();
    public void set_FullyQualifiedModule(ModuleSpecification[] value);
    public String[] get_FormatTypeName();
    public void set_FormatTypeName(String[] value);
    [CompilerGeneratedAttribute]
internal string get_Prefix();
    [CompilerGeneratedAttribute]
internal void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public X509Certificate2 get_Certificate();
    [CompilerGeneratedAttribute]
public void set_Certificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
public PSSession get_Session();
    [CompilerGeneratedAttribute]
public void set_Session(PSSession value);
    internal ErrorDetails GetErrorDetails(string errorId, Object[] args);
    private ErrorRecord GetErrorNoCommandsImportedBecauseOfSkipping();
    private ErrorRecord GetErrorMalformedDataFromRemoteCommand(string commandName);
    private ErrorRecord GetErrorCommandSkippedBecauseOfShadowing(string commandNames);
    private ErrorRecord GetErrorSkippedNonRequestedCommand(string commandName);
    private ErrorRecord GetErrorSkippedNonRequestedTypeDefinition(string typeName);
    private ErrorRecord GetErrorSkippedUnsafeCommandName(string commandName);
    private ErrorRecord GetErrorSkippedUnsafeNameInMetadata(string commandName, string nameType, string name);
    private ErrorRecord GetErrorFromRemoteCommand(string commandName, RuntimeException runtimeException);
    private ErrorRecord GetErrorCouldntResolvedAlias(string aliasName);
    private ErrorRecord GetErrorNoResultsFromRemoteEnd(string commandName);
    private void ReportSkippedCommands();
    private bool IsCommandNameMatchingParameters(string commandName);
    private Dictionary`2<string, object> get_ExistingCommands();
    private bool IsShadowingExistingCommands(string commandName);
    private bool IsCommandNameAllowedForImport(string commandName);
    private List`1<string> get_CommandSkipListFromServer();
    private bool IsCommandSkippedByServerDeclaration(string commandName);
    private T ConvertTo(string commandName, object value);
    private T ConvertTo(string commandName, object value, bool nullOk);
    private T GetPropertyValue(string commandName, PSObject pso, string propertyName);
    private T GetPropertyValue(string commandName, PSObject pso, string propertyName, bool nullOk);
    private List`1<T> RehydrateList(string commandName, PSObject deserializedObject, string propertyName, Func`2<PSObject, T> itemRehydrator);
    private List`1<T> RehydrateList(string commandName, object deserializedList, Func`2<PSObject, T> itemRehydrator);
    private Dictionary`2<TKey, TValue> RehydrateDictionary(string commandName, PSObject deserializedObject, string propertyName, Func`2<PSObject, TValue> valueRehydrator);
    private static bool IsSafeNameOrIdentifier(string name);
    private static bool IsSafeParameterName(string parameterName);
    private static bool IsSafeTypeConstraint(Type type);
    private bool IsSafeCommandMetadata(CommandMetadata commandMetadata);
    private Type RehydrateParameterType(PSObject deserializedParameterMetadata);
    private ParameterMetadata RehydrateParameterMetadata(PSObject deserializedParameterMetadata);
    private static bool IsProxyForCmdlet(Dictionary`2<string, ParameterMetadata> parameters);
    private CommandMetadata RehydrateCommandMetadata(PSObject deserializedCommandInfo, String& resolvedCommandName);
    private static int GetCommandTypePriority(CommandTypes commandType);
    private void AddRemoteCommandMetadata(Dictionary`2<string, CommandMetadata> name2commandMetadata, Dictionary`2<string, string> alias2resolvedCommandName, PSObject remoteCommandInfo);
    private bool IsTypeNameMatchingParameters(string name);
    private bool IsSafeTypeDefinition(ExtendedTypeDefinition typeDefinition);
    private void AddRemoteTypeDefinition(IList`1<ExtendedTypeDefinition> listOfTypeDefinitions, PSObject remoteTypeDefinition);
    private int CountRemoteObjects(PowerShell powerShell);
    internal void DuplicatePowerShellStreams(PowerShell powerShell);
    private PowerShell BuildPowerShellForGetFormatData();
    internal List`1<ExtendedTypeDefinition> GetRemoteFormatData();
    private PowerShell BuildPowerShellForGetCommand();
    private void HandleHostCallReceived(object sender, RemoteDataEventArgs`1<RemoteHostCall> eventArgs);
    internal List`1<CommandMetadata> GetRemoteCommandMetadata(Dictionary`2& alias2resolvedCommandName);
    private void WriteProgress(string statusDescription, Nullable`1<int> percentComplete, Nullable`1<int> secondsRemaining);
    private void WriteProgress(DateTime startTime, int currentCount, int expectedCount, string resourceId);
    [CompilerGeneratedAttribute]
internal Guid get_ModuleGuid();
    internal List`1<string> GenerateProxyModule(DirectoryInfo moduleRootDirectory, string moduleNamePrefix, Encoding encoding, bool force, List`1<CommandMetadata> listOfCommandMetadata, Dictionary`2<string, string> alias2resolvedCommandName, List`1<ExtendedTypeDefinition> listOfFormatData);
}
[CmdletAttribute("Import", "Alias")]
[OutputTypeAttribute("System.Management.Automation.AliasInfo")]
public class Microsoft.PowerShell.Commands.ImportAliasCommand : PSCmdlet {
    private static string LiteralPathParameterSetName;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    private bool _passThru;
    private bool _force;
    private Dictionary`2<string, CommandTypes> _existingCommands;
    [ParameterAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string LiteralPath { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Scope { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    private Dictionary`2<string, CommandTypes> ExistingCommands { get; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    public string get_LiteralPath();
    public void set_LiteralPath(string value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    protected virtual void ProcessRecord();
    private Dictionary`2<string, CommandTypes> get_ExistingCommands();
    private bool VerifyShadowingExistingCommandsAndWriteError(string aliasName);
    private Collection`1<AliasInfo> GetAliasesFromFile(bool isLiteralPath);
    private StreamReader OpenFile(String& filePath, bool isLiteralPath);
    private void ThrowFileOpenError(Exception e, string pathWithError);
    private static bool OnlyContainsWhitespace(string line);
}
[CmdletAttribute("Import", "Clixml")]
public class Microsoft.PowerShell.Commands.ImportClixmlCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private String[] <Path>k__BackingField;
    private bool _isLiteralPath;
    private bool _disposed;
    private ImportXmlHelper _helper;
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public sealed virtual void Dispose();
    protected virtual void ProcessRecord();
    protected virtual void StopProcessing();
}
[CmdletAttribute("Import", "Csv")]
public class Microsoft.PowerShell.Commands.ImportCsvCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private char <Delimiter>k__BackingField;
    private String[] _paths;
    private bool _specifiedPath;
    private bool _isLiteralPath;
    [CompilerGeneratedAttribute]
private SwitchParameter <UseCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Header>k__BackingField;
    private Encoding _encoding;
    private bool _alreadyWarnedUnspecifiedNames;
    [ParameterAttribute]
[ParameterAttribute]
[ValidateNotNullAttribute]
public char Delimiter { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ValidateNotNullAttribute]
public SwitchParameter UseCulture { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Header { get; public set; }
    [ParameterAttribute]
[ArgumentToEncodingTransformationAttribute]
[ArgumentEncodingCompletionsAttribute]
[ValidateNotNullOrEmptyAttribute]
public Encoding Encoding { get; public set; }
    [CompilerGeneratedAttribute]
public char get_Delimiter();
    [CompilerGeneratedAttribute]
public void set_Delimiter(char value);
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_UseCulture();
    [CompilerGeneratedAttribute]
public void set_UseCulture(SwitchParameter value);
    [CompilerGeneratedAttribute]
public String[] get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(String[] value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
internal class Microsoft.PowerShell.Commands.ImportCsvHelper : object {
    private PSCmdlet _cmdlet;
    private char _delimiter;
    private static string UnspecifiedName;
    private bool _alreadyWarnedUnspecifiedName;
    [CompilerGeneratedAttribute]
private IList`1<string> <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    private StreamReader _sr;
    private static int ValueCountGuestimate;
    private static int LineLengthGuestimate;
    internal IList`1<string> Header { get; private set; }
    internal string TypeName { get; private set; }
    private bool EOF { get; }
    internal ImportCsvHelper(PSCmdlet cmdlet, char delimiter, IList`1<string> header, string typeName, StreamReader streamReader);
    [CompilerGeneratedAttribute]
internal IList`1<string> get_Header();
    [CompilerGeneratedAttribute]
private void set_Header(IList`1<string> value);
    [CompilerGeneratedAttribute]
internal string get_TypeName();
    [CompilerGeneratedAttribute]
private void set_TypeName(string value);
    private bool get_EOF();
    private char ReadChar();
    private bool PeekNextChar(char c);
    private string ReadLine();
    internal void ReadHeader();
    internal void Import(Boolean& alreadyWriteOutWarning);
    private static void ValidatePropertyNames(IList`1<string> names);
    private string ReadTypeInformation();
    private void ParseNextRecord(List`1<string> result, StringBuilder current);
    private bool IsNewLine(char ch, String& newLine);
    private void ReadTillNextDelimiter(StringBuilder current, Boolean& endOfRecord, bool eatTrailingBlanks);
    private PSObject BuildMshobject(string type, IList`1<string> names, List`1<string> values, char delimiter, bool preValidated);
}
internal static class Microsoft.PowerShell.Commands.ImportExportCSVHelper : object {
    internal static char CSVDelimiter;
    internal static string CSVTypePrefix;
    internal static char SetDelimiter(PSCmdlet cmdlet, string parameterSetName, char explicitDelimiter, bool useCulture);
}
[CmdletAttribute("Import", "LocalizedData")]
public class Microsoft.PowerShell.Commands.ImportLocalizedData : PSCmdlet {
    private string _bindingVariable;
    private string _uiculture;
    private string _baseDirectory;
    private string _fileName;
    private String[] _commandsAllowed;
    private bool _setSupportedCommand;
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public string BindingVariable { get; public set; }
    [ParameterAttribute]
public string UICulture { get; public set; }
    [ParameterAttribute]
public string BaseDirectory { get; public set; }
    [ParameterAttribute]
public string FileName { get; public set; }
    [ParameterAttribute]
[ValidateTrustedDataAttribute]
public String[] SupportedCommand { get; public set; }
    public string get_BindingVariable();
    public void set_BindingVariable(string value);
    public string get_UICulture();
    public void set_UICulture(string value);
    public string get_BaseDirectory();
    public void set_BaseDirectory(string value);
    public string get_FileName();
    public void set_FileName(string value);
    public String[] get_SupportedCommand();
    public void set_SupportedCommand(String[] value);
    protected virtual void ProcessRecord();
    private string GetFilePath();
    private string GetScript(string filePath);
}
[CmdletAttribute("Import", "PowerShellDataFile")]
public class Microsoft.PowerShell.Commands.ImportPowerShellDataFileCommand : PSCmdlet {
    private bool _isLiteralPath;
    [CompilerGeneratedAttribute]
private String[] <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <SkipLimitCheck>k__BackingField;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public SwitchParameter SkipLimitCheck { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_SkipLimitCheck();
    [CompilerGeneratedAttribute]
public void set_SkipLimitCheck(SwitchParameter value);
    protected virtual void ProcessRecord();
    private void WritePathNotFoundError(string path);
    private void WriteInvalidDataFileError(string resolvedPath, string errorId);
}
[CmdletAttribute("Import", "PSSession")]
[OutputTypeAttribute("System.Management.Automation.PSModuleInfo")]
public class Microsoft.PowerShell.Commands.ImportPSSessionCommand : ImplicitRemotingCommandBase {
    private static string runspaceStateChangedScript;
    private static string unregisterEventCleanUpScript;
    private static string importModuleScript;
    private bool _disableNameChecking;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Prefix { get; public set; }
    [ParameterAttribute]
public SwitchParameter DisableNameChecking { get; public set; }
    private void RegisterModuleCleanUp(PSModuleInfo moduleInfo);
    private PSModuleInfo CreateModule(string manifestFile);
    public string get_Prefix();
    public void set_Prefix(string value);
    public SwitchParameter get_DisableNameChecking();
    public void set_DisableNameChecking(SwitchParameter value);
    protected virtual void BeginProcessing();
}
internal class Microsoft.PowerShell.Commands.ImportXmlHelper : object {
    private string _path;
    private PSCmdlet _cmdlet;
    private bool _isLiteralPath;
    internal FileStream _fs;
    internal XmlReader _xr;
    private bool _disposed;
    private Deserializer _deserializer;
    internal ImportXmlHelper(string fileName, PSCmdlet cmdlet, bool isLiteralPath);
    private static XmlReader CreateXmlReader(Stream stream);
    internal void CreateFileStream();
    private void CleanUp();
    public sealed virtual void Dispose();
    internal void Import();
    internal void Stop();
}
internal class Microsoft.PowerShell.Commands.IndexColumnInfo : ColumnInfo {
    private int _index;
    internal IndexColumnInfo(string staleObjectPropertyName, string displayName, int index);
    internal virtual object GetValue(PSObject liveObject);
}
internal class Microsoft.PowerShell.Commands.IndexedOrderByPropertyComparer : object {
    private OrderByPropertyComparer _orderByPropertyComparer;
    internal IndexedOrderByPropertyComparer(OrderByPropertyComparer orderByPropertyComparer);
    public sealed virtual int Compare(OrderByPropertyEntry lhs, OrderByPropertyEntry rhs);
}
internal static class Microsoft.PowerShell.Commands.InputFileOpenModeConversion : object {
    internal static FileMode Convert(OpenMode openMode);
}
internal class Microsoft.PowerShell.Commands.Internal.Format.PrinterLineOutput : LineOutput {
    private bool _printingInitialized;
    private DoPlayBackCall _playbackCall;
    private string _printerName;
    private string _printFontName;
    private int _printFontSize;
    private static string s_defaultPrintFontName;
    private static int DefaultPrintFontSize;
    private int _deviceColumns;
    private int _deviceRows;
    private Queue`1<string> _lines;
    private Font _printFont;
    private WriteLineHelper _writeLineHelper;
    internal bool RequiresBuffering { get; }
    internal int ColumnNumber { get; }
    internal int RowNumber { get; }
    private static PrinterLineOutput();
    internal PrinterLineOutput(string printerName);
    internal virtual bool get_RequiresBuffering();
    internal virtual void ExecuteBufferPlayBack(DoPlayBackCall playback);
    internal virtual int get_ColumnNumber();
    internal virtual int get_RowNumber();
    internal virtual void WriteLine(string s);
    private void OnWriteLine(string s);
    private void OnWrite(string s);
    private void DoPrint();
    private void CreateFont(Graphics g);
    private void VerifyFont(Graphics g);
    private void pd_PrintPage(object sender, PrintPageEventArgs ev);
}
[CmdletAttribute("Invoke", "Expression")]
public class Microsoft.PowerShell.Commands.InvokeExpressionCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [ParameterAttribute]
[ValidateTrustedDataAttribute]
public string Command { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(string value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Invoke", "RestMethod")]
public class Microsoft.PowerShell.Commands.InvokeRestMethodCommand : WebRequestPSCmdlet {
    [CompilerGeneratedAttribute]
private string <ResponseHeadersVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusCodeVariable>k__BackingField;
    [ParameterAttribute]
[ParameterAttribute]
public WebRequestMethod Method { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public string CustomMethod { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter FollowRelLink { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int MaximumFollowRelLink { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ResponseHeadersVariable { get; public set; }
    [ParameterAttribute]
public string StatusCodeVariable { get; public set; }
    public virtual WebRequestMethod get_Method();
    public virtual void set_Method(WebRequestMethod value);
    public virtual string get_CustomMethod();
    public virtual void set_CustomMethod(string value);
    public SwitchParameter get_FollowRelLink();
    public void set_FollowRelLink(SwitchParameter value);
    public int get_MaximumFollowRelLink();
    public void set_MaximumFollowRelLink(int value);
    [CompilerGeneratedAttribute]
public string get_ResponseHeadersVariable();
    [CompilerGeneratedAttribute]
public void set_ResponseHeadersVariable(string value);
    [CompilerGeneratedAttribute]
public string get_StatusCodeVariable();
    [CompilerGeneratedAttribute]
public void set_StatusCodeVariable(string value);
    private bool TryProcessFeedStream(Stream responseStream);
    private static XmlReaderSettings GetSecureXmlReaderSettings();
    private static bool TryConvertToXml(string xml, Object& doc, Exception& exRef);
    private static bool TryConvertToJson(string json, Object& obj, Exception& exRef);
    internal virtual void ProcessResponse(HttpResponseMessage response);
    private static RestReturnType CheckReturnType(HttpResponseMessage response);
}
[CmdletAttribute("Invoke", "WebRequest")]
[OutputTypeAttribute("Microsoft.PowerShell.Commands.BasicHtmlWebResponseObject")]
public class Microsoft.PowerShell.Commands.InvokeWebRequestCommand : WebRequestPSCmdlet {
    internal virtual void ProcessResponse(HttpResponseMessage response);
}
public static class Microsoft.PowerShell.Commands.JsonObject : object {
    private static bool _maxDepthWarningWritten;
    public static object ConvertFromJson(string input, ErrorRecord& error);
    public static object ConvertFromJson(string input, bool returnHashtable, ErrorRecord& error);
    public static object ConvertFromJson(string input, bool returnHashtable, Nullable`1<int> maxDepth, ErrorRecord& error);
    private static PSObject PopulateFromJDictionary(JObject entries, DuplicateMemberHashSet memberHashTracker, ErrorRecord& error);
    private static ICollection`1<object> PopulateFromJArray(JArray list, ErrorRecord& error);
    private static Hashtable PopulateHashTableFromJDictionary(JObject entries, ErrorRecord& error);
    private static ICollection`1<object> PopulateHashTableFromJArray(JArray list, ErrorRecord& error);
    public static string ConvertToJson(object objectToProcess, ConvertToJsonContext& context);
    private static object ProcessValue(object obj, int currentDepth, ConvertToJsonContext& context);
    private static object AddPsProperties(object psObj, object obj, int depth, bool isPurePSObj, bool isCustomObj, ConvertToJsonContext& context);
    private static void AppendPsProperties(PSObject psObj, IDictionary receiver, int depth, bool isCustomObject, ConvertToJsonContext& context);
    private static object ProcessDictionary(IDictionary dict, int depth, ConvertToJsonContext& context);
    private static object ProcessEnumerable(IEnumerable enumerable, int depth, ConvertToJsonContext& context);
    private static object ProcessCustomObject(object o, int depth, ConvertToJsonContext& context);
}
public enum Microsoft.PowerShell.Commands.Language : Enum {
    public int value__;
    public static Language CSharp;
}
public class Microsoft.PowerShell.Commands.MatchInfo : object {
    private static string s_inputStream;
    [CompilerGeneratedAttribute]
private bool <IgnoreCase>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Line>k__BackingField;
    private bool _emphasize;
    private IReadOnlyList`1<int> _matchIndexes;
    private IReadOnlyList`1<int> _matchLengths;
    private string _filename;
    private string _path;
    private bool _pathSet;
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private MatchInfoContext <Context>k__BackingField;
    private static string MatchFormat;
    private static string SimpleFormat;
    private static string MatchPrefix;
    private static string ContextPrefix;
    private static string EmptyPrefix;
    [CompilerGeneratedAttribute]
private Match[] <Matches>k__BackingField;
    public bool IgnoreCase { get; public set; }
    public int LineNumber { get; public set; }
    public string Line { get; public set; }
    public string Filename { get; }
    public string Path { get; public set; }
    public string Pattern { get; public set; }
    public MatchInfoContext Context { get; public set; }
    public Match[] Matches { get; public set; }
    public MatchInfo(IReadOnlyList`1<int> matchIndexes, IReadOnlyList`1<int> matchLengths);
    private static MatchInfo();
    [CompilerGeneratedAttribute]
public bool get_IgnoreCase();
    [CompilerGeneratedAttribute]
public void set_IgnoreCase(bool value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public string get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(string value);
    public string get_Filename();
    public string get_Path();
    public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(string value);
    [CompilerGeneratedAttribute]
public MatchInfoContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(MatchInfoContext value);
    public string RelativePath(string directory);
    public virtual string ToString();
    public string ToString(string directory);
    private string ToString(string directory, string line);
    public string ToEmphasizedString(string directory);
    private string EmphasizeLine();
    private string FormatLine(string lineStr, int displayLineNumber, string displayPath, string prefix);
    [CompilerGeneratedAttribute]
public Match[] get_Matches();
    [CompilerGeneratedAttribute]
public void set_Matches(Match[] value);
    internal MatchInfo Clone();
}
public class Microsoft.PowerShell.Commands.MatchInfoContext : object {
    [CompilerGeneratedAttribute]
private String[] <PreContext>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PostContext>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DisplayPreContext>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DisplayPostContext>k__BackingField;
    public String[] PreContext { get; public set; }
    public String[] PostContext { get; public set; }
    public String[] DisplayPreContext { get; public set; }
    public String[] DisplayPostContext { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_PreContext();
    [CompilerGeneratedAttribute]
public void set_PreContext(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_PostContext();
    [CompilerGeneratedAttribute]
public void set_PostContext(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_DisplayPreContext();
    [CompilerGeneratedAttribute]
public void set_DisplayPreContext(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_DisplayPostContext();
    [CompilerGeneratedAttribute]
public void set_DisplayPostContext(String[] value);
    public sealed virtual object Clone();
}
[CmdletAttribute("Measure", "Command")]
[OutputTypeAttribute("System.TimeSpan")]
public class Microsoft.PowerShell.Commands.MeasureCommandCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private PSObject <InputObject>k__BackingField;
    [CompilerGeneratedAttribute]
private ScriptBlock <Expression>k__BackingField;
    private Stopwatch _stopWatch;
    [ParameterAttribute]
public PSObject InputObject { get; public set; }
    [ParameterAttribute]
public ScriptBlock Expression { get; public set; }
    [CompilerGeneratedAttribute]
public PSObject get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSObject value);
    [CompilerGeneratedAttribute]
public ScriptBlock get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(ScriptBlock value);
    protected virtual void EndProcessing();
    protected virtual void ProcessRecord();
}
public abstract class Microsoft.PowerShell.Commands.MeasureInfo : object {
    [CompilerGeneratedAttribute]
private string <Property>k__BackingField;
    public string Property { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(string value);
}
[CmdletAttribute("Measure", "Object")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.Commands.MeasureObjectCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private PSObject <InputObject>k__BackingField;
    [CompilerGeneratedAttribute]
private PSPropertyExpression[] <Property>k__BackingField;
    private bool _measureStandardDeviation;
    private bool _measureSum;
    private bool _allStats;
    private bool _measureAverage;
    private bool _measureMax;
    private bool _measureMin;
    private bool _measureLines;
    private bool _measureWords;
    private bool _measureCharacters;
    private bool _ignoreWhiteSpace;
    private MeasureObjectDictionary`1<Statistics> _statistics;
    private bool _nonNumericError;
    private int _totalRecordCount;
    private static string GenericParameterSet;
    private static string TextParameterSet;
    private static string thisObject;
    [ParameterAttribute]
public PSObject InputObject { get; public set; }
    [ValidateNotNullOrEmptyAttribute]
[ParameterAttribute]
public PSPropertyExpression[] Property { get; public set; }
    [ParameterAttribute]
public SwitchParameter StandardDeviation { get; public set; }
    [ParameterAttribute]
public SwitchParameter Sum { get; public set; }
    [ParameterAttribute]
public SwitchParameter AllStats { get; public set; }
    [ParameterAttribute]
public SwitchParameter Average { get; public set; }
    [ParameterAttribute]
public SwitchParameter Maximum { get; public set; }
    [ParameterAttribute]
public SwitchParameter Minimum { get; public set; }
    [ParameterAttribute]
public SwitchParameter Line { get; public set; }
    [ParameterAttribute]
public SwitchParameter Word { get; public set; }
    [ParameterAttribute]
public SwitchParameter Character { get; public set; }
    [ParameterAttribute]
public SwitchParameter IgnoreWhiteSpace { get; public set; }
    private bool IsMeasuringGeneric { get; }
    [CompilerGeneratedAttribute]
public PSObject get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSObject value);
    [CompilerGeneratedAttribute]
public PSPropertyExpression[] get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(PSPropertyExpression[] value);
    public SwitchParameter get_StandardDeviation();
    public void set_StandardDeviation(SwitchParameter value);
    public SwitchParameter get_Sum();
    public void set_Sum(SwitchParameter value);
    public SwitchParameter get_AllStats();
    public void set_AllStats(SwitchParameter value);
    public SwitchParameter get_Average();
    public void set_Average(SwitchParameter value);
    public SwitchParameter get_Maximum();
    public void set_Maximum(SwitchParameter value);
    public SwitchParameter get_Minimum();
    public void set_Minimum(SwitchParameter value);
    public SwitchParameter get_Line();
    public void set_Line(SwitchParameter value);
    public SwitchParameter get_Word();
    public void set_Word(SwitchParameter value);
    public SwitchParameter get_Character();
    public void set_Character(SwitchParameter value);
    public SwitchParameter get_IgnoreWhiteSpace();
    public void set_IgnoreWhiteSpace(SwitchParameter value);
    private bool get_IsMeasuringGeneric();
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    private void AnalyzeObjectProperties(PSObject inObj);
    private void AnalyzeValue(string propertyName, object objValue);
    private static object Compare(object objValue, object statMinOrMaxValue, bool isMin);
    private void AnalyzeString(string strValue, Statistics stat);
    private void AnalyzeNumber(double numValue, Statistics stat);
    private void WritePropertyNotFoundError(string propertyName, string errorId);
    protected virtual void EndProcessing();
    private MeasureInfo CreateGenericMeasureInfo(Statistics stat, bool shouldUseGenericMeasureInfo);
    private TextMeasureInfo CreateTextMeasureInfo(Statistics stat);
}
public class Microsoft.PowerShell.Commands.MemberDefinition : object {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private PSMemberTypes <MemberType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Definition>k__BackingField;
    public string TypeName { get; }
    public string Name { get; }
    public PSMemberTypes MemberType { get; }
    public string Definition { get; }
    public MemberDefinition(string typeName, string name, PSMemberTypes memberType, string definition);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public PSMemberTypes get_MemberType();
    [CompilerGeneratedAttribute]
public string get_Definition();
}
[CmdletAttribute("New", "Alias")]
[OutputTypeAttribute("System.Management.Automation.AliasInfo")]
public class Microsoft.PowerShell.Commands.NewAliasCommand : WriteAliasCommandBase {
    protected virtual void ProcessRecord();
}
[CmdletAttribute("New", "Event")]
[OutputTypeAttribute("System.Management.Automation.PSEventArgs")]
public class Microsoft.PowerShell.Commands.NewEventCommand : PSCmdlet {
    private string _sourceIdentifier;
    private PSObject _sender;
    private PSObject[] _eventArguments;
    private PSObject _messageData;
    [ParameterAttribute]
public string SourceIdentifier { get; public set; }
    [ParameterAttribute]
public PSObject Sender { get; public set; }
    [ParameterAttribute]
public PSObject[] EventArguments { get; public set; }
    [ParameterAttribute]
public PSObject MessageData { get; public set; }
    public string get_SourceIdentifier();
    public void set_SourceIdentifier(string value);
    public PSObject get_Sender();
    public void set_Sender(PSObject value);
    public PSObject[] get_EventArguments();
    public void set_EventArguments(PSObject[] value);
    public PSObject get_MessageData();
    public void set_MessageData(PSObject value);
    protected virtual void EndProcessing();
}
[CmdletAttribute("New", "Guid")]
[OutputTypeAttribute("System.Guid")]
public class Microsoft.PowerShell.Commands.NewGuidCommand : Cmdlet {
    protected virtual void EndProcessing();
}
[CmdletAttribute("New", "Object")]
public class Microsoft.PowerShell.Commands.NewObjectCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    private Guid _comObjectClsId;
    [CompilerGeneratedAttribute]
private string <ComObject>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <ArgumentList>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary <Property>k__BackingField;
    private ComCreateInfo createInfo;
    private static int RPC_E_CHANGED_MODE;
    private static string netSetName;
    [ParameterAttribute]
[ValidateTrustedDataAttribute]
public string TypeName { get; public set; }
    [ParameterAttribute]
[ValidateTrustedDataAttribute]
public string ComObject { get; public set; }
    [ParameterAttribute]
[ValidateTrustedDataAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] ArgumentList { get; public set; }
    [ParameterAttribute]
public SwitchParameter Strict { get; public set; }
    [ParameterAttribute]
[ValidateTrustedDataAttribute]
public IDictionary Property { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ComObject();
    [CompilerGeneratedAttribute]
public void set_ComObject(string value);
    [CompilerGeneratedAttribute]
public Object[] get_ArgumentList();
    [CompilerGeneratedAttribute]
public void set_ArgumentList(Object[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(SwitchParameter value);
    [CompilerGeneratedAttribute]
public IDictionary get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(IDictionary value);
    private object CallConstructor(Type type, ConstructorInfo[] constructors, Object[] args);
    private void CreateMemberNotFoundError(PSObject pso, DictionaryEntry property, Type resultType);
    private void CreateMemberSetValueError(SetValueException e);
    private static string ParameterSet2ResourceString(string parameterSet);
    protected virtual void BeginProcessing();
    private object SafeCreateInstance(Type t);
    private void STAComCreateThreadProc(object createstruct);
    private object CreateComObject();
}
internal static class Microsoft.PowerShell.Commands.NewObjectNativeMethods : object {
    internal static int CLSIDFromProgID(string lpszProgID, Guid& pclsid);
}
[CmdletAttribute("New", "TemporaryFile")]
[OutputTypeAttribute("System.IO.FileInfo")]
public class Microsoft.PowerShell.Commands.NewTemporaryFileCommand : Cmdlet {
    protected virtual void EndProcessing();
}
[CmdletAttribute("New", "TimeSpan")]
[OutputTypeAttribute("System.TimeSpan")]
public class Microsoft.PowerShell.Commands.NewTimeSpanCommand : PSCmdlet {
    private DateTime _start;
    private bool _startSpecified;
    private DateTime _end;
    private bool _endSpecified;
    [CompilerGeneratedAttribute]
private int <Days>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Hours>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minutes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Seconds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Milliseconds>k__BackingField;
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public DateTime Start { get; public set; }
    [ParameterAttribute]
public DateTime End { get; public set; }
    [ParameterAttribute]
public int Days { get; public set; }
    [ParameterAttribute]
public int Hours { get; public set; }
    [ParameterAttribute]
public int Minutes { get; public set; }
    [ParameterAttribute]
public int Seconds { get; public set; }
    [ParameterAttribute]
public int Milliseconds { get; public set; }
    public DateTime get_Start();
    public void set_Start(DateTime value);
    public DateTime get_End();
    public void set_End(DateTime value);
    [CompilerGeneratedAttribute]
public int get_Days();
    [CompilerGeneratedAttribute]
public void set_Days(int value);
    [CompilerGeneratedAttribute]
public int get_Hours();
    [CompilerGeneratedAttribute]
public void set_Hours(int value);
    [CompilerGeneratedAttribute]
public int get_Minutes();
    [CompilerGeneratedAttribute]
public void set_Minutes(int value);
    [CompilerGeneratedAttribute]
public int get_Seconds();
    [CompilerGeneratedAttribute]
public void set_Seconds(int value);
    [CompilerGeneratedAttribute]
public int get_Milliseconds();
    [CompilerGeneratedAttribute]
public void set_Milliseconds(int value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("New", "Variable")]
[OutputTypeAttribute("System.Management.Automation.PSVariable")]
public class Microsoft.PowerShell.Commands.NewVariableCommand : VariableCommandBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private ScopedItemOptions <Option>k__BackingField;
    private Nullable`1<SessionStateEntryVisibility> _visibility;
    private bool _force;
    private bool _passThru;
    [ParameterAttribute]
public string Name { get; public set; }
    [ParameterAttribute]
public object Value { get; public set; }
    [ParameterAttribute]
public string Description { get; public set; }
    [ParameterAttribute]
public ScopedItemOptions Option { get; public set; }
    [ParameterAttribute]
public SessionStateEntryVisibility Visibility { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public ScopedItemOptions get_Option();
    [CompilerGeneratedAttribute]
public void set_Option(ScopedItemOptions value);
    public SessionStateEntryVisibility get_Visibility();
    public void set_Visibility(SessionStateEntryVisibility value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    protected virtual void ProcessRecord();
}
public abstract class Microsoft.PowerShell.Commands.ObjectBase : ObjectCmdletBase {
    [CompilerGeneratedAttribute]
private PSObject <InputObject>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Property>k__BackingField;
    [ParameterAttribute]
public PSObject InputObject { get; public set; }
    [ParameterAttribute]
public Object[] Property { get; public set; }
    [CompilerGeneratedAttribute]
public PSObject get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSObject value);
    [CompilerGeneratedAttribute]
public Object[] get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(Object[] value);
}
public class Microsoft.PowerShell.Commands.ObjectCmdletBase : PSCmdlet {
    internal CultureInfo _cultureInfo;
    private bool _caseSensitive;
    [ParameterAttribute]
public string Culture { get; public set; }
    [ParameterAttribute]
public SwitchParameter CaseSensitive { get; public set; }
    public string get_Culture();
    public void set_Culture(string value);
    public SwitchParameter get_CaseSensitive();
    public void set_CaseSensitive(SwitchParameter value);
}
internal class Microsoft.PowerShell.Commands.ObjectCommandComparer : object {
    private CultureInfo _cultureInfo;
    private bool _ascendingOrder;
    private bool _caseSensitive;
    internal ObjectCommandComparer(bool ascending, CultureInfo cultureInfo, bool caseSensitive);
    private static bool IsValueNull(object value);
    internal int Compare(ObjectCommandPropertyValue first, ObjectCommandPropertyValue second);
    public sealed virtual int Compare(object first, object second);
}
internal class Microsoft.PowerShell.Commands.ObjectCommandPropertyValue : object {
    [CompilerGeneratedAttribute]
private object <PropertyValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExistingProperty>k__BackingField;
    internal static ObjectCommandPropertyValue NonExistingProperty;
    internal static ObjectCommandPropertyValue ExistingNullProperty;
    private bool _caseSensitive;
    internal CultureInfo cultureInfo;
    internal object PropertyValue { get; }
    internal bool IsExistingProperty { get; }
    internal SwitchParameter CaseSensitive { get; }
    internal CultureInfo Culture { get; }
    internal ObjectCommandPropertyValue(object propVal);
    internal ObjectCommandPropertyValue(object propVal, bool isCaseSensitive, CultureInfo cultureInfo);
    private static ObjectCommandPropertyValue();
    [CompilerGeneratedAttribute]
internal object get_PropertyValue();
    [CompilerGeneratedAttribute]
internal bool get_IsExistingProperty();
    internal SwitchParameter get_CaseSensitive();
    internal CultureInfo get_Culture();
    public virtual bool Equals(object inputObject);
    public virtual int GetHashCode();
}
internal class Microsoft.PowerShell.Commands.OrderByProperty : object {
    [CompilerGeneratedAttribute]
private List`1<OrderByPropertyEntry> <OrderMatrix>k__BackingField;
    [CompilerGeneratedAttribute]
private OrderByPropertyComparer <Comparer>k__BackingField;
    private List`1<MshParameter> _mshParameterList;
    private List`1<MshParameter> _unexpandedParameterList;
    private List`1<MshParameter> _unExpandedParametersWithWildCardPattern;
    internal List`1<OrderByPropertyEntry> OrderMatrix { get; }
    internal OrderByPropertyComparer Comparer { get; }
    internal List`1<MshParameter> MshParameterList { get; }
    internal OrderByProperty(PSCmdlet cmdlet, List`1<PSObject> inputObjects, Object[] expr, bool ascending, CultureInfo cultureInfo, bool caseSensitive);
    [CompilerGeneratedAttribute]
internal List`1<OrderByPropertyEntry> get_OrderMatrix();
    [CompilerGeneratedAttribute]
internal OrderByPropertyComparer get_Comparer();
    internal List`1<MshParameter> get_MshParameterList();
    private static void ProcessExpressionParameter(List`1<PSObject> inputObjects, PSCmdlet cmdlet, Object[] expr, List`1& mshParameterList);
    internal void ProcessExpressionParameter(PSCmdlet cmdlet, Object[] expr);
    private static List`1<MshParameter> ExpandExpressions(List`1<PSObject> inputObjects, List`1<MshParameter> unexpandedParameterList);
    private static void ExpandExpressions(PSObject inputObject, List`1<MshParameter> UnexpandedParametersWithWildCardPattern, List`1<MshParameter> expandedParameterList);
    internal static String[] GetDefaultKeyPropertySet(PSObject mshObj);
    internal static List`1<OrderByPropertyEntry> CreateOrderMatrix(PSCmdlet cmdlet, List`1<PSObject> inputObjects, List`1<MshParameter> mshParameterList);
    private static bool isOrderEntryKeyDefined(object orderEntryKey);
    private static OrderByPropertyComparer CreateComparer(List`1<OrderByPropertyEntry> orderMatrix, List`1<MshParameter> mshParameterList, bool ascending, CultureInfo cultureInfo, bool caseSensitive);
    internal OrderByPropertyEntry CreateOrderByPropertyEntry(PSCmdlet cmdlet, PSObject inputObject, bool isCaseSensitive, CultureInfo cultureInfo);
}
internal class Microsoft.PowerShell.Commands.OrderByPropertyComparer : object {
    private ObjectCommandComparer[] _propertyComparers;
    internal OrderByPropertyComparer(Boolean[] ascending, CultureInfo cultureInfo, bool caseSensitive);
    public sealed virtual int Compare(OrderByPropertyEntry firstEntry, OrderByPropertyEntry secondEntry);
    internal static OrderByPropertyComparer CreateComparer(List`1<OrderByPropertyEntry> orderMatrix, bool ascendingFlag, Nullable`1[] ascendingOverrides, CultureInfo cultureInfo, bool caseSensitive);
}
internal class Microsoft.PowerShell.Commands.OrderByPropertyEntry : object {
    internal PSObject inputObject;
    internal List`1<ObjectCommandPropertyValue> orderValues;
    internal int originalIndex;
    internal bool comparable;
}
internal static class Microsoft.PowerShell.Commands.OrderByPropertyEntryEvaluationHelper : object {
    internal static OrderByPropertyEntry ProcessObject(PSObject inputObject, List`1<MshParameter> mshParameterList, List`1<ErrorRecord> errors, List`1<string> propertyNotFoundMsgs, bool isCaseSensitive, CultureInfo cultureInfo, int originalIndex);
    private static void EvaluateSortingExpression(MshParameter p, PSObject inputObject, List`1<ObjectCommandPropertyValue> orderValues, List`1<ErrorRecord> errors, String& propertyNotFoundMsg, Boolean& comparable);
}
public class Microsoft.PowerShell.Commands.OrderObjectBase : ObjectBase {
    private bool _ascending;
    [CompilerGeneratedAttribute]
private List`1<PSObject> <InputObjects>k__BackingField;
    internal SwitchParameter DescendingOrder { get; internal set; }
    internal List`1<PSObject> InputObjects { get; }
    internal CultureInfo ConvertedCulture { get; }
    internal SwitchParameter get_DescendingOrder();
    internal void set_DescendingOrder(SwitchParameter value);
    [CompilerGeneratedAttribute]
internal List`1<PSObject> get_InputObjects();
    internal CultureInfo get_ConvertedCulture();
    protected virtual void ProcessRecord();
}
internal class Microsoft.PowerShell.Commands.OriginalColumnInfo : ColumnInfo {
    private string _liveObjectPropertyName;
    private OutGridViewCommand _parentCmdlet;
    internal OriginalColumnInfo(string staleObjectPropertyName, string displayName, string liveObjectPropertyName, OutGridViewCommand parentCmdlet);
    internal virtual object GetValue(PSObject liveObject);
}
[CmdletAttribute("Out", "File")]
public class Microsoft.PowerShell.Commands.OutFileCommand : FrontEndCommandBase {
    private string _fileName;
    private bool _isLiteralPath;
    private Encoding _encoding;
    private bool _append;
    private bool _force;
    private bool _noclobber;
    private Nullable`1<int> _width;
    private bool _suppressNewline;
    private FileStream _fs;
    private StreamWriter _sw;
    private bool _processRecordExecuted;
    private FileInfo _readOnlyFileInfo;
    [AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public string FilePath { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string LiteralPath { get; public set; }
    [ParameterAttribute]
[ArgumentToEncodingTransformationAttribute]
[ArgumentEncodingCompletionsAttribute]
[ValidateNotNullOrEmptyAttribute]
public Encoding Encoding { get; public set; }
    [ParameterAttribute]
public SwitchParameter Append { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter NoClobber { get; public set; }
    [ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
[ParameterAttribute]
public int Width { get; public set; }
    [ParameterAttribute]
public SwitchParameter NoNewline { get; public set; }
    public string get_FilePath();
    public void set_FilePath(string value);
    public string get_LiteralPath();
    public void set_LiteralPath(string value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public SwitchParameter get_Append();
    public void set_Append(SwitchParameter value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public SwitchParameter get_NoClobber();
    public void set_NoClobber(SwitchParameter value);
    public int get_Width();
    public void set_Width(int value);
    public SwitchParameter get_NoNewline();
    public void set_NoNewline(SwitchParameter value);
    protected virtual void BeginProcessing();
    private LineOutput InstantiateLineOutputInterface();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    protected virtual void InternalDispose();
    private void CleanUp();
}
[CmdletAttribute("Out", "GridView")]
public class Microsoft.PowerShell.Commands.OutGridViewCommand : PSCmdlet {
    private static string DataNotQualifiedForGridView;
    private static string RemotingNotSupported;
    private TypeInfoDataBase _typeInfoDataBase;
    private PSPropertyExpressionFactory _expressionFactory;
    private OutWindowProxy _windowProxy;
    private GridHeader _gridHeader;
    [CompilerGeneratedAttribute]
private PSObject <InputObject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Wait>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputModeOption <OutputMode>k__BackingField;
    [ParameterAttribute]
public PSObject InputObject { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Title { get; public set; }
    [ParameterAttribute]
public SwitchParameter Wait { get; public set; }
    [ParameterAttribute]
public OutputModeOption OutputMode { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [CompilerGeneratedAttribute]
public PSObject get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSObject value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Wait();
    [CompilerGeneratedAttribute]
public void set_Wait(SwitchParameter value);
    [CompilerGeneratedAttribute]
public OutputModeOption get_OutputMode();
    [CompilerGeneratedAttribute]
public void set_OutputMode(OutputModeOption value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void EndProcessing();
    protected virtual void ProcessRecord();
    protected virtual void StopProcessing();
    internal string ConvertToString(PSObject liveObject);
    private void ProcessObject(PSObject input);
    private void Dispose(bool isDisposing);
    public sealed virtual void Dispose();
}
[CmdletAttribute("Out", "Printer")]
public class Microsoft.PowerShell.Commands.OutPrinterCommand : FrontEndCommandBase {
    private string _printerName;
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    protected virtual void BeginProcessing();
    private LineOutput InstantiateLineOutputInterface();
}
public enum Microsoft.PowerShell.Commands.OutputAssemblyType : Enum {
    public int value__;
    public static OutputAssemblyType Library;
    public static OutputAssemblyType ConsoleApplication;
    public static OutputAssemblyType WindowsApplication;
}
public enum Microsoft.PowerShell.Commands.OutputModeOption : Enum {
    public int value__;
    public static OutputModeOption None;
    public static OutputModeOption Single;
    public static OutputModeOption Multiple;
}
[CmdletAttribute("Out", "String")]
[OutputTypeAttribute("System.String")]
public class Microsoft.PowerShell.Commands.OutStringCommand : FrontEndCommandBase {
    private bool _stream;
    private Nullable`1<int> _width;
    private bool _noNewLine;
    private StreamingTextWriter _writer;
    private StringBuilder _buffer;
    [ParameterAttribute]
public SwitchParameter Stream { get; public set; }
    [ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
[ParameterAttribute]
public int Width { get; public set; }
    [ParameterAttribute]
public SwitchParameter NoNewline { get; public set; }
    public SwitchParameter get_Stream();
    public void set_Stream(SwitchParameter value);
    public int get_Width();
    public void set_Width(int value);
    public SwitchParameter get_NoNewline();
    public void set_NoNewline(SwitchParameter value);
    protected virtual void BeginProcessing();
    private LineOutput InstantiateLineOutputInterface();
    private void OnWriteLine(string s);
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
internal class Microsoft.PowerShell.Commands.OutWindowProxy : object {
    private static string OutGridViewWindowClassName;
    private static string OriginalTypePropertyName;
    internal static string OriginalObjectPropertyName;
    private static string ToStringValuePropertyName;
    private static string IndexPropertyName;
    private int _index;
    private HeaderInfo _headerInfo;
    private bool _isWindowStarted;
    private string _title;
    private OutputModeOption _outputMode;
    private AutoResetEvent _closedEvent;
    private OutGridViewCommand _parentCmdlet;
    private GraphicalHostReflectionWrapper _graphicalHostReflectionWrapper;
    internal OutWindowProxy(string title, OutputModeOption outPutMode, OutGridViewCommand parentCmdlet);
    internal void AddColumns(String[] propertyNames, String[] displayNames, Type[] types);
    internal void AddColumnsAndItem(PSObject liveObject, TableView tableView);
    internal void AddColumnsAndItem(PSObject liveObject, TableView tableView, TableControlBody tableBody);
    internal void AddColumnsAndItem(PSObject liveObject);
    private void AddColumnsAndItemEnd(PSObject liveObject);
    internal void AddHeteroViewColumnsAndItem(PSObject liveObject);
    private void AddExtraProperties(PSObject staleObject, PSObject liveObject);
    internal void AddItem(PSObject livePSObject);
    internal void AddHeteroViewItem(PSObject livePSObject);
    internal void ShowWindow();
    internal void BlockUntilClosed();
    private void Dispose(bool isDisposing);
    public sealed virtual void Dispose();
    internal void CloseWindow();
    internal bool IsWindowClosed();
    internal Exception GetLastException();
    internal List`1<PSObject> GetSelectedItems();
}
internal class Microsoft.PowerShell.Commands.PolymorphicRandomNumberGenerator : object {
    private Random _pseudoGenerator;
    private RandomNumberGenerator _cryptographicGenerator;
    internal PolymorphicRandomNumberGenerator(int seed);
    internal double NextDouble();
    internal int Next();
    internal int Next(int maxValue);
    public int Next(int minValue, int maxValue);
    internal void NextBytes(Byte[] buffer);
    private int InternalSample();
    private double InternalSampleLargeRange();
}
public abstract class Microsoft.PowerShell.Commands.PSBreakpointAccessorCommandBase : PSBreakpointCommandBase {
    internal static string CommandParameterSetName;
    internal static string LineParameterSetName;
    internal static string VariableParameterSetName;
}
public abstract class Microsoft.PowerShell.Commands.PSBreakpointCommandBase : PSCmdlet {
    [CompilerGeneratedAttribute]
private Runspace <Runspace>k__BackingField;
    [ParameterAttribute]
[ValidateNotNullAttribute]
[RunspaceAttribute]
public Runspace Runspace { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Runspace get_Runspace();
    [CompilerGeneratedAttribute]
public virtual void set_Runspace(Runspace value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessBreakpoint(Breakpoint breakpoint);
}
public abstract class Microsoft.PowerShell.Commands.PSBreakpointUpdaterCommandBase : PSBreakpointCommandBase {
    internal static string BreakpointParameterSetName;
    internal static string IdParameterSetName;
    [CompilerGeneratedAttribute]
private Breakpoint[] <Breakpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Runspace <Runspace>k__BackingField;
    private Dictionary`2<Guid, Runspace> runspaces;
    [ParameterAttribute]
[ValidateNotNullAttribute]
public Breakpoint[] Breakpoint { get; public set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
public Int32[] Id { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RunspaceAttribute]
public Runspace Runspace { get; public set; }
    [CompilerGeneratedAttribute]
public Breakpoint[] get_Breakpoint();
    [CompilerGeneratedAttribute]
public void set_Breakpoint(Breakpoint[] value);
    [CompilerGeneratedAttribute]
public Int32[] get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Int32[] value);
    [CompilerGeneratedAttribute]
public virtual Runspace get_Runspace();
    [CompilerGeneratedAttribute]
public virtual void set_Runspace(Runspace value);
    protected virtual void ProcessRecord();
    private bool TryGetRunspace(Breakpoint breakpoint);
    private bool TryGetBreakpoint(int id, Breakpoint& breakpoint);
    private bool ShouldProcessInternal(string target);
}
internal class Microsoft.PowerShell.Commands.PSHostTraceListener : TraceListener {
    private StringBuilder _cachedWrite;
    private InternalHostUserInterface _ui;
    internal PSHostTraceListener(PSCmdlet cmdlet);
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
    public virtual void Write(string output);
    public virtual void WriteLine(string output);
}
internal static class Microsoft.PowerShell.Commands.PSMarkdownOptionInfoCache : object {
    private static ConcurrentDictionary`2<Guid, PSMarkdownOptionInfo> markdownOptionInfoCache;
    private static string MarkdownOptionInfoVariableName;
    private static PSMarkdownOptionInfoCache();
    internal static PSMarkdownOptionInfo Get(CommandInfo command);
    internal static PSMarkdownOptionInfo Set(CommandInfo command, PSMarkdownOptionInfo optionInfo);
}
internal class Microsoft.PowerShell.Commands.PSPropertyExpressionFilter : object {
    private WildcardPattern[] _wildcardPatterns;
    internal PSPropertyExpressionFilter(String[] wildcardPatternsStrings);
    internal bool IsMatch(PSPropertyExpression expression);
}
public class Microsoft.PowerShell.Commands.PSRunspaceDebug : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BreakAll>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunspaceName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RunspaceId>k__BackingField;
    public bool Enabled { get; }
    public bool BreakAll { get; }
    public string RunspaceName { get; }
    public int RunspaceId { get; }
    public PSRunspaceDebug(bool enabled, bool breakAll, string runspaceName, int runspaceId);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public bool get_BreakAll();
    [CompilerGeneratedAttribute]
public string get_RunspaceName();
    [CompilerGeneratedAttribute]
public int get_RunspaceId();
}
internal static class Microsoft.PowerShell.Commands.PSTuple : object {
    internal static object ArrayToTuple(IList`1<T> inputObjects);
    private static object ArrayToTuple(IList`1<T> inputObjects, int startIndex);
}
public static class Microsoft.PowerShell.Commands.PSUserAgent : object {
    private static string s_windowsUserAgent;
    internal static string UserAgent { get; }
    public static string InternetExplorer { get; }
    public static string FireFox { get; }
    public static string Chrome { get; }
    public static string Opera { get; }
    public static string Safari { get; }
    internal static string Compatibility { get; }
    internal static string App { get; }
    internal static string PlatformName { get; }
    internal static string OS { get; }
    internal static string Culture { get; }
    internal static string get_UserAgent();
    public static string get_InternetExplorer();
    public static string get_FireFox();
    public static string get_Chrome();
    public static string get_Opera();
    public static string get_Safari();
    internal static string get_Compatibility();
    internal static string get_App();
    internal static string get_PlatformName();
    internal static string get_OS();
    internal static string get_Culture();
}
[CmdletAttribute("Read", "Host")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.Commands.ReadHostCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private SwitchParameter <MaskInput>k__BackingField;
    private object _prompt;
    private bool _safe;
    [ParameterAttribute]
[AllowNullAttribute]
public object Prompt { get; public set; }
    [ParameterAttribute]
public SwitchParameter AsSecureString { get; public set; }
    [ParameterAttribute]
public SwitchParameter MaskInput { get; public set; }
    public object get_Prompt();
    public void set_Prompt(object value);
    public SwitchParameter get_AsSecureString();
    public void set_AsSecureString(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_MaskInput();
    [CompilerGeneratedAttribute]
public void set_MaskInput(SwitchParameter value);
    protected virtual void BeginProcessing();
}
[CmdletAttribute("Register", "EngineEvent")]
[OutputTypeAttribute("System.Management.Automation.PSEventJob")]
public class Microsoft.PowerShell.Commands.RegisterEngineEventCommand : ObjectEventRegistrationBase {
    [ParameterAttribute]
public string SourceIdentifier { get; public set; }
    public string get_SourceIdentifier();
    public void set_SourceIdentifier(string value);
    protected virtual object GetSourceObject();
    protected virtual string GetSourceObjectEventName();
}
[CmdletAttribute("Register", "ObjectEvent")]
[OutputTypeAttribute("System.Management.Automation.PSEventJob")]
public class Microsoft.PowerShell.Commands.RegisterObjectEventCommand : ObjectEventRegistrationBase {
    private PSObject _inputObject;
    private string _eventName;
    [ParameterAttribute]
public PSObject InputObject { get; public set; }
    [ParameterAttribute]
public string EventName { get; public set; }
    public PSObject get_InputObject();
    public void set_InputObject(PSObject value);
    public string get_EventName();
    public void set_EventName(string value);
    protected virtual object GetSourceObject();
    protected virtual string GetSourceObjectEventName();
}
[CmdletAttribute("Remove", "Alias")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.Commands.RemoveAliasCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private String[] <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Force>k__BackingField;
    [ParameterAttribute]
public String[] Name { get; public set; }
    [ParameterAttribute]
public string Scope { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(String[] value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(SwitchParameter value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Remove", "Event")]
public class Microsoft.PowerShell.Commands.RemoveEventCommand : PSCmdlet {
    private string _sourceIdentifier;
    private int _eventIdentifier;
    private WildcardPattern _matchPattern;
    [ParameterAttribute]
public string SourceIdentifier { get; public set; }
    [ParameterAttribute]
public int EventIdentifier { get; public set; }
    public string get_SourceIdentifier();
    public void set_SourceIdentifier(string value);
    public int get_EventIdentifier();
    public void set_EventIdentifier(int value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Remove", "PSBreakpoint")]
public class Microsoft.PowerShell.Commands.RemovePSBreakpointCommand : PSBreakpointUpdaterCommandBase {
    protected virtual void ProcessBreakpoint(Breakpoint breakpoint);
}
[CmdletAttribute("Remove", "TypeData")]
public class Microsoft.PowerShell.Commands.RemoveTypeDataCommand : PSCmdlet {
    private static string RemoveTypeSet;
    private static string RemoveFileSet;
    private static string RemoveTypeDataSet;
    private string _typeName;
    private String[] _typeFiles;
    private TypeData _typeData;
    [ParameterAttribute]
[ArgumentToTypeNameTransformationAttribute]
[ValidateNotNullOrEmptyAttribute]
public string TypeName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
public TypeData TypeData { get; public set; }
    public string get_TypeName();
    public void set_TypeName(string value);
    public String[] get_Path();
    public void set_Path(String[] value);
    public TypeData get_TypeData();
    public void set_TypeData(TypeData value);
    private static void ConstructFileToIndexMap(string fileName, int index, Dictionary`2<string, List`1<int>> fileNameToIndexMap);
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    private static ErrorRecord NewError(string errorId, string template, object targetObject, Object[] args);
}
[CmdletAttribute("Remove", "Variable")]
public class Microsoft.PowerShell.Commands.RemoveVariableCommand : VariableCommandBase {
    [CompilerGeneratedAttribute]
private String[] <Name>k__BackingField;
    private bool _force;
    [ParameterAttribute]
public String[] Name { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(String[] value);
    public String[] get_Include();
    public void set_Include(String[] value);
    public String[] get_Exclude();
    public void set_Exclude(String[] value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    protected virtual void ProcessRecord();
}
internal class Microsoft.PowerShell.Commands.ScalarTypeColumnInfo : ColumnInfo {
    private Type _type;
    internal ScalarTypeColumnInfo(Type type);
    internal virtual object GetValue(PSObject liveObject);
}
public class Microsoft.PowerShell.Commands.SecurityDescriptorInfo : object {
    public string Owner;
    public string Group;
    public String[] DiscretionaryAcl;
    public String[] SystemAcl;
    public CommonSecurityDescriptor RawDescriptor;
    internal SecurityDescriptorInfo(string owner, string group, String[] discretionaryAcl, String[] systemAcl, CommonSecurityDescriptor rawDescriptor);
}
[CmdletAttribute("Select", "Object")]
public class Microsoft.PowerShell.Commands.SelectObjectCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private PSObject <InputObject>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExcludeProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpandProperty>k__BackingField;
    private bool _unique;
    private int _last;
    private int _first;
    private bool _firstOrLastSpecified;
    [CompilerGeneratedAttribute]
private int <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SkipLast>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Wait>k__BackingField;
    private Int32[] _index;
    private bool _indexSpecified;
    private bool _isIncludeIndex;
    private SelectObjectQueue _selectObjectQueue;
    private List`1<MshParameter> _propertyMshParameterList;
    private List`1<MshParameter> _expandMshParameterList;
    private PSPropertyExpressionFilter _exclusionFilter;
    private List`1<UniquePSObjectHelper> _uniques;
    private int _currentFilterIndex;
    private int _currentObjectIndex;
    [ParameterAttribute]
public PSObject InputObject { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public Object[] Property { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public String[] ExcludeProperty { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public string ExpandProperty { get; public set; }
    [ParameterAttribute]
public SwitchParameter Unique { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Last { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int First { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Skip { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int SkipLast { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public SwitchParameter Wait { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public Int32[] Index { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public Int32[] SkipIndex { get; public set; }
    [CompilerGeneratedAttribute]
public PSObject get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSObject value);
    [CompilerGeneratedAttribute]
public Object[] get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(Object[] value);
    [CompilerGeneratedAttribute]
public String[] get_ExcludeProperty();
    [CompilerGeneratedAttribute]
public void set_ExcludeProperty(String[] value);
    [CompilerGeneratedAttribute]
public string get_ExpandProperty();
    [CompilerGeneratedAttribute]
public void set_ExpandProperty(string value);
    public SwitchParameter get_Unique();
    public void set_Unique(SwitchParameter value);
    public int get_Last();
    public void set_Last(int value);
    public int get_First();
    public void set_First(int value);
    [CompilerGeneratedAttribute]
public int get_Skip();
    [CompilerGeneratedAttribute]
public void set_Skip(int value);
    [CompilerGeneratedAttribute]
public int get_SkipLast();
    [CompilerGeneratedAttribute]
public void set_SkipLast(int value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Wait();
    [CompilerGeneratedAttribute]
public void set_Wait(SwitchParameter value);
    public Int32[] get_Index();
    public void set_Index(Int32[] value);
    public Int32[] get_SkipIndex();
    public void set_SkipIndex(Int32[] value);
    private void ProcessExpressionParameter();
    private void ProcessObject(PSObject inputObject);
    private void ProcessParameter(MshParameter p, PSObject inputObject, List`1<PSNoteProperty> result);
    private void ProcessExpandParameter(MshParameter p, PSObject inputObject, List`1<PSNoteProperty> matchedProperties);
    private void AddNoteProperties(PSObject expandedObject, PSObject inputObject, IEnumerable`1<PSNoteProperty> matchedProperties);
    private void WriteAlreadyExistingPropertyError(string name, object inputObject, string errorId);
    private void FilteredWriteObject(PSObject obj, List`1<PSNoteProperty> addedNoteProperties);
    private void SetPSCustomObject(PSObject psObj, bool newPSObject);
    private void ProcessObjectAndHandleErrors(PSObject pso);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    private void ProcessIndexed();
    protected virtual void EndProcessing();
}
internal class Microsoft.PowerShell.Commands.SelectObjectException : SystemException {
    [CompilerGeneratedAttribute]
private ErrorRecord <ErrorRecord>k__BackingField;
    internal ErrorRecord ErrorRecord { get; }
    internal SelectObjectException(ErrorRecord errorRecord);
    [CompilerGeneratedAttribute]
internal ErrorRecord get_ErrorRecord();
}
internal class Microsoft.PowerShell.Commands.SelectObjectExpressionParameterDefinition : CommandParameterDefinition {
    protected virtual void SetEntries();
}
[CmdletAttribute("Select", "String")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[OutputTypeAttribute("System.String")]
public class Microsoft.PowerShell.Commands.SelectStringCommand : PSCmdlet {
    private static string ParameterSetFile;
    private static string ParameterSetFileRaw;
    private static string ParameterSetObject;
    private static string ParameterSetObjectRaw;
    private static string ParameterSetLiteralFile;
    private static string ParameterSetLiteralFileRaw;
    internal static string OrdinalCultureName;
    internal static string InvariantCultureName;
    internal static string CurrentCultureName;
    private string _cultureName;
    private StringComparison _stringComparison;
    private CompareOptions _compareOptions;
    private CultureInfoIndexOf _cultureInfoIndexOf;
    private PSObject _inputObject;
    [CompilerGeneratedAttribute]
private String[] <Pattern>k__BackingField;
    private Regex[] _regexPattern;
    [CompilerGeneratedAttribute]
private String[] <Path>k__BackingField;
    private bool _isLiteralPath;
    [CompilerGeneratedAttribute]
private SwitchParameter <Raw>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <SimpleMatch>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <CaseSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Quiet>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <List>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <NoEmphasis>k__BackingField;
    private String[] _includeStrings;
    private WildcardPattern[] _include;
    private String[] _excludeStrings;
    private WildcardPattern[] _exclude;
    [CompilerGeneratedAttribute]
private SwitchParameter <NotMatch>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <AllMatches>k__BackingField;
    private Encoding _encoding;
    private Int32[] _context;
    private int _preContext;
    private int _postContext;
    private IContextTracker _globalContextTracker;
    private IContextTracker _noContextTracker;
    private bool _doneProcessing;
    private int _inputRecordNumber;
    private List`1<string> _inputObjectFileList;
    [ParameterAttribute]
[ValidateSetAttribute("Microsoft.PowerShell.Commands.ValidateMatchStringCultureNamesGenerator")]
[ValidateNotNullAttribute]
public string Culture { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AllowNullAttribute]
[AllowEmptyStringAttribute]
public PSObject InputObject { get; public set; }
    [ParameterAttribute]
public String[] Pattern { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[FileinfoToStringAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[FileinfoToStringAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public SwitchParameter Raw { get; public set; }
    [ParameterAttribute]
public SwitchParameter SimpleMatch { get; public set; }
    [ParameterAttribute]
public SwitchParameter CaseSensitive { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public SwitchParameter Quiet { get; public set; }
    [ParameterAttribute]
public SwitchParameter List { get; public set; }
    [ParameterAttribute]
public SwitchParameter NoEmphasis { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Exclude { get; public set; }
    [ParameterAttribute]
public SwitchParameter NotMatch { get; public set; }
    [ParameterAttribute]
public SwitchParameter AllMatches { get; public set; }
    [ParameterAttribute]
[ArgumentToEncodingTransformationAttribute]
[ArgumentEncodingCompletionsAttribute]
[ValidateNotNullOrEmptyAttribute]
public Encoding Encoding { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[ValidateCountAttribute("1", "2")]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public Int32[] Context { get; public set; }
    public string get_Culture();
    public void set_Culture(string value);
    private void InitCulture();
    public PSObject get_InputObject();
    public void set_InputObject(PSObject value);
    [CompilerGeneratedAttribute]
public String[] get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Raw();
    [CompilerGeneratedAttribute]
public void set_Raw(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_SimpleMatch();
    [CompilerGeneratedAttribute]
public void set_SimpleMatch(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_CaseSensitive();
    [CompilerGeneratedAttribute]
public void set_CaseSensitive(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Quiet();
    [CompilerGeneratedAttribute]
public void set_Quiet(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_List();
    [CompilerGeneratedAttribute]
public void set_List(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_NoEmphasis();
    [CompilerGeneratedAttribute]
public void set_NoEmphasis(SwitchParameter value);
    public String[] get_Include();
    public void set_Include(String[] value);
    public String[] get_Exclude();
    public void set_Exclude(String[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_NotMatch();
    [CompilerGeneratedAttribute]
public void set_NotMatch(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_AllMatches();
    [CompilerGeneratedAttribute]
public void set_AllMatches(SwitchParameter value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public Int32[] get_Context();
    public void set_Context(Int32[] value);
    private IContextTracker GetContextTracker();
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    private bool ProcessFile(string filename);
    private bool FlushTrackerQueue(IContextTracker contextTracker);
    protected virtual void EndProcessing();
    private bool DoMatch(string operandString, MatchInfo& matchResult);
    private bool DoMatch(object operand, MatchInfo& matchResult, String& operandString);
    private bool DoMatchWorker(string operandString, MatchInfo matchInfo, MatchInfo& matchResult);
    private List`1<string> ResolveFilePaths(String[] filePaths, bool isLiteralPath);
    private static ErrorRecord BuildErrorRecord(string messageId, string argument, string errorId, Exception innerException);
    private static ErrorRecord BuildErrorRecord(string messageId, string arg0, string arg1, string errorId, Exception innerException);
    private static ErrorRecord BuildErrorRecord(string messageId, Object[] arguments, string errorId, Exception innerException);
    private void WarnFilterContext();
    private bool MeetsIncludeExcludeCriteria(string filename);
}
[CmdletAttribute("Select", "Xml")]
[OutputTypeAttribute("Microsoft.PowerShell.Commands.SelectXmlInfo")]
public class Microsoft.PowerShell.Commands.SelectXmlCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private String[] <Path>k__BackingField;
    private bool _isLiteralPath;
    [CompilerGeneratedAttribute]
private XmlNode[] <Xml>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Hashtable <Namespace>k__BackingField;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public XmlNode[] Xml { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Content { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string XPath { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Hashtable Namespace { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    [CompilerGeneratedAttribute]
public XmlNode[] get_Xml();
    [CompilerGeneratedAttribute]
public void set_Xml(XmlNode[] value);
    [CompilerGeneratedAttribute]
public String[] get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(String[] value);
    [CompilerGeneratedAttribute]
public string get_XPath();
    [CompilerGeneratedAttribute]
public void set_XPath(string value);
    [CompilerGeneratedAttribute]
public Hashtable get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(Hashtable value);
    private void WriteResults(XmlNodeList foundXmlNodes, string filePath);
    private void ProcessXmlNode(XmlNode xmlNode, string filePath);
    private void ProcessXmlFile(string filePath);
    private void WriteFileReadError(string filePath, Exception exception);
    private XmlNamespaceManager AddNameSpaceTable(string parametersetname, XmlDocument xDoc, Hashtable namespacetable);
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.SelectXmlInfo : object {
    private static string inputStream;
    private static string MatchFormat;
    private static string SimpleFormat;
    [CompilerGeneratedAttribute]
private XmlNode <Node>k__BackingField;
    private string _path;
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    public XmlNode Node { get; public set; }
    public string Path { get; public set; }
    public string Pattern { get; public set; }
    [CompilerGeneratedAttribute]
public XmlNode get_Node();
    [CompilerGeneratedAttribute]
public void set_Node(XmlNode value);
    public string get_Path();
    public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(string value);
    public virtual string ToString();
    private string ToString(string directory);
    internal string GetNodeText();
    private string RelativePath(string directory);
    private string FormatLine(string text, string displaypath);
}
[ObsoleteAttribute("This cmdlet does not guarantee secure connections to SMTP servers. While there is no immediate replacement available in PowerShell, we recommend you do not use Send-MailMessage at this time. See https://aka.ms/SendMailMessage for more information.")]
[CmdletAttribute("Send", "MailMessage")]
public class Microsoft.PowerShell.Commands.SendMailMessage : PSCmdlet {
    [CompilerGeneratedAttribute]
private String[] <Attachments>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Bcc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <BodyAsHtml>k__BackingField;
    private Encoding _encoding;
    [CompilerGeneratedAttribute]
private String[] <Cc>k__BackingField;
    [CompilerGeneratedAttribute]
private DeliveryNotificationOptions <DeliveryNotificationOption>k__BackingField;
    [CompilerGeneratedAttribute]
private string <From>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SmtpServer>k__BackingField;
    [CompilerGeneratedAttribute]
private MailPriority <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ReplyTo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <To>k__BackingField;
    [CompilerGeneratedAttribute]
private PSCredential <Credential>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <UseSsl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    private MailMessage _mMailMessage;
    private SmtpClient _mSmtpClient;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Attachments { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Bcc { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Body { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter BodyAsHtml { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
[ArgumentEncodingCompletionsAttribute]
[ArgumentToEncodingTransformationAttribute]
public Encoding Encoding { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Cc { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public DeliveryNotificationOptions DeliveryNotificationOption { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string From { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public string SmtpServer { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public MailPriority Priority { get; public set; }
    [ParameterAttribute]
public String[] ReplyTo { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Subject { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] To { get; public set; }
    [ParameterAttribute]
[CredentialAttribute]
[ValidateNotNullOrEmptyAttribute]
public PSCredential Credential { get; public set; }
    [ParameterAttribute]
public SwitchParameter UseSsl { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Port { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Attachments();
    [CompilerGeneratedAttribute]
public void set_Attachments(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Bcc();
    [CompilerGeneratedAttribute]
public void set_Bcc(String[] value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_BodyAsHtml();
    [CompilerGeneratedAttribute]
public void set_BodyAsHtml(SwitchParameter value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public String[] get_Cc();
    [CompilerGeneratedAttribute]
public void set_Cc(String[] value);
    [CompilerGeneratedAttribute]
public DeliveryNotificationOptions get_DeliveryNotificationOption();
    [CompilerGeneratedAttribute]
public void set_DeliveryNotificationOption(DeliveryNotificationOptions value);
    [CompilerGeneratedAttribute]
public string get_From();
    [CompilerGeneratedAttribute]
public void set_From(string value);
    [CompilerGeneratedAttribute]
public string get_SmtpServer();
    [CompilerGeneratedAttribute]
public void set_SmtpServer(string value);
    [CompilerGeneratedAttribute]
public MailPriority get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(MailPriority value);
    [CompilerGeneratedAttribute]
public String[] get_ReplyTo();
    [CompilerGeneratedAttribute]
public void set_ReplyTo(String[] value);
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(string value);
    [CompilerGeneratedAttribute]
public String[] get_To();
    [CompilerGeneratedAttribute]
public void set_To(String[] value);
    [CompilerGeneratedAttribute]
public PSCredential get_Credential();
    [CompilerGeneratedAttribute]
public void set_Credential(PSCredential value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_UseSsl();
    [CompilerGeneratedAttribute]
public void set_UseSsl(SwitchParameter value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    private void AddAddressesToMailMessage(object address, string param);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
[CmdletAttribute("Set", "Alias")]
[OutputTypeAttribute("System.Management.Automation.AliasInfo")]
public class Microsoft.PowerShell.Commands.SetAliasCommand : WriteAliasCommandBase {
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Set", "Date")]
[OutputTypeAttribute("System.DateTime")]
public class Microsoft.PowerShell.Commands.SetDateCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private DateTime <Date>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Adjust>k__BackingField;
    [CompilerGeneratedAttribute]
private DisplayHintType <DisplayHint>k__BackingField;
    [ParameterAttribute]
public DateTime Date { get; public set; }
    [ParameterAttribute]
[AllowNullAttribute]
public TimeSpan Adjust { get; public set; }
    [ParameterAttribute]
public DisplayHintType DisplayHint { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_Date();
    [CompilerGeneratedAttribute]
public void set_Date(DateTime value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Adjust();
    [CompilerGeneratedAttribute]
public void set_Adjust(TimeSpan value);
    [CompilerGeneratedAttribute]
public DisplayHintType get_DisplayHint();
    [CompilerGeneratedAttribute]
public void set_DisplayHint(DisplayHintType value);
    [ArchitectureSensitiveAttribute]
protected virtual void ProcessRecord();
}
[CmdletAttribute("Set", "MarkdownOption")]
[OutputTypeAttribute("Microsoft.PowerShell.MarkdownRender.PSMarkdownOptionInfo")]
public class Microsoft.PowerShell.Commands.SetMarkdownOptionCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private string <Header1Color>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Header2Color>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Header3Color>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Header4Color>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Header5Color>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Header6Color>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageAltTextForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinkForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItalicsForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BoldForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <PassThru>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Theme>k__BackingField;
    [CompilerGeneratedAttribute]
private PSObject <InputObject>k__BackingField;
    private static string IndividualSetting;
    private static string InputObjectParamSet;
    private static string ThemeParamSet;
    private static string LightThemeName;
    private static string DarkThemeName;
    [ValidatePatternAttribute("^\[*[0-9;]*?m{1}")]
[ParameterAttribute]
public string Header1Color { get; public set; }
    [ValidatePatternAttribute("^\[*[0-9;]*?m{1}")]
[ParameterAttribute]
public string Header2Color { get; public set; }
    [ValidatePatternAttribute("^\[*[0-9;]*?m{1}")]
[ParameterAttribute]
public string Header3Color { get; public set; }
    [ValidatePatternAttribute("^\[*[0-9;]*?m{1}")]
[ParameterAttribute]
public string Header4Color { get; public set; }
    [ValidatePatternAttribute("^\[*[0-9;]*?m{1}")]
[ParameterAttribute]
public string Header5Color { get; public set; }
    [ValidatePatternAttribute("^\[*[0-9;]*?m{1}")]
[ParameterAttribute]
public string Header6Color { get; public set; }
    [ValidatePatternAttribute("^\[*[0-9;]*?m{1}")]
[ParameterAttribute]
public string Code { get; public set; }
    [ValidatePatternAttribute("^\[*[0-9;]*?m{1}")]
[ParameterAttribute]
public string ImageAltTextForegroundColor { get; public set; }
    [ValidatePatternAttribute("^\[*[0-9;]*?m{1}")]
[ParameterAttribute]
public string LinkForegroundColor { get; public set; }
    [ValidatePatternAttribute("^\[*[0-9;]*?m{1}")]
[ParameterAttribute]
public string ItalicsForegroundColor { get; public set; }
    [ValidatePatternAttribute("^\[*[0-9;]*?m{1}")]
[ParameterAttribute]
public string BoldForegroundColor { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ValidateNotNullOrEmptyAttribute]
[ParameterAttribute]
[ValidateSetAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Theme { get; public set; }
    [ValidateNotNullOrEmptyAttribute]
[ParameterAttribute]
public PSObject InputObject { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Header1Color();
    [CompilerGeneratedAttribute]
public void set_Header1Color(string value);
    [CompilerGeneratedAttribute]
public string get_Header2Color();
    [CompilerGeneratedAttribute]
public void set_Header2Color(string value);
    [CompilerGeneratedAttribute]
public string get_Header3Color();
    [CompilerGeneratedAttribute]
public void set_Header3Color(string value);
    [CompilerGeneratedAttribute]
public string get_Header4Color();
    [CompilerGeneratedAttribute]
public void set_Header4Color(string value);
    [CompilerGeneratedAttribute]
public string get_Header5Color();
    [CompilerGeneratedAttribute]
public void set_Header5Color(string value);
    [CompilerGeneratedAttribute]
public string get_Header6Color();
    [CompilerGeneratedAttribute]
public void set_Header6Color(string value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public string get_ImageAltTextForegroundColor();
    [CompilerGeneratedAttribute]
public void set_ImageAltTextForegroundColor(string value);
    [CompilerGeneratedAttribute]
public string get_LinkForegroundColor();
    [CompilerGeneratedAttribute]
public void set_LinkForegroundColor(string value);
    [CompilerGeneratedAttribute]
public string get_ItalicsForegroundColor();
    [CompilerGeneratedAttribute]
public void set_ItalicsForegroundColor(string value);
    [CompilerGeneratedAttribute]
public string get_BoldForegroundColor();
    [CompilerGeneratedAttribute]
public void set_BoldForegroundColor(string value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_PassThru();
    [CompilerGeneratedAttribute]
public void set_PassThru(SwitchParameter value);
    [CompilerGeneratedAttribute]
public string get_Theme();
    [CompilerGeneratedAttribute]
public void set_Theme(string value);
    [CompilerGeneratedAttribute]
public PSObject get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSObject value);
    protected virtual void EndProcessing();
    private void SetOptions(PSMarkdownOptionInfo mdOptionInfo);
}
[CmdletAttribute("Set", "PSBreakpoint")]
[OutputTypeAttribute("System.Management.Automation.CommandBreakpoint")]
[OutputTypeAttribute("System.Management.Automation.LineBreakpoint")]
[OutputTypeAttribute("System.Management.Automation.VariableBreakpoint")]
public class Microsoft.PowerShell.Commands.SetPSBreakpointCommand : PSBreakpointAccessorCommandBase {
    [CompilerGeneratedAttribute]
private ScriptBlock <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Script>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Variable>k__BackingField;
    [CompilerGeneratedAttribute]
private VariableAccessMode <Mode>k__BackingField;
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public ScriptBlock Action { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Column { get; public set; }
    [AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public String[] Command { get; public set; }
    [ParameterAttribute]
public Int32[] Line { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ValidateNotNullAttribute]
public String[] Script { get; public set; }
    [AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public String[] Variable { get; public set; }
    [ParameterAttribute]
public VariableAccessMode Mode { get; public set; }
    [CompilerGeneratedAttribute]
public ScriptBlock get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(ScriptBlock value);
    [CompilerGeneratedAttribute]
public int get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(int value);
    [CompilerGeneratedAttribute]
public String[] get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(String[] value);
    [CompilerGeneratedAttribute]
public Int32[] get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(Int32[] value);
    [CompilerGeneratedAttribute]
public String[] get_Script();
    [CompilerGeneratedAttribute]
public void set_Script(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Variable();
    [CompilerGeneratedAttribute]
public void set_Variable(String[] value);
    [CompilerGeneratedAttribute]
public VariableAccessMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(VariableAccessMode value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Set", "TraceSource")]
[OutputTypeAttribute("System.Management.Automation.PSTraceSource")]
public class Microsoft.PowerShell.Commands.SetTraceSourceCommand : TraceListenerCommandBase {
    [CompilerGeneratedAttribute]
private String[] <RemoveListener>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <RemoveFileListener>k__BackingField;
    private bool _passThru;
    [ParameterAttribute]
public String[] Name { get; public set; }
    [ParameterAttribute]
public PSTraceSourceOptions Option { get; public set; }
    [ParameterAttribute]
public TraceOptions ListenerOption { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string FilePath { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
public SwitchParameter Debugger { get; public set; }
    [ParameterAttribute]
public SwitchParameter PSHost { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] RemoveListener { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] RemoveFileListener { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    public String[] get_Name();
    public void set_Name(String[] value);
    public PSTraceSourceOptions get_Option();
    public void set_Option(PSTraceSourceOptions value);
    public TraceOptions get_ListenerOption();
    public void set_ListenerOption(TraceOptions value);
    public string get_FilePath();
    public void set_FilePath(string value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public SwitchParameter get_Debugger();
    public void set_Debugger(SwitchParameter value);
    public SwitchParameter get_PSHost();
    public void set_PSHost(SwitchParameter value);
    [CompilerGeneratedAttribute]
public String[] get_RemoveListener();
    [CompilerGeneratedAttribute]
public void set_RemoveListener(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_RemoveFileListener();
    [CompilerGeneratedAttribute]
public void set_RemoveFileListener(String[] value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Set", "Variable")]
[OutputTypeAttribute("System.Management.Automation.PSVariable")]
public class Microsoft.PowerShell.Commands.SetVariableCommand : VariableCommandBase {
    [CompilerGeneratedAttribute]
private String[] <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    private Nullable`1<ScopedItemOptions> _options;
    private bool _force;
    private Nullable`1<SessionStateEntryVisibility> _visibility;
    private bool _passThru;
    private bool _nameIsFormalParameter;
    private bool _valueIsFormalParameter;
    private List`1<object> _valueList;
    [ParameterAttribute]
public String[] Name { get; public set; }
    [ParameterAttribute]
public object Value { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    [ParameterAttribute]
public string Description { get; public set; }
    [ParameterAttribute]
public ScopedItemOptions Option { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
public SessionStateEntryVisibility Visibility { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(String[] value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    public String[] get_Include();
    public void set_Include(String[] value);
    public String[] get_Exclude();
    public void set_Exclude(String[] value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    public ScopedItemOptions get_Option();
    public void set_Option(ScopedItemOptions value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public SessionStateEntryVisibility get_Visibility();
    public void set_Visibility(SessionStateEntryVisibility value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    private void SetVariable(String[] varNames, object varValue);
}
[CmdletAttribute("Show", "Command")]
public class Microsoft.PowerShell.Commands.ShowCommandCommand : PSCmdlet {
    private bool _hasOpenedWindow;
    private bool _passThrough;
    private ShowCommandProxy _showCommandProxy;
    private List`1<ShowCommandCommandInfo> _commands;
    private Dictionary`2<string, ShowCommandModuleInfo> _importedModules;
    private PSDataCollection`1<ErrorRecord> _errors;
    private SwitchParameter _noCommonParameter;
    private object _commandViewModelObj;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <ErrorPopup>k__BackingField;
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Name { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public double Height { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public double Width { get; public set; }
    [ParameterAttribute]
public SwitchParameter NoCommonParameter { get; public set; }
    [ParameterAttribute]
public SwitchParameter ErrorPopup { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    public SwitchParameter get_NoCommonParameter();
    public void set_NoCommonParameter(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_ErrorPopup();
    [CompilerGeneratedAttribute]
public void set_ErrorPopup(SwitchParameter value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    public void RunScript(string script);
    public sealed virtual void Dispose();
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
    private void RunScriptSilentlyAndWithErrorHookup(string script);
    private void IssueErrorForNoCommand();
    private void IssueErrorForMoreThanOneCommand();
    private void GetCommandInfoAndModules(CommandInfo& command, Dictionary`2& modules);
    private bool CanProcessRecordForOneCommand();
    private bool CanProcessRecordForAllCommands();
    private void WaitForWindowClosedOrHelpNeeded();
    private void Output_DataAdded(object sender, DataAddedEventArgs e);
    private void Error_DataAdded(object sender, DataAddedEventArgs e);
    private void Dispose(bool isDisposing);
}
public class Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandCommandInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModuleName>k__BackingField;
    [CompilerGeneratedAttribute]
private ShowCommandModuleInfo <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandTypes <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ShowCommandParameterSetInfo> <ParameterSets>k__BackingField;
    public string Name { get; }
    public string ModuleName { get; }
    public ShowCommandModuleInfo Module { get; }
    public CommandTypes CommandType { get; }
    public string Definition { get; }
    public ICollection`1<ShowCommandParameterSetInfo> ParameterSets { get; }
    public ShowCommandCommandInfo(CommandInfo other);
    public ShowCommandCommandInfo(PSObject other);
    [IteratorStateMachineAttribute("Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandCommandInfo/<GetObjectEnumerable>d__2")]
internal static IEnumerable`1<object> GetObjectEnumerable(IEnumerable enumerable);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_ModuleName();
    [CompilerGeneratedAttribute]
public ShowCommandModuleInfo get_Module();
    [CompilerGeneratedAttribute]
public CommandTypes get_CommandType();
    [CompilerGeneratedAttribute]
public string get_Definition();
    [CompilerGeneratedAttribute]
public ICollection`1<ShowCommandParameterSetInfo> get_ParameterSets();
}
public class Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandModuleInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public ShowCommandModuleInfo(PSModuleInfo other);
    public ShowCommandModuleInfo(PSObject other);
    [CompilerGeneratedAttribute]
public string get_Name();
}
public class Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMandatory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValueFromPipeline>k__BackingField;
    [CompilerGeneratedAttribute]
private ShowCommandParameterType <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ValidParamSetValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasParameterSet>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public string Name { get; }
    public bool IsMandatory { get; }
    public bool ValueFromPipeline { get; }
    public ShowCommandParameterType ParameterType { get; }
    public IList`1<string> ValidParamSetValues { get; }
    public bool HasParameterSet { get; }
    public int Position { get; }
    public ShowCommandParameterInfo(CommandParameterInfo other);
    public ShowCommandParameterInfo(PSObject other);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_IsMandatory();
    [CompilerGeneratedAttribute]
public bool get_ValueFromPipeline();
    [CompilerGeneratedAttribute]
public ShowCommandParameterType get_ParameterType();
    [CompilerGeneratedAttribute]
public IList`1<string> get_ValidParamSetValues();
    [CompilerGeneratedAttribute]
public bool get_HasParameterSet();
    [CompilerGeneratedAttribute]
public int get_Position();
}
public class Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterSetInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ShowCommandParameterInfo> <Parameters>k__BackingField;
    public string Name { get; }
    public bool IsDefault { get; }
    public ICollection`1<ShowCommandParameterInfo> Parameters { get; }
    public ShowCommandParameterSetInfo(CommandParameterSetInfo other);
    public ShowCommandParameterSetInfo(PSObject other);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_IsDefault();
    [CompilerGeneratedAttribute]
public ICollection`1<ShowCommandParameterInfo> get_Parameters();
}
public class Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterType : object {
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ImplementsDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasFlagAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsArray>k__BackingField;
    [CompilerGeneratedAttribute]
private ShowCommandParameterType <ElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private ArrayList <EnumValues>k__BackingField;
    public string FullName { get; }
    public bool IsEnum { get; }
    public bool ImplementsDictionary { get; }
    public bool HasFlagAttribute { get; }
    public bool IsArray { get; }
    public ShowCommandParameterType ElementType { get; }
    public bool IsString { get; }
    public bool IsScriptBlock { get; }
    public bool IsBoolean { get; }
    public bool IsSwitch { get; }
    public ArrayList EnumValues { get; }
    public ShowCommandParameterType(Type other);
    public ShowCommandParameterType(PSObject other);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public bool get_IsEnum();
    [CompilerGeneratedAttribute]
public bool get_ImplementsDictionary();
    [CompilerGeneratedAttribute]
public bool get_HasFlagAttribute();
    [CompilerGeneratedAttribute]
public bool get_IsArray();
    [CompilerGeneratedAttribute]
public ShowCommandParameterType get_ElementType();
    public bool get_IsString();
    public bool get_IsScriptBlock();
    public bool get_IsBoolean();
    public bool get_IsSwitch();
    [CompilerGeneratedAttribute]
public ArrayList get_EnumValues();
}
internal class Microsoft.PowerShell.Commands.ShowCommandProxy : object {
    private static string ShowCommandHelperName;
    private ShowCommandCommand _cmdlet;
    private GraphicalHostReflectionWrapper _graphicalHostReflectionWrapper;
    internal bool HasHostWindow { get; }
    internal AutoResetEvent WindowClosed { get; }
    internal AutoResetEvent HelpNeeded { get; }
    internal AutoResetEvent ImportModuleNeeded { get; }
    internal AutoResetEvent WindowLoaded { get; }
    internal string CommandNeedingHelp { get; }
    internal string ParentModuleNeedingImportModule { get; }
    internal double ScreenWidth { get; }
    internal double ScreenHeight { get; }
    internal ShowCommandProxy(ShowCommandCommand cmdlet);
    internal void ShowAllModulesWindow(Dictionary`2<string, ShowCommandModuleInfo> importedModules, IEnumerable`1<ShowCommandCommandInfo> commands, bool noCommonParameter, bool passThrough);
    internal void ShowCommandWindow(object commandViewModelObj, bool passThrough);
    internal void CloseWindow();
    internal string GetScript();
    internal void ShowErrorString(string error);
    internal bool SetPendingISECommand(string command);
    internal object GetCommandViewModel(ShowCommandCommandInfo command, bool noCommonParameter, Dictionary`2<string, ShowCommandModuleInfo> importedModules, bool moduleQualify);
    internal string GetShowCommandCommand(string commandName, bool includeAliasAndModules);
    internal string GetShowAllModulesCommand();
    internal Dictionary`2<string, ShowCommandModuleInfo> GetImportedModulesDictionary(Object[] moduleObjects);
    internal List`1<ShowCommandCommandInfo> GetCommandList(Object[] commandObjects);
    internal bool get_HasHostWindow();
    internal AutoResetEvent get_WindowClosed();
    internal AutoResetEvent get_HelpNeeded();
    internal AutoResetEvent get_ImportModuleNeeded();
    internal AutoResetEvent get_WindowLoaded();
    internal string get_CommandNeedingHelp();
    internal string get_ParentModuleNeedingImportModule();
    internal void DisplayHelp(Collection`1<PSObject> helpResults);
    internal string GetImportModuleCommand(string module);
    internal string GetHelpCommand(string command);
    internal void ImportModuleDone(Dictionary`2<string, ShowCommandModuleInfo> importedModules, IEnumerable`1<ShowCommandCommandInfo> commands);
    internal void ImportModuleFailed(Exception reason);
    internal void ActivateWindow();
    internal double get_ScreenWidth();
    internal double get_ScreenHeight();
}
[CmdletAttribute("Show", "Markdown")]
[OutputTypeAttribute("System.String")]
public class Microsoft.PowerShell.Commands.ShowMarkdownCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private PSObject <InputObject>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <UseBrowser>k__BackingField;
    private PowerShell _powerShell;
    [ValidateNotNullOrEmptyAttribute]
[ParameterAttribute]
public PSObject InputObject { get; public set; }
    [ValidateNotNullOrEmptyAttribute]
[ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public SwitchParameter UseBrowser { get; public set; }
    [CompilerGeneratedAttribute]
public PSObject get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSObject value);
    [CompilerGeneratedAttribute]
public String[] get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_UseBrowser();
    [CompilerGeneratedAttribute]
public void set_UseBrowser(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    private void ConvertFromMarkdown(string parameter, object input);
    private void ProcessMarkdownInfo(MarkdownInfo markdownInfo);
    protected virtual void EndProcessing();
}
[CmdletAttribute("Sort", "Object")]
public class Microsoft.PowerShell.Commands.SortObjectCommand : OrderObjectBase {
    [CompilerGeneratedAttribute]
private SwitchParameter <Stable>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Unique>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Bottom>k__BackingField;
    [ParameterAttribute]
public SwitchParameter Stable { get; public set; }
    [ParameterAttribute]
public SwitchParameter Descending { get; public set; }
    [ParameterAttribute]
public SwitchParameter Unique { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Top { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Bottom { get; public set; }
    [CompilerGeneratedAttribute]
public SwitchParameter get_Stable();
    [CompilerGeneratedAttribute]
public void set_Stable(SwitchParameter value);
    public SwitchParameter get_Descending();
    public void set_Descending(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Unique();
    [CompilerGeneratedAttribute]
public void set_Unique(SwitchParameter value);
    [CompilerGeneratedAttribute]
public int get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(int value);
    [CompilerGeneratedAttribute]
public int get_Bottom();
    [CompilerGeneratedAttribute]
public void set_Bottom(int value);
    private int MoveUniqueEntriesToFront(List`1<OrderByPropertyEntry> sortedData, OrderByPropertyComparer comparer);
    private int FullSort(List`1<OrderByPropertyEntry> dataToSort, OrderByPropertyComparer comparer);
    private int Heapify(List`1<OrderByPropertyEntry> dataToSort, OrderByPropertyComparer orderByPropertyComparer);
    protected virtual void EndProcessing();
}
internal class Microsoft.PowerShell.Commands.SortObjectExpressionParameterDefinition : CommandParameterDefinition {
    protected virtual void SetEntries();
}
internal static class Microsoft.PowerShell.Commands.SortObjectParameterDefinitionKeys : object {
    internal static string AscendingEntryKey;
    internal static string DescendingEntryKey;
}
[CmdletAttribute("Start", "Sleep")]
public class Microsoft.PowerShell.Commands.StartSleepCommand : PSCmdlet {
    private bool _disposed;
    [CompilerGeneratedAttribute]
private double <Seconds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Milliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    private ManualResetEvent _waitHandle;
    private object _syncObject;
    private bool _stopping;
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public double Seconds { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int Milliseconds { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("1")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public TimeSpan Duration { get; public set; }
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public double get_Seconds();
    [CompilerGeneratedAttribute]
public void set_Seconds(double value);
    [CompilerGeneratedAttribute]
public int get_Milliseconds();
    [CompilerGeneratedAttribute]
public void set_Milliseconds(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    private void Sleep(int milliSecondsToSleep);
    protected virtual void ProcessRecord();
    protected virtual void StopProcessing();
}
internal static class Microsoft.PowerShell.Commands.StreamHelper : object {
    internal static int DefaultReadBuffer;
    internal static int ChunkSize;
    internal static int ActivityId;
    private static Regex s_metaexp;
    private static StreamHelper();
    internal static void WriteToStream(Stream input, Stream output, PSCmdlet cmdlet, CancellationToken cancellationToken);
    internal static void SaveStreamToFile(Stream stream, string filePath, PSCmdlet cmdlet, CancellationToken cancellationToken);
    private static string StreamToString(Stream stream, Encoding encoding);
    internal static string DecodeStream(Stream stream, string characterSet, Encoding& encoding);
    internal static bool TryGetEncoding(string characterSet, Encoding& encoding);
    internal static string DecodeStream(Stream stream, Encoding& encoding);
    internal static Byte[] EncodeToBytes(string str, Encoding encoding);
    internal static Byte[] EncodeToBytes(string str);
    internal static Stream GetResponseStream(HttpResponseMessage response);
}
internal class Microsoft.PowerShell.Commands.TableView : object {
    private PSPropertyExpressionFactory _expressionFactory;
    private TypeInfoDataBase _typeInfoDatabase;
    private FormatErrorManager _errorManager;
    internal void Initialize(PSPropertyExpressionFactory expressionFactory, TypeInfoDataBase db);
    internal HeaderInfo GenerateHeaderInfo(PSObject input, TableControlBody tableBody, OutGridViewCommand parentCmdlet);
    internal HeaderInfo GenerateHeaderInfo(PSObject input, OutGridViewCommand parentCmdlet);
    private static void FilterActiveAssociationList(List`1<MshResolvedExpressionParameterAssociation> activeAssociationList);
    private List`1<TableRowItemDefinition> GetActiveTableRowDefinition(TableControlBody tableBody, PSObject so);
}
[CmdletAttribute("Tee", "Object")]
public class Microsoft.PowerShell.Commands.TeeObjectCommand : PSCmdlet {
    private PSObject _inputObject;
    private string _fileName;
    private bool _append;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    private string _variable;
    private CommandWrapper _commandWrapper;
    private bool _alreadyDisposed;
    [ParameterAttribute]
public PSObject InputObject { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string FilePath { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string LiteralPath { get; public set; }
    [ParameterAttribute]
public SwitchParameter Append { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ArgumentToEncodingTransformationAttribute]
[ArgumentEncodingCompletionsAttribute]
[ValidateNotNullOrEmptyAttribute]
public Encoding Encoding { get; public set; }
    [ParameterAttribute]
public string Variable { get; public set; }
    public PSObject get_InputObject();
    public void set_InputObject(PSObject value);
    public string get_FilePath();
    public void set_FilePath(string value);
    public string get_LiteralPath();
    public void set_LiteralPath(string value);
    public SwitchParameter get_Append();
    public void set_Append(SwitchParameter value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(Encoding value);
    public string get_Variable();
    public void set_Variable(string value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    private void Dispose(bool isDisposing);
    public sealed virtual void Dispose();
}
[CmdletAttribute("Test", "Json")]
[OutputTypeAttribute("System.Boolean")]
public class Microsoft.PowerShell.Commands.TestJsonCommand : PSCmdlet {
    private static string SchemaFileParameterSet;
    private static string SchemaStringParameterSet;
    [CompilerGeneratedAttribute]
private string <Json>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaFile>k__BackingField;
    private JsonSchema _jschema;
    [ParameterAttribute]
public string Json { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Schema { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string SchemaFile { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Json();
    [CompilerGeneratedAttribute]
public void set_Json(string value);
    [CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public void set_Schema(string value);
    [CompilerGeneratedAttribute]
public string get_SchemaFile();
    [CompilerGeneratedAttribute]
public void set_SchemaFile(string value);
    private static bool UnwrapException(Exception e);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
[ObsoleteAttribute("This class is included in this SDK for completeness only. The members of this class cannot be used directly, nor should this class be used to derive other classes.", "True")]
public enum Microsoft.PowerShell.Commands.TextEncodingType : Enum {
    public int value__;
    public static TextEncodingType Unknown;
    public static TextEncodingType String;
    public static TextEncodingType Unicode;
    public static TextEncodingType Byte;
    public static TextEncodingType BigEndianUnicode;
    public static TextEncodingType BigEndianUTF32;
    public static TextEncodingType Utf8;
    public static TextEncodingType Utf7;
    public static TextEncodingType Ascii;
}
public class Microsoft.PowerShell.Commands.TextMeasureInfo : MeasureInfo {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Lines>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Words>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Characters>k__BackingField;
    public Nullable`1<int> Lines { get; public set; }
    public Nullable`1<int> Words { get; public set; }
    public Nullable`1<int> Characters { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Lines();
    [CompilerGeneratedAttribute]
public void set_Lines(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Words();
    [CompilerGeneratedAttribute]
public void set_Words(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Characters();
    [CompilerGeneratedAttribute]
public void set_Characters(Nullable`1<int> value);
}
internal class Microsoft.PowerShell.Commands.ToStringColumnInfo : ColumnInfo {
    private OutGridViewCommand _parentCmdlet;
    internal ToStringColumnInfo(string staleObjectPropertyName, string displayName, OutGridViewCommand parentCmdlet);
    internal virtual object GetValue(PSObject liveObject);
}
public class Microsoft.PowerShell.Commands.TraceCommandBase : PSCmdlet {
    internal Collection`1<PSTraceSource> GetMatchingTraceSource(String[] patternsToMatch, bool writeErrorIfMatchNotFound);
    internal Collection`1<PSTraceSource> GetMatchingTraceSource(String[] patternsToMatch, bool writeErrorIfMatchNotFound, Collection`1& notMatched);
}
[CmdletAttribute("Trace", "Command")]
public class Microsoft.PowerShell.Commands.TraceCommandCommand : TraceListenerCommandBase {
    [CompilerGeneratedAttribute]
private PSObject <InputObject>k__BackingField;
    [CompilerGeneratedAttribute]
private ScriptBlock <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <ArgumentList>k__BackingField;
    private Collection`1<PSTraceSource> _matchingSources;
    private PipelineProcessor _pipeline;
    private bool _disposed;
    [ParameterAttribute]
public PSObject InputObject { get; public set; }
    [ParameterAttribute]
public String[] Name { get; public set; }
    [ParameterAttribute]
public PSTraceSourceOptions Option { get; public set; }
    [ParameterAttribute]
public ScriptBlock Expression { get; public set; }
    [ParameterAttribute]
public string Command { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] ArgumentList { get; public set; }
    [ParameterAttribute]
public TraceOptions ListenerOption { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string FilePath { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
public SwitchParameter Debugger { get; public set; }
    [ParameterAttribute]
public SwitchParameter PSHost { get; public set; }
    [CompilerGeneratedAttribute]
public PSObject get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSObject value);
    public String[] get_Name();
    public void set_Name(String[] value);
    public PSTraceSourceOptions get_Option();
    public void set_Option(PSTraceSourceOptions value);
    [CompilerGeneratedAttribute]
public ScriptBlock get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(ScriptBlock value);
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(string value);
    [CompilerGeneratedAttribute]
public Object[] get_ArgumentList();
    [CompilerGeneratedAttribute]
public void set_ArgumentList(Object[] value);
    public TraceOptions get_ListenerOption();
    public void set_ListenerOption(TraceOptions value);
    public string get_FilePath();
    public void set_FilePath(string value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public SwitchParameter get_Debugger();
    public void set_Debugger(SwitchParameter value);
    public SwitchParameter get_PSHost();
    public void set_PSHost(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
    private object RunExpression();
    private object StepCommand();
    public sealed virtual void Dispose();
}
public class Microsoft.PowerShell.Commands.TraceListenerCommandBase : TraceCommandBase {
    [CompilerGeneratedAttribute]
private String[] <NameInternal>k__BackingField;
    private PSTraceSourceOptions _options;
    internal bool optionsSpecified;
    private TraceOptions _traceOptions;
    internal bool traceOptionsSpecified;
    [CompilerGeneratedAttribute]
private string <FileListener>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceWrite>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DebuggerListener>k__BackingField;
    private bool _host;
    private DefaultTraceListener _defaultListener;
    private PSHostTraceListener _hostListener;
    private Collection`1<TextWriterTraceListener> _fileListeners;
    [CompilerGeneratedAttribute]
private Collection`1<FileStream> <FileStreams>k__BackingField;
    private Dictionary`2<PSTraceSource, KeyValuePair`2<PSTraceSourceOptions, Collection`1<TraceListener>>> _storedTraceSourceState;
    internal String[] NameInternal { get; internal set; }
    internal PSTraceSourceOptions OptionsInternal { get; internal set; }
    internal TraceOptions ListenerOptionsInternal { get; internal set; }
    internal string FileListener { get; internal set; }
    public bool ForceWrite { get; public set; }
    internal bool DebuggerListener { get; internal set; }
    internal SwitchParameter PSHostListener { get; internal set; }
    internal Collection`1<FileStream> FileStreams { get; private set; }
    [CompilerGeneratedAttribute]
internal String[] get_NameInternal();
    [CompilerGeneratedAttribute]
internal void set_NameInternal(String[] value);
    internal PSTraceSourceOptions get_OptionsInternal();
    internal void set_OptionsInternal(PSTraceSourceOptions value);
    internal TraceOptions get_ListenerOptionsInternal();
    internal void set_ListenerOptionsInternal(TraceOptions value);
    [CompilerGeneratedAttribute]
internal string get_FileListener();
    [CompilerGeneratedAttribute]
internal void set_FileListener(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceWrite();
    [CompilerGeneratedAttribute]
public void set_ForceWrite(bool value);
    [CompilerGeneratedAttribute]
internal bool get_DebuggerListener();
    [CompilerGeneratedAttribute]
internal void set_DebuggerListener(bool value);
    internal SwitchParameter get_PSHostListener();
    internal void set_PSHostListener(SwitchParameter value);
    internal Collection`1<PSTraceSource> ConfigureTraceSource(String[] sourceNames, bool preConfigure, Collection`1& preconfiguredSources);
    internal void AddTraceListenersToSources(Collection`1<PSTraceSource> matchingSources);
    [CompilerGeneratedAttribute]
internal Collection`1<FileStream> get_FileStreams();
    [CompilerGeneratedAttribute]
private void set_FileStreams(Collection`1<FileStream> value);
    private static void AddListenerToSources(Collection`1<PSTraceSource> matchingSources, TraceListener listener);
    internal static void RemoveListenersByName(Collection`1<PSTraceSource> matchingSources, String[] listenerNames, bool fileListenersOnly);
    internal void SetTraceListenerOptions(Collection`1<PSTraceSource> matchingSources);
    internal void SetFlags(Collection`1<PSTraceSource> matchingSources);
    internal void TurnOnTracing(Collection`1<PSTraceSource> matchingSources, bool preConfigured);
    internal void ResetTracing(Collection`1<PSTraceSource> matchingSources);
    protected void ClearStoredState();
}
internal class Microsoft.PowerShell.Commands.TracePipelineWriter : PipelineWriter {
    private TraceListenerCommandBase _cmdlet;
    private bool _writeError;
    private bool _isOpen;
    private Collection`1<PSTraceSource> _matchingSources;
    public WaitHandle WaitHandle { get; }
    public bool IsOpen { get; }
    public int Count { get; }
    public int MaxCapacity { get; }
    internal TracePipelineWriter(TraceListenerCommandBase cmdlet, bool writeError, Collection`1<PSTraceSource> matchingSources);
    public virtual WaitHandle get_WaitHandle();
    public virtual bool get_IsOpen();
    public virtual int get_Count();
    public virtual int get_MaxCapacity();
    public virtual void Close();
    public virtual void Flush();
    public virtual int Write(object obj);
    public virtual int Write(object obj, bool enumerateCollection);
    private static ErrorRecord ConvertToErrorRecord(object obj);
}
internal class Microsoft.PowerShell.Commands.TypeNameColumnInfo : ColumnInfo {
    internal TypeNameColumnInfo(string staleObjectPropertyName, string displayName);
    internal virtual object GetValue(PSObject liveObject);
}
[CmdletAttribute("Unblock", "File")]
public class Microsoft.PowerShell.Commands.UnblockFileCommand : PSCmdlet {
    private String[] _paths;
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    protected virtual void ProcessRecord();
    private bool IsValidFileForUnblocking(string resolvedpath);
}
[CmdletAttribute("Unregister", "Event")]
public class Microsoft.PowerShell.Commands.UnregisterEventCommand : PSCmdlet {
    private string _sourceIdentifier;
    [CompilerGeneratedAttribute]
private int <SubscriptionId>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Force>k__BackingField;
    private WildcardPattern _matchPattern;
    private bool _foundMatch;
    [ParameterAttribute]
public string SourceIdentifier { get; public set; }
    [ParameterAttribute]
public int SubscriptionId { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    public string get_SourceIdentifier();
    public void set_SourceIdentifier(string value);
    [CompilerGeneratedAttribute]
public int get_SubscriptionId();
    [CompilerGeneratedAttribute]
public void set_SubscriptionId(int value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(SwitchParameter value);
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.UpdateData : PSCmdlet {
    protected static string FileParameterSet;
    [CompilerGeneratedAttribute]
private String[] <AppendPath>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PrependPath>k__BackingField;
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullAttribute]
public String[] AppendPath { get; public set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
public String[] PrependPath { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_AppendPath();
    [CompilerGeneratedAttribute]
public void set_AppendPath(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_PrependPath();
    [CompilerGeneratedAttribute]
public void set_PrependPath(String[] value);
    private static void ReportWrongExtension(string file, string errorId, PSCmdlet cmdlet);
    private static void ReportWrongProviderType(string providerId, string errorId, PSCmdlet cmdlet);
    internal static Collection`1<string> Glob(String[] files, string errorId, PSCmdlet cmdlet);
}
[CmdletAttribute("Update", "FormatData")]
public class Microsoft.PowerShell.Commands.UpdateFormatDataCommand : UpdateData {
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Update", "List")]
public class Microsoft.PowerShell.Commands.UpdateListCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private Object[] <Add>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Remove>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Replace>k__BackingField;
    [CompilerGeneratedAttribute]
private PSObject <InputObject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Property>k__BackingField;
    private PSListModifier _listModifier;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Object[] Add { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Object[] Remove { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Object[] Replace { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public PSObject InputObject { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Property { get; public set; }
    [CompilerGeneratedAttribute]
public Object[] get_Add();
    [CompilerGeneratedAttribute]
public void set_Add(Object[] value);
    [CompilerGeneratedAttribute]
public Object[] get_Remove();
    [CompilerGeneratedAttribute]
public void set_Remove(Object[] value);
    [CompilerGeneratedAttribute]
public Object[] get_Replace();
    [CompilerGeneratedAttribute]
public void set_Replace(Object[] value);
    [CompilerGeneratedAttribute]
public PSObject get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSObject value);
    [CompilerGeneratedAttribute]
public string get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(string value);
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    private Hashtable CreateHashtable();
    private PSListModifier CreatePSListModifier();
    private ErrorRecord NewError(string errorId, string resourceId, object targetObject, Object[] args);
}
[CmdletAttribute("Update", "TypeData")]
public class Microsoft.PowerShell.Commands.UpdateTypeDataCommand : UpdateData {
    private static string DynamicTypeSet;
    private static string TypeDataSet;
    private static object s_notSpecified;
    private PSMemberTypes _memberType;
    private bool _isMemberTypeSet;
    private string _memberName;
    private object _value1;
    private object _value2;
    private Type _typeConverter;
    private Type _typeAdapter;
    private string _serializationMethod;
    private Type _targetTypeForDeserialization;
    private int _serializationDepth;
    private string _defaultDisplayProperty;
    private Nullable`1<bool> _inheritPropertySerializationSet;
    private string _stringSerializationSource;
    private String[] _defaultDisplayPropertySet;
    private String[] _defaultKeyPropertySet;
    private String[] _propertySerializationSet;
    private string _typeName;
    private bool _force;
    private TypeData[] _typeData;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[ValidateSetAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public PSMemberTypes MemberType { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string MemberName { get; public set; }
    [ParameterAttribute]
public object Value { get; public set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
public object SecondValue { get; public set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
public Type TypeConverter { get; public set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
public Type TypeAdapter { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string SerializationMethod { get; public set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
public Type TargetTypeForDeserialization { get; public set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int SerializationDepth { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string DefaultDisplayProperty { get; public set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
public Nullable`1<bool> InheritPropertySerializationSet { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string StringSerializationSource { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] DefaultDisplayPropertySet { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] DefaultKeyPropertySet { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] PropertySerializationSet { get; public set; }
    [ParameterAttribute]
[ArgumentToTypeNameTransformationAttribute]
[ValidateNotNullOrEmptyAttribute]
public string TypeName { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
public TypeData[] TypeData { get; public set; }
    private static UpdateTypeDataCommand();
    private static bool HasBeenSpecified(object obj);
    public PSMemberTypes get_MemberType();
    public void set_MemberType(PSMemberTypes value);
    public string get_MemberName();
    public void set_MemberName(string value);
    public object get_Value();
    public void set_Value(object value);
    public object get_SecondValue();
    public void set_SecondValue(object value);
    public Type get_TypeConverter();
    public void set_TypeConverter(Type value);
    public Type get_TypeAdapter();
    public void set_TypeAdapter(Type value);
    public string get_SerializationMethod();
    public void set_SerializationMethod(string value);
    public Type get_TargetTypeForDeserialization();
    public void set_TargetTypeForDeserialization(Type value);
    public int get_SerializationDepth();
    public void set_SerializationDepth(int value);
    public string get_DefaultDisplayProperty();
    public void set_DefaultDisplayProperty(string value);
    public Nullable`1<bool> get_InheritPropertySerializationSet();
    public void set_InheritPropertySerializationSet(Nullable`1<bool> value);
    public string get_StringSerializationSource();
    public void set_StringSerializationSource(string value);
    public String[] get_DefaultDisplayPropertySet();
    public void set_DefaultDisplayPropertySet(String[] value);
    public String[] get_DefaultKeyPropertySet();
    public void set_DefaultKeyPropertySet(String[] value);
    public String[] get_PropertySerializationSet();
    public void set_PropertySerializationSet(String[] value);
    public string get_TypeName();
    public void set_TypeName(string value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public TypeData[] get_TypeData();
    public void set_TypeData(TypeData[] value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    private void ProcessStrongTypeData();
    private void ProcessDynamicType();
    private void GetMembers(Dictionary`2<string, TypeMemberData> members);
    private static T GetParameterType(object sourceValue);
    private void EnsureMemberNameHasBeenSpecified();
    private void EnsureValue1HasBeenSpecified();
    private void EnsureValue1NotNullOrEmpty();
    private void EnsureValue2HasNotBeenSpecified();
    private void EnsureValue1AndValue2AreNotBothNull();
    private bool EnsureTypeDataIsNotEmpty(TypeData typeData);
    private NotePropertyData GetNoteProperty();
    private AliasPropertyData GetAliasProperty();
    private ScriptPropertyData GetScriptProperty();
    private CodePropertyData GetCodeProperty();
    private ScriptMethodData GetScriptMethod();
    private CodeMethodData GetCodeMethod();
    private static ErrorRecord NewError(string errorId, string template, object targetObject, Object[] args);
    private void ProcessTypeFiles();
}
internal class Microsoft.PowerShell.Commands.Utility.JoinItemCompleter : object {
    public string NewLineText { get; }
    public sealed virtual IEnumerable`1<CompletionResult> CompleteArgument(string commandName, string parameterName, string wordToComplete, CommandAst commandAst, IDictionary fakeBoundParameters);
    private static IEnumerable`1<CompletionResult> CompleteFormatString(string wordToComplete);
    private IEnumerable`1<CompletionResult> CompleteSeparator(string wordToComplete);
    public string get_NewLineText();
    [CompilerGeneratedAttribute]
internal static void <CompleteFormatString>g__AddMatching|1_0(string completionText, <>c__DisplayClass1_0& );
    [CompilerGeneratedAttribute]
internal static void <CompleteSeparator>g__AddMatching|2_0(string completionText, string listText, string toolTip, <>c__DisplayClass2_0& );
}
[CmdletAttribute("Join", "String")]
[OutputTypeAttribute("System.String")]
public class Microsoft.PowerShell.Commands.Utility.JoinStringCommand : PSCmdlet {
    private static int DefaultOutputStringCapacity;
    private StringBuilder _outputBuilder;
    private CultureInfo _cultureInfo;
    private string _separator;
    private char _quoteChar;
    private bool _firstInputObject;
    [CompilerGeneratedAttribute]
private PSPropertyExpression <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <SingleQuote>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <DoubleQuote>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <UseCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private PSObject[] <InputObject>k__BackingField;
    [ParameterAttribute]
[ArgumentCompleterAttribute("System.Management.Automation.PropertyNameCompleter")]
public PSPropertyExpression Property { get; public set; }
    [ParameterAttribute]
[ArgumentCompleterAttribute("Microsoft.PowerShell.Commands.Utility.JoinItemCompleter")]
[AllowEmptyStringAttribute]
public string Separator { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string OutputPrefix { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string OutputSuffix { get; public set; }
    [ParameterAttribute]
public SwitchParameter SingleQuote { get; public set; }
    [ParameterAttribute]
public SwitchParameter DoubleQuote { get; public set; }
    [ParameterAttribute]
[ArgumentCompleterAttribute("Microsoft.PowerShell.Commands.Utility.JoinItemCompleter")]
public string FormatString { get; public set; }
    [ParameterAttribute]
public SwitchParameter UseCulture { get; public set; }
    [ParameterAttribute]
public PSObject[] InputObject { get; public set; }
    [CompilerGeneratedAttribute]
public PSPropertyExpression get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(PSPropertyExpression value);
    public string get_Separator();
    public void set_Separator(string value);
    [CompilerGeneratedAttribute]
public string get_OutputPrefix();
    [CompilerGeneratedAttribute]
public void set_OutputPrefix(string value);
    [CompilerGeneratedAttribute]
public string get_OutputSuffix();
    [CompilerGeneratedAttribute]
public void set_OutputSuffix(string value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_SingleQuote();
    [CompilerGeneratedAttribute]
public void set_SingleQuote(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_DoubleQuote();
    [CompilerGeneratedAttribute]
public void set_DoubleQuote(SwitchParameter value);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public void set_FormatString(string value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_UseCulture();
    [CompilerGeneratedAttribute]
public void set_UseCulture(SwitchParameter value);
    [CompilerGeneratedAttribute]
public PSObject[] get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSObject[] value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
[ObsoleteAttribute("This class is obsolete", "True")]
public static class Microsoft.PowerShell.Commands.UtilityResources : object {
    public static string PathDoesNotExist { get; }
    public static string FileReadError { get; }
    public static string FormatHexPathPrefix { get; }
    public static string AlgorithmTypeNotSupported { get; }
    public static string CouldNotParseAsPowerShellDataFile { get; }
    public static string get_PathDoesNotExist();
    public static string get_FileReadError();
    public static string get_FormatHexPathPrefix();
    public static string get_AlgorithmTypeNotSupported();
    public static string get_CouldNotParseAsPowerShellDataFile();
}
public class Microsoft.PowerShell.Commands.ValidateCultureNamesGenerator : object {
    private sealed virtual override String[] System.Management.Automation.IValidateSetValuesGenerator.GetValidValues();
}
public class Microsoft.PowerShell.Commands.ValidateMatchStringCultureNamesGenerator : object {
    private sealed virtual override String[] System.Management.Automation.IValidateSetValuesGenerator.GetValidValues();
}
public abstract class Microsoft.PowerShell.Commands.VariableCommandBase : PSCmdlet {
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    private String[] _include;
    private String[] _exclude;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Scope { get; public set; }
    protected String[] IncludeFilters { get; protected set; }
    protected String[] ExcludeFilters { get; protected set; }
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    protected String[] get_IncludeFilters();
    protected void set_IncludeFilters(String[] value);
    protected String[] get_ExcludeFilters();
    protected void set_ExcludeFilters(String[] value);
    internal List`1<PSVariable> GetMatchingVariables(string name, string lookupScope, Boolean& wasFiltered, bool quiet);
}
[CmdletAttribute("Wait", "Debugger")]
public class Microsoft.PowerShell.Commands.WaitDebuggerCommand : PSCmdlet {
    protected virtual void EndProcessing();
}
[CmdletAttribute("Wait", "Event")]
[OutputTypeAttribute("System.Management.Automation.PSEventArgs")]
public class Microsoft.PowerShell.Commands.WaitEventCommand : PSCmdlet {
    private string _sourceIdentifier;
    private int _timeoutInSeconds;
    private AutoResetEvent _eventArrived;
    private PSEventArgs _receivedEvent;
    private object _receivedEventLock;
    private WildcardPattern _matchPattern;
    [ParameterAttribute]
public string SourceIdentifier { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Timeout { get; public set; }
    public string get_SourceIdentifier();
    public void set_SourceIdentifier(string value);
    public int get_Timeout();
    public void set_Timeout(int value);
    protected virtual void ProcessRecord();
    protected virtual void StopProcessing();
    private void ReceivedEvents_PSEventReceived(object sender, PSEventArgs e);
    private void ScanEventQueue();
    private void NotifyEvent(PSEventArgs e);
}
public enum Microsoft.PowerShell.Commands.WebAuthenticationType : Enum {
    public int value__;
    public static WebAuthenticationType None;
    public static WebAuthenticationType Basic;
    public static WebAuthenticationType Bearer;
    public static WebAuthenticationType OAuth;
}
public class Microsoft.PowerShell.Commands.WebCmdletElementCollection : ReadOnlyCollection`1<PSObject> {
    internal WebCmdletElementCollection(IList`1<PSObject> list);
    public PSObject Find(string nameOrId);
    public PSObject FindById(string id);
    public PSObject FindByName(string name);
    private PSObject Find(string nameOrId, bool findById);
}
internal class Microsoft.PowerShell.Commands.WebProxy : object {
    private ICredentials _credentials;
    private Uri _proxyAddress;
    [CompilerGeneratedAttribute]
private bool <BypassProxyOnLocal>k__BackingField;
    public ICredentials Credentials { get; public set; }
    internal bool BypassProxyOnLocal { get; internal set; }
    internal bool UseDefaultCredentials { get; internal set; }
    internal WebProxy(Uri address);
    public sealed virtual ICredentials get_Credentials();
    public sealed virtual void set_Credentials(ICredentials value);
    [CompilerGeneratedAttribute]
internal bool get_BypassProxyOnLocal();
    [CompilerGeneratedAttribute]
internal void set_BypassProxyOnLocal(bool value);
    internal bool get_UseDefaultCredentials();
    internal void set_UseDefaultCredentials(bool value);
    public sealed virtual Uri GetProxy(Uri destination);
    public sealed virtual bool IsBypassed(Uri host);
}
public enum Microsoft.PowerShell.Commands.WebRequestMethod : Enum {
    public int value__;
    public static WebRequestMethod Default;
    public static WebRequestMethod Get;
    public static WebRequestMethod Head;
    public static WebRequestMethod Post;
    public static WebRequestMethod Put;
    public static WebRequestMethod Delete;
    public static WebRequestMethod Trace;
    public static WebRequestMethod Options;
    public static WebRequestMethod Merge;
    public static WebRequestMethod Patch;
}
public abstract class Microsoft.PowerShell.Commands.WebRequestPSCmdlet : PSCmdlet {
    [CompilerGeneratedAttribute]
private SwitchParameter <UseBasicParsing>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <HttpVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private WebRequestSession <WebSession>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <AllowUnencryptedAuthentication>k__BackingField;
    [CompilerGeneratedAttribute]
private WebAuthenticationType <Authentication>k__BackingField;
    [CompilerGeneratedAttribute]
private PSCredential <Credential>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <UseDefaultCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertificateThumbprint>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <SkipCertificateCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private WebSslProtocol <SslProtocol>k__BackingField;
    [CompilerGeneratedAttribute]
private SecureString <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <DisableKeepAlive>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TimeoutSec>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary <Headers>k__BackingField;
    private int _maximumRedirection;
    [CompilerGeneratedAttribute]
private int <MaximumRetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RetryIntervalSec>k__BackingField;
    private WebRequestMethod _method;
    private string _customMethod;
    [CompilerGeneratedAttribute]
private SwitchParameter <NoProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private PSCredential <ProxyCredential>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <ProxyUseDefaultCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary <Form>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TransferEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InFile>k__BackingField;
    private string _originalFilePath;
    [CompilerGeneratedAttribute]
private string <OutFile>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <PassThru>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <Resume>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <SkipHttpErrorCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <PreserveAuthorizationOnRedirect>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <SkipHeaderValidation>k__BackingField;
    internal CancellationTokenSource _cancelToken;
    internal bool _parseRelLink;
    internal bool _followRelLink;
    internal Dictionary`2<string, string> _relationLink;
    internal int _maximumFollowRelLink;
    private bool _resumeSuccess;
    private long _resumeFileSize;
    [ParameterAttribute]
public SwitchParameter UseBasicParsing { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Uri Uri { get; public set; }
    [ParameterAttribute]
[ArgumentToVersionTransformationAttribute]
[HttpVersionCompletionsAttribute]
public Version HttpVersion { get; public set; }
    [ParameterAttribute]
public WebRequestSession WebSession { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string SessionVariable { get; public set; }
    [ParameterAttribute]
public SwitchParameter AllowUnencryptedAuthentication { get; public set; }
    [ParameterAttribute]
public WebAuthenticationType Authentication { get; public set; }
    [ParameterAttribute]
[CredentialAttribute]
public PSCredential Credential { get; public set; }
    [ParameterAttribute]
public SwitchParameter UseDefaultCredentials { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string CertificateThumbprint { get; public set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
public X509Certificate Certificate { get; public set; }
    [ParameterAttribute]
public SwitchParameter SkipCertificateCheck { get; public set; }
    [ParameterAttribute]
public WebSslProtocol SslProtocol { get; public set; }
    [ParameterAttribute]
public SecureString Token { get; public set; }
    [ParameterAttribute]
public string UserAgent { get; public set; }
    [ParameterAttribute]
public SwitchParameter DisableKeepAlive { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int TimeoutSec { get; public set; }
    [ParameterAttribute]
public IDictionary Headers { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int MaximumRedirection { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int MaximumRetryCount { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int RetryIntervalSec { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public WebRequestMethod Method { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public string CustomMethod { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public SwitchParameter NoProxy { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public Uri Proxy { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[CredentialAttribute]
public PSCredential ProxyCredential { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public SwitchParameter ProxyUseDefaultCredentials { get; public set; }
    [ParameterAttribute]
public object Body { get; public set; }
    [ParameterAttribute]
public IDictionary Form { get; public set; }
    [ParameterAttribute]
public string ContentType { get; public set; }
    [ParameterAttribute]
[ValidateSetAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string TransferEncoding { get; public set; }
    [ParameterAttribute]
public string InFile { get; public set; }
    [ParameterAttribute]
public string OutFile { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
public SwitchParameter Resume { get; public set; }
    [ParameterAttribute]
public SwitchParameter SkipHttpErrorCheck { get; public set; }
    internal string QualifiedOutFile { get; }
    internal bool ShouldSaveToOutFile { get; }
    internal bool ShouldWriteToPipeline { get; }
    internal bool ShouldCheckHttpStatus { get; }
    internal bool ShouldResume { get; }
    [ParameterAttribute]
public SwitchParameter PreserveAuthorizationOnRedirect { get; public set; }
    [ParameterAttribute]
public SwitchParameter SkipHeaderValidation { get; public set; }
    [CompilerGeneratedAttribute]
public virtual SwitchParameter get_UseBasicParsing();
    [CompilerGeneratedAttribute]
public virtual void set_UseBasicParsing(SwitchParameter value);
    [CompilerGeneratedAttribute]
public virtual Uri get_Uri();
    [CompilerGeneratedAttribute]
public virtual void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public virtual Version get_HttpVersion();
    [CompilerGeneratedAttribute]
public virtual void set_HttpVersion(Version value);
    [CompilerGeneratedAttribute]
public virtual WebRequestSession get_WebSession();
    [CompilerGeneratedAttribute]
public virtual void set_WebSession(WebRequestSession value);
    [CompilerGeneratedAttribute]
public virtual string get_SessionVariable();
    [CompilerGeneratedAttribute]
public virtual void set_SessionVariable(string value);
    [CompilerGeneratedAttribute]
public virtual SwitchParameter get_AllowUnencryptedAuthentication();
    [CompilerGeneratedAttribute]
public virtual void set_AllowUnencryptedAuthentication(SwitchParameter value);
    [CompilerGeneratedAttribute]
public virtual WebAuthenticationType get_Authentication();
    [CompilerGeneratedAttribute]
public virtual void set_Authentication(WebAuthenticationType value);
    [CompilerGeneratedAttribute]
public virtual PSCredential get_Credential();
    [CompilerGeneratedAttribute]
public virtual void set_Credential(PSCredential value);
    [CompilerGeneratedAttribute]
public virtual SwitchParameter get_UseDefaultCredentials();
    [CompilerGeneratedAttribute]
public virtual void set_UseDefaultCredentials(SwitchParameter value);
    [CompilerGeneratedAttribute]
public virtual string get_CertificateThumbprint();
    [CompilerGeneratedAttribute]
public virtual void set_CertificateThumbprint(string value);
    [CompilerGeneratedAttribute]
public virtual X509Certificate get_Certificate();
    [CompilerGeneratedAttribute]
public virtual void set_Certificate(X509Certificate value);
    [CompilerGeneratedAttribute]
public virtual SwitchParameter get_SkipCertificateCheck();
    [CompilerGeneratedAttribute]
public virtual void set_SkipCertificateCheck(SwitchParameter value);
    [CompilerGeneratedAttribute]
public virtual WebSslProtocol get_SslProtocol();
    [CompilerGeneratedAttribute]
public virtual void set_SslProtocol(WebSslProtocol value);
    [CompilerGeneratedAttribute]
public virtual SecureString get_Token();
    [CompilerGeneratedAttribute]
public virtual void set_Token(SecureString value);
    [CompilerGeneratedAttribute]
public virtual string get_UserAgent();
    [CompilerGeneratedAttribute]
public virtual void set_UserAgent(string value);
    [CompilerGeneratedAttribute]
public virtual SwitchParameter get_DisableKeepAlive();
    [CompilerGeneratedAttribute]
public virtual void set_DisableKeepAlive(SwitchParameter value);
    [CompilerGeneratedAttribute]
public virtual int get_TimeoutSec();
    [CompilerGeneratedAttribute]
public virtual void set_TimeoutSec(int value);
    [CompilerGeneratedAttribute]
public virtual IDictionary get_Headers();
    [CompilerGeneratedAttribute]
public virtual void set_Headers(IDictionary value);
    public virtual int get_MaximumRedirection();
    public virtual void set_MaximumRedirection(int value);
    [CompilerGeneratedAttribute]
public virtual int get_MaximumRetryCount();
    [CompilerGeneratedAttribute]
public virtual void set_MaximumRetryCount(int value);
    [CompilerGeneratedAttribute]
public virtual int get_RetryIntervalSec();
    [CompilerGeneratedAttribute]
public virtual void set_RetryIntervalSec(int value);
    public virtual WebRequestMethod get_Method();
    public virtual void set_Method(WebRequestMethod value);
    public virtual string get_CustomMethod();
    public virtual void set_CustomMethod(string value);
    [CompilerGeneratedAttribute]
public virtual SwitchParameter get_NoProxy();
    [CompilerGeneratedAttribute]
public virtual void set_NoProxy(SwitchParameter value);
    [CompilerGeneratedAttribute]
public virtual Uri get_Proxy();
    [CompilerGeneratedAttribute]
public virtual void set_Proxy(Uri value);
    [CompilerGeneratedAttribute]
public virtual PSCredential get_ProxyCredential();
    [CompilerGeneratedAttribute]
public virtual void set_ProxyCredential(PSCredential value);
    [CompilerGeneratedAttribute]
public virtual SwitchParameter get_ProxyUseDefaultCredentials();
    [CompilerGeneratedAttribute]
public virtual void set_ProxyUseDefaultCredentials(SwitchParameter value);
    [CompilerGeneratedAttribute]
public virtual object get_Body();
    [CompilerGeneratedAttribute]
public virtual void set_Body(object value);
    [CompilerGeneratedAttribute]
public virtual IDictionary get_Form();
    [CompilerGeneratedAttribute]
public virtual void set_Form(IDictionary value);
    [CompilerGeneratedAttribute]
public virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public virtual void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TransferEncoding();
    [CompilerGeneratedAttribute]
public virtual void set_TransferEncoding(string value);
    [CompilerGeneratedAttribute]
public virtual string get_InFile();
    [CompilerGeneratedAttribute]
public virtual void set_InFile(string value);
    [CompilerGeneratedAttribute]
public virtual string get_OutFile();
    [CompilerGeneratedAttribute]
public virtual void set_OutFile(string value);
    [CompilerGeneratedAttribute]
public virtual SwitchParameter get_PassThru();
    [CompilerGeneratedAttribute]
public virtual void set_PassThru(SwitchParameter value);
    [CompilerGeneratedAttribute]
public virtual SwitchParameter get_Resume();
    [CompilerGeneratedAttribute]
public virtual void set_Resume(SwitchParameter value);
    [CompilerGeneratedAttribute]
public virtual SwitchParameter get_SkipHttpErrorCheck();
    [CompilerGeneratedAttribute]
public virtual void set_SkipHttpErrorCheck(SwitchParameter value);
    internal virtual void ValidateParameters();
    internal virtual void PrepareSession();
    internal string get_QualifiedOutFile();
    internal bool get_ShouldSaveToOutFile();
    internal bool get_ShouldWriteToPipeline();
    internal bool get_ShouldCheckHttpStatus();
    internal bool get_ShouldResume();
    private Uri PrepareUri(Uri uri);
    private static Uri CheckProtocol(Uri uri);
    private string QualifyFilePath(string path);
    private static string FormatDictionary(IDictionary content);
    private ErrorRecord GetValidationError(string msg, string errorId);
    private ErrorRecord GetValidationError(string msg, string errorId, Object[] args);
    private bool IsStandardMethodSet();
    private bool IsCustomMethodSet();
    private string GetBasicAuthorizationHeader();
    private string GetBearerAuthorizationHeader();
    private void ProcessAuthentication();
    [CompilerGeneratedAttribute]
public virtual SwitchParameter get_PreserveAuthorizationOnRedirect();
    [CompilerGeneratedAttribute]
public virtual void set_PreserveAuthorizationOnRedirect(SwitchParameter value);
    [CompilerGeneratedAttribute]
public virtual SwitchParameter get_SkipHeaderValidation();
    [CompilerGeneratedAttribute]
public virtual void set_SkipHeaderValidation(SwitchParameter value);
    internal abstract virtual void ProcessResponse(HttpResponseMessage response);
    private HttpMethod GetHttpMethod(WebRequestMethod method);
    internal virtual HttpClient GetHttpClient(bool handleRedirect);
    internal virtual HttpRequestMessage GetRequest(Uri uri);
    internal virtual void FillRequestStream(HttpRequestMessage request);
    private static bool IsRedirectCode(HttpStatusCode code);
    private static bool IsRedirectToGet(HttpStatusCode code);
    private bool ShouldRetry(HttpStatusCode code);
    internal virtual HttpResponseMessage GetResponse(HttpClient client, HttpRequestMessage request, bool keepAuthorization);
    internal virtual void UpdateSession(HttpResponseMessage response);
    protected virtual void ProcessRecord();
    protected virtual void StopProcessing();
    internal long SetRequestContent(HttpRequestMessage request, Byte[] content);
    internal long SetRequestContent(HttpRequestMessage request, string content);
    internal long SetRequestContent(HttpRequestMessage request, XmlNode xmlNode);
    internal long SetRequestContent(HttpRequestMessage request, Stream contentStream);
    internal long SetRequestContent(HttpRequestMessage request, MultipartFormDataContent multipartContent);
    internal long SetRequestContent(HttpRequestMessage request, IDictionary content);
    internal void ParseLinkHeader(HttpResponseMessage response, Uri requestUri);
    private void AddMultipartContent(object fieldName, object fieldValue, MultipartFormDataContent formData, bool enumerate);
    private static StringContent GetMultipartStringContent(object fieldName, object fieldValue);
    private static StreamContent GetMultipartStreamContent(object fieldName, Stream stream);
    private static StreamContent GetMultipartFileContent(object fieldName, FileInfo file);
}
public class Microsoft.PowerShell.Commands.WebRequestSession : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <ContentHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private CookieContainer <Cookies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private ICredentials <Credentials>k__BackingField;
    [CompilerGeneratedAttribute]
private X509CertificateCollection <Certificates>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebProxy <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumRedirection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumRetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RetryIntervalInSeconds>k__BackingField;
    public Dictionary`2<string, string> Headers { get; public set; }
    internal Dictionary`2<string, string> ContentHeaders { get; internal set; }
    public CookieContainer Cookies { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    public ICredentials Credentials { get; public set; }
    public X509CertificateCollection Certificates { get; public set; }
    public string UserAgent { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public int MaximumRedirection { get; public set; }
    public int MaximumRetryCount { get; public set; }
    public int RetryIntervalInSeconds { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_ContentHeaders();
    [CompilerGeneratedAttribute]
internal void set_ContentHeaders(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public CookieContainer get_Cookies();
    [CompilerGeneratedAttribute]
public void set_Cookies(CookieContainer value);
    [CompilerGeneratedAttribute]
public bool get_UseDefaultCredentials();
    [CompilerGeneratedAttribute]
public void set_UseDefaultCredentials(bool value);
    [CompilerGeneratedAttribute]
public ICredentials get_Credentials();
    [CompilerGeneratedAttribute]
public void set_Credentials(ICredentials value);
    [CompilerGeneratedAttribute]
public X509CertificateCollection get_Certificates();
    [CompilerGeneratedAttribute]
public void set_Certificates(X509CertificateCollection value);
    [CompilerGeneratedAttribute]
public string get_UserAgent();
    [CompilerGeneratedAttribute]
public void set_UserAgent(string value);
    [CompilerGeneratedAttribute]
public IWebProxy get_Proxy();
    [CompilerGeneratedAttribute]
public void set_Proxy(IWebProxy value);
    [CompilerGeneratedAttribute]
public int get_MaximumRedirection();
    [CompilerGeneratedAttribute]
public void set_MaximumRedirection(int value);
    [CompilerGeneratedAttribute]
public int get_MaximumRetryCount();
    [CompilerGeneratedAttribute]
public void set_MaximumRetryCount(int value);
    [CompilerGeneratedAttribute]
public int get_RetryIntervalInSeconds();
    [CompilerGeneratedAttribute]
public void set_RetryIntervalInSeconds(int value);
    internal void AddCertificate(X509Certificate certificate);
}
internal class Microsoft.PowerShell.Commands.WebResponseContentMemoryStream : MemoryStream {
    private Stream _originalStreamToProxy;
    private bool _isInitialized;
    private Cmdlet _ownerCmdlet;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    internal WebResponseContentMemoryStream(Stream stream, int initialCapacity, Cmdlet cmdlet);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual void SetLength(long value);
    public virtual Byte[] ToArray();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
    public virtual void WriteTo(Stream stream);
    protected virtual void Dispose(bool disposing);
    private void Initialize();
}
internal static class Microsoft.PowerShell.Commands.WebResponseHelper : object {
    internal static string GetCharacterSet(HttpResponseMessage response);
    internal static Dictionary`2<string, IEnumerable`1<string>> GetHeadersDictionary(HttpResponseMessage response);
    internal static string GetProtocol(HttpResponseMessage response);
    internal static int GetStatusCode(HttpResponseMessage response);
    internal static string GetStatusDescription(HttpResponseMessage response);
    internal static bool IsText(HttpResponseMessage response);
}
public class Microsoft.PowerShell.Commands.WebResponseObject : object {
    [CompilerGeneratedAttribute]
private Byte[] <Content>k__BackingField;
    private MemoryStream _rawContentStream;
    [CompilerGeneratedAttribute]
private string <RawContent>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpResponseMessage <BaseResponse>k__BackingField;
    private Dictionary`2<string, IEnumerable`1<string>> _headers;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <RelationLink>k__BackingField;
    public Byte[] Content { get; protected set; }
    public int StatusCode { get; }
    public string StatusDescription { get; }
    public MemoryStream RawContentStream { get; }
    public long RawContentLength { get; }
    public string RawContent { get; protected set; }
    public HttpResponseMessage BaseResponse { get; public set; }
    public Dictionary`2<string, IEnumerable`1<string>> Headers { get; }
    public Dictionary`2<string, string> RelationLink { get; internal set; }
    public WebResponseObject(HttpResponseMessage response);
    public WebResponseObject(HttpResponseMessage response, Stream contentStream);
    [CompilerGeneratedAttribute]
public Byte[] get_Content();
    [CompilerGeneratedAttribute]
protected void set_Content(Byte[] value);
    public int get_StatusCode();
    public string get_StatusDescription();
    public MemoryStream get_RawContentStream();
    public long get_RawContentLength();
    [CompilerGeneratedAttribute]
public string get_RawContent();
    [CompilerGeneratedAttribute]
protected void set_RawContent(string value);
    private void InitializeContent();
    private static bool IsPrintable(char c);
    public sealed virtual string ToString();
    [CompilerGeneratedAttribute]
public HttpResponseMessage get_BaseResponse();
    [CompilerGeneratedAttribute]
public void set_BaseResponse(HttpResponseMessage value);
    public Dictionary`2<string, IEnumerable`1<string>> get_Headers();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_RelationLink();
    [CompilerGeneratedAttribute]
internal void set_RelationLink(Dictionary`2<string, string> value);
    private void InitializeRawContent(HttpResponseMessage baseResponse);
    private void SetResponse(HttpResponseMessage response, Stream contentStream);
}
internal static class Microsoft.PowerShell.Commands.WebResponseObjectFactory : object {
    internal static WebResponseObject GetResponseObject(HttpResponseMessage response, Stream responseStream, ExecutionContext executionContext);
}
[FlagsAttribute]
public enum Microsoft.PowerShell.Commands.WebSslProtocol : Enum {
    public int value__;
    public static WebSslProtocol Default;
    public static WebSslProtocol Tls;
    public static WebSslProtocol Tls11;
    public static WebSslProtocol Tls12;
    public static WebSslProtocol Tls13;
}
public class Microsoft.PowerShell.Commands.WriteAliasCommandBase : PSCmdlet {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private ScopedItemOptions <Option>k__BackingField;
    private bool _passThru;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    private bool _force;
    [ParameterAttribute]
public string Name { get; public set; }
    [ParameterAttribute]
public string Value { get; public set; }
    [ParameterAttribute]
public string Description { get; public set; }
    [ParameterAttribute]
public ScopedItemOptions Option { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
public string Scope { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public ScopedItemOptions get_Option();
    [CompilerGeneratedAttribute]
public void set_Option(ScopedItemOptions value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
}
[CmdletAttribute("Write", "Debug")]
public class Microsoft.PowerShell.Commands.WriteDebugCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [ParameterAttribute]
[AllowEmptyStringAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Write", "Error")]
public class Microsoft.PowerShell.Commands.WriteErrorCommand : WriteOrThrowErrorCommand {
}
public class Microsoft.PowerShell.Commands.WriteErrorException : SystemException {
    public WriteErrorException(string message);
    public WriteErrorException(string message, Exception innerException);
    protected WriteErrorException(SerializationInfo info, StreamingContext context);
}
[CmdletAttribute("Write", "Host")]
public class Microsoft.PowerShell.Commands.WriteHostCommand : ConsoleColorCmdlet {
    [CompilerGeneratedAttribute]
private object <Object>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Separator>k__BackingField;
    private bool _notAppendNewline;
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public object Object { get; public set; }
    [ParameterAttribute]
public SwitchParameter NoNewline { get; public set; }
    [ParameterAttribute]
public object Separator { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Object();
    [CompilerGeneratedAttribute]
public void set_Object(object value);
    public SwitchParameter get_NoNewline();
    public void set_NoNewline(SwitchParameter value);
    [CompilerGeneratedAttribute]
public object get_Separator();
    [CompilerGeneratedAttribute]
public void set_Separator(object value);
    private string ProcessObject(object o);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Write", "Information")]
public class Microsoft.PowerShell.Commands.WriteInformationCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private object <MessageData>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tags>k__BackingField;
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[AllowNullAttribute]
public object MessageData { get; public set; }
    [ParameterAttribute]
public String[] Tags { get; public set; }
    [CompilerGeneratedAttribute]
public object get_MessageData();
    [CompilerGeneratedAttribute]
public void set_MessageData(object value);
    [CompilerGeneratedAttribute]
public String[] get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(String[] value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.WriteOrThrowErrorCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorRecord <ErrorRecord>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorCategory <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorId>k__BackingField;
    [CompilerGeneratedAttribute]
private object <TargetObject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RecommendedAction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CategoryActivity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CategoryReason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CategoryTargetName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CategoryTargetType>k__BackingField;
    [ParameterAttribute]
public Exception Exception { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AllowNullAttribute]
[AllowEmptyStringAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Message { get; public set; }
    [ParameterAttribute]
public ErrorRecord ErrorRecord { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public ErrorCategory Category { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public string ErrorId { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public object TargetObject { get; public set; }
    [ParameterAttribute]
public string RecommendedAction { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string CategoryActivity { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string CategoryReason { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string CategoryTargetName { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string CategoryTargetType { get; public set; }
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public ErrorRecord get_ErrorRecord();
    [CompilerGeneratedAttribute]
public void set_ErrorRecord(ErrorRecord value);
    [CompilerGeneratedAttribute]
public ErrorCategory get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(ErrorCategory value);
    [CompilerGeneratedAttribute]
public string get_ErrorId();
    [CompilerGeneratedAttribute]
public void set_ErrorId(string value);
    [CompilerGeneratedAttribute]
public object get_TargetObject();
    [CompilerGeneratedAttribute]
public void set_TargetObject(object value);
    [CompilerGeneratedAttribute]
public string get_RecommendedAction();
    [CompilerGeneratedAttribute]
public void set_RecommendedAction(string value);
    [CompilerGeneratedAttribute]
public string get_CategoryActivity();
    [CompilerGeneratedAttribute]
public void set_CategoryActivity(string value);
    [CompilerGeneratedAttribute]
public string get_CategoryReason();
    [CompilerGeneratedAttribute]
public void set_CategoryReason(string value);
    [CompilerGeneratedAttribute]
public string get_CategoryTargetName();
    [CompilerGeneratedAttribute]
public void set_CategoryTargetName(string value);
    [CompilerGeneratedAttribute]
public string get_CategoryTargetType();
    [CompilerGeneratedAttribute]
public void set_CategoryTargetType(string value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Write", "Output")]
public class Microsoft.PowerShell.Commands.WriteOutputCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private PSObject <InputObject>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <NoEnumerate>k__BackingField;
    [ParameterAttribute]
[AllowNullAttribute]
[AllowEmptyCollectionAttribute]
public PSObject InputObject { get; public set; }
    [ParameterAttribute]
public SwitchParameter NoEnumerate { get; public set; }
    [CompilerGeneratedAttribute]
public PSObject get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSObject value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_NoEnumerate();
    [CompilerGeneratedAttribute]
public void set_NoEnumerate(SwitchParameter value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Write", "Progress")]
public class Microsoft.PowerShell.Commands.WriteProgressCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private string <Activity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PercentComplete>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SecondsRemaining>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentOperation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SourceId>k__BackingField;
    private bool _completed;
    private static string HelpMessageBaseName;
    [ParameterAttribute]
public string Activity { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Status { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Id { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int PercentComplete { get; public set; }
    [ParameterAttribute]
public int SecondsRemaining { get; public set; }
    [ParameterAttribute]
public string CurrentOperation { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int ParentId { get; public set; }
    [ParameterAttribute]
public SwitchParameter Completed { get; public set; }
    [ParameterAttribute]
public int SourceId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Activity();
    [CompilerGeneratedAttribute]
public void set_Activity(string value);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(string value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_PercentComplete();
    [CompilerGeneratedAttribute]
public void set_PercentComplete(int value);
    [CompilerGeneratedAttribute]
public int get_SecondsRemaining();
    [CompilerGeneratedAttribute]
public void set_SecondsRemaining(int value);
    [CompilerGeneratedAttribute]
public string get_CurrentOperation();
    [CompilerGeneratedAttribute]
public void set_CurrentOperation(string value);
    [CompilerGeneratedAttribute]
public int get_ParentId();
    [CompilerGeneratedAttribute]
public void set_ParentId(int value);
    public SwitchParameter get_Completed();
    public void set_Completed(SwitchParameter value);
    [CompilerGeneratedAttribute]
public int get_SourceId();
    [CompilerGeneratedAttribute]
public void set_SourceId(int value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Write", "Verbose")]
public class Microsoft.PowerShell.Commands.WriteVerboseCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [ParameterAttribute]
[AllowEmptyStringAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Write", "Warning")]
public class Microsoft.PowerShell.Commands.WriteWarningCommand : PSCmdlet {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [ParameterAttribute]
[AllowEmptyStringAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    protected virtual void ProcessRecord();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class NewObjectStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CannotFindAppropriateCtor { get; }
    internal static string TypeNotFound { get; }
    internal static string CannotLoadComObjectType { get; }
    internal static string ComInteropLoaded { get; }
    internal static string MemberNotFound { get; }
    internal static string InvalidValue { get; }
    internal static string CannotInstantiateWinRTType { get; }
    internal static string CannotInstantiateBoxedByRefLikeType { get; }
    internal static string CannotCreateTypeConstrainedLanguage { get; }
    internal static string CannotCreateTypeLanguageMode { get; }
    internal static string ApartmentNotSupported { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CannotFindAppropriateCtor();
    internal static string get_TypeNotFound();
    internal static string get_CannotLoadComObjectType();
    internal static string get_ComInteropLoaded();
    internal static string get_MemberNotFound();
    internal static string get_InvalidValue();
    internal static string get_CannotInstantiateWinRTType();
    internal static string get_CannotInstantiateBoxedByRefLikeType();
    internal static string get_CannotCreateTypeConstrainedLanguage();
    internal static string get_CannotCreateTypeLanguageMode();
    internal static string get_ApartmentNotSupported();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class OutPrinterDisplayStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DefaultPrintFontName { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DefaultPrintFontName();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class SelectObjectStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string RenamingMultipleResults { get; }
    internal static string PropertyNotFound { get; }
    internal static string MutlipleExpandProperties { get; }
    internal static string AlreadyExistingProperty { get; }
    internal static string EmptyScriptBlockAndNoName { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_RenamingMultipleResults();
    internal static string get_PropertyNotFound();
    internal static string get_MutlipleExpandProperties();
    internal static string get_AlreadyExistingProperty();
    internal static string get_EmptyScriptBlockAndNoName();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class SendMailMessageStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string HostNameValue { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_HostNameValue();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class SortObjectStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string PropertyNotFound { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_PropertyNotFound();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class StartSleepStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string MaximumDurationExceeded { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_MaximumDurationExceeded();
}
internal class System.Management.Automation.CustomInternalSerializer : object {
    private XmlWriter _writer;
    private bool _firstcall;
    private bool _notypeinformation;
    private bool _firstobjectcall;
    private bool _isStopping;
    internal CustomInternalSerializer(XmlWriter writer, bool notypeinformation, bool isfirstcallforObject);
    internal void Stop();
    private void CheckIfStopping();
    internal void WriteOneObject(object source, string property, int depth);
    private bool HandlePrimitiveKnownType(object source, string property);
    private bool HandlePrimitiveKnownTypePSObject(object source, string property, int depth);
    private bool HandleKnownContainerTypes(object source, string property, int depth);
    private static void GetKnownContainerTypeInfo(object source, ContainerType& ct, IDictionary& dictionary, IEnumerable& enumerable);
    private static bool DerivesFromGenericType(Type derived, Type baseType);
    private void WritePrimitiveTypePSObjectWithNotes(PSObject source, object primitive, TypeSerializationInfo pktInfo, string property, int depth);
    private void HandleComplexTypePSObject(PSObject source, string property, int depth);
    private void WriteStartOfPSObject(PSObject mshObject, string property, bool writeTNH);
    private static bool PSObjectHasNotes(PSObject source);
    private void WriteMemberInfoCollection(PSMemberInfoCollection`1<PSMemberInfo> me, int depth, bool writeEnclosingMemberSetElementTag);
    private void WritePSObjectProperties(PSObject source, int depth);
    private void SerializeProperties(PSMemberInfoInternalCollection`1<PSPropertyInfo> propertyCollection, string name, int depth);
    private void WriteEnumerable(IEnumerable enumerable, int depth);
    private void WriteDictionary(IDictionary dictionary, int depth);
    private void HandlePSObjectAsString(PSObject source, string property, int depth);
    private static string GetStringFromPSObject(PSObject source);
    private static bool SerializeAsString(PSObject source);
    private static int GetDepthOfSerialization(PSObject source, int depth);
    private void WriteNull(string property);
    private void WritePropertyWithNullValue(XmlWriter writer, PSPropertyInfo source, int depth);
    private void WriteObjectString(XmlWriter writer, string property, object source, TypeSerializationInfo entry);
    private void WriteOnePrimitiveKnownType(XmlWriter writer, string property, object source, TypeSerializationInfo entry);
    internal static void WriteStartElement(XmlWriter writer, string elementTag);
    internal static void WriteAttribute(XmlWriter writer, string name, string value);
}
internal class System.Management.Automation.CustomSerialization : object {
    private int _depth;
    private XmlWriter _writer;
    private bool _notypeinformation;
    private CustomInternalSerializer _serializer;
    [CompilerGeneratedAttribute]
private static int <MshDefaultSerializationDepth>k__BackingField;
    private bool _firstCall;
    public static int MshDefaultSerializationDepth { get; }
    internal CustomSerialization(XmlWriter writer, bool notypeinformation, int depth);
    internal CustomSerialization(XmlWriter writer, bool notypeinformation);
    private static CustomSerialization();
    [CompilerGeneratedAttribute]
public static int get_MshDefaultSerializationDepth();
    internal void Serialize(object source);
    internal void SerializeAsStream(object source);
    private void Start();
    internal void Done();
    internal void DoneAsStream();
    internal void Stop();
}
internal static class System.Management.Automation.CustomSerializationStrings : object {
    internal static string RootElementTag;
    internal static string PSObjectTag;
    internal static string Properties;
    internal static string NameAttribute;
    internal static string TypeAttribute;
    internal static string DictionaryKey;
    internal static string DictionaryValue;
}
[AttributeUsageAttribute("384")]
public class System.Management.Automation.Runspaces.RunspaceAttribute : ArgumentTransformationAttribute {
    public bool TransformNullOptionalParameters { get; }
    public virtual object Transform(EngineIntrinsics engineIntrinsics, object inputData);
    public virtual bool get_TransformNullOptionalParameters();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class TestJsonCmdletStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InvalidJsonSchema { get; }
    internal static string InvalidJson { get; }
    internal static string InvalidJsonAgainstSchema { get; }
    internal static string JsonSchemaFileOpenFailure { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InvalidJsonSchema();
    internal static string get_InvalidJson();
    internal static string get_InvalidJsonAgainstSchema();
    internal static string get_JsonSchemaFileOpenFailure();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class TraceCommandStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string FileListenerNotFound { get; }
    internal static string TraceFileOnly { get; }
    internal static string TraceSingleFileOnly { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_FileListenerNotFound();
    internal static string get_TraceFileOnly();
    internal static string get_TraceSingleFileOnly();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class UnblockFileStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string LinuxNotSupported { get; }
    internal static string UnblockError { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_LinuxNotSupported();
    internal static string get_UnblockError();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class UpdateDataStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string UpdateData_WrongProviderError { get; }
    internal static string UpdateData_WrongExtension { get; }
    internal static string UpdateTypeDataAction { get; }
    internal static string UpdateFormatDataAction { get; }
    internal static string UpdateTarget { get; }
    internal static string CannotUpdateMemberType { get; }
    internal static string SerializationDepthNegative { get; }
    internal static string ShouldBeSpecified { get; }
    internal static string ShouldNotBeNull { get; }
    internal static string ShouldNotBeSpecified { get; }
    internal static string TypeDataEmpty { get; }
    internal static string TargetTypeNameEmpty { get; }
    internal static string Value1AndValue2AreNotBothNull { get; }
    internal static string WrongMemberCount { get; }
    internal static string MemberTypeIsMissing { get; }
    internal static string RemoveTypeDataAction { get; }
    internal static string RemoveTypeDataTarget { get; }
    internal static string UpdateTypeDataTarget { get; }
    internal static string RemoveTypeFileAction { get; }
    internal static string TypeFileNotExistsInCurrentSession { get; }
    internal static string FormatUpdatesDisabled { get; }
    internal static string CannotUpdateFormatWithFormatTable { get; }
    internal static string CannotUpdateTypeWithTypeTable { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_UpdateData_WrongProviderError();
    internal static string get_UpdateData_WrongExtension();
    internal static string get_UpdateTypeDataAction();
    internal static string get_UpdateFormatDataAction();
    internal static string get_UpdateTarget();
    internal static string get_CannotUpdateMemberType();
    internal static string get_SerializationDepthNegative();
    internal static string get_ShouldBeSpecified();
    internal static string get_ShouldNotBeNull();
    internal static string get_ShouldNotBeSpecified();
    internal static string get_TypeDataEmpty();
    internal static string get_TargetTypeNameEmpty();
    internal static string get_Value1AndValue2AreNotBothNull();
    internal static string get_WrongMemberCount();
    internal static string get_MemberTypeIsMissing();
    internal static string get_RemoveTypeDataAction();
    internal static string get_RemoveTypeDataTarget();
    internal static string get_UpdateTypeDataTarget();
    internal static string get_RemoveTypeFileAction();
    internal static string get_TypeFileNotExistsInCurrentSession();
    internal static string get_FormatUpdatesDisabled();
    internal static string get_CannotUpdateFormatWithFormatTable();
    internal static string get_CannotUpdateTypeWithTypeTable();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class UpdateListStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string MemberDoesntExist { get; }
    internal static string MissingPropertyParameter { get; }
    internal static string MissingInputObjectParameter { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_MemberDoesntExist();
    internal static string get_MissingPropertyParameter();
    internal static string get_MissingInputObjectParameter();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class UtilityCommonStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string NoMatchFound { get; }
    internal static string Invalidpath { get; }
    internal static string FileNotFound { get; }
    internal static string EmptyCSSUri { get; }
    internal static string FileOpenError { get; }
    internal static string SearchXMLPrefixNullError { get; }
    internal static string InvalidOperation { get; }
    internal static string NotSupported { get; }
    internal static string FileReadError { get; }
    internal static string FormatHexTypeNotSupported { get; }
    internal static string FormatHexOnlySupportsFileSystemPaths { get; }
    internal static string FormatHexPathPrefix { get; }
    internal static string GroupObjectWithHashTable { get; }
    internal static string GroupObjectSingleProperty { get; }
    internal static string PathDoesNotExist { get; }
    internal static string PSPrefixReservedInInformationTag { get; }
    internal static string AlgorithmTypeNotSupported { get; }
    internal static string CouldNotParseAsPowerShellDataFile { get; }
    internal static string InvalidSDDL { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_NoMatchFound();
    internal static string get_Invalidpath();
    internal static string get_FileNotFound();
    internal static string get_EmptyCSSUri();
    internal static string get_FileOpenError();
    internal static string get_SearchXMLPrefixNullError();
    internal static string get_InvalidOperation();
    internal static string get_NotSupported();
    internal static string get_FileReadError();
    internal static string get_FormatHexTypeNotSupported();
    internal static string get_FormatHexOnlySupportsFileSystemPaths();
    internal static string get_FormatHexPathPrefix();
    internal static string get_GroupObjectWithHashTable();
    internal static string get_GroupObjectSingleProperty();
    internal static string get_PathDoesNotExist();
    internal static string get_PSPrefixReservedInInformationTag();
    internal static string get_AlgorithmTypeNotSupported();
    internal static string get_CouldNotParseAsPowerShellDataFile();
    internal static string get_InvalidSDDL();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class VariableCommandStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string SetVariableAction { get; }
    internal static string SetVariableTarget { get; }
    internal static string NewVariableAction { get; }
    internal static string NewVariableTarget { get; }
    internal static string AddVariableAction { get; }
    internal static string AddVariableTarget { get; }
    internal static string RemoveVariableAction { get; }
    internal static string RemoveVariableTarget { get; }
    internal static string ClearVariableAction { get; }
    internal static string ClearVariableTarget { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_SetVariableAction();
    internal static string get_SetVariableTarget();
    internal static string get_NewVariableAction();
    internal static string get_NewVariableTarget();
    internal static string get_AddVariableAction();
    internal static string get_AddVariableTarget();
    internal static string get_RemoveVariableAction();
    internal static string get_RemoveVariableTarget();
    internal static string get_ClearVariableAction();
    internal static string get_ClearVariableTarget();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class WebCmdletStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AccessDenied { get; }
    internal static string AllowUnencryptedAuthenticationRequired { get; }
    internal static string AuthenticationConflict { get; }
    internal static string AuthenticationCredentialNotSupplied { get; }
    internal static string AuthenticationTokenNotSupplied { get; }
    internal static string AuthenticationTokenConflict { get; }
    internal static string BodyConflict { get; }
    internal static string BodyFormConflict { get; }
    internal static string FormInFileConflict { get; }
    internal static string ContentTypeException { get; }
    internal static string CredentialConflict { get; }
    internal static string DirectoryPathSpecified { get; }
    internal static string EmptyKeyInJsonString { get; }
    internal static string DuplicateKeysInJsonString { get; }
    internal static string KeysWithDifferentCasingInJsonString { get; }
    internal static string ExtendedProfileRequired { get; }
    internal static string IEDomNotSupported { get; }
    internal static string JsonStringInBadFormat { get; }
    internal static string MaximumRedirectionCountExceeded { get; }
    internal static string MultiplePathsResolved { get; }
    internal static string NonStringKeyInDictionary { get; }
    internal static string NoPathResolved { get; }
    internal static string NotFilesystemPath { get; }
    internal static string OutFileMissing { get; }
    internal static string OutFileWritingSkipped { get; }
    internal static string ProxyCredentialConflict { get; }
    internal static string ProxyUriNotSupplied { get; }
    internal static string ReadResponseComplete { get; }
    internal static string ReadResponseProgressActivity { get; }
    internal static string ReadResponseProgressStatus { get; }
    internal static string RequestTimeout { get; }
    internal static string SessionConflict { get; }
    internal static string ThumbprintNotFound { get; }
    internal static string WriteRequestComplete { get; }
    internal static string WriteRequestProgressActivity { get; }
    internal static string WriteRequestProgressStatus { get; }
    internal static string JsonNetModuleRequired { get; }
    internal static string PSModuleAutoloadingPreferenceNotEnable { get; }
    internal static string CouldNotAutoImportJsonNetModule { get; }
    internal static string JsonNetModuleFilesRequired { get; }
    internal static string JsonDeserializationFailed { get; }
    internal static string ResponseStatusCodeFailure { get; }
    internal static string FollowingRelLinkVerboseMsg { get; }
    internal static string WebMethodInvocationVerboseMsg { get; }
    internal static string WebMethodResumeFailedVerboseMsg { get; }
    internal static string WebResponseVerboseMsg { get; }
    internal static string RetryVerboseMsg { get; }
    internal static string JsonMaxDepthReached { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AccessDenied();
    internal static string get_AllowUnencryptedAuthenticationRequired();
    internal static string get_AuthenticationConflict();
    internal static string get_AuthenticationCredentialNotSupplied();
    internal static string get_AuthenticationTokenNotSupplied();
    internal static string get_AuthenticationTokenConflict();
    internal static string get_BodyConflict();
    internal static string get_BodyFormConflict();
    internal static string get_FormInFileConflict();
    internal static string get_ContentTypeException();
    internal static string get_CredentialConflict();
    internal static string get_DirectoryPathSpecified();
    internal static string get_EmptyKeyInJsonString();
    internal static string get_DuplicateKeysInJsonString();
    internal static string get_KeysWithDifferentCasingInJsonString();
    internal static string get_ExtendedProfileRequired();
    internal static string get_IEDomNotSupported();
    internal static string get_JsonStringInBadFormat();
    internal static string get_MaximumRedirectionCountExceeded();
    internal static string get_MultiplePathsResolved();
    internal static string get_NonStringKeyInDictionary();
    internal static string get_NoPathResolved();
    internal static string get_NotFilesystemPath();
    internal static string get_OutFileMissing();
    internal static string get_OutFileWritingSkipped();
    internal static string get_ProxyCredentialConflict();
    internal static string get_ProxyUriNotSupplied();
    internal static string get_ReadResponseComplete();
    internal static string get_ReadResponseProgressActivity();
    internal static string get_ReadResponseProgressStatus();
    internal static string get_RequestTimeout();
    internal static string get_SessionConflict();
    internal static string get_ThumbprintNotFound();
    internal static string get_WriteRequestComplete();
    internal static string get_WriteRequestProgressActivity();
    internal static string get_WriteRequestProgressStatus();
    internal static string get_JsonNetModuleRequired();
    internal static string get_PSModuleAutoloadingPreferenceNotEnable();
    internal static string get_CouldNotAutoImportJsonNetModule();
    internal static string get_JsonNetModuleFilesRequired();
    internal static string get_JsonDeserializationFailed();
    internal static string get_ResponseStatusCodeFailure();
    internal static string get_FollowingRelLinkVerboseMsg();
    internal static string get_WebMethodInvocationVerboseMsg();
    internal static string get_WebMethodResumeFailedVerboseMsg();
    internal static string get_WebResponseVerboseMsg();
    internal static string get_RetryVerboseMsg();
    internal static string get_JsonMaxDepthReached();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class WriteErrorStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string WriteErrorException { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_WriteErrorException();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class WriteProgressResourceStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActivityParameterHelpMessage { get; }
    internal static string StatusParameterHelpMessage { get; }
    internal static string Processing { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActivityParameterHelpMessage();
    internal static string get_StatusParameterHelpMessage();
    internal static string get_Processing();
}
