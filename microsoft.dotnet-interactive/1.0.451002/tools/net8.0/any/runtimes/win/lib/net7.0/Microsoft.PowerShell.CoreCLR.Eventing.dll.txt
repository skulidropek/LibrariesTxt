[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class DotNetEventingStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string ArgumentOutOfRange_NeedValidId { get; }
    internal static string ArgumentOutOfRange_MaxArgExceeded { get; }
    internal static string ArgumentOutOfRange_MaxStringsExceeded { get; }
    internal static string Argument_NeedNonemptyDelimiter { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_ArgumentOutOfRange_NeedValidId();
    internal static string get_ArgumentOutOfRange_MaxArgExceeded();
    internal static string get_ArgumentOutOfRange_MaxStringsExceeded();
    internal static string get_Argument_NeedNonemptyDelimiter();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[IsReadOnlyAttribute]
public class System.Diagnostics.Eventing.EventDescriptor : ValueType {
    private ushort _id;
    private byte _version;
    private byte _channel;
    private byte _level;
    private byte _opcode;
    private ushort _task;
    private long _keywords;
    public int EventId { get; }
    public byte Version { get; }
    public byte Channel { get; }
    public byte Level { get; }
    public byte Opcode { get; }
    public int Task { get; }
    public long Keywords { get; }
    public EventDescriptor(int id, byte version, byte channel, byte level, byte opcode, int task, long keywords);
    public int get_EventId();
    public byte get_Version();
    public byte get_Channel();
    public byte get_Level();
    public byte get_Opcode();
    public int get_Task();
    public long get_Keywords();
}
public class System.Diagnostics.Eventing.EventProvider : object {
    [SecurityCriticalAttribute]
private EtwEnableCallback _etwCallback;
    private long _regHandle;
    private byte _level;
    private long _anyKeywordMask;
    private long _allKeywordMask;
    private int _enabled;
    private Guid _providerId;
    private int _disposed;
    [ThreadStaticAttribute]
private static WriteEventErrorCode t_returnCode;
    [ThreadStaticAttribute]
private static Guid t_activityId;
    private static int s_basicTypeAllocationBufferSize;
    private static int s_etwMaxNumberArguments;
    private static int s_etwAPIMaxStringCount;
    private static int s_maxEventDataDescriptors;
    private static int s_traceEventMaximumSize;
    private static int s_traceEventMaximumStringSize;
    [SecuritySafeCriticalAttribute]
public EventProvider(Guid providerGuid);
    [SecurityCriticalAttribute]
private void EtwRegister();
    public sealed virtual void Dispose();
    [SecuritySafeCriticalAttribute]
protected virtual void Dispose(bool disposing);
    public virtual void Close();
    protected virtual override void Finalize();
    [SecurityCriticalAttribute]
private void Deregister();
    [SecurityCriticalAttribute]
private void EtwEnableCallBack(Guid& sourceId, int isEnabled, byte setLevel, long anyKeyword, long allKeyword, Void* filterData, Void* callbackContext);
    public bool IsEnabled();
    public bool IsEnabled(byte level, long keywords);
    public static WriteEventErrorCode GetLastWriteEventError();
    private static void SetLastError(int error);
    [SecurityCriticalAttribute]
private static string EncodeObject(Object& data, EventData* dataDescriptor, Byte* dataBuffer);
    [SecurityCriticalAttribute]
public bool WriteMessageEvent(string eventMessage, byte eventLevel, long eventKeywords);
    public bool WriteMessageEvent(string eventMessage);
    public bool WriteEvent(EventDescriptor& eventDescriptor, Object[] eventPayload);
    [SecurityCriticalAttribute]
public bool WriteEvent(EventDescriptor& eventDescriptor, string data);
    [SecurityCriticalAttribute]
protected bool WriteEvent(EventDescriptor& eventDescriptor, int dataCount, IntPtr data);
    [SecurityCriticalAttribute]
public bool WriteTransferEvent(EventDescriptor& eventDescriptor, Guid relatedActivityId, Object[] eventPayload);
    [SecurityCriticalAttribute]
protected bool WriteTransferEvent(EventDescriptor& eventDescriptor, Guid relatedActivityId, int dataCount, IntPtr data);
    [SecurityCriticalAttribute]
private static Guid GetActivityId();
    [SecurityCriticalAttribute]
public static void SetActivityId(Guid& id);
    [SecurityCriticalAttribute]
public static Guid CreateActivityId();
}
public class System.Diagnostics.Eventing.EventProviderTraceListener : TraceListener {
    private EventProvider _provider;
    private static string s_nullStringValue;
    private static string s_nullStringComaValue;
    private static string s_nullCStringValue;
    private string _delimiter;
    private static UInt32 s_keyWordMask;
    private static int s_defaultPayloadSize;
    public string Delimiter { get; public set; }
    public bool IsThreadSafe { get; }
    public EventProviderTraceListener(string providerId);
    public EventProviderTraceListener(string providerId, string name);
    public EventProviderTraceListener(string providerId, string name, string delimiter);
    public string get_Delimiter();
    public void set_Delimiter(string value);
    private void InitProvider(string providerId);
    public sealed virtual void Flush();
    public sealed virtual bool get_IsThreadSafe();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Write(string message);
    public sealed virtual void WriteLine(string message);
    public sealed virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data);
    public sealed virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, Object[] data);
    public sealed virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id);
    public sealed virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string message);
    public sealed virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string format, Object[] args);
    public virtual void Fail(string message, string detailMessage);
}
[SecurityCriticalAttribute]
internal class System.Diagnostics.Eventing.Reader.CoTaskMemSafeHandle : SafeHandle {
    public bool IsInvalid { get; }
    public static CoTaskMemSafeHandle Zero { get; }
    internal void SetMemory(IntPtr handle);
    internal IntPtr GetMemory();
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
    public static CoTaskMemSafeHandle get_Zero();
}
[SecurityCriticalAttribute]
internal class System.Diagnostics.Eventing.Reader.CoTaskMemUnicodeSafeHandle : SafeHandle {
    public bool IsInvalid { get; }
    public static CoTaskMemUnicodeSafeHandle Zero { get; }
    internal CoTaskMemUnicodeSafeHandle(IntPtr handle, bool ownsHandle);
    internal void SetMemory(IntPtr handle);
    internal IntPtr GetMemory();
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
    public static CoTaskMemUnicodeSafeHandle get_Zero();
}
[SecuritySafeCriticalAttribute]
internal class System.Diagnostics.Eventing.Reader.EventLogHandle : SafeHandle {
    public bool IsInvalid { get; }
    public static EventLogHandle Zero { get; }
    internal EventLogHandle(IntPtr handle, bool ownsHandle);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
    public static EventLogHandle get_Zero();
}
internal static class System.Diagnostics.Eventing.Reader.NativeWrapper : object {
    private static void ThrowEventLogException(int errorCode);
    [SecurityCriticalAttribute]
public static EventLogHandle EvtQuery(EventLogHandle session, string path, string query, int flags);
    [SecurityCriticalAttribute]
public static void EvtSeek(EventLogHandle resultSet, long position, EventLogHandle bookmark, int timeout, EvtSeekFlags flags);
    [SecurityCriticalAttribute]
public static bool EvtNext(EventLogHandle queryHandle, int eventSize, IntPtr[] events, int timeout, int flags, Int32& returned);
    [SecuritySafeCriticalAttribute]
public static void EvtCancel(EventLogHandle handle);
    [SecurityCriticalAttribute]
public static void EvtClose(IntPtr handle);
    [SecurityCriticalAttribute]
public static EventLogHandle EvtOpenProviderMetadata(EventLogHandle session, string ProviderId, string logFilePath, int locale, int flags);
    [SecurityCriticalAttribute]
public static int EvtGetObjectArraySize(EventLogHandle objectArray);
    [SecurityCriticalAttribute]
public static EventLogHandle EvtOpenEventMetadataEnum(EventLogHandle ProviderMetadata, int flags);
    [SecurityCriticalAttribute]
public static EventLogHandle EvtNextEventMetadata(EventLogHandle eventMetadataEnum, int flags);
    [SecurityCriticalAttribute]
public static EventLogHandle EvtOpenChannelEnum(EventLogHandle session, int flags);
    [SecurityCriticalAttribute]
public static EventLogHandle EvtOpenProviderEnum(EventLogHandle session, int flags);
    [SecurityCriticalAttribute]
public static EventLogHandle EvtOpenChannelConfig(EventLogHandle session, string channelPath, int flags);
    [SecuritySafeCriticalAttribute]
public static void EvtSaveChannelConfig(EventLogHandle channelConfig, int flags);
    [SecurityCriticalAttribute]
public static EventLogHandle EvtOpenLog(EventLogHandle session, string path, PathType flags);
    [SecuritySafeCriticalAttribute]
public static void EvtExportLog(EventLogHandle session, string channelPath, string query, string targetFilePath, int flags);
    [SecuritySafeCriticalAttribute]
public static void EvtArchiveExportedLog(EventLogHandle session, string logFilePath, int locale, int flags);
    [SecuritySafeCriticalAttribute]
public static void EvtClearLog(EventLogHandle session, string channelPath, string targetFilePath, int flags);
    [SecurityCriticalAttribute]
public static EventLogHandle EvtCreateRenderContext(int valuePathsCount, String[] valuePaths, EvtRenderContextFlags flags);
    [SecurityCriticalAttribute]
public static void EvtRender(EventLogHandle context, EventLogHandle eventHandle, EvtRenderFlags flags, StringBuilder buffer);
    [SecurityCriticalAttribute]
public static EventLogHandle EvtOpenSession(EvtLoginClass loginClass, EvtRpcLogin& login, int timeout, int flags);
    [SecurityCriticalAttribute]
public static EventLogHandle EvtCreateBookmark(string bookmarkXml);
    [SecurityCriticalAttribute]
public static void EvtUpdateBookmark(EventLogHandle bookmark, EventLogHandle eventHandle);
    [SecuritySafeCriticalAttribute]
public static object EvtGetEventInfo(EventLogHandle handle, EvtEventPropertyId enumType);
    [SecurityCriticalAttribute]
public static object EvtGetQueryInfo(EventLogHandle handle, EvtQueryPropertyId enumType);
    [SecuritySafeCriticalAttribute]
public static object EvtGetPublisherMetadataProperty(EventLogHandle pmHandle, EvtPublisherMetadataPropertyId thePropertyId);
    [SecurityCriticalAttribute]
internal static EventLogHandle EvtGetPublisherMetadataPropertyHandle(EventLogHandle pmHandle, EvtPublisherMetadataPropertyId thePropertyId);
    [SecurityCriticalAttribute]
public static string EvtFormatMessage(EventLogHandle handle, UInt32 msgId);
    [SecurityCriticalAttribute]
public static object EvtGetObjectArrayProperty(EventLogHandle objArrayHandle, int index, int thePropertyId);
    [SecurityCriticalAttribute]
public static object EvtGetEventMetadataProperty(EventLogHandle handle, EvtEventMetadataPropertyId enumType);
    [SecuritySafeCriticalAttribute]
public static object EvtGetChannelConfigProperty(EventLogHandle handle, EvtChannelConfigPropertyId enumType);
    [SecuritySafeCriticalAttribute]
public static void EvtSetChannelConfigProperty(EventLogHandle handle, EvtChannelConfigPropertyId enumType, object val);
    [SecurityCriticalAttribute]
public static string EvtNextChannelPath(EventLogHandle handle, Boolean& finish);
    [SecurityCriticalAttribute]
public static string EvtNextPublisherId(EventLogHandle handle, Boolean& finish);
    [SecurityCriticalAttribute]
public static object EvtGetLogInfo(EventLogHandle handle, EvtLogPropertyId enumType);
    [SecuritySafeCriticalAttribute]
public static void EvtRenderBufferWithContextSystem(EventLogHandle contextHandle, EventLogHandle eventHandle, EvtRenderFlags flag, SystemProperties systemProperties, int SYSTEM_PROPERTY_COUNT);
    [SecuritySafeCriticalAttribute]
public static IList`1<object> EvtRenderBufferWithContextUserOrValues(EventLogHandle contextHandle, EventLogHandle eventHandle);
    [SecuritySafeCriticalAttribute]
public static string EvtFormatMessageRenderName(EventLogHandle pmHandle, EventLogHandle eventHandle, EvtFormatMessageFlags flag);
    [SecuritySafeCriticalAttribute]
public static IEnumerable`1<string> EvtFormatMessageRenderKeywords(EventLogHandle pmHandle, EventLogHandle eventHandle, EvtFormatMessageFlags flag);
    [SecurityCriticalAttribute]
public static string EvtRenderBookmark(EventLogHandle eventHandle);
    [SecuritySafeCriticalAttribute]
public static string EvtFormatMessageFormatDescription(EventLogHandle handle, EventLogHandle eventHandle, String[] values);
    [SecurityCriticalAttribute]
private static object ConvertToObject(EvtVariant val);
    [SecurityCriticalAttribute]
public static object ConvertToObject(EvtVariant val, EvtVariantType desiredType);
    [SecurityCriticalAttribute]
public static string ConvertToString(EvtVariant val);
    [SecurityCriticalAttribute]
public static string ConvertToAnsiString(EvtVariant val);
    [SecurityCriticalAttribute]
public static EventLogHandle ConvertToSafeHandle(EvtVariant val);
    [SecurityCriticalAttribute]
public static Array ConvertToArray(EvtVariant val, int size);
    [SecurityCriticalAttribute]
public static Array ConvertToBoolArray(EvtVariant val);
    [SecurityCriticalAttribute]
public static Array ConvertToFileTimeArray(EvtVariant val);
    [SecurityCriticalAttribute]
public static Array ConvertToSysTimeArray(EvtVariant val);
    [SecurityCriticalAttribute]
public static String[] ConvertToStringArray(EvtVariant val, bool ansi);
}
internal static class System.Diagnostics.Eventing.UnsafeNativeMethods : object {
    private static string FormatMessageDllName;
    private static string EventProviderDllName;
    private static string WEVTAPI;
    private static IntPtr s_NULL;
    internal static int ERROR_SUCCESS;
    internal static int ERROR_FILE_NOT_FOUND;
    internal static int ERROR_PATH_NOT_FOUND;
    internal static int ERROR_ACCESS_DENIED;
    internal static int ERROR_INVALID_HANDLE;
    internal static int ERROR_NOT_ENOUGH_MEMORY;
    internal static int ERROR_INVALID_DRIVE;
    internal static int ERROR_NO_MORE_FILES;
    internal static int ERROR_NOT_READY;
    internal static int ERROR_BAD_LENGTH;
    internal static int ERROR_SHARING_VIOLATION;
    internal static int ERROR_LOCK_VIOLATION;
    internal static int ERROR_HANDLE_EOF;
    internal static int ERROR_FILE_EXISTS;
    internal static int ERROR_INVALID_PARAMETER;
    internal static int ERROR_BROKEN_PIPE;
    internal static int ERROR_INSUFFICIENT_BUFFER;
    internal static int ERROR_INVALID_NAME;
    internal static int ERROR_BAD_PATHNAME;
    internal static int ERROR_ALREADY_EXISTS;
    internal static int ERROR_ENVVAR_NOT_FOUND;
    internal static int ERROR_FILENAME_EXCED_RANGE;
    internal static int ERROR_PIPE_BUSY;
    internal static int ERROR_NO_DATA;
    internal static int ERROR_PIPE_NOT_CONNECTED;
    internal static int ERROR_MORE_DATA;
    internal static int ERROR_NO_MORE_ITEMS;
    internal static int ERROR_PIPE_CONNECTED;
    internal static int ERROR_PIPE_LISTENING;
    internal static int ERROR_OPERATION_ABORTED;
    internal static int ERROR_IO_PENDING;
    internal static int ERROR_NOT_FOUND;
    internal static int ERROR_ARITHMETIC_OVERFLOW;
    internal static int ERROR_RESOURCE_LANG_NOT_FOUND;
    internal static int ERROR_EVT_MESSAGE_NOT_FOUND;
    internal static int ERROR_EVT_MESSAGE_ID_NOT_FOUND;
    internal static int ERROR_EVT_UNRESOLVED_VALUE_INSERT;
    internal static int ERROR_EVT_UNRESOLVED_PARAMETER_INSERT;
    internal static int ERROR_EVT_MAX_INSERTS_REACHED;
    internal static int ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND;
    internal static int ERROR_MUI_FILE_NOT_FOUND;
    private static int FORMAT_MESSAGE_IGNORE_INSERTS;
    private static int FORMAT_MESSAGE_FROM_SYSTEM;
    private static int FORMAT_MESSAGE_ARGUMENT_ARRAY;
    private static UnsafeNativeMethods();
    [SecurityCriticalAttribute]
internal static int FormatMessage(int dwFlags, IntPtr lpSource, int dwMessageId, int dwLanguageId, StringBuilder lpBuffer, int nSize, IntPtr va_list_arguments);
    [SecurityCriticalAttribute]
internal static string GetMessage(int errorCode);
    [SecurityCriticalAttribute]
internal static UInt32 EventRegister(Guid& providerId, EtwEnableCallback enableCallback, Void* callbackContext, Int64& registrationHandle);
    [SecurityCriticalAttribute]
internal static int EventUnregister(long registrationHandle);
    [SecurityCriticalAttribute]
internal static int EventEnabled(long registrationHandle, EventDescriptor& eventDescriptor);
    [SecurityCriticalAttribute]
internal static int EventProviderEnabled(long registrationHandle, byte level, long keywords);
    [SecurityCriticalAttribute]
internal static UInt32 EventWrite(long registrationHandle, EventDescriptor& eventDescriptor, UInt32 userDataCount, Void* userData);
    [SecurityCriticalAttribute]
internal static UInt32 EventWrite(long registrationHandle, EventDescriptor* eventDescriptor, UInt32 userDataCount, Void* userData);
    [SecurityCriticalAttribute]
internal static UInt32 EventWriteTransfer(long registrationHandle, EventDescriptor& eventDescriptor, Guid* activityId, Guid* relatedActivityId, UInt32 userDataCount, Void* userData);
    [SecurityCriticalAttribute]
internal static UInt32 EventWriteString(long registrationHandle, byte level, long keywords, Char* message);
    [SecurityCriticalAttribute]
internal static UInt32 EventActivityIdControl(int ControlCode, Guid& ActivityId);
    [SecurityCriticalAttribute]
internal static EventLogHandle EvtQuery(EventLogHandle session, string path, string query, int flags);
    [SecurityCriticalAttribute]
internal static bool EvtSeek(EventLogHandle resultSet, long position, EventLogHandle bookmark, int timeout, EvtSeekFlags flags);
    [SecurityCriticalAttribute]
internal static bool EvtNext(EventLogHandle queryHandle, int eventSize, IntPtr[] events, int timeout, int flags, Int32& returned);
    [SecurityCriticalAttribute]
internal static bool EvtCancel(EventLogHandle handle);
    [SecurityCriticalAttribute]
internal static bool EvtClose(IntPtr handle);
    [SecurityCriticalAttribute]
internal static bool EvtGetEventInfo(EventLogHandle eventHandle, EvtEventPropertyId propertyId, int bufferSize, IntPtr bufferPtr, Int32& bufferUsed);
    [SecurityCriticalAttribute]
internal static bool EvtGetQueryInfo(EventLogHandle queryHandle, EvtQueryPropertyId propertyId, int bufferSize, IntPtr buffer, Int32& bufferRequired);
    [SecurityCriticalAttribute]
internal static EventLogHandle EvtOpenPublisherMetadata(EventLogHandle session, string publisherId, string logFilePath, int locale, int flags);
    [SecurityCriticalAttribute]
internal static bool EvtGetPublisherMetadataProperty(EventLogHandle publisherMetadataHandle, EvtPublisherMetadataPropertyId propertyId, int flags, int publisherMetadataPropertyBufferSize, IntPtr publisherMetadataPropertyBuffer, Int32& publisherMetadataPropertyBufferUsed);
    [SecurityCriticalAttribute]
internal static bool EvtGetObjectArraySize(EventLogHandle objectArray, Int32& objectArraySize);
    [SecurityCriticalAttribute]
internal static bool EvtGetObjectArrayProperty(EventLogHandle objectArray, int propertyId, int arrayIndex, int flags, int propertyValueBufferSize, IntPtr propertyValueBuffer, Int32& propertyValueBufferUsed);
    [SecurityCriticalAttribute]
internal static EventLogHandle EvtOpenEventMetadataEnum(EventLogHandle publisherMetadata, int flags);
    [SecurityCriticalAttribute]
internal static EventLogHandle EvtNextEventMetadata(EventLogHandle eventMetadataEnum, int flags);
    [SecurityCriticalAttribute]
internal static bool EvtGetEventMetadataProperty(EventLogHandle eventMetadata, EvtEventMetadataPropertyId propertyId, int flags, int eventMetadataPropertyBufferSize, IntPtr eventMetadataPropertyBuffer, Int32& eventMetadataPropertyBufferUsed);
    [SecurityCriticalAttribute]
internal static EventLogHandle EvtOpenChannelEnum(EventLogHandle session, int flags);
    [SecurityCriticalAttribute]
internal static bool EvtNextChannelPath(EventLogHandle channelEnum, int channelPathBufferSize, StringBuilder channelPathBuffer, Int32& channelPathBufferUsed);
    [SecurityCriticalAttribute]
internal static EventLogHandle EvtOpenPublisherEnum(EventLogHandle session, int flags);
    [SecurityCriticalAttribute]
internal static bool EvtNextPublisherId(EventLogHandle publisherEnum, int publisherIdBufferSize, StringBuilder publisherIdBuffer, Int32& publisherIdBufferUsed);
    [SecurityCriticalAttribute]
internal static EventLogHandle EvtOpenChannelConfig(EventLogHandle session, string channelPath, int flags);
    [SecurityCriticalAttribute]
internal static bool EvtSaveChannelConfig(EventLogHandle channelConfig, int flags);
    [SecurityCriticalAttribute]
internal static bool EvtSetChannelConfigProperty(EventLogHandle channelConfig, EvtChannelConfigPropertyId propertyId, int flags, EvtVariant& propertyValue);
    [SecurityCriticalAttribute]
internal static bool EvtGetChannelConfigProperty(EventLogHandle channelConfig, EvtChannelConfigPropertyId propertyId, int flags, int propertyValueBufferSize, IntPtr propertyValueBuffer, Int32& propertyValueBufferUsed);
    [SecurityCriticalAttribute]
internal static EventLogHandle EvtOpenLog(EventLogHandle session, string path, PathType flags);
    [SecurityCriticalAttribute]
internal static bool EvtGetLogInfo(EventLogHandle log, EvtLogPropertyId propertyId, int propertyValueBufferSize, IntPtr propertyValueBuffer, Int32& propertyValueBufferUsed);
    [SecurityCriticalAttribute]
internal static bool EvtExportLog(EventLogHandle session, string channelPath, string query, string targetFilePath, int flags);
    [SecurityCriticalAttribute]
internal static bool EvtArchiveExportedLog(EventLogHandle session, string logFilePath, int locale, int flags);
    [SecurityCriticalAttribute]
internal static bool EvtClearLog(EventLogHandle session, string channelPath, string targetFilePath, int flags);
    [SecurityCriticalAttribute]
internal static EventLogHandle EvtCreateRenderContext(int valuePathsCount, String[] valuePaths, EvtRenderContextFlags flags);
    [SecurityCriticalAttribute]
internal static bool EvtRender(EventLogHandle context, EventLogHandle eventHandle, EvtRenderFlags flags, int buffSize, StringBuilder buffer, Int32& buffUsed, Int32& propCount);
    [SecurityCriticalAttribute]
internal static bool EvtRender(EventLogHandle context, EventLogHandle eventHandle, EvtRenderFlags flags, int buffSize, IntPtr buffer, Int32& buffUsed, Int32& propCount);
    [SecurityCriticalAttribute]
internal static bool EvtFormatMessage(EventLogHandle publisherMetadataHandle, EventLogHandle eventHandle, UInt32 messageId, int valueCount, EvtStringVariant[] values, EvtFormatMessageFlags flags, int bufferSize, StringBuilder buffer, Int32& bufferUsed);
    [SecurityCriticalAttribute]
internal static bool EvtFormatMessageBuffer(EventLogHandle publisherMetadataHandle, EventLogHandle eventHandle, UInt32 messageId, int valueCount, IntPtr values, EvtFormatMessageFlags flags, int bufferSize, IntPtr buffer, Int32& bufferUsed);
    [SecurityCriticalAttribute]
internal static EventLogHandle EvtOpenSession(EvtLoginClass loginClass, EvtRpcLogin& login, int timeout, int flags);
    [SecurityCriticalAttribute]
internal static EventLogHandle EvtCreateBookmark(string bookmarkXml);
    [SecurityCriticalAttribute]
internal static bool EvtUpdateBookmark(EventLogHandle bookmark, EventLogHandle eventHandle);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
