internal static class FxResources.System.DirectoryServices.AccountManagement.SR : object {
}
internal static class Interop : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle : SafeBuffer {
    internal SafeLsaMemoryHandle(IntPtr handle);
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal SafeLsaPolicyHandle(IntPtr handle);
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Win32.SafeHandles.SafeTokenHandle : SafeHandle {
    internal static SafeTokenHandle InvalidHandle { get; }
    public bool IsInvalid { get; }
    internal SafeTokenHandle(IntPtr handle);
    internal static SafeTokenHandle get_InvalidHandle();
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
[ExtensionAttribute]
internal static class SafeLsaMemoryHandleExtensions : object {
    [ExtensionAttribute]
public static void InitializeReferencedDomainsList(SafeLsaMemoryHandle referencedDomains);
}
internal class System.DirectoryServices.AccountManagement.AccountInfo : object {
    private Nullable`1<DateTime> _accountLockoutTime;
    private LoadState _accountLockoutTimeLoaded;
    private Nullable`1<DateTime> _lastLogon;
    private LoadState _lastLogonLoaded;
    private PrincipalValueCollection`1<string> _permittedWorkstations;
    private LoadState _permittedWorkstationsLoaded;
    private Byte[] _permittedLogonTimes;
    private Byte[] _permittedLogonTimesOriginal;
    private LoadState _permittedLogonTimesLoaded;
    private Nullable`1<DateTime> _expirationDate;
    private LoadState _expirationDateChanged;
    private bool _smartcardLogonRequired;
    private LoadState _smartcardLogonRequiredChanged;
    private bool _delegationPermitted;
    private LoadState _delegationPermittedChanged;
    private int _badLogonCount;
    private LoadState _badLogonCountChanged;
    private string _homeDirectory;
    private LoadState _homeDirectoryChanged;
    private string _homeDrive;
    private LoadState _homeDriveChanged;
    private string _scriptPath;
    private LoadState _scriptPathChanged;
    private AuthenticablePrincipal _owningPrincipal;
    public Nullable`1<DateTime> AccountLockoutTime { get; }
    public Nullable`1<DateTime> LastLogon { get; }
    public PrincipalValueCollection`1<string> PermittedWorkstations { get; }
    public Byte[] PermittedLogonTimes { get; public set; }
    public Nullable`1<DateTime> AccountExpirationDate { get; public set; }
    public bool SmartcardLogonRequired { get; public set; }
    public bool DelegationPermitted { get; public set; }
    public int BadLogonCount { get; }
    public string HomeDirectory { get; public set; }
    public string HomeDrive { get; public set; }
    public string ScriptPath { get; public set; }
    internal AccountInfo(AuthenticablePrincipal principal);
    public Nullable`1<DateTime> get_AccountLockoutTime();
    public Nullable`1<DateTime> get_LastLogon();
    public PrincipalValueCollection`1<string> get_PermittedWorkstations();
    public Byte[] get_PermittedLogonTimes();
    public void set_PermittedLogonTimes(Byte[] value);
    public Nullable`1<DateTime> get_AccountExpirationDate();
    public void set_AccountExpirationDate(Nullable`1<DateTime> value);
    public bool get_SmartcardLogonRequired();
    public void set_SmartcardLogonRequired(bool value);
    public bool get_DelegationPermitted();
    public void set_DelegationPermitted(bool value);
    public int get_BadLogonCount();
    public string get_HomeDirectory();
    public void set_HomeDirectory(string value);
    public string get_HomeDrive();
    public void set_HomeDrive(string value);
    public string get_ScriptPath();
    public void set_ScriptPath(string value);
    public bool IsAccountLockedOut();
    public void UnlockAccount();
    internal void LoadValueIntoProperty(string propertyName, object value);
    internal bool GetChangeStatusForProperty(string propertyName);
    internal object GetValueForProperty(string propertyName);
    internal void ResetAllChangeStatus();
}
internal class System.DirectoryServices.AccountManagement.ADAMStoreCtx : ADStoreCtx {
    private static int mappingIndex;
    private List`1<string> _cachedBindableObjectList;
    private string _cachedBindableObjectFilter;
    private object _objectListLock;
    private static Object[0...,0...] s_presenceStateTable;
    private static Object[0...,0...] s_propertyMappingTableRaw;
    private static Object[0...,0...] s_filterPropertiesTableRaw;
    protected int MappingTableIndex { get; }
    public ADAMStoreCtx(DirectoryEntry ctxBase, bool ownCtxBase, string username, string password, string serverName, ContextOptions options);
    private static ADAMStoreCtx();
    protected virtual int get_MappingTableIndex();
    protected internal virtual void InitializeNewDirectoryOptions(DirectoryEntry newDeChild);
    protected virtual void SetAuthPrincipalEnableStatus(AuthenticablePrincipal ap, bool enable);
    protected virtual void LoadDomainInfo();
    internal virtual ResultSet GetGroupsMemberOfAZ(Principal p);
    private void SetupPasswordModification(AuthenticablePrincipal p);
    internal virtual void SetPassword(AuthenticablePrincipal p, string newPassword);
    internal virtual void ChangePassword(AuthenticablePrincipal p, string oldPassword, string newPassword);
    private List`1<string> PopulatAuxObjectList(string auxClassName);
    protected virtual string GetObjectClassPortion(Type principalType);
    internal virtual void InitializeUserAccountControl(AuthenticablePrincipal p);
}
internal class System.DirectoryServices.AccountManagement.ADDNConstraintLinkedAttrSet : ADDNLinkedAttrSet {
    private ConstraintType _constraint;
    private object _constraintData;
    internal ADDNConstraintLinkedAttrSet(ConstraintType constraint, object constraintData, string groupDN, IEnumerable[] members, string primaryGroupDN, DirectorySearcher queryMembersSearcher, bool recursive, ADStoreCtx storeCtx);
    internal ADDNConstraintLinkedAttrSet(ConstraintType constraint, object constraintData, string groupDN, DirectorySearcher[] membersSearcher, string primaryGroupDN, DirectorySearcher primaryGroupMembersSearcher, bool recursive, ADStoreCtx storeCtx);
    internal virtual bool MoveNext();
}
internal class System.DirectoryServices.AccountManagement.ADDNLinkedAttrSet : BookmarkableResultSet {
    private IADsPathname _pathCracker;
    private object _pathLock;
    private Dictionary`2<string, bool> _usersVisited;
    private List`1<string> _groupsVisited;
    private List`1<string> _groupsToVisit;
    protected object current;
    private bool _returnedPrimaryGroup;
    private string _primaryGroupDN;
    private bool _recursive;
    private Queue`1<IEnumerable> _membersQueue;
    private IEnumerable _members;
    private Queue`1<IEnumerable> _originalMembers;
    private IEnumerator _membersEnum;
    private ADStoreCtx _storeCtx;
    private ADStoreCtx _originalStoreCtx;
    private bool _atBeginning;
    private bool _disposed;
    private List`1<DirectoryEntry> _foreignMembersCurrentGroup;
    private List`1<DirectoryEntry> _fakePrincipalMembers;
    private SidList _foreignMembersToReturn;
    private Principal _currentForeignPrincipal;
    private DirectoryEntry _currentForeignDE;
    private List`1<GroupPrincipal> _foreignGroups;
    private DirectorySearcher _primaryGroupMembersSearcher;
    private SearchResultCollection _queryMembersResults;
    private IEnumerator _queryMembersResultEnumerator;
    private DirectorySearcher _currentMembersSearcher;
    private Queue`1<DirectorySearcher> _memberSearchersQueue;
    private Queue`1<DirectorySearcher> _memberSearchersQueueOriginal;
    private SearchResultCollection _memberSearchResults;
    private IEnumerator _memberSearchResultsEnumerator;
    private ExpansionMode _expansionMode;
    private ExpansionMode _originalExpansionMode;
    internal object CurrentAsPrincipal { get; }
    internal ADDNLinkedAttrSet(string groupDN, IEnumerable[] members, string primaryGroupDN, DirectorySearcher primaryGroupMembersSearcher, bool recursive, ADStoreCtx storeCtx);
    internal ADDNLinkedAttrSet(string groupDN, DirectorySearcher[] membersSearcher, string primaryGroupDN, DirectorySearcher primaryGroupMembersSearcher, bool recursive, ADStoreCtx storeCtx);
    internal virtual object get_CurrentAsPrincipal();
    internal virtual bool MoveNext();
    private bool MoveNextPrimaryGroupDN();
    private bool GetNextSearchResult();
    private bool MoveNextMemberSearcher();
    private bool GetNextEnum();
    private bool MoveNextMemberEnum();
    private void TranslateForeignMembers();
    private bool MoveNextForeign(Boolean& outerNeedToRetry);
    private bool ExpandForeignGroupEnumerator();
    private bool ExpandForeignGroupSearcher();
    private bool MoveNextQueryPrimaryGroupMember();
    internal virtual void Reset();
    internal virtual ResultSetBookmark BookmarkAndReset();
    internal virtual void RestoreBookmark(ResultSetBookmark bookmark);
    public virtual void Dispose();
    private string BuildPathFromDN(string dn);
}
internal class System.DirectoryServices.AccountManagement.ADDNLinkedAttrSetBookmark : ResultSetBookmark {
    public Dictionary`2<string, bool> usersVisited;
    public List`1<string> groupsToVisit;
    public List`1<string> groupsVisited;
    public IEnumerable members;
    public IEnumerator membersEnum;
    public Queue`1<IEnumerable> membersQueue;
    public ADStoreCtx storeCtx;
    public object current;
    public bool returnedPrimaryGroup;
    public List`1<DirectoryEntry> foreignMembersCurrentGroup;
    public List`1<DirectoryEntry> fakePrincipalMembers;
    public SidList foreignMembersToReturn;
    public Principal currentForeignPrincipal;
    public DirectoryEntry currentForeignDE;
    public List`1<GroupPrincipal> foreignGroups;
    public SearchResultCollection queryMembersResults;
    public IEnumerator queryMembersResultEnumerator;
    public SearchResultCollection memberSearchResults;
    public IEnumerator memberSearchResultsEnumerator;
    public bool atBeginning;
    public ExpansionMode expansionMode;
    public Queue`1<DirectorySearcher> memberSearcherQueue;
}
internal class System.DirectoryServices.AccountManagement.ADEntriesSet : ResultSet {
    private SearchResultCollection _searchResults;
    private ADStoreCtx _storeCtx;
    private IEnumerator _enumerator;
    private SearchResult _current;
    private bool _endReached;
    private bool _disposed;
    private object _discriminant;
    internal object CurrentAsPrincipal { get; }
    internal ADEntriesSet(SearchResultCollection src, ADStoreCtx storeCtx);
    internal ADEntriesSet(SearchResultCollection src, ADStoreCtx storeCtx, object discriminant);
    internal virtual object get_CurrentAsPrincipal();
    internal virtual bool MoveNext();
    internal virtual void Reset();
    public virtual void Dispose();
}
internal static class System.DirectoryServices.AccountManagement.ADGroupScope : object {
    internal static int Local;
    internal static int Global;
    internal static int Universal;
}
internal class System.DirectoryServices.AccountManagement.ADStoreCtx : StoreCtx {
    protected DirectoryEntry ctxBase;
    private static int mappingIndex;
    private object _ctxBaseLock;
    private bool _ownCtxBase;
    private bool _disposed;
    protected NetCred credentials;
    protected AuthenticationTypes authTypes;
    protected ContextOptions contextOptions;
    protected object domainInfoLock;
    protected string domainFlatName;
    protected string domainDnsName;
    protected string forestDnsName;
    protected string userSuppliedServerName;
    protected string defaultNamingContext;
    protected string contextBasePartitionDN;
    protected string dnsHostName;
    protected ulong lockoutDuration;
    private static Object[0...,0...] s_filterPropertiesTableRaw;
    private static Hashtable s_filterPropertiesTable;
    private static Object[0...,0...] s_propertyMappingTableRaw;
    private static Hashtable s_propertyMappingTableByProperty;
    private static Hashtable s_propertyMappingTableByLDAP;
    protected static Dictionary`2<string, bool> NonPresentAttrDefaultStateMapping;
    private static Hashtable s_propertyMappingTableByPropertyFull;
    protected static Dictionary`2<int, Dictionary`2<Type, StringCollection>> TypeToLdapPropListMap;
    private static string SelfSddl;
    private static string WorldSddl;
    private static Guid s_changePasswordGuid;
    protected internal NetCred Credentials { get; }
    protected internal AuthenticationTypes AuthTypes { get; }
    protected int MappingTableIndex { get; }
    internal string BasePath { get; }
    internal bool SupportsNativeMembershipTest { get; }
    internal string ContextBasePartitionDN { get; }
    internal string DefaultNamingContext { get; }
    private string FlatDomainName { get; }
    internal string DnsDomainName { get; }
    internal string DnsHostName { get; }
    internal string DnsForestName { get; }
    internal string UserSuppliedServerName { get; }
    private ulong LockoutDuration { get; }
    internal bool SupportsSearchNatively { get; }
    private static ADStoreCtx();
    public ADStoreCtx(DirectoryEntry ctxBase, bool ownCtxBase, string username, string password, ContextOptions options);
    protected internal NetCred get_Credentials();
    protected internal AuthenticationTypes get_AuthTypes();
    protected internal virtual void InitializeNewDirectoryOptions(DirectoryEntry newDeChild);
    protected virtual int get_MappingTableIndex();
    protected static void LoadFilterMappingTable(int mappingIndex, Object[0...,0...] rawFilterPropertiesTable);
    protected static void LoadPropertyMappingTable(int mappingIndex, Object[0...,0...] rawPropertyMappingTable);
    protected bool IsContainer(DirectoryEntry de);
    public virtual void Dispose();
    internal virtual string get_BasePath();
    internal virtual void Insert(Principal p);
    internal virtual bool AccessCheck(Principal p, PrincipalAccessMask targetPermission);
    private void EnablePrincipalIfNecessary(Principal p);
    private void SetPasswordSecurityifNecessary(Principal p);
    private static void SetCannotChangePasswordStatus(Principal ap, bool userCannotChangePassword, bool commitChanges);
    protected virtual void SetAuthPrincipalEnableStatus(AuthenticablePrincipal ap, bool enable);
    internal virtual void Update(Principal p);
    internal virtual void Delete(Principal p);
    internal virtual void Move(StoreCtx originalStore, Principal p);
    internal virtual void InitializeUserAccountControl(AuthenticablePrincipal p);
    internal virtual bool IsLockedOut(AuthenticablePrincipal p);
    internal virtual void UnlockAccount(AuthenticablePrincipal p);
    internal virtual void SetPassword(AuthenticablePrincipal p, string newPassword);
    internal virtual void ChangePassword(AuthenticablePrincipal p, string oldPassword, string newPassword);
    internal virtual void ExpirePassword(AuthenticablePrincipal p);
    internal virtual void UnexpirePassword(AuthenticablePrincipal p);
    protected void WriteAttribute(Principal p, string attribute, int value);
    protected void WriteAttribute(Principal p, string attribute, T value);
    internal virtual ResultSet FindByLockoutTime(DateTime dt, MatchType matchType, Type principalType);
    internal virtual ResultSet FindByLogonTime(DateTime dt, MatchType matchType, Type principalType);
    internal virtual ResultSet FindByPasswordSetTime(DateTime dt, MatchType matchType, Type principalType);
    internal virtual ResultSet FindByBadPasswordAttempt(DateTime dt, MatchType matchType, Type principalType);
    internal virtual ResultSet FindByExpirationTime(DateTime dt, MatchType matchType, Type principalType);
    private ResultSet FindByDate(Type subtype, String[] ldapAttributes, MatchType matchType, DateTime value);
    internal virtual ResultSet GetGroupsMemberOf(Principal p);
    internal virtual ResultSet GetGroupsMemberOf(Principal foreignPrincipal, StoreCtx foreignContext);
    private string GetGroupDnFromGroupID(Byte[] userSid, int primaryGroupId);
    internal virtual ResultSet GetGroupsMemberOfAZ(Principal p);
    internal virtual BookmarkableResultSet GetGroupMembership(GroupPrincipal g, bool recursive);
    private DirectorySearcher GetDirectorySearcherFromGroupID(Byte[] groupSid);
    internal virtual bool get_SupportsNativeMembershipTest();
    internal virtual bool IsMemberOfInStore(GroupPrincipal g, Principal p);
    internal virtual bool CanGroupBeCleared(GroupPrincipal g, String& explanationForFailure);
    internal virtual bool CanGroupMemberBeRemoved(GroupPrincipal g, Principal member, String& explanationForFailure);
    internal virtual Principal ResolveCrossStoreRefToPrincipal(object o);
    internal virtual bool SupportsAccounts(AuthenticablePrincipal p);
    internal virtual CredentialTypes SupportedCredTypes(AuthenticablePrincipal p);
    internal void LoadDirectoryEntryAttributes(DirectoryEntry de);
    internal virtual Principal ConstructFakePrincipalFromSID(Byte[] sid);
    internal string get_ContextBasePartitionDN();
    internal string get_DefaultNamingContext();
    private string get_FlatDomainName();
    internal string get_DnsDomainName();
    internal string get_DnsHostName();
    internal string get_DnsForestName();
    internal string get_UserSuppliedServerName();
    private ulong get_LockoutDuration();
    protected virtual void LoadDomainInfo();
    internal virtual bool IsValidProperty(Principal p, string propertyName);
    internal virtual bool get_SupportsSearchNatively();
    internal virtual Type SearcherNativeType();
    private void BuildExtensionPropertyList(Hashtable propertyList, Type p);
    protected void BuildPropertySet(Type p, StringCollection propertySet);
    internal virtual object PushFilterToNativeSearcher(PrincipalSearcher ps);
    protected virtual string GetObjectClassPortion(Type principalType);
    internal virtual ResultSet Query(PrincipalSearcher ps, int sizeLimit);
    protected static string StringConverter(FilterBase filter, string suggestedAdProperty);
    protected static string AcctDisabledConverter(FilterBase filter, string suggestedAdProperty);
    protected static string DefaultValueBoolConverter(FilterBase filter, string suggestedAdProperty);
    protected static string CommaStringConverter(FilterBase filter, string suggestedAdProperty);
    protected static bool IdentityClaimToFilter(string identity, string identityFormat, String& filter, bool throwOnFail);
    protected static string IdentityClaimConverter(FilterBase filter, string suggestedAdProperty);
    protected static bool SecurityIdentityClaimConverterHelper(string urnValue, bool useSidHistory, StringBuilder filter, bool throwOnFail);
    protected static string CertificateConverter(FilterBase filter, string suggestedAdProperty);
    protected static string UserAccountControlConverter(FilterBase filter, string suggestedAdProperty);
    protected static string BinaryConverter(FilterBase filter, string suggestedAdProperty);
    protected static string ExpirationDateConverter(FilterBase filter, string suggestedAdProperty);
    protected static string GuidConverter(FilterBase filter, string suggestedAdProperty);
    protected static string MatchingIntConverter(FilterBase filter, string suggestedAdProperty);
    protected static string DefaultValutMatchingDateTimeConverter(FilterBase filter, string suggestedAdProperty);
    protected static string MatchingDateTimeConverter(FilterBase filter, string suggestedAdProperty);
    protected static string LastLogonConverter(FilterBase filter, string suggestedAdProperty);
    protected static string GroupTypeConverter(FilterBase filter, string suggestedAdProperty);
    public static string DateTimeFilterBuilder(string attributeName, DateTime searchValue, DateTime defaultValue, bool requirePresence, MatchType mt);
    public static string ExtensionTypeConverter(string attributeName, Type type, object value, MatchType mt);
    protected static string ExtensionCacheConverter(FilterBase filter, string suggestedAdProperty);
    private void AddPropertySetToTypePropListMap(Type principalType, StringCollection propertySet);
    internal virtual object PushChangesToNative(Principal p);
    internal virtual Principal GetAsPrincipal(object storeObject, object discriminant);
    private string GetEscapedDN(string dn);
    internal virtual void Load(Principal p, string principalPropertyName);
    internal virtual void Load(Principal p);
    internal virtual Principal FindPrincipalByIdentRef(Type principalType, string urnScheme, string urnValue, DateTime referenceDate);
    internal Principal FindPrincipalBySID(Type principalType, IdentityReference ir, bool useSidHistory);
    private Principal FindPrincipalByIdentRefHelper(Type principalType, string urnScheme, string urnValue, DateTime referenceDate, bool useSidHistory);
    internal virtual Type NativeType(Principal p);
    protected static void SidFromLdapConverter(dSPropertyCollection properties, string suggestedAdProperty, Principal p, string propertyName);
    protected static void GuidFromLdapConverter(dSPropertyCollection properties, string suggestedAdProperty, Principal p, string propertyName);
    protected static void StringFromLdapConverter(dSPropertyCollection properties, string suggestedAdProperty, Principal p, string propertyName);
    protected static void MultiStringFromLdapConverter(dSPropertyCollection properties, string suggestedAdProperty, Principal p, string propertyName);
    protected static void BoolFromLdapConverter(dSPropertyCollection properties, string suggestedAdProperty, Principal p, string propertyName);
    protected static void AcctDisabledFromLdapConverter(dSPropertyCollection properties, string suggestedAdProperty, Principal p, string propertyName);
    protected static void CommaStringFromLdapConverter(dSPropertyCollection properties, string suggestedAdProperty, Principal p, string propertyName);
    protected static void IntFromLdapConverter(dSPropertyCollection properties, string suggestedAdProperty, Principal p, string propertyName);
    protected static void BinaryFromLdapConverter(dSPropertyCollection properties, string suggestedAdProperty, Principal p, string propertyName);
    protected static void CertFromLdapConverter(dSPropertyCollection properties, string suggestedAdProperty, Principal p, string propertyName);
    protected static void UACFromLdapConverter(dSPropertyCollection properties, string suggestedAdProperty, Principal p, string propertyName);
    protected static void GenericDateTimeFromLdapConverter(dSPropertyCollection properties, string suggestedAdProperty, Principal p, string propertyName);
    protected static void ObjectClassFromLdapConverter(dSPropertyCollection properties, string suggestedAdProperty, Principal p, string propertyName);
    protected static void LastLogonFromLdapConverter(dSPropertyCollection properties, string suggestedAdProperty, Principal p, string propertyName);
    protected static void AcctExpirFromLdapConverter(dSPropertyCollection properties, string suggestedAdProperty, Principal p, string propertyName);
    protected static void DateTimeFromLdapConverter(dSPropertyCollection properties, string suggestedAdProperty, Principal p, string propertyName, bool useAcctExpLogic);
    protected static void GroupTypeFromLdapConverter(dSPropertyCollection properties, string suggestedAdProperty, Principal p, string propertyName);
    protected static bool CannotChangePwdFromLdapConverter(DirectoryEntry de);
    protected static void ScanACLForChangePasswordRight(ActiveDirectorySecurity adsSecurity, Boolean& denySelfFound, Boolean& denyWorldFound, Boolean& allowSelfFound, Boolean& allowWorldFound);
    protected static void StringToLdapConverter(Principal p, string propertyName, DirectoryEntry de, string suggestedAdProperty);
    protected static void BinaryToLdapConverter(Principal p, string propertyName, DirectoryEntry de, string suggestedAdProperty);
    protected static void MultiStringToLdapConverter(Principal p, string propertyName, DirectoryEntry de, string suggestedAdProperty);
    protected static void BoolToLdapConverter(Principal p, string propertyName, DirectoryEntry de, string suggestedAdProperty);
    protected static void AcctDisabledToLdapConverter(Principal p, string propertyName, DirectoryEntry de, string suggestedAdProperty);
    protected static void CommaStringToLdapConverter(Principal p, string propertyName, DirectoryEntry de, string suggestedAdProperty);
    protected static void CertToLdap(Principal p, string propertyName, DirectoryEntry de, string suggestedAdProperty);
    protected static void UACToLdapConverter(Principal p, string propertyName, DirectoryEntry de, string suggestedAdProperty);
    protected static void AcctExpirToLdapConverter(Principal p, string propertyName, DirectoryEntry de, string suggestedAdProperty);
    protected static void ExtensionCacheToLdapConverter(Principal p, string propertyName, DirectoryEntry de, string suggestedAdProperty);
    protected static void GroupTypeToLdapConverter(Principal p, string propertyName, DirectoryEntry de, string suggestedAdProperty);
    protected static void UpdateGroupMembership(Principal group, DirectoryEntry de, NetCred credentials, AuthenticationTypes authTypes);
    protected static string GetSidPathFromPrincipal(Principal p);
    protected static void CannotChangePwdToLdapConverter(Principal p, string propertyName, DirectoryEntry de, string suggestedAdProperty);
    protected bool BuildLdapFilterFromIdentityClaim(string urnValue, string urnScheme, String& filter, bool useSidHistory, bool throwOnFail);
}
internal class System.DirectoryServices.AccountManagement.ADStoreKey : StoreKey {
    private Guid _objectGuid;
    private bool _wellKnownSid;
    private string _domainName;
    private Byte[] _sid;
    public ADStoreKey(Guid guid);
    public ADStoreKey(string domainName, Byte[] sid);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
}
internal static class System.DirectoryServices.AccountManagement.ADUtils : object {
    internal static bool IsOfObjectClass(DirectoryEntry de, string classToCompare);
    internal static bool IsOfObjectClass(SearchResult sr, string classToCompare);
    internal static string GetServerName(DirectoryEntry de);
    internal static string EscapeDNComponent(string dnComponent);
    internal static string EscapeRFC2254SpecialChars(string s);
    internal static string PAPIQueryToLdapQueryString(string papiString);
    internal static string EscapeBinaryValue(Byte[] bytes);
    internal static string DateTimeToADString(DateTime dateTime);
    internal static DateTime ADFileTimeToDateTime(long filetime);
    internal static long DateTimeToADFileTime(DateTime dt);
    internal static long LargeIntToInt64(IADsLargeInteger largeInt);
    internal static string HexStringToLdapHexString(string s);
    internal static bool ArePrincipalsInSameForest(Principal p1, Principal p2);
    internal static bool AreSidsInSameDomain(SecurityIdentifier sid1, SecurityIdentifier sid2);
    internal static Principal DirectoryEntryAsPrincipal(DirectoryEntry de, ADStoreCtx storeCtx);
    internal static Principal SearchResultAsPrincipal(SearchResult sr, ADStoreCtx storeCtx, object discriminant);
    internal static bool VerifyOutboundTrust(string targetDomain, string username, string password);
    internal static string RetrieveWkDn(DirectoryEntry deBase, string defaultNamingContext, string serverName, Byte[] wellKnownContainerGuid);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.AccountManagement.AdvancedFilters : object {
    private bool _badPasswordAttemptChanged;
    private QbeMatchType _badPasswordAttemptVal;
    private Principal _p;
    private bool _expirationTimeChanged;
    private QbeMatchType _expirationTimeVal;
    private bool _lockoutTimeChanged;
    private QbeMatchType _lockoutTimeVal;
    private bool _badLogonCountChanged;
    private QbeMatchType _badLogonCountVal;
    private bool _logonTimeChanged;
    private QbeMatchType _logonTimeVal;
    private bool _passwordSetTimeChanged;
    private QbeMatchType _passwordSetTimeVal;
    protected internal AdvancedFilters(Principal p);
    public void LastBadPasswordAttempt(DateTime lastAttempt, MatchType match);
    public void AccountExpirationDate(DateTime expirationTime, MatchType match);
    public void AccountLockoutTime(DateTime lockoutTime, MatchType match);
    public void BadLogonCount(int badLogonCount, MatchType match);
    public void LastLogonTime(DateTime logonTime, MatchType match);
    public void LastPasswordSetTime(DateTime passwordSetTime, MatchType match);
    protected void AdvancedFilterSet(string attribute, object value, Type objectType, MatchType mt);
    internal Nullable`1<bool> GetChangeStatusForProperty(string propertyName);
    internal object GetValueForProperty(string propertyName);
    internal virtual void ResetAllChangeStatus();
}
internal class System.DirectoryServices.AccountManagement.AllowReversiblePasswordEncryptionFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DirectoryRdnPrefixAttribute("CN")]
public class System.DirectoryServices.AccountManagement.AuthenticablePrincipal : Principal {
    private bool _enabled;
    private LoadState _enabledChanged;
    private AccountInfo _accountInfo;
    private PasswordInfo _passwordInfo;
    internal AdvancedFilters rosf;
    private X509Certificate2Collection _certificates;
    private List`1<string> _certificateOriginalThumbprints;
    private LoadState _X509Certificate2CollectionLoaded;
    public Nullable`1<bool> Enabled { get; public set; }
    private AccountInfo AccountInfo { get; }
    public Nullable`1<DateTime> AccountLockoutTime { get; }
    public Nullable`1<DateTime> LastLogon { get; }
    public PrincipalValueCollection`1<string> PermittedWorkstations { get; }
    public Byte[] PermittedLogonTimes { get; public set; }
    public Nullable`1<DateTime> AccountExpirationDate { get; public set; }
    public bool SmartcardLogonRequired { get; public set; }
    public bool DelegationPermitted { get; public set; }
    public int BadLogonCount { get; }
    public string HomeDirectory { get; public set; }
    public string HomeDrive { get; public set; }
    public string ScriptPath { get; public set; }
    private PasswordInfo PasswordInfo { get; }
    public Nullable`1<DateTime> LastPasswordSet { get; }
    public Nullable`1<DateTime> LastBadPasswordAttempt { get; }
    public bool PasswordNotRequired { get; public set; }
    public bool PasswordNeverExpires { get; public set; }
    public bool UserCannotChangePassword { get; public set; }
    public bool AllowReversiblePasswordEncryption { get; public set; }
    public AdvancedFilters AdvancedSearchFilter { get; }
    public X509Certificate2Collection Certificates { get; }
    protected internal AuthenticablePrincipal(PrincipalContext context);
    protected internal AuthenticablePrincipal(PrincipalContext context, string samAccountName, string password, bool enabled);
    public Nullable`1<bool> get_Enabled();
    public void set_Enabled(Nullable`1<bool> value);
    private AccountInfo get_AccountInfo();
    public Nullable`1<DateTime> get_AccountLockoutTime();
    public Nullable`1<DateTime> get_LastLogon();
    public PrincipalValueCollection`1<string> get_PermittedWorkstations();
    public Byte[] get_PermittedLogonTimes();
    public void set_PermittedLogonTimes(Byte[] value);
    public Nullable`1<DateTime> get_AccountExpirationDate();
    public void set_AccountExpirationDate(Nullable`1<DateTime> value);
    public bool get_SmartcardLogonRequired();
    public void set_SmartcardLogonRequired(bool value);
    public bool get_DelegationPermitted();
    public void set_DelegationPermitted(bool value);
    public int get_BadLogonCount();
    public string get_HomeDirectory();
    public void set_HomeDirectory(string value);
    public string get_HomeDrive();
    public void set_HomeDrive(string value);
    public string get_ScriptPath();
    public void set_ScriptPath(string value);
    public bool IsAccountLockedOut();
    public void UnlockAccount();
    private PasswordInfo get_PasswordInfo();
    public Nullable`1<DateTime> get_LastPasswordSet();
    public Nullable`1<DateTime> get_LastBadPasswordAttempt();
    public bool get_PasswordNotRequired();
    public void set_PasswordNotRequired(bool value);
    public bool get_PasswordNeverExpires();
    public void set_PasswordNeverExpires(bool value);
    public bool get_UserCannotChangePassword();
    public void set_UserCannotChangePassword(bool value);
    public bool get_AllowReversiblePasswordEncryption();
    public void set_AllowReversiblePasswordEncryption(bool value);
    public virtual AdvancedFilters get_AdvancedSearchFilter();
    public void SetPassword(string newPassword);
    public void ChangePassword(string oldPassword, string newPassword);
    public void ExpirePasswordNow();
    public void RefreshExpiredPassword();
    public X509Certificate2Collection get_Certificates();
    public static PrincipalSearchResult`1<AuthenticablePrincipal> FindByLockoutTime(PrincipalContext context, DateTime time, MatchType type);
    public static PrincipalSearchResult`1<AuthenticablePrincipal> FindByLogonTime(PrincipalContext context, DateTime time, MatchType type);
    public static PrincipalSearchResult`1<AuthenticablePrincipal> FindByExpirationTime(PrincipalContext context, DateTime time, MatchType type);
    public static PrincipalSearchResult`1<AuthenticablePrincipal> FindByBadPasswordAttempt(PrincipalContext context, DateTime time, MatchType type);
    public static PrincipalSearchResult`1<AuthenticablePrincipal> FindByPasswordSetTime(PrincipalContext context, DateTime time, MatchType type);
    protected static PrincipalSearchResult`1<T> FindByLockoutTime(PrincipalContext context, DateTime time, MatchType type);
    protected static PrincipalSearchResult`1<T> FindByLogonTime(PrincipalContext context, DateTime time, MatchType type);
    protected static PrincipalSearchResult`1<T> FindByExpirationTime(PrincipalContext context, DateTime time, MatchType type);
    protected static PrincipalSearchResult`1<T> FindByBadPasswordAttempt(PrincipalContext context, DateTime time, MatchType type);
    protected static PrincipalSearchResult`1<T> FindByPasswordSetTime(PrincipalContext context, DateTime time, MatchType type);
    internal static AuthenticablePrincipal MakeAuthenticablePrincipal(PrincipalContext ctx);
    private static void CheckFindByArgs(PrincipalContext context, DateTime time, MatchType type, Type subtype);
    internal virtual void LoadValueIntoProperty(string propertyName, object value);
    internal virtual bool GetChangeStatusForProperty(string propertyName);
    internal virtual object GetValueForProperty(string propertyName);
    internal virtual void ResetAllChangeStatus();
    private void LoadCertificateCollection(List`1<Byte[]> certificatesToLoad);
    private void RefreshOriginalThumbprintList();
    private bool HasCertificateCollectionChanged();
}
internal class System.DirectoryServices.AccountManagement.AuthPrincEnabledFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.AuthZSet : ResultSet {
    private SafeMemoryPtr _psUserSid;
    private SafeMemoryPtr _psMachineSid;
    private StoreCtx _userStoreCtx;
    private NetCred _credentials;
    private ContextOptions _contextOptions;
    private ContextType _userType;
    private string _flatUserAuthority;
    private int _currentGroup;
    private SidList _groupSidList;
    private SafeMemoryPtr _psBuffer;
    private bool _disposed;
    private Hashtable _contexts;
    private Nullable`1<bool> _localMachineIsDC;
    internal object CurrentAsPrincipal { get; }
    internal AuthZSet(Byte[] userSid, NetCred credentials, ContextOptions contextOptions, string flatUserAuthority, StoreCtx userStoreCtx, object userCtxBase);
    internal virtual object get_CurrentAsPrincipal();
    internal virtual bool MoveNext();
    internal virtual void Reset();
    public virtual void Dispose();
}
internal class System.DirectoryServices.AccountManagement.BadLogonCountFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.BadPasswordAttemptFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal abstract class System.DirectoryServices.AccountManagement.BookmarkableResultSet : ResultSet {
    internal abstract virtual ResultSetBookmark BookmarkAndReset();
    internal abstract virtual void RestoreBookmark(ResultSetBookmark bookmark);
}
internal class System.DirectoryServices.AccountManagement.CannotChangePasswordFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal static class System.DirectoryServices.AccountManagement.CapabilityMap : object {
    public static string LDAP_CAP_ACTIVE_DIRECTORY_OID;
    public static string LDAP_CAP_ACTIVE_DIRECTORY_V51_OID;
    public static string LDAP_CAP_ACTIVE_DIRECTORY_LDAP_INTEG_OID;
    public static string LDAP_CAP_ACTIVE_DIRECTORY_ADAM_OID;
    public static string LDAP_CAP_ACTIVE_DIRECTORY_PARTIAL_SECRETS_OID;
    public static string LDAP_CAP_ACTIVE_DIRECTORY_V61_OID;
}
internal class System.DirectoryServices.AccountManagement.CertificateFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DirectoryRdnPrefixAttribute("CN")]
public class System.DirectoryServices.AccountManagement.ComputerPrincipal : AuthenticablePrincipal {
    private PrincipalValueCollection`1<string> _servicePrincipalNames;
    private LoadState _servicePrincipalNamesLoaded;
    public PrincipalValueCollection`1<string> ServicePrincipalNames { get; }
    public ComputerPrincipal(PrincipalContext context);
    public ComputerPrincipal(PrincipalContext context, string samAccountName, string password, bool enabled);
    public PrincipalValueCollection`1<string> get_ServicePrincipalNames();
    public static PrincipalSearchResult`1<ComputerPrincipal> FindByLockoutTime(PrincipalContext context, DateTime time, MatchType type);
    public static PrincipalSearchResult`1<ComputerPrincipal> FindByLogonTime(PrincipalContext context, DateTime time, MatchType type);
    public static PrincipalSearchResult`1<ComputerPrincipal> FindByExpirationTime(PrincipalContext context, DateTime time, MatchType type);
    public static PrincipalSearchResult`1<ComputerPrincipal> FindByBadPasswordAttempt(PrincipalContext context, DateTime time, MatchType type);
    public static PrincipalSearchResult`1<ComputerPrincipal> FindByPasswordSetTime(PrincipalContext context, DateTime time, MatchType type);
    public static ComputerPrincipal FindByIdentity(PrincipalContext context, string identityValue);
    public static ComputerPrincipal FindByIdentity(PrincipalContext context, IdentityType identityType, string identityValue);
    internal static ComputerPrincipal MakeComputer(PrincipalContext ctx);
    internal virtual void LoadValueIntoProperty(string propertyName, object value);
    internal virtual bool GetChangeStatusForProperty(string propertyName);
    internal virtual object GetValueForProperty(string propertyName);
    internal virtual void ResetAllChangeStatus();
}
internal class System.DirectoryServices.AccountManagement.ConfigSettings : object {
    private DebugLevel _debugLevel;
    private string _debugLogFile;
    public DebugLevel DebugLevel { get; }
    public string DebugLogFile { get; }
    public ConfigSettings(DebugLevel debugLevel, string debugLogFile);
    public DebugLevel get_DebugLevel();
    public string get_DebugLogFile();
}
internal static class System.DirectoryServices.AccountManagement.Constants : object {
    internal static Byte[] GUID_FOREIGNSECURITYPRINCIPALS_CONTAINER_BYTE;
    private static Constants();
}
[FlagsAttribute]
public enum System.DirectoryServices.AccountManagement.ContextOptions : Enum {
    public int value__;
    public static ContextOptions Negotiate;
    public static ContextOptions SimpleBind;
    public static ContextOptions SecureSocketLayer;
    public static ContextOptions Signing;
    public static ContextOptions Sealing;
    public static ContextOptions ServerBind;
}
public enum System.DirectoryServices.AccountManagement.ContextType : Enum {
    public int value__;
    public static ContextType Machine;
    public static ContextType Domain;
    public static ContextType ApplicationDirectory;
}
[FlagsAttribute]
internal enum System.DirectoryServices.AccountManagement.CredentialTypes : Enum {
    public int value__;
    public static CredentialTypes Password;
    public static CredentialTypes Certificate;
}
internal class System.DirectoryServices.AccountManagement.CredentialValidator : object {
    private bool _fastConcurrentSupported;
    private Hashtable _connCache;
    private LdapDirectoryIdentifier _directoryIdent;
    private object _cacheLock;
    private AuthMethod _lastBindMethod;
    private string _serverName;
    private ContextType _contextType;
    private ServerProperties _serverProperties;
    private static ContextOptions defaultContextOptionsNegotiate;
    private static ContextOptions defaultContextOptionsSimple;
    public CredentialValidator(ContextType contextType, string serverName, ServerProperties serverProperties);
    private bool BindSam(string target, string userName, string password);
    private bool BindLdap(NetworkCredential creds, ContextOptions contextOptions);
    private void lockedLdapBind(LdapConnection current, NetworkCredential creds, ContextOptions contextOptions);
    public bool Validate(string userName, string password);
    public bool Validate(string userName, string password, ContextOptions connectionMethod);
    public sealed virtual void Dispose();
}
internal enum System.DirectoryServices.AccountManagement.DebugLevel : Enum {
    public int value__;
    public static DebugLevel None;
    public static DebugLevel Info;
    public static DebugLevel Warn;
    public static DebugLevel Error;
}
internal static class System.DirectoryServices.AccountManagement.DefaultContextOptions : object {
    internal static ContextOptions MachineDefaultContextOption;
    internal static ContextOptions ADDefaultContextOption;
    private static DefaultContextOptions();
}
internal class System.DirectoryServices.AccountManagement.DelegationPermittedFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.DescriptionFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class System.DirectoryServices.AccountManagement.DirectoryObjectClassAttribute : Attribute {
    private string _objectClass;
    private Nullable`1<ContextType> _context;
    public string ObjectClass { get; }
    public Nullable`1<ContextType> Context { get; }
    public DirectoryObjectClassAttribute(string objectClass);
    public string get_ObjectClass();
    public Nullable`1<ContextType> get_Context();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("128")]
public class System.DirectoryServices.AccountManagement.DirectoryPropertyAttribute : Attribute {
    private string _schemaAttributeName;
    private Nullable`1<ContextType> _context;
    public string SchemaAttributeName { get; }
    public Nullable`1<ContextType> Context { get; public set; }
    public DirectoryPropertyAttribute(string schemaAttributeName);
    public string get_SchemaAttributeName();
    public Nullable`1<ContextType> get_Context();
    public void set_Context(Nullable`1<ContextType> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class System.DirectoryServices.AccountManagement.DirectoryRdnPrefixAttribute : Attribute {
    private string _rdnPrefix;
    private Nullable`1<ContextType> _context;
    public string RdnPrefix { get; }
    public Nullable`1<ContextType> Context { get; }
    public DirectoryRdnPrefixAttribute(string rdnPrefix);
    public string get_RdnPrefix();
    public Nullable`1<ContextType> get_Context();
}
internal class System.DirectoryServices.AccountManagement.DisplayNameFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.DistinguishedNameFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal enum System.DirectoryServices.AccountManagement.DomainControllerMode : Enum {
    public int value__;
    public static DomainControllerMode Win2k;
    public static DomainControllerMode Win2k3;
    public static DomainControllerMode WinLH;
}
[DefaultMemberAttribute("Item")]
internal class System.DirectoryServices.AccountManagement.dSPropertyCollection : object {
    private PropertyCollection _pc;
    private ResultPropertyCollection _rp;
    public dSPropertyValueCollection Item { get; }
    internal dSPropertyCollection(PropertyCollection pc);
    internal dSPropertyCollection(ResultPropertyCollection rp);
    public dSPropertyValueCollection get_Item(string propertyName);
}
[DefaultMemberAttribute("Item")]
internal class System.DirectoryServices.AccountManagement.dSPropertyValueCollection : object {
    private PropertyValueCollection _pc;
    private ResultPropertyValueCollection _rc;
    public object Item { get; }
    public int Count { get; }
    internal dSPropertyValueCollection(PropertyValueCollection pc);
    internal dSPropertyValueCollection(ResultPropertyValueCollection rc);
    public object get_Item(int index);
    public int get_Count();
    public IEnumerator GetEnumerator();
}
internal class System.DirectoryServices.AccountManagement.EmailAddressFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.EmployeeIDFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.EmptySet : BookmarkableResultSet {
    internal object CurrentAsPrincipal { get; }
    internal virtual object get_CurrentAsPrincipal();
    internal virtual bool MoveNext();
    internal virtual void Reset();
    internal virtual ResultSetBookmark BookmarkAndReset();
    internal virtual void RestoreBookmark(ResultSetBookmark bookmark);
}
internal class System.DirectoryServices.AccountManagement.EmptySetBookmark : ResultSetBookmark {
}
internal static class System.DirectoryServices.AccountManagement.ExceptionHelper : object {
    private static int ERROR_NOT_ENOUGH_MEMORY;
    private static int ERROR_OUTOFMEMORY;
    private static int ERROR_DS_DRA_OUT_OF_MEM;
    private static int ERROR_NO_SUCH_DOMAIN;
    private static int ERROR_ACCESS_DENIED;
    private static int ERROR_NO_LOGON_SERVERS;
    private static int ERROR_DS_DRA_ACCESS_DENIED;
    private static int RPC_S_OUT_OF_RESOURCES;
    internal static int RPC_S_SERVER_UNAVAILABLE;
    internal static int RPC_S_CALL_FAILED;
    public static UInt32 ERROR_HRESULT_LOGON_FAILURE;
    public static UInt32 ERROR_HRESULT_CONSTRAINT_VIOLATION;
    public static UInt32 ERROR_LOGON_FAILURE;
    internal static Exception GetExceptionFromCOMException(COMException e);
    internal static Exception GetExceptionFromErrorCode(int errorCode);
    internal static Exception GetExceptionFromErrorCode(int errorCode, string targetName);
    internal static string GetErrorMessage(int errorCode, bool hresult);
}
internal enum System.DirectoryServices.AccountManagement.ExpansionMode : Enum {
    public int value__;
    public static ExpansionMode Enum;
    public static ExpansionMode ASQ;
}
internal class System.DirectoryServices.AccountManagement.ExpirationDateFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.ExpiredAccountFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.ExtensionCache : object {
    private Dictionary`2<string, ExtensionCacheValue> _cache;
    internal Dictionary`2<string, ExtensionCacheValue> properties { get; }
    internal bool TryGetValue(string attr, ExtensionCacheValue& o);
    internal Dictionary`2<string, ExtensionCacheValue> get_properties();
}
internal class System.DirectoryServices.AccountManagement.ExtensionCacheFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.ExtensionCacheValue : object {
    private Object[] _value;
    private bool _filterOnly;
    private Type _type;
    private MatchType _matchType;
    internal Object[] Value { get; }
    internal bool Filter { get; }
    internal Type Type { get; }
    internal MatchType MatchType { get; }
    internal ExtensionCacheValue(Object[] value);
    internal ExtensionCacheValue(Object[] value, Type type, MatchType matchType);
    internal Object[] get_Value();
    internal bool get_Filter();
    internal Type get_Type();
    internal MatchType get_MatchType();
}
internal class System.DirectoryServices.AccountManagement.ExtensionHelper : object {
    private Principal _p;
    internal string RdnPrefix { get; }
    internal string StructuralObjectClass { get; }
    internal ExtensionHelper(Principal p);
    internal string get_RdnPrefix();
    internal static string ReadStructuralObjectClass(Type principalType);
    internal string get_StructuralObjectClass();
}
internal abstract class System.DirectoryServices.AccountManagement.FilterBase : object {
    private object _value;
    private object _extra;
    public object Value { get; public set; }
    public object Extra { get; public set; }
    public string PropertyName { get; }
    public object get_Value();
    public void set_Value(object value);
    public object get_Extra();
    public void set_Extra(object value);
    public abstract virtual string get_PropertyName();
}
internal static class System.DirectoryServices.AccountManagement.FilterFactory : object {
    private static Hashtable s_subclasses;
    private static FilterFactory();
    public static object CreateFilter(string propertyName);
}
internal class System.DirectoryServices.AccountManagement.FindByDateMatcher : SAMMatcher {
    private DateProperty _propertyToMatch;
    private MatchType _matchType;
    private DateTime _valueToMatch;
    internal FindByDateMatcher(DateProperty property, MatchType matchType, DateTime value);
    internal virtual bool Matches(DirectoryEntry de);
    private bool MatchOnLogonTime(DirectoryEntry de);
    private bool MatchOnAccountExpirationTime(DirectoryEntry de);
    private bool MatchOnPasswordSetTime(DirectoryEntry de);
    private bool TestForMatch(Nullable`1<DateTime> nullableStoreValue);
}
internal class System.DirectoryServices.AccountManagement.FindResultEnumerator`1 : object {
    private ResultSet _resultSet;
    private bool _beforeStart;
    private bool _endReached;
    private bool _disposed;
    public T Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal FindResultEnumerator`1(ResultSet resultSet);
    public sealed virtual T get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public bool MoveNext();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    public void Reset();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    public sealed virtual void Dispose();
    private void CheckDisposed();
}
internal class System.DirectoryServices.AccountManagement.GivenNameFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal static class System.DirectoryServices.AccountManagement.GlobalConfig : object {
    public static DebugLevel DefaultDebugLevel;
    private static ConfigSettings s_configSettings;
    public static DebugLevel DebugLevel { get; }
    public static string DebugLogFile { get; }
    private static GlobalConfig();
    public static DebugLevel get_DebugLevel();
    public static string get_DebugLogFile();
}
internal static class System.DirectoryServices.AccountManagement.GlobalDebug : object {
    private static DebugLevel s_debugLevel;
    public static bool Error { get; }
    public static bool Warn { get; }
    public static bool Info { get; }
    private static GlobalDebug();
    public static bool get_Error();
    public static bool get_Warn();
    public static bool get_Info();
    [ConditionalAttribute("DEBUG")]
public static void WriteLineIf(bool f, string category, string message, Object[] args);
    [ConditionalAttribute("DEBUG")]
public static void WriteLineIf(bool f, string category, string message);
}
internal class System.DirectoryServices.AccountManagement.GroupIsSecurityGroupFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.GroupMemberMatcher : SAMMatcher {
    private Byte[] _memberSidToMatch;
    internal GroupMemberMatcher(Byte[] memberSidToMatch);
    internal virtual bool Matches(DirectoryEntry groupDE);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DirectoryRdnPrefixAttribute("CN")]
public class System.DirectoryServices.AccountManagement.GroupPrincipal : Principal {
    private bool _isSecurityGroup;
    private LoadState _isSecurityGroupChanged;
    private GroupScope _groupScope;
    private LoadState _groupScopeChanged;
    private PrincipalCollection _members;
    private bool _disposed;
    private Nullable`1<bool> _isSmallGroup;
    [CompilerGeneratedAttribute]
private SearchResult <SmallGroupMemberSearchResult>k__BackingField;
    public Nullable`1<bool> IsSecurityGroup { get; public set; }
    public Nullable`1<GroupScope> GroupScope { get; public set; }
    public PrincipalCollection Members { get; }
    internal SearchResult SmallGroupMemberSearchResult { get; private set; }
    public GroupPrincipal(PrincipalContext context);
    public GroupPrincipal(PrincipalContext context, string samAccountName);
    public Nullable`1<bool> get_IsSecurityGroup();
    public void set_IsSecurityGroup(Nullable`1<bool> value);
    public Nullable`1<GroupScope> get_GroupScope();
    public void set_GroupScope(Nullable`1<GroupScope> value);
    public PrincipalCollection get_Members();
    public static GroupPrincipal FindByIdentity(PrincipalContext context, string identityValue);
    public static GroupPrincipal FindByIdentity(PrincipalContext context, IdentityType identityType, string identityValue);
    public PrincipalSearchResult`1<Principal> GetMembers();
    public PrincipalSearchResult`1<Principal> GetMembers(bool recursive);
    public virtual void Dispose();
    internal static GroupPrincipal MakeGroup(PrincipalContext ctx);
    internal virtual void LoadValueIntoProperty(string propertyName, object value);
    internal virtual bool GetChangeStatusForProperty(string propertyName);
    internal virtual object GetValueForProperty(string propertyName);
    internal virtual void ResetAllChangeStatus();
    [CompilerGeneratedAttribute]
internal SearchResult get_SmallGroupMemberSearchResult();
    [CompilerGeneratedAttribute]
private void set_SmallGroupMemberSearchResult(SearchResult value);
    internal bool IsSmallGroup();
}
public enum System.DirectoryServices.AccountManagement.GroupScope : Enum {
    public int value__;
    public static GroupScope Local;
    public static GroupScope Global;
    public static GroupScope Universal;
}
internal class System.DirectoryServices.AccountManagement.GroupScopeFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.GuidFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.HomeDirectoryFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.HomeDriveFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.IdentityClaim : object {
    private string _urnValue;
    private string _urnScheme;
    public string UrnValue { get; public set; }
    public string UrnScheme { get; public set; }
    public string get_UrnValue();
    public void set_UrnValue(string value);
    public string get_UrnScheme();
    public void set_UrnScheme(string value);
}
internal class System.DirectoryServices.AccountManagement.IdentityClaimFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.IdentityReference : object {
    private string _urnValue;
    private string _urnScheme;
    public string UrnValue { get; public set; }
    public string UrnScheme { get; public set; }
    public string get_UrnValue();
    public void set_UrnValue(string value);
    public string get_UrnScheme();
    public void set_UrnScheme(string value);
}
public enum System.DirectoryServices.AccountManagement.IdentityType : Enum {
    public int value__;
    public static IdentityType SamAccountName;
    public static IdentityType Name;
    public static IdentityType UserPrincipalName;
    public static IdentityType DistinguishedName;
    public static IdentityType Sid;
    public static IdentityType Guid;
}
internal static class System.DirectoryServices.AccountManagement.IdentityTypeStringMap : object {
    public static string Guid;
    public static string Sid;
    public static string DistinguishedName;
    public static string SamAccount;
    public static string Upn;
    public static string Name;
}
internal static class System.DirectoryServices.AccountManagement.IdentMap : object {
    internal static Object[0...,0...] StringMap;
    private static IdentMap();
}
internal class System.DirectoryServices.AccountManagement.LastLogonTimeFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal static class System.DirectoryServices.AccountManagement.LdapConstants : object {
    public static int LDAP_SSL_PORT;
    public static int LDAP_PORT;
    internal static DateTime defaultUtcTime;
    private static LdapConstants();
}
internal enum System.DirectoryServices.AccountManagement.LoadState : Enum {
    public int value__;
    public static LoadState NotSet;
    public static LoadState Loaded;
    public static LoadState Changed;
}
internal class System.DirectoryServices.AccountManagement.LockoutTimeFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
public enum System.DirectoryServices.AccountManagement.MatchType : Enum {
    public int value__;
    public static MatchType Equals;
    public static MatchType NotEquals;
    public static MatchType GreaterThan;
    public static MatchType GreaterThanOrEquals;
    public static MatchType LessThan;
    public static MatchType LessThanOrEquals;
}
internal class System.DirectoryServices.AccountManagement.MiddleNameFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("System.DirectoryServices.AccountManagement, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.DirectoryServices.AccountManagement.MultipleMatchesException : PrincipalException {
    public MultipleMatchesException(string message);
    public MultipleMatchesException(string message, Exception innerException);
    protected MultipleMatchesException(SerializationInfo info, StreamingContext context);
}
internal class System.DirectoryServices.AccountManagement.NameFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.NetCred : object {
    private string _username;
    private string _password;
    private string _domainname;
    private string _parsedUserName;
    public string UserName { get; }
    public string Password { get; }
    public string ParsedUserName { get; }
    public string Domain { get; }
    public NetCred(string username, string password);
    public string get_UserName();
    public string get_Password();
    public string get_ParsedUserName();
    public string get_Domain();
    private void SplitUsername(string username, String& parsedUserName, String& parsedDomainName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("System.DirectoryServices.AccountManagement, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.DirectoryServices.AccountManagement.NoMatchingPrincipalException : PrincipalException {
    public NoMatchingPrincipalException(string message);
    public NoMatchingPrincipalException(string message, Exception innerException);
    protected NoMatchingPrincipalException(SerializationInfo info, StreamingContext context);
}
internal class System.DirectoryServices.AccountManagement.Pair`2 : object {
    private J _left;
    private K _right;
    internal J Left { get; internal set; }
    internal K Right { get; internal set; }
    internal Pair`2(J left, K right);
    internal J get_Left();
    internal void set_Left(J value);
    internal K get_Right();
    internal void set_Right(K value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("System.DirectoryServices.AccountManagement, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.DirectoryServices.AccountManagement.PasswordException : PrincipalException {
    public PasswordException(string message);
    public PasswordException(string message, Exception innerException);
    protected PasswordException(SerializationInfo info, StreamingContext context);
}
internal class System.DirectoryServices.AccountManagement.PasswordInfo : object {
    private Nullable`1<DateTime> _lastPasswordSet;
    private LoadState _lastPasswordSetLoaded;
    private Nullable`1<DateTime> _lastBadPasswordAttempt;
    private LoadState _lastBadPasswordAttemptLoaded;
    private bool _passwordNotRequired;
    private LoadState _passwordNotRequiredChanged;
    private bool _passwordNeverExpires;
    private LoadState _passwordNeverExpiresChanged;
    private bool _cannotChangePassword;
    private LoadState _cannotChangePasswordChanged;
    private bool _cannotChangePasswordRead;
    private bool _allowReversiblePasswordEncryption;
    private LoadState _allowReversiblePasswordEncryptionChanged;
    private string _storedNewPassword;
    private bool _expirePasswordImmediately;
    private AuthenticablePrincipal _owningPrincipal;
    public Nullable`1<DateTime> LastPasswordSet { get; }
    public Nullable`1<DateTime> LastBadPasswordAttempt { get; }
    public bool PasswordNotRequired { get; public set; }
    public bool PasswordNeverExpires { get; public set; }
    public bool UserCannotChangePassword { get; public set; }
    public bool AllowReversiblePasswordEncryption { get; public set; }
    internal PasswordInfo(AuthenticablePrincipal principal);
    public Nullable`1<DateTime> get_LastPasswordSet();
    public Nullable`1<DateTime> get_LastBadPasswordAttempt();
    public bool get_PasswordNotRequired();
    public void set_PasswordNotRequired(bool value);
    public bool get_PasswordNeverExpires();
    public void set_PasswordNeverExpires(bool value);
    public bool get_UserCannotChangePassword();
    public void set_UserCannotChangePassword(bool value);
    public bool get_AllowReversiblePasswordEncryption();
    public void set_AllowReversiblePasswordEncryption(bool value);
    public void SetPassword(string newPassword);
    public void ChangePassword(string oldPassword, string newPassword);
    public void ExpirePasswordNow();
    public void RefreshExpiredPassword();
    internal void LoadValueIntoProperty(string propertyName, object value);
    internal bool GetChangeStatusForProperty(string propertyName);
    internal object GetValueForProperty(string propertyName);
    internal void ResetAllChangeStatus();
}
internal class System.DirectoryServices.AccountManagement.PasswordNeverExpiresFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.PasswordNotRequiredFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.PasswordSetTimeFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.PermittedLogonTimesFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.PermittedWorkstationFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Name ( {Name} )")]
public abstract class System.DirectoryServices.AccountManagement.Principal : object {
    [DebuggerBrowsableAttribute("0")]
private string _description;
    [DebuggerBrowsableAttribute("0")]
private LoadState _descriptionChanged;
    [DebuggerBrowsableAttribute("0")]
private string _displayName;
    [DebuggerBrowsableAttribute("0")]
private LoadState _displayNameChanged;
    [DebuggerBrowsableAttribute("0")]
private string _samName;
    [DebuggerBrowsableAttribute("0")]
private LoadState _samNameChanged;
    [DebuggerBrowsableAttribute("0")]
private string _userPrincipalName;
    [DebuggerBrowsableAttribute("0")]
private LoadState _userPrincipalNameChanged;
    [DebuggerBrowsableAttribute("0")]
private SecurityIdentifier _sid;
    [DebuggerBrowsableAttribute("0")]
private LoadState _sidChanged;
    [DebuggerBrowsableAttribute("0")]
private Nullable`1<Guid> _guid;
    [DebuggerBrowsableAttribute("0")]
private LoadState _guidChanged;
    [DebuggerBrowsableAttribute("0")]
private string _distinguishedName;
    [DebuggerBrowsableAttribute("0")]
private LoadState _distinguishedNameChanged;
    [DebuggerBrowsableAttribute("0")]
private string _structuralObjectClass;
    [DebuggerBrowsableAttribute("0")]
private LoadState _structuralObjectClassChanged;
    [DebuggerBrowsableAttribute("0")]
private string _name;
    [DebuggerBrowsableAttribute("0")]
private LoadState _nameChanged;
    private ExtensionHelper _extensionHelper;
    private ExtensionCache _extensionCache;
    private LoadState _extensionCacheChanged;
    internal bool unpersisted;
    private bool _isDeleted;
    private bool _loaded;
    internal bool fakePrincipal;
    private PrincipalContext _ctx;
    private object _underlyingObject;
    private object _underlyingSearchObject;
    private object _discriminant;
    private StoreKey _key;
    private bool _disposed;
    public PrincipalContext Context { get; }
    public ContextType ContextType { get; }
    public string Description { get; public set; }
    public string DisplayName { get; public set; }
    public string SamAccountName { get; public set; }
    public string UserPrincipalName { get; public set; }
    public SecurityIdentifier Sid { get; }
    public Nullable`1<Guid> Guid { get; }
    public string DistinguishedName { get; }
    public string StructuralObjectClass { get; }
    public string Name { get; public set; }
    [DebuggerBrowsableAttribute("0")]
internal ExtensionHelper ExtensionHelper { get; }
    internal bool Loaded { get; internal set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
protected internal PrincipalContext ContextRaw { get; protected internal set; }
    internal object UnderlyingObject { get; internal set; }
    internal object UnderlyingSearchObject { get; internal set; }
    internal object Discriminant { get; internal set; }
    internal StoreKey Key { get; internal set; }
    public virtual string ToString();
    public PrincipalContext get_Context();
    public ContextType get_ContextType();
    public string get_Description();
    public void set_Description(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_SamAccountName();
    public void set_SamAccountName(string value);
    public string get_UserPrincipalName();
    public void set_UserPrincipalName(string value);
    public SecurityIdentifier get_Sid();
    public Nullable`1<Guid> get_Guid();
    public string get_DistinguishedName();
    public string get_StructuralObjectClass();
    public string get_Name();
    public void set_Name(string value);
    internal ExtensionHelper get_ExtensionHelper();
    public static Principal FindByIdentity(PrincipalContext context, string identityValue);
    public static Principal FindByIdentity(PrincipalContext context, IdentityType identityType, string identityValue);
    public void Save();
    public void Save(PrincipalContext context);
    public void Delete();
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public object GetUnderlyingObject();
    public Type GetUnderlyingObjectType();
    public PrincipalSearchResult`1<Principal> GetGroups();
    public PrincipalSearchResult`1<Principal> GetGroups(PrincipalContext contextToQuery);
    public bool IsMemberOf(GroupPrincipal group);
    public bool IsMemberOf(PrincipalContext context, IdentityType identityType, string identityValue);
    public virtual void Dispose();
    protected Object[] ExtensionGet(string attribute);
    private void ValidateExtensionObject(object value);
    protected void ExtensionSet(string attribute, object value);
    internal void AdvancedFilterSet(string attribute, object value, Type objectType, MatchType mt);
    internal bool get_Loaded();
    internal void set_Loaded(bool value);
    protected internal PrincipalContext get_ContextRaw();
    protected internal void set_ContextRaw(PrincipalContext value);
    internal static Principal MakePrincipal(PrincipalContext ctx, Type principalType);
    internal StoreCtx GetStoreCtxToUse();
    internal object get_UnderlyingObject();
    internal void set_UnderlyingObject(object value);
    internal object get_UnderlyingSearchObject();
    internal void set_UnderlyingSearchObject(object value);
    internal object get_Discriminant();
    internal void set_Discriminant(object value);
    internal StoreKey get_Key();
    internal void set_Key(StoreKey value);
    [EditorBrowsableAttribute("2")]
protected void CheckDisposedOrDeleted();
    [EditorBrowsableAttribute("2")]
protected static Principal FindByIdentityWithType(PrincipalContext context, Type principalType, string identityValue);
    [EditorBrowsableAttribute("2")]
protected static Principal FindByIdentityWithType(PrincipalContext context, Type principalType, IdentityType identityType, string identityValue);
    private static Principal FindByIdentityWithTypeHelper(PrincipalContext context, Type principalType, Nullable`1<IdentityType> identityType, string identityValue, DateTime refDate);
    private ResultSet GetGroupsHelper();
    private ResultSet GetGroupsHelper(PrincipalContext contextToQuery);
    internal void LoadIfNeeded(string principalPropertyName);
    internal void CheckFakePrincipal();
    internal T HandleGet(T& currentValue, string name, LoadState& state);
    internal void HandleSet(T& currentValue, T newValue, LoadState& state, string name);
    internal virtual void LoadValueIntoProperty(string propertyName, object value);
    internal virtual bool GetChangeStatusForProperty(string propertyName);
    internal virtual object GetValueForProperty(string propertyName);
    internal virtual void ResetAllChangeStatus();
}
internal enum System.DirectoryServices.AccountManagement.PrincipalAccessMask : Enum {
    public int value__;
    public static PrincipalAccessMask ChangePassword;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.AccountManagement.PrincipalCollection : object {
    private GroupPrincipal _owningGroup;
    private BookmarkableResultSet _resultSet;
    private List`1<Principal> _insertedValuesCompleted;
    private List`1<Principal> _insertedValuesPending;
    private List`1<Principal> _removedValuesCompleted;
    private List`1<Principal> _removedValuesPending;
    private bool _clearPending;
    private bool _clearCompleted;
    private DateTime _lastChange;
    private bool _disposed;
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public bool IsReadOnly { get; }
    public int Count { get; }
    internal bool ClearCompleted { get; }
    internal DateTime LastChange { get; }
    internal List`1<Principal> Inserted { get; }
    internal List`1<Principal> Removed { get; }
    internal bool Cleared { get; }
    internal bool Changed { get; }
    internal PrincipalCollection(BookmarkableResultSet results, GroupPrincipal owningGroup);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public bool get_IsSynchronized();
    public object get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void CopyTo(Principal[] array, int index);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<Principal> GetEnumerator();
    public void Add(UserPrincipal user);
    public void Add(GroupPrincipal group);
    public void Add(ComputerPrincipal computer);
    public sealed virtual void Add(Principal principal);
    public void Add(PrincipalContext context, IdentityType identityType, string identityValue);
    public sealed virtual void Clear();
    public bool Remove(UserPrincipal user);
    public bool Remove(GroupPrincipal group);
    public bool Remove(ComputerPrincipal computer);
    public sealed virtual bool Remove(Principal principal);
    public bool Remove(PrincipalContext context, IdentityType identityType, string identityValue);
    private bool ContainsEnumTest(Principal principal);
    private bool ContainsNativeTest(Principal principal);
    public bool Contains(UserPrincipal user);
    public bool Contains(GroupPrincipal group);
    public bool Contains(ComputerPrincipal computer);
    public sealed virtual bool Contains(Principal principal);
    public bool Contains(PrincipalContext context, IdentityType identityType, string identityValue);
    internal void Dispose();
    internal bool get_ClearCompleted();
    internal DateTime get_LastChange();
    internal void MarkChange();
    private void CheckDisposed();
    internal List`1<Principal> get_Inserted();
    internal List`1<Principal> get_Removed();
    internal bool get_Cleared();
    internal bool get_Changed();
    internal void ResetTracking();
}
internal class System.DirectoryServices.AccountManagement.PrincipalCollectionEnumerator : object {
    private Principal _current;
    private ResultSet _resultSet;
    private List`1<Principal> _insertedValuesPending;
    private List`1<Principal> _insertedValuesCompleted;
    private List`1<Principal> _removedValuesPending;
    private List`1<Principal> _removedValuesCompleted;
    private bool _endReached;
    private IEnumerator`1<Principal> _enumerator;
    private CurrentEnumeratorMode _currentMode;
    private bool _disposed;
    private DateTime _creationTime;
    private PrincipalCollection _memberCollection;
    public Principal Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal PrincipalCollectionEnumerator(ResultSet resultSet, PrincipalCollection memberCollection, List`1<Principal> removedValuesCompleted, List`1<Principal> removedValuesPending, List`1<Principal> insertedValuesCompleted, List`1<Principal> insertedValuesPending);
    public sealed virtual Principal get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public bool MoveNext();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    public void Reset();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    public sealed virtual void Dispose();
    private void CheckDisposed();
    private void CheckChanged();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.AccountManagement.PrincipalContext : object {
    private bool _initialized;
    private object _initializationLock;
    private bool _disposed;
    private string _username;
    private string _password;
    private CredentialValidator _credValidate;
    private ServerProperties _serverProperties;
    private string _name;
    private string _container;
    private ContextOptions _options;
    private ContextType _contextType;
    private string _connectedServer;
    private StoreCtx _userCtx;
    private StoreCtx _computerCtx;
    private StoreCtx _groupCtx;
    private StoreCtx _queryCtx;
    public ContextType ContextType { get; }
    public string Name { get; }
    public string Container { get; }
    public string UserName { get; }
    public ContextOptions Options { get; }
    public string ConnectedServer { get; }
    internal bool Disposed { get; }
    internal ServerProperties ServerInformation { get; }
    internal StoreCtx QueryCtx { get; internal set; }
    public PrincipalContext(ContextType contextType);
    public PrincipalContext(ContextType contextType, string name);
    public PrincipalContext(ContextType contextType, string name, string container);
    public PrincipalContext(ContextType contextType, string name, string container, ContextOptions options);
    public PrincipalContext(ContextType contextType, string name, string userName, string password);
    public PrincipalContext(ContextType contextType, string name, string container, string userName, string password);
    public PrincipalContext(ContextType contextType, string name, string container, ContextOptions options, string userName, string password);
    public ContextType get_ContextType();
    public string get_Name();
    public string get_Container();
    public string get_UserName();
    public ContextOptions get_Options();
    public string get_ConnectedServer();
    public bool ValidateCredentials(string userName, string password);
    public bool ValidateCredentials(string userName, string password, ContextOptions options);
    private void Initialize();
    private void DoApplicationDirectoryInit();
    private void DoMachineInit();
    private void DoDomainInit();
    private void DoServerVerifyAndPropRetrieval();
    private void DoLDAPDirectoryInit();
    private void DoLDAPDirectoryInitNoContainer();
    public sealed virtual void Dispose();
    internal bool get_Disposed();
    internal ServerProperties get_ServerInformation();
    internal StoreCtx get_QueryCtx();
    internal void set_QueryCtx(StoreCtx value);
    internal void ReadServerConfig(string serverName, ServerProperties& properties);
    private StoreCtx CreateContextFromDirectoryEntry(DirectoryEntry entry);
    internal void CheckDisposed();
    private static ContextOptions GetDefaultOptionForStore(ContextType storeType);
    internal StoreCtx ContextForType(Type t);
}
[TypeForwardedFromAttribute("System.DirectoryServices.AccountManagement, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public abstract class System.DirectoryServices.AccountManagement.PrincipalException : SystemException {
    internal PrincipalException(string message);
    internal PrincipalException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected PrincipalException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("System.DirectoryServices.AccountManagement, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.DirectoryServices.AccountManagement.PrincipalExistsException : PrincipalException {
    public PrincipalExistsException(string message);
    public PrincipalExistsException(string message, Exception innerException);
    protected PrincipalExistsException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("System.DirectoryServices.AccountManagement, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.DirectoryServices.AccountManagement.PrincipalOperationException : PrincipalException {
    private int _errorCode;
    public int ErrorCode { get; }
    public PrincipalOperationException(string message);
    public PrincipalOperationException(string message, Exception innerException);
    public PrincipalOperationException(string message, int errorCode);
    public PrincipalOperationException(string message, Exception innerException, int errorCode);
    protected PrincipalOperationException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public int get_ErrorCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.AccountManagement.PrincipalSearcher : object {
    private PrincipalContext _ctx;
    private bool _disposed;
    private Principal _qbeFilter;
    private int _pageSize;
    private object _underlyingSearcher;
    public PrincipalContext Context { get; }
    public Principal QueryFilter { get; public set; }
    internal int PageSize { get; }
    internal object UnderlyingSearcher { get; internal set; }
    public PrincipalSearcher(Principal queryFilter);
    public PrincipalContext get_Context();
    public Principal get_QueryFilter();
    public void set_QueryFilter(Principal value);
    public PrincipalSearchResult`1<Principal> FindAll();
    public Principal FindOne();
    public object GetUnderlyingSearcher();
    public Type GetUnderlyingSearcherType();
    public virtual void Dispose();
    internal int get_PageSize();
    internal object get_UnderlyingSearcher();
    internal void set_UnderlyingSearcher(object value);
    private PrincipalSearchResult`1<Principal> FindAll(bool returnOne);
    private void SetDefaultPageSizeForContext();
    private bool HasReferentialPropertiesSet();
    private void CheckDisposed();
}
public class System.DirectoryServices.AccountManagement.PrincipalSearchResult`1 : object {
    private ResultSet _resultSet;
    private bool _disposed;
    internal PrincipalSearchResult`1(ResultSet resultSet);
    [NullableContextAttribute("1")]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Dispose();
    private void CheckDisposed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("System.DirectoryServices.AccountManagement, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.DirectoryServices.AccountManagement.PrincipalServerDownException : PrincipalException {
    private int _errorCode;
    private string _serverName;
    public PrincipalServerDownException(string message);
    public PrincipalServerDownException(string message, Exception innerException);
    public PrincipalServerDownException(string message, int errorCode);
    public PrincipalServerDownException(string message, Exception innerException, int errorCode);
    public PrincipalServerDownException(string message, Exception innerException, int errorCode, string serverName);
    protected PrincipalServerDownException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.AccountManagement.PrincipalValueCollection`1 : object {
    private TrackedCollection`1<T> _inner;
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public T Item { get; public set; }
    public int Count { get; }
    internal List`1<T> Inserted { get; }
    internal List`1<T> Removed { get; }
    internal List`1<Pair`2<T, T>> ChangedValues { get; }
    internal bool Changed { get; }
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public bool get_IsSynchronized();
    public object get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(T value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T value);
    public sealed virtual int IndexOf(T value);
    public sealed virtual void Insert(int index, T value);
    public sealed virtual bool Remove(T value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual void CopyTo(T[] array, int index);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    internal void Load(List`1<T> values);
    internal List`1<T> get_Inserted();
    internal List`1<T> get_Removed();
    internal List`1<Pair`2<T, T>> get_ChangedValues();
    internal bool get_Changed();
    internal void ResetTracking();
}
internal static class System.DirectoryServices.AccountManagement.PropertyNames : object {
    internal static string PrincipalDisplayName;
    internal static string PrincipalDescription;
    internal static string PrincipalSamAccountName;
    internal static string PrincipalUserPrincipalName;
    internal static string PrincipalGuid;
    internal static string PrincipalSid;
    internal static string PrincipalIdentityClaims;
    internal static string PrincipalDistinguishedName;
    internal static string PrincipalStructuralObjectClass;
    internal static string PrincipalName;
    internal static string PrincipalExtensionCache;
    internal static string AuthenticablePrincipalEnabled;
    internal static string AuthenticablePrincipalCertificates;
    internal static string GroupIsSecurityGroup;
    internal static string GroupGroupScope;
    internal static string GroupMembers;
    internal static string UserGivenName;
    internal static string UserMiddleName;
    internal static string UserSurname;
    internal static string UserEmailAddress;
    internal static string UserVoiceTelephoneNumber;
    internal static string UserEmployeeID;
    internal static string ComputerServicePrincipalNames;
    internal static string AcctInfoPrefix;
    internal static string AcctInfoAcctLockoutTime;
    internal static string AcctInfoLastLogon;
    internal static string AcctInfoPermittedWorkstations;
    internal static string AcctInfoPermittedLogonTimes;
    internal static string AcctInfoExpirationDate;
    internal static string AcctInfoSmartcardRequired;
    internal static string AcctInfoDelegationPermitted;
    internal static string AcctInfoBadLogonCount;
    internal static string AcctInfoHomeDirectory;
    internal static string AcctInfoHomeDrive;
    internal static string AcctInfoScriptPath;
    internal static string AcctInfoExpiredAccount;
    internal static string PwdInfoPrefix;
    internal static string PwdInfoLastPasswordSet;
    internal static string PwdInfoLastBadPasswordAttempt;
    internal static string PwdInfoPasswordNotRequired;
    internal static string PwdInfoPasswordNeverExpires;
    internal static string PwdInfoCannotChangePassword;
    internal static string PwdInfoAllowReversiblePasswordEncryption;
    internal static string PwdInfoPassword;
    internal static string PwdInfoExpireImmediately;
}
internal static class System.DirectoryServices.AccountManagement.PropertyNamesExternal : object {
    private static int s_acctInfoPrefixLength;
    private static int s_pwdInfoPrefixLength;
    private static PropertyNamesExternal();
    internal static string GetExternalForm(string propertyName);
}
internal class System.DirectoryServices.AccountManagement.QbeFilterDescription : object {
    private ArrayList _filtersToApply;
    public ArrayList FiltersToApply { get; }
    public ArrayList get_FiltersToApply();
}
internal class System.DirectoryServices.AccountManagement.QbeMatcher : SAMMatcher {
    private QbeFilterDescription _propertiesToMatch;
    private static Object[0...,0...] s_filterPropertiesTableRaw;
    private static Hashtable s_filterPropertiesTable;
    internal QbeMatcher(QbeFilterDescription propertiesToMatch);
    private static QbeMatcher();
    private static Hashtable CreateFilterPropertiesTable();
    internal virtual bool Matches(DirectoryEntry de);
    private static bool WildcardStringMatch(FilterBase filter, string wildcardFilter, string property);
    private static bool DateTimeMatcher(FilterBase filter, string winNTPropertyName, DirectoryEntry de);
    private static bool StringMatcher(FilterBase filter, string winNTPropertyName, DirectoryEntry de);
    private static bool IntMatcher(FilterBase filter, string winNTPropertyName, DirectoryEntry de);
    private static bool SamAccountNameMatcher(FilterBase filter, string winNTPropertyName, DirectoryEntry de);
    private static bool SidMatcher(FilterBase filter, string winNTPropertyName, DirectoryEntry de);
    private static bool UserFlagsMatcher(FilterBase filter, string winNTPropertyName, DirectoryEntry de);
    private static bool MultiStringMatcher(FilterBase filter, string winNTPropertyName, DirectoryEntry de);
    private static bool BinaryMatcher(FilterBase filter, string winNTPropertyName, DirectoryEntry de);
    private static bool ExpirationDateMatcher(FilterBase filter, string winNTPropertyName, DirectoryEntry de);
    private static bool GroupTypeMatcher(FilterBase filter, string winNTPropertyName, DirectoryEntry de);
}
internal class System.DirectoryServices.AccountManagement.QbeMatchType : object {
    private object _value;
    private MatchType _matchType;
    internal object Value { get; internal set; }
    internal MatchType Match { get; internal set; }
    internal QbeMatchType(object value, MatchType matchType);
    internal object get_Value();
    internal void set_Value(object value);
    internal MatchType get_Match();
    internal void set_Match(MatchType value);
}
internal class System.DirectoryServices.AccountManagement.RangeRetriever : CollectionBase {
    private bool _disposed;
    private bool _disposeDirEntry;
    private bool _cacheValues;
    private DirectoryEntry _de;
    private string _propertyName;
    private bool _endReached;
    private int _lowRange;
    private int _currentIndex;
    private bool _cacheFilled;
    private object _currentResult;
    private IEnumerator _currentEnumerator;
    unknown bool CacheValues {public set; }
    public object Current { get; }
    public RangeRetriever(DirectoryEntry de, string propertyName, bool disposeDirEntry);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void Reset();
    public sealed virtual bool MoveNext();
    private sealed virtual override void System.IDisposable.Dispose();
    private IEnumerator GetNextChunk();
    public void set_CacheValues(bool value);
    public sealed virtual object get_Current();
}
internal static class System.DirectoryServices.AccountManagement.ReferentialProperties : object {
    internal static Hashtable Properties;
    private static ReferentialProperties();
}
internal abstract class System.DirectoryServices.AccountManagement.ResultSet : object {
    internal object CurrentAsPrincipal { get; }
    internal abstract virtual object get_CurrentAsPrincipal();
    internal abstract virtual bool MoveNext();
    internal abstract virtual void Reset();
    public virtual void Dispose();
}
internal abstract class System.DirectoryServices.AccountManagement.ResultSetBookmark : object {
}
internal class System.DirectoryServices.AccountManagement.SamAccountNameFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.SAMGroupsSet : ResultSet {
    private IEnumerator _groupsEnumerator;
    private SAMStoreCtx _storeCtx;
    private DirectoryEntry _ctxBase;
    private bool _atBeginning;
    private DirectoryEntry _current;
    internal object CurrentAsPrincipal { get; }
    internal SAMGroupsSet(IADsMembers iADsMembers, SAMStoreCtx storeCtx, DirectoryEntry ctxBase);
    internal virtual object get_CurrentAsPrincipal();
    internal virtual bool MoveNext();
    internal virtual void Reset();
}
internal abstract class System.DirectoryServices.AccountManagement.SAMMatcher : object {
    internal abstract virtual bool Matches(DirectoryEntry de);
}
internal class System.DirectoryServices.AccountManagement.SAMMembersSet : BookmarkableResultSet {
    private bool _recursive;
    private bool _disposed;
    private SAMStoreCtx _storeCtx;
    private bool _atBeginning;
    private List`1<string> _groupsVisited;
    private List`1<string> _groupsToVisit;
    private DirectoryEntry _current;
    private Principal _currentFakePrincipal;
    private IADsGroup _group;
    private IADsGroup _originalGroup;
    private IEnumerator _membersEnumerator;
    private List`1<DirectoryEntry> _foreignMembers;
    private Principal _currentForeign;
    private List`1<GroupPrincipal> _foreignGroups;
    private ResultSet _foreignResultSet;
    internal object CurrentAsPrincipal { get; }
    internal SAMMembersSet(string groupPath, IADsGroup group, bool recursive, SAMStoreCtx storeCtx, DirectoryEntry ctxBase);
    internal virtual object get_CurrentAsPrincipal();
    internal virtual bool MoveNext();
    private bool MoveNextLocal();
    private bool MoveNextForeign();
    private bool IsLocalMember(Byte[] sid);
    internal virtual void Reset();
    internal virtual ResultSetBookmark BookmarkAndReset();
    internal virtual void RestoreBookmark(ResultSetBookmark bookmark);
    public virtual void Dispose();
}
internal class System.DirectoryServices.AccountManagement.SAMMembersSetBookmark : ResultSetBookmark {
    public List`1<string> groupsToVisit;
    public List`1<string> groupsVisited;
    public IADsGroup group;
    public IEnumerator membersEnumerator;
    public DirectoryEntry current;
    public Principal currentFakePrincipal;
    public Principal currentForeign;
    public List`1<DirectoryEntry> foreignMembers;
    public List`1<GroupPrincipal> foreignGroups;
    public ResultSet foreignResultSet;
    public bool atBeginning;
}
internal class System.DirectoryServices.AccountManagement.SAMQuerySet : ResultSet {
    private SAMStoreCtx _storeCtx;
    private DirectoryEntry _ctxBase;
    private DirectoryEntries _entries;
    private IEnumerator _enumerator;
    private DirectoryEntry _current;
    private int _sizeLimit;
    private List`1<string> _schemaTypes;
    private SAMMatcher _matcher;
    private int _resultsReturned;
    private bool _endReached;
    internal object CurrentAsPrincipal { get; }
    internal SAMQuerySet(List`1<string> schemaTypes, DirectoryEntries entries, DirectoryEntry ctxBase, int sizeLimit, SAMStoreCtx storeCtx, SAMMatcher samMatcher);
    internal virtual object get_CurrentAsPrincipal();
    internal virtual bool MoveNext();
    private bool IsOfCorrectType(DirectoryEntry de);
    internal virtual void Reset();
}
internal class System.DirectoryServices.AccountManagement.SAMStoreCtx : StoreCtx {
    private DirectoryEntry _ctxBase;
    private object _ctxBaseLock;
    private bool _ownCtxBase;
    private bool _disposed;
    private NetCred _credentials;
    private AuthenticationTypes _authTypes;
    private ContextOptions _contextOptions;
    private object _computerInfoLock;
    private Nullable`1<bool> _isLSAM;
    private string _machineUserSuppliedName;
    private string _machineFlatName;
    private static Object[0...,0...] s_propertyMappingTableRaw;
    private static Hashtable s_userPropertyMappingTableByProperty;
    private static Hashtable s_userPropertyMappingTableByWinNT;
    private static Hashtable s_groupPropertyMappingTableByProperty;
    private static Hashtable s_groupPropertyMappingTableByWinNT;
    private static Hashtable s_computerPropertyMappingTableByProperty;
    private static Hashtable s_computerPropertyMappingTableByWinNT;
    private static Dictionary`2<string, ObjectMask> s_validPropertyMap;
    private static Dictionary`2<Type, ObjectMask> s_maskMap;
    internal NetCred Credentials { get; }
    internal AuthenticationTypes AuthTypes { get; }
    internal string BasePath { get; }
    internal bool SupportsNativeMembershipTest { get; }
    private bool IsLSAM { get; }
    internal string MachineUserSuppliedName { get; }
    internal string MachineFlatName { get; }
    internal bool SupportsSearchNatively { get; }
    private static SAMStoreCtx();
    public SAMStoreCtx(DirectoryEntry ctxBase, bool ownCtxBase, string username, string password, ContextOptions options);
    internal NetCred get_Credentials();
    internal AuthenticationTypes get_AuthTypes();
    public virtual void Dispose();
    internal virtual string get_BasePath();
    internal virtual void Insert(Principal p);
    internal virtual void Update(Principal p);
    internal virtual void Delete(Principal p);
    internal virtual bool AccessCheck(Principal p, PrincipalAccessMask targetPermission);
    internal virtual void Move(StoreCtx originalStore, Principal p);
    internal virtual void InitializeUserAccountControl(AuthenticablePrincipal p);
    internal virtual bool IsLockedOut(AuthenticablePrincipal p);
    internal virtual void UnlockAccount(AuthenticablePrincipal p);
    internal virtual void SetPassword(AuthenticablePrincipal p, string newPassword);
    internal virtual void ChangePassword(AuthenticablePrincipal p, string oldPassword, string newPassword);
    internal virtual void ExpirePassword(AuthenticablePrincipal p);
    internal virtual void UnexpirePassword(AuthenticablePrincipal p);
    private void WriteAttribute(AuthenticablePrincipal p, string attribute, int value);
    internal virtual ResultSet FindByLockoutTime(DateTime dt, MatchType matchType, Type principalType);
    internal virtual ResultSet FindByBadPasswordAttempt(DateTime dt, MatchType matchType, Type principalType);
    internal virtual ResultSet FindByLogonTime(DateTime dt, MatchType matchType, Type principalType);
    internal virtual ResultSet FindByPasswordSetTime(DateTime dt, MatchType matchType, Type principalType);
    internal virtual ResultSet FindByExpirationTime(DateTime dt, MatchType matchType, Type principalType);
    private ResultSet FindByDate(DateProperty property, MatchType matchType, DateTime value, Type principalType);
    internal virtual ResultSet GetGroupsMemberOf(Principal p);
    internal virtual ResultSet GetGroupsMemberOf(Principal foreignPrincipal, StoreCtx foreignContext);
    internal virtual ResultSet GetGroupsMemberOfAZ(Principal p);
    internal virtual BookmarkableResultSet GetGroupMembership(GroupPrincipal g, bool recursive);
    internal virtual bool get_SupportsNativeMembershipTest();
    internal virtual bool IsMemberOfInStore(GroupPrincipal g, Principal p);
    internal virtual bool CanGroupBeCleared(GroupPrincipal g, String& explanationForFailure);
    internal virtual bool CanGroupMemberBeRemoved(GroupPrincipal g, Principal member, String& explanationForFailure);
    internal virtual Principal ResolveCrossStoreRefToPrincipal(object o);
    internal virtual bool SupportsAccounts(AuthenticablePrincipal p);
    internal virtual CredentialTypes SupportedCredTypes(AuthenticablePrincipal p);
    internal virtual Principal ConstructFakePrincipalFromSID(Byte[] sid);
    private bool get_IsLSAM();
    internal string get_MachineUserSuppliedName();
    internal string get_MachineFlatName();
    private void LoadComputerInfo();
    internal virtual bool IsValidProperty(Principal p, string propertyName);
    internal virtual bool get_SupportsSearchNatively();
    internal virtual Type SearcherNativeType();
    internal virtual object PushFilterToNativeSearcher(PrincipalSearcher ps);
    internal virtual ResultSet Query(PrincipalSearcher ps, int sizeLimit);
    private List`1<string> GetSchemaFilter(Type principalType);
    internal virtual object PushChangesToNative(Principal p);
    private string GetSamAccountName(Principal p);
    internal virtual Principal GetAsPrincipal(object storeObject, object discriminant);
    internal virtual void Load(Principal p, string principalPropertyName);
    internal virtual void Load(Principal p);
    internal virtual Principal FindPrincipalByIdentRef(Type principalType, string urnScheme, string urnValue, DateTime referenceDate);
    private object FindNativeBySIDIdentRef(Type principalType, Byte[] sid);
    private object FindNativeByNT4IdentRef(Type principalType, string urnValue);
    internal virtual Type NativeType(Principal p);
    private static void StringFromWinNTConverter(DirectoryEntry de, string suggestedWinNTProperty, Principal p, string propertyName);
    private static void SidFromWinNTConverter(DirectoryEntry de, string suggestedWinNTProperty, Principal p, string propertyName);
    private static void SamAccountNameFromWinNTConverter(DirectoryEntry de, string suggestedWinNTProperty, Principal p, string propertyName);
    private static void MultiStringFromWinNTConverter(DirectoryEntry de, string suggestedWinNTProperty, Principal p, string propertyName);
    private static void IntFromWinNTConverter(DirectoryEntry de, string suggestedWinNTProperty, Principal p, string propertyName);
    private static void BinaryFromWinNTConverter(DirectoryEntry de, string suggestedWinNTProperty, Principal p, string propertyName);
    private static void CertFromWinNTConverter(DirectoryEntry de, string suggestedWinNTProperty, Principal p, string propertyName);
    private static void GroupTypeFromWinNTConverter(DirectoryEntry de, string suggestedWinNTProperty, Principal p, string propertyName);
    private static void EmailFromWinNTConverter(DirectoryEntry de, string suggestedWinNTProperty, Principal p, string propertyName);
    private static void LastBadPwdAttemptFromWinNTConverter(DirectoryEntry de, string suggestedWinNTProperty, Principal p, string propertyName);
    private static void ElapsedTimeFromWinNTConverter(DirectoryEntry de, string suggestedWinNTProperty, Principal p, string propertyName);
    private static void DateFromWinNTConverter(DirectoryEntry de, string suggestedWinNTProperty, Principal p, string propertyName);
    private static void UserFlagsFromWinNTConverter(DirectoryEntry de, string suggestedWinNTProperty, Principal p, string propertyName);
    private static void ExceptionToWinNTConverter(Principal p, string propertyName, DirectoryEntry de, string suggestedWinNTProperty, bool isLSAM);
    private static void StringToWinNTConverter(Principal p, string propertyName, DirectoryEntry de, string suggestedWinNTProperty, bool isLSAM);
    private static void MultiStringToWinNTConverter(Principal p, string propertyName, DirectoryEntry de, string suggestedWinNTProperty, bool isLSAM);
    private static void LogonHoursToWinNTConverter(Principal p, string propertyName, DirectoryEntry de, string suggestedWinNTProperty, bool isLSAM);
    private static void CertToWinNT(Principal p, string propertyName, DirectoryEntry de, string suggestedWinNTProperty, bool isLSAM);
    private static void GroupTypeToWinNTConverter(Principal p, string propertyName, DirectoryEntry de, string suggestedWinNTProperty, bool isLSAM);
    private static void EmailToWinNTConverter(Principal p, string propertyName, DirectoryEntry de, string suggestedWinNTProperty, bool isLSAM);
    private static void AcctExpirDateToNTConverter(Principal p, string propertyName, DirectoryEntry de, string suggestedWinNTProperty, bool isLSAM);
    private static void UserFlagsToWinNTConverter(Principal p, string propertyName, DirectoryEntry de, string suggestedWinNTProperty, bool isLSAM);
    private static void UpdateGroupMembership(Principal group, DirectoryEntry de, NetCred credentials, AuthenticationTypes authTypes);
    private static string GetSidADsPathFromPrincipal(Principal p);
}
internal class System.DirectoryServices.AccountManagement.SAMStoreKey : StoreKey {
    private Byte[] _sid;
    private string _machineName;
    public SAMStoreKey(string machineName, Byte[] sid);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
}
internal static class System.DirectoryServices.AccountManagement.SAMUtils : object {
    internal static bool IsOfObjectClass(DirectoryEntry de, string classToCompare);
    internal static bool GetOSVersion(DirectoryEntry computerDE, Int32& versionMajor, Int32& versionMinor);
    internal static Principal DirectoryEntryAsPrincipal(DirectoryEntry de, StoreCtx storeCtx);
    internal static string PAPIQueryToRegexString(string papiString);
}
internal class System.DirectoryServices.AccountManagement.ScriptPathFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.SDSCache : object {
    private static SDSCache s_domainCache;
    private static SDSCache s_localMachineCache;
    private Hashtable _table;
    private object _tableLock;
    private bool _isSAM;
    public static SDSCache Domain { get; }
    public static SDSCache LocalMachine { get; }
    private SDSCache(bool isSAM);
    private static SDSCache();
    public static SDSCache get_Domain();
    public static SDSCache get_LocalMachine();
    public PrincipalContext GetContext(string name, NetCred credentials, ContextOptions contextOptions);
}
internal static class System.DirectoryServices.AccountManagement.SDSUtils : object {
    internal static int AD_DefaultUAC;
    internal static int AD_DefaultUAC_Machine;
    internal static int SAM_DefaultUAC;
    internal static Principal SearchResultToPrincipal(SearchResult sr, PrincipalContext owningContext, Type principalType);
    internal static Principal DirectoryEntryToPrincipal(DirectoryEntry de, PrincipalContext owningContext, Type principalType);
    private static bool IsOfObjectClass(SearchResult sr, string className);
    private static bool IsOfObjectClass(DirectoryEntry de, string className);
    internal static AuthenticationTypes MapOptionsToAuthTypes(ContextOptions options);
    internal static void MoveDirectoryEntry(DirectoryEntry deToMove, DirectoryEntry newParent, string newName);
    internal static void DeleteDirectoryEntry(DirectoryEntry deToDelete);
    internal static void InsertPrincipal(Principal p, StoreCtx storeCtx, GroupMembershipUpdater updateGroupMembership, NetCred credentials, AuthenticationTypes authTypes, bool needToSetPassword);
    internal static void ApplyChangesToDirectory(Principal p, StoreCtx storeCtx, GroupMembershipUpdater updateGroupMembership, NetCred credentials, AuthenticationTypes authTypes);
    internal static void SetPassword(DirectoryEntry de, string newPassword);
    internal static void ChangePassword(DirectoryEntry de, string oldPassword, string newPassword);
    internal static DirectoryEntry BuildDirectoryEntry(string path, NetCred credentials, AuthenticationTypes authTypes);
    internal static DirectoryEntry BuildDirectoryEntry(NetCred credentials, AuthenticationTypes authTypes);
    internal static void WriteAttribute(string dePath, string attribute, T value, NetCred credentials, AuthenticationTypes authTypes);
    internal static void WriteAttribute(string dePath, string attribute, int value, NetCred credentials, AuthenticationTypes authTypes);
    internal static void SingleScalarFromDirectoryEntry(dSPropertyCollection properties, string suggestedProperty, Principal p, string propertyName);
    internal static void MultiScalarFromDirectoryEntry(dSPropertyCollection properties, string suggestedProperty, Principal p, string propertyName);
    internal static bool StatusFromAccountControl(int uacValue, string propertyName);
    internal static void AccountControlFromDirectoryEntry(dSPropertyCollection properties, string suggestedProperty, Principal p, string propertyName, bool testCantChangePassword);
    internal static void MultiStringToDirectoryEntryConverter(Principal p, string propertyName, DirectoryEntry de, string suggestedProperty);
    internal static void AccountControlToDirectoryEntry(Principal p, string propertyName, DirectoryEntry de, string suggestedProperty, bool isSAM, bool isUnpersisted);
    internal static DirectorySearcher ConstructSearcher(DirectoryEntry de);
    internal static bool IsObjectFromGC(string path);
    internal static string ConstructDnsDomainNameFromDn(string dn);
}
internal class System.DirectoryServices.AccountManagement.ServerProperties : ValueType {
    public string dnsHostName;
    public DomainControllerMode OsVersion;
    public ContextType contextType;
    public String[] SupportCapabilities;
    public int portSSL;
    public int portLDAP;
}
internal class System.DirectoryServices.AccountManagement.ServicePrincipalNameFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.SidFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
[DefaultMemberAttribute("Item")]
internal class System.DirectoryServices.AccountManagement.SidList : object {
    private List`1<SidListEntry> _entries;
    public SidListEntry Item { get; }
    public int Length { get; }
    internal SidList(List`1<Byte[]> sidListByteFormat);
    internal SidList(List`1<Byte[]> sidListByteFormat, string target, NetCred credentials);
    internal SidList(SID_AND_ATTRIBUTES[] sidAndAttr);
    private void TranslateSids(string target, IntPtr[] pSids);
    public SidListEntry get_Item(int index);
    public int get_Length();
    public void RemoveAt(int index);
    public void Clear();
}
internal class System.DirectoryServices.AccountManagement.SidListEntry : object {
    public IntPtr pSid;
    public string name;
    public string sidIssuerName;
    public sealed virtual void Dispose();
}
internal enum System.DirectoryServices.AccountManagement.SidType : Enum {
    public int value__;
    public static SidType RealObject;
    public static SidType RealObjectFakeDomain;
    public static SidType FakeObject;
}
internal class System.DirectoryServices.AccountManagement.SmartcardLogonRequiredFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal abstract class System.DirectoryServices.AccountManagement.StoreCtx : object {
    private PrincipalContext _owningContext;
    internal static String[] principalProperties;
    internal static String[] authenticablePrincipalProperties;
    internal static String[] userProperties;
    internal static String[] groupProperties;
    internal static String[] computerProperties;
    internal string BasePath { get; }
    internal PrincipalContext OwningContext { get; internal set; }
    internal bool SupportsNativeMembershipTest { get; }
    internal bool SupportsSearchNatively { get; }
    private static StoreCtx();
    internal abstract virtual string get_BasePath();
    internal PrincipalContext get_OwningContext();
    internal void set_OwningContext(PrincipalContext value);
    internal abstract virtual void Insert(Principal p);
    internal abstract virtual void Update(Principal p);
    internal abstract virtual void Delete(Principal p);
    internal abstract virtual void Move(StoreCtx originalStore, Principal p);
    internal abstract virtual object PushChangesToNative(Principal p);
    internal abstract virtual Principal GetAsPrincipal(object storeObject, object discriminant);
    internal abstract virtual void Load(Principal p);
    internal abstract virtual void Load(Principal p, string principalPropertyName);
    internal abstract virtual Principal FindPrincipalByIdentRef(Type principalType, string urnScheme, string urnValue, DateTime referenceDate);
    internal abstract virtual Type NativeType(Principal p);
    internal abstract virtual void InitializeUserAccountControl(AuthenticablePrincipal p);
    internal abstract virtual bool IsLockedOut(AuthenticablePrincipal p);
    internal abstract virtual void UnlockAccount(AuthenticablePrincipal p);
    internal abstract virtual void SetPassword(AuthenticablePrincipal p, string newPassword);
    internal abstract virtual void ChangePassword(AuthenticablePrincipal p, string oldPassword, string newPassword);
    internal abstract virtual void ExpirePassword(AuthenticablePrincipal p);
    internal abstract virtual void UnexpirePassword(AuthenticablePrincipal p);
    internal abstract virtual bool AccessCheck(Principal p, PrincipalAccessMask targetPermission);
    internal abstract virtual ResultSet FindByLockoutTime(DateTime dt, MatchType matchType, Type principalType);
    internal abstract virtual ResultSet FindByLogonTime(DateTime dt, MatchType matchType, Type principalType);
    internal abstract virtual ResultSet FindByPasswordSetTime(DateTime dt, MatchType matchType, Type principalType);
    internal abstract virtual ResultSet FindByBadPasswordAttempt(DateTime dt, MatchType matchType, Type principalType);
    internal abstract virtual ResultSet FindByExpirationTime(DateTime dt, MatchType matchType, Type principalType);
    internal abstract virtual ResultSet GetGroupsMemberOf(Principal p);
    internal abstract virtual ResultSet GetGroupsMemberOf(Principal foreignPrincipal, StoreCtx foreignContext);
    internal abstract virtual ResultSet GetGroupsMemberOfAZ(Principal p);
    internal abstract virtual BookmarkableResultSet GetGroupMembership(GroupPrincipal g, bool recursive);
    internal abstract virtual bool get_SupportsNativeMembershipTest();
    internal abstract virtual bool IsMemberOfInStore(GroupPrincipal g, Principal p);
    internal abstract virtual bool CanGroupBeCleared(GroupPrincipal g, String& explanationForFailure);
    internal abstract virtual bool CanGroupMemberBeRemoved(GroupPrincipal g, Principal member, String& explanationForFailure);
    internal abstract virtual bool get_SupportsSearchNatively();
    internal abstract virtual Type SearcherNativeType();
    internal abstract virtual object PushFilterToNativeSearcher(PrincipalSearcher ps);
    internal abstract virtual ResultSet Query(PrincipalSearcher ps, int sizeLimit);
    internal abstract virtual Principal ResolveCrossStoreRefToPrincipal(object o);
    internal abstract virtual bool IsValidProperty(Principal p, string propertyName);
    internal abstract virtual bool SupportsAccounts(AuthenticablePrincipal p);
    internal abstract virtual CredentialTypes SupportedCredTypes(AuthenticablePrincipal p);
    internal abstract virtual Principal ConstructFakePrincipalFromSID(Byte[] sid);
    public virtual void Dispose();
    protected QbeFilterDescription BuildQbeFilterDescription(Principal p);
    private void BuildFilterSet(Principal p, String[] propertySet, QbeFilterDescription qbeFilterDescription);
}
internal abstract class System.DirectoryServices.AccountManagement.StoreKey : object {
}
internal class System.DirectoryServices.AccountManagement.StructuralObjectClassFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.SurnameFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal class System.DirectoryServices.AccountManagement.TokenGroupSet : ResultSet {
    private string _principalDN;
    private ADStoreCtx _storeCtx;
    private bool _atBeginning;
    private DirectoryEntry _current;
    private IEnumerator _tokenGroupsEnum;
    private SecurityIdentifier _currentSID;
    private bool _disposed;
    private string _attributeToQuery;
    internal object CurrentAsPrincipal { get; }
    internal TokenGroupSet(string userDN, ADStoreCtx storeCtx, bool readDomainGroups);
    internal virtual object get_CurrentAsPrincipal();
    internal virtual bool MoveNext();
    internal virtual void Reset();
    public virtual void Dispose();
    private string BuildPathFromDN(string dn);
}
internal class System.DirectoryServices.AccountManagement.TrackedCollection`1 : object {
    internal List`1<ValueEl<T>> combinedValues;
    internal List`1<T> removedValues;
    private DateTime _lastChange;
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public bool IsReadOnly { get; }
    public int Count { get; }
    internal DateTime LastChange { get; }
    internal List`1<T> Inserted { get; }
    internal List`1<T> Removed { get; }
    internal List`1<Pair`2<T, T>> ChangedValues { get; }
    internal bool Changed { get; }
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void CopyTo(T[] array, int index);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public sealed virtual bool Contains(T value);
    public sealed virtual void Clear();
    public sealed virtual void Add(T o);
    public sealed virtual bool Remove(T value);
    internal DateTime get_LastChange();
    internal void MarkChange();
    internal List`1<T> get_Inserted();
    internal List`1<T> get_Removed();
    internal List`1<Pair`2<T, T>> get_ChangedValues();
    internal bool get_Changed();
}
internal class System.DirectoryServices.AccountManagement.TrackedCollectionEnumerator`1 : object {
    private bool _disposed;
    private string _outerClassName;
    private List`1<ValueEl<T>> _combinedValues;
    private T _current;
    private IEnumerator _enumerator;
    private bool _endReached;
    private DateTime _creationTime;
    private TrackedCollection`1<T> _trackedCollection;
    public T Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal TrackedCollectionEnumerator`1(string outerClassName, TrackedCollection`1<T> trackedCollection, List`1<ValueEl<T>> combinedValues);
    public sealed virtual T get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public bool MoveNext();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    public void Reset();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    public sealed virtual void Dispose();
    private void CheckDisposed();
    private void CheckChanged();
}
[DirectoryRdnPrefixAttribute("CN")]
internal class System.DirectoryServices.AccountManagement.UnknownPrincipal : Principal {
    private UnknownPrincipal(PrincipalContext context);
    internal static UnknownPrincipal CreateUnknownPrincipal(PrincipalContext ctx, Byte[] sid, string name);
}
internal static class System.DirectoryServices.AccountManagement.UnsafeNativeMethods : object {
    public static int ADsOpenObject(string path, string userName, string password, int flags, Guid& iid, Object& ppObject);
}
internal static class System.DirectoryServices.AccountManagement.UrnScheme : object {
    public static string GuidScheme;
    public static string SidScheme;
    public static string DistinguishedNameScheme;
    public static string SamAccountScheme;
    public static string UpnScheme;
    public static string NameScheme;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DirectoryRdnPrefixAttribute("CN")]
public class System.DirectoryServices.AccountManagement.UserPrincipal : AuthenticablePrincipal {
    private string _givenName;
    private LoadState _givenNameChanged;
    private string _middleName;
    private LoadState _middleNameChanged;
    private string _surname;
    private LoadState _surnameChanged;
    private string _emailAddress;
    private LoadState _emailAddressChanged;
    private string _voiceTelephoneNumber;
    private LoadState _voiceTelephoneNumberChanged;
    private string _employeeID;
    private LoadState _employeeIDChanged;
    public string GivenName { get; public set; }
    public string MiddleName { get; public set; }
    public string Surname { get; public set; }
    public string EmailAddress { get; public set; }
    public string VoiceTelephoneNumber { get; public set; }
    public string EmployeeId { get; public set; }
    public AdvancedFilters AdvancedSearchFilter { get; }
    public static UserPrincipal Current { get; }
    public UserPrincipal(PrincipalContext context);
    public UserPrincipal(PrincipalContext context, string samAccountName, string password, bool enabled);
    public string get_GivenName();
    public void set_GivenName(string value);
    public string get_MiddleName();
    public void set_MiddleName(string value);
    public string get_Surname();
    public void set_Surname(string value);
    public string get_EmailAddress();
    public void set_EmailAddress(string value);
    public string get_VoiceTelephoneNumber();
    public void set_VoiceTelephoneNumber(string value);
    public string get_EmployeeId();
    public void set_EmployeeId(string value);
    public virtual AdvancedFilters get_AdvancedSearchFilter();
    public static UserPrincipal get_Current();
    public static PrincipalSearchResult`1<UserPrincipal> FindByLockoutTime(PrincipalContext context, DateTime time, MatchType type);
    public static PrincipalSearchResult`1<UserPrincipal> FindByLogonTime(PrincipalContext context, DateTime time, MatchType type);
    public static PrincipalSearchResult`1<UserPrincipal> FindByExpirationTime(PrincipalContext context, DateTime time, MatchType type);
    public static PrincipalSearchResult`1<UserPrincipal> FindByBadPasswordAttempt(PrincipalContext context, DateTime time, MatchType type);
    public static PrincipalSearchResult`1<UserPrincipal> FindByPasswordSetTime(PrincipalContext context, DateTime time, MatchType type);
    public static UserPrincipal FindByIdentity(PrincipalContext context, string identityValue);
    public static UserPrincipal FindByIdentity(PrincipalContext context, IdentityType identityType, string identityValue);
    public PrincipalSearchResult`1<Principal> GetAuthorizationGroups();
    internal static UserPrincipal MakeUser(PrincipalContext ctx);
    private ResultSet GetAuthorizationGroupsHelper();
    internal virtual void LoadValueIntoProperty(string propertyName, object value);
    internal virtual bool GetChangeStatusForProperty(string propertyName);
    internal virtual object GetValueForProperty(string propertyName);
    internal virtual void ResetAllChangeStatus();
}
internal class System.DirectoryServices.AccountManagement.UserPrincipalNameFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
internal static class System.DirectoryServices.AccountManagement.Utils : object {
    internal static bool AreBytesEqual(Byte[] src, Byte[] tgt);
    internal static void ClearBit(Int32& value, UInt32 bitmask);
    internal static void SetBit(Int32& value, UInt32 bitmask);
    internal static string ByteArrayToString(Byte[] byteArray);
    internal static string SecurityIdentifierToLdapHexFilterString(SecurityIdentifier sid);
    internal static string SecurityIdentifierToLdapHexBindingString(SecurityIdentifier sid);
    internal static Byte[] StringToByteArray(string s);
    internal static string ConvertSidToSDDL(Byte[] sid);
    internal static IntPtr ConvertByteArrayToIntPtr(Byte[] bytes);
    internal static Byte[] ConvertNativeSidToByteArray(IntPtr pSid);
    internal static SidType ClassifySID(Byte[] sid);
    internal static SidType ClassifySID(IntPtr pSid);
    internal static int GetLastRidFromSid(IntPtr pSid);
    internal static int GetLastRidFromSid(Byte[] sid);
    internal static bool IsSamUser();
    internal static IntPtr GetCurrentUserSid();
    internal static IntPtr GetMachineDomainSid();
    internal static string GetNT4UserName();
    internal static string GetComputerFlatName();
    internal static DomainControllerInfo GetDcName(string computerName, string domainName, string siteName, int flags);
    internal static int LookupSid(string serverName, NetCred credentials, Byte[] sid, String& name, String& domainName, Int32& accountUsage);
    internal static Principal ConstructFakePrincipalFromSID(Byte[] sid, PrincipalContext ctx, string serverName, NetCred credentials, string authorityName);
    internal static bool BeginImpersonation(NetCred credential, IntPtr& hUserToken);
    internal static void EndImpersonation(IntPtr hUserToken);
    internal static bool IsMachineDC(string computerName);
}
internal class System.DirectoryServices.AccountManagement.ValueCollectionEnumerator`1 : object {
    private TrackedCollectionEnumerator`1<T> _inner;
    public T Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal ValueCollectionEnumerator`1(TrackedCollection`1<T> trackingList, List`1<ValueEl<T>> combinedValues);
    public sealed virtual T get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public bool MoveNext();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    public void Reset();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    public sealed virtual void Dispose();
}
internal class System.DirectoryServices.AccountManagement.VoiceTelephoneNumberFilter : FilterBase {
    public static string PropertyNameStatic;
    public string PropertyName { get; }
    public virtual string get_PropertyName();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ContextNoWellKnownObjects { get; }
    internal static string ContextNoContainerForMachineCtx { get; }
    internal static string ContextNoContainerForApplicationDirectoryCtx { get; }
    internal static string ContextBadUserPwdCombo { get; }
    internal static string StoreNotSupportMethod { get; }
    internal static string PrincipalUnsupportPropertyForPlatform { get; }
    internal static string PrincipalUnsupportPropertyForType { get; }
    internal static string PrincipalMustSetContextForSave { get; }
    internal static string PrincipalMustSetContextForNative { get; }
    internal static string PrincipalMustSetContextForProperty { get; }
    internal static string PrincipalCantDeleteUnpersisted { get; }
    internal static string PrincipalDeleted { get; }
    internal static string PrincipalNotSupportedOnFakePrincipal { get; }
    internal static string PrincipalMustPersistFirst { get; }
    internal static string PrincipalSearcherPersistedPrincipal { get; }
    internal static string PrincipalSearcherMustSetFilter { get; }
    internal static string PrincipalSearcherNoUnderlying { get; }
    internal static string PrincipalSearcherNonReferentialProps { get; }
    internal static string FindResultEnumInvalidPos { get; }
    internal static string TrackedCollectionNotOneDimensional { get; }
    internal static string TrackedCollectionIndexNotInArray { get; }
    internal static string TrackedCollectionArrayTooSmall { get; }
    internal static string TrackedCollectionEnumHasChanged { get; }
    internal static string TrackedCollectionEnumInvalidPos { get; }
    internal static string MultipleMatchingPrincipals { get; }
    internal static string NoMatchingPrincipalExceptionText { get; }
    internal static string NoMatchingGroupExceptionText { get; }
    internal static string PrincipalExistsExceptionText { get; }
    internal static string PrincipalCollectionNotOneDimensional { get; }
    internal static string PrincipalCollectionIndexNotInArray { get; }
    internal static string PrincipalCollectionArrayTooSmall { get; }
    internal static string PrincipalCollectionEnumHasChanged { get; }
    internal static string PrincipalCollectionEnumInvalidPos { get; }
    internal static string AuthenticablePrincipalMustBeSubtypeOfAuthPrinc { get; }
    internal static string PasswordInfoChangePwdOnUnpersistedPrinc { get; }
    internal static string UserMustSetContextForMethod { get; }
    internal static string UserCouldNotFindCurrent { get; }
    internal static string UnableToRetrieveDomainInfo { get; }
    internal static string UnableToOpenToken { get; }
    internal static string UnableToRetrieveTokenInfo { get; }
    internal static string UnableToRetrievePolicy { get; }
    internal static string UnableToImpersonateCredentials { get; }
    internal static string StoreCtxUnsupportedPrincipalTypeForSave { get; }
    internal static string StoreCtxUnsupportedPrincipalTypeForGroupInsert { get; }
    internal static string StoreCtxUnsupportedPrincipalTypeForQuery { get; }
    internal static string StoreCtxUnsupportedPropertyForQuery { get; }
    internal static string StoreCtxUnsupportedIdentityClaimForQuery { get; }
    internal static string StoreCtxIdentityClaimMustHaveScheme { get; }
    internal static string StoreCtxSecurityIdentityClaimBadFormat { get; }
    internal static string StoreCtxGuidIdentityClaimBadFormat { get; }
    internal static string StoreCtxNT4IdentityClaimWrongForm { get; }
    internal static string StoreCtxGroupHasUnpersistedInsertedPrincipal { get; }
    internal static string StoreCtxNeedValueSecurityIdentityClaimToQuery { get; }
    internal static string ADStoreCtxUnsupportedPrincipalContextForGroupInsert { get; }
    internal static string ADStoreCtxCouldntGetSIDForGroupMember { get; }
    internal static string ADStoreCtxMustBeContainer { get; }
    internal static string ADStoreCtxCantRetrieveObjectSidForCrossStore { get; }
    internal static string ADStoreCtxCantResolveSidForCrossStore { get; }
    internal static string ADStoreCtxFailedFindCrossStoreTarget { get; }
    internal static string ADStoreCtxUnableToReadExistingAccountControlFlagsToEnable { get; }
    internal static string ADStoreCtxUnableToReadExistingAccountControlFlagsForUpdate { get; }
    internal static string ADStoreCtxUnableToReadExistingGroupTypeFlagsForUpdate { get; }
    internal static string ADStoreCtxCantClearGroup { get; }
    internal static string ADStoreCtxCantRemoveMemberFromGroup { get; }
    internal static string ADStoreCtxNoComputerPasswordChange { get; }
    internal static string SAMStoreCtxUnableToRetrieveVersion { get; }
    internal static string SAMStoreCtxUnableToRetrieveMachineName { get; }
    internal static string SAMStoreCtxUnableToRetrieveFlatMachineName { get; }
    internal static string SAMStoreCtxNoComputerPasswordSet { get; }
    internal static string SAMStoreCtxNoComputerPasswordExpire { get; }
    internal static string SAMStoreCtxCouldntGetSIDForGroupMember { get; }
    internal static string SAMStoreCtxFailedToClearGroup { get; }
    internal static string SAMStoreCtxCantRetrieveObjectSidForCrossStore { get; }
    internal static string SAMStoreCtxCantResolveSidForCrossStore { get; }
    internal static string SAMStoreCtxFailedFindCrossStoreTarget { get; }
    internal static string SAMStoreCtxErrorEnumeratingGroup { get; }
    internal static string SAMStoreCtxLocalGroupsOnly { get; }
    internal static string AuthZFailedToRetrieveGroupList { get; }
    internal static string AuthZNotSupported { get; }
    internal static string AuthZErrorEnumeratingGroups { get; }
    internal static string AuthZCantFindGroup { get; }
    internal static string ContextOptionsNotValidForMachineStore { get; }
    internal static string PassedContextTypeDoesNotMatchDetectedType { get; }
    internal static string NullArguments { get; }
    internal static string InvalidStringValueForStore { get; }
    internal static string ServerDown { get; }
    internal static string InvalidPropertyForStore { get; }
    internal static string NameMustBeSetToPersistPrincipal { get; }
    internal static string ExtensionInvalidClassDefinitionConstructor { get; }
    internal static string ExtensionInvalidClassAttributes { get; }
    internal static string SaveToMustHaveSamecontextType { get; }
    internal static string ComputerInvalidForAppDirectoryStore { get; }
    internal static string SaveToNotSupportedAgainstMachineStore { get; }
    internal static string InvalidContextOptionsForMachine { get; }
    internal static string InvalidContextOptionsForAD { get; }
    internal static string InvalidExtensionCollectionType { get; }
    internal static string ADAMStoreUnableToPopulateSchemaList { get; }
    internal static string StoreCtxMultipleFiltersForPropertyUnsupported { get; }
    internal static string AdsiNotInstalled { get; }
    internal static string DirectoryServicesAccountManagement_PlatformNotSupported { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ContextNoWellKnownObjects();
    internal static string get_ContextNoContainerForMachineCtx();
    internal static string get_ContextNoContainerForApplicationDirectoryCtx();
    internal static string get_ContextBadUserPwdCombo();
    internal static string get_StoreNotSupportMethod();
    internal static string get_PrincipalUnsupportPropertyForPlatform();
    internal static string get_PrincipalUnsupportPropertyForType();
    internal static string get_PrincipalMustSetContextForSave();
    internal static string get_PrincipalMustSetContextForNative();
    internal static string get_PrincipalMustSetContextForProperty();
    internal static string get_PrincipalCantDeleteUnpersisted();
    internal static string get_PrincipalDeleted();
    internal static string get_PrincipalNotSupportedOnFakePrincipal();
    internal static string get_PrincipalMustPersistFirst();
    internal static string get_PrincipalSearcherPersistedPrincipal();
    internal static string get_PrincipalSearcherMustSetFilter();
    internal static string get_PrincipalSearcherNoUnderlying();
    internal static string get_PrincipalSearcherNonReferentialProps();
    internal static string get_FindResultEnumInvalidPos();
    internal static string get_TrackedCollectionNotOneDimensional();
    internal static string get_TrackedCollectionIndexNotInArray();
    internal static string get_TrackedCollectionArrayTooSmall();
    internal static string get_TrackedCollectionEnumHasChanged();
    internal static string get_TrackedCollectionEnumInvalidPos();
    internal static string get_MultipleMatchingPrincipals();
    internal static string get_NoMatchingPrincipalExceptionText();
    internal static string get_NoMatchingGroupExceptionText();
    internal static string get_PrincipalExistsExceptionText();
    internal static string get_PrincipalCollectionNotOneDimensional();
    internal static string get_PrincipalCollectionIndexNotInArray();
    internal static string get_PrincipalCollectionArrayTooSmall();
    internal static string get_PrincipalCollectionEnumHasChanged();
    internal static string get_PrincipalCollectionEnumInvalidPos();
    internal static string get_AuthenticablePrincipalMustBeSubtypeOfAuthPrinc();
    internal static string get_PasswordInfoChangePwdOnUnpersistedPrinc();
    internal static string get_UserMustSetContextForMethod();
    internal static string get_UserCouldNotFindCurrent();
    internal static string get_UnableToRetrieveDomainInfo();
    internal static string get_UnableToOpenToken();
    internal static string get_UnableToRetrieveTokenInfo();
    internal static string get_UnableToRetrievePolicy();
    internal static string get_UnableToImpersonateCredentials();
    internal static string get_StoreCtxUnsupportedPrincipalTypeForSave();
    internal static string get_StoreCtxUnsupportedPrincipalTypeForGroupInsert();
    internal static string get_StoreCtxUnsupportedPrincipalTypeForQuery();
    internal static string get_StoreCtxUnsupportedPropertyForQuery();
    internal static string get_StoreCtxUnsupportedIdentityClaimForQuery();
    internal static string get_StoreCtxIdentityClaimMustHaveScheme();
    internal static string get_StoreCtxSecurityIdentityClaimBadFormat();
    internal static string get_StoreCtxGuidIdentityClaimBadFormat();
    internal static string get_StoreCtxNT4IdentityClaimWrongForm();
    internal static string get_StoreCtxGroupHasUnpersistedInsertedPrincipal();
    internal static string get_StoreCtxNeedValueSecurityIdentityClaimToQuery();
    internal static string get_ADStoreCtxUnsupportedPrincipalContextForGroupInsert();
    internal static string get_ADStoreCtxCouldntGetSIDForGroupMember();
    internal static string get_ADStoreCtxMustBeContainer();
    internal static string get_ADStoreCtxCantRetrieveObjectSidForCrossStore();
    internal static string get_ADStoreCtxCantResolveSidForCrossStore();
    internal static string get_ADStoreCtxFailedFindCrossStoreTarget();
    internal static string get_ADStoreCtxUnableToReadExistingAccountControlFlagsToEnable();
    internal static string get_ADStoreCtxUnableToReadExistingAccountControlFlagsForUpdate();
    internal static string get_ADStoreCtxUnableToReadExistingGroupTypeFlagsForUpdate();
    internal static string get_ADStoreCtxCantClearGroup();
    internal static string get_ADStoreCtxCantRemoveMemberFromGroup();
    internal static string get_ADStoreCtxNoComputerPasswordChange();
    internal static string get_SAMStoreCtxUnableToRetrieveVersion();
    internal static string get_SAMStoreCtxUnableToRetrieveMachineName();
    internal static string get_SAMStoreCtxUnableToRetrieveFlatMachineName();
    internal static string get_SAMStoreCtxNoComputerPasswordSet();
    internal static string get_SAMStoreCtxNoComputerPasswordExpire();
    internal static string get_SAMStoreCtxCouldntGetSIDForGroupMember();
    internal static string get_SAMStoreCtxFailedToClearGroup();
    internal static string get_SAMStoreCtxCantRetrieveObjectSidForCrossStore();
    internal static string get_SAMStoreCtxCantResolveSidForCrossStore();
    internal static string get_SAMStoreCtxFailedFindCrossStoreTarget();
    internal static string get_SAMStoreCtxErrorEnumeratingGroup();
    internal static string get_SAMStoreCtxLocalGroupsOnly();
    internal static string get_AuthZFailedToRetrieveGroupList();
    internal static string get_AuthZNotSupported();
    internal static string get_AuthZErrorEnumeratingGroups();
    internal static string get_AuthZCantFindGroup();
    internal static string get_ContextOptionsNotValidForMachineStore();
    internal static string get_PassedContextTypeDoesNotMatchDetectedType();
    internal static string get_NullArguments();
    internal static string get_InvalidStringValueForStore();
    internal static string get_ServerDown();
    internal static string get_InvalidPropertyForStore();
    internal static string get_NameMustBeSetToPersistPrincipal();
    internal static string get_ExtensionInvalidClassDefinitionConstructor();
    internal static string get_ExtensionInvalidClassAttributes();
    internal static string get_SaveToMustHaveSamecontextType();
    internal static string get_ComputerInvalidForAppDirectoryStore();
    internal static string get_SaveToNotSupportedAgainstMachineStore();
    internal static string get_InvalidContextOptionsForMachine();
    internal static string get_InvalidContextOptionsForAD();
    internal static string get_InvalidExtensionCollectionType();
    internal static string get_ADAMStoreUnableToPopulateSchemaList();
    internal static string get_StoreCtxMultipleFiltersForPropertyUnsupported();
    internal static string get_AdsiNotInstalled();
    internal static string get_DirectoryServicesAccountManagement_PlatformNotSupported();
}
