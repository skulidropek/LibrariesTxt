internal static class FxResources.System.DirectoryServices.SR : object {
}
internal static class Interop : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.Win32.SafeHandles.SafeLibraryHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal SafeLibraryHandle(IntPtr value);
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal SafeLsaPolicyHandle(IntPtr handle);
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Win32.SafeHandles.SafeTokenHandle : SafeHandle {
    internal static SafeTokenHandle InvalidHandle { get; }
    public bool IsInvalid { get; }
    internal SafeTokenHandle(IntPtr handle);
    internal static SafeTokenHandle get_InvalidHandle();
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectoryInterSiteTransport : object {
    private DirectoryContext _context;
    private DirectoryEntry _cachedEntry;
    private ActiveDirectoryTransportType _transport;
    private bool _disposed;
    private bool _linkRetrieved;
    private bool _bridgeRetrieved;
    private ReadOnlySiteLinkCollection _siteLinkCollection;
    private ReadOnlySiteLinkBridgeCollection _bridgeCollection;
    public ActiveDirectoryTransportType TransportType { get; }
    public bool IgnoreReplicationSchedule { get; public set; }
    public bool BridgeAllSiteLinks { get; public set; }
    public ReadOnlySiteLinkCollection SiteLinks { get; }
    public ReadOnlySiteLinkBridgeCollection SiteLinkBridges { get; }
    internal ActiveDirectoryInterSiteTransport(DirectoryContext context, ActiveDirectoryTransportType transport, DirectoryEntry entry);
    public static ActiveDirectoryInterSiteTransport FindByTransportType(DirectoryContext context, ActiveDirectoryTransportType transport);
    public ActiveDirectoryTransportType get_TransportType();
    public bool get_IgnoreReplicationSchedule();
    public void set_IgnoreReplicationSchedule(bool value);
    public bool get_BridgeAllSiteLinks();
    public void set_BridgeAllSiteLinks(bool value);
    public ReadOnlySiteLinkCollection get_SiteLinks();
    public ReadOnlySiteLinkBridgeCollection get_SiteLinkBridges();
    public void Save();
    public DirectoryEntry GetDirectoryEntry();
    public sealed virtual void Dispose();
    public virtual string ToString();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException : Exception {
    public ActiveDirectoryObjectExistsException(string message, Exception inner);
    public ActiveDirectoryObjectExistsException(string message);
    [NullableContextAttribute("1")]
protected ActiveDirectoryObjectExistsException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException : Exception {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public Type Type { get; }
    public string Name { get; }
    [NullableAttribute("1")]
public string Message { get; }
    public ActiveDirectoryObjectNotFoundException(string message, Type type, string name);
    public ActiveDirectoryObjectNotFoundException(string message, Exception inner);
    public ActiveDirectoryObjectNotFoundException(string message);
    [NullableContextAttribute("1")]
protected ActiveDirectoryObjectNotFoundException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
    [NullableContextAttribute("1")]
public virtual string get_Message();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException : Exception {
    [CompilerGeneratedAttribute]
private int <ErrorCode>k__BackingField;
    public int ErrorCode { get; }
    public ActiveDirectoryOperationException(string message, Exception inner, int errorCode);
    public ActiveDirectoryOperationException(string message, int errorCode);
    public ActiveDirectoryOperationException(string message, Exception inner);
    public ActiveDirectoryOperationException(string message);
    [NullableContextAttribute("1")]
protected ActiveDirectoryOperationException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public int get_ErrorCode();
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition : object {
    private bool _disposed;
    internal string partitionName;
    internal DirectoryContext context;
    internal DirectoryEntryManager directoryEntryMgr;
    public string Name { get; }
    internal ActiveDirectoryPartition(DirectoryContext context, string name);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual string ToString();
    public abstract virtual DirectoryEntry GetDirectoryEntry();
    public string get_Name();
    internal void CheckIfDisposed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata : DictionaryBase {
    private DirectoryServer _server;
    private Hashtable _nameTable;
    [CompilerGeneratedAttribute]
private ReadOnlyStringCollection <AttributeNames>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeMetadataCollection <Values>k__BackingField;
    [NullableAttribute("2")]
public AttributeMetadata Item { get; }
    public ReadOnlyStringCollection AttributeNames { get; }
    public AttributeMetadataCollection Values { get; }
    internal ActiveDirectoryReplicationMetadata(DirectoryServer server);
    public AttributeMetadata get_Item(string name);
    [CompilerGeneratedAttribute]
public ReadOnlyStringCollection get_AttributeNames();
    [CompilerGeneratedAttribute]
public AttributeMetadataCollection get_Values();
    public bool Contains(string attributeName);
    public void CopyTo(AttributeMetadata[] array, int index);
    private void Add(string name, AttributeMetadata value);
    internal void AddHelper(int count, IntPtr info, bool advanced);
}
public enum System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole : Enum {
    public int value__;
    public static ActiveDirectoryRole SchemaRole;
    public static ActiveDirectoryRole NamingRole;
    public static ActiveDirectoryRole PdcRole;
    public static ActiveDirectoryRole RidRole;
    public static ActiveDirectoryRole InfrastructureRole;
}
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection : ReadOnlyCollectionBase {
    public ActiveDirectoryRole Item { get; }
    internal ActiveDirectoryRoleCollection(ArrayList values);
    public ActiveDirectoryRole get_Item(int index);
    public bool Contains(ActiveDirectoryRole role);
    public int IndexOf(ActiveDirectoryRole role);
    [NullableContextAttribute("1")]
public void CopyTo(ActiveDirectoryRole[] roles, int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule : object {
    private Boolean[] _scheduleArray;
    private long _utcOffSet;
    public Boolean[0...,0...,0...] RawSchedule { get; public set; }
    public ActiveDirectorySchedule(ActiveDirectorySchedule schedule);
    internal ActiveDirectorySchedule(Boolean[] schedule);
    public Boolean[0...,0...,0...] get_RawSchedule();
    public void set_RawSchedule(Boolean[0...,0...,0...] value);
    public void SetSchedule(DayOfWeek day, HourOfDay fromHour, MinuteOfHour fromMinute, HourOfDay toHour, MinuteOfHour toMinute);
    public void SetSchedule(DayOfWeek[] days, HourOfDay fromHour, MinuteOfHour fromMinute, HourOfDay toHour, MinuteOfHour toMinute);
    public void SetDailySchedule(HourOfDay fromHour, MinuteOfHour fromMinute, HourOfDay toHour, MinuteOfHour toMinute);
    public void ResetSchedule();
    private void ValidateRawArray(Boolean[0...,0...,0...] array);
    internal Byte[] GetUnmanagedSchedule();
    internal void SetUnmanagedSchedule(Byte[] unmanagedSchedule);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema : ActiveDirectoryPartition {
    private bool _disposed;
    private DirectoryEntry _schemaEntry;
    private DirectoryEntry _abstractSchemaEntry;
    private DirectoryServer _cachedSchemaRoleOwner;
    public DirectoryServer SchemaRoleOwner { get; }
    internal ActiveDirectorySchema(DirectoryContext context, string distinguishedName);
    internal ActiveDirectorySchema(DirectoryContext context, string distinguishedName, DirectoryEntryManager directoryEntryMgr);
    protected virtual void Dispose(bool disposing);
    public static ActiveDirectorySchema GetSchema(DirectoryContext context);
    public void RefreshSchema();
    public ActiveDirectorySchemaClass FindClass(string ldapDisplayName);
    public ActiveDirectorySchemaClass FindDefunctClass(string commonName);
    public ReadOnlyActiveDirectorySchemaClassCollection FindAllClasses();
    public ReadOnlyActiveDirectorySchemaClassCollection FindAllClasses(SchemaClassType type);
    public ReadOnlyActiveDirectorySchemaClassCollection FindAllDefunctClasses();
    public ActiveDirectorySchemaProperty FindProperty(string ldapDisplayName);
    public ActiveDirectorySchemaProperty FindDefunctProperty(string commonName);
    public ReadOnlyActiveDirectorySchemaPropertyCollection FindAllProperties();
    public ReadOnlyActiveDirectorySchemaPropertyCollection FindAllProperties(PropertyTypes type);
    public ReadOnlyActiveDirectorySchemaPropertyCollection FindAllDefunctProperties();
    public virtual DirectoryEntry GetDirectoryEntry();
    public static ActiveDirectorySchema GetCurrentSchema();
    public DirectoryServer get_SchemaRoleOwner();
    internal static ReadOnlyActiveDirectorySchemaPropertyCollection GetAllProperties(DirectoryContext context, DirectoryEntry schemaEntry, string filter);
    internal static ReadOnlyActiveDirectorySchemaClassCollection GetAllClasses(DirectoryContext context, DirectoryEntry schemaEntry, string filter);
    private DirectoryServer GetSchemaRoleOwner();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass : object {
    private DirectoryEntry _classEntry;
    private DirectoryEntry _schemaEntry;
    private DirectoryEntry _abstractClassEntry;
    private IAdsClass _iadsClass;
    private DirectoryContext _context;
    internal bool isBound;
    private bool _disposed;
    private ActiveDirectorySchema _schema;
    private bool _propertiesFromSchemaContainerInitialized;
    private bool _isDefunctOnServer;
    private Hashtable _propertyValuesFromServer;
    private string _ldapDisplayName;
    private string _commonName;
    private string _oid;
    private string _description;
    private bool _descriptionInitialized;
    private bool _isDefunct;
    private ActiveDirectorySchemaClassCollection _possibleSuperiors;
    private ActiveDirectorySchemaClassCollection _auxiliaryClasses;
    private ReadOnlyActiveDirectorySchemaClassCollection _possibleInferiors;
    private ActiveDirectorySchemaPropertyCollection _mandatoryProperties;
    private ActiveDirectorySchemaPropertyCollection _optionalProperties;
    private ActiveDirectorySchemaClass _subClassOf;
    private SchemaClassType _type;
    private bool _typeInitialized;
    private Byte[] _schemaGuidBinaryForm;
    private string _defaultSDSddlForm;
    private bool _defaultSDSddlFormInitialized;
    public string Name { get; }
    [NullableAttribute("2")]
public string CommonName { get; public set; }
    [NullableAttribute("2")]
public string Oid { get; public set; }
    [NullableAttribute("2")]
public string Description { get; public set; }
    public bool IsDefunct { get; public set; }
    public ActiveDirectorySchemaClassCollection PossibleSuperiors { get; }
    public ReadOnlyActiveDirectorySchemaClassCollection PossibleInferiors { get; }
    public ActiveDirectorySchemaPropertyCollection MandatoryProperties { get; }
    public ActiveDirectorySchemaPropertyCollection OptionalProperties { get; }
    public ActiveDirectorySchemaClassCollection AuxiliaryClasses { get; }
    [NullableAttribute("2")]
public ActiveDirectorySchemaClass SubClassOf { get; public set; }
    public SchemaClassType Type { get; public set; }
    public Guid SchemaGuid { get; public set; }
    [NullableAttribute("2")]
public ActiveDirectorySecurity DefaultObjectSecurityDescriptor { get; public set; }
    public ActiveDirectorySchemaClass(DirectoryContext context, string ldapDisplayName);
    internal ActiveDirectorySchemaClass(DirectoryContext context, string ldapDisplayName, DirectoryEntry classEntry, DirectoryEntry schemaEntry);
    internal ActiveDirectorySchemaClass(DirectoryContext context, string commonName, Hashtable propertyValuesFromServer, DirectoryEntry schemaEntry);
    internal ActiveDirectorySchemaClass(DirectoryContext context, string commonName, string ldapDisplayName, DirectoryEntry classEntry, DirectoryEntry schemaEntry);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public static ActiveDirectorySchemaClass FindByName(DirectoryContext context, string ldapDisplayName);
    public ReadOnlyActiveDirectorySchemaPropertyCollection GetAllProperties();
    public void Save();
    public virtual string ToString();
    public DirectoryEntry GetDirectoryEntry();
    public string get_Name();
    [NullableContextAttribute("2")]
public string get_CommonName();
    [NullableContextAttribute("2")]
public void set_CommonName(string value);
    [NullableContextAttribute("2")]
public string get_Oid();
    [NullableContextAttribute("2")]
public void set_Oid(string value);
    [NullableContextAttribute("2")]
public string get_Description();
    [NullableContextAttribute("2")]
public void set_Description(string value);
    public bool get_IsDefunct();
    public void set_IsDefunct(bool value);
    public ActiveDirectorySchemaClassCollection get_PossibleSuperiors();
    public ReadOnlyActiveDirectorySchemaClassCollection get_PossibleInferiors();
    public ActiveDirectorySchemaPropertyCollection get_MandatoryProperties();
    public ActiveDirectorySchemaPropertyCollection get_OptionalProperties();
    public ActiveDirectorySchemaClassCollection get_AuxiliaryClasses();
    [NullableContextAttribute("2")]
public ActiveDirectorySchemaClass get_SubClassOf();
    [NullableContextAttribute("2")]
public void set_SubClassOf(ActiveDirectorySchemaClass value);
    public SchemaClassType get_Type();
    public void set_Type(SchemaClassType value);
    public Guid get_SchemaGuid();
    public void set_SchemaGuid(Guid value);
    [NullableContextAttribute("2")]
public ActiveDirectorySecurity get_DefaultObjectSecurityDescriptor();
    [NullableContextAttribute("2")]
public void set_DefaultObjectSecurityDescriptor(ActiveDirectorySecurity value);
    private void CheckIfDisposed();
    private object GetValueFromCache(string propertyName, bool mustExist);
    private ICollection GetValuesFromCache(string propertyName);
    private void InitializePropertiesFromSchemaContainer();
    internal static Hashtable GetPropertiesFromSchemaContainer(DirectoryContext context, DirectoryEntry schemaEntry, string name, bool isDefunctOnServer);
    internal DirectoryEntry GetSchemaClassDirectoryEntry();
    private void SetProperty(string propertyName, object value);
    private ArrayList GetClasses(ICollection ldapDisplayNames);
    private ArrayList GetProperties(ICollection ldapDisplayNames);
    private ArrayList GetPropertyValuesRecursively(String[] propertyNames);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection : CollectionBase {
    private DirectoryEntry _classEntry;
    private string _propertyName;
    private ActiveDirectorySchemaClass _schemaClass;
    private bool _isBound;
    private DirectoryContext _context;
    public ActiveDirectorySchemaClass Item { get; public set; }
    internal ActiveDirectorySchemaClassCollection(DirectoryContext context, ActiveDirectorySchemaClass schemaClass, bool isBound, string propertyName, ICollection classNames, bool onlyNames);
    internal ActiveDirectorySchemaClassCollection(DirectoryContext context, ActiveDirectorySchemaClass schemaClass, bool isBound, string propertyName, ICollection classes);
    public ActiveDirectorySchemaClass get_Item(int index);
    public void set_Item(int index, ActiveDirectorySchemaClass value);
    public int Add(ActiveDirectorySchemaClass schemaClass);
    public void AddRange(ActiveDirectorySchemaClass[] schemaClasses);
    public void AddRange(ActiveDirectorySchemaClassCollection schemaClasses);
    public void AddRange(ReadOnlyActiveDirectorySchemaClassCollection schemaClasses);
    public void Remove(ActiveDirectorySchemaClass schemaClass);
    public void Insert(int index, ActiveDirectorySchemaClass schemaClass);
    public bool Contains(ActiveDirectorySchemaClass schemaClass);
    public void CopyTo(ActiveDirectorySchemaClass[] schemaClasses, int index);
    public int IndexOf(ActiveDirectorySchemaClass schemaClass);
    protected virtual void OnClearComplete();
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    protected virtual void OnValidate(object value);
    internal String[] GetMultiValuedProperty();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty : object {
    private DirectoryEntry _schemaEntry;
    private DirectoryEntry _propertyEntry;
    private DirectoryEntry _abstractPropertyEntry;
    private IAdsProperty _iadsProperty;
    private DirectoryContext _context;
    internal bool isBound;
    private bool _disposed;
    private ActiveDirectorySchema _schema;
    private bool _propertiesFromSchemaContainerInitialized;
    private bool _isDefunctOnServer;
    private SearchResult _propertyValuesFromServer;
    private string _ldapDisplayName;
    private string _commonName;
    private string _oid;
    private ActiveDirectorySyntax _syntax;
    private bool _syntaxInitialized;
    private string _description;
    private bool _descriptionInitialized;
    private bool _isSingleValued;
    private bool _isSingleValuedInitialized;
    private bool _isInGlobalCatalog;
    private bool _isInGlobalCatalogInitialized;
    private Nullable`1<int> _rangeLower;
    private bool _rangeLowerInitialized;
    private Nullable`1<int> _rangeUpper;
    private bool _rangeUpperInitialized;
    private bool _isDefunct;
    private SearchFlags _searchFlags;
    private bool _searchFlagsInitialized;
    private ActiveDirectorySchemaProperty _linkedProperty;
    private bool _linkedPropertyInitialized;
    private Nullable`1<int> _linkId;
    private bool _linkIdInitialized;
    private Byte[] _schemaGuidBinaryForm;
    private static OMObjectClass s_dnOMObjectClass;
    private static OMObjectClass s_dNWithStringOMObjectClass;
    private static OMObjectClass s_dNWithBinaryOMObjectClass;
    private static OMObjectClass s_replicaLinkOMObjectClass;
    private static OMObjectClass s_presentationAddressOMObjectClass;
    private static OMObjectClass s_accessPointDnOMObjectClass;
    private static OMObjectClass s_oRNameOMObjectClass;
    private static Syntax[] s_syntaxes;
    [NullableAttribute("1")]
public string Name { get; }
    public string CommonName { get; public set; }
    public string Oid { get; public set; }
    public ActiveDirectorySyntax Syntax { get; public set; }
    public string Description { get; public set; }
    public bool IsSingleValued { get; public set; }
    public bool IsIndexed { get; public set; }
    public bool IsIndexedOverContainer { get; public set; }
    public bool IsInAnr { get; public set; }
    public bool IsOnTombstonedObject { get; public set; }
    public bool IsTupleIndexed { get; public set; }
    public bool IsInGlobalCatalog { get; public set; }
    public Nullable`1<int> RangeLower { get; public set; }
    public Nullable`1<int> RangeUpper { get; public set; }
    public bool IsDefunct { get; public set; }
    public ActiveDirectorySchemaProperty Link { get; }
    public Nullable`1<int> LinkId { get; public set; }
    public Guid SchemaGuid { get; public set; }
    [NullableContextAttribute("1")]
public ActiveDirectorySchemaProperty(DirectoryContext context, string ldapDisplayName);
    internal ActiveDirectorySchemaProperty(DirectoryContext context, string ldapDisplayName, DirectoryEntry propertyEntry, DirectoryEntry schemaEntry);
    internal ActiveDirectorySchemaProperty(DirectoryContext context, string commonName, SearchResult propertyValuesFromServer, DirectoryEntry schemaEntry);
    internal ActiveDirectorySchemaProperty(DirectoryContext context, string commonName, string ldapDisplayName, DirectoryEntry propertyEntry, DirectoryEntry schemaEntry);
    private static ActiveDirectorySchemaProperty();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("1")]
public static ActiveDirectorySchemaProperty FindByName(DirectoryContext context, string ldapDisplayName);
    public void Save();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public DirectoryEntry GetDirectoryEntry();
    [NullableContextAttribute("1")]
public string get_Name();
    public string get_CommonName();
    public void set_CommonName(string value);
    public string get_Oid();
    public void set_Oid(string value);
    public ActiveDirectorySyntax get_Syntax();
    public void set_Syntax(ActiveDirectorySyntax value);
    public string get_Description();
    public void set_Description(string value);
    public bool get_IsSingleValued();
    public void set_IsSingleValued(bool value);
    public bool get_IsIndexed();
    public void set_IsIndexed(bool value);
    public bool get_IsIndexedOverContainer();
    public void set_IsIndexedOverContainer(bool value);
    public bool get_IsInAnr();
    public void set_IsInAnr(bool value);
    public bool get_IsOnTombstonedObject();
    public void set_IsOnTombstonedObject(bool value);
    public bool get_IsTupleIndexed();
    public void set_IsTupleIndexed(bool value);
    public bool get_IsInGlobalCatalog();
    public void set_IsInGlobalCatalog(bool value);
    public Nullable`1<int> get_RangeLower();
    public void set_RangeLower(Nullable`1<int> value);
    public Nullable`1<int> get_RangeUpper();
    public void set_RangeUpper(Nullable`1<int> value);
    public bool get_IsDefunct();
    public void set_IsDefunct(bool value);
    public ActiveDirectorySchemaProperty get_Link();
    public Nullable`1<int> get_LinkId();
    public void set_LinkId(Nullable`1<int> value);
    public Guid get_SchemaGuid();
    public void set_SchemaGuid(Guid value);
    private void CheckIfDisposed();
    private object GetValueFromCache(string propertyName, bool mustExist);
    private void InitializePropertiesFromSchemaContainer();
    internal static SearchResult GetPropertiesFromSchemaContainer(DirectoryContext context, DirectoryEntry schemaEntry, string name, bool isDefunctOnServer);
    internal DirectoryEntry GetSchemaPropertyDirectoryEntry();
    private void InitializeSearchFlags();
    private bool IsSetInSearchFlags(SearchFlags searchFlagBit);
    private void SetBitInSearchFlags(SearchFlags searchFlagBit);
    private void ResetBitInSearchFlags(SearchFlags searchFlagBit);
    private void SetProperty(string propertyName, object value);
    private ActiveDirectorySyntax MapSyntax(string syntaxId, int oMID, OMObjectClass oMObjectClass);
    private void SetSyntax(ActiveDirectorySyntax syntax);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection : CollectionBase {
    private DirectoryEntry _classEntry;
    private string _propertyName;
    private ActiveDirectorySchemaClass _schemaClass;
    private bool _isBound;
    private DirectoryContext _context;
    public ActiveDirectorySchemaProperty Item { get; public set; }
    internal ActiveDirectorySchemaPropertyCollection(DirectoryContext context, ActiveDirectorySchemaClass schemaClass, bool isBound, string propertyName, ICollection propertyNames, bool onlyNames);
    internal ActiveDirectorySchemaPropertyCollection(DirectoryContext context, ActiveDirectorySchemaClass schemaClass, bool isBound, string propertyName, ICollection properties);
    public ActiveDirectorySchemaProperty get_Item(int index);
    public void set_Item(int index, ActiveDirectorySchemaProperty value);
    public int Add(ActiveDirectorySchemaProperty schemaProperty);
    public void AddRange(ActiveDirectorySchemaProperty[] properties);
    public void AddRange(ActiveDirectorySchemaPropertyCollection properties);
    public void AddRange(ReadOnlyActiveDirectorySchemaPropertyCollection properties);
    public void Remove(ActiveDirectorySchemaProperty schemaProperty);
    public void Insert(int index, ActiveDirectorySchemaProperty schemaProperty);
    public bool Contains(ActiveDirectorySchemaProperty schemaProperty);
    internal bool Contains(string propertyName);
    public void CopyTo(ActiveDirectorySchemaProperty[] properties, int index);
    public int IndexOf(ActiveDirectorySchemaProperty schemaProperty);
    protected virtual void OnClearComplete();
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    protected virtual void OnValidate(object value);
    internal String[] GetMultiValuedProperty();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException : Exception {
    [CompilerGeneratedAttribute]
private int <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public int ErrorCode { get; }
    public string Name { get; }
    [NullableAttribute("1")]
public string Message { get; }
    public ActiveDirectoryServerDownException(string message, Exception inner, int errorCode, string name);
    public ActiveDirectoryServerDownException(string message, int errorCode, string name);
    public ActiveDirectoryServerDownException(string message, Exception inner);
    public ActiveDirectoryServerDownException(string message);
    [NullableContextAttribute("1")]
protected ActiveDirectoryServerDownException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public int get_ErrorCode();
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("1")]
public virtual string get_Message();
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySite : object {
    internal DirectoryContext context;
    private string _name;
    internal DirectoryEntry cachedEntry;
    private DirectoryEntry _ntdsEntry;
    private ActiveDirectorySubnetCollection _subnets;
    private DirectoryServer _topologyGenerator;
    private ReadOnlySiteCollection _adjacentSites;
    private bool _disposed;
    private DomainCollection _domains;
    private ReadOnlyDirectoryServerCollection _servers;
    private ReadOnlySiteLinkCollection _links;
    private ActiveDirectorySiteOptions _siteOptions;
    private ReadOnlyDirectoryServerCollection _bridgeheadServers;
    private DirectoryServerCollection _SMTPBridgeheadServers;
    private DirectoryServerCollection _RPCBridgeheadServers;
    private Byte[] _replicationSchedule;
    internal bool existing;
    private bool _subnetRetrieved;
    private bool _isADAMServer;
    private bool _topologyTouched;
    private bool _adjacentSitesRetrieved;
    private string _siteDN;
    private bool _domainsRetrieved;
    private bool _serversRetrieved;
    private bool _belongLinksRetrieved;
    private bool _bridgeheadServerRetrieved;
    private bool _SMTPBridgeRetrieved;
    private bool _RPCBridgeRetrieved;
    private static int ERROR_NO_SITENAME;
    public string Name { get; }
    public DomainCollection Domains { get; }
    public ActiveDirectorySubnetCollection Subnets { get; }
    public ReadOnlyDirectoryServerCollection Servers { get; }
    public ReadOnlySiteCollection AdjacentSites { get; }
    public ReadOnlySiteLinkCollection SiteLinks { get; }
    [NullableAttribute("2")]
public DirectoryServer InterSiteTopologyGenerator { get; public set; }
    public ActiveDirectorySiteOptions Options { get; public set; }
    [NullableAttribute("2")]
public string Location { get; public set; }
    public ReadOnlyDirectoryServerCollection BridgeheadServers { get; }
    public DirectoryServerCollection PreferredSmtpBridgeheadServers { get; }
    public DirectoryServerCollection PreferredRpcBridgeheadServers { get; }
    [NullableAttribute("2")]
public ActiveDirectorySchedule IntraSiteReplicationSchedule { get; public set; }
    private bool IsADAM { get; }
    private DirectoryEntry NTDSSiteEntry { get; }
    public ActiveDirectorySite(DirectoryContext context, string siteName);
    internal ActiveDirectorySite(DirectoryContext context, string siteName, bool existing);
    public static ActiveDirectorySite FindByName(DirectoryContext context, string siteName);
    public static ActiveDirectorySite GetComputerSite();
    public string get_Name();
    public DomainCollection get_Domains();
    public ActiveDirectorySubnetCollection get_Subnets();
    public ReadOnlyDirectoryServerCollection get_Servers();
    public ReadOnlySiteCollection get_AdjacentSites();
    public ReadOnlySiteLinkCollection get_SiteLinks();
    [NullableContextAttribute("2")]
public DirectoryServer get_InterSiteTopologyGenerator();
    [NullableContextAttribute("2")]
public void set_InterSiteTopologyGenerator(DirectoryServer value);
    public ActiveDirectorySiteOptions get_Options();
    public void set_Options(ActiveDirectorySiteOptions value);
    [NullableContextAttribute("2")]
public string get_Location();
    [NullableContextAttribute("2")]
public void set_Location(string value);
    public ReadOnlyDirectoryServerCollection get_BridgeheadServers();
    public DirectoryServerCollection get_PreferredSmtpBridgeheadServers();
    public DirectoryServerCollection get_PreferredRpcBridgeheadServers();
    [NullableContextAttribute("2")]
public ActiveDirectorySchedule get_IntraSiteReplicationSchedule();
    [NullableContextAttribute("2")]
public void set_IntraSiteReplicationSchedule(ActiveDirectorySchedule value);
    private bool get_IsADAM();
    private DirectoryEntry get_NTDSSiteEntry();
    public void Save();
    public void Delete();
    public virtual string ToString();
    private ReadOnlyDirectoryServerCollection GetBridgeheadServers();
    public DirectoryEntry GetDirectoryEntry();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private static void ValidateArgument(DirectoryContext context, string siteName);
    private void GetSubnets();
    private void GetAdjacentSites();
    private void GetLinks();
    private void GetDomains();
    private void GetServers();
    private void GetPreferredBridgeheadServers(ActiveDirectoryTransportType transport);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteCollection : CollectionBase {
    internal DirectoryEntry de;
    internal bool initialized;
    internal DirectoryContext context;
    public ActiveDirectorySite Item { get; public set; }
    internal ActiveDirectorySiteCollection(ArrayList sites);
    public ActiveDirectorySite get_Item(int index);
    public void set_Item(int index, ActiveDirectorySite value);
    public int Add(ActiveDirectorySite site);
    public void AddRange(ActiveDirectorySite[] sites);
    public void AddRange(ActiveDirectorySiteCollection sites);
    public bool Contains(ActiveDirectorySite site);
    public void CopyTo(ActiveDirectorySite[] array, int index);
    public int IndexOf(ActiveDirectorySite site);
    public void Insert(int index, ActiveDirectorySite site);
    public void Remove(ActiveDirectorySite site);
    protected virtual void OnClearComplete();
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    protected virtual void OnValidate(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink : object {
    internal DirectoryContext context;
    private string _name;
    private ActiveDirectoryTransportType _transport;
    private bool _disposed;
    internal bool existing;
    internal DirectoryEntry cachedEntry;
    private static int systemDefaultCost;
    private TimeSpan _systemDefaultInterval;
    private static int appDefaultCost;
    private static int appDefaultInterval;
    private ActiveDirectorySiteCollection _sites;
    private bool _siteRetrieved;
    public string Name { get; }
    public ActiveDirectoryTransportType TransportType { get; }
    public ActiveDirectorySiteCollection Sites { get; }
    public int Cost { get; public set; }
    public TimeSpan ReplicationInterval { get; public set; }
    public bool ReciprocalReplicationEnabled { get; public set; }
    public bool NotificationEnabled { get; public set; }
    public bool DataCompressionEnabled { get; public set; }
    [NullableAttribute("2")]
public ActiveDirectorySchedule InterSiteReplicationSchedule { get; public set; }
    public ActiveDirectorySiteLink(DirectoryContext context, string siteLinkName);
    public ActiveDirectorySiteLink(DirectoryContext context, string siteLinkName, ActiveDirectoryTransportType transport);
    public ActiveDirectorySiteLink(DirectoryContext context, string siteLinkName, ActiveDirectoryTransportType transport, ActiveDirectorySchedule schedule);
    internal ActiveDirectorySiteLink(DirectoryContext context, string siteLinkName, ActiveDirectoryTransportType transport, bool existing, DirectoryEntry entry);
    public static ActiveDirectorySiteLink FindByName(DirectoryContext context, string siteLinkName);
    public static ActiveDirectorySiteLink FindByName(DirectoryContext context, string siteLinkName, ActiveDirectoryTransportType transport);
    public string get_Name();
    public ActiveDirectoryTransportType get_TransportType();
    public ActiveDirectorySiteCollection get_Sites();
    public int get_Cost();
    public void set_Cost(int value);
    public TimeSpan get_ReplicationInterval();
    public void set_ReplicationInterval(TimeSpan value);
    public bool get_ReciprocalReplicationEnabled();
    public void set_ReciprocalReplicationEnabled(bool value);
    public bool get_NotificationEnabled();
    public void set_NotificationEnabled(bool value);
    public bool get_DataCompressionEnabled();
    public void set_DataCompressionEnabled(bool value);
    [NullableContextAttribute("2")]
public ActiveDirectorySchedule get_InterSiteReplicationSchedule();
    [NullableContextAttribute("2")]
public void set_InterSiteReplicationSchedule(ActiveDirectorySchedule value);
    public void Save();
    public void Delete();
    public virtual string ToString();
    public DirectoryEntry GetDirectoryEntry();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private static void ValidateArgument(DirectoryContext context, string siteLinkName, ActiveDirectoryTransportType transport);
    private void GetSites();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge : object {
    internal DirectoryContext context;
    private string _name;
    private ActiveDirectoryTransportType _transport;
    private bool _disposed;
    private bool _existing;
    internal DirectoryEntry cachedEntry;
    private ActiveDirectorySiteLinkCollection _links;
    private bool _linksRetrieved;
    public string Name { get; }
    public ActiveDirectorySiteLinkCollection SiteLinks { get; }
    public ActiveDirectoryTransportType TransportType { get; }
    public ActiveDirectorySiteLinkBridge(DirectoryContext context, string bridgeName);
    public ActiveDirectorySiteLinkBridge(DirectoryContext context, string bridgeName, ActiveDirectoryTransportType transport);
    internal ActiveDirectorySiteLinkBridge(DirectoryContext context, string bridgeName, ActiveDirectoryTransportType transport, bool existing);
    public static ActiveDirectorySiteLinkBridge FindByName(DirectoryContext context, string bridgeName);
    public static ActiveDirectorySiteLinkBridge FindByName(DirectoryContext context, string bridgeName, ActiveDirectoryTransportType transport);
    public string get_Name();
    public ActiveDirectorySiteLinkCollection get_SiteLinks();
    public ActiveDirectoryTransportType get_TransportType();
    public void Save();
    public void Delete();
    public virtual string ToString();
    public DirectoryEntry GetDirectoryEntry();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private static void ValidateArgument(DirectoryContext context, string bridgeName, ActiveDirectoryTransportType transport);
    private void GetLinks();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkCollection : CollectionBase {
    internal DirectoryEntry de;
    internal bool initialized;
    internal DirectoryContext context;
    public ActiveDirectorySiteLink Item { get; public set; }
    public ActiveDirectorySiteLink get_Item(int index);
    public void set_Item(int index, ActiveDirectorySiteLink value);
    public int Add(ActiveDirectorySiteLink link);
    public void AddRange(ActiveDirectorySiteLink[] links);
    public void AddRange(ActiveDirectorySiteLinkCollection links);
    public bool Contains(ActiveDirectorySiteLink link);
    public void CopyTo(ActiveDirectorySiteLink[] array, int index);
    public int IndexOf(ActiveDirectorySiteLink link);
    public void Insert(int index, ActiveDirectorySiteLink link);
    public void Remove(ActiveDirectorySiteLink link);
    protected virtual void OnClearComplete();
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    protected virtual void OnValidate(object value);
}
[FlagsAttribute]
public enum System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteOptions : Enum {
    public int value__;
    public static ActiveDirectorySiteOptions None;
    public static ActiveDirectorySiteOptions AutoTopologyDisabled;
    public static ActiveDirectorySiteOptions TopologyCleanupDisabled;
    public static ActiveDirectorySiteOptions AutoMinimumHopDisabled;
    public static ActiveDirectorySiteOptions StaleServerDetectDisabled;
    public static ActiveDirectorySiteOptions AutoInterSiteTopologyDisabled;
    public static ActiveDirectorySiteOptions GroupMembershipCachingEnabled;
    public static ActiveDirectorySiteOptions ForceKccWindows2003Behavior;
    public static ActiveDirectorySiteOptions UseWindows2000IstgElection;
    public static ActiveDirectorySiteOptions RandomBridgeHeaderServerSelectionDisabled;
    public static ActiveDirectorySiteOptions UseHashingForReplicationSchedule;
    public static ActiveDirectorySiteOptions RedundantServerTopologyEnabled;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet : object {
    private ActiveDirectorySite _site;
    private string _name;
    internal DirectoryContext context;
    private bool _disposed;
    internal bool existing;
    internal DirectoryEntry cachedEntry;
    public string Name { get; }
    [NullableAttribute("2")]
public ActiveDirectorySite Site { get; public set; }
    [NullableAttribute("2")]
public string Location { get; public set; }
    public ActiveDirectorySubnet(DirectoryContext context, string subnetName);
    public ActiveDirectorySubnet(DirectoryContext context, string subnetName, string siteName);
    internal ActiveDirectorySubnet(DirectoryContext context, string subnetName, string siteName, bool existing);
    public static ActiveDirectorySubnet FindByName(DirectoryContext context, string subnetName);
    public string get_Name();
    [NullableContextAttribute("2")]
public ActiveDirectorySite get_Site();
    [NullableContextAttribute("2")]
public void set_Site(ActiveDirectorySite value);
    [NullableContextAttribute("2")]
public string get_Location();
    [NullableContextAttribute("2")]
public void set_Location(string value);
    public void Save();
    public void Delete();
    public virtual string ToString();
    public DirectoryEntry GetDirectoryEntry();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private static void ValidateArgument(DirectoryContext context, string subnetName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnetCollection : CollectionBase {
    internal Hashtable changeList;
    internal bool initialized;
    private string _siteDN;
    private DirectoryContext _context;
    private ArrayList _copyList;
    public ActiveDirectorySubnet Item { get; public set; }
    internal ActiveDirectorySubnetCollection(DirectoryContext context, string siteDN);
    public ActiveDirectorySubnet get_Item(int index);
    public void set_Item(int index, ActiveDirectorySubnet value);
    public int Add(ActiveDirectorySubnet subnet);
    public void AddRange(ActiveDirectorySubnet[] subnets);
    public void AddRange(ActiveDirectorySubnetCollection subnets);
    public bool Contains(ActiveDirectorySubnet subnet);
    public void CopyTo(ActiveDirectorySubnet[] array, int index);
    public int IndexOf(ActiveDirectorySubnet subnet);
    public void Insert(int index, ActiveDirectorySubnet subnet);
    public void Remove(ActiveDirectorySubnet subnet);
    protected virtual void OnClear();
    protected virtual void OnClearComplete();
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    protected virtual void OnValidate(object value);
    private string MakePath(string subnetDN);
}
public enum System.DirectoryServices.ActiveDirectory.ActiveDirectorySyntax : Enum {
    public int value__;
    public static ActiveDirectorySyntax CaseExactString;
    public static ActiveDirectorySyntax CaseIgnoreString;
    public static ActiveDirectorySyntax NumericString;
    public static ActiveDirectorySyntax DirectoryString;
    public static ActiveDirectorySyntax OctetString;
    public static ActiveDirectorySyntax SecurityDescriptor;
    public static ActiveDirectorySyntax Int;
    public static ActiveDirectorySyntax Int64;
    public static ActiveDirectorySyntax Bool;
    public static ActiveDirectorySyntax Oid;
    public static ActiveDirectorySyntax GeneralizedTime;
    public static ActiveDirectorySyntax UtcTime;
    public static ActiveDirectorySyntax DN;
    public static ActiveDirectorySyntax DNWithBinary;
    public static ActiveDirectorySyntax DNWithString;
    public static ActiveDirectorySyntax Enumeration;
    public static ActiveDirectorySyntax IA5String;
    public static ActiveDirectorySyntax PrintableString;
    public static ActiveDirectorySyntax Sid;
    public static ActiveDirectorySyntax AccessPointDN;
    public static ActiveDirectorySyntax ORName;
    public static ActiveDirectorySyntax PresentationAddress;
    public static ActiveDirectorySyntax ReplicaLink;
}
public enum System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType : Enum {
    public int value__;
    public static ActiveDirectoryTransportType Rpc;
    public static ActiveDirectoryTransportType Smtp;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.AdamInstance : DirectoryServer {
    private String[] _becomeRoleOwnerAttrs;
    private bool _disposed;
    private string _cachedHostName;
    private int _cachedLdapPort;
    private int _cachedSslPort;
    private bool _defaultPartitionInitialized;
    private bool _defaultPartitionModified;
    private ConfigurationSet _currentConfigSet;
    private string _cachedDefaultPartition;
    private AdamRoleCollection _cachedRoles;
    private IntPtr _ADAMHandle;
    private IntPtr _authIdentity;
    private SyncUpdateCallback _userDelegate;
    private SyncReplicaFromAllServersCallback _syncAllFunctionPointer;
    public ConfigurationSet ConfigurationSet { get; }
    public string HostName { get; }
    public int LdapPort { get; }
    public int SslPort { get; }
    public AdamRoleCollection Roles { get; }
    [NullableAttribute("2")]
public string DefaultPartition { get; public set; }
    [NullableAttribute("2")]
public string IPAddress { get; }
    public string SiteName { get; }
    internal string SiteObjectName { get; }
    internal string ServerObjectName { get; }
    internal string NtdsaObjectName { get; }
    internal Guid NtdsaObjectGuid { get; }
    [NullableAttribute("2")]
public SyncUpdateCallback SyncFromAllServersCallback { get; public set; }
    public ReplicationConnectionCollection InboundConnections { get; }
    public ReplicationConnectionCollection OutboundConnections { get; }
    internal AdamInstance(DirectoryContext context, string adamInstanceName);
    internal AdamInstance(DirectoryContext context, string adamInstanceName, DirectoryEntryManager directoryEntryMgr, bool nameIncludesPort);
    internal AdamInstance(DirectoryContext context, string adamHostName, DirectoryEntryManager directoryEntryMgr);
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
    public static AdamInstance GetAdamInstance(DirectoryContext context);
    public static AdamInstance FindOne(DirectoryContext context, string partitionName);
    public static AdamInstanceCollection FindAll(DirectoryContext context, string partitionName);
    public void TransferRoleOwnership(AdamRole role);
    public void SeizeRoleOwnership(AdamRole role);
    public virtual void CheckReplicationConsistency();
    public virtual ReplicationCursorCollection GetReplicationCursors(string partition);
    public virtual ReplicationOperationInformation GetReplicationOperationInformation();
    public virtual ReplicationNeighborCollection GetReplicationNeighbors(string partition);
    public virtual ReplicationNeighborCollection GetAllReplicationNeighbors();
    public virtual ReplicationFailureCollection GetReplicationConnectionFailures();
    public virtual ActiveDirectoryReplicationMetadata GetReplicationMetadata(string objectPath);
    public virtual void SyncReplicaFromServer(string partition, string sourceServer);
    public virtual void TriggerSyncReplicaFromNeighbors(string partition);
    public virtual void SyncReplicaFromAllServers(string partition, SyncFromAllServersOptions options);
    public void Save();
    public ConfigurationSet get_ConfigurationSet();
    public string get_HostName();
    public int get_LdapPort();
    public int get_SslPort();
    public AdamRoleCollection get_Roles();
    [NullableContextAttribute("2")]
public string get_DefaultPartition();
    [NullableContextAttribute("2")]
public void set_DefaultPartition(string value);
    [NullableContextAttribute("2")]
public virtual string get_IPAddress();
    public virtual string get_SiteName();
    internal string get_SiteObjectName();
    internal string get_ServerObjectName();
    internal string get_NtdsaObjectName();
    internal Guid get_NtdsaObjectGuid();
    [NullableContextAttribute("2")]
public virtual SyncUpdateCallback get_SyncFromAllServersCallback();
    [NullableContextAttribute("2")]
public virtual void set_SyncFromAllServersCallback(SyncUpdateCallback value);
    public virtual ReplicationConnectionCollection get_InboundConnections();
    public virtual ReplicationConnectionCollection get_OutboundConnections();
    private ReplicationFailureCollection GetReplicationFailures(DS_REPL_INFO_TYPE type);
    private void GetADAMHandle();
    private void FreeADAMHandle();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.AdamInstanceCollection : ReadOnlyCollectionBase {
    public AdamInstance Item { get; }
    internal AdamInstanceCollection(ArrayList values);
    public AdamInstance get_Item(int index);
    public bool Contains(AdamInstance adamInstance);
    public int IndexOf(AdamInstance adamInstance);
    public void CopyTo(AdamInstance[] adamInstances, int index);
}
public enum System.DirectoryServices.ActiveDirectory.AdamRole : Enum {
    public int value__;
    public static AdamRole SchemaRole;
    public static AdamRole NamingRole;
}
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.AdamRoleCollection : ReadOnlyCollectionBase {
    public AdamRole Item { get; }
    internal AdamRoleCollection(ArrayList values);
    public AdamRole get_Item(int index);
    public bool Contains(AdamRole role);
    public int IndexOf(AdamRole role);
    [NullableContextAttribute("1")]
public void CopyTo(AdamRole[] roles, int index);
}
internal class System.DirectoryServices.ActiveDirectory.ADSearcher : object {
    private DirectorySearcher _searcher;
    private static TimeSpan s_defaultTimeSpan;
    public StringCollection PropertiesToLoad { get; }
    public string Filter { get; public set; }
    public ADSearcher(DirectoryEntry searchRoot, string filter, String[] propertiesToLoad, SearchScope scope);
    public ADSearcher(DirectoryEntry searchRoot, string filter, String[] propertiesToLoad, SearchScope scope, bool pagedSearch, bool cacheResults);
    private static ADSearcher();
    public SearchResult FindOne();
    public SearchResultCollection FindAll();
    public StringCollection get_PropertiesToLoad();
    public string get_Filter();
    public void set_Filter(string value);
    public void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ApplicationPartition : ActiveDirectoryPartition {
    private bool _disposed;
    private ApplicationPartitionType _appType;
    private bool _committed;
    private DirectoryEntry _domainDNSEntry;
    private DirectoryEntry _crossRefEntry;
    private string _dnsName;
    private DirectoryServerCollection _cachedDirectoryServers;
    private bool _securityRefDomainModified;
    private string _securityRefDomain;
    public DirectoryServerCollection DirectoryServers { get; }
    [NullableAttribute("2")]
public string SecurityReferenceDomain { get; public set; }
    public ApplicationPartition(DirectoryContext context, string distinguishedName);
    public ApplicationPartition(DirectoryContext context, string distinguishedName, string objectClass);
    internal ApplicationPartition(DirectoryContext context, string distinguishedName, string dnsName, ApplicationPartitionType appType, DirectoryEntryManager directoryEntryMgr);
    internal ApplicationPartition(DirectoryContext context, string distinguishedName, string dnsName, DirectoryEntryManager directoryEntryMgr);
    protected virtual void Dispose(bool disposing);
    public static ApplicationPartition GetApplicationPartition(DirectoryContext context);
    public static ApplicationPartition FindByName(DirectoryContext context, string distinguishedName);
    public DirectoryServer FindDirectoryServer();
    public DirectoryServer FindDirectoryServer(string siteName);
    public DirectoryServer FindDirectoryServer(bool forceRediscovery);
    public DirectoryServer FindDirectoryServer(string siteName, bool forceRediscovery);
    public ReadOnlyDirectoryServerCollection FindAllDirectoryServers();
    public ReadOnlyDirectoryServerCollection FindAllDirectoryServers(string siteName);
    public ReadOnlyDirectoryServerCollection FindAllDiscoverableDirectoryServers();
    public ReadOnlyDirectoryServerCollection FindAllDiscoverableDirectoryServers(string siteName);
    public void Delete();
    public void Save();
    public virtual DirectoryEntry GetDirectoryEntry();
    public DirectoryServerCollection get_DirectoryServers();
    [NullableContextAttribute("2")]
public string get_SecurityReferenceDomain();
    [NullableContextAttribute("2")]
public void set_SecurityReferenceDomain(string value);
    private void ValidateApplicationPartitionParameters(DirectoryContext context, string distinguishedName, string objectClass, bool objectClassSpecified);
    [MemberNotNullAttribute("_domainDNSEntry")]
private void CreateApplicationPartition(string distinguishedName, string objectClass);
    [MemberNotNullAttribute("_crossRefEntry")]
private void InitializeCrossRef(string distinguishedName);
    private static ApplicationPartitionType GetApplicationPartitionType(DirectoryContext context);
    [MemberNotNullAttribute("_crossRefEntry")]
internal DirectoryEntry GetCrossRefEntry();
    internal string GetNamingRoleOwner();
    private DirectoryServer FindDirectoryServerInternal(string siteName, bool forceRediscovery);
    private ReadOnlyDirectoryServerCollection FindAllDirectoryServersInternal(string siteName);
    private ReadOnlyDirectoryServerCollection FindAllDiscoverableDirectoryServersInternal(string siteName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection : ReadOnlyCollectionBase {
    public ApplicationPartition Item { get; }
    internal ApplicationPartitionCollection(ArrayList values);
    public ApplicationPartition get_Item(int index);
    public bool Contains(ApplicationPartition applicationPartition);
    public int IndexOf(ApplicationPartition applicationPartition);
    public void CopyTo(ApplicationPartition[] applicationPartitions, int index);
}
internal enum System.DirectoryServices.ActiveDirectory.ApplicationPartitionType : Enum {
    public int value__;
    public static ApplicationPartitionType Unknown;
    public static ApplicationPartitionType ADApplicationPartition;
    public static ApplicationPartitionType ADAMApplicationPartition;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.AttributeMetadata : object {
    private string _pszLastOriginatingDsaDN;
    private string _originatingServerName;
    private DirectoryServer _server;
    private Hashtable _nameTable;
    private bool _advanced;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastOriginatingChangeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <LastOriginatingInvocationId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <OriginatingChangeUsn>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LocalChangeUsn>k__BackingField;
    public string Name { get; }
    public int Version { get; }
    public DateTime LastOriginatingChangeTime { get; }
    public Guid LastOriginatingInvocationId { get; }
    public long OriginatingChangeUsn { get; }
    public long LocalChangeUsn { get; }
    [NullableAttribute("2")]
public string OriginatingServer { get; }
    internal AttributeMetadata(IntPtr info, bool advanced, DirectoryServer server, Hashtable table);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public DateTime get_LastOriginatingChangeTime();
    [CompilerGeneratedAttribute]
public Guid get_LastOriginatingInvocationId();
    [CompilerGeneratedAttribute]
public long get_OriginatingChangeUsn();
    [CompilerGeneratedAttribute]
public long get_LocalChangeUsn();
    [NullableContextAttribute("2")]
public string get_OriginatingServer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.AttributeMetadataCollection : ReadOnlyCollectionBase {
    public AttributeMetadata Item { get; }
    public AttributeMetadata get_Item(int index);
    public bool Contains(AttributeMetadata metadata);
    public int IndexOf(AttributeMetadata metadata);
    public void CopyTo(AttributeMetadata[] metadata, int index);
    internal int Add(AttributeMetadata metadata);
}
internal enum System.DirectoryServices.ActiveDirectory.Capability : Enum {
    public int value__;
    public static Capability ActiveDirectory;
    public static Capability ActiveDirectoryApplicationMode;
    public static Capability ActiveDirectoryOrADAM;
}
internal class System.DirectoryServices.ActiveDirectory.Component : ValueType {
    public string Name;
    public string Value;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ConfigurationSet : object {
    private DirectoryContext _context;
    private DirectoryEntryManager _directoryEntryMgr;
    private bool _disposed;
    private string _configSetName;
    private ReadOnlySiteCollection _cachedSites;
    private AdamInstanceCollection _cachedADAMInstances;
    private ApplicationPartitionCollection _cachedApplicationPartitions;
    private ActiveDirectorySchema _cachedSchema;
    private AdamInstance _cachedSchemaRoleOwner;
    private AdamInstance _cachedNamingRoleOwner;
    private ReplicationSecurityLevel _cachedSecurityLevel;
    private static TimeSpan s_locationTimeout;
    public string Name { get; }
    public ReadOnlySiteCollection Sites { get; }
    public AdamInstanceCollection AdamInstances { get; }
    public ApplicationPartitionCollection ApplicationPartitions { get; }
    public ActiveDirectorySchema Schema { get; }
    public AdamInstance SchemaRoleOwner { get; }
    public AdamInstance NamingRoleOwner { get; }
    internal ConfigurationSet(DirectoryContext context, string configSetName, DirectoryEntryManager directoryEntryMgr);
    internal ConfigurationSet(DirectoryContext context, string configSetName);
    private static ConfigurationSet();
    public void Dispose();
    protected virtual void Dispose(bool disposing);
    public static ConfigurationSet GetConfigurationSet(DirectoryContext context);
    public AdamInstance FindAdamInstance();
    public AdamInstance FindAdamInstance(string partitionName);
    public AdamInstance FindAdamInstance(string partitionName, string siteName);
    public AdamInstanceCollection FindAllAdamInstances();
    public AdamInstanceCollection FindAllAdamInstances(string partitionName);
    public AdamInstanceCollection FindAllAdamInstances(string partitionName, string siteName);
    public DirectoryEntry GetDirectoryEntry();
    public ReplicationSecurityLevel GetSecurityLevel();
    public void SetSecurityLevel(ReplicationSecurityLevel securityLevel);
    public virtual string ToString();
    public string get_Name();
    public ReadOnlySiteCollection get_Sites();
    public AdamInstanceCollection get_AdamInstances();
    public ApplicationPartitionCollection get_ApplicationPartitions();
    public ActiveDirectorySchema get_Schema();
    public AdamInstance get_SchemaRoleOwner();
    public AdamInstance get_NamingRoleOwner();
    private static DirectoryEntry GetSearchRootEntry(Forest forest);
    internal static AdamInstance FindAnyAdamInstance(DirectoryContext context);
    internal static AdamInstance FindOneAdamInstance(DirectoryContext context, string partitionName, string siteName);
    internal static AdamInstance FindOneAdamInstance(string configSetName, DirectoryContext context, string partitionName, string siteName);
    internal static AdamInstanceCollection FindAdamInstances(DirectoryContext context, string partitionName, string siteName);
    internal static AdamInstance FindAliveAdamInstance(string configSetName, DirectoryContext context, ArrayList adamInstanceNames);
    private AdamInstance GetRoleOwner(AdamRole role);
    private ArrayList GetSites();
    private ArrayList GetApplicationPartitions();
    private void CheckIfDisposed();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.DirectoryContext : object {
    private string _name;
    private DirectoryContextType _contextType;
    private NetworkCredential _credential;
    internal string serverName;
    internal bool usernameIsNull;
    internal bool passwordIsNull;
    private bool _validated;
    private bool _contextIsValid;
    internal static SafeLibraryHandle ADHandle;
    internal static SafeLibraryHandle ADAMHandle;
    public string Name { get; }
    public string UserName { get; }
    internal string Password { get; }
    public DirectoryContextType ContextType { get; }
    [NullableAttribute("1")]
internal NetworkCredential Credential { get; }
    private static DirectoryContext();
    internal DirectoryContext(DirectoryContextType contextType, string name, DirectoryContext context);
    internal DirectoryContext(DirectoryContext context);
    public DirectoryContext(DirectoryContextType contextType);
    [NullableContextAttribute("1")]
public DirectoryContext(DirectoryContextType contextType, string name);
    public DirectoryContext(DirectoryContextType contextType, string username, string password);
    public DirectoryContext(DirectoryContextType contextType, string name, string username, string password);
    [MemberNotNullAttribute("_credential")]
internal void InitializeDirectoryContext(DirectoryContextType contextType, string name, string username, string password);
    public string get_Name();
    public string get_UserName();
    internal string get_Password();
    public DirectoryContextType get_ContextType();
    internal NetworkCredential get_Credential();
    internal static bool IsContextValid(DirectoryContext context, DirectoryContextType contextType);
    internal bool isRootDomain();
    internal bool isDomain();
    internal bool isNdnc();
    internal bool isServer();
    internal bool isADAMConfigSet();
    internal bool isCurrentForest();
    internal bool useServerBind();
    internal string GetServerName();
    internal static string GetLoggedOnDomain();
    internal static string GetDnsDomainName(string domainName);
    [MemberNotNullAttribute("ADHandle")]
[MemberNotNullAttribute("ADAMHandle")]
private static void GetLibraryHandle();
}
public enum System.DirectoryServices.ActiveDirectory.DirectoryContextType : Enum {
    public int value__;
    public static DirectoryContextType Domain;
    public static DirectoryContextType Forest;
    public static DirectoryContextType DirectoryServer;
    public static DirectoryContextType ConfigurationSet;
    public static DirectoryContextType ApplicationPartition;
}
internal class System.DirectoryServices.ActiveDirectory.DirectoryEntryManager : object {
    private Hashtable _directoryEntries;
    private string _bindingPrefix;
    private DirectoryContext _context;
    private IAdsPathname _pathCracker;
    internal DirectoryEntryManager(DirectoryContext context);
    internal ICollection GetCachedDirectoryEntries();
    internal DirectoryEntry GetCachedDirectoryEntry(WellKnownDN dn);
    internal DirectoryEntry GetCachedDirectoryEntry(string distinguishedName);
    internal void RemoveIfExists(string distinguishedName);
    private DirectoryEntry GetNewDirectoryEntry(string dn);
    internal string ExpandWellKnownDN(WellKnownDN dn);
    internal static DirectoryEntry GetDirectoryEntry(DirectoryContext context, WellKnownDN dn);
    internal static DirectoryEntry GetDirectoryEntry(DirectoryContext context, string dn);
    internal static DirectoryEntry GetDirectoryEntryInternal(DirectoryContext context, string path);
    internal static DirectoryEntry Bind(string ldapPath, string username, string password, bool useServerBind);
    internal static string ExpandWellKnownDN(DirectoryContext context, WellKnownDN dn);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.DirectoryServices.ActiveDirectory.DirectoryServer : object {
    private bool _disposed;
    internal DirectoryContext context;
    internal string replicaName;
    internal DirectoryEntryManager directoryEntryMgr;
    internal bool siteInfoModified;
    internal string cachedSiteName;
    internal string cachedSiteObjectName;
    internal string cachedServerObjectName;
    internal string cachedNtdsaObjectName;
    internal Guid cachedNtdsaObjectGuid;
    internal ReadOnlyStringCollection cachedPartitions;
    internal static int DS_REPSYNC_ASYNCHRONOUS_OPERATION;
    internal static int DS_REPSYNC_ALL_SOURCES;
    internal static int DS_REPSYNCALL_ID_SERVERS_BY_DN;
    internal static int DS_REPL_NOTSUPPORTED;
    private ReplicationConnectionCollection _inbound;
    private ReplicationConnectionCollection _outbound;
    public string Name { get; }
    public ReadOnlyStringCollection Partitions { get; }
    [NullableAttribute("2")]
public string IPAddress { get; }
    public string SiteName { get; }
    [NullableAttribute("2")]
public SyncUpdateCallback SyncFromAllServersCallback { get; public set; }
    public ReplicationConnectionCollection InboundConnections { get; }
    public ReplicationConnectionCollection OutboundConnections { get; }
    internal DirectoryContext Context { get; }
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual string ToString();
    public void MoveToAnotherSite(string siteName);
    public DirectoryEntry GetDirectoryEntry();
    public abstract virtual void CheckReplicationConsistency();
    public abstract virtual ReplicationCursorCollection GetReplicationCursors(string partition);
    public abstract virtual ReplicationOperationInformation GetReplicationOperationInformation();
    public abstract virtual ReplicationNeighborCollection GetReplicationNeighbors(string partition);
    public abstract virtual ReplicationNeighborCollection GetAllReplicationNeighbors();
    public abstract virtual ReplicationFailureCollection GetReplicationConnectionFailures();
    public abstract virtual ActiveDirectoryReplicationMetadata GetReplicationMetadata(string objectPath);
    public abstract virtual void SyncReplicaFromServer(string partition, string sourceServer);
    public abstract virtual void TriggerSyncReplicaFromNeighbors(string partition);
    public abstract virtual void SyncReplicaFromAllServers(string partition, SyncFromAllServersOptions options);
    public string get_Name();
    public ReadOnlyStringCollection get_Partitions();
    [NullableContextAttribute("2")]
public abstract virtual string get_IPAddress();
    public abstract virtual string get_SiteName();
    [NullableContextAttribute("2")]
public abstract virtual SyncUpdateCallback get_SyncFromAllServersCallback();
    [NullableContextAttribute("2")]
public abstract virtual void set_SyncFromAllServersCallback(SyncUpdateCallback value);
    public abstract virtual ReplicationConnectionCollection get_InboundConnections();
    public abstract virtual ReplicationConnectionCollection get_OutboundConnections();
    internal ArrayList GetPartitions();
    internal void CheckIfDisposed();
    internal DirectoryContext get_Context();
    internal void CheckConsistencyHelper(IntPtr dsHandle, SafeLibraryHandle libHandle);
    internal IntPtr GetReplicationInfoHelper(IntPtr dsHandle, int type, int secondaryType, string partition, Boolean& advanced, int context, SafeLibraryHandle libHandle);
    internal ReplicationCursorCollection ConstructReplicationCursors(IntPtr dsHandle, bool advanced, IntPtr info, string partition, DirectoryServer server, SafeLibraryHandle libHandle);
    internal ReplicationOperationInformation ConstructPendingOperations(IntPtr info, DirectoryServer server, SafeLibraryHandle libHandle);
    internal ReplicationNeighborCollection ConstructNeighbors(IntPtr info, DirectoryServer server, SafeLibraryHandle libHandle);
    internal ReplicationFailureCollection ConstructFailures(IntPtr info, DirectoryServer server, SafeLibraryHandle libHandle);
    internal ActiveDirectoryReplicationMetadata ConstructMetaData(bool advanced, IntPtr info, DirectoryServer server, SafeLibraryHandle libHandle);
    internal bool SyncAllCallbackRoutine(IntPtr data, IntPtr update);
    internal void SyncReplicaAllHelper(IntPtr handle, SyncReplicaFromAllServersCallback syncAllCallback, string partition, SyncFromAllServersOptions option, SyncUpdateCallback callback, SafeLibraryHandle libHandle);
    private void FreeReplicaInfo(DS_REPL_INFO_TYPE type, IntPtr value, SafeLibraryHandle libHandle);
    internal void SyncReplicaHelper(IntPtr dsHandle, bool isADAM, string partition, string sourceServer, int option, SafeLibraryHandle libHandle);
    internal ReplicationConnectionCollection GetInboundConnectionsHelper();
    internal ReplicationConnectionCollection GetOutboundConnectionsHelper();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.DirectoryServerCollection : CollectionBase {
    internal string siteDN;
    internal string transportDN;
    internal DirectoryContext context;
    internal bool initialized;
    internal Hashtable changeList;
    private List`1<object> _copyList;
    private DirectoryEntry _crossRefEntry;
    private bool _isADAM;
    private bool _isForNC;
    public DirectoryServer Item { get; public set; }
    internal DirectoryServerCollection(DirectoryContext context, string siteDN, string transportName);
    internal DirectoryServerCollection(DirectoryContext context, DirectoryEntry crossRefEntry, bool isADAM, ReadOnlyDirectoryServerCollection servers);
    public DirectoryServer get_Item(int index);
    public void set_Item(int index, DirectoryServer value);
    public int Add(DirectoryServer server);
    public void AddRange(DirectoryServer[] servers);
    public bool Contains(DirectoryServer server);
    public void CopyTo(DirectoryServer[] array, int index);
    public int IndexOf(DirectoryServer server);
    public void Insert(int index, DirectoryServer server);
    public void Remove(DirectoryServer server);
    protected virtual void OnClear();
    protected virtual void OnClearComplete();
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    protected virtual void OnValidate(object value);
    internal String[] GetMultiValuedProperty();
}
internal class System.DirectoryServices.ActiveDirectory.DistinguishedName : object {
    [CompilerGeneratedAttribute]
private Component[] <Components>k__BackingField;
    public Component[] Components { get; }
    public DistinguishedName(string dn);
    [CompilerGeneratedAttribute]
public Component[] get_Components();
    public bool Equals(DistinguishedName dn);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class System.DirectoryServices.ActiveDirectory.DnsRecord : object {
    public IntPtr next;
    public string name;
    public short type;
    public short dataLength;
    public int flags;
    public int ttl;
    public int reserved;
    public DnsSrvData data;
}
internal class System.DirectoryServices.ActiveDirectory.DnsSrvData : object {
    public string targetName;
    public short priority;
    public short weight;
    public short port;
    public short pad;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.Domain : ActiveDirectoryPartition {
    private string _crossRefDN;
    private string _trustParent;
    private DomainControllerCollection _cachedDomainControllers;
    private DomainCollection _cachedChildren;
    private DomainMode _currentDomainMode;
    private int _domainModeLevel;
    private DomainController _cachedPdcRoleOwner;
    private DomainController _cachedRidRoleOwner;
    private DomainController _cachedInfrastructureRoleOwner;
    private Domain _cachedParent;
    private Forest _cachedForest;
    private bool _isParentInitialized;
    public Forest Forest { get; }
    public DomainControllerCollection DomainControllers { get; }
    public DomainCollection Children { get; }
    public DomainMode DomainMode { get; }
    public int DomainModeLevel { get; }
    [NullableAttribute("2")]
public Domain Parent { get; }
    public DomainController PdcRoleOwner { get; }
    public DomainController RidRoleOwner { get; }
    public DomainController InfrastructureRoleOwner { get; }
    internal Domain(DirectoryContext context, string domainName, DirectoryEntryManager directoryEntryMgr);
    internal Domain(DirectoryContext context, string domainName);
    public static Domain GetDomain(DirectoryContext context);
    public static Domain GetComputerDomain();
    public void RaiseDomainFunctionalityLevel(int domainMode);
    public void RaiseDomainFunctionality(DomainMode domainMode);
    public DomainController FindDomainController();
    public DomainController FindDomainController(string siteName);
    public DomainController FindDomainController(LocatorOptions flag);
    public DomainController FindDomainController(string siteName, LocatorOptions flag);
    public DomainControllerCollection FindAllDomainControllers();
    public DomainControllerCollection FindAllDomainControllers(string siteName);
    public DomainControllerCollection FindAllDiscoverableDomainControllers();
    public DomainControllerCollection FindAllDiscoverableDomainControllers(string siteName);
    public virtual DirectoryEntry GetDirectoryEntry();
    public TrustRelationshipInformationCollection GetAllTrustRelationships();
    public TrustRelationshipInformation GetTrustRelationship(string targetDomainName);
    public bool GetSelectiveAuthenticationStatus(string targetDomainName);
    public void SetSelectiveAuthenticationStatus(string targetDomainName, bool enable);
    public bool GetSidFilteringStatus(string targetDomainName);
    public void SetSidFilteringStatus(string targetDomainName, bool enable);
    public void DeleteLocalSideOfTrustRelationship(string targetDomainName);
    public void DeleteTrustRelationship(Domain targetDomain);
    public void VerifyOutboundTrustRelationship(string targetDomainName);
    public void VerifyTrustRelationship(Domain targetDomain, TrustDirection direction);
    public void CreateLocalSideOfTrustRelationship(string targetDomainName, TrustDirection direction, string trustPassword);
    public void CreateTrustRelationship(Domain targetDomain, TrustDirection direction);
    public void UpdateLocalSideOfTrustRelationship(string targetDomainName, string newTrustPassword);
    public void UpdateLocalSideOfTrustRelationship(string targetDomainName, TrustDirection newTrustDirection, string newTrustPassword);
    public void UpdateTrustRelationship(Domain targetDomain, TrustDirection newTrustDirection);
    public void RepairTrustRelationship(Domain targetDomain);
    public static Domain GetCurrentDomain();
    public Forest get_Forest();
    public DomainControllerCollection get_DomainControllers();
    public DomainCollection get_Children();
    public DomainMode get_DomainMode();
    public int get_DomainModeLevel();
    [NullableContextAttribute("2")]
public Domain get_Parent();
    public DomainController get_PdcRoleOwner();
    public DomainController get_RidRoleOwner();
    public DomainController get_InfrastructureRoleOwner();
    internal DirectoryContext GetDirectoryContext();
    private int GetDomainModeLevel();
    private DomainMode GetDomainMode();
    private DomainController GetRoleOwner(ActiveDirectoryRole role);
    [MemberNotNullAttribute("_crossRefDN")]
private void LoadCrossRefAttributes();
    private Domain GetParent();
    private ArrayList GetChildDomains();
    private ArrayList GetTrustsHelper(string targetDomainName);
    private void RepairTrustHelper(Domain targetDomain, TrustDirection direction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.DomainCollection : ReadOnlyCollectionBase {
    public Domain Item { get; }
    internal DomainCollection(ArrayList values);
    public Domain get_Item(int index);
    public bool Contains(Domain domain);
    public int IndexOf(Domain domain);
    public void CopyTo(Domain[] domains, int index);
    internal int Add(Domain domain);
    internal void Clear();
}
[FlagsAttribute]
public enum System.DirectoryServices.ActiveDirectory.DomainCollisionOptions : Enum {
    public int value__;
    public static DomainCollisionOptions None;
    public static DomainCollisionOptions SidDisabledByAdmin;
    public static DomainCollisionOptions SidDisabledByConflict;
    public static DomainCollisionOptions NetBiosNameDisabledByAdmin;
    public static DomainCollisionOptions NetBiosNameDisabledByConflict;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.DomainController : DirectoryServer {
    private IntPtr _dsHandle;
    private IntPtr _authIdentity;
    private String[] _becomeRoleOwnerAttrs;
    private bool _disposed;
    private string _cachedComputerObjectName;
    private string _cachedOSVersion;
    private double _cachedNumericOSVersion;
    private Forest _currentForest;
    private Domain _cachedDomain;
    private ActiveDirectoryRoleCollection _cachedRoles;
    private bool _dcInfoInitialized;
    internal SyncUpdateCallback userDelegate;
    internal SyncReplicaFromAllServersCallback syncAllFunctionPointer;
    internal static int UpdateRidPoolSeizureValue;
    public Forest Forest { get; }
    public DateTime CurrentTime { get; }
    public long HighestCommittedUsn { get; }
    public string OSVersion { get; }
    internal double NumericOSVersion { get; }
    public ActiveDirectoryRoleCollection Roles { get; }
    public Domain Domain { get; }
    [NullableAttribute("2")]
public string IPAddress { get; }
    public string SiteName { get; }
    internal string SiteObjectName { get; }
    internal string ComputerObjectName { get; }
    internal string ServerObjectName { get; }
    internal string NtdsaObjectName { get; }
    internal Guid NtdsaObjectGuid { get; }
    [NullableAttribute("2")]
public SyncUpdateCallback SyncFromAllServersCallback { get; public set; }
    public ReplicationConnectionCollection InboundConnections { get; }
    public ReplicationConnectionCollection OutboundConnections { get; }
    internal IntPtr Handle { get; }
    internal DomainController(DirectoryContext context, string domainControllerName);
    internal DomainController(DirectoryContext context, string domainControllerName, DirectoryEntryManager directoryEntryMgr);
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
    public static DomainController GetDomainController(DirectoryContext context);
    public static DomainController FindOne(DirectoryContext context);
    public static DomainController FindOne(DirectoryContext context, string siteName);
    public static DomainController FindOne(DirectoryContext context, LocatorOptions flag);
    public static DomainController FindOne(DirectoryContext context, string siteName, LocatorOptions flag);
    public static DomainControllerCollection FindAll(DirectoryContext context);
    public static DomainControllerCollection FindAll(DirectoryContext context, string siteName);
    public virtual GlobalCatalog EnableGlobalCatalog();
    public virtual bool IsGlobalCatalog();
    public void TransferRoleOwnership(ActiveDirectoryRole role);
    public void SeizeRoleOwnership(ActiveDirectoryRole role);
    public virtual DirectorySearcher GetDirectorySearcher();
    public virtual void CheckReplicationConsistency();
    public virtual ReplicationCursorCollection GetReplicationCursors(string partition);
    public virtual ReplicationOperationInformation GetReplicationOperationInformation();
    public virtual ReplicationNeighborCollection GetReplicationNeighbors(string partition);
    public virtual ReplicationNeighborCollection GetAllReplicationNeighbors();
    public virtual ReplicationFailureCollection GetReplicationConnectionFailures();
    public virtual ActiveDirectoryReplicationMetadata GetReplicationMetadata(string objectPath);
    public virtual void SyncReplicaFromServer(string partition, string sourceServer);
    public virtual void TriggerSyncReplicaFromNeighbors(string partition);
    public virtual void SyncReplicaFromAllServers(string partition, SyncFromAllServersOptions options);
    public Forest get_Forest();
    public DateTime get_CurrentTime();
    public long get_HighestCommittedUsn();
    public string get_OSVersion();
    internal double get_NumericOSVersion();
    public ActiveDirectoryRoleCollection get_Roles();
    public Domain get_Domain();
    [NullableContextAttribute("2")]
public virtual string get_IPAddress();
    public virtual string get_SiteName();
    internal string get_SiteObjectName();
    internal string get_ComputerObjectName();
    internal string get_ServerObjectName();
    internal string get_NtdsaObjectName();
    internal Guid get_NtdsaObjectGuid();
    [NullableContextAttribute("2")]
public virtual SyncUpdateCallback get_SyncFromAllServersCallback();
    [NullableContextAttribute("2")]
public virtual void set_SyncFromAllServersCallback(SyncUpdateCallback value);
    public virtual ReplicationConnectionCollection get_InboundConnections();
    public virtual ReplicationConnectionCollection get_OutboundConnections();
    internal IntPtr get_Handle();
    internal static void ValidateCredential(DomainController dc, DirectoryContext context);
    internal static DomainController FindOneWithCredentialValidation(DirectoryContext context, string siteName, LocatorOptions flag);
    internal static DomainController FindOneInternal(DirectoryContext context, string domainName, string siteName, LocatorOptions flag);
    internal static DomainControllerCollection FindAllInternal(DirectoryContext context, string domainName, bool isDnsDomainName, string siteName);
    private void GetDomainControllerInfo();
    internal void GetDSHandle();
    internal void FreeDSHandle();
    internal ReplicationFailureCollection GetReplicationFailures(DS_REPL_INFO_TYPE type);
    private ArrayList GetRoles();
    private DateTime ParseDateTime(string dateTime);
    private DirectorySearcher InternalGetDirectorySearcher();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.DomainControllerCollection : ReadOnlyCollectionBase {
    public DomainController Item { get; }
    internal DomainControllerCollection(ArrayList values);
    public DomainController get_Item(int index);
    public bool Contains(DomainController domainController);
    public int IndexOf(DomainController domainController);
    public void CopyTo(DomainController[] domainControllers, int index);
}
internal class System.DirectoryServices.ActiveDirectory.DomainControllerInfo : object {
    public string DomainControllerName;
    public string DomainControllerAddress;
    public int DomainControllerAddressType;
    public Guid DomainGuid;
    public string DomainName;
    public string DnsForestName;
    public int Flags;
    public string DcSiteName;
    public string ClientSiteName;
}
public enum System.DirectoryServices.ActiveDirectory.DomainMode : Enum {
    public int value__;
    public static DomainMode Unknown;
    public static DomainMode Windows2000MixedDomain;
    public static DomainMode Windows2000NativeDomain;
    public static DomainMode Windows2003InterimDomain;
    public static DomainMode Windows2003Domain;
    public static DomainMode Windows2008Domain;
    public static DomainMode Windows2008R2Domain;
    public static DomainMode Windows8Domain;
    public static DomainMode Windows2012R2Domain;
}
internal class System.DirectoryServices.ActiveDirectory.DS_DOMAIN_TRUSTS : object {
    public IntPtr NetbiosDomainName;
    public IntPtr DnsDomainName;
    public int Flags;
    public int ParentIndex;
    public int TrustType;
    public int TrustAttributes;
    public IntPtr DomainSid;
    public Guid DomainGuid;
}
[FlagsAttribute]
internal enum System.DirectoryServices.ActiveDirectory.DS_DOMAINTRUST_FLAG : Enum {
    public int value__;
    public static DS_DOMAINTRUST_FLAG DS_DOMAIN_IN_FOREST;
    public static DS_DOMAINTRUST_FLAG DS_DOMAIN_DIRECT_OUTBOUND;
    public static DS_DOMAINTRUST_FLAG DS_DOMAIN_TREE_ROOT;
    public static DS_DOMAINTRUST_FLAG DS_DOMAIN_PRIMARY;
    public static DS_DOMAINTRUST_FLAG DS_DOMAIN_NATIVE_MODE;
    public static DS_DOMAINTRUST_FLAG DS_DOMAIN_DIRECT_INBOUND;
}
internal enum System.DirectoryServices.ActiveDirectory.DS_NAME_ERROR : Enum {
    public int value__;
    public static DS_NAME_ERROR DS_NAME_NO_ERROR;
    public static DS_NAME_ERROR DS_NAME_ERROR_RESOLVING;
    public static DS_NAME_ERROR DS_NAME_ERROR_NOT_FOUND;
    public static DS_NAME_ERROR DS_NAME_ERROR_NOT_UNIQUE;
    public static DS_NAME_ERROR DS_NAME_ERROR_NO_MAPPING;
    public static DS_NAME_ERROR DS_NAME_ERROR_DOMAIN_ONLY;
    public static DS_NAME_ERROR DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING;
    public static DS_NAME_ERROR DS_NAME_ERROR_TRUST_REFERRAL;
}
internal class System.DirectoryServices.ActiveDirectory.DS_NAME_RESULT : object {
    public int cItems;
    public IntPtr rItems;
}
internal class System.DirectoryServices.ActiveDirectory.DS_NAME_RESULT_ITEM : object {
    public DS_NAME_ERROR status;
    public IntPtr pDomain;
    public IntPtr pName;
}
internal class System.DirectoryServices.ActiveDirectory.DS_REPL_ATTR_META_DATA : object {
    public IntPtr pszAttributeName;
    public int dwVersion;
    public int ftimeLastOriginatingChange1;
    public int ftimeLastOriginatingChange2;
    public Guid uuidLastOriginatingDsaInvocationID;
    public long usnOriginatingChange;
    public long usnLocalChange;
}
internal class System.DirectoryServices.ActiveDirectory.DS_REPL_ATTR_META_DATA_2 : object {
    public IntPtr pszAttributeName;
    public int dwVersion;
    public int ftimeLastOriginatingChange1;
    public int ftimeLastOriginatingChange2;
    public Guid uuidLastOriginatingDsaInvocationID;
    public long usnOriginatingChange;
    public long usnLocalChange;
    public IntPtr pszLastOriginatingDsaDN;
}
internal class System.DirectoryServices.ActiveDirectory.DS_REPL_CURSOR : object {
    public Guid uuidSourceDsaInvocationID;
    public long usnAttributeFilter;
}
internal class System.DirectoryServices.ActiveDirectory.DS_REPL_CURSOR_3 : object {
    public Guid uuidSourceDsaInvocationID;
    public long usnAttributeFilter;
    public long ftimeLastSyncSuccess;
    public IntPtr pszSourceDsaDN;
}
internal class System.DirectoryServices.ActiveDirectory.DS_REPL_CURSORS : object {
    public int cNumCursors;
    public int reserved;
}
internal class System.DirectoryServices.ActiveDirectory.DS_REPL_CURSORS_3 : object {
    public int cNumCursors;
    public int dwEnumerationContext;
}
internal enum System.DirectoryServices.ActiveDirectory.DS_REPL_INFO_TYPE : Enum {
    public int value__;
    public static DS_REPL_INFO_TYPE DS_REPL_INFO_NEIGHBORS;
    public static DS_REPL_INFO_TYPE DS_REPL_INFO_CURSORS_FOR_NC;
    public static DS_REPL_INFO_TYPE DS_REPL_INFO_METADATA_FOR_OBJ;
    public static DS_REPL_INFO_TYPE DS_REPL_INFO_KCC_DSA_CONNECT_FAILURES;
    public static DS_REPL_INFO_TYPE DS_REPL_INFO_KCC_DSA_LINK_FAILURES;
    public static DS_REPL_INFO_TYPE DS_REPL_INFO_PENDING_OPS;
    public static DS_REPL_INFO_TYPE DS_REPL_INFO_METADATA_FOR_ATTR_VALUE;
    public static DS_REPL_INFO_TYPE DS_REPL_INFO_CURSORS_2_FOR_NC;
    public static DS_REPL_INFO_TYPE DS_REPL_INFO_CURSORS_3_FOR_NC;
    public static DS_REPL_INFO_TYPE DS_REPL_INFO_METADATA_2_FOR_OBJ;
    public static DS_REPL_INFO_TYPE DS_REPL_INFO_METADATA_2_FOR_ATTR_VALUE;
}
internal class System.DirectoryServices.ActiveDirectory.DS_REPL_KCC_DSA_FAILURE : object {
    public IntPtr pszDsaDN;
    public Guid uuidDsaObjGuid;
    public long ftimeFirstFailure;
    public int cNumFailures;
    public int dwLastResult;
}
internal class System.DirectoryServices.ActiveDirectory.DS_REPL_KCC_DSA_FAILURES : object {
    public int cNumEntries;
    public int dwReserved;
}
internal class System.DirectoryServices.ActiveDirectory.DS_REPL_NEIGHBOR : object {
    public IntPtr pszNamingContext;
    public IntPtr pszSourceDsaDN;
    public IntPtr pszSourceDsaAddress;
    public IntPtr pszAsyncIntersiteTransportDN;
    public int dwReplicaFlags;
    public int dwReserved;
    public Guid uuidNamingContextObjGuid;
    public Guid uuidSourceDsaObjGuid;
    public Guid uuidSourceDsaInvocationID;
    public Guid uuidAsyncIntersiteTransportObjGuid;
    public long usnLastObjChangeSynced;
    public long usnAttributeFilter;
    public long ftimeLastSyncSuccess;
    public long ftimeLastSyncAttempt;
    public int dwLastSyncResult;
    public int cNumConsecutiveSyncFailures;
}
internal class System.DirectoryServices.ActiveDirectory.DS_REPL_NEIGHBORS : object {
    public int cNumNeighbors;
    public int dwReserved;
}
internal class System.DirectoryServices.ActiveDirectory.DS_REPL_OBJ_META_DATA : object {
    public int cNumEntries;
    public int dwReserved;
}
internal class System.DirectoryServices.ActiveDirectory.DS_REPL_OBJ_META_DATA_2 : object {
    public int cNumEntries;
    public int dwReserved;
}
internal class System.DirectoryServices.ActiveDirectory.DS_REPL_OP : object {
    public long ftimeEnqueued;
    public int ulSerialNumber;
    public int ulPriority;
    public ReplicationOperationType OpType;
    public int ulOptions;
    public IntPtr pszNamingContext;
    public IntPtr pszDsaDN;
    public IntPtr pszDsaAddress;
    public Guid uuidNamingContextObjGuid;
    public Guid uuidDsaObjGuid;
}
internal class System.DirectoryServices.ActiveDirectory.DS_REPL_PENDING_OPS : object {
    public long ftimeCurrentOpStarted;
    public int cNumPendingOps;
}
internal class System.DirectoryServices.ActiveDirectory.DS_REPSYNCALL_ERRINFO : object {
    public IntPtr pszSvrId;
    public SyncFromAllServersErrorCategory error;
    public int dwWin32Err;
    public IntPtr pszSrcId;
}
internal class System.DirectoryServices.ActiveDirectory.DS_REPSYNCALL_SYNC : object {
    public IntPtr pszSrcId;
    public IntPtr pszDstId;
}
internal class System.DirectoryServices.ActiveDirectory.DS_REPSYNCALL_UPDATE : object {
    public SyncFromAllServersEvent eventType;
    public IntPtr pErrInfo;
    public IntPtr pSync;
}
internal class System.DirectoryServices.ActiveDirectory.DsDomainControllerInfo2 : object {
    public string netBiosName;
    public string dnsHostName;
    public string siteName;
    public string siteObjectName;
    public string computerObjectName;
    public string serverObjectName;
    public string ntdsaObjectName;
    public bool isPdc;
    public bool dsEnabled;
    public bool isGC;
    public Guid siteObjectGuid;
    public Guid computerObjectGuid;
    public Guid serverObjectGuid;
    public Guid ntdsDsaObjectGuid;
}
internal class System.DirectoryServices.ActiveDirectory.DsDomainControllerInfo3 : object {
    public string netBiosName;
    public string dnsHostName;
    public string siteName;
    public string siteObjectName;
    public string computerObjectName;
    public string serverObjectName;
    public string ntdsaObjectName;
    public bool isPdc;
    public bool dsEnabled;
    public bool isGC;
    public bool isRodc;
    public Guid siteObjectGuid;
    public Guid computerObjectGuid;
    public Guid serverObjectGuid;
    public Guid ntdsDsaObjectGuid;
}
internal class System.DirectoryServices.ActiveDirectory.DsNameResult : object {
    public int itemCount;
    public IntPtr items;
}
internal class System.DirectoryServices.ActiveDirectory.DsNameResultItem : object {
    public int status;
    public string domain;
    public string name;
}
internal enum System.DirectoryServices.ActiveDirectory.DSROLE_MACHINE_ROLE : Enum {
    public int value__;
    public static DSROLE_MACHINE_ROLE DsRole_RoleStandaloneWorkstation;
    public static DSROLE_MACHINE_ROLE DsRole_RoleMemberWorkstation;
    public static DSROLE_MACHINE_ROLE DsRole_RoleStandaloneServer;
    public static DSROLE_MACHINE_ROLE DsRole_RoleMemberServer;
    public static DSROLE_MACHINE_ROLE DsRole_RoleBackupDomainController;
    public static DSROLE_MACHINE_ROLE DsRole_RolePrimaryDomainController;
    public static DSROLE_MACHINE_ROLE DsRole_WorkstationWithSharedAccountDomain;
    public static DSROLE_MACHINE_ROLE DsRole_ServerWithSharedAccountDomain;
    public static DSROLE_MACHINE_ROLE DsRole_MemberWorkstationWithSharedAccountDomain;
    public static DSROLE_MACHINE_ROLE DsRole_MemberServerWithSharedAccountDomain;
}
internal class System.DirectoryServices.ActiveDirectory.DSROLE_PRIMARY_DOMAIN_INFO_BASIC : object {
    public DSROLE_MACHINE_ROLE MachineRole;
    public UInt32 Flags;
    public string DomainNameFlat;
    public string DomainNameDns;
    public string DomainForestName;
    public Guid DomainGuid;
}
internal enum System.DirectoryServices.ActiveDirectory.DSROLE_PRIMARY_DOMAIN_INFO_LEVEL : Enum {
    public int value__;
    public static DSROLE_PRIMARY_DOMAIN_INFO_LEVEL DsRolePrimaryDomainInfoBasic;
    public static DSROLE_PRIMARY_DOMAIN_INFO_LEVEL DsRoleUpgradeStatus;
    public static DSROLE_PRIMARY_DOMAIN_INFO_LEVEL DsRoleOperationState;
    public static DSROLE_PRIMARY_DOMAIN_INFO_LEVEL DsRolePrimaryDomainInfoBasicEx;
}
internal static class System.DirectoryServices.ActiveDirectory.ExceptionHelper : object {
    private static int ERROR_NOT_ENOUGH_MEMORY;
    private static int ERROR_OUTOFMEMORY;
    private static int ERROR_DS_DRA_OUT_OF_MEM;
    private static int ERROR_NO_SUCH_DOMAIN;
    private static int ERROR_ACCESS_DENIED;
    private static int ERROR_NO_LOGON_SERVERS;
    private static int ERROR_DS_DRA_ACCESS_DENIED;
    private static int RPC_S_OUT_OF_RESOURCES;
    internal static int RPC_S_SERVER_UNAVAILABLE;
    internal static int RPC_S_CALL_FAILED;
    private static int ERROR_CANCELLED;
    internal static int ERROR_DS_DRA_BAD_DN;
    internal static int ERROR_DS_NAME_UNPARSEABLE;
    internal static int ERROR_DS_UNKNOWN_ERROR;
    internal static Exception GetExceptionFromCOMException(COMException e);
    internal static Exception GetExceptionFromCOMException(DirectoryContext context, COMException e);
    internal static Exception GetExceptionFromErrorCode(int errorCode);
    internal static Exception GetExceptionFromErrorCode(int errorCode, string targetName);
    internal static string GetErrorMessage(int errorCode, bool hresult);
    internal static SyncFromAllServersOperationException CreateSyncAllException(IntPtr errorInfo, bool singleError);
    internal static Exception CreateForestTrustCollisionException(IntPtr collisionInfo);
}
internal class System.DirectoryServices.ActiveDirectory.FileTime : object {
    public int lower;
    public int higher;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.Forest : object {
    private DirectoryContext _context;
    private DirectoryEntryManager _directoryEntryMgr;
    private bool _disposed;
    private string _forestDnsName;
    private ReadOnlySiteCollection _cachedSites;
    private DomainCollection _cachedDomains;
    private GlobalCatalogCollection _cachedGlobalCatalogs;
    private ApplicationPartitionCollection _cachedApplicationPartitions;
    private int _forestModeLevel;
    private Domain _cachedRootDomain;
    private ActiveDirectorySchema _cachedSchema;
    private DomainController _cachedSchemaRoleOwner;
    private DomainController _cachedNamingRoleOwner;
    public string Name { get; }
    public ReadOnlySiteCollection Sites { get; }
    public DomainCollection Domains { get; }
    public GlobalCatalogCollection GlobalCatalogs { get; }
    public ApplicationPartitionCollection ApplicationPartitions { get; }
    public int ForestModeLevel { get; }
    public ForestMode ForestMode { get; }
    public Domain RootDomain { get; }
    public ActiveDirectorySchema Schema { get; }
    public DomainController SchemaRoleOwner { get; }
    public DomainController NamingRoleOwner { get; }
    internal Forest(DirectoryContext context, string forestDnsName, DirectoryEntryManager directoryEntryMgr);
    internal Forest(DirectoryContext context, string name);
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
    public static Forest GetForest(DirectoryContext context);
    public void RaiseForestFunctionalityLevel(int forestMode);
    public void RaiseForestFunctionality(ForestMode forestMode);
    public virtual string ToString();
    public GlobalCatalog FindGlobalCatalog();
    public GlobalCatalog FindGlobalCatalog(string siteName);
    public GlobalCatalog FindGlobalCatalog(LocatorOptions flag);
    public GlobalCatalog FindGlobalCatalog(string siteName, LocatorOptions flag);
    public GlobalCatalogCollection FindAllGlobalCatalogs();
    public GlobalCatalogCollection FindAllGlobalCatalogs(string siteName);
    public GlobalCatalogCollection FindAllDiscoverableGlobalCatalogs();
    public GlobalCatalogCollection FindAllDiscoverableGlobalCatalogs(string siteName);
    public TrustRelationshipInformationCollection GetAllTrustRelationships();
    public ForestTrustRelationshipInformation GetTrustRelationship(string targetForestName);
    public bool GetSelectiveAuthenticationStatus(string targetForestName);
    public void SetSelectiveAuthenticationStatus(string targetForestName, bool enable);
    public bool GetSidFilteringStatus(string targetForestName);
    public void SetSidFilteringStatus(string targetForestName, bool enable);
    public void DeleteLocalSideOfTrustRelationship(string targetForestName);
    public void DeleteTrustRelationship(Forest targetForest);
    public void VerifyOutboundTrustRelationship(string targetForestName);
    public void VerifyTrustRelationship(Forest targetForest, TrustDirection direction);
    public void CreateLocalSideOfTrustRelationship(string targetForestName, TrustDirection direction, string trustPassword);
    public void CreateTrustRelationship(Forest targetForest, TrustDirection direction);
    public void UpdateLocalSideOfTrustRelationship(string targetForestName, string newTrustPassword);
    public void UpdateLocalSideOfTrustRelationship(string targetForestName, TrustDirection newTrustDirection, string newTrustPassword);
    public void UpdateTrustRelationship(Forest targetForest, TrustDirection newTrustDirection);
    public void RepairTrustRelationship(Forest targetForest);
    public static Forest GetCurrentForest();
    public string get_Name();
    public ReadOnlySiteCollection get_Sites();
    public DomainCollection get_Domains();
    public GlobalCatalogCollection get_GlobalCatalogs();
    public ApplicationPartitionCollection get_ApplicationPartitions();
    public int get_ForestModeLevel();
    public ForestMode get_ForestMode();
    public Domain get_RootDomain();
    public ActiveDirectorySchema get_Schema();
    public DomainController get_SchemaRoleOwner();
    public DomainController get_NamingRoleOwner();
    internal DirectoryContext GetDirectoryContext();
    private int GetForestModeLevel();
    private DomainController GetRoleOwner(ActiveDirectoryRole role);
    private ArrayList GetSites();
    private ArrayList GetApplicationPartitions();
    private ArrayList GetDomains();
    private void GetDSHandle(IntPtr& dsHandle, IntPtr& authIdentity);
    private void CheckIfDisposed();
    private TrustRelationshipInformationCollection GetTrustsHelper(string targetForestName);
    private void RepairTrustHelper(Forest targetForest, TrustDirection direction);
}
public enum System.DirectoryServices.ActiveDirectory.ForestMode : Enum {
    public int value__;
    public static ForestMode Unknown;
    public static ForestMode Windows2000Forest;
    public static ForestMode Windows2003InterimForest;
    public static ForestMode Windows2003Forest;
    public static ForestMode Windows2008Forest;
    public static ForestMode Windows2008R2Forest;
    public static ForestMode Windows8Forest;
    public static ForestMode Windows2012R2Forest;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.DirectoryServices.ActiveDirectory.ForestTrustCollisionException : ActiveDirectoryOperationException {
    [CompilerGeneratedAttribute]
private ForestTrustRelationshipCollisionCollection <Collisions>k__BackingField;
    public ForestTrustRelationshipCollisionCollection Collisions { get; }
    public ForestTrustCollisionException(string message, Exception inner, ForestTrustRelationshipCollisionCollection collisions);
    public ForestTrustCollisionException(string message, Exception inner);
    public ForestTrustCollisionException(string message);
    [NullableContextAttribute("1")]
protected ForestTrustCollisionException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public ForestTrustRelationshipCollisionCollection get_Collisions();
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
public enum System.DirectoryServices.ActiveDirectory.ForestTrustCollisionType : Enum {
    public int value__;
    public static ForestTrustCollisionType TopLevelName;
    public static ForestTrustCollisionType Domain;
    public static ForestTrustCollisionType Other;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ForestTrustDomainInfoCollection : ReadOnlyCollectionBase {
    public ForestTrustDomainInformation Item { get; }
    public ForestTrustDomainInformation get_Item(int index);
    public bool Contains(ForestTrustDomainInformation information);
    public int IndexOf(ForestTrustDomainInformation information);
    public void CopyTo(ForestTrustDomainInformation[] array, int index);
    internal int Add(ForestTrustDomainInformation info);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation : object {
    private ForestTrustDomainStatus _status;
    internal LARGE_INTEGER time;
    [CompilerGeneratedAttribute]
private string <DnsName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NetBiosName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DomainSid>k__BackingField;
    public string DnsName { get; }
    public string NetBiosName { get; }
    public string DomainSid { get; }
    public ForestTrustDomainStatus Status { get; public set; }
    internal ForestTrustDomainInformation(int flag, LSA_FOREST_TRUST_DOMAIN_INFO domainInfo, LARGE_INTEGER time);
    [CompilerGeneratedAttribute]
public string get_DnsName();
    [CompilerGeneratedAttribute]
public string get_NetBiosName();
    [CompilerGeneratedAttribute]
public string get_DomainSid();
    public ForestTrustDomainStatus get_Status();
    public void set_Status(ForestTrustDomainStatus value);
}
public enum System.DirectoryServices.ActiveDirectory.ForestTrustDomainStatus : Enum {
    public int value__;
    public static ForestTrustDomainStatus Enabled;
    public static ForestTrustDomainStatus SidAdminDisabled;
    public static ForestTrustDomainStatus SidConflictDisabled;
    public static ForestTrustDomainStatus NetBiosNameAdminDisabled;
    public static ForestTrustDomainStatus NetBiosNameConflictDisabled;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision : object {
    [CompilerGeneratedAttribute]
private ForestTrustCollisionType <CollisionType>k__BackingField;
    [CompilerGeneratedAttribute]
private TopLevelNameCollisionOptions <TopLevelNameCollisionOption>k__BackingField;
    [CompilerGeneratedAttribute]
private DomainCollisionOptions <DomainCollisionOption>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CollisionRecord>k__BackingField;
    public ForestTrustCollisionType CollisionType { get; }
    public TopLevelNameCollisionOptions TopLevelNameCollisionOption { get; }
    public DomainCollisionOptions DomainCollisionOption { get; }
    public string CollisionRecord { get; }
    internal ForestTrustRelationshipCollision(ForestTrustCollisionType collisionType, TopLevelNameCollisionOptions TLNFlag, DomainCollisionOptions domainFlag, string record);
    [CompilerGeneratedAttribute]
public ForestTrustCollisionType get_CollisionType();
    [CompilerGeneratedAttribute]
public TopLevelNameCollisionOptions get_TopLevelNameCollisionOption();
    [CompilerGeneratedAttribute]
public DomainCollisionOptions get_DomainCollisionOption();
    [CompilerGeneratedAttribute]
public string get_CollisionRecord();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollisionCollection : ReadOnlyCollectionBase {
    public ForestTrustRelationshipCollision Item { get; }
    public ForestTrustRelationshipCollision get_Item(int index);
    public bool Contains(ForestTrustRelationshipCollision collision);
    public int IndexOf(ForestTrustRelationshipCollision collision);
    public void CopyTo(ForestTrustRelationshipCollision[] array, int index);
    internal int Add(ForestTrustRelationshipCollision collision);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipInformation : TrustRelationshipInformation {
    private TopLevelNameCollection _topLevelNames;
    private StringCollection _excludedNames;
    private ForestTrustDomainInfoCollection _domainInfo;
    private ArrayList _binaryData;
    private ArrayList _binaryRecordType;
    private Hashtable _excludedNameTime;
    private ArrayList _binaryDataTime;
    internal bool retrieved;
    public TopLevelNameCollection TopLevelNames { get; }
    public StringCollection ExcludedTopLevelNames { get; }
    public ForestTrustDomainInfoCollection TrustedDomainInformation { get; }
    internal ForestTrustRelationshipInformation(DirectoryContext context, string source, DS_DOMAIN_TRUSTS unmanagedTrust, TrustType type);
    public TopLevelNameCollection get_TopLevelNames();
    public StringCollection get_ExcludedTopLevelNames();
    public ForestTrustDomainInfoCollection get_TrustedDomainInformation();
    public void Save();
    private void GetForestTrustInfoHelper();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.GlobalCatalog : DomainController {
    private ActiveDirectorySchema _schema;
    private bool _disabled;
    internal GlobalCatalog(DirectoryContext context, string globalCatalogName);
    internal GlobalCatalog(DirectoryContext context, string globalCatalogName, DirectoryEntryManager directoryEntryMgr);
    public static GlobalCatalog GetGlobalCatalog(DirectoryContext context);
    public static GlobalCatalog FindOne(DirectoryContext context);
    public static GlobalCatalog FindOne(DirectoryContext context, string siteName);
    public static GlobalCatalog FindOne(DirectoryContext context, LocatorOptions flag);
    public static GlobalCatalog FindOne(DirectoryContext context, string siteName, LocatorOptions flag);
    public static GlobalCatalogCollection FindAll(DirectoryContext context);
    public static GlobalCatalogCollection FindAll(DirectoryContext context, string siteName);
    public virtual GlobalCatalog EnableGlobalCatalog();
    public DomainController DisableGlobalCatalog();
    public virtual bool IsGlobalCatalog();
    public ReadOnlyActiveDirectorySchemaPropertyCollection FindAllProperties();
    public virtual DirectorySearcher GetDirectorySearcher();
    private void CheckIfDisabled();
    internal static GlobalCatalog FindOneWithCredentialValidation(DirectoryContext context, string siteName, LocatorOptions flag);
    internal static GlobalCatalog FindOneInternal(DirectoryContext context, string forestName, string siteName, LocatorOptions flag);
    internal static GlobalCatalogCollection FindAllInternal(DirectoryContext context, string siteName);
    private DirectorySearcher InternalGetDirectorySearcher();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection : ReadOnlyCollectionBase {
    public GlobalCatalog Item { get; }
    internal GlobalCatalogCollection(ArrayList values);
    public GlobalCatalog get_Item(int index);
    public bool Contains(GlobalCatalog globalCatalog);
    public int IndexOf(GlobalCatalog globalCatalog);
    public void CopyTo(GlobalCatalog[] globalCatalogs, int index);
}
public enum System.DirectoryServices.ActiveDirectory.HourOfDay : Enum {
    public int value__;
    public static HourOfDay Zero;
    public static HourOfDay One;
    public static HourOfDay Two;
    public static HourOfDay Three;
    public static HourOfDay Four;
    public static HourOfDay Five;
    public static HourOfDay Six;
    public static HourOfDay Seven;
    public static HourOfDay Eight;
    public static HourOfDay Nine;
    public static HourOfDay Ten;
    public static HourOfDay Eleven;
    public static HourOfDay Twelve;
    public static HourOfDay Thirteen;
    public static HourOfDay Fourteen;
    public static HourOfDay Fifteen;
    public static HourOfDay Sixteen;
    public static HourOfDay Seventeen;
    public static HourOfDay Eighteen;
    public static HourOfDay Nineteen;
    public static HourOfDay Twenty;
    public static HourOfDay TwentyOne;
    public static HourOfDay TwentyTwo;
    public static HourOfDay TwentyThree;
}
internal class System.DirectoryServices.ActiveDirectory.LARGE_INTEGER : object {
    public int lowPart;
    public int highPart;
}
internal class System.DirectoryServices.ActiveDirectory.Locator : object {
    internal static DomainControllerInfo GetDomainControllerInfo(string computerName, string domainName, string siteName, long flags);
    internal static int DsGetDcNameWrapper(string computerName, string domainName, string siteName, long flags, DomainControllerInfo& domainControllerInfo);
    internal static ArrayList EnumerateDomainControllers(DirectoryContext context, string domainName, string siteName, long dcFlags);
    private static Hashtable DnsGetDcWrapper(string domainName, string siteName, long dcFlags);
    private static Hashtable DnsQueryWrapper(string domainName, string siteName, long dcFlags);
}
[FlagsAttribute]
public enum System.DirectoryServices.ActiveDirectory.LocatorOptions : Enum {
    public long value__;
    public static LocatorOptions ForceRediscovery;
    public static LocatorOptions KdcRequired;
    public static LocatorOptions TimeServerRequired;
    public static LocatorOptions WriteableRequired;
    public static LocatorOptions AvoidSelf;
}
internal class System.DirectoryServices.ActiveDirectory.LSA_AUTH_INFORMATION : object {
    public LARGE_INTEGER LastUpdateTime;
    public int AuthType;
    public int AuthInfoLength;
    public IntPtr AuthInfo;
}
internal class System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_BINARY_DATA : ValueType {
    public int Length;
    public IntPtr Buffer;
}
internal class System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_COLLISION_INFORMATION : object {
    public int RecordCount;
    public IntPtr Entries;
}
internal class System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_COLLISION_RECORD : object {
    public int Index;
    public ForestTrustCollisionType Type;
    public int Flags;
    public UNICODE_STRING Name;
}
internal class System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_DOMAIN_INFO : ValueType {
    public IntPtr sid;
    public short DNSNameLength;
    public short DNSNameMaximumLength;
    public IntPtr DNSNameBuffer;
    public short NetBIOSNameLength;
    public short NetBIOSNameMaximumLength;
    public IntPtr NetBIOSNameBuffer;
}
internal class System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_INFORMATION : object {
    public int RecordCount;
    public IntPtr Entries;
}
internal class System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_RECORD : object {
    public int Flags;
    public LSA_FOREST_TRUST_RECORD_TYPE ForestTrustType;
    public LARGE_INTEGER Time;
    public UNICODE_STRING TopLevelName;
    public LSA_FOREST_TRUST_BINARY_DATA Data;
    public LSA_FOREST_TRUST_DOMAIN_INFO DomainInfo;
}
internal enum System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_RECORD_TYPE : Enum {
    public int value__;
    public static LSA_FOREST_TRUST_RECORD_TYPE ForestTrustTopLevelName;
    public static LSA_FOREST_TRUST_RECORD_TYPE ForestTrustTopLevelNameEx;
    public static LSA_FOREST_TRUST_RECORD_TYPE ForestTrustDomainInfo;
    public static LSA_FOREST_TRUST_RECORD_TYPE ForestTrustRecordTypeLast;
}
internal class System.DirectoryServices.ActiveDirectory.LsaLogonProcessSafeHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal LsaLogonProcessSafeHandle(IntPtr value);
    protected virtual bool ReleaseHandle();
}
public enum System.DirectoryServices.ActiveDirectory.MinuteOfHour : Enum {
    public int value__;
    public static MinuteOfHour Zero;
    public static MinuteOfHour Fifteen;
    public static MinuteOfHour Thirty;
    public static MinuteOfHour FortyFive;
}
internal class System.DirectoryServices.ActiveDirectory.NativeComInterfaces : object {
    internal static int ADS_SETTYPE_DN;
    internal static int ADS_FORMAT_X500_DN;
    internal static int ADS_ESCAPEDMODE_ON;
    internal static int ADS_ESCAPEDMODE_OFF_EX;
    internal static int ADS_FORMAT_LEAF;
}
internal class System.DirectoryServices.ActiveDirectory.NativeMethods : object {
    internal static int VER_PLATFORM_WIN32_NT;
    internal static int ERROR_INVALID_DOMAIN_NAME_FORMAT;
    internal static int ERROR_NO_SUCH_DOMAIN;
    internal static int ERROR_NOT_ENOUGH_MEMORY;
    internal static int ERROR_INVALID_FLAGS;
    internal static int DS_NAME_NO_ERROR;
    internal static int ERROR_NO_MORE_ITEMS;
    internal static int ERROR_FILE_MARK_DETECTED;
    internal static int DNS_ERROR_RCODE_NAME_ERROR;
    internal static int ERROR_NO_SUCH_LOGON_SESSION;
    internal static int DS_NAME_FLAG_SYNTACTICAL_ONLY;
    internal static int DS_FQDN_1779_NAME;
    internal static int DS_CANONICAL_NAME;
    internal static int DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING;
    internal static int STATUS_QUOTA_EXCEEDED;
    internal static int DsDomainControllerInfoLevel2;
    internal static int DsDomainControllerInfoLevel3;
    internal static int DsNameNoError;
    internal static int DnsSrvData;
    internal static int DnsQueryBypassCache;
    internal static int NegGetCallerName;
    [LibraryImportAttribute("netapi32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
internal static int DsGetDcName(string computerName, string domainName, IntPtr domainGuid, string siteName, int flags, IntPtr& domainControllerInfo);
    [LibraryImportAttribute("netapi32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
internal static int DsGetDcOpen(string dnsName, int optionFlags, string siteName, IntPtr domainGuid, string dnsForestName, int dcFlags, IntPtr& retGetDcContext);
    [LibraryImportAttribute("netapi32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
internal static int DsGetDcNext(IntPtr getDcContextHandle, IntPtr& sockAddressCount, IntPtr& sockAddresses, IntPtr& dnsHostName);
    [LibraryImportAttribute("netapi32.dll")]
internal static void DsGetDcClose(IntPtr getDcContextHandle);
    [LibraryImportAttribute("netapi32.dll")]
internal static int NetApiBufferFree(IntPtr buffer);
    [LibraryImportAttribute("dnsapi.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
internal static int DnsQuery(string recordName, short recordType, int options, IntPtr servers, IntPtr& dnsResultList, IntPtr reserved);
    [LibraryImportAttribute("dnsapi.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
internal static void DnsRecordListFree(IntPtr dnsResultList, bool dnsFreeType);
    [LibraryImportAttribute("secur32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
internal static UInt32 LsaConnectUntrusted(LsaLogonProcessSafeHandle& lsaHandle);
    [LibraryImportAttribute("secur32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
internal static UInt32 LsaCallAuthenticationPackage(LsaLogonProcessSafeHandle lsaHandle, int authenticationPackage, NegotiateCallerNameRequest& protocolSubmitBuffer, int submitBufferLength, IntPtr& protocolReturnBuffer, Int32& returnBufferLength, UInt32& protocolStatus);
    [LibraryImportAttribute("secur32.dll")]
internal static UInt32 LsaFreeReturnBuffer(IntPtr buffer);
    [LibraryImportAttribute("secur32.dll")]
internal static int LsaDeregisterLogonProcess(IntPtr lsaHandle);
    [LibraryImportAttribute("kernel32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
internal static int CompareString(UInt32 locale, UInt32 dwCmpFlags, IntPtr lpString1, int cchCount1, IntPtr lpString2, int cchCount2);
    [CompilerGeneratedAttribute]
internal static int <DsGetDcName>g____PInvoke|16_0(UInt16* computerName, UInt16* domainName, IntPtr domainGuid, UInt16* siteName, int flags, IntPtr* domainControllerInfo);
    [CompilerGeneratedAttribute]
internal static int <DsGetDcOpen>g____PInvoke|17_0(UInt16* dnsName, int optionFlags, UInt16* siteName, IntPtr domainGuid, UInt16* dnsForestName, int dcFlags, IntPtr* retGetDcContext);
    [CompilerGeneratedAttribute]
internal static int <DsGetDcNext>g____PInvoke|18_0(IntPtr getDcContextHandle, IntPtr* sockAddressCount, IntPtr* sockAddresses, IntPtr* dnsHostName);
    [CompilerGeneratedAttribute]
internal static int <DnsQuery>g____PInvoke|26_0(UInt16* recordName, short recordType, int options, IntPtr servers, IntPtr* dnsResultList, IntPtr reserved);
    [CompilerGeneratedAttribute]
internal static void <DnsRecordListFree>g____PInvoke|27_0(IntPtr dnsResultList, int dnsFreeType);
    [CompilerGeneratedAttribute]
internal static UInt32 <LsaConnectUntrusted>g____PInvoke|28_0(IntPtr* lsaHandle);
    [CompilerGeneratedAttribute]
internal static UInt32 <LsaCallAuthenticationPackage>g____PInvoke|30_0(IntPtr lsaHandle, int authenticationPackage, NegotiateCallerNameRequest* protocolSubmitBuffer, int submitBufferLength, IntPtr* protocolReturnBuffer, Int32* returnBufferLength, UInt32* protocolStatus);
    [CompilerGeneratedAttribute]
internal static int <CompareString>g____PInvoke|33_0(UInt32 locale, UInt32 dwCmpFlags, IntPtr lpString1, int cchCount1, IntPtr lpString2, int cchCount2);
}
internal enum System.DirectoryServices.ActiveDirectory.NCFlags : Enum {
    public int value__;
    public static NCFlags InstanceTypeIsNCHead;
    public static NCFlags InstanceTypeIsWriteable;
}
internal class System.DirectoryServices.ActiveDirectory.NegotiateCallerNameRequest : ValueType {
    public int messageType;
    public LUID logonId;
}
internal class System.DirectoryServices.ActiveDirectory.NegotiateCallerNameResponse : object {
    public int messageType;
    public string callerName;
}
internal class System.DirectoryServices.ActiveDirectory.NETLOGON_INFO_2 : object {
    public int netlog2_flags;
    public int netlog2_pdc_connection_status;
    public IntPtr netlog2_trusted_dc_name;
    public int netlog2_tc_connection_status;
}
public enum System.DirectoryServices.ActiveDirectory.NotificationStatus : Enum {
    public int value__;
    public static NotificationStatus NoNotification;
    public static NotificationStatus IntraSiteOnly;
    public static NotificationStatus NotificationAlways;
}
internal class System.DirectoryServices.ActiveDirectory.OMObjectClass : object {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public Byte[] Data { get; }
    public OMObjectClass(Byte[] data);
    public bool Equals(OMObjectClass OMObjectClass);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
}
internal class System.DirectoryServices.ActiveDirectory.OSVersionInfoEx : object {
    public int osVersionInfoSize;
    public int majorVersion;
    public int minorVersion;
    public int buildNumber;
    public int platformId;
    public string csdVersion;
    public short servicePackMajor;
    public short servicePackMinor;
    public short suiteMask;
    public byte productType;
    public byte reserved;
}
internal class System.DirectoryServices.ActiveDirectory.PartialDnsRecord : object {
    public IntPtr next;
    public string name;
    public short type;
    public short dataLength;
    public int flags;
    public int ttl;
    public int reserved;
    public IntPtr data;
}
internal class System.DirectoryServices.ActiveDirectory.POLICY_ACCOUNT_DOMAIN_INFO : ValueType {
    public UNICODE_STRING DomainName;
    public IntPtr DomainSid;
}
internal class System.DirectoryServices.ActiveDirectory.POLICY_DNS_DOMAIN_INFO : object {
    public UNICODE_STRING Name;
    public UNICODE_STRING DnsDomainName;
    public UNICODE_STRING DnsForestName;
    public Guid DomainGuid;
    public IntPtr Sid;
}
[FlagsAttribute]
internal enum System.DirectoryServices.ActiveDirectory.PrivateLocatorFlags : Enum {
    public long value__;
    public static PrivateLocatorFlags DirectoryServicesRequired;
    public static PrivateLocatorFlags DirectoryServicesPreferred;
    public static PrivateLocatorFlags GCRequired;
    public static PrivateLocatorFlags PdcRequired;
    public static PrivateLocatorFlags BackgroundOnly;
    public static PrivateLocatorFlags IPRequired;
    public static PrivateLocatorFlags DSWriteableRequired;
    public static PrivateLocatorFlags GoodTimeServerPreferred;
    public static PrivateLocatorFlags OnlyLDAPNeeded;
    public static PrivateLocatorFlags IsFlatName;
    public static PrivateLocatorFlags IsDNSName;
    public static PrivateLocatorFlags ReturnDNSName;
    public static PrivateLocatorFlags ReturnFlatName;
}
internal static class System.DirectoryServices.ActiveDirectory.PropertyManager : object {
    public static string DefaultNamingContext;
    public static string SchemaNamingContext;
    public static string ConfigurationNamingContext;
    public static string RootDomainNamingContext;
    public static string MsDSBehaviorVersion;
    public static string FsmoRoleOwner;
    public static string ForestFunctionality;
    public static string NTMixedDomain;
    public static string DomainFunctionality;
    public static string ObjectCategory;
    public static string SystemFlags;
    public static string DnsRoot;
    public static string DistinguishedName;
    public static string TrustParent;
    public static string FlatName;
    public static string Name;
    public static string Flags;
    public static string TrustType;
    public static string TrustAttributes;
    public static string BecomeSchemaMaster;
    public static string BecomeDomainMaster;
    public static string BecomePdc;
    public static string BecomeRidMaster;
    public static string BecomeInfrastructureMaster;
    public static string DnsHostName;
    public static string Options;
    public static string CurrentTime;
    public static string HighestCommittedUSN;
    public static string OperatingSystem;
    public static string HasMasterNCs;
    public static string MsDSHasMasterNCs;
    public static string MsDSHasFullReplicaNCs;
    public static string NCName;
    public static string Cn;
    public static string NETBIOSName;
    public static string DomainDNS;
    public static string InstanceType;
    public static string MsDSSDReferenceDomain;
    public static string MsDSPortLDAP;
    public static string MsDSPortSSL;
    public static string MsDSNCReplicaLocations;
    public static string MsDSNCROReplicaLocations;
    public static string SupportedCapabilities;
    public static string ServerName;
    public static string Enabled;
    public static string ObjectGuid;
    public static string Keywords;
    public static string ServiceBindingInformation;
    public static string MsDSReplAuthenticationMode;
    public static string HasPartialReplicaNCs;
    public static string Container;
    public static string LdapDisplayName;
    public static string AttributeID;
    public static string AttributeSyntax;
    public static string Description;
    public static string SearchFlags;
    public static string OMSyntax;
    public static string OMObjectClass;
    public static string IsSingleValued;
    public static string IsDefunct;
    public static string RangeUpper;
    public static string RangeLower;
    public static string IsMemberOfPartialAttributeSet;
    public static string ObjectVersion;
    public static string LinkID;
    public static string ObjectClassCategory;
    public static string SchemaUpdateNow;
    public static string SubClassOf;
    public static string SchemaIDGuid;
    public static string PossibleSuperiors;
    public static string PossibleInferiors;
    public static string MustContain;
    public static string MayContain;
    public static string SystemMustContain;
    public static string SystemMayContain;
    public static string GovernsID;
    public static string IsGlobalCatalogReady;
    public static string NTSecurityDescriptor;
    public static string DsServiceName;
    public static string ReplicateSingleObject;
    public static string MsDSMasteredBy;
    public static string DefaultSecurityDescriptor;
    public static string NamingContexts;
    public static string MsDSDefaultNamingContext;
    public static string OperatingSystemVersion;
    public static string AuxiliaryClass;
    public static string SystemAuxiliaryClass;
    public static string SystemPossibleSuperiors;
    public static string InterSiteTopologyGenerator;
    public static string FromServer;
    public static string RIDAvailablePool;
    public static string SiteList;
    public static string MsDSHasInstantiatedNCs;
    private static PropertyManager();
    public static object GetPropertyValue(DirectoryEntry directoryEntry, string propertyName);
    public static object GetPropertyValue(DirectoryContext context, DirectoryEntry directoryEntry, string propertyName);
    public static object GetSearchResultPropertyValue(SearchResult res, string propertyName);
}
[FlagsAttribute]
public enum System.DirectoryServices.ActiveDirectory.PropertyTypes : Enum {
    public int value__;
    public static PropertyTypes Indexed;
    public static PropertyTypes InGlobalCatalog;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection : ReadOnlyCollectionBase {
    public ActiveDirectorySchemaClass Item { get; }
    internal ReadOnlyActiveDirectorySchemaClassCollection(ICollection values);
    public ActiveDirectorySchemaClass get_Item(int index);
    public bool Contains(ActiveDirectorySchemaClass schemaClass);
    public int IndexOf(ActiveDirectorySchemaClass schemaClass);
    public void CopyTo(ActiveDirectorySchemaClass[] classes, int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection : ReadOnlyCollectionBase {
    public ActiveDirectorySchemaProperty Item { get; }
    internal ReadOnlyActiveDirectorySchemaPropertyCollection(ArrayList values);
    public ActiveDirectorySchemaProperty get_Item(int index);
    public bool Contains(ActiveDirectorySchemaProperty schemaProperty);
    public int IndexOf(ActiveDirectorySchemaProperty schemaProperty);
    public void CopyTo(ActiveDirectorySchemaProperty[] properties, int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection : ReadOnlyCollectionBase {
    public DirectoryServer Item { get; }
    internal ReadOnlyDirectoryServerCollection(ArrayList values);
    public DirectoryServer get_Item(int index);
    public bool Contains(DirectoryServer directoryServer);
    public int IndexOf(DirectoryServer directoryServer);
    public void CopyTo(DirectoryServer[] directoryServers, int index);
    internal int Add(DirectoryServer server);
    internal void AddRange(ICollection servers);
    internal void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection : ReadOnlyCollectionBase {
    public ActiveDirectorySite Item { get; }
    internal ReadOnlySiteCollection(ArrayList sites);
    public ActiveDirectorySite get_Item(int index);
    public bool Contains(ActiveDirectorySite site);
    public int IndexOf(ActiveDirectorySite site);
    public void CopyTo(ActiveDirectorySite[] sites, int index);
    internal int Add(ActiveDirectorySite site);
    internal void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkBridgeCollection : ReadOnlyCollectionBase {
    public ActiveDirectorySiteLinkBridge Item { get; }
    public ActiveDirectorySiteLinkBridge get_Item(int index);
    public bool Contains(ActiveDirectorySiteLinkBridge bridge);
    public int IndexOf(ActiveDirectorySiteLinkBridge bridge);
    public void CopyTo(ActiveDirectorySiteLinkBridge[] bridges, int index);
    internal int Add(ActiveDirectorySiteLinkBridge bridge);
    internal void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection : ReadOnlyCollectionBase {
    public ActiveDirectorySiteLink Item { get; }
    public ActiveDirectorySiteLink get_Item(int index);
    public bool Contains(ActiveDirectorySiteLink link);
    public int IndexOf(ActiveDirectorySiteLink link);
    public void CopyTo(ActiveDirectorySiteLink[] links, int index);
    internal int Add(ActiveDirectorySiteLink link);
    internal void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection : ReadOnlyCollectionBase {
    public string Item { get; }
    internal ReadOnlyStringCollection(ArrayList values);
    public string get_Item(int index);
    public bool Contains(string value);
    public int IndexOf(string value);
    public void CopyTo(String[] values, int index);
    internal void Add(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ReplicationConnection : object {
    internal DirectoryContext context;
    internal DirectoryEntry cachedDirectoryEntry;
    internal bool existingConnection;
    private bool _disposed;
    private bool _isADAMServer;
    private int _options;
    private string _connectionName;
    private string _sourceServerName;
    private string _destinationServerName;
    private ActiveDirectoryTransportType _transport;
    private static string ADAMGuid;
    public string Name { get; }
    [NullableAttribute("2")]
public string SourceServer { get; }
    public string DestinationServer { get; }
    public bool Enabled { get; public set; }
    public ActiveDirectoryTransportType TransportType { get; }
    public bool GeneratedByKcc { get; public set; }
    public bool ReciprocalReplicationEnabled { get; public set; }
    public NotificationStatus ChangeNotificationStatus { get; public set; }
    public bool DataCompressionEnabled { get; public set; }
    public bool ReplicationScheduleOwnedByUser { get; public set; }
    public ReplicationSpan ReplicationSpan { get; }
    [NullableAttribute("2")]
public ActiveDirectorySchedule ReplicationSchedule { get; public set; }
    private bool IsADAM { get; }
    internal ReplicationConnection(DirectoryContext context, DirectoryEntry connectionEntry, string name);
    public ReplicationConnection(DirectoryContext context, string name, DirectoryServer sourceServer);
    public ReplicationConnection(DirectoryContext context, string name, DirectoryServer sourceServer, ActiveDirectorySchedule schedule);
    public ReplicationConnection(DirectoryContext context, string name, DirectoryServer sourceServer, ActiveDirectoryTransportType transport);
    public ReplicationConnection(DirectoryContext context, string name, DirectoryServer sourceServer, ActiveDirectorySchedule schedule, ActiveDirectoryTransportType transport);
    public static ReplicationConnection FindByName(DirectoryContext context, string name);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public string get_Name();
    [NullableContextAttribute("2")]
public string get_SourceServer();
    public string get_DestinationServer();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public ActiveDirectoryTransportType get_TransportType();
    public bool get_GeneratedByKcc();
    public void set_GeneratedByKcc(bool value);
    public bool get_ReciprocalReplicationEnabled();
    public void set_ReciprocalReplicationEnabled(bool value);
    public NotificationStatus get_ChangeNotificationStatus();
    public void set_ChangeNotificationStatus(NotificationStatus value);
    public bool get_DataCompressionEnabled();
    public void set_DataCompressionEnabled(bool value);
    public bool get_ReplicationScheduleOwnedByUser();
    public void set_ReplicationScheduleOwnedByUser(bool value);
    public ReplicationSpan get_ReplicationSpan();
    [NullableContextAttribute("2")]
public ActiveDirectorySchedule get_ReplicationSchedule();
    [NullableContextAttribute("2")]
public void set_ReplicationSchedule(ActiveDirectorySchedule value);
    private bool get_IsADAM();
    public void Delete();
    public void Save();
    public virtual string ToString();
    public DirectoryEntry GetDirectoryEntry();
    private static void ValidateArgument(DirectoryContext context, string name);
    private void ValidateTargetAndSourceServer(DirectoryContext context, DirectoryServer sourceServer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection : ReadOnlyCollectionBase {
    public ReplicationConnection Item { get; }
    public ReplicationConnection get_Item(int index);
    public bool Contains(ReplicationConnection connection);
    public int IndexOf(ReplicationConnection connection);
    public void CopyTo(ReplicationConnection[] connections, int index);
    internal int Add(ReplicationConnection value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ReplicationCursor : object {
    private string _serverDN;
    private DateTime _syncTime;
    private bool _advanced;
    private string _sourceServer;
    private DirectoryServer _server;
    [CompilerGeneratedAttribute]
private string <PartitionName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <SourceInvocationId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UpToDatenessUsn>k__BackingField;
    public string PartitionName { get; }
    public Guid SourceInvocationId { get; }
    public long UpToDatenessUsn { get; }
    [NullableAttribute("2")]
public string SourceServer { get; }
    public DateTime LastSuccessfulSyncTime { get; }
    internal ReplicationCursor(DirectoryServer server, string partition, Guid guid, long filter, long time, IntPtr dn);
    internal ReplicationCursor(DirectoryServer server, string partition, Guid guid, long filter);
    [CompilerGeneratedAttribute]
public string get_PartitionName();
    [CompilerGeneratedAttribute]
public Guid get_SourceInvocationId();
    [CompilerGeneratedAttribute]
public long get_UpToDatenessUsn();
    [NullableContextAttribute("2")]
public string get_SourceServer();
    public DateTime get_LastSuccessfulSyncTime();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection : ReadOnlyCollectionBase {
    private DirectoryServer _server;
    public ReplicationCursor Item { get; }
    internal ReplicationCursorCollection(DirectoryServer server);
    public ReplicationCursor get_Item(int index);
    public bool Contains(ReplicationCursor cursor);
    public int IndexOf(ReplicationCursor cursor);
    public void CopyTo(ReplicationCursor[] values, int index);
    private int Add(ReplicationCursor cursor);
    internal void AddHelper(string partition, object cursors, bool advanced, IntPtr info);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ReplicationFailure : object {
    private string _sourceDsaDN;
    internal int lastResult;
    private DirectoryServer _server;
    private string _sourceServer;
    private Hashtable _nameTable;
    [CompilerGeneratedAttribute]
private Guid <SourceServerGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <FirstFailureTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConsecutiveFailureCount>k__BackingField;
    [NullableAttribute("2")]
public string SourceServer { get; }
    private Guid SourceServerGuid { get; }
    public DateTime FirstFailureTime { get; }
    public int ConsecutiveFailureCount { get; }
    public int LastErrorCode { get; }
    public string LastErrorMessage { get; }
    internal ReplicationFailure(IntPtr addr, DirectoryServer server, Hashtable table);
    [NullableContextAttribute("2")]
public string get_SourceServer();
    [CompilerGeneratedAttribute]
private Guid get_SourceServerGuid();
    [CompilerGeneratedAttribute]
public DateTime get_FirstFailureTime();
    [CompilerGeneratedAttribute]
public int get_ConsecutiveFailureCount();
    public int get_LastErrorCode();
    public string get_LastErrorMessage();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection : ReadOnlyCollectionBase {
    private DirectoryServer _server;
    private Hashtable _nameTable;
    public ReplicationFailure Item { get; }
    internal ReplicationFailureCollection(DirectoryServer server);
    public ReplicationFailure get_Item(int index);
    public bool Contains(ReplicationFailure failure);
    public int IndexOf(ReplicationFailure failure);
    public void CopyTo(ReplicationFailure[] failures, int index);
    private int Add(ReplicationFailure failure);
    internal void AddHelper(DS_REPL_KCC_DSA_FAILURES failures, IntPtr info);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ReplicationNeighbor : object {
    private string _sourceServerDN;
    private DirectoryServer _server;
    private string _sourceServer;
    private Hashtable _nameTable;
    [CompilerGeneratedAttribute]
private string <PartitionName>k__BackingField;
    [CompilerGeneratedAttribute]
private ActiveDirectoryTransportType <TransportType>k__BackingField;
    [CompilerGeneratedAttribute]
private ReplicationNeighborOptions <ReplicationNeighborOption>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <SourceInvocationId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UsnLastObjectChangeSynced>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UsnAttributeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastSuccessfulSync>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastAttemptedSync>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LastSyncResult>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConsecutiveFailureCount>k__BackingField;
    public string PartitionName { get; }
    public string SourceServer { get; }
    public ActiveDirectoryTransportType TransportType { get; }
    public ReplicationNeighborOptions ReplicationNeighborOption { get; }
    public Guid SourceInvocationId { get; }
    public long UsnLastObjectChangeSynced { get; }
    public long UsnAttributeFilter { get; }
    public DateTime LastSuccessfulSync { get; }
    public DateTime LastAttemptedSync { get; }
    public int LastSyncResult { get; }
    [NullableAttribute("1")]
public string LastSyncMessage { get; }
    public int ConsecutiveFailureCount { get; }
    internal ReplicationNeighbor(IntPtr addr, DirectoryServer server, Hashtable table);
    [CompilerGeneratedAttribute]
public string get_PartitionName();
    public string get_SourceServer();
    [CompilerGeneratedAttribute]
public ActiveDirectoryTransportType get_TransportType();
    [CompilerGeneratedAttribute]
public ReplicationNeighborOptions get_ReplicationNeighborOption();
    [CompilerGeneratedAttribute]
public Guid get_SourceInvocationId();
    [CompilerGeneratedAttribute]
public long get_UsnLastObjectChangeSynced();
    [CompilerGeneratedAttribute]
public long get_UsnAttributeFilter();
    [CompilerGeneratedAttribute]
public DateTime get_LastSuccessfulSync();
    [CompilerGeneratedAttribute]
public DateTime get_LastAttemptedSync();
    [CompilerGeneratedAttribute]
public int get_LastSyncResult();
    [NullableContextAttribute("1")]
public string get_LastSyncMessage();
    [CompilerGeneratedAttribute]
public int get_ConsecutiveFailureCount();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection : ReadOnlyCollectionBase {
    private DirectoryServer _server;
    private Hashtable _nameTable;
    public ReplicationNeighbor Item { get; }
    internal ReplicationNeighborCollection(DirectoryServer server);
    public ReplicationNeighbor get_Item(int index);
    public bool Contains(ReplicationNeighbor neighbor);
    public int IndexOf(ReplicationNeighbor neighbor);
    public void CopyTo(ReplicationNeighbor[] neighbors, int index);
    private int Add(ReplicationNeighbor neighbor);
    internal void AddHelper(DS_REPL_NEIGHBORS neighbors, IntPtr info);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ReplicationOperation : object {
    private string _dsaDN;
    private DirectoryServer _server;
    private string _sourceServer;
    private Hashtable _nameTable;
    [CompilerGeneratedAttribute]
private DateTime <TimeEnqueued>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OperationNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private ReplicationOperationType <OperationType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PartitionName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <SourceServerGuid>k__BackingField;
    public DateTime TimeEnqueued { get; }
    public int OperationNumber { get; }
    public int Priority { get; }
    public ReplicationOperationType OperationType { get; }
    public string PartitionName { get; }
    public string SourceServer { get; }
    private Guid SourceServerGuid { get; }
    internal ReplicationOperation(IntPtr addr, DirectoryServer server, Hashtable table);
    [CompilerGeneratedAttribute]
public DateTime get_TimeEnqueued();
    [CompilerGeneratedAttribute]
public int get_OperationNumber();
    [CompilerGeneratedAttribute]
public int get_Priority();
    [CompilerGeneratedAttribute]
public ReplicationOperationType get_OperationType();
    [CompilerGeneratedAttribute]
public string get_PartitionName();
    public string get_SourceServer();
    [CompilerGeneratedAttribute]
private Guid get_SourceServerGuid();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ReplicationOperationCollection : ReadOnlyCollectionBase {
    private DirectoryServer _server;
    private Hashtable _nameTable;
    public ReplicationOperation Item { get; }
    internal ReplicationOperationCollection(DirectoryServer server);
    public ReplicationOperation get_Item(int index);
    public bool Contains(ReplicationOperation operation);
    public int IndexOf(ReplicationOperation operation);
    public void CopyTo(ReplicationOperation[] operations, int index);
    private int Add(ReplicationOperation operation);
    internal void AddHelper(DS_REPL_PENDING_OPS operations, IntPtr info);
    internal ReplicationOperation GetFirstOperation();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation : object {
    internal DateTime startTime;
    internal ReplicationOperation currentOp;
    internal ReplicationOperationCollection collection;
    public DateTime OperationStartTime { get; }
    public ReplicationOperation CurrentOperation { get; }
    public ReplicationOperationCollection PendingOperations { get; }
    public DateTime get_OperationStartTime();
    public ReplicationOperation get_CurrentOperation();
    public ReplicationOperationCollection get_PendingOperations();
}
public enum System.DirectoryServices.ActiveDirectory.ReplicationOperationType : Enum {
    public int value__;
    public static ReplicationOperationType Sync;
    public static ReplicationOperationType Add;
    public static ReplicationOperationType Delete;
    public static ReplicationOperationType Modify;
    public static ReplicationOperationType UpdateReference;
}
public enum System.DirectoryServices.ActiveDirectory.ReplicationSecurityLevel : Enum {
    public int value__;
    public static ReplicationSecurityLevel MutualAuthentication;
    public static ReplicationSecurityLevel Negotiate;
    public static ReplicationSecurityLevel NegotiatePassThrough;
}
public enum System.DirectoryServices.ActiveDirectory.ReplicationSpan : Enum {
    public int value__;
    public static ReplicationSpan IntraSite;
    public static ReplicationSpan InterSite;
}
public enum System.DirectoryServices.ActiveDirectory.SchemaClassType : Enum {
    public int value__;
    public static SchemaClassType Type88;
    public static SchemaClassType Structural;
    public static SchemaClassType Abstract;
    public static SchemaClassType Auxiliary;
}
internal enum System.DirectoryServices.ActiveDirectory.SearchFlags : Enum {
    public int value__;
    public static SearchFlags None;
    public static SearchFlags IsIndexed;
    public static SearchFlags IsIndexedOverContainer;
    public static SearchFlags IsInAnr;
    public static SearchFlags IsOnTombstonedObject;
    public static SearchFlags IsTupleIndexed;
}
internal enum System.DirectoryServices.ActiveDirectory.SidType : Enum {
    public int value__;
    public static SidType RealObject;
    public static SidType RealObjectFakeDomain;
    public static SidType FakeObject;
}
internal class System.DirectoryServices.ActiveDirectory.SupportedCapability : ValueType {
    public static string ADOid;
    public static string ADAMOid;
    private static SupportedCapability();
}
public enum System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorCategory : Enum {
    public int value__;
    public static SyncFromAllServersErrorCategory ErrorContactingServer;
    public static SyncFromAllServersErrorCategory ErrorReplicating;
    public static SyncFromAllServersErrorCategory ServerUnreachable;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorInformation : object {
    [CompilerGeneratedAttribute]
private SyncFromAllServersErrorCategory <ErrorCategory>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetServer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceServer>k__BackingField;
    public SyncFromAllServersErrorCategory ErrorCategory { get; }
    public int ErrorCode { get; }
    [NullableAttribute("1")]
public string ErrorMessage { get; }
    public string TargetServer { get; }
    public string SourceServer { get; }
    internal SyncFromAllServersErrorInformation(SyncFromAllServersErrorCategory category, int errorCode, string errorMessage, string sourceServer, string targetServer);
    [CompilerGeneratedAttribute]
public SyncFromAllServersErrorCategory get_ErrorCategory();
    [CompilerGeneratedAttribute]
public int get_ErrorCode();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public string get_TargetServer();
    [CompilerGeneratedAttribute]
public string get_SourceServer();
}
public enum System.DirectoryServices.ActiveDirectory.SyncFromAllServersEvent : Enum {
    public int value__;
    public static SyncFromAllServersEvent Error;
    public static SyncFromAllServersEvent SyncStarted;
    public static SyncFromAllServersEvent SyncCompleted;
    public static SyncFromAllServersEvent Finished;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.DirectoryServices.ActiveDirectory.SyncFromAllServersOperationException : ActiveDirectoryOperationException {
    private SyncFromAllServersErrorInformation[] _errors;
    public SyncFromAllServersErrorInformation[] ErrorInformation { get; }
    [NullableContextAttribute("2")]
public SyncFromAllServersOperationException(string message, Exception inner, SyncFromAllServersErrorInformation[] errors);
    [NullableContextAttribute("2")]
public SyncFromAllServersOperationException(string message, Exception inner);
    [NullableContextAttribute("2")]
public SyncFromAllServersOperationException(string message);
    protected SyncFromAllServersOperationException(SerializationInfo info, StreamingContext context);
    public SyncFromAllServersErrorInformation[] get_ErrorInformation();
    public virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
[FlagsAttribute]
public enum System.DirectoryServices.ActiveDirectory.SyncFromAllServersOptions : Enum {
    public int value__;
    public static SyncFromAllServersOptions None;
    public static SyncFromAllServersOptions AbortIfServerUnavailable;
    public static SyncFromAllServersOptions SyncAdjacentServerOnly;
    public static SyncFromAllServersOptions CheckServerAlivenessOnly;
    public static SyncFromAllServersOptions SkipInitialCheck;
    public static SyncFromAllServersOptions PushChangeOutward;
    public static SyncFromAllServersOptions CrossSite;
}
internal class System.DirectoryServices.ActiveDirectory.SyncReplicaFromAllServersCallback : MulticastDelegate {
    public SyncReplicaFromAllServersCallback(object object, IntPtr method);
    public virtual bool Invoke(IntPtr data, IntPtr update);
    public virtual IAsyncResult BeginInvoke(IntPtr data, IntPtr update, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class System.DirectoryServices.ActiveDirectory.SyncUpdateCallback : MulticastDelegate {
    public SyncUpdateCallback(object object, IntPtr method);
    [NullableContextAttribute("2")]
public virtual bool Invoke(SyncFromAllServersEvent eventType, string targetServer, string sourceServer, SyncFromAllServersOperationException exception);
    public virtual IAsyncResult BeginInvoke(SyncFromAllServersEvent eventType, string targetServer, string sourceServer, SyncFromAllServersOperationException exception, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class System.DirectoryServices.ActiveDirectory.Syntax : object {
    public string attributeSyntax;
    public int oMSyntax;
    public OMObjectClass oMObjectClass;
    public Syntax(string attributeSyntax, int oMSyntax, OMObjectClass oMObjectClass);
    public bool Equals(Syntax syntax);
}
internal enum System.DirectoryServices.ActiveDirectory.SystemFlag : Enum {
    public int value__;
    public static SystemFlag SystemFlagNtdsNC;
    public static SystemFlag SystemFlagNtdsDomain;
}
internal class System.DirectoryServices.ActiveDirectory.SystemTime : object {
    public ushort wYear;
    public ushort wMonth;
    public ushort wDayOfWeek;
    public ushort wDay;
    public ushort wHour;
    public ushort wMinute;
    public ushort wSecond;
    public ushort wMilliseconds;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.TopLevelName : object {
    private TopLevelNameStatus _status;
    internal LARGE_INTEGER time;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public TopLevelNameStatus Status { get; public set; }
    internal TopLevelName(int flag, UNICODE_STRING val, LARGE_INTEGER time);
    [CompilerGeneratedAttribute]
public string get_Name();
    public TopLevelNameStatus get_Status();
    public void set_Status(TopLevelNameStatus value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.TopLevelNameCollection : ReadOnlyCollectionBase {
    public TopLevelName Item { get; }
    public TopLevelName get_Item(int index);
    public bool Contains(TopLevelName name);
    public int IndexOf(TopLevelName name);
    public void CopyTo(TopLevelName[] names, int index);
    internal int Add(TopLevelName name);
}
[FlagsAttribute]
public enum System.DirectoryServices.ActiveDirectory.TopLevelNameCollisionOptions : Enum {
    public int value__;
    public static TopLevelNameCollisionOptions None;
    public static TopLevelNameCollisionOptions NewlyCreated;
    public static TopLevelNameCollisionOptions DisabledByAdmin;
    public static TopLevelNameCollisionOptions DisabledByConflict;
}
public enum System.DirectoryServices.ActiveDirectory.TopLevelNameStatus : Enum {
    public int value__;
    public static TopLevelNameStatus Enabled;
    public static TopLevelNameStatus NewlyCreated;
    public static TopLevelNameStatus AdminDisabled;
    public static TopLevelNameStatus ConflictDisabled;
}
[FlagsAttribute]
internal enum System.DirectoryServices.ActiveDirectory.TRUST_ATTRIBUTE : Enum {
    public int value__;
    public static TRUST_ATTRIBUTE TRUST_ATTRIBUTE_NON_TRANSITIVE;
    public static TRUST_ATTRIBUTE TRUST_ATTRIBUTE_UPLEVEL_ONLY;
    public static TRUST_ATTRIBUTE TRUST_ATTRIBUTE_QUARANTINED_DOMAIN;
    public static TRUST_ATTRIBUTE TRUST_ATTRIBUTE_FOREST_TRANSITIVE;
    public static TRUST_ATTRIBUTE TRUST_ATTRIBUTE_CROSS_ORGANIZATION;
    public static TRUST_ATTRIBUTE TRUST_ATTRIBUTE_WITHIN_FOREST;
    public static TRUST_ATTRIBUTE TRUST_ATTRIBUTE_TREAT_AS_EXTERNAL;
}
public enum System.DirectoryServices.ActiveDirectory.TrustDirection : Enum {
    public int value__;
    public static TrustDirection Inbound;
    public static TrustDirection Outbound;
    public static TrustDirection Bidirectional;
}
internal class System.DirectoryServices.ActiveDirectory.TRUSTED_DOMAIN_AUTH_INFORMATION : ValueType {
    public int IncomingAuthInfos;
    public IntPtr IncomingAuthenticationInformation;
    public IntPtr IncomingPreviousAuthenticationInformation;
    public int OutgoingAuthInfos;
    public IntPtr OutgoingAuthenticationInformation;
    public IntPtr OutgoingPreviousAuthenticationInformation;
}
internal class System.DirectoryServices.ActiveDirectory.TRUSTED_DOMAIN_FULL_INFORMATION : object {
    public TRUSTED_DOMAIN_INFORMATION_EX Information;
    internal TRUSTED_POSIX_OFFSET_INFO PosixOffset;
    public Nullable`1<TRUSTED_DOMAIN_AUTH_INFORMATION> AuthInformation;
}
internal class System.DirectoryServices.ActiveDirectory.TRUSTED_DOMAIN_INFORMATION_EX : ValueType {
    public UNICODE_STRING Name;
    public UNICODE_STRING FlatName;
    public IntPtr Sid;
    public int TrustDirection;
    public int TrustType;
    public TRUST_ATTRIBUTE TrustAttributes;
}
internal enum System.DirectoryServices.ActiveDirectory.TRUSTED_INFORMATION_CLASS : Enum {
    public int value__;
    public static TRUSTED_INFORMATION_CLASS TrustedDomainNameInformation;
    public static TRUSTED_INFORMATION_CLASS TrustedControllersInformation;
    public static TRUSTED_INFORMATION_CLASS TrustedPosixOffsetInformation;
    public static TRUSTED_INFORMATION_CLASS TrustedPasswordInformation;
    public static TRUSTED_INFORMATION_CLASS TrustedDomainInformationBasic;
    public static TRUSTED_INFORMATION_CLASS TrustedDomainInformationEx;
    public static TRUSTED_INFORMATION_CLASS TrustedDomainAuthInformation;
    public static TRUSTED_INFORMATION_CLASS TrustedDomainFullInformation;
    public static TRUSTED_INFORMATION_CLASS TrustedDomainAuthInformationInternal;
    public static TRUSTED_INFORMATION_CLASS TrustedDomainFullInformationInternal;
    public static TRUSTED_INFORMATION_CLASS TrustedDomainInformationEx2Internal;
    public static TRUSTED_INFORMATION_CLASS TrustedDomainFullInformation2Internal;
}
internal class System.DirectoryServices.ActiveDirectory.TRUSTED_POSIX_OFFSET_INFO : object {
    internal int Offset;
}
internal static class System.DirectoryServices.ActiveDirectory.TrustHelper : object {
    private static int STATUS_OBJECT_NAME_NOT_FOUND;
    internal static int ERROR_NOT_FOUND;
    internal static int NETLOGON_QUERY_LEVEL;
    internal static int NETLOGON_CONTROL_REDISCOVER;
    private static int NETLOGON_CONTROL_TC_VERIFY;
    private static int NETLOGON_VERIFY_STATUS_RETURNED;
    private static int PASSWORD_LENGTH;
    private static int TRUST_AUTH_TYPE_CLEAR;
    private static int policyDnsDomainInformation;
    private static int TRUSTED_SET_POSIX;
    private static int TRUSTED_SET_AUTH;
    internal static int TRUST_TYPE_DOWNLEVEL;
    internal static int TRUST_TYPE_UPLEVEL;
    internal static int TRUST_TYPE_MIT;
    private static int ERROR_ALREADY_EXISTS;
    private static int ERROR_INVALID_LEVEL;
    private static string PasswordCharacterSet;
    internal static bool GetTrustedDomainInfoStatus(DirectoryContext context, string sourceName, string targetName, TRUST_ATTRIBUTE attribute, bool isForest);
    internal static void SetTrustedDomainInfoStatus(DirectoryContext context, string sourceName, string targetName, TRUST_ATTRIBUTE attribute, bool status, bool isForest);
    internal static void DeleteTrust(DirectoryContext sourceContext, string sourceName, string targetName, bool isForest);
    internal static void VerifyTrust(DirectoryContext context, string sourceName, string targetName, bool isForest, TrustDirection direction, bool forceSecureChannelReset, string preferredTargetServer);
    internal static void CreateTrust(DirectoryContext sourceContext, string sourceName, DirectoryContext targetContext, string targetName, bool isForest, TrustDirection direction, string password);
    internal static string UpdateTrust(DirectoryContext context, string sourceName, string targetName, string password, bool isForest);
    internal static void UpdateTrustDirection(DirectoryContext context, string sourceName, string targetName, string password, bool isForest, TrustDirection newTrustDirection);
    private static void ValidateTrust(SafeLsaPolicyHandle handle, UNICODE_STRING trustedDomainName, string sourceName, string targetName, bool isForest, int direction, string serverName);
    private static void ValidateTrustAttribute(TRUSTED_DOMAIN_INFORMATION_EX domainInfo, bool isForest, string sourceName, string targetName);
    internal static string CreateTrustPassword();
    private static IntPtr GetTrustedDomainInfo(DirectoryContext targetContext, string targetName, bool isForest);
}
internal class System.DirectoryServices.ActiveDirectory.TrustObject : object {
    public string NetbiosDomainName;
    public string DnsDomainName;
    public int Flags;
    public int ParentIndex;
    public TrustType TrustType;
    public int TrustAttributes;
    public int OriginalIndex;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation : object {
    internal string source;
    internal string target;
    internal TrustType type;
    internal TrustDirection direction;
    internal DirectoryContext context;
    public string SourceName { get; }
    public string TargetName { get; }
    public TrustType TrustType { get; }
    public TrustDirection TrustDirection { get; }
    internal TrustRelationshipInformation(DirectoryContext context, string source, TrustObject obj);
    public string get_SourceName();
    public string get_TargetName();
    public TrustType get_TrustType();
    public TrustDirection get_TrustDirection();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection : ReadOnlyCollectionBase {
    public TrustRelationshipInformation Item { get; }
    internal TrustRelationshipInformationCollection(DirectoryContext context, string source, ArrayList trusts);
    public TrustRelationshipInformation get_Item(int index);
    public bool Contains(TrustRelationshipInformation information);
    public int IndexOf(TrustRelationshipInformation information);
    public void CopyTo(TrustRelationshipInformation[] array, int index);
    internal int Add(TrustRelationshipInformation info);
}
public enum System.DirectoryServices.ActiveDirectory.TrustType : Enum {
    public int value__;
    public static TrustType TreeRoot;
    public static TrustType ParentChild;
    public static TrustType CrossLink;
    public static TrustType External;
    public static TrustType Forest;
    public static TrustType Kerberos;
    public static TrustType Unknown;
}
internal static class System.DirectoryServices.ActiveDirectory.UnsafeNativeMethods : object {
    [LibraryImportAttribute("activeds.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
public static int ADsEncodeBinaryData(Byte[] data, int length, IntPtr& result);
    [LibraryImportAttribute("activeds.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
public static bool FreeADsMem(IntPtr pVoid);
    [LibraryImportAttribute("netapi32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
public static int DsGetSiteName(string dcName, IntPtr& ptr);
    [LibraryImportAttribute("netapi32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
public static int DsEnumerateDomainTrustsW(string serverName, int flags, IntPtr& domains, Int32& count);
    [LibraryImportAttribute("netapi32.dll")]
public static int NetApiBufferFree(IntPtr buffer);
    [LibraryImportAttribute("advapi32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
public static UInt32 LsaSetForestTrustInformation(SafeLsaPolicyHandle handle, UNICODE_STRING& target, IntPtr forestTrustInfo, int checkOnly, IntPtr& collisionInfo);
    [LibraryImportAttribute("advapi32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
public static UInt32 LsaQueryForestTrustInformation(SafeLsaPolicyHandle handle, UNICODE_STRING& target, IntPtr& ForestTrustInfo);
    [LibraryImportAttribute("advapi32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
public static UInt32 LsaQueryTrustedDomainInfoByName(SafeLsaPolicyHandle handle, UNICODE_STRING& trustedDomain, TRUSTED_INFORMATION_CLASS infoClass, IntPtr& buffer);
    [LibraryImportAttribute("advapi32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
public static UInt32 LsaSetTrustedDomainInfoByName(SafeLsaPolicyHandle handle, UNICODE_STRING& trustedDomain, TRUSTED_INFORMATION_CLASS infoClass, IntPtr buffer);
    [LibraryImportAttribute("advapi32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
public static UInt32 LsaDeleteTrustedDomain(SafeLsaPolicyHandle handle, IntPtr pSid);
    [LibraryImportAttribute("netapi32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
public static int I_NetLogonControl2(string serverName, int FunctionCode, int QueryLevel, IntPtr data, IntPtr& buffer);
    [LibraryImportAttribute("kernel32.dll")]
public static void GetSystemTimeAsFileTime(IntPtr fileTime);
    [LibraryImportAttribute("advapi32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
public static UInt32 LsaCreateTrustedDomainEx(SafeLsaPolicyHandle handle, TRUSTED_DOMAIN_INFORMATION_EX& domainEx, TRUSTED_DOMAIN_AUTH_INFORMATION& authInfo, int classInfo, IntPtr& domainHandle);
    [LibraryImportAttribute("kernel32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
public static IntPtr OpenThread(UInt32 desiredAccess, bool inheirted, int threadID);
    [LibraryImportAttribute("advapi32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
public static int ImpersonateAnonymousToken(IntPtr token);
    [LibraryImportAttribute("ntdll.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
public static int RtlInitUnicodeString(UNICODE_STRING& result, IntPtr s);
    [LibraryImportAttribute("netapi32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
public static int DsRoleGetPrimaryDomainInformation(string lpServer, DSROLE_PRIMARY_DOMAIN_INFO_LEVEL InfoLevel, IntPtr& Buffer);
    [LibraryImportAttribute("netapi32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
public static int DsRoleGetPrimaryDomainInformation(IntPtr lpServer, DSROLE_PRIMARY_DOMAIN_INFO_LEVEL InfoLevel, IntPtr& Buffer);
    [LibraryImportAttribute("netapi32.dll")]
public static int DsRoleFreeMemory(IntPtr buffer);
    [CompilerGeneratedAttribute]
internal static int <ADsEncodeBinaryData>g____PInvoke|0_0(Byte* data, int length, IntPtr* result);
    [CompilerGeneratedAttribute]
internal static int <FreeADsMem>g____PInvoke|1_0(IntPtr pVoid);
    [CompilerGeneratedAttribute]
internal static int <DsGetSiteName>g____PInvoke|2_0(UInt16* dcName, IntPtr* ptr);
    [CompilerGeneratedAttribute]
internal static int <DsEnumerateDomainTrustsW>g____PInvoke|3_0(UInt16* serverName, int flags, IntPtr* domains, Int32* count);
    [CompilerGeneratedAttribute]
internal static UInt32 <LsaSetForestTrustInformation>g____PInvoke|5_0(IntPtr handle, UNICODE_STRING* target, IntPtr forestTrustInfo, int checkOnly, IntPtr* collisionInfo);
    [CompilerGeneratedAttribute]
internal static UInt32 <LsaQueryForestTrustInformation>g____PInvoke|6_0(IntPtr handle, UNICODE_STRING* target, IntPtr* ForestTrustInfo);
    [CompilerGeneratedAttribute]
internal static UInt32 <LsaQueryTrustedDomainInfoByName>g____PInvoke|7_0(IntPtr handle, UNICODE_STRING* trustedDomain, TRUSTED_INFORMATION_CLASS infoClass, IntPtr* buffer);
    [CompilerGeneratedAttribute]
internal static UInt32 <LsaSetTrustedDomainInfoByName>g____PInvoke|8_0(IntPtr handle, UNICODE_STRING* trustedDomain, TRUSTED_INFORMATION_CLASS infoClass, IntPtr buffer);
    [CompilerGeneratedAttribute]
internal static UInt32 <LsaDeleteTrustedDomain>g____PInvoke|9_0(IntPtr handle, IntPtr pSid);
    [CompilerGeneratedAttribute]
internal static int <I_NetLogonControl2>g____PInvoke|10_0(UInt16* serverName, int FunctionCode, int QueryLevel, IntPtr data, IntPtr* buffer);
    [CompilerGeneratedAttribute]
internal static UInt32 <LsaCreateTrustedDomainEx>g____PInvoke|12_0(IntPtr handle, TRUSTED_DOMAIN_INFORMATION_EX* domainEx, TRUSTED_DOMAIN_AUTH_INFORMATION* authInfo, int classInfo, IntPtr* domainHandle);
    [CompilerGeneratedAttribute]
internal static IntPtr <OpenThread>g____PInvoke|13_0(UInt32 desiredAccess, int inheirted, int threadID);
    [CompilerGeneratedAttribute]
internal static int <ImpersonateAnonymousToken>g____PInvoke|14_0(IntPtr token);
    [CompilerGeneratedAttribute]
internal static int <RtlInitUnicodeString>g____PInvoke|15_0(UNICODE_STRING* result, IntPtr s);
    [CompilerGeneratedAttribute]
internal static int <DsRoleGetPrimaryDomainInformation>g____PInvoke|16_0(UInt16* lpServer, DSROLE_PRIMARY_DOMAIN_INFO_LEVEL InfoLevel, IntPtr* Buffer);
    [CompilerGeneratedAttribute]
internal static int <DsRoleGetPrimaryDomainInformation>g____PInvoke|17_0(IntPtr lpServer, DSROLE_PRIMARY_DOMAIN_INFO_LEVEL InfoLevel, IntPtr* Buffer);
}
internal class System.DirectoryServices.ActiveDirectory.Utils : object {
    private static int LOGON32_LOGON_NEW_CREDENTIALS;
    private static int LOGON32_PROVIDER_WINNT50;
    private static UInt32 STANDARD_RIGHTS_REQUIRED;
    private static UInt32 SYNCHRONIZE;
    private static UInt32 THREAD_ALL_ACCESS;
    internal static AuthenticationTypes DefaultAuthType;
    private static UInt32 LANG_ENGLISH;
    private static UInt32 SUBLANG_ENGLISH_US;
    private static UInt32 SORT_DEFAULT;
    private static UInt32 LANGID;
    private static UInt32 LCID;
    internal static UInt32 NORM_IGNORECASE;
    internal static UInt32 NORM_IGNORENONSPACE;
    internal static UInt32 NORM_IGNOREKANATYPE;
    internal static UInt32 NORM_IGNOREWIDTH;
    internal static UInt32 SORT_STRINGSORT;
    internal static UInt32 DEFAULT_CMP_FLAGS;
    private static string s_NTAuthorityString;
    internal static string GetDnsNameFromDN(string distinguishedName);
    internal static string GetDNFromDnsName(string dnsName);
    internal static string GetDnsHostNameFromNTDSA(DirectoryContext context, string dn);
    internal static string GetAdamDnsHostNameFromNTDSA(DirectoryContext context, string dn);
    internal static string GetAdamHostNameAndPortsFromNTDSA(DirectoryContext context, string dn);
    internal static string GetRdnFromDN(string distinguishedName);
    internal static string GetPartialDN(string distinguishedName, int startingIndex);
    internal static Component[] GetDNComponents(string distinguishedName);
    internal static bool IsValidDNFormat(string distinguishedName);
    public static String[] Split(string distinguishedName, char delim);
    internal static DirectoryContext GetNewDirectoryContext(string name, DirectoryContextType contextType, DirectoryContext context);
    internal static void GetDomainAndUsername(DirectoryContext context, String& username, String& domain);
    internal static IntPtr GetAuthIdentity(DirectoryContext context, SafeLibraryHandle libHandle);
    internal static void FreeAuthIdentity(IntPtr authIdentity, SafeLibraryHandle libHandle);
    internal static IntPtr GetDSHandle(string domainControllerName, string domainName, IntPtr authIdentity, SafeLibraryHandle libHandle);
    internal static void FreeDSHandle(IntPtr dsHandle, SafeLibraryHandle libHandle);
    internal static bool CheckCapability(DirectoryEntry rootDSE, Capability capability);
    internal static DirectoryEntry GetCrossRefEntry(DirectoryContext context, DirectoryEntry partitionsEntry, string partitionName);
    internal static ActiveDirectoryTransportType GetTransportTypeFromDN(string DN);
    internal static string GetDNFromTransportType(ActiveDirectoryTransportType transport, DirectoryContext context);
    internal static string GetServerNameFromInvocationID(string serverObjectDN, Guid invocationID, DirectoryServer server);
    internal static int GetRandomIndex(int count);
    internal static bool Impersonate(DirectoryContext context);
    internal static void ImpersonateAnonymous();
    internal static void Revert();
    internal static string GetPolicyServerName(DirectoryContext context, bool isForest, bool needPdc, string source);
    internal static SafeLsaPolicyHandle GetPolicyHandle(string serverName);
    internal static Hashtable GetValuesWithRangeRetrieval(DirectoryEntry searchRootEntry, string filter, ArrayList propertiesToLoad, SearchScope searchScope);
    internal static Hashtable GetValuesWithRangeRetrieval(DirectoryEntry searchRootEntry, string filter, ArrayList propertiesWithRangeRetrieval, ArrayList propertiesWithoutRangeRetrieval, SearchScope searchScope);
    internal static ArrayList GetReplicaList(DirectoryContext context, string partitionName, string siteName, bool isDefaultNC, bool isADAM, bool isGC);
    internal static string GetEscapedFilterValue(string filterValue);
    internal static string GetEscapedPath(string originalPath);
    internal static int Compare(string s1, string s2, UInt32 compareFlags);
    internal static int Compare(string s1, string s2);
    internal static int Compare(string s1, int offset1, int length1, string s2, int offset2, int length2);
    internal static int Compare(string s1, int offset1, int length1, string s2, int offset2, int length2, UInt32 compareFlags);
    internal static string SplitServerNameAndPortNumber(string serverName, String& portNumber);
    internal static string GetNtAuthorityString();
    internal static bool IsSamUser();
    internal static IntPtr GetCurrentUserSid();
    internal static IntPtr GetMachineDomainSid();
    internal static bool IsMachineDC(string computerName);
    internal static SidType ClassifySID(IntPtr pSid);
    internal static int GetLastRidFromSid(IntPtr pSid);
    internal static int GetLastRidFromSid(Byte[] sid);
    internal static IntPtr ConvertByteArrayToIntPtr(Byte[] bytes);
}
internal enum System.DirectoryServices.ActiveDirectory.WellKnownDN : Enum {
    public int value__;
    public static WellKnownDN RootDSE;
    public static WellKnownDN DefaultNamingContext;
    public static WellKnownDN SchemaNamingContext;
    public static WellKnownDN ConfigurationNamingContext;
    public static WellKnownDN PartitionsContainer;
    public static WellKnownDN SitesContainer;
    public static WellKnownDN SystemContainer;
    public static WellKnownDN RidManager;
    public static WellKnownDN Infrastructure;
    public static WellKnownDN RootDomainNamingContext;
    public static WellKnownDN Schema;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectoryAccessRule : ObjectAccessRule {
    public ActiveDirectoryRights ActiveDirectoryRights { get; }
    public ActiveDirectorySecurityInheritance InheritanceType { get; }
    public ActiveDirectoryAccessRule(IdentityReference identity, ActiveDirectoryRights adRights, AccessControlType type);
    public ActiveDirectoryAccessRule(IdentityReference identity, ActiveDirectoryRights adRights, AccessControlType type, Guid objectType);
    public ActiveDirectoryAccessRule(IdentityReference identity, ActiveDirectoryRights adRights, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType);
    public ActiveDirectoryAccessRule(IdentityReference identity, ActiveDirectoryRights adRights, AccessControlType type, Guid objectType, ActiveDirectorySecurityInheritance inheritanceType);
    public ActiveDirectoryAccessRule(IdentityReference identity, ActiveDirectoryRights adRights, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
    public ActiveDirectoryAccessRule(IdentityReference identity, ActiveDirectoryRights adRights, AccessControlType type, Guid objectType, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
    internal ActiveDirectoryAccessRule(IdentityReference identity, int accessMask, AccessControlType type, Guid objectType, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, Guid inheritedObjectType);
    public ActiveDirectoryRights get_ActiveDirectoryRights();
    public ActiveDirectorySecurityInheritance get_InheritanceType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectoryAuditRule : ObjectAuditRule {
    public ActiveDirectoryRights ActiveDirectoryRights { get; }
    public ActiveDirectorySecurityInheritance InheritanceType { get; }
    public ActiveDirectoryAuditRule(IdentityReference identity, ActiveDirectoryRights adRights, AuditFlags auditFlags);
    public ActiveDirectoryAuditRule(IdentityReference identity, ActiveDirectoryRights adRights, AuditFlags auditFlags, Guid objectType);
    public ActiveDirectoryAuditRule(IdentityReference identity, ActiveDirectoryRights adRights, AuditFlags auditFlags, ActiveDirectorySecurityInheritance inheritanceType);
    public ActiveDirectoryAuditRule(IdentityReference identity, ActiveDirectoryRights adRights, AuditFlags auditFlags, Guid objectType, ActiveDirectorySecurityInheritance inheritanceType);
    public ActiveDirectoryAuditRule(IdentityReference identity, ActiveDirectoryRights adRights, AuditFlags auditFlags, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
    public ActiveDirectoryAuditRule(IdentityReference identity, ActiveDirectoryRights adRights, AuditFlags auditFlags, Guid objectType, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
    internal ActiveDirectoryAuditRule(IdentityReference identity, int accessMask, AuditFlags auditFlags, Guid objectGuid, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, Guid inheritedObjectType);
    public ActiveDirectoryRights get_ActiveDirectoryRights();
    public ActiveDirectorySecurityInheritance get_InheritanceType();
}
internal class System.DirectoryServices.ActiveDirectoryInheritanceTranslator : object {
    internal static InheritanceFlags[] ITToIF;
    internal static PropagationFlags[] ITToPF;
    private static ActiveDirectoryInheritanceTranslator();
    internal static InheritanceFlags GetInheritanceFlags(ActiveDirectorySecurityInheritance inheritanceType);
    internal static PropagationFlags GetPropagationFlags(ActiveDirectorySecurityInheritance inheritanceType);
    internal static ActiveDirectorySecurityInheritance GetEffectiveInheritanceFlags(InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags);
}
[FlagsAttribute]
public enum System.DirectoryServices.ActiveDirectoryRights : Enum {
    public int value__;
    public static ActiveDirectoryRights Delete;
    public static ActiveDirectoryRights ReadControl;
    public static ActiveDirectoryRights WriteDacl;
    public static ActiveDirectoryRights WriteOwner;
    public static ActiveDirectoryRights Synchronize;
    public static ActiveDirectoryRights AccessSystemSecurity;
    public static ActiveDirectoryRights GenericRead;
    public static ActiveDirectoryRights GenericWrite;
    public static ActiveDirectoryRights GenericExecute;
    public static ActiveDirectoryRights GenericAll;
    public static ActiveDirectoryRights CreateChild;
    public static ActiveDirectoryRights DeleteChild;
    public static ActiveDirectoryRights ListChildren;
    public static ActiveDirectoryRights Self;
    public static ActiveDirectoryRights ReadProperty;
    public static ActiveDirectoryRights WriteProperty;
    public static ActiveDirectoryRights DeleteTree;
    public static ActiveDirectoryRights ListObject;
    public static ActiveDirectoryRights ExtendedRight;
}
internal class System.DirectoryServices.ActiveDirectoryRightsTranslator : object {
    internal static int AccessMaskFromRights(ActiveDirectoryRights adRights);
    internal static ActiveDirectoryRights RightsFromAccessMask(int accessMask);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectorySecurity : DirectoryObjectSecurity {
    private SecurityMasks _securityMaskUsedInRetrieval;
    public Type AccessRightType { get; }
    public Type AccessRuleType { get; }
    public Type AuditRuleType { get; }
    internal ActiveDirectorySecurity(Byte[] sdBinaryForm, SecurityMasks securityMask);
    public void AddAccessRule(ActiveDirectoryAccessRule rule);
    public void SetAccessRule(ActiveDirectoryAccessRule rule);
    public void ResetAccessRule(ActiveDirectoryAccessRule rule);
    public void RemoveAccess(IdentityReference identity, AccessControlType type);
    public bool RemoveAccessRule(ActiveDirectoryAccessRule rule);
    public void RemoveAccessRuleSpecific(ActiveDirectoryAccessRule rule);
    public virtual bool ModifyAccessRule(AccessControlModification modification, AccessRule rule, Boolean& modified);
    public virtual void PurgeAccessRules(IdentityReference identity);
    public void AddAuditRule(ActiveDirectoryAuditRule rule);
    public void SetAuditRule(ActiveDirectoryAuditRule rule);
    public void RemoveAudit(IdentityReference identity);
    public bool RemoveAuditRule(ActiveDirectoryAuditRule rule);
    public void RemoveAuditRuleSpecific(ActiveDirectoryAuditRule rule);
    public virtual bool ModifyAuditRule(AccessControlModification modification, AuditRule rule, Boolean& modified);
    public virtual void PurgeAuditRules(IdentityReference identity);
    public sealed virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public sealed virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type, Guid objectGuid, Guid inheritedObjectGuid);
    public sealed virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    public sealed virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags, Guid objectGuid, Guid inheritedObjectGuid);
    internal bool IsModified();
    private bool DaclRetrieved();
    private bool SaclRetrieved();
    public virtual Type get_AccessRightType();
    public virtual Type get_AccessRuleType();
    public virtual Type get_AuditRuleType();
}
public enum System.DirectoryServices.ActiveDirectorySecurityInheritance : Enum {
    public int value__;
    public static ActiveDirectorySecurityInheritance None;
    public static ActiveDirectorySecurityInheritance All;
    public static ActiveDirectorySecurityInheritance Descendents;
    public static ActiveDirectorySecurityInheritance SelfAndChildren;
    public static ActiveDirectorySecurityInheritance Children;
}
internal class System.DirectoryServices.Ads_Generic : ValueType {
    public int a;
    public int b;
    public int c;
    public int d;
}
internal class System.DirectoryServices.Ads_OctetString : ValueType {
    public int length;
    public IntPtr value;
}
internal class System.DirectoryServices.Ads_Pointer : ValueType {
    public IntPtr value;
}
internal enum System.DirectoryServices.AdsOptions : Enum {
    public int value__;
    public static AdsOptions ADS_OPTION_SERVERNAME;
    public static AdsOptions ADS_OPTION_REFERRALS;
    public static AdsOptions ADS_OPTION_PAGE_SIZE;
    public static AdsOptions ADS_OPTION_SECURITY_MASK;
    public static AdsOptions ADS_OPTION_MUTUAL_AUTH_STATUS;
    public static AdsOptions ADS_OPTION_QUOTA;
    public static AdsOptions ADS_OPTION_PASSWORD_PORTNUMBER;
    public static AdsOptions ADS_OPTION_PASSWORD_METHOD;
}
internal enum System.DirectoryServices.AdsPropertyOperation : Enum {
    public int value__;
    public static AdsPropertyOperation Clear;
    public static AdsPropertyOperation Update;
    public static AdsPropertyOperation Append;
    public static AdsPropertyOperation Delete;
}
internal class System.DirectoryServices.AdsSearchColumn : ValueType {
    public IntPtr pszAttrName;
    public int dwADsType;
    public AdsValue* pADsValues;
    public int dwNumValues;
    public IntPtr hReserved;
}
internal class System.DirectoryServices.AdsSearchPreferenceInfo : ValueType {
    public int dwSearchPref;
    internal int pad;
    public AdsValue vValue;
    public int dwStatus;
    internal int pad2;
}
internal enum System.DirectoryServices.AdsSearchPreferences : Enum {
    public int value__;
    public static AdsSearchPreferences ASYNCHRONOUS;
    public static AdsSearchPreferences DEREF_ALIASES;
    public static AdsSearchPreferences SIZE_LIMIT;
    public static AdsSearchPreferences TIME_LIMIT;
    public static AdsSearchPreferences ATTRIBTYPES_ONLY;
    public static AdsSearchPreferences SEARCH_SCOPE;
    public static AdsSearchPreferences TIMEOUT;
    public static AdsSearchPreferences PAGESIZE;
    public static AdsSearchPreferences PAGED_TIME_LIMIT;
    public static AdsSearchPreferences CHASE_REFERRALS;
    public static AdsSearchPreferences SORT_ON;
    public static AdsSearchPreferences CACHE_RESULTS;
    public static AdsSearchPreferences DIRSYNC;
    public static AdsSearchPreferences TOMBSTONE;
    public static AdsSearchPreferences VLV;
    public static AdsSearchPreferences ATTRIBUTE_QUERY;
    public static AdsSearchPreferences SECURITY_MASK;
    public static AdsSearchPreferences DIRSYNC_FLAG;
    public static AdsSearchPreferences EXTENDED_DN;
}
internal class System.DirectoryServices.AdsSortKey : ValueType {
    public IntPtr pszAttrType;
    public IntPtr pszReserved;
    public int fReverseOrder;
}
internal enum System.DirectoryServices.AdsType : Enum {
    public int value__;
    public static AdsType ADSTYPE_INVALID;
    public static AdsType ADSTYPE_DN_STRING;
    public static AdsType ADSTYPE_CASE_EXACT_STRING;
    public static AdsType ADSTYPE_CASE_IGNORE_STRING;
    public static AdsType ADSTYPE_PRINTABLE_STRING;
    public static AdsType ADSTYPE_NUMERIC_STRING;
    public static AdsType ADSTYPE_BOOLEAN;
    public static AdsType ADSTYPE_INTEGER;
    public static AdsType ADSTYPE_OCTET_STRING;
    public static AdsType ADSTYPE_UTC_TIME;
    public static AdsType ADSTYPE_LARGE_INTEGER;
    public static AdsType ADSTYPE_PROV_SPECIFIC;
    public static AdsType ADSTYPE_OBJECT_CLASS;
    public static AdsType ADSTYPE_CASEIGNORE_LIST;
    public static AdsType ADSTYPE_OCTET_LIST;
    public static AdsType ADSTYPE_PATH;
    public static AdsType ADSTYPE_POSTALADDRESS;
    public static AdsType ADSTYPE_TIMESTAMP;
    public static AdsType ADSTYPE_BACKLINK;
    public static AdsType ADSTYPE_TYPEDNAME;
    public static AdsType ADSTYPE_HOLD;
    public static AdsType ADSTYPE_NETADDRESS;
    public static AdsType ADSTYPE_REPLICAPOINTER;
    public static AdsType ADSTYPE_FAXNUMBER;
    public static AdsType ADSTYPE_EMAIL;
    public static AdsType ADSTYPE_NT_SECURITY_DESCRIPTOR;
    public static AdsType ADSTYPE_UNKNOWN;
    public static AdsType ADSTYPE_DN_WITH_BINARY;
    public static AdsType ADSTYPE_DN_WITH_STRING;
}
internal class System.DirectoryServices.AdsValue : ValueType {
    public int dwType;
    internal int pad;
    public Ads_Pointer pointer;
    public Ads_OctetString octetString;
    public Ads_Generic generic;
}
internal class System.DirectoryServices.AdsValueHelper : object {
    public AdsValue adsvalue;
    private GCHandle _pinnedHandle;
    public long LowInt64 { get; public set; }
    public AdsValueHelper(AdsValue adsvalue);
    public AdsValueHelper(object managedValue);
    public AdsValueHelper(object managedValue, AdsType adsType);
    public long get_LowInt64();
    public void set_LowInt64(long value);
    protected virtual override void Finalize();
    private AdsType GetAdsTypeForManagedType(Type type);
    public AdsValue GetStruct();
    private static ushort LowOfInt(int i);
    private static ushort HighOfInt(int i);
    public object GetValue();
    public object GetVlvValue();
    private void SetValue(object managedValue, AdsType adsType);
}
internal class System.DirectoryServices.AdsVLV : object {
    public int beforeCount;
    public int afterCount;
    public int offset;
    public int contentCount;
    public IntPtr target;
    public int contextIDlength;
    public IntPtr contextID;
}
[FlagsAttribute]
public enum System.DirectoryServices.AuthenticationTypes : Enum {
    public int value__;
    public static AuthenticationTypes None;
    public static AuthenticationTypes Secure;
    public static AuthenticationTypes Encryption;
    public static AuthenticationTypes SecureSocketsLayer;
    public static AuthenticationTypes ReadonlyServer;
    public static AuthenticationTypes Anonymous;
    public static AuthenticationTypes FastBind;
    public static AuthenticationTypes Signing;
    public static AuthenticationTypes Sealing;
    public static AuthenticationTypes Delegation;
    public static AuthenticationTypes ServerBind;
}
internal static class System.DirectoryServices.COMExceptionHelper : object {
    internal static Exception CreateFormattedComException(int hr);
    internal static Exception CreateFormattedComException(COMException e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.CreateChildAccessRule : ActiveDirectoryAccessRule {
    public CreateChildAccessRule(IdentityReference identity, AccessControlType type);
    public CreateChildAccessRule(IdentityReference identity, AccessControlType type, Guid childType);
    public CreateChildAccessRule(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType);
    public CreateChildAccessRule(IdentityReference identity, AccessControlType type, Guid childType, ActiveDirectorySecurityInheritance inheritanceType);
    public CreateChildAccessRule(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
    public CreateChildAccessRule(IdentityReference identity, AccessControlType type, Guid childType, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.DeleteChildAccessRule : ActiveDirectoryAccessRule {
    public DeleteChildAccessRule(IdentityReference identity, AccessControlType type);
    public DeleteChildAccessRule(IdentityReference identity, AccessControlType type, Guid childType);
    public DeleteChildAccessRule(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType);
    public DeleteChildAccessRule(IdentityReference identity, AccessControlType type, Guid childType, ActiveDirectorySecurityInheritance inheritanceType);
    public DeleteChildAccessRule(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
    public DeleteChildAccessRule(IdentityReference identity, AccessControlType type, Guid childType, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.DeleteTreeAccessRule : ActiveDirectoryAccessRule {
    public DeleteTreeAccessRule(IdentityReference identity, AccessControlType type);
    public DeleteTreeAccessRule(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType);
    public DeleteTreeAccessRule(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
}
public enum System.DirectoryServices.DereferenceAlias : Enum {
    public int value__;
    public static DereferenceAlias Never;
    public static DereferenceAlias InSearching;
    public static DereferenceAlias FindingBaseObject;
    public static DereferenceAlias Always;
}
internal class System.DirectoryServices.Design.DirectoryEntryConverter : TypeConverter {
    private static StandardValuesCollection s_values;
    private static Hashtable s_componentsCreated;
    private static DirectoryEntryConverter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    internal static DirectoryEntry GetFromCache(string path);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.DirectoryEntries : object {
    private DirectoryEntry _container;
    public SchemaNameCollection SchemaFilter { get; }
    internal DirectoryEntries(DirectoryEntry parent);
    public SchemaNameCollection get_SchemaFilter();
    private void CheckIsContainer();
    public DirectoryEntry Add(string name, string schemaClassName);
    public DirectoryEntry Find(string name);
    public DirectoryEntry Find(string name, string schemaClassName);
    public void Remove(DirectoryEntry entry);
    public sealed virtual IEnumerator GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TypeConverterAttribute("System.DirectoryServices.Design.DirectoryEntryConverter")]
public class System.DirectoryServices.DirectoryEntry : Component {
    private string _path;
    private IAds _adsObject;
    private bool _useCache;
    private bool _cacheFilled;
    internal bool propertiesAlreadyEnumerated;
    private bool _disposed;
    private AuthenticationTypes _authenticationType;
    private NetworkCredential _credentials;
    private DirectoryEntryConfiguration _options;
    private PropertyCollection _propertyCollection;
    internal bool allowMultipleChange;
    private bool _userNameIsNull;
    private bool _passwordIsNull;
    private bool _objectSecurityInitialized;
    private bool _objectSecurityModified;
    private ActiveDirectorySecurity _objectSecurity;
    private static string SecurityDescriptorProperty;
    [CompilerGeneratedAttribute]
private bool <JustCreated>k__BackingField;
    internal IAds AdsObject { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AuthenticationTypes AuthenticationType { get; public set; }
    [MemberNotNullWhenAttribute("True", "_adsObject")]
private bool Bound { get; }
    public DirectoryEntries Children { get; }
    internal IAdsContainer ContainerObject { get; }
    public Guid Guid { get; }
    public ActiveDirectorySecurity ObjectSecurity { get; public set; }
    internal bool IsContainer { get; }
    internal bool JustCreated { get; internal set; }
    public string Name { get; }
    public string NativeGuid { get; }
    public object NativeObject { get; }
    public DirectoryEntry Parent { get; }
    [NullableAttribute("2")]
[DefaultValueAttribute("")]
unknown string Password {public set; }
    [DefaultValueAttribute("")]
public string Path { get; public set; }
    public PropertyCollection Properties { get; }
    public string SchemaClassName { get; }
    public DirectoryEntry SchemaEntry { get; }
    [DefaultValueAttribute("True")]
public bool UsePropertyCache { get; public set; }
    [NullableAttribute("2")]
[DefaultValueAttribute("")]
public string Username { get; public set; }
    [NullableAttribute("2")]
public DirectoryEntryConfiguration Options { get; }
    [NullableContextAttribute("2")]
public DirectoryEntry(string path);
    [NullableContextAttribute("2")]
public DirectoryEntry(string path, string username, string password);
    [NullableContextAttribute("2")]
public DirectoryEntry(string path, string username, string password, AuthenticationTypes authenticationType);
    internal DirectoryEntry(string path, bool useCache, string username, string password, AuthenticationTypes authenticationType);
    public DirectoryEntry(object adsObject);
    internal DirectoryEntry(object adsObject, bool useCache, string username, string password, AuthenticationTypes authenticationType);
    internal DirectoryEntry(object adsObject, bool useCache, string username, string password, AuthenticationTypes authenticationType, bool AdsObjIsExternal);
    internal IAds get_AdsObject();
    public AuthenticationTypes get_AuthenticationType();
    public void set_AuthenticationType(AuthenticationTypes value);
    [MemberNotNullWhenAttribute("True", "_adsObject")]
private bool get_Bound();
    public DirectoryEntries get_Children();
    internal IAdsContainer get_ContainerObject();
    public Guid get_Guid();
    public ActiveDirectorySecurity get_ObjectSecurity();
    public void set_ObjectSecurity(ActiveDirectorySecurity value);
    internal bool get_IsContainer();
    [CompilerGeneratedAttribute]
internal bool get_JustCreated();
    [CompilerGeneratedAttribute]
internal void set_JustCreated(bool value);
    public string get_Name();
    public string get_NativeGuid();
    public object get_NativeObject();
    public DirectoryEntry get_Parent();
    [NullableContextAttribute("2")]
public void set_Password(string value);
    public string get_Path();
    public void set_Path(string value);
    public PropertyCollection get_Properties();
    public string get_SchemaClassName();
    public DirectoryEntry get_SchemaEntry();
    public bool get_UsePropertyCache();
    public void set_UsePropertyCache(bool value);
    [NullableContextAttribute("2")]
public string get_Username();
    [NullableContextAttribute("2")]
public void set_Username(string value);
    [NullableContextAttribute("2")]
public DirectoryEntryConfiguration get_Options();
    internal void InitADsObjectOptions();
    [MemberNotNullAttribute("_adsObject")]
private void Bind();
    internal void Bind(bool throwIfFail);
    internal DirectoryEntry CloneBrowsable();
    public void Close();
    public void CommitChanges();
    internal void CommitIfNotCaching();
    public DirectoryEntry CopyTo(DirectoryEntry newParent);
    public DirectoryEntry CopyTo(DirectoryEntry newParent, string newName);
    public void DeleteTree();
    protected virtual void Dispose(bool disposing);
    public static bool Exists(string path);
    [MemberNotNullAttribute("_adsObject")]
internal void FillCache(string propertyName);
    [NullableContextAttribute("2")]
public object Invoke(string methodName, Object[] args);
    public object InvokeGet(string propertyName);
    public void InvokeSet(string propertyName, Object[] args);
    public void MoveTo(DirectoryEntry newParent);
    public void MoveTo(DirectoryEntry newParent, string newName);
    [MemberNotNullAttribute("_adsObject")]
public void RefreshCache();
    public void RefreshCache(String[] propertyNames);
    [NullableContextAttribute("2")]
public void Rename(string newName);
    private void Unbind();
    internal string GetUsername();
    internal string GetPassword();
    private ActiveDirectorySecurity GetObjectSecurityFromCache();
    private void SetObjectSecurityInCache();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.DirectoryEntryConfiguration : object {
    private DirectoryEntry _entry;
    private static int ISC_RET_MUTUAL_AUTH;
    public ReferralChasingOption Referral { get; public set; }
    public SecurityMasks SecurityMasks { get; public set; }
    public int PageSize { get; public set; }
    public int PasswordPort { get; public set; }
    public PasswordEncodingMethod PasswordEncoding { get; public set; }
    internal DirectoryEntryConfiguration(DirectoryEntry entry);
    public ReferralChasingOption get_Referral();
    public void set_Referral(ReferralChasingOption value);
    public SecurityMasks get_SecurityMasks();
    public void set_SecurityMasks(SecurityMasks value);
    public int get_PageSize();
    public void set_PageSize(int value);
    public int get_PasswordPort();
    public void set_PasswordPort(int value);
    public PasswordEncodingMethod get_PasswordEncoding();
    public void set_PasswordEncoding(PasswordEncodingMethod value);
    public string GetCurrentServerName();
    public bool IsMutuallyAuthenticated();
    public void SetUserNameQueryQuota(string accountName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.DirectorySearcher : Component {
    private DirectoryEntry _searchRoot;
    private string _filter;
    private StringCollection _propertiesToLoad;
    private bool _disposed;
    private static TimeSpan s_minusOneSecond;
    private SearchScope _scope;
    private bool _scopeSpecified;
    private int _sizeLimit;
    private TimeSpan _serverTimeLimit;
    private TimeSpan _clientTimeout;
    private int _pageSize;
    private TimeSpan _serverPageTimeLimit;
    private ReferralChasingOption _referralChasing;
    private SortOption _sort;
    private bool _cacheResults;
    private bool _cacheResultsSpecified;
    private bool _rootEntryAllocated;
    private string _assertDefaultNamingContext;
    private string _attributeScopeQuery;
    private bool _attributeScopeQuerySpecified;
    private DereferenceAlias _derefAlias;
    private SecurityMasks _securityMask;
    private ExtendedDN _extendedDN;
    private DirectorySynchronization _sync;
    internal bool directorySynchronizationSpecified;
    private DirectoryVirtualListView _vlv;
    internal bool directoryVirtualListViewSpecified;
    internal SearchResultCollection searchResult;
    private static string defaultFilter;
    [CompilerGeneratedAttribute]
private bool <PropertyNamesOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Asynchronous>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Tombstone>k__BackingField;
    [DefaultValueAttribute("True")]
public bool CacheResults { get; public set; }
    public TimeSpan ClientTimeout { get; public set; }
    [DefaultValueAttribute("False")]
public bool PropertyNamesOnly { get; public set; }
    [DefaultValueAttribute("(objectClass=*)")]
public string Filter { get; public set; }
    [DefaultValueAttribute("0")]
public int PageSize { get; public set; }
    [NullableAttribute("1")]
[EditorAttribute("System.Windows.Forms.Design.StringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public StringCollection PropertiesToLoad { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ReferralChasingOption ReferralChasing { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SearchScope SearchScope { get; public set; }
    public TimeSpan ServerPageTimeLimit { get; public set; }
    public TimeSpan ServerTimeLimit { get; public set; }
    [DefaultValueAttribute("0")]
public int SizeLimit { get; public set; }
    [DefaultValueAttribute("")]
public DirectoryEntry SearchRoot { get; public set; }
    [NullableAttribute("1")]
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public SortOption Sort { get; public set; }
    [DefaultValueAttribute("False")]
public bool Asynchronous { get; public set; }
    [DefaultValueAttribute("False")]
public bool Tombstone { get; public set; }
    [NullableAttribute("1")]
[DefaultValueAttribute("")]
public string AttributeScopeQuery { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DereferenceAlias DerefAlias { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SecurityMasks SecurityMasks { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ExtendedDN ExtendedDN { get; public set; }
    [DefaultValueAttribute("")]
public DirectorySynchronization DirectorySynchronization { get; public set; }
    [DefaultValueAttribute("")]
public DirectoryVirtualListView VirtualListView { get; public set; }
    public DirectorySearcher(DirectoryEntry searchRoot);
    public DirectorySearcher(DirectoryEntry searchRoot, string filter);
    public DirectorySearcher(DirectoryEntry searchRoot, string filter, String[] propertiesToLoad);
    public DirectorySearcher(string filter);
    public DirectorySearcher(string filter, String[] propertiesToLoad);
    public DirectorySearcher(string filter, String[] propertiesToLoad, SearchScope scope);
    public DirectorySearcher(DirectoryEntry searchRoot, string filter, String[] propertiesToLoad, SearchScope scope);
    private static DirectorySearcher();
    protected virtual void Dispose(bool disposing);
    public bool get_CacheResults();
    public void set_CacheResults(bool value);
    public TimeSpan get_ClientTimeout();
    public void set_ClientTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_PropertyNamesOnly();
    [CompilerGeneratedAttribute]
public void set_PropertyNamesOnly(bool value);
    public string get_Filter();
    public void set_Filter(string value);
    public int get_PageSize();
    public void set_PageSize(int value);
    [NullableContextAttribute("1")]
public StringCollection get_PropertiesToLoad();
    public ReferralChasingOption get_ReferralChasing();
    public void set_ReferralChasing(ReferralChasingOption value);
    public SearchScope get_SearchScope();
    public void set_SearchScope(SearchScope value);
    public TimeSpan get_ServerPageTimeLimit();
    public void set_ServerPageTimeLimit(TimeSpan value);
    public TimeSpan get_ServerTimeLimit();
    public void set_ServerTimeLimit(TimeSpan value);
    public int get_SizeLimit();
    public void set_SizeLimit(int value);
    public DirectoryEntry get_SearchRoot();
    public void set_SearchRoot(DirectoryEntry value);
    [NullableContextAttribute("1")]
public SortOption get_Sort();
    [NullableContextAttribute("1")]
public void set_Sort(SortOption value);
    [CompilerGeneratedAttribute]
public bool get_Asynchronous();
    [CompilerGeneratedAttribute]
public void set_Asynchronous(bool value);
    [CompilerGeneratedAttribute]
public bool get_Tombstone();
    [CompilerGeneratedAttribute]
public void set_Tombstone(bool value);
    [NullableContextAttribute("1")]
public string get_AttributeScopeQuery();
    [NullableContextAttribute("1")]
public void set_AttributeScopeQuery(string value);
    public DereferenceAlias get_DerefAlias();
    public void set_DerefAlias(DereferenceAlias value);
    public SecurityMasks get_SecurityMasks();
    public void set_SecurityMasks(SecurityMasks value);
    public ExtendedDN get_ExtendedDN();
    public void set_ExtendedDN(ExtendedDN value);
    public DirectorySynchronization get_DirectorySynchronization();
    public void set_DirectorySynchronization(DirectorySynchronization value);
    public DirectoryVirtualListView get_VirtualListView();
    public void set_VirtualListView(DirectoryVirtualListView value);
    public SearchResult FindOne();
    [NullableContextAttribute("1")]
public SearchResultCollection FindAll();
    private SearchResultCollection FindAll(bool findMoreThanOne);
    private void SetSearchPreferences(IDirectorySearch adsSearch, bool findMoreThanOne);
    private static void DoSetSearchPrefs(IDirectorySearch adsSearch, AdsSearchPreferenceInfo[] prefs);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.DirectoryServices.DirectoryServicesCOMException : COMException {
    [CompilerGeneratedAttribute]
private int <ExtendedError>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtendedErrorMessage>k__BackingField;
    public int ExtendedError { get; }
    public string ExtendedErrorMessage { get; }
    public DirectoryServicesCOMException(string message);
    public DirectoryServicesCOMException(string message, Exception inner);
    [NullableContextAttribute("1")]
protected DirectoryServicesCOMException(SerializationInfo info, StreamingContext context);
    internal DirectoryServicesCOMException(string extendedMessage, int extendedError, COMException e);
    [CompilerGeneratedAttribute]
public int get_ExtendedError();
    [CompilerGeneratedAttribute]
public string get_ExtendedErrorMessage();
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ObsoleteAttribute("Code Access Security is not supported or honored by the runtime.")]
public class System.DirectoryServices.DirectoryServicesPermission : ResourcePermissionBase {
    [CompilerGeneratedAttribute]
private DirectoryServicesPermissionEntryCollection <PermissionEntries>k__BackingField;
    public DirectoryServicesPermissionEntryCollection PermissionEntries { get; }
    public DirectoryServicesPermission(DirectoryServicesPermissionEntry[] permissionAccessEntries);
    public DirectoryServicesPermission(PermissionState state);
    public DirectoryServicesPermission(DirectoryServicesPermissionAccess permissionAccess, string path);
    [CompilerGeneratedAttribute]
public DirectoryServicesPermissionEntryCollection get_PermissionEntries();
}
[FlagsAttribute]
public enum System.DirectoryServices.DirectoryServicesPermissionAccess : Enum {
    public int value__;
    public static DirectoryServicesPermissionAccess None;
    public static DirectoryServicesPermissionAccess Browse;
    public static DirectoryServicesPermissionAccess Write;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ObsoleteAttribute("Code Access Security is not supported or honored by the runtime.")]
[AttributeUsageAttribute("621")]
public class System.DirectoryServices.DirectoryServicesPermissionAttribute : CodeAccessSecurityAttribute {
    [CompilerGeneratedAttribute]
private DirectoryServicesPermissionAccess <PermissionAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public DirectoryServicesPermissionAccess PermissionAccess { get; public set; }
    public string Path { get; public set; }
    public DirectoryServicesPermissionAttribute(SecurityAction action);
    [CompilerGeneratedAttribute]
public DirectoryServicesPermissionAccess get_PermissionAccess();
    [CompilerGeneratedAttribute]
public void set_PermissionAccess(DirectoryServicesPermissionAccess value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    public virtual IPermission CreatePermission();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.DirectoryServicesPermissionEntry : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryServicesPermissionAccess <PermissionAccess>k__BackingField;
    public string Path { get; }
    public DirectoryServicesPermissionAccess PermissionAccess { get; }
    public DirectoryServicesPermissionEntry(DirectoryServicesPermissionAccess permissionAccess, string path);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public DirectoryServicesPermissionAccess get_PermissionAccess();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.DirectoryServicesPermissionEntryCollection : CollectionBase {
    [NullableAttribute("2")]
public DirectoryServicesPermissionEntry Item { get; public set; }
    [NullableContextAttribute("2")]
public DirectoryServicesPermissionEntry get_Item(int index);
    [NullableContextAttribute("2")]
public void set_Item(int index, DirectoryServicesPermissionEntry value);
    public int Add(DirectoryServicesPermissionEntry value);
    public void AddRange(DirectoryServicesPermissionEntryCollection value);
    public void AddRange(DirectoryServicesPermissionEntry[] value);
    public bool Contains(DirectoryServicesPermissionEntry value);
    public void CopyTo(DirectoryServicesPermissionEntry[] array, int index);
    public int IndexOf(DirectoryServicesPermissionEntry value);
    public void Insert(int index, DirectoryServicesPermissionEntry value);
    protected virtual void OnClear();
    [NullableContextAttribute("2")]
protected virtual void OnInsert(int index, object value);
    [NullableContextAttribute("2")]
protected virtual void OnRemove(int index, object value);
    [NullableContextAttribute("2")]
protected virtual void OnSet(int index, object oldValue, object newValue);
    [NullableContextAttribute("2")]
public void Remove(DirectoryServicesPermissionEntry value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.DirectorySynchronization : object {
    private DirectorySynchronizationOptions _option;
    private Byte[] _cookie;
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DirectorySynchronizationOptions Option { get; public set; }
    public DirectorySynchronization(DirectorySynchronizationOptions option);
    public DirectorySynchronization(DirectorySynchronization sync);
    public DirectorySynchronization(Byte[] cookie);
    public DirectorySynchronization(DirectorySynchronizationOptions option, Byte[] cookie);
    public DirectorySynchronizationOptions get_Option();
    public void set_Option(DirectorySynchronizationOptions value);
    [NullableContextAttribute("1")]
public Byte[] GetDirectorySynchronizationCookie();
    public void ResetDirectorySynchronizationCookie();
    public void ResetDirectorySynchronizationCookie(Byte[] cookie);
    [NullableContextAttribute("1")]
public DirectorySynchronization Copy();
}
[FlagsAttribute]
public enum System.DirectoryServices.DirectorySynchronizationOptions : Enum {
    public long value__;
    public static DirectorySynchronizationOptions None;
    public static DirectorySynchronizationOptions ObjectSecurity;
    public static DirectorySynchronizationOptions ParentsFirst;
    public static DirectorySynchronizationOptions PublicDataOnly;
    public static DirectorySynchronizationOptions IncrementalValues;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.DirectoryVirtualListView : object {
    private int _beforeCount;
    private int _afterCount;
    private int _offset;
    private string _target;
    private int _approximateTotal;
    private int _targetPercentage;
    [CompilerGeneratedAttribute]
private DirectoryVirtualListViewContext <DirectoryVirtualListViewContext>k__BackingField;
    [DefaultValueAttribute("0")]
public int BeforeCount { get; public set; }
    [DefaultValueAttribute("0")]
public int AfterCount { get; public set; }
    [DefaultValueAttribute("0")]
public int Offset { get; public set; }
    [DefaultValueAttribute("0")]
public int TargetPercentage { get; public set; }
    [NullableAttribute("1")]
[DefaultValueAttribute("")]
public string Target { get; public set; }
    [DefaultValueAttribute("0")]
public int ApproximateTotal { get; public set; }
    [DefaultValueAttribute("")]
public DirectoryVirtualListViewContext DirectoryVirtualListViewContext { get; public set; }
    public DirectoryVirtualListView(int afterCount);
    public DirectoryVirtualListView(int beforeCount, int afterCount, int offset);
    public DirectoryVirtualListView(int beforeCount, int afterCount, string target);
    public DirectoryVirtualListView(int beforeCount, int afterCount, int offset, DirectoryVirtualListViewContext context);
    public DirectoryVirtualListView(int beforeCount, int afterCount, string target, DirectoryVirtualListViewContext context);
    public int get_BeforeCount();
    public void set_BeforeCount(int value);
    public int get_AfterCount();
    public void set_AfterCount(int value);
    public int get_Offset();
    public void set_Offset(int value);
    public int get_TargetPercentage();
    public void set_TargetPercentage(int value);
    [NullableContextAttribute("1")]
public string get_Target();
    [NullableContextAttribute("1")]
public void set_Target(string value);
    public int get_ApproximateTotal();
    public void set_ApproximateTotal(int value);
    [CompilerGeneratedAttribute]
public DirectoryVirtualListViewContext get_DirectoryVirtualListViewContext();
    [CompilerGeneratedAttribute]
public void set_DirectoryVirtualListViewContext(DirectoryVirtualListViewContext value);
}
public class System.DirectoryServices.DirectoryVirtualListViewContext : object {
    internal Byte[] _context;
    internal DirectoryVirtualListViewContext(Byte[] context);
    [NullableContextAttribute("1")]
public DirectoryVirtualListViewContext Copy();
}
internal class System.DirectoryServices.DnWithBinary : object {
    public int dwLength;
    public IntPtr lpBinaryValue;
    public IntPtr pszDNString;
}
internal class System.DirectoryServices.DnWithString : object {
    public IntPtr pszStringValue;
    public IntPtr pszDNString;
}
public enum System.DirectoryServices.ExtendedDN : Enum {
    public int value__;
    public static ExtendedDN None;
    public static ExtendedDN HexString;
    public static ExtendedDN Standard;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ExtendedRightAccessRule : ActiveDirectoryAccessRule {
    public ExtendedRightAccessRule(IdentityReference identity, AccessControlType type);
    public ExtendedRightAccessRule(IdentityReference identity, AccessControlType type, Guid extendedRightType);
    public ExtendedRightAccessRule(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType);
    public ExtendedRightAccessRule(IdentityReference identity, AccessControlType type, Guid extendedRightType, ActiveDirectorySecurityInheritance inheritanceType);
    public ExtendedRightAccessRule(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
    public ExtendedRightAccessRule(IdentityReference identity, AccessControlType type, Guid extendedRightType, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ListChildrenAccessRule : ActiveDirectoryAccessRule {
    public ListChildrenAccessRule(IdentityReference identity, AccessControlType type);
    public ListChildrenAccessRule(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType);
    public ListChildrenAccessRule(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
}
internal static class System.DirectoryServices.NativeMethods : object {
}
public enum System.DirectoryServices.PasswordEncodingMethod : Enum {
    public int value__;
    public static PasswordEncodingMethod PasswordEncodingSsl;
    public static PasswordEncodingMethod PasswordEncodingClear;
}
public enum System.DirectoryServices.PropertyAccess : Enum {
    public int value__;
    public static PropertyAccess Read;
    public static PropertyAccess Write;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.PropertyAccessRule : ActiveDirectoryAccessRule {
    public PropertyAccessRule(IdentityReference identity, AccessControlType type, PropertyAccess access);
    public PropertyAccessRule(IdentityReference identity, AccessControlType type, PropertyAccess access, Guid propertyType);
    public PropertyAccessRule(IdentityReference identity, AccessControlType type, PropertyAccess access, ActiveDirectorySecurityInheritance inheritanceType);
    public PropertyAccessRule(IdentityReference identity, AccessControlType type, PropertyAccess access, Guid propertyType, ActiveDirectorySecurityInheritance inheritanceType);
    public PropertyAccessRule(IdentityReference identity, AccessControlType type, PropertyAccess access, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
    public PropertyAccessRule(IdentityReference identity, AccessControlType type, PropertyAccess access, Guid propertyType, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
}
internal class System.DirectoryServices.PropertyAccessTranslator : object {
    internal static int AccessMaskFromPropertyAccess(PropertyAccess access);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.PropertyCollection : object {
    private DirectoryEntry _entry;
    internal Hashtable valueTable;
    public PropertyValueCollection Item { get; }
    public int Count { get; }
    public ICollection PropertyNames { get; }
    public ICollection Values { get; }
    [NullableAttribute("2")]
private object System.Collections.IDictionary.Item { get; private set; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal PropertyCollection(DirectoryEntry entry);
    public PropertyValueCollection get_Item(string propertyName);
    public sealed virtual int get_Count();
    public ICollection get_PropertyNames();
    public sealed virtual ICollection get_Values();
    public bool Contains(string propertyName);
    public void CopyTo(PropertyValueCollection[] array, int index);
    public sealed virtual IDictionaryEnumerator GetEnumerator();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override void System.Collections.IDictionary.Clear();
    private sealed virtual override bool System.Collections.IDictionary.Contains(object value);
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.PropertySetAccessRule : ActiveDirectoryAccessRule {
    public PropertySetAccessRule(IdentityReference identity, AccessControlType type, PropertyAccess access, Guid propertySetType);
    public PropertySetAccessRule(IdentityReference identity, AccessControlType type, PropertyAccess access, Guid propertySetType, ActiveDirectorySecurityInheritance inheritanceType);
    public PropertySetAccessRule(IdentityReference identity, AccessControlType type, PropertyAccess access, Guid propertySetType, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.PropertyValueCollection : CollectionBase {
    private DirectoryEntry _entry;
    private UpdateType _updateType;
    private ArrayList _changeList;
    private bool _allowMultipleChange;
    private bool _needNewBehavior;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public object Item { get; public set; }
    [NullableAttribute("1")]
public string PropertyName { get; }
    public object Value { get; public set; }
    internal PropertyValueCollection(DirectoryEntry entry, string propertyName);
    public object get_Item(int index);
    public void set_Item(int index, object value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_PropertyName();
    public object get_Value();
    public void set_Value(object value);
    public int Add(object value);
    public void AddRange(Object[] value);
    [NullableContextAttribute("1")]
public void AddRange(PropertyValueCollection value);
    public bool Contains(object value);
    public void CopyTo(Object[] array, int index);
    public int IndexOf(object value);
    public void Insert(int index, object value);
    private void PopulateList();
    public void Remove(object value);
    protected virtual void OnClearComplete();
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
}
public enum System.DirectoryServices.ReferralChasingOption : Enum {
    public int value__;
    public static ReferralChasingOption None;
    public static ReferralChasingOption Subordinate;
    public static ReferralChasingOption External;
    public static ReferralChasingOption All;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ResultPropertyCollection : DictionaryBase {
    public ResultPropertyValueCollection Item { get; }
    public ICollection PropertyNames { get; }
    public ICollection Values { get; }
    public ResultPropertyValueCollection get_Item(string name);
    public ICollection get_PropertyNames();
    public ICollection get_Values();
    internal void Add(string name, ResultPropertyValueCollection value);
    public bool Contains(string propertyName);
    public void CopyTo(ResultPropertyValueCollection[] array, int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ResultPropertyValueCollection : ReadOnlyCollectionBase {
    public object Item { get; }
    internal ResultPropertyValueCollection(Object[] values);
    public object get_Item(int index);
    [NullableContextAttribute("2")]
public bool Contains(object value);
    [NullableContextAttribute("2")]
public int IndexOf(object value);
    public void CopyTo(Object[] values, int index);
}
internal static class System.DirectoryServices.SafeNativeMethods : object {
    public static int FORMAT_MESSAGE_IGNORE_INSERTS;
    public static int FORMAT_MESSAGE_FROM_SYSTEM;
    public static int FORMAT_MESSAGE_ARGUMENT_ARRAY;
    public static int ERROR_MORE_DATA;
    public static int ERROR_SUCCESS;
    [LibraryImportAttribute("oleaut32.dll")]
public static void VariantInit(IntPtr pObject);
    [LibraryImportAttribute("activeds.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
public static bool FreeADsMem(IntPtr pVoid);
    [LibraryImportAttribute("activeds.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
public static int ADsGetLastError(Int32& error, Char* errorBuffer, int errorBufferLength, Char* nameBuffer, int nameBufferLength);
    [LibraryImportAttribute("activeds.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "7.0.8.6910")]
[SkipLocalsInitAttribute]
public static int ADsSetLastError(int error, string errorString, string provider);
    [CompilerGeneratedAttribute]
internal static int <FreeADsMem>g____PInvoke|1_0(IntPtr pVoid);
    [CompilerGeneratedAttribute]
internal static int <ADsGetLastError>g____PInvoke|7_0(Int32* error, Char* errorBuffer, int errorBufferLength, Char* nameBuffer, int nameBufferLength);
    [CompilerGeneratedAttribute]
internal static int <ADsSetLastError>g____PInvoke|8_0(int error, UInt16* errorString, UInt16* provider);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.SchemaNameCollection : object {
    private VariantPropGetter _propGetter;
    private VariantPropSetter _propSetter;
    public string Item { get; public set; }
    public int Count { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    [NullableAttribute("1")]
private object System.Collections.ICollection.SyncRoot { get; }
    private object System.Collections.IList.Item { get; private set; }
    internal SchemaNameCollection(VariantPropGetter propGetter, VariantPropSetter propSetter);
    public string get_Item(int index);
    public void set_Item(int index, string value);
    public sealed virtual int get_Count();
    public int Add(string value);
    public void AddRange(String[] value);
    [NullableContextAttribute("1")]
public void AddRange(SchemaNameCollection value);
    public sealed virtual void Clear();
    public bool Contains(string value);
    public void CopyTo(String[] stringArray, int index);
    [NullableContextAttribute("1")]
public sealed virtual IEnumerator GetEnumerator();
    private Object[] GetValue();
    public int IndexOf(string value);
    public void Insert(int index, string value);
    public void Remove(string value);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.SearchResult : object {
    private NetworkCredential _parentCredentials;
    private AuthenticationTypes _parentAuthenticationType;
    [CompilerGeneratedAttribute]
private ResultPropertyCollection <Properties>k__BackingField;
    public string Path { get; }
    public ResultPropertyCollection Properties { get; }
    internal SearchResult(NetworkCredential parentCredentials, AuthenticationTypes parentAuthenticationType);
    public DirectoryEntry GetDirectoryEntry();
    public string get_Path();
    [CompilerGeneratedAttribute]
public ResultPropertyCollection get_Properties();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.SearchResultCollection : MarshalByRefObject {
    private IntPtr _handle;
    private IDirectorySearch _searchObject;
    private ArrayList _innerList;
    private bool _disposed;
    private DirectoryEntry _rootEntry;
    private static string ADS_DIRSYNC_COOKIE;
    private IntPtr _adsDirsynCookieName;
    private static string ADS_VLV_RESPONSE;
    private IntPtr _adsVLVResponseName;
    internal DirectorySearcher srch;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PropertiesLoaded>k__BackingField;
    public SearchResult Item { get; }
    public int Count { get; }
    [NullableAttribute("2")]
internal string Filter { get; }
    private ArrayList InnerList { get; }
    internal IDirectorySearch SearchObject { get; }
    public IntPtr Handle { get; }
    public String[] PropertiesLoaded { get; }
    internal Byte[] DirsyncCookie { get; }
    internal DirectoryVirtualListView VLVResponse { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal SearchResultCollection(DirectoryEntry root, IntPtr searchHandle, String[] propertiesLoaded, DirectorySearcher srch);
    public SearchResult get_Item(int index);
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
internal string get_Filter();
    private ArrayList get_InnerList();
    internal IDirectorySearch get_SearchObject();
    public IntPtr get_Handle();
    [CompilerGeneratedAttribute]
public String[] get_PropertiesLoaded();
    internal Byte[] get_DirsyncCookie();
    internal DirectoryVirtualListView get_VLVResponse();
    private Byte[] RetrieveDirectorySynchronizationCookie();
    private DirectoryVirtualListView RetrieveVLVResponse();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public sealed virtual IEnumerator GetEnumerator();
    public bool Contains(SearchResult result);
    public void CopyTo(SearchResult[] results, int index);
    public int IndexOf(SearchResult result);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
}
public enum System.DirectoryServices.SearchScope : Enum {
    public int value__;
    public static SearchScope Base;
    public static SearchScope OneLevel;
    public static SearchScope Subtree;
}
[FlagsAttribute]
public enum System.DirectoryServices.SecurityMasks : Enum {
    public int value__;
    public static SecurityMasks None;
    public static SecurityMasks Owner;
    public static SecurityMasks Group;
    public static SecurityMasks Dacl;
    public static SecurityMasks Sacl;
}
public enum System.DirectoryServices.SortDirection : Enum {
    public int value__;
    public static SortDirection Ascending;
    public static SortDirection Descending;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public class System.DirectoryServices.SortOption : object {
    private string _propertyName;
    private SortDirection _sortDirection;
    [DefaultValueAttribute("")]
public string PropertyName { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SortDirection Direction { get; public set; }
    [NullableContextAttribute("1")]
public SortOption(string propertyName, SortDirection direction);
    public string get_PropertyName();
    public void set_PropertyName(string value);
    public SortDirection get_Direction();
    public void set_Direction(SortDirection value);
}
internal class System.DirectoryServices.SystemTime : ValueType {
    public ushort wYear;
    public ushort wMonth;
    public ushort wDayOfWeek;
    public ushort wDay;
    public ushort wHour;
    public ushort wMinute;
    public ushort wSecond;
    public ushort wMilliseconds;
}
internal static class System.DirectoryServices.UnsafeNativeMethods : object {
    internal static int S_ADS_NOMORE_ROWS;
    internal static int INVALID_FILTER;
    internal static int SIZE_LIMIT_EXCEEDED;
    public static int ADsOpenObject(string path, string userName, string password, int flags, Guid& iid, Object& ppObject);
}
internal class System.DirectoryServices.Variant : ValueType {
    public ushort varType;
    public ushort reserved1;
    public ushort reserved2;
    public ushort reserved3;
    public short boolvalue;
    public IntPtr ptr1;
    public IntPtr ptr2;
}
internal static class System.Obsoletions : object {
    internal static string SharedUrlFormat;
    internal static string SystemTextEncodingUTF7Message;
    internal static string SystemTextEncodingUTF7DiagId;
    internal static string PrincipalPermissionAttributeMessage;
    internal static string PrincipalPermissionAttributeDiagId;
    internal static string CodeAccessSecurityMessage;
    internal static string CodeAccessSecurityDiagId;
    internal static string ConstrainedExecutionRegionMessage;
    internal static string ConstrainedExecutionRegionDiagId;
    internal static string GlobalAssemblyCacheMessage;
    internal static string GlobalAssemblyCacheDiagId;
    internal static string ThreadAbortMessage;
    internal static string ThreadResetAbortMessage;
    internal static string ThreadAbortDiagId;
    internal static string DefaultCryptoAlgorithmsMessage;
    internal static string DefaultCryptoAlgorithmsDiagId;
    internal static string CreatePdbGeneratorMessage;
    internal static string CreatePdbGeneratorDiagId;
    internal static string AuthenticationManagerMessage;
    internal static string AuthenticationManagerDiagId;
    internal static string RemotingApisMessage;
    internal static string RemotingApisDiagId;
    internal static string BinaryFormatterMessage;
    internal static string BinaryFormatterDiagId;
    internal static string CodeBaseMessage;
    internal static string CodeBaseDiagId;
    internal static string EscapeUriStringMessage;
    internal static string EscapeUriStringDiagId;
    internal static string WebRequestMessage;
    internal static string WebRequestDiagId;
    internal static string DisablePrivateReflectionAttributeMessage;
    internal static string DisablePrivateReflectionAttributeDiagId;
    internal static string GetContextInfoMessage;
    internal static string GetContextInfoDiagId;
    internal static string StrongNameKeyPairMessage;
    internal static string StrongNameKeyPairDiagId;
    internal static string ReflectionOnlyLoadingMessage;
    internal static string ReflectionOnlyLoadingDiagId;
    internal static string RuntimeEnvironmentMessage;
    internal static string RuntimeEnvironmentDiagId;
    internal static string JsonSerializerOptionsIgnoreNullValuesMessage;
    internal static string JsonSerializerOptionsIgnoreNullValuesDiagId;
    internal static string DerivedCryptographicTypesMessage;
    internal static string DerivedCryptographicTypesDiagId;
    internal static string RijndaelMessage;
    internal static string RijndaelDiagId;
    internal static string RNGCryptoServiceProviderMessage;
    internal static string RNGCryptoServiceProviderDiagId;
    internal static string AppDomainCreateUnloadMessage;
    internal static string AppDomainCreateUnloadDiagId;
    internal static string SuppressIldasmAttributeMessage;
    internal static string SuppressIldasmAttributeDiagId;
    internal static string X509CertificateImmutableMessage;
    internal static string X509CertificateImmutableDiagId;
    internal static string PublicKeyPropertyMessage;
    internal static string PublicKeyPropertyDiagId;
    internal static string X509CertificatePrivateKeyMessage;
    internal static string X509CertificatePrivateKeyDiagId;
    internal static string ProduceLegacyHmacValuesMessage;
    internal static string ProduceLegacyHmacValuesDiagId;
    internal static string UseManagedSha1Message;
    internal static string UseManagedSha1DiagId;
    internal static string CryptoConfigEncodeOIDMessage;
    internal static string CryptoConfigEncodeOIDDiagId;
    internal static string CorruptedStateRecoveryMessage;
    internal static string CorruptedStateRecoveryDiagId;
    internal static string Rfc2898CryptDeriveKeyMessage;
    internal static string Rfc2898CryptDeriveKeyDiagId;
    internal static string CmsSignerCspParamsCtorMessage;
    internal static string CmsSignerCspParamsCtorDiagId;
    internal static string SignerInfoCounterSigMessage;
    internal static string SignerInfoCounterSigDiagId;
    internal static string RegexCompileToAssemblyMessage;
    internal static string RegexCompileToAssemblyDiagId;
    internal static string AssemblyNameMembersMessage;
    internal static string AssemblyNameMembersDiagId;
    internal static string SystemDataSerializationFormatBinaryMessage;
    internal static string SystemDataSerializationFormatBinaryDiagId;
    internal static string TlsVersion10and11Message;
    internal static string TlsVersion10and11DiagId;
    internal static string EncryptionPolicyMessage;
    internal static string EncryptionPolicyDiagId;
    internal static string Rfc2898OutdatedCtorMessage;
    internal static string Rfc2898OutdatedCtorDiagId;
    internal static string EccXmlExportImportMessage;
    internal static string EccXmlExportImportDiagId;
    internal static string EcDhPublicKeyBlobMessage;
    internal static string EcDhPublicKeyBlobDiagId;
    internal static string AssemblyNameCodeBaseMessage;
    internal static string AssemblyNameCodeBaseDiagId;
    internal static string CryptoStringFactoryMessage;
    internal static string CryptoStringFactoryDiagId;
    internal static string ControlledExecutionRunMessage;
    internal static string ControlledExecutionRunDiagId;
    internal static string XmlSecureResolverMessage;
    internal static string XmlSecureResolverDiagId;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string DSDoesNotImplementIADs { get; }
    internal static string DSNoObject { get; }
    internal static string DSInvalidPath { get; }
    internal static string DSNotAContainer { get; }
    internal static string DSCannotDelete { get; }
    internal static string DSNoCurrentChild { get; }
    internal static string DSCannotCount { get; }
    internal static string DSCannotEmunerate { get; }
    internal static string DSNoCurrentProperty { get; }
    internal static string DSNoCurrentValue { get; }
    internal static string DSBadPageSize { get; }
    internal static string DSBadSizeLimit { get; }
    internal static string DSSearchUnsupported { get; }
    internal static string DSNoCurrentEntry { get; }
    internal static string DSInvalidSearchFilter { get; }
    internal static string DSConvertFailed { get; }
    internal static string DSConvertTypeInvalid { get; }
    internal static string DSAdsvalueTypeNYI { get; }
    internal static string DSAdsiNotInstalled { get; }
    internal static string DSNotSet { get; }
    internal static string DSEnumerator { get; }
    internal static string DSPropertySetSupported { get; }
    internal static string DSAddNotSupported { get; }
    internal static string DSClearNotSupported { get; }
    internal static string DSRemoveNotSupported { get; }
    internal static string DSSearchPreferencesNotAccepted { get; }
    internal static string DSBadBeforeCount { get; }
    internal static string DSBadAfterCount { get; }
    internal static string DSBadOffset { get; }
    internal static string DSBadTargetPercentage { get; }
    internal static string DSBadApproximateTotal { get; }
    internal static string DSBadPageSizeDirsync { get; }
    internal static string DSBadCacheResultsVLV { get; }
    internal static string DSBadASQSearchScope { get; }
    internal static string DSPropertyValueSupportOneOperation { get; }
    internal static string DSUnknownFailure { get; }
    internal static string DSNotSupportOnClient { get; }
    internal static string DSNotSupportOnDC { get; }
    internal static string DirectoryContextNeedHost { get; }
    internal static string DSSyncAllFailure { get; }
    internal static string UnknownTransport { get; }
    internal static string NotSupportTransportSMTP { get; }
    internal static string CannotDelete { get; }
    internal static string CannotGetObject { get; }
    internal static string DSNotFound { get; }
    internal static string TransportNotFound { get; }
    internal static string SiteNotExist { get; }
    internal static string SiteNotCommitted { get; }
    internal static string NoCurrentSite { get; }
    internal static string SubnetNotCommitted { get; }
    internal static string SiteLinkNotCommitted { get; }
    internal static string ConnectionNotCommitted { get; }
    internal static string AlreadyExistingForestTrust { get; }
    internal static string AlreadyExistingDomainTrust { get; }
    internal static string NotFoundInCollection { get; }
    internal static string AlreadyExistingInCollection { get; }
    internal static string NTDSSiteSetting { get; }
    internal static string NotWithinSite { get; }
    internal static string InvalidTime { get; }
    internal static string UnableToRetrieveDomainInfo { get; }
    internal static string UnableToOpenToken { get; }
    internal static string UnableToRetrieveTokenInfo { get; }
    internal static string UnableToRetrievePolicy { get; }
    internal static string UpdateAvailableRIDPoolOverflowFailure { get; }
    internal static string EmptyStringParameter { get; }
    internal static string TargetShouldBeADAMServer { get; }
    internal static string TargetShouldBeDC { get; }
    internal static string TargetShouldBeAppNCDnsName { get; }
    internal static string TargetShouldBeServerORForest { get; }
    internal static string TargetShouldBeServerORDomain { get; }
    internal static string TargetShouldBeDomain { get; }
    internal static string TargetShouldBeForest { get; }
    internal static string TargetShouldBeConfigSet { get; }
    internal static string TargetShouldBeServerORConfigSet { get; }
    internal static string TargetShouldBeGC { get; }
    internal static string TargetShouldBeServer { get; }
    internal static string NotADOrADAM { get; }
    internal static string ServerNotAReplica { get; }
    internal static string AppNCNotFound { get; }
    internal static string ReplicaNotFound { get; }
    internal static string GCNotFoundInForest { get; }
    internal static string DCNotFoundInDomain { get; }
    internal static string ADAMInstanceNotFoundInConfigSet { get; }
    internal static string DCNotFound { get; }
    internal static string GCNotFound { get; }
    internal static string AINotFound { get; }
    internal static string ServerNotFound { get; }
    internal static string DomainNotFound { get; }
    internal static string ForestNotFound { get; }
    internal static string ConfigSetNotFound { get; }
    internal static string NDNCNotFound { get; }
    internal static string PropertyNotFoundOnObject { get; }
    internal static string PropertyNotFound { get; }
    internal static string ADAMInstanceNotFound { get; }
    internal static string CannotPerformOperationOnUncommittedObject { get; }
    internal static string InvalidServerNameFormat { get; }
    internal static string NoObjectClassForADPartition { get; }
    internal static string InvalidDNFormat { get; }
    internal static string ApplicationPartitionTypeUnknown { get; }
    internal static string UnknownSyntax { get; }
    internal static string InvalidMode { get; }
    internal static string NoW2K3DCs { get; }
    internal static string DCInfoNotFound { get; }
    internal static string NoW2K3DCsInForest { get; }
    internal static string SchemaObjectNotCommitted { get; }
    internal static string InvalidFlags { get; }
    internal static string CannotPerformOnGCObject { get; }
    internal static string ValueCannotBeModified { get; }
    internal static string ServerShouldBeW2K3 { get; }
    internal static string LinkedPropertyNotFound { get; }
    internal static string GCDisabled { get; }
    internal static string PropertyInvalidForADAM { get; }
    internal static string OperationInvalidForADAM { get; }
    internal static string ContextNotAssociatedWithDomain { get; }
    internal static string ComputerNotJoinedToDomain { get; }
    internal static string NoHostName { get; }
    internal static string NoHostNameOrPortNumber { get; }
    internal static string Name { get; }
    internal static string OneLevelPartitionNotSupported { get; }
    internal static string SiteNameNotFound { get; }
    internal static string SiteObjectNameNotFound { get; }
    internal static string ComputerObjectNameNotFound { get; }
    internal static string ServerObjectNameNotFound { get; }
    internal static string NtdsaObjectNameNotFound { get; }
    internal static string NtdsaObjectGuidNotFound { get; }
    internal static string OnlyDomainOrForest { get; }
    internal static string ServerShouldBeDC { get; }
    internal static string ServerShouldBeAI { get; }
    internal static string CannotModifySacl { get; }
    internal static string CannotModifyDacl { get; }
    internal static string ForestTrustCollision { get; }
    internal static string ForestTrustDoesNotExist { get; }
    internal static string DomainTrustDoesNotExist { get; }
    internal static string WrongForestTrust { get; }
    internal static string WrongTrustDirection { get; }
    internal static string NT4NotSupported { get; }
    internal static string KerberosNotSupported { get; }
    internal static string DSPropertyListUnsupported { get; }
    internal static string DSMultipleSDNotSupported { get; }
    internal static string DSSDNoValues { get; }
    internal static string ConnectionSourcServerShouldBeDC { get; }
    internal static string ConnectionSourcServerShouldBeADAM { get; }
    internal static string ConnectionSourcServerSameForest { get; }
    internal static string ConnectionSourcServerSameConfigSet { get; }
    internal static string TrustVerificationNotSupport { get; }
    internal static string OnlyAllowSingleDimension { get; }
    internal static string LessThanZero { get; }
    internal static string DestinationArrayNotLargeEnough { get; }
    internal static string NoNegativeTime { get; }
    internal static string ReplicationIntervalExceedMax { get; }
    internal static string ReplicationIntervalInMinutes { get; }
    internal static string TimespanExceedMax { get; }
    internal static string DirectoryServices_PlatformNotSupported { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_DSDoesNotImplementIADs();
    internal static string get_DSNoObject();
    internal static string get_DSInvalidPath();
    internal static string get_DSNotAContainer();
    internal static string get_DSCannotDelete();
    internal static string get_DSNoCurrentChild();
    internal static string get_DSCannotCount();
    internal static string get_DSCannotEmunerate();
    internal static string get_DSNoCurrentProperty();
    internal static string get_DSNoCurrentValue();
    internal static string get_DSBadPageSize();
    internal static string get_DSBadSizeLimit();
    internal static string get_DSSearchUnsupported();
    internal static string get_DSNoCurrentEntry();
    internal static string get_DSInvalidSearchFilter();
    internal static string get_DSConvertFailed();
    internal static string get_DSConvertTypeInvalid();
    internal static string get_DSAdsvalueTypeNYI();
    internal static string get_DSAdsiNotInstalled();
    internal static string get_DSNotSet();
    internal static string get_DSEnumerator();
    internal static string get_DSPropertySetSupported();
    internal static string get_DSAddNotSupported();
    internal static string get_DSClearNotSupported();
    internal static string get_DSRemoveNotSupported();
    internal static string get_DSSearchPreferencesNotAccepted();
    internal static string get_DSBadBeforeCount();
    internal static string get_DSBadAfterCount();
    internal static string get_DSBadOffset();
    internal static string get_DSBadTargetPercentage();
    internal static string get_DSBadApproximateTotal();
    internal static string get_DSBadPageSizeDirsync();
    internal static string get_DSBadCacheResultsVLV();
    internal static string get_DSBadASQSearchScope();
    internal static string get_DSPropertyValueSupportOneOperation();
    internal static string get_DSUnknownFailure();
    internal static string get_DSNotSupportOnClient();
    internal static string get_DSNotSupportOnDC();
    internal static string get_DirectoryContextNeedHost();
    internal static string get_DSSyncAllFailure();
    internal static string get_UnknownTransport();
    internal static string get_NotSupportTransportSMTP();
    internal static string get_CannotDelete();
    internal static string get_CannotGetObject();
    internal static string get_DSNotFound();
    internal static string get_TransportNotFound();
    internal static string get_SiteNotExist();
    internal static string get_SiteNotCommitted();
    internal static string get_NoCurrentSite();
    internal static string get_SubnetNotCommitted();
    internal static string get_SiteLinkNotCommitted();
    internal static string get_ConnectionNotCommitted();
    internal static string get_AlreadyExistingForestTrust();
    internal static string get_AlreadyExistingDomainTrust();
    internal static string get_NotFoundInCollection();
    internal static string get_AlreadyExistingInCollection();
    internal static string get_NTDSSiteSetting();
    internal static string get_NotWithinSite();
    internal static string get_InvalidTime();
    internal static string get_UnableToRetrieveDomainInfo();
    internal static string get_UnableToOpenToken();
    internal static string get_UnableToRetrieveTokenInfo();
    internal static string get_UnableToRetrievePolicy();
    internal static string get_UpdateAvailableRIDPoolOverflowFailure();
    internal static string get_EmptyStringParameter();
    internal static string get_TargetShouldBeADAMServer();
    internal static string get_TargetShouldBeDC();
    internal static string get_TargetShouldBeAppNCDnsName();
    internal static string get_TargetShouldBeServerORForest();
    internal static string get_TargetShouldBeServerORDomain();
    internal static string get_TargetShouldBeDomain();
    internal static string get_TargetShouldBeForest();
    internal static string get_TargetShouldBeConfigSet();
    internal static string get_TargetShouldBeServerORConfigSet();
    internal static string get_TargetShouldBeGC();
    internal static string get_TargetShouldBeServer();
    internal static string get_NotADOrADAM();
    internal static string get_ServerNotAReplica();
    internal static string get_AppNCNotFound();
    internal static string get_ReplicaNotFound();
    internal static string get_GCNotFoundInForest();
    internal static string get_DCNotFoundInDomain();
    internal static string get_ADAMInstanceNotFoundInConfigSet();
    internal static string get_DCNotFound();
    internal static string get_GCNotFound();
    internal static string get_AINotFound();
    internal static string get_ServerNotFound();
    internal static string get_DomainNotFound();
    internal static string get_ForestNotFound();
    internal static string get_ConfigSetNotFound();
    internal static string get_NDNCNotFound();
    internal static string get_PropertyNotFoundOnObject();
    internal static string get_PropertyNotFound();
    internal static string get_ADAMInstanceNotFound();
    internal static string get_CannotPerformOperationOnUncommittedObject();
    internal static string get_InvalidServerNameFormat();
    internal static string get_NoObjectClassForADPartition();
    internal static string get_InvalidDNFormat();
    internal static string get_ApplicationPartitionTypeUnknown();
    internal static string get_UnknownSyntax();
    internal static string get_InvalidMode();
    internal static string get_NoW2K3DCs();
    internal static string get_DCInfoNotFound();
    internal static string get_NoW2K3DCsInForest();
    internal static string get_SchemaObjectNotCommitted();
    internal static string get_InvalidFlags();
    internal static string get_CannotPerformOnGCObject();
    internal static string get_ValueCannotBeModified();
    internal static string get_ServerShouldBeW2K3();
    internal static string get_LinkedPropertyNotFound();
    internal static string get_GCDisabled();
    internal static string get_PropertyInvalidForADAM();
    internal static string get_OperationInvalidForADAM();
    internal static string get_ContextNotAssociatedWithDomain();
    internal static string get_ComputerNotJoinedToDomain();
    internal static string get_NoHostName();
    internal static string get_NoHostNameOrPortNumber();
    internal static string get_Name();
    internal static string get_OneLevelPartitionNotSupported();
    internal static string get_SiteNameNotFound();
    internal static string get_SiteObjectNameNotFound();
    internal static string get_ComputerObjectNameNotFound();
    internal static string get_ServerObjectNameNotFound();
    internal static string get_NtdsaObjectNameNotFound();
    internal static string get_NtdsaObjectGuidNotFound();
    internal static string get_OnlyDomainOrForest();
    internal static string get_ServerShouldBeDC();
    internal static string get_ServerShouldBeAI();
    internal static string get_CannotModifySacl();
    internal static string get_CannotModifyDacl();
    internal static string get_ForestTrustCollision();
    internal static string get_ForestTrustDoesNotExist();
    internal static string get_DomainTrustDoesNotExist();
    internal static string get_WrongForestTrust();
    internal static string get_WrongTrustDirection();
    internal static string get_NT4NotSupported();
    internal static string get_KerberosNotSupported();
    internal static string get_DSPropertyListUnsupported();
    internal static string get_DSMultipleSDNotSupported();
    internal static string get_DSSDNoValues();
    internal static string get_ConnectionSourcServerShouldBeDC();
    internal static string get_ConnectionSourcServerShouldBeADAM();
    internal static string get_ConnectionSourcServerSameForest();
    internal static string get_ConnectionSourcServerSameConfigSet();
    internal static string get_TrustVerificationNotSupport();
    internal static string get_OnlyAllowSingleDimension();
    internal static string get_LessThanZero();
    internal static string get_DestinationArrayNotLargeEnough();
    internal static string get_NoNegativeTime();
    internal static string get_ReplicationIntervalExceedMax();
    internal static string get_ReplicationIntervalInMinutes();
    internal static string get_TimespanExceedMax();
    internal static string get_DirectoryServices_PlatformNotSupported();
}
