internal static class FxResources.System.Windows.Extensions.SR : object {
}
internal static class Interop : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.Win32.SafeHandles.SafeCertContextHandle : SafeCrypt32Handle`1<SafeCertContextHandle> {
    private SafeCertContextHandle _parent;
    public CERT_CONTEXT* CertContext { get; }
    public bool HasPersistedPrivateKey { get; }
    public bool HasEphemeralPrivateKey { get; }
    public bool ContainsPrivateKey { get; }
    public SafeCertContextHandle(SafeCertContextHandle parent);
    protected virtual bool ReleaseHandle();
    public CERT_CONTEXT* get_CertContext();
    public CERT_CONTEXT* Disconnect();
    public bool get_HasPersistedPrivateKey();
    public bool get_HasEphemeralPrivateKey();
    public bool get_ContainsPrivateKey();
    public SafeCertContextHandle Duplicate();
    private bool CertHasProperty(CertContextPropId propertyId);
}
internal class Microsoft.Win32.SafeHandles.SafeCertStoreHandle : SafeCrypt32Handle`1<SafeCertStoreHandle> {
    protected sealed virtual bool ReleaseHandle();
}
internal abstract class Microsoft.Win32.SafeHandles.SafeCrypt32Handle`1 : SafeHandle {
    public bool IsInvalid { get; }
    public static T InvalidHandle { get; }
    public sealed virtual bool get_IsInvalid();
    public static T get_InvalidHandle();
    protected virtual void Dispose(bool disposing);
}
internal static class Microsoft.Win32.SafeHandles.SafeHandleCache`1 : object {
    private static T s_invalidHandle;
    internal static T GetInvalidHandle(Func`1<T> invalidHandleFactory);
    internal static bool IsCachedInvalidHandle(SafeHandle handle);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ToolboxItemAttribute("False")]
public class System.Media.SoundPlayer : Component {
    private static int BlockSize;
    private static int DefaultLoadTimeout;
    private Uri _uri;
    private string _soundLocation;
    private int _loadTimeout;
    private ManualResetEvent _semaphore;
    private Task _copyTask;
    private CancellationTokenSource _copyTaskCancellation;
    private int _currentPos;
    private Stream _stream;
    private Exception _lastLoadException;
    private bool _doesLoadAppearSynchronous;
    private Byte[] _streamData;
    private AsyncOperation _asyncOperation;
    private SendOrPostCallback _loadAsyncOperationCompleted;
    private static object s_eventLoadCompleted;
    private static object s_eventSoundLocationChanged;
    private static object s_eventStreamChanged;
    [CompilerGeneratedAttribute]
private bool <IsLoadCompleted>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    public int LoadTimeout { get; public set; }
    [NullableAttribute("1")]
public string SoundLocation { get; public set; }
    public Stream Stream { get; public set; }
    public bool IsLoadCompleted { get; private set; }
    public object Tag { get; public set; }
    [NullableContextAttribute("1")]
public SoundPlayer(string soundLocation);
    public SoundPlayer(Stream stream);
    [NullableContextAttribute("1")]
protected SoundPlayer(SerializationInfo serializationInfo, StreamingContext context);
    private static SoundPlayer();
    public int get_LoadTimeout();
    public void set_LoadTimeout(int value);
    [NullableContextAttribute("1")]
public string get_SoundLocation();
    [NullableContextAttribute("1")]
public void set_SoundLocation(string value);
    public Stream get_Stream();
    public void set_Stream(Stream value);
    [CompilerGeneratedAttribute]
public bool get_IsLoadCompleted();
    [CompilerGeneratedAttribute]
private void set_IsLoadCompleted(bool value);
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    public void LoadAsync();
    private void LoadAsyncOperationCompleted(object arg);
    private void CleanupStreamData();
    public void Load();
    private void LoadAndPlay(int flags);
    private void CancelLoad();
    private void LoadSync();
    private void LoadStream(bool loadSync);
    public void Play();
    public void PlaySync();
    public void PlayLooping();
    private static Uri ResolveUri(string partialUri);
    private void SetupSoundLocation(string soundLocation);
    private void SetupStream(Stream stream);
    public void Stop();
    public void add_LoadCompleted(AsyncCompletedEventHandler value);
    public void remove_LoadCompleted(AsyncCompletedEventHandler value);
    public void add_SoundLocationChanged(EventHandler value);
    public void remove_SoundLocationChanged(EventHandler value);
    public void add_StreamChanged(EventHandler value);
    public void remove_StreamChanged(EventHandler value);
    [NullableContextAttribute("1")]
protected virtual void OnLoadCompleted(AsyncCompletedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnSoundLocationChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnStreamChanged(EventArgs e);
    [AsyncStateMachineAttribute("System.Media.SoundPlayer/<CopyStreamAsync>d__66")]
private Task CopyStreamAsync(CancellationToken cancellationToken);
    private void ValidateSoundFile(string fileName);
    private static void ValidateSoundData(Byte[] data);
    private static short BytesToInt16(byte ch0, byte ch1);
    private static int BytesToInt(byte ch0, byte ch1, byte ch2, byte ch3);
    private static int mmioFOURCC(char ch0, char ch1, char ch2, char ch3);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Media.SystemSound : object {
    private int _soundType;
    internal SystemSound(int soundType);
    public void Play();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Media.SystemSounds : object {
    private static SystemSound modreq(System.Runtime.CompilerServices.IsVolatile) s_asterisk;
    private static SystemSound modreq(System.Runtime.CompilerServices.IsVolatile) s_beep;
    private static SystemSound modreq(System.Runtime.CompilerServices.IsVolatile) s_exclamation;
    private static SystemSound modreq(System.Runtime.CompilerServices.IsVolatile) s_hand;
    private static SystemSound modreq(System.Runtime.CompilerServices.IsVolatile) s_question;
    public static SystemSound Asterisk { get; }
    public static SystemSound Beep { get; }
    public static SystemSound Exclamation { get; }
    public static SystemSound Hand { get; }
    public static SystemSound Question { get; }
    public static SystemSound get_Asterisk();
    public static SystemSound get_Beep();
    public static SystemSound get_Exclamation();
    public static SystemSound get_Hand();
    public static SystemSound get_Question();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.X509Certificates.X509Certificate2UI : object {
    internal static int ERROR_SUCCESS;
    internal static int ERROR_CANCELLED;
    public static void DisplayCertificate(X509Certificate2 certificate);
    public static void DisplayCertificate(X509Certificate2 certificate, IntPtr hwndParent);
    public static X509Certificate2Collection SelectFromCollection(X509Certificate2Collection certificates, string title, string message, X509SelectionFlag selectionFlag);
    public static X509Certificate2Collection SelectFromCollection(X509Certificate2Collection certificates, string title, string message, X509SelectionFlag selectionFlag, IntPtr hwndParent);
    private static void DisplayX509Certificate(X509Certificate2 certificate, IntPtr hwndParent);
    private static X509Certificate2Collection SelectFromCollectionHelper(X509Certificate2Collection certificates, string title, string message, X509SelectionFlag selectionFlag, IntPtr hwndParent);
    private static SafeCertStoreHandle SelectFromStore(SafeCertStoreHandle safeSourceStoreHandle, string title, string message, X509SelectionFlag selectionFlags, IntPtr hwndParent);
}
public enum System.Security.Cryptography.X509Certificates.X509SelectionFlag : Enum {
    public int value__;
    public static X509SelectionFlag SingleSelection;
    public static X509SelectionFlag MultiSelection;
}
internal static class System.Security.Cryptography.X509Certificates.X509Utils : object {
    internal static UInt32 CERT_STORE_ENUM_ARCHIVED_FLAG;
    internal static UInt32 CERT_STORE_CREATE_NEW_FLAG;
    internal static SafeCertContextHandle DuplicateCertificateContext(X509Certificate2 certificate);
    internal static SafeCertStoreHandle ExportToMemoryStore(X509Certificate2Collection collection);
    internal static X509Certificate2Collection GetCertificates(SafeCertStoreHandle safeCertStoreHandle);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ConvertInvalidPrimitive { get; }
    internal static string Cryptography_InvalidHandle { get; }
    internal static string Enum_InvalidValue { get; }
    internal static string PlatformNotSupported_System_Windows_Extensions { get; }
    internal static string SoundAPIBadSoundLocation { get; }
    internal static string SoundAPIFileDoesNotExist { get; }
    internal static string SoundAPIFormatNotSupported { get; }
    internal static string SoundAPIInvalidWaveFile { get; }
    internal static string SoundAPIInvalidWaveHeader { get; }
    internal static string SoundAPILoadTimedOut { get; }
    internal static string SoundAPILoadTimeout { get; }
    internal static string SoundAPIReadError { get; }
    internal static string TextParseFailedFormat { get; }
    internal static string PropertyValueInvalidEntry { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ConvertInvalidPrimitive();
    internal static string get_Cryptography_InvalidHandle();
    internal static string get_Enum_InvalidValue();
    internal static string get_PlatformNotSupported_System_Windows_Extensions();
    internal static string get_SoundAPIBadSoundLocation();
    internal static string get_SoundAPIFileDoesNotExist();
    internal static string get_SoundAPIFormatNotSupported();
    internal static string get_SoundAPIInvalidWaveFile();
    internal static string get_SoundAPIInvalidWaveHeader();
    internal static string get_SoundAPILoadTimedOut();
    internal static string get_SoundAPILoadTimeout();
    internal static string get_SoundAPIReadError();
    internal static string get_TextParseFailedFormat();
    internal static string get_PropertyValueInvalidEntry();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Xaml.Permissions.XamlAccessLevel : object {
    [CompilerGeneratedAttribute]
private string <PrivateAccessToTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyNameString>k__BackingField;
    public AssemblyName AssemblyAccessToAssemblyName { get; }
    [NullableAttribute("2")]
public string PrivateAccessToTypeName { get; private set; }
    internal string AssemblyNameString { get; private set; }
    private XamlAccessLevel(string assemblyName, string typeName);
    public static XamlAccessLevel AssemblyAccessTo(Assembly assembly);
    public static XamlAccessLevel AssemblyAccessTo(AssemblyName assemblyName);
    public static XamlAccessLevel PrivateAccessTo(Type type);
    public static XamlAccessLevel PrivateAccessTo(string assemblyQualifiedTypeName);
    public AssemblyName get_AssemblyAccessToAssemblyName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_PrivateAccessToTypeName();
    [CompilerGeneratedAttribute]
private void set_PrivateAccessToTypeName(string value);
    [CompilerGeneratedAttribute]
internal string get_AssemblyNameString();
    [CompilerGeneratedAttribute]
private void set_AssemblyNameString(string value);
}
