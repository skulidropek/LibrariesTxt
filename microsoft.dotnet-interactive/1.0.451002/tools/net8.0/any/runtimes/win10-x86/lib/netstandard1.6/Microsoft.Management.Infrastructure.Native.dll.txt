[NativeCppClassAttribute]
internal enum _ACCESS_REASON_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _ACL_INFORMATION_CLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _ACTIVATION_CONTEXT_INFO_CLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _AUDIT_EVENT_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _CM_ERROR_CONTROL_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _CM_SERVICE_LOAD_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _CM_SERVICE_NODE_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _COMPUTER_NAME_FORMAT : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _COPYFILE2_COPY_PHASE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _COPYFILE2_MESSAGE_ACTION : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _COPYFILE2_MESSAGE_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _CPU_SET_INFORMATION_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG : ValueType {
}
[NativeCppClassAttribute]
internal enum _DEP_SYSTEM_POLICY_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _DEVICE_POWER_STATE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _DISPLAYCONFIG_COLOR_ENCODING : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _ENLISTMENT_INFORMATION_CLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _EXCEPTION_DISPOSITION : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _FILE_ID_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _FILE_INFO_BY_HANDLE_CLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _FINDEX_INFO_LEVELS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _FINDEX_SEARCH_OPS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _FIRMWARE_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _GET_FILEEX_INFO_LEVELS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class _GUID : ValueType {
}
[NativeCppClassAttribute]
internal enum _HARDWARE_COUNTER_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _HEAP_INFORMATION_CLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _HIBERFILE_BUCKET_SIZE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _IMAGE_POLICY_ENTRY_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _IMAGE_POLICY_ID : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _JOBOBJECT_RATE_CONTROL_TOLERANCE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _JOBOBJECTINFOCLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _KTMOBJECT_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class _ldiv_t : ValueType {
}
[NativeCppClassAttribute]
internal enum _LOGICAL_PROCESSOR_RELATIONSHIP : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _MANDATORY_LEVEL : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _MEMORY_RESOURCE_NOTIFICATION_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class _MI_Application : ValueType {
}
[NativeCppClassAttribute]
internal class _MI_ApplicationWrapper : ValueType {
}
[NativeCppClassAttribute]
internal class _MI_Array : ValueType {
}
[NativeCppClassAttribute]
internal enum _MI_CallbackMode : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _MI_CancellationReason : Enum {
    public int value__;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class _MI_Class : ValueType {
}
[NativeCppClassAttribute]
internal class _MI_ClassA : ValueType {
}
[NativeCppClassAttribute]
internal class _MI_ClassDecl : ValueType {
}
[NativeCppClassAttribute]
internal class _MI_ClientFT_V1 : ValueType {
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _MI_Context : ValueType {
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class _MI_Datetime : ValueType {
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _MI_Deserializer : ValueType {
}
[NativeCppClassAttribute]
internal class _MI_DeserializerCallbacks : ValueType {
}
[NativeCppClassAttribute]
internal class _MI_DeserializerFT : ValueType {
}
[NativeCppClassAttribute]
internal class _MI_DestinationOptions : ValueType {
}
[NativeCppClassAttribute]
internal enum _MI_DestinationOptions_ImpersonationType : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _MI_ErrorCategory : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class _MI_ExtendedArray : ValueType {
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class _MI_Filter : ValueType {
}
[NativeCppClassAttribute]
internal class _MI_HostedProvider : ValueType {
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _MI_Instance : ValueType {
}
[NativeCppClassAttribute]
internal class _MI_InstanceA : ValueType {
}
[NativeCppClassAttribute]
internal class _MI_InstanceExFT : ValueType {
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _MI_Interval : ValueType {
}
[NativeCppClassAttribute]
internal enum _MI_LocaleType : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class _MI_MethodDecl : ValueType {
}
[NativeCppClassAttribute]
internal class _MI_Module : ValueType {
}
[NativeCppClassAttribute]
internal class _MI_Operation : ValueType {
}
[NativeCppClassAttribute]
internal enum _MI_OperationCallback_ResponseType : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class _MI_OperationCallbacks : ValueType {
}
[NativeCppClassAttribute]
internal class _MI_OperationOptions : ValueType {
}
[NativeCppClassAttribute]
internal class _MI_ParameterSet : ValueType {
}
[NativeCppClassAttribute]
internal enum _MI_PromptType : Enum {
    public int value__;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class _MI_PropertySet : ValueType {
}
[NativeCppClassAttribute]
internal enum _MI_ProviderArchitecture : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class _MI_QualifierSet : ValueType {
}
[NativeCppClassAttribute]
internal enum _MI_Result : Enum {
    public int value__;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _MI_Serializer : ValueType {
}
[NativeCppClassAttribute]
internal class _MI_Server : ValueType {
}
[NativeCppClassAttribute]
internal class _MI_Session : ValueType {
}
[NativeCppClassAttribute]
internal class _MI_SessionCallbacks : ValueType {
}
[NativeCppClassAttribute]
internal class _MI_SubscriptionDeliveryOptions : ValueType {
}
[NativeCppClassAttribute]
internal enum _MI_SubscriptionDeliveryType : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _MI_Type : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class _MI_UserCredentials : ValueType {
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class _MI_Value : ValueType {
}
[NativeCppClassAttribute]
internal enum _MONITOR_DISPLAY_STATE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _NORM_FORM : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _OS_DEPLOYEMENT_STATE_VALUES : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _POWER_MONITOR_REQUEST_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _POWER_PLATFORM_ROLE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _POWER_REQUEST_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _PRIORITY_HINT : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _PROC_THREAD_ATTRIBUTE_NUM : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _PROCESS_INFORMATION_CLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _PROCESS_MEMORY_EXHAUSTION_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _PROCESS_MITIGATION_POLICY : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _PROCESSOR_CACHE_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _RESOURCEMANAGER_INFORMATION_CLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _RTL_UMS_SCHEDULER_REASON : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _RTL_UMS_THREAD_INFO_CLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _SC_ACTION_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _SC_ENUM_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _SC_EVENT_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _SC_STATUS_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _SE_IMAGE_SIGNATURE_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _SE_LEARNING_MODE_DATA_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class _SECURITY_ATTRIBUTES : ValueType {
}
[NativeCppClassAttribute]
internal enum _SECURITY_IMPERSONATION_LEVEL : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _SERVERSILO_STATE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class _SessionHandle_ReleaseHandle_CallbackWrapper : ValueType {
}
[NativeCppClassAttribute]
internal enum _SharedVirtualDiskHandleState : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _SharedVirtualDiskSupportType : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _SID_NAME_USE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _STREAM_INFO_LEVELS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _SYSTEM_POWER_STATE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _TAPE_DRIVE_PROBLEM_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _THREAD_INFORMATION_CLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _TOKEN_ELEVATION_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _TOKEN_INFORMATION_CLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _TOKEN_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class _TP_CALLBACK_ENVIRON_V3 : ValueType {
}
[NativeCppClassAttribute]
internal enum _TP_CALLBACK_PRIORITY : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _TRANSACTION_INFORMATION_CLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _TRANSACTION_OUTCOME : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _TRANSACTION_STATE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _TRANSACTIONMANAGER_INFORMATION_CLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _USER_ACTIVITY_PRESENCE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum DeserializerCallbackId : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class DeserializerCallbacksProxy : ValueType {
}
[NativeCppClassAttribute]
internal enum DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum DIALOG_DPI_CHANGE_BEHAVIORS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum DISPLAYCONFIG_TOPOLOGY_ID : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum DPI_AWARENESS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum DPI_HOSTING_BEHAVIOR : Enum {
    public int value__;
}
internal class GCHandleHelper : object {
    internal static void FreeGcHandleManaged(Void* nativeGCHandle);
}
[NativeCppClassAttribute]
internal class HDC__ : ValueType {
}
[NativeCppClassAttribute]
internal class HWND__ : ValueType {
}
[NativeCppClassAttribute]
internal enum IMAGE_AUX_SYMBOL_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum IMPORT_OBJECT_NAME_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum IMPORT_OBJECT_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum MEM_EXTENDED_PARAMETER_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum MEM_SECTION_EXTENDED_PARAMETER_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class MI_OperationWrapper : ValueType {
}
internal class Microsoft.Management.Infrastructure.Native.ApplicationHandle : SafeHandleZeroOrMinusOneIsInvalidCore {
    internal ApplicationHandle(IntPtr handle);
    [ConditionalAttribute("DEBUG")]
internal void AssertValidInternalState();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Management.Infrastructure.Native.ApplicationMethods : object {
    private static ApplicationHandle applicationHandle;
    private static InstanceHandle applicationInitializationError;
    private static MiResult applicationInitializationResult;
    internal static string protocol_WSMan;
    internal static string protocol_DCOM;
    private static ApplicationMethods();
    private static MiResult InitializeCore(InstanceHandle& errorDetails, ApplicationHandle& applicationHandle);
    internal static MiResult Initialize(InstanceHandle& errorDetails, ApplicationHandle& applicationHandle);
    internal static MiResult NewInstance(ApplicationHandle applicationHandle, string className, ClassHandle classHandle, InstanceHandle& newInstance);
    internal static MiResult NewSession(ApplicationHandle applicationHandle, string protocol, string destination, DestinationOptionsHandle destinationOptionsHandle, InstanceHandle& extendedError, SessionHandle& sessionHandle);
    internal static MiResult NewDestinationOptions(ApplicationHandle applicationHandle, DestinationOptionsHandle& destinationOptionsHandle);
    internal static MiResult NewOperationOptions(ApplicationHandle applicationHandle, bool mustUnderstand, OperationOptionsHandle& operationOptionsHandle);
    internal static MiResult NewSubscriptionDeliveryOptions(ApplicationHandle applicationHandle, MiSubscriptionDeliveryType deliveryType, SubscriptionDeliveryOptionsHandle& subscriptionDeliveryOptionsHandle);
    internal static MiResult NewSerializer(ApplicationHandle applicationHandle, string format, UInt32 flags, SerializerHandle& serializerHandle);
    internal static MiResult NewDeserializer(ApplicationHandle applicationHandle, string format, UInt32 flags, DeserializerHandle& deserializerHandle);
    internal static MiResult GetCimErrorFromMiResult(MiResult errorCode, string errorMessage, InstanceHandle& cimError);
}
internal class Microsoft.Management.Infrastructure.Native.ApplicationMethodsInternal : object {
    internal static MiResult NewSerializerMOF(ApplicationHandle applicationHandle, string format, UInt32 flags, SerializerHandle& serializerHandle);
    internal static MiResult NewDeserializerMOF(ApplicationHandle applicationHandle, string format, UInt32 flags, DeserializerHandle& deserializerHandle);
}
internal class Microsoft.Management.Infrastructure.Native.AuthType : object {
    internal static string AuthTypeDefault;
    internal static string AuthTypeNone;
    internal static string AuthTypeDigest;
    internal static string AuthTypeNegoWithCredentials;
    internal static string AuthTypeNegoNoCredentials;
    internal static string AuthTypeBasic;
    internal static string AuthTypeKerberos;
    internal static string AuthTypeClientCerts;
    internal static string AuthTypeNTLM;
    internal static string AuthTypeCredSSP;
    internal static string AuthTypeIssuerCert;
    private static AuthType();
}
internal class Microsoft.Management.Infrastructure.Native.ClassHandle : SafeHandleZeroOrMinusOneIsInvalidCore {
    internal ClassHandle(IntPtr handle, bool ownsHandle);
    [ConditionalAttribute("DEBUG")]
internal void AssertValidInternalState();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Management.Infrastructure.Native.ClassMethods : object {
    internal static MiResult Clone(ClassHandle ClassHandleToClone, ClassHandle& clonedClassHandle);
    internal static MiResult GetClassName(ClassHandle handle, String& className);
    internal static MiResult GetServerName(ClassHandle handle, String& serverName);
    internal static MiResult GetNamespace(ClassHandle handle, String& nameSpace);
    internal static MiResult GetParentClassName(ClassHandle handle, String& className);
    internal static MiResult GetParentClass(ClassHandle handle, ClassHandle& superClass);
    internal static MiResult GetQualifier_Count(ClassHandle handle, Int32& qualifierCount);
    internal static MiResult GetClassQualifier_Index(ClassHandle handle, string name, Int32& index);
    internal static MiResult GetQualifierElementAt_GetName(ClassHandle handle, int index, String& name);
    internal static MiResult GetQualifierElementAt_GetValue(ClassHandle handle, int index, Object& value);
    internal static MiResult GetQualifierElementAt_GetType(ClassHandle handle, int index, MiType& type);
    internal static MiResult GetQualifierElementAt_GetFlags(ClassHandle handle, int index, MiFlags& flags);
    internal static MiResult GetPropertyQualifier_Index(ClassHandle handle, string propertyName, string name, Int32& index);
    internal static MiResult GetPropertyQualifier_Count(ClassHandle handle, string name, Int32& count);
    internal static MiResult GetPropertyQualifierElementAt_GetName(ClassHandle handle, int index, string propertyName, String& name);
    internal static MiResult GetPropertyQualifierElementAt_GetValue(ClassHandle handle, int index, string propertyName, Object& value);
    internal static MiResult GetPropertyQualifierElementAt_GetType(ClassHandle handle, int index, string propertyName, MiType& type);
    internal static MiResult GetPropertyQualifierElementAt_GetFlags(ClassHandle handle, int index, string propertyName, MiFlags& flags);
    internal static MiResult GetElementCount(ClassHandle handle, Int32& count);
    internal static MiResult GetElement_GetIndex(ClassHandle handle, string name, Int32& index);
    internal static MiResult GetElementAt_GetName(ClassHandle handle, int index, String& name);
    internal static MiResult GetElementAt_GetValue(ClassHandle handle, int index, Object& value);
    internal static MiResult GetElementAt_GetType(ClassHandle handle, int index, MiType& type);
    internal static MiResult GetElementAt_GetFlags(ClassHandle handle, int index, MiFlags& flags);
    internal static MiResult GetElementAt_GetReferenceClass(ClassHandle handle, int index, String& referenceClass);
    internal static MiResult GetMethod_GetIndex(ClassHandle handle, string name, Int32& index);
    internal static MiResult GetMethodCount(ClassHandle handle, Int32& methodCount);
    internal static MiResult GetMethodElementAt_GetName(ClassHandle handle, int index, String& name);
    internal static MiResult GetMethodElementAt_GetType(ClassHandle handle, int index, MiType& type);
    internal static MiResult GetMethodQualifierCount(ClassHandle handle, int methodIndex, Int32& parameterCount);
    internal static MiResult GetMethodQualifierElement_GetIndex(ClassHandle handle, int methodIndex, string name, Int32& index);
    internal static MiResult GetMethodQualifierElementAt_GetName(ClassHandle handle, int methodIndex, int qualifierIndex, String& name);
    internal static MiResult GetMethodQualifierElementAt_GetValue(ClassHandle handle, int methodIndex, int qualifierIndex, Object& value);
    internal static MiResult GetMethodQualifierElementAt_GetType(ClassHandle handle, int methodIndex, int qualifierIndex, MiType& type);
    internal static MiResult GetMethodQualifierElementAt_GetFlags(ClassHandle handle, int methodIndex, int qualifierIndex, MiFlags& flags);
    internal static MiResult GetMethodParametersCount(ClassHandle handle, int index, Int32& parameterCount);
    internal static MiResult GetMethodElement_GetIndex(ClassHandle handle, int methodIndex, string name, Int32& index);
    internal static MiResult GetMethodAt_GetName(ClassHandle handle, int methodIndex, int parameterIndex, String& name);
    internal static MiResult GetMethodAt_GetType(ClassHandle handle, int methodIndex, int parameterIndex, MiType& type);
    internal static MiResult GetMethodAt_GetReferenceClass(ClassHandle handle, int methodIndex, int parameterIndex, String& referenceClass);
    internal static MiResult GetMethodParameterGetQualifierElementAt_GetName(ClassHandle handle, int methodIndex, int parameterName, int index, String& name);
    internal static MiResult GetMethodParameterGetQualifierElementAt_GetValue(ClassHandle handle, int methodIndex, int parameterName, int index, Object& value);
    internal static MiResult GetMethodParameterGetQualifierElementAt_GetType(ClassHandle handle, int methodIndex, int parameterName, int index, MiType& type);
    internal static MiResult GetMethodParameterGetQualifierElementAt_GetFlags(ClassHandle handle, int methodIndex, int parameterName, int index, MiFlags& flags);
    internal static MiResult GetMethodGetQualifierElement_GetIndex(ClassHandle handle, int methodIndex, int parameterIndex, string name, Int32& index);
    internal static MiResult GetMethodParametersGetQualifiersCount(ClassHandle handle, int index, int parameterIndex, Int32& parameterCount);
    internal static int GetClassHashCode(ClassHandle handle);
}
internal class Microsoft.Management.Infrastructure.Native.DangerousHandleAccessor : object {
    private bool needToCallDangerousRelease;
    private SafeHandle safeHandle;
    internal DangerousHandleAccessor(SafeHandle safeHandle);
    private void ~DangerousHandleAccessor();
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2001:AvoidCallingProblematicMethods")]
internal IntPtr DangerousGetHandle();
    protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
}
internal class Microsoft.Management.Infrastructure.Native.DeserializerCallbacks : object {
    private object <backing_store>ManagedDeserializerContext;
    private ClassObjectNeededCallbackDelegate <backing_store>ClassObjectNeededCallback;
    private GetIncludedFileBufferCallbackDelegate <backing_store>GetIncludedFileBufferCallback;
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal GetIncludedFileBufferCallbackDelegate GetIncludedFileBufferCallback { get; internal set; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal ClassObjectNeededCallbackDelegate ClassObjectNeededCallback { get; internal set; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal object ManagedDeserializerContext { get; internal set; }
    internal object get_ManagedDeserializerContext();
    internal void set_ManagedDeserializerContext(object __set_formal);
    internal static _MI_Result ClassObjectNeededAppDomainProxy(Void* context, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* serverName, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* namespaceName, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* className, _MI_Class** requestedClassObject);
    internal ClassObjectNeededCallbackDelegate get_ClassObjectNeededCallback();
    internal void set_ClassObjectNeededCallback(ClassObjectNeededCallbackDelegate __set_formal);
    internal static _MI_Result GetIncludedFileBufferAppDomainProxy(Void* context, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* fileName, Byte** fileBuffer, UInt32* bufferLength);
    internal GetIncludedFileBufferCallbackDelegate get_GetIncludedFileBufferCallback();
    internal void set_GetIncludedFileBufferCallback(GetIncludedFileBufferCallbackDelegate __set_formal);
    private static void StoreCallbackDelegate(DeserializerCallbacksProxy* pCallbacksProxy, Delegate externalCallback, Delegate appDomainProxyCallback, DeserializerCallbackId callbackId);
    internal static void ReleaseDeserializerCallbacksProxy(DeserializerCallbacksProxy* pCallbacksProxy);
    internal bool SetMiDeserializerCallbacks(_MI_DeserializerCallbacks* pmiDeserializerCallbacks);
}
internal class Microsoft.Management.Infrastructure.Native.DeserializerHandle : SafeHandleZeroOrMinusOneIsInvalidCore {
    internal DeserializerHandle(IntPtr handle);
    [ConditionalAttribute("DEBUG")]
internal void AssertValidInternalState();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Management.Infrastructure.Native.DeserializerInternalMethods : object {
    internal static MiResult DeserializeInstanceArray(DeserializerHandle deserializerHandle, OperationOptionsHandle options, DeserializerCallbacks callback, Byte[] serializedBuffer, UInt32 offset, ClassHandle[] classObjects, InstanceHandle[]& deserializedInstances, UInt32& inputBufferUsed, InstanceHandle& cimErrorDetails);
    internal static MiResult DeserializeClassArray(DeserializerHandle deserializerHandle, OperationOptionsHandle options, DeserializerCallbacks callback, Byte[] serializedBuffer, UInt32 offset, ClassHandle[] classObjects, string serverName, string nameSpace, ClassHandle[]& deserializedClasses, UInt32& inputBufferUsed, InstanceHandle& cimErrorDetails);
}
internal class Microsoft.Management.Infrastructure.Native.DeserializerMethods : object {
    internal static MiResult DeserializeInstance(DeserializerHandle deserializerHandle, UInt32 flags, Byte[] serializedBuffer, UInt32 offset, ClassHandle[] classObjects, InstanceHandle& deserializedInstance, UInt32& inputBufferUsed, InstanceHandle& cimErrorDetails);
    internal static MiResult DeserializeClass(DeserializerHandle deserializerHandle, UInt32 flags, Byte[] serializedBuffer, UInt32 offset, ClassHandle parentClass, string serverName, string nameSpace, ClassHandle& deserializedClass, UInt32& inputBufferUsed, InstanceHandle& cimErrorDetails);
}
internal class Microsoft.Management.Infrastructure.Native.DestinationOptionsHandle : SafeHandleZeroOrMinusOneIsInvalidCore {
    internal DestinationOptionsHandle(IntPtr handle);
    [ConditionalAttribute("DEBUG")]
internal void AssertValidInternalState();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Management.Infrastructure.Native.DestinationOptionsMethods : object {
    internal static string packetEncoding_Default;
    internal static string packetEncoding_UTF8;
    internal static string packetEncoding_UTF16;
    internal static string transport_Http;
    internal static string transport_Https;
    internal static string proxyType_IE;
    internal static string proxyType_WinHTTP;
    internal static string proxyType_Auto;
    internal static string proxyType_None;
    private static DestinationOptionsMethods();
    internal static MiResult SetTimeout(DestinationOptionsHandle destinationOptionsHandle, TimeSpan timeout);
    internal static MiResult SetCertCACheck(DestinationOptionsHandle destinationOptionsHandle, bool check);
    internal static MiResult SetCertCNCheck(DestinationOptionsHandle destinationOptionsHandle, bool check);
    internal static MiResult SetCertRevocationCheck(DestinationOptionsHandle destinationOptionsHandle, bool check);
    internal static MiResult SetPacketPrivacy(DestinationOptionsHandle destinationOptionsHandle, bool privacy);
    internal static MiResult SetPacketIntegrity(DestinationOptionsHandle destinationOptionsHandle, bool integrity);
    internal static MiResult SetPacketEncoding(DestinationOptionsHandle destinationOptionsHandle, string encoding);
    internal static MiResult SetDataLocale(DestinationOptionsHandle destinationOptionsHandle, string locale);
    internal static MiResult SetUILocale(DestinationOptionsHandle destinationOptionsHandle, string locale);
    internal static MiResult SetMaxEnvelopeSize(DestinationOptionsHandle destinationOptionsHandle, UInt32 sizeInKB);
    internal static MiResult SetEncodePortInSPN(DestinationOptionsHandle destinationOptionsHandle, bool encodePort);
    internal static MiResult SetHttpUrlPrefix(DestinationOptionsHandle destinationOptionsHandle, string prefix);
    internal static MiResult SetDestinationPort(DestinationOptionsHandle destinationOptionsHandle, UInt32 port);
    internal static MiResult SetTransport(DestinationOptionsHandle destinationOptionsHandle, string transport);
    internal static MiResult SetProxyType(DestinationOptionsHandle destinationOptionsHandle, string proxyType);
    internal static MiResult SetImpersonationType(DestinationOptionsHandle destinationOptionsHandle, MiImpersonationType impersonationType);
    internal static MiResult SetCustomOption(DestinationOptionsHandle destinationOptionsHandle, string optionName, UInt32 optionValue);
    internal static MiResult SetCustomOption(DestinationOptionsHandle destinationOptionsHandle, string optionName, string optionValue);
    internal static MiResult AddDestinationCredentials(DestinationOptionsHandle destinationOptionsHandle, NativeCimCredentialHandle credentials);
    internal static MiResult AddProxyCredentials(DestinationOptionsHandle destinationOptionsHandle, NativeCimCredentialHandle credentials);
    internal static MiResult GetTimeout(DestinationOptionsHandle destinationOptionsHandle, TimeSpan& timeout);
    internal static MiResult GetCertCACheck(DestinationOptionsHandle destinationOptionsHandle, Boolean& check);
    internal static MiResult GetCertCNCheck(DestinationOptionsHandle destinationOptionsHandle, Boolean& check);
    internal static MiResult GetCertRevocationCheck(DestinationOptionsHandle destinationOptionsHandle, Boolean& check);
    internal static MiResult GetPacketPrivacy(DestinationOptionsHandle destinationOptionsHandle, Boolean& privacy);
    internal static MiResult GetPacketIntegrity(DestinationOptionsHandle destinationOptionsHandle, Boolean& integrity);
    internal static MiResult GetPacketEncoding(DestinationOptionsHandle destinationOptionsHandle, String& encoding);
    internal static MiResult GetDataLocale(DestinationOptionsHandle destinationOptionsHandle, String& locale);
    internal static MiResult GetUILocale(DestinationOptionsHandle destinationOptionsHandle, String& locale);
    internal static MiResult GetMaxEnvelopeSize(DestinationOptionsHandle destinationOptionsHandle, UInt32& sizeInKB);
    internal static MiResult GetEncodePortInSPN(DestinationOptionsHandle destinationOptionsHandle, Boolean& encodePort);
    internal static MiResult GetHttpUrlPrefix(DestinationOptionsHandle destinationOptionsHandle, String& prefix);
    internal static MiResult GetDestinationPort(DestinationOptionsHandle destinationOptionsHandle, UInt32& port);
    internal static MiResult GetTransport(DestinationOptionsHandle destinationOptionsHandle, String& transport);
    internal static MiResult GetProxyType(DestinationOptionsHandle destinationOptionsHandle, String& proxyType);
    internal static MiResult GetImpersonationType(DestinationOptionsHandle destinationOptionsHandle, MiImpersonationType& impersonationType);
    internal static MiResult Clone(DestinationOptionsHandle destinationOptionsHandle, DestinationOptionsHandle& newDestinationOptionsHandle);
}
internal abstract class Microsoft.Management.Infrastructure.Native.ExceptionSafeCallbackBase : object {
    internal OperationCallbackProcessingContext callbackProcessingContext;
    internal MI_OperationWrapper* pmiOperationWrapper;
    private InternalErrorCallbackDelegate internalErrorCallback;
    protected ExceptionSafeCallbackBase(Void* callbackContext);
    protected abstract virtual void InvokeUserCallback();
    internal void InvokeUserCallbackAndCatchInternalErrors();
    private bool IsInternalException(Exception e);
    private void ReportInternalError(Exception exception);
}
internal class Microsoft.Management.Infrastructure.Native.ExceptionSafeClassCallback : ExceptionSafeCallbackBase {
    private _MI_Operation* pmiOperation;
    private _MI_Class modopt(System.Runtime.CompilerServices.IsConst)* pmiClass;
    private byte moreResults;
    private _MI_Result resultCode;
    private UInt16 modopt(System.Runtime.CompilerServices.IsConst)* errorString;
    private _MI_Instance modopt(System.Runtime.CompilerServices.IsConst)* pmiErrorDetails;
    private method resultAcknowledgement;
    internal ExceptionSafeClassCallback(_MI_Operation* pmiOperation, Void* callbackContext, _MI_Class modopt(System.Runtime.CompilerServices.IsConst)* pmiClass, byte moreResults, _MI_Result resultCode, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* errorString, _MI_Instance modopt(System.Runtime.CompilerServices.IsConst)* pmiErrorDetails, method resultAcknowledgement);
    protected virtual void InvokeUserCallback();
}
internal class Microsoft.Management.Infrastructure.Native.ExceptionSafeIndicationCallback : ExceptionSafeCallbackBase {
    private _MI_Operation* pmiOperation;
    private _MI_Instance modopt(System.Runtime.CompilerServices.IsConst)* pmiInstance;
    private UInt16 modopt(System.Runtime.CompilerServices.IsConst)* bookmark;
    private UInt16 modopt(System.Runtime.CompilerServices.IsConst)* machineID;
    private byte moreResults;
    private _MI_Result resultCode;
    private UInt16 modopt(System.Runtime.CompilerServices.IsConst)* errorString;
    private _MI_Instance modopt(System.Runtime.CompilerServices.IsConst)* pmiErrorDetails;
    private method resultAcknowledgement;
    internal ExceptionSafeIndicationCallback(_MI_Operation* pmiOperation, Void* callbackContext, _MI_Instance modopt(System.Runtime.CompilerServices.IsConst)* pmiInstance, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* bookmark, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* machineID, byte moreResults, _MI_Result resultCode, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* errorString, _MI_Instance modopt(System.Runtime.CompilerServices.IsConst)* pmiErrorDetails, method resultAcknowledgement);
    protected virtual void InvokeUserCallback();
}
internal class Microsoft.Management.Infrastructure.Native.ExceptionSafeInstanceResultCallback : ExceptionSafeCallbackBase {
    private _MI_Operation* pmiOperation;
    private _MI_Instance modopt(System.Runtime.CompilerServices.IsConst)* pmiInstance;
    private byte moreResults;
    private _MI_Result resultCode;
    private UInt16 modopt(System.Runtime.CompilerServices.IsConst)* errorString;
    private _MI_Instance modopt(System.Runtime.CompilerServices.IsConst)* pmiErrorDetails;
    private method resultAcknowledgement;
    internal ExceptionSafeInstanceResultCallback(_MI_Operation* pmiOperation, Void* callbackContext, _MI_Instance modopt(System.Runtime.CompilerServices.IsConst)* pmiInstance, byte moreResults, _MI_Result resultCode, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* errorString, _MI_Instance modopt(System.Runtime.CompilerServices.IsConst)* pmiErrorDetails, method resultAcknowledgement);
    protected virtual void InvokeUserCallback();
}
internal class Microsoft.Management.Infrastructure.Native.ExceptionSafePromptUserCallback : ExceptionSafeCallbackBase {
    private _MI_Operation* pmiOperation;
    private UInt16 modopt(System.Runtime.CompilerServices.IsConst)* wszMessage;
    private _MI_PromptType promptType;
    private method promptUserResult;
    internal ExceptionSafePromptUserCallback(_MI_Operation* pmiOperation, Void* callbackContext, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* wszMessage, _MI_PromptType promptType, method promptUserResult);
    protected virtual void InvokeUserCallback();
}
internal class Microsoft.Management.Infrastructure.Native.ExceptionSafeStreamedParameterResultCallback : ExceptionSafeCallbackBase {
    private _MI_Operation* pmiOperation;
    private UInt16 modopt(System.Runtime.CompilerServices.IsConst)* wszParameterName;
    private _MI_Type miType;
    private _MI_Value modopt(System.Runtime.CompilerServices.IsConst)* pmiParameterValue;
    private method resultAcknowledgement;
    internal ExceptionSafeStreamedParameterResultCallback(_MI_Operation* pmiOperation, Void* callbackContext, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* wszParameterName, _MI_Type miType, _MI_Value modopt(System.Runtime.CompilerServices.IsConst)* pmiParameterValue, method resultAcknowledgement);
    protected virtual void InvokeUserCallback();
}
internal class Microsoft.Management.Infrastructure.Native.ExceptionSafeWriteErrorCallback : ExceptionSafeCallbackBase {
    private _MI_Operation* pmiOperation;
    private _MI_Instance* pmiInstance;
    private method writeErrorResult;
    internal ExceptionSafeWriteErrorCallback(_MI_Operation* pmiOperation, Void* callbackContext, _MI_Instance* pmiInstance, method writeErrorResult);
    protected virtual void InvokeUserCallback();
}
internal class Microsoft.Management.Infrastructure.Native.ExceptionSafeWriteMessageCallback : ExceptionSafeCallbackBase {
    private _MI_Operation* pmiOperation;
    private UInt32 channel;
    private UInt16 modopt(System.Runtime.CompilerServices.IsConst)* wszMessage;
    internal ExceptionSafeWriteMessageCallback(_MI_Operation* pmiOperation, Void* callbackContext, UInt32 channel, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* wszMessage);
    protected virtual void InvokeUserCallback();
}
internal class Microsoft.Management.Infrastructure.Native.ExceptionSafeWriteProgressCallback : ExceptionSafeCallbackBase {
    private _MI_Operation* pmiOperation;
    private UInt16 modopt(System.Runtime.CompilerServices.IsConst)* wszActivity;
    private UInt16 modopt(System.Runtime.CompilerServices.IsConst)* wszCurrentOperation;
    private UInt16 modopt(System.Runtime.CompilerServices.IsConst)* wszStatusDescription;
    private UInt32 percentageComplete;
    private UInt32 secondsRemaining;
    internal ExceptionSafeWriteProgressCallback(_MI_Operation* pmiOperation, Void* callbackContext, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* wszActivity, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* wszCurrentOperation, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* wszStatusDescription, UInt32 percentageComplete, UInt32 secondsRemaining);
    protected virtual void InvokeUserCallback();
}
internal class Microsoft.Management.Infrastructure.Native.Helpers : object {
    internal static IntPtr GetCurrentSecurityToken();
    internal static IntPtr StringToHGlobalUni(string s);
    internal static void ZeroFreeGlobalAllocUnicode(IntPtr s);
}
internal class Microsoft.Management.Infrastructure.Native.InstanceHandle : SafeHandleZeroOrMinusOneIsInvalidCore {
    internal InstanceHandle(IntPtr handle, bool ownsHandle);
    [ConditionalAttribute("DEBUG")]
internal void AssertValidInternalState();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Management.Infrastructure.Native.InstanceMethods : object {
    internal static ValueType modopt(System.DateTime) modopt(System.Runtime.CompilerServices.IsBoxed) maxValidCimTimestamp;
    private static InstanceMethods();
    internal static object ConvertMiDateTimeToManagedObject(_MI_Datetime modopt(System.Runtime.CompilerServices.IsConst)* pmiValue);
    internal static void ConvertManagedObjectToMiDateTime(object managedValue, _MI_Datetime* pmiValue);
    internal static IEnumerable`1<DangerousHandleAccessor> ConvertToMiValue(MiType type, object managedValue, _MI_Value* pmiValue);
    internal static void ReleaseMiValue(MiType type, _MI_Value* pmiValue, IEnumerable`1<DangerousHandleAccessor> dangerousHandleAccessors);
    internal static object ConvertFromMiValue(MiType type, _MI_Value modopt(System.Runtime.CompilerServices.IsConst)* pmiValue);
    internal static void ThrowIfMismatchedType(MiType type, object managedValue);
    internal static MiResult Clone(InstanceHandle instanceHandleToClone, InstanceHandle& clonedInstanceHandle);
    internal static MiResult GetServerName(InstanceHandle handle, String& serverName);
    internal static MiResult SetServerName(InstanceHandle handle, string serverName);
    internal static MiResult GetClassName(InstanceHandle handle, String& className);
    internal static MiResult GetNamespace(InstanceHandle handle, String& nameSpace);
    internal static MiResult SetNamespace(InstanceHandle handle, string nameSpace);
    internal static MiResult GetElementCount(InstanceHandle handle, Int32& elementCount);
    internal static MiResult AddElement(InstanceHandle handle, string name, object value, MiType type, MiFlags flags);
    internal static MiResult GetElement_GetIndex(InstanceHandle handle, string name, Int32& index);
    internal static MiResult GetElementAt_GetName(InstanceHandle handle, int index, String& name);
    internal static MiResult GetElementAt_GetValue(InstanceHandle handle, int index, Object& value);
    internal static MiResult GetElementAt_GetType(InstanceHandle handle, int index, MiType& type);
    internal static MiResult GetElementAt_GetFlags(InstanceHandle handle, int index, MiFlags& flags);
    internal static MiResult SetElementAt_SetValue(InstanceHandle handle, int index, object newValue);
    internal static MiResult SetElementAt_SetNotModifiedFlag(InstanceHandle handle, int index, bool notModifiedFlag);
    internal static MiResult ClearElementAt(InstanceHandle handle, int index);
    internal static MiResult GetClass(InstanceHandle instanceHandle, ClassHandle& classHandle);
}
internal class Microsoft.Management.Infrastructure.Native.MarshalCore : object {
    private static IntPtr modopt(System.Runtime.CompilerServices.IsConst) HIWORDMASK;
    private static MarshalCore();
    internal static IntPtr LocalAlloc_NoSafeHandle(int uFlags, UIntPtr sizetdwBytes);
    internal static IntPtr LocalFree(IntPtr handle);
    internal static IntPtr AllocHGlobal(int cb);
    internal static void FreeHGlobal(IntPtr hglobal);
    private static bool IsNotWin32Atom(IntPtr ptr);
}
internal enum Microsoft.Management.Infrastructure.Native.MiCallbackMode : Enum {
    public int value__;
    public static MiCallbackMode CALLBACK_REPORT;
    public static MiCallbackMode CALLBACK_INQUIRE;
    public static MiCallbackMode CALLBACK_IGNORE;
}
internal enum Microsoft.Management.Infrastructure.Native.MiCancellationReason : Enum {
    public int value__;
    public static MiCancellationReason None;
    public static MiCancellationReason Timeout;
    public static MiCancellationReason Shutdown;
    public static MiCancellationReason ServiceStop;
}
[FlagsAttribute]
internal enum Microsoft.Management.Infrastructure.Native.MiFlags : Enum {
    public UInt32 value__;
    public static MiFlags CLASS;
    public static MiFlags METHOD;
    public static MiFlags PROPERTY;
    public static MiFlags PARAMETER;
    public static MiFlags ASSOCIATION;
    public static MiFlags INDICATION;
    public static MiFlags REFERENCE;
    public static MiFlags ANY;
    public static MiFlags ENABLEOVERRIDE;
    public static MiFlags DISABLEOVERRIDE;
    public static MiFlags RESTRICTED;
    public static MiFlags TOSUBCLASS;
    public static MiFlags TRANSLATABLE;
    public static MiFlags KEY;
    public static MiFlags IN;
    public static MiFlags OUT;
    public static MiFlags REQUIRED;
    public static MiFlags STATIC;
    public static MiFlags ABSTRACT;
    public static MiFlags TERMINAL;
    public static MiFlags EXPENSIVE;
    public static MiFlags STREAM;
    public static MiFlags READONLY;
    public static MiFlags NOTMODIFIED;
    public static MiFlags NULLFLAG;
    public static MiFlags BORROW;
    public static MiFlags ADOPT;
}
[FlagsAttribute]
internal enum Microsoft.Management.Infrastructure.Native.MiOperationFlags : Enum {
    public UInt32 value__;
    public static MiOperationFlags ManualAckResults;
    public static MiOperationFlags NoRtti;
    public static MiOperationFlags BasicRtti;
    public static MiOperationFlags StandardRtti;
    public static MiOperationFlags FullRtti;
    public static MiOperationFlags LocalizedQualifiers;
    public static MiOperationFlags ExpensiveProperties;
    public static MiOperationFlags PolymorphismShallow;
    public static MiOperationFlags PolymorphismDeepBasePropsOnly;
    public static MiOperationFlags ReportOperationStarted;
}
internal enum Microsoft.Management.Infrastructure.Native.MiPromptType : Enum {
    public int value__;
    public static MiPromptType PROMPTTYPE_NORMAL;
    public static MiPromptType PROMPTTYPE_CRITICAL;
}
internal enum Microsoft.Management.Infrastructure.Native.MIResponseType : Enum {
    public int value__;
    public static MIResponseType MIResponseTypeNo;
    public static MIResponseType MIResponseTypeYes;
    public static MIResponseType MIResponseTypeNoToAll;
    public static MIResponseType MIResponseTypeYesToAll;
}
internal enum Microsoft.Management.Infrastructure.Native.MiResult : Enum {
    public int value__;
    public static MiResult OK;
    public static MiResult FAILED;
    public static MiResult ACCESS_DENIED;
    public static MiResult INVALID_NAMESPACE;
    public static MiResult INVALID_PARAMETER;
    public static MiResult INVALID_CLASS;
    public static MiResult NOT_FOUND;
    public static MiResult NOT_SUPPORTED;
    public static MiResult CLASS_HAS_CHILDREN;
    public static MiResult CLASS_HAS_INSTANCES;
    public static MiResult INVALID_SUPERCLASS;
    public static MiResult ALREADY_EXISTS;
    public static MiResult NO_SUCH_PROPERTY;
    public static MiResult TYPE_MISMATCH;
    public static MiResult QUERY_LANGUAGE_NOT_SUPPORTED;
    public static MiResult INVALID_QUERY;
    public static MiResult METHOD_NOT_AVAILABLE;
    public static MiResult METHOD_NOT_FOUND;
    public static MiResult NAMESPACE_NOT_EMPTY;
    public static MiResult INVALID_ENUMERATION_CONTEXT;
    public static MiResult INVALID_OPERATION_TIMEOUT;
    public static MiResult PULL_HAS_BEEN_ABANDONED;
    public static MiResult PULL_CANNOT_BE_ABANDONED;
    public static MiResult FILTERED_ENUMERATION_NOT_SUPPORTED;
    public static MiResult CONTINUATION_ON_ERROR_NOT_SUPPORTED;
    public static MiResult SERVER_LIMITS_EXCEEDED;
    public static MiResult SERVER_IS_SHUTTING_DOWN;
}
internal enum Microsoft.Management.Infrastructure.Native.MiSubscriptionDeliveryType : Enum {
    public int value__;
    public static MiSubscriptionDeliveryType SubscriptionDeliveryType_Pull;
    public static MiSubscriptionDeliveryType SubscriptionDeliveryType_Push;
}
internal enum Microsoft.Management.Infrastructure.Native.MiType : Enum {
    public int value__;
    public static MiType Boolean;
    public static MiType UInt8;
    public static MiType SInt8;
    public static MiType UInt16;
    public static MiType SInt16;
    public static MiType UInt32;
    public static MiType SInt32;
    public static MiType UInt64;
    public static MiType SInt64;
    public static MiType Real32;
    public static MiType Real64;
    public static MiType Char16;
    public static MiType DateTime;
    public static MiType String;
    public static MiType Reference;
    public static MiType Instance;
    public static MiType BooleanArray;
    public static MiType UInt8Array;
    public static MiType SInt8Array;
    public static MiType UInt16Array;
    public static MiType SInt16Array;
    public static MiType UInt32Array;
    public static MiType SInt32Array;
    public static MiType UInt64Array;
    public static MiType SInt64Array;
    public static MiType Real32Array;
    public static MiType Real64Array;
    public static MiType Char16Array;
    public static MiType DateTimeArray;
    public static MiType StringArray;
    public static MiType ReferenceArray;
    public static MiType InstanceArray;
}
internal enum Microsoft.Management.Infrastructure.Native.MIWriteMessageChannel : Enum {
    public int value__;
    public static MIWriteMessageChannel MIWriteMessageChannelWarning;
    public static MIWriteMessageChannel MIWriteMessageChannelVerbose;
    public static MIWriteMessageChannel MIWriteMessageChannelDebug;
}
internal class Microsoft.Management.Infrastructure.Native.NativeCimCredential : object {
    internal static void CreateCimCredential(string authenticationMechanism, NativeCimCredentialHandle& credentialHandle);
    internal static void CreateCimCredential(string authenticationMechanism, string domain, string userName, SecureString password, NativeCimCredentialHandle& credentialHandle);
    internal static void CreateCimCredential(string authenticationMechanism, string certificateThumbprint, NativeCimCredentialHandle& credentialHandle);
}
internal class Microsoft.Management.Infrastructure.Native.NativeCimCredentialHandle : SafeHandleZeroOrMinusOneIsInvalidCore {
    private SecureString passwordSecureStr;
    private bool credentialIsCretificate;
    internal NativeCimCredentialHandle(IntPtr handle, bool bIsCertificate, SecureString secureStr);
    internal SecureString GetSecureString();
    [ConditionalAttribute("DEBUG")]
internal void AssertValidInternalState();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Management.Infrastructure.Native.OperationCallbackProcessingContext : object {
    private bool inUserCode;
    private object managedOperationContext;
    internal object ManagedOperationContext { get; }
    internal bool InUserCode { get; internal set; }
    internal OperationCallbackProcessingContext(object managedOperationContext);
    internal bool get_InUserCode();
    internal void set_InUserCode(bool value);
    internal object get_ManagedOperationContext();
}
internal class Microsoft.Management.Infrastructure.Native.OperationCallbacks : object {
    private object <backing_store>ManagedOperationContext;
    private InternalErrorCallbackDelegate <backing_store>InternalErrorCallback;
    private InstanceResultCallbackDelegate <backing_store>InstanceResultCallback;
    private StreamedParameterCallbackDelegate <backing_store>StreamedParameterCallback;
    private WriteMessageCallbackDelegate <backing_store>WriteMessageCallback;
    private WriteProgressCallbackDelegate <backing_store>WriteProgressCallback;
    private WriteErrorCallbackDelegate <backing_store>WriteErrorCallback;
    private PromptUserCallbackDelegate <backing_store>PromptUserCallback;
    private ClassCallbackDelegate <backing_store>ClassCallback;
    private IndicationResultCallbackDelegate <backing_store>IndicationResultCallback;
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal IndicationResultCallbackDelegate IndicationResultCallback { get; internal set; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal ClassCallbackDelegate ClassCallback { get; internal set; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal PromptUserCallbackDelegate PromptUserCallback { get; internal set; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal WriteErrorCallbackDelegate WriteErrorCallback { get; internal set; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal WriteProgressCallbackDelegate WriteProgressCallback { get; internal set; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal WriteMessageCallbackDelegate WriteMessageCallback { get; internal set; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal StreamedParameterCallbackDelegate StreamedParameterCallback { get; internal set; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal InstanceResultCallbackDelegate InstanceResultCallback { get; internal set; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal InternalErrorCallbackDelegate InternalErrorCallback { get; internal set; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal object ManagedOperationContext { get; internal set; }
    private static OperationCallbacks();
    internal object get_ManagedOperationContext();
    internal void set_ManagedOperationContext(object __set_formal);
    internal InternalErrorCallbackDelegate get_InternalErrorCallback();
    internal void set_InternalErrorCallback(InternalErrorCallbackDelegate __set_formal);
    internal InstanceResultCallbackDelegate get_InstanceResultCallback();
    internal void set_InstanceResultCallback(InstanceResultCallbackDelegate __set_formal);
    internal StreamedParameterCallbackDelegate get_StreamedParameterCallback();
    internal void set_StreamedParameterCallback(StreamedParameterCallbackDelegate __set_formal);
    internal WriteMessageCallbackDelegate get_WriteMessageCallback();
    internal void set_WriteMessageCallback(WriteMessageCallbackDelegate __set_formal);
    internal WriteProgressCallbackDelegate get_WriteProgressCallback();
    internal void set_WriteProgressCallback(WriteProgressCallbackDelegate __set_formal);
    internal WriteErrorCallbackDelegate get_WriteErrorCallback();
    internal void set_WriteErrorCallback(WriteErrorCallbackDelegate __set_formal);
    internal PromptUserCallbackDelegate get_PromptUserCallback();
    internal void set_PromptUserCallback(PromptUserCallbackDelegate __set_formal);
    internal ClassCallbackDelegate get_ClassCallback();
    internal void set_ClassCallback(ClassCallbackDelegate __set_formal);
    internal IndicationResultCallbackDelegate get_IndicationResultCallback();
    internal void set_IndicationResultCallback(IndicationResultCallbackDelegate __set_formal);
    internal static void InvokeWithUserFilteredExceptionHandler(Action tryBody, Func`2<Exception, bool> userFilter, Action`1<Exception> catchBody);
    internal bool SetMiOperationCallbacks(_MI_OperationCallbacks* pmiOperationCallbacks, MI_OperationWrapper* pmiOperationWrapper);
}
internal class Microsoft.Management.Infrastructure.Native.OperationCallbacksDefinitions : object {
    internal static void InstanceResultAppDomainProxy(_MI_Operation* pmiOperation, Void* callbackContext, _MI_Instance modopt(System.Runtime.CompilerServices.IsConst)* pmiInstance, byte moreResults, _MI_Result resultCode, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* errorString, _MI_Instance modopt(System.Runtime.CompilerServices.IsConst)* pmiErrorDetails, method resultAcknowledgement);
    internal static void StreamedParameterResultAppDomainProxy(_MI_Operation* pmiOperation, Void* callbackContext, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* wszParameterName, _MI_Type miType, _MI_Value modopt(System.Runtime.CompilerServices.IsConst)* pmiParameterValue, method resultAcknowledgement);
    internal static void WriteMessageAppDomainProxy(_MI_Operation* pmiOperation, Void* callbackContext, UInt32 channel, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* wszMessage);
    internal static void WriteProgressAppDomainProxy(_MI_Operation* pmiOperation, Void* callbackContext, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* wszActivity, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* wszCurrentOperation, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* wszStatusDescription, UInt32 percentageComplete, UInt32 secondsRemaining);
    internal static void WriteErrorAppDomainProxy(_MI_Operation* pmiOperation, Void* callbackContext, _MI_Instance* pmiInstance, method writeErrorResult);
    internal static void PromptUserAppDomainProxy(_MI_Operation* pmiOperation, Void* callbackContext, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* wszMessage, _MI_PromptType promptType, method promptUserResult);
    internal static void ClassAppDomainProxy(_MI_Operation* pmiOperation, Void* callbackContext, _MI_Class modopt(System.Runtime.CompilerServices.IsConst)* pmiClass, byte moreResults, _MI_Result resultCode, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* errorString, _MI_Instance modopt(System.Runtime.CompilerServices.IsConst)* pmiErrorDetails, method resultAcknowledgement);
    internal static void IndicationAppDomainProxy(_MI_Operation* pmiOperation, Void* callbackContext, _MI_Instance modopt(System.Runtime.CompilerServices.IsConst)* pmiInstance, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* bookmark, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* machineID, byte moreResults, _MI_Result resultCode, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* errorString, _MI_Instance modopt(System.Runtime.CompilerServices.IsConst)* pmiErrorDetails, method resultAcknowledgement);
}
internal class Microsoft.Management.Infrastructure.Native.OperationHandle : SafeHandleZeroOrMinusOneIsInvalidCore {
    private object cancelVsReleaseLock;
    internal OperationHandle(IntPtr handle, bool ownsHandle);
    internal MiResult Cancel(MiCancellationReason reason);
    [ConditionalAttribute("DEBUG")]
internal void AssertValidInternalState();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Management.Infrastructure.Native.OperationMethods : object {
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2001:AvoidCallingProblematicMethods")]
internal static MiResult GetInstance(OperationHandle operationHandle, InstanceHandle& instanceHandle, Boolean& moreResults, MiResult& result, String& errorMessage, InstanceHandle& completionDetails);
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2001:AvoidCallingProblematicMethods")]
internal static MiResult GetIndication(OperationHandle operationHandle, InstanceHandle& instanceHandle, String& bookmark, String& machineID, Boolean& moreResults, MiResult& result, String& errorMessage, InstanceHandle& completionDetails);
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2001:AvoidCallingProblematicMethods")]
internal static MiResult GetClass(OperationHandle operationHandle, ClassHandle& classHandle, Boolean& moreResults, MiResult& result, String& errorMessage, InstanceHandle& completionDetails);
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2001:AvoidCallingProblematicMethods")]
internal static MiResult Cancel(OperationHandle operationHandle, MiCancellationReason cancellationReason);
}
internal class Microsoft.Management.Infrastructure.Native.OperationOptionsHandle : SafeHandleZeroOrMinusOneIsInvalidCore {
    internal OperationOptionsHandle(IntPtr handle);
    [ConditionalAttribute("DEBUG")]
internal void AssertValidInternalState();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Management.Infrastructure.Native.OperationOptionsMethods : object {
    internal static MiResult SetTimeout(OperationOptionsHandle operationOptionsHandle, TimeSpan timeout);
    internal static MiResult SetResourceUriPrefix(OperationOptionsHandle operationOptionsHandle, string resourceUriPrefix);
    internal static MiResult SetResourceUri(OperationOptionsHandle operationOptionsHandle, string resourceUri);
    internal static MiResult SetUseMachineID(OperationOptionsHandle operationOptionsHandle, bool useMachineId);
    internal static MiResult SetOption(OperationOptionsHandle operationOptionsHandle, string optionName, UInt32 optionValue);
    internal static MiResult SetOption(OperationOptionsHandle operationOptionsHandle, string optionName, string optionValue);
    internal static MiResult SetCustomOption(OperationOptionsHandle operationOptionsHandle, string optionName, object optionValue, MiType miType, bool mustComply);
    internal static MiResult SetWriteErrorModeOption(OperationOptionsHandle operationOptionsHandle, MiCallbackMode mode);
    internal static MiResult SetPromptUserModeOption(OperationOptionsHandle operationOptionsHandle, MiCallbackMode mode);
    internal static MiResult SetEnableChannelOption(OperationOptionsHandle operationOptionsHandle, UInt32 channel);
    internal static MiResult SetDisableChannelOption(OperationOptionsHandle operationOptionsHandle, UInt32 channel);
    internal static MiResult SetPromptUserRegularMode(OperationOptionsHandle operationOptionsHandle, MiCallbackMode mode, bool ackValue);
    internal static MiResult GetTimeout(OperationOptionsHandle operationOptionsHandle, TimeSpan& timeout);
    internal static MiResult GetResourceUriPrefix(OperationOptionsHandle operationOptionsHandle, String& resourceUriPrefix);
    internal static MiResult GetResourceUri(OperationOptionsHandle operationOptionsHandle, String& resourceUri);
    internal static MiResult GetUseMachineID(OperationOptionsHandle operationOptionsHandle, Boolean& useMachineId);
    internal static MiResult GetWriteErrorModeOption(OperationOptionsHandle operationOptionsHandle, MiCallbackMode& mode);
    internal static MiResult GetPromptUserModeOption(OperationOptionsHandle operationOptionsHandle, MiCallbackMode& mode);
    internal static MiResult Clone(OperationOptionsHandle operationOptionsHandle, OperationOptionsHandle& newOperationOptionsHandle);
}
internal abstract class Microsoft.Management.Infrastructure.Native.SafeHandleZeroOrMinusOneIsInvalidCore : SafeHandle {
    public bool IsInvalid { get; }
    protected SafeHandleZeroOrMinusOneIsInvalidCore(bool ownsHandle);
    public virtual bool get_IsInvalid();
}
internal class Microsoft.Management.Infrastructure.Native.SerializerHandle : SafeHandleZeroOrMinusOneIsInvalidCore {
    internal SerializerHandle(IntPtr handle);
    [ConditionalAttribute("DEBUG")]
internal void AssertValidInternalState();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Management.Infrastructure.Native.SerializerMethods : object {
    internal static MiResult SerializeInstance(SerializerHandle serializerHandle, UInt32 flags, InstanceHandle instanceHandle, Byte[] outputBuffer, UInt32 offset, UInt32& outputBufferUsed);
    internal static MiResult SerializeClass(SerializerHandle serializerHandle, UInt32 flags, ClassHandle instanceHandle, Byte[] outputBuffer, UInt32 offset, UInt32& outputBufferUsed);
}
internal class Microsoft.Management.Infrastructure.Native.SessionHandle : SafeHandleZeroOrMinusOneIsInvalidCore {
    private IntPtr handleToSecurityTokenUsedForCreation;
    private int releaseState;
    internal SessionHandle(IntPtr handle);
    [ConditionalAttribute("DEBUG")]
internal void AssertValidInternalState();
    internal MiResult ReleaseHandleAsynchronously(OnSessionHandleReleasedDelegate completionCallback);
    internal MiResult ReleaseHandleSynchronously();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Management.Infrastructure.Native.SessionHandleCallbackDefinitions : object {
    internal static void SessionHandle_ReleaseHandle_CallbackWrapper_Invoke_Managed(_SessionHandle_ReleaseHandle_CallbackWrapper* pCallbackWrapper);
    internal static void SessionHandle_ReleaseHandle_CallbackWrapper_Release_Managed(_SessionHandle_ReleaseHandle_CallbackWrapper* pCallbackWrapper);
}
internal class Microsoft.Management.Infrastructure.Native.SessionMethods : object {
    internal static void AssociatorInstances(SessionHandle sessionHandle, MiOperationFlags operationFlags, OperationOptionsHandle operationOptionsHandle, string namespaceName, InstanceHandle sourceInstance, string assocClass, string resultClass, string sourceRole, string resultRole, bool keysOnly, OperationCallbacks operationCallbacks, OperationHandle& operationHandle);
    internal static void CreateInstance(SessionHandle sessionHandle, MiOperationFlags operationFlags, OperationOptionsHandle operationOptionsHandle, string namespaceName, InstanceHandle instanceHandle, OperationCallbacks operationCallbacks, OperationHandle& operationHandle);
    internal static void DeleteInstance(SessionHandle sessionHandle, MiOperationFlags operationFlags, OperationOptionsHandle operationOptionsHandle, string namespaceName, InstanceHandle instanceHandle, OperationCallbacks operationCallbacks, OperationHandle& operationHandle);
    internal static void GetInstance(SessionHandle sessionHandle, MiOperationFlags operationFlags, OperationOptionsHandle operationOptionsHandle, string namespaceName, InstanceHandle instanceHandle, OperationCallbacks operationCallbacks, OperationHandle& operationHandle);
    internal static void EnumerateInstances(SessionHandle sessionHandle, MiOperationFlags operationFlags, OperationOptionsHandle operationOptionsHandle, string namespaceName, string className, bool keysOnly, OperationCallbacks operationCallbacks, OperationHandle& operationHandle);
    internal static void Invoke(SessionHandle sessionHandle, MiOperationFlags operationFlags, OperationOptionsHandle operationOptionsHandle, string namespaceName, string className, string methodName, InstanceHandle instanceHandleForTargetOfInvocation, InstanceHandle instanceHandleForMethodParameters, OperationCallbacks operationCallbacks, OperationHandle& operationHandle);
    internal static void ModifyInstance(SessionHandle sessionHandle, MiOperationFlags operationFlags, OperationOptionsHandle operationOptionsHandle, string namespaceName, InstanceHandle instanceHandle, OperationCallbacks operationCallbacks, OperationHandle& operationHandle);
    internal static void ReferenceInstances(SessionHandle sessionHandle, MiOperationFlags operationFlags, OperationOptionsHandle operationOptionsHandle, string namespaceName, InstanceHandle sourceInstance, string associationClassName, string sourceRole, bool keysOnly, OperationCallbacks operationCallbacks, OperationHandle& operationHandle);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
internal static void QueryInstances(SessionHandle sessionHandle, MiOperationFlags operationFlags, OperationOptionsHandle operationOptionsHandle, string namespaceName, string queryDialect, string queryExpression, bool keysOnly, OperationCallbacks operationCallbacks, OperationHandle& operationHandle);
    internal static void Subscribe(SessionHandle sessionHandle, MiOperationFlags operationFlags, OperationOptionsHandle operationOptionsHandle, string namespaceName, string queryDialect, string queryExpression, SubscriptionDeliveryOptionsHandle subscriptionDeliveryOptionsHandle, OperationCallbacks operationCallbacks, OperationHandle& operationHandle);
    internal static void GetClass(SessionHandle sessionHandle, MiOperationFlags operationFlags, OperationOptionsHandle operationOptionsHandle, string namespaceName, string className, OperationCallbacks operationCallbacks, OperationHandle& operationHandle);
    internal static void EnumerateClasses(SessionHandle sessionHandle, MiOperationFlags operationFlags, OperationOptionsHandle operationOptionsHandle, string namespaceName, string className, bool classNamesOnly, OperationCallbacks operationCallbacks, OperationHandle& operationHandle);
    internal static void TestConnection(SessionHandle sessionHandle, MiOperationFlags operationFlags, OperationCallbacks operationCallbacks, OperationHandle& operationHandle);
}
internal class Microsoft.Management.Infrastructure.Native.SubscriptionDeliveryOptionsHandle : SafeHandleZeroOrMinusOneIsInvalidCore {
    internal SubscriptionDeliveryOptionsHandle(IntPtr handle);
    [ConditionalAttribute("DEBUG")]
internal void AssertValidInternalState();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Management.Infrastructure.Native.SubscriptionDeliveryOptionsMethods : object {
    internal static MiResult SetString(SubscriptionDeliveryOptionsHandle OptionsHandle, string optionName, string value, UInt32 flags);
    internal static MiResult SetNumber(SubscriptionDeliveryOptionsHandle OptionsHandle, string optionName, UInt32 value, UInt32 flags);
    internal static MiResult SetDateTime(SubscriptionDeliveryOptionsHandle OptionsHandle, string optionName, object value, UInt32 flags);
    internal static MiResult SetInterval(SubscriptionDeliveryOptionsHandle OptionsHandle, string optionName, ValueType modopt(System.TimeSpan) modopt(System.Runtime.CompilerServices.IsBoxed) value, UInt32 flags);
    internal static MiResult AddCredentials(SubscriptionDeliveryOptionsHandle OptionsHandle, string optionName, NativeCimCredentialHandle credentials, UInt32 flags);
    internal static MiResult Clone(SubscriptionDeliveryOptionsHandle subscriptionDeliveryOptionsHandle, SubscriptionDeliveryOptionsHandle& newSubscriptionDeliveryOptionsHandle);
}
[NativeCppClassAttribute]
internal enum OFFER_PRIORITY : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum OperationCallbackId : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum OperationDrainingKind : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum ORIENTATION_PREFERENCE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum ReplacesCorHdrNumericDefines : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum SERVICE_DIRECTORY_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum SERVICE_REGISTRY_STATE_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum SYSGEOCLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum SYSGEOTYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum SYSNLS_FUNCTION : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagAR_STATE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagFEEDBACK_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagHANDEDNESS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagINPUT_MESSAGE_DEVICE_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagINPUT_MESSAGE_ORIGIN_ID : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class tagMSG : ValueType {
}
[NativeCppClassAttribute]
internal enum tagPOINTER_BUTTON_CHANGE_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagPOINTER_DEVICE_CURSOR_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagPOINTER_DEVICE_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagPOINTER_INPUT_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class tagRECT : ValueType {
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class tagTEXTMETRICW : ValueType {
}
[NativeCppClassAttribute]
internal enum WIN32_MEMORY_INFORMATION_CLASS : Enum {
    public int value__;
}
