public abstract class AsyncIO.AsyncSocket : object {
    private SocketOptionName IPv6Only;
    [CompilerGeneratedAttribute]
private AddressFamily <AddressFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private SocketType <SocketType>k__BackingField;
    [CompilerGeneratedAttribute]
private ProtocolType <ProtocolType>k__BackingField;
    public AddressFamily AddressFamily { get; private set; }
    public SocketType SocketType { get; private set; }
    public ProtocolType ProtocolType { get; private set; }
    public IPEndPoint LocalEndPoint { get; }
    public IPEndPoint RemoteEndPoint { get; }
    public bool NoDelay { get; public set; }
    public bool ExclusiveAddressUse { get; public set; }
    public bool DualMode { get; public set; }
    public int ReceiveBufferSize { get; public set; }
    public int SendBufferSize { get; public set; }
    public LingerOption LingerState { get; public set; }
    public bool EnableBroadcast { get; public set; }
    public bool MulticastLoopback { get; public set; }
    public short Ttl { get; public set; }
    internal AsyncSocket(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType);
    public static AsyncSocket Create(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType);
    public static AsyncSocket CreateIPv4Tcp();
    public static AsyncSocket CreateIPv6Tcp();
    [CompilerGeneratedAttribute]
public AddressFamily get_AddressFamily();
    [CompilerGeneratedAttribute]
private void set_AddressFamily(AddressFamily value);
    [CompilerGeneratedAttribute]
public SocketType get_SocketType();
    [CompilerGeneratedAttribute]
private void set_SocketType(SocketType value);
    [CompilerGeneratedAttribute]
public ProtocolType get_ProtocolType();
    [CompilerGeneratedAttribute]
private void set_ProtocolType(ProtocolType value);
    public abstract virtual IPEndPoint get_LocalEndPoint();
    public abstract virtual IPEndPoint get_RemoteEndPoint();
    public bool get_NoDelay();
    public void set_NoDelay(bool value);
    public bool get_ExclusiveAddressUse();
    public void set_ExclusiveAddressUse(bool value);
    public bool get_DualMode();
    public void set_DualMode(bool value);
    public int get_ReceiveBufferSize();
    public void set_ReceiveBufferSize(int value);
    public int get_SendBufferSize();
    public void set_SendBufferSize(int value);
    public LingerOption get_LingerState();
    public void set_LingerState(LingerOption value);
    public bool get_EnableBroadcast();
    public void set_EnableBroadcast(bool value);
    public bool get_MulticastLoopback();
    public void set_MulticastLoopback(bool value);
    public short get_Ttl();
    public void set_Ttl(short value);
    public abstract virtual void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, bool optionValue);
    public abstract virtual void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, Byte[] optionValue);
    public abstract virtual void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, object optionValue);
    public abstract virtual void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionValue);
    public abstract virtual object GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName);
    public abstract virtual void GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, Byte[] optionValue);
    public abstract virtual Byte[] GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionLength);
    public abstract virtual int IOControl(IOControlCode ioControlCode, Byte[] optionInValue, Byte[] optionOutValue);
    public abstract virtual void Dispose();
    public abstract virtual void Bind(IPEndPoint localEndPoint);
    public abstract virtual void Listen(int backlog);
    public abstract virtual void Connect(IPEndPoint endPoint);
    [ObsoleteAttribute("Use Accept without parameter and GetAcceptedSocket")]
public abstract virtual void Accept(AsyncSocket socket);
    public abstract virtual void Accept();
    public abstract virtual AsyncSocket GetAcceptedSocket();
    public abstract virtual void Send(Byte[] buffer, int offset, int count, SocketFlags flags);
    public abstract virtual void Receive(Byte[] buffer, int offset, int count, SocketFlags flags);
}
public abstract class AsyncIO.CompletionPort : object {
    public static CompletionPort Create();
    public abstract virtual void Dispose();
    public abstract virtual bool GetQueuedCompletionStatus(int timeout, CompletionStatus& completionStatus);
    public abstract virtual bool GetMultipleQueuedCompletionStatus(int timeout, CompletionStatus[] completionStatuses, Int32& removed);
    public abstract virtual void AssociateSocket(AsyncSocket socket, object state);
    public abstract virtual void Signal(object state);
}
public class AsyncIO.CompletionStatus : ValueType {
    [CompilerGeneratedAttribute]
private AsyncSocket <AsyncSocket>k__BackingField;
    [CompilerGeneratedAttribute]
private object <State>k__BackingField;
    [CompilerGeneratedAttribute]
private OperationType <OperationType>k__BackingField;
    [CompilerGeneratedAttribute]
private SocketError <SocketError>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BytesTransferred>k__BackingField;
    public AsyncSocket AsyncSocket { get; private set; }
    public object State { get; internal set; }
    public OperationType OperationType { get; internal set; }
    public SocketError SocketError { get; internal set; }
    public int BytesTransferred { get; internal set; }
    internal CompletionStatus(AsyncSocket asyncSocket, object state, OperationType operationType, SocketError socketError, int bytesTransferred);
    [CompilerGeneratedAttribute]
public AsyncSocket get_AsyncSocket();
    [CompilerGeneratedAttribute]
private void set_AsyncSocket(AsyncSocket value);
    [CompilerGeneratedAttribute]
public object get_State();
    [CompilerGeneratedAttribute]
internal void set_State(object value);
    [CompilerGeneratedAttribute]
public OperationType get_OperationType();
    [CompilerGeneratedAttribute]
internal void set_OperationType(OperationType value);
    [CompilerGeneratedAttribute]
public SocketError get_SocketError();
    [CompilerGeneratedAttribute]
internal void set_SocketError(SocketError value);
    [CompilerGeneratedAttribute]
public int get_BytesTransferred();
    [CompilerGeneratedAttribute]
internal void set_BytesTransferred(int value);
}
internal class AsyncIO.DotNet.CompletionPort : CompletionPort {
    private BlockingCollection`1<CompletionStatus> m_queue;
    internal void Queue(CompletionStatus& completionStatus);
    public virtual void Dispose();
    public virtual bool GetQueuedCompletionStatus(int timeout, CompletionStatus& completionStatus);
    public virtual bool GetMultipleQueuedCompletionStatus(int timeout, CompletionStatus[] completionStatuses, Int32& removed);
    public virtual void AssociateSocket(AsyncSocket asyncSocket, object state);
    public virtual void Signal(object state);
}
internal class AsyncIO.DotNet.NativeSocket : AsyncSocket {
    private Socket m_socket;
    private CompletionPort m_completionPort;
    private object m_state;
    private SocketAsyncEventArgs m_inSocketAsyncEventArgs;
    private SocketAsyncEventArgs m_outSocketAsyncEventArgs;
    private NativeSocket m_acceptedSocket;
    public IPEndPoint LocalEndPoint { get; }
    public IPEndPoint RemoteEndPoint { get; }
    public NativeSocket(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType);
    private NativeSocket(Socket socket);
    public virtual IPEndPoint get_LocalEndPoint();
    public virtual IPEndPoint get_RemoteEndPoint();
    private void OnAsyncCompleted(object sender, SocketAsyncEventArgs e);
    internal void SetCompletionPort(CompletionPort completionPort, object state);
    public virtual void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, bool optionValue);
    public virtual void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, Byte[] optionValue);
    public virtual void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, object optionValue);
    public virtual void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionValue);
    public virtual object GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName);
    public virtual void GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, Byte[] optionValue);
    public virtual Byte[] GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionLength);
    public virtual int IOControl(IOControlCode ioControlCode, Byte[] optionInValue, Byte[] optionOutValue);
    public virtual void Dispose();
    public virtual void Bind(IPEndPoint localEndPoint);
    public virtual void Listen(int backlog);
    public virtual void Connect(IPEndPoint endPoint);
    public virtual void Accept();
    public virtual AsyncSocket GetAcceptedSocket();
    [ObsoleteAttribute("Use Accept without parameter and GetAcceptedSocket")]
public virtual void Accept(AsyncSocket socket);
    public virtual void Send(Byte[] buffer, int offset, int count, SocketFlags flags);
    public virtual void Receive(Byte[] buffer, int offset, int count, SocketFlags flags);
}
public static class AsyncIO.ForceDotNet : object {
    [CompilerGeneratedAttribute]
private static bool <Forced>k__BackingField;
    internal static bool Forced { get; private set; }
    [CompilerGeneratedAttribute]
internal static bool get_Forced();
    [CompilerGeneratedAttribute]
private static void set_Forced(bool value);
    public static void Force();
    public static void Unforce();
}
public enum AsyncIO.OperationType : Enum {
    public int value__;
    public static OperationType Send;
    public static OperationType Receive;
    public static OperationType Accept;
    public static OperationType Connect;
    public static OperationType Disconnect;
    public static OperationType Signal;
}
[ExtensionAttribute]
public static class AsyncIO.SocketExtensions : object {
    [ExtensionAttribute]
public static void Bind(AsyncSocket socket, IPAddress ipAddress, int port);
    [ExtensionAttribute]
public static void Connect(AsyncSocket socket, IPAddress ipAddress, int port);
    [ExtensionAttribute]
public static void Connect(AsyncSocket socket, string host, int port);
    [ExtensionAttribute]
public static void Send(AsyncSocket socket, Byte[] buffer);
    [ExtensionAttribute]
public static void Receive(AsyncSocket socket, Byte[] buffer);
}
internal class AsyncIO.Windows.AcceptExDelegate : MulticastDelegate {
    public AcceptExDelegate(object object, IntPtr method);
    public virtual bool Invoke(IntPtr listenSocketHandle, IntPtr acceptSocketHandle, IntPtr buffer, int len, int localAddressLength, int remoteAddressLength, Int32& bytesReceived, IntPtr overlapped);
    public virtual IAsyncResult BeginInvoke(IntPtr listenSocketHandle, IntPtr acceptSocketHandle, IntPtr buffer, int len, int localAddressLength, int remoteAddressLength, Int32& bytesReceived, IntPtr overlapped, AsyncCallback callback, object object);
    public virtual bool EndInvoke(Int32& bytesReceived, IAsyncResult result);
}
internal class AsyncIO.Windows.CompletionPort : CompletionPort {
    private IntPtr m_completionPortHandle;
    private IntPtr InvalidCompletionPort;
    private IntPtr InvalidCompletionPortMinusOne;
    private IntPtr SignalPostCompletionKey;
    private IntPtr SocketCompletionKey;
    private IntPtr SocketManualCompletionKey;
    private static int WaitTimeoutError;
    private static SocketError ConnectionAborted;
    private static SocketError NetworkNameDeleted;
    private bool m_disposed;
    private ConcurrentQueue`1<object> m_signalQueue;
    private OverlappedEntry[] m_overlappedEntries;
    private GCHandle m_overlappedEntriesHandle;
    private IntPtr m_overlappedEntriesAddress;
    protected virtual override void Finalize();
    public virtual void AssociateSocket(AsyncSocket socket, object state);
    internal void PostCompletionStatus(IntPtr overlapped);
    public virtual bool GetMultipleQueuedCompletionStatus(int timeout, CompletionStatus[] completionStatuses, Int32& removed);
    public virtual bool GetQueuedCompletionStatus(int timeout, CompletionStatus& completionStatus);
    private void HandleCompletionStatus(CompletionStatus& completionStatus, IntPtr overlappedAddress, IntPtr completionKey, int bytesTransferred);
    public virtual void Signal(object state);
    public virtual void Dispose();
}
internal class AsyncIO.Windows.ConnectExDelegate : MulticastDelegate {
    public ConnectExDelegate(object object, IntPtr method);
    public virtual bool Invoke(IntPtr socketHandle, Byte[] socketAddress, int socketAddressSize, IntPtr buffer, int dataLength, Int32& bytesSent, IntPtr overlapped);
    public virtual IAsyncResult BeginInvoke(IntPtr socketHandle, Byte[] socketAddress, int socketAddressSize, IntPtr buffer, int dataLength, Int32& bytesSent, IntPtr overlapped, AsyncCallback callback, object object);
    public virtual bool EndInvoke(Int32& bytesSent, IAsyncResult result);
}
internal class AsyncIO.Windows.IPMulticastRequest : ValueType {
    internal static int Size;
    internal int MulticastAddress;
    internal int InterfaceAddress;
    private static IPMulticastRequest();
}
internal class AsyncIO.Windows.IPv6MulticastRequest : ValueType {
    internal static int Size;
    internal Byte[] MulticastAddress;
    internal int InterfaceIndex;
    private static IPv6MulticastRequest();
}
internal class AsyncIO.Windows.Linger : ValueType {
    internal ushort OnOff;
    internal ushort Time;
}
internal class AsyncIO.Windows.Overlapped : object {
    private static int Size;
    private static int BytesTransferredOffset;
    private static int OffsetOffset;
    private static int EventOffset;
    private static int ManagedOverlappedOffset;
    private IntPtr m_address;
    private GCHandle m_handle;
    private PinnedBuffer m_pinnedBuffer;
    [CompilerGeneratedAttribute]
private OperationType <OperationType>k__BackingField;
    [CompilerGeneratedAttribute]
private Socket <AsyncSocket>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disposed>k__BackingField;
    [CompilerGeneratedAttribute]
private object <State>k__BackingField;
    public IntPtr Address { get; }
    public long BufferAddress { get; }
    public OperationType OperationType { get; private set; }
    public Socket AsyncSocket { get; private set; }
    public bool Success { get; private set; }
    public bool InProgress { get; private set; }
    public bool Disposed { get; private set; }
    public object State { get; public set; }
    public Overlapped(Socket asyncSocket);
    private static Overlapped();
    public sealed virtual void Dispose();
    private void Free();
    public IntPtr get_Address();
    public long get_BufferAddress();
    [CompilerGeneratedAttribute]
public OperationType get_OperationType();
    [CompilerGeneratedAttribute]
private void set_OperationType(OperationType value);
    [CompilerGeneratedAttribute]
public Socket get_AsyncSocket();
    [CompilerGeneratedAttribute]
private void set_AsyncSocket(Socket value);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
private void set_Success(bool value);
    [CompilerGeneratedAttribute]
public bool get_InProgress();
    [CompilerGeneratedAttribute]
private void set_InProgress(bool value);
    [CompilerGeneratedAttribute]
public bool get_Disposed();
    [CompilerGeneratedAttribute]
private void set_Disposed(bool value);
    [CompilerGeneratedAttribute]
public object get_State();
    [CompilerGeneratedAttribute]
public void set_State(object value);
    public void StartOperation(OperationType operationType);
    public void StartOperation(OperationType operationType, Byte[] buffer);
    public static Overlapped CompleteOperation(IntPtr overlappedAddress);
}
internal class AsyncIO.Windows.OverlappedEntry : ValueType {
    public IntPtr CompletionKey;
    public IntPtr Overlapped;
    public IntPtr Internal;
    public int BytesTransferred;
}
internal class AsyncIO.Windows.PinnedBuffer : object {
    private GCHandle m_handle;
    [CompilerGeneratedAttribute]
private Byte[] <Buffer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Address>k__BackingField;
    public Byte[] Buffer { get; private set; }
    public long Address { get; private set; }
    public PinnedBuffer(Byte[] buffer);
    [CompilerGeneratedAttribute]
public Byte[] get_Buffer();
    [CompilerGeneratedAttribute]
private void set_Buffer(Byte[] value);
    [CompilerGeneratedAttribute]
public long get_Address();
    [CompilerGeneratedAttribute]
private void set_Address(long value);
    public void Switch(Byte[] buffer);
    private void SetBuffer(Byte[] buffer);
    public sealed virtual void Dispose();
}
internal class AsyncIO.Windows.Socket : AsyncSocket {
    private Overlapped m_inOverlapped;
    private Overlapped m_outOverlapped;
    private Connector m_connector;
    private Listener m_listener;
    private bool m_disposed;
    private SocketAddress m_boundAddress;
    private SocketAddress m_remoteAddress;
    [CompilerGeneratedAttribute]
private IntPtr <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private CompletionPort <CompletionPort>k__BackingField;
    public IntPtr Handle { get; private set; }
    public CompletionPort CompletionPort { get; private set; }
    public IPEndPoint RemoteEndPoint { get; }
    public IPEndPoint LocalEndPoint { get; }
    public Socket(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType);
    private static Socket();
    protected virtual override void Finalize();
    private void Dispose(bool disposing);
    public virtual void Dispose();
    [CompilerGeneratedAttribute]
public IntPtr get_Handle();
    [CompilerGeneratedAttribute]
private void set_Handle(IntPtr value);
    [CompilerGeneratedAttribute]
public CompletionPort get_CompletionPort();
    [CompilerGeneratedAttribute]
private void set_CompletionPort(CompletionPort value);
    public virtual IPEndPoint get_RemoteEndPoint();
    public virtual IPEndPoint get_LocalEndPoint();
    private void InitSocket();
    private Delegate LoadDynamicMethod(Guid guid);
    internal void SetCompletionPort(CompletionPort completionPort, object state);
    public virtual void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, Byte[] optionValue);
    public virtual void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionValue);
    public virtual void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, bool optionValue);
    public virtual void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, object optionValue);
    private void SetIPv6MulticastOption(SocketOptionName optionName, IPv6MulticastOption mr);
    private int GetIP4Address(IPAddress ipAddress);
    private void SetMulticastOption(SocketOptionName optionName, MulticastOption mr);
    private void SetLingerOption(LingerOption lref);
    public virtual void GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, Byte[] optionValue);
    public virtual Byte[] GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionLength);
    public virtual object GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName);
    private object GetIPv6MulticastOpt(SocketOptionName optionName);
    private object GetMulticastOpt(SocketOptionName optionName);
    private object GetLingerOpt();
    public virtual int IOControl(IOControlCode ioControlCode, Byte[] optionInValue, Byte[] optionOutValue);
    public virtual void Bind(IPEndPoint localEndPoint);
    public virtual void Listen(int backlog);
    public virtual void Connect(IPEndPoint endPoint);
    internal void UpdateConnect();
    public virtual AsyncSocket GetAcceptedSocket();
    public virtual void Accept();
    public virtual void Accept(AsyncSocket socket);
    internal void UpdateAccept();
    public virtual void Send(Byte[] buffer, int offset, int count, SocketFlags flags);
    public virtual void Receive(Byte[] buffer, int offset, int count, SocketFlags flags);
}
internal class AsyncIO.Windows.SocketAddress : object {
    private Byte[] m_buffer;
    private AddressFamily m_addressFamily;
    private bool m_disposed;
    private GCHandle m_bufferHandle;
    private IntPtr m_bufferAddress;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    public int Size { get; private set; }
    public IntPtr PinnedAddressBuffer { get; }
    public Byte[] Buffer { get; }
    public SocketAddress(AddressFamily addressFamily, int size);
    public SocketAddress(IPAddress ipAddress);
    public SocketAddress(IPAddress ipAddress, int port);
    public IPEndPoint GetEndPoint();
    internal IPAddress GetIPAddress();
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(int value);
    public IntPtr get_PinnedAddressBuffer();
    public sealed virtual void Dispose();
    public Byte[] get_Buffer();
}
[FlagsAttribute]
internal enum AsyncIO.Windows.SocketConstructorFlags : Enum {
    public int value__;
    public static SocketConstructorFlags WSA_FLAG_OVERLAPPED;
    public static SocketConstructorFlags WSA_FLAG_MULTIPOINT_C_ROOT;
    public static SocketConstructorFlags WSA_FLAG_MULTIPOINT_C_LEAF;
    public static SocketConstructorFlags WSA_FLAG_MULTIPOINT_D_ROOT;
    public static SocketConstructorFlags WSA_FLAG_MULTIPOINT_D_LEAF;
}
internal static class AsyncIO.Windows.UnsafeMethods : object {
    public static IntPtr INVALID_HANDLE_VALUE;
    public static Guid WSAID_CONNECTEX;
    public static Guid WSAID_ACCEPT_EX;
    public static int GetExtensionFunctionPointer;
    private static UnsafeMethods();
    public static IntPtr CreateIoCompletionPort(IntPtr fileHandle, IntPtr existingCompletionPort, IntPtr completionKey, UInt32 numberOfConcurrentThreads);
    public static bool GetQueuedCompletionStatus(IntPtr completionPort, Int32& numberOfBytes, IntPtr& completionKey, IntPtr& overlapped, int milliseconds);
    public static bool GetQueuedCompletionStatusEx(IntPtr completionPort, IntPtr completionPortEntries, int count, Int32& removed, int milliseconds, bool alertable);
    public static bool PostQueuedCompletionStatus(IntPtr completionPort, int numberOfBytesTransferred, IntPtr completionKey, IntPtr overlapped);
    public static bool CloseHandle(IntPtr hHandle);
    public static SocketError WSASend(IntPtr socketHandle, WSABuffer& buffer, int bufferCount, Int32& bytesTransferred, SocketFlags socketFlags, IntPtr overlapped, IntPtr completionRoutine);
    public static SocketError WSARecv(IntPtr socketHandle, WSABuffer& buffer, int bufferCount, Int32& bytesTransferred, SocketFlags& socketFlags, IntPtr overlapped, IntPtr completionRoutine);
    public static int WSAIoctl(IntPtr s, int dwIoControlCode, Guid& lpvInBuffer, int cbInBuffer, IntPtr& lpvOutBuffer, int cbOutBuffer, Int32& lpcbBytesReturned, IntPtr lpOverlapped, IntPtr lpCompletionRoutine);
    public static SocketError WSAIoctl_Blocking(IntPtr socketHandle, int ioControlCode, Byte[] inBuffer, int inBufferSize, Byte[] outBuffer, int outBufferSize, Int32& bytesTransferred, IntPtr overlapped, IntPtr completionRoutine);
    public static int bind(IntPtr s, Byte[] socketAddress, int addrsize);
    public static int listen(IntPtr s, int backlog);
    public static IntPtr WSASocket(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType, IntPtr pinnedBuffer, UInt32 group, SocketConstructorFlags flags);
    public static int closesocket(IntPtr s);
    public static SocketError setsockopt(IntPtr socketHandle, SocketOptionLevel optionLevel, SocketOptionName optionName, Byte[] optionValue, int optionLength);
    public static SocketError setsockopt(IntPtr socketHandle, SocketOptionLevel optionLevel, SocketOptionName optionName, Int32& optionValue, int optionLength);
    public static SocketError setsockopt(IntPtr socketHandle, SocketOptionLevel optionLevel, SocketOptionName optionName, Linger& linger, int optionLength);
    public static SocketError setsockopt(IntPtr socketHandle, SocketOptionLevel optionLevel, SocketOptionName optionName, IPv6MulticastRequest& mreq, int optionLength);
    public static SocketError setsockopt(IntPtr socketHandle, SocketOptionLevel optionLevel, SocketOptionName optionName, IPMulticastRequest& mreq, int optionLength);
    public static SocketError getsockopt(IntPtr socketHandle, SocketOptionLevel optionLevel, SocketOptionName optionName, Int32& optionValue, Int32& optionLength);
    public static SocketError getsockopt(IntPtr socketHandle, SocketOptionLevel optionLevel, SocketOptionName optionName, Byte[] optionValue, Int32& optionLength);
    public static SocketError getsockopt(IntPtr socketHandle, SocketOptionLevel optionLevel, SocketOptionName optionName, Linger& optionValue, Int32& optionLength);
    public static SocketError getsockopt(IntPtr socketHandle, SocketOptionLevel optionLevel, SocketOptionName optionName, IPMulticastRequest& optionValue, Int32& optionLength);
    public static SocketError getsockopt(IntPtr socketHandle, SocketOptionLevel optionLevel, SocketOptionName optionName, IPv6MulticastRequest& optionValue, Int32& optionLength);
    public static SocketError getsockname(IntPtr socketHandle, Byte[] socketAddress, Int32& socketAddressSize);
    public static SocketError getpeername(IntPtr socketHandle, Byte[] socketAddress, Int32& socketAddressSize);
    internal static bool WSAGetOverlappedResult(IntPtr socketHandle, IntPtr overlapped, Int32& bytesTransferred, bool wait, SocketFlags& socketFlags);
    public static bool CancelIoEx(IntPtr hFile, IntPtr overlapped);
    public static bool CancelIo(IntPtr hFile);
}
internal class AsyncIO.Windows.WSABuffer : ValueType {
    internal int Length;
    internal IntPtr Pointer;
}
