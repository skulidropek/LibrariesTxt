internal static class AssemblyInfo : object {
    public static string PublicKey;
    public static string MoqPublicKey;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.ApplicationInsights.Common.ActiveSubsciptionManager : object {
    private object lockObject;
    private HashSet`1<object> subscriptions;
    private object active;
    public void Attach(object subscription);
    public void Detach(object subscription);
    public bool IsActive(object subscriber);
}
internal class Microsoft.ApplicationInsights.Common.ApplicationNameProvider : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    private static string GetApplicationName();
}
[EventSourceAttribute]
internal class Microsoft.ApplicationInsights.Common.AppMapCorrelationEventSource : EventSource {
    public static AppMapCorrelationEventSource Log;
    private ApplicationNameProvider applicationNameProvider;
    private static AppMapCorrelationEventSource();
    [EventAttribute("1")]
public void FetchAppIdFailed(string exception, string appDomainName);
    [EventAttribute("2")]
public void SetCrossComponentCorrelationHeaderFailed(string exception, string appDomainName);
    [EventAttribute("3")]
public void GetCrossComponentCorrelationHeaderFailed(string exception, string appDomainName);
    [EventAttribute("4")]
public void GetComponentRoleNameHeaderFailed(string exception, string appDomainName);
    [EventAttribute("5")]
public void UnknownError(string exception, string appDomainName);
    [EventAttribute("6")]
public void FetchAppIdFailedWithResponseCode(string httpStatusCode, string appDomainName);
}
internal static class Microsoft.ApplicationInsights.Common.ArrayExtensions : object {
    internal static T[] Empty();
}
[ExtensionAttribute]
public static class Microsoft.ApplicationInsights.Common.ConditionalWeakTableExtensions : object {
    [ExtensionAttribute]
public static void AddIfNotExists(ConditionalWeakTable`2<TKey, TValue> conditionalWeakTable, TKey key, TValue value);
}
internal class Microsoft.ApplicationInsights.Common.ExceptionUtilities : object {
    internal static string GetExceptionDetailString(Exception ex);
}
internal static class Microsoft.ApplicationInsights.Common.ExperimentalConstants : object {
    public static string DeferRequestTrackingProperties;
}
[ExtensionAttribute]
internal static class Microsoft.ApplicationInsights.Common.GuidExtensions : object {
    [ExtensionAttribute]
public static string ToStringInvariant(Guid guid, string format);
}
internal static class Microsoft.ApplicationInsights.Common.HeadersUtilities : object {
    public static string GetHeaderKeyValue(IEnumerable`1<string> headerValues, string keyName);
    public static IDictionary`2<string, string> GetHeaderDictionary(IEnumerable`1<string> headerValues);
    public static IEnumerable`1<string> UpdateHeaderWithKeyValue(IEnumerable`1<string> headerValues, string keyName, string keyValue);
    public static string SanitizeString(string input);
    private static string TrimSubstring(string value, int startIndex, int endIndex);
}
public static class Microsoft.ApplicationInsights.Common.InjectionGuardConstants : object {
    public static int AppIdMaxLength;
    public static int RequestHeaderMaxLength;
    public static int ContextHeaderKeyMaxLength;
    public static int ContextHeaderValueMaxLength;
    public static int TraceParentHeaderMaxLength;
    public static int TraceStateHeaderMaxLength;
    public static int TraceStateMaxPairs;
    public static int QuickPulseResponseHeaderMaxLength;
}
internal class Microsoft.ApplicationInsights.Common.PropertyFetcher : object {
    private string propertyName;
    private PropertyFetch modreq(System.Runtime.CompilerServices.IsVolatile) innerFetcher;
    public PropertyFetcher(string propertyName);
    public object Fetch(object obj);
}
internal static class Microsoft.ApplicationInsights.Common.RequestResponseHeaders : object {
    public static string RequestContextHeader;
    public static string RequestContextCorrelationSourceKey;
    public static string RequestContextCorrelationTargetKey;
    public static string StandardParentIdHeader;
    public static string StandardRootIdHeader;
    public static string RequestIdHeader;
    public static string CorrelationContextHeader;
    public static string AccessControlExposeHeadersHeader;
}
internal class Microsoft.ApplicationInsights.Common.SdkVersionUtils : object {
    internal static string GetSdkVersion(string versionPrefix);
}
public static class Microsoft.ApplicationInsights.Common.StringUtilities : object {
    public static string EnforceMaxLength(string input, int maxLength);
    [ObsoleteAttribute("Use System.Diagnostics.ActivityTraceId.CreateRandom().ToHexString() instead.")]
public static string GenerateTraceId();
    [ObsoleteAttribute("Use System.Diagnostics.ActivitySpanId.CreateRandom().ToHexString() instead.")]
public static string GenerateSpanId();
    [ObsoleteAttribute("Obsolete, use spanId instead")]
public static string FormatRequestId(string traceId, string spanId);
}
[ExtensionAttribute]
internal static class Microsoft.ApplicationInsights.Common.WebHeaderCollectionExtensions : object {
    private static string KeyValuePairSeparator;
    private static int CorrelationContextHeaderMaxLength;
    private static int CorrelationContextMaxPairs;
    [ExtensionAttribute]
public static string GetNameValueHeaderValue(NameValueCollection headers, string headerName, string keyName);
    [ExtensionAttribute]
public static IDictionary`2<string, string> GetNameValueCollectionFromHeader(NameValueCollection headers, string headerName);
    [ExtensionAttribute]
public static void SetNameValueHeaderValue(NameValueCollection headers, string headerName, string keyName, string value);
    [ExtensionAttribute]
public static void SetHeaderFromNameValueCollection(NameValueCollection headers, string headerName, IEnumerable`1<KeyValuePair`2<string, string>> keyValuePairs);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetHeaderValue(NameValueCollection headers, string headerName, int maxStringLength, int maxItems);
    [ExtensionAttribute]
public static void ReadActivityBaggage(NameValueCollection headers, Activity activity);
    private static string FormatKeyValueHeader(string key, string value);
}
[ExtensionAttribute]
public static class Microsoft.ApplicationInsights.DependencyCollector.DependencyTelemetryExtensions : object {
    [ExtensionAttribute]
public static bool TryGetHttpRequestOperationDetail(DependencyTelemetry telemetry, HttpRequestMessage& message);
    [ExtensionAttribute]
public static bool TryGetHttpResponseOperationDetail(DependencyTelemetry telemetry, HttpResponseMessage& message);
    [ExtensionAttribute]
public static bool TryGetHttpResponseHeadersOperationDetail(DependencyTelemetry telemetry, WebHeaderCollection& headers);
}
public class Microsoft.ApplicationInsights.DependencyCollector.DependencyTrackingTelemetryModule : object {
    private object lockObject;
    private HttpCoreDiagnosticSourceListener httpCoreDiagnosticSourceListener;
    private TelemetryDiagnosticSourceListener telemetryDiagnosticSourceListener;
    private SqlClientDiagnosticSourceListener sqlClientDiagnosticSourceListener;
    private AzureSdkDiagnosticListenerSubscriber azureSdkDiagnosticListener;
    private TelemetryConfiguration telemetryConfiguration;
    private bool disposed;
    [CompilerGeneratedAttribute]
private bool <DisableRuntimeInstrumentation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableDiagnosticSourceInstrumentation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableLegacyCorrelationHeadersInjection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableW3CHeadersInjection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableRequestIdHeaderInjectionInW3CMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSqlCommandTextInstrumentation>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <ExcludeComponentCorrelationHttpHeadersOnDomains>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <IncludeDiagnosticSourceActivities>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetComponentCorrelationHttpHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableAzureSdkTelemetryListener>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProfileQueryEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    public bool DisableRuntimeInstrumentation { get; public set; }
    public bool DisableDiagnosticSourceInstrumentation { get; public set; }
    public bool EnableLegacyCorrelationHeadersInjection { get; public set; }
    [ObsoleteAttribute("This field has been deprecated. Please set Activity.DefaultIdFormat = ActivityIdFormat.Hierarchical; Activity.ForceDefaultIdFormat = true;")]
public bool EnableW3CHeadersInjection { get; public set; }
    public bool EnableRequestIdHeaderInjectionInW3CMode { get; public set; }
    public bool EnableSqlCommandTextInstrumentation { get; public set; }
    public ICollection`1<string> ExcludeComponentCorrelationHttpHeadersOnDomains { get; }
    public ICollection`1<string> IncludeDiagnosticSourceActivities { get; }
    public bool SetComponentCorrelationHttpHeaders { get; public set; }
    public bool EnableAzureSdkTelemetryListener { get; public set; }
    [ObsoleteAttribute("This field has been deprecated. Please set TelemetryConfiguration.Active.ApplicationIdProvider = new ApplicationInsightsApplicationIdProvider() and customize ApplicationInsightsApplicationIdProvider.ProfileQueryEndpoint.")]
public string ProfileQueryEndpoint { get; public set; }
    internal bool IsInitialized { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_DisableRuntimeInstrumentation();
    [CompilerGeneratedAttribute]
public void set_DisableRuntimeInstrumentation(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableDiagnosticSourceInstrumentation();
    [CompilerGeneratedAttribute]
public void set_DisableDiagnosticSourceInstrumentation(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableLegacyCorrelationHeadersInjection();
    [CompilerGeneratedAttribute]
public void set_EnableLegacyCorrelationHeadersInjection(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableW3CHeadersInjection();
    [CompilerGeneratedAttribute]
public void set_EnableW3CHeadersInjection(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableRequestIdHeaderInjectionInW3CMode();
    [CompilerGeneratedAttribute]
public void set_EnableRequestIdHeaderInjectionInW3CMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableSqlCommandTextInstrumentation();
    [CompilerGeneratedAttribute]
public void set_EnableSqlCommandTextInstrumentation(bool value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_ExcludeComponentCorrelationHttpHeadersOnDomains();
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_IncludeDiagnosticSourceActivities();
    [CompilerGeneratedAttribute]
public bool get_SetComponentCorrelationHttpHeaders();
    [CompilerGeneratedAttribute]
public void set_SetComponentCorrelationHttpHeaders(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableAzureSdkTelemetryListener();
    [CompilerGeneratedAttribute]
public void set_EnableAzureSdkTelemetryListener(bool value);
    [CompilerGeneratedAttribute]
public string get_ProfileQueryEndpoint();
    [CompilerGeneratedAttribute]
public void set_ProfileQueryEndpoint(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private void set_IsInitialized(bool value);
    public sealed virtual void Dispose();
    public sealed virtual void Initialize(TelemetryConfiguration configuration);
    protected virtual void Dispose(bool disposing);
    private static void PrepareFirstActivity();
}
public class Microsoft.ApplicationInsights.DependencyCollector.HttpDependenciesParsingTelemetryInitializer : object {
    public sealed virtual void Initialize(ITelemetry telemetry);
}
internal class Microsoft.ApplicationInsights.DependencyCollector.Implementation.ApplicationInsightsUrlFilter : object {
    internal static string TelemetryServiceEndpoint;
    internal static string QuickPulseServiceEndpoint;
    internal Uri TelemetryServiceEndpointUri;
    private TelemetryConfiguration telemetryConfiguration;
    private KeyValuePair`2<string, string> cachedEndpointLeftPart;
    private string EndpointLeftPart { get; }
    public ApplicationInsightsUrlFilter(TelemetryConfiguration telemetryConfiguration);
    private string get_EndpointLeftPart();
    internal bool IsApplicationInsightsUrl(Uri url);
    internal bool IsApplicationInsightsUrl(string url);
    private bool IsApplicationInsightsUrlImpl(string url);
    private KeyValuePair`2<string, string> GetEndpointLeftPart(string currentEndpointAddressValue);
}
internal class Microsoft.ApplicationInsights.DependencyCollector.Implementation.AzureSdkDiagnosticListenerSubscriber : DiagnosticSourceListenerBase`1<object> {
    public static string DiagnosticListenerName;
    public AzureSdkDiagnosticListenerSubscriber(TelemetryConfiguration configuration);
    internal virtual bool IsSourceEnabled(DiagnosticListener diagnosticListener);
    internal virtual bool IsActivityEnabled(string evnt, object context);
    protected virtual IDiagnosticEventHandler GetEventHandler(string diagnosticListenerName);
}
internal class Microsoft.ApplicationInsights.DependencyCollector.Implementation.AzureSdkDiagnosticsEventHandler : DiagnosticsEventHandlerBase {
    private ObjectInstanceBasedOperationHolder`1<OperationTelemetry> operationHolder;
    private PropertyFetcher linksPropertyFetcher;
    public AzureSdkDiagnosticsEventHandler(TelemetryClient client);
    public virtual bool IsEventEnabled(string evnt, object arg1, object arg2);
    public virtual void OnEvent(KeyValuePair`2<string, object> evnt, DiagnosticListener diagnosticListener);
    protected virtual void PopulateTags(Activity activity, OperationTelemetry telemetry);
    protected virtual string GetOperationName(string eventName, object eventPayload, Activity activity);
    protected virtual bool IsOperationSuccessful(string eventName, object eventPayload, Activity activity);
    private static bool TryGetAverageTimeInQueueForBatch(IEnumerable`1<Activity> links, DateTimeOffset requestStartTime, Int64& avgTimeInQueue);
    private static bool TryGetEnqueuedTime(Activity link, Int64& enqueuedTime);
    private static string GetType(Activity currentActivity);
    private static void SetHttpProperties(Activity activity, DependencyTelemetry dependency);
    private static bool IsMessagingDependency(string dependencyType);
    private static void SetMessagingProperties(Activity activity, OperationTelemetry telemetry);
    private static void PopulateLinks(IEnumerable`1<Activity> links, OperationTelemetry telemetry);
}
[EventSourceAttribute]
internal class Microsoft.ApplicationInsights.DependencyCollector.Implementation.DependencyCollectorEventSource : EventSource {
    public static DependencyCollectorEventSource Log;
    private ApplicationNameProvider applicationNameProvider;
    private static DependencyCollectorEventSource();
    [EventAttribute("1")]
public void RemoteDependencyModuleError(string msg, string frameworkVersion, string appDomainName);
    [EventAttribute("2")]
public void DependencyOperationTelemetryInitializerError(string msg, string appDomainName);
    [EventAttribute("3")]
public void DependencyOperationNameNullWarning(string appDomainName);
    [EventAttribute("4")]
public void RemoteDependencyDisabledApmcEnabled(string appDomainName);
    [EventAttribute("5")]
public void RemoteDependencyModuleWarning(string msg, string appDomainName);
    [EventAttribute("6")]
public void RemoteDependencyModuleVerbose(string msg, string appDomainName);
    [EventAttribute("7")]
public void RemoteDependencyTelemetryCollected(string appDomainName);
    [EventAttribute("8")]
public void RemoteDependencyModuleInformation(string msg, string appDomainName);
    [EventAttribute("9")]
public void RemoteDependencyModuleProfilerNotAttached(string appDomainName);
    [EventAttribute("10")]
public void BeginCallbackCalled(long id, string name, string appDomainName);
    [EventAttribute("11")]
public void EndCallbackCalled(string id, string appDomainName);
    [EventAttribute("12")]
public void EndCallbackWithNoBegin(string id, string appDomainName);
    [NonEventAttribute]
public void CallbackError(long id, string callbackName, Exception exception);
    [EventAttribute("13")]
public void CallbackError(string id, string callbackName, string exceptionString, string appDomainName);
    [EventAttribute("14")]
public void NotExpectedCallback(long id, string callbackName, string reason, string appDomainName);
    [EventAttribute("15")]
public void DependencyTelemetryItemIsNullWarning(string appDomainName);
    [EventAttribute("16")]
public void WebRequestIsNullWarning(string appDomainName);
    [EventAttribute("17")]
public void TrackingAnExistingTelemetryItemVerbose(string appDomainName);
    [EventAttribute("18")]
public void TelemetryToTrackIsNullWarning(string appDomainName);
    [EventAttribute("19")]
public void ProfilerFailedToAttachError(string error, string appDomainName);
    [EventAttribute("20")]
public void UnexpectedCallbackParameter(string expectedType, string appDomainName);
    [EventAttribute("21")]
public void EndAsyncCallbackCalled(string id, string appDomainName);
    [EventAttribute("22")]
public void EndAsyncExceptionCallbackCalled(string id, string appDomainName);
    [EventAttribute("23")]
public void CurrentActivityIsNull(string diagnosticsSourceEventName, string appDomainName);
    [EventAttribute("24")]
public void HttpDesktopDiagnosticSourceListenerIsActivated(string appDomainName);
    [EventAttribute("25")]
public void HttpDesktopDiagnosticSourceListenerIsDeactivated(string appDomainName);
    [EventAttribute("26")]
public void SkipTrackingTelemetryItemWithEventSource(long id, string appDomainName);
    [EventAttribute("27")]
public void HttpDesktopBeginCallbackCalled(long id, string name, string appDomainName);
    [EventAttribute("28")]
public void HttpDesktopEndCallbackCalled(long id, string appDomainName);
    [EventAttribute("29")]
public void HttpCoreDiagnosticSourceListenerStart(string id, string appDomainName);
    [EventAttribute("30")]
public void HttpCoreDiagnosticSourceListenerStop(string id, string appDomainName);
    [EventAttribute("31")]
public void HttpCoreDiagnosticSourceListenerRequest(Guid id, string appDomainName);
    [EventAttribute("32")]
public void HttpCoreDiagnosticSourceListenerResponse(Guid id, string appDomainName);
    [EventAttribute("33")]
public void HttpCoreDiagnosticSourceListenerException(string id, string appDomainName);
    [EventAttribute("34")]
public void HttpCoreDiagnosticSubscriberFailedToSubscribe(string error, string appDomainName);
    [EventAttribute("35")]
public void HttpDesktopDiagnosticSubscriberFailedToSubscribe(string error, string appDomainName);
    [EventAttribute("36")]
public void HttpHandlerDiagnosticListenerFailedToInitialize(string error, string appDomainName);
    [EventAttribute("37")]
public void HttpCoreDiagnosticSourceListenerOnNextFailed(string error, string appDomainName);
    [EventAttribute("38")]
public void SqlClientDiagnosticSubscriberFailedToSubscribe(string error, string appDomainName);
    [EventAttribute("39")]
public void SqlClientDiagnosticSubscriberCallbackCalled(Guid id, string name, string appDomainName);
    [EventAttribute("40")]
public void SqlClientDiagnosticSourceListenerOnNextFailed(string error, string appDomainName);
    [EventAttribute("41")]
public void DiagnosticSourceListenerFailedToSubscribe(string listenerName, string error, string appDomainName);
    [EventAttribute("42")]
public void TelemetryDiagnosticSourceListenerEvent(string eventName, string id, string appDomainName);
    [EventAttribute("43")]
public void TelemetryDiagnosticSourceCallbackException(string eventName, string error, string appDomainName);
    [EventAttribute("44")]
public void AutoTrackingDependencyItem(string depName, string appDomainName);
    [EventAttribute("45")]
public void EndOperationNoTracking(string depName, string appDomainName);
    [EventAttribute("46")]
public void NotActiveListenerNoTracking(string evntName, string activityId, string appDomainName);
    [EventAttribute("47")]
public void HttpCoreDiagnosticListenerInstrumentationVersion(int httpInstrumentationVersion, int httpClientMajorVersion, int httpClientMinorVersion, string infoVersion, string appDomainName);
    [EventAttribute("48")]
public void HttpRequestAlreadyInstrumented(string appDomainName);
    [EventAttribute("49")]
public void FailedToParseUrl(string url, string appDomainName);
}
internal static class Microsoft.ApplicationInsights.DependencyCollector.Implementation.DependencyTargetNameHelper : object {
    private static int HttpPort;
    private static int HttpsPort;
    internal static string GetDependencyTargetName(Uri uri);
}
internal abstract class Microsoft.ApplicationInsights.DependencyCollector.Implementation.DiagnosticSourceListenerBase`1 : object {
    protected static ConcurrentDictionary`2<DiagnosticListener, ActiveSubsciptionManager> SubscriptionManagers;
    protected TelemetryClient Client;
    protected TelemetryConfiguration Configuration;
    private ConcurrentQueue`1<IDisposable> individualSubscriptions;
    private ConcurrentQueue`1<IndividualDiagnosticSourceListener<TContext>> individualListeners;
    private IDisposable listenerSubscription;
    protected DiagnosticSourceListenerBase`1(TelemetryConfiguration configuration);
    private static DiagnosticSourceListenerBase`1();
    public void Subscribe();
    public virtual void OnNext(DiagnosticListener value);
    public sealed virtual void OnCompleted();
    public sealed virtual void OnError(Exception error);
    public sealed virtual void Dispose();
    internal abstract virtual bool IsSourceEnabled(DiagnosticListener diagnosticListener);
    internal abstract virtual bool IsActivityEnabled(string evnt, TContext context);
    protected virtual TContext GetListenerContext(DiagnosticListener diagnosticListener);
    protected abstract virtual IDiagnosticEventHandler GetEventHandler(string diagnosticListenerName);
    private void Dispose(bool disposing);
}
internal abstract class Microsoft.ApplicationInsights.DependencyCollector.Implementation.EventHandlers.DiagnosticsEventHandlerBase : object {
    protected static string StatusPropertyName;
    protected TelemetryClient TelemetryClient;
    private ConcurrentDictionary`2<Property, PropertyFetcher> propertyFetchers;
    protected DiagnosticsEventHandlerBase(TelemetryConfiguration configuration);
    protected DiagnosticsEventHandlerBase(TelemetryClient client);
    public virtual bool IsEventEnabled(string evnt, object arg1, object arg2);
    public abstract virtual void OnEvent(KeyValuePair`2<string, object> evnt, DiagnosticListener ignored);
    protected void SetCommonProperties(string eventName, object eventPayload, Activity activity, OperationTelemetry telemetry);
    protected virtual void PopulateTags(Activity activity, OperationTelemetry telemetry);
    protected virtual string GetOperationName(string eventName, object eventPayload, Activity activity);
    protected virtual bool IsOperationSuccessful(string eventName, object eventPayload, Activity activity);
    protected T FetchPayloadProperty(string eventName, string propertyName, object payload);
}
internal class Microsoft.ApplicationInsights.DependencyCollector.Implementation.EventHandlers.EventHubsDiagnosticsEventHandler : DiagnosticsEventHandlerBase {
    public static string DiagnosticSourceName;
    private static string EntityPropertyName;
    private static string EndpointPropertyName;
    internal EventHubsDiagnosticsEventHandler(TelemetryConfiguration configuration);
    public virtual bool IsEventEnabled(string evnt, object arg1, object arg2);
    public virtual void OnEvent(KeyValuePair`2<string, object> evnt, DiagnosticListener ignored);
    private void OnDependency(string name, object payload, Activity activity);
}
internal class Microsoft.ApplicationInsights.DependencyCollector.Implementation.EventHandlers.ServiceBusDiagnosticsEventHandler : DiagnosticsEventHandlerBase {
    public static string DiagnosticSourceName;
    private static string EntityPropertyName;
    private static string EndpointPropertyName;
    internal ServiceBusDiagnosticsEventHandler(TelemetryConfiguration configuration);
    public virtual bool IsEventEnabled(string evnt, object arg1, object arg2);
    public virtual void OnEvent(KeyValuePair`2<string, object> evnt, DiagnosticListener ignored);
    private void OnDependency(string name, object payload, Activity activity);
    private void OnRequest(string name, object payload, Activity activity);
}
internal class Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpCoreDiagnosticSourceListener : object {
    private static string HttpOutEventName;
    private static string HttpOutStartEventName;
    private static string HttpOutStopEventName;
    private static string HttpExceptionEventName;
    private static string DeprecatedRequestEventName;
    private static string DeprecatedResponseEventName;
    private static ActiveSubsciptionManager SubscriptionManager;
    private IEnumerable`1<string> correlationDomainExclusionList;
    private ApplicationInsightsUrlFilter applicationInsightsUrlFilter;
    private bool setComponentCorrelationHttpHeaders;
    private TelemetryClient client;
    private TelemetryConfiguration configuration;
    private HttpCoreDiagnosticSourceSubscriber subscriber;
    private PropertyFetcher startRequestFetcher;
    private PropertyFetcher stopRequestFetcher;
    private PropertyFetcher stopResponseFetcher;
    private PropertyFetcher stopRequestStatusFetcher;
    private PropertyFetcher deprecatedRequestFetcher;
    private PropertyFetcher deprecatedResponseFetcher;
    private PropertyFetcher deprecatedRequestGuidFetcher;
    private PropertyFetcher deprecatedResponseGuidFetcher;
    private ConcurrentDictionary`2<string, Exception> pendingExceptions;
    private HttpInstrumentationVersion httpInstrumentationVersion;
    private bool injectLegacyHeaders;
    private bool injectRequestIdInW3CMode;
    [CompilerGeneratedAttribute]
private ConditionalWeakTable`2<HttpRequestMessage, IOperationHolder`1<DependencyTelemetry>> <PendingDependencyTelemetry>k__BackingField;
    internal ConditionalWeakTable`2<HttpRequestMessage, IOperationHolder`1<DependencyTelemetry>> PendingDependencyTelemetry { get; }
    public HttpCoreDiagnosticSourceListener(TelemetryConfiguration configuration, bool setComponentCorrelationHttpHeaders, IEnumerable`1<string> correlationDomainExclusionList, bool injectLegacyHeaders, bool injectRequestIdInW3CMode, HttpInstrumentationVersion instrumentationVersion);
    private static HttpCoreDiagnosticSourceListener();
    [CompilerGeneratedAttribute]
internal ConditionalWeakTable`2<HttpRequestMessage, IOperationHolder`1<DependencyTelemetry>> get_PendingDependencyTelemetry();
    public sealed virtual void OnCompleted();
    public sealed virtual void OnError(Exception error);
    public sealed virtual void OnNext(KeyValuePair`2<string, object> evnt);
    public sealed virtual void Dispose();
    internal void OnActivityStart(HttpRequestMessage request);
    internal void OnActivityStop(HttpResponseMessage response, HttpRequestMessage request, TaskStatus requestTaskStatus);
    internal void OnRequest(HttpRequestMessage request, Guid loggingRequestId);
    internal void OnResponse(HttpResponseMessage response, Guid loggingRequestId);
    private static void InjectCorrelationContext(HttpRequestHeaders requestHeaders, Activity currentActivity);
    private static void InjectW3CHeaders(Activity currentActivity, HttpRequestHeaders requestHeaders);
    private static void InjectBackCompatibleRequestId(Activity currentActivity, HttpRequestHeaders requestHeaders);
    private static HttpInstrumentationVersion GetInstrumentationVersion();
    private void InjectRequestHeaders(HttpRequestMessage request, string instrumentationKey);
    private void ParseResponse(HttpResponseMessage response, DependencyTelemetry telemetry);
    private void Dispose(bool disposing);
}
internal static class Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpHeadersUtilities : object {
    internal static IEnumerable`1<string> GetHeaderValues(HttpHeaders headers, string headerName);
    internal static string GetHeaderKeyValue(HttpHeaders headers, string headerName, string keyName);
    internal static string GetRequestContextKeyValue(HttpHeaders headers, string keyName);
    internal static bool ContainsHeaderKeyValue(HttpHeaders headers, string headerName, string keyName);
    internal static bool ContainsRequestContextKeyValue(HttpHeaders headers, string keyName);
    internal static void SetRequestContextKeyValue(HttpHeaders headers, string keyName, string keyValue);
    internal static void SetHeaderKeyValue(HttpHeaders headers, string headerName, string keyName, string keyValue);
}
internal enum Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpInstrumentationVersion : Enum {
    public int value__;
    public static HttpInstrumentationVersion Unknown;
    public static HttpInstrumentationVersion V1;
    public static HttpInstrumentationVersion V2;
    public static HttpInstrumentationVersion V3;
}
internal static class Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.AzureBlobHttpParser : object {
    private static String[] AzureBlobHostSuffixes;
    private static String[] AzureBlobSupportedVerbs;
    private static AzureBlobHttpParser();
    internal static bool TryParse(DependencyTelemetry& httpDependency);
}
internal static class Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.AzureIotHubHttpParser : object {
    private static String[] AzureIotHubHostSuffixes;
    private static AzureIotHubHttpParser();
    internal static bool TryParse(DependencyTelemetry& httpDependency);
}
internal static class Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.AzureQueueHttpParser : object {
    private static String[] AzureQueueHostSuffixes;
    private static String[] AzureQueueSupportedVerbs;
    private static AzureQueueHttpParser();
    internal static bool TryParse(DependencyTelemetry& httpDependency);
}
internal static class Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.AzureSearchHttpParser : object {
    private static String[] AzureSearchHostSuffixes;
    private static String[] AzureSearchSupportedVerbs;
    private static String[] DocumentOperationNotMonikerActions;
    private static Dictionary`2<string, string> OperationNames;
    private static AzureSearchHttpParser();
    internal static bool TryParse(DependencyTelemetry& httpDependency);
    internal static List`1<KeyValuePair`2<string, string>> ParseResourcePath(string requestPath);
    internal static string BuildOperationMoniker(string verb, List`1<KeyValuePair`2<string, string>> resourcePath);
    private static string GetPropertyNameForResource(string resourceType);
    private static string GetOperationName(string operation);
}
internal static class Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.AzureServiceBusHttpParser : object {
    private static String[] AzureServiceBusHostSuffixes;
    private static AzureServiceBusHttpParser();
    internal static bool TryParse(DependencyTelemetry& httpDependency);
}
internal static class Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.AzureTableHttpParser : object {
    private static String[] AzureTableHostSuffixes;
    private static String[] AzureTableSupportedVerbs;
    private static AzureTableHttpParser();
    internal static bool TryParse(DependencyTelemetry& httpDependency);
}
internal static class Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.DocumentDbHttpParser : object {
    private static string CreateOrQueryDocumentOperationName;
    private static String[] DocumentDbHostSuffixes;
    private static String[] DocumentDbSupportedVerbs;
    private static Dictionary`2<string, string> OperationNames;
    private static DocumentDbHttpParser();
    internal static bool TryParse(DependencyTelemetry& httpDependency);
    private static string GetPropertyNameForResource(string resourceType);
    private static string GetOperationName(DependencyTelemetry httpDependency, string operation);
}
internal static class Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.GenericServiceHttpParser : object {
    internal static bool TryParse(DependencyTelemetry& httpDependency);
}
internal static class Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.HttpParsingHelper : object {
    private static Char[] RequestPathEndDelimiters;
    private static Char[] RequestPathTokenDelimiters;
    private static Char[] QueryStringTokenDelimiters;
    private static HttpParsingHelper();
    internal static string BuildOperationMoniker(string verb, List`1<KeyValuePair`2<string, string>> resourcePath);
    internal static List`1<KeyValuePair`2<string, string>> ParseResourcePath(string requestPath);
    internal static List`1<string> TokenizeRequestPath(string requestPath);
    internal static Dictionary`2<string, string> ExtractQuryParameters(string requestPath);
    internal static void ExtractVerb(string name, String& verb, String& nameWithoutVerb, String[] supportedVerbs);
    internal static List`1<string> Split(string str, Char[] delimiters, int startIdx, int endIdx);
    internal static bool EndsWithAny(string str, String[] suffixes);
}
internal interface Microsoft.ApplicationInsights.DependencyCollector.Implementation.IDiagnosticEventHandler {
    public abstract virtual void OnEvent(KeyValuePair`2<string, object> evnt, DiagnosticListener diagnosticListener);
    public abstract virtual bool IsEventEnabled(string evnt, object arg1, object arg2);
}
internal class Microsoft.ApplicationInsights.DependencyCollector.Implementation.Operation.ObjectInstanceBasedOperationHolder`1 : object {
    private ConditionalWeakTable`2<object, Tuple`2<TTelemetry, bool>> weakTableForCorrelation;
    public Tuple`2<TTelemetry, bool> Get(object holderInstance);
    public bool Remove(object holderInstance);
    public void Store(object holderInstance, Tuple`2<TTelemetry, bool> telemetryTuple);
}
internal static class Microsoft.ApplicationInsights.DependencyCollector.Implementation.Operation.OperationWatch : object {
    private static Stopwatch Watch;
    private static double HundredNanosecondsPerTick;
    private static DateTimeOffset StartTime;
    public static long ElapsedTicks { get; }
    private static OperationWatch();
    public static long get_ElapsedTicks();
    public static TimeSpan Duration(long fromTicks, long toTicks);
    public static DateTimeOffset Timestamp(long elapsedTicks);
}
internal class Microsoft.ApplicationInsights.DependencyCollector.Implementation.RddSource : object {
    internal static string Profiler;
    internal static string Framework;
    internal static string DiagnosticSourceDesktop;
    internal static string DiagnosticSourceCore;
    internal static string DiagnosticSourceListener;
    private static RddSource();
}
internal static class Microsoft.ApplicationInsights.DependencyCollector.Implementation.RemoteDependencyConstants : object {
    public static string SQL;
    public static string HTTP;
    public static string AI;
    public static string AzureBlob;
    public static string AzureTable;
    public static string AzureQueue;
    public static string AzureDocumentDb;
    public static string AzureEventHubs;
    public static string AzureServiceBus;
    public static string AzureIotHub;
    public static string AzureSearch;
    public static string InProc;
    public static string QueueMessage;
    public static string WcfService;
    public static string WebService;
    public static string DependencyErrorPropertyKey;
}
internal static class Microsoft.ApplicationInsights.DependencyCollector.Implementation.SqlClientDiagnostics.SqlClientDiagnosticFetcherTypes : object {
}
internal class Microsoft.ApplicationInsights.DependencyCollector.Implementation.SqlClientDiagnostics.SqlClientDiagnosticSourceListener : object {
    public static string DiagnosticListenerName;
    public static string SqlBeforeExecuteCommand;
    public static string SqlMicrosoftBeforeExecuteCommand;
    public static string SqlAfterExecuteCommand;
    public static string SqlMicrosoftAfterExecuteCommand;
    public static string SqlErrorExecuteCommand;
    public static string SqlMicrosoftErrorExecuteCommand;
    public static string SqlBeforeOpenConnection;
    public static string SqlMicrosoftBeforeOpenConnection;
    public static string SqlAfterOpenConnection;
    public static string SqlMicrosoftAfterOpenConnection;
    public static string SqlErrorOpenConnection;
    public static string SqlMicrosoftErrorOpenConnection;
    public static string SqlBeforeCloseConnection;
    public static string SqlMicrosoftBeforeCloseConnection;
    public static string SqlAfterCloseConnection;
    public static string SqlMicrosoftAfterCloseConnection;
    public static string SqlErrorCloseConnection;
    public static string SqlMicrosoftErrorCloseConnection;
    public static string SqlBeforeCommitTransaction;
    public static string SqlMicrosoftBeforeCommitTransaction;
    public static string SqlAfterCommitTransaction;
    public static string SqlMicrosoftAfterCommitTransaction;
    public static string SqlErrorCommitTransaction;
    public static string SqlMicrosoftErrorCommitTransaction;
    public static string SqlBeforeRollbackTransaction;
    public static string SqlMicrosoftBeforeRollbackTransaction;
    public static string SqlAfterRollbackTransaction;
    public static string SqlMicrosoftAfterRollbackTransaction;
    public static string SqlErrorRollbackTransaction;
    public static string SqlMicrosoftErrorRollbackTransaction;
    private static string SqlClientPrefix;
    private static string SqlMicrosoftClientPrefix;
    private static ActiveSubsciptionManager SubscriptionManager;
    private TelemetryClient client;
    private SqlClientDiagnosticSourceSubscriber subscriber;
    private ObjectInstanceBasedOperationHolder`1<DependencyTelemetry> operationHolder;
    private bool collectCommandText;
    public SqlClientDiagnosticSourceListener(TelemetryConfiguration configuration, bool collectCommandText);
    private static SqlClientDiagnosticSourceListener();
    public sealed virtual void Dispose();
    private sealed virtual override void System.IObserver<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.OnCompleted();
    private sealed virtual override void System.IObserver<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.OnError(Exception error);
    private sealed virtual override void System.IObserver<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.OnNext(KeyValuePair`2<string, object> evnt);
    private static void InitializeTelemetry(DependencyTelemetry telemetry, Guid operationId, long timestamp);
    private static void ConfigureExceptionTelemetry(DependencyTelemetry telemetry, Exception exception, PropertyFetcher numberFetcher);
    private void BeforeExecuteHelper(KeyValuePair`2<string, object> evnt, PropertyFetcher operationIdFetcher, PropertyFetcher commandFetcher, PropertyFetcher commandTextFetcher, PropertyFetcher connectionFetcher, PropertyFetcher dataSourceFetcher, PropertyFetcher databaseFetcher, PropertyFetcher commandTypeFetcher, PropertyFetcher timeStampFetcher);
    private void AfterExecuteHelper(KeyValuePair`2<string, object> evnt, PropertyFetcher operationIdFetcher, PropertyFetcher commandFetcher, PropertyFetcher timestampFetcher);
    private void ErrorExecuteHelper(KeyValuePair`2<string, object> evnt, PropertyFetcher operationIdFetcher, PropertyFetcher commandFetcher, PropertyFetcher timestampFetcher, PropertyFetcher exceptionFetcher, PropertyFetcher numberFetcher);
    private void BeforeOpenConnectionHelper(KeyValuePair`2<string, object> evnt, PropertyFetcher operationIdFetcher, PropertyFetcher connectionFetcher, PropertyFetcher operationFetcher, PropertyFetcher timestampFetcher, PropertyFetcher dataSourceFetcher, PropertyFetcher databaseFetcher);
    private void AfterOpenConnectionHelper(KeyValuePair`2<string, object> evnt, PropertyFetcher operationIdFetcher, PropertyFetcher connectionFetcher);
    private void ErrorOpenConnectionHelper(KeyValuePair`2<string, object> evnt, PropertyFetcher operationIdFetcher, PropertyFetcher connectionFetcher, PropertyFetcher timestampFetcher, PropertyFetcher exceptionFetcher, PropertyFetcher numberFetcher);
    private void BeforeCommitHelper(KeyValuePair`2<string, object> evnt, PropertyFetcher operationIdFetcher, PropertyFetcher connectionFetcher, PropertyFetcher operationFetcher, PropertyFetcher timestampFetcher, PropertyFetcher isolationFetcher, PropertyFetcher datasourceFetcher, PropertyFetcher databaseFetcher);
    private void BeforeRollbackHelper(KeyValuePair`2<string, object> evnt, PropertyFetcher operationIdFetcher, PropertyFetcher connectionFetcher, PropertyFetcher operationFetcher, PropertyFetcher timestampFetcher, PropertyFetcher isolationFetcher, PropertyFetcher datasourceFetcher, PropertyFetcher databaseFetcher);
    private void AfterCommitHelper(KeyValuePair`2<string, object> evnt, PropertyFetcher operationIdFetcher, PropertyFetcher connectionFetcher, PropertyFetcher timestampFetcher);
    private void AfterRollBackHelper(KeyValuePair`2<string, object> evnt, PropertyFetcher operationIdFetcher, PropertyFetcher connectionFetcher, PropertyFetcher timestampFetcher);
    private void ErrorCommitHelper(KeyValuePair`2<string, object> evnt, PropertyFetcher operationIdFetcher, PropertyFetcher connectionFetcher, PropertyFetcher timestampFetcher, PropertyFetcher exceptionFetcher, PropertyFetcher numberFetcher);
    private void ErrorRollbackHelper(KeyValuePair`2<string, object> evnt, PropertyFetcher operationIdFetcher, PropertyFetcher connectionFetcher, PropertyFetcher timestampFetcher, PropertyFetcher exceptionFetcher, PropertyFetcher numberFetcher);
    private void Dispose(bool disposing);
}
internal class Microsoft.ApplicationInsights.DependencyCollector.Implementation.TelemetryDiagnosticSourceListener : DiagnosticSourceListenerBase`1<HashSet`1<string>> {
    internal static string ActivityStartNameSuffix;
    internal static string ActivityStopNameSuffix;
    private HashSet`1<string> includedDiagnosticSources;
    private Dictionary`2<string, HashSet`1<string>> includedDiagnosticSourceActivities;
    private Dictionary`2<string, IDiagnosticEventHandler> customEventHandlers;
    public TelemetryDiagnosticSourceListener(TelemetryConfiguration configuration, ICollection`1<string> includeDiagnosticSourceActivities);
    public sealed virtual bool IsEventEnabled(string evnt, object input1, object input2);
    public sealed virtual void OnEvent(KeyValuePair`2<string, object> evnt, DiagnosticListener diagnosticListener);
    internal static DependencyTelemetry ExtractDependencyTelemetry(DiagnosticListener diagnosticListener, Activity currentActivity);
    internal void RegisterHandler(string diagnosticSourceName, IDiagnosticEventHandler eventHandler);
    internal virtual bool IsSourceEnabled(DiagnosticListener value);
    internal virtual bool IsActivityEnabled(string activityName, HashSet`1<string> includedActivities);
    protected virtual HashSet`1<string> GetListenerContext(DiagnosticListener diagnosticListener);
    protected virtual IDiagnosticEventHandler GetEventHandler(string diagnosticListenerName);
    private void PrepareInclusionLists(ICollection`1<string> includeDiagnosticSourceActivities);
}
public static class Microsoft.ApplicationInsights.DependencyCollector.OperationDetailConstants : object {
    public static string HttpRequestOperationDetailName;
    public static string HttpResponseOperationDetailName;
    public static string HttpResponseHeadersOperationDetailName;
    public static string SqlCommandOperationDetailName;
}
internal class Microsoft.ApplicationInsights.DependencyCollector.SanitizedHostList : object {
    private List`1<string> hostList;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(string item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string item);
    public sealed virtual void CopyTo(String[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    public sealed virtual bool Remove(string item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void AddIfNotExist(string hostName);
}
internal static class Microsoft.ApplicationInsights.W3C.Internal.W3CUtilities : object {
    internal static string GetRootId(string legacyId);
    internal static bool TryGetTraceId(string legacyId, ReadOnlySpan`1& traceId);
}
[ExtensionAttribute]
[ObsoleteAttribute("Use Microsoft.ApplicationInsights.Extensibility.W3C.W3CActivityExtensions in Microsoft.ApplicationInsights package instead")]
[EditorBrowsableAttribute("1")]
public static class Microsoft.ApplicationInsights.W3C.W3CActivityExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use Microsoft.ApplicationInsights.Extensibility.W3C.W3CActivityExtensions.GenerateW3CContext in Microsoft.ApplicationInsights package instead.")]
[EditorBrowsableAttribute("1")]
public static Activity GenerateW3CContext(Activity activity);
    [ExtensionAttribute]
[ObsoleteAttribute("Use Microsoft.ApplicationInsights.Extensibility.W3C.W3CActivityExtensions.IsW3CActivity in Microsoft.ApplicationInsights package instead.")]
[EditorBrowsableAttribute("1")]
public static bool IsW3CActivity(Activity activity);
    [ExtensionAttribute]
[ObsoleteAttribute("Use Microsoft.ApplicationInsights.Extensibility.W3C.W3CActivityExtensions.UpdateContextOnActivity in Microsoft.ApplicationInsights package instead.")]
[EditorBrowsableAttribute("1")]
public static Activity UpdateContextOnActivity(Activity activity);
    [ExtensionAttribute]
[ObsoleteAttribute("Use Microsoft.ApplicationInsights.Extensibility.W3C.W3CActivityExtensions.GetTraceparent in Microsoft.ApplicationInsights package instead.")]
[EditorBrowsableAttribute("1")]
public static string GetTraceparent(Activity activity);
    [ExtensionAttribute]
[ObsoleteAttribute("Use Microsoft.ApplicationInsights.Extensibility.W3C.W3CActivityExtensions.SetTraceparent in Microsoft.ApplicationInsights package instead.")]
[EditorBrowsableAttribute("1")]
public static void SetTraceparent(Activity activity, string value);
    [ExtensionAttribute]
[ObsoleteAttribute("Use Microsoft.ApplicationInsights.Extensibility.W3C.W3CActivityExtensions.GetTracestate in Microsoft.ApplicationInsights package instead.")]
[EditorBrowsableAttribute("1")]
public static string GetTracestate(Activity activity);
    [ExtensionAttribute]
[ObsoleteAttribute("Use Microsoft.ApplicationInsights.Extensibility.W3C.W3CActivityExtensions.SetTracestate in Microsoft.ApplicationInsights package instead.")]
[EditorBrowsableAttribute("1")]
public static void SetTracestate(Activity activity, string value);
    [ExtensionAttribute]
[ObsoleteAttribute("Use Microsoft.ApplicationInsights.Extensibility.W3C.W3CActivityExtensions.GetTraceId in Microsoft.ApplicationInsights package instead.")]
[EditorBrowsableAttribute("1")]
public static string GetTraceId(Activity activity);
    [ExtensionAttribute]
[ObsoleteAttribute("Use Microsoft.ApplicationInsights.Extensibility.W3C.W3CActivityExtensions.GetSpanId in Microsoft.ApplicationInsights package instead.")]
[EditorBrowsableAttribute("1")]
public static string GetSpanId(Activity activity);
    [ExtensionAttribute]
[ObsoleteAttribute("Use Microsoft.ApplicationInsights.Extensibility.W3C.W3CActivityExtensions.GetParentSpanId in Microsoft.ApplicationInsights package instead.")]
[EditorBrowsableAttribute("1")]
public static string GetParentSpanId(Activity activity);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.ApplicationInsights.W3C.W3CConstants : object {
    public static string TraceParentHeader;
    public static string TraceStateHeader;
    [ObsoleteAttribute("Dot not use.")]
public static string ApplicationIdTraceStateField;
    [ObsoleteAttribute("Dot not use.")]
public static string AzureTracestateNamespace;
    [ObsoleteAttribute("Dot not use.")]
public static char TracestateAzureSeparator;
    internal static string LegacyRootPropertyIdKey;
}
[ObsoleteAttribute("Obsolete in favor of OperationCorrelationTelemetryInitializer which is now W3C aware.")]
[EditorBrowsableAttribute("1")]
public class Microsoft.ApplicationInsights.W3C.W3COperationCorrelationTelemetryInitializer : object {
    public sealed virtual void Initialize(ITelemetry telemetry);
}
