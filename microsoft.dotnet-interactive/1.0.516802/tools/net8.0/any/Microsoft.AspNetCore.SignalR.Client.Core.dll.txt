internal static class Microsoft.AspNetCore.Internal.AwaitableThreadPool : object {
    public static Awaitable Yield();
}
internal class Microsoft.AspNetCore.Internal.TimerAwaitable : object {
    private Timer _timer;
    private Action _callback;
    private static Action _callbackCompleted;
    private TimeSpan _period;
    private TimeSpan _dueTime;
    private object _lockObj;
    private bool _disposed;
    private bool _running;
    public bool IsCompleted { get; }
    public TimerAwaitable(TimeSpan dueTime, TimeSpan period);
    private static TimerAwaitable();
    public void Start();
    [NullableContextAttribute("1")]
public TimerAwaitable GetAwaiter();
    public bool get_IsCompleted();
    public bool GetResult();
    private void Tick();
    [NullableContextAttribute("1")]
public sealed virtual void OnCompleted(Action continuation);
    [NullableContextAttribute("1")]
public sealed virtual void UnsafeOnCompleted(Action continuation);
    public void Stop();
    private sealed virtual override void System.IDisposable.Dispose();
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Internal.ValueTaskExtensions : object {
    [ExtensionAttribute]
public static Task GetAsTask(ValueTask`1& valueTask);
    [ExtensionAttribute]
public static ValueTask GetAsValueTask(ValueTask`1& valueTask);
}
internal static class Microsoft.AspNetCore.Shared.ArgumentNullThrowHelper : object {
    [NullableContextAttribute("2")]
public static void ThrowIfNull(object argument, string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Shared.ObjectDisposedThrowHelper : object {
    public static void ThrowIf(bool condition, object instance);
    public static void ThrowIf(bool condition, Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.SignalR.Client.HubConnection : object {
    public static TimeSpan DefaultServerTimeout;
    public static TimeSpan DefaultHandshakeTimeout;
    public static TimeSpan DefaultKeepAliveInterval;
    internal static long DefaultStatefulReconnectBufferSize;
    private static UnboundedChannelOptions _receiveLoopOptions;
    private static MethodInfo _sendStreamItemsMethod;
    private static MethodInfo _sendIAsyncStreamItemsMethod;
    private ILoggerFactory _loggerFactory;
    private ILogger _logger;
    private ConnectionLogScope _logScope;
    private IHubProtocol _protocol;
    private IServiceProvider _serviceProvider;
    private IConnectionFactory _connectionFactory;
    private IRetryPolicy _reconnectPolicy;
    private EndPoint _endPoint;
    private ConcurrentDictionary`2<string, InvocationHandlerList> _handlers;
    private ReconnectingConnectionState _state;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private Func`2<Exception, Task> Closed;
    [CompilerGeneratedAttribute]
private Func`2<Exception, Task> Reconnecting;
    [CompilerGeneratedAttribute]
private Func`2<string, Task> Reconnected;
    [CompilerGeneratedAttribute]
private TimeSpan <TickRate>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ServerTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <KeepAliveInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <HandshakeTimeout>k__BackingField;
    internal TimeSpan TickRate { get; internal set; }
    public TimeSpan ServerTimeout { get; public set; }
    public TimeSpan KeepAliveInterval { get; public set; }
    public TimeSpan HandshakeTimeout { get; public set; }
    [NullableAttribute("2")]
public string ConnectionId { get; }
    public HubConnectionState State { get; }
    public HubConnection(IConnectionFactory connectionFactory, IHubProtocol protocol, EndPoint endPoint, IServiceProvider serviceProvider, ILoggerFactory loggerFactory, IRetryPolicy reconnectPolicy);
    public HubConnection(IConnectionFactory connectionFactory, IHubProtocol protocol, EndPoint endPoint, IServiceProvider serviceProvider, ILoggerFactory loggerFactory);
    private static HubConnection();
    [CompilerGeneratedAttribute]
public void add_Closed(Func`2<Exception, Task> value);
    [CompilerGeneratedAttribute]
public void remove_Closed(Func`2<Exception, Task> value);
    [CompilerGeneratedAttribute]
public void add_Reconnecting(Func`2<Exception, Task> value);
    [CompilerGeneratedAttribute]
public void remove_Reconnecting(Func`2<Exception, Task> value);
    [CompilerGeneratedAttribute]
public void add_Reconnected(Func`2<string, Task> value);
    [CompilerGeneratedAttribute]
public void remove_Reconnected(Func`2<string, Task> value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_TickRate();
    [CompilerGeneratedAttribute]
internal void set_TickRate(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ServerTimeout();
    [CompilerGeneratedAttribute]
public void set_ServerTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_KeepAliveInterval();
    [CompilerGeneratedAttribute]
public void set_KeepAliveInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_HandshakeTimeout();
    [CompilerGeneratedAttribute]
public void set_HandshakeTimeout(TimeSpan value);
    [NullableContextAttribute("2")]
public string get_ConnectionId();
    public HubConnectionState get_State();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<StartAsync>d__49")]
public virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<StartAsyncInner>d__50")]
private Task StartAsyncInner(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<StopAsync>d__51")]
public virtual Task StopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<DisposeAsync>d__52")]
public virtual ValueTask DisposeAsync();
    public virtual IDisposable On(string methodName, Type[] parameterTypes, Func`3<Object[], object, Task`1<object>> handler, object state);
    public virtual IDisposable On(string methodName, Type[] parameterTypes, Func`3<Object[], object, Task> handler, object state);
    public virtual void Remove(string methodName);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<StreamAsChannelCoreAsync>d__56")]
public virtual Task`1<ChannelReader`1<object>> StreamAsChannelCoreAsync(string methodName, Type returnType, Object[] args, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<InvokeCoreAsync>d__57")]
public virtual Task`1<object> InvokeCoreAsync(string methodName, Type returnType, Object[] args, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<SendCoreAsync>d__58")]
public virtual Task SendCoreAsync(string methodName, Object[] args, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<StartAsyncCore>d__59")]
private Task StartAsyncCore(CancellationToken cancellationToken);
    private static ValueTask CloseAsync(ConnectionContext connection);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<StopAsyncCore>d__61")]
private Task StopAsyncCore(bool disposing);
    public virtual IAsyncEnumerable`1<TResult> StreamAsyncCore(string methodName, Object[] args, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<CastIAsyncEnumerable>d__63`1")]
private IAsyncEnumerable`1<T> CastIAsyncEnumerable(string methodName, Object[] args, CancellationTokenSource cts);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<StreamAsChannelCoreAsyncCore>d__64")]
private Task`1<ChannelReader`1<object>> StreamAsChannelCoreAsyncCore(string methodName, Type returnType, Object[] args, CancellationToken cancellationToken);
    private Dictionary`2<string, object> PackageStreamingParams(ConnectionState connectionState, Object[]& args, List`1& streamIds);
    private void LaunchStreams(ConnectionState connectionState, Dictionary`2<string, object> readers, CancellationToken cancellationToken);
    private Task SendStreamItems(ConnectionState connectionState, string streamId, ChannelReader`1<T> reader, CancellationTokenSource tokenSource);
    private Task SendIAsyncEnumerableStreamItems(ConnectionState connectionState, string streamId, IAsyncEnumerable`1<T> stream, CancellationTokenSource tokenSource);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<CommonStreaming>d__69")]
private Task CommonStreaming(ConnectionState connectionState, string streamId, Func`1<Task> createAndConsumeStream, CancellationTokenSource cts);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<InvokeCoreAsyncCore>d__70")]
private Task`1<object> InvokeCoreAsyncCore(string methodName, Type returnType, Object[] args, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<InvokeCore>d__71")]
private Task InvokeCore(ConnectionState connectionState, string methodName, InvocationRequest irq, Object[] args, String[] streams, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<InvokeStreamCore>d__72")]
private Task InvokeStreamCore(ConnectionState connectionState, string methodName, InvocationRequest irq, Object[] args, String[] streams, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<SendHubMessage>d__73")]
private Task SendHubMessage(ConnectionState connectionState, HubMessage hubMessage, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<SendCoreAsyncCore>d__74")]
private Task SendCoreAsyncCore(string methodName, Object[] args, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<SendWithLock>d__75")]
private Task SendWithLock(ConnectionState expectedConnectionState, HubMessage message, CancellationToken cancellationToken, string callerName);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<ProcessMessagesAsync>d__76")]
private Task`1<CloseMessage> ProcessMessagesAsync(HubMessage message, ConnectionState connectionState, ChannelWriter`1<InvocationMessage> invocationMessageWriter);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<DispatchInvocationAsync>d__77")]
private Task DispatchInvocationAsync(InvocationMessage invocation, ConnectionState connectionState);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<DispatchInvocationStreamItemAsync>d__78")]
private Task DispatchInvocationStreamItemAsync(StreamItemMessage streamItem, InvocationRequest irq);
    private void DispatchInvocationCompletion(CompletionMessage completion, InvocationRequest irq);
    private void CheckDisposed();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<HandshakeAsync>d__81")]
private Task HandshakeAsync(ConnectionState startingConnectionState, int protocolVersion, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<ReceiveLoop>d__82")]
private Task ReceiveLoop(ConnectionState connectionState);
    internal Task RunTimerActions();
    internal void OnServerTimeout();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<HandleConnectionClose>d__85")]
private Task HandleConnectionClose(ConnectionState connectionState);
    private void CompleteClose(Exception closeException);
    private void RunCloseEvent(Exception closeException);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<ReconnectAsync>d__88")]
private Task ReconnectAsync(Exception closeException);
    private Nullable`1<TimeSpan> GetNextRetryDelay(long previousRetryCount, TimeSpan elapsedTime, Exception retryReason);
    private OperationCanceledException GetOperationCanceledException(string message, Exception innerException, CancellationToken cancellationToken);
    private void RunReconnectingEvent(Exception closeException);
    private void RunReconnectedEvent();
    [ConditionalAttribute("DEBUG")]
private static void SafeAssert(bool condition, string message, string memberName, string fileName, int lineNumber);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnection/<<StreamAsChannelCoreAsyncCore>g__OnStreamCanceled|64_0>d")]
[CompilerGeneratedAttribute]
private Task <StreamAsChannelCoreAsyncCore>g__OnStreamCanceled|64_0(InvocationRequest irq);
    [CompilerGeneratedAttribute]
private void <StreamAsChannelCoreAsyncCore>b__64_1(object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.SignalR.Client.HubConnectionBuilder : object {
    private bool _hubConnectionBuilt;
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public IServiceCollection Services { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
    public sealed virtual HubConnection Build();
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public Type GetType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.SignalR.Client.HubConnectionBuilderExtensions : object {
    [ExtensionAttribute]
public static IHubConnectionBuilder ConfigureLogging(IHubConnectionBuilder hubConnectionBuilder, Action`1<ILoggingBuilder> configureLogging);
    [ExtensionAttribute]
public static IHubConnectionBuilder WithAutomaticReconnect(IHubConnectionBuilder hubConnectionBuilder);
    [ExtensionAttribute]
public static IHubConnectionBuilder WithAutomaticReconnect(IHubConnectionBuilder hubConnectionBuilder, TimeSpan[] reconnectDelays);
    [ExtensionAttribute]
public static IHubConnectionBuilder WithAutomaticReconnect(IHubConnectionBuilder hubConnectionBuilder, IRetryPolicy retryPolicy);
    [ExtensionAttribute]
public static IHubConnectionBuilder WithServerTimeout(IHubConnectionBuilder hubConnectionBuilder, TimeSpan timeout);
    [ExtensionAttribute]
public static IHubConnectionBuilder WithKeepAliveInterval(IHubConnectionBuilder hubConnectionBuilder, TimeSpan interval);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.SignalR.Client.HubConnectionExtensions : object {
    [ExtensionAttribute]
private static IDisposable On(HubConnection hubConnection, string methodName, Type[] parameterTypes, Action`1<Object[]> handler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Action handler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Action`1<T1> handler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Action`2<T1, T2> handler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Action`3<T1, T2, T3> handler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Action`4<T1, T2, T3, T4> handler);
    [ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Action`5<T1, T2, T3, T4, T5> handler);
    [ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Action`6<T1, T2, T3, T4, T5, T6> handler);
    [ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Action`7<T1, T2, T3, T4, T5, T6, T7> handler);
    [ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Action`8<T1, T2, T3, T4, T5, T6, T7, T8> handler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Type[] parameterTypes, Func`2<Object[], Task> handler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`1<Task> handler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`2<T1, Task> handler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`3<T1, T2, Task> handler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`4<T1, T2, T3, Task> handler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`5<T1, T2, T3, T4, Task> handler);
    [ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`6<T1, T2, T3, T4, T5, Task> handler);
    [ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`7<T1, T2, T3, T4, T5, T6, Task> handler);
    [ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`8<T1, T2, T3, T4, T5, T6, T7, Task> handler);
    [ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, Task> handler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task InvokeAsync(HubConnection hubConnection, string methodName, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task InvokeAsync(HubConnection hubConnection, string methodName, object arg1, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task InvokeAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task InvokeAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task InvokeAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task InvokeAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task InvokeAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task InvokeAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task InvokeAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task InvokeAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task InvokeAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task InvokeCoreAsync(HubConnection hubConnection, string methodName, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task`1<TResult> InvokeAsync(HubConnection hubConnection, string methodName, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task`1<TResult> InvokeAsync(HubConnection hubConnection, string methodName, object arg1, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task`1<TResult> InvokeAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> InvokeAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> InvokeAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> InvokeAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> InvokeAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> InvokeAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> InvokeAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> InvokeAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> InvokeAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnectionExtensions/<InvokeCoreAsync>d__43`1")]
[ExtensionAttribute]
public static Task`1<TResult> InvokeCoreAsync(HubConnection hubConnection, string methodName, Object[] args, CancellationToken cancellationToken);
    [ExtensionAttribute]
private static IDisposable On(HubConnection hubConnection, string methodName, Type[] parameterTypes, Func`2<Object[], TResult> handler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Type[] parameterTypes, Func`2<Object[], Task`1<TResult>> handler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`1<Task`1<TResult>> handler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`1<TResult> handler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`2<T1, TResult> handler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`3<T1, T2, TResult> handler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`4<T1, T2, T3, TResult> handler);
    [ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`5<T1, T2, T3, T4, TResult> handler);
    [ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`6<T1, T2, T3, T4, T5, TResult> handler);
    [ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`7<T1, T2, T3, T4, T5, T6, TResult> handler);
    [ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`8<T1, T2, T3, T4, T5, T6, T7, TResult> handler);
    [ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> handler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`2<T1, Task`1<TResult>> handler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`3<T1, T2, Task`1<TResult>> handler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`4<T1, T2, T3, Task`1<TResult>> handler);
    [ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`5<T1, T2, T3, T4, Task`1<TResult>> handler);
    [ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`6<T1, T2, T3, T4, T5, Task`1<TResult>> handler);
    [ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`7<T1, T2, T3, T4, T5, T6, Task`1<TResult>> handler);
    [ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`8<T1, T2, T3, T4, T5, T6, T7, Task`1<TResult>> handler);
    [ExtensionAttribute]
public static IDisposable On(HubConnection hubConnection, string methodName, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, Task`1<TResult>> handler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task SendAsync(HubConnection hubConnection, string methodName, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task SendAsync(HubConnection hubConnection, string methodName, object arg1, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task SendAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task SendAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task`1<ChannelReader`1<TResult>> StreamAsChannelAsync(HubConnection hubConnection, string methodName, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task`1<ChannelReader`1<TResult>> StreamAsChannelAsync(HubConnection hubConnection, string methodName, object arg1, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task`1<ChannelReader`1<TResult>> StreamAsChannelAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ChannelReader`1<TResult>> StreamAsChannelAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ChannelReader`1<TResult>> StreamAsChannelAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ChannelReader`1<TResult>> StreamAsChannelAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ChannelReader`1<TResult>> StreamAsChannelAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ChannelReader`1<TResult>> StreamAsChannelAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ChannelReader`1<TResult>> StreamAsChannelAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ChannelReader`1<TResult>> StreamAsChannelAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ChannelReader`1<TResult>> StreamAsChannelAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnectionExtensions/<StreamAsChannelCoreAsync>d__86`1")]
[ExtensionAttribute]
public static Task`1<ChannelReader`1<TResult>> StreamAsChannelCoreAsync(HubConnection hubConnection, string methodName, Object[] args, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.HubConnectionExtensions/<RunChannel>d__87`1")]
private static Task RunChannel(ChannelReader`1<object> inputChannel, Channel`1<TResult> outputChannel);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IAsyncEnumerable`1<TResult> StreamAsync(HubConnection hubConnection, string methodName, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IAsyncEnumerable`1<TResult> StreamAsync(HubConnection hubConnection, string methodName, object arg1, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IAsyncEnumerable`1<TResult> StreamAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TResult> StreamAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TResult> StreamAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TResult> StreamAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TResult> StreamAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TResult> StreamAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TResult> StreamAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TResult> StreamAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TResult> StreamAsync(HubConnection hubConnection, string methodName, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, CancellationToken cancellationToken);
}
public class Microsoft.AspNetCore.SignalR.Client.HubConnectionOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <ServerTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <KeepAliveInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StatefulReconnectBufferSize>k__BackingField;
    public TimeSpan ServerTimeout { get; public set; }
    public TimeSpan KeepAliveInterval { get; public set; }
    public long StatefulReconnectBufferSize { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_ServerTimeout();
    [CompilerGeneratedAttribute]
public void set_ServerTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_KeepAliveInterval();
    [CompilerGeneratedAttribute]
public void set_KeepAliveInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public long get_StatefulReconnectBufferSize();
    [CompilerGeneratedAttribute]
public void set_StatefulReconnectBufferSize(long value);
}
public enum Microsoft.AspNetCore.SignalR.Client.HubConnectionState : Enum {
    public int value__;
    public static HubConnectionState Disconnected;
    public static HubConnectionState Connected;
    public static HubConnectionState Connecting;
    public static HubConnectionState Reconnecting;
}
public interface Microsoft.AspNetCore.SignalR.Client.IHubConnectionBuilder {
    [NullableContextAttribute("1")]
public abstract virtual HubConnection Build();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.SignalR.Client.Internal.ConnectionLogScope : object {
    private static string ClientConnectionIdKey;
    private string _cachedToString;
    private string _connectionId;
    public string ConnectionId { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public KeyValuePair`2<string, object> Item { get; }
    public int Count { get; }
    public string get_ConnectionId();
    public void set_ConnectionId(string value);
    public sealed virtual KeyValuePair`2<string, object> get_Item(int index);
    public sealed virtual int get_Count();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.SignalR.Client.Internal.ConnectionLogScope/<GetEnumerator>d__10")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.SignalR.Client.Internal.DefaultRetryPolicy : object {
    internal static Nullable`1[] DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;
    private Nullable`1[] _retryDelays;
    public DefaultRetryPolicy(TimeSpan[] retryDelays);
    private static DefaultRetryPolicy();
    public sealed virtual Nullable`1<TimeSpan> NextRetryDelay(RetryContext retryContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.AspNetCore.SignalR.Client.Internal.InvocationRequest : object {
    private CancellationTokenRegistration _cancellationTokenRegistration;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResultType>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InvocationId>k__BackingField;
    [CompilerGeneratedAttribute]
private HubConnection <HubConnection>k__BackingField;
    protected ILogger Logger { get; }
    public Type ResultType { get; }
    public CancellationToken CancellationToken { get; }
    public string InvocationId { get; }
    public HubConnection HubConnection { get; private set; }
    protected InvocationRequest(CancellationToken cancellationToken, Type resultType, string invocationId, ILogger logger, HubConnection hubConnection);
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
public Type get_ResultType();
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public string get_InvocationId();
    [CompilerGeneratedAttribute]
public HubConnection get_HubConnection();
    [CompilerGeneratedAttribute]
private void set_HubConnection(HubConnection value);
    public static InvocationRequest Invoke(CancellationToken cancellationToken, Type resultType, string invocationId, ILoggerFactory loggerFactory, HubConnection hubConnection, Task`1& result);
    public static InvocationRequest Stream(CancellationToken cancellationToken, Type resultType, string invocationId, ILoggerFactory loggerFactory, HubConnection hubConnection, ChannelReader`1& result);
    public abstract virtual void Fail(Exception exception);
    public abstract virtual void Complete(CompletionMessage message);
    [NullableContextAttribute("0")]
public abstract virtual ValueTask`1<bool> StreamItem(object item);
    protected abstract virtual void Cancel();
    public virtual void Dispose();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.SignalR.Client.IRetryPolicy {
    public abstract virtual Nullable`1<TimeSpan> NextRetryDelay(RetryContext retryContext);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.SignalR.Client.RetryContext : object {
    [CompilerGeneratedAttribute]
private long <PreviousRetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ElapsedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <RetryReason>k__BackingField;
    public long PreviousRetryCount { get; public set; }
    public TimeSpan ElapsedTime { get; public set; }
    public Exception RetryReason { get; public set; }
    [CompilerGeneratedAttribute]
public long get_PreviousRetryCount();
    [CompilerGeneratedAttribute]
public void set_PreviousRetryCount(long value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ElapsedTime();
    [CompilerGeneratedAttribute]
public void set_ElapsedTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public Exception get_RetryReason();
    [CompilerGeneratedAttribute]
public void set_RetryReason(Exception value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.SignalR.Internal.AsyncEnumerableAdapters : object {
    public static IAsyncEnumerator`1<object> MakeCancelableAsyncEnumerator(IAsyncEnumerable`1<T> asyncEnumerable, CancellationToken cancellationToken);
    public static IAsyncEnumerable`1<T> MakeCancelableTypedAsyncEnumerable(IAsyncEnumerable`1<T> asyncEnumerable, CancellationTokenSource cts);
    public static IAsyncEnumerator`1<object> MakeAsyncEnumeratorFromChannel(ChannelReader`1<T> channel, CancellationToken cancellationToken);
}
internal static class Microsoft.AspNetCore.SignalR.Internal.CancellationTokenUtils : object {
    [NullableContextAttribute("2")]
internal static IDisposable CreateLinkedToken(CancellationToken token1, CancellationToken token2, CancellationToken& linkedToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.SignalR.Internal.MessageBuffer : object {
    private static TaskCompletionSource`1<FlushResult> _completedTCS;
    private static int PoolLimit;
    private IHubProtocol _protocol;
    private long _bufferLimit;
    private ILogger _logger;
    private AckMessage _ackMessage;
    private SequenceMessage _sequenceMessage;
    private Channel`1<long> _waitForAck;
    private PeriodicTimer _timer;
    private SemaphoreSlim _writeLock;
    private PipeWriter _writer;
    private long _totalMessageCount;
    private long _currentReceivingSequenceId;
    private long _latestReceivedSequenceId;
    private long _lastAckedId;
    private TaskCompletionSource`1<FlushResult> _resend;
    private Stack`1<LinkedBuffer> _pool;
    private LinkedBuffer _buffer;
    private long _bufferedByteCount;
    public static TimeSpan AckRate { get; }
    private static MessageBuffer();
    public MessageBuffer(ConnectionContext connection, IHubProtocol protocol, long bufferLimit, ILogger logger);
    public MessageBuffer(ConnectionContext connection, IHubProtocol protocol, long bufferLimit, ILogger logger, TimeProvider timeProvider);
    public static TimeSpan get_AckRate();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Internal.MessageBuffer/<RunTimer>d__24")]
private Task RunTimer();
    [NullableContextAttribute("0")]
public ValueTask`1<FlushResult> WriteAsync(SerializedHubMessage hubMessage, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public ValueTask`1<FlushResult> WriteAsync(HubMessage hubMessage, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Internal.MessageBuffer/<WriteAsyncCore>d__27")]
private ValueTask`1<FlushResult> WriteAsyncCore(HubMessage hubMessage, ReadOnlyMemory`1<byte> messageBytes, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Internal.MessageBuffer/<AckAsync>d__28")]
public Task AckAsync(AckMessage ackMessage);
    internal bool ShouldProcessMessage(HubMessage message);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Internal.MessageBuffer/<ResendAsync>d__30")]
internal Task ResendAsync(PipeWriter writer);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.SignalR.Internal.SerializedHubMessage : object {
    private SerializedMessage _cachedItem1;
    private SerializedMessage _cachedItem2;
    private List`1<SerializedMessage> _cachedItems;
    private object _lock;
    [CompilerGeneratedAttribute]
private HubMessage <Message>k__BackingField;
    [NullableAttribute("2")]
public HubMessage Message { get; }
    public SerializedHubMessage(IReadOnlyList`1<SerializedMessage> messages);
    public SerializedHubMessage(HubMessage message);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public HubMessage get_Message();
    [NullableContextAttribute("0")]
public ReadOnlyMemory`1<byte> GetSerializedMessage(IHubProtocol protocol);
    internal IReadOnlyList`1<SerializedMessage> GetAllSerializations();
    private void SetCacheUnsynchronized(string protocolName, ReadOnlyMemory`1<byte> serialized);
    private bool TryGetCachedUnsynchronized(string protocolName, ReadOnlyMemory`1& result);
}
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.SignalR.Internal.SerializedMessage : ValueType {
    [CompilerGeneratedAttribute]
private string <ProtocolName>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Serialized>k__BackingField;
    [NullableAttribute("1")]
public string ProtocolName { get; }
    public ReadOnlyMemory`1<byte> Serialized { get; }
    public SerializedMessage(string protocolName, ReadOnlyMemory`1<byte> serialized);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_ProtocolName();
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Serialized();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.SignalR.ReflectionHelper : object {
    public static bool IsStreamingType(Type type, bool mustBeDirectType);
    public static bool IsIAsyncEnumerable(Type type);
}
internal static class Microsoft.Extensions.Internal.NonCapturingTimer : object {
    [NullableContextAttribute("1")]
public static Timer Create(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.IO.Pipelines.PipeWriterStream : Stream {
    private long _length;
    private PipeWriter _pipeWriter;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public PipeWriterStream(PipeWriter pipeWriter);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> source, CancellationToken cancellationToken);
    private ValueTask WriteCoreAsync(ReadOnlyMemory`1<byte> source, CancellationToken cancellationToken);
    public void Reset();
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("System.IO.Pipelines.PipeWriterStream/<<WriteCoreAsync>g__WriteSlowAsync|21_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask <WriteCoreAsync>g__WriteSlowAsync|21_0(ValueTask`1<FlushResult> flushTask);
}
