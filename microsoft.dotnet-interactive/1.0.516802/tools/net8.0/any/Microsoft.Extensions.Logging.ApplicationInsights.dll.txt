internal class Microsoft.ApplicationInsights.Implementation.SdkVersionUtils : object {
    internal static string GetSdkVersion(string versionPrefix);
}
public class Microsoft.Extensions.Logging.ApplicationInsights.ApplicationInsightsLogger : object {
    private string categoryName;
    private TelemetryClient telemetryClient;
    private ApplicationInsightsLoggerOptions applicationInsightsLoggerOptions;
    [CompilerGeneratedAttribute]
private IExternalScopeProvider <ExternalScopeProvider>k__BackingField;
    internal IExternalScopeProvider ExternalScopeProvider { get; internal set; }
    public ApplicationInsightsLogger(string categoryName, TelemetryClient telemetryClient, ApplicationInsightsLoggerOptions applicationInsightsLoggerOptions);
    [CompilerGeneratedAttribute]
internal IExternalScopeProvider get_ExternalScopeProvider();
    [CompilerGeneratedAttribute]
internal void set_ExternalScopeProvider(IExternalScopeProvider value);
    public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    private static SeverityLevel GetSeverityLevel(LogLevel logLevel);
    private void PopulateTelemetry(ISupportProperties telemetryItem, TState state, EventId eventId);
}
[EventSourceAttribute]
internal class Microsoft.Extensions.Logging.ApplicationInsights.ApplicationInsightsLoggerEventSource : EventSource {
    public static ApplicationInsightsLoggerEventSource Log;
    public string ApplicationName;
    private static ApplicationInsightsLoggerEventSource();
    [EventAttribute("1")]
public void FailedToLog(string error, string applicationName);
    [NonEventAttribute]
private static string GetApplicationName();
}
public class Microsoft.Extensions.Logging.ApplicationInsights.ApplicationInsightsLoggerOptions : object {
    [CompilerGeneratedAttribute]
private bool <TrackExceptionsAsExceptionTelemetry>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FlushOnDispose>k__BackingField;
    public bool TrackExceptionsAsExceptionTelemetry { get; public set; }
    public bool IncludeScopes { get; public set; }
    public bool FlushOnDispose { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_TrackExceptionsAsExceptionTelemetry();
    [CompilerGeneratedAttribute]
public void set_TrackExceptionsAsExceptionTelemetry(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeScopes();
    [CompilerGeneratedAttribute]
public void set_IncludeScopes(bool value);
    [CompilerGeneratedAttribute]
public bool get_FlushOnDispose();
    [CompilerGeneratedAttribute]
public void set_FlushOnDispose(bool value);
}
[ProviderAliasAttribute("ApplicationInsights")]
public class Microsoft.Extensions.Logging.ApplicationInsights.ApplicationInsightsLoggerProvider : object {
    private ApplicationInsightsLoggerOptions applicationInsightsLoggerOptions;
    private TelemetryClient telemetryClient;
    private IExternalScopeProvider externalScopeProvider;
    public ApplicationInsightsLoggerProvider(IOptions`1<TelemetryConfiguration> telemetryConfigurationOptions, IOptions`1<ApplicationInsightsLoggerOptions> applicationInsightsLoggerOptions);
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
    public sealed virtual void SetScopeProvider(IExternalScopeProvider externalScopeProvider);
    protected virtual void Dispose(bool releasedManagedResources);
}
internal class Microsoft.Extensions.Logging.ApplicationInsights.NullScope : object {
    [CompilerGeneratedAttribute]
private static NullScope <Instance>k__BackingField;
    public static NullScope Instance { get; }
    private static NullScope();
    [CompilerGeneratedAttribute]
public static NullScope get_Instance();
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.ApplicationInsightsLoggingBuilderExtensions : object {
    [ExtensionAttribute]
public static ILoggingBuilder AddApplicationInsights(ILoggingBuilder builder);
    [ExtensionAttribute]
[ObsoleteAttribute("InstrumentationKey based global ingestion is being deprecated. Use the AddApplicationInsights() overload which accepts Action<TelemetryConfiguration> and set TelemetryConfiguration.ConnectionString. See https://github.com/microsoft/ApplicationInsights-dotnet/issues/2560 for more details.")]
public static ILoggingBuilder AddApplicationInsights(ILoggingBuilder builder, string instrumentationKey);
    [ExtensionAttribute]
[ObsoleteAttribute("InstrumentationKey based global ingestion is being deprecated. Use the AddApplicationInsights() overload which accepts Action<TelemetryConfiguration> and set TelemetryConfiguration.ConnectionString. See https://github.com/microsoft/ApplicationInsights-dotnet/issues/2560 for more details.")]
public static ILoggingBuilder AddApplicationInsights(ILoggingBuilder builder, string instrumentationKey, Action`1<ApplicationInsightsLoggerOptions> configureApplicationInsightsLoggerOptions);
    [ExtensionAttribute]
public static ILoggingBuilder AddApplicationInsights(ILoggingBuilder builder, Action`1<ApplicationInsightsLoggerOptions> configureApplicationInsightsLoggerOptions);
    [ExtensionAttribute]
public static ILoggingBuilder AddApplicationInsights(ILoggingBuilder builder, Action`1<TelemetryConfiguration> configureTelemetryConfiguration, Action`1<ApplicationInsightsLoggerOptions> configureApplicationInsightsLoggerOptions);
}
