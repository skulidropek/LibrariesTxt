public class Microsoft.PackageManagement.Providers.Internal.Bootstrap.BootstrapProvider : object {
    private static Dictionary`2<string, String[]> _features;
    private static WildcardOptions WildcardOptions;
    private static IEqualityComparer`1<Package> PackageEqualityComparer;
    private PackageManagementService PackageManagementService { get; }
    public string PackageProviderName { get; }
    private static BootstrapProvider();
    private PackageManagementService get_PackageManagementService();
    public string get_PackageProviderName();
    public void InitializeProvider(BootstrapRequest request);
    public void GetFeatures(BootstrapRequest request);
    public void GetDynamicOptions(string category, BootstrapRequest request);
    public void ResolvePackageSources(BootstrapRequest request);
    public void FindPackage(string name, string requiredVersion, string minimumVersion, string maximumVersion, int id, BootstrapRequest request);
    public void GetInstalledPackages(string name, string requiredVersion, string minimumVersion, string maximumVersion, BootstrapRequest request);
    public void DownloadPackage(string fastPath, string location, BootstrapRequest request);
    private bool InstallProviderFromInstaller(Package provider, Link link, string fastPath, BootstrapRequest request);
    private bool InstallPackageFile(Package provider, string fastPath, BootstrapRequest request);
    private bool InstallPackageReference(Package provider, string fastPath, BootstrapRequest request, SoftwareIdentity[] packages);
    private bool InstallAssemblyProvider(Package provider, Link link, string fastPath, BootstrapRequest request, bool deleteFile);
    private void RemoveDirectory(string directoryFolder);
    private void CopyDirectory(string sourceFolder, string destinationFolder);
    private void InstallPackageFromFile(string fastPath, BootstrapRequest request);
    public void InstallPackage(string fastPath, BootstrapRequest request);
    internal void InstallPackage(string fastPath, BootstrapRequest request, bool errorContinue);
}
public abstract class Microsoft.PackageManagement.Providers.Internal.Bootstrap.BootstrapRequest : Request {
    private IEnumerable`1<Feed> _feeds;
    private IEnumerable`1<string> _fileSource;
    internal Uri[] _urls { get; }
    private IEnumerable`1<Feed> Feeds { get; }
    internal IEnumerable`1<string> LocalSource { get; }
    internal IEnumerable`1<Package> Providers { get; }
    internal Uri[] get__urls();
    private IEnumerable`1<Feed> get_Feeds();
    internal IEnumerable`1<string> get_LocalSource();
    internal string DestinationPath(Request request);
    internal IEnumerable`1<Package> get_Providers();
    private string GetValue(string name);
    internal Package GetProvider(Uri uri);
    internal Package GetProvider(string name);
    internal Package GetProvider(string name, string version);
    internal IEnumerable`1<Package> GetProviderAll(string name, string minimumversion, string maximumversion);
    internal IEnumerable`1<Package> GetProvider(string name, string minimumversion, string maximumversion);
    internal string DownloadAndValidateFile(Swidtag swidtag);
    private string ExtractZipPackage(string zippedPackagePath);
    internal string RetryDownload(Func`2<Uri, string> downloadFileFunction, Uri location, UInt32 numberOfTry);
    internal string DownLoadFileFromLinks(IEnumerable`1<Link> links);
    private bool ValidateFileHash(string fileFullPath, Payload payload);
    internal bool YieldFromSwidtag(Package provider, string requiredVersion, string minimumVersion, string maximumVersion, string searchKey);
    internal bool YieldFromSwidtag(Package pkg, string searchKey);
    private static bool AnyNullOrEmpty(String[] args);
    internal Package GetProviderFromFile(string filePath, bool copyFileToTemp, bool suppressErrorsAndWarnings);
    internal void FindProviderFromFile(string name, string requiredVersion, string minimumVersion, string maximumVersion);
    [IteratorStateMachineAttribute("Microsoft.PackageManagement.Providers.Internal.Bootstrap.BootstrapRequest/<FindProviderByNameFromFile>d__27")]
private IEnumerable`1<Package> FindProviderByNameFromFile(string name);
    private bool FilterOnName(Package pkg, string name);
    private bool FilterOnVersion(Package pkg, string requiredVersion, string minimumVersion, string maximumVersion);
    public static string GetTempFileFullPath(string filePath);
    private string CopyToTempLocation(string filePath);
    [CompilerGeneratedAttribute]
private string <DownLoadFileFromLinks>b__20_0(Uri uri);
}
internal class Microsoft.PackageManagement.Providers.Internal.Bootstrap.Feed : Swid {
    internal Feed(BootstrapRequest request, Swidtag swidtag);
    internal Feed(BootstrapRequest request, IEnumerable`1<Link> mirrors);
    internal Feed(BootstrapRequest request, IEnumerable`1<Uri> mirrors);
    internal IEnumerable`1<Package> Query();
    internal IEnumerable`1<Package> Query(string name);
    internal IEnumerable`1<Package> Query(string name, string version);
    internal IEnumerable`1<Package> Query(string name, string minimumVersion, string maximumVersion);
    [CompilerGeneratedAttribute]
private Package <Query>b__3_0(IGrouping`2<string, Link> packageGroup);
    [CompilerGeneratedAttribute]
private IEnumerable`1<Package> <Query>b__3_1(IGrouping`2<string, Link> nextGroup);
}
internal class Microsoft.PackageManagement.Providers.Internal.Bootstrap.Package : Swid {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    internal string Name { get; }
    internal string Version { get; }
    internal string VersionScheme { get; }
    internal string Source { get; internal set; }
    internal Package(BootstrapRequest request, Swidtag swidtag);
    internal Package(BootstrapRequest request, IEnumerable`1<Link> mirrors);
    internal Package(BootstrapRequest request, IEnumerable`1<Uri> mirrors);
    internal string get_Name();
    internal string get_Version();
    internal string get_VersionScheme();
    [CompilerGeneratedAttribute]
internal string get_Source();
    [CompilerGeneratedAttribute]
internal void set_Source(string value);
}
internal class Microsoft.PackageManagement.Providers.Internal.Bootstrap.Swid : object {
    private static int SwidDownloadTimeout;
    internal BootstrapRequest _request;
    internal Swidtag _swidtag;
    private bool _timedOut;
    [CompilerGeneratedAttribute]
private Uri <Location>k__BackingField;
    internal Uri Location { get; internal set; }
    private IRequest DownloadRequest { get; }
    protected IEnumerable`1<IGrouping`2<string, Link>> Artifacts { get; }
    protected IEnumerable`1<IGrouping`2<string, Link>> Feeds { get; }
    protected IEnumerable`1<IGrouping`2<string, Link>> Packages { get; }
    protected IEnumerable`1<IGrouping`2<string, Link>> More { get; }
    internal bool IsValid { get; }
    internal Swid(BootstrapRequest request, Swidtag swidtag);
    internal Swid(BootstrapRequest request, IEnumerable`1<Link> mirrors);
    internal Swid(BootstrapRequest request, IEnumerable`1<Uri> mirrors);
    [CompilerGeneratedAttribute]
internal Uri get_Location();
    [CompilerGeneratedAttribute]
internal void set_Location(Uri value);
    private IRequest get_DownloadRequest();
    protected IEnumerable`1<IGrouping`2<string, Link>> get_Artifacts();
    protected IEnumerable`1<IGrouping`2<string, Link>> get_Feeds();
    protected IEnumerable`1<IGrouping`2<string, Link>> get_Packages();
    protected IEnumerable`1<IGrouping`2<string, Link>> get_More();
    internal virtual bool get_IsValid();
    private Swidtag DownloadSwidtag(IEnumerable`1<Uri> locations, BootstrapRequest request);
    private string DownloadSwidtagToFile(string filename, Uri location);
    internal Swidtag DownloadSwidtag(IEnumerable`1<Link> locations, BootstrapRequest request);
    protected IEnumerable`1<IGrouping`2<string, Link>> PackagesFilteredByName(string name);
    [CompilerGeneratedAttribute]
private bool <get_DownloadRequest>b__12_0(string messageText);
    [CompilerGeneratedAttribute]
private bool <get_DownloadRequest>b__12_1(string category, string id, string target, string messageText);
}
public class Microsoft.PackageManagement.Providers.Internal.WebDownloader : object {
    internal static string ProviderName;
    private static Dictionary`2<string, String[]> _features;
    private static WebDownloader();
    public void GetFeatures(Request request);
    public void InitializeProvider(Request request);
    public string GetDownloaderName();
    public string DownloadFile(Uri remoteLocation, string localFilename, int timeoutMilliseconds, bool showProgress, Request request);
    [AsyncStateMachineAttribute("Microsoft.PackageManagement.Providers.Internal.WebDownloader/<Download>d__6")]
private Task`1<string> Download(Uri remoteLocation, string localFilename, bool showProgress, Request request, int pid);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.PackageManagement.Providers.Resources.Messages : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string FailedToExtractAndCopy { get; }
    internal static string FailToDeleteExistingFolder { get; }
    internal static string FailToExtract { get; }
    internal static string HashAlgorithmNotSupported { get; }
    internal static string FailToInstallZipFolder { get; }
    internal static string FindingPackage { get; }
    internal static string InstalledPackage { get; }
    internal static string InstallingPackage { get; }
    internal static string InvalidFileType { get; }
    internal static string MissingInstallationmedia { get; }
    internal static string MissingProviderManifest { get; }
    internal static string MissingVersion { get; }
    internal static string MoreThanOneDllExists { get; }
    internal static string NoDependencyPackageFound { get; }
    internal static string OnlyHttpsSchemeSupported { get; }
    internal static string ProviderBootstrapFailed { get; }
    internal static string RetryDownload { get; }
    internal static string UseLocalSource { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_FailedToExtractAndCopy();
    internal static string get_FailToDeleteExistingFolder();
    internal static string get_FailToExtract();
    internal static string get_HashAlgorithmNotSupported();
    internal static string get_FailToInstallZipFolder();
    internal static string get_FindingPackage();
    internal static string get_InstalledPackage();
    internal static string get_InstallingPackage();
    internal static string get_InvalidFileType();
    internal static string get_MissingInstallationmedia();
    internal static string get_MissingProviderManifest();
    internal static string get_MissingVersion();
    internal static string get_MoreThanOneDllExists();
    internal static string get_NoDependencyPackageFound();
    internal static string get_OnlyHttpsSchemeSupported();
    internal static string get_ProviderBootstrapFailed();
    internal static string get_RetryDownload();
    internal static string get_UseLocalSource();
}
