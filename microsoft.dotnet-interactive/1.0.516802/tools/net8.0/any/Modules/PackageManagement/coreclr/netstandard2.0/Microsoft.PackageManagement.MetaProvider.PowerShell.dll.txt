public class Microsoft.PackageManagement.MetaProvider.PowerShell.Dependency : object {
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppliesTo>k__BackingField;
    public string ProviderName { get; public set; }
    public string PackageName { get; public set; }
    public string Version { get; public set; }
    public string Source { get; public set; }
    public string AppliesTo { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProviderName();
    [CompilerGeneratedAttribute]
public void set_ProviderName(string value);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_AppliesTo();
    [CompilerGeneratedAttribute]
public void set_AppliesTo(string value);
}
public class Microsoft.PackageManagement.MetaProvider.PowerShell.DynamicOption : Yieldable {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private OptionType <ExpectedType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<object> <PermittedValues>k__BackingField;
    public string Name { get; public set; }
    public OptionType ExpectedType { get; public set; }
    public bool IsRequired { get; public set; }
    public IEnumerable`1<object> PermittedValues { get; public set; }
    public DynamicOption(OptionCategory category, string name, OptionType expectedType, bool isRequired, IEnumerable`1<object> permittedValues);
    public DynamicOption(string name, OptionType expectedType, bool isRequired, IEnumerable`1<object> permittedValues);
    public DynamicOption(OptionCategory category, string name, OptionType expectedType, bool isRequired);
    public DynamicOption(string name, OptionType expectedType, bool isRequired);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public OptionType get_ExpectedType();
    [CompilerGeneratedAttribute]
public void set_ExpectedType(OptionType value);
    [CompilerGeneratedAttribute]
public bool get_IsRequired();
    [CompilerGeneratedAttribute]
public void set_IsRequired(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<object> get_PermittedValues();
    [CompilerGeneratedAttribute]
public void set_PermittedValues(IEnumerable`1<object> value);
    public virtual bool YieldResult(PsRequest r);
}
public class Microsoft.PackageManagement.MetaProvider.PowerShell.Entity : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RegId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Role>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Thumbprint>k__BackingField;
    public string Name { get; public set; }
    public string RegId { get; public set; }
    public string Role { get; public set; }
    public IEnumerable`1<string> Roles { get; public set; }
    public string Thumbprint { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_RegId();
    [CompilerGeneratedAttribute]
public void set_RegId(string value);
    [CompilerGeneratedAttribute]
public string get_Role();
    [CompilerGeneratedAttribute]
public void set_Role(string value);
    public IEnumerable`1<string> get_Roles();
    public void set_Roles(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Thumbprint();
    [CompilerGeneratedAttribute]
public void set_Thumbprint(string value);
}
public class Microsoft.PackageManagement.MetaProvider.PowerShell.Feature : Yieldable {
    private KeyValuePair`2<string, String[]> _pair;
    public Feature(string name);
    public Feature(string name, string value);
    public Feature(string name, String[] values);
    public virtual bool YieldResult(PsRequest r);
}
internal static class Microsoft.PackageManagement.MetaProvider.PowerShell.Internal.Constants : object {
    internal static string ScriptStackTrace;
    internal static string ProviderNameUnknown;
}
[ExtensionAttribute]
internal static class Microsoft.PackageManagement.MetaProvider.PowerShell.Internal.PowerShellExtensions : object {
    [ExtensionAttribute]
internal static PowerShell Clear(PowerShell powershell);
    [ExtensionAttribute]
internal static PSModuleInfo ImportModule(PowerShell powershell, string name, bool force);
    [ExtensionAttribute]
internal static IEnumerable`1<PSModuleInfo> TestModuleManifest(PowerShell powershell, string path);
    [ExtensionAttribute]
internal static IEnumerable`1<PSModuleInfo> GetModule(PowerShell powershell, string moduleName);
    [ExtensionAttribute]
internal static PowerShell SetVariable(PowerShell powershell, string variable, object value);
    [ExtensionAttribute]
internal static T InvokeFunction(PowerShell powershell, string command, EventHandler`1<DataAddedEventArgs> outputAction, EventHandler`1<DataAddedEventArgs> errorAction, Object[] args);
    [ExtensionAttribute]
internal static PowerShell WaitForReady(PowerShell powershell);
}
public class Microsoft.PackageManagement.MetaProvider.PowerShell.Internal.PowerShellMetaProvider : object {
    private static HashSet`1<string> _exclusionList;
    private static string _baseFolder;
    private static string _powershellProviderFunctionsPath;
    private IDictionary`2<string, object> _availableProviders;
    private IDictionary`2<string, List`1<ProviderItem>> _psProviderCacheTable;
    internal static string PowerShellGet;
    private static PowerShell _powershell;
    private static bool _initialized;
    internal static string BaseFolder { get; }
    internal static string PowerShellProviderFunctions { get; }
    public IEnumerable`1<string> ProviderNames { get; }
    public string MetaProviderName { get; }
    private static PackageManagementService PackageManagementService { get; }
    private static PowerShellMetaProvider();
    internal static string get_BaseFolder();
    private static void EnsurePowerShellInitialized();
    internal static string get_PowerShellProviderFunctions();
    public IEnumerable`1<string> get_ProviderNames();
    private void AddToTable(string name, ProviderItem provider);
    public string get_MetaProviderName();
    public sealed virtual void Dispose();
    public string GetProviderPath(string providername);
    [IteratorStateMachineAttribute("Microsoft.PackageManagement.MetaProvider.PowerShell.Internal.PowerShellMetaProvider/<ScanPrivateDataForProviders>d__22")]
private IEnumerable`1<KeyValuePair`2<string, PSModuleInfo>> ScanPrivateDataForProviders(PsRequest request, string baseFolder, Hashtable privateData, PSModuleInfo moduleInfo);
    private IEnumerable`1<KeyValuePair`2<string, PSModuleInfo>> GetPackageManagementModules(PsRequest request, PSModuleInfo module, Version requiredVersion, Version minimumVersion, Version maximumVersion);
    private void AddToPowerShellProviderCacheTable(KeyValuePair`2<string, PSModuleInfo> moduleInfo);
    private static PackageManagementService get_PackageManagementService();
    private IEnumerable`1<KeyValuePair`2<string, PSModuleInfo>> ScanForModules(PsRequest request, Version requiredVersion, Version minimumVersion, Version maximumVersion, ProviderOption providerOption);
    private IEnumerable`1<KeyValuePair`2<string, PSModuleInfo>> ScanForPowerShellGetModule(PsRequest request);
    [IteratorStateMachineAttribute("Microsoft.PackageManagement.MetaProvider.PowerShell.Internal.PowerShellMetaProvider/<AlternativeModuleScan>d__29")]
private IEnumerable`1<string> AlternativeModuleScan(PsRequest request, Version requiredVersion, Version minimumVersion, Version maximumVersion, ProviderOption providerOption);
    public object CreateProvider(string name);
    protected virtual void Dispose(bool disposing);
    private PowerShellPackageProvider Create(PsRequest request, string modulePath, string requiredVersion, bool force, bool logWarning);
    public void InitializeProvider(PsRequest request);
    private void AddToPackageProviderCacheTable(PackageProvider provider);
    public void RefreshProviders(PsRequest request, string providerName, Version requiredVersion, Version minimumVersion, Version maximumVersion, bool logWarning);
    private IEnumerable`1<PackageProvider> FindMatchedProvidersFromInternalCacheTable(PsRequest request, string providerPath);
    public IEnumerable`1<object> LoadAvailableProvider(PsRequest request, string modulePath, Version requiredVersion, bool force);
    private PackageProvider AnalyzeModule(PsRequest request, string modulePath, Version requiredVersion, bool force, bool logWarning, PSModuleInfo psModuleInfo);
    private void ProvideSwidTagInformation(PackageProvider packageProvider, PSModuleInfo psModuleInfo);
}
public class Microsoft.PackageManagement.MetaProvider.PowerShell.Internal.PowerShellPackageProvider : PowerShellProviderBase {
    private static int _findId;
    private Lazy`1<Dictionary`2<int, List`4<string, string, string, string>>> _findByNameBatches;
    private Lazy`1<Dictionary`2<int, List`1<string>>> _findByFileBatches;
    private Lazy`1<Dictionary`2<int, List`1<Uri>>> _findByUriBatches;
    private string _version;
    private string _providerName;
    public PowerShellPackageProvider(PowerShell ps, PSModuleInfo module, string version);
    private static PowerShellPackageProvider();
    private bool IsFirstParameterType(string function);
    public bool IsMethodImplemented(string methodName);
    private object Call(string function, IRequest requestObject, Object[] args);
    public void AddPackageSource(string name, string location, bool trusted, IRequest requestObject);
    public void FindPackage(string name, string requiredVersion, string minimumVersion, string maximumVersion, int id, IRequest requestObject);
    public void FindPackageByFile(string file, int id, IRequest requestObject);
    public void FindPackageByUri(Uri uri, int id, IRequest requestObject);
    public void GetInstalledPackages(string name, string requiredVersion, string minimumVersion, string maximumVersion, IRequest requestObject);
    public void GetDynamicOptions(string category, IRequest requestObject);
    public string GetPackageProviderName();
    public void ResolvePackageSources(IRequest requestObject);
    public void InitializeProvider(IRequest requestObject);
    public string GetProviderVersion();
    public void InstallPackage(string fastPath, IRequest requestObject);
    public void RemovePackageSource(string name, IRequest requestObject);
    public void UninstallPackage(string fastPath, IRequest requestObject);
    public void GetFeatures(IRequest requestObject);
    public void DownloadPackage(string fastPath, string location, IRequest requestObject);
    public void GetPackageDetails(string fastPath, IRequest requestObject);
    public int StartFind(IRequest requestObject);
    public void CompleteFind(int id, IRequest requestObject);
}
public class Microsoft.PackageManagement.MetaProvider.PowerShell.Internal.PowerShellProviderBase : object {
    private object _lock;
    protected PSModuleInfo _module;
    private PowerShell _powershell;
    private ManualResetEvent _reentrancyLock;
    private Dictionary`2<string, CommandInfo> _allCommands;
    private Dictionary`2<string, CommandInfo> _methods;
    private IAsyncResult _stopResult;
    private object _stopLock;
    public string ModulePath { get; }
    public PowerShellProviderBase(PowerShell ps, PSModuleInfo module);
    public string get_ModulePath();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal CommandInfo GetMethod(string methodName);
    internal object CallPowerShellWithoutRequest(string method, Object[] args);
    internal void ReportErrors(PsRequest request, IEnumerable`1<ErrorRecord> errors);
    internal void CancelRequest();
    internal object CallPowerShell(PsRequest request, Object[] args);
    private void error_DataAdded(object sender, DataAddedEventArgs e, PsRequest request, ConcurrentBag`1<ErrorRecord> errors);
    private void output_DataAdded(object sender, DataAddedEventArgs e, PsRequest request, Object& finalValue);
}
internal class Microsoft.PackageManagement.MetaProvider.PowerShell.Internal.ProviderItem : object {
    internal PSModuleInfo ModuleInfo;
    internal string ProviderPath;
}
public abstract class Microsoft.PackageManagement.MetaProvider.PowerShell.Internal.PsRequest : Request {
    internal CommandInfo CommandInfo;
    private PowerShellProviderBase _provider;
    private Hashtable _options;
    internal bool IsMethodImplemented { get; }
    public IEnumerable`1<string> PackageSources { get; }
    public PSCredential Credential { get; }
    public Hashtable Options { get; }
    public object Services { get; }
    internal bool get_IsMethodImplemented();
    public IEnumerable`1<string> get_PackageSources();
    internal IRequest Extend(Object[] objects);
    internal string GetMessageStringInternal(string messageText);
    public PSCredential get_Credential();
    public Hashtable get_Options();
    public object CloneRequest(Hashtable options, ArrayList sources, PSCredential credential);
    public object CallPowerShell(Object[] args);
    internal static PsRequest New(object requestObject, PowerShellProviderBase provider, string methodName);
    public object SelectProvider(string providerName);
    public IEnumerable`1<object> SelectProviders(string providerName);
    public object get_Services();
    public IEnumerable`1<object> FindPackageByCanonicalId(string packageId, object requestObject);
    public bool RequirePackageProvider(string packageProviderName, string minimumVersion);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.PackageManagement.MetaProvider.PowerShell.Internal.Resources.Messages : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DuplicateProviderName { get; }
    internal static string FailedToImportProvider { get; }
    internal static string FileNotFound { get; }
    internal static string ImportModuleFailed { get; }
    internal static string ModuleAlreadyLoaded { get; }
    internal static string ModuleNotFound { get; }
    internal static string PackageManagementProvidersNotFound { get; }
    internal static string PowershellScriptFunctionReturnsNull { get; }
    internal static string ProviderNameMismatch { get; }
    internal static string ProviderNameIsNullOrEmpty { get; }
    internal static string RootModuleAndPackageManagementProviderNameNotMatch { get; }
    internal static string ScriptStackTrace { get; }
    internal static string SuccessfullyLoadedModule { get; }
    internal static string UnableToFindModuleProvider { get; }
    internal static string UnableToFindPowerShellFunctionsFile { get; }
    internal static string UnableToLoadModule { get; }
    internal static string CantFindBasePowerShellModuleFolder { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DuplicateProviderName();
    internal static string get_FailedToImportProvider();
    internal static string get_FileNotFound();
    internal static string get_ImportModuleFailed();
    internal static string get_ModuleAlreadyLoaded();
    internal static string get_ModuleNotFound();
    internal static string get_PackageManagementProvidersNotFound();
    internal static string get_PowershellScriptFunctionReturnsNull();
    internal static string get_ProviderNameMismatch();
    internal static string get_ProviderNameIsNullOrEmpty();
    internal static string get_RootModuleAndPackageManagementProviderNameNotMatch();
    internal static string get_ScriptStackTrace();
    internal static string get_SuccessfullyLoadedModule();
    internal static string get_UnableToFindModuleProvider();
    internal static string get_UnableToFindPowerShellFunctionsFile();
    internal static string get_UnableToLoadModule();
    internal static string get_CantFindBasePowerShellModuleFolder();
}
public abstract class Microsoft.PackageManagement.MetaProvider.PowerShell.Internal.Yieldable : object {
    protected Hashtable _details;
    public Hashtable Details { get; internal set; }
    public Hashtable get_Details();
    internal void set_Details(Hashtable value);
    public abstract virtual bool YieldResult(PsRequest r);
    protected virtual bool YieldDetails(PsRequest r);
}
public class Microsoft.PackageManagement.MetaProvider.PowerShell.Link : object {
    [CompilerGeneratedAttribute]
private string <HRef>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Relationship>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MediaType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ownership>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Use>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppliesToMedia>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Artifact>k__BackingField;
    public string HRef { get; public set; }
    public string Relationship { get; public set; }
    public string MediaType { get; public set; }
    public string Ownership { get; public set; }
    public string Use { get; public set; }
    public string AppliesToMedia { get; public set; }
    public string Artifact { get; public set; }
    [CompilerGeneratedAttribute]
public string get_HRef();
    [CompilerGeneratedAttribute]
public void set_HRef(string value);
    [CompilerGeneratedAttribute]
public string get_Relationship();
    [CompilerGeneratedAttribute]
public void set_Relationship(string value);
    [CompilerGeneratedAttribute]
public string get_MediaType();
    [CompilerGeneratedAttribute]
public void set_MediaType(string value);
    [CompilerGeneratedAttribute]
public string get_Ownership();
    [CompilerGeneratedAttribute]
public void set_Ownership(string value);
    [CompilerGeneratedAttribute]
public string get_Use();
    [CompilerGeneratedAttribute]
public void set_Use(string value);
    [CompilerGeneratedAttribute]
public string get_AppliesToMedia();
    [CompilerGeneratedAttribute]
public void set_AppliesToMedia(string value);
    [CompilerGeneratedAttribute]
public string get_Artifact();
    [CompilerGeneratedAttribute]
public void set_Artifact(string value);
}
public enum Microsoft.PackageManagement.MetaProvider.PowerShell.OptionCategory : Enum {
    public int value__;
    public static OptionCategory Package;
    public static OptionCategory Provider;
    public static OptionCategory Source;
    public static OptionCategory Install;
}
public enum Microsoft.PackageManagement.MetaProvider.PowerShell.OptionType : Enum {
    public int value__;
    public static OptionType String;
    public static OptionType StringArray;
    public static OptionType Int;
    public static OptionType Switch;
    public static OptionType Folder;
    public static OptionType File;
    public static OptionType Path;
    public static OptionType Uri;
    public static OptionType SecureString;
}
public class Microsoft.PackageManagement.MetaProvider.PowerShell.PackageSource : Yieldable {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTrusted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRegistered>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValidated>k__BackingField;
    public string Name { get; public set; }
    public string Location { get; public set; }
    public bool IsTrusted { get; public set; }
    public bool IsRegistered { get; public set; }
    public bool IsValidated { get; public set; }
    public PackageSource(string name, string location, bool isTrusted, bool isRegistered, bool isValidated);
    public PackageSource(string name, string location, bool isTrusted, bool isRegistered, bool isValidated, Hashtable details);
    public PackageSource(string name, string location, bool isTrusted, bool isRegistered, Hashtable details);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(string value);
    [CompilerGeneratedAttribute]
public bool get_IsTrusted();
    [CompilerGeneratedAttribute]
public void set_IsTrusted(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsRegistered();
    [CompilerGeneratedAttribute]
public void set_IsRegistered(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsValidated();
    [CompilerGeneratedAttribute]
public void set_IsValidated(bool value);
    public virtual bool YieldResult(PsRequest r);
}
public class Microsoft.PackageManagement.MetaProvider.PowerShell.SoftwareIdentity : Yieldable {
    [CompilerGeneratedAttribute]
private string <FastPackageReference>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SearchKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FromTrustedSource>k__BackingField;
    private ArrayList _links;
    private ArrayList _entities;
    private ArrayList _dependencies;
    private string _destinationPath;
    private string _tagId;
    private string _xmlLang;
    private string _xmlSwidTag;
    private bool _commitImmediately;
    public string FastPackageReference { get; public set; }
    public string Name { get; public set; }
    public string Version { get; public set; }
    public string VersionScheme { get; public set; }
    public string Source { get; public set; }
    public string Summary { get; public set; }
    public string FullPath { get; public set; }
    public string Filename { get; public set; }
    public string SearchKey { get; public set; }
    public bool FromTrustedSource { get; public set; }
    public SoftwareIdentity(string fastPackageReference, string name, string version, string versionScheme, string source, string summary, string searchKey, string fullPath, string filename);
    public SoftwareIdentity(string fastPackageReference, string name, string version, string versionScheme, string source, string summary, string searchKey, string fullPath, string filename, Hashtable details, ArrayList entities, ArrayList links, bool fromTrustedSource);
    public SoftwareIdentity(string fastPackageReference, string name, string version, string versionScheme, string source, string summary, string searchKey, string fullPath, string filename, Hashtable details, ArrayList entities, ArrayList links, bool fromTrustedSource, ArrayList dependencies);
    public SoftwareIdentity(string fastPackageReference, string name, string version, string versionScheme, string source, string summary, string searchKey, string fullPath, string filename, Hashtable details, ArrayList entities, ArrayList links, bool fromTrustedSource, ArrayList dependencies, string tagId, string xmlLang);
    public SoftwareIdentity(string fastPackageReference, string name, string version, string versionScheme, string source, string summary, string searchKey, string fullPath, string filename, Hashtable details, ArrayList entities, ArrayList links, bool fromTrustedSource, ArrayList dependencies, string tagId, string xmlLang, string destinationPath);
    public SoftwareIdentity(string xmlSwidTag, bool commitImmediately);
    [CompilerGeneratedAttribute]
public string get_FastPackageReference();
    [CompilerGeneratedAttribute]
public void set_FastPackageReference(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_VersionScheme();
    [CompilerGeneratedAttribute]
public void set_VersionScheme(string value);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
public void set_Summary(string value);
    [CompilerGeneratedAttribute]
public string get_FullPath();
    [CompilerGeneratedAttribute]
public void set_FullPath(string value);
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
public void set_Filename(string value);
    [CompilerGeneratedAttribute]
public string get_SearchKey();
    [CompilerGeneratedAttribute]
public void set_SearchKey(string value);
    [CompilerGeneratedAttribute]
public bool get_FromTrustedSource();
    [CompilerGeneratedAttribute]
public void set_FromTrustedSource(bool value);
    public virtual bool YieldResult(PsRequest r);
    protected virtual bool YieldTagId(PsRequest r);
    protected virtual bool YieldXmlLang(PsRequest r);
    protected virtual bool YieldDetails(PsRequest r);
    protected virtual bool YieldLinks(PsRequest r);
    protected virtual bool YieldDependencies(PsRequest r);
    protected virtual bool YieldEntities(PsRequest r);
}
