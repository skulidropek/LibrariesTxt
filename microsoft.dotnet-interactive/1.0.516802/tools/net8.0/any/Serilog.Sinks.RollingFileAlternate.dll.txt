[ExtensionAttribute]
public static class Serilog.Sinks.RollingFileAlternate.LoggerConfigurationExtensions : object {
    private static string DefaultOutputTemplate;
    private static long TwoMegabytes;
    [ExtensionAttribute]
public static LoggerConfiguration RollingFileAlternate(LoggerSinkConfiguration configuration, string logDirectory, LogEventLevel minimumLevel, string outputTemplate, IFormatProvider formatProvider, Nullable`1<long> fileSizeLimitBytes, Nullable`1<int> retainedFileCountLimit);
    [ExtensionAttribute]
public static LoggerConfiguration RollingFileAlternate(LoggerSinkConfiguration configuration, string logDirectory, string logFilePrefix, LogEventLevel minimumLevel, string outputTemplate, IFormatProvider formatProvider, Nullable`1<long> fileSizeLimitBytes, Nullable`1<int> retainedFileCountLimit);
    [ExtensionAttribute]
public static LoggerConfiguration RollingFileAlternate(LoggerSinkConfiguration configuration, ITextFormatter formatter, string logDirectory, LogEventLevel minimumLevel, Nullable`1<long> fileSizeLimitBytes, Nullable`1<int> retainedFileCountLimit);
    [ExtensionAttribute]
public static LoggerConfiguration HourlyRollingFileAlternate(LoggerSinkConfiguration configuration, string logDirectory, LogEventLevel minimumLevel, string outputTemplate, IFormatProvider formatProvider, Nullable`1<int> retainedFileCountLimit);
    [ExtensionAttribute]
public static LoggerConfiguration HourlyRollingFileAlternate(LoggerSinkConfiguration configuration, ITextFormatter formatter, string logDirectory, LogEventLevel minimumLevel, Nullable`1<int> retainedFileCountLimit);
}
internal class Serilog.Sinks.RollingFileAlternate.Sinks.HourlyRolling.HourlyFileSink : object {
    private static string ThisObjectName;
    private ITextFormatter formatter;
    private HourlyLogFileDescription hourlyLogFileDescription;
    private StreamWriter output;
    private object syncRoot;
    private bool disposed;
    private bool exceptionAlreadyThrown;
    internal HourlyLogFileDescription LogFileDescription { get; }
    internal HourlyFileSink(ITextFormatter formatter, string logRootDirectory, HourlyLogFileDescription hourlyLogFileDescription, Encoding encoding);
    private static HourlyFileSink();
    internal HourlyLogFileDescription get_LogFileDescription();
    public sealed virtual void Dispose();
    internal void Emit(LogEvent logEvent);
    private StreamWriter OpenFileForWriting(string folderPath, HourlyLogFileDescription logFileDescription, Encoding encoding);
    private static void EnsureDirectoryCreated(string path);
}
internal class Serilog.Sinks.RollingFileAlternate.Sinks.HourlyRolling.HourlyLogFileDescription : object {
    public HourlyLogFileInfo LogFileInfo;
    [CompilerGeneratedAttribute]
private DateTime <DateTime>k__BackingField;
    public string FileName { get; }
    public DateTime DateTime { get; private set; }
    internal HourlyLogFileDescription(HourlyLogFileInfo logFileInfo, DateTime dateTime);
    public string get_FileName();
    [CompilerGeneratedAttribute]
public DateTime get_DateTime();
    [CompilerGeneratedAttribute]
private void set_DateTime(DateTime value);
    internal bool SameHour(DateTime logEventAt);
    internal HourlyLogFileDescription Next();
}
internal class Serilog.Sinks.RollingFileAlternate.Sinks.HourlyRolling.HourlyLogFileInfo : object {
    private static string NumberFormat;
    private static string DateFormat;
    [CompilerGeneratedAttribute]
private UInt32 <Sequence>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Date>k__BackingField;
    internal UInt32 Sequence { get; private set; }
    internal string FileName { get; private set; }
    internal DateTime Date { get; private set; }
    public HourlyLogFileInfo(DateTime date, UInt32 sequence);
    [CompilerGeneratedAttribute]
internal UInt32 get_Sequence();
    [CompilerGeneratedAttribute]
private void set_Sequence(UInt32 value);
    [CompilerGeneratedAttribute]
internal string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    [CompilerGeneratedAttribute]
internal DateTime get_Date();
    [CompilerGeneratedAttribute]
private void set_Date(DateTime value);
    public HourlyLogFileInfo Next();
    internal static HourlyLogFileInfo GetLatestOrNew(DateTime date, string logDirectory);
}
public class Serilog.Sinks.RollingFileAlternate.Sinks.HourlyRolling.HourlyRollingFileSink : object {
    private static string ThisObjectName;
    private ITextFormatter formatter;
    private Nullable`1<int> retainedFileCountLimit;
    private Encoding encoding;
    private HourlyFileSink currentSink;
    private object syncRoot;
    private bool disposed;
    private string logDirectory;
    public HourlyRollingFileSink(string logDirectory, ITextFormatter formatter, Nullable`1<int> retainedFileCountLimit, Encoding encoding);
    private static HourlyRollingFileSink();
    public sealed virtual void Emit(LogEvent logEvent);
    private HourlyFileSink GetLatestSink();
    private HourlyFileSink NextFileSink(DateTime dateTimeUtc);
    private static void EnsureDirectoryCreated(string path);
    private void ApplyRetentionPolicy();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private bool <ApplyRetentionPolicy>b__13_3(string n);
}
public class Serilog.Sinks.RollingFileAlternate.Sinks.SizeRollingFileSink.AlternateRollingFileSink : object {
    private static string ThisObjectName;
    private ITextFormatter formatter;
    private long fileSizeLimitBytes;
    private Nullable`1<int> retainedFileCountLimit;
    private Encoding encoding;
    private SizeLimitedFileSink currentSink;
    private object syncRoot;
    private bool disposed;
    private string logDirectory;
    private string logFilePrefix;
    internal SizeLimitedLogFileDescription CurrentLogFile { get; }
    public AlternateRollingFileSink(string logDirectory, ITextFormatter formatter, long fileSizeLimitBytes, Nullable`1<int> retainedFileCountLimit, Encoding encoding, string logFilePrefix);
    private static AlternateRollingFileSink();
    internal SizeLimitedLogFileDescription get_CurrentLogFile();
    public sealed virtual void Emit(LogEvent logEvent);
    private SizeLimitedFileSink GetLatestSink();
    private SizeLimitedFileSink NextSizeLimitedFileSink();
    private static void EnsureDirectoryCreated(string path);
    private void ApplyRetentionPolicy();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private bool <ApplyRetentionPolicy>b__17_3(string n);
}
internal class Serilog.Sinks.RollingFileAlternate.Sinks.SizeRollingFileSink.SizeLimitedFileSink : object {
    private static string ThisObjectName;
    private ITextFormatter formatter;
    private SizeLimitedLogFileDescription sizeLimitedLogFileDescription;
    private StreamWriter output;
    private object syncRoot;
    private bool disposed;
    private bool sizeLimitReached;
    private bool exceptionAlreadyThrown;
    internal bool SizeLimitReached { get; }
    internal SizeLimitedLogFileDescription LogFileDescription { get; }
    public SizeLimitedFileSink(ITextFormatter formatter, string logDirectory, SizeLimitedLogFileDescription sizeLimitedLogFileDescription, Encoding encoding);
    internal SizeLimitedFileSink(ITextFormatter formatter, SizeLimitedLogFileDescription sizeLimitedLogFileDescription, StreamWriter writer);
    private static SizeLimitedFileSink();
    private StreamWriter OpenFileForWriting(string folderPath, SizeLimitedLogFileDescription logFileDescription, Encoding encoding);
    private static void EnsureDirectoryCreated(string path);
    public sealed virtual void Emit(LogEvent logEvent);
    internal bool get_SizeLimitReached();
    internal SizeLimitedLogFileDescription get_LogFileDescription();
    public sealed virtual void Dispose();
}
internal class Serilog.Sinks.RollingFileAlternate.Sinks.SizeRollingFileSink.SizeLimitedLogFileDescription : object {
    public long SizeLimitBytes;
    public SizeLimitedLogFileInfo LogFileInfo;
    public string LogFilePrefix;
    public string FileName { get; }
    public SizeLimitedLogFileDescription(SizeLimitedLogFileInfo logFileInfo, long sizeLimitBytes, string logFilePrefix);
    public string get_FileName();
    internal SizeLimitedLogFileDescription Next();
}
internal class Serilog.Sinks.RollingFileAlternate.Sinks.SizeRollingFileSink.SizeLimitedLogFileInfo : object {
    private static string NumberFormat;
    private static string DateFormat;
    [CompilerGeneratedAttribute]
private UInt32 <Sequence>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Date>k__BackingField;
    internal UInt32 Sequence { get; private set; }
    internal string FileName { get; private set; }
    internal DateTime Date { get; private set; }
    public SizeLimitedLogFileInfo(DateTime date, UInt32 sequence, string logFilePrefix);
    [CompilerGeneratedAttribute]
internal UInt32 get_Sequence();
    [CompilerGeneratedAttribute]
private void set_Sequence(UInt32 value);
    [CompilerGeneratedAttribute]
internal string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    [CompilerGeneratedAttribute]
internal DateTime get_Date();
    [CompilerGeneratedAttribute]
private void set_Date(DateTime value);
    public SizeLimitedLogFileInfo Next(string logFilePrefix);
    internal static SizeLimitedLogFileInfo GetLatestOrNew(DateTime date, string logDirectory, string logFilePrefix);
}
