[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.ObservableExtensions : object {
    [ExtensionAttribute]
public static IDisposable Subscribe(IObservable`1<T> source);
    [ExtensionAttribute]
public static IDisposable Subscribe(IObservable`1<T> source, Action`1<T> onNext);
    [ExtensionAttribute]
public static IDisposable Subscribe(IObservable`1<T> source, Action`1<T> onNext, Action`1<Exception> onError);
    [ExtensionAttribute]
public static IDisposable Subscribe(IObservable`1<T> source, Action`1<T> onNext, Action onCompleted);
    [ExtensionAttribute]
public static IDisposable Subscribe(IObservable`1<T> source, Action`1<T> onNext, Action`1<Exception> onError, Action onCompleted);
    [ExtensionAttribute]
public static void Subscribe(IObservable`1<T> source, IObserver`1<T> observer, CancellationToken token);
    [ExtensionAttribute]
public static void Subscribe(IObservable`1<T> source, CancellationToken token);
    [ExtensionAttribute]
public static void Subscribe(IObservable`1<T> source, Action`1<T> onNext, CancellationToken token);
    [ExtensionAttribute]
public static void Subscribe(IObservable`1<T> source, Action`1<T> onNext, Action`1<Exception> onError, CancellationToken token);
    [ExtensionAttribute]
public static void Subscribe(IObservable`1<T> source, Action`1<T> onNext, Action onCompleted, CancellationToken token);
    [ExtensionAttribute]
public static void Subscribe(IObservable`1<T> source, Action`1<T> onNext, Action`1<Exception> onError, Action onCompleted, CancellationToken token);
    [ExtensionAttribute]
private static void Subscribe_(IObservable`1<T> source, IObserver`1<T> observer, CancellationToken token);
    [ExtensionAttribute]
[EditorBrowsableAttribute("2")]
public static IDisposable SubscribeSafe(IObservable`1<T> source, IObserver`1<T> observer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.AnonymousEnumerable`1 : object {
    private Func`1<IEnumerator`1<T>> _getEnumerator;
    public AnonymousEnumerable`1(Func`1<IEnumerator`1<T>> getEnumerator);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class System.Reactive.AnonymousObservable`1 : ObservableBase`1<T> {
    private Func`2<IObserver`1<T>, IDisposable> _subscribe;
    public AnonymousObservable`1(Func`2<IObserver`1<T>, IDisposable> subscribe);
    protected virtual IDisposable SubscribeCore(IObserver`1<T> observer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class System.Reactive.AnonymousObserver`1 : ObserverBase`1<T> {
    private Action`1<T> _onNext;
    private Action`1<Exception> _onError;
    private Action _onCompleted;
    public AnonymousObserver`1(Action`1<T> onNext, Action`1<Exception> onError, Action onCompleted);
    public AnonymousObserver`1(Action`1<T> onNext);
    public AnonymousObserver`1(Action`1<T> onNext, Action`1<Exception> onError);
    public AnonymousObserver`1(Action`1<T> onNext, Action onCompleted);
    protected virtual void OnNextCore(T value);
    protected virtual void OnErrorCore(Exception error);
    protected virtual void OnCompletedCore();
    internal ISafeObserver`1<T> MakeSafe();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.AnonymousSafeObserver`1 : SafeObserver`1<T> {
    private Action`1<T> _onNext;
    private Action`1<Exception> _onError;
    private Action _onCompleted;
    private int _isStopped;
    public AnonymousSafeObserver`1(Action`1<T> onNext, Action`1<Exception> onError, Action onCompleted);
    public virtual void OnNext(T value);
    public virtual void OnError(Exception error);
    public virtual void OnCompleted();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.AsyncLockObserver`1 : ObserverBase`1<T> {
    private AsyncLock _gate;
    private IObserver`1<T> _observer;
    public AsyncLockObserver`1(IObserver`1<T> observer, AsyncLock gate);
    protected virtual void OnNextCore(T value);
    protected virtual void OnErrorCore(Exception exception);
    protected virtual void OnCompletedCore();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.AutoDetachObserver`1 : ObserverBase`1<T> {
    private IObserver`1<T> _observer;
    private SingleAssignmentDisposableValue _disposable;
    public AutoDetachObserver`1(IObserver`1<T> observer);
    public sealed virtual void SetResource(IDisposable resource);
    protected virtual void OnNextCore(T value);
    protected virtual void OnErrorCore(Exception exception);
    protected virtual void OnCompletedCore();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class System.Reactive.BasicProducer`1 : object {
    public sealed virtual IDisposable Subscribe(IObserver`1<TSource> observer);
    public sealed virtual IDisposable SubscribeRaw(IObserver`1<TSource> observer, bool enableSafeguard);
    protected abstract virtual IDisposable Run(IObserver`1<TSource> observer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.BinaryObserver`2 : object {
    [CompilerGeneratedAttribute]
private IObserver`1<TLeft> <LeftObserver>k__BackingField;
    [CompilerGeneratedAttribute]
private IObserver`1<TRight> <RightObserver>k__BackingField;
    public IObserver`1<TLeft> LeftObserver { get; }
    public IObserver`1<TRight> RightObserver { get; }
    public BinaryObserver`2(IObserver`1<TLeft> leftObserver, IObserver`1<TRight> rightObserver);
    public BinaryObserver`2(Action`1<Notification`1<TLeft>> left, Action`1<Notification`1<TRight>> right);
    [CompilerGeneratedAttribute]
public IObserver`1<TLeft> get_LeftObserver();
    [CompilerGeneratedAttribute]
public IObserver`1<TRight> get_RightObserver();
    private sealed virtual override void System.IObserver<System.Reactive.Either<System.Reactive.Notification<TLeft>,System.Reactive.Notification<TRight>>>.OnNext(Either`2<Notification`1<TLeft>, Notification`1<TRight>> value);
    private sealed virtual override void System.IObserver<System.Reactive.Either<System.Reactive.Notification<TLeft>,System.Reactive.Notification<TRight>>>.OnError(Exception exception);
    private sealed virtual override void System.IObserver<System.Reactive.Either<System.Reactive.Notification<TLeft>,System.Reactive.Notification<TRight>>>.OnCompleted();
    [CompilerGeneratedAttribute]
private void <System.IObserver<System.Reactive.Either<System.Reactive.Notification<TLeft>,System.Reactive.Notification<TRight>>>.OnNext>b__8_0(Notification`1<TLeft> left);
    [CompilerGeneratedAttribute]
private void <System.IObserver<System.Reactive.Either<System.Reactive.Notification<TLeft>,System.Reactive.Notification<TRight>>>.OnNext>b__8_1(Notification`1<TRight> right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.CheckedObserver`1 : object {
    private IObserver`1<T> _observer;
    private int _state;
    private static int Idle;
    private static int Busy;
    private static int Done;
    public CheckedObserver`1(IObserver`1<T> observer);
    public sealed virtual void OnNext(T value);
    public sealed virtual void OnError(Exception error);
    public sealed virtual void OnCompleted();
    private void CheckAccess();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class System.Reactive.ConcatSink`1 : TailRecursiveSink`1<TSource> {
    protected ConcatSink`1(IObserver`1<TSource> observer);
    protected virtual IEnumerable`1<IObservable`1<TSource>> Extract(IObservable`1<TSource> source);
    public virtual void OnCompleted();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reactive.Concurrency.AsyncLock : object {
    private bool _isAcquired;
    private bool _hasFaulted;
    private object _guard;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Queue`1<ValueTuple`3<Action`2<Delegate, object>, Delegate, object>> _queue;
    public void Wait(Action action);
    internal void Wait(TState state, Action`1<TState> action);
    private void Wait(object state, Delegate delegate, Action`2<Delegate, object> action);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Concurrency.CatchScheduler`1 : SchedulerWrapper {
    private Func`2<TException, bool> _handler;
    public CatchScheduler`1(IScheduler scheduler, Func`2<TException, bool> handler);
    public CatchScheduler`1(IScheduler scheduler, Func`2<TException, bool> handler, ConditionalWeakTable`2<IScheduler, IScheduler> cache);
    protected virtual Func`3<IScheduler, TState, IDisposable> Wrap(Func`3<IScheduler, TState, IDisposable> action);
    protected virtual SchedulerWrapper Clone(IScheduler scheduler, ConditionalWeakTable`2<IScheduler, IScheduler> cache);
    protected virtual bool TryGetService(IServiceProvider provider, Type serviceType, Object& service);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Concurrency.ConcurrencyAbstractionLayer : object {
    [CompilerGeneratedAttribute]
private static IConcurrencyAbstractionLayer <Current>k__BackingField;
    public static IConcurrencyAbstractionLayer Current { get; }
    private static ConcurrencyAbstractionLayer();
    [CompilerGeneratedAttribute]
public static IConcurrencyAbstractionLayer get_Current();
    private static IConcurrencyAbstractionLayer Initialize();
}
internal class System.Reactive.Concurrency.ConcurrencyAbstractionLayerImpl : object {
    public bool SupportsLongRunning { get; }
    [NullableContextAttribute("1")]
public sealed virtual IDisposable StartTimer(Action`1<object> action, object state, TimeSpan dueTime);
    [NullableContextAttribute("1")]
public sealed virtual IDisposable StartPeriodicTimer(Action action, TimeSpan period);
    [NullableContextAttribute("1")]
public sealed virtual IDisposable QueueUserWorkItem(Action`1<object> action, object state);
    public sealed virtual void Sleep(TimeSpan timeout);
    [NullableContextAttribute("1")]
public sealed virtual IStopwatch StartStopwatch();
    public sealed virtual bool get_SupportsLongRunning();
    [NullableContextAttribute("2")]
public sealed virtual void StartThread(Action`1<object> action, object state);
    private static TimeSpan Normalize(TimeSpan dueTime);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reactive.Concurrency.CurrentThreadScheduler : LocalScheduler {
    private static Lazy`1<CurrentThreadScheduler> StaticInstance;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static SchedulerQueue`1<TimeSpan> _threadLocalQueue;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static IStopwatch _clock;
    [ThreadStaticAttribute]
private static bool _running;
    public static CurrentThreadScheduler Instance { get; }
    private static TimeSpan Time { get; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This instance property is no longer supported. Use CurrentThreadScheduler.IsScheduleRequired instead.")]
public bool ScheduleRequired { get; }
    [EditorBrowsableAttribute("2")]
public static bool IsScheduleRequired { get; }
    private static CurrentThreadScheduler();
    public static CurrentThreadScheduler get_Instance();
    [NullableContextAttribute("2")]
private static SchedulerQueue`1<TimeSpan> GetQueue();
    [NullableContextAttribute("2")]
private static void SetQueue(SchedulerQueue`1<TimeSpan> newQueue);
    private static TimeSpan get_Time();
    public bool get_ScheduleRequired();
    public static bool get_IsScheduleRequired();
    public virtual IDisposable Schedule(TState state, TimeSpan dueTime, Func`3<IScheduler, TState, IDisposable> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reactive.Concurrency.DefaultScheduler : LocalScheduler {
    private static Lazy`1<DefaultScheduler> DefaultInstance;
    private static IConcurrencyAbstractionLayer Cal;
    public static DefaultScheduler Instance { get; }
    private static DefaultScheduler();
    public static DefaultScheduler get_Instance();
    public virtual IDisposable Schedule(TState state, Func`3<IScheduler, TState, IDisposable> action);
    public virtual IDisposable Schedule(TState state, TimeSpan dueTime, Func`3<IScheduler, TState, IDisposable> action);
    public sealed virtual IDisposable SchedulePeriodic(TState state, TimeSpan period, Func`2<TState, TState> action);
    protected virtual object GetService(Type serviceType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Concurrency.DisableOptimizationsScheduler : SchedulerWrapper {
    private Type[] _optimizationInterfaces;
    public DisableOptimizationsScheduler(IScheduler scheduler);
    public DisableOptimizationsScheduler(IScheduler scheduler, Type[] optimizationInterfaces);
    public DisableOptimizationsScheduler(IScheduler scheduler, Type[] optimizationInterfaces, ConditionalWeakTable`2<IScheduler, IScheduler> cache);
    protected virtual SchedulerWrapper Clone(IScheduler scheduler, ConditionalWeakTable`2<IScheduler, IScheduler> cache);
    protected virtual bool TryGetService(IServiceProvider provider, Type serviceType, Object& service);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reactive.Concurrency.EventLoopScheduler : LocalScheduler {
    private static int _counter;
    private Func`2<ThreadStart, Thread> _threadFactory;
    private IStopwatch _stopwatch;
    [NullableAttribute("2")]
private Thread _thread;
    private object _gate;
    private SemaphoreSlim _evt;
    private SchedulerQueue`1<TimeSpan> _queue;
    private Queue`1<ScheduledItem`1<TimeSpan>> _readyList;
    [NullableAttribute("2")]
private ScheduledItem`1<TimeSpan> _nextItem;
    private SerialDisposableValue _nextTimer;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private bool <ExitIfEmpty>k__BackingField;
    internal bool ExitIfEmpty { get; internal set; }
    public EventLoopScheduler(Func`2<ThreadStart, Thread> threadFactory);
    [CompilerGeneratedAttribute]
internal bool get_ExitIfEmpty();
    [CompilerGeneratedAttribute]
internal void set_ExitIfEmpty(bool value);
    public virtual IDisposable Schedule(TState state, TimeSpan dueTime, Func`3<IScheduler, TState, IDisposable> action);
    public sealed virtual IDisposable SchedulePeriodic(TState state, TimeSpan period, Func`2<TState, TState> action);
    public virtual IStopwatch StartStopwatch();
    public sealed virtual void Dispose();
    private void EnsureThread();
    private void Run();
    [NullableContextAttribute("2")]
private void Tick(object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("\{ Clock = {Clock} Now = {Now.ToString("O")} \}")]
public class System.Reactive.Concurrency.HistoricalScheduler : HistoricalSchedulerBase {
    private SchedulerQueue`1<DateTimeOffset> _queue;
    public HistoricalScheduler(DateTimeOffset initialClock);
    public HistoricalScheduler(DateTimeOffset initialClock, IComparer`1<DateTimeOffset> comparer);
    [NullableContextAttribute("2")]
protected virtual IScheduledItem`1<DateTimeOffset> GetNext();
    public virtual IDisposable ScheduleAbsolute(TState state, DateTimeOffset dueTime, Func`3<IScheduler, TState, IDisposable> action);
}
public abstract class System.Reactive.Concurrency.HistoricalSchedulerBase : VirtualTimeSchedulerBase`2<DateTimeOffset, TimeSpan> {
    protected HistoricalSchedulerBase(DateTimeOffset initialClock);
    [NullableContextAttribute("1")]
protected HistoricalSchedulerBase(DateTimeOffset initialClock, IComparer`1<DateTimeOffset> comparer);
    protected virtual DateTimeOffset Add(DateTimeOffset absolute, TimeSpan relative);
    protected virtual DateTimeOffset ToDateTimeOffset(DateTimeOffset absolute);
    protected virtual TimeSpan ToRelative(TimeSpan timeSpan);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
public interface System.Reactive.Concurrency.IConcurrencyAbstractionLayer {
    public bool SupportsLongRunning { get; }
    public abstract virtual IDisposable StartTimer(Action`1<object> action, object state, TimeSpan dueTime);
    public abstract virtual IDisposable StartPeriodicTimer(Action action, TimeSpan period);
    public abstract virtual IDisposable QueueUserWorkItem(Action`1<object> action, object state);
    public abstract virtual void Sleep(TimeSpan timeout);
    public abstract virtual IStopwatch StartStopwatch();
    public abstract virtual bool get_SupportsLongRunning();
    [NullableContextAttribute("2")]
public abstract virtual void StartThread(Action`1<object> action, object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reactive.Concurrency.ImmediateScheduler : LocalScheduler {
    private static Lazy`1<ImmediateScheduler> StaticInstance;
    public static ImmediateScheduler Instance { get; }
    private static ImmediateScheduler();
    public static ImmediateScheduler get_Instance();
    public virtual IDisposable Schedule(TState state, Func`3<IScheduler, TState, IDisposable> action);
    public virtual IDisposable Schedule(TState state, TimeSpan dueTime, Func`3<IScheduler, TState, IDisposable> action);
}
[NullableContextAttribute("1")]
public interface System.Reactive.Concurrency.IScheduledItem`1 {
    public TAbsolute DueTime { get; }
    public abstract virtual TAbsolute get_DueTime();
    public abstract virtual void Invoke();
}
[NullableContextAttribute("1")]
public interface System.Reactive.Concurrency.IScheduler {
    public DateTimeOffset Now { get; }
    public abstract virtual DateTimeOffset get_Now();
    public abstract virtual IDisposable Schedule(TState state, Func`3<IScheduler, TState, IDisposable> action);
    public abstract virtual IDisposable Schedule(TState state, TimeSpan dueTime, Func`3<IScheduler, TState, IDisposable> action);
    public abstract virtual IDisposable Schedule(TState state, DateTimeOffset dueTime, Func`3<IScheduler, TState, IDisposable> action);
}
[NullableContextAttribute("1")]
public interface System.Reactive.Concurrency.ISchedulerLongRunning {
    public abstract virtual IDisposable ScheduleLongRunning(TState state, Action`2<TState, ICancelable> action);
}
[NullableContextAttribute("1")]
public interface System.Reactive.Concurrency.ISchedulerPeriodic {
    public abstract virtual IDisposable SchedulePeriodic(TState state, TimeSpan period, Func`2<TState, TState> action);
}
public interface System.Reactive.Concurrency.IStopwatch {
    public TimeSpan Elapsed { get; }
    public abstract virtual TimeSpan get_Elapsed();
}
[NullableContextAttribute("1")]
public interface System.Reactive.Concurrency.IStopwatchProvider {
    public abstract virtual IStopwatch StartStopwatch();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Reactive.Concurrency.LocalScheduler : object {
    private static object Gate;
    private static object StaticGate;
    private static PriorityQueue`1<WorkItem> LongTerm;
    private static SerialDisposable NextLongTermTimer;
    [NullableAttribute("2")]
private static WorkItem _nextLongTermWorkItem;
    private PriorityQueue`1<WorkItem> _shortTerm;
    private HashSet`1<IDisposable> _shortTermWork;
    private static TimeSpan ShortTerm;
    private static int MaxErrorRatio;
    private static TimeSpan LongToShort;
    private static TimeSpan RetryShort;
    private static TimeSpan MaxSupportedTimer;
    public DateTimeOffset Now { get; }
    private static LocalScheduler();
    public virtual DateTimeOffset get_Now();
    public virtual IDisposable Schedule(TState state, Func`3<IScheduler, TState, IDisposable> action);
    public abstract virtual IDisposable Schedule(TState state, TimeSpan dueTime, Func`3<IScheduler, TState, IDisposable> action);
    public virtual IDisposable Schedule(TState state, DateTimeOffset dueTime, Func`3<IScheduler, TState, IDisposable> action);
    public virtual IStopwatch StartStopwatch();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    protected virtual object GetService(Type serviceType);
    private IDisposable Enqueue(TState state, DateTimeOffset dueTime, Func`3<IScheduler, TState, IDisposable> action);
    private void ScheduleShortTermWork(WorkItem item);
    private IDisposable ExecuteNextShortTermWorkItem(IScheduler scheduler, IDisposable cancel);
    private static void ScheduleLongTermWork(WorkItem item);
    private static void UpdateLongTermProcessingTimer();
    private static void EvaluateLongTermQueue();
    internal virtual void SystemClockChanged(object sender, SystemClockChangedEventArgs args);
}
[CompilerGeneratedAttribute]
internal class System.Reactive.Concurrency.NamespaceDoc : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reactive.Concurrency.NewThreadScheduler : LocalScheduler {
    private static Lazy`1<NewThreadScheduler> Instance;
    private Func`2<ThreadStart, Thread> _threadFactory;
    public static NewThreadScheduler Default { get; }
    public NewThreadScheduler(Func`2<ThreadStart, Thread> threadFactory);
    private static NewThreadScheduler();
    public static NewThreadScheduler get_Default();
    public virtual IDisposable Schedule(TState state, TimeSpan dueTime, Func`3<IScheduler, TState, IDisposable> action);
    public sealed virtual IDisposable ScheduleLongRunning(TState state, Action`2<TState, ICancelable> action);
    public sealed virtual IDisposable SchedulePeriodic(TState state, TimeSpan period, Func`2<TState, TState> action);
    public virtual IStopwatch StartStopwatch();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Concurrency.ObserveOn`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Reactive.Concurrency.ScheduledItem`1 : object {
    private SingleAssignmentDisposableValue _disposable;
    private IComparer`1<TAbsolute> _comparer;
    [CompilerGeneratedAttribute]
private TAbsolute <DueTime>k__BackingField;
    public TAbsolute DueTime { get; }
    public bool IsCanceled { get; }
    protected ScheduledItem`1(TAbsolute dueTime, IComparer`1<TAbsolute> comparer);
    [CompilerGeneratedAttribute]
public sealed virtual TAbsolute get_DueTime();
    public sealed virtual void Invoke();
    protected abstract virtual IDisposable InvokeCore();
    public sealed virtual int CompareTo(ScheduledItem`1<TAbsolute> other);
    public static bool op_LessThan(ScheduledItem`1<TAbsolute> left, ScheduledItem`1<TAbsolute> right);
    public static bool op_LessThanOrEqual(ScheduledItem`1<TAbsolute> left, ScheduledItem`1<TAbsolute> right);
    public static bool op_GreaterThan(ScheduledItem`1<TAbsolute> left, ScheduledItem`1<TAbsolute> right);
    public static bool op_GreaterThanOrEqual(ScheduledItem`1<TAbsolute> left, ScheduledItem`1<TAbsolute> right);
    public static bool op_Equality(ScheduledItem`1<TAbsolute> left, ScheduledItem`1<TAbsolute> right);
    public static bool op_Inequality(ScheduledItem`1<TAbsolute> left, ScheduledItem`1<TAbsolute> right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void Cancel();
    public bool get_IsCanceled();
    private sealed virtual override void System.IDisposable.Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class System.Reactive.Concurrency.ScheduledItem`2 : ScheduledItem`1<TAbsolute> {
    private IScheduler _scheduler;
    private TValue _state;
    private Func`3<IScheduler, TValue, IDisposable> _action;
    public ScheduledItem`2(IScheduler scheduler, TValue state, Func`3<IScheduler, TValue, IDisposable> action, TAbsolute dueTime, IComparer`1<TAbsolute> comparer);
    public ScheduledItem`2(IScheduler scheduler, TValue state, Func`3<IScheduler, TValue, IDisposable> action, TAbsolute dueTime);
    protected virtual IDisposable InvokeCore();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Reactive.Concurrency.Scheduler : object {
    private static Lazy`1<IScheduler> _threadPool;
    private static Lazy`1<IScheduler> _newThread;
    private static Lazy`1<IScheduler> _taskPool;
    internal static Type[] Optimizations;
    public static DateTimeOffset Now { get; }
    public static ImmediateScheduler Immediate { get; }
    public static CurrentThreadScheduler CurrentThread { get; }
    public static DefaultScheduler Default { get; }
    [ObsoleteAttribute("This property is no longer supported due to refactoring of the API surface and elimination of platform-specific dependencies. Consider using Scheduler.Default to obtain the platform's most appropriate pool-based scheduler. In order to access a specific pool-based scheduler, please add a reference to the System.Reactive.PlatformServices assembly for your target platform and use the appropriate scheduler in the System.Reactive.Concurrency namespace.")]
public static IScheduler ThreadPool { get; }
    [ObsoleteAttribute("This property is no longer supported due to refactoring of the API surface and elimination of platform-specific dependencies. Please use NewThreadScheduler.Default to obtain an instance of this scheduler type.")]
public static IScheduler NewThread { get; }
    [ObsoleteAttribute("This property is no longer supported due to refactoring of the API surface and elimination of platform-specific dependencies. Please use TaskPoolScheduler.Default to obtain an instance of this scheduler type.")]
public static IScheduler TaskPool { get; }
    private static Scheduler();
    [ExtensionAttribute]
public static SchedulerOperation Yield(IScheduler scheduler);
    [ExtensionAttribute]
public static SchedulerOperation Yield(IScheduler scheduler, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static SchedulerOperation Sleep(IScheduler scheduler, TimeSpan dueTime);
    [ExtensionAttribute]
public static SchedulerOperation Sleep(IScheduler scheduler, TimeSpan dueTime, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static SchedulerOperation Sleep(IScheduler scheduler, DateTimeOffset dueTime);
    [ExtensionAttribute]
public static SchedulerOperation Sleep(IScheduler scheduler, DateTimeOffset dueTime, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IDisposable ScheduleAsync(IScheduler scheduler, TState state, Func`4<IScheduler, TState, CancellationToken, Task> action);
    [ExtensionAttribute]
public static IDisposable ScheduleAsync(IScheduler scheduler, TState state, Func`4<IScheduler, TState, CancellationToken, Task`1<IDisposable>> action);
    [ExtensionAttribute]
public static IDisposable ScheduleAsync(IScheduler scheduler, Func`3<IScheduler, CancellationToken, Task> action);
    [ExtensionAttribute]
public static IDisposable ScheduleAsync(IScheduler scheduler, Func`3<IScheduler, CancellationToken, Task`1<IDisposable>> action);
    [ExtensionAttribute]
public static IDisposable ScheduleAsync(IScheduler scheduler, TState state, TimeSpan dueTime, Func`4<IScheduler, TState, CancellationToken, Task> action);
    [ExtensionAttribute]
public static IDisposable ScheduleAsync(IScheduler scheduler, TState state, TimeSpan dueTime, Func`4<IScheduler, TState, CancellationToken, Task`1<IDisposable>> action);
    [ExtensionAttribute]
public static IDisposable ScheduleAsync(IScheduler scheduler, TimeSpan dueTime, Func`3<IScheduler, CancellationToken, Task> action);
    [ExtensionAttribute]
public static IDisposable ScheduleAsync(IScheduler scheduler, TimeSpan dueTime, Func`3<IScheduler, CancellationToken, Task`1<IDisposable>> action);
    [ExtensionAttribute]
public static IDisposable ScheduleAsync(IScheduler scheduler, TState state, DateTimeOffset dueTime, Func`4<IScheduler, TState, CancellationToken, Task> action);
    [ExtensionAttribute]
public static IDisposable ScheduleAsync(IScheduler scheduler, TState state, DateTimeOffset dueTime, Func`4<IScheduler, TState, CancellationToken, Task`1<IDisposable>> action);
    [ExtensionAttribute]
public static IDisposable ScheduleAsync(IScheduler scheduler, DateTimeOffset dueTime, Func`3<IScheduler, CancellationToken, Task> action);
    [ExtensionAttribute]
public static IDisposable ScheduleAsync(IScheduler scheduler, DateTimeOffset dueTime, Func`3<IScheduler, CancellationToken, Task`1<IDisposable>> action);
    private static IDisposable ScheduleAsync_(IScheduler scheduler, TState state, Func`4<IScheduler, TState, CancellationToken, Task> action);
    private static IDisposable ScheduleAsync_(IScheduler scheduler, TState state, Func`4<IScheduler, TState, CancellationToken, Task`1<IDisposable>> action);
    private static IDisposable ScheduleAsync_(IScheduler scheduler, TState state, TimeSpan dueTime, Func`4<IScheduler, TState, CancellationToken, Task> action);
    private static IDisposable ScheduleAsync_(IScheduler scheduler, TState state, TimeSpan dueTime, Func`4<IScheduler, TState, CancellationToken, Task`1<IDisposable>> action);
    private static IDisposable ScheduleAsync_(IScheduler scheduler, TState state, DateTimeOffset dueTime, Func`4<IScheduler, TState, CancellationToken, Task> action);
    private static IDisposable ScheduleAsync_(IScheduler scheduler, TState state, DateTimeOffset dueTime, Func`4<IScheduler, TState, CancellationToken, Task`1<IDisposable>> action);
    private static IDisposable InvokeAsync(IScheduler self, TState s, Func`4<IScheduler, TState, CancellationToken, Task`1<IDisposable>> action);
    private static IDisposable InvokeAsync(IScheduler self, TState s, Func`4<IScheduler, TState, CancellationToken, Task> action);
    [ExtensionAttribute]
private static CancellationToken GetCancellationToken(IScheduler scheduler);
    public static DateTimeOffset get_Now();
    public static TimeSpan Normalize(TimeSpan timeSpan);
    public static ImmediateScheduler get_Immediate();
    public static CurrentThreadScheduler get_CurrentThread();
    public static DefaultScheduler get_Default();
    public static IScheduler get_ThreadPool();
    public static IScheduler get_NewThread();
    public static IScheduler get_TaskPool();
    private static IScheduler Initialize(string name);
    [ExtensionAttribute]
public static IDisposable Schedule(IScheduler scheduler, Action`1<Action> action);
    [ExtensionAttribute]
public static IDisposable Schedule(IScheduler scheduler, TState state, Action`2<TState, Action`1<TState>> action);
    private static IDisposable InvokeRec1(IScheduler scheduler, ValueTuple`2<TState, Action`2<TState, Action`1<TState>>> tuple);
    [ExtensionAttribute]
public static IDisposable Schedule(IScheduler scheduler, TimeSpan dueTime, Action`1<Action`1<TimeSpan>> action);
    [ExtensionAttribute]
public static IDisposable Schedule(IScheduler scheduler, TState state, TimeSpan dueTime, Action`2<TState, Action`2<TState, TimeSpan>> action);
    private static IDisposable InvokeRec2(IScheduler scheduler, ValueTuple`2<TState, Action`2<TState, Action`2<TState, TimeSpan>>> tuple);
    [ExtensionAttribute]
public static IDisposable Schedule(IScheduler scheduler, DateTimeOffset dueTime, Action`1<Action`1<DateTimeOffset>> action);
    [ExtensionAttribute]
public static IDisposable Schedule(IScheduler scheduler, TState state, DateTimeOffset dueTime, Action`2<TState, Action`2<TState, DateTimeOffset>> action);
    private static IDisposable InvokeRec3(IScheduler scheduler, ValueTuple`2<TState, Action`2<TState, Action`2<TState, DateTimeOffset>>> tuple);
    [ExtensionAttribute]
public static ISchedulerLongRunning AsLongRunning(IScheduler scheduler);
    [ExtensionAttribute]
public static IStopwatchProvider AsStopwatchProvider(IScheduler scheduler);
    [ExtensionAttribute]
public static ISchedulerPeriodic AsPeriodic(IScheduler scheduler);
    private static T As(IScheduler scheduler);
    [ExtensionAttribute]
public static IDisposable SchedulePeriodic(IScheduler scheduler, TState state, TimeSpan period, Func`2<TState, TState> action);
    [ExtensionAttribute]
public static IDisposable SchedulePeriodic(IScheduler scheduler, TState state, TimeSpan period, Action`1<TState> action);
    [ExtensionAttribute]
public static IDisposable SchedulePeriodic(IScheduler scheduler, TimeSpan period, Action action);
    [ExtensionAttribute]
public static IStopwatch StartStopwatch(IScheduler scheduler);
    private static IDisposable SchedulePeriodic_(IScheduler scheduler, TState state, TimeSpan period, Func`2<TState, TState> action);
    [ExtensionAttribute]
public static IDisposable Schedule(IScheduler scheduler, Action action);
    [ExtensionAttribute]
internal static IDisposable ScheduleAction(IScheduler scheduler, TState state, Action`1<TState> action);
    [ExtensionAttribute]
internal static IDisposable ScheduleAction(IScheduler scheduler, TState state, Func`2<TState, IDisposable> action);
    [ExtensionAttribute]
public static IDisposable Schedule(IScheduler scheduler, TimeSpan dueTime, Action action);
    [ExtensionAttribute]
internal static IDisposable ScheduleAction(IScheduler scheduler, TState state, TimeSpan dueTime, Action`1<TState> action);
    [ExtensionAttribute]
internal static IDisposable ScheduleAction(IScheduler scheduler, TState state, TimeSpan dueTime, Func`2<TState, IDisposable> action);
    [ExtensionAttribute]
public static IDisposable Schedule(IScheduler scheduler, DateTimeOffset dueTime, Action action);
    [ExtensionAttribute]
internal static IDisposable ScheduleAction(IScheduler scheduler, TState state, DateTimeOffset dueTime, Action`1<TState> action);
    [ExtensionAttribute]
internal static IDisposable ScheduleAction(IScheduler scheduler, TState state, DateTimeOffset dueTime, Func`2<TState, IDisposable> action);
    [ExtensionAttribute]
public static IDisposable ScheduleLongRunning(ISchedulerLongRunning scheduler, Action`1<ICancelable> action);
    private static IDisposable Invoke(Action action);
    private static IDisposable Invoke(ValueTuple`2<TState, Action`1<TState>> tuple);
    private static IDisposable Invoke(ValueTuple`2<TState, Func`2<TState, IDisposable>> tuple);
    [ExtensionAttribute]
public static IScheduler DisableOptimizations(IScheduler scheduler);
    [ExtensionAttribute]
public static IScheduler DisableOptimizations(IScheduler scheduler, Type[] optimizationInterfaces);
    [ExtensionAttribute]
public static IScheduler Catch(IScheduler scheduler, Func`2<TException, bool> handler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Concurrency.SchedulerDefaults : object {
    internal static IScheduler ConstantTimeOperations { get; }
    internal static IScheduler TailRecursion { get; }
    internal static IScheduler Iteration { get; }
    internal static IScheduler TimeBasedOperations { get; }
    internal static IScheduler AsyncConversions { get; }
    internal static IScheduler get_ConstantTimeOperations();
    internal static IScheduler get_TailRecursion();
    internal static IScheduler get_Iteration();
    internal static IScheduler get_TimeBasedOperations();
    internal static IScheduler get_AsyncConversions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reactive.Concurrency.SchedulerOperation : object {
    private Func`2<Action, IDisposable> _schedule;
    private CancellationToken _cancellationToken;
    private bool _postBackToOriginalContext;
    internal SchedulerOperation(Func`2<Action, IDisposable> schedule, CancellationToken cancellationToken);
    internal SchedulerOperation(Func`2<Action, IDisposable> schedule, bool postBackToOriginalContext, CancellationToken cancellationToken);
    public SchedulerOperation ConfigureAwait(bool continueOnCapturedContext);
    public SchedulerOperationAwaiter GetAwaiter();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class System.Reactive.Concurrency.SchedulerOperationAwaiter : object {
    private Func`2<Action, IDisposable> _schedule;
    private CancellationToken _cancellationToken;
    private bool _postBackToOriginalContext;
    private CancellationTokenRegistration _ctr;
    [NullableAttribute("2")]
private Action modreq(System.Runtime.CompilerServices.IsVolatile) _continuation;
    [NullableAttribute("2")]
private IDisposable modreq(System.Runtime.CompilerServices.IsVolatile) _work;
    public bool IsCompleted { get; }
    internal SchedulerOperationAwaiter(Func`2<Action, IDisposable> schedule, bool postBackToOriginalContext, CancellationToken cancellationToken);
    public bool get_IsCompleted();
    public void GetResult();
    public sealed virtual void OnCompleted(Action continuation);
    private void Cancel();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reactive.Concurrency.SchedulerQueue`1 : object {
    private PriorityQueue`1<ScheduledItem`1<TAbsolute>> _queue;
    public int Count { get; }
    public SchedulerQueue`1(int capacity);
    public int get_Count();
    public void Enqueue(ScheduledItem`1<TAbsolute> scheduledItem);
    public bool Remove(ScheduledItem`1<TAbsolute> scheduledItem);
    public ScheduledItem`1<TAbsolute> Dequeue();
    public ScheduledItem`1<TAbsolute> Peek();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class System.Reactive.Concurrency.SchedulerWrapper : object {
    protected IScheduler _scheduler;
    private ConditionalWeakTable`2<IScheduler, IScheduler> _cache;
    public DateTimeOffset Now { get; }
    protected SchedulerWrapper(IScheduler scheduler);
    protected SchedulerWrapper(IScheduler scheduler, ConditionalWeakTable`2<IScheduler, IScheduler> cache);
    public sealed virtual DateTimeOffset get_Now();
    public sealed virtual IDisposable Schedule(TState state, Func`3<IScheduler, TState, IDisposable> action);
    public sealed virtual IDisposable Schedule(TState state, TimeSpan dueTime, Func`3<IScheduler, TState, IDisposable> action);
    public sealed virtual IDisposable Schedule(TState state, DateTimeOffset dueTime, Func`3<IScheduler, TState, IDisposable> action);
    protected virtual Func`3<IScheduler, TState, IDisposable> Wrap(Func`3<IScheduler, TState, IDisposable> action);
    protected IScheduler GetRecursiveWrapper(IScheduler scheduler);
    protected abstract virtual SchedulerWrapper Clone(IScheduler scheduler, ConditionalWeakTable`2<IScheduler, IScheduler> cache);
    public sealed virtual object GetService(Type serviceType);
    protected abstract virtual bool TryGetService(IServiceProvider provider, Type serviceType, Object& service);
    [CompilerGeneratedAttribute]
private IScheduler <GetRecursiveWrapper>b__10_0(IScheduler s);
}
internal class System.Reactive.Concurrency.StopwatchImpl : object {
    [NullableAttribute("1")]
private Stopwatch _sw;
    public TimeSpan Elapsed { get; }
    public sealed virtual TimeSpan get_Elapsed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("2")]
public static class System.Reactive.Concurrency.Synchronization : object {
    public static IObservable`1<TSource> SubscribeOn(IObservable`1<TSource> source, IScheduler scheduler);
    public static IObservable`1<TSource> SubscribeOn(IObservable`1<TSource> source, SynchronizationContext context);
    public static IObservable`1<TSource> ObserveOn(IObservable`1<TSource> source, IScheduler scheduler);
    public static IObservable`1<TSource> ObserveOn(IObservable`1<TSource> source, SynchronizationContext context);
    public static IObservable`1<TSource> Synchronize(IObservable`1<TSource> source);
    public static IObservable`1<TSource> Synchronize(IObservable`1<TSource> source, object gate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Reactive.Concurrency.SynchronizationContextExtensions : object {
    [ExtensionAttribute]
public static void PostWithStartComplete(SynchronizationContext context, Action`1<T> action, T state);
    [ExtensionAttribute]
public static void PostWithStartComplete(SynchronizationContext context, Action action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reactive.Concurrency.SynchronizationContextScheduler : LocalScheduler {
    private SynchronizationContext _context;
    private bool _alwaysPost;
    public SynchronizationContextScheduler(SynchronizationContext context);
    public SynchronizationContextScheduler(SynchronizationContext context, bool alwaysPost);
    public virtual IDisposable Schedule(TState state, Func`3<IScheduler, TState, IDisposable> action);
    public virtual IDisposable Schedule(TState state, TimeSpan dueTime, Func`3<IScheduler, TState, IDisposable> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Concurrency.Synchronize`1 : Producer`2<TSource, _<TSource>> {
    private IObservable`1<TSource> _source;
    [NullableAttribute("2")]
private object _gate;
    public Synchronize`1(IObservable`1<TSource> source, object gate);
    public Synchronize`1(IObservable`1<TSource> source);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Reactive.Concurrency.TaskHelpers : object {
    private static int MaxDelay;
    public static Task Delay(TimeSpan delay, CancellationToken token);
    [ExtensionAttribute]
public static Exception GetSingleException(Task t);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Reactive.Concurrency.TaskObservationOptions : object {
    [CompilerGeneratedAttribute]
private IScheduler <Scheduler>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreExceptionsAfterUnsubscribe>k__BackingField;
    public IScheduler Scheduler { get; }
    public bool IgnoreExceptionsAfterUnsubscribe { get; }
    public TaskObservationOptions(IScheduler scheduler, bool ignoreExceptionsAfterUnsubscribe);
    [CompilerGeneratedAttribute]
public IScheduler get_Scheduler();
    [CompilerGeneratedAttribute]
public bool get_IgnoreExceptionsAfterUnsubscribe();
    internal Value ToValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reactive.Concurrency.TaskPoolScheduler : LocalScheduler {
    private static Lazy`1<TaskPoolScheduler> LazyInstance;
    private TaskFactory _taskFactory;
    public static TaskPoolScheduler Default { get; }
    public TaskPoolScheduler(TaskFactory taskFactory);
    private static TaskPoolScheduler();
    public static TaskPoolScheduler get_Default();
    public virtual IDisposable Schedule(TState state, Func`3<IScheduler, TState, IDisposable> action);
    public virtual IDisposable Schedule(TState state, TimeSpan dueTime, Func`3<IScheduler, TState, IDisposable> action);
    private IDisposable ScheduleSlow(TState state, TimeSpan dueTime, Func`3<IScheduler, TState, IDisposable> action);
    public sealed virtual IDisposable ScheduleLongRunning(TState state, Action`2<TState, ICancelable> action);
    public virtual IStopwatch StartStopwatch();
    public sealed virtual IDisposable SchedulePeriodic(TState state, TimeSpan period, Func`2<TState, TState> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reactive.Concurrency.ThreadPoolScheduler : LocalScheduler {
    private static Lazy`1<ThreadPoolScheduler> LazyInstance;
    private static Lazy`1<NewThreadScheduler> LazyNewBackgroundThread;
    public static ThreadPoolScheduler Instance { get; }
    private static ThreadPoolScheduler();
    public static ThreadPoolScheduler get_Instance();
    public virtual IDisposable Schedule(TState state, Func`3<IScheduler, TState, IDisposable> action);
    public virtual IDisposable Schedule(TState state, TimeSpan dueTime, Func`3<IScheduler, TState, IDisposable> action);
    public sealed virtual IDisposable ScheduleLongRunning(TState state, Action`2<TState, ICancelable> action);
    public virtual IStopwatch StartStopwatch();
    public sealed virtual IDisposable SchedulePeriodic(TState state, TimeSpan period, Func`2<TState, TState> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Concurrency.UserWorkItem`1 : object {
    private SingleAssignmentDisposableValue _cancelRunDisposable;
    private SingleAssignmentDisposableValue _cancelQueueDisposable;
    private TState _state;
    private IScheduler _scheduler;
    private Func`3<IScheduler, TState, IDisposable> _action;
    unknown IDisposable CancelQueueDisposable {public set; }
    public UserWorkItem`1(IScheduler scheduler, TState state, Func`3<IScheduler, TState, IDisposable> action);
    public void Run();
    public void set_CancelQueueDisposable(IDisposable value);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class System.Reactive.Concurrency.VirtualTimeScheduler`2 : VirtualTimeSchedulerBase`2<TAbsolute, TRelative> {
    private SchedulerQueue`1<TAbsolute> _queue;
    protected VirtualTimeScheduler`2(TAbsolute initialClock, IComparer`1<TAbsolute> comparer);
    protected virtual IScheduledItem`1<TAbsolute> GetNext();
    public virtual IDisposable ScheduleAbsolute(TState state, TAbsolute dueTime, Func`3<IScheduler, TState, IDisposable> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Reactive.Concurrency.VirtualTimeSchedulerBase`2 : object {
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IComparer`1<TAbsolute> <Comparer>k__BackingField;
    [CompilerGeneratedAttribute]
private TAbsolute <Clock>k__BackingField;
    public bool IsEnabled { get; private set; }
    protected IComparer`1<TAbsolute> Comparer { get; }
    public TAbsolute Clock { get; protected set; }
    public DateTimeOffset Now { get; }
    protected VirtualTimeSchedulerBase`2(TAbsolute initialClock, IComparer`1<TAbsolute> comparer);
    protected abstract virtual TAbsolute Add(TAbsolute absolute, TRelative relative);
    protected abstract virtual DateTimeOffset ToDateTimeOffset(TAbsolute absolute);
    protected abstract virtual TRelative ToRelative(TimeSpan timeSpan);
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
private void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
protected IComparer`1<TAbsolute> get_Comparer();
    public abstract virtual IDisposable ScheduleAbsolute(TState state, TAbsolute dueTime, Func`3<IScheduler, TState, IDisposable> action);
    public IDisposable ScheduleRelative(TState state, TRelative dueTime, Func`3<IScheduler, TState, IDisposable> action);
    public sealed virtual IDisposable Schedule(TState state, Func`3<IScheduler, TState, IDisposable> action);
    public sealed virtual IDisposable Schedule(TState state, TimeSpan dueTime, Func`3<IScheduler, TState, IDisposable> action);
    public sealed virtual IDisposable Schedule(TState state, DateTimeOffset dueTime, Func`3<IScheduler, TState, IDisposable> action);
    public void Start();
    public void Stop();
    public void AdvanceTo(TAbsolute time);
    public void AdvanceBy(TRelative time);
    public void Sleep(TRelative time);
    [CompilerGeneratedAttribute]
public TAbsolute get_Clock();
    [CompilerGeneratedAttribute]
protected void set_Clock(TAbsolute value);
    public sealed virtual DateTimeOffset get_Now();
    protected abstract virtual IScheduledItem`1<TAbsolute> GetNext();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    protected virtual object GetService(Type serviceType);
    public sealed virtual IStopwatch StartStopwatch();
    private DateTimeOffset ClockToDateTimeOffset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Reactive.Concurrency.VirtualTimeSchedulerExtensions : object {
    [ExtensionAttribute]
public static IDisposable ScheduleRelative(VirtualTimeSchedulerBase`2<TAbsolute, TRelative> scheduler, TRelative dueTime, Action action);
    [ExtensionAttribute]
public static IDisposable ScheduleAbsolute(VirtualTimeSchedulerBase`2<TAbsolute, TRelative> scheduler, TAbsolute dueTime, Action action);
    private static IDisposable Invoke(Action action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Constants_Core : object {
    private static string ObsoleteRefactoring;
    public static string ObsoleteSchedulerNewthread;
    public static string ObsoleteSchedulerTaskpool;
    public static string ObsoleteSchedulerThreadpool;
    public static string ObsoleteSchedulerequired;
    internal static string AsQueryableTrimIncompatibilityMessage;
    internal static string EventReflectionTrimIncompatibilityMessage;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Constants_Linq : object {
    public static string UseAsync;
    public static string UseTaskFromAsyncPattern;
}
internal class System.Reactive.Disposables.AnonymousDisposable : object {
    [NullableAttribute("2")]
private Action modreq(System.Runtime.CompilerServices.IsVolatile) _dispose;
    public bool IsDisposed { get; }
    [NullableContextAttribute("1")]
public AnonymousDisposable(Action dispose);
    public sealed virtual bool get_IsDisposed();
    public sealed virtual void Dispose();
}
internal class System.Reactive.Disposables.AnonymousDisposable`1 : object {
    [NullableAttribute("1")]
private TState _state;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1 modreq(System.Runtime.CompilerServices.IsVolatile) _dispose;
    public bool IsDisposed { get; }
    [NullableContextAttribute("1")]
public AnonymousDisposable`1(TState state, Action`1<TState> dispose);
    public sealed virtual bool get_IsDisposed();
    public sealed virtual void Dispose();
}
public class System.Reactive.Disposables.BooleanDisposable : object {
    [NullableAttribute("1")]
internal static BooleanDisposable True;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isDisposed;
    public bool IsDisposed { get; }
    private BooleanDisposable(bool isDisposed);
    private static BooleanDisposable();
    public sealed virtual bool get_IsDisposed();
    public sealed virtual void Dispose();
}
public class System.Reactive.Disposables.CancellationDisposable : object {
    [NullableAttribute("1")]
private CancellationTokenSource _cts;
    public CancellationToken Token { get; }
    public bool IsDisposed { get; }
    [NullableContextAttribute("1")]
public CancellationDisposable(CancellationTokenSource cts);
    public CancellationToken get_Token();
    public sealed virtual void Dispose();
    public sealed virtual bool get_IsDisposed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reactive.Disposables.CompositeDisposable : object {
    private object _gate;
    private bool _disposed;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IDisposable> _disposables;
    private int _count;
    private static int ShrinkThreshold;
    private static int DefaultCapacity;
    private static CompositeEnumerator EmptyEnumerator;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsDisposed { get; }
    public CompositeDisposable(int capacity);
    public CompositeDisposable(IDisposable[] disposables);
    public CompositeDisposable(IEnumerable`1<IDisposable> disposables);
    private static CompositeDisposable();
    private static List`1<IDisposable> ToList(IEnumerable`1<IDisposable> disposables);
    public sealed virtual int get_Count();
    public sealed virtual void Add(IDisposable item);
    public sealed virtual bool Remove(IDisposable item);
    public sealed virtual void Dispose();
    public sealed virtual void Clear();
    public sealed virtual bool Contains(IDisposable item);
    public sealed virtual void CopyTo(IDisposable[] array, int arrayIndex);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual IEnumerator`1<IDisposable> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool get_IsDisposed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reactive.Disposables.ContextDisposable : object {
    private IDisposable modreq(System.Runtime.CompilerServices.IsVolatile) _disposable;
    [CompilerGeneratedAttribute]
private SynchronizationContext <Context>k__BackingField;
    public SynchronizationContext Context { get; }
    public bool IsDisposed { get; }
    public ContextDisposable(SynchronizationContext context, IDisposable disposable);
    [CompilerGeneratedAttribute]
public SynchronizationContext get_Context();
    public sealed virtual bool get_IsDisposed();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class System.Reactive.Disposables.Disposable : object {
    [NullableAttribute("1")]
public static IDisposable Empty { get; }
    [NullableContextAttribute("1")]
public static IDisposable get_Empty();
    [NullableContextAttribute("1")]
public static IDisposable Create(Action dispose);
    [NullableContextAttribute("1")]
public static IDisposable Create(TState state, Action`1<TState> dispose);
    internal static IDisposable GetValue(IDisposable& fieldRef);
    internal static IDisposable GetValueOrDefault(IDisposable& fieldRef);
    internal static TrySetSingleResult TrySetSingle(IDisposable& fieldRef, IDisposable value);
    internal static bool TrySetMultiple(IDisposable& fieldRef, IDisposable value);
    internal static bool TrySetSerial(IDisposable& fieldRef, IDisposable value);
    internal static void Dispose(IDisposable& fieldRef);
}
public interface System.Reactive.Disposables.ICancelable {
    public bool IsDisposed { get; }
    public abstract virtual bool get_IsDisposed();
}
public class System.Reactive.Disposables.MultipleAssignmentDisposable : object {
    private MultipleAssignmentDisposableValue _current;
    public bool IsDisposed { get; }
    [NullableAttribute("2")]
public IDisposable Disposable { get; public set; }
    public sealed virtual bool get_IsDisposed();
    [NullableContextAttribute("2")]
public IDisposable get_Disposable();
    [NullableContextAttribute("2")]
public void set_Disposable(IDisposable value);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Reactive.Disposables.MultipleAssignmentDisposableValue : ValueType {
    private IDisposable _current;
    public bool IsDisposed { get; }
    public IDisposable Disposable { get; public set; }
    public sealed virtual bool get_IsDisposed();
    public IDisposable get_Disposable();
    public void set_Disposable(IDisposable value);
    [NullableContextAttribute("1")]
public bool TrySetFirst(IDisposable disposable);
    public sealed virtual void Dispose();
}
[CompilerGeneratedAttribute]
internal class System.Reactive.Disposables.NamespaceDoc : object {
}
public class System.Reactive.Disposables.RefCountDisposable : object {
    private bool _throwWhenDisposed;
    [NullableAttribute("2")]
private IDisposable _disposable;
    private int _count;
    public bool IsDisposed { get; }
    [NullableContextAttribute("1")]
public RefCountDisposable(IDisposable disposable);
    [NullableContextAttribute("1")]
public RefCountDisposable(IDisposable disposable, bool throwWhenDisposed);
    public sealed virtual bool get_IsDisposed();
    [NullableContextAttribute("1")]
public IDisposable GetDisposable();
    public sealed virtual void Dispose();
    private void Release();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reactive.Disposables.ScheduledDisposable : object {
    private SingleAssignmentDisposableValue _disposable;
    [CompilerGeneratedAttribute]
private IScheduler <Scheduler>k__BackingField;
    public IScheduler Scheduler { get; }
    public IDisposable Disposable { get; }
    public bool IsDisposed { get; }
    public ScheduledDisposable(IScheduler scheduler, IDisposable disposable);
    [CompilerGeneratedAttribute]
public IScheduler get_Scheduler();
    public IDisposable get_Disposable();
    public sealed virtual bool get_IsDisposed();
    public sealed virtual void Dispose();
}
public class System.Reactive.Disposables.SerialDisposable : object {
    private SerialDisposableValue _current;
    public bool IsDisposed { get; }
    [NullableAttribute("2")]
public IDisposable Disposable { get; public set; }
    public sealed virtual bool get_IsDisposed();
    [NullableContextAttribute("2")]
public IDisposable get_Disposable();
    [NullableContextAttribute("2")]
public void set_Disposable(IDisposable value);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Reactive.Disposables.SerialDisposableValue : ValueType {
    private IDisposable _current;
    public bool IsDisposed { get; }
    public IDisposable Disposable { get; public set; }
    public sealed virtual bool get_IsDisposed();
    public IDisposable get_Disposable();
    public void set_Disposable(IDisposable value);
    [NullableContextAttribute("1")]
public bool TrySetFirst(IDisposable disposable);
    public sealed virtual void Dispose();
}
public class System.Reactive.Disposables.SingleAssignmentDisposable : object {
    private SingleAssignmentDisposableValue _current;
    public bool IsDisposed { get; }
    [NullableAttribute("2")]
public IDisposable Disposable { get; public set; }
    public sealed virtual bool get_IsDisposed();
    [NullableContextAttribute("2")]
public IDisposable get_Disposable();
    [NullableContextAttribute("2")]
public void set_Disposable(IDisposable value);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Reactive.Disposables.SingleAssignmentDisposableValue : ValueType {
    private IDisposable _current;
    public bool IsDisposed { get; }
    public IDisposable Disposable { get; public set; }
    public bool get_IsDisposed();
    public IDisposable get_Disposable();
    public void set_Disposable(IDisposable value);
    public void Dispose();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(SingleAssignmentDisposableValue left, SingleAssignmentDisposableValue right);
    public static bool op_Inequality(SingleAssignmentDisposableValue left, SingleAssignmentDisposableValue right);
}
public abstract class System.Reactive.Disposables.StableCompositeDisposable : object {
    public bool IsDisposed { get; }
    [NullableContextAttribute("1")]
public static ICancelable Create(IDisposable disposable1, IDisposable disposable2);
    [NullableContextAttribute("1")]
public static ICancelable Create(IDisposable[] disposables);
    [NullableContextAttribute("1")]
internal static ICancelable CreateTrusted(IDisposable[] disposables);
    [NullableContextAttribute("1")]
public static ICancelable Create(IEnumerable`1<IDisposable> disposables);
    public abstract virtual void Dispose();
    public abstract virtual bool get_IsDisposed();
}
internal enum System.Reactive.Disposables.TrySetSingleResult : Enum {
    public int value__;
    public static TrySetSingleResult Success;
    public static TrySetSingleResult AlreadyAssigned;
    public static TrySetSingleResult Disposed;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class System.Reactive.Either`2 : object {
    public static Either`2<TLeft, TRight> CreateLeft(TLeft value);
    public static Either`2<TLeft, TRight> CreateRight(TRight value);
    public abstract virtual TResult Switch(Func`2<TLeft, TResult> caseLeft, Func`2<TRight, TResult> caseRight);
    public abstract virtual void Switch(Action`1<TLeft> caseLeft, Action`1<TRight> caseRight);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class System.Reactive.EventPattern`1 : EventPattern`2<object, TEventArgs> {
    public EventPattern`1(object sender, TEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reactive.EventPattern`2 : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TSender <Sender>k__BackingField;
    [CompilerGeneratedAttribute]
private TEventArgs <EventArgs>k__BackingField;
    [NullableAttribute("2")]
public TSender Sender { get; }
    public TEventArgs EventArgs { get; }
    public EventPattern`2(TSender sender, TEventArgs e);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual TSender get_Sender();
    [CompilerGeneratedAttribute]
public sealed virtual TEventArgs get_EventArgs();
    public void Deconstruct(TSender& sender, TEventArgs& e);
    public sealed virtual bool Equals(EventPattern`2<TSender, TEventArgs> other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(EventPattern`2<TSender, TEventArgs> first, EventPattern`2<TSender, TEventArgs> second);
    public static bool op_Inequality(EventPattern`2<TSender, TEventArgs> first, EventPattern`2<TSender, TEventArgs> second);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.EventPatternSource`1 : EventPatternSourceBase`2<object, TEventArgs> {
    public EventPatternSource`1(IObservable`1<EventPattern`2<object, TEventArgs>> source, Action`2<Action`2<object, TEventArgs>, EventPattern`2<object, TEventArgs>> invokeHandler);
    private sealed virtual override void System.Reactive.IEventPatternSource<TEventArgs>.add_OnNext(EventHandler`1<TEventArgs> value);
    private sealed virtual override void System.Reactive.IEventPatternSource<TEventArgs>.remove_OnNext(EventHandler`1<TEventArgs> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Reactive.EventPatternSourceBase`2 : object {
    private IObservable`1<EventPattern`2<TSender, TEventArgs>> _source;
    private Dictionary`2<Delegate, Stack`1<IDisposable>> _subscriptions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`2<Action`2<TSender, TEventArgs>, EventPattern`2<TSender, TEventArgs>> _invokeHandler;
    protected EventPatternSourceBase`2(IObservable`1<EventPattern`2<TSender, TEventArgs>> source, Action`2<Action`2<TSender, TEventArgs>, EventPattern`2<TSender, TEventArgs>> invokeHandler);
    protected void Add(Delegate handler, Action`2<TSender, TEventArgs> invoke);
    private void Add(Delegate handler, IDisposable disposable);
    protected void Remove(Delegate handler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.EventSource`1 : object {
    private IObservable`1<T> _source;
    private Dictionary`2<Delegate, Stack`1<IDisposable>> _subscriptions;
    private Action`2<Action`1<T>, T> _invokeHandler;
    public EventSource`1(IObservable`1<T> source, Action`2<Action`1<T>, T> invokeHandler);
    public sealed virtual void add_OnNext(Action`1<T> value);
    public sealed virtual void remove_OnNext(Action`1<T> value);
    private void Add(Delegate handler, IDisposable disposable);
    private void Remove(Delegate handler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.ExceptionHelper : object {
    [CompilerGeneratedAttribute]
private static Exception <Terminated>k__BackingField;
    public static Exception Terminated { get; }
    private static ExceptionHelper();
    [CompilerGeneratedAttribute]
public static Exception get_Terminated();
    public static bool TrySetException(Exception& field, Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Reactive.ExceptionHelpers : object {
    private static Lazy`1<IExceptionServices> Services;
    private static ExceptionHelpers();
    [ExtensionAttribute]
[DoesNotReturnAttribute]
public static void Throw(Exception exception);
    private static IExceptionServices Initialize();
}
[ExperimentalAttribute]
[AttributeUsageAttribute("32767")]
public class System.Reactive.ExperimentalAttribute : Attribute {
}
internal class System.Reactive.Grouping`2 : Dictionary`2<TKey, Subject`1<TElement>> {
    public Grouping`2(IEqualityComparer`1<TKey> comparer);
    public Grouping`2(int capacity, IEqualityComparer`1<TKey> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.HalfSerializer : object {
    public static void ForwardOnNext(ISink`1<T> sink, T item, Int32& wip, Exception& error);
    public static void ForwardOnError(ISink`1<T> sink, Exception ex, Int32& wip, Exception& error);
    [NullableContextAttribute("2")]
public static void ForwardOnCompleted(ISink`1<T> sink, Int32& wip, Exception& error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Reactive.Helpers : object {
    [ExtensionAttribute]
public static bool All(Boolean[] values);
    [ExtensionAttribute]
public static bool AllExcept(Boolean[] values, int index);
}
[NullableContextAttribute("1")]
internal interface System.Reactive.IConcatenatable`1 {
    public abstract virtual IEnumerable`1<IObservable`1<TSource>> GetSources();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class System.Reactive.IdentitySink`1 : Sink`2<T, T> {
    protected IdentitySink`1(IObserver`1<T> observer);
    public virtual void OnNext(T value);
}
[NullableContextAttribute("1")]
internal interface System.Reactive.IEvaluatableObservable`1 {
    public abstract virtual IObservable`1<T> Eval();
}
[NullableContextAttribute("2")]
public interface System.Reactive.IEventPattern`2 {
    public TSender Sender { get; }
    [NullableAttribute("1")]
public TEventArgs EventArgs { get; }
    public abstract virtual TSender get_Sender();
    [NullableContextAttribute("1")]
public abstract virtual TEventArgs get_EventArgs();
}
[NullableContextAttribute("1")]
public interface System.Reactive.IEventPatternSource`1 {
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnNext(EventHandler`1<TEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnNext(EventHandler`1<TEventArgs> value);
}
[NullableContextAttribute("1")]
public interface System.Reactive.IEventSource`1 {
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnNext(Action`1<T> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnNext(Action`1<T> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.ImmutableList`1 : object {
    public static ImmutableList`1<T> Empty;
    private T[] _data;
    public T[] Data { get; }
    public ImmutableList`1(T[] data);
    private static ImmutableList`1();
    public T[] get_Data();
    public ImmutableList`1<T> Add(T value);
    public ImmutableList`1<T> Remove(T value);
}
[NullableContextAttribute("1")]
public interface System.Reactive.IObserver`2 {
    public abstract virtual TResult OnNext(TValue value);
    public abstract virtual TResult OnError(Exception exception);
    public abstract virtual TResult OnCompleted();
}
[NullableContextAttribute("1")]
internal interface System.Reactive.IProducer`1 {
    public abstract virtual IDisposable SubscribeRaw(IObserver`1<TSource> observer, bool enableSafeguard);
}
internal interface System.Reactive.ISafeObserver`1 {
    [NullableContextAttribute("1")]
public abstract virtual void SetResource(IDisposable resource);
}
internal interface System.Reactive.IScheduledObserver`1 {
    public abstract virtual void EnsureActive();
    public abstract virtual void EnsureActive(int count);
}
[NullableContextAttribute("1")]
internal interface System.Reactive.ISink`1 {
    public abstract virtual void ForwardOnNext(TTarget value);
    public abstract virtual void ForwardOnCompleted();
    public abstract virtual void ForwardOnError(Exception error);
}
[NullableContextAttribute("1")]
[AsyncMethodBuilderAttribute("System.Runtime.CompilerServices.TaskObservableMethodBuilder`1")]
public interface System.Reactive.ITaskObservable`1 {
    public abstract virtual ITaskObservableAwaiter`1<T> GetAwaiter();
}
public interface System.Reactive.ITaskObservableAwaiter`1 {
    public bool IsCompleted { get; }
    public abstract virtual bool get_IsCompleted();
    [NullableContextAttribute("1")]
public abstract virtual T GetResult();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class System.Reactive.Joins.ActivePlan : object {
    private Dictionary`2<IJoinObserver, IJoinObserver> _joinObservers;
    protected Action _onCompleted;
    protected ActivePlan(Action onCompleted);
    internal abstract virtual void Match();
    protected void AddJoinObserver(IJoinObserver joinObserver);
    protected void Dequeue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Joins.ActivePlan`1 : ActivePlan {
    private Action`1<T1> _onNext;
    private JoinObserver`1<T1> _first;
    internal ActivePlan`1(JoinObserver`1<T1> first, Action`1<T1> onNext, Action onCompleted);
    internal virtual void Match();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Joins.ActivePlan`10 : ActivePlan {
    private Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> _onNext;
    private JoinObserver`1<T1> _first;
    private JoinObserver`1<T2> _second;
    private JoinObserver`1<T3> _third;
    private JoinObserver`1<T4> _fourth;
    private JoinObserver`1<T5> _fifth;
    private JoinObserver`1<T6> _sixth;
    private JoinObserver`1<T7> _seventh;
    private JoinObserver`1<T8> _eighth;
    private JoinObserver`1<T9> _ninth;
    private JoinObserver`1<T10> _tenth;
    internal ActivePlan`10(JoinObserver`1<T1> first, JoinObserver`1<T2> second, JoinObserver`1<T3> third, JoinObserver`1<T4> fourth, JoinObserver`1<T5> fifth, JoinObserver`1<T6> sixth, JoinObserver`1<T7> seventh, JoinObserver`1<T8> eighth, JoinObserver`1<T9> ninth, JoinObserver`1<T10> tenth, Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> onNext, Action onCompleted);
    internal virtual void Match();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Joins.ActivePlan`11 : ActivePlan {
    private Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> _onNext;
    private JoinObserver`1<T1> _first;
    private JoinObserver`1<T2> _second;
    private JoinObserver`1<T3> _third;
    private JoinObserver`1<T4> _fourth;
    private JoinObserver`1<T5> _fifth;
    private JoinObserver`1<T6> _sixth;
    private JoinObserver`1<T7> _seventh;
    private JoinObserver`1<T8> _eighth;
    private JoinObserver`1<T9> _ninth;
    private JoinObserver`1<T10> _tenth;
    private JoinObserver`1<T11> _eleventh;
    internal ActivePlan`11(JoinObserver`1<T1> first, JoinObserver`1<T2> second, JoinObserver`1<T3> third, JoinObserver`1<T4> fourth, JoinObserver`1<T5> fifth, JoinObserver`1<T6> sixth, JoinObserver`1<T7> seventh, JoinObserver`1<T8> eighth, JoinObserver`1<T9> ninth, JoinObserver`1<T10> tenth, JoinObserver`1<T11> eleventh, Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> onNext, Action onCompleted);
    internal virtual void Match();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Joins.ActivePlan`12 : ActivePlan {
    private Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> _onNext;
    private JoinObserver`1<T1> _first;
    private JoinObserver`1<T2> _second;
    private JoinObserver`1<T3> _third;
    private JoinObserver`1<T4> _fourth;
    private JoinObserver`1<T5> _fifth;
    private JoinObserver`1<T6> _sixth;
    private JoinObserver`1<T7> _seventh;
    private JoinObserver`1<T8> _eighth;
    private JoinObserver`1<T9> _ninth;
    private JoinObserver`1<T10> _tenth;
    private JoinObserver`1<T11> _eleventh;
    private JoinObserver`1<T12> _twelfth;
    internal ActivePlan`12(JoinObserver`1<T1> first, JoinObserver`1<T2> second, JoinObserver`1<T3> third, JoinObserver`1<T4> fourth, JoinObserver`1<T5> fifth, JoinObserver`1<T6> sixth, JoinObserver`1<T7> seventh, JoinObserver`1<T8> eighth, JoinObserver`1<T9> ninth, JoinObserver`1<T10> tenth, JoinObserver`1<T11> eleventh, JoinObserver`1<T12> twelfth, Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> onNext, Action onCompleted);
    internal virtual void Match();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Joins.ActivePlan`13 : ActivePlan {
    private Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> _onNext;
    private JoinObserver`1<T1> _first;
    private JoinObserver`1<T2> _second;
    private JoinObserver`1<T3> _third;
    private JoinObserver`1<T4> _fourth;
    private JoinObserver`1<T5> _fifth;
    private JoinObserver`1<T6> _sixth;
    private JoinObserver`1<T7> _seventh;
    private JoinObserver`1<T8> _eighth;
    private JoinObserver`1<T9> _ninth;
    private JoinObserver`1<T10> _tenth;
    private JoinObserver`1<T11> _eleventh;
    private JoinObserver`1<T12> _twelfth;
    private JoinObserver`1<T13> _thirteenth;
    internal ActivePlan`13(JoinObserver`1<T1> first, JoinObserver`1<T2> second, JoinObserver`1<T3> third, JoinObserver`1<T4> fourth, JoinObserver`1<T5> fifth, JoinObserver`1<T6> sixth, JoinObserver`1<T7> seventh, JoinObserver`1<T8> eighth, JoinObserver`1<T9> ninth, JoinObserver`1<T10> tenth, JoinObserver`1<T11> eleventh, JoinObserver`1<T12> twelfth, JoinObserver`1<T13> thirteenth, Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> onNext, Action onCompleted);
    internal virtual void Match();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Joins.ActivePlan`14 : ActivePlan {
    private Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> _onNext;
    private JoinObserver`1<T1> _first;
    private JoinObserver`1<T2> _second;
    private JoinObserver`1<T3> _third;
    private JoinObserver`1<T4> _fourth;
    private JoinObserver`1<T5> _fifth;
    private JoinObserver`1<T6> _sixth;
    private JoinObserver`1<T7> _seventh;
    private JoinObserver`1<T8> _eighth;
    private JoinObserver`1<T9> _ninth;
    private JoinObserver`1<T10> _tenth;
    private JoinObserver`1<T11> _eleventh;
    private JoinObserver`1<T12> _twelfth;
    private JoinObserver`1<T13> _thirteenth;
    private JoinObserver`1<T14> _fourteenth;
    internal ActivePlan`14(JoinObserver`1<T1> first, JoinObserver`1<T2> second, JoinObserver`1<T3> third, JoinObserver`1<T4> fourth, JoinObserver`1<T5> fifth, JoinObserver`1<T6> sixth, JoinObserver`1<T7> seventh, JoinObserver`1<T8> eighth, JoinObserver`1<T9> ninth, JoinObserver`1<T10> tenth, JoinObserver`1<T11> eleventh, JoinObserver`1<T12> twelfth, JoinObserver`1<T13> thirteenth, JoinObserver`1<T14> fourteenth, Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> onNext, Action onCompleted);
    internal virtual void Match();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Joins.ActivePlan`15 : ActivePlan {
    private Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> _onNext;
    private JoinObserver`1<T1> _first;
    private JoinObserver`1<T2> _second;
    private JoinObserver`1<T3> _third;
    private JoinObserver`1<T4> _fourth;
    private JoinObserver`1<T5> _fifth;
    private JoinObserver`1<T6> _sixth;
    private JoinObserver`1<T7> _seventh;
    private JoinObserver`1<T8> _eighth;
    private JoinObserver`1<T9> _ninth;
    private JoinObserver`1<T10> _tenth;
    private JoinObserver`1<T11> _eleventh;
    private JoinObserver`1<T12> _twelfth;
    private JoinObserver`1<T13> _thirteenth;
    private JoinObserver`1<T14> _fourteenth;
    private JoinObserver`1<T15> _fifteenth;
    internal ActivePlan`15(JoinObserver`1<T1> first, JoinObserver`1<T2> second, JoinObserver`1<T3> third, JoinObserver`1<T4> fourth, JoinObserver`1<T5> fifth, JoinObserver`1<T6> sixth, JoinObserver`1<T7> seventh, JoinObserver`1<T8> eighth, JoinObserver`1<T9> ninth, JoinObserver`1<T10> tenth, JoinObserver`1<T11> eleventh, JoinObserver`1<T12> twelfth, JoinObserver`1<T13> thirteenth, JoinObserver`1<T14> fourteenth, JoinObserver`1<T15> fifteenth, Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> onNext, Action onCompleted);
    internal virtual void Match();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Joins.ActivePlan`16 : ActivePlan {
    private Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> _onNext;
    private JoinObserver`1<T1> _first;
    private JoinObserver`1<T2> _second;
    private JoinObserver`1<T3> _third;
    private JoinObserver`1<T4> _fourth;
    private JoinObserver`1<T5> _fifth;
    private JoinObserver`1<T6> _sixth;
    private JoinObserver`1<T7> _seventh;
    private JoinObserver`1<T8> _eighth;
    private JoinObserver`1<T9> _ninth;
    private JoinObserver`1<T10> _tenth;
    private JoinObserver`1<T11> _eleventh;
    private JoinObserver`1<T12> _twelfth;
    private JoinObserver`1<T13> _thirteenth;
    private JoinObserver`1<T14> _fourteenth;
    private JoinObserver`1<T15> _fifteenth;
    private JoinObserver`1<T16> _sixteenth;
    internal ActivePlan`16(JoinObserver`1<T1> first, JoinObserver`1<T2> second, JoinObserver`1<T3> third, JoinObserver`1<T4> fourth, JoinObserver`1<T5> fifth, JoinObserver`1<T6> sixth, JoinObserver`1<T7> seventh, JoinObserver`1<T8> eighth, JoinObserver`1<T9> ninth, JoinObserver`1<T10> tenth, JoinObserver`1<T11> eleventh, JoinObserver`1<T12> twelfth, JoinObserver`1<T13> thirteenth, JoinObserver`1<T14> fourteenth, JoinObserver`1<T15> fifteenth, JoinObserver`1<T16> sixteenth, Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> onNext, Action onCompleted);
    internal virtual void Match();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Joins.ActivePlan`2 : ActivePlan {
    private Action`2<T1, T2> _onNext;
    private JoinObserver`1<T1> _first;
    private JoinObserver`1<T2> _second;
    internal ActivePlan`2(JoinObserver`1<T1> first, JoinObserver`1<T2> second, Action`2<T1, T2> onNext, Action onCompleted);
    internal virtual void Match();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Joins.ActivePlan`3 : ActivePlan {
    private Action`3<T1, T2, T3> _onNext;
    private JoinObserver`1<T1> _first;
    private JoinObserver`1<T2> _second;
    private JoinObserver`1<T3> _third;
    internal ActivePlan`3(JoinObserver`1<T1> first, JoinObserver`1<T2> second, JoinObserver`1<T3> third, Action`3<T1, T2, T3> onNext, Action onCompleted);
    internal virtual void Match();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Joins.ActivePlan`4 : ActivePlan {
    private Action`4<T1, T2, T3, T4> _onNext;
    private JoinObserver`1<T1> _first;
    private JoinObserver`1<T2> _second;
    private JoinObserver`1<T3> _third;
    private JoinObserver`1<T4> _fourth;
    internal ActivePlan`4(JoinObserver`1<T1> first, JoinObserver`1<T2> second, JoinObserver`1<T3> third, JoinObserver`1<T4> fourth, Action`4<T1, T2, T3, T4> onNext, Action onCompleted);
    internal virtual void Match();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Joins.ActivePlan`5 : ActivePlan {
    private Action`5<T1, T2, T3, T4, T5> _onNext;
    private JoinObserver`1<T1> _first;
    private JoinObserver`1<T2> _second;
    private JoinObserver`1<T3> _third;
    private JoinObserver`1<T4> _fourth;
    private JoinObserver`1<T5> _fifth;
    internal ActivePlan`5(JoinObserver`1<T1> first, JoinObserver`1<T2> second, JoinObserver`1<T3> third, JoinObserver`1<T4> fourth, JoinObserver`1<T5> fifth, Action`5<T1, T2, T3, T4, T5> onNext, Action onCompleted);
    internal virtual void Match();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Joins.ActivePlan`6 : ActivePlan {
    private Action`6<T1, T2, T3, T4, T5, T6> _onNext;
    private JoinObserver`1<T1> _first;
    private JoinObserver`1<T2> _second;
    private JoinObserver`1<T3> _third;
    private JoinObserver`1<T4> _fourth;
    private JoinObserver`1<T5> _fifth;
    private JoinObserver`1<T6> _sixth;
    internal ActivePlan`6(JoinObserver`1<T1> first, JoinObserver`1<T2> second, JoinObserver`1<T3> third, JoinObserver`1<T4> fourth, JoinObserver`1<T5> fifth, JoinObserver`1<T6> sixth, Action`6<T1, T2, T3, T4, T5, T6> onNext, Action onCompleted);
    internal virtual void Match();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Joins.ActivePlan`7 : ActivePlan {
    private Action`7<T1, T2, T3, T4, T5, T6, T7> _onNext;
    private JoinObserver`1<T1> _first;
    private JoinObserver`1<T2> _second;
    private JoinObserver`1<T3> _third;
    private JoinObserver`1<T4> _fourth;
    private JoinObserver`1<T5> _fifth;
    private JoinObserver`1<T6> _sixth;
    private JoinObserver`1<T7> _seventh;
    internal ActivePlan`7(JoinObserver`1<T1> first, JoinObserver`1<T2> second, JoinObserver`1<T3> third, JoinObserver`1<T4> fourth, JoinObserver`1<T5> fifth, JoinObserver`1<T6> sixth, JoinObserver`1<T7> seventh, Action`7<T1, T2, T3, T4, T5, T6, T7> onNext, Action onCompleted);
    internal virtual void Match();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Joins.ActivePlan`8 : ActivePlan {
    private Action`8<T1, T2, T3, T4, T5, T6, T7, T8> _onNext;
    private JoinObserver`1<T1> _first;
    private JoinObserver`1<T2> _second;
    private JoinObserver`1<T3> _third;
    private JoinObserver`1<T4> _fourth;
    private JoinObserver`1<T5> _fifth;
    private JoinObserver`1<T6> _sixth;
    private JoinObserver`1<T7> _seventh;
    private JoinObserver`1<T8> _eighth;
    internal ActivePlan`8(JoinObserver`1<T1> first, JoinObserver`1<T2> second, JoinObserver`1<T3> third, JoinObserver`1<T4> fourth, JoinObserver`1<T5> fifth, JoinObserver`1<T6> sixth, JoinObserver`1<T7> seventh, JoinObserver`1<T8> eighth, Action`8<T1, T2, T3, T4, T5, T6, T7, T8> onNext, Action onCompleted);
    internal virtual void Match();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Joins.ActivePlan`9 : ActivePlan {
    private Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> _onNext;
    private JoinObserver`1<T1> _first;
    private JoinObserver`1<T2> _second;
    private JoinObserver`1<T3> _third;
    private JoinObserver`1<T4> _fourth;
    private JoinObserver`1<T5> _fifth;
    private JoinObserver`1<T6> _sixth;
    private JoinObserver`1<T7> _seventh;
    private JoinObserver`1<T8> _eighth;
    private JoinObserver`1<T9> _ninth;
    internal ActivePlan`9(JoinObserver`1<T1> first, JoinObserver`1<T2> second, JoinObserver`1<T3> third, JoinObserver`1<T4> fourth, JoinObserver`1<T5> fifth, JoinObserver`1<T6> sixth, JoinObserver`1<T7> seventh, JoinObserver`1<T8> eighth, JoinObserver`1<T9> ninth, Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> onNext, Action onCompleted);
    internal virtual void Match();
}
internal interface System.Reactive.Joins.IJoinObserver {
    [NullableContextAttribute("1")]
public abstract virtual void Subscribe(object gate);
    public abstract virtual void Dequeue();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Joins.JoinObserver`1 : ObserverBase`1<Notification`1<T>> {
    [NullableAttribute("2")]
private object _gate;
    private IObservable`1<T> _source;
    private Action`1<Exception> _onError;
    private List`1<ActivePlan> _activePlans;
    private SingleAssignmentDisposableValue _subscription;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private Queue`1<Notification`1<T>> <Queue>k__BackingField;
    public Queue`1<Notification`1<T>> Queue { get; }
    public JoinObserver`1(IObservable`1<T> source, Action`1<Exception> onError);
    [CompilerGeneratedAttribute]
public Queue`1<Notification`1<T>> get_Queue();
    public void AddActivePlan(ActivePlan activePlan);
    public sealed virtual void Subscribe(object gate);
    public sealed virtual void Dequeue();
    protected virtual void OnNextCore(Notification`1<T> notification);
    protected virtual void OnErrorCore(Exception exception);
    protected virtual void OnCompletedCore();
    internal void RemoveActivePlan(ActivePlan activePlan);
    protected virtual void Dispose(bool disposing);
}
[CompilerGeneratedAttribute]
internal class System.Reactive.Joins.NamespaceDoc : object {
}
public abstract class System.Reactive.Joins.Pattern : object {
}
public class System.Reactive.Joins.Pattern`1 : Pattern {
    [CompilerGeneratedAttribute]
private IObservable`1<TSource1> <First>k__BackingField;
    internal IObservable`1<TSource1> First { get; }
    internal Pattern`1(IObservable`1<TSource1> first);
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource1> get_First();
    public Plan`1<TResult> Then(Func`2<TSource1, TResult> selector);
}
public class System.Reactive.Joins.Pattern`10 : Pattern {
    [CompilerGeneratedAttribute]
private IObservable`1<TSource1> <First>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource2> <Second>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource3> <Third>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource4> <Fourth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource5> <Fifth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource6> <Sixth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource7> <Seventh>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource8> <Eighth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource9> <Ninth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource10> <Tenth>k__BackingField;
    internal IObservable`1<TSource1> First { get; }
    internal IObservable`1<TSource2> Second { get; }
    internal IObservable`1<TSource3> Third { get; }
    internal IObservable`1<TSource4> Fourth { get; }
    internal IObservable`1<TSource5> Fifth { get; }
    internal IObservable`1<TSource6> Sixth { get; }
    internal IObservable`1<TSource7> Seventh { get; }
    internal IObservable`1<TSource8> Eighth { get; }
    internal IObservable`1<TSource9> Ninth { get; }
    internal IObservable`1<TSource10> Tenth { get; }
    internal Pattern`10(IObservable`1<TSource1> first, IObservable`1<TSource2> second, IObservable`1<TSource3> third, IObservable`1<TSource4> fourth, IObservable`1<TSource5> fifth, IObservable`1<TSource6> sixth, IObservable`1<TSource7> seventh, IObservable`1<TSource8> eighth, IObservable`1<TSource9> ninth, IObservable`1<TSource10> tenth);
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource1> get_First();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource2> get_Second();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource3> get_Third();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource4> get_Fourth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource5> get_Fifth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource6> get_Sixth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource7> get_Seventh();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource8> get_Eighth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource9> get_Ninth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource10> get_Tenth();
    public Pattern`11<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11> And(IObservable`1<TSource11> other);
    public Plan`1<TResult> Then(Func`11<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TResult> selector);
}
public class System.Reactive.Joins.Pattern`11 : Pattern {
    [CompilerGeneratedAttribute]
private IObservable`1<TSource1> <First>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource2> <Second>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource3> <Third>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource4> <Fourth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource5> <Fifth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource6> <Sixth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource7> <Seventh>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource8> <Eighth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource9> <Ninth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource10> <Tenth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource11> <Eleventh>k__BackingField;
    internal IObservable`1<TSource1> First { get; }
    internal IObservable`1<TSource2> Second { get; }
    internal IObservable`1<TSource3> Third { get; }
    internal IObservable`1<TSource4> Fourth { get; }
    internal IObservable`1<TSource5> Fifth { get; }
    internal IObservable`1<TSource6> Sixth { get; }
    internal IObservable`1<TSource7> Seventh { get; }
    internal IObservable`1<TSource8> Eighth { get; }
    internal IObservable`1<TSource9> Ninth { get; }
    internal IObservable`1<TSource10> Tenth { get; }
    internal IObservable`1<TSource11> Eleventh { get; }
    internal Pattern`11(IObservable`1<TSource1> first, IObservable`1<TSource2> second, IObservable`1<TSource3> third, IObservable`1<TSource4> fourth, IObservable`1<TSource5> fifth, IObservable`1<TSource6> sixth, IObservable`1<TSource7> seventh, IObservable`1<TSource8> eighth, IObservable`1<TSource9> ninth, IObservable`1<TSource10> tenth, IObservable`1<TSource11> eleventh);
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource1> get_First();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource2> get_Second();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource3> get_Third();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource4> get_Fourth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource5> get_Fifth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource6> get_Sixth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource7> get_Seventh();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource8> get_Eighth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource9> get_Ninth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource10> get_Tenth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource11> get_Eleventh();
    public Pattern`12<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12> And(IObservable`1<TSource12> other);
    public Plan`1<TResult> Then(Func`12<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TResult> selector);
}
public class System.Reactive.Joins.Pattern`12 : Pattern {
    [CompilerGeneratedAttribute]
private IObservable`1<TSource1> <First>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource2> <Second>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource3> <Third>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource4> <Fourth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource5> <Fifth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource6> <Sixth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource7> <Seventh>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource8> <Eighth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource9> <Ninth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource10> <Tenth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource11> <Eleventh>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource12> <Twelfth>k__BackingField;
    internal IObservable`1<TSource1> First { get; }
    internal IObservable`1<TSource2> Second { get; }
    internal IObservable`1<TSource3> Third { get; }
    internal IObservable`1<TSource4> Fourth { get; }
    internal IObservable`1<TSource5> Fifth { get; }
    internal IObservable`1<TSource6> Sixth { get; }
    internal IObservable`1<TSource7> Seventh { get; }
    internal IObservable`1<TSource8> Eighth { get; }
    internal IObservable`1<TSource9> Ninth { get; }
    internal IObservable`1<TSource10> Tenth { get; }
    internal IObservable`1<TSource11> Eleventh { get; }
    internal IObservable`1<TSource12> Twelfth { get; }
    internal Pattern`12(IObservable`1<TSource1> first, IObservable`1<TSource2> second, IObservable`1<TSource3> third, IObservable`1<TSource4> fourth, IObservable`1<TSource5> fifth, IObservable`1<TSource6> sixth, IObservable`1<TSource7> seventh, IObservable`1<TSource8> eighth, IObservable`1<TSource9> ninth, IObservable`1<TSource10> tenth, IObservable`1<TSource11> eleventh, IObservable`1<TSource12> twelfth);
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource1> get_First();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource2> get_Second();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource3> get_Third();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource4> get_Fourth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource5> get_Fifth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource6> get_Sixth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource7> get_Seventh();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource8> get_Eighth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource9> get_Ninth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource10> get_Tenth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource11> get_Eleventh();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource12> get_Twelfth();
    public Pattern`13<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13> And(IObservable`1<TSource13> other);
    public Plan`1<TResult> Then(Func`13<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TResult> selector);
}
public class System.Reactive.Joins.Pattern`13 : Pattern {
    [CompilerGeneratedAttribute]
private IObservable`1<TSource1> <First>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource2> <Second>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource3> <Third>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource4> <Fourth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource5> <Fifth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource6> <Sixth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource7> <Seventh>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource8> <Eighth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource9> <Ninth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource10> <Tenth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource11> <Eleventh>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource12> <Twelfth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource13> <Thirteenth>k__BackingField;
    internal IObservable`1<TSource1> First { get; }
    internal IObservable`1<TSource2> Second { get; }
    internal IObservable`1<TSource3> Third { get; }
    internal IObservable`1<TSource4> Fourth { get; }
    internal IObservable`1<TSource5> Fifth { get; }
    internal IObservable`1<TSource6> Sixth { get; }
    internal IObservable`1<TSource7> Seventh { get; }
    internal IObservable`1<TSource8> Eighth { get; }
    internal IObservable`1<TSource9> Ninth { get; }
    internal IObservable`1<TSource10> Tenth { get; }
    internal IObservable`1<TSource11> Eleventh { get; }
    internal IObservable`1<TSource12> Twelfth { get; }
    internal IObservable`1<TSource13> Thirteenth { get; }
    internal Pattern`13(IObservable`1<TSource1> first, IObservable`1<TSource2> second, IObservable`1<TSource3> third, IObservable`1<TSource4> fourth, IObservable`1<TSource5> fifth, IObservable`1<TSource6> sixth, IObservable`1<TSource7> seventh, IObservable`1<TSource8> eighth, IObservable`1<TSource9> ninth, IObservable`1<TSource10> tenth, IObservable`1<TSource11> eleventh, IObservable`1<TSource12> twelfth, IObservable`1<TSource13> thirteenth);
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource1> get_First();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource2> get_Second();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource3> get_Third();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource4> get_Fourth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource5> get_Fifth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource6> get_Sixth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource7> get_Seventh();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource8> get_Eighth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource9> get_Ninth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource10> get_Tenth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource11> get_Eleventh();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource12> get_Twelfth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource13> get_Thirteenth();
    public Pattern`14<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14> And(IObservable`1<TSource14> other);
    public Plan`1<TResult> Then(Func`14<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TResult> selector);
}
public class System.Reactive.Joins.Pattern`14 : Pattern {
    [CompilerGeneratedAttribute]
private IObservable`1<TSource1> <First>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource2> <Second>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource3> <Third>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource4> <Fourth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource5> <Fifth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource6> <Sixth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource7> <Seventh>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource8> <Eighth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource9> <Ninth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource10> <Tenth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource11> <Eleventh>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource12> <Twelfth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource13> <Thirteenth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource14> <Fourteenth>k__BackingField;
    internal IObservable`1<TSource1> First { get; }
    internal IObservable`1<TSource2> Second { get; }
    internal IObservable`1<TSource3> Third { get; }
    internal IObservable`1<TSource4> Fourth { get; }
    internal IObservable`1<TSource5> Fifth { get; }
    internal IObservable`1<TSource6> Sixth { get; }
    internal IObservable`1<TSource7> Seventh { get; }
    internal IObservable`1<TSource8> Eighth { get; }
    internal IObservable`1<TSource9> Ninth { get; }
    internal IObservable`1<TSource10> Tenth { get; }
    internal IObservable`1<TSource11> Eleventh { get; }
    internal IObservable`1<TSource12> Twelfth { get; }
    internal IObservable`1<TSource13> Thirteenth { get; }
    internal IObservable`1<TSource14> Fourteenth { get; }
    internal Pattern`14(IObservable`1<TSource1> first, IObservable`1<TSource2> second, IObservable`1<TSource3> third, IObservable`1<TSource4> fourth, IObservable`1<TSource5> fifth, IObservable`1<TSource6> sixth, IObservable`1<TSource7> seventh, IObservable`1<TSource8> eighth, IObservable`1<TSource9> ninth, IObservable`1<TSource10> tenth, IObservable`1<TSource11> eleventh, IObservable`1<TSource12> twelfth, IObservable`1<TSource13> thirteenth, IObservable`1<TSource14> fourteenth);
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource1> get_First();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource2> get_Second();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource3> get_Third();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource4> get_Fourth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource5> get_Fifth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource6> get_Sixth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource7> get_Seventh();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource8> get_Eighth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource9> get_Ninth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource10> get_Tenth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource11> get_Eleventh();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource12> get_Twelfth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource13> get_Thirteenth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource14> get_Fourteenth();
    public Pattern`15<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15> And(IObservable`1<TSource15> other);
    public Plan`1<TResult> Then(Func`15<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TResult> selector);
}
public class System.Reactive.Joins.Pattern`15 : Pattern {
    [CompilerGeneratedAttribute]
private IObservable`1<TSource1> <First>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource2> <Second>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource3> <Third>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource4> <Fourth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource5> <Fifth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource6> <Sixth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource7> <Seventh>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource8> <Eighth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource9> <Ninth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource10> <Tenth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource11> <Eleventh>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource12> <Twelfth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource13> <Thirteenth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource14> <Fourteenth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource15> <Fifteenth>k__BackingField;
    internal IObservable`1<TSource1> First { get; }
    internal IObservable`1<TSource2> Second { get; }
    internal IObservable`1<TSource3> Third { get; }
    internal IObservable`1<TSource4> Fourth { get; }
    internal IObservable`1<TSource5> Fifth { get; }
    internal IObservable`1<TSource6> Sixth { get; }
    internal IObservable`1<TSource7> Seventh { get; }
    internal IObservable`1<TSource8> Eighth { get; }
    internal IObservable`1<TSource9> Ninth { get; }
    internal IObservable`1<TSource10> Tenth { get; }
    internal IObservable`1<TSource11> Eleventh { get; }
    internal IObservable`1<TSource12> Twelfth { get; }
    internal IObservable`1<TSource13> Thirteenth { get; }
    internal IObservable`1<TSource14> Fourteenth { get; }
    internal IObservable`1<TSource15> Fifteenth { get; }
    internal Pattern`15(IObservable`1<TSource1> first, IObservable`1<TSource2> second, IObservable`1<TSource3> third, IObservable`1<TSource4> fourth, IObservable`1<TSource5> fifth, IObservable`1<TSource6> sixth, IObservable`1<TSource7> seventh, IObservable`1<TSource8> eighth, IObservable`1<TSource9> ninth, IObservable`1<TSource10> tenth, IObservable`1<TSource11> eleventh, IObservable`1<TSource12> twelfth, IObservable`1<TSource13> thirteenth, IObservable`1<TSource14> fourteenth, IObservable`1<TSource15> fifteenth);
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource1> get_First();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource2> get_Second();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource3> get_Third();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource4> get_Fourth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource5> get_Fifth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource6> get_Sixth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource7> get_Seventh();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource8> get_Eighth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource9> get_Ninth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource10> get_Tenth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource11> get_Eleventh();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource12> get_Twelfth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource13> get_Thirteenth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource14> get_Fourteenth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource15> get_Fifteenth();
    public Pattern`16<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16> And(IObservable`1<TSource16> other);
    public Plan`1<TResult> Then(Func`16<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TResult> selector);
}
public class System.Reactive.Joins.Pattern`16 : Pattern {
    [CompilerGeneratedAttribute]
private IObservable`1<TSource1> <First>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource2> <Second>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource3> <Third>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource4> <Fourth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource5> <Fifth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource6> <Sixth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource7> <Seventh>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource8> <Eighth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource9> <Ninth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource10> <Tenth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource11> <Eleventh>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource12> <Twelfth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource13> <Thirteenth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource14> <Fourteenth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource15> <Fifteenth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource16> <Sixteenth>k__BackingField;
    internal IObservable`1<TSource1> First { get; }
    internal IObservable`1<TSource2> Second { get; }
    internal IObservable`1<TSource3> Third { get; }
    internal IObservable`1<TSource4> Fourth { get; }
    internal IObservable`1<TSource5> Fifth { get; }
    internal IObservable`1<TSource6> Sixth { get; }
    internal IObservable`1<TSource7> Seventh { get; }
    internal IObservable`1<TSource8> Eighth { get; }
    internal IObservable`1<TSource9> Ninth { get; }
    internal IObservable`1<TSource10> Tenth { get; }
    internal IObservable`1<TSource11> Eleventh { get; }
    internal IObservable`1<TSource12> Twelfth { get; }
    internal IObservable`1<TSource13> Thirteenth { get; }
    internal IObservable`1<TSource14> Fourteenth { get; }
    internal IObservable`1<TSource15> Fifteenth { get; }
    internal IObservable`1<TSource16> Sixteenth { get; }
    internal Pattern`16(IObservable`1<TSource1> first, IObservable`1<TSource2> second, IObservable`1<TSource3> third, IObservable`1<TSource4> fourth, IObservable`1<TSource5> fifth, IObservable`1<TSource6> sixth, IObservable`1<TSource7> seventh, IObservable`1<TSource8> eighth, IObservable`1<TSource9> ninth, IObservable`1<TSource10> tenth, IObservable`1<TSource11> eleventh, IObservable`1<TSource12> twelfth, IObservable`1<TSource13> thirteenth, IObservable`1<TSource14> fourteenth, IObservable`1<TSource15> fifteenth, IObservable`1<TSource16> sixteenth);
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource1> get_First();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource2> get_Second();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource3> get_Third();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource4> get_Fourth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource5> get_Fifth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource6> get_Sixth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource7> get_Seventh();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource8> get_Eighth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource9> get_Ninth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource10> get_Tenth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource11> get_Eleventh();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource12> get_Twelfth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource13> get_Thirteenth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource14> get_Fourteenth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource15> get_Fifteenth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource16> get_Sixteenth();
    public Plan`1<TResult> Then(Func`17<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16, TResult> selector);
}
public class System.Reactive.Joins.Pattern`2 : Pattern {
    [CompilerGeneratedAttribute]
private IObservable`1<TSource1> <First>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource2> <Second>k__BackingField;
    internal IObservable`1<TSource1> First { get; }
    internal IObservable`1<TSource2> Second { get; }
    internal Pattern`2(IObservable`1<TSource1> first, IObservable`1<TSource2> second);
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource1> get_First();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource2> get_Second();
    public Pattern`3<TSource1, TSource2, TSource3> And(IObservable`1<TSource3> other);
    public Plan`1<TResult> Then(Func`3<TSource1, TSource2, TResult> selector);
}
public class System.Reactive.Joins.Pattern`3 : Pattern {
    [CompilerGeneratedAttribute]
private IObservable`1<TSource1> <First>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource2> <Second>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource3> <Third>k__BackingField;
    internal IObservable`1<TSource1> First { get; }
    internal IObservable`1<TSource2> Second { get; }
    internal IObservable`1<TSource3> Third { get; }
    internal Pattern`3(IObservable`1<TSource1> first, IObservable`1<TSource2> second, IObservable`1<TSource3> third);
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource1> get_First();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource2> get_Second();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource3> get_Third();
    public Pattern`4<TSource1, TSource2, TSource3, TSource4> And(IObservable`1<TSource4> other);
    public Plan`1<TResult> Then(Func`4<TSource1, TSource2, TSource3, TResult> selector);
}
public class System.Reactive.Joins.Pattern`4 : Pattern {
    [CompilerGeneratedAttribute]
private IObservable`1<TSource1> <First>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource2> <Second>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource3> <Third>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource4> <Fourth>k__BackingField;
    internal IObservable`1<TSource1> First { get; }
    internal IObservable`1<TSource2> Second { get; }
    internal IObservable`1<TSource3> Third { get; }
    internal IObservable`1<TSource4> Fourth { get; }
    internal Pattern`4(IObservable`1<TSource1> first, IObservable`1<TSource2> second, IObservable`1<TSource3> third, IObservable`1<TSource4> fourth);
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource1> get_First();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource2> get_Second();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource3> get_Third();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource4> get_Fourth();
    public Pattern`5<TSource1, TSource2, TSource3, TSource4, TSource5> And(IObservable`1<TSource5> other);
    public Plan`1<TResult> Then(Func`5<TSource1, TSource2, TSource3, TSource4, TResult> selector);
}
public class System.Reactive.Joins.Pattern`5 : Pattern {
    [CompilerGeneratedAttribute]
private IObservable`1<TSource1> <First>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource2> <Second>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource3> <Third>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource4> <Fourth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource5> <Fifth>k__BackingField;
    internal IObservable`1<TSource1> First { get; }
    internal IObservable`1<TSource2> Second { get; }
    internal IObservable`1<TSource3> Third { get; }
    internal IObservable`1<TSource4> Fourth { get; }
    internal IObservable`1<TSource5> Fifth { get; }
    internal Pattern`5(IObservable`1<TSource1> first, IObservable`1<TSource2> second, IObservable`1<TSource3> third, IObservable`1<TSource4> fourth, IObservable`1<TSource5> fifth);
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource1> get_First();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource2> get_Second();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource3> get_Third();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource4> get_Fourth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource5> get_Fifth();
    public Pattern`6<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6> And(IObservable`1<TSource6> other);
    public Plan`1<TResult> Then(Func`6<TSource1, TSource2, TSource3, TSource4, TSource5, TResult> selector);
}
public class System.Reactive.Joins.Pattern`6 : Pattern {
    [CompilerGeneratedAttribute]
private IObservable`1<TSource1> <First>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource2> <Second>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource3> <Third>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource4> <Fourth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource5> <Fifth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource6> <Sixth>k__BackingField;
    internal IObservable`1<TSource1> First { get; }
    internal IObservable`1<TSource2> Second { get; }
    internal IObservable`1<TSource3> Third { get; }
    internal IObservable`1<TSource4> Fourth { get; }
    internal IObservable`1<TSource5> Fifth { get; }
    internal IObservable`1<TSource6> Sixth { get; }
    internal Pattern`6(IObservable`1<TSource1> first, IObservable`1<TSource2> second, IObservable`1<TSource3> third, IObservable`1<TSource4> fourth, IObservable`1<TSource5> fifth, IObservable`1<TSource6> sixth);
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource1> get_First();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource2> get_Second();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource3> get_Third();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource4> get_Fourth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource5> get_Fifth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource6> get_Sixth();
    public Pattern`7<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7> And(IObservable`1<TSource7> other);
    public Plan`1<TResult> Then(Func`7<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TResult> selector);
}
public class System.Reactive.Joins.Pattern`7 : Pattern {
    [CompilerGeneratedAttribute]
private IObservable`1<TSource1> <First>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource2> <Second>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource3> <Third>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource4> <Fourth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource5> <Fifth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource6> <Sixth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource7> <Seventh>k__BackingField;
    internal IObservable`1<TSource1> First { get; }
    internal IObservable`1<TSource2> Second { get; }
    internal IObservable`1<TSource3> Third { get; }
    internal IObservable`1<TSource4> Fourth { get; }
    internal IObservable`1<TSource5> Fifth { get; }
    internal IObservable`1<TSource6> Sixth { get; }
    internal IObservable`1<TSource7> Seventh { get; }
    internal Pattern`7(IObservable`1<TSource1> first, IObservable`1<TSource2> second, IObservable`1<TSource3> third, IObservable`1<TSource4> fourth, IObservable`1<TSource5> fifth, IObservable`1<TSource6> sixth, IObservable`1<TSource7> seventh);
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource1> get_First();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource2> get_Second();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource3> get_Third();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource4> get_Fourth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource5> get_Fifth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource6> get_Sixth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource7> get_Seventh();
    public Pattern`8<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8> And(IObservable`1<TSource8> other);
    public Plan`1<TResult> Then(Func`8<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TResult> selector);
}
public class System.Reactive.Joins.Pattern`8 : Pattern {
    [CompilerGeneratedAttribute]
private IObservable`1<TSource1> <First>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource2> <Second>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource3> <Third>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource4> <Fourth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource5> <Fifth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource6> <Sixth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource7> <Seventh>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource8> <Eighth>k__BackingField;
    internal IObservable`1<TSource1> First { get; }
    internal IObservable`1<TSource2> Second { get; }
    internal IObservable`1<TSource3> Third { get; }
    internal IObservable`1<TSource4> Fourth { get; }
    internal IObservable`1<TSource5> Fifth { get; }
    internal IObservable`1<TSource6> Sixth { get; }
    internal IObservable`1<TSource7> Seventh { get; }
    internal IObservable`1<TSource8> Eighth { get; }
    internal Pattern`8(IObservable`1<TSource1> first, IObservable`1<TSource2> second, IObservable`1<TSource3> third, IObservable`1<TSource4> fourth, IObservable`1<TSource5> fifth, IObservable`1<TSource6> sixth, IObservable`1<TSource7> seventh, IObservable`1<TSource8> eighth);
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource1> get_First();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource2> get_Second();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource3> get_Third();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource4> get_Fourth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource5> get_Fifth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource6> get_Sixth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource7> get_Seventh();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource8> get_Eighth();
    public Pattern`9<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9> And(IObservable`1<TSource9> other);
    public Plan`1<TResult> Then(Func`9<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TResult> selector);
}
public class System.Reactive.Joins.Pattern`9 : Pattern {
    [CompilerGeneratedAttribute]
private IObservable`1<TSource1> <First>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource2> <Second>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource3> <Third>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource4> <Fourth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource5> <Fifth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource6> <Sixth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource7> <Seventh>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource8> <Eighth>k__BackingField;
    [CompilerGeneratedAttribute]
private IObservable`1<TSource9> <Ninth>k__BackingField;
    internal IObservable`1<TSource1> First { get; }
    internal IObservable`1<TSource2> Second { get; }
    internal IObservable`1<TSource3> Third { get; }
    internal IObservable`1<TSource4> Fourth { get; }
    internal IObservable`1<TSource5> Fifth { get; }
    internal IObservable`1<TSource6> Sixth { get; }
    internal IObservable`1<TSource7> Seventh { get; }
    internal IObservable`1<TSource8> Eighth { get; }
    internal IObservable`1<TSource9> Ninth { get; }
    internal Pattern`9(IObservable`1<TSource1> first, IObservable`1<TSource2> second, IObservable`1<TSource3> third, IObservable`1<TSource4> fourth, IObservable`1<TSource5> fifth, IObservable`1<TSource6> sixth, IObservable`1<TSource7> seventh, IObservable`1<TSource8> eighth, IObservable`1<TSource9> ninth);
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource1> get_First();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource2> get_Second();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource3> get_Third();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource4> get_Fourth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource5> get_Fifth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource6> get_Sixth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource7> get_Seventh();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource8> get_Eighth();
    [CompilerGeneratedAttribute]
internal IObservable`1<TSource9> get_Ninth();
    public Pattern`10<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10> And(IObservable`1<TSource10> other);
    public Plan`1<TResult> Then(Func`10<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TResult> selector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Reactive.Joins.Plan`1 : object {
    internal abstract virtual ActivePlan Activate(Dictionary`2<object, IJoinObserver> externalSubscriptions, IObserver`1<TResult> observer, Action`1<ActivePlan> deactivate);
    internal static JoinObserver`1<TSource> CreateObserver(Dictionary`2<object, IJoinObserver> externalSubscriptions, IObservable`1<TSource> observable, Action`1<Exception> onError);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Joins.Plan`10 : Plan`1<TResult> {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Pattern`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> <Expression>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> <Selector>k__BackingField;
    [NullableAttribute("1")]
internal Pattern`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Expression { get; }
    [NullableAttribute("1")]
internal Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> Selector { get; }
    [NullableContextAttribute("1")]
internal Plan`10(Pattern`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> expression, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> selector);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal Pattern`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> get_Expression();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> get_Selector();
    [NullableContextAttribute("1")]
internal virtual ActivePlan Activate(Dictionary`2<object, IJoinObserver> externalSubscriptions, IObserver`1<TResult> observer, Action`1<ActivePlan> deactivate);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Joins.Plan`11 : Plan`1<TResult> {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Pattern`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> <Expression>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> <Selector>k__BackingField;
    [NullableAttribute("1")]
internal Pattern`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Expression { get; }
    [NullableAttribute("1")]
internal Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> Selector { get; }
    [NullableContextAttribute("1")]
internal Plan`11(Pattern`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> expression, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> selector);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal Pattern`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> get_Expression();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> get_Selector();
    [NullableContextAttribute("1")]
internal virtual ActivePlan Activate(Dictionary`2<object, IJoinObserver> externalSubscriptions, IObserver`1<TResult> observer, Action`1<ActivePlan> deactivate);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Joins.Plan`12 : Plan`1<TResult> {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Pattern`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> <Expression>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> <Selector>k__BackingField;
    [NullableAttribute("1")]
internal Pattern`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Expression { get; }
    [NullableAttribute("1")]
internal Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> Selector { get; }
    [NullableContextAttribute("1")]
internal Plan`12(Pattern`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> expression, Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> selector);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal Pattern`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> get_Expression();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> get_Selector();
    [NullableContextAttribute("1")]
internal virtual ActivePlan Activate(Dictionary`2<object, IJoinObserver> externalSubscriptions, IObserver`1<TResult> observer, Action`1<ActivePlan> deactivate);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Joins.Plan`13 : Plan`1<TResult> {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Pattern`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> <Expression>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> <Selector>k__BackingField;
    [NullableAttribute("1")]
internal Pattern`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Expression { get; }
    [NullableAttribute("1")]
internal Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> Selector { get; }
    [NullableContextAttribute("1")]
internal Plan`13(Pattern`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> expression, Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> selector);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal Pattern`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> get_Expression();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> get_Selector();
    [NullableContextAttribute("1")]
internal virtual ActivePlan Activate(Dictionary`2<object, IJoinObserver> externalSubscriptions, IObserver`1<TResult> observer, Action`1<ActivePlan> deactivate);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Joins.Plan`14 : Plan`1<TResult> {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Pattern`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> <Expression>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> <Selector>k__BackingField;
    [NullableAttribute("1")]
internal Pattern`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Expression { get; }
    [NullableAttribute("1")]
internal Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> Selector { get; }
    [NullableContextAttribute("1")]
internal Plan`14(Pattern`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> expression, Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> selector);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal Pattern`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> get_Expression();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> get_Selector();
    [NullableContextAttribute("1")]
internal virtual ActivePlan Activate(Dictionary`2<object, IJoinObserver> externalSubscriptions, IObserver`1<TResult> observer, Action`1<ActivePlan> deactivate);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Joins.Plan`15 : Plan`1<TResult> {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Pattern`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> <Expression>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> <Selector>k__BackingField;
    [NullableAttribute("1")]
internal Pattern`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Expression { get; }
    [NullableAttribute("1")]
internal Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> Selector { get; }
    [NullableContextAttribute("1")]
internal Plan`15(Pattern`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> expression, Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> selector);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal Pattern`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> get_Expression();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> get_Selector();
    [NullableContextAttribute("1")]
internal virtual ActivePlan Activate(Dictionary`2<object, IJoinObserver> externalSubscriptions, IObserver`1<TResult> observer, Action`1<ActivePlan> deactivate);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Joins.Plan`16 : Plan`1<TResult> {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Pattern`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> <Expression>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> <Selector>k__BackingField;
    [NullableAttribute("1")]
internal Pattern`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Expression { get; }
    [NullableAttribute("1")]
internal Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> Selector { get; }
    [NullableContextAttribute("1")]
internal Plan`16(Pattern`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> expression, Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> selector);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal Pattern`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> get_Expression();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> get_Selector();
    [NullableContextAttribute("1")]
internal virtual ActivePlan Activate(Dictionary`2<object, IJoinObserver> externalSubscriptions, IObserver`1<TResult> observer, Action`1<ActivePlan> deactivate);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Joins.Plan`17 : Plan`1<TResult> {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Pattern`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> <Expression>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> <Selector>k__BackingField;
    [NullableAttribute("1")]
internal Pattern`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Expression { get; }
    [NullableAttribute("1")]
internal Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> Selector { get; }
    [NullableContextAttribute("1")]
internal Plan`17(Pattern`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> expression, Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> selector);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal Pattern`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> get_Expression();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> get_Selector();
    [NullableContextAttribute("1")]
internal virtual ActivePlan Activate(Dictionary`2<object, IJoinObserver> externalSubscriptions, IObserver`1<TResult> observer, Action`1<ActivePlan> deactivate);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Joins.Plan`2 : Plan`1<TResult> {
    [CompilerGeneratedAttribute]
private Pattern`1<T1> <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<T1, TResult> <Selector>k__BackingField;
    internal Pattern`1<T1> Expression { get; }
    internal Func`2<T1, TResult> Selector { get; }
    internal Plan`2(Pattern`1<T1> expression, Func`2<T1, TResult> selector);
    [CompilerGeneratedAttribute]
internal Pattern`1<T1> get_Expression();
    [CompilerGeneratedAttribute]
internal Func`2<T1, TResult> get_Selector();
    internal virtual ActivePlan Activate(Dictionary`2<object, IJoinObserver> externalSubscriptions, IObserver`1<TResult> observer, Action`1<ActivePlan> deactivate);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Joins.Plan`3 : Plan`1<TResult> {
    [CompilerGeneratedAttribute]
private Pattern`2<T1, T2> <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<T1, T2, TResult> <Selector>k__BackingField;
    internal Pattern`2<T1, T2> Expression { get; }
    internal Func`3<T1, T2, TResult> Selector { get; }
    internal Plan`3(Pattern`2<T1, T2> expression, Func`3<T1, T2, TResult> selector);
    [CompilerGeneratedAttribute]
internal Pattern`2<T1, T2> get_Expression();
    [CompilerGeneratedAttribute]
internal Func`3<T1, T2, TResult> get_Selector();
    internal virtual ActivePlan Activate(Dictionary`2<object, IJoinObserver> externalSubscriptions, IObserver`1<TResult> observer, Action`1<ActivePlan> deactivate);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Joins.Plan`4 : Plan`1<TResult> {
    [CompilerGeneratedAttribute]
private Pattern`3<T1, T2, T3> <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<T1, T2, T3, TResult> <Selector>k__BackingField;
    internal Pattern`3<T1, T2, T3> Expression { get; }
    internal Func`4<T1, T2, T3, TResult> Selector { get; }
    internal Plan`4(Pattern`3<T1, T2, T3> expression, Func`4<T1, T2, T3, TResult> selector);
    [CompilerGeneratedAttribute]
internal Pattern`3<T1, T2, T3> get_Expression();
    [CompilerGeneratedAttribute]
internal Func`4<T1, T2, T3, TResult> get_Selector();
    internal virtual ActivePlan Activate(Dictionary`2<object, IJoinObserver> externalSubscriptions, IObserver`1<TResult> observer, Action`1<ActivePlan> deactivate);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Joins.Plan`5 : Plan`1<TResult> {
    [CompilerGeneratedAttribute]
private Pattern`4<T1, T2, T3, T4> <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`5<T1, T2, T3, T4, TResult> <Selector>k__BackingField;
    internal Pattern`4<T1, T2, T3, T4> Expression { get; }
    internal Func`5<T1, T2, T3, T4, TResult> Selector { get; }
    internal Plan`5(Pattern`4<T1, T2, T3, T4> expression, Func`5<T1, T2, T3, T4, TResult> selector);
    [CompilerGeneratedAttribute]
internal Pattern`4<T1, T2, T3, T4> get_Expression();
    [CompilerGeneratedAttribute]
internal Func`5<T1, T2, T3, T4, TResult> get_Selector();
    internal virtual ActivePlan Activate(Dictionary`2<object, IJoinObserver> externalSubscriptions, IObserver`1<TResult> observer, Action`1<ActivePlan> deactivate);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Joins.Plan`6 : Plan`1<TResult> {
    [CompilerGeneratedAttribute]
private Pattern`5<T1, T2, T3, T4, T5> <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`6<T1, T2, T3, T4, T5, TResult> <Selector>k__BackingField;
    internal Pattern`5<T1, T2, T3, T4, T5> Expression { get; }
    internal Func`6<T1, T2, T3, T4, T5, TResult> Selector { get; }
    internal Plan`6(Pattern`5<T1, T2, T3, T4, T5> expression, Func`6<T1, T2, T3, T4, T5, TResult> selector);
    [CompilerGeneratedAttribute]
internal Pattern`5<T1, T2, T3, T4, T5> get_Expression();
    [CompilerGeneratedAttribute]
internal Func`6<T1, T2, T3, T4, T5, TResult> get_Selector();
    internal virtual ActivePlan Activate(Dictionary`2<object, IJoinObserver> externalSubscriptions, IObserver`1<TResult> observer, Action`1<ActivePlan> deactivate);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Joins.Plan`7 : Plan`1<TResult> {
    [CompilerGeneratedAttribute]
private Pattern`6<T1, T2, T3, T4, T5, T6> <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`7<T1, T2, T3, T4, T5, T6, TResult> <Selector>k__BackingField;
    internal Pattern`6<T1, T2, T3, T4, T5, T6> Expression { get; }
    internal Func`7<T1, T2, T3, T4, T5, T6, TResult> Selector { get; }
    internal Plan`7(Pattern`6<T1, T2, T3, T4, T5, T6> expression, Func`7<T1, T2, T3, T4, T5, T6, TResult> selector);
    [CompilerGeneratedAttribute]
internal Pattern`6<T1, T2, T3, T4, T5, T6> get_Expression();
    [CompilerGeneratedAttribute]
internal Func`7<T1, T2, T3, T4, T5, T6, TResult> get_Selector();
    internal virtual ActivePlan Activate(Dictionary`2<object, IJoinObserver> externalSubscriptions, IObserver`1<TResult> observer, Action`1<ActivePlan> deactivate);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Joins.Plan`8 : Plan`1<TResult> {
    [CompilerGeneratedAttribute]
private Pattern`7<T1, T2, T3, T4, T5, T6, T7> <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`8<T1, T2, T3, T4, T5, T6, T7, TResult> <Selector>k__BackingField;
    internal Pattern`7<T1, T2, T3, T4, T5, T6, T7> Expression { get; }
    internal Func`8<T1, T2, T3, T4, T5, T6, T7, TResult> Selector { get; }
    internal Plan`8(Pattern`7<T1, T2, T3, T4, T5, T6, T7> expression, Func`8<T1, T2, T3, T4, T5, T6, T7, TResult> selector);
    [CompilerGeneratedAttribute]
internal Pattern`7<T1, T2, T3, T4, T5, T6, T7> get_Expression();
    [CompilerGeneratedAttribute]
internal Func`8<T1, T2, T3, T4, T5, T6, T7, TResult> get_Selector();
    internal virtual ActivePlan Activate(Dictionary`2<object, IJoinObserver> externalSubscriptions, IObserver`1<TResult> observer, Action`1<ActivePlan> deactivate);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Joins.Plan`9 : Plan`1<TResult> {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Pattern`8<T1, T2, T3, T4, T5, T6, T7, T8> <Expression>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> <Selector>k__BackingField;
    [NullableAttribute("1")]
internal Pattern`8<T1, T2, T3, T4, T5, T6, T7, T8> Expression { get; }
    [NullableAttribute("1")]
internal Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> Selector { get; }
    [NullableContextAttribute("1")]
internal Plan`9(Pattern`8<T1, T2, T3, T4, T5, T6, T7, T8> expression, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> selector);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal Pattern`8<T1, T2, T3, T4, T5, T6, T7, T8> get_Expression();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> get_Selector();
    [NullableContextAttribute("1")]
internal virtual ActivePlan Activate(Dictionary`2<object, IJoinObserver> externalSubscriptions, IObserver`1<TResult> observer, Action`1<ActivePlan> deactivate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Reactive.Joins.QueryablePattern : object {
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    public Expression Expression { get; }
    protected QueryablePattern(Expression expression);
    [CompilerGeneratedAttribute]
public Expression get_Expression();
}
public class System.Reactive.Joins.QueryablePattern`10 : QueryablePattern {
    internal QueryablePattern`10(Expression expression);
    public QueryablePattern`11<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11> And(IObservable`1<TSource11> other);
    public QueryablePlan`1<TResult> Then(Expression`1<Func`11<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TResult>> selector);
}
public class System.Reactive.Joins.QueryablePattern`11 : QueryablePattern {
    internal QueryablePattern`11(Expression expression);
    public QueryablePattern`12<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12> And(IObservable`1<TSource12> other);
    public QueryablePlan`1<TResult> Then(Expression`1<Func`12<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TResult>> selector);
}
public class System.Reactive.Joins.QueryablePattern`12 : QueryablePattern {
    internal QueryablePattern`12(Expression expression);
    public QueryablePattern`13<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13> And(IObservable`1<TSource13> other);
    public QueryablePlan`1<TResult> Then(Expression`1<Func`13<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TResult>> selector);
}
public class System.Reactive.Joins.QueryablePattern`13 : QueryablePattern {
    internal QueryablePattern`13(Expression expression);
    public QueryablePattern`14<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14> And(IObservable`1<TSource14> other);
    public QueryablePlan`1<TResult> Then(Expression`1<Func`14<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TResult>> selector);
}
public class System.Reactive.Joins.QueryablePattern`14 : QueryablePattern {
    internal QueryablePattern`14(Expression expression);
    public QueryablePattern`15<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15> And(IObservable`1<TSource15> other);
    public QueryablePlan`1<TResult> Then(Expression`1<Func`15<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TResult>> selector);
}
public class System.Reactive.Joins.QueryablePattern`15 : QueryablePattern {
    internal QueryablePattern`15(Expression expression);
    public QueryablePattern`16<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16> And(IObservable`1<TSource16> other);
    public QueryablePlan`1<TResult> Then(Expression`1<Func`16<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TResult>> selector);
}
public class System.Reactive.Joins.QueryablePattern`16 : QueryablePattern {
    internal QueryablePattern`16(Expression expression);
    public QueryablePlan`1<TResult> Then(Expression`1<Func`17<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16, TResult>> selector);
}
public class System.Reactive.Joins.QueryablePattern`2 : QueryablePattern {
    internal QueryablePattern`2(Expression expression);
    public QueryablePattern`3<TSource1, TSource2, TSource3> And(IObservable`1<TSource3> other);
    public QueryablePlan`1<TResult> Then(Expression`1<Func`3<TSource1, TSource2, TResult>> selector);
}
public class System.Reactive.Joins.QueryablePattern`3 : QueryablePattern {
    internal QueryablePattern`3(Expression expression);
    public QueryablePattern`4<TSource1, TSource2, TSource3, TSource4> And(IObservable`1<TSource4> other);
    public QueryablePlan`1<TResult> Then(Expression`1<Func`4<TSource1, TSource2, TSource3, TResult>> selector);
}
public class System.Reactive.Joins.QueryablePattern`4 : QueryablePattern {
    internal QueryablePattern`4(Expression expression);
    public QueryablePattern`5<TSource1, TSource2, TSource3, TSource4, TSource5> And(IObservable`1<TSource5> other);
    public QueryablePlan`1<TResult> Then(Expression`1<Func`5<TSource1, TSource2, TSource3, TSource4, TResult>> selector);
}
public class System.Reactive.Joins.QueryablePattern`5 : QueryablePattern {
    internal QueryablePattern`5(Expression expression);
    public QueryablePattern`6<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6> And(IObservable`1<TSource6> other);
    public QueryablePlan`1<TResult> Then(Expression`1<Func`6<TSource1, TSource2, TSource3, TSource4, TSource5, TResult>> selector);
}
public class System.Reactive.Joins.QueryablePattern`6 : QueryablePattern {
    internal QueryablePattern`6(Expression expression);
    public QueryablePattern`7<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7> And(IObservable`1<TSource7> other);
    public QueryablePlan`1<TResult> Then(Expression`1<Func`7<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TResult>> selector);
}
public class System.Reactive.Joins.QueryablePattern`7 : QueryablePattern {
    internal QueryablePattern`7(Expression expression);
    public QueryablePattern`8<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8> And(IObservable`1<TSource8> other);
    public QueryablePlan`1<TResult> Then(Expression`1<Func`8<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TResult>> selector);
}
public class System.Reactive.Joins.QueryablePattern`8 : QueryablePattern {
    internal QueryablePattern`8(Expression expression);
    public QueryablePattern`9<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9> And(IObservable`1<TSource9> other);
    public QueryablePlan`1<TResult> Then(Expression`1<Func`9<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TResult>> selector);
}
public class System.Reactive.Joins.QueryablePattern`9 : QueryablePattern {
    internal QueryablePattern`9(Expression expression);
    public QueryablePattern`10<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10> And(IObservable`1<TSource10> other);
    public QueryablePlan`1<TResult> Then(Expression`1<Func`10<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TResult>> selector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reactive.Joins.QueryablePlan`1 : object {
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    public Expression Expression { get; }
    internal QueryablePlan`1(Expression expression);
    [CompilerGeneratedAttribute]
public Expression get_Expression();
}
internal class System.Reactive.Linq.DefaultQueryServices : object {
    [NullableContextAttribute("1")]
public sealed virtual T Extend(T baseImpl);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.GroupedObservable`2 : ObservableBase`1<TElement> {
    private IObservable`1<TElement> _subject;
    [NullableAttribute("2")]
private RefCountDisposable _refCount;
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    public TKey Key { get; }
    public GroupedObservable`2(TKey key, ISubject`1<TElement> subject, RefCountDisposable refCount);
    public GroupedObservable`2(TKey key, ISubject`1<TElement> subject);
    [CompilerGeneratedAttribute]
public sealed virtual TKey get_Key();
    protected virtual IDisposable SubscribeCore(IObserver`1<TElement> observer);
}
[NullableContextAttribute("1")]
public interface System.Reactive.Linq.IGroupedObservable`2 {
    public TKey Key { get; }
    public abstract virtual TKey get_Key();
}
[NullableContextAttribute("1")]
public interface System.Reactive.Linq.IQbservable {
    public Type ElementType { get; }
    public Expression Expression { get; }
    public IQbservableProvider Provider { get; }
    public abstract virtual Type get_ElementType();
    public abstract virtual Expression get_Expression();
    public abstract virtual IQbservableProvider get_Provider();
}
public interface System.Reactive.Linq.IQbservable`1 {
}
[NullableContextAttribute("1")]
public interface System.Reactive.Linq.IQbservableProvider {
    public abstract virtual IQbservable`1<TResult> CreateQuery(Expression expression);
}
[NullableContextAttribute("1")]
internal interface System.Reactive.Linq.IQueryLanguage {
    public abstract virtual IObservable`1<TAccumulate> Aggregate(IObservable`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> accumulator);
    public abstract virtual IObservable`1<TResult> Aggregate(IObservable`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> accumulator, Func`2<TAccumulate, TResult> resultSelector);
    public abstract virtual IObservable`1<TSource> Aggregate(IObservable`1<TSource> source, Func`3<TSource, TSource, TSource> accumulator);
    public abstract virtual IObservable`1<bool> All(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public abstract virtual IObservable`1<bool> Any(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<bool> Any(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public abstract virtual IObservable`1<double> Average(IObservable`1<double> source);
    public abstract virtual IObservable`1<float> Average(IObservable`1<float> source);
    public abstract virtual IObservable`1<decimal> Average(IObservable`1<decimal> source);
    public abstract virtual IObservable`1<double> Average(IObservable`1<int> source);
    public abstract virtual IObservable`1<double> Average(IObservable`1<long> source);
    public abstract virtual IObservable`1<Nullable`1<double>> Average(IObservable`1<Nullable`1<double>> source);
    public abstract virtual IObservable`1<Nullable`1<float>> Average(IObservable`1<Nullable`1<float>> source);
    public abstract virtual IObservable`1<Nullable`1<decimal>> Average(IObservable`1<Nullable`1<decimal>> source);
    public abstract virtual IObservable`1<Nullable`1<double>> Average(IObservable`1<Nullable`1<int>> source);
    public abstract virtual IObservable`1<Nullable`1<double>> Average(IObservable`1<Nullable`1<long>> source);
    public abstract virtual IObservable`1<double> Average(IObservable`1<TSource> source, Func`2<TSource, double> selector);
    public abstract virtual IObservable`1<float> Average(IObservable`1<TSource> source, Func`2<TSource, float> selector);
    public abstract virtual IObservable`1<decimal> Average(IObservable`1<TSource> source, Func`2<TSource, decimal> selector);
    public abstract virtual IObservable`1<double> Average(IObservable`1<TSource> source, Func`2<TSource, int> selector);
    public abstract virtual IObservable`1<double> Average(IObservable`1<TSource> source, Func`2<TSource, long> selector);
    public abstract virtual IObservable`1<Nullable`1<double>> Average(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector);
    public abstract virtual IObservable`1<Nullable`1<float>> Average(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector);
    public abstract virtual IObservable`1<Nullable`1<decimal>> Average(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector);
    public abstract virtual IObservable`1<Nullable`1<double>> Average(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector);
    public abstract virtual IObservable`1<Nullable`1<double>> Average(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector);
    public abstract virtual IObservable`1<bool> Contains(IObservable`1<TSource> source, TSource value);
    public abstract virtual IObservable`1<bool> Contains(IObservable`1<TSource> source, TSource value, IEqualityComparer`1<TSource> comparer);
    public abstract virtual IObservable`1<int> Count(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<int> Count(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public abstract virtual IObservable`1<TSource> ElementAt(IObservable`1<TSource> source, int index);
    public abstract virtual IObservable`1<TSource> ElementAtOrDefault(IObservable`1<TSource> source, int index);
    public abstract virtual IObservable`1<TSource> FirstAsync(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<TSource> FirstAsync(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public abstract virtual IObservable`1<TSource> FirstOrDefaultAsync(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<TSource> FirstOrDefaultAsync(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public abstract virtual IObservable`1<bool> IsEmpty(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<TSource> LastAsync(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<TSource> LastAsync(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public abstract virtual IObservable`1<TSource> LastOrDefaultAsync(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<TSource> LastOrDefaultAsync(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public abstract virtual IObservable`1<long> LongCount(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<long> LongCount(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public abstract virtual IObservable`1<TSource> Max(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<TSource> Max(IObservable`1<TSource> source, IComparer`1<TSource> comparer);
    public abstract virtual IObservable`1<double> Max(IObservable`1<double> source);
    public abstract virtual IObservable`1<float> Max(IObservable`1<float> source);
    public abstract virtual IObservable`1<decimal> Max(IObservable`1<decimal> source);
    public abstract virtual IObservable`1<int> Max(IObservable`1<int> source);
    public abstract virtual IObservable`1<long> Max(IObservable`1<long> source);
    public abstract virtual IObservable`1<Nullable`1<double>> Max(IObservable`1<Nullable`1<double>> source);
    public abstract virtual IObservable`1<Nullable`1<float>> Max(IObservable`1<Nullable`1<float>> source);
    public abstract virtual IObservable`1<Nullable`1<decimal>> Max(IObservable`1<Nullable`1<decimal>> source);
    public abstract virtual IObservable`1<Nullable`1<int>> Max(IObservable`1<Nullable`1<int>> source);
    public abstract virtual IObservable`1<Nullable`1<long>> Max(IObservable`1<Nullable`1<long>> source);
    public abstract virtual IObservable`1<TResult> Max(IObservable`1<TSource> source, Func`2<TSource, TResult> selector);
    public abstract virtual IObservable`1<TResult> Max(IObservable`1<TSource> source, Func`2<TSource, TResult> selector, IComparer`1<TResult> comparer);
    public abstract virtual IObservable`1<double> Max(IObservable`1<TSource> source, Func`2<TSource, double> selector);
    public abstract virtual IObservable`1<float> Max(IObservable`1<TSource> source, Func`2<TSource, float> selector);
    public abstract virtual IObservable`1<decimal> Max(IObservable`1<TSource> source, Func`2<TSource, decimal> selector);
    public abstract virtual IObservable`1<int> Max(IObservable`1<TSource> source, Func`2<TSource, int> selector);
    public abstract virtual IObservable`1<long> Max(IObservable`1<TSource> source, Func`2<TSource, long> selector);
    public abstract virtual IObservable`1<Nullable`1<double>> Max(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector);
    public abstract virtual IObservable`1<Nullable`1<float>> Max(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector);
    public abstract virtual IObservable`1<Nullable`1<decimal>> Max(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector);
    public abstract virtual IObservable`1<Nullable`1<int>> Max(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector);
    public abstract virtual IObservable`1<Nullable`1<long>> Max(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector);
    public abstract virtual IObservable`1<IList`1<TSource>> MaxBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    public abstract virtual IObservable`1<IList`1<TSource>> MaxBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    public abstract virtual IObservable`1<TSource> Min(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<TSource> Min(IObservable`1<TSource> source, IComparer`1<TSource> comparer);
    public abstract virtual IObservable`1<double> Min(IObservable`1<double> source);
    public abstract virtual IObservable`1<float> Min(IObservable`1<float> source);
    public abstract virtual IObservable`1<decimal> Min(IObservable`1<decimal> source);
    public abstract virtual IObservable`1<int> Min(IObservable`1<int> source);
    public abstract virtual IObservable`1<long> Min(IObservable`1<long> source);
    public abstract virtual IObservable`1<Nullable`1<double>> Min(IObservable`1<Nullable`1<double>> source);
    public abstract virtual IObservable`1<Nullable`1<float>> Min(IObservable`1<Nullable`1<float>> source);
    public abstract virtual IObservable`1<Nullable`1<decimal>> Min(IObservable`1<Nullable`1<decimal>> source);
    public abstract virtual IObservable`1<Nullable`1<int>> Min(IObservable`1<Nullable`1<int>> source);
    public abstract virtual IObservable`1<Nullable`1<long>> Min(IObservable`1<Nullable`1<long>> source);
    public abstract virtual IObservable`1<TResult> Min(IObservable`1<TSource> source, Func`2<TSource, TResult> selector);
    public abstract virtual IObservable`1<TResult> Min(IObservable`1<TSource> source, Func`2<TSource, TResult> selector, IComparer`1<TResult> comparer);
    public abstract virtual IObservable`1<double> Min(IObservable`1<TSource> source, Func`2<TSource, double> selector);
    public abstract virtual IObservable`1<float> Min(IObservable`1<TSource> source, Func`2<TSource, float> selector);
    public abstract virtual IObservable`1<decimal> Min(IObservable`1<TSource> source, Func`2<TSource, decimal> selector);
    public abstract virtual IObservable`1<int> Min(IObservable`1<TSource> source, Func`2<TSource, int> selector);
    public abstract virtual IObservable`1<long> Min(IObservable`1<TSource> source, Func`2<TSource, long> selector);
    public abstract virtual IObservable`1<Nullable`1<double>> Min(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector);
    public abstract virtual IObservable`1<Nullable`1<float>> Min(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector);
    public abstract virtual IObservable`1<Nullable`1<decimal>> Min(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector);
    public abstract virtual IObservable`1<Nullable`1<int>> Min(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector);
    public abstract virtual IObservable`1<Nullable`1<long>> Min(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector);
    public abstract virtual IObservable`1<IList`1<TSource>> MinBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    public abstract virtual IObservable`1<IList`1<TSource>> MinBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    public abstract virtual IObservable`1<bool> SequenceEqual(IObservable`1<TSource> first, IObservable`1<TSource> second);
    public abstract virtual IObservable`1<bool> SequenceEqual(IObservable`1<TSource> first, IObservable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    public abstract virtual IObservable`1<bool> SequenceEqual(IObservable`1<TSource> first, IEnumerable`1<TSource> second);
    public abstract virtual IObservable`1<bool> SequenceEqual(IObservable`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    public abstract virtual IObservable`1<TSource> SingleAsync(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<TSource> SingleAsync(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public abstract virtual IObservable`1<TSource> SingleOrDefaultAsync(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<TSource> SingleOrDefaultAsync(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public abstract virtual IObservable`1<double> Sum(IObservable`1<double> source);
    public abstract virtual IObservable`1<float> Sum(IObservable`1<float> source);
    public abstract virtual IObservable`1<decimal> Sum(IObservable`1<decimal> source);
    public abstract virtual IObservable`1<int> Sum(IObservable`1<int> source);
    public abstract virtual IObservable`1<long> Sum(IObservable`1<long> source);
    public abstract virtual IObservable`1<Nullable`1<double>> Sum(IObservable`1<Nullable`1<double>> source);
    public abstract virtual IObservable`1<Nullable`1<float>> Sum(IObservable`1<Nullable`1<float>> source);
    public abstract virtual IObservable`1<Nullable`1<decimal>> Sum(IObservable`1<Nullable`1<decimal>> source);
    public abstract virtual IObservable`1<Nullable`1<int>> Sum(IObservable`1<Nullable`1<int>> source);
    public abstract virtual IObservable`1<Nullable`1<long>> Sum(IObservable`1<Nullable`1<long>> source);
    public abstract virtual IObservable`1<double> Sum(IObservable`1<TSource> source, Func`2<TSource, double> selector);
    public abstract virtual IObservable`1<float> Sum(IObservable`1<TSource> source, Func`2<TSource, float> selector);
    public abstract virtual IObservable`1<decimal> Sum(IObservable`1<TSource> source, Func`2<TSource, decimal> selector);
    public abstract virtual IObservable`1<int> Sum(IObservable`1<TSource> source, Func`2<TSource, int> selector);
    public abstract virtual IObservable`1<long> Sum(IObservable`1<TSource> source, Func`2<TSource, long> selector);
    public abstract virtual IObservable`1<Nullable`1<double>> Sum(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector);
    public abstract virtual IObservable`1<Nullable`1<float>> Sum(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector);
    public abstract virtual IObservable`1<Nullable`1<decimal>> Sum(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector);
    public abstract virtual IObservable`1<Nullable`1<int>> Sum(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector);
    public abstract virtual IObservable`1<Nullable`1<long>> Sum(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector);
    public abstract virtual IObservable`1<TSource[]> ToArray(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<IDictionary`2<TKey, TElement>> ToDictionary(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    public abstract virtual IObservable`1<IDictionary`2<TKey, TElement>> ToDictionary(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    public abstract virtual IObservable`1<IDictionary`2<TKey, TSource>> ToDictionary(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    public abstract virtual IObservable`1<IDictionary`2<TKey, TSource>> ToDictionary(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    public abstract virtual IObservable`1<IList`1<TSource>> ToList(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<ILookup`2<TKey, TElement>> ToLookup(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    public abstract virtual IObservable`1<ILookup`2<TKey, TSource>> ToLookup(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    public abstract virtual IObservable`1<ILookup`2<TKey, TElement>> ToLookup(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    public abstract virtual IObservable`1<ILookup`2<TKey, TSource>> ToLookup(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    public abstract virtual Func`1<IObservable`1<TResult>> FromAsyncPattern(Func`3<AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    public abstract virtual Func`2<T1, IObservable`1<TResult>> FromAsyncPattern(Func`4<T1, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`3<T1, T2, IObservable`1<TResult>> FromAsyncPattern(Func`5<T1, T2, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`4<T1, T2, T3, IObservable`1<TResult>> FromAsyncPattern(Func`6<T1, T2, T3, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`5<T1, T2, T3, T4, IObservable`1<TResult>> FromAsyncPattern(Func`7<T1, T2, T3, T4, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`6<T1, T2, T3, T4, T5, IObservable`1<TResult>> FromAsyncPattern(Func`8<T1, T2, T3, T4, T5, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`7<T1, T2, T3, T4, T5, T6, IObservable`1<TResult>> FromAsyncPattern(Func`9<T1, T2, T3, T4, T5, T6, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`8<T1, T2, T3, T4, T5, T6, T7, IObservable`1<TResult>> FromAsyncPattern(Func`10<T1, T2, T3, T4, T5, T6, T7, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`9<T1, T2, T3, T4, T5, T6, T7, T8, IObservable`1<TResult>> FromAsyncPattern(Func`11<T1, T2, T3, T4, T5, T6, T7, T8, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, IObservable`1<TResult>> FromAsyncPattern(Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IObservable`1<TResult>> FromAsyncPattern(Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, IObservable`1<TResult>> FromAsyncPattern(Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, IObservable`1<TResult>> FromAsyncPattern(Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, IObservable`1<TResult>> FromAsyncPattern(Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, IObservable`1<TResult>> FromAsyncPattern(Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    public abstract virtual Func`1<IObservable`1<Unit>> FromAsyncPattern(Func`3<AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    public abstract virtual Func`2<T1, IObservable`1<Unit>> FromAsyncPattern(Func`4<T1, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    public abstract virtual Func`3<T1, T2, IObservable`1<Unit>> FromAsyncPattern(Func`5<T1, T2, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`4<T1, T2, T3, IObservable`1<Unit>> FromAsyncPattern(Func`6<T1, T2, T3, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`5<T1, T2, T3, T4, IObservable`1<Unit>> FromAsyncPattern(Func`7<T1, T2, T3, T4, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`6<T1, T2, T3, T4, T5, IObservable`1<Unit>> FromAsyncPattern(Func`8<T1, T2, T3, T4, T5, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`7<T1, T2, T3, T4, T5, T6, IObservable`1<Unit>> FromAsyncPattern(Func`9<T1, T2, T3, T4, T5, T6, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`8<T1, T2, T3, T4, T5, T6, T7, IObservable`1<Unit>> FromAsyncPattern(Func`10<T1, T2, T3, T4, T5, T6, T7, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`9<T1, T2, T3, T4, T5, T6, T7, T8, IObservable`1<Unit>> FromAsyncPattern(Func`11<T1, T2, T3, T4, T5, T6, T7, T8, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, IObservable`1<Unit>> FromAsyncPattern(Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IObservable`1<Unit>> FromAsyncPattern(Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, IObservable`1<Unit>> FromAsyncPattern(Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, IObservable`1<Unit>> FromAsyncPattern(Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, IObservable`1<Unit>> FromAsyncPattern(Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
public abstract virtual Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, IObservable`1<Unit>> FromAsyncPattern(Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    public abstract virtual IObservable`1<TSource> Start(Func`1<TSource> function);
    public abstract virtual IObservable`1<TSource> Start(Func`1<TSource> function, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> StartAsync(Func`1<Task`1<TSource>> functionAsync);
    public abstract virtual IObservable`1<TSource> StartAsync(Func`2<CancellationToken, Task`1<TSource>> functionAsync);
    public abstract virtual IObservable`1<TSource> StartAsync(Func`1<Task`1<TSource>> functionAsync, Value& modreq(System.Runtime.InteropServices.InAttribute) options);
    public abstract virtual IObservable`1<TSource> StartAsync(Func`2<CancellationToken, Task`1<TSource>> functionAsync, Value& modreq(System.Runtime.InteropServices.InAttribute) options);
    public abstract virtual IObservable`1<Unit> Start(Action action);
    public abstract virtual IObservable`1<Unit> Start(Action action, IScheduler scheduler);
    public abstract virtual IObservable`1<Unit> StartAsync(Func`1<Task> actionAsync);
    public abstract virtual IObservable`1<Unit> StartAsync(Func`2<CancellationToken, Task> actionAsync);
    public abstract virtual IObservable`1<Unit> StartAsync(Func`1<Task> actionAsync, Value& modreq(System.Runtime.InteropServices.InAttribute) options);
    public abstract virtual IObservable`1<Unit> StartAsync(Func`2<CancellationToken, Task> actionAsync, Value& modreq(System.Runtime.InteropServices.InAttribute) options);
    public abstract virtual IObservable`1<TResult> FromAsync(Func`1<Task`1<TResult>> functionAsync);
    public abstract virtual IObservable`1<TResult> FromAsync(Func`2<CancellationToken, Task`1<TResult>> functionAsync);
    public abstract virtual IObservable`1<Unit> FromAsync(Func`1<Task> actionAsync);
    public abstract virtual IObservable`1<Unit> FromAsync(Func`2<CancellationToken, Task> actionAsync);
    public abstract virtual IObservable`1<TResult> FromAsync(Func`1<Task`1<TResult>> functionAsync, Value options);
    public abstract virtual IObservable`1<TResult> FromAsync(Func`2<CancellationToken, Task`1<TResult>> functionAsync, Value options);
    public abstract virtual IObservable`1<Unit> FromAsync(Func`1<Task> actionAsync, Value options);
    public abstract virtual IObservable`1<Unit> FromAsync(Func`2<CancellationToken, Task> actionAsync, Value options);
    public abstract virtual Func`1<IObservable`1<TResult>> ToAsync(Func`1<TResult> function);
    public abstract virtual Func`1<IObservable`1<TResult>> ToAsync(Func`1<TResult> function, IScheduler scheduler);
    public abstract virtual Func`2<T, IObservable`1<TResult>> ToAsync(Func`2<T, TResult> function);
    public abstract virtual Func`2<T, IObservable`1<TResult>> ToAsync(Func`2<T, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`3<T1, T2, IObservable`1<TResult>> ToAsync(Func`3<T1, T2, TResult> function);
    public abstract virtual Func`3<T1, T2, IObservable`1<TResult>> ToAsync(Func`3<T1, T2, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`4<T1, T2, T3, IObservable`1<TResult>> ToAsync(Func`4<T1, T2, T3, TResult> function);
    [NullableContextAttribute("2")]
public abstract virtual Func`4<T1, T2, T3, IObservable`1<TResult>> ToAsync(Func`4<T1, T2, T3, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`5<T1, T2, T3, T4, IObservable`1<TResult>> ToAsync(Func`5<T1, T2, T3, T4, TResult> function);
    [NullableContextAttribute("2")]
public abstract virtual Func`5<T1, T2, T3, T4, IObservable`1<TResult>> ToAsync(Func`5<T1, T2, T3, T4, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`6<T1, T2, T3, T4, T5, IObservable`1<TResult>> ToAsync(Func`6<T1, T2, T3, T4, T5, TResult> function);
    [NullableContextAttribute("2")]
public abstract virtual Func`6<T1, T2, T3, T4, T5, IObservable`1<TResult>> ToAsync(Func`6<T1, T2, T3, T4, T5, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`7<T1, T2, T3, T4, T5, T6, IObservable`1<TResult>> ToAsync(Func`7<T1, T2, T3, T4, T5, T6, TResult> function);
    [NullableContextAttribute("2")]
public abstract virtual Func`7<T1, T2, T3, T4, T5, T6, IObservable`1<TResult>> ToAsync(Func`7<T1, T2, T3, T4, T5, T6, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`8<T1, T2, T3, T4, T5, T6, T7, IObservable`1<TResult>> ToAsync(Func`8<T1, T2, T3, T4, T5, T6, T7, TResult> function);
    [NullableContextAttribute("2")]
public abstract virtual Func`8<T1, T2, T3, T4, T5, T6, T7, IObservable`1<TResult>> ToAsync(Func`8<T1, T2, T3, T4, T5, T6, T7, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`9<T1, T2, T3, T4, T5, T6, T7, T8, IObservable`1<TResult>> ToAsync(Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> function);
    [NullableContextAttribute("2")]
public abstract virtual Func`9<T1, T2, T3, T4, T5, T6, T7, T8, IObservable`1<TResult>> ToAsync(Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, IObservable`1<TResult>> ToAsync(Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> function);
    [NullableContextAttribute("2")]
public abstract virtual Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, IObservable`1<TResult>> ToAsync(Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IObservable`1<TResult>> ToAsync(Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> function);
    [NullableContextAttribute("2")]
public abstract virtual Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IObservable`1<TResult>> ToAsync(Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, IObservable`1<TResult>> ToAsync(Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> function);
    [NullableContextAttribute("2")]
public abstract virtual Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, IObservable`1<TResult>> ToAsync(Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, IObservable`1<TResult>> ToAsync(Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> function);
    [NullableContextAttribute("2")]
public abstract virtual Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, IObservable`1<TResult>> ToAsync(Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, IObservable`1<TResult>> ToAsync(Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> function);
    [NullableContextAttribute("2")]
public abstract virtual Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, IObservable`1<TResult>> ToAsync(Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, IObservable`1<TResult>> ToAsync(Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> function);
    [NullableContextAttribute("2")]
public abstract virtual Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, IObservable`1<TResult>> ToAsync(Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, IObservable`1<TResult>> ToAsync(Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> function);
    [NullableContextAttribute("2")]
public abstract virtual Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, IObservable`1<TResult>> ToAsync(Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, IObservable`1<TResult>> ToAsync(Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> function);
    [NullableContextAttribute("2")]
public abstract virtual Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, IObservable`1<TResult>> ToAsync(Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> function, IScheduler scheduler);
    public abstract virtual Func`1<IObservable`1<Unit>> ToAsync(Action action);
    public abstract virtual Func`1<IObservable`1<Unit>> ToAsync(Action action, IScheduler scheduler);
    public abstract virtual Func`2<TSource, IObservable`1<Unit>> ToAsync(Action`1<TSource> action);
    public abstract virtual Func`2<TSource, IObservable`1<Unit>> ToAsync(Action`1<TSource> action, IScheduler scheduler);
    public abstract virtual Func`3<T1, T2, IObservable`1<Unit>> ToAsync(Action`2<T1, T2> action);
    public abstract virtual Func`3<T1, T2, IObservable`1<Unit>> ToAsync(Action`2<T1, T2> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`4<T1, T2, T3, IObservable`1<Unit>> ToAsync(Action`3<T1, T2, T3> action);
    public abstract virtual Func`4<T1, T2, T3, IObservable`1<Unit>> ToAsync(Action`3<T1, T2, T3> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`5<T1, T2, T3, T4, IObservable`1<Unit>> ToAsync(Action`4<T1, T2, T3, T4> action);
    [NullableContextAttribute("2")]
public abstract virtual Func`5<T1, T2, T3, T4, IObservable`1<Unit>> ToAsync(Action`4<T1, T2, T3, T4> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`6<T1, T2, T3, T4, T5, IObservable`1<Unit>> ToAsync(Action`5<T1, T2, T3, T4, T5> action);
    [NullableContextAttribute("2")]
public abstract virtual Func`6<T1, T2, T3, T4, T5, IObservable`1<Unit>> ToAsync(Action`5<T1, T2, T3, T4, T5> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`7<T1, T2, T3, T4, T5, T6, IObservable`1<Unit>> ToAsync(Action`6<T1, T2, T3, T4, T5, T6> action);
    [NullableContextAttribute("2")]
public abstract virtual Func`7<T1, T2, T3, T4, T5, T6, IObservable`1<Unit>> ToAsync(Action`6<T1, T2, T3, T4, T5, T6> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`8<T1, T2, T3, T4, T5, T6, T7, IObservable`1<Unit>> ToAsync(Action`7<T1, T2, T3, T4, T5, T6, T7> action);
    [NullableContextAttribute("2")]
public abstract virtual Func`8<T1, T2, T3, T4, T5, T6, T7, IObservable`1<Unit>> ToAsync(Action`7<T1, T2, T3, T4, T5, T6, T7> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`9<T1, T2, T3, T4, T5, T6, T7, T8, IObservable`1<Unit>> ToAsync(Action`8<T1, T2, T3, T4, T5, T6, T7, T8> action);
    [NullableContextAttribute("2")]
public abstract virtual Func`9<T1, T2, T3, T4, T5, T6, T7, T8, IObservable`1<Unit>> ToAsync(Action`8<T1, T2, T3, T4, T5, T6, T7, T8> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, IObservable`1<Unit>> ToAsync(Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action);
    [NullableContextAttribute("2")]
public abstract virtual Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, IObservable`1<Unit>> ToAsync(Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IObservable`1<Unit>> ToAsync(Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action);
    [NullableContextAttribute("2")]
public abstract virtual Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IObservable`1<Unit>> ToAsync(Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, IObservable`1<Unit>> ToAsync(Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action);
    [NullableContextAttribute("2")]
public abstract virtual Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, IObservable`1<Unit>> ToAsync(Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, IObservable`1<Unit>> ToAsync(Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action);
    [NullableContextAttribute("2")]
public abstract virtual Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, IObservable`1<Unit>> ToAsync(Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, IObservable`1<Unit>> ToAsync(Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action);
    [NullableContextAttribute("2")]
public abstract virtual Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, IObservable`1<Unit>> ToAsync(Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, IObservable`1<Unit>> ToAsync(Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action);
    [NullableContextAttribute("2")]
public abstract virtual Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, IObservable`1<Unit>> ToAsync(Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, IObservable`1<Unit>> ToAsync(Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action);
    [NullableContextAttribute("2")]
public abstract virtual Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, IObservable`1<Unit>> ToAsync(Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public abstract virtual Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, IObservable`1<Unit>> ToAsync(Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action);
    [NullableContextAttribute("2")]
public abstract virtual Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, IObservable`1<Unit>> ToAsync(Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, IScheduler scheduler);
    public abstract virtual AsyncSubject`1<TSource> GetAwaiter(IObservable`1<TSource> source);
    public abstract virtual AsyncSubject`1<TSource> GetAwaiter(IConnectableObservable`1<TSource> source);
    public abstract virtual AsyncSubject`1<TSource> RunAsync(IObservable`1<TSource> source, CancellationToken cancellationToken);
    public abstract virtual AsyncSubject`1<TSource> RunAsync(IConnectableObservable`1<TSource> source, CancellationToken cancellationToken);
    public abstract virtual IConnectableObservable`1<TResult> Multicast(IObservable`1<TSource> source, ISubject`2<TSource, TResult> subject);
    public abstract virtual IObservable`1<TResult> Multicast(IObservable`1<TSource> source, Func`1<ISubject`2<TSource, TIntermediate>> subjectSelector, Func`2<IObservable`1<TIntermediate>, IObservable`1<TResult>> selector);
    public abstract virtual IConnectableObservable`1<TSource> Publish(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<TResult> Publish(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector);
    public abstract virtual IConnectableObservable`1<TSource> Publish(IObservable`1<TSource> source, TSource initialValue);
    public abstract virtual IObservable`1<TResult> Publish(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector, TSource initialValue);
    public abstract virtual IConnectableObservable`1<TSource> PublishLast(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<TResult> PublishLast(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector);
    public abstract virtual IObservable`1<TSource> RefCount(IConnectableObservable`1<TSource> source);
    public abstract virtual IObservable`1<TSource> RefCount(IConnectableObservable`1<TSource> source, TimeSpan disconnectDelay);
    public abstract virtual IObservable`1<TSource> RefCount(IConnectableObservable`1<TSource> source, TimeSpan disconnectDelay, IScheduler schedulder);
    public abstract virtual IObservable`1<TSource> RefCount(IConnectableObservable`1<TSource> source, int minObservers);
    public abstract virtual IObservable`1<TSource> RefCount(IConnectableObservable`1<TSource> source, int minObservers, TimeSpan disconnectDelay);
    public abstract virtual IObservable`1<TSource> RefCount(IConnectableObservable`1<TSource> source, int minObservers, TimeSpan disconnectDelay, IScheduler schedulder);
    public abstract virtual IConnectableObservable`1<TSource> Replay(IObservable`1<TSource> source);
    public abstract virtual IConnectableObservable`1<TSource> Replay(IObservable`1<TSource> source, IScheduler scheduler);
    public abstract virtual IObservable`1<TResult> Replay(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector);
    public abstract virtual IObservable`1<TResult> Replay(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector, IScheduler scheduler);
    public abstract virtual IConnectableObservable`1<TSource> Replay(IObservable`1<TSource> source, TimeSpan window);
    public abstract virtual IObservable`1<TResult> Replay(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector, TimeSpan window);
    public abstract virtual IConnectableObservable`1<TSource> Replay(IObservable`1<TSource> source, TimeSpan window, IScheduler scheduler);
    public abstract virtual IObservable`1<TResult> Replay(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector, TimeSpan window, IScheduler scheduler);
    public abstract virtual IConnectableObservable`1<TSource> Replay(IObservable`1<TSource> source, int bufferSize, IScheduler scheduler);
    public abstract virtual IObservable`1<TResult> Replay(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector, int bufferSize, IScheduler scheduler);
    public abstract virtual IConnectableObservable`1<TSource> Replay(IObservable`1<TSource> source, int bufferSize);
    public abstract virtual IObservable`1<TResult> Replay(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector, int bufferSize);
    public abstract virtual IConnectableObservable`1<TSource> Replay(IObservable`1<TSource> source, int bufferSize, TimeSpan window);
    public abstract virtual IObservable`1<TResult> Replay(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector, int bufferSize, TimeSpan window);
    public abstract virtual IConnectableObservable`1<TSource> Replay(IObservable`1<TSource> source, int bufferSize, TimeSpan window, IScheduler scheduler);
    public abstract virtual IObservable`1<TResult> Replay(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector, int bufferSize, TimeSpan window, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> AutoConnect(IConnectableObservable`1<TSource> source, int minObservers, Action`1<IDisposable> onConnect);
    public abstract virtual IEnumerable`1<IList`1<TSource>> Chunkify(IObservable`1<TSource> source);
    public abstract virtual IEnumerable`1<TResult> Collect(IObservable`1<TSource> source, Func`1<TResult> newCollector, Func`3<TResult, TSource, TResult> merge);
    public abstract virtual IEnumerable`1<TResult> Collect(IObservable`1<TSource> source, Func`1<TResult> getInitialCollector, Func`3<TResult, TSource, TResult> merge, Func`2<TResult, TResult> getNewCollector);
    public abstract virtual TSource First(IObservable`1<TSource> source);
    public abstract virtual TSource First(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public abstract virtual TSource FirstOrDefault(IObservable`1<TSource> source);
    public abstract virtual TSource FirstOrDefault(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public abstract virtual void ForEach(IObservable`1<TSource> source, Action`1<TSource> onNext);
    public abstract virtual void ForEach(IObservable`1<TSource> source, Action`2<TSource, int> onNext);
    public abstract virtual IEnumerator`1<TSource> GetEnumerator(IObservable`1<TSource> source);
    public abstract virtual TSource Last(IObservable`1<TSource> source);
    public abstract virtual TSource Last(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public abstract virtual TSource LastOrDefault(IObservable`1<TSource> source);
    public abstract virtual TSource LastOrDefault(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public abstract virtual IEnumerable`1<TSource> Latest(IObservable`1<TSource> source);
    public abstract virtual IEnumerable`1<TSource> MostRecent(IObservable`1<TSource> source, TSource initialValue);
    public abstract virtual IEnumerable`1<TSource> Next(IObservable`1<TSource> source);
    public abstract virtual TSource Single(IObservable`1<TSource> source);
    public abstract virtual TSource SingleOrDefault(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public abstract virtual TSource SingleOrDefault(IObservable`1<TSource> source);
    public abstract virtual TSource Single(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public abstract virtual TSource Wait(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<TSource> ObserveOn(IObservable`1<TSource> source, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> ObserveOn(IObservable`1<TSource> source, SynchronizationContext context);
    public abstract virtual IObservable`1<TSource> SubscribeOn(IObservable`1<TSource> source, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> SubscribeOn(IObservable`1<TSource> source, SynchronizationContext context);
    public abstract virtual IObservable`1<TSource> Synchronize(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<TSource> Synchronize(IObservable`1<TSource> source, object gate);
    public abstract virtual IDisposable Subscribe(IEnumerable`1<TSource> source, IObserver`1<TSource> observer);
    public abstract virtual IDisposable Subscribe(IEnumerable`1<TSource> source, IObserver`1<TSource> observer, IScheduler scheduler);
    public abstract virtual IEnumerable`1<TSource> ToEnumerable(IObservable`1<TSource> source);
    public abstract virtual IEventSource`1<Unit> ToEvent(IObservable`1<Unit> source);
    public abstract virtual IEventSource`1<TSource> ToEvent(IObservable`1<TSource> source);
    public abstract virtual IEventPatternSource`1<TEventArgs> ToEventPattern(IObservable`1<EventPattern`1<TEventArgs>> source);
    public abstract virtual IObservable`1<TSource> ToObservable(IEnumerable`1<TSource> source);
    public abstract virtual IObservable`1<TSource> ToObservable(IEnumerable`1<TSource> source, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> Create(Func`2<IObserver`1<TSource>, IDisposable> subscribe);
    public abstract virtual IObservable`1<TSource> Create(Func`2<IObserver`1<TSource>, Action> subscribe);
    public abstract virtual IObservable`1<TResult> Create(Func`3<IObserver`1<TResult>, CancellationToken, Task> subscribeAsync);
    public abstract virtual IObservable`1<TResult> Create(Func`2<IObserver`1<TResult>, Task> subscribeAsync);
    public abstract virtual IObservable`1<TResult> Create(Func`3<IObserver`1<TResult>, CancellationToken, Task`1<IDisposable>> subscribeAsync);
    public abstract virtual IObservable`1<TResult> Create(Func`2<IObserver`1<TResult>, Task`1<IDisposable>> subscribeAsync);
    public abstract virtual IObservable`1<TResult> Create(Func`3<IObserver`1<TResult>, CancellationToken, Task`1<Action>> subscribeAsync);
    public abstract virtual IObservable`1<TResult> Create(Func`2<IObserver`1<TResult>, Task`1<Action>> subscribeAsync);
    public abstract virtual IObservable`1<TValue> Defer(Func`1<IObservable`1<TValue>> observableFactory);
    public abstract virtual IObservable`1<TValue> Defer(Func`1<Task`1<IObservable`1<TValue>>> observableFactoryAsync, bool ignoreExceptionsAfterUnsubscribe);
    public abstract virtual IObservable`1<TValue> Defer(Func`2<CancellationToken, Task`1<IObservable`1<TValue>>> observableFactoryAsync, bool ignoreExceptionsAfterUnsubscribe);
    public abstract virtual IObservable`1<TResult> Empty();
    public abstract virtual IObservable`1<TResult> Empty(IScheduler scheduler);
    public abstract virtual IObservable`1<TResult> Generate(TState initialState, Func`2<TState, bool> condition, Func`2<TState, TState> iterate, Func`2<TState, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> Generate(TState initialState, Func`2<TState, bool> condition, Func`2<TState, TState> iterate, Func`2<TState, TResult> resultSelector, IScheduler scheduler);
    public abstract virtual IObservable`1<TResult> Never();
    public abstract virtual IObservable`1<int> Range(int start, int count);
    public abstract virtual IObservable`1<int> Range(int start, int count, IScheduler scheduler);
    public abstract virtual IObservable`1<TResult> Repeat(TResult value);
    public abstract virtual IObservable`1<TResult> Repeat(TResult value, IScheduler scheduler);
    public abstract virtual IObservable`1<TResult> Repeat(TResult value, int repeatCount);
    public abstract virtual IObservable`1<TResult> Repeat(TResult value, int repeatCount, IScheduler scheduler);
    public abstract virtual IObservable`1<TResult> Return(TResult value);
    public abstract virtual IObservable`1<TResult> Return(TResult value, IScheduler scheduler);
    public abstract virtual IObservable`1<TResult> Throw(Exception exception);
    public abstract virtual IObservable`1<TResult> Throw(Exception exception, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> Using(Func`1<TResource> resourceFactory, Func`2<TResource, IObservable`1<TSource>> observableFactory);
    public abstract virtual IObservable`1<TSource> Using(Func`2<CancellationToken, Task`1<TResource>> resourceFactoryAsync, Func`3<TResource, CancellationToken, Task`1<IObservable`1<TSource>>> observableFactoryAsync);
    public abstract virtual IObservable`1<EventPattern`1<object>> FromEventPattern(Action`1<EventHandler> addHandler, Action`1<EventHandler> removeHandler);
    public abstract virtual IObservable`1<EventPattern`1<object>> FromEventPattern(Action`1<EventHandler> addHandler, Action`1<EventHandler> removeHandler, IScheduler scheduler);
    public abstract virtual IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler);
    public abstract virtual IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler, IScheduler scheduler);
    public abstract virtual IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(Func`2<EventHandler`1<TEventArgs>, TDelegate> conversion, Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler);
    public abstract virtual IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(Func`2<EventHandler`1<TEventArgs>, TDelegate> conversion, Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler, IScheduler scheduler);
    public abstract virtual IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(Action`1<EventHandler`1<TEventArgs>> addHandler, Action`1<EventHandler`1<TEventArgs>> removeHandler);
    public abstract virtual IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(Action`1<EventHandler`1<TEventArgs>> addHandler, Action`1<EventHandler`1<TEventArgs>> removeHandler, IScheduler scheduler);
    public abstract virtual IObservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern(Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler);
    public abstract virtual IObservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern(Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public abstract virtual IObservable`1<EventPattern`1<object>> FromEventPattern(object target, string eventName);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public abstract virtual IObservable`1<EventPattern`1<object>> FromEventPattern(object target, string eventName, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public abstract virtual IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(object target, string eventName);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public abstract virtual IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(object target, string eventName, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public abstract virtual IObservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern(object target, string eventName);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public abstract virtual IObservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern(object target, string eventName, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public abstract virtual IObservable`1<EventPattern`1<object>> FromEventPattern(Type type, string eventName);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public abstract virtual IObservable`1<EventPattern`1<object>> FromEventPattern(Type type, string eventName, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public abstract virtual IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(Type type, string eventName);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public abstract virtual IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(Type type, string eventName, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public abstract virtual IObservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern(Type type, string eventName);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public abstract virtual IObservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern(Type type, string eventName, IScheduler scheduler);
    public abstract virtual IObservable`1<TEventArgs> FromEvent(Func`2<Action`1<TEventArgs>, TDelegate> conversion, Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler);
    public abstract virtual IObservable`1<TEventArgs> FromEvent(Func`2<Action`1<TEventArgs>, TDelegate> conversion, Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler, IScheduler scheduler);
    public abstract virtual IObservable`1<TEventArgs> FromEvent(Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler);
    public abstract virtual IObservable`1<TEventArgs> FromEvent(Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler, IScheduler scheduler);
    public abstract virtual IObservable`1<TEventArgs> FromEvent(Action`1<Action`1<TEventArgs>> addHandler, Action`1<Action`1<TEventArgs>> removeHandler);
    public abstract virtual IObservable`1<TEventArgs> FromEvent(Action`1<Action`1<TEventArgs>> addHandler, Action`1<Action`1<TEventArgs>> removeHandler, IScheduler scheduler);
    public abstract virtual IObservable`1<Unit> FromEvent(Action`1<Action> addHandler, Action`1<Action> removeHandler);
    public abstract virtual IObservable`1<Unit> FromEvent(Action`1<Action> addHandler, Action`1<Action> removeHandler, IScheduler scheduler);
    public abstract virtual Task ForEachAsync(IObservable`1<TSource> source, Action`1<TSource> onNext);
    public abstract virtual Task ForEachAsync(IObservable`1<TSource> source, Action`1<TSource> onNext, CancellationToken cancellationToken);
    public abstract virtual Task ForEachAsync(IObservable`1<TSource> source, Action`2<TSource, int> onNext);
    public abstract virtual Task ForEachAsync(IObservable`1<TSource> source, Action`2<TSource, int> onNext, CancellationToken cancellationToken);
    public abstract virtual IObservable`1<TResult> Case(Func`1<TValue> selector, IDictionary`2<TValue, IObservable`1<TResult>> sources, IObservable`1<TResult> defaultSource);
    public abstract virtual IObservable`1<TResult> Case(Func`1<TValue> selector, IDictionary`2<TValue, IObservable`1<TResult>> sources, IScheduler scheduler);
    public abstract virtual IObservable`1<TResult> Case(Func`1<TValue> selector, IDictionary`2<TValue, IObservable`1<TResult>> sources);
    public abstract virtual IObservable`1<TSource> DoWhile(IObservable`1<TSource> source, Func`1<bool> condition);
    public abstract virtual IObservable`1<TResult> For(IEnumerable`1<TSource> source, Func`2<TSource, IObservable`1<TResult>> resultSelector);
    public abstract virtual IObservable`1<TResult> If(Func`1<bool> condition, IObservable`1<TResult> thenSource, IObservable`1<TResult> elseSource);
    public abstract virtual IObservable`1<TResult> If(Func`1<bool> condition, IObservable`1<TResult> thenSource);
    public abstract virtual IObservable`1<TResult> If(Func`1<bool> condition, IObservable`1<TResult> thenSource, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> While(Func`1<bool> condition, IObservable`1<TSource> source);
    public abstract virtual Pattern`2<TLeft, TRight> And(IObservable`1<TLeft> left, IObservable`1<TRight> right);
    public abstract virtual Plan`1<TResult> Then(IObservable`1<TSource> source, Func`2<TSource, TResult> selector);
    public abstract virtual IObservable`1<TResult> When(Plan`1[] plans);
    public abstract virtual IObservable`1<TResult> When(IEnumerable`1<Plan`1<TResult>> plans);
    public abstract virtual IObservable`1<TSource> Amb(IObservable`1<TSource> first, IObservable`1<TSource> second);
    public abstract virtual IObservable`1<TSource> Amb(IObservable`1[] sources);
    public abstract virtual IObservable`1<TSource> Amb(IEnumerable`1<IObservable`1<TSource>> sources);
    public abstract virtual IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, Func`1<IObservable`1<TBufferClosing>> bufferClosingSelector);
    public abstract virtual IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, IObservable`1<TBufferOpening> bufferOpenings, Func`2<TBufferOpening, IObservable`1<TBufferClosing>> bufferClosingSelector);
    public abstract virtual IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, IObservable`1<TBufferBoundary> bufferBoundaries);
    public abstract virtual IObservable`1<TSource> Catch(IObservable`1<TSource> source, Func`2<TException, IObservable`1<TSource>> handler);
    public abstract virtual IObservable`1<TSource> Catch(IObservable`1<TSource> first, IObservable`1<TSource> second);
    public abstract virtual IObservable`1<TSource> Catch(IObservable`1[] sources);
    public abstract virtual IObservable`1<TSource> Catch(IEnumerable`1<IObservable`1<TSource>> sources);
    public abstract virtual IObservable`1<TResult> CombineLatest(IEnumerable`1<IObservable`1<TSource>> sources, Func`2<IList`1<TSource>, TResult> resultSelector);
    public abstract virtual IObservable`1<IList`1<TSource>> CombineLatest(IEnumerable`1<IObservable`1<TSource>> sources);
    public abstract virtual IObservable`1<IList`1<TSource>> CombineLatest(IObservable`1[] sources);
    public abstract virtual IObservable`1<TSource> Concat(IObservable`1<TSource> first, IObservable`1<TSource> second);
    public abstract virtual IObservable`1<TSource> Concat(IObservable`1[] sources);
    public abstract virtual IObservable`1<TSource> Concat(IEnumerable`1<IObservable`1<TSource>> sources);
    public abstract virtual IObservable`1<TSource> Concat(IObservable`1<IObservable`1<TSource>> sources);
    public abstract virtual IObservable`1<TSource> Merge(IObservable`1<IObservable`1<TSource>> sources);
    public abstract virtual IObservable`1<TSource> Merge(IObservable`1<IObservable`1<TSource>> sources, int maxConcurrent);
    public abstract virtual IObservable`1<TSource> Merge(IEnumerable`1<IObservable`1<TSource>> sources, int maxConcurrent);
    public abstract virtual IObservable`1<TSource> Merge(IEnumerable`1<IObservable`1<TSource>> sources, int maxConcurrent, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> Merge(IObservable`1<TSource> first, IObservable`1<TSource> second);
    public abstract virtual IObservable`1<TSource> Merge(IObservable`1<TSource> first, IObservable`1<TSource> second, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> Merge(IObservable`1[] sources);
    public abstract virtual IObservable`1<TSource> Merge(IScheduler scheduler, IObservable`1[] sources);
    public abstract virtual IObservable`1<TSource> Merge(IEnumerable`1<IObservable`1<TSource>> sources);
    public abstract virtual IObservable`1<TSource> Merge(IEnumerable`1<IObservable`1<TSource>> sources, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> OnErrorResumeNext(IObservable`1<TSource> first, IObservable`1<TSource> second);
    public abstract virtual IObservable`1<TSource> OnErrorResumeNext(IObservable`1[] sources);
    public abstract virtual IObservable`1<TSource> OnErrorResumeNext(IEnumerable`1<IObservable`1<TSource>> sources);
    public abstract virtual IObservable`1<TSource> SkipUntil(IObservable`1<TSource> source, IObservable`1<TOther> other);
    public abstract virtual IObservable`1<TSource> Switch(IObservable`1<IObservable`1<TSource>> sources);
    public abstract virtual IObservable`1<TSource> TakeUntil(IObservable`1<TSource> source, IObservable`1<TOther> other);
    public abstract virtual IObservable`1<TSource> TakeUntil(IObservable`1<TSource> source, Func`2<TSource, bool> stopPredicate);
    public abstract virtual IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, Func`1<IObservable`1<TWindowClosing>> windowClosingSelector);
    public abstract virtual IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, IObservable`1<TWindowOpening> windowOpenings, Func`2<TWindowOpening, IObservable`1<TWindowClosing>> windowClosingSelector);
    public abstract virtual IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, IObservable`1<TWindowBoundary> windowBoundaries);
    public abstract virtual IObservable`1<TResult> WithLatestFrom(IObservable`1<TFirst> first, IObservable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> Zip(IEnumerable`1<IObservable`1<TSource>> sources, Func`2<IList`1<TSource>, TResult> resultSelector);
    public abstract virtual IObservable`1<IList`1<TSource>> Zip(IEnumerable`1<IObservable`1<TSource>> sources);
    public abstract virtual IObservable`1<IList`1<TSource>> Zip(IObservable`1[] sources);
    public abstract virtual IObservable`1<TResult> Zip(IObservable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector);
    public abstract virtual IObservable`1<TSource> Concat(IObservable`1<Task`1<TSource>> sources);
    public abstract virtual IObservable`1<TSource> Merge(IObservable`1<Task`1<TSource>> sources);
    public abstract virtual IObservable`1<TSource> Switch(IObservable`1<Task`1<TSource>> sources);
    public abstract virtual IObservable`1<TSource> Append(IObservable`1<TSource> source, TSource value);
    public abstract virtual IObservable`1<TSource> Append(IObservable`1<TSource> source, TSource value, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> AsObservable(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, int count);
    public abstract virtual IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, int count, int skip);
    public abstract virtual IObservable`1<TSource> Dematerialize(IObservable`1<Notification`1<TSource>> source);
    public abstract virtual IObservable`1<TSource> DistinctUntilChanged(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<TSource> DistinctUntilChanged(IObservable`1<TSource> source, IEqualityComparer`1<TSource> comparer);
    public abstract virtual IObservable`1<TSource> DistinctUntilChanged(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    public abstract virtual IObservable`1<TSource> DistinctUntilChanged(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    public abstract virtual IObservable`1<TSource> Do(IObservable`1<TSource> source, Action`1<TSource> onNext);
    public abstract virtual IObservable`1<TSource> Do(IObservable`1<TSource> source, Action`1<TSource> onNext, Action onCompleted);
    public abstract virtual IObservable`1<TSource> Do(IObservable`1<TSource> source, Action`1<TSource> onNext, Action`1<Exception> onError);
    public abstract virtual IObservable`1<TSource> Do(IObservable`1<TSource> source, Action`1<TSource> onNext, Action`1<Exception> onError, Action onCompleted);
    public abstract virtual IObservable`1<TSource> Do(IObservable`1<TSource> source, IObserver`1<TSource> observer);
    public abstract virtual IObservable`1<TSource> Finally(IObservable`1<TSource> source, Action finallyAction);
    public abstract virtual IObservable`1<TSource> IgnoreElements(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<Notification`1<TSource>> Materialize(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<TSource> Prepend(IObservable`1<TSource> source, TSource value);
    public abstract virtual IObservable`1<TSource> Prepend(IObservable`1<TSource> source, TSource value, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> Repeat(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<TSource> Repeat(IObservable`1<TSource> source, int repeatCount);
    public abstract virtual IObservable`1<TSource> RepeatWhen(IObservable`1<TSource> source, Func`2<IObservable`1<object>, IObservable`1<TSignal>> handler);
    public abstract virtual IObservable`1<TSource> Retry(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<TSource> Retry(IObservable`1<TSource> source, int retryCount);
    public abstract virtual IObservable`1<TSource> RetryWhen(IObservable`1<TSource> source, Func`2<IObservable`1<Exception>, IObservable`1<TSignal>> handler);
    public abstract virtual IObservable`1<TAccumulate> Scan(IObservable`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> accumulator);
    public abstract virtual IObservable`1<TSource> Scan(IObservable`1<TSource> source, Func`3<TSource, TSource, TSource> accumulator);
    public abstract virtual IObservable`1<TSource> SkipLast(IObservable`1<TSource> source, int count);
    public abstract virtual IObservable`1<TSource> StartWith(IObservable`1<TSource> source, TSource[] values);
    public abstract virtual IObservable`1<TSource> StartWith(IObservable`1<TSource> source, IScheduler scheduler, TSource[] values);
    public abstract virtual IObservable`1<TSource> StartWith(IObservable`1<TSource> source, IEnumerable`1<TSource> values);
    public abstract virtual IObservable`1<TSource> StartWith(IObservable`1<TSource> source, IScheduler scheduler, IEnumerable`1<TSource> values);
    public abstract virtual IObservable`1<TSource> TakeLast(IObservable`1<TSource> source, int count);
    public abstract virtual IObservable`1<TSource> TakeLast(IObservable`1<TSource> source, int count, IScheduler scheduler);
    public abstract virtual IObservable`1<IList`1<TSource>> TakeLastBuffer(IObservable`1<TSource> source, int count);
    public abstract virtual IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, int count, int skip);
    public abstract virtual IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, int count);
    public abstract virtual IObservable`1<TResult> Cast(IObservable`1<object> source);
    public abstract virtual IObservable`1<TSource> DefaultIfEmpty(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<TSource> DefaultIfEmpty(IObservable`1<TSource> source, TSource defaultValue);
    public abstract virtual IObservable`1<TSource> Distinct(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<TSource> Distinct(IObservable`1<TSource> source, IEqualityComparer`1<TSource> comparer);
    public abstract virtual IObservable`1<TSource> Distinct(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    public abstract virtual IObservable`1<TSource> Distinct(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    public abstract virtual IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    public abstract virtual IObservable`1<IGroupedObservable`2<TKey, TSource>> GroupBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    public abstract virtual IObservable`1<IGroupedObservable`2<TKey, TSource>> GroupBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    public abstract virtual IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    public abstract virtual IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, int capacity);
    public abstract virtual IObservable`1<IGroupedObservable`2<TKey, TSource>> GroupBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, int capacity, IEqualityComparer`1<TKey> comparer);
    public abstract virtual IObservable`1<IGroupedObservable`2<TKey, TSource>> GroupBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, int capacity);
    public abstract virtual IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, int capacity, IEqualityComparer`1<TKey> comparer);
    public abstract virtual IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupByUntil(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`2<IGroupedObservable`2<TKey, TElement>, IObservable`1<TDuration>> durationSelector, IEqualityComparer`1<TKey> comparer);
    public abstract virtual IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupByUntil(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`2<IGroupedObservable`2<TKey, TElement>, IObservable`1<TDuration>> durationSelector);
    public abstract virtual IObservable`1<IGroupedObservable`2<TKey, TSource>> GroupByUntil(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<IGroupedObservable`2<TKey, TSource>, IObservable`1<TDuration>> durationSelector, IEqualityComparer`1<TKey> comparer);
    public abstract virtual IObservable`1<IGroupedObservable`2<TKey, TSource>> GroupByUntil(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<IGroupedObservable`2<TKey, TSource>, IObservable`1<TDuration>> durationSelector);
    public abstract virtual IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupByUntil(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`2<IGroupedObservable`2<TKey, TElement>, IObservable`1<TDuration>> durationSelector, int capacity, IEqualityComparer`1<TKey> comparer);
    public abstract virtual IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupByUntil(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`2<IGroupedObservable`2<TKey, TElement>, IObservable`1<TDuration>> durationSelector, int capacity);
    public abstract virtual IObservable`1<IGroupedObservable`2<TKey, TSource>> GroupByUntil(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<IGroupedObservable`2<TKey, TSource>, IObservable`1<TDuration>> durationSelector, int capacity, IEqualityComparer`1<TKey> comparer);
    public abstract virtual IObservable`1<IGroupedObservable`2<TKey, TSource>> GroupByUntil(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<IGroupedObservable`2<TKey, TSource>, IObservable`1<TDuration>> durationSelector, int capacity);
    public abstract virtual IObservable`1<TResult> GroupJoin(IObservable`1<TLeft> left, IObservable`1<TRight> right, Func`2<TLeft, IObservable`1<TLeftDuration>> leftDurationSelector, Func`2<TRight, IObservable`1<TRightDuration>> rightDurationSelector, Func`3<TLeft, IObservable`1<TRight>, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> Join(IObservable`1<TLeft> left, IObservable`1<TRight> right, Func`2<TLeft, IObservable`1<TLeftDuration>> leftDurationSelector, Func`2<TRight, IObservable`1<TRightDuration>> rightDurationSelector, Func`3<TLeft, TRight, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> OfType(IObservable`1<object> source);
    public abstract virtual IObservable`1<TResult> Select(IObservable`1<TSource> source, Func`2<TSource, TResult> selector);
    public abstract virtual IObservable`1<TResult> Select(IObservable`1<TSource> source, Func`3<TSource, int, TResult> selector);
    public abstract virtual IObservable`1<TOther> SelectMany(IObservable`1<TSource> source, IObservable`1<TOther> other);
    public abstract virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TResult>> selector);
    public abstract virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, int, IObservable`1<TResult>> selector);
    public abstract virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, int, IObservable`1<TCollection>> collectionSelector, Func`5<TSource, int, TCollection, int, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TResult>> onNext, Func`2<Exception, IObservable`1<TResult>> onError, Func`1<IObservable`1<TResult>> onCompleted);
    public abstract virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, int, IObservable`1<TResult>> onNext, Func`2<Exception, IObservable`1<TResult>> onError, Func`1<IObservable`1<TResult>> onCompleted);
    public abstract virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`2<TSource, IEnumerable`1<TResult>> selector);
    public abstract virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, int, IEnumerable`1<TResult>> selector);
    public abstract virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`2<TSource, IEnumerable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, int, IEnumerable`1<TCollection>> collectionSelector, Func`5<TSource, int, TCollection, int, TResult> resultSelector);
    public abstract virtual IObservable`1<TSource> Skip(IObservable`1<TSource> source, int count);
    public abstract virtual IObservable`1<TSource> SkipWhile(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public abstract virtual IObservable`1<TSource> SkipWhile(IObservable`1<TSource> source, Func`3<TSource, int, bool> predicate);
    public abstract virtual IObservable`1<TSource> Take(IObservable`1<TSource> source, int count);
    public abstract virtual IObservable`1<TSource> Take(IObservable`1<TSource> source, int count, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> TakeWhile(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public abstract virtual IObservable`1<TSource> TakeWhile(IObservable`1<TSource> source, Func`3<TSource, int, bool> predicate);
    public abstract virtual IObservable`1<TSource> Where(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public abstract virtual IObservable`1<TSource> Where(IObservable`1<TSource> source, Func`3<TSource, int, bool> predicate);
    public abstract virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`2<TSource, Task`1<TResult>> selector);
    public abstract virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, int, Task`1<TResult>> selector);
    public abstract virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, CancellationToken, Task`1<TResult>> selector);
    public abstract virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`4<TSource, int, CancellationToken, Task`1<TResult>> selector);
    public abstract virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`2<TSource, Task`1<TTaskResult>> taskSelector, Func`3<TSource, TTaskResult, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, int, Task`1<TTaskResult>> taskSelector, Func`4<TSource, int, TTaskResult, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, CancellationToken, Task`1<TTaskResult>> taskSelector, Func`3<TSource, TTaskResult, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`4<TSource, int, CancellationToken, Task`1<TTaskResult>> taskSelector, Func`4<TSource, int, TTaskResult, TResult> resultSelector);
    public abstract virtual IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, TimeSpan timeSpan);
    public abstract virtual IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, TimeSpan timeSpan, IScheduler scheduler);
    public abstract virtual IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, TimeSpan timeSpan, TimeSpan timeShift);
    public abstract virtual IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, TimeSpan timeSpan, TimeSpan timeShift, IScheduler scheduler);
    public abstract virtual IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, TimeSpan timeSpan, int count);
    public abstract virtual IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, TimeSpan timeSpan, int count, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> Delay(IObservable`1<TSource> source, TimeSpan dueTime);
    public abstract virtual IObservable`1<TSource> Delay(IObservable`1<TSource> source, TimeSpan dueTime, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> Delay(IObservable`1<TSource> source, DateTimeOffset dueTime);
    public abstract virtual IObservable`1<TSource> Delay(IObservable`1<TSource> source, DateTimeOffset dueTime, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> Delay(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TDelay>> delayDurationSelector);
    public abstract virtual IObservable`1<TSource> Delay(IObservable`1<TSource> source, IObservable`1<TDelay> subscriptionDelay, Func`2<TSource, IObservable`1<TDelay>> delayDurationSelector);
    public abstract virtual IObservable`1<TSource> DelaySubscription(IObservable`1<TSource> source, TimeSpan dueTime);
    public abstract virtual IObservable`1<TSource> DelaySubscription(IObservable`1<TSource> source, TimeSpan dueTime, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> DelaySubscription(IObservable`1<TSource> source, DateTimeOffset dueTime);
    public abstract virtual IObservable`1<TSource> DelaySubscription(IObservable`1<TSource> source, DateTimeOffset dueTime, IScheduler scheduler);
    public abstract virtual IObservable`1<TResult> Generate(TState initialState, Func`2<TState, bool> condition, Func`2<TState, TState> iterate, Func`2<TState, TResult> resultSelector, Func`2<TState, TimeSpan> timeSelector);
    public abstract virtual IObservable`1<TResult> Generate(TState initialState, Func`2<TState, bool> condition, Func`2<TState, TState> iterate, Func`2<TState, TResult> resultSelector, Func`2<TState, TimeSpan> timeSelector, IScheduler scheduler);
    public abstract virtual IObservable`1<TResult> Generate(TState initialState, Func`2<TState, bool> condition, Func`2<TState, TState> iterate, Func`2<TState, TResult> resultSelector, Func`2<TState, DateTimeOffset> timeSelector);
    public abstract virtual IObservable`1<TResult> Generate(TState initialState, Func`2<TState, bool> condition, Func`2<TState, TState> iterate, Func`2<TState, TResult> resultSelector, Func`2<TState, DateTimeOffset> timeSelector, IScheduler scheduler);
    public abstract virtual IObservable`1<long> Interval(TimeSpan period);
    public abstract virtual IObservable`1<long> Interval(TimeSpan period, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> Sample(IObservable`1<TSource> source, TimeSpan interval);
    public abstract virtual IObservable`1<TSource> Sample(IObservable`1<TSource> source, TimeSpan interval, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> Sample(IObservable`1<TSource> source, IObservable`1<TSample> sampler);
    public abstract virtual IObservable`1<TSource> Skip(IObservable`1<TSource> source, TimeSpan duration);
    public abstract virtual IObservable`1<TSource> Skip(IObservable`1<TSource> source, TimeSpan duration, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> SkipLast(IObservable`1<TSource> source, TimeSpan duration);
    public abstract virtual IObservable`1<TSource> SkipLast(IObservable`1<TSource> source, TimeSpan duration, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> SkipUntil(IObservable`1<TSource> source, DateTimeOffset startTime);
    public abstract virtual IObservable`1<TSource> SkipUntil(IObservable`1<TSource> source, DateTimeOffset startTime, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> Take(IObservable`1<TSource> source, TimeSpan duration);
    public abstract virtual IObservable`1<TSource> Take(IObservable`1<TSource> source, TimeSpan duration, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> TakeLast(IObservable`1<TSource> source, TimeSpan duration);
    public abstract virtual IObservable`1<TSource> TakeLast(IObservable`1<TSource> source, TimeSpan duration, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> TakeLast(IObservable`1<TSource> source, TimeSpan duration, IScheduler timerScheduler, IScheduler loopScheduler);
    public abstract virtual IObservable`1<IList`1<TSource>> TakeLastBuffer(IObservable`1<TSource> source, TimeSpan duration);
    public abstract virtual IObservable`1<IList`1<TSource>> TakeLastBuffer(IObservable`1<TSource> source, TimeSpan duration, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> TakeUntil(IObservable`1<TSource> source, DateTimeOffset endTime);
    public abstract virtual IObservable`1<TSource> TakeUntil(IObservable`1<TSource> source, DateTimeOffset endTime, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> Throttle(IObservable`1<TSource> source, TimeSpan dueTime);
    public abstract virtual IObservable`1<TSource> Throttle(IObservable`1<TSource> source, TimeSpan dueTime, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> Throttle(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TThrottle>> throttleDurationSelector);
    public abstract virtual IObservable`1<TimeInterval`1<TSource>> TimeInterval(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<TimeInterval`1<TSource>> TimeInterval(IObservable`1<TSource> source, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> Timeout(IObservable`1<TSource> source, TimeSpan dueTime);
    public abstract virtual IObservable`1<TSource> Timeout(IObservable`1<TSource> source, TimeSpan dueTime, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> Timeout(IObservable`1<TSource> source, TimeSpan dueTime, IObservable`1<TSource> other);
    public abstract virtual IObservable`1<TSource> Timeout(IObservable`1<TSource> source, TimeSpan dueTime, IObservable`1<TSource> other, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> Timeout(IObservable`1<TSource> source, DateTimeOffset dueTime);
    public abstract virtual IObservable`1<TSource> Timeout(IObservable`1<TSource> source, DateTimeOffset dueTime, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> Timeout(IObservable`1<TSource> source, DateTimeOffset dueTime, IObservable`1<TSource> other);
    public abstract virtual IObservable`1<TSource> Timeout(IObservable`1<TSource> source, DateTimeOffset dueTime, IObservable`1<TSource> other, IScheduler scheduler);
    public abstract virtual IObservable`1<TSource> Timeout(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TTimeout>> timeoutDurationSelector);
    public abstract virtual IObservable`1<TSource> Timeout(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TTimeout>> timeoutDurationSelector, IObservable`1<TSource> other);
    public abstract virtual IObservable`1<TSource> Timeout(IObservable`1<TSource> source, IObservable`1<TTimeout> firstTimeout, Func`2<TSource, IObservable`1<TTimeout>> timeoutDurationSelector);
    public abstract virtual IObservable`1<TSource> Timeout(IObservable`1<TSource> source, IObservable`1<TTimeout> firstTimeout, Func`2<TSource, IObservable`1<TTimeout>> timeoutDurationSelector, IObservable`1<TSource> other);
    public abstract virtual IObservable`1<long> Timer(TimeSpan dueTime);
    public abstract virtual IObservable`1<long> Timer(DateTimeOffset dueTime);
    public abstract virtual IObservable`1<long> Timer(TimeSpan dueTime, TimeSpan period);
    public abstract virtual IObservable`1<long> Timer(DateTimeOffset dueTime, TimeSpan period);
    public abstract virtual IObservable`1<long> Timer(TimeSpan dueTime, IScheduler scheduler);
    public abstract virtual IObservable`1<long> Timer(DateTimeOffset dueTime, IScheduler scheduler);
    public abstract virtual IObservable`1<long> Timer(TimeSpan dueTime, TimeSpan period, IScheduler scheduler);
    public abstract virtual IObservable`1<long> Timer(DateTimeOffset dueTime, TimeSpan period, IScheduler scheduler);
    public abstract virtual IObservable`1<Timestamped`1<TSource>> Timestamp(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<Timestamped`1<TSource>> Timestamp(IObservable`1<TSource> source, IScheduler scheduler);
    public abstract virtual IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, TimeSpan timeSpan);
    public abstract virtual IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, TimeSpan timeSpan, IScheduler scheduler);
    public abstract virtual IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, TimeSpan timeSpan, TimeSpan timeShift);
    public abstract virtual IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, TimeSpan timeSpan, TimeSpan timeShift, IScheduler scheduler);
    public abstract virtual IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, TimeSpan timeSpan, int count);
    public abstract virtual IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, TimeSpan timeSpan, int count, IScheduler scheduler);
    public abstract virtual IObservable`1<TResult> CombineLatest(IObservable`1<T1> source1, IObservable`1<T2> source2, Func`3<T1, T2, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> CombineLatest(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, Func`4<T1, T2, T3, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> CombineLatest(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, Func`5<T1, T2, T3, T4, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> CombineLatest(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, Func`6<T1, T2, T3, T4, T5, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> CombineLatest(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, Func`7<T1, T2, T3, T4, T5, T6, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> CombineLatest(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, Func`8<T1, T2, T3, T4, T5, T6, T7, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> CombineLatest(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> CombineLatest(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> CombineLatest(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> CombineLatest(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, IObservable`1<T11> source11, Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> CombineLatest(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, IObservable`1<T11> source11, IObservable`1<T12> source12, Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> CombineLatest(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, IObservable`1<T11> source11, IObservable`1<T12> source12, IObservable`1<T13> source13, Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> CombineLatest(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, IObservable`1<T11> source11, IObservable`1<T12> source12, IObservable`1<T13> source13, IObservable`1<T14> source14, Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> CombineLatest(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, IObservable`1<T11> source11, IObservable`1<T12> source12, IObservable`1<T13> source13, IObservable`1<T14> source14, IObservable`1<T15> source15, Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> CombineLatest(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, IObservable`1<T11> source11, IObservable`1<T12> source12, IObservable`1<T13> source13, IObservable`1<T14> source14, IObservable`1<T15> source15, IObservable`1<T16> source16, Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> Zip(IObservable`1<T1> source1, IObservable`1<T2> source2, Func`3<T1, T2, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> Zip(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, Func`4<T1, T2, T3, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> Zip(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, Func`5<T1, T2, T3, T4, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> Zip(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, Func`6<T1, T2, T3, T4, T5, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> Zip(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, Func`7<T1, T2, T3, T4, T5, T6, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> Zip(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, Func`8<T1, T2, T3, T4, T5, T6, T7, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> Zip(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> Zip(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> Zip(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> Zip(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, IObservable`1<T11> source11, Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> Zip(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, IObservable`1<T11> source11, IObservable`1<T12> source12, Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> Zip(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, IObservable`1<T11> source11, IObservable`1<T12> source12, IObservable`1<T13> source13, Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> Zip(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, IObservable`1<T11> source11, IObservable`1<T12> source12, IObservable`1<T13> source13, IObservable`1<T14> source14, Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> Zip(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, IObservable`1<T11> source11, IObservable`1<T12> source12, IObservable`1<T13> source13, IObservable`1<T14> source14, IObservable`1<T15> source15, Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> resultSelector);
    public abstract virtual IObservable`1<TResult> Zip(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, IObservable`1<T11> source11, IObservable`1<T12> source12, IObservable`1<T13> source13, IObservable`1<T14> source14, IObservable`1<T15> source15, IObservable`1<T16> source16, Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> resultSelector);
}
[NullableContextAttribute("1")]
internal interface System.Reactive.Linq.IQueryLanguageEx {
    public abstract virtual IObservable`1<ValueTuple`2<T1, T2>> CombineLatest(IObservable`1<T1> source1, IObservable`1<T2> source2);
    public abstract virtual IObservable`1<ValueTuple`3<T1, T2, T3>> CombineLatest(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3);
    public abstract virtual IObservable`1<ValueTuple`4<T1, T2, T3, T4>> CombineLatest(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4);
    public abstract virtual IObservable`1<ValueTuple`5<T1, T2, T3, T4, T5>> CombineLatest(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5);
    public abstract virtual IObservable`1<ValueTuple`6<T1, T2, T3, T4, T5, T6>> CombineLatest(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6);
    public abstract virtual IObservable`1<ValueTuple`7<T1, T2, T3, T4, T5, T6, T7>> CombineLatest(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7);
    public abstract virtual IObservable`1<ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, ValueTuple`1<T8>>> CombineLatest(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8);
    public abstract virtual IObservable`1<ValueTuple`2<T1, T2>> Zip(IObservable`1<T1> source1, IObservable`1<T2> source2);
    public abstract virtual IObservable`1<ValueTuple`3<T1, T2, T3>> Zip(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3);
    public abstract virtual IObservable`1<ValueTuple`4<T1, T2, T3, T4>> Zip(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4);
    public abstract virtual IObservable`1<ValueTuple`5<T1, T2, T3, T4, T5>> Zip(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5);
    public abstract virtual IObservable`1<ValueTuple`6<T1, T2, T3, T4, T5, T6>> Zip(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6);
    public abstract virtual IObservable`1<ValueTuple`7<T1, T2, T3, T4, T5, T6, T7>> Zip(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7);
    public abstract virtual IObservable`1<ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, ValueTuple`1<T8>>> Zip(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8);
    public abstract virtual IObservable`1<TResult> Create(Func`2<IObserver`1<TResult>, IEnumerable`1<IObservable`1<object>>> iteratorMethod);
    public abstract virtual IObservable`1<Unit> Create(Func`1<IEnumerable`1<IObservable`1<object>>> iteratorMethod);
    public abstract virtual IObservable`1<TSource> Expand(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TSource>> selector);
    public abstract virtual IObservable`1<TSource> Expand(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TSource>> selector, IScheduler scheduler);
    public abstract virtual IObservable`1<TResult> ForkJoin(IObservable`1<TFirst> first, IObservable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector);
    public abstract virtual IObservable`1<TSource[]> ForkJoin(IObservable`1[] sources);
    public abstract virtual IObservable`1<TSource[]> ForkJoin(IEnumerable`1<IObservable`1<TSource>> sources);
    public abstract virtual IObservable`1<TResult> Let(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> function);
    public abstract virtual IObservable`1<TResult> ManySelect(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, TResult> selector);
    public abstract virtual IObservable`1<TResult> ManySelect(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, TResult> selector, IScheduler scheduler);
    public abstract virtual ListObservable`1<TSource> ToListObservable(IObservable`1<TSource> source);
    public abstract virtual IObservable`1<ValueTuple`2<TFirst, TSecond>> WithLatestFrom(IObservable`1<TFirst> first, IObservable`1<TSecond> second);
    public abstract virtual IObservable`1<ValueTuple`2<TFirst, TSecond>> Zip(IObservable`1<TFirst> first, IEnumerable`1<TSecond> second);
}
[NullableContextAttribute("1")]
internal interface System.Reactive.Linq.IQueryServices {
    public abstract virtual T Extend(T baseImpl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
[AttributeUsageAttribute("4")]
public class System.Reactive.Linq.LocalQueryMethodImplementationTypeAttribute : Attribute {
    private Type _targetType;
    public Type TargetType { get; }
    public LocalQueryMethodImplementationTypeAttribute(Type targetType);
    public Type get_TargetType();
}
[CompilerGeneratedAttribute]
internal class System.Reactive.Linq.NamespaceDoc : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Reactive.Linq.Observable : object {
    private static IQueryLanguage s_impl;
    private static Observable();
    [ExtensionAttribute]
public static IObservable`1<TAccumulate> Aggregate(IObservable`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> accumulator);
    [ExtensionAttribute]
public static IObservable`1<TResult> Aggregate(IObservable`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> accumulator, Func`2<TAccumulate, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TSource> Aggregate(IObservable`1<TSource> source, Func`3<TSource, TSource, TSource> accumulator);
    [ExtensionAttribute]
public static IObservable`1<bool> All(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IObservable`1<bool> Any(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<bool> Any(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IObservable`1<double> Average(IObservable`1<double> source);
    [ExtensionAttribute]
public static IObservable`1<float> Average(IObservable`1<float> source);
    [ExtensionAttribute]
public static IObservable`1<decimal> Average(IObservable`1<decimal> source);
    [ExtensionAttribute]
public static IObservable`1<double> Average(IObservable`1<int> source);
    [ExtensionAttribute]
public static IObservable`1<double> Average(IObservable`1<long> source);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<double>> Average(IObservable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<float>> Average(IObservable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<decimal>> Average(IObservable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<double>> Average(IObservable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<double>> Average(IObservable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static IObservable`1<decimal> Average(IObservable`1<TSource> source, Func`2<TSource, decimal> selector);
    [ExtensionAttribute]
public static IObservable`1<double> Average(IObservable`1<TSource> source, Func`2<TSource, double> selector);
    [ExtensionAttribute]
public static IObservable`1<float> Average(IObservable`1<TSource> source, Func`2<TSource, float> selector);
    [ExtensionAttribute]
public static IObservable`1<double> Average(IObservable`1<TSource> source, Func`2<TSource, int> selector);
    [ExtensionAttribute]
public static IObservable`1<double> Average(IObservable`1<TSource> source, Func`2<TSource, long> selector);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<decimal>> Average(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<double>> Average(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<float>> Average(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<double>> Average(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<double>> Average(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector);
    [ExtensionAttribute]
public static IObservable`1<bool> Contains(IObservable`1<TSource> source, TSource value);
    [ExtensionAttribute]
public static IObservable`1<bool> Contains(IObservable`1<TSource> source, TSource value, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IObservable`1<int> Count(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<int> Count(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IObservable`1<TSource> ElementAt(IObservable`1<TSource> source, int index);
    [ExtensionAttribute]
public static IObservable`1<TSource> ElementAtOrDefault(IObservable`1<TSource> source, int index);
    [ExtensionAttribute]
public static IObservable`1<TSource> FirstAsync(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<TSource> FirstAsync(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IObservable`1<TSource> FirstOrDefaultAsync(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<TSource> FirstOrDefaultAsync(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IObservable`1<bool> IsEmpty(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<TSource> LastAsync(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<TSource> LastAsync(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IObservable`1<TSource> LastOrDefaultAsync(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<TSource> LastOrDefaultAsync(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IObservable`1<long> LongCount(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<long> LongCount(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IObservable`1<TSource> Max(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<TSource> Max(IObservable`1<TSource> source, IComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IObservable`1<double> Max(IObservable`1<double> source);
    [ExtensionAttribute]
public static IObservable`1<float> Max(IObservable`1<float> source);
    [ExtensionAttribute]
public static IObservable`1<decimal> Max(IObservable`1<decimal> source);
    [ExtensionAttribute]
public static IObservable`1<int> Max(IObservable`1<int> source);
    [ExtensionAttribute]
public static IObservable`1<long> Max(IObservable`1<long> source);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<double>> Max(IObservable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<float>> Max(IObservable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<decimal>> Max(IObservable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<int>> Max(IObservable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<long>> Max(IObservable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static IObservable`1<TResult> Max(IObservable`1<TSource> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
public static IObservable`1<TResult> Max(IObservable`1<TSource> source, Func`2<TSource, TResult> selector, IComparer`1<TResult> comparer);
    [ExtensionAttribute]
public static IObservable`1<double> Max(IObservable`1<TSource> source, Func`2<TSource, double> selector);
    [ExtensionAttribute]
public static IObservable`1<float> Max(IObservable`1<TSource> source, Func`2<TSource, float> selector);
    [ExtensionAttribute]
public static IObservable`1<decimal> Max(IObservable`1<TSource> source, Func`2<TSource, decimal> selector);
    [ExtensionAttribute]
public static IObservable`1<int> Max(IObservable`1<TSource> source, Func`2<TSource, int> selector);
    [ExtensionAttribute]
public static IObservable`1<long> Max(IObservable`1<TSource> source, Func`2<TSource, long> selector);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<double>> Max(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<float>> Max(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<decimal>> Max(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<int>> Max(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<long>> Max(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector);
    [ExtensionAttribute]
public static IObservable`1<IList`1<TSource>> MaxBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IObservable`1<IList`1<TSource>> MaxBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IObservable`1<TSource> Min(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<TSource> Min(IObservable`1<TSource> source, IComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IObservable`1<double> Min(IObservable`1<double> source);
    [ExtensionAttribute]
public static IObservable`1<float> Min(IObservable`1<float> source);
    [ExtensionAttribute]
public static IObservable`1<decimal> Min(IObservable`1<decimal> source);
    [ExtensionAttribute]
public static IObservable`1<int> Min(IObservable`1<int> source);
    [ExtensionAttribute]
public static IObservable`1<long> Min(IObservable`1<long> source);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<double>> Min(IObservable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<float>> Min(IObservable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<decimal>> Min(IObservable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<int>> Min(IObservable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<long>> Min(IObservable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static IObservable`1<TResult> Min(IObservable`1<TSource> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
public static IObservable`1<TResult> Min(IObservable`1<TSource> source, Func`2<TSource, TResult> selector, IComparer`1<TResult> comparer);
    [ExtensionAttribute]
public static IObservable`1<double> Min(IObservable`1<TSource> source, Func`2<TSource, double> selector);
    [ExtensionAttribute]
public static IObservable`1<float> Min(IObservable`1<TSource> source, Func`2<TSource, float> selector);
    [ExtensionAttribute]
public static IObservable`1<decimal> Min(IObservable`1<TSource> source, Func`2<TSource, decimal> selector);
    [ExtensionAttribute]
public static IObservable`1<int> Min(IObservable`1<TSource> source, Func`2<TSource, int> selector);
    [ExtensionAttribute]
public static IObservable`1<long> Min(IObservable`1<TSource> source, Func`2<TSource, long> selector);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<double>> Min(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<float>> Min(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<decimal>> Min(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<int>> Min(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<long>> Min(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector);
    [ExtensionAttribute]
public static IObservable`1<IList`1<TSource>> MinBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IObservable`1<IList`1<TSource>> MinBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IObservable`1<bool> SequenceEqual(IObservable`1<TSource> first, IObservable`1<TSource> second);
    [ExtensionAttribute]
public static IObservable`1<bool> SequenceEqual(IObservable`1<TSource> first, IObservable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IObservable`1<bool> SequenceEqual(IObservable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static IObservable`1<bool> SequenceEqual(IObservable`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IObservable`1<TSource> SingleAsync(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<TSource> SingleAsync(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IObservable`1<TSource> SingleOrDefaultAsync(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<TSource> SingleOrDefaultAsync(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IObservable`1<double> Sum(IObservable`1<double> source);
    [ExtensionAttribute]
public static IObservable`1<float> Sum(IObservable`1<float> source);
    [ExtensionAttribute]
public static IObservable`1<decimal> Sum(IObservable`1<decimal> source);
    [ExtensionAttribute]
public static IObservable`1<int> Sum(IObservable`1<int> source);
    [ExtensionAttribute]
public static IObservable`1<long> Sum(IObservable`1<long> source);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<double>> Sum(IObservable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<float>> Sum(IObservable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<decimal>> Sum(IObservable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<int>> Sum(IObservable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<long>> Sum(IObservable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static IObservable`1<double> Sum(IObservable`1<TSource> source, Func`2<TSource, double> selector);
    [ExtensionAttribute]
public static IObservable`1<float> Sum(IObservable`1<TSource> source, Func`2<TSource, float> selector);
    [ExtensionAttribute]
public static IObservable`1<decimal> Sum(IObservable`1<TSource> source, Func`2<TSource, decimal> selector);
    [ExtensionAttribute]
public static IObservable`1<int> Sum(IObservable`1<TSource> source, Func`2<TSource, int> selector);
    [ExtensionAttribute]
public static IObservable`1<long> Sum(IObservable`1<TSource> source, Func`2<TSource, long> selector);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<double>> Sum(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<float>> Sum(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<decimal>> Sum(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<int>> Sum(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<long>> Sum(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector);
    [ExtensionAttribute]
public static IObservable`1<TSource[]> ToArray(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<IDictionary`2<TKey, TSource>> ToDictionary(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IObservable`1<IDictionary`2<TKey, TSource>> ToDictionary(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IObservable`1<IDictionary`2<TKey, TElement>> ToDictionary(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    [ExtensionAttribute]
public static IObservable`1<IDictionary`2<TKey, TElement>> ToDictionary(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IObservable`1<IList`1<TSource>> ToList(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<ILookup`2<TKey, TSource>> ToLookup(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IObservable`1<ILookup`2<TKey, TSource>> ToLookup(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IObservable`1<ILookup`2<TKey, TElement>> ToLookup(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    [ExtensionAttribute]
public static IObservable`1<ILookup`2<TKey, TElement>> ToLookup(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    [ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`1<IObservable`1<TResult>> FromAsyncPattern(Func`3<AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`2<TArg1, IObservable`1<TResult>> FromAsyncPattern(Func`4<TArg1, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`3<TArg1, TArg2, IObservable`1<TResult>> FromAsyncPattern(Func`5<TArg1, TArg2, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`4<TArg1, TArg2, TArg3, IObservable`1<TResult>> FromAsyncPattern(Func`6<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`5<TArg1, TArg2, TArg3, TArg4, IObservable`1<TResult>> FromAsyncPattern(Func`7<TArg1, TArg2, TArg3, TArg4, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`6<TArg1, TArg2, TArg3, TArg4, TArg5, IObservable`1<TResult>> FromAsyncPattern(Func`8<TArg1, TArg2, TArg3, TArg4, TArg5, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`7<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, IObservable`1<TResult>> FromAsyncPattern(Func`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`8<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, IObservable`1<TResult>> FromAsyncPattern(Func`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, IObservable`1<TResult>> FromAsyncPattern(Func`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, IObservable`1<TResult>> FromAsyncPattern(Func`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, IObservable`1<TResult>> FromAsyncPattern(Func`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, IObservable`1<TResult>> FromAsyncPattern(Func`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, IObservable`1<TResult>> FromAsyncPattern(Func`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, IObservable`1<TResult>> FromAsyncPattern(Func`16<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, IObservable`1<TResult>> FromAsyncPattern(Func`17<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`1<IObservable`1<Unit>> FromAsyncPattern(Func`3<AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`2<TArg1, IObservable`1<Unit>> FromAsyncPattern(Func`4<TArg1, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`3<TArg1, TArg2, IObservable`1<Unit>> FromAsyncPattern(Func`5<TArg1, TArg2, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`4<TArg1, TArg2, TArg3, IObservable`1<Unit>> FromAsyncPattern(Func`6<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`5<TArg1, TArg2, TArg3, TArg4, IObservable`1<Unit>> FromAsyncPattern(Func`7<TArg1, TArg2, TArg3, TArg4, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`6<TArg1, TArg2, TArg3, TArg4, TArg5, IObservable`1<Unit>> FromAsyncPattern(Func`8<TArg1, TArg2, TArg3, TArg4, TArg5, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`7<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, IObservable`1<Unit>> FromAsyncPattern(Func`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`8<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, IObservable`1<Unit>> FromAsyncPattern(Func`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, IObservable`1<Unit>> FromAsyncPattern(Func`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, IObservable`1<Unit>> FromAsyncPattern(Func`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, IObservable`1<Unit>> FromAsyncPattern(Func`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, IObservable`1<Unit>> FromAsyncPattern(Func`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, IObservable`1<Unit>> FromAsyncPattern(Func`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, IObservable`1<Unit>> FromAsyncPattern(Func`16<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object.")]
public static Func`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, IObservable`1<Unit>> FromAsyncPattern(Func`17<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    public static IObservable`1<TResult> Start(Func`1<TResult> function);
    public static IObservable`1<TResult> Start(Func`1<TResult> function, IScheduler scheduler);
    public static IObservable`1<TResult> StartAsync(Func`1<Task`1<TResult>> functionAsync);
    public static IObservable`1<TResult> StartAsync(Func`1<Task`1<TResult>> functionAsync, IScheduler scheduler);
    public static IObservable`1<TResult> StartAsync(Func`1<Task`1<TResult>> functionAsync, TaskObservationOptions options);
    public static IObservable`1<TResult> StartAsync(Func`2<CancellationToken, Task`1<TResult>> functionAsync);
    public static IObservable`1<TResult> StartAsync(Func`2<CancellationToken, Task`1<TResult>> functionAsync, IScheduler scheduler);
    public static IObservable`1<TResult> StartAsync(Func`2<CancellationToken, Task`1<TResult>> functionAsync, TaskObservationOptions options);
    public static IObservable`1<Unit> Start(Action action);
    public static IObservable`1<Unit> Start(Action action, IScheduler scheduler);
    public static IObservable`1<Unit> StartAsync(Func`1<Task> actionAsync);
    public static IObservable`1<Unit> StartAsync(Func`1<Task> actionAsync, IScheduler scheduler);
    public static IObservable`1<Unit> StartAsync(Func`1<Task> actionAsync, TaskObservationOptions options);
    public static IObservable`1<Unit> StartAsync(Func`2<CancellationToken, Task> actionAsync);
    public static IObservable`1<Unit> StartAsync(Func`2<CancellationToken, Task> actionAsync, IScheduler scheduler);
    public static IObservable`1<Unit> StartAsync(Func`2<CancellationToken, Task> actionAsync, TaskObservationOptions options);
    public static IObservable`1<TResult> FromAsync(Func`1<Task`1<TResult>> functionAsync);
    public static IObservable`1<TResult> FromAsync(Func`1<Task`1<TResult>> functionAsync, IScheduler scheduler);
    public static IObservable`1<TResult> FromAsync(Func`1<Task`1<TResult>> functionAsync, TaskObservationOptions options);
    public static IObservable`1<TResult> FromAsync(Func`2<CancellationToken, Task`1<TResult>> functionAsync);
    public static IObservable`1<TResult> FromAsync(Func`2<CancellationToken, Task`1<TResult>> functionAsync, IScheduler scheduler);
    public static IObservable`1<TResult> FromAsync(Func`2<CancellationToken, Task`1<TResult>> functionAsync, TaskObservationOptions options);
    public static IObservable`1<Unit> FromAsync(Func`1<Task> actionAsync);
    public static IObservable`1<Unit> FromAsync(Func`1<Task> actionAsync, IScheduler scheduler);
    public static IObservable`1<Unit> FromAsync(Func`1<Task> actionAsync, TaskObservationOptions options);
    public static IObservable`1<Unit> FromAsync(Func`2<CancellationToken, Task> actionAsync);
    public static IObservable`1<Unit> FromAsync(Func`2<CancellationToken, Task> actionAsync, IScheduler scheduler);
    public static IObservable`1<Unit> FromAsync(Func`2<CancellationToken, Task> actionAsync, TaskObservationOptions options);
    [ExtensionAttribute]
public static Func`1<IObservable`1<TResult>> ToAsync(Func`1<TResult> function);
    [ExtensionAttribute]
public static Func`1<IObservable`1<TResult>> ToAsync(Func`1<TResult> function, IScheduler scheduler);
    [ExtensionAttribute]
public static Func`2<TArg1, IObservable`1<TResult>> ToAsync(Func`2<TArg1, TResult> function);
    [ExtensionAttribute]
public static Func`2<TArg1, IObservable`1<TResult>> ToAsync(Func`2<TArg1, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`3<TArg1, TArg2, IObservable`1<TResult>> ToAsync(Func`3<TArg1, TArg2, TResult> function);
    [ExtensionAttribute]
public static Func`3<TArg1, TArg2, IObservable`1<TResult>> ToAsync(Func`3<TArg1, TArg2, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`4<TArg1, TArg2, TArg3, IObservable`1<TResult>> ToAsync(Func`4<TArg1, TArg2, TArg3, TResult> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`4<TArg1, TArg2, TArg3, IObservable`1<TResult>> ToAsync(Func`4<TArg1, TArg2, TArg3, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`5<TArg1, TArg2, TArg3, TArg4, IObservable`1<TResult>> ToAsync(Func`5<TArg1, TArg2, TArg3, TArg4, TResult> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`5<TArg1, TArg2, TArg3, TArg4, IObservable`1<TResult>> ToAsync(Func`5<TArg1, TArg2, TArg3, TArg4, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`6<TArg1, TArg2, TArg3, TArg4, TArg5, IObservable`1<TResult>> ToAsync(Func`6<TArg1, TArg2, TArg3, TArg4, TArg5, TResult> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`6<TArg1, TArg2, TArg3, TArg4, TArg5, IObservable`1<TResult>> ToAsync(Func`6<TArg1, TArg2, TArg3, TArg4, TArg5, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`7<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, IObservable`1<TResult>> ToAsync(Func`7<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`7<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, IObservable`1<TResult>> ToAsync(Func`7<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`8<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, IObservable`1<TResult>> ToAsync(Func`8<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`8<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, IObservable`1<TResult>> ToAsync(Func`8<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, IObservable`1<TResult>> ToAsync(Func`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, IObservable`1<TResult>> ToAsync(Func`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, IObservable`1<TResult>> ToAsync(Func`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, IObservable`1<TResult>> ToAsync(Func`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, IObservable`1<TResult>> ToAsync(Func`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, IObservable`1<TResult>> ToAsync(Func`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, IObservable`1<TResult>> ToAsync(Func`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, IObservable`1<TResult>> ToAsync(Func`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, IObservable`1<TResult>> ToAsync(Func`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, IObservable`1<TResult>> ToAsync(Func`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, IObservable`1<TResult>> ToAsync(Func`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, IObservable`1<TResult>> ToAsync(Func`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, IObservable`1<TResult>> ToAsync(Func`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, IObservable`1<TResult>> ToAsync(Func`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`16<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, IObservable`1<TResult>> ToAsync(Func`16<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TResult> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`16<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, IObservable`1<TResult>> ToAsync(Func`16<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`17<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, IObservable`1<TResult>> ToAsync(Func`17<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, TResult> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`17<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, IObservable`1<TResult>> ToAsync(Func`17<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, TResult> function, IScheduler scheduler);
    [ExtensionAttribute]
public static Func`1<IObservable`1<Unit>> ToAsync(Action action);
    [ExtensionAttribute]
public static Func`1<IObservable`1<Unit>> ToAsync(Action action, IScheduler scheduler);
    [ExtensionAttribute]
public static Func`2<TArg1, IObservable`1<Unit>> ToAsync(Action`1<TArg1> action);
    [ExtensionAttribute]
public static Func`2<TArg1, IObservable`1<Unit>> ToAsync(Action`1<TArg1> action, IScheduler scheduler);
    [ExtensionAttribute]
public static Func`3<TArg1, TArg2, IObservable`1<Unit>> ToAsync(Action`2<TArg1, TArg2> action);
    [ExtensionAttribute]
public static Func`3<TArg1, TArg2, IObservable`1<Unit>> ToAsync(Action`2<TArg1, TArg2> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`4<TArg1, TArg2, TArg3, IObservable`1<Unit>> ToAsync(Action`3<TArg1, TArg2, TArg3> action);
    [ExtensionAttribute]
public static Func`4<TArg1, TArg2, TArg3, IObservable`1<Unit>> ToAsync(Action`3<TArg1, TArg2, TArg3> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`5<TArg1, TArg2, TArg3, TArg4, IObservable`1<Unit>> ToAsync(Action`4<TArg1, TArg2, TArg3, TArg4> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`5<TArg1, TArg2, TArg3, TArg4, IObservable`1<Unit>> ToAsync(Action`4<TArg1, TArg2, TArg3, TArg4> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`6<TArg1, TArg2, TArg3, TArg4, TArg5, IObservable`1<Unit>> ToAsync(Action`5<TArg1, TArg2, TArg3, TArg4, TArg5> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`6<TArg1, TArg2, TArg3, TArg4, TArg5, IObservable`1<Unit>> ToAsync(Action`5<TArg1, TArg2, TArg3, TArg4, TArg5> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`7<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, IObservable`1<Unit>> ToAsync(Action`6<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`7<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, IObservable`1<Unit>> ToAsync(Action`6<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`8<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, IObservable`1<Unit>> ToAsync(Action`7<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`8<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, IObservable`1<Unit>> ToAsync(Action`7<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, IObservable`1<Unit>> ToAsync(Action`8<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, IObservable`1<Unit>> ToAsync(Action`8<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, IObservable`1<Unit>> ToAsync(Action`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, IObservable`1<Unit>> ToAsync(Action`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, IObservable`1<Unit>> ToAsync(Action`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, IObservable`1<Unit>> ToAsync(Action`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, IObservable`1<Unit>> ToAsync(Action`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, IObservable`1<Unit>> ToAsync(Action`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, IObservable`1<Unit>> ToAsync(Action`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, IObservable`1<Unit>> ToAsync(Action`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, IObservable`1<Unit>> ToAsync(Action`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, IObservable`1<Unit>> ToAsync(Action`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, IObservable`1<Unit>> ToAsync(Action`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, IObservable`1<Unit>> ToAsync(Action`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`16<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, IObservable`1<Unit>> ToAsync(Action`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`16<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, IObservable`1<Unit>> ToAsync(Action`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`17<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, IObservable`1<Unit>> ToAsync(Action`16<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`17<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, IObservable`1<Unit>> ToAsync(Action`16<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16> action, IScheduler scheduler);
    [ExtensionAttribute]
public static AsyncSubject`1<TSource> GetAwaiter(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static AsyncSubject`1<TSource> GetAwaiter(IConnectableObservable`1<TSource> source);
    [ExtensionAttribute]
public static AsyncSubject`1<TSource> RunAsync(IObservable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static AsyncSubject`1<TSource> RunAsync(IConnectableObservable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IConnectableObservable`1<TResult> Multicast(IObservable`1<TSource> source, ISubject`2<TSource, TResult> subject);
    [ExtensionAttribute]
public static IObservable`1<TResult> Multicast(IObservable`1<TSource> source, Func`1<ISubject`2<TSource, TIntermediate>> subjectSelector, Func`2<IObservable`1<TIntermediate>, IObservable`1<TResult>> selector);
    [ExtensionAttribute]
public static IConnectableObservable`1<TSource> Publish(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<TResult> Publish(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector);
    [ExtensionAttribute]
public static IConnectableObservable`1<TSource> Publish(IObservable`1<TSource> source, TSource initialValue);
    [ExtensionAttribute]
public static IObservable`1<TResult> Publish(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector, TSource initialValue);
    [ExtensionAttribute]
public static IConnectableObservable`1<TSource> PublishLast(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<TResult> PublishLast(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector);
    [ExtensionAttribute]
public static IObservable`1<TSource> RefCount(IConnectableObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<TSource> RefCount(IConnectableObservable`1<TSource> source, TimeSpan disconnectDelay);
    [ExtensionAttribute]
public static IObservable`1<TSource> RefCount(IConnectableObservable`1<TSource> source, TimeSpan disconnectDelay, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> RefCount(IConnectableObservable`1<TSource> source, int minObservers);
    [ExtensionAttribute]
public static IObservable`1<TSource> RefCount(IConnectableObservable`1<TSource> source, int minObservers, TimeSpan disconnectDelay);
    [ExtensionAttribute]
public static IObservable`1<TSource> RefCount(IConnectableObservable`1<TSource> source, int minObservers, TimeSpan disconnectDelay, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> AutoConnect(IConnectableObservable`1<TSource> source, int minObservers, Action`1<IDisposable> onConnect);
    [ExtensionAttribute]
public static IConnectableObservable`1<TSource> Replay(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IConnectableObservable`1<TSource> Replay(IObservable`1<TSource> source, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TResult> Replay(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector);
    [ExtensionAttribute]
public static IObservable`1<TResult> Replay(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector, IScheduler scheduler);
    [ExtensionAttribute]
public static IConnectableObservable`1<TSource> Replay(IObservable`1<TSource> source, TimeSpan window);
    [ExtensionAttribute]
public static IObservable`1<TResult> Replay(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector, TimeSpan window);
    [ExtensionAttribute]
public static IConnectableObservable`1<TSource> Replay(IObservable`1<TSource> source, TimeSpan window, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TResult> Replay(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector, TimeSpan window, IScheduler scheduler);
    [ExtensionAttribute]
public static IConnectableObservable`1<TSource> Replay(IObservable`1<TSource> source, int bufferSize, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TResult> Replay(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector, int bufferSize, IScheduler scheduler);
    [ExtensionAttribute]
public static IConnectableObservable`1<TSource> Replay(IObservable`1<TSource> source, int bufferSize);
    [ExtensionAttribute]
public static IObservable`1<TResult> Replay(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector, int bufferSize);
    [ExtensionAttribute]
public static IConnectableObservable`1<TSource> Replay(IObservable`1<TSource> source, int bufferSize, TimeSpan window);
    [ExtensionAttribute]
public static IObservable`1<TResult> Replay(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector, int bufferSize, TimeSpan window);
    [ExtensionAttribute]
public static IConnectableObservable`1<TSource> Replay(IObservable`1<TSource> source, int bufferSize, TimeSpan window, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TResult> Replay(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector, int bufferSize, TimeSpan window, IScheduler scheduler);
    [ExtensionAttribute]
public static IEnumerable`1<IList`1<TSource>> Chunkify(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Collect(IObservable`1<TSource> source, Func`1<TResult> newCollector, Func`3<TResult, TSource, TResult> merge);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Collect(IObservable`1<TSource> source, Func`1<TResult> getInitialCollector, Func`3<TResult, TSource, TResult> merge, Func`2<TResult, TResult> getNewCollector);
    [ExtensionAttribute]
[ObsoleteAttribute("This blocking operation is no longer supported. Instead, use the async version in combination with C# and Visual Basic async/await support. In case you need a blocking operation, use Wait or convert the resulting observable sequence to a Task object and block.")]
public static TSource First(IObservable`1<TSource> source);
    [ExtensionAttribute]
[ObsoleteAttribute("This blocking operation is no longer supported. Instead, use the async version in combination with C# and Visual Basic async/await support. In case you need a blocking operation, use Wait or convert the resulting observable sequence to a Task object and block.")]
public static TSource First(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
[ObsoleteAttribute("This blocking operation is no longer supported. Instead, use the async version in combination with C# and Visual Basic async/await support. In case you need a blocking operation, use Wait or convert the resulting observable sequence to a Task object and block.")]
public static TSource FirstOrDefault(IObservable`1<TSource> source);
    [ExtensionAttribute]
[ObsoleteAttribute("This blocking operation is no longer supported. Instead, use the async version in combination with C# and Visual Basic async/await support. In case you need a blocking operation, use Wait or convert the resulting observable sequence to a Task object and block.")]
public static TSource FirstOrDefault(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
[ObsoleteAttribute("This blocking operation is no longer supported. Instead, use the async version in combination with C# and Visual Basic async/await support. In case you need a blocking operation, use Wait or convert the resulting observable sequence to a Task object and block.")]
public static void ForEach(IObservable`1<TSource> source, Action`1<TSource> onNext);
    [ExtensionAttribute]
[ObsoleteAttribute("This blocking operation is no longer supported. Instead, use the async version in combination with C# and Visual Basic async/await support. In case you need a blocking operation, use Wait or convert the resulting observable sequence to a Task object and block.")]
public static void ForEach(IObservable`1<TSource> source, Action`2<TSource, int> onNext);
    [ExtensionAttribute]
public static IEnumerator`1<TSource> GetEnumerator(IObservable`1<TSource> source);
    [ExtensionAttribute]
[ObsoleteAttribute("This blocking operation is no longer supported. Instead, use the async version in combination with C# and Visual Basic async/await support. In case you need a blocking operation, use Wait or convert the resulting observable sequence to a Task object and block.")]
public static TSource Last(IObservable`1<TSource> source);
    [ExtensionAttribute]
[ObsoleteAttribute("This blocking operation is no longer supported. Instead, use the async version in combination with C# and Visual Basic async/await support. In case you need a blocking operation, use Wait or convert the resulting observable sequence to a Task object and block.")]
public static TSource Last(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
[ObsoleteAttribute("This blocking operation is no longer supported. Instead, use the async version in combination with C# and Visual Basic async/await support. In case you need a blocking operation, use Wait or convert the resulting observable sequence to a Task object and block.")]
public static TSource LastOrDefault(IObservable`1<TSource> source);
    [ExtensionAttribute]
[ObsoleteAttribute("This blocking operation is no longer supported. Instead, use the async version in combination with C# and Visual Basic async/await support. In case you need a blocking operation, use Wait or convert the resulting observable sequence to a Task object and block.")]
public static TSource LastOrDefault(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Latest(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> MostRecent(IObservable`1<TSource> source, TSource initialValue);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Next(IObservable`1<TSource> source);
    [ExtensionAttribute]
[ObsoleteAttribute("This blocking operation is no longer supported. Instead, use the async version in combination with C# and Visual Basic async/await support. In case you need a blocking operation, use Wait or convert the resulting observable sequence to a Task object and block.")]
public static TSource Single(IObservable`1<TSource> source);
    [ExtensionAttribute]
[ObsoleteAttribute("This blocking operation is no longer supported. Instead, use the async version in combination with C# and Visual Basic async/await support. In case you need a blocking operation, use Wait or convert the resulting observable sequence to a Task object and block.")]
public static TSource Single(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
[ObsoleteAttribute("This blocking operation is no longer supported. Instead, use the async version in combination with C# and Visual Basic async/await support. In case you need a blocking operation, use Wait or convert the resulting observable sequence to a Task object and block.")]
public static TSource SingleOrDefault(IObservable`1<TSource> source);
    [ExtensionAttribute]
[ObsoleteAttribute("This blocking operation is no longer supported. Instead, use the async version in combination with C# and Visual Basic async/await support. In case you need a blocking operation, use Wait or convert the resulting observable sequence to a Task object and block.")]
public static TSource SingleOrDefault(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static TSource Wait(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<TSource> ObserveOn(IObservable`1<TSource> source, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> ObserveOn(IObservable`1<TSource> source, SynchronizationContext context);
    [ExtensionAttribute]
public static IObservable`1<TSource> SubscribeOn(IObservable`1<TSource> source, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> SubscribeOn(IObservable`1<TSource> source, SynchronizationContext context);
    [ExtensionAttribute]
public static IObservable`1<TSource> Synchronize(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<TSource> Synchronize(IObservable`1<TSource> source, object gate);
    [ExtensionAttribute]
public static IDisposable Subscribe(IEnumerable`1<TSource> source, IObserver`1<TSource> observer);
    [ExtensionAttribute]
public static IDisposable Subscribe(IEnumerable`1<TSource> source, IObserver`1<TSource> observer, IScheduler scheduler);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> ToEnumerable(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IEventSource`1<Unit> ToEvent(IObservable`1<Unit> source);
    [ExtensionAttribute]
public static IEventSource`1<TSource> ToEvent(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IEventPatternSource`1<TEventArgs> ToEventPattern(IObservable`1<EventPattern`1<TEventArgs>> source);
    [ExtensionAttribute]
public static IObservable`1<TSource> ToObservable(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<TSource> ToObservable(IEnumerable`1<TSource> source, IScheduler scheduler);
    public static IObservable`1<TResult> Create(Func`2<IObserver`1<TResult>, IDisposable> subscribe);
    public static IObservable`1<TResult> Create(Func`2<IObserver`1<TResult>, Action> subscribe);
    public static IObservable`1<TResult> Create(Func`3<IObserver`1<TResult>, CancellationToken, Task> subscribeAsync);
    public static IObservable`1<TResult> Create(Func`2<IObserver`1<TResult>, Task> subscribeAsync);
    public static IObservable`1<TResult> Create(Func`3<IObserver`1<TResult>, CancellationToken, Task`1<IDisposable>> subscribeAsync);
    public static IObservable`1<TResult> Create(Func`2<IObserver`1<TResult>, Task`1<IDisposable>> subscribeAsync);
    public static IObservable`1<TResult> Create(Func`3<IObserver`1<TResult>, CancellationToken, Task`1<Action>> subscribeAsync);
    public static IObservable`1<TResult> Create(Func`2<IObserver`1<TResult>, Task`1<Action>> subscribeAsync);
    public static IObservable`1<TResult> Defer(Func`1<IObservable`1<TResult>> observableFactory);
    public static IObservable`1<TResult> Defer(Func`1<Task`1<IObservable`1<TResult>>> observableFactoryAsync);
    public static IObservable`1<TResult> Defer(Func`1<Task`1<IObservable`1<TResult>>> observableFactoryAsync, bool ignoreExceptionsAfterUnsubscribe);
    public static IObservable`1<TResult> DeferAsync(Func`2<CancellationToken, Task`1<IObservable`1<TResult>>> observableFactoryAsync);
    public static IObservable`1<TResult> DeferAsync(Func`2<CancellationToken, Task`1<IObservable`1<TResult>>> observableFactoryAsync, bool ignoreExceptionsAfterUnsubscribe);
    public static IObservable`1<TResult> Empty();
    public static IObservable`1<TResult> Empty(TResult witness);
    public static IObservable`1<TResult> Empty(IScheduler scheduler);
    public static IObservable`1<TResult> Empty(IScheduler scheduler, TResult witness);
    public static IObservable`1<TResult> Generate(TState initialState, Func`2<TState, bool> condition, Func`2<TState, TState> iterate, Func`2<TState, TResult> resultSelector);
    public static IObservable`1<TResult> Generate(TState initialState, Func`2<TState, bool> condition, Func`2<TState, TState> iterate, Func`2<TState, TResult> resultSelector, IScheduler scheduler);
    public static IObservable`1<TResult> Never();
    public static IObservable`1<TResult> Never(TResult witness);
    public static IObservable`1<int> Range(int start, int count);
    public static IObservable`1<int> Range(int start, int count, IScheduler scheduler);
    public static IObservable`1<TResult> Repeat(TResult value);
    public static IObservable`1<TResult> Repeat(TResult value, IScheduler scheduler);
    public static IObservable`1<TResult> Repeat(TResult value, int repeatCount);
    public static IObservable`1<TResult> Repeat(TResult value, int repeatCount, IScheduler scheduler);
    public static IObservable`1<TResult> Return(TResult value);
    public static IObservable`1<TResult> Return(TResult value, IScheduler scheduler);
    public static IObservable`1<TResult> Throw(Exception exception);
    public static IObservable`1<TResult> Throw(Exception exception, TResult witness);
    public static IObservable`1<TResult> Throw(Exception exception, IScheduler scheduler);
    public static IObservable`1<TResult> Throw(Exception exception, IScheduler scheduler, TResult witness);
    public static IObservable`1<TResult> Using(Func`1<TResource> resourceFactory, Func`2<TResource, IObservable`1<TResult>> observableFactory);
    public static IObservable`1<TResult> Using(Func`2<CancellationToken, Task`1<TResource>> resourceFactoryAsync, Func`3<TResource, CancellationToken, Task`1<IObservable`1<TResult>>> observableFactoryAsync);
    public static IObservable`1<EventPattern`1<object>> FromEventPattern(Action`1<EventHandler> addHandler, Action`1<EventHandler> removeHandler);
    public static IObservable`1<EventPattern`1<object>> FromEventPattern(Action`1<EventHandler> addHandler, Action`1<EventHandler> removeHandler, IScheduler scheduler);
    public static IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler);
    public static IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler, IScheduler scheduler);
    public static IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(Func`2<EventHandler`1<TEventArgs>, TDelegate> conversion, Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler);
    public static IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(Func`2<EventHandler`1<TEventArgs>, TDelegate> conversion, Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler, IScheduler scheduler);
    public static IObservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern(Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler);
    public static IObservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern(Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler, IScheduler scheduler);
    public static IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(Action`1<EventHandler`1<TEventArgs>> addHandler, Action`1<EventHandler`1<TEventArgs>> removeHandler);
    public static IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(Action`1<EventHandler`1<TEventArgs>> addHandler, Action`1<EventHandler`1<TEventArgs>> removeHandler, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public static IObservable`1<EventPattern`1<object>> FromEventPattern(object target, string eventName);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public static IObservable`1<EventPattern`1<object>> FromEventPattern(object target, string eventName, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public static IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(object target, string eventName);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public static IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(object target, string eventName, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public static IObservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern(object target, string eventName);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public static IObservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern(object target, string eventName, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public static IObservable`1<EventPattern`1<object>> FromEventPattern(Type type, string eventName);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public static IObservable`1<EventPattern`1<object>> FromEventPattern(Type type, string eventName, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public static IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(Type type, string eventName);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public static IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(Type type, string eventName, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public static IObservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern(Type type, string eventName);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public static IObservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern(Type type, string eventName, IScheduler scheduler);
    public static IObservable`1<TEventArgs> FromEvent(Func`2<Action`1<TEventArgs>, TDelegate> conversion, Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler);
    public static IObservable`1<TEventArgs> FromEvent(Func`2<Action`1<TEventArgs>, TDelegate> conversion, Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler, IScheduler scheduler);
    public static IObservable`1<TEventArgs> FromEvent(Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler);
    public static IObservable`1<TEventArgs> FromEvent(Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler, IScheduler scheduler);
    public static IObservable`1<TEventArgs> FromEvent(Action`1<Action`1<TEventArgs>> addHandler, Action`1<Action`1<TEventArgs>> removeHandler);
    public static IObservable`1<TEventArgs> FromEvent(Action`1<Action`1<TEventArgs>> addHandler, Action`1<Action`1<TEventArgs>> removeHandler, IScheduler scheduler);
    public static IObservable`1<Unit> FromEvent(Action`1<Action> addHandler, Action`1<Action> removeHandler);
    public static IObservable`1<Unit> FromEvent(Action`1<Action> addHandler, Action`1<Action> removeHandler, IScheduler scheduler);
    [ExtensionAttribute]
public static Task ForEachAsync(IObservable`1<TSource> source, Action`1<TSource> onNext);
    [ExtensionAttribute]
public static Task ForEachAsync(IObservable`1<TSource> source, Action`1<TSource> onNext, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ForEachAsync(IObservable`1<TSource> source, Action`2<TSource, int> onNext);
    [ExtensionAttribute]
public static Task ForEachAsync(IObservable`1<TSource> source, Action`2<TSource, int> onNext, CancellationToken cancellationToken);
    public static IObservable`1<TResult> Case(Func`1<TValue> selector, IDictionary`2<TValue, IObservable`1<TResult>> sources, IObservable`1<TResult> defaultSource);
    public static IObservable`1<TResult> Case(Func`1<TValue> selector, IDictionary`2<TValue, IObservable`1<TResult>> sources, IScheduler scheduler);
    public static IObservable`1<TResult> Case(Func`1<TValue> selector, IDictionary`2<TValue, IObservable`1<TResult>> sources);
    [ExtensionAttribute]
public static IObservable`1<TSource> DoWhile(IObservable`1<TSource> source, Func`1<bool> condition);
    public static IObservable`1<TResult> For(IEnumerable`1<TSource> source, Func`2<TSource, IObservable`1<TResult>> resultSelector);
    public static IObservable`1<TResult> If(Func`1<bool> condition, IObservable`1<TResult> thenSource, IObservable`1<TResult> elseSource);
    public static IObservable`1<TResult> If(Func`1<bool> condition, IObservable`1<TResult> thenSource);
    public static IObservable`1<TResult> If(Func`1<bool> condition, IObservable`1<TResult> thenSource, IScheduler scheduler);
    public static IObservable`1<TSource> While(Func`1<bool> condition, IObservable`1<TSource> source);
    [ExtensionAttribute]
public static Pattern`2<TLeft, TRight> And(IObservable`1<TLeft> left, IObservable`1<TRight> right);
    [ExtensionAttribute]
public static Plan`1<TResult> Then(IObservable`1<TSource> source, Func`2<TSource, TResult> selector);
    public static IObservable`1<TResult> When(Plan`1[] plans);
    [ExtensionAttribute]
public static IObservable`1<TResult> When(IEnumerable`1<Plan`1<TResult>> plans);
    [ExtensionAttribute]
public static IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, Func`4<TSource1, TSource2, TSource3, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, Func`5<TSource1, TSource2, TSource3, TSource4, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, Func`6<TSource1, TSource2, TSource3, TSource4, TSource5, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, Func`7<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, Func`8<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, Func`9<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, Func`10<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, Func`11<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, Func`12<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, Func`13<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, IObservable`1<TSource13> source13, Func`14<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, IObservable`1<TSource13> source13, IObservable`1<TSource14> source14, Func`15<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, IObservable`1<TSource13> source13, IObservable`1<TSource14> source14, IObservable`1<TSource15> source15, Func`16<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, IObservable`1<TSource13> source13, IObservable`1<TSource14> source14, IObservable`1<TSource15> source15, IObservable`1<TSource16> source16, Func`17<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TSource> Amb(IObservable`1<TSource> first, IObservable`1<TSource> second);
    public static IObservable`1<TSource> Amb(IObservable`1[] sources);
    [ExtensionAttribute]
public static IObservable`1<TSource> Amb(IEnumerable`1<IObservable`1<TSource>> sources);
    [ExtensionAttribute]
public static IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, Func`1<IObservable`1<TBufferClosing>> bufferClosingSelector);
    [ExtensionAttribute]
public static IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, IObservable`1<TBufferOpening> bufferOpenings, Func`2<TBufferOpening, IObservable`1<TBufferClosing>> bufferClosingSelector);
    [ExtensionAttribute]
public static IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, IObservable`1<TBufferBoundary> bufferBoundaries);
    [ExtensionAttribute]
public static IObservable`1<TSource> Catch(IObservable`1<TSource> source, Func`2<TException, IObservable`1<TSource>> handler);
    [ExtensionAttribute]
public static IObservable`1<TSource> Catch(IObservable`1<TSource> first, IObservable`1<TSource> second);
    public static IObservable`1<TSource> Catch(IObservable`1[] sources);
    [ExtensionAttribute]
public static IObservable`1<TSource> Catch(IEnumerable`1<IObservable`1<TSource>> sources);
    [ExtensionAttribute]
public static IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> first, IObservable`1<TSource2> second, Func`3<TSource1, TSource2, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> CombineLatest(IEnumerable`1<IObservable`1<TSource>> sources, Func`2<IList`1<TSource>, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<IList`1<TSource>> CombineLatest(IEnumerable`1<IObservable`1<TSource>> sources);
    public static IObservable`1<IList`1<TSource>> CombineLatest(IObservable`1[] sources);
    [ExtensionAttribute]
public static IObservable`1<TSource> Concat(IObservable`1<TSource> first, IObservable`1<TSource> second);
    public static IObservable`1<TSource> Concat(IObservable`1[] sources);
    [ExtensionAttribute]
public static IObservable`1<TSource> Concat(IEnumerable`1<IObservable`1<TSource>> sources);
    [ExtensionAttribute]
public static IObservable`1<TSource> Concat(IObservable`1<IObservable`1<TSource>> sources);
    [ExtensionAttribute]
public static IObservable`1<TSource> Concat(IObservable`1<Task`1<TSource>> sources);
    [ExtensionAttribute]
public static IObservable`1<TSource> Merge(IObservable`1<IObservable`1<TSource>> sources);
    [ExtensionAttribute]
public static IObservable`1<TSource> Merge(IObservable`1<Task`1<TSource>> sources);
    [ExtensionAttribute]
public static IObservable`1<TSource> Merge(IObservable`1<IObservable`1<TSource>> sources, int maxConcurrent);
    [ExtensionAttribute]
public static IObservable`1<TSource> Merge(IEnumerable`1<IObservable`1<TSource>> sources, int maxConcurrent);
    [ExtensionAttribute]
public static IObservable`1<TSource> Merge(IEnumerable`1<IObservable`1<TSource>> sources, int maxConcurrent, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> Merge(IObservable`1<TSource> first, IObservable`1<TSource> second);
    [ExtensionAttribute]
public static IObservable`1<TSource> Merge(IObservable`1<TSource> first, IObservable`1<TSource> second, IScheduler scheduler);
    public static IObservable`1<TSource> Merge(IObservable`1[] sources);
    public static IObservable`1<TSource> Merge(IScheduler scheduler, IObservable`1[] sources);
    [ExtensionAttribute]
public static IObservable`1<TSource> Merge(IEnumerable`1<IObservable`1<TSource>> sources);
    [ExtensionAttribute]
public static IObservable`1<TSource> Merge(IEnumerable`1<IObservable`1<TSource>> sources, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> OnErrorResumeNext(IObservable`1<TSource> first, IObservable`1<TSource> second);
    public static IObservable`1<TSource> OnErrorResumeNext(IObservable`1[] sources);
    [ExtensionAttribute]
public static IObservable`1<TSource> OnErrorResumeNext(IEnumerable`1<IObservable`1<TSource>> sources);
    [ExtensionAttribute]
public static IObservable`1<TSource> SkipUntil(IObservable`1<TSource> source, IObservable`1<TOther> other);
    [ExtensionAttribute]
public static IObservable`1<TSource> Switch(IObservable`1<IObservable`1<TSource>> sources);
    [ExtensionAttribute]
public static IObservable`1<TSource> Switch(IObservable`1<Task`1<TSource>> sources);
    [ExtensionAttribute]
public static IObservable`1<TSource> TakeUntil(IObservable`1<TSource> source, IObservable`1<TOther> other);
    [ExtensionAttribute]
public static IObservable`1<TSource> TakeUntil(IObservable`1<TSource> source, Func`2<TSource, bool> stopPredicate);
    [ExtensionAttribute]
public static IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, Func`1<IObservable`1<TWindowClosing>> windowClosingSelector);
    [ExtensionAttribute]
public static IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, IObservable`1<TWindowOpening> windowOpenings, Func`2<TWindowOpening, IObservable`1<TWindowClosing>> windowClosingSelector);
    [ExtensionAttribute]
public static IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, IObservable`1<TWindowBoundary> windowBoundaries);
    [ExtensionAttribute]
public static IObservable`1<TResult> WithLatestFrom(IObservable`1<TFirst> first, IObservable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> Zip(IObservable`1<TSource1> first, IObservable`1<TSource2> second, Func`3<TSource1, TSource2, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> Zip(IEnumerable`1<IObservable`1<TSource>> sources, Func`2<IList`1<TSource>, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<IList`1<TSource>> Zip(IEnumerable`1<IObservable`1<TSource>> sources);
    public static IObservable`1<IList`1<TSource>> Zip(IObservable`1[] sources);
    [ExtensionAttribute]
public static IObservable`1<TResult> Zip(IObservable`1<TSource1> first, IEnumerable`1<TSource2> second, Func`3<TSource1, TSource2, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, Func`4<TSource1, TSource2, TSource3, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, Func`5<TSource1, TSource2, TSource3, TSource4, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, Func`6<TSource1, TSource2, TSource3, TSource4, TSource5, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, Func`7<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, Func`8<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, Func`9<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, Func`10<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, Func`11<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, Func`12<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, Func`13<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, IObservable`1<TSource13> source13, Func`14<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, IObservable`1<TSource13> source13, IObservable`1<TSource14> source14, Func`15<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, IObservable`1<TSource13> source13, IObservable`1<TSource14> source14, IObservable`1<TSource15> source15, Func`16<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, IObservable`1<TSource13> source13, IObservable`1<TSource14> source14, IObservable`1<TSource15> source15, IObservable`1<TSource16> source16, Func`17<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TSource> Append(IObservable`1<TSource> source, TSource value);
    [ExtensionAttribute]
public static IObservable`1<TSource> Append(IObservable`1<TSource> source, TSource value, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> AsObservable(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, int count, int skip);
    [ExtensionAttribute]
public static IObservable`1<TSource> Dematerialize(IObservable`1<Notification`1<TSource>> source);
    [ExtensionAttribute]
public static IObservable`1<TSource> DistinctUntilChanged(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<TSource> DistinctUntilChanged(IObservable`1<TSource> source, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IObservable`1<TSource> DistinctUntilChanged(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IObservable`1<TSource> DistinctUntilChanged(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IObservable`1<TSource> Do(IObservable`1<TSource> source, Action`1<TSource> onNext);
    [ExtensionAttribute]
public static IObservable`1<TSource> Do(IObservable`1<TSource> source, Action`1<TSource> onNext, Action onCompleted);
    [ExtensionAttribute]
public static IObservable`1<TSource> Do(IObservable`1<TSource> source, Action`1<TSource> onNext, Action`1<Exception> onError);
    [ExtensionAttribute]
public static IObservable`1<TSource> Do(IObservable`1<TSource> source, Action`1<TSource> onNext, Action`1<Exception> onError, Action onCompleted);
    [ExtensionAttribute]
public static IObservable`1<TSource> Do(IObservable`1<TSource> source, IObserver`1<TSource> observer);
    [ExtensionAttribute]
public static IObservable`1<TSource> Finally(IObservable`1<TSource> source, Action finallyAction);
    [ExtensionAttribute]
public static IObservable`1<TSource> IgnoreElements(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<Notification`1<TSource>> Materialize(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<TSource> Prepend(IObservable`1<TSource> source, TSource value);
    [ExtensionAttribute]
public static IObservable`1<TSource> Prepend(IObservable`1<TSource> source, TSource value, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> Repeat(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<TSource> Repeat(IObservable`1<TSource> source, int repeatCount);
    [ExtensionAttribute]
public static IObservable`1<TSource> RepeatWhen(IObservable`1<TSource> source, Func`2<IObservable`1<object>, IObservable`1<TSignal>> handler);
    [ExtensionAttribute]
public static IObservable`1<TSource> Retry(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<TSource> Retry(IObservable`1<TSource> source, int retryCount);
    [ExtensionAttribute]
public static IObservable`1<TSource> RetryWhen(IObservable`1<TSource> source, Func`2<IObservable`1<Exception>, IObservable`1<TSignal>> handler);
    [ExtensionAttribute]
public static IObservable`1<TAccumulate> Scan(IObservable`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> accumulator);
    [ExtensionAttribute]
public static IObservable`1<TSource> Scan(IObservable`1<TSource> source, Func`3<TSource, TSource, TSource> accumulator);
    [ExtensionAttribute]
public static IObservable`1<TSource> SkipLast(IObservable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IObservable`1<TSource> StartWith(IObservable`1<TSource> source, TSource[] values);
    [ExtensionAttribute]
public static IObservable`1<TSource> StartWith(IObservable`1<TSource> source, IEnumerable`1<TSource> values);
    [ExtensionAttribute]
public static IObservable`1<TSource> StartWith(IObservable`1<TSource> source, IScheduler scheduler, TSource[] values);
    [ExtensionAttribute]
public static IObservable`1<TSource> StartWith(IObservable`1<TSource> source, IScheduler scheduler, IEnumerable`1<TSource> values);
    [ExtensionAttribute]
public static IObservable`1<TSource> TakeLast(IObservable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IObservable`1<TSource> TakeLast(IObservable`1<TSource> source, int count, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<IList`1<TSource>> TakeLastBuffer(IObservable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, int count, int skip);
    [ExtensionAttribute]
public static IObservable`1<TResult> Cast(IObservable`1<object> source);
    [ExtensionAttribute]
public static IObservable`1<TSource> DefaultIfEmpty(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<TSource> DefaultIfEmpty(IObservable`1<TSource> source, TSource defaultValue);
    [ExtensionAttribute]
public static IObservable`1<TSource> Distinct(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<TSource> Distinct(IObservable`1<TSource> source, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IObservable`1<TSource> Distinct(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IObservable`1<TSource> Distinct(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IObservable`1<IGroupedObservable`2<TKey, TSource>> GroupBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IObservable`1<IGroupedObservable`2<TKey, TSource>> GroupBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    [ExtensionAttribute]
public static IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IObservable`1<IGroupedObservable`2<TKey, TSource>> GroupBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, int capacity);
    [ExtensionAttribute]
public static IObservable`1<IGroupedObservable`2<TKey, TSource>> GroupBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, int capacity, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, int capacity);
    [ExtensionAttribute]
public static IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, int capacity, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupByUntil(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`2<IGroupedObservable`2<TKey, TElement>, IObservable`1<TDuration>> durationSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupByUntil(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`2<IGroupedObservable`2<TKey, TElement>, IObservable`1<TDuration>> durationSelector);
    [ExtensionAttribute]
public static IObservable`1<IGroupedObservable`2<TKey, TSource>> GroupByUntil(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<IGroupedObservable`2<TKey, TSource>, IObservable`1<TDuration>> durationSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IObservable`1<IGroupedObservable`2<TKey, TSource>> GroupByUntil(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<IGroupedObservable`2<TKey, TSource>, IObservable`1<TDuration>> durationSelector);
    [ExtensionAttribute]
public static IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupByUntil(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`2<IGroupedObservable`2<TKey, TElement>, IObservable`1<TDuration>> durationSelector, int capacity, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupByUntil(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`2<IGroupedObservable`2<TKey, TElement>, IObservable`1<TDuration>> durationSelector, int capacity);
    [ExtensionAttribute]
public static IObservable`1<IGroupedObservable`2<TKey, TSource>> GroupByUntil(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<IGroupedObservable`2<TKey, TSource>, IObservable`1<TDuration>> durationSelector, int capacity, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IObservable`1<IGroupedObservable`2<TKey, TSource>> GroupByUntil(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<IGroupedObservable`2<TKey, TSource>, IObservable`1<TDuration>> durationSelector, int capacity);
    [ExtensionAttribute]
public static IObservable`1<TResult> GroupJoin(IObservable`1<TLeft> left, IObservable`1<TRight> right, Func`2<TLeft, IObservable`1<TLeftDuration>> leftDurationSelector, Func`2<TRight, IObservable`1<TRightDuration>> rightDurationSelector, Func`3<TLeft, IObservable`1<TRight>, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> Join(IObservable`1<TLeft> left, IObservable`1<TRight> right, Func`2<TLeft, IObservable`1<TLeftDuration>> leftDurationSelector, Func`2<TRight, IObservable`1<TRightDuration>> rightDurationSelector, Func`3<TLeft, TRight, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> OfType(IObservable`1<object> source);
    [ExtensionAttribute]
public static IObservable`1<TResult> Select(IObservable`1<TSource> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
public static IObservable`1<TResult> Select(IObservable`1<TSource> source, Func`3<TSource, int, TResult> selector);
    [ExtensionAttribute]
public static IObservable`1<TOther> SelectMany(IObservable`1<TSource> source, IObservable`1<TOther> other);
    [ExtensionAttribute]
public static IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TResult>> selector);
    [ExtensionAttribute]
public static IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, int, IObservable`1<TResult>> selector);
    [ExtensionAttribute]
public static IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`2<TSource, Task`1<TResult>> selector);
    [ExtensionAttribute]
public static IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, int, Task`1<TResult>> selector);
    [ExtensionAttribute]
public static IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, CancellationToken, Task`1<TResult>> selector);
    [ExtensionAttribute]
public static IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`4<TSource, int, CancellationToken, Task`1<TResult>> selector);
    [ExtensionAttribute]
public static IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, int, IObservable`1<TCollection>> collectionSelector, Func`5<TSource, int, TCollection, int, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`2<TSource, Task`1<TTaskResult>> taskSelector, Func`3<TSource, TTaskResult, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, int, Task`1<TTaskResult>> taskSelector, Func`4<TSource, int, TTaskResult, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, CancellationToken, Task`1<TTaskResult>> taskSelector, Func`3<TSource, TTaskResult, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`4<TSource, int, CancellationToken, Task`1<TTaskResult>> taskSelector, Func`4<TSource, int, TTaskResult, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TResult>> onNext, Func`2<Exception, IObservable`1<TResult>> onError, Func`1<IObservable`1<TResult>> onCompleted);
    [ExtensionAttribute]
public static IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, int, IObservable`1<TResult>> onNext, Func`2<Exception, IObservable`1<TResult>> onError, Func`1<IObservable`1<TResult>> onCompleted);
    [ExtensionAttribute]
public static IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`2<TSource, IEnumerable`1<TResult>> selector);
    [ExtensionAttribute]
public static IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, int, IEnumerable`1<TResult>> selector);
    [ExtensionAttribute]
public static IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`2<TSource, IEnumerable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, int, IEnumerable`1<TCollection>> collectionSelector, Func`5<TSource, int, TCollection, int, TResult> resultSelector);
    [ExtensionAttribute]
public static IObservable`1<TSource> Skip(IObservable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IObservable`1<TSource> SkipWhile(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IObservable`1<TSource> SkipWhile(IObservable`1<TSource> source, Func`3<TSource, int, bool> predicate);
    [ExtensionAttribute]
public static IObservable`1<TSource> Take(IObservable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IObservable`1<TSource> Take(IObservable`1<TSource> source, int count, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> TakeWhile(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IObservable`1<TSource> TakeWhile(IObservable`1<TSource> source, Func`3<TSource, int, bool> predicate);
    [ExtensionAttribute]
public static IObservable`1<TSource> Where(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IObservable`1<TSource> Where(IObservable`1<TSource> source, Func`3<TSource, int, bool> predicate);
    [ExtensionAttribute]
public static IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, TimeSpan timeSpan);
    [ExtensionAttribute]
public static IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, TimeSpan timeSpan, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, TimeSpan timeSpan, TimeSpan timeShift);
    [ExtensionAttribute]
public static IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, TimeSpan timeSpan, TimeSpan timeShift, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, TimeSpan timeSpan, int count);
    [ExtensionAttribute]
public static IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, TimeSpan timeSpan, int count, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> Delay(IObservable`1<TSource> source, TimeSpan dueTime);
    [ExtensionAttribute]
public static IObservable`1<TSource> Delay(IObservable`1<TSource> source, TimeSpan dueTime, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> Delay(IObservable`1<TSource> source, DateTimeOffset dueTime);
    [ExtensionAttribute]
public static IObservable`1<TSource> Delay(IObservable`1<TSource> source, DateTimeOffset dueTime, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> Delay(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TDelay>> delayDurationSelector);
    [ExtensionAttribute]
public static IObservable`1<TSource> Delay(IObservable`1<TSource> source, IObservable`1<TDelay> subscriptionDelay, Func`2<TSource, IObservable`1<TDelay>> delayDurationSelector);
    [ExtensionAttribute]
public static IObservable`1<TSource> DelaySubscription(IObservable`1<TSource> source, TimeSpan dueTime);
    [ExtensionAttribute]
public static IObservable`1<TSource> DelaySubscription(IObservable`1<TSource> source, TimeSpan dueTime, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> DelaySubscription(IObservable`1<TSource> source, DateTimeOffset dueTime);
    [ExtensionAttribute]
public static IObservable`1<TSource> DelaySubscription(IObservable`1<TSource> source, DateTimeOffset dueTime, IScheduler scheduler);
    public static IObservable`1<TResult> Generate(TState initialState, Func`2<TState, bool> condition, Func`2<TState, TState> iterate, Func`2<TState, TResult> resultSelector, Func`2<TState, TimeSpan> timeSelector);
    public static IObservable`1<TResult> Generate(TState initialState, Func`2<TState, bool> condition, Func`2<TState, TState> iterate, Func`2<TState, TResult> resultSelector, Func`2<TState, TimeSpan> timeSelector, IScheduler scheduler);
    public static IObservable`1<TResult> Generate(TState initialState, Func`2<TState, bool> condition, Func`2<TState, TState> iterate, Func`2<TState, TResult> resultSelector, Func`2<TState, DateTimeOffset> timeSelector);
    public static IObservable`1<TResult> Generate(TState initialState, Func`2<TState, bool> condition, Func`2<TState, TState> iterate, Func`2<TState, TResult> resultSelector, Func`2<TState, DateTimeOffset> timeSelector, IScheduler scheduler);
    public static IObservable`1<long> Interval(TimeSpan period);
    public static IObservable`1<long> Interval(TimeSpan period, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> Sample(IObservable`1<TSource> source, TimeSpan interval);
    [ExtensionAttribute]
public static IObservable`1<TSource> Sample(IObservable`1<TSource> source, TimeSpan interval, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> Sample(IObservable`1<TSource> source, IObservable`1<TSample> sampler);
    [ExtensionAttribute]
public static IObservable`1<TSource> Skip(IObservable`1<TSource> source, TimeSpan duration);
    [ExtensionAttribute]
public static IObservable`1<TSource> Skip(IObservable`1<TSource> source, TimeSpan duration, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> SkipLast(IObservable`1<TSource> source, TimeSpan duration);
    [ExtensionAttribute]
public static IObservable`1<TSource> SkipLast(IObservable`1<TSource> source, TimeSpan duration, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> SkipUntil(IObservable`1<TSource> source, DateTimeOffset startTime);
    [ExtensionAttribute]
public static IObservable`1<TSource> SkipUntil(IObservable`1<TSource> source, DateTimeOffset startTime, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> Take(IObservable`1<TSource> source, TimeSpan duration);
    [ExtensionAttribute]
public static IObservable`1<TSource> Take(IObservable`1<TSource> source, TimeSpan duration, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> TakeLast(IObservable`1<TSource> source, TimeSpan duration);
    [ExtensionAttribute]
public static IObservable`1<TSource> TakeLast(IObservable`1<TSource> source, TimeSpan duration, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> TakeLast(IObservable`1<TSource> source, TimeSpan duration, IScheduler timerScheduler, IScheduler loopScheduler);
    [ExtensionAttribute]
public static IObservable`1<IList`1<TSource>> TakeLastBuffer(IObservable`1<TSource> source, TimeSpan duration);
    [ExtensionAttribute]
public static IObservable`1<IList`1<TSource>> TakeLastBuffer(IObservable`1<TSource> source, TimeSpan duration, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> TakeUntil(IObservable`1<TSource> source, DateTimeOffset endTime);
    [ExtensionAttribute]
public static IObservable`1<TSource> TakeUntil(IObservable`1<TSource> source, DateTimeOffset endTime, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> Throttle(IObservable`1<TSource> source, TimeSpan dueTime);
    [ExtensionAttribute]
public static IObservable`1<TSource> Throttle(IObservable`1<TSource> source, TimeSpan dueTime, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> Throttle(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TThrottle>> throttleDurationSelector);
    [ExtensionAttribute]
public static IObservable`1<TimeInterval`1<TSource>> TimeInterval(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<TimeInterval`1<TSource>> TimeInterval(IObservable`1<TSource> source, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> Timeout(IObservable`1<TSource> source, TimeSpan dueTime);
    [ExtensionAttribute]
public static IObservable`1<TSource> Timeout(IObservable`1<TSource> source, TimeSpan dueTime, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> Timeout(IObservable`1<TSource> source, TimeSpan dueTime, IObservable`1<TSource> other);
    [ExtensionAttribute]
public static IObservable`1<TSource> Timeout(IObservable`1<TSource> source, TimeSpan dueTime, IObservable`1<TSource> other, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> Timeout(IObservable`1<TSource> source, DateTimeOffset dueTime);
    [ExtensionAttribute]
public static IObservable`1<TSource> Timeout(IObservable`1<TSource> source, DateTimeOffset dueTime, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> Timeout(IObservable`1<TSource> source, DateTimeOffset dueTime, IObservable`1<TSource> other);
    [ExtensionAttribute]
public static IObservable`1<TSource> Timeout(IObservable`1<TSource> source, DateTimeOffset dueTime, IObservable`1<TSource> other, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TSource> Timeout(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TTimeout>> timeoutDurationSelector);
    [ExtensionAttribute]
public static IObservable`1<TSource> Timeout(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TTimeout>> timeoutDurationSelector, IObservable`1<TSource> other);
    [ExtensionAttribute]
public static IObservable`1<TSource> Timeout(IObservable`1<TSource> source, IObservable`1<TTimeout> firstTimeout, Func`2<TSource, IObservable`1<TTimeout>> timeoutDurationSelector);
    [ExtensionAttribute]
public static IObservable`1<TSource> Timeout(IObservable`1<TSource> source, IObservable`1<TTimeout> firstTimeout, Func`2<TSource, IObservable`1<TTimeout>> timeoutDurationSelector, IObservable`1<TSource> other);
    public static IObservable`1<long> Timer(TimeSpan dueTime);
    public static IObservable`1<long> Timer(DateTimeOffset dueTime);
    public static IObservable`1<long> Timer(TimeSpan dueTime, TimeSpan period);
    public static IObservable`1<long> Timer(DateTimeOffset dueTime, TimeSpan period);
    public static IObservable`1<long> Timer(TimeSpan dueTime, IScheduler scheduler);
    public static IObservable`1<long> Timer(DateTimeOffset dueTime, IScheduler scheduler);
    public static IObservable`1<long> Timer(TimeSpan dueTime, TimeSpan period, IScheduler scheduler);
    public static IObservable`1<long> Timer(DateTimeOffset dueTime, TimeSpan period, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<Timestamped`1<TSource>> Timestamp(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<Timestamped`1<TSource>> Timestamp(IObservable`1<TSource> source, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, TimeSpan timeSpan);
    [ExtensionAttribute]
public static IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, TimeSpan timeSpan, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, TimeSpan timeSpan, TimeSpan timeShift);
    [ExtensionAttribute]
public static IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, TimeSpan timeSpan, TimeSpan timeShift, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, TimeSpan timeSpan, int count);
    [ExtensionAttribute]
public static IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, TimeSpan timeSpan, int count, IScheduler scheduler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Reactive.Linq.ObservableEx : object {
    private static IQueryLanguageEx s_impl;
    private static ObservableEx();
    [ExtensionAttribute]
public static IObservable`1<ValueTuple`2<TFirst, TSecond>> CombineLatest(IObservable`1<TFirst> first, IObservable`1<TSecond> second);
    [ExtensionAttribute]
public static IObservable`1<ValueTuple`3<TFirst, TSecond, TThird>> CombineLatest(IObservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third);
    [ExtensionAttribute]
public static IObservable`1<ValueTuple`4<TFirst, TSecond, TThird, TFourth>> CombineLatest(IObservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth);
    [ExtensionAttribute]
public static IObservable`1<ValueTuple`5<TFirst, TSecond, TThird, TFourth, TFifth>> CombineLatest(IObservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth);
    [ExtensionAttribute]
public static IObservable`1<ValueTuple`6<TFirst, TSecond, TThird, TFourth, TFifth, TSixth>> CombineLatest(IObservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth);
    [ExtensionAttribute]
public static IObservable`1<ValueTuple`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh>> CombineLatest(IObservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth, IObservable`1<TSeventh> seventh);
    [ExtensionAttribute]
public static IObservable`1<ValueTuple`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, ValueTuple`1<TEighth>>> CombineLatest(IObservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth, IObservable`1<TSeventh> seventh, IObservable`1<TEighth> eighth);
    [ExtensionAttribute]
public static IObservable`1<ValueTuple`2<TFirst, TSecond>> WithLatestFrom(IObservable`1<TFirst> first, IObservable`1<TSecond> second);
    [ExtensionAttribute]
public static IObservable`1<ValueTuple`2<TFirst, TSecond>> Zip(IObservable`1<TFirst> first, IEnumerable`1<TSecond> second);
    [ExtensionAttribute]
public static IObservable`1<ValueTuple`2<TFirst, TSecond>> Zip(IObservable`1<TFirst> first, IObservable`1<TSecond> second);
    [ExtensionAttribute]
public static IObservable`1<ValueTuple`3<TFirst, TSecond, TThird>> Zip(IObservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third);
    [ExtensionAttribute]
public static IObservable`1<ValueTuple`4<TFirst, TSecond, TThird, TFourth>> Zip(IObservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth);
    [ExtensionAttribute]
public static IObservable`1<ValueTuple`5<TFirst, TSecond, TThird, TFourth, TFifth>> Zip(IObservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth);
    [ExtensionAttribute]
public static IObservable`1<ValueTuple`6<TFirst, TSecond, TThird, TFourth, TFifth, TSixth>> Zip(IObservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth);
    [ExtensionAttribute]
public static IObservable`1<ValueTuple`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh>> Zip(IObservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth, IObservable`1<TSeventh> seventh);
    [ExtensionAttribute]
public static IObservable`1<ValueTuple`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, ValueTuple`1<TEighth>>> Zip(IObservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth, IObservable`1<TSeventh> seventh, IObservable`1<TEighth> eighth);
    [ExperimentalAttribute]
public static IObservable`1<TResult> Create(Func`2<IObserver`1<TResult>, IEnumerable`1<IObservable`1<object>>> iteratorMethod);
    [ExperimentalAttribute]
public static IObservable`1<Unit> Create(Func`1<IEnumerable`1<IObservable`1<object>>> iteratorMethod);
    [ExtensionAttribute]
[ExperimentalAttribute]
public static IObservable`1<TSource> Expand(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TSource>> selector, IScheduler scheduler);
    [ExtensionAttribute]
[ExperimentalAttribute]
public static IObservable`1<TSource> Expand(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TSource>> selector);
    [ExtensionAttribute]
[ExperimentalAttribute]
public static IObservable`1<TResult> ForkJoin(IObservable`1<TSource1> first, IObservable`1<TSource2> second, Func`3<TSource1, TSource2, TResult> resultSelector);
    [ExperimentalAttribute]
public static IObservable`1<TSource[]> ForkJoin(IObservable`1[] sources);
    [ExtensionAttribute]
[ExperimentalAttribute]
public static IObservable`1<TSource[]> ForkJoin(IEnumerable`1<IObservable`1<TSource>> sources);
    [ExtensionAttribute]
[ExperimentalAttribute]
public static IObservable`1<TResult> Let(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector);
    [ExtensionAttribute]
[ExperimentalAttribute]
public static IObservable`1<TResult> ManySelect(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, TResult> selector, IScheduler scheduler);
    [ExtensionAttribute]
[ExperimentalAttribute]
public static IObservable`1<TResult> ManySelect(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, TResult> selector);
    [ExtensionAttribute]
[ExperimentalAttribute]
public static ListObservable`1<TSource> ToListObservable(IObservable`1<TSource> source);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.AddRef`1 : Producer`2<TSource, _<TSource>> {
    private IObservable`1<TSource> _source;
    private RefCountDisposable _refCount;
    public AddRef`1(IObservable`1<TSource> source, RefCountDisposable refCount);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Aggregate`1 : Producer`2<TSource, _<TSource>> {
    private IObservable`1<TSource> _source;
    private Func`3<TSource, TSource, TSource> _accumulator;
    public Aggregate`1(IObservable`1<TSource> source, Func`3<TSource, TSource, TSource> accumulator);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Aggregate`2 : Producer`2<TAccumulate, _<TSource, TAccumulate>> {
    private IObservable`1<TSource> _source;
    private TAccumulate _seed;
    private Func`3<TAccumulate, TSource, TAccumulate> _accumulator;
    public Aggregate`2(IObservable`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> accumulator);
    protected virtual _<TSource, TAccumulate> CreateSink(IObserver`1<TAccumulate> observer);
    protected virtual void Run(_<TSource, TAccumulate> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Aggregate`3 : Producer`2<TResult, _<TSource, TAccumulate, TResult>> {
    private IObservable`1<TSource> _source;
    private TAccumulate _seed;
    private Func`3<TAccumulate, TSource, TAccumulate> _accumulator;
    private Func`2<TAccumulate, TResult> _resultSelector;
    public Aggregate`3(IObservable`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> accumulator, Func`2<TAccumulate, TResult> resultSelector);
    protected virtual _<TSource, TAccumulate, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<TSource, TAccumulate, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.All`1 : Producer`2<bool, _<TSource>> {
    private IObservable`1<TSource> _source;
    private Func`2<TSource, bool> _predicate;
    public All`1(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    protected virtual _<TSource> CreateSink(IObserver`1<bool> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Amb`1 : Producer`2<TSource, AmbCoordinator<TSource>> {
    private IObservable`1<TSource> _left;
    private IObservable`1<TSource> _right;
    public Amb`1(IObservable`1<TSource> left, IObservable`1<TSource> right);
    protected virtual AmbCoordinator<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(AmbCoordinator<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Linq.ObservableImpl.AmbCoordinator`1 : object {
    private IObserver`1<T> _downstream;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private InnerObserver[] _observers;
    private int _winner;
    internal AmbCoordinator`1(IObserver`1<T> downstream, int n);
    internal static IDisposable Create(IObserver`1<T> observer, IObservable`1[] sources);
    internal void Subscribe(IObservable`1[] sources);
    public sealed virtual void Dispose();
    private bool TryWin(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.AmbManyArray`1 : BasicProducer`1<T> {
    private IObservable`1[] _sources;
    public AmbManyArray`1(IObservable`1[] sources);
    protected virtual IDisposable Run(IObserver`1<T> observer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.AmbManyEnumerable`1 : BasicProducer`1<T> {
    private IEnumerable`1<IObservable`1<T>> _sources;
    public AmbManyEnumerable`1(IEnumerable`1<IObservable`1<T>> sources);
    protected virtual IDisposable Run(IObserver`1<T> observer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.Any`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.AppendPrepend`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.AsObservable`1 : Producer`2<TSource, _<TSource>> {
    private IObservable`1<TSource> _source;
    public AsObservable`1(IObservable`1<TSource> source);
    public sealed virtual IObservable`1<TSource> Eval();
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Linq.ObservableImpl.AutoConnect`1 : object {
    private IConnectableObservable`1<T> _source;
    private int _minObservers;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<IDisposable> _onConnect;
    private int _count;
    internal AutoConnect`1(IConnectableObservable`1<T> source, int minObservers, Action`1<IDisposable> onConnect);
    public sealed virtual IDisposable Subscribe(IObserver`1<T> observer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.AverageDecimal : Producer`2<decimal, _> {
    private IObservable`1<decimal> _source;
    public AverageDecimal(IObservable`1<decimal> source);
    protected virtual _ CreateSink(IObserver`1<decimal> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.AverageDecimalNullable : Producer`2<Nullable`1<decimal>, _> {
    private IObservable`1<Nullable`1<decimal>> _source;
    public AverageDecimalNullable(IObservable`1<Nullable`1<decimal>> source);
    protected virtual _ CreateSink(IObserver`1<Nullable`1<decimal>> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.AverageDouble : Producer`2<double, _> {
    private IObservable`1<double> _source;
    public AverageDouble(IObservable`1<double> source);
    protected virtual _ CreateSink(IObserver`1<double> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.AverageDoubleNullable : Producer`2<Nullable`1<double>, _> {
    private IObservable`1<Nullable`1<double>> _source;
    public AverageDoubleNullable(IObservable`1<Nullable`1<double>> source);
    protected virtual _ CreateSink(IObserver`1<Nullable`1<double>> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.AverageInt32 : Producer`2<double, _> {
    private IObservable`1<int> _source;
    public AverageInt32(IObservable`1<int> source);
    protected virtual _ CreateSink(IObserver`1<double> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.AverageInt32Nullable : Producer`2<Nullable`1<double>, _> {
    private IObservable`1<Nullable`1<int>> _source;
    public AverageInt32Nullable(IObservable`1<Nullable`1<int>> source);
    protected virtual _ CreateSink(IObserver`1<Nullable`1<double>> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.AverageInt64 : Producer`2<double, _> {
    private IObservable`1<long> _source;
    public AverageInt64(IObservable`1<long> source);
    protected virtual _ CreateSink(IObserver`1<double> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.AverageInt64Nullable : Producer`2<Nullable`1<double>, _> {
    private IObservable`1<Nullable`1<long>> _source;
    public AverageInt64Nullable(IObservable`1<Nullable`1<long>> source);
    protected virtual _ CreateSink(IObserver`1<Nullable`1<double>> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.AverageSingle : Producer`2<float, _> {
    private IObservable`1<float> _source;
    public AverageSingle(IObservable`1<float> source);
    protected virtual _ CreateSink(IObserver`1<float> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.AverageSingleNullable : Producer`2<Nullable`1<float>, _> {
    private IObservable`1<Nullable`1<float>> _source;
    public AverageSingleNullable(IObservable`1<Nullable`1<float>> source);
    protected virtual _ CreateSink(IObserver`1<Nullable`1<float>> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal abstract class System.Reactive.Linq.ObservableImpl.BaseBlocking`1 : ManualResetEventSlim {
    internal T _value;
    internal bool _hasValue;
    internal Exception _error;
    public sealed virtual void OnCompleted();
    [NullableContextAttribute("1")]
public sealed virtual void OnError(Exception error);
    [NullableContextAttribute("1")]
public abstract virtual void OnNext(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.Buffer`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.Buffer`2 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Case`2 : Producer`2<TResult, _<TValue, TResult>> {
    private Func`1<TValue> _selector;
    private IDictionary`2<TValue, IObservable`1<TResult>> _sources;
    private IObservable`1<TResult> _defaultSource;
    public Case`2(Func`1<TValue> selector, IDictionary`2<TValue, IObservable`1<TResult>> sources, IObservable`1<TResult> defaultSource);
    public sealed virtual IObservable`1<TResult> Eval();
    protected virtual _<TValue, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<TValue, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Cast`2 : Producer`2<TResult, _<TSource, TResult>> {
    private IObservable`1<TSource> _source;
    public Cast`2(IObservable`1<TSource> source);
    protected virtual _<TSource, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<TSource, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Catch`1 : Producer`2<TSource, _<TSource>> {
    private IEnumerable`1<IObservable`1<TSource>> _sources;
    public Catch`1(IEnumerable`1<IObservable`1<TSource>> sources);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Catch`2 : Producer`2<TSource, _<TSource, TException>> {
    private IObservable`1<TSource> _source;
    private Func`2<TException, IObservable`1<TSource>> _handler;
    public Catch`2(IObservable`1<TSource> source, Func`2<TException, IObservable`1<TSource>> handler);
    protected virtual _<TSource, TException> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource, TException> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class System.Reactive.Linq.ObservableImpl.ClassicEventProducer`2 : EventProducer`2<TDelegate, TArgs> {
    private Action`1<TDelegate> _addHandler;
    private Action`1<TDelegate> _removeHandler;
    protected ClassicEventProducer`2(Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler, IScheduler scheduler);
    protected virtual IDisposable AddHandler(TDelegate handler);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Collect`2 : PushToPullAdapter`2<TSource, TResult> {
    private Func`1<TResult> _getInitialCollector;
    private Func`3<TResult, TSource, TResult> _merge;
    private Func`2<TResult, TResult> _getNewCollector;
    public Collect`2(IObservable`1<TSource> source, Func`1<TResult> getInitialCollector, Func`3<TResult, TSource, TResult> merge, Func`2<TResult, TResult> getNewCollector);
    protected virtual PushToPullSink`2<TSource, TResult> Run();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.CombineLatest`10 : Producer`2<TResult, _<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private IObservable`1<T5> _source5;
    private IObservable`1<T6> _source6;
    private IObservable`1<T7> _source7;
    private IObservable`1<T8> _source8;
    private IObservable`1<T9> _source9;
    private Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> _resultSelector;
    public CombineLatest`10(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.CombineLatest`11 : Producer`2<TResult, _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private IObservable`1<T5> _source5;
    private IObservable`1<T6> _source6;
    private IObservable`1<T7> _source7;
    private IObservable`1<T8> _source8;
    private IObservable`1<T9> _source9;
    private IObservable`1<T10> _source10;
    private Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> _resultSelector;
    public CombineLatest`11(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.CombineLatest`12 : Producer`2<TResult, _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private IObservable`1<T5> _source5;
    private IObservable`1<T6> _source6;
    private IObservable`1<T7> _source7;
    private IObservable`1<T8> _source8;
    private IObservable`1<T9> _source9;
    private IObservable`1<T10> _source10;
    private IObservable`1<T11> _source11;
    private Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> _resultSelector;
    public CombineLatest`12(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, IObservable`1<T11> source11, Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.CombineLatest`13 : Producer`2<TResult, _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private IObservable`1<T5> _source5;
    private IObservable`1<T6> _source6;
    private IObservable`1<T7> _source7;
    private IObservable`1<T8> _source8;
    private IObservable`1<T9> _source9;
    private IObservable`1<T10> _source10;
    private IObservable`1<T11> _source11;
    private IObservable`1<T12> _source12;
    private Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> _resultSelector;
    public CombineLatest`13(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, IObservable`1<T11> source11, IObservable`1<T12> source12, Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.CombineLatest`14 : Producer`2<TResult, _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private IObservable`1<T5> _source5;
    private IObservable`1<T6> _source6;
    private IObservable`1<T7> _source7;
    private IObservable`1<T8> _source8;
    private IObservable`1<T9> _source9;
    private IObservable`1<T10> _source10;
    private IObservable`1<T11> _source11;
    private IObservable`1<T12> _source12;
    private IObservable`1<T13> _source13;
    private Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> _resultSelector;
    public CombineLatest`14(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, IObservable`1<T11> source11, IObservable`1<T12> source12, IObservable`1<T13> source13, Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.CombineLatest`15 : Producer`2<TResult, _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private IObservable`1<T5> _source5;
    private IObservable`1<T6> _source6;
    private IObservable`1<T7> _source7;
    private IObservable`1<T8> _source8;
    private IObservable`1<T9> _source9;
    private IObservable`1<T10> _source10;
    private IObservable`1<T11> _source11;
    private IObservable`1<T12> _source12;
    private IObservable`1<T13> _source13;
    private IObservable`1<T14> _source14;
    private Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> _resultSelector;
    public CombineLatest`15(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, IObservable`1<T11> source11, IObservable`1<T12> source12, IObservable`1<T13> source13, IObservable`1<T14> source14, Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.CombineLatest`16 : Producer`2<TResult, _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private IObservable`1<T5> _source5;
    private IObservable`1<T6> _source6;
    private IObservable`1<T7> _source7;
    private IObservable`1<T8> _source8;
    private IObservable`1<T9> _source9;
    private IObservable`1<T10> _source10;
    private IObservable`1<T11> _source11;
    private IObservable`1<T12> _source12;
    private IObservable`1<T13> _source13;
    private IObservable`1<T14> _source14;
    private IObservable`1<T15> _source15;
    private Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> _resultSelector;
    public CombineLatest`16(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, IObservable`1<T11> source11, IObservable`1<T12> source12, IObservable`1<T13> source13, IObservable`1<T14> source14, IObservable`1<T15> source15, Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.CombineLatest`17 : Producer`2<TResult, _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private IObservable`1<T5> _source5;
    private IObservable`1<T6> _source6;
    private IObservable`1<T7> _source7;
    private IObservable`1<T8> _source8;
    private IObservable`1<T9> _source9;
    private IObservable`1<T10> _source10;
    private IObservable`1<T11> _source11;
    private IObservable`1<T12> _source12;
    private IObservable`1<T13> _source13;
    private IObservable`1<T14> _source14;
    private IObservable`1<T15> _source15;
    private IObservable`1<T16> _source16;
    private Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> _resultSelector;
    public CombineLatest`17(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, IObservable`1<T11> source11, IObservable`1<T12> source12, IObservable`1<T13> source13, IObservable`1<T14> source14, IObservable`1<T15> source15, IObservable`1<T16> source16, Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.CombineLatest`2 : Producer`2<TResult, _<TSource, TResult>> {
    private IEnumerable`1<IObservable`1<TSource>> _sources;
    private Func`2<IList`1<TSource>, TResult> _resultSelector;
    public CombineLatest`2(IEnumerable`1<IObservable`1<TSource>> sources, Func`2<IList`1<TSource>, TResult> resultSelector);
    protected virtual _<TSource, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<TSource, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.CombineLatest`3 : Producer`2<TResult, _<TFirst, TSecond, TResult>> {
    private IObservable`1<TFirst> _first;
    private IObservable`1<TSecond> _second;
    private Func`3<TFirst, TSecond, TResult> _resultSelector;
    public CombineLatest`3(IObservable`1<TFirst> first, IObservable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector);
    protected virtual _<TFirst, TSecond, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<TFirst, TSecond, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.CombineLatest`4 : Producer`2<TResult, _<T1, T2, T3, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private Func`4<T1, T2, T3, TResult> _resultSelector;
    public CombineLatest`4(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, Func`4<T1, T2, T3, TResult> resultSelector);
    protected virtual _<T1, T2, T3, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.CombineLatest`5 : Producer`2<TResult, _<T1, T2, T3, T4, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private Func`5<T1, T2, T3, T4, TResult> _resultSelector;
    public CombineLatest`5(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, Func`5<T1, T2, T3, T4, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.CombineLatest`6 : Producer`2<TResult, _<T1, T2, T3, T4, T5, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private IObservable`1<T5> _source5;
    private Func`6<T1, T2, T3, T4, T5, TResult> _resultSelector;
    public CombineLatest`6(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, Func`6<T1, T2, T3, T4, T5, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, T5, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, T5, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.CombineLatest`7 : Producer`2<TResult, _<T1, T2, T3, T4, T5, T6, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private IObservable`1<T5> _source5;
    private IObservable`1<T6> _source6;
    private Func`7<T1, T2, T3, T4, T5, T6, TResult> _resultSelector;
    public CombineLatest`7(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, Func`7<T1, T2, T3, T4, T5, T6, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, T5, T6, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, T5, T6, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.CombineLatest`8 : Producer`2<TResult, _<T1, T2, T3, T4, T5, T6, T7, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private IObservable`1<T5> _source5;
    private IObservable`1<T6> _source6;
    private IObservable`1<T7> _source7;
    private Func`8<T1, T2, T3, T4, T5, T6, T7, TResult> _resultSelector;
    public CombineLatest`8(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, Func`8<T1, T2, T3, T4, T5, T6, T7, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, T5, T6, T7, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, T5, T6, T7, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.CombineLatest`9 : Producer`2<TResult, _<T1, T2, T3, T4, T5, T6, T7, T8, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private IObservable`1<T5> _source5;
    private IObservable`1<T6> _source6;
    private IObservable`1<T7> _source7;
    private IObservable`1<T8> _source8;
    private Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> _resultSelector;
    public CombineLatest`9(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, T5, T6, T7, T8, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, T5, T6, T7, T8, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.CombineLatestObserver`1 : SafeObserver`1<T> {
    private object _gate;
    private ICombineLatest _parent;
    private int _index;
    [NullableAttribute("2")]
private T _value;
    [NullableAttribute("2")]
public T Value { get; }
    public CombineLatestObserver`1(object gate, ICombineLatest parent, int index);
    [NullableContextAttribute("2")]
public T get_Value();
    public virtual void OnNext(T value);
    public virtual void OnError(Exception error);
    public virtual void OnCompleted();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class System.Reactive.Linq.ObservableImpl.CombineLatestSink`1 : IdentitySink`1<TResult> {
    protected object _gate;
    private bool _hasValueAll;
    private Boolean[] _hasValue;
    private Boolean[] _isDone;
    protected CombineLatestSink`1(int arity, IObserver`1<TResult> observer);
    public sealed virtual void Next(int index);
    protected abstract virtual TResult GetResult();
    public sealed virtual void Fail(Exception error);
    public sealed virtual void Done(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Concat`1 : Producer`2<TSource, _<TSource>> {
    private IEnumerable`1<IObservable`1<TSource>> _sources;
    public Concat`1(IEnumerable`1<IObservable`1<TSource>> sources);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
    public sealed virtual IEnumerable`1<IObservable`1<TSource>> GetSources();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Linq.ObservableImpl.ConcatMany`1 : object {
    private IObservable`1<IObservable`1<T>> _sources;
    internal ConcatMany`1(IObservable`1<IObservable`1<T>> sources);
    public sealed virtual IDisposable Subscribe(IObserver`1<T> observer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Contains`1 : Producer`2<bool, _<TSource>> {
    private IObservable`1<TSource> _source;
    private TSource _value;
    private IEqualityComparer`1<TSource> _comparer;
    public Contains`1(IObservable`1<TSource> source, TSource value, IEqualityComparer`1<TSource> comparer);
    protected virtual _<TSource> CreateSink(IObserver`1<bool> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.Count`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.DefaultIfEmpty`1 : Producer`2<TSource, _<TSource>> {
    private IObservable`1<TSource> _source;
    private TSource _defaultValue;
    public DefaultIfEmpty`1(IObservable`1<TSource> source, TSource defaultValue);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Defer`1 : Producer`2<TValue, _<TValue>> {
    private Func`1<IObservable`1<TValue>> _observableFactory;
    public Defer`1(Func`1<IObservable`1<TValue>> observableFactory);
    protected virtual _<TValue> CreateSink(IObserver`1<TValue> observer);
    protected virtual void Run(_<TValue> sink);
    public sealed virtual IObservable`1<TValue> Eval();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.Delay`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.Delay`2 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class System.Reactive.Linq.ObservableImpl.DelaySubscription`1 : Producer`2<TSource, _<TSource>> {
    private IObservable`1<TSource> _source;
    private IScheduler _scheduler;
    protected DelaySubscription`1(IObservable`1<TSource> source, IScheduler scheduler);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Dematerialize`1 : Producer`2<TSource, _<TSource>> {
    private IObservable`1<Notification`1<TSource>> _source;
    public Dematerialize`1(IObservable`1<Notification`1<TSource>> source);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Distinct`2 : Producer`2<TSource, _<TSource, TKey>> {
    private IObservable`1<TSource> _source;
    private Func`2<TSource, TKey> _keySelector;
    private IEqualityComparer`1<TKey> _comparer;
    public Distinct`2(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    protected virtual _<TSource, TKey> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource, TKey> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.DistinctUntilChanged`2 : Producer`2<TSource, _<TSource, TKey>> {
    private IObservable`1<TSource> _source;
    private Func`2<TSource, TKey> _keySelector;
    private IEqualityComparer`1<TKey> _comparer;
    public DistinctUntilChanged`2(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    protected virtual _<TSource, TKey> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource, TKey> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.Do`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.DoWhile`1 : Producer`2<TSource, _<TSource>> {
    private IObservable`1<TSource> _source;
    private Func`1<bool> _condition;
    public DoWhile`1(IObservable`1<TSource> source, Func`1<bool> condition);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
    [IteratorStateMachineAttribute("System.Reactive.Linq.ObservableImpl.DoWhile`1/<GetSources>d__5")]
public sealed virtual IEnumerable`1<IObservable`1<TSource>> GetSources();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.ElementAt`1 : Producer`2<TSource, _<TSource>> {
    private IObservable`1<TSource> _source;
    private int _index;
    public ElementAt`1(IObservable`1<TSource> source, int index);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.ElementAtOrDefault`1 : Producer`2<TSource, _<TSource>> {
    private IObservable`1<TSource> _source;
    private int _index;
    public ElementAtOrDefault`1(IObservable`1<TSource> source, int index);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Empty`1 : Producer`2<TResult, _<TResult>> {
    private IScheduler _scheduler;
    public Empty`1(IScheduler scheduler);
    protected virtual _<TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.EmptyDirect`1 : BasicProducer`1<TResult> {
    internal static IObservable`1<TResult> Instance;
    private static EmptyDirect`1();
    protected virtual IDisposable Run(IObserver`1<TResult> observer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class System.Reactive.Linq.ObservableImpl.EventProducer`2 : BasicProducer`1<TArgs> {
    private IScheduler _scheduler;
    private object _gate;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Session<TDelegate, TArgs> _session;
    protected EventProducer`2(IScheduler scheduler);
    protected abstract virtual TDelegate GetHandler(Action`1<TArgs> onNext);
    protected abstract virtual IDisposable AddHandler(TDelegate handler);
    protected virtual IDisposable Run(IObserver`1<TArgs> observer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Finally`1 : Producer`2<TSource, _<TSource>> {
    private IObservable`1<TSource> _source;
    private Action _finallyAction;
    public Finally`1(IObservable`1<TSource> source, Action finallyAction);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.FirstAsync`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.FirstBlocking`1 : BaseBlocking`1<T> {
    public virtual void OnNext(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.FirstOrDefaultAsync`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.For`2 : Producer`2<TResult, _<TSource, TResult>> {
    private IEnumerable`1<TSource> _source;
    private Func`2<TSource, IObservable`1<TResult>> _resultSelector;
    public For`2(IEnumerable`1<TSource> source, Func`2<TSource, IObservable`1<TResult>> resultSelector);
    protected virtual _<TSource, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<TSource, TResult> sink);
    [IteratorStateMachineAttribute("System.Reactive.Linq.ObservableImpl.For`2/<GetSources>d__5")]
public sealed virtual IEnumerable`1<IObservable`1<TResult>> GetSources();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Linq.ObservableImpl.ForEach`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.FromEvent`2 : ClassicEventProducer`2<TDelegate, TEventArgs> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<Action`1<TEventArgs>, TDelegate> _conversion;
    public FromEvent`2(Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler, IScheduler scheduler);
    public FromEvent`2(Func`2<Action`1<TEventArgs>, TDelegate> conversion, Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler, IScheduler scheduler);
    protected virtual TDelegate GetHandler(Action`1<TEventArgs> onNext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Linq.ObservableImpl.FromEventPattern : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.Generate`2 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Linq.ObservableImpl.GetEnumerator`1 : object {
    private ConcurrentQueue`1<TSource> _queue;
    [NullableAttribute("2")]
private TSource _current;
    [NullableAttribute("2")]
private Exception _error;
    private bool _done;
    private bool _disposed;
    private SingleAssignmentDisposableValue _subscription;
    private SemaphoreSlim _gate;
    public TSource Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public IEnumerator`1<TSource> Run(IObservable`1<TSource> source);
    public sealed virtual void OnNext(TSource value);
    public sealed virtual void OnError(Exception error);
    public sealed virtual void OnCompleted();
    public sealed virtual bool MoveNext();
    public sealed virtual TSource get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual void Dispose();
    public sealed virtual void Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.GroupBy`3 : Producer`2<IGroupedObservable`2<TKey, TElement>, _<TSource, TKey, TElement>> {
    private IObservable`1<TSource> _source;
    private Func`2<TSource, TKey> _keySelector;
    private Func`2<TSource, TElement> _elementSelector;
    private Nullable`1<int> _capacity;
    private IEqualityComparer`1<TKey> _comparer;
    public GroupBy`3(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Nullable`1<int> capacity, IEqualityComparer`1<TKey> comparer);
    protected virtual _<TSource, TKey, TElement> CreateSink(IObserver`1<IGroupedObservable`2<TKey, TElement>> observer);
    protected virtual void Run(_<TSource, TKey, TElement> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.GroupByUntil`4 : Producer`2<IGroupedObservable`2<TKey, TElement>, _<TSource, TKey, TElement, TDuration>> {
    private IObservable`1<TSource> _source;
    private Func`2<TSource, TKey> _keySelector;
    private Func`2<TSource, TElement> _elementSelector;
    private Func`2<IGroupedObservable`2<TKey, TElement>, IObservable`1<TDuration>> _durationSelector;
    private Nullable`1<int> _capacity;
    private IEqualityComparer`1<TKey> _comparer;
    public GroupByUntil`4(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`2<IGroupedObservable`2<TKey, TElement>, IObservable`1<TDuration>> durationSelector, Nullable`1<int> capacity, IEqualityComparer`1<TKey> comparer);
    protected virtual _<TSource, TKey, TElement, TDuration> CreateSink(IObserver`1<IGroupedObservable`2<TKey, TElement>> observer);
    protected virtual void Run(_<TSource, TKey, TElement, TDuration> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.GroupJoin`5 : Producer`2<TResult, _<TLeft, TRight, TLeftDuration, TRightDuration, TResult>> {
    private IObservable`1<TLeft> _left;
    private IObservable`1<TRight> _right;
    private Func`2<TLeft, IObservable`1<TLeftDuration>> _leftDurationSelector;
    private Func`2<TRight, IObservable`1<TRightDuration>> _rightDurationSelector;
    private Func`3<TLeft, IObservable`1<TRight>, TResult> _resultSelector;
    public GroupJoin`5(IObservable`1<TLeft> left, IObservable`1<TRight> right, Func`2<TLeft, IObservable`1<TLeftDuration>> leftDurationSelector, Func`2<TRight, IObservable`1<TRightDuration>> rightDurationSelector, Func`3<TLeft, IObservable`1<TRight>, TResult> resultSelector);
    protected virtual _<TLeft, TRight, TLeftDuration, TRightDuration, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<TLeft, TRight, TLeftDuration, TRightDuration, TResult> sink);
}
[NullableContextAttribute("1")]
internal interface System.Reactive.Linq.ObservableImpl.ICombineLatest {
    public abstract virtual void Next(int index);
    public abstract virtual void Fail(Exception error);
    public abstract virtual void Done(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.If`1 : Producer`2<TResult, _<TResult>> {
    private Func`1<bool> _condition;
    private IObservable`1<TResult> _thenSource;
    private IObservable`1<TResult> _elseSource;
    public If`1(Func`1<bool> condition, IObservable`1<TResult> thenSource, IObservable`1<TResult> elseSource);
    public sealed virtual IObservable`1<TResult> Eval();
    protected virtual _<TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.IgnoreElements`1 : Producer`2<TSource, _<TSource>> {
    private IObservable`1<TSource> _source;
    public IgnoreElements`1(IObservable`1<TSource> source);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.IsEmpty`1 : Producer`2<bool, _<TSource>> {
    private IObservable`1<TSource> _source;
    public IsEmpty`1(IObservable`1<TSource> source);
    protected virtual _<TSource> CreateSink(IObserver`1<bool> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
internal interface System.Reactive.Linq.ObservableImpl.IZip {
    public abstract virtual void Next(int index);
    public abstract virtual void Fail(Exception error);
    public abstract virtual void Done(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Join`5 : Producer`2<TResult, _<TLeft, TRight, TLeftDuration, TRightDuration, TResult>> {
    private IObservable`1<TLeft> _left;
    private IObservable`1<TRight> _right;
    private Func`2<TLeft, IObservable`1<TLeftDuration>> _leftDurationSelector;
    private Func`2<TRight, IObservable`1<TRightDuration>> _rightDurationSelector;
    private Func`3<TLeft, TRight, TResult> _resultSelector;
    public Join`5(IObservable`1<TLeft> left, IObservable`1<TRight> right, Func`2<TLeft, IObservable`1<TLeftDuration>> leftDurationSelector, Func`2<TRight, IObservable`1<TRightDuration>> rightDurationSelector, Func`3<TLeft, TRight, TResult> resultSelector);
    protected virtual _<TLeft, TRight, TLeftDuration, TRightDuration, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<TLeft, TRight, TLeftDuration, TRightDuration, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.LastAsync`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.LastBlocking`1 : BaseBlocking`1<T> {
    public virtual void OnNext(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.LastOrDefaultAsync`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Latest`1 : PushToPullAdapter`2<TSource, TSource> {
    public Latest`1(IObservable`1<TSource> source);
    protected virtual PushToPullSink`2<TSource, TSource> Run();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.LongCount`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Materialize`1 : Producer`2<Notification`1<TSource>, _<TSource>> {
    private IObservable`1<TSource> _source;
    public Materialize`1(IObservable`1<TSource> source);
    public IObservable`1<TSource> Dematerialize();
    protected virtual _<TSource> CreateSink(IObserver`1<Notification`1<TSource>> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Max`1 : Producer`2<TSource, _<TSource>> {
    private IObservable`1<TSource> _source;
    private IComparer`1<TSource> _comparer;
    public Max`1(IObservable`1<TSource> source, IComparer`1<TSource> comparer);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.MaxBy`2 : Producer`2<IList`1<TSource>, _<TSource, TKey>> {
    private IObservable`1<TSource> _source;
    private Func`2<TSource, TKey> _keySelector;
    private IComparer`1<TKey> _comparer;
    public MaxBy`2(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    protected virtual _<TSource, TKey> CreateSink(IObserver`1<IList`1<TSource>> observer);
    protected virtual void Run(_<TSource, TKey> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.MaxDecimal : Producer`2<decimal, _> {
    private IObservable`1<decimal> _source;
    public MaxDecimal(IObservable`1<decimal> source);
    protected virtual _ CreateSink(IObserver`1<decimal> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.MaxDecimalNullable : Producer`2<Nullable`1<decimal>, _> {
    private IObservable`1<Nullable`1<decimal>> _source;
    public MaxDecimalNullable(IObservable`1<Nullable`1<decimal>> source);
    protected virtual _ CreateSink(IObserver`1<Nullable`1<decimal>> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.MaxDouble : Producer`2<double, _> {
    private IObservable`1<double> _source;
    public MaxDouble(IObservable`1<double> source);
    protected virtual _ CreateSink(IObserver`1<double> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.MaxDoubleNullable : Producer`2<Nullable`1<double>, _> {
    private IObservable`1<Nullable`1<double>> _source;
    public MaxDoubleNullable(IObservable`1<Nullable`1<double>> source);
    protected virtual _ CreateSink(IObserver`1<Nullable`1<double>> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.MaxInt32 : Producer`2<int, _> {
    private IObservable`1<int> _source;
    public MaxInt32(IObservable`1<int> source);
    protected virtual _ CreateSink(IObserver`1<int> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.MaxInt32Nullable : Producer`2<Nullable`1<int>, _> {
    private IObservable`1<Nullable`1<int>> _source;
    public MaxInt32Nullable(IObservable`1<Nullable`1<int>> source);
    protected virtual _ CreateSink(IObserver`1<Nullable`1<int>> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.MaxInt64 : Producer`2<long, _> {
    private IObservable`1<long> _source;
    public MaxInt64(IObservable`1<long> source);
    protected virtual _ CreateSink(IObserver`1<long> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.MaxInt64Nullable : Producer`2<Nullable`1<long>, _> {
    private IObservable`1<Nullable`1<long>> _source;
    public MaxInt64Nullable(IObservable`1<Nullable`1<long>> source);
    protected virtual _ CreateSink(IObserver`1<Nullable`1<long>> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.MaxSingle : Producer`2<float, _> {
    private IObservable`1<float> _source;
    public MaxSingle(IObservable`1<float> source);
    protected virtual _ CreateSink(IObserver`1<float> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.MaxSingleNullable : Producer`2<Nullable`1<float>, _> {
    private IObservable`1<Nullable`1<float>> _source;
    public MaxSingleNullable(IObservable`1<Nullable`1<float>> source);
    protected virtual _ CreateSink(IObserver`1<Nullable`1<float>> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.Merge`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Min`1 : Producer`2<TSource, _<TSource>> {
    private IObservable`1<TSource> _source;
    private IComparer`1<TSource> _comparer;
    public Min`1(IObservable`1<TSource> source, IComparer`1<TSource> comparer);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.MinBy`2 : Producer`2<IList`1<TSource>, _<TSource, TKey>> {
    private IObservable`1<TSource> _source;
    private Func`2<TSource, TKey> _keySelector;
    private IComparer`1<TKey> _comparer;
    public MinBy`2(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    protected virtual _<TSource, TKey> CreateSink(IObserver`1<IList`1<TSource>> observer);
    protected virtual void Run(_<TSource, TKey> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.MinDecimal : Producer`2<decimal, _> {
    private IObservable`1<decimal> _source;
    public MinDecimal(IObservable`1<decimal> source);
    protected virtual _ CreateSink(IObserver`1<decimal> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.MinDecimalNullable : Producer`2<Nullable`1<decimal>, _> {
    private IObservable`1<Nullable`1<decimal>> _source;
    public MinDecimalNullable(IObservable`1<Nullable`1<decimal>> source);
    protected virtual _ CreateSink(IObserver`1<Nullable`1<decimal>> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.MinDouble : Producer`2<double, _> {
    private IObservable`1<double> _source;
    public MinDouble(IObservable`1<double> source);
    protected virtual _ CreateSink(IObserver`1<double> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.MinDoubleNullable : Producer`2<Nullable`1<double>, _> {
    private IObservable`1<Nullable`1<double>> _source;
    public MinDoubleNullable(IObservable`1<Nullable`1<double>> source);
    protected virtual _ CreateSink(IObserver`1<Nullable`1<double>> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.MinInt32 : Producer`2<int, _> {
    private IObservable`1<int> _source;
    public MinInt32(IObservable`1<int> source);
    protected virtual _ CreateSink(IObserver`1<int> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.MinInt32Nullable : Producer`2<Nullable`1<int>, _> {
    private IObservable`1<Nullable`1<int>> _source;
    public MinInt32Nullable(IObservable`1<Nullable`1<int>> source);
    protected virtual _ CreateSink(IObserver`1<Nullable`1<int>> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.MinInt64 : Producer`2<long, _> {
    private IObservable`1<long> _source;
    public MinInt64(IObservable`1<long> source);
    protected virtual _ CreateSink(IObserver`1<long> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.MinInt64Nullable : Producer`2<Nullable`1<long>, _> {
    private IObservable`1<Nullable`1<long>> _source;
    public MinInt64Nullable(IObservable`1<Nullable`1<long>> source);
    protected virtual _ CreateSink(IObserver`1<Nullable`1<long>> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.MinSingle : Producer`2<float, _> {
    private IObservable`1<float> _source;
    public MinSingle(IObservable`1<float> source);
    protected virtual _ CreateSink(IObserver`1<float> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.MinSingleNullable : Producer`2<Nullable`1<float>, _> {
    private IObservable`1<Nullable`1<float>> _source;
    public MinSingleNullable(IObservable`1<Nullable`1<float>> source);
    protected virtual _ CreateSink(IObserver`1<Nullable`1<float>> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.MostRecent`1 : PushToPullAdapter`2<TSource, TSource> {
    private TSource _initialValue;
    public MostRecent`1(IObservable`1<TSource> source, TSource initialValue);
    protected virtual PushToPullSink`2<TSource, TSource> Run();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Multicast`3 : Producer`2<TResult, _<TSource, TIntermediate, TResult>> {
    private IObservable`1<TSource> _source;
    private Func`1<ISubject`2<TSource, TIntermediate>> _subjectSelector;
    private Func`2<IObservable`1<TIntermediate>, IObservable`1<TResult>> _selector;
    public Multicast`3(IObservable`1<TSource> source, Func`1<ISubject`2<TSource, TIntermediate>> subjectSelector, Func`2<IObservable`1<TIntermediate>, IObservable`1<TResult>> selector);
    protected virtual _<TSource, TIntermediate, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<TSource, TIntermediate, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Linq.ObservableImpl.Never`1 : object {
    internal static IObservable`1<TResult> Default;
    private static Never`1();
    public sealed virtual IDisposable Subscribe(IObserver`1<TResult> observer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Next`1 : PushToPullAdapter`2<TSource, TSource> {
    public Next`1(IObservable`1<TSource> source);
    protected virtual PushToPullSink`2<TSource, TSource> Run();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.OfType`2 : Producer`2<TResult, _<TSource, TResult>> {
    private IObservable`1<TSource> _source;
    public OfType`2(IObservable`1<TSource> source);
    protected virtual _<TSource, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<TSource, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.OnErrorResumeNext`1 : Producer`2<TSource, _<TSource>> {
    private IEnumerable`1<IObservable`1<TSource>> _sources;
    public OnErrorResumeNext`1(IEnumerable`1<IObservable`1<TSource>> sources);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class System.Reactive.Linq.ObservableImpl.PushToPullAdapter`2 : object {
    private IObservable`1<TSource> _source;
    protected PushToPullAdapter`2(IObservable`1<TSource> source);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<TResult> GetEnumerator();
    protected abstract virtual PushToPullSink`2<TSource, TResult> Run();
}
internal abstract class System.Reactive.Linq.ObservableImpl.PushToPullSink`2 : object {
    private SingleAssignmentDisposableValue _upstream;
    private bool _done;
    [CompilerGeneratedAttribute]
private TResult <Current>k__BackingField;
    public TResult Current { get; private set; }
    private object System.Collections.IEnumerator.Current { get; }
    [NullableContextAttribute("1")]
public abstract virtual void OnNext(TSource value);
    [NullableContextAttribute("1")]
public abstract virtual void OnError(Exception error);
    public abstract virtual void OnCompleted();
    [NullableContextAttribute("1")]
public abstract virtual bool TryMoveNext(TResult& current);
    public sealed virtual bool MoveNext();
    [CompilerGeneratedAttribute]
public sealed virtual TResult get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(TResult value);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
public void SetUpstream(IDisposable d);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.RangeLongRunning : Producer`2<int, RangeSink> {
    private int _start;
    private int _count;
    private ISchedulerLongRunning _scheduler;
    public RangeLongRunning(int start, int count, ISchedulerLongRunning scheduler);
    protected virtual RangeSink CreateSink(IObserver`1<int> observer);
    protected virtual void Run(RangeSink sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.RangeRecursive : Producer`2<int, RangeSink> {
    private int _start;
    private int _count;
    private IScheduler _scheduler;
    public RangeRecursive(int start, int count, IScheduler scheduler);
    protected virtual RangeSink CreateSink(IObserver`1<int> observer);
    protected virtual void Run(RangeSink sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Linq.ObservableImpl.RedoSerializedObserver`1 : object {
    private static Exception SignaledIndicator;
    private IObserver`1<X> _downstream;
    private ConcurrentQueue`1<X> _queue;
    private int _wip;
    [NullableAttribute("2")]
private Exception _terminalException;
    internal RedoSerializedObserver`1(IObserver`1<X> downstream);
    private static RedoSerializedObserver`1();
    public sealed virtual void OnCompleted();
    public sealed virtual void OnError(Exception error);
    public sealed virtual void OnNext(X value);
    private void Clear();
    private void Drain();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.RefCount`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.Repeat`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Linq.ObservableImpl.RepeatWhen`2 : object {
    private IObservable`1<T> _source;
    private Func`2<IObservable`1<object>, IObservable`1<U>> _handler;
    internal RepeatWhen`2(IObservable`1<T> source, Func`2<IObservable`1<object>, IObservable`1<U>> handler);
    public sealed virtual IDisposable Subscribe(IObserver`1<T> observer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Linq.ObservableImpl.RetryWhen`2 : object {
    private IObservable`1<T> _source;
    private Func`2<IObservable`1<Exception>, IObservable`1<U>> _handler;
    internal RetryWhen`2(IObservable`1<T> source, Func`2<IObservable`1<Exception>, IObservable`1<U>> handler);
    public sealed virtual IDisposable Subscribe(IObserver`1<T> observer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Return`1 : Producer`2<TResult, _<TResult>> {
    private TResult _value;
    private IScheduler _scheduler;
    public Return`1(TResult value, IScheduler scheduler);
    protected virtual _<TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.ReturnImmediate`1 : BasicProducer`1<TSource> {
    private TSource _value;
    public ReturnImmediate`1(TSource value);
    protected virtual IDisposable Run(IObserver`1<TSource> observer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Sample`1 : Producer`2<TSource, _<TSource>> {
    private IObservable`1<TSource> _source;
    private TimeSpan _interval;
    private IScheduler _scheduler;
    public Sample`1(IObservable`1<TSource> source, TimeSpan interval, IScheduler scheduler);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Sample`2 : Producer`2<TSource, _<TSource, TSample>> {
    private IObservable`1<TSource> _source;
    private IObservable`1<TSample> _sampler;
    public Sample`2(IObservable`1<TSource> source, IObservable`1<TSample> sampler);
    protected virtual _<TSource, TSample> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource, TSample> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Scan`1 : Producer`2<TSource, _<TSource>> {
    private IObservable`1<TSource> _source;
    private Func`3<TSource, TSource, TSource> _accumulator;
    public Scan`1(IObservable`1<TSource> source, Func`3<TSource, TSource, TSource> accumulator);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Scan`2 : Producer`2<TAccumulate, _<TSource, TAccumulate>> {
    private IObservable`1<TSource> _source;
    private TAccumulate _seed;
    private Func`3<TAccumulate, TSource, TAccumulate> _accumulator;
    public Scan`2(IObservable`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> accumulator);
    protected virtual _<TSource, TAccumulate> CreateSink(IObserver`1<TAccumulate> observer);
    protected virtual void Run(_<TSource, TAccumulate> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.Select`2 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.SelectMany`2 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.SelectMany`3 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.SequenceEqual`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.SingleAsync`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.SingleBlocking`1 : BaseBlocking`1<T> {
    internal bool _hasMoreThanOneElement;
    public virtual void OnNext(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.SingleOrDefaultAsync`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.Skip`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.SkipLast`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.SkipUntil`1 : Producer`2<TSource, _<TSource>> {
    private IObservable`1<TSource> _source;
    private DateTimeOffset _startTime;
    internal IScheduler _scheduler;
    public SkipUntil`1(IObservable`1<TSource> source, DateTimeOffset startTime, IScheduler scheduler);
    public IObservable`1<TSource> Combine(DateTimeOffset startTime);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.SkipUntil`2 : Producer`2<TSource, _<TSource, TOther>> {
    private IObservable`1<TSource> _source;
    private IObservable`1<TOther> _other;
    public SkipUntil`2(IObservable`1<TSource> source, IObservable`1<TOther> other);
    protected virtual _<TSource, TOther> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource, TOther> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.SkipWhile`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.SumDecimal : Producer`2<decimal, _> {
    private IObservable`1<decimal> _source;
    public SumDecimal(IObservable`1<decimal> source);
    protected virtual _ CreateSink(IObserver`1<decimal> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.SumDecimalNullable : Producer`2<Nullable`1<decimal>, _> {
    private IObservable`1<Nullable`1<decimal>> _source;
    public SumDecimalNullable(IObservable`1<Nullable`1<decimal>> source);
    protected virtual _ CreateSink(IObserver`1<Nullable`1<decimal>> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.SumDouble : Producer`2<double, _> {
    private IObservable`1<double> _source;
    public SumDouble(IObservable`1<double> source);
    protected virtual _ CreateSink(IObserver`1<double> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.SumDoubleNullable : Producer`2<Nullable`1<double>, _> {
    private IObservable`1<Nullable`1<double>> _source;
    public SumDoubleNullable(IObservable`1<Nullable`1<double>> source);
    protected virtual _ CreateSink(IObserver`1<Nullable`1<double>> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.SumInt32 : Producer`2<int, _> {
    private IObservable`1<int> _source;
    public SumInt32(IObservable`1<int> source);
    protected virtual _ CreateSink(IObserver`1<int> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.SumInt32Nullable : Producer`2<Nullable`1<int>, _> {
    private IObservable`1<Nullable`1<int>> _source;
    public SumInt32Nullable(IObservable`1<Nullable`1<int>> source);
    protected virtual _ CreateSink(IObserver`1<Nullable`1<int>> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.SumInt64 : Producer`2<long, _> {
    private IObservable`1<long> _source;
    public SumInt64(IObservable`1<long> source);
    protected virtual _ CreateSink(IObserver`1<long> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.SumInt64Nullable : Producer`2<Nullable`1<long>, _> {
    private IObservable`1<Nullable`1<long>> _source;
    public SumInt64Nullable(IObservable`1<Nullable`1<long>> source);
    protected virtual _ CreateSink(IObserver`1<Nullable`1<long>> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.SumSingle : Producer`2<float, _> {
    private IObservable`1<float> _source;
    public SumSingle(IObservable`1<float> source);
    protected virtual _ CreateSink(IObserver`1<float> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.SumSingleNullable : Producer`2<Nullable`1<float>, _> {
    private IObservable`1<Nullable`1<float>> _source;
    public SumSingleNullable(IObservable`1<Nullable`1<float>> source);
    protected virtual _ CreateSink(IObserver`1<Nullable`1<float>> observer);
    protected virtual void Run(_ sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Switch`1 : Producer`2<TSource, _<TSource>> {
    private IObservable`1<IObservable`1<TSource>> _sources;
    public Switch`1(IObservable`1<IObservable`1<TSource>> sources);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Synchronize`1 : Producer`2<TSource, _<TSource>> {
    private IObservable`1<TSource> _source;
    [NullableAttribute("2")]
private object _gate;
    public Synchronize`1(IObservable`1<TSource> source, object gate);
    public Synchronize`1(IObservable`1<TSource> source);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.Take`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.TakeLast`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.TakeLastBuffer`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.TakeUntil`1 : Producer`2<TSource, _<TSource>> {
    private IObservable`1<TSource> _source;
    private DateTimeOffset _endTime;
    internal IScheduler _scheduler;
    public TakeUntil`1(IObservable`1<TSource> source, DateTimeOffset endTime, IScheduler scheduler);
    public IObservable`1<TSource> Combine(DateTimeOffset endTime);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.TakeUntil`2 : Producer`2<TSource, _<TSource, TOther>> {
    private IObservable`1<TSource> _source;
    private IObservable`1<TOther> _other;
    public TakeUntil`2(IObservable`1<TSource> source, IObservable`1<TOther> other);
    protected virtual _<TSource, TOther> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource, TOther> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.TakeUntilPredicate`1 : Producer`2<TSource, TakeUntilPredicateObserver<TSource>> {
    private IObservable`1<TSource> _source;
    private Func`2<TSource, bool> _stopPredicate;
    public TakeUntilPredicate`1(IObservable`1<TSource> source, Func`2<TSource, bool> stopPredicate);
    protected virtual TakeUntilPredicateObserver<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(TakeUntilPredicateObserver<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.TakeWhile`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Throttle`1 : Producer`2<TSource, _<TSource>> {
    private IObservable`1<TSource> _source;
    private TimeSpan _dueTime;
    private IScheduler _scheduler;
    public Throttle`1(IObservable`1<TSource> source, TimeSpan dueTime, IScheduler scheduler);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Throttle`2 : Producer`2<TSource, _<TSource, TThrottle>> {
    private IObservable`1<TSource> _source;
    private Func`2<TSource, IObservable`1<TThrottle>> _throttleSelector;
    public Throttle`2(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TThrottle>> throttleSelector);
    protected virtual _<TSource, TThrottle> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource, TThrottle> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Throw`1 : Producer`2<TResult, _<TResult>> {
    private Exception _exception;
    private IScheduler _scheduler;
    public Throw`1(Exception exception, IScheduler scheduler);
    protected virtual _<TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.ThrowImmediate`1 : BasicProducer`1<TSource> {
    private Exception _exception;
    public ThrowImmediate`1(Exception exception);
    protected virtual IDisposable Run(IObserver`1<TSource> observer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.TimeInterval`1 : Producer`2<TimeInterval`1<TSource>, _<TSource>> {
    private IObservable`1<TSource> _source;
    private IScheduler _scheduler;
    public TimeInterval`1(IObservable`1<TSource> source, IScheduler scheduler);
    protected virtual _<TSource> CreateSink(IObserver`1<TimeInterval`1<TSource>> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.Timeout`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Timeout`2 : Producer`2<TSource, _<TSource, TTimeout>> {
    private IObservable`1<TSource> _source;
    private IObservable`1<TTimeout> _firstTimeout;
    private Func`2<TSource, IObservable`1<TTimeout>> _timeoutSelector;
    private IObservable`1<TSource> _other;
    public Timeout`2(IObservable`1<TSource> source, IObservable`1<TTimeout> firstTimeout, Func`2<TSource, IObservable`1<TTimeout>> timeoutSelector, IObservable`1<TSource> other);
    protected virtual _<TSource, TTimeout> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource, TTimeout> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.Timer : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Timestamp`1 : Producer`2<Timestamped`1<TSource>, _<TSource>> {
    private IObservable`1<TSource> _source;
    private IScheduler _scheduler;
    public Timestamp`1(IObservable`1<TSource> source, IScheduler scheduler);
    protected virtual _<TSource> CreateSink(IObserver`1<Timestamped`1<TSource>> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.ToArray`1 : Producer`2<TSource[], _<TSource>> {
    private IObservable`1<TSource> _source;
    public ToArray`1(IObservable`1<TSource> source);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource[]> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.ToDictionary`3 : Producer`2<IDictionary`2<TKey, TElement>, _<TSource, TKey, TElement>> {
    private IObservable`1<TSource> _source;
    private Func`2<TSource, TKey> _keySelector;
    private Func`2<TSource, TElement> _elementSelector;
    private IEqualityComparer`1<TKey> _comparer;
    public ToDictionary`3(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    protected virtual _<TSource, TKey, TElement> CreateSink(IObserver`1<IDictionary`2<TKey, TElement>> observer);
    protected virtual void Run(_<TSource, TKey, TElement> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.ToList`1 : Producer`2<IList`1<TSource>, _<TSource>> {
    private IObservable`1<TSource> _source;
    public ToList`1(IObservable`1<TSource> source);
    protected virtual _<TSource> CreateSink(IObserver`1<IList`1<TSource>> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.ToLookup`3 : Producer`2<ILookup`2<TKey, TElement>, _<TSource, TKey, TElement>> {
    private IObservable`1<TSource> _source;
    private Func`2<TSource, TKey> _keySelector;
    private Func`2<TSource, TElement> _elementSelector;
    private IEqualityComparer`1<TKey> _comparer;
    public ToLookup`3(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    protected virtual _<TSource, TKey, TElement> CreateSink(IObserver`1<ILookup`2<TKey, TElement>> observer);
    protected virtual void Run(_<TSource, TKey, TElement> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.ToObservableLongRunning`1 : Producer`2<TSource, _<TSource>> {
    private IEnumerable`1<TSource> _source;
    private ISchedulerLongRunning _scheduler;
    public ToObservableLongRunning`1(IEnumerable`1<TSource> source, ISchedulerLongRunning scheduler);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.ToObservableRecursive`1 : Producer`2<TSource, _<TSource>> {
    private IEnumerable`1<TSource> _source;
    private IScheduler _scheduler;
    public ToObservableRecursive`1(IEnumerable`1<TSource> source, IScheduler scheduler);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Using`2 : Producer`2<TSource, _<TSource, TResource>> {
    private Func`1<TResource> _resourceFactory;
    private Func`2<TResource, IObservable`1<TSource>> _observableFactory;
    public Using`2(Func`1<TResource> resourceFactory, Func`2<TResource, IObservable`1<TSource>> observableFactory);
    protected virtual _<TSource, TResource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource, TResource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.Where`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.While`1 : Producer`2<TSource, _<TSource>> {
    private Func`1<bool> _condition;
    private IObservable`1<TSource> _source;
    public While`1(Func`1<bool> condition, IObservable`1<TSource> source);
    protected virtual _<TSource> CreateSink(IObserver`1<TSource> observer);
    protected virtual void Run(_<TSource> sink);
    [IteratorStateMachineAttribute("System.Reactive.Linq.ObservableImpl.While`1/<GetSources>d__5")]
public sealed virtual IEnumerable`1<IObservable`1<TSource>> GetSources();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.Window`1 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.Window`2 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.WindowObservable`1 : AddRef`1<TSource> {
    public WindowObservable`1(IObservable`1<TSource> source, RefCountDisposable refCount);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.WithLatestFrom`3 : Producer`2<TResult, _<TFirst, TSecond, TResult>> {
    private IObservable`1<TFirst> _first;
    private IObservable`1<TSecond> _second;
    private Func`3<TFirst, TSecond, TResult> _resultSelector;
    public WithLatestFrom`3(IObservable`1<TFirst> first, IObservable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector);
    protected virtual _<TFirst, TSecond, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<TFirst, TSecond, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Zip`1 : Producer`2<IList`1<TSource>, _<TSource>> {
    private IEnumerable`1<IObservable`1<TSource>> _sources;
    public Zip`1(IEnumerable`1<IObservable`1<TSource>> sources);
    protected virtual _<TSource> CreateSink(IObserver`1<IList`1<TSource>> observer);
    protected virtual void Run(_<TSource> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Zip`10 : Producer`2<TResult, _<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private IObservable`1<T5> _source5;
    private IObservable`1<T6> _source6;
    private IObservable`1<T7> _source7;
    private IObservable`1<T8> _source8;
    private IObservable`1<T9> _source9;
    private Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> _resultSelector;
    public Zip`10(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Zip`11 : Producer`2<TResult, _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private IObservable`1<T5> _source5;
    private IObservable`1<T6> _source6;
    private IObservable`1<T7> _source7;
    private IObservable`1<T8> _source8;
    private IObservable`1<T9> _source9;
    private IObservable`1<T10> _source10;
    private Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> _resultSelector;
    public Zip`11(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Zip`12 : Producer`2<TResult, _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private IObservable`1<T5> _source5;
    private IObservable`1<T6> _source6;
    private IObservable`1<T7> _source7;
    private IObservable`1<T8> _source8;
    private IObservable`1<T9> _source9;
    private IObservable`1<T10> _source10;
    private IObservable`1<T11> _source11;
    private Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> _resultSelector;
    public Zip`12(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, IObservable`1<T11> source11, Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Zip`13 : Producer`2<TResult, _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private IObservable`1<T5> _source5;
    private IObservable`1<T6> _source6;
    private IObservable`1<T7> _source7;
    private IObservable`1<T8> _source8;
    private IObservable`1<T9> _source9;
    private IObservable`1<T10> _source10;
    private IObservable`1<T11> _source11;
    private IObservable`1<T12> _source12;
    private Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> _resultSelector;
    public Zip`13(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, IObservable`1<T11> source11, IObservable`1<T12> source12, Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Zip`14 : Producer`2<TResult, _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private IObservable`1<T5> _source5;
    private IObservable`1<T6> _source6;
    private IObservable`1<T7> _source7;
    private IObservable`1<T8> _source8;
    private IObservable`1<T9> _source9;
    private IObservable`1<T10> _source10;
    private IObservable`1<T11> _source11;
    private IObservable`1<T12> _source12;
    private IObservable`1<T13> _source13;
    private Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> _resultSelector;
    public Zip`14(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, IObservable`1<T11> source11, IObservable`1<T12> source12, IObservable`1<T13> source13, Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Zip`15 : Producer`2<TResult, _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private IObservable`1<T5> _source5;
    private IObservable`1<T6> _source6;
    private IObservable`1<T7> _source7;
    private IObservable`1<T8> _source8;
    private IObservable`1<T9> _source9;
    private IObservable`1<T10> _source10;
    private IObservable`1<T11> _source11;
    private IObservable`1<T12> _source12;
    private IObservable`1<T13> _source13;
    private IObservable`1<T14> _source14;
    private Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> _resultSelector;
    public Zip`15(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, IObservable`1<T11> source11, IObservable`1<T12> source12, IObservable`1<T13> source13, IObservable`1<T14> source14, Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Zip`16 : Producer`2<TResult, _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private IObservable`1<T5> _source5;
    private IObservable`1<T6> _source6;
    private IObservable`1<T7> _source7;
    private IObservable`1<T8> _source8;
    private IObservable`1<T9> _source9;
    private IObservable`1<T10> _source10;
    private IObservable`1<T11> _source11;
    private IObservable`1<T12> _source12;
    private IObservable`1<T13> _source13;
    private IObservable`1<T14> _source14;
    private IObservable`1<T15> _source15;
    private Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> _resultSelector;
    public Zip`16(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, IObservable`1<T11> source11, IObservable`1<T12> source12, IObservable`1<T13> source13, IObservable`1<T14> source14, IObservable`1<T15> source15, Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Zip`17 : Producer`2<TResult, _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private IObservable`1<T5> _source5;
    private IObservable`1<T6> _source6;
    private IObservable`1<T7> _source7;
    private IObservable`1<T8> _source8;
    private IObservable`1<T9> _source9;
    private IObservable`1<T10> _source10;
    private IObservable`1<T11> _source11;
    private IObservable`1<T12> _source12;
    private IObservable`1<T13> _source13;
    private IObservable`1<T14> _source14;
    private IObservable`1<T15> _source15;
    private IObservable`1<T16> _source16;
    private Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> _resultSelector;
    public Zip`17(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, IObservable`1<T9> source9, IObservable`1<T10> source10, IObservable`1<T11> source11, IObservable`1<T12> source12, IObservable`1<T13> source13, IObservable`1<T14> source14, IObservable`1<T15> source15, IObservable`1<T16> source16, Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> sink);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.ObservableImpl.Zip`3 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Zip`4 : Producer`2<TResult, _<T1, T2, T3, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private Func`4<T1, T2, T3, TResult> _resultSelector;
    public Zip`4(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, Func`4<T1, T2, T3, TResult> resultSelector);
    protected virtual _<T1, T2, T3, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Zip`5 : Producer`2<TResult, _<T1, T2, T3, T4, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private Func`5<T1, T2, T3, T4, TResult> _resultSelector;
    public Zip`5(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, Func`5<T1, T2, T3, T4, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Zip`6 : Producer`2<TResult, _<T1, T2, T3, T4, T5, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private IObservable`1<T5> _source5;
    private Func`6<T1, T2, T3, T4, T5, TResult> _resultSelector;
    public Zip`6(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, Func`6<T1, T2, T3, T4, T5, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, T5, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, T5, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Zip`7 : Producer`2<TResult, _<T1, T2, T3, T4, T5, T6, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private IObservable`1<T5> _source5;
    private IObservable`1<T6> _source6;
    private Func`7<T1, T2, T3, T4, T5, T6, TResult> _resultSelector;
    public Zip`7(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, Func`7<T1, T2, T3, T4, T5, T6, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, T5, T6, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, T5, T6, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Zip`8 : Producer`2<TResult, _<T1, T2, T3, T4, T5, T6, T7, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private IObservable`1<T5> _source5;
    private IObservable`1<T6> _source6;
    private IObservable`1<T7> _source7;
    private Func`8<T1, T2, T3, T4, T5, T6, T7, TResult> _resultSelector;
    public Zip`8(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, Func`8<T1, T2, T3, T4, T5, T6, T7, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, T5, T6, T7, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, T5, T6, T7, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.Zip`9 : Producer`2<TResult, _<T1, T2, T3, T4, T5, T6, T7, T8, TResult>> {
    private IObservable`1<T1> _source1;
    private IObservable`1<T2> _source2;
    private IObservable`1<T3> _source3;
    private IObservable`1<T4> _source4;
    private IObservable`1<T5> _source5;
    private IObservable`1<T6> _source6;
    private IObservable`1<T7> _source7;
    private IObservable`1<T8> _source8;
    private Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> _resultSelector;
    public Zip`9(IObservable`1<T1> source1, IObservable`1<T2> source2, IObservable`1<T3> source3, IObservable`1<T4> source4, IObservable`1<T5> source5, IObservable`1<T6> source6, IObservable`1<T7> source7, IObservable`1<T8> source8, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> resultSelector);
    protected virtual _<T1, T2, T3, T4, T5, T6, T7, T8, TResult> CreateSink(IObserver`1<TResult> observer);
    protected virtual void Run(_<T1, T2, T3, T4, T5, T6, T7, T8, TResult> sink);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.Linq.ObservableImpl.ZipObserver`1 : SafeObserver`1<T> {
    private object _gate;
    private IZip _parent;
    private int _index;
    private Queue`1<T> _values;
    public Queue`1<T> Values { get; }
    public ZipObserver`1(object gate, IZip parent, int index);
    public Queue`1<T> get_Values();
    protected virtual void Dispose(bool disposing);
    public virtual void OnNext(T value);
    public virtual void OnError(Exception error);
    public virtual void OnCompleted();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class System.Reactive.Linq.ObservableImpl.ZipSink`1 : IdentitySink`1<TResult> {
    protected object _gate;
    private ICollection[] _queues;
    private Boolean[] _isDone;
    public ICollection[] Queues { get; }
    protected ZipSink`1(int arity, IObserver`1<TResult> observer);
    public ICollection[] get_Queues();
    public sealed virtual void Next(int index);
    protected abstract virtual TResult GetResult();
    public sealed virtual void Fail(Exception error);
    public sealed virtual void Done(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("This type uses Queryable.AsQueryable, which is not compatible with trimming because expressions referencing IQueryable extension methods can get rebound to IEnumerable extension methods, and those IEnumerable methods might be trimmed.")]
[ExcludeFromCodeCoverageAttribute]
public static class System.Reactive.Linq.Qbservable : object {
    [NullableAttribute("2")]
private static IQbservableProvider s_provider;
    public static IQbservableProvider Provider { get; }
    public static IQbservableProvider get_Provider();
    [ExtensionAttribute]
public static IQbservable`1<TSource> AsQbservable(IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IObservable`1<TSource> AsObservable(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<TSource> ToQbservable(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<TSource> ToQbservable(IQueryable`1<TSource> source, IScheduler scheduler);
    internal static Expression GetSourceExpression(IObservable`1<TSource> source);
    internal static Expression GetSourceExpression(IEnumerable`1<TSource> source);
    internal static Expression GetSourceExpression(IObservable`1[] sources);
    internal static Expression GetSourceExpression(IEnumerable`1[] sources);
    internal static MethodInfo InfoOf(Expression`1<Func`1<R>> f);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Aggregate(IQbservable`1<TSource> source, Expression`1<Func`3<TSource, TSource, TSource>> accumulator);
    [ExtensionAttribute]
public static IQbservable`1<TAccumulate> Aggregate(IQbservable`1<TSource> source, TAccumulate seed, Expression`1<Func`3<TAccumulate, TSource, TAccumulate>> accumulator);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Aggregate(IQbservable`1<TSource> source, TAccumulate seed, Expression`1<Func`3<TAccumulate, TSource, TAccumulate>> accumulator, Expression`1<Func`2<TAccumulate, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<bool> All(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Amb(IQbservable`1<TSource> first, IObservable`1<TSource> second);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Amb(IQbservableProvider provider, IObservable`1[] sources);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Amb(IQbservableProvider provider, IEnumerable`1<IObservable`1<TSource>> sources);
    [ExtensionAttribute]
public static IQbservable`1<bool> Any(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<bool> Any(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Append(IQbservable`1<TSource> source, TSource value);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Append(IQbservable`1<TSource> source, TSource value, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> AutoConnect(IQbservableProvider provider, IConnectableObservable`1<TSource> source, int minObservers, Expression`1<Action`1<IDisposable>> onConnect);
    [ExtensionAttribute]
public static IQbservable`1<decimal> Average(IQbservable`1<decimal> source);
    [ExtensionAttribute]
public static IQbservable`1<double> Average(IQbservable`1<double> source);
    [ExtensionAttribute]
public static IQbservable`1<double> Average(IQbservable`1<int> source);
    [ExtensionAttribute]
public static IQbservable`1<double> Average(IQbservable`1<long> source);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<decimal>> Average(IQbservable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<double>> Average(IQbservable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<double>> Average(IQbservable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<double>> Average(IQbservable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<float>> Average(IQbservable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static IQbservable`1<float> Average(IQbservable`1<float> source);
    [ExtensionAttribute]
public static IQbservable`1<decimal> Average(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector);
    [ExtensionAttribute]
public static IQbservable`1<double> Average(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector);
    [ExtensionAttribute]
public static IQbservable`1<float> Average(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector);
    [ExtensionAttribute]
public static IQbservable`1<double> Average(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector);
    [ExtensionAttribute]
public static IQbservable`1<double> Average(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<decimal>> Average(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<double>> Average(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<float>> Average(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<double>> Average(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<double>> Average(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<IList`1<TSource>> Buffer(IQbservable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IQbservable`1<IList`1<TSource>> Buffer(IQbservable`1<TSource> source, int count, int skip);
    [ExtensionAttribute]
public static IQbservable`1<IList`1<TSource>> Buffer(IQbservable`1<TSource> source, TimeSpan timeSpan);
    [ExtensionAttribute]
public static IQbservable`1<IList`1<TSource>> Buffer(IQbservable`1<TSource> source, TimeSpan timeSpan, int count);
    [ExtensionAttribute]
public static IQbservable`1<IList`1<TSource>> Buffer(IQbservable`1<TSource> source, TimeSpan timeSpan, int count, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<IList`1<TSource>> Buffer(IQbservable`1<TSource> source, TimeSpan timeSpan, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<IList`1<TSource>> Buffer(IQbservable`1<TSource> source, TimeSpan timeSpan, TimeSpan timeShift);
    [ExtensionAttribute]
public static IQbservable`1<IList`1<TSource>> Buffer(IQbservable`1<TSource> source, TimeSpan timeSpan, TimeSpan timeShift, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<IList`1<TSource>> Buffer(IQbservable`1<TSource> source, IObservable`1<TBufferBoundary> bufferBoundaries);
    [ExtensionAttribute]
public static IQbservable`1<IList`1<TSource>> Buffer(IQbservable`1<TSource> source, Expression`1<Func`1<IObservable`1<TBufferClosing>>> bufferClosingSelector);
    [ExtensionAttribute]
public static IQbservable`1<IList`1<TSource>> Buffer(IQbservable`1<TSource> source, IObservable`1<TBufferOpening> bufferOpenings, Expression`1<Func`2<TBufferOpening, IObservable`1<TBufferClosing>>> bufferClosingSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Case(IQbservableProvider provider, Expression`1<Func`1<TValue>> selector, IDictionary`2<TValue, IObservable`1<TResult>> sources);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Case(IQbservableProvider provider, Expression`1<Func`1<TValue>> selector, IDictionary`2<TValue, IObservable`1<TResult>> sources, IObservable`1<TResult> defaultSource);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Case(IQbservableProvider provider, Expression`1<Func`1<TValue>> selector, IDictionary`2<TValue, IObservable`1<TResult>> sources, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Cast(IQbservable`1<object> source);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Catch(IQbservable`1<TSource> first, IObservable`1<TSource> second);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Catch(IQbservableProvider provider, IObservable`1[] sources);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Catch(IQbservableProvider provider, IEnumerable`1<IObservable`1<TSource>> sources);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Catch(IQbservable`1<TSource> source, Expression`1<Func`2<TException, IObservable`1<TSource>>> handler);
    [ExtensionAttribute]
public static IQueryable`1<IList`1<TSource>> Chunkify(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQueryable`1<TResult> Collect(IQbservable`1<TSource> source, Expression`1<Func`1<TResult>> getInitialCollector, Expression`1<Func`3<TResult, TSource, TResult>> merge, Expression`1<Func`2<TResult, TResult>> getNewCollector);
    [ExtensionAttribute]
public static IQueryable`1<TResult> Collect(IQbservable`1<TSource> source, Expression`1<Func`1<TResult>> newCollector, Expression`1<Func`3<TResult, TSource, TResult>> merge);
    [ExtensionAttribute]
public static IQbservable`1<IList`1<TSource>> CombineLatest(IQbservableProvider provider, IEnumerable`1<IObservable`1<TSource>> sources);
    [ExtensionAttribute]
public static IQbservable`1<IList`1<TSource>> CombineLatest(IQbservableProvider provider, IObservable`1[] sources);
    [ExtensionAttribute]
public static IQbservable`1<TResult> CombineLatest(IQbservableProvider provider, IEnumerable`1<IObservable`1<TSource>> sources, Expression`1<Func`2<IList`1<TSource>, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> CombineLatest(IQbservable`1<TSource1> first, IObservable`1<TSource2> second, Expression`1<Func`3<TSource1, TSource2, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> CombineLatest(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, Expression`1<Func`4<TSource1, TSource2, TSource3, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> CombineLatest(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, Expression`1<Func`5<TSource1, TSource2, TSource3, TSource4, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> CombineLatest(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, Expression`1<Func`6<TSource1, TSource2, TSource3, TSource4, TSource5, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> CombineLatest(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, Expression`1<Func`7<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> CombineLatest(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, Expression`1<Func`8<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> CombineLatest(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, Expression`1<Func`9<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> CombineLatest(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, Expression`1<Func`10<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> CombineLatest(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, Expression`1<Func`11<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> CombineLatest(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, Expression`1<Func`12<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> CombineLatest(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, Expression`1<Func`13<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> CombineLatest(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, IObservable`1<TSource13> source13, Expression`1<Func`14<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> CombineLatest(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, IObservable`1<TSource13> source13, IObservable`1<TSource14> source14, Expression`1<Func`15<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> CombineLatest(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, IObservable`1<TSource13> source13, IObservable`1<TSource14> source14, IObservable`1<TSource15> source15, Expression`1<Func`16<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> CombineLatest(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, IObservable`1<TSource13> source13, IObservable`1<TSource14> source14, IObservable`1<TSource15> source15, IObservable`1<TSource16> source16, Expression`1<Func`17<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Concat(IQbservable`1<TSource> first, IObservable`1<TSource> second);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Concat(IQbservableProvider provider, IObservable`1[] sources);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Concat(IQbservableProvider provider, IEnumerable`1<IObservable`1<TSource>> sources);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Concat(IQbservable`1<IObservable`1<TSource>> sources);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Concat(IQbservable`1<Task`1<TSource>> sources);
    [ExtensionAttribute]
public static IQbservable`1<bool> Contains(IQbservable`1<TSource> source, TSource value);
    [ExtensionAttribute]
public static IQbservable`1<bool> Contains(IQbservable`1<TSource> source, TSource value, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IQbservable`1<int> Count(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<int> Count(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Create(IQbservableProvider provider, Expression`1<Func`2<IObserver`1<TResult>, IDisposable>> subscribe);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Create(IQbservableProvider provider, Expression`1<Func`2<IObserver`1<TResult>, Action>> subscribe);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Create(IQbservableProvider provider, Expression`1<Func`3<IObserver`1<TResult>, CancellationToken, Task>> subscribeAsync);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Create(IQbservableProvider provider, Expression`1<Func`2<IObserver`1<TResult>, Task>> subscribeAsync);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Create(IQbservableProvider provider, Expression`1<Func`3<IObserver`1<TResult>, CancellationToken, Task`1<IDisposable>>> subscribeAsync);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Create(IQbservableProvider provider, Expression`1<Func`2<IObserver`1<TResult>, Task`1<IDisposable>>> subscribeAsync);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Create(IQbservableProvider provider, Expression`1<Func`3<IObserver`1<TResult>, CancellationToken, Task`1<Action>>> subscribeAsync);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Create(IQbservableProvider provider, Expression`1<Func`2<IObserver`1<TResult>, Task`1<Action>>> subscribeAsync);
    [ExtensionAttribute]
public static IQbservable`1<TSource> DefaultIfEmpty(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<TSource> DefaultIfEmpty(IQbservable`1<TSource> source, TSource defaultValue);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Defer(IQbservableProvider provider, Expression`1<Func`1<IObservable`1<TResult>>> observableFactory);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Defer(IQbservableProvider provider, Expression`1<Func`1<Task`1<IObservable`1<TResult>>>> observableFactoryAsync);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Defer(IQbservableProvider provider, Expression`1<Func`1<Task`1<IObservable`1<TResult>>>> observableFactoryAsync, bool ignoreExceptionsAfterUnsubscribe);
    [ExtensionAttribute]
public static IQbservable`1<TResult> DeferAsync(IQbservableProvider provider, Expression`1<Func`2<CancellationToken, Task`1<IObservable`1<TResult>>>> observableFactoryAsync);
    [ExtensionAttribute]
public static IQbservable`1<TResult> DeferAsync(IQbservableProvider provider, Expression`1<Func`2<CancellationToken, Task`1<IObservable`1<TResult>>>> observableFactoryAsync, bool ignoreExceptionsAfterUnsubscribe);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Delay(IQbservable`1<TSource> source, DateTimeOffset dueTime);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Delay(IQbservable`1<TSource> source, DateTimeOffset dueTime, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Delay(IQbservable`1<TSource> source, TimeSpan dueTime);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Delay(IQbservable`1<TSource> source, TimeSpan dueTime, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Delay(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, IObservable`1<TDelay>>> delayDurationSelector);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Delay(IQbservable`1<TSource> source, IObservable`1<TDelay> subscriptionDelay, Expression`1<Func`2<TSource, IObservable`1<TDelay>>> delayDurationSelector);
    [ExtensionAttribute]
public static IQbservable`1<TSource> DelaySubscription(IQbservable`1<TSource> source, DateTimeOffset dueTime);
    [ExtensionAttribute]
public static IQbservable`1<TSource> DelaySubscription(IQbservable`1<TSource> source, DateTimeOffset dueTime, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> DelaySubscription(IQbservable`1<TSource> source, TimeSpan dueTime);
    [ExtensionAttribute]
public static IQbservable`1<TSource> DelaySubscription(IQbservable`1<TSource> source, TimeSpan dueTime, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Dematerialize(IQbservable`1<Notification`1<TSource>> source);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Distinct(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Distinct(IQbservable`1<TSource> source, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Distinct(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Distinct(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQbservable`1<TSource> DistinctUntilChanged(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<TSource> DistinctUntilChanged(IQbservable`1<TSource> source, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IQbservable`1<TSource> DistinctUntilChanged(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
public static IQbservable`1<TSource> DistinctUntilChanged(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Do(IQbservable`1<TSource> source, IObserver`1<TSource> observer);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Do(IQbservable`1<TSource> source, Expression`1<Action`1<TSource>> onNext);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Do(IQbservable`1<TSource> source, Expression`1<Action`1<TSource>> onNext, Expression`1<Action> onCompleted);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Do(IQbservable`1<TSource> source, Expression`1<Action`1<TSource>> onNext, Expression`1<Action`1<Exception>> onError);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Do(IQbservable`1<TSource> source, Expression`1<Action`1<TSource>> onNext, Expression`1<Action`1<Exception>> onError, Expression`1<Action> onCompleted);
    [ExtensionAttribute]
public static IQbservable`1<TSource> DoWhile(IQbservable`1<TSource> source, Expression`1<Func`1<bool>> condition);
    [ExtensionAttribute]
public static IQbservable`1<TSource> ElementAt(IQbservable`1<TSource> source, int index);
    [ExtensionAttribute]
public static IQbservable`1<TSource> ElementAtOrDefault(IQbservable`1<TSource> source, int index);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Empty(IQbservableProvider provider);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Empty(IQbservableProvider provider, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Empty(IQbservableProvider provider, IScheduler scheduler, TResult witness);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Empty(IQbservableProvider provider, TResult witness);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Finally(IQbservable`1<TSource> source, Expression`1<Action> finallyAction);
    [ExtensionAttribute]
public static IQbservable`1<TSource> FirstAsync(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<TSource> FirstAsync(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static IQbservable`1<TSource> FirstOrDefaultAsync(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<TSource> FirstOrDefaultAsync(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static IQbservable`1<TResult> For(IQbservableProvider provider, IEnumerable`1<TSource> source, Expression`1<Func`2<TSource, IObservable`1<TResult>>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<Unit> FromAsync(IQbservableProvider provider, Expression`1<Func`1<Task>> actionAsync);
    [ExtensionAttribute]
public static IQbservable`1<Unit> FromAsync(IQbservableProvider provider, Expression`1<Func`1<Task>> actionAsync, TaskObservationOptions options);
    [ExtensionAttribute]
public static IQbservable`1<Unit> FromAsync(IQbservableProvider provider, Expression`1<Func`1<Task>> actionAsync, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<Unit> FromAsync(IQbservableProvider provider, Expression`1<Func`2<CancellationToken, Task>> actionAsync);
    [ExtensionAttribute]
public static IQbservable`1<Unit> FromAsync(IQbservableProvider provider, Expression`1<Func`2<CancellationToken, Task>> actionAsync, TaskObservationOptions options);
    [ExtensionAttribute]
public static IQbservable`1<Unit> FromAsync(IQbservableProvider provider, Expression`1<Func`2<CancellationToken, Task>> actionAsync, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TResult> FromAsync(IQbservableProvider provider, Expression`1<Func`1<Task`1<TResult>>> functionAsync);
    [ExtensionAttribute]
public static IQbservable`1<TResult> FromAsync(IQbservableProvider provider, Expression`1<Func`2<CancellationToken, Task`1<TResult>>> functionAsync);
    [ExtensionAttribute]
public static IQbservable`1<TResult> FromAsync(IQbservableProvider provider, Expression`1<Func`1<Task`1<TResult>>> functionAsync, TaskObservationOptions options);
    [ExtensionAttribute]
public static IQbservable`1<TResult> FromAsync(IQbservableProvider provider, Expression`1<Func`2<CancellationToken, Task`1<TResult>>> functionAsync, TaskObservationOptions options);
    [ExtensionAttribute]
public static IQbservable`1<TResult> FromAsync(IQbservableProvider provider, Expression`1<Func`1<Task`1<TResult>>> functionAsync, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TResult> FromAsync(IQbservableProvider provider, Expression`1<Func`2<CancellationToken, Task`1<TResult>>> functionAsync, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<Unit> FromEvent(IQbservableProvider provider, Expression`1<Action`1<Action>> addHandler, Expression`1<Action`1<Action>> removeHandler);
    [ExtensionAttribute]
public static IQbservable`1<Unit> FromEvent(IQbservableProvider provider, Expression`1<Action`1<Action>> addHandler, Expression`1<Action`1<Action>> removeHandler, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TEventArgs> FromEvent(IQbservableProvider provider, Expression`1<Action`1<TDelegate>> addHandler, Expression`1<Action`1<TDelegate>> removeHandler);
    [ExtensionAttribute]
public static IQbservable`1<TEventArgs> FromEvent(IQbservableProvider provider, Expression`1<Action`1<TDelegate>> addHandler, Expression`1<Action`1<TDelegate>> removeHandler, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TEventArgs> FromEvent(IQbservableProvider provider, Expression`1<Func`2<Action`1<TEventArgs>, TDelegate>> conversion, Expression`1<Action`1<TDelegate>> addHandler, Expression`1<Action`1<TDelegate>> removeHandler);
    [ExtensionAttribute]
public static IQbservable`1<TEventArgs> FromEvent(IQbservableProvider provider, Expression`1<Func`2<Action`1<TEventArgs>, TDelegate>> conversion, Expression`1<Action`1<TDelegate>> addHandler, Expression`1<Action`1<TDelegate>> removeHandler, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TEventArgs> FromEvent(IQbservableProvider provider, Expression`1<Action`1<Action`1<TEventArgs>>> addHandler, Expression`1<Action`1<Action`1<TEventArgs>>> removeHandler);
    [ExtensionAttribute]
public static IQbservable`1<TEventArgs> FromEvent(IQbservableProvider provider, Expression`1<Action`1<Action`1<TEventArgs>>> addHandler, Expression`1<Action`1<Action`1<TEventArgs>>> removeHandler, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<EventPattern`1<object>> FromEventPattern(IQbservableProvider provider, Expression`1<Action`1<EventHandler>> addHandler, Expression`1<Action`1<EventHandler>> removeHandler);
    [ExtensionAttribute]
public static IQbservable`1<EventPattern`1<object>> FromEventPattern(IQbservableProvider provider, Expression`1<Action`1<EventHandler>> addHandler, Expression`1<Action`1<EventHandler>> removeHandler, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<EventPattern`1<object>> FromEventPattern(IQbservableProvider provider, object target, string eventName);
    [ExtensionAttribute]
public static IQbservable`1<EventPattern`1<object>> FromEventPattern(IQbservableProvider provider, object target, string eventName, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<EventPattern`1<object>> FromEventPattern(IQbservableProvider provider, Type type, string eventName);
    [ExtensionAttribute]
public static IQbservable`1<EventPattern`1<object>> FromEventPattern(IQbservableProvider provider, Type type, string eventName, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<EventPattern`1<TEventArgs>> FromEventPattern(IQbservableProvider provider, Expression`1<Action`1<TDelegate>> addHandler, Expression`1<Action`1<TDelegate>> removeHandler);
    [ExtensionAttribute]
public static IQbservable`1<EventPattern`1<TEventArgs>> FromEventPattern(IQbservableProvider provider, Expression`1<Action`1<TDelegate>> addHandler, Expression`1<Action`1<TDelegate>> removeHandler, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<EventPattern`1<TEventArgs>> FromEventPattern(IQbservableProvider provider, Expression`1<Func`2<EventHandler`1<TEventArgs>, TDelegate>> conversion, Expression`1<Action`1<TDelegate>> addHandler, Expression`1<Action`1<TDelegate>> removeHandler);
    [ExtensionAttribute]
public static IQbservable`1<EventPattern`1<TEventArgs>> FromEventPattern(IQbservableProvider provider, Expression`1<Func`2<EventHandler`1<TEventArgs>, TDelegate>> conversion, Expression`1<Action`1<TDelegate>> addHandler, Expression`1<Action`1<TDelegate>> removeHandler, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern(IQbservableProvider provider, Expression`1<Action`1<TDelegate>> addHandler, Expression`1<Action`1<TDelegate>> removeHandler);
    [ExtensionAttribute]
public static IQbservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern(IQbservableProvider provider, Expression`1<Action`1<TDelegate>> addHandler, Expression`1<Action`1<TDelegate>> removeHandler, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<EventPattern`1<TEventArgs>> FromEventPattern(IQbservableProvider provider, Expression`1<Action`1<EventHandler`1<TEventArgs>>> addHandler, Expression`1<Action`1<EventHandler`1<TEventArgs>>> removeHandler);
    [ExtensionAttribute]
public static IQbservable`1<EventPattern`1<TEventArgs>> FromEventPattern(IQbservableProvider provider, Expression`1<Action`1<EventHandler`1<TEventArgs>>> addHandler, Expression`1<Action`1<EventHandler`1<TEventArgs>>> removeHandler, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<EventPattern`1<TEventArgs>> FromEventPattern(IQbservableProvider provider, object target, string eventName);
    [ExtensionAttribute]
public static IQbservable`1<EventPattern`1<TEventArgs>> FromEventPattern(IQbservableProvider provider, object target, string eventName, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<EventPattern`1<TEventArgs>> FromEventPattern(IQbservableProvider provider, Type type, string eventName);
    [ExtensionAttribute]
public static IQbservable`1<EventPattern`1<TEventArgs>> FromEventPattern(IQbservableProvider provider, Type type, string eventName, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern(IQbservableProvider provider, object target, string eventName);
    [ExtensionAttribute]
public static IQbservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern(IQbservableProvider provider, object target, string eventName, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern(IQbservableProvider provider, Type type, string eventName);
    [ExtensionAttribute]
public static IQbservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern(IQbservableProvider provider, Type type, string eventName, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Generate(IQbservableProvider provider, TState initialState, Expression`1<Func`2<TState, bool>> condition, Expression`1<Func`2<TState, TState>> iterate, Expression`1<Func`2<TState, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Generate(IQbservableProvider provider, TState initialState, Expression`1<Func`2<TState, bool>> condition, Expression`1<Func`2<TState, TState>> iterate, Expression`1<Func`2<TState, TResult>> resultSelector, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Generate(IQbservableProvider provider, TState initialState, Expression`1<Func`2<TState, bool>> condition, Expression`1<Func`2<TState, TState>> iterate, Expression`1<Func`2<TState, TResult>> resultSelector, Expression`1<Func`2<TState, TimeSpan>> timeSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Generate(IQbservableProvider provider, TState initialState, Expression`1<Func`2<TState, bool>> condition, Expression`1<Func`2<TState, TState>> iterate, Expression`1<Func`2<TState, TResult>> resultSelector, Expression`1<Func`2<TState, DateTimeOffset>> timeSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Generate(IQbservableProvider provider, TState initialState, Expression`1<Func`2<TState, bool>> condition, Expression`1<Func`2<TState, TState>> iterate, Expression`1<Func`2<TState, TResult>> resultSelector, Expression`1<Func`2<TState, TimeSpan>> timeSelector, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Generate(IQbservableProvider provider, TState initialState, Expression`1<Func`2<TState, bool>> condition, Expression`1<Func`2<TState, TState>> iterate, Expression`1<Func`2<TState, TResult>> resultSelector, Expression`1<Func`2<TState, DateTimeOffset>> timeSelector, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<IGroupedObservable`2<TKey, TSource>> GroupBy(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
public static IQbservable`1<IGroupedObservable`2<TKey, TSource>> GroupBy(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, int capacity);
    [ExtensionAttribute]
public static IQbservable`1<IGroupedObservable`2<TKey, TSource>> GroupBy(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, int capacity, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQbservable`1<IGroupedObservable`2<TKey, TSource>> GroupBy(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQbservable`1<IGroupedObservable`2<TKey, TElement>> GroupBy(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector);
    [ExtensionAttribute]
public static IQbservable`1<IGroupedObservable`2<TKey, TElement>> GroupBy(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, int capacity);
    [ExtensionAttribute]
public static IQbservable`1<IGroupedObservable`2<TKey, TElement>> GroupBy(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, int capacity, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQbservable`1<IGroupedObservable`2<TKey, TElement>> GroupBy(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQbservable`1<IGroupedObservable`2<TKey, TSource>> GroupByUntil(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<IGroupedObservable`2<TKey, TSource>, IObservable`1<TDuration>>> durationSelector);
    [ExtensionAttribute]
public static IQbservable`1<IGroupedObservable`2<TKey, TSource>> GroupByUntil(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<IGroupedObservable`2<TKey, TSource>, IObservable`1<TDuration>>> durationSelector, int capacity);
    [ExtensionAttribute]
public static IQbservable`1<IGroupedObservable`2<TKey, TSource>> GroupByUntil(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<IGroupedObservable`2<TKey, TSource>, IObservable`1<TDuration>>> durationSelector, int capacity, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQbservable`1<IGroupedObservable`2<TKey, TSource>> GroupByUntil(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<IGroupedObservable`2<TKey, TSource>, IObservable`1<TDuration>>> durationSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQbservable`1<IGroupedObservable`2<TKey, TElement>> GroupByUntil(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, Expression`1<Func`2<IGroupedObservable`2<TKey, TElement>, IObservable`1<TDuration>>> durationSelector);
    [ExtensionAttribute]
public static IQbservable`1<IGroupedObservable`2<TKey, TElement>> GroupByUntil(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, Expression`1<Func`2<IGroupedObservable`2<TKey, TElement>, IObservable`1<TDuration>>> durationSelector, int capacity);
    [ExtensionAttribute]
public static IQbservable`1<IGroupedObservable`2<TKey, TElement>> GroupByUntil(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, Expression`1<Func`2<IGroupedObservable`2<TKey, TElement>, IObservable`1<TDuration>>> durationSelector, int capacity, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQbservable`1<IGroupedObservable`2<TKey, TElement>> GroupByUntil(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, Expression`1<Func`2<IGroupedObservable`2<TKey, TElement>, IObservable`1<TDuration>>> durationSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQbservable`1<TResult> GroupJoin(IQbservable`1<TLeft> left, IObservable`1<TRight> right, Expression`1<Func`2<TLeft, IObservable`1<TLeftDuration>>> leftDurationSelector, Expression`1<Func`2<TRight, IObservable`1<TRightDuration>>> rightDurationSelector, Expression`1<Func`3<TLeft, IObservable`1<TRight>, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> If(IQbservableProvider provider, Expression`1<Func`1<bool>> condition, IObservable`1<TResult> thenSource);
    [ExtensionAttribute]
public static IQbservable`1<TResult> If(IQbservableProvider provider, Expression`1<Func`1<bool>> condition, IObservable`1<TResult> thenSource, IObservable`1<TResult> elseSource);
    [ExtensionAttribute]
public static IQbservable`1<TResult> If(IQbservableProvider provider, Expression`1<Func`1<bool>> condition, IObservable`1<TResult> thenSource, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> IgnoreElements(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<long> Interval(IQbservableProvider provider, TimeSpan period);
    [ExtensionAttribute]
public static IQbservable`1<long> Interval(IQbservableProvider provider, TimeSpan period, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<bool> IsEmpty(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Join(IQbservable`1<TLeft> left, IObservable`1<TRight> right, Expression`1<Func`2<TLeft, IObservable`1<TLeftDuration>>> leftDurationSelector, Expression`1<Func`2<TRight, IObservable`1<TRightDuration>>> rightDurationSelector, Expression`1<Func`3<TLeft, TRight, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TSource> LastAsync(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<TSource> LastAsync(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static IQbservable`1<TSource> LastOrDefaultAsync(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<TSource> LastOrDefaultAsync(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static IQueryable`1<TSource> Latest(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<long> LongCount(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<long> LongCount(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static IQbservable`1<Notification`1<TSource>> Materialize(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<decimal> Max(IQbservable`1<decimal> source);
    [ExtensionAttribute]
public static IQbservable`1<double> Max(IQbservable`1<double> source);
    [ExtensionAttribute]
public static IQbservable`1<int> Max(IQbservable`1<int> source);
    [ExtensionAttribute]
public static IQbservable`1<long> Max(IQbservable`1<long> source);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<decimal>> Max(IQbservable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<double>> Max(IQbservable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<int>> Max(IQbservable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<long>> Max(IQbservable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<float>> Max(IQbservable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static IQbservable`1<float> Max(IQbservable`1<float> source);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Max(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Max(IQbservable`1<TSource> source, IComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IQbservable`1<double> Max(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector);
    [ExtensionAttribute]
public static IQbservable`1<float> Max(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector);
    [ExtensionAttribute]
public static IQbservable`1<decimal> Max(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector);
    [ExtensionAttribute]
public static IQbservable`1<int> Max(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector);
    [ExtensionAttribute]
public static IQbservable`1<long> Max(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<double>> Max(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<float>> Max(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<decimal>> Max(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<int>> Max(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<long>> Max(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Max(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Max(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector, IComparer`1<TResult> comparer);
    [ExtensionAttribute]
public static IQbservable`1<IList`1<TSource>> MaxBy(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
public static IQbservable`1<IList`1<TSource>> MaxBy(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Merge(IQbservable`1<TSource> first, IObservable`1<TSource> second);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Merge(IQbservable`1<TSource> first, IObservable`1<TSource> second, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Merge(IQbservableProvider provider, IScheduler scheduler, IObservable`1[] sources);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Merge(IQbservable`1<IObservable`1<TSource>> sources);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Merge(IQbservable`1<Task`1<TSource>> sources);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Merge(IQbservableProvider provider, IObservable`1[] sources);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Merge(IQbservableProvider provider, IEnumerable`1<IObservable`1<TSource>> sources);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Merge(IQbservable`1<IObservable`1<TSource>> sources, int maxConcurrent);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Merge(IQbservableProvider provider, IEnumerable`1<IObservable`1<TSource>> sources, int maxConcurrent);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Merge(IQbservableProvider provider, IEnumerable`1<IObservable`1<TSource>> sources, int maxConcurrent, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Merge(IQbservableProvider provider, IEnumerable`1<IObservable`1<TSource>> sources, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<decimal> Min(IQbservable`1<decimal> source);
    [ExtensionAttribute]
public static IQbservable`1<double> Min(IQbservable`1<double> source);
    [ExtensionAttribute]
public static IQbservable`1<int> Min(IQbservable`1<int> source);
    [ExtensionAttribute]
public static IQbservable`1<long> Min(IQbservable`1<long> source);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<decimal>> Min(IQbservable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<double>> Min(IQbservable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<int>> Min(IQbservable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<long>> Min(IQbservable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<float>> Min(IQbservable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static IQbservable`1<float> Min(IQbservable`1<float> source);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Min(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Min(IQbservable`1<TSource> source, IComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IQbservable`1<double> Min(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector);
    [ExtensionAttribute]
public static IQbservable`1<float> Min(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector);
    [ExtensionAttribute]
public static IQbservable`1<decimal> Min(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector);
    [ExtensionAttribute]
public static IQbservable`1<int> Min(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector);
    [ExtensionAttribute]
public static IQbservable`1<long> Min(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<double>> Min(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<float>> Min(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<decimal>> Min(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<int>> Min(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<long>> Min(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Min(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Min(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector, IComparer`1<TResult> comparer);
    [ExtensionAttribute]
public static IQbservable`1<IList`1<TSource>> MinBy(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
public static IQbservable`1<IList`1<TSource>> MinBy(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQueryable`1<TSource> MostRecent(IQbservable`1<TSource> source, TSource initialValue);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Multicast(IQbservable`1<TSource> source, Expression`1<Func`1<ISubject`2<TSource, TIntermediate>>> subjectSelector, Expression`1<Func`2<IObservable`1<TIntermediate>, IObservable`1<TResult>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Never(IQbservableProvider provider);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Never(IQbservableProvider provider, TResult witness);
    [ExtensionAttribute]
public static IQueryable`1<TSource> Next(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<TSource> ObserveOn(IQbservable`1<TSource> source, SynchronizationContext context);
    [ExtensionAttribute]
public static IQbservable`1<TSource> ObserveOn(IQbservable`1<TSource> source, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TResult> OfType(IQbservable`1<object> source);
    [ExtensionAttribute]
public static IQbservable`1<TSource> OnErrorResumeNext(IQbservable`1<TSource> first, IObservable`1<TSource> second);
    [ExtensionAttribute]
public static IQbservable`1<TSource> OnErrorResumeNext(IQbservableProvider provider, IObservable`1[] sources);
    [ExtensionAttribute]
public static IQbservable`1<TSource> OnErrorResumeNext(IQbservableProvider provider, IEnumerable`1<IObservable`1<TSource>> sources);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Prepend(IQbservable`1<TSource> source, TSource value);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Prepend(IQbservable`1<TSource> source, TSource value, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Publish(IQbservable`1<TSource> source, Expression`1<Func`2<IObservable`1<TSource>, IObservable`1<TResult>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Publish(IQbservable`1<TSource> source, Expression`1<Func`2<IObservable`1<TSource>, IObservable`1<TResult>>> selector, TSource initialValue);
    [ExtensionAttribute]
public static IQbservable`1<TResult> PublishLast(IQbservable`1<TSource> source, Expression`1<Func`2<IObservable`1<TSource>, IObservable`1<TResult>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<int> Range(IQbservableProvider provider, int start, int count);
    [ExtensionAttribute]
public static IQbservable`1<int> Range(IQbservableProvider provider, int start, int count, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> RefCount(IQbservableProvider provider, IConnectableObservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<TSource> RefCount(IQbservableProvider provider, IConnectableObservable`1<TSource> source, TimeSpan disconnectDelay);
    [ExtensionAttribute]
public static IQbservable`1<TSource> RefCount(IQbservableProvider provider, IConnectableObservable`1<TSource> source, TimeSpan disconnectDelay, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> RefCount(IQbservableProvider provider, IConnectableObservable`1<TSource> source, int minObservers);
    [ExtensionAttribute]
public static IQbservable`1<TSource> RefCount(IQbservableProvider provider, IConnectableObservable`1<TSource> source, int minObservers, TimeSpan disconnectDelay);
    [ExtensionAttribute]
public static IQbservable`1<TSource> RefCount(IQbservableProvider provider, IConnectableObservable`1<TSource> source, int minObservers, TimeSpan disconnectDelay, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Repeat(IQbservableProvider provider, TResult value);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Repeat(IQbservableProvider provider, TResult value, int repeatCount);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Repeat(IQbservableProvider provider, TResult value, int repeatCount, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Repeat(IQbservableProvider provider, TResult value, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Repeat(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Repeat(IQbservable`1<TSource> source, int repeatCount);
    [ExtensionAttribute]
public static IQbservable`1<TSource> RepeatWhen(IQbservable`1<TSource> source, Expression`1<Func`2<IObservable`1<object>, IObservable`1<TSignal>>> handler);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Replay(IQbservable`1<TSource> source, Expression`1<Func`2<IObservable`1<TSource>, IObservable`1<TResult>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Replay(IQbservable`1<TSource> source, Expression`1<Func`2<IObservable`1<TSource>, IObservable`1<TResult>>> selector, int bufferSize);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Replay(IQbservable`1<TSource> source, Expression`1<Func`2<IObservable`1<TSource>, IObservable`1<TResult>>> selector, int bufferSize, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Replay(IQbservable`1<TSource> source, Expression`1<Func`2<IObservable`1<TSource>, IObservable`1<TResult>>> selector, int bufferSize, TimeSpan window);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Replay(IQbservable`1<TSource> source, Expression`1<Func`2<IObservable`1<TSource>, IObservable`1<TResult>>> selector, int bufferSize, TimeSpan window, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Replay(IQbservable`1<TSource> source, Expression`1<Func`2<IObservable`1<TSource>, IObservable`1<TResult>>> selector, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Replay(IQbservable`1<TSource> source, Expression`1<Func`2<IObservable`1<TSource>, IObservable`1<TResult>>> selector, TimeSpan window);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Replay(IQbservable`1<TSource> source, Expression`1<Func`2<IObservable`1<TSource>, IObservable`1<TResult>>> selector, TimeSpan window, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Retry(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Retry(IQbservable`1<TSource> source, int retryCount);
    [ExtensionAttribute]
public static IQbservable`1<TSource> RetryWhen(IQbservable`1<TSource> source, Expression`1<Func`2<IObservable`1<Exception>, IObservable`1<TSignal>>> handler);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Return(IQbservableProvider provider, TResult value);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Return(IQbservableProvider provider, TResult value, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Sample(IQbservable`1<TSource> source, TimeSpan interval);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Sample(IQbservable`1<TSource> source, TimeSpan interval, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Sample(IQbservable`1<TSource> source, IObservable`1<TSample> sampler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Scan(IQbservable`1<TSource> source, Expression`1<Func`3<TSource, TSource, TSource>> accumulator);
    [ExtensionAttribute]
public static IQbservable`1<TAccumulate> Scan(IQbservable`1<TSource> source, TAccumulate seed, Expression`1<Func`3<TAccumulate, TSource, TAccumulate>> accumulator);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Select(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Select(IQbservable`1<TSource> source, Expression`1<Func`3<TSource, int, TResult>> selector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> SelectMany(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, IObservable`1<TCollection>>> collectionSelector, Expression`1<Func`3<TSource, TCollection, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> SelectMany(IQbservable`1<TSource> source, Expression`1<Func`3<TSource, int, IObservable`1<TCollection>>> collectionSelector, Expression`1<Func`5<TSource, int, TCollection, int, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> SelectMany(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, IEnumerable`1<TCollection>>> collectionSelector, Expression`1<Func`3<TSource, TCollection, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> SelectMany(IQbservable`1<TSource> source, Expression`1<Func`3<TSource, int, IEnumerable`1<TCollection>>> collectionSelector, Expression`1<Func`5<TSource, int, TCollection, int, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TOther> SelectMany(IQbservable`1<TSource> source, IObservable`1<TOther> other);
    [ExtensionAttribute]
public static IQbservable`1<TResult> SelectMany(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, IObservable`1<TResult>>> onNext, Expression`1<Func`2<Exception, IObservable`1<TResult>>> onError, Expression`1<Func`1<IObservable`1<TResult>>> onCompleted);
    [ExtensionAttribute]
public static IQbservable`1<TResult> SelectMany(IQbservable`1<TSource> source, Expression`1<Func`3<TSource, int, IObservable`1<TResult>>> onNext, Expression`1<Func`2<Exception, IObservable`1<TResult>>> onError, Expression`1<Func`1<IObservable`1<TResult>>> onCompleted);
    [ExtensionAttribute]
public static IQbservable`1<TResult> SelectMany(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, IObservable`1<TResult>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> SelectMany(IQbservable`1<TSource> source, Expression`1<Func`3<TSource, int, IObservable`1<TResult>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> SelectMany(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, Task`1<TResult>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> SelectMany(IQbservable`1<TSource> source, Expression`1<Func`3<TSource, int, Task`1<TResult>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> SelectMany(IQbservable`1<TSource> source, Expression`1<Func`3<TSource, CancellationToken, Task`1<TResult>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> SelectMany(IQbservable`1<TSource> source, Expression`1<Func`4<TSource, int, CancellationToken, Task`1<TResult>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> SelectMany(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, IEnumerable`1<TResult>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> SelectMany(IQbservable`1<TSource> source, Expression`1<Func`3<TSource, int, IEnumerable`1<TResult>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> SelectMany(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, Task`1<TTaskResult>>> taskSelector, Expression`1<Func`3<TSource, TTaskResult, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> SelectMany(IQbservable`1<TSource> source, Expression`1<Func`3<TSource, int, Task`1<TTaskResult>>> taskSelector, Expression`1<Func`4<TSource, int, TTaskResult, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> SelectMany(IQbservable`1<TSource> source, Expression`1<Func`3<TSource, CancellationToken, Task`1<TTaskResult>>> taskSelector, Expression`1<Func`3<TSource, TTaskResult, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> SelectMany(IQbservable`1<TSource> source, Expression`1<Func`4<TSource, int, CancellationToken, Task`1<TTaskResult>>> taskSelector, Expression`1<Func`4<TSource, int, TTaskResult, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<bool> SequenceEqual(IQbservable`1<TSource> first, IObservable`1<TSource> second);
    [ExtensionAttribute]
public static IQbservable`1<bool> SequenceEqual(IQbservable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static IQbservable`1<bool> SequenceEqual(IQbservable`1<TSource> first, IObservable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IQbservable`1<bool> SequenceEqual(IQbservable`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IQbservable`1<TSource> SingleAsync(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<TSource> SingleAsync(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static IQbservable`1<TSource> SingleOrDefaultAsync(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<TSource> SingleOrDefaultAsync(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Skip(IQbservable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Skip(IQbservable`1<TSource> source, TimeSpan duration);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Skip(IQbservable`1<TSource> source, TimeSpan duration, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> SkipLast(IQbservable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IQbservable`1<TSource> SkipLast(IQbservable`1<TSource> source, TimeSpan duration);
    [ExtensionAttribute]
public static IQbservable`1<TSource> SkipLast(IQbservable`1<TSource> source, TimeSpan duration, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> SkipUntil(IQbservable`1<TSource> source, DateTimeOffset startTime);
    [ExtensionAttribute]
public static IQbservable`1<TSource> SkipUntil(IQbservable`1<TSource> source, DateTimeOffset startTime, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> SkipUntil(IQbservable`1<TSource> source, IObservable`1<TOther> other);
    [ExtensionAttribute]
public static IQbservable`1<TSource> SkipWhile(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static IQbservable`1<TSource> SkipWhile(IQbservable`1<TSource> source, Expression`1<Func`3<TSource, int, bool>> predicate);
    [ExtensionAttribute]
public static IQbservable`1<Unit> Start(IQbservableProvider provider, Expression`1<Action> action);
    [ExtensionAttribute]
public static IQbservable`1<Unit> Start(IQbservableProvider provider, Expression`1<Action> action, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Start(IQbservableProvider provider, Expression`1<Func`1<TResult>> function);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Start(IQbservableProvider provider, Expression`1<Func`1<TResult>> function, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<Unit> StartAsync(IQbservableProvider provider, Expression`1<Func`1<Task>> actionAsync);
    [ExtensionAttribute]
public static IQbservable`1<Unit> StartAsync(IQbservableProvider provider, Expression`1<Func`1<Task>> actionAsync, TaskObservationOptions options);
    [ExtensionAttribute]
public static IQbservable`1<Unit> StartAsync(IQbservableProvider provider, Expression`1<Func`1<Task>> actionAsync, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<Unit> StartAsync(IQbservableProvider provider, Expression`1<Func`2<CancellationToken, Task>> actionAsync);
    [ExtensionAttribute]
public static IQbservable`1<Unit> StartAsync(IQbservableProvider provider, Expression`1<Func`2<CancellationToken, Task>> actionAsync, TaskObservationOptions options);
    [ExtensionAttribute]
public static IQbservable`1<Unit> StartAsync(IQbservableProvider provider, Expression`1<Func`2<CancellationToken, Task>> actionAsync, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TResult> StartAsync(IQbservableProvider provider, Expression`1<Func`1<Task`1<TResult>>> functionAsync);
    [ExtensionAttribute]
public static IQbservable`1<TResult> StartAsync(IQbservableProvider provider, Expression`1<Func`2<CancellationToken, Task`1<TResult>>> functionAsync);
    [ExtensionAttribute]
public static IQbservable`1<TResult> StartAsync(IQbservableProvider provider, Expression`1<Func`2<CancellationToken, Task`1<TResult>>> functionAsync, TaskObservationOptions options);
    [ExtensionAttribute]
public static IQbservable`1<TResult> StartAsync(IQbservableProvider provider, Expression`1<Func`1<Task`1<TResult>>> functionAsync, TaskObservationOptions options);
    [ExtensionAttribute]
public static IQbservable`1<TResult> StartAsync(IQbservableProvider provider, Expression`1<Func`2<CancellationToken, Task`1<TResult>>> functionAsync, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TResult> StartAsync(IQbservableProvider provider, Expression`1<Func`1<Task`1<TResult>>> functionAsync, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> StartWith(IQbservable`1<TSource> source, IScheduler scheduler, TSource[] values);
    [ExtensionAttribute]
public static IQbservable`1<TSource> StartWith(IQbservable`1<TSource> source, IScheduler scheduler, IEnumerable`1<TSource> values);
    [ExtensionAttribute]
public static IQbservable`1<TSource> StartWith(IQbservable`1<TSource> source, TSource[] values);
    [ExtensionAttribute]
public static IQbservable`1<TSource> StartWith(IQbservable`1<TSource> source, IEnumerable`1<TSource> values);
    [ExtensionAttribute]
public static IQbservable`1<TSource> SubscribeOn(IQbservable`1<TSource> source, SynchronizationContext context);
    [ExtensionAttribute]
public static IQbservable`1<TSource> SubscribeOn(IQbservable`1<TSource> source, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<decimal> Sum(IQbservable`1<decimal> source);
    [ExtensionAttribute]
public static IQbservable`1<double> Sum(IQbservable`1<double> source);
    [ExtensionAttribute]
public static IQbservable`1<int> Sum(IQbservable`1<int> source);
    [ExtensionAttribute]
public static IQbservable`1<long> Sum(IQbservable`1<long> source);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<decimal>> Sum(IQbservable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<double>> Sum(IQbservable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<int>> Sum(IQbservable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<long>> Sum(IQbservable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<float>> Sum(IQbservable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static IQbservable`1<float> Sum(IQbservable`1<float> source);
    [ExtensionAttribute]
public static IQbservable`1<double> Sum(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector);
    [ExtensionAttribute]
public static IQbservable`1<float> Sum(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector);
    [ExtensionAttribute]
public static IQbservable`1<decimal> Sum(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector);
    [ExtensionAttribute]
public static IQbservable`1<int> Sum(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector);
    [ExtensionAttribute]
public static IQbservable`1<long> Sum(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<double>> Sum(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<float>> Sum(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<decimal>> Sum(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<int>> Sum(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<Nullable`1<long>> Sum(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Switch(IQbservable`1<IObservable`1<TSource>> sources);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Switch(IQbservable`1<Task`1<TSource>> sources);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Synchronize(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Synchronize(IQbservable`1<TSource> source, object gate);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Take(IQbservable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Take(IQbservable`1<TSource> source, int count, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Take(IQbservable`1<TSource> source, TimeSpan duration);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Take(IQbservable`1<TSource> source, TimeSpan duration, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> TakeLast(IQbservable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IQbservable`1<TSource> TakeLast(IQbservable`1<TSource> source, int count, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> TakeLast(IQbservable`1<TSource> source, TimeSpan duration);
    [ExtensionAttribute]
public static IQbservable`1<TSource> TakeLast(IQbservable`1<TSource> source, TimeSpan duration, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> TakeLast(IQbservable`1<TSource> source, TimeSpan duration, IScheduler timerScheduler, IScheduler loopScheduler);
    [ExtensionAttribute]
public static IQbservable`1<IList`1<TSource>> TakeLastBuffer(IQbservable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IQbservable`1<IList`1<TSource>> TakeLastBuffer(IQbservable`1<TSource> source, TimeSpan duration);
    [ExtensionAttribute]
public static IQbservable`1<IList`1<TSource>> TakeLastBuffer(IQbservable`1<TSource> source, TimeSpan duration, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> TakeUntil(IQbservable`1<TSource> source, DateTimeOffset endTime);
    [ExtensionAttribute]
public static IQbservable`1<TSource> TakeUntil(IQbservable`1<TSource> source, DateTimeOffset endTime, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> TakeUntil(IQbservable`1<TSource> source, IObservable`1<TOther> other);
    [ExtensionAttribute]
public static IQbservable`1<TSource> TakeUntil(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, bool>> stopPredicate);
    [ExtensionAttribute]
public static IQbservable`1<TSource> TakeWhile(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static IQbservable`1<TSource> TakeWhile(IQbservable`1<TSource> source, Expression`1<Func`3<TSource, int, bool>> predicate);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Throttle(IQbservable`1<TSource> source, TimeSpan dueTime);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Throttle(IQbservable`1<TSource> source, TimeSpan dueTime, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Throttle(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, IObservable`1<TThrottle>>> throttleDurationSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Throw(IQbservableProvider provider, Exception exception);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Throw(IQbservableProvider provider, Exception exception, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Throw(IQbservableProvider provider, Exception exception, IScheduler scheduler, TResult witness);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Throw(IQbservableProvider provider, Exception exception, TResult witness);
    [ExtensionAttribute]
public static IQbservable`1<TimeInterval`1<TSource>> TimeInterval(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<TimeInterval`1<TSource>> TimeInterval(IQbservable`1<TSource> source, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Timeout(IQbservable`1<TSource> source, DateTimeOffset dueTime);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Timeout(IQbservable`1<TSource> source, DateTimeOffset dueTime, IObservable`1<TSource> other);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Timeout(IQbservable`1<TSource> source, DateTimeOffset dueTime, IObservable`1<TSource> other, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Timeout(IQbservable`1<TSource> source, DateTimeOffset dueTime, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Timeout(IQbservable`1<TSource> source, TimeSpan dueTime);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Timeout(IQbservable`1<TSource> source, TimeSpan dueTime, IObservable`1<TSource> other);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Timeout(IQbservable`1<TSource> source, TimeSpan dueTime, IObservable`1<TSource> other, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Timeout(IQbservable`1<TSource> source, TimeSpan dueTime, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Timeout(IQbservable`1<TSource> source, IObservable`1<TTimeout> firstTimeout, Expression`1<Func`2<TSource, IObservable`1<TTimeout>>> timeoutDurationSelector);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Timeout(IQbservable`1<TSource> source, IObservable`1<TTimeout> firstTimeout, Expression`1<Func`2<TSource, IObservable`1<TTimeout>>> timeoutDurationSelector, IObservable`1<TSource> other);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Timeout(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, IObservable`1<TTimeout>>> timeoutDurationSelector);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Timeout(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, IObservable`1<TTimeout>>> timeoutDurationSelector, IObservable`1<TSource> other);
    [ExtensionAttribute]
public static IQbservable`1<long> Timer(IQbservableProvider provider, DateTimeOffset dueTime);
    [ExtensionAttribute]
public static IQbservable`1<long> Timer(IQbservableProvider provider, DateTimeOffset dueTime, TimeSpan period);
    [ExtensionAttribute]
public static IQbservable`1<long> Timer(IQbservableProvider provider, DateTimeOffset dueTime, TimeSpan period, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<long> Timer(IQbservableProvider provider, DateTimeOffset dueTime, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<long> Timer(IQbservableProvider provider, TimeSpan dueTime);
    [ExtensionAttribute]
public static IQbservable`1<long> Timer(IQbservableProvider provider, TimeSpan dueTime, TimeSpan period);
    [ExtensionAttribute]
public static IQbservable`1<long> Timer(IQbservableProvider provider, TimeSpan dueTime, TimeSpan period, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<long> Timer(IQbservableProvider provider, TimeSpan dueTime, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<Timestamped`1<TSource>> Timestamp(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<Timestamped`1<TSource>> Timestamp(IQbservable`1<TSource> source, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TSource[]> ToArray(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<IDictionary`2<TKey, TSource>> ToDictionary(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
public static IQbservable`1<IDictionary`2<TKey, TSource>> ToDictionary(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQbservable`1<IDictionary`2<TKey, TElement>> ToDictionary(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector);
    [ExtensionAttribute]
public static IQbservable`1<IDictionary`2<TKey, TElement>> ToDictionary(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQueryable`1<TSource> ToQueryable(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<IList`1<TSource>> ToList(IQbservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<ILookup`2<TKey, TSource>> ToLookup(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
public static IQbservable`1<ILookup`2<TKey, TSource>> ToLookup(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQbservable`1<ILookup`2<TKey, TElement>> ToLookup(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector);
    [ExtensionAttribute]
public static IQbservable`1<ILookup`2<TKey, TElement>> ToLookup(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQbservable`1<TSource> ToObservable(IQbservableProvider provider, IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<TSource> ToObservable(IQbservableProvider provider, IEnumerable`1<TSource> source, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Using(IQbservableProvider provider, Expression`1<Func`1<TResource>> resourceFactory, Expression`1<Func`2<TResource, IObservable`1<TResult>>> observableFactory);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Using(IQbservableProvider provider, Expression`1<Func`2<CancellationToken, Task`1<TResource>>> resourceFactoryAsync, Expression`1<Func`3<TResource, CancellationToken, Task`1<IObservable`1<TResult>>>> observableFactoryAsync);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Where(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static IQbservable`1<TSource> Where(IQbservable`1<TSource> source, Expression`1<Func`3<TSource, int, bool>> predicate);
    [ExtensionAttribute]
public static IQbservable`1<TSource> While(IQbservableProvider provider, Expression`1<Func`1<bool>> condition, IObservable`1<TSource> source);
    [ExtensionAttribute]
public static IQbservable`1<IObservable`1<TSource>> Window(IQbservable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IQbservable`1<IObservable`1<TSource>> Window(IQbservable`1<TSource> source, int count, int skip);
    [ExtensionAttribute]
public static IQbservable`1<IObservable`1<TSource>> Window(IQbservable`1<TSource> source, TimeSpan timeSpan);
    [ExtensionAttribute]
public static IQbservable`1<IObservable`1<TSource>> Window(IQbservable`1<TSource> source, TimeSpan timeSpan, int count);
    [ExtensionAttribute]
public static IQbservable`1<IObservable`1<TSource>> Window(IQbservable`1<TSource> source, TimeSpan timeSpan, int count, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<IObservable`1<TSource>> Window(IQbservable`1<TSource> source, TimeSpan timeSpan, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<IObservable`1<TSource>> Window(IQbservable`1<TSource> source, TimeSpan timeSpan, TimeSpan timeShift);
    [ExtensionAttribute]
public static IQbservable`1<IObservable`1<TSource>> Window(IQbservable`1<TSource> source, TimeSpan timeSpan, TimeSpan timeShift, IScheduler scheduler);
    [ExtensionAttribute]
public static IQbservable`1<IObservable`1<TSource>> Window(IQbservable`1<TSource> source, IObservable`1<TWindowBoundary> windowBoundaries);
    [ExtensionAttribute]
public static IQbservable`1<IObservable`1<TSource>> Window(IQbservable`1<TSource> source, Expression`1<Func`1<IObservable`1<TWindowClosing>>> windowClosingSelector);
    [ExtensionAttribute]
public static IQbservable`1<IObservable`1<TSource>> Window(IQbservable`1<TSource> source, IObservable`1<TWindowOpening> windowOpenings, Expression`1<Func`2<TWindowOpening, IObservable`1<TWindowClosing>>> windowClosingSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> WithLatestFrom(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, Expression`1<Func`3<TFirst, TSecond, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<IList`1<TSource>> Zip(IQbservableProvider provider, IEnumerable`1<IObservable`1<TSource>> sources);
    [ExtensionAttribute]
public static IQbservable`1<IList`1<TSource>> Zip(IQbservableProvider provider, IObservable`1[] sources);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Zip(IQbservableProvider provider, IEnumerable`1<IObservable`1<TSource>> sources, Expression`1<Func`2<IList`1<TSource>, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Zip(IQbservable`1<TSource1> first, IObservable`1<TSource2> second, Expression`1<Func`3<TSource1, TSource2, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Zip(IQbservable`1<TSource1> first, IEnumerable`1<TSource2> second, Expression`1<Func`3<TSource1, TSource2, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Zip(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, Expression`1<Func`4<TSource1, TSource2, TSource3, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Zip(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, Expression`1<Func`5<TSource1, TSource2, TSource3, TSource4, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Zip(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, Expression`1<Func`6<TSource1, TSource2, TSource3, TSource4, TSource5, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Zip(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, Expression`1<Func`7<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Zip(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, Expression`1<Func`8<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Zip(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, Expression`1<Func`9<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Zip(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, Expression`1<Func`10<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Zip(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, Expression`1<Func`11<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Zip(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, Expression`1<Func`12<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Zip(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, Expression`1<Func`13<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Zip(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, IObservable`1<TSource13> source13, Expression`1<Func`14<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Zip(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, IObservable`1<TSource13> source13, IObservable`1<TSource14> source14, Expression`1<Func`15<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Zip(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, IObservable`1<TSource13> source13, IObservable`1<TSource14> source14, IObservable`1<TSource15> source15, Expression`1<Func`16<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> Zip(IQbservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, IObservable`1<TSource13> source13, IObservable`1<TSource14> source14, IObservable`1<TSource15> source15, IObservable`1<TSource16> source16, Expression`1<Func`17<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16, TResult>> resultSelector);
    [ExtensionAttribute]
public static Func`1<IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action> action);
    [ExtensionAttribute]
public static Func`1<IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action> action, IScheduler scheduler);
    [ExtensionAttribute]
public static Func`2<TArg1, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`1<TArg1>> action);
    [ExtensionAttribute]
public static Func`2<TArg1, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`1<TArg1>> action, IScheduler scheduler);
    [ExtensionAttribute]
public static Func`3<TArg1, TArg2, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`2<TArg1, TArg2>> action);
    [ExtensionAttribute]
public static Func`3<TArg1, TArg2, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`2<TArg1, TArg2>> action, IScheduler scheduler);
    [ExtensionAttribute]
public static Func`4<TArg1, TArg2, TArg3, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`3<TArg1, TArg2, TArg3>> action);
    [ExtensionAttribute]
public static Func`4<TArg1, TArg2, TArg3, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`3<TArg1, TArg2, TArg3>> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`5<TArg1, TArg2, TArg3, TArg4, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`4<TArg1, TArg2, TArg3, TArg4>> action);
    [ExtensionAttribute]
public static Func`5<TArg1, TArg2, TArg3, TArg4, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`4<TArg1, TArg2, TArg3, TArg4>> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`6<TArg1, TArg2, TArg3, TArg4, TArg5, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`5<TArg1, TArg2, TArg3, TArg4, TArg5>> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`6<TArg1, TArg2, TArg3, TArg4, TArg5, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`5<TArg1, TArg2, TArg3, TArg4, TArg5>> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`7<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`6<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`7<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`6<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`8<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`7<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`8<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`7<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`8<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`8<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`16<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`16<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`17<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`16<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`17<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, IQbservable`1<Unit>> ToAsync(IQbservableProvider provider, Expression`1<Action`16<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>> action, IScheduler scheduler);
    [ExtensionAttribute]
public static Func`1<IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`1<TResult>> function);
    [ExtensionAttribute]
public static Func`1<IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`1<TResult>> function, IScheduler scheduler);
    [ExtensionAttribute]
public static Func`2<TArg1, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`2<TArg1, TResult>> function);
    [ExtensionAttribute]
public static Func`2<TArg1, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`2<TArg1, TResult>> function, IScheduler scheduler);
    [ExtensionAttribute]
public static Func`3<TArg1, TArg2, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`3<TArg1, TArg2, TResult>> function);
    [ExtensionAttribute]
public static Func`3<TArg1, TArg2, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`3<TArg1, TArg2, TResult>> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`4<TArg1, TArg2, TArg3, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`4<TArg1, TArg2, TArg3, TResult>> function);
    [ExtensionAttribute]
public static Func`4<TArg1, TArg2, TArg3, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`4<TArg1, TArg2, TArg3, TResult>> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`5<TArg1, TArg2, TArg3, TArg4, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`5<TArg1, TArg2, TArg3, TArg4, TResult>> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`5<TArg1, TArg2, TArg3, TArg4, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`5<TArg1, TArg2, TArg3, TArg4, TResult>> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`6<TArg1, TArg2, TArg3, TArg4, TArg5, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`6<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`6<TArg1, TArg2, TArg3, TArg4, TArg5, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`6<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`7<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`7<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`7<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`7<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`8<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`8<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`8<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`8<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult>> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult>> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult>> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult>> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult>> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult>> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult>> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult>> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult>> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult>> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult>> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult>> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult>> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult>> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`16<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`16<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TResult>> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`16<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`16<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TResult>> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`17<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`17<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, TResult>> function);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`17<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, IQbservable`1<TResult>> ToAsync(IQbservableProvider provider, Expression`1<Func`17<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, TResult>> function, IScheduler scheduler);
    [ExtensionAttribute]
public static Func`1<IQbservable`1<Unit>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`3<AsyncCallback, object, IAsyncResult>> begin, Expression`1<Action`1<IAsyncResult>> end);
    [ExtensionAttribute]
public static Func`2<TArg1, IQbservable`1<Unit>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`4<TArg1, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Action`1<IAsyncResult>> end);
    [ExtensionAttribute]
public static Func`3<TArg1, TArg2, IQbservable`1<Unit>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`5<TArg1, TArg2, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Action`1<IAsyncResult>> end);
    [ExtensionAttribute]
public static Func`4<TArg1, TArg2, TArg3, IQbservable`1<Unit>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`6<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Action`1<IAsyncResult>> end);
    [ExtensionAttribute]
public static Func`5<TArg1, TArg2, TArg3, TArg4, IQbservable`1<Unit>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`7<TArg1, TArg2, TArg3, TArg4, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Action`1<IAsyncResult>> end);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`6<TArg1, TArg2, TArg3, TArg4, TArg5, IQbservable`1<Unit>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`8<TArg1, TArg2, TArg3, TArg4, TArg5, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Action`1<IAsyncResult>> end);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`7<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, IQbservable`1<Unit>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Action`1<IAsyncResult>> end);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`8<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, IQbservable`1<Unit>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Action`1<IAsyncResult>> end);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, IQbservable`1<Unit>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Action`1<IAsyncResult>> end);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, IQbservable`1<Unit>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Action`1<IAsyncResult>> end);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, IQbservable`1<Unit>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Action`1<IAsyncResult>> end);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, IQbservable`1<Unit>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Action`1<IAsyncResult>> end);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, IQbservable`1<Unit>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Action`1<IAsyncResult>> end);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, IQbservable`1<Unit>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`16<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Action`1<IAsyncResult>> end);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, IQbservable`1<Unit>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`17<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Action`1<IAsyncResult>> end);
    [ExtensionAttribute]
public static Func`1<IQbservable`1<TResult>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`3<AsyncCallback, object, IAsyncResult>> begin, Expression`1<Func`2<IAsyncResult, TResult>> end);
    [ExtensionAttribute]
public static Func`2<TArg1, IQbservable`1<TResult>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`4<TArg1, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Func`2<IAsyncResult, TResult>> end);
    [ExtensionAttribute]
public static Func`3<TArg1, TArg2, IQbservable`1<TResult>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`5<TArg1, TArg2, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Func`2<IAsyncResult, TResult>> end);
    [ExtensionAttribute]
public static Func`4<TArg1, TArg2, TArg3, IQbservable`1<TResult>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`6<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Func`2<IAsyncResult, TResult>> end);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`5<TArg1, TArg2, TArg3, TArg4, IQbservable`1<TResult>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`7<TArg1, TArg2, TArg3, TArg4, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Func`2<IAsyncResult, TResult>> end);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`6<TArg1, TArg2, TArg3, TArg4, TArg5, IQbservable`1<TResult>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`8<TArg1, TArg2, TArg3, TArg4, TArg5, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Func`2<IAsyncResult, TResult>> end);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`7<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, IQbservable`1<TResult>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Func`2<IAsyncResult, TResult>> end);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`8<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, IQbservable`1<TResult>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Func`2<IAsyncResult, TResult>> end);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, IQbservable`1<TResult>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Func`2<IAsyncResult, TResult>> end);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, IQbservable`1<TResult>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Func`2<IAsyncResult, TResult>> end);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, IQbservable`1<TResult>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Func`2<IAsyncResult, TResult>> end);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, IQbservable`1<TResult>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Func`2<IAsyncResult, TResult>> end);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, IQbservable`1<TResult>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Func`2<IAsyncResult, TResult>> end);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, IQbservable`1<TResult>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`16<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Func`2<IAsyncResult, TResult>> end);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Func`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, IQbservable`1<TResult>> FromAsyncPattern(IQbservableProvider provider, Expression`1<Func`17<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, AsyncCallback, object, IAsyncResult>> begin, Expression`1<Func`2<IAsyncResult, TResult>> end);
    [ExtensionAttribute]
public static QueryablePattern`2<TLeft, TRight> And(IQbservable`1<TLeft> left, IObservable`1<TRight> right);
    [ExtensionAttribute]
public static QueryablePlan`1<TResult> Then(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector);
    [ExtensionAttribute]
public static IQbservable`1<TResult> When(IQbservableProvider provider, QueryablePlan`1[] plans);
    [ExtensionAttribute]
public static IQbservable`1<TResult> When(IQbservableProvider provider, IEnumerable`1<QueryablePlan`1<TResult>> plans);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[LocalQueryMethodImplementationTypeAttribute("System.Reactive.Linq.ObservableEx")]
public static class System.Reactive.Linq.QbservableEx : object {
    internal static Expression GetSourceExpression(IObservable`1<TSource> source);
    internal static Expression GetSourceExpression(IEnumerable`1<TSource> source);
    internal static Expression GetSourceExpression(IObservable`1[] sources);
    internal static Expression GetSourceExpression(IEnumerable`1[] sources);
    internal static MethodInfo InfoOf(Expression`1<Func`1<R>> f);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
[ExperimentalAttribute]
public static IQbservable`1<Unit> Create(IQbservableProvider provider, Expression`1<Func`1<IEnumerable`1<IObservable`1<object>>>> iteratorMethod);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
[ExperimentalAttribute]
public static IQbservable`1<TResult> Create(IQbservableProvider provider, Expression`1<Func`2<IObserver`1<TResult>, IEnumerable`1<IObservable`1<object>>>> iteratorMethod);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
[ExperimentalAttribute]
public static IQbservable`1<TSource> Expand(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, IObservable`1<TSource>>> selector);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
[ExperimentalAttribute]
public static IQbservable`1<TSource> Expand(IQbservable`1<TSource> source, Expression`1<Func`2<TSource, IObservable`1<TSource>>> selector, IScheduler scheduler);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
[ExperimentalAttribute]
public static IQbservable`1<TSource[]> ForkJoin(IQbservableProvider provider, IObservable`1[] sources);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
[ExperimentalAttribute]
public static IQbservable`1<TSource[]> ForkJoin(IQbservableProvider provider, IEnumerable`1<IObservable`1<TSource>> sources);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
[ExperimentalAttribute]
public static IQbservable`1<TResult> ForkJoin(IQbservable`1<TSource1> first, IObservable`1<TSource2> second, Expression`1<Func`3<TSource1, TSource2, TResult>> resultSelector);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
[ExperimentalAttribute]
public static IQbservable`1<TResult> Let(IQbservable`1<TSource> source, Expression`1<Func`2<IObservable`1<TSource>, IObservable`1<TResult>>> selector);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
[ExperimentalAttribute]
public static IQbservable`1<TResult> ManySelect(IQbservable`1<TSource> source, Expression`1<Func`2<IObservable`1<TSource>, TResult>> selector);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
[ExperimentalAttribute]
public static IQbservable`1<TResult> ManySelect(IQbservable`1<TSource> source, Expression`1<Func`2<IObservable`1<TSource>, TResult>> selector, IScheduler scheduler);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static IQbservable`1<ValueTuple`2<TFirst, TSecond>> WithLatestFrom(IQbservable`1<TFirst> first, IObservable`1<TSecond> second);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static IQbservable`1<ValueTuple`2<TFirst, TSecond>> Zip(IQbservable`1<TFirst> first, IEnumerable`1<TSecond> second);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`2<TFirst, TSecond>> CombineLatest(IQbservable`1<TFirst> first, IObservable`1<TSecond> second);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`3<TFirst, TSecond, TThird>> CombineLatest(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`4<TFirst, TSecond, TThird, TFourth>> CombineLatest(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`5<TFirst, TSecond, TThird, TFourth, TFifth>> CombineLatest(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`6<TFirst, TSecond, TThird, TFourth, TFifth, TSixth>> CombineLatest(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh>> CombineLatest(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth, IObservable`1<TSeventh> seventh);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, ValueTuple`1<TEighth>>> CombineLatest(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth, IObservable`1<TSeventh> seventh, IObservable`1<TEighth> eighth);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, ValueTuple`2<TEighth, TNinth>>> CombineLatest(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth, IObservable`1<TSeventh> seventh, IObservable`1<TEighth> eighth, IObservable`1<TNinth> ninth);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, ValueTuple`3<TEighth, TNinth, TTenth>>> CombineLatest(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth, IObservable`1<TSeventh> seventh, IObservable`1<TEighth> eighth, IObservable`1<TNinth> ninth, IObservable`1<TTenth> tenth);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, ValueTuple`4<TEighth, TNinth, TTenth, TEleventh>>> CombineLatest(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth, IObservable`1<TSeventh> seventh, IObservable`1<TEighth> eighth, IObservable`1<TNinth> ninth, IObservable`1<TTenth> tenth, IObservable`1<TEleventh> eleventh);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, ValueTuple`5<TEighth, TNinth, TTenth, TEleventh, TTwelfth>>> CombineLatest(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth, IObservable`1<TSeventh> seventh, IObservable`1<TEighth> eighth, IObservable`1<TNinth> ninth, IObservable`1<TTenth> tenth, IObservable`1<TEleventh> eleventh, IObservable`1<TTwelfth> twelfth);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, ValueTuple`6<TEighth, TNinth, TTenth, TEleventh, TTwelfth, TThirteenth>>> CombineLatest(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth, IObservable`1<TSeventh> seventh, IObservable`1<TEighth> eighth, IObservable`1<TNinth> ninth, IObservable`1<TTenth> tenth, IObservable`1<TEleventh> eleventh, IObservable`1<TTwelfth> twelfth, IObservable`1<TThirteenth> thirteenth);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, ValueTuple`7<TEighth, TNinth, TTenth, TEleventh, TTwelfth, TThirteenth, TFourteenth>>> CombineLatest(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth, IObservable`1<TSeventh> seventh, IObservable`1<TEighth> eighth, IObservable`1<TNinth> ninth, IObservable`1<TTenth> tenth, IObservable`1<TEleventh> eleventh, IObservable`1<TTwelfth> twelfth, IObservable`1<TThirteenth> thirteenth, IObservable`1<TFourteenth> fourteenth);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, ValueTuple`8<TEighth, TNinth, TTenth, TEleventh, TTwelfth, TThirteenth, TFourteenth, ValueTuple`1<TFifteenth>>>> CombineLatest(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth, IObservable`1<TSeventh> seventh, IObservable`1<TEighth> eighth, IObservable`1<TNinth> ninth, IObservable`1<TTenth> tenth, IObservable`1<TEleventh> eleventh, IObservable`1<TTwelfth> twelfth, IObservable`1<TThirteenth> thirteenth, IObservable`1<TFourteenth> fourteenth, IObservable`1<TFifteenth> fifteenth);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, ValueTuple`8<TEighth, TNinth, TTenth, TEleventh, TTwelfth, TThirteenth, TFourteenth, ValueTuple`2<TFifteenth, TSixteenth>>>> CombineLatest(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth, IObservable`1<TSeventh> seventh, IObservable`1<TEighth> eighth, IObservable`1<TNinth> ninth, IObservable`1<TTenth> tenth, IObservable`1<TEleventh> eleventh, IObservable`1<TTwelfth> twelfth, IObservable`1<TThirteenth> thirteenth, IObservable`1<TFourteenth> fourteenth, IObservable`1<TFifteenth> fifteenth, IObservable`1<TSixteenth> sixteenth);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`2<TFirst, TSecond>> Zip(IQbservable`1<TFirst> first, IObservable`1<TSecond> second);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`3<TFirst, TSecond, TThird>> Zip(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`4<TFirst, TSecond, TThird, TFourth>> Zip(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`5<TFirst, TSecond, TThird, TFourth, TFifth>> Zip(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`6<TFirst, TSecond, TThird, TFourth, TFifth, TSixth>> Zip(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh>> Zip(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth, IObservable`1<TSeventh> seventh);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, ValueTuple`1<TEighth>>> Zip(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth, IObservable`1<TSeventh> seventh, IObservable`1<TEighth> eighth);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, ValueTuple`2<TEighth, TNinth>>> Zip(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth, IObservable`1<TSeventh> seventh, IObservable`1<TEighth> eighth, IObservable`1<TNinth> ninth);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, ValueTuple`3<TEighth, TNinth, TTenth>>> Zip(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth, IObservable`1<TSeventh> seventh, IObservable`1<TEighth> eighth, IObservable`1<TNinth> ninth, IObservable`1<TTenth> tenth);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, ValueTuple`4<TEighth, TNinth, TTenth, TEleventh>>> Zip(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth, IObservable`1<TSeventh> seventh, IObservable`1<TEighth> eighth, IObservable`1<TNinth> ninth, IObservable`1<TTenth> tenth, IObservable`1<TEleventh> eleventh);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, ValueTuple`5<TEighth, TNinth, TTenth, TEleventh, TTwelfth>>> Zip(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth, IObservable`1<TSeventh> seventh, IObservable`1<TEighth> eighth, IObservable`1<TNinth> ninth, IObservable`1<TTenth> tenth, IObservable`1<TEleventh> eleventh, IObservable`1<TTwelfth> twelfth);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, ValueTuple`6<TEighth, TNinth, TTenth, TEleventh, TTwelfth, TThirteenth>>> Zip(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth, IObservable`1<TSeventh> seventh, IObservable`1<TEighth> eighth, IObservable`1<TNinth> ninth, IObservable`1<TTenth> tenth, IObservable`1<TEleventh> eleventh, IObservable`1<TTwelfth> twelfth, IObservable`1<TThirteenth> thirteenth);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, ValueTuple`7<TEighth, TNinth, TTenth, TEleventh, TTwelfth, TThirteenth, TFourteenth>>> Zip(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth, IObservable`1<TSeventh> seventh, IObservable`1<TEighth> eighth, IObservable`1<TNinth> ninth, IObservable`1<TTenth> tenth, IObservable`1<TEleventh> eleventh, IObservable`1<TTwelfth> twelfth, IObservable`1<TThirteenth> thirteenth, IObservable`1<TFourteenth> fourteenth);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, ValueTuple`8<TEighth, TNinth, TTenth, TEleventh, TTwelfth, TThirteenth, TFourteenth, ValueTuple`1<TFifteenth>>>> Zip(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth, IObservable`1<TSeventh> seventh, IObservable`1<TEighth> eighth, IObservable`1<TNinth> ninth, IObservable`1<TTenth> tenth, IObservable`1<TEleventh> eleventh, IObservable`1<TTwelfth> twelfth, IObservable`1<TThirteenth> thirteenth, IObservable`1<TFourteenth> fourteenth, IObservable`1<TFifteenth> fifteenth);
    [ExtensionAttribute]
public static IQbservable`1<ValueTuple`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, ValueTuple`8<TEighth, TNinth, TTenth, TEleventh, TTwelfth, TThirteenth, TFourteenth, ValueTuple`2<TFifteenth, TSixteenth>>>> Zip(IQbservable`1<TFirst> first, IObservable`1<TSecond> second, IObservable`1<TThird> third, IObservable`1<TFourth> fourth, IObservable`1<TFifth> fifth, IObservable`1<TSixth> sixth, IObservable`1<TSeventh> seventh, IObservable`1<TEighth> eighth, IObservable`1<TNinth> ninth, IObservable`1<TTenth> tenth, IObservable`1<TEleventh> eleventh, IObservable`1<TTwelfth> twelfth, IObservable`1<TThirteenth> thirteenth, IObservable`1<TFourteenth> fourteenth, IObservable`1<TFifteenth> fifteenth, IObservable`1<TSixteenth> sixteenth);
}
public class System.Reactive.Linq.QueryDebugger : object {
    [NullableContextAttribute("1")]
private sealed virtual override T System.Reactive.Linq.IQueryServices.Extend(T baseImpl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Linq.QueryLanguage : object {
    public virtual IObservable`1<TAccumulate> Aggregate(IObservable`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> accumulator);
    public virtual IObservable`1<TResult> Aggregate(IObservable`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> accumulator, Func`2<TAccumulate, TResult> resultSelector);
    public virtual IObservable`1<TSource> Aggregate(IObservable`1<TSource> source, Func`3<TSource, TSource, TSource> accumulator);
    public virtual IObservable`1<double> Average(IObservable`1<TSource> source, Func`2<TSource, double> selector);
    public virtual IObservable`1<float> Average(IObservable`1<TSource> source, Func`2<TSource, float> selector);
    public virtual IObservable`1<decimal> Average(IObservable`1<TSource> source, Func`2<TSource, decimal> selector);
    public virtual IObservable`1<double> Average(IObservable`1<TSource> source, Func`2<TSource, int> selector);
    public virtual IObservable`1<double> Average(IObservable`1<TSource> source, Func`2<TSource, long> selector);
    public virtual IObservable`1<Nullable`1<double>> Average(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector);
    public virtual IObservable`1<Nullable`1<float>> Average(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector);
    public virtual IObservable`1<Nullable`1<decimal>> Average(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector);
    public virtual IObservable`1<Nullable`1<double>> Average(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector);
    public virtual IObservable`1<Nullable`1<double>> Average(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector);
    public virtual IObservable`1<bool> All(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public virtual IObservable`1<bool> Any(IObservable`1<TSource> source);
    public virtual IObservable`1<bool> Any(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public virtual IObservable`1<double> Average(IObservable`1<double> source);
    public virtual IObservable`1<float> Average(IObservable`1<float> source);
    public virtual IObservable`1<decimal> Average(IObservable`1<decimal> source);
    public virtual IObservable`1<double> Average(IObservable`1<int> source);
    public virtual IObservable`1<double> Average(IObservable`1<long> source);
    public virtual IObservable`1<Nullable`1<double>> Average(IObservable`1<Nullable`1<double>> source);
    public virtual IObservable`1<Nullable`1<float>> Average(IObservable`1<Nullable`1<float>> source);
    public virtual IObservable`1<Nullable`1<decimal>> Average(IObservable`1<Nullable`1<decimal>> source);
    public virtual IObservable`1<Nullable`1<double>> Average(IObservable`1<Nullable`1<int>> source);
    public virtual IObservable`1<Nullable`1<double>> Average(IObservable`1<Nullable`1<long>> source);
    public virtual IObservable`1<bool> Contains(IObservable`1<TSource> source, TSource value);
    public virtual IObservable`1<bool> Contains(IObservable`1<TSource> source, TSource value, IEqualityComparer`1<TSource> comparer);
    public virtual IObservable`1<int> Count(IObservable`1<TSource> source);
    public virtual IObservable`1<int> Count(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public virtual IObservable`1<TSource> ElementAt(IObservable`1<TSource> source, int index);
    public virtual IObservable`1<TSource> ElementAtOrDefault(IObservable`1<TSource> source, int index);
    public virtual IObservable`1<TSource> FirstAsync(IObservable`1<TSource> source);
    public virtual IObservable`1<TSource> FirstAsync(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public virtual IObservable`1<TSource> FirstOrDefaultAsync(IObservable`1<TSource> source);
    public virtual IObservable`1<TSource> FirstOrDefaultAsync(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public virtual IObservable`1<bool> IsEmpty(IObservable`1<TSource> source);
    public virtual IObservable`1<TSource> LastAsync(IObservable`1<TSource> source);
    public virtual IObservable`1<TSource> LastAsync(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public virtual IObservable`1<TSource> LastOrDefaultAsync(IObservable`1<TSource> source);
    public virtual IObservable`1<TSource> LastOrDefaultAsync(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public virtual IObservable`1<long> LongCount(IObservable`1<TSource> source);
    public virtual IObservable`1<long> LongCount(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public virtual IObservable`1<TSource> Max(IObservable`1<TSource> source);
    public virtual IObservable`1<TSource> Max(IObservable`1<TSource> source, IComparer`1<TSource> comparer);
    public virtual IObservable`1<double> Max(IObservable`1<double> source);
    public virtual IObservable`1<float> Max(IObservable`1<float> source);
    public virtual IObservable`1<decimal> Max(IObservable`1<decimal> source);
    public virtual IObservable`1<int> Max(IObservable`1<int> source);
    public virtual IObservable`1<long> Max(IObservable`1<long> source);
    public virtual IObservable`1<Nullable`1<double>> Max(IObservable`1<Nullable`1<double>> source);
    public virtual IObservable`1<Nullable`1<float>> Max(IObservable`1<Nullable`1<float>> source);
    public virtual IObservable`1<Nullable`1<decimal>> Max(IObservable`1<Nullable`1<decimal>> source);
    public virtual IObservable`1<Nullable`1<int>> Max(IObservable`1<Nullable`1<int>> source);
    public virtual IObservable`1<Nullable`1<long>> Max(IObservable`1<Nullable`1<long>> source);
    public virtual IObservable`1<TResult> Max(IObservable`1<TSource> source, Func`2<TSource, TResult> selector);
    public virtual IObservable`1<TResult> Max(IObservable`1<TSource> source, Func`2<TSource, TResult> selector, IComparer`1<TResult> comparer);
    public virtual IObservable`1<double> Max(IObservable`1<TSource> source, Func`2<TSource, double> selector);
    public virtual IObservable`1<float> Max(IObservable`1<TSource> source, Func`2<TSource, float> selector);
    public virtual IObservable`1<decimal> Max(IObservable`1<TSource> source, Func`2<TSource, decimal> selector);
    public virtual IObservable`1<int> Max(IObservable`1<TSource> source, Func`2<TSource, int> selector);
    public virtual IObservable`1<long> Max(IObservable`1<TSource> source, Func`2<TSource, long> selector);
    public virtual IObservable`1<Nullable`1<double>> Max(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector);
    public virtual IObservable`1<Nullable`1<float>> Max(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector);
    public virtual IObservable`1<Nullable`1<decimal>> Max(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector);
    public virtual IObservable`1<Nullable`1<int>> Max(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector);
    public virtual IObservable`1<Nullable`1<long>> Max(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector);
    public virtual IObservable`1<IList`1<TSource>> MaxBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    public virtual IObservable`1<IList`1<TSource>> MaxBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    public virtual IObservable`1<TSource> Min(IObservable`1<TSource> source);
    public virtual IObservable`1<TSource> Min(IObservable`1<TSource> source, IComparer`1<TSource> comparer);
    public virtual IObservable`1<double> Min(IObservable`1<double> source);
    public virtual IObservable`1<float> Min(IObservable`1<float> source);
    public virtual IObservable`1<decimal> Min(IObservable`1<decimal> source);
    public virtual IObservable`1<int> Min(IObservable`1<int> source);
    public virtual IObservable`1<long> Min(IObservable`1<long> source);
    public virtual IObservable`1<Nullable`1<double>> Min(IObservable`1<Nullable`1<double>> source);
    public virtual IObservable`1<Nullable`1<float>> Min(IObservable`1<Nullable`1<float>> source);
    public virtual IObservable`1<Nullable`1<decimal>> Min(IObservable`1<Nullable`1<decimal>> source);
    public virtual IObservable`1<Nullable`1<int>> Min(IObservable`1<Nullable`1<int>> source);
    public virtual IObservable`1<Nullable`1<long>> Min(IObservable`1<Nullable`1<long>> source);
    public virtual IObservable`1<TResult> Min(IObservable`1<TSource> source, Func`2<TSource, TResult> selector);
    public virtual IObservable`1<TResult> Min(IObservable`1<TSource> source, Func`2<TSource, TResult> selector, IComparer`1<TResult> comparer);
    public virtual IObservable`1<double> Min(IObservable`1<TSource> source, Func`2<TSource, double> selector);
    public virtual IObservable`1<float> Min(IObservable`1<TSource> source, Func`2<TSource, float> selector);
    public virtual IObservable`1<decimal> Min(IObservable`1<TSource> source, Func`2<TSource, decimal> selector);
    public virtual IObservable`1<int> Min(IObservable`1<TSource> source, Func`2<TSource, int> selector);
    public virtual IObservable`1<long> Min(IObservable`1<TSource> source, Func`2<TSource, long> selector);
    public virtual IObservable`1<Nullable`1<double>> Min(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector);
    public virtual IObservable`1<Nullable`1<float>> Min(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector);
    public virtual IObservable`1<Nullable`1<decimal>> Min(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector);
    public virtual IObservable`1<Nullable`1<int>> Min(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector);
    public virtual IObservable`1<Nullable`1<long>> Min(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector);
    public virtual IObservable`1<IList`1<TSource>> MinBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    public virtual IObservable`1<IList`1<TSource>> MinBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    public virtual IObservable`1<bool> SequenceEqual(IObservable`1<TSource> first, IObservable`1<TSource> second);
    public virtual IObservable`1<bool> SequenceEqual(IObservable`1<TSource> first, IObservable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    public virtual IObservable`1<bool> SequenceEqual(IObservable`1<TSource> first, IEnumerable`1<TSource> second);
    public virtual IObservable`1<bool> SequenceEqual(IObservable`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    public virtual IObservable`1<TSource> SingleAsync(IObservable`1<TSource> source);
    public virtual IObservable`1<TSource> SingleAsync(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public virtual IObservable`1<TSource> SingleOrDefaultAsync(IObservable`1<TSource> source);
    public virtual IObservable`1<TSource> SingleOrDefaultAsync(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public virtual IObservable`1<double> Sum(IObservable`1<double> source);
    public virtual IObservable`1<float> Sum(IObservable`1<float> source);
    public virtual IObservable`1<decimal> Sum(IObservable`1<decimal> source);
    public virtual IObservable`1<int> Sum(IObservable`1<int> source);
    public virtual IObservable`1<long> Sum(IObservable`1<long> source);
    public virtual IObservable`1<Nullable`1<double>> Sum(IObservable`1<Nullable`1<double>> source);
    public virtual IObservable`1<Nullable`1<float>> Sum(IObservable`1<Nullable`1<float>> source);
    public virtual IObservable`1<Nullable`1<decimal>> Sum(IObservable`1<Nullable`1<decimal>> source);
    public virtual IObservable`1<Nullable`1<int>> Sum(IObservable`1<Nullable`1<int>> source);
    public virtual IObservable`1<Nullable`1<long>> Sum(IObservable`1<Nullable`1<long>> source);
    public virtual IObservable`1<double> Sum(IObservable`1<TSource> source, Func`2<TSource, double> selector);
    public virtual IObservable`1<float> Sum(IObservable`1<TSource> source, Func`2<TSource, float> selector);
    public virtual IObservable`1<decimal> Sum(IObservable`1<TSource> source, Func`2<TSource, decimal> selector);
    public virtual IObservable`1<int> Sum(IObservable`1<TSource> source, Func`2<TSource, int> selector);
    public virtual IObservable`1<long> Sum(IObservable`1<TSource> source, Func`2<TSource, long> selector);
    public virtual IObservable`1<Nullable`1<double>> Sum(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector);
    public virtual IObservable`1<Nullable`1<float>> Sum(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector);
    public virtual IObservable`1<Nullable`1<decimal>> Sum(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector);
    public virtual IObservable`1<Nullable`1<int>> Sum(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector);
    public virtual IObservable`1<Nullable`1<long>> Sum(IObservable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector);
    public virtual IObservable`1<TSource[]> ToArray(IObservable`1<TSource> source);
    public virtual IObservable`1<IDictionary`2<TKey, TElement>> ToDictionary(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    public virtual IObservable`1<IDictionary`2<TKey, TElement>> ToDictionary(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    public virtual IObservable`1<IDictionary`2<TKey, TSource>> ToDictionary(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    public virtual IObservable`1<IDictionary`2<TKey, TSource>> ToDictionary(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    public virtual IObservable`1<IList`1<TSource>> ToList(IObservable`1<TSource> source);
    public virtual IObservable`1<ILookup`2<TKey, TElement>> ToLookup(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    public virtual IObservable`1<ILookup`2<TKey, TSource>> ToLookup(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    public virtual IObservable`1<ILookup`2<TKey, TElement>> ToLookup(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    public virtual IObservable`1<ILookup`2<TKey, TSource>> ToLookup(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    public virtual Func`1<IObservable`1<TResult>> FromAsyncPattern(Func`3<AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    public virtual Func`2<T1, IObservable`1<TResult>> FromAsyncPattern(Func`4<T1, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public virtual Func`3<T1, T2, IObservable`1<TResult>> FromAsyncPattern(Func`5<T1, T2, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public virtual Func`4<T1, T2, T3, IObservable`1<TResult>> FromAsyncPattern(Func`6<T1, T2, T3, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public virtual Func`5<T1, T2, T3, T4, IObservable`1<TResult>> FromAsyncPattern(Func`7<T1, T2, T3, T4, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public virtual Func`6<T1, T2, T3, T4, T5, IObservable`1<TResult>> FromAsyncPattern(Func`8<T1, T2, T3, T4, T5, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public virtual Func`7<T1, T2, T3, T4, T5, T6, IObservable`1<TResult>> FromAsyncPattern(Func`9<T1, T2, T3, T4, T5, T6, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public virtual Func`8<T1, T2, T3, T4, T5, T6, T7, IObservable`1<TResult>> FromAsyncPattern(Func`10<T1, T2, T3, T4, T5, T6, T7, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public virtual Func`9<T1, T2, T3, T4, T5, T6, T7, T8, IObservable`1<TResult>> FromAsyncPattern(Func`11<T1, T2, T3, T4, T5, T6, T7, T8, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public virtual Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, IObservable`1<TResult>> FromAsyncPattern(Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public virtual Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IObservable`1<TResult>> FromAsyncPattern(Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public virtual Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, IObservable`1<TResult>> FromAsyncPattern(Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public virtual Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, IObservable`1<TResult>> FromAsyncPattern(Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public virtual Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, IObservable`1<TResult>> FromAsyncPattern(Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    [NullableContextAttribute("2")]
public virtual Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, IObservable`1<TResult>> FromAsyncPattern(Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, TResult> end);
    public virtual Func`1<IObservable`1<Unit>> FromAsyncPattern(Func`3<AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    public virtual Func`2<T1, IObservable`1<Unit>> FromAsyncPattern(Func`4<T1, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    public virtual Func`3<T1, T2, IObservable`1<Unit>> FromAsyncPattern(Func`5<T1, T2, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
public virtual Func`4<T1, T2, T3, IObservable`1<Unit>> FromAsyncPattern(Func`6<T1, T2, T3, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
public virtual Func`5<T1, T2, T3, T4, IObservable`1<Unit>> FromAsyncPattern(Func`7<T1, T2, T3, T4, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
public virtual Func`6<T1, T2, T3, T4, T5, IObservable`1<Unit>> FromAsyncPattern(Func`8<T1, T2, T3, T4, T5, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
public virtual Func`7<T1, T2, T3, T4, T5, T6, IObservable`1<Unit>> FromAsyncPattern(Func`9<T1, T2, T3, T4, T5, T6, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
public virtual Func`8<T1, T2, T3, T4, T5, T6, T7, IObservable`1<Unit>> FromAsyncPattern(Func`10<T1, T2, T3, T4, T5, T6, T7, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
public virtual Func`9<T1, T2, T3, T4, T5, T6, T7, T8, IObservable`1<Unit>> FromAsyncPattern(Func`11<T1, T2, T3, T4, T5, T6, T7, T8, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
public virtual Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, IObservable`1<Unit>> FromAsyncPattern(Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
public virtual Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IObservable`1<Unit>> FromAsyncPattern(Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
public virtual Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, IObservable`1<Unit>> FromAsyncPattern(Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
public virtual Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, IObservable`1<Unit>> FromAsyncPattern(Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
public virtual Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, IObservable`1<Unit>> FromAsyncPattern(Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    [NullableContextAttribute("2")]
public virtual Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, IObservable`1<Unit>> FromAsyncPattern(Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end);
    public virtual IObservable`1<TSource> Start(Func`1<TSource> function);
    public virtual IObservable`1<TSource> Start(Func`1<TSource> function, IScheduler scheduler);
    public virtual IObservable`1<TSource> StartAsync(Func`1<Task`1<TSource>> functionAsync);
    public virtual IObservable`1<TSource> StartAsync(Func`1<Task`1<TSource>> functionAsync, Value& modreq(System.Runtime.InteropServices.InAttribute) options);
    private IObservable`1<TSource> StartAsyncImpl(Func`1<Task`1<TSource>> functionAsync, Value& options);
    public virtual IObservable`1<TSource> StartAsync(Func`2<CancellationToken, Task`1<TSource>> functionAsync);
    public virtual IObservable`1<TSource> StartAsync(Func`2<CancellationToken, Task`1<TSource>> functionAsync, Value& modreq(System.Runtime.InteropServices.InAttribute) options);
    private IObservable`1<TSource> StartAsyncImpl(Func`2<CancellationToken, Task`1<TSource>> functionAsync, Value& options);
    public virtual IObservable`1<Unit> Start(Action action);
    public virtual IObservable`1<Unit> Start(Action action, IScheduler scheduler);
    public virtual IObservable`1<Unit> StartAsync(Func`1<Task> actionAsync);
    public virtual IObservable`1<Unit> StartAsync(Func`1<Task> actionAsync, Value& modreq(System.Runtime.InteropServices.InAttribute) options);
    private IObservable`1<Unit> StartAsyncImpl(Func`1<Task> actionAsync, Value& options);
    public virtual IObservable`1<Unit> StartAsync(Func`2<CancellationToken, Task> actionAsync);
    public virtual IObservable`1<Unit> StartAsync(Func`2<CancellationToken, Task> actionAsync, Value& modreq(System.Runtime.InteropServices.InAttribute) options);
    private IObservable`1<Unit> StartAsyncImpl(Func`2<CancellationToken, Task> actionAsync, Value& options);
    public virtual IObservable`1<TResult> FromAsync(Func`1<Task`1<TResult>> functionAsync);
    public virtual IObservable`1<TResult> FromAsync(Func`2<CancellationToken, Task`1<TResult>> functionAsync);
    public virtual IObservable`1<TResult> FromAsync(Func`1<Task`1<TResult>> functionAsync, Value options);
    public virtual IObservable`1<TResult> FromAsync(Func`2<CancellationToken, Task`1<TResult>> functionAsync, Value options);
    public virtual IObservable`1<Unit> FromAsync(Func`1<Task> actionAsync);
    public virtual IObservable`1<Unit> FromAsync(Func`2<CancellationToken, Task> actionAsync);
    public virtual IObservable`1<Unit> FromAsync(Func`1<Task> actionAsync, Value options);
    public virtual IObservable`1<Unit> FromAsync(Func`2<CancellationToken, Task> actionAsync, Value options);
    public virtual Func`1<IObservable`1<TResult>> ToAsync(Func`1<TResult> function);
    public virtual Func`1<IObservable`1<TResult>> ToAsync(Func`1<TResult> function, IScheduler scheduler);
    public virtual Func`2<T, IObservable`1<TResult>> ToAsync(Func`2<T, TResult> function);
    public virtual Func`2<T, IObservable`1<TResult>> ToAsync(Func`2<T, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`3<T1, T2, IObservable`1<TResult>> ToAsync(Func`3<T1, T2, TResult> function);
    public virtual Func`3<T1, T2, IObservable`1<TResult>> ToAsync(Func`3<T1, T2, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`4<T1, T2, T3, IObservable`1<TResult>> ToAsync(Func`4<T1, T2, T3, TResult> function);
    [NullableContextAttribute("2")]
public virtual Func`4<T1, T2, T3, IObservable`1<TResult>> ToAsync(Func`4<T1, T2, T3, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`5<T1, T2, T3, T4, IObservable`1<TResult>> ToAsync(Func`5<T1, T2, T3, T4, TResult> function);
    [NullableContextAttribute("2")]
public virtual Func`5<T1, T2, T3, T4, IObservable`1<TResult>> ToAsync(Func`5<T1, T2, T3, T4, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`6<T1, T2, T3, T4, T5, IObservable`1<TResult>> ToAsync(Func`6<T1, T2, T3, T4, T5, TResult> function);
    [NullableContextAttribute("2")]
public virtual Func`6<T1, T2, T3, T4, T5, IObservable`1<TResult>> ToAsync(Func`6<T1, T2, T3, T4, T5, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`7<T1, T2, T3, T4, T5, T6, IObservable`1<TResult>> ToAsync(Func`7<T1, T2, T3, T4, T5, T6, TResult> function);
    [NullableContextAttribute("2")]
public virtual Func`7<T1, T2, T3, T4, T5, T6, IObservable`1<TResult>> ToAsync(Func`7<T1, T2, T3, T4, T5, T6, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`8<T1, T2, T3, T4, T5, T6, T7, IObservable`1<TResult>> ToAsync(Func`8<T1, T2, T3, T4, T5, T6, T7, TResult> function);
    [NullableContextAttribute("2")]
public virtual Func`8<T1, T2, T3, T4, T5, T6, T7, IObservable`1<TResult>> ToAsync(Func`8<T1, T2, T3, T4, T5, T6, T7, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`9<T1, T2, T3, T4, T5, T6, T7, T8, IObservable`1<TResult>> ToAsync(Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> function);
    [NullableContextAttribute("2")]
public virtual Func`9<T1, T2, T3, T4, T5, T6, T7, T8, IObservable`1<TResult>> ToAsync(Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, IObservable`1<TResult>> ToAsync(Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> function);
    [NullableContextAttribute("2")]
public virtual Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, IObservable`1<TResult>> ToAsync(Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IObservable`1<TResult>> ToAsync(Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> function);
    [NullableContextAttribute("2")]
public virtual Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IObservable`1<TResult>> ToAsync(Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, IObservable`1<TResult>> ToAsync(Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> function);
    [NullableContextAttribute("2")]
public virtual Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, IObservable`1<TResult>> ToAsync(Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, IObservable`1<TResult>> ToAsync(Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> function);
    [NullableContextAttribute("2")]
public virtual Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, IObservable`1<TResult>> ToAsync(Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, IObservable`1<TResult>> ToAsync(Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> function);
    [NullableContextAttribute("2")]
public virtual Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, IObservable`1<TResult>> ToAsync(Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, IObservable`1<TResult>> ToAsync(Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> function);
    [NullableContextAttribute("2")]
public virtual Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, IObservable`1<TResult>> ToAsync(Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, IObservable`1<TResult>> ToAsync(Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> function);
    [NullableContextAttribute("2")]
public virtual Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, IObservable`1<TResult>> ToAsync(Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> function, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, IObservable`1<TResult>> ToAsync(Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> function);
    [NullableContextAttribute("2")]
public virtual Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, IObservable`1<TResult>> ToAsync(Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> function, IScheduler scheduler);
    public virtual Func`1<IObservable`1<Unit>> ToAsync(Action action);
    public virtual Func`1<IObservable`1<Unit>> ToAsync(Action action, IScheduler scheduler);
    public virtual Func`2<TSource, IObservable`1<Unit>> ToAsync(Action`1<TSource> action);
    public virtual Func`2<TSource, IObservable`1<Unit>> ToAsync(Action`1<TSource> action, IScheduler scheduler);
    public virtual Func`3<T1, T2, IObservable`1<Unit>> ToAsync(Action`2<T1, T2> action);
    public virtual Func`3<T1, T2, IObservable`1<Unit>> ToAsync(Action`2<T1, T2> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`4<T1, T2, T3, IObservable`1<Unit>> ToAsync(Action`3<T1, T2, T3> action);
    public virtual Func`4<T1, T2, T3, IObservable`1<Unit>> ToAsync(Action`3<T1, T2, T3> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`5<T1, T2, T3, T4, IObservable`1<Unit>> ToAsync(Action`4<T1, T2, T3, T4> action);
    [NullableContextAttribute("2")]
public virtual Func`5<T1, T2, T3, T4, IObservable`1<Unit>> ToAsync(Action`4<T1, T2, T3, T4> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`6<T1, T2, T3, T4, T5, IObservable`1<Unit>> ToAsync(Action`5<T1, T2, T3, T4, T5> action);
    [NullableContextAttribute("2")]
public virtual Func`6<T1, T2, T3, T4, T5, IObservable`1<Unit>> ToAsync(Action`5<T1, T2, T3, T4, T5> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`7<T1, T2, T3, T4, T5, T6, IObservable`1<Unit>> ToAsync(Action`6<T1, T2, T3, T4, T5, T6> action);
    [NullableContextAttribute("2")]
public virtual Func`7<T1, T2, T3, T4, T5, T6, IObservable`1<Unit>> ToAsync(Action`6<T1, T2, T3, T4, T5, T6> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`8<T1, T2, T3, T4, T5, T6, T7, IObservable`1<Unit>> ToAsync(Action`7<T1, T2, T3, T4, T5, T6, T7> action);
    [NullableContextAttribute("2")]
public virtual Func`8<T1, T2, T3, T4, T5, T6, T7, IObservable`1<Unit>> ToAsync(Action`7<T1, T2, T3, T4, T5, T6, T7> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`9<T1, T2, T3, T4, T5, T6, T7, T8, IObservable`1<Unit>> ToAsync(Action`8<T1, T2, T3, T4, T5, T6, T7, T8> action);
    [NullableContextAttribute("2")]
public virtual Func`9<T1, T2, T3, T4, T5, T6, T7, T8, IObservable`1<Unit>> ToAsync(Action`8<T1, T2, T3, T4, T5, T6, T7, T8> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, IObservable`1<Unit>> ToAsync(Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action);
    [NullableContextAttribute("2")]
public virtual Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, IObservable`1<Unit>> ToAsync(Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IObservable`1<Unit>> ToAsync(Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action);
    [NullableContextAttribute("2")]
public virtual Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IObservable`1<Unit>> ToAsync(Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, IObservable`1<Unit>> ToAsync(Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action);
    [NullableContextAttribute("2")]
public virtual Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, IObservable`1<Unit>> ToAsync(Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, IObservable`1<Unit>> ToAsync(Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action);
    [NullableContextAttribute("2")]
public virtual Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, IObservable`1<Unit>> ToAsync(Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, IObservable`1<Unit>> ToAsync(Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action);
    [NullableContextAttribute("2")]
public virtual Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, IObservable`1<Unit>> ToAsync(Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, IObservable`1<Unit>> ToAsync(Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action);
    [NullableContextAttribute("2")]
public virtual Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, IObservable`1<Unit>> ToAsync(Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, IObservable`1<Unit>> ToAsync(Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action);
    [NullableContextAttribute("2")]
public virtual Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, IObservable`1<Unit>> ToAsync(Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, IScheduler scheduler);
    [NullableContextAttribute("2")]
public virtual Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, IObservable`1<Unit>> ToAsync(Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action);
    [NullableContextAttribute("2")]
public virtual Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, IObservable`1<Unit>> ToAsync(Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, IScheduler scheduler);
    public virtual AsyncSubject`1<TSource> GetAwaiter(IObservable`1<TSource> source);
    public virtual AsyncSubject`1<TSource> GetAwaiter(IConnectableObservable`1<TSource> source);
    public virtual AsyncSubject`1<TSource> RunAsync(IObservable`1<TSource> source, CancellationToken cancellationToken);
    public virtual AsyncSubject`1<TSource> RunAsync(IConnectableObservable`1<TSource> source, CancellationToken cancellationToken);
    private static AsyncSubject`1<T> Cancel(AsyncSubject`1<T> subject, CancellationToken cancellationToken);
    private static void RegisterCancelation(AsyncSubject`1<T> subject, IDisposable subscription, CancellationToken token);
    public virtual IConnectableObservable`1<TResult> Multicast(IObservable`1<TSource> source, ISubject`2<TSource, TResult> subject);
    public virtual IObservable`1<TResult> Multicast(IObservable`1<TSource> source, Func`1<ISubject`2<TSource, TIntermediate>> subjectSelector, Func`2<IObservable`1<TIntermediate>, IObservable`1<TResult>> selector);
    public virtual IConnectableObservable`1<TSource> Publish(IObservable`1<TSource> source);
    public virtual IObservable`1<TResult> Publish(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector);
    public virtual IConnectableObservable`1<TSource> Publish(IObservable`1<TSource> source, TSource initialValue);
    public virtual IObservable`1<TResult> Publish(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector, TSource initialValue);
    public virtual IConnectableObservable`1<TSource> PublishLast(IObservable`1<TSource> source);
    public virtual IObservable`1<TResult> PublishLast(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector);
    public virtual IObservable`1<TSource> RefCount(IConnectableObservable`1<TSource> source);
    public virtual IObservable`1<TSource> RefCount(IConnectableObservable`1<TSource> source, TimeSpan disconnectTime);
    public virtual IObservable`1<TSource> RefCount(IConnectableObservable`1<TSource> source, TimeSpan disconnectTime, IScheduler scheduler);
    public virtual IObservable`1<TSource> RefCount(IConnectableObservable`1<TSource> source, int minObservers);
    public virtual IObservable`1<TSource> RefCount(IConnectableObservable`1<TSource> source, int minObservers, TimeSpan disconnectTime);
    public virtual IObservable`1<TSource> RefCount(IConnectableObservable`1<TSource> source, int minObservers, TimeSpan disconnectTime, IScheduler scheduler);
    public virtual IObservable`1<TSource> AutoConnect(IConnectableObservable`1<TSource> source, int minObservers, Action`1<IDisposable> onConnect);
    public virtual IConnectableObservable`1<TSource> Replay(IObservable`1<TSource> source);
    public virtual IConnectableObservable`1<TSource> Replay(IObservable`1<TSource> source, IScheduler scheduler);
    public virtual IObservable`1<TResult> Replay(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector);
    public virtual IObservable`1<TResult> Replay(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector, IScheduler scheduler);
    public virtual IConnectableObservable`1<TSource> Replay(IObservable`1<TSource> source, TimeSpan window);
    public virtual IObservable`1<TResult> Replay(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector, TimeSpan window);
    public virtual IConnectableObservable`1<TSource> Replay(IObservable`1<TSource> source, TimeSpan window, IScheduler scheduler);
    public virtual IObservable`1<TResult> Replay(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector, TimeSpan window, IScheduler scheduler);
    public virtual IConnectableObservable`1<TSource> Replay(IObservable`1<TSource> source, int bufferSize, IScheduler scheduler);
    public virtual IObservable`1<TResult> Replay(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector, int bufferSize, IScheduler scheduler);
    public virtual IConnectableObservable`1<TSource> Replay(IObservable`1<TSource> source, int bufferSize);
    public virtual IObservable`1<TResult> Replay(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector, int bufferSize);
    public virtual IConnectableObservable`1<TSource> Replay(IObservable`1<TSource> source, int bufferSize, TimeSpan window);
    public virtual IObservable`1<TResult> Replay(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector, int bufferSize, TimeSpan window);
    public virtual IConnectableObservable`1<TSource> Replay(IObservable`1<TSource> source, int bufferSize, TimeSpan window, IScheduler scheduler);
    public virtual IObservable`1<TResult> Replay(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> selector, int bufferSize, TimeSpan window, IScheduler scheduler);
    public virtual IEnumerable`1<IList`1<TSource>> Chunkify(IObservable`1<TSource> source);
    public virtual IEnumerable`1<TResult> Collect(IObservable`1<TSource> source, Func`1<TResult> newCollector, Func`3<TResult, TSource, TResult> merge);
    public virtual IEnumerable`1<TResult> Collect(IObservable`1<TSource> source, Func`1<TResult> getInitialCollector, Func`3<TResult, TSource, TResult> merge, Func`2<TResult, TResult> getNewCollector);
    private static IEnumerable`1<TResult> Collect_(IObservable`1<TSource> source, Func`1<TResult> getInitialCollector, Func`3<TResult, TSource, TResult> merge, Func`2<TResult, TResult> getNewCollector);
    public virtual TSource First(IObservable`1<TSource> source);
    public virtual TSource First(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public virtual TSource FirstOrDefault(IObservable`1<TSource> source);
    public virtual TSource FirstOrDefault(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    private static TSource FirstOrDefaultInternal(IObservable`1<TSource> source, bool throwOnEmpty);
    public virtual void ForEach(IObservable`1<TSource> source, Action`1<TSource> onNext);
    public virtual void ForEach(IObservable`1<TSource> source, Action`2<TSource, int> onNext);
    public virtual IEnumerator`1<TSource> GetEnumerator(IObservable`1<TSource> source);
    public virtual TSource Last(IObservable`1<TSource> source);
    public virtual TSource Last(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public virtual TSource LastOrDefault(IObservable`1<TSource> source);
    public virtual TSource LastOrDefault(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    private static TSource LastOrDefaultInternal(IObservable`1<TSource> source, bool throwOnEmpty);
    public virtual IEnumerable`1<TSource> Latest(IObservable`1<TSource> source);
    public virtual IEnumerable`1<TSource> MostRecent(IObservable`1<TSource> source, TSource initialValue);
    public virtual IEnumerable`1<TSource> Next(IObservable`1<TSource> source);
    public virtual TSource Single(IObservable`1<TSource> source);
    public virtual TSource Single(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public virtual TSource SingleOrDefault(IObservable`1<TSource> source);
    public virtual TSource SingleOrDefault(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    private static TSource SingleOrDefaultInternal(IObservable`1<TSource> source, bool throwOnEmpty);
    public virtual TSource Wait(IObservable`1<TSource> source);
    public virtual IObservable`1<TSource> ObserveOn(IObservable`1<TSource> source, IScheduler scheduler);
    public virtual IObservable`1<TSource> ObserveOn(IObservable`1<TSource> source, SynchronizationContext context);
    public virtual IObservable`1<TSource> SubscribeOn(IObservable`1<TSource> source, IScheduler scheduler);
    public virtual IObservable`1<TSource> SubscribeOn(IObservable`1<TSource> source, SynchronizationContext context);
    public virtual IObservable`1<TSource> Synchronize(IObservable`1<TSource> source);
    public virtual IObservable`1<TSource> Synchronize(IObservable`1<TSource> source, object gate);
    public virtual IDisposable Subscribe(IEnumerable`1<TSource> source, IObserver`1<TSource> observer);
    public virtual IDisposable Subscribe(IEnumerable`1<TSource> source, IObserver`1<TSource> observer, IScheduler scheduler);
    private static IDisposable Subscribe_(IEnumerable`1<TSource> source, IObserver`1<TSource> observer, IScheduler scheduler);
    public virtual IEnumerable`1<TSource> ToEnumerable(IObservable`1<TSource> source);
    public virtual IEventSource`1<Unit> ToEvent(IObservable`1<Unit> source);
    public virtual IEventSource`1<TSource> ToEvent(IObservable`1<TSource> source);
    public virtual IEventPatternSource`1<TEventArgs> ToEventPattern(IObservable`1<EventPattern`1<TEventArgs>> source);
    public virtual IObservable`1<TSource> ToObservable(IEnumerable`1<TSource> source);
    public virtual IObservable`1<TSource> ToObservable(IEnumerable`1<TSource> source, IScheduler scheduler);
    private static IObservable`1<TSource> ToObservable_(IEnumerable`1<TSource> source, IScheduler scheduler);
    public virtual IObservable`1<TSource> Create(Func`2<IObserver`1<TSource>, IDisposable> subscribe);
    public virtual IObservable`1<TSource> Create(Func`2<IObserver`1<TSource>, Action> subscribe);
    public virtual IObservable`1<TResult> Create(Func`3<IObserver`1<TResult>, CancellationToken, Task> subscribeAsync);
    public virtual IObservable`1<TResult> Create(Func`2<IObserver`1<TResult>, Task> subscribeAsync);
    public virtual IObservable`1<TResult> Create(Func`3<IObserver`1<TResult>, CancellationToken, Task`1<IDisposable>> subscribeAsync);
    public virtual IObservable`1<TResult> Create(Func`2<IObserver`1<TResult>, Task`1<IDisposable>> subscribeAsync);
    public virtual IObservable`1<TResult> Create(Func`3<IObserver`1<TResult>, CancellationToken, Task`1<Action>> subscribeAsync);
    public virtual IObservable`1<TResult> Create(Func`2<IObserver`1<TResult>, Task`1<Action>> subscribeAsync);
    public virtual IObservable`1<TValue> Defer(Func`1<IObservable`1<TValue>> observableFactory);
    public virtual IObservable`1<TValue> Defer(Func`1<Task`1<IObservable`1<TValue>>> observableFactoryAsync, bool ignoreExceptionsAfterUnsubscribe);
    public virtual IObservable`1<TValue> Defer(Func`2<CancellationToken, Task`1<IObservable`1<TValue>>> observableFactoryAsync, bool ignoreExceptionsAfterUnsubscribe);
    public virtual IObservable`1<TResult> Empty();
    public virtual IObservable`1<TResult> Empty(IScheduler scheduler);
    public virtual IObservable`1<TResult> Generate(TState initialState, Func`2<TState, bool> condition, Func`2<TState, TState> iterate, Func`2<TState, TResult> resultSelector);
    public virtual IObservable`1<TResult> Generate(TState initialState, Func`2<TState, bool> condition, Func`2<TState, TState> iterate, Func`2<TState, TResult> resultSelector, IScheduler scheduler);
    public virtual IObservable`1<TResult> Never();
    public virtual IObservable`1<int> Range(int start, int count);
    public virtual IObservable`1<int> Range(int start, int count, IScheduler scheduler);
    private static IObservable`1<int> Range_(int start, int count, IScheduler scheduler);
    public virtual IObservable`1<TResult> Repeat(TResult value);
    public virtual IObservable`1<TResult> Repeat(TResult value, IScheduler scheduler);
    private static IObservable`1<TResult> Repeat_(TResult value, IScheduler scheduler);
    public virtual IObservable`1<TResult> Repeat(TResult value, int repeatCount);
    public virtual IObservable`1<TResult> Repeat(TResult value, int repeatCount, IScheduler scheduler);
    private static IObservable`1<TResult> Repeat_(TResult value, int repeatCount, IScheduler scheduler);
    public virtual IObservable`1<TResult> Return(TResult value);
    public virtual IObservable`1<TResult> Return(TResult value, IScheduler scheduler);
    public virtual IObservable`1<TResult> Throw(Exception exception);
    public virtual IObservable`1<TResult> Throw(Exception exception, IScheduler scheduler);
    public virtual IObservable`1<TSource> Using(Func`1<TResource> resourceFactory, Func`2<TResource, IObservable`1<TSource>> observableFactory);
    public virtual IObservable`1<TSource> Using(Func`2<CancellationToken, Task`1<TResource>> resourceFactoryAsync, Func`3<TResource, CancellationToken, Task`1<IObservable`1<TSource>>> observableFactoryAsync);
    public virtual IObservable`1<EventPattern`1<object>> FromEventPattern(Action`1<EventHandler> addHandler, Action`1<EventHandler> removeHandler);
    public virtual IObservable`1<EventPattern`1<object>> FromEventPattern(Action`1<EventHandler> addHandler, Action`1<EventHandler> removeHandler, IScheduler scheduler);
    private static IObservable`1<EventPattern`1<object>> FromEventPattern_(Action`1<EventHandler> addHandler, Action`1<EventHandler> removeHandler, IScheduler scheduler);
    public virtual IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler);
    public virtual IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler, IScheduler scheduler);
    private static IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern_(Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler, IScheduler scheduler);
    public virtual IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(Func`2<EventHandler`1<TEventArgs>, TDelegate> conversion, Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler);
    public virtual IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(Func`2<EventHandler`1<TEventArgs>, TDelegate> conversion, Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler, IScheduler scheduler);
    private static IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern_(Func`2<EventHandler`1<TEventArgs>, TDelegate> conversion, Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler, IScheduler scheduler);
    public virtual IObservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern(Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler);
    public virtual IObservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern(Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler, IScheduler scheduler);
    private static IObservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern_(Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler, IScheduler scheduler);
    public virtual IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(Action`1<EventHandler`1<TEventArgs>> addHandler, Action`1<EventHandler`1<TEventArgs>> removeHandler);
    public virtual IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(Action`1<EventHandler`1<TEventArgs>> addHandler, Action`1<EventHandler`1<TEventArgs>> removeHandler, IScheduler scheduler);
    private static IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern_(Action`1<EventHandler`1<TEventArgs>> addHandler, Action`1<EventHandler`1<TEventArgs>> removeHandler, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public virtual IObservable`1<EventPattern`1<object>> FromEventPattern(object target, string eventName);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public virtual IObservable`1<EventPattern`1<object>> FromEventPattern(object target, string eventName, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
private static IObservable`1<EventPattern`1<object>> FromEventPattern_(object target, string eventName, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public virtual IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(object target, string eventName);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public virtual IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(object target, string eventName, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
private static IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern_(object target, string eventName, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public virtual IObservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern(object target, string eventName);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public virtual IObservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern(object target, string eventName, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
private static IObservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern_(object target, string eventName, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public virtual IObservable`1<EventPattern`1<object>> FromEventPattern(Type type, string eventName);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public virtual IObservable`1<EventPattern`1<object>> FromEventPattern(Type type, string eventName, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
private static IObservable`1<EventPattern`1<object>> FromEventPattern_(Type type, string eventName, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public virtual IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(Type type, string eventName);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public virtual IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern(Type type, string eventName, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
private static IObservable`1<EventPattern`1<TEventArgs>> FromEventPattern_(Type type, string eventName, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public virtual IObservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern(Type type, string eventName);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public virtual IObservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern(Type type, string eventName, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
private static IObservable`1<EventPattern`2<TSender, TEventArgs>> FromEventPattern_(Type type, string eventName, IScheduler scheduler);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
private static IObservable`1<TResult> FromEventPattern_(Type targetType, object target, string eventName, Func`3<TSender, TEventArgs, TResult> getResult, IScheduler scheduler);
    public virtual IObservable`1<TEventArgs> FromEvent(Func`2<Action`1<TEventArgs>, TDelegate> conversion, Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler);
    public virtual IObservable`1<TEventArgs> FromEvent(Func`2<Action`1<TEventArgs>, TDelegate> conversion, Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler, IScheduler scheduler);
    private static IObservable`1<TEventArgs> FromEvent_(Func`2<Action`1<TEventArgs>, TDelegate> conversion, Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler, IScheduler scheduler);
    public virtual IObservable`1<TEventArgs> FromEvent(Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler);
    public virtual IObservable`1<TEventArgs> FromEvent(Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler, IScheduler scheduler);
    private static IObservable`1<TEventArgs> FromEvent_(Action`1<TDelegate> addHandler, Action`1<TDelegate> removeHandler, IScheduler scheduler);
    public virtual IObservable`1<TEventArgs> FromEvent(Action`1<Action`1<TEventArgs>> addHandler, Action`1<Action`1<TEventArgs>> removeHandler);
    public virtual IObservable`1<TEventArgs> FromEvent(Action`1<Action`1<TEventArgs>> addHandler, Action`1<Action`1<TEventArgs>> removeHandler, IScheduler scheduler);
    private static IObservable`1<TEventArgs> FromEvent_(Action`1<Action`1<TEventArgs>> addHandler, Action`1<Action`1<TEventArgs>> removeHandler, IScheduler scheduler);
    public virtual IObservable`1<Unit> FromEvent(Action`1<Action> addHandler, Action`1<Action> removeHandler);
    public virtual IObservable`1<Unit> FromEvent(Action`1<Action> addHandler, Action`1<Action> removeHandler, IScheduler scheduler);
    private static IObservable`1<Unit> FromEvent_(Action`1<Action> addHandler, Action`1<Action> removeHandler, IScheduler scheduler);
    private static IScheduler GetSchedulerForCurrentContext();
    public virtual Task ForEachAsync(IObservable`1<TSource> source, Action`1<TSource> onNext);
    public virtual Task ForEachAsync(IObservable`1<TSource> source, Action`1<TSource> onNext, CancellationToken cancellationToken);
    public virtual Task ForEachAsync(IObservable`1<TSource> source, Action`2<TSource, int> onNext);
    public virtual Task ForEachAsync(IObservable`1<TSource> source, Action`2<TSource, int> onNext, CancellationToken cancellationToken);
    private static Task ForEachAsync_(IObservable`1<TSource> source, Action`1<TSource> onNext, CancellationToken cancellationToken);
    public virtual IObservable`1<TResult> Case(Func`1<TValue> selector, IDictionary`2<TValue, IObservable`1<TResult>> sources);
    public virtual IObservable`1<TResult> Case(Func`1<TValue> selector, IDictionary`2<TValue, IObservable`1<TResult>> sources, IScheduler scheduler);
    public virtual IObservable`1<TResult> Case(Func`1<TValue> selector, IDictionary`2<TValue, IObservable`1<TResult>> sources, IObservable`1<TResult> defaultSource);
    public virtual IObservable`1<TSource> DoWhile(IObservable`1<TSource> source, Func`1<bool> condition);
    public virtual IObservable`1<TResult> For(IEnumerable`1<TSource> source, Func`2<TSource, IObservable`1<TResult>> resultSelector);
    public virtual IObservable`1<TResult> If(Func`1<bool> condition, IObservable`1<TResult> thenSource);
    public virtual IObservable`1<TResult> If(Func`1<bool> condition, IObservable`1<TResult> thenSource, IScheduler scheduler);
    public virtual IObservable`1<TResult> If(Func`1<bool> condition, IObservable`1<TResult> thenSource, IObservable`1<TResult> elseSource);
    public virtual IObservable`1<TSource> While(Func`1<bool> condition, IObservable`1<TSource> source);
    public virtual Pattern`2<TLeft, TRight> And(IObservable`1<TLeft> left, IObservable`1<TRight> right);
    public virtual Plan`1<TResult> Then(IObservable`1<TSource> source, Func`2<TSource, TResult> selector);
    public virtual IObservable`1<TResult> When(Plan`1[] plans);
    public virtual IObservable`1<TResult> When(IEnumerable`1<Plan`1<TResult>> plans);
    public virtual IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, Func`4<TSource1, TSource2, TSource3, TResult> resultSelector);
    public virtual IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, Func`5<TSource1, TSource2, TSource3, TSource4, TResult> resultSelector);
    public virtual IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, Func`6<TSource1, TSource2, TSource3, TSource4, TSource5, TResult> resultSelector);
    public virtual IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, Func`7<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TResult> resultSelector);
    public virtual IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, Func`8<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TResult> resultSelector);
    public virtual IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, Func`9<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TResult> resultSelector);
    public virtual IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, Func`10<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TResult> resultSelector);
    public virtual IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, Func`11<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TResult> resultSelector);
    public virtual IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, Func`12<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TResult> resultSelector);
    public virtual IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, Func`13<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TResult> resultSelector);
    public virtual IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, IObservable`1<TSource13> source13, Func`14<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TResult> resultSelector);
    public virtual IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, IObservable`1<TSource13> source13, IObservable`1<TSource14> source14, Func`15<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TResult> resultSelector);
    public virtual IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, IObservable`1<TSource13> source13, IObservable`1<TSource14> source14, IObservable`1<TSource15> source15, Func`16<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TResult> resultSelector);
    public virtual IObservable`1<TResult> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, IObservable`1<TSource13> source13, IObservable`1<TSource14> source14, IObservable`1<TSource15> source15, IObservable`1<TSource16> source16, Func`17<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16, TResult> resultSelector);
    public virtual IObservable`1<TSource> Amb(IObservable`1<TSource> first, IObservable`1<TSource> second);
    public virtual IObservable`1<TSource> Amb(IObservable`1[] sources);
    public virtual IObservable`1<TSource> Amb(IEnumerable`1<IObservable`1<TSource>> sources);
    public virtual IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, Func`1<IObservable`1<TBufferClosing>> bufferClosingSelector);
    public virtual IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, IObservable`1<TBufferOpening> bufferOpenings, Func`2<TBufferOpening, IObservable`1<TBufferClosing>> bufferClosingSelector);
    public virtual IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, IObservable`1<TBufferBoundary> bufferBoundaries);
    public virtual IObservable`1<TSource> Catch(IObservable`1<TSource> source, Func`2<TException, IObservable`1<TSource>> handler);
    public virtual IObservable`1<TSource> Catch(IObservable`1<TSource> first, IObservable`1<TSource> second);
    public virtual IObservable`1<TSource> Catch(IObservable`1[] sources);
    public virtual IObservable`1<TSource> Catch(IEnumerable`1<IObservable`1<TSource>> sources);
    private static IObservable`1<TSource> Catch_(IEnumerable`1<IObservable`1<TSource>> sources);
    public virtual IObservable`1<TResult> CombineLatest(IObservable`1<TFirst> first, IObservable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector);
    public virtual IObservable`1<TResult> CombineLatest(IEnumerable`1<IObservable`1<TSource>> sources, Func`2<IList`1<TSource>, TResult> resultSelector);
    public virtual IObservable`1<IList`1<TSource>> CombineLatest(IEnumerable`1<IObservable`1<TSource>> sources);
    public virtual IObservable`1<IList`1<TSource>> CombineLatest(IObservable`1[] sources);
    private static IObservable`1<TResult> CombineLatest_(IEnumerable`1<IObservable`1<TSource>> sources, Func`2<IList`1<TSource>, TResult> resultSelector);
    public virtual IObservable`1<TSource> Concat(IObservable`1<TSource> first, IObservable`1<TSource> second);
    public virtual IObservable`1<TSource> Concat(IObservable`1[] sources);
    public virtual IObservable`1<TSource> Concat(IEnumerable`1<IObservable`1<TSource>> sources);
    private static IObservable`1<TSource> Concat_(IEnumerable`1<IObservable`1<TSource>> sources);
    public virtual IObservable`1<TSource> Concat(IObservable`1<IObservable`1<TSource>> sources);
    public virtual IObservable`1<TSource> Concat(IObservable`1<Task`1<TSource>> sources);
    private static IObservable`1<TSource> Concat_(IObservable`1<IObservable`1<TSource>> sources);
    public virtual IObservable`1<TSource> Merge(IObservable`1<IObservable`1<TSource>> sources);
    public virtual IObservable`1<TSource> Merge(IObservable`1<Task`1<TSource>> sources);
    public virtual IObservable`1<TSource> Merge(IObservable`1<IObservable`1<TSource>> sources, int maxConcurrent);
    public virtual IObservable`1<TSource> Merge(IEnumerable`1<IObservable`1<TSource>> sources, int maxConcurrent);
    public virtual IObservable`1<TSource> Merge(IEnumerable`1<IObservable`1<TSource>> sources, int maxConcurrent, IScheduler scheduler);
    public virtual IObservable`1<TSource> Merge(IObservable`1<TSource> first, IObservable`1<TSource> second);
    public virtual IObservable`1<TSource> Merge(IObservable`1<TSource> first, IObservable`1<TSource> second, IScheduler scheduler);
    public virtual IObservable`1<TSource> Merge(IObservable`1[] sources);
    public virtual IObservable`1<TSource> Merge(IScheduler scheduler, IObservable`1[] sources);
    public virtual IObservable`1<TSource> Merge(IEnumerable`1<IObservable`1<TSource>> sources);
    public virtual IObservable`1<TSource> Merge(IEnumerable`1<IObservable`1<TSource>> sources, IScheduler scheduler);
    private static IObservable`1<TSource> Merge_(IObservable`1<IObservable`1<TSource>> sources);
    private static IObservable`1<TSource> Merge_(IObservable`1<IObservable`1<TSource>> sources, int maxConcurrent);
    public virtual IObservable`1<TSource> OnErrorResumeNext(IObservable`1<TSource> first, IObservable`1<TSource> second);
    public virtual IObservable`1<TSource> OnErrorResumeNext(IObservable`1[] sources);
    public virtual IObservable`1<TSource> OnErrorResumeNext(IEnumerable`1<IObservable`1<TSource>> sources);
    private static IObservable`1<TSource> OnErrorResumeNext_(IEnumerable`1<IObservable`1<TSource>> sources);
    public virtual IObservable`1<TSource> SkipUntil(IObservable`1<TSource> source, IObservable`1<TOther> other);
    public virtual IObservable`1<TSource> Switch(IObservable`1<IObservable`1<TSource>> sources);
    public virtual IObservable`1<TSource> Switch(IObservable`1<Task`1<TSource>> sources);
    private static IObservable`1<TSource> Switch_(IObservable`1<IObservable`1<TSource>> sources);
    public virtual IObservable`1<TSource> TakeUntil(IObservable`1<TSource> source, IObservable`1<TOther> other);
    public virtual IObservable`1<TSource> TakeUntil(IObservable`1<TSource> source, Func`2<TSource, bool> stopPredicate);
    public virtual IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, Func`1<IObservable`1<TWindowClosing>> windowClosingSelector);
    public virtual IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, IObservable`1<TWindowOpening> windowOpenings, Func`2<TWindowOpening, IObservable`1<TWindowClosing>> windowClosingSelector);
    public virtual IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, IObservable`1<TWindowBoundary> windowBoundaries);
    public virtual IObservable`1<TResult> WithLatestFrom(IObservable`1<TFirst> first, IObservable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector);
    public virtual IObservable`1<TResult> Zip(IObservable`1<TFirst> first, IObservable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector);
    public virtual IObservable`1<TResult> Zip(IEnumerable`1<IObservable`1<TSource>> sources, Func`2<IList`1<TSource>, TResult> resultSelector);
    public virtual IObservable`1<IList`1<TSource>> Zip(IEnumerable`1<IObservable`1<TSource>> sources);
    public virtual IObservable`1<IList`1<TSource>> Zip(IObservable`1[] sources);
    private static IObservable`1<IList`1<TSource>> Zip_(IEnumerable`1<IObservable`1<TSource>> sources);
    public virtual IObservable`1<TResult> Zip(IObservable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector);
    public virtual IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, Func`4<TSource1, TSource2, TSource3, TResult> resultSelector);
    public virtual IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, Func`5<TSource1, TSource2, TSource3, TSource4, TResult> resultSelector);
    public virtual IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, Func`6<TSource1, TSource2, TSource3, TSource4, TSource5, TResult> resultSelector);
    public virtual IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, Func`7<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TResult> resultSelector);
    public virtual IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, Func`8<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TResult> resultSelector);
    public virtual IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, Func`9<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TResult> resultSelector);
    public virtual IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, Func`10<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TResult> resultSelector);
    public virtual IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, Func`11<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TResult> resultSelector);
    public virtual IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, Func`12<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TResult> resultSelector);
    public virtual IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, Func`13<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TResult> resultSelector);
    public virtual IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, IObservable`1<TSource13> source13, Func`14<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TResult> resultSelector);
    public virtual IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, IObservable`1<TSource13> source13, IObservable`1<TSource14> source14, Func`15<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TResult> resultSelector);
    public virtual IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, IObservable`1<TSource13> source13, IObservable`1<TSource14> source14, IObservable`1<TSource15> source15, Func`16<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TResult> resultSelector);
    public virtual IObservable`1<TResult> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8, IObservable`1<TSource9> source9, IObservable`1<TSource10> source10, IObservable`1<TSource11> source11, IObservable`1<TSource12> source12, IObservable`1<TSource13> source13, IObservable`1<TSource14> source14, IObservable`1<TSource15> source15, IObservable`1<TSource16> source16, Func`17<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16, TResult> resultSelector);
    public virtual IObservable`1<TSource> Append(IObservable`1<TSource> source, TSource value);
    public virtual IObservable`1<TSource> Append(IObservable`1<TSource> source, TSource value, IScheduler scheduler);
    private static IObservable`1<TSource> Append_(IObservable`1<TSource> source, TSource value, IScheduler scheduler);
    public virtual IObservable`1<TSource> AsObservable(IObservable`1<TSource> source);
    public virtual IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, int count);
    public virtual IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, int count, int skip);
    public virtual IObservable`1<TSource> Dematerialize(IObservable`1<Notification`1<TSource>> source);
    public virtual IObservable`1<TSource> DistinctUntilChanged(IObservable`1<TSource> source);
    public virtual IObservable`1<TSource> DistinctUntilChanged(IObservable`1<TSource> source, IEqualityComparer`1<TSource> comparer);
    public virtual IObservable`1<TSource> DistinctUntilChanged(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    public virtual IObservable`1<TSource> DistinctUntilChanged(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    private static IObservable`1<TSource> DistinctUntilChanged_(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    public virtual IObservable`1<TSource> Do(IObservable`1<TSource> source, Action`1<TSource> onNext);
    public virtual IObservable`1<TSource> Do(IObservable`1<TSource> source, Action`1<TSource> onNext, Action onCompleted);
    public virtual IObservable`1<TSource> Do(IObservable`1<TSource> source, Action`1<TSource> onNext, Action`1<Exception> onError);
    public virtual IObservable`1<TSource> Do(IObservable`1<TSource> source, Action`1<TSource> onNext, Action`1<Exception> onError, Action onCompleted);
    public virtual IObservable`1<TSource> Do(IObservable`1<TSource> source, IObserver`1<TSource> observer);
    private static IObservable`1<TSource> Do_(IObservable`1<TSource> source, Action`1<TSource> onNext, Action`1<Exception> onError, Action onCompleted);
    public virtual IObservable`1<TSource> Finally(IObservable`1<TSource> source, Action finallyAction);
    public virtual IObservable`1<TSource> IgnoreElements(IObservable`1<TSource> source);
    public virtual IObservable`1<Notification`1<TSource>> Materialize(IObservable`1<TSource> source);
    public virtual IObservable`1<TSource> Prepend(IObservable`1<TSource> source, TSource value);
    public virtual IObservable`1<TSource> Prepend(IObservable`1<TSource> source, TSource value, IScheduler scheduler);
    private static IObservable`1<TSource> Prepend_(IObservable`1<TSource> source, TSource value, IScheduler scheduler);
    public virtual IObservable`1<TSource> Repeat(IObservable`1<TSource> source);
    [IteratorStateMachineAttribute("System.Reactive.Linq.QueryLanguage/<RepeatInfinite>d__546`1")]
private static IEnumerable`1<T> RepeatInfinite(T value);
    public virtual IObservable`1<TSource> Repeat(IObservable`1<TSource> source, int repeatCount);
    public virtual IObservable`1<TSource> RepeatWhen(IObservable`1<TSource> source, Func`2<IObservable`1<object>, IObservable`1<TSignal>> handler);
    public virtual IObservable`1<TSource> Retry(IObservable`1<TSource> source);
    public virtual IObservable`1<TSource> Retry(IObservable`1<TSource> source, int retryCount);
    public virtual IObservable`1<TSource> RetryWhen(IObservable`1<TSource> source, Func`2<IObservable`1<Exception>, IObservable`1<TSignal>> handler);
    public virtual IObservable`1<TAccumulate> Scan(IObservable`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> accumulator);
    public virtual IObservable`1<TSource> Scan(IObservable`1<TSource> source, Func`3<TSource, TSource, TSource> accumulator);
    public virtual IObservable`1<TSource> SkipLast(IObservable`1<TSource> source, int count);
    public virtual IObservable`1<TSource> StartWith(IObservable`1<TSource> source, TSource[] values);
    public virtual IObservable`1<TSource> StartWith(IObservable`1<TSource> source, IScheduler scheduler, TSource[] values);
    public virtual IObservable`1<TSource> StartWith(IObservable`1<TSource> source, IEnumerable`1<TSource> values);
    public virtual IObservable`1<TSource> StartWith(IObservable`1<TSource> source, IScheduler scheduler, IEnumerable`1<TSource> values);
    private static IObservable`1<TSource> StartWith_(IObservable`1<TSource> source, IScheduler scheduler, TSource[] values);
    public virtual IObservable`1<TSource> TakeLast(IObservable`1<TSource> source, int count);
    public virtual IObservable`1<TSource> TakeLast(IObservable`1<TSource> source, int count, IScheduler scheduler);
    private static IObservable`1<TSource> TakeLast_(IObservable`1<TSource> source, int count, IScheduler scheduler);
    public virtual IObservable`1<IList`1<TSource>> TakeLastBuffer(IObservable`1<TSource> source, int count);
    public virtual IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, int count, int skip);
    public virtual IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, int count);
    private static IObservable`1<IObservable`1<TSource>> Window_(IObservable`1<TSource> source, int count, int skip);
    public virtual IObservable`1<TResult> Cast(IObservable`1<object> source);
    public virtual IObservable`1<TSource> DefaultIfEmpty(IObservable`1<TSource> source);
    public virtual IObservable`1<TSource> DefaultIfEmpty(IObservable`1<TSource> source, TSource defaultValue);
    public virtual IObservable`1<TSource> Distinct(IObservable`1<TSource> source);
    public virtual IObservable`1<TSource> Distinct(IObservable`1<TSource> source, IEqualityComparer`1<TSource> comparer);
    public virtual IObservable`1<TSource> Distinct(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    public virtual IObservable`1<TSource> Distinct(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    public virtual IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    public virtual IObservable`1<IGroupedObservable`2<TKey, TSource>> GroupBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    public virtual IObservable`1<IGroupedObservable`2<TKey, TSource>> GroupBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    public virtual IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    public virtual IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, int capacity);
    public virtual IObservable`1<IGroupedObservable`2<TKey, TSource>> GroupBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, int capacity, IEqualityComparer`1<TKey> comparer);
    public virtual IObservable`1<IGroupedObservable`2<TKey, TSource>> GroupBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, int capacity);
    public virtual IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupBy(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, int capacity, IEqualityComparer`1<TKey> comparer);
    private static IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupBy_(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Nullable`1<int> capacity, IEqualityComparer`1<TKey> comparer);
    public virtual IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupByUntil(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`2<IGroupedObservable`2<TKey, TElement>, IObservable`1<TDuration>> durationSelector, IEqualityComparer`1<TKey> comparer);
    public virtual IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupByUntil(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`2<IGroupedObservable`2<TKey, TElement>, IObservable`1<TDuration>> durationSelector);
    public virtual IObservable`1<IGroupedObservable`2<TKey, TSource>> GroupByUntil(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<IGroupedObservable`2<TKey, TSource>, IObservable`1<TDuration>> durationSelector, IEqualityComparer`1<TKey> comparer);
    public virtual IObservable`1<IGroupedObservable`2<TKey, TSource>> GroupByUntil(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<IGroupedObservable`2<TKey, TSource>, IObservable`1<TDuration>> durationSelector);
    public virtual IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupByUntil(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`2<IGroupedObservable`2<TKey, TElement>, IObservable`1<TDuration>> durationSelector, int capacity, IEqualityComparer`1<TKey> comparer);
    public virtual IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupByUntil(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`2<IGroupedObservable`2<TKey, TElement>, IObservable`1<TDuration>> durationSelector, int capacity);
    public virtual IObservable`1<IGroupedObservable`2<TKey, TSource>> GroupByUntil(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<IGroupedObservable`2<TKey, TSource>, IObservable`1<TDuration>> durationSelector, int capacity, IEqualityComparer`1<TKey> comparer);
    public virtual IObservable`1<IGroupedObservable`2<TKey, TSource>> GroupByUntil(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<IGroupedObservable`2<TKey, TSource>, IObservable`1<TDuration>> durationSelector, int capacity);
    private static IObservable`1<IGroupedObservable`2<TKey, TElement>> GroupByUntil_(IObservable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`2<IGroupedObservable`2<TKey, TElement>, IObservable`1<TDuration>> durationSelector, Nullable`1<int> capacity, IEqualityComparer`1<TKey> comparer);
    public virtual IObservable`1<TResult> GroupJoin(IObservable`1<TLeft> left, IObservable`1<TRight> right, Func`2<TLeft, IObservable`1<TLeftDuration>> leftDurationSelector, Func`2<TRight, IObservable`1<TRightDuration>> rightDurationSelector, Func`3<TLeft, IObservable`1<TRight>, TResult> resultSelector);
    private static IObservable`1<TResult> GroupJoin_(IObservable`1<TLeft> left, IObservable`1<TRight> right, Func`2<TLeft, IObservable`1<TLeftDuration>> leftDurationSelector, Func`2<TRight, IObservable`1<TRightDuration>> rightDurationSelector, Func`3<TLeft, IObservable`1<TRight>, TResult> resultSelector);
    public virtual IObservable`1<TResult> Join(IObservable`1<TLeft> left, IObservable`1<TRight> right, Func`2<TLeft, IObservable`1<TLeftDuration>> leftDurationSelector, Func`2<TRight, IObservable`1<TRightDuration>> rightDurationSelector, Func`3<TLeft, TRight, TResult> resultSelector);
    private static IObservable`1<TResult> Join_(IObservable`1<TLeft> left, IObservable`1<TRight> right, Func`2<TLeft, IObservable`1<TLeftDuration>> leftDurationSelector, Func`2<TRight, IObservable`1<TRightDuration>> rightDurationSelector, Func`3<TLeft, TRight, TResult> resultSelector);
    public virtual IObservable`1<TResult> OfType(IObservable`1<object> source);
    public virtual IObservable`1<TResult> Select(IObservable`1<TSource> source, Func`2<TSource, TResult> selector);
    public virtual IObservable`1<TResult> Select(IObservable`1<TSource> source, Func`3<TSource, int, TResult> selector);
    public virtual IObservable`1<TOther> SelectMany(IObservable`1<TSource> source, IObservable`1<TOther> other);
    public virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TResult>> selector);
    public virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, int, IObservable`1<TResult>> selector);
    public virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`2<TSource, Task`1<TResult>> selector);
    public virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, int, Task`1<TResult>> selector);
    public virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, CancellationToken, Task`1<TResult>> selector);
    public virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`4<TSource, int, CancellationToken, Task`1<TResult>> selector);
    public virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector);
    public virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, int, IObservable`1<TCollection>> collectionSelector, Func`5<TSource, int, TCollection, int, TResult> resultSelector);
    public virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`2<TSource, Task`1<TTaskResult>> taskSelector, Func`3<TSource, TTaskResult, TResult> resultSelector);
    public virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, int, Task`1<TTaskResult>> taskSelector, Func`4<TSource, int, TTaskResult, TResult> resultSelector);
    public virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, CancellationToken, Task`1<TTaskResult>> taskSelector, Func`3<TSource, TTaskResult, TResult> resultSelector);
    public virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`4<TSource, int, CancellationToken, Task`1<TTaskResult>> taskSelector, Func`4<TSource, int, TTaskResult, TResult> resultSelector);
    private static IObservable`1<TResult> SelectMany_(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TResult>> selector);
    private static IObservable`1<TResult> SelectMany_(IObservable`1<TSource> source, Func`3<TSource, int, IObservable`1<TResult>> selector);
    private static IObservable`1<TResult> SelectMany_(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector);
    private static IObservable`1<TResult> SelectMany_(IObservable`1<TSource> source, Func`3<TSource, int, IObservable`1<TCollection>> collectionSelector, Func`5<TSource, int, TCollection, int, TResult> resultSelector);
    public virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TResult>> onNext, Func`2<Exception, IObservable`1<TResult>> onError, Func`1<IObservable`1<TResult>> onCompleted);
    public virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, int, IObservable`1<TResult>> onNext, Func`2<Exception, IObservable`1<TResult>> onError, Func`1<IObservable`1<TResult>> onCompleted);
    public virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`2<TSource, IEnumerable`1<TResult>> selector);
    public virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, int, IEnumerable`1<TResult>> selector);
    public virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`2<TSource, IEnumerable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector);
    public virtual IObservable`1<TResult> SelectMany(IObservable`1<TSource> source, Func`3<TSource, int, IEnumerable`1<TCollection>> collectionSelector, Func`5<TSource, int, TCollection, int, TResult> resultSelector);
    private static IObservable`1<TResult> SelectMany_(IObservable`1<TSource> source, Func`2<TSource, IEnumerable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector);
    private static IObservable`1<TResult> SelectMany_(IObservable`1<TSource> source, Func`3<TSource, int, IEnumerable`1<TCollection>> collectionSelector, Func`5<TSource, int, TCollection, int, TResult> resultSelector);
    public virtual IObservable`1<TSource> Skip(IObservable`1<TSource> source, int count);
    public virtual IObservable`1<TSource> SkipWhile(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public virtual IObservable`1<TSource> SkipWhile(IObservable`1<TSource> source, Func`3<TSource, int, bool> predicate);
    public virtual IObservable`1<TSource> Take(IObservable`1<TSource> source, int count);
    public virtual IObservable`1<TSource> Take(IObservable`1<TSource> source, int count, IScheduler scheduler);
    private static IObservable`1<TSource> Take_(IObservable`1<TSource> source, int count);
    public virtual IObservable`1<TSource> TakeWhile(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public virtual IObservable`1<TSource> TakeWhile(IObservable`1<TSource> source, Func`3<TSource, int, bool> predicate);
    public virtual IObservable`1<TSource> Where(IObservable`1<TSource> source, Func`2<TSource, bool> predicate);
    public virtual IObservable`1<TSource> Where(IObservable`1<TSource> source, Func`3<TSource, int, bool> predicate);
    public virtual IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, TimeSpan timeSpan);
    public virtual IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, TimeSpan timeSpan, IScheduler scheduler);
    private static IObservable`1<IList`1<TSource>> Buffer_(IObservable`1<TSource> source, TimeSpan timeSpan, IScheduler scheduler);
    public virtual IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, TimeSpan timeSpan, TimeSpan timeShift);
    public virtual IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, TimeSpan timeSpan, TimeSpan timeShift, IScheduler scheduler);
    private static IObservable`1<IList`1<TSource>> Buffer_(IObservable`1<TSource> source, TimeSpan timeSpan, TimeSpan timeShift, IScheduler scheduler);
    public virtual IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, TimeSpan timeSpan, int count);
    public virtual IObservable`1<IList`1<TSource>> Buffer(IObservable`1<TSource> source, TimeSpan timeSpan, int count, IScheduler scheduler);
    private static IObservable`1<IList`1<TSource>> Buffer_(IObservable`1<TSource> source, TimeSpan timeSpan, int count, IScheduler scheduler);
    public virtual IObservable`1<TSource> Delay(IObservable`1<TSource> source, TimeSpan dueTime);
    public virtual IObservable`1<TSource> Delay(IObservable`1<TSource> source, TimeSpan dueTime, IScheduler scheduler);
    private static IObservable`1<TSource> Delay_(IObservable`1<TSource> source, TimeSpan dueTime, IScheduler scheduler);
    public virtual IObservable`1<TSource> Delay(IObservable`1<TSource> source, DateTimeOffset dueTime);
    public virtual IObservable`1<TSource> Delay(IObservable`1<TSource> source, DateTimeOffset dueTime, IScheduler scheduler);
    private static IObservable`1<TSource> Delay_(IObservable`1<TSource> source, DateTimeOffset dueTime, IScheduler scheduler);
    public virtual IObservable`1<TSource> Delay(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TDelay>> delayDurationSelector);
    public virtual IObservable`1<TSource> Delay(IObservable`1<TSource> source, IObservable`1<TDelay> subscriptionDelay, Func`2<TSource, IObservable`1<TDelay>> delayDurationSelector);
    public virtual IObservable`1<TSource> DelaySubscription(IObservable`1<TSource> source, TimeSpan dueTime);
    public virtual IObservable`1<TSource> DelaySubscription(IObservable`1<TSource> source, TimeSpan dueTime, IScheduler scheduler);
    private static IObservable`1<TSource> DelaySubscription_(IObservable`1<TSource> source, TimeSpan dueTime, IScheduler scheduler);
    public virtual IObservable`1<TSource> DelaySubscription(IObservable`1<TSource> source, DateTimeOffset dueTime);
    public virtual IObservable`1<TSource> DelaySubscription(IObservable`1<TSource> source, DateTimeOffset dueTime, IScheduler scheduler);
    private static IObservable`1<TSource> DelaySubscription_(IObservable`1<TSource> source, DateTimeOffset dueTime, IScheduler scheduler);
    public virtual IObservable`1<TResult> Generate(TState initialState, Func`2<TState, bool> condition, Func`2<TState, TState> iterate, Func`2<TState, TResult> resultSelector, Func`2<TState, TimeSpan> timeSelector);
    public virtual IObservable`1<TResult> Generate(TState initialState, Func`2<TState, bool> condition, Func`2<TState, TState> iterate, Func`2<TState, TResult> resultSelector, Func`2<TState, TimeSpan> timeSelector, IScheduler scheduler);
    private static IObservable`1<TResult> Generate_(TState initialState, Func`2<TState, bool> condition, Func`2<TState, TState> iterate, Func`2<TState, TResult> resultSelector, Func`2<TState, TimeSpan> timeSelector, IScheduler scheduler);
    public virtual IObservable`1<TResult> Generate(TState initialState, Func`2<TState, bool> condition, Func`2<TState, TState> iterate, Func`2<TState, TResult> resultSelector, Func`2<TState, DateTimeOffset> timeSelector);
    public virtual IObservable`1<TResult> Generate(TState initialState, Func`2<TState, bool> condition, Func`2<TState, TState> iterate, Func`2<TState, TResult> resultSelector, Func`2<TState, DateTimeOffset> timeSelector, IScheduler scheduler);
    private static IObservable`1<TResult> Generate_(TState initialState, Func`2<TState, bool> condition, Func`2<TState, TState> iterate, Func`2<TState, TResult> resultSelector, Func`2<TState, DateTimeOffset> timeSelector, IScheduler scheduler);
    public virtual IObservable`1<long> Interval(TimeSpan period);
    public virtual IObservable`1<long> Interval(TimeSpan period, IScheduler scheduler);
    public virtual IObservable`1<TSource> Sample(IObservable`1<TSource> source, TimeSpan interval);
    public virtual IObservable`1<TSource> Sample(IObservable`1<TSource> source, TimeSpan interval, IScheduler scheduler);
    private static IObservable`1<TSource> Sample_(IObservable`1<TSource> source, TimeSpan interval, IScheduler scheduler);
    public virtual IObservable`1<TSource> Sample(IObservable`1<TSource> source, IObservable`1<TSample> sampler);
    private static IObservable`1<TSource> Sample_(IObservable`1<TSource> source, IObservable`1<TSample> sampler);
    public virtual IObservable`1<TSource> Skip(IObservable`1<TSource> source, TimeSpan duration);
    public virtual IObservable`1<TSource> Skip(IObservable`1<TSource> source, TimeSpan duration, IScheduler scheduler);
    private static IObservable`1<TSource> Skip_(IObservable`1<TSource> source, TimeSpan duration, IScheduler scheduler);
    public virtual IObservable`1<TSource> SkipLast(IObservable`1<TSource> source, TimeSpan duration);
    public virtual IObservable`1<TSource> SkipLast(IObservable`1<TSource> source, TimeSpan duration, IScheduler scheduler);
    private static IObservable`1<TSource> SkipLast_(IObservable`1<TSource> source, TimeSpan duration, IScheduler scheduler);
    public virtual IObservable`1<TSource> SkipUntil(IObservable`1<TSource> source, DateTimeOffset startTime);
    public virtual IObservable`1<TSource> SkipUntil(IObservable`1<TSource> source, DateTimeOffset startTime, IScheduler scheduler);
    private static IObservable`1<TSource> SkipUntil_(IObservable`1<TSource> source, DateTimeOffset startTime, IScheduler scheduler);
    public virtual IObservable`1<TSource> Take(IObservable`1<TSource> source, TimeSpan duration);
    public virtual IObservable`1<TSource> Take(IObservable`1<TSource> source, TimeSpan duration, IScheduler scheduler);
    private static IObservable`1<TSource> Take_(IObservable`1<TSource> source, TimeSpan duration, IScheduler scheduler);
    public virtual IObservable`1<TSource> TakeLast(IObservable`1<TSource> source, TimeSpan duration);
    public virtual IObservable`1<TSource> TakeLast(IObservable`1<TSource> source, TimeSpan duration, IScheduler scheduler);
    public virtual IObservable`1<TSource> TakeLast(IObservable`1<TSource> source, TimeSpan duration, IScheduler timerScheduler, IScheduler loopScheduler);
    private static IObservable`1<TSource> TakeLast_(IObservable`1<TSource> source, TimeSpan duration, IScheduler timerScheduler, IScheduler loopScheduler);
    public virtual IObservable`1<IList`1<TSource>> TakeLastBuffer(IObservable`1<TSource> source, TimeSpan duration);
    public virtual IObservable`1<IList`1<TSource>> TakeLastBuffer(IObservable`1<TSource> source, TimeSpan duration, IScheduler scheduler);
    private static IObservable`1<IList`1<TSource>> TakeLastBuffer_(IObservable`1<TSource> source, TimeSpan duration, IScheduler scheduler);
    public virtual IObservable`1<TSource> TakeUntil(IObservable`1<TSource> source, DateTimeOffset endTime);
    public virtual IObservable`1<TSource> TakeUntil(IObservable`1<TSource> source, DateTimeOffset endTime, IScheduler scheduler);
    private static IObservable`1<TSource> TakeUntil_(IObservable`1<TSource> source, DateTimeOffset endTime, IScheduler scheduler);
    public virtual IObservable`1<TSource> Throttle(IObservable`1<TSource> source, TimeSpan dueTime);
    public virtual IObservable`1<TSource> Throttle(IObservable`1<TSource> source, TimeSpan dueTime, IScheduler scheduler);
    private static IObservable`1<TSource> Throttle_(IObservable`1<TSource> source, TimeSpan dueTime, IScheduler scheduler);
    public virtual IObservable`1<TSource> Throttle(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TThrottle>> throttleDurationSelector);
    public virtual IObservable`1<TimeInterval`1<TSource>> TimeInterval(IObservable`1<TSource> source);
    public virtual IObservable`1<TimeInterval`1<TSource>> TimeInterval(IObservable`1<TSource> source, IScheduler scheduler);
    private static IObservable`1<TimeInterval`1<TSource>> TimeInterval_(IObservable`1<TSource> source, IScheduler scheduler);
    public virtual IObservable`1<TSource> Timeout(IObservable`1<TSource> source, TimeSpan dueTime);
    public virtual IObservable`1<TSource> Timeout(IObservable`1<TSource> source, TimeSpan dueTime, IScheduler scheduler);
    public virtual IObservable`1<TSource> Timeout(IObservable`1<TSource> source, TimeSpan dueTime, IObservable`1<TSource> other);
    public virtual IObservable`1<TSource> Timeout(IObservable`1<TSource> source, TimeSpan dueTime, IObservable`1<TSource> other, IScheduler scheduler);
    private static IObservable`1<TSource> Timeout_(IObservable`1<TSource> source, TimeSpan dueTime, IObservable`1<TSource> other, IScheduler scheduler);
    public virtual IObservable`1<TSource> Timeout(IObservable`1<TSource> source, DateTimeOffset dueTime);
    public virtual IObservable`1<TSource> Timeout(IObservable`1<TSource> source, DateTimeOffset dueTime, IScheduler scheduler);
    public virtual IObservable`1<TSource> Timeout(IObservable`1<TSource> source, DateTimeOffset dueTime, IObservable`1<TSource> other);
    public virtual IObservable`1<TSource> Timeout(IObservable`1<TSource> source, DateTimeOffset dueTime, IObservable`1<TSource> other, IScheduler scheduler);
    private static IObservable`1<TSource> Timeout_(IObservable`1<TSource> source, DateTimeOffset dueTime, IObservable`1<TSource> other, IScheduler scheduler);
    public virtual IObservable`1<TSource> Timeout(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TTimeout>> timeoutDurationSelector);
    public virtual IObservable`1<TSource> Timeout(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TTimeout>> timeoutDurationSelector, IObservable`1<TSource> other);
    public virtual IObservable`1<TSource> Timeout(IObservable`1<TSource> source, IObservable`1<TTimeout> firstTimeout, Func`2<TSource, IObservable`1<TTimeout>> timeoutDurationSelector);
    public virtual IObservable`1<TSource> Timeout(IObservable`1<TSource> source, IObservable`1<TTimeout> firstTimeout, Func`2<TSource, IObservable`1<TTimeout>> timeoutDurationSelector, IObservable`1<TSource> other);
    private static IObservable`1<TSource> Timeout_(IObservable`1<TSource> source, IObservable`1<TTimeout> firstTimeout, Func`2<TSource, IObservable`1<TTimeout>> timeoutDurationSelector, IObservable`1<TSource> other);
    public virtual IObservable`1<long> Timer(TimeSpan dueTime);
    public virtual IObservable`1<long> Timer(DateTimeOffset dueTime);
    public virtual IObservable`1<long> Timer(TimeSpan dueTime, TimeSpan period);
    public virtual IObservable`1<long> Timer(DateTimeOffset dueTime, TimeSpan period);
    public virtual IObservable`1<long> Timer(TimeSpan dueTime, IScheduler scheduler);
    public virtual IObservable`1<long> Timer(DateTimeOffset dueTime, IScheduler scheduler);
    public virtual IObservable`1<long> Timer(TimeSpan dueTime, TimeSpan period, IScheduler scheduler);
    public virtual IObservable`1<long> Timer(DateTimeOffset dueTime, TimeSpan period, IScheduler scheduler);
    private static IObservable`1<long> Timer_(TimeSpan dueTime, IScheduler scheduler);
    private static IObservable`1<long> Timer_(TimeSpan dueTime, TimeSpan period, IScheduler scheduler);
    private static IObservable`1<long> Timer_(DateTimeOffset dueTime, IScheduler scheduler);
    private static IObservable`1<long> Timer_(DateTimeOffset dueTime, TimeSpan period, IScheduler scheduler);
    public virtual IObservable`1<Timestamped`1<TSource>> Timestamp(IObservable`1<TSource> source);
    public virtual IObservable`1<Timestamped`1<TSource>> Timestamp(IObservable`1<TSource> source, IScheduler scheduler);
    private static IObservable`1<Timestamped`1<TSource>> Timestamp_(IObservable`1<TSource> source, IScheduler scheduler);
    public virtual IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, TimeSpan timeSpan);
    public virtual IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, TimeSpan timeSpan, IScheduler scheduler);
    private static IObservable`1<IObservable`1<TSource>> Window_(IObservable`1<TSource> source, TimeSpan timeSpan, IScheduler scheduler);
    public virtual IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, TimeSpan timeSpan, TimeSpan timeShift);
    public virtual IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, TimeSpan timeSpan, TimeSpan timeShift, IScheduler scheduler);
    private static IObservable`1<IObservable`1<TSource>> Window_(IObservable`1<TSource> source, TimeSpan timeSpan, TimeSpan timeShift, IScheduler scheduler);
    public virtual IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, TimeSpan timeSpan, int count);
    public virtual IObservable`1<IObservable`1<TSource>> Window(IObservable`1<TSource> source, TimeSpan timeSpan, int count, IScheduler scheduler);
    private static IObservable`1<IObservable`1<TSource>> Window_(IObservable`1<TSource> source, TimeSpan timeSpan, int count, IScheduler scheduler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Linq.QueryLanguageEx : object {
    public virtual IObservable`1<ValueTuple`2<TSource1, TSource2>> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2);
    public virtual IObservable`1<ValueTuple`3<TSource1, TSource2, TSource3>> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3);
    public virtual IObservable`1<ValueTuple`4<TSource1, TSource2, TSource3, TSource4>> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4);
    public virtual IObservable`1<ValueTuple`5<TSource1, TSource2, TSource3, TSource4, TSource5>> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5);
    public virtual IObservable`1<ValueTuple`6<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6);
    public virtual IObservable`1<ValueTuple`7<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7);
    public virtual IObservable`1<ValueTuple`8<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, ValueTuple`1<TSource8>>> CombineLatest(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8);
    public virtual IObservable`1<ValueTuple`2<TSource1, TSource2>> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2);
    public virtual IObservable`1<ValueTuple`3<TSource1, TSource2, TSource3>> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3);
    public virtual IObservable`1<ValueTuple`4<TSource1, TSource2, TSource3, TSource4>> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4);
    public virtual IObservable`1<ValueTuple`5<TSource1, TSource2, TSource3, TSource4, TSource5>> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5);
    public virtual IObservable`1<ValueTuple`6<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6);
    public virtual IObservable`1<ValueTuple`7<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7);
    public virtual IObservable`1<ValueTuple`8<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, ValueTuple`1<TSource8>>> Zip(IObservable`1<TSource1> source1, IObservable`1<TSource2> source2, IObservable`1<TSource3> source3, IObservable`1<TSource4> source4, IObservable`1<TSource5> source5, IObservable`1<TSource6> source6, IObservable`1<TSource7> source7, IObservable`1<TSource8> source8);
    public virtual IObservable`1<TResult> Create(Func`2<IObserver`1<TResult>, IEnumerable`1<IObservable`1<object>>> iteratorMethod);
    public virtual IObservable`1<Unit> Create(Func`1<IEnumerable`1<IObservable`1<object>>> iteratorMethod);
    public virtual IObservable`1<TSource> Expand(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TSource>> selector, IScheduler scheduler);
    public virtual IObservable`1<TSource> Expand(IObservable`1<TSource> source, Func`2<TSource, IObservable`1<TSource>> selector);
    public virtual IObservable`1<TResult> ForkJoin(IObservable`1<TFirst> first, IObservable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector);
    public virtual IObservable`1<TSource[]> ForkJoin(IObservable`1[] sources);
    public virtual IObservable`1<TSource[]> ForkJoin(IEnumerable`1<IObservable`1<TSource>> sources);
    public virtual IObservable`1<TResult> Let(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, IObservable`1<TResult>> function);
    public virtual IObservable`1<TResult> ManySelect(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, TResult> selector);
    public virtual IObservable`1<TResult> ManySelect(IObservable`1<TSource> source, Func`2<IObservable`1<TSource>, TResult> selector, IScheduler scheduler);
    public virtual ListObservable`1<TSource> ToListObservable(IObservable`1<TSource> source);
    public virtual IObservable`1<ValueTuple`2<TFirst, TSecond>> WithLatestFrom(IObservable`1<TFirst> first, IObservable`1<TSecond> second);
    public virtual IObservable`1<ValueTuple`2<TFirst, TSecond>> Zip(IObservable`1<TFirst> first, IEnumerable`1<TSecond> second);
    private static IObservable`1<TResult> Combine(IObservable`1<TLeft> leftSource, IObservable`1<TRight> rightSource, Func`4<IObserver`1<TResult>, IDisposable, IDisposable, IObserver`1<Either`2<Notification`1<TLeft>, Notification`1<TRight>>>> combinerSelector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Linq.QueryServices : object {
    private static IQueryServices Services;
    private static QueryServices();
    public static T GetQueryImpl(T defaultInstance);
    private static IQueryServices Initialize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[ExperimentalAttribute]
public class System.Reactive.ListObservable`1 : object {
    private IDisposable _subscription;
    private AsyncSubject`1<object> _subject;
    private List`1<T> _results;
    public T Value { get; }
    public T Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ListObservable`1(IObservable`1<T> source);
    private void Wait();
    public T get_Value();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IDisposable Subscribe(IObserver`1<object> observer);
}
[DefaultMemberAttribute("Item")]
internal class System.Reactive.Lookup`2 : object {
    private Dictionary`2<K, List`1<E>> _dictionary;
    public int Count { get; }
    public IEnumerable`1<E> Item { get; }
    public Lookup`2(IEqualityComparer`1<K> comparer);
    public void Add(K key, E element);
    public sealed virtual bool Contains(K key);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerable`1<E> get_Item(K key);
    private static IEnumerable`1<E> Hide(List`1<E> elements);
    [IteratorStateMachineAttribute("System.Reactive.Lookup`2/<GetEnumerator>d__9")]
public sealed virtual IEnumerator`1<IGrouping`2<K, E>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class System.Reactive.Map`2 : object {
    private static int DefaultConcurrencyMultiplier;
    private ConcurrentDictionary`2<TKey, TValue> _map;
    private static int DefaultConcurrencyLevel { get; }
    public IEnumerable`1<TValue> Values { get; }
    public Map`2(Nullable`1<int> capacity, IEqualityComparer`1<TKey> comparer);
    private static int get_DefaultConcurrencyLevel();
    public TValue GetOrAdd(TKey key, Func`1<TValue> valueFactory, Boolean& added);
    public IEnumerable`1<TValue> get_Values();
    public bool Remove(TKey key);
}
[CompilerGeneratedAttribute]
internal class System.Reactive.NamespaceDoc : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.NopObserver`1 : object {
    public static IObserver`1<T> Instance;
    private static NopObserver`1();
    public sealed virtual void OnCompleted();
    public sealed virtual void OnError(Exception error);
    public sealed virtual void OnNext(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Reactive.Notification : object {
    public static Notification`1<T> CreateOnNext(T value);
    public static Notification`1<T> CreateOnError(Exception error);
    public static Notification`1<T> CreateOnCompleted();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Reactive.Notification`1 : object {
    public T Value { get; }
    public bool HasValue { get; }
    [NullableAttribute("2")]
public Exception Exception { get; }
    public NotificationKind Kind { get; }
    public abstract virtual T get_Value();
    public abstract virtual bool get_HasValue();
    [NullableContextAttribute("2")]
public abstract virtual Exception get_Exception();
    public abstract virtual NotificationKind get_Kind();
    public abstract virtual bool Equals(Notification`1<T> other);
    public static bool op_Equality(Notification`1<T> left, Notification`1<T> right);
    public static bool op_Inequality(Notification`1<T> left, Notification`1<T> right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public abstract virtual void Accept(IObserver`1<T> observer);
    public abstract virtual TResult Accept(IObserver`2<T, TResult> observer);
    public abstract virtual void Accept(Action`1<T> onNext, Action`1<Exception> onError, Action onCompleted);
    public abstract virtual TResult Accept(Func`2<T, TResult> onNext, Func`2<Exception, TResult> onError, Func`1<TResult> onCompleted);
    public IObservable`1<T> ToObservable();
    public IObservable`1<T> ToObservable(IScheduler scheduler);
}
public enum System.Reactive.NotificationKind : Enum {
    public int value__;
    public static NotificationKind OnNext;
    public static NotificationKind OnError;
    public static NotificationKind OnCompleted;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Reactive.ObservableBase`1 : object {
    public sealed virtual IDisposable Subscribe(IObserver`1<T> observer);
    private void ScheduledSubscribe(AutoDetachObserver`1<T> autoDetachObserver);
    protected abstract virtual IDisposable SubscribeCore(IObserver`1<T> observer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiresUnreferencedCodeAttribute("This type uses Queryable.AsQueryable, which is not compatible with trimming because expressions referencing IQueryable extension methods can get rebound to IEnumerable extension methods, and those IEnumerable methods might be trimmed.")]
internal class System.Reactive.ObservableQuery : object {
    [NullableAttribute("2")]
protected object _source;
    protected Expression _expression;
    [NullableAttribute("2")]
public object Source { get; }
    public Expression Expression { get; }
    public ObservableQuery(object source);
    public ObservableQuery(Expression expression);
    [NullableContextAttribute("2")]
public object get_Source();
    public sealed virtual Expression get_Expression();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiresUnreferencedCodeAttribute("This type uses Queryable.AsQueryable, which is not compatible with trimming because expressions referencing IQueryable extension methods can get rebound to IEnumerable extension methods, and those IEnumerable methods might be trimmed.")]
internal class System.Reactive.ObservableQuery`1 : ObservableQuery {
    public Type ElementType { get; }
    public IQbservableProvider Provider { get; }
    internal ObservableQuery`1(IObservable`1<TSource> source);
    internal ObservableQuery`1(Expression expression);
    public sealed virtual Type get_ElementType();
    public sealed virtual IQbservableProvider get_Provider();
    public sealed virtual IDisposable Subscribe(IObserver`1<TSource> observer);
    [NullableContextAttribute("2")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiresUnreferencedCodeAttribute("This type uses Queryable.AsQueryable, which is not compatible with trimming because expressions referencing IQueryable extension methods can get rebound to IEnumerable extension methods, and those IEnumerable methods might be trimmed.")]
internal class System.Reactive.ObservableQueryProvider : object {
    [NullableAttribute("2")]
private static MethodInfo _staticAsQueryable;
    private static MethodInfo AsQueryable { get; }
    public sealed virtual IQbservable`1<TResult> CreateQuery(Expression expression);
    private sealed virtual override IQueryable`1<TElement> System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private static MethodInfo get_AsQueryable();
    private sealed virtual override IQueryable System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override TResult System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override object System.Linq.IQueryProvider.Execute(Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.ObserveOnObserver`1 : ScheduledObserver`1<T> {
    private SingleAssignmentDisposableValue _run;
    public ObserveOnObserver`1(IScheduler scheduler, IObserver`1<T> observer);
    public void Run(IObservable`1<T> source);
    protected virtual void OnNextCore(T value);
    protected virtual void OnErrorCore(Exception exception);
    protected virtual void OnCompletedCore();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.ObserveOnObserverLongRunning`1 : IdentitySink`1<TSource> {
    private ISchedulerLongRunning _scheduler;
    private ConcurrentQueue`1<TSource> _queue;
    private object _suspendGuard;
    private long _wip;
    private bool _done;
    [NullableAttribute("2")]
private Exception _error;
    private bool _disposed;
    private int _runDrainOnce;
    private SingleAssignmentDisposableValue _drainTask;
    private static Action`2<ObserveOnObserverLongRunning`1<TSource>, ICancelable> DrainLongRunning;
    public ObserveOnObserverLongRunning`1(ISchedulerLongRunning scheduler, IObserver`1<TSource> observer);
    private static ObserveOnObserverLongRunning`1();
    public virtual void OnCompleted();
    public virtual void OnError(Exception error);
    public virtual void OnNext(TSource value);
    private void Schedule();
    protected virtual void Dispose(bool disposing);
    private void Drain();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.ObserveOnObserverNew`1 : IdentitySink`1<T> {
    private IScheduler _scheduler;
    private ConcurrentQueue`1<T> _queue;
    [NullableAttribute("2")]
private IDisposable _task;
    private int _wip;
    private bool _done;
    [NullableAttribute("2")]
private Exception _error;
    private bool _disposed;
    private static Func`3<IScheduler, ObserveOnObserverNew`1<T>, IDisposable> DrainShortRunningFunc;
    public ObserveOnObserverNew`1(IScheduler scheduler, IObserver`1<T> downstream);
    private static ObserveOnObserverNew`1();
    protected virtual void Dispose(bool disposing);
    private static void Clear(ConcurrentQueue`1<T> q);
    public virtual void OnCompleted();
    public virtual void OnError(Exception error);
    public virtual void OnNext(T value);
    private void Schedule();
    private IDisposable DrainShortRunning(IScheduler recursiveScheduler);
    private void DrainStep(ConcurrentQueue`1<T> q);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Reactive.Observer : object {
    [ExtensionAttribute]
public static IObserver`1<T> ToObserver(Action`1<Notification`1<T>> handler);
    [ExtensionAttribute]
public static Action`1<Notification`1<T>> ToNotifier(IObserver`1<T> observer);
    public static IObserver`1<T> Create(Action`1<T> onNext);
    public static IObserver`1<T> Create(Action`1<T> onNext, Action`1<Exception> onError);
    public static IObserver`1<T> Create(Action`1<T> onNext, Action onCompleted);
    public static IObserver`1<T> Create(Action`1<T> onNext, Action`1<Exception> onError, Action onCompleted);
    [ExtensionAttribute]
public static IObserver`1<T> AsObserver(IObserver`1<T> observer);
    [ExtensionAttribute]
public static IObserver`1<T> Checked(IObserver`1<T> observer);
    public static IObserver`1<T> Synchronize(IObserver`1<T> observer);
    public static IObserver`1<T> Synchronize(IObserver`1<T> observer, bool preventReentrancy);
    public static IObserver`1<T> Synchronize(IObserver`1<T> observer, object gate);
    public static IObserver`1<T> Synchronize(IObserver`1<T> observer, AsyncLock asyncLock);
    [ExtensionAttribute]
public static IObserver`1<T> NotifyOn(IObserver`1<T> observer, IScheduler scheduler);
    [ExtensionAttribute]
public static IObserver`1<T> NotifyOn(IObserver`1<T> observer, SynchronizationContext context);
    [ExtensionAttribute]
public static IProgress`1<T> ToProgress(IObserver`1<T> observer);
    [ExtensionAttribute]
public static IProgress`1<T> ToProgress(IObserver`1<T> observer, IScheduler scheduler);
    [ExtensionAttribute]
public static IObserver`1<T> ToObserver(IProgress`1<T> progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Reactive.ObserverBase`1 : object {
    private int _isStopped;
    public sealed virtual void OnNext(T value);
    protected abstract virtual void OnNextCore(T value);
    public sealed virtual void OnError(Exception error);
    protected abstract virtual void OnErrorCore(Exception error);
    public sealed virtual void OnCompleted();
    protected abstract virtual void OnCompletedCore();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal bool Fail(Exception error);
}
[EditorBrowsableAttribute("1")]
public class System.Reactive.PlatformServices.CurrentPlatformEnlightenmentProvider : object {
    [NullableContextAttribute("1")]
public virtual T GetService(Object[] args);
}
internal class System.Reactive.PlatformServices.DefaultExceptionServices : object {
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public sealed virtual void Rethrow(Exception exception);
}
[EditorBrowsableAttribute("1")]
public class System.Reactive.PlatformServices.DefaultSystemClock : object {
    public DateTimeOffset UtcNow { get; }
    public sealed virtual DateTimeOffset get_UtcNow();
}
internal class System.Reactive.PlatformServices.DefaultSystemClockMonitor : PeriodicTimerSystemClockMonitor {
    private static TimeSpan DefaultPeriod;
    private static DefaultSystemClockMonitor();
}
public static class System.Reactive.PlatformServices.EnlightenmentProvider : object {
    public static bool EnsureLoaded();
}
internal class System.Reactive.PlatformServices.ExceptionServicesImpl : object {
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
public sealed virtual void Rethrow(Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public static class System.Reactive.PlatformServices.HostLifecycleService : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Lazy`1<IHostLifecycleNotifications> Notifications;
    private static int _refCount;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private static EventHandler`1<HostSuspendingEventArgs> Suspending;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private static EventHandler`1<HostResumingEventArgs> Resuming;
    private static HostLifecycleService();
    [CompilerGeneratedAttribute]
public static void add_Suspending(EventHandler`1<HostSuspendingEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_Suspending(EventHandler`1<HostSuspendingEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_Resuming(EventHandler`1<HostResumingEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_Resuming(EventHandler`1<HostResumingEventArgs> value);
    public static void AddRef();
    public static void Release();
    private static void OnSuspending(object sender, HostSuspendingEventArgs e);
    private static void OnResuming(object sender, HostResumingEventArgs e);
    [NullableContextAttribute("2")]
private static IHostLifecycleNotifications InitializeNotifications();
}
[EditorBrowsableAttribute("1")]
public class System.Reactive.PlatformServices.HostResumingEventArgs : EventArgs {
}
[EditorBrowsableAttribute("1")]
public class System.Reactive.PlatformServices.HostSuspendingEventArgs : EventArgs {
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
public interface System.Reactive.PlatformServices.IExceptionServices {
    [DoesNotReturnAttribute]
public abstract virtual void Rethrow(Exception exception);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
public interface System.Reactive.PlatformServices.IHostLifecycleNotifications {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Suspending(EventHandler`1<HostSuspendingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Suspending(EventHandler`1<HostSuspendingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Resuming(EventHandler`1<HostResumingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Resuming(EventHandler`1<HostResumingEventArgs> value);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
public interface System.Reactive.PlatformServices.INotifySystemClockChanged {
    [CompilerGeneratedAttribute]
public abstract virtual void add_SystemClockChanged(EventHandler`1<SystemClockChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SystemClockChanged(EventHandler`1<SystemClockChangedEventArgs> value);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
public interface System.Reactive.PlatformServices.IPlatformEnlightenmentProvider {
    public abstract virtual T GetService(Object[] args);
}
[EditorBrowsableAttribute("1")]
public interface System.Reactive.PlatformServices.ISystemClock {
    public DateTimeOffset UtcNow { get; }
    public abstract virtual DateTimeOffset get_UtcNow();
}
[CompilerGeneratedAttribute]
internal class System.Reactive.PlatformServices.NamespaceDoc : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class System.Reactive.PlatformServices.PeriodicTimerSystemClockMonitor : object {
    private TimeSpan _period;
    private SerialDisposableValue _timer;
    private long _lastTimeUnixMillis;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private EventHandler`1<SystemClockChangedEventArgs> _systemClockChanged;
    private static int SyncMaxRetries;
    private static double SyncMaxDelta;
    private static int MaxError;
    public PeriodicTimerSystemClockMonitor(TimeSpan period);
    public sealed virtual void add_SystemClockChanged(EventHandler`1<SystemClockChangedEventArgs> value);
    public sealed virtual void remove_SystemClockChanged(EventHandler`1<SystemClockChangedEventArgs> value);
    private void NewTimer();
    private void TimeChanged();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public static class System.Reactive.PlatformServices.PlatformEnlightenmentProvider : object {
    private static IPlatformEnlightenmentProvider _current;
    public static IPlatformEnlightenmentProvider Current { get; public set; }
    private static PlatformEnlightenmentProvider();
    public static IPlatformEnlightenmentProvider get_Current();
    public static void set_Current(IPlatformEnlightenmentProvider value);
    private static IPlatformEnlightenmentProvider CreatePlatformProvider();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public static class System.Reactive.PlatformServices.SystemClock : object {
    private static Lazy`1<ISystemClock> ServiceSystemClock;
    private static Lazy`1<INotifySystemClockChanged> ServiceSystemClockChanged;
    internal static HashSet`1<WeakReference`1<LocalScheduler>> SystemClockChanged;
    [NullableAttribute("2")]
private static IDisposable _systemClockChangedHandlerCollector;
    private static int _refCount;
    public static DateTimeOffset UtcNow { get; }
    private static SystemClock();
    public static DateTimeOffset get_UtcNow();
    public static void AddRef();
    public static void Release();
    internal static void OnSystemClockChanged(object sender, SystemClockChangedEventArgs e);
    private static ISystemClock InitializeSystemClock();
    private static INotifySystemClockChanged InitializeSystemClockChanged();
    internal static void Register(LocalScheduler scheduler);
    private static void CollectHandlers();
}
[EditorBrowsableAttribute("1")]
public class System.Reactive.PlatformServices.SystemClockChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DateTimeOffset <OldTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <NewTime>k__BackingField;
    public DateTimeOffset OldTime { get; }
    public DateTimeOffset NewTime { get; }
    public SystemClockChangedEventArgs(DateTimeOffset oldTime, DateTimeOffset newTime);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_OldTime();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_NewTime();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.PriorityQueue`1 : object {
    private long _count;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IndexedItem[] _items;
    private int _size;
    public int Count { get; }
    public PriorityQueue`1(int capacity);
    private bool IsHigherPriority(int left, int right);
    private int Percolate(int index);
    private void Heapify(int index);
    public int get_Count();
    public T Peek();
    private void RemoveAt(int index);
    public T Dequeue();
    public void Enqueue(T item);
    public bool Remove(T item);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class System.Reactive.Producer`2 : object {
    public sealed virtual IDisposable Subscribe(IObserver`1<TTarget> observer);
    public sealed virtual IDisposable SubscribeRaw(IObserver`1<TTarget> observer, bool enableSafeguard);
    protected abstract virtual void Run(TSink sink);
    protected abstract virtual TSink CreateSink(IObserver`1<TTarget> observer);
}
internal static class System.Reactive.ReadyToken : object {
    [NullableAttribute("1")]
internal static IDisposable Ready;
    private static ReadyToken();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.ReflectionUtils : object {
    public static TDelegate CreateDelegate(object o, MethodInfo method);
    public static Delegate CreateDelegate(Type delegateType, object o, MethodInfo method);
    [RequiresUnreferencedCodeAttribute("This member uses reflection to discover event members and associated delegate types.")]
public static void GetEventMethods(Type targetType, object target, string eventName, MethodInfo& addMethod, MethodInfo& removeMethod, Type& delegateType, Boolean& isWinRT);
    private static bool IsWinRTEventRegistrationTokenType(Type t);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class System.Reactive.SafeObserver`1 : object {
    private SingleAssignmentDisposableValue _disposable;
    public static ISafeObserver`1<TSource> Wrap(IObserver`1<TSource> observer);
    public abstract virtual void OnNext(TSource value);
    public abstract virtual void OnError(Exception error);
    public abstract virtual void OnCompleted();
    public sealed virtual void SetResource(IDisposable resource);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.ScheduledObserver`1 : ObserverBase`1<T> {
    private int _state;
    private static int Stopped;
    private static int Running;
    private static int Pending;
    private static int Faulted;
    private ConcurrentQueue`1<T> _queue;
    private bool _failed;
    [NullableAttribute("2")]
private Exception _error;
    private bool _completed;
    private IObserver`1<T> _observer;
    private IScheduler _scheduler;
    [NullableAttribute("2")]
private ISchedulerLongRunning _longRunning;
    private SerialDisposableValue _disposable;
    private object _dispatcherInitGate;
    [NullableAttribute("2")]
private SemaphoreSlim _dispatcherEvent;
    [NullableAttribute("2")]
private IDisposable _dispatcherEventRelease;
    [NullableAttribute("2")]
private IDisposable _dispatcherJob;
    public ScheduledObserver`1(IScheduler scheduler, IObserver`1<T> observer);
    private void EnsureDispatcher();
    private void Dispatch(ICancelable cancel);
    public sealed virtual void EnsureActive();
    public sealed virtual void EnsureActive(int n);
    private void EnsureActiveSlow();
    [NullableContextAttribute("2")]
private void Run(object state, Action`1<object> recurse);
    protected virtual void OnNextCore(T value);
    protected virtual void OnErrorCore(Exception exception);
    protected virtual void OnCompletedCore();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class System.Reactive.Sink`1 : object {
    private SingleAssignmentDisposableValue _upstream;
    private IObserver`1 modreq(System.Runtime.CompilerServices.IsVolatile) _observer;
    protected Sink`1(IObserver`1<TTarget> observer);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void ForwardOnNext(TTarget value);
    public sealed virtual void ForwardOnCompleted();
    public sealed virtual void ForwardOnError(Exception error);
    protected void SetUpstream(IDisposable upstream);
    protected void DisposeUpstream();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class System.Reactive.Sink`2 : Sink`1<TTarget> {
    protected Sink`2(IObserver`1<TTarget> observer);
    public virtual void Run(IObservable`1<TSource> source);
    public abstract virtual void OnNext(TSource value);
    public virtual void OnError(Exception error);
    public virtual void OnCompleted();
    public IObserver`1<TTarget> GetForwarder();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Reactive.Strings_Core : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CANT_OBTAIN_SCHEDULER { get; }
    internal static string COMPLETED_NO_VALUE { get; }
    internal static string DISPOSABLE_ALREADY_ASSIGNED { get; }
    internal static string DISPOSABLES_CANT_CONTAIN_NULL { get; }
    internal static string FAILED_CLOCK_MONITORING { get; }
    internal static string HEAP_EMPTY { get; }
    internal static string OBSERVER_TERMINATED { get; }
    internal static string REENTRANCY_DETECTED { get; }
    internal static string SCHEDULER_OPERATION_ALREADY_AWAITED { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CANT_OBTAIN_SCHEDULER();
    internal static string get_COMPLETED_NO_VALUE();
    internal static string get_DISPOSABLE_ALREADY_ASSIGNED();
    internal static string get_DISPOSABLES_CANT_CONTAIN_NULL();
    internal static string get_FAILED_CLOCK_MONITORING();
    internal static string get_HEAP_EMPTY();
    internal static string get_OBSERVER_TERMINATED();
    internal static string get_REENTRANCY_DETECTED();
    internal static string get_SCHEDULER_OPERATION_ALREADY_AWAITED();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Reactive.Strings_Linq : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CANT_ADVANCE_WHILE_RUNNING { get; }
    internal static string COULD_NOT_FIND_INSTANCE_EVENT { get; }
    internal static string COULD_NOT_FIND_STATIC_EVENT { get; }
    internal static string EVENT_ADD_METHOD_SHOULD_TAKE_ONE_PARAMETER { get; }
    internal static string EVENT_ARGS_NOT_ASSIGNABLE { get; }
    internal static string EVENT_MISSING_ADD_METHOD { get; }
    internal static string EVENT_MISSING_REMOVE_METHOD { get; }
    internal static string EVENT_MUST_RETURN_VOID { get; }
    internal static string EVENT_PATTERN_REQUIRES_TWO_PARAMETERS { get; }
    internal static string EVENT_REMOVE_METHOD_SHOULD_TAKE_ONE_PARAMETER { get; }
    internal static string EVENT_SENDER_NOT_ASSIGNABLE { get; }
    internal static string EVENT_WINRT_REMOVE_METHOD_SHOULD_TAKE_ERT { get; }
    internal static string MORE_THAN_ONE_ELEMENT { get; }
    internal static string MORE_THAN_ONE_MATCHING_ELEMENT { get; }
    internal static string NO_ELEMENTS { get; }
    internal static string NO_MATCHING_ELEMENTS { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CANT_ADVANCE_WHILE_RUNNING();
    internal static string get_COULD_NOT_FIND_INSTANCE_EVENT();
    internal static string get_COULD_NOT_FIND_STATIC_EVENT();
    internal static string get_EVENT_ADD_METHOD_SHOULD_TAKE_ONE_PARAMETER();
    internal static string get_EVENT_ARGS_NOT_ASSIGNABLE();
    internal static string get_EVENT_MISSING_ADD_METHOD();
    internal static string get_EVENT_MISSING_REMOVE_METHOD();
    internal static string get_EVENT_MUST_RETURN_VOID();
    internal static string get_EVENT_PATTERN_REQUIRES_TWO_PARAMETERS();
    internal static string get_EVENT_REMOVE_METHOD_SHOULD_TAKE_ONE_PARAMETER();
    internal static string get_EVENT_SENDER_NOT_ASSIGNABLE();
    internal static string get_EVENT_WINRT_REMOVE_METHOD_SHOULD_TAKE_ERT();
    internal static string get_MORE_THAN_ONE_ELEMENT();
    internal static string get_MORE_THAN_ONE_MATCHING_ELEMENT();
    internal static string get_NO_ELEMENTS();
    internal static string get_NO_MATCHING_ELEMENTS();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Reactive.Strings_PlatformServices : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string WINRT_NO_SUB1MS_TIMERS { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_WINRT_NO_SUB1MS_TIMERS();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Reactive.Strings_Providers : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string EXPECTED_TOQUERYABLE_METHODCALL { get; }
    internal static string INVALID_TREE_TYPE { get; }
    internal static string NO_MATCHING_METHOD_FOUND { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_EXPECTED_TOQUERYABLE_METHODCALL();
    internal static string get_INVALID_TREE_TYPE();
    internal static string get_NO_MATCHING_METHOD_FOUND();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Stubs : object {
    public static Action Nop;
    public static Action`1<Exception> Throw;
    private static Stubs();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reactive.Stubs`1 : object {
    public static Action`1<T> Ignore;
    public static Func`2<T, T> I;
    private static Stubs`1();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class System.Reactive.Subjects.AsyncSubject`1 : SubjectBase`1<T> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private AsyncSubjectDisposable[] _observers;
    [NullableAttribute("2")]
private T _value;
    private bool _hasValue;
    [NullableAttribute("2")]
private Exception _exception;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static AsyncSubjectDisposable[] Terminated;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static AsyncSubjectDisposable[] Disposed;
    public bool HasObservers { get; }
    public bool IsDisposed { get; }
    public bool IsCompleted { get; }
    private static AsyncSubject`1();
    public virtual bool get_HasObservers();
    public virtual bool get_IsDisposed();
    public virtual void OnCompleted();
    public virtual void OnError(Exception error);
    public virtual void OnNext(T value);
    public virtual IDisposable Subscribe(IObserver`1<T> observer);
    private void Unsubscribe(AsyncSubjectDisposable<T> observer);
    private static void ThrowDisposed();
    public virtual void Dispose();
    public AsyncSubject`1<T> GetAwaiter();
    public sealed virtual void OnCompleted(Action continuation);
    public bool get_IsCompleted();
    public T GetResult();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class System.Reactive.Subjects.BehaviorSubject`1 : SubjectBase`1<T> {
    private object _gate;
    private ImmutableList`1<IObserver`1<T>> _observers;
    private bool _isStopped;
    private T _value;
    [NullableAttribute("2")]
private Exception _exception;
    private bool _isDisposed;
    public bool HasObservers { get; }
    public bool IsDisposed { get; }
    public T Value { get; }
    public BehaviorSubject`1(T value);
    public virtual bool get_HasObservers();
    public virtual bool get_IsDisposed();
    public T get_Value();
    public bool TryGetValue(T& value);
    public virtual void OnCompleted();
    public virtual void OnError(Exception error);
    public virtual void OnNext(T value);
    public virtual IDisposable Subscribe(IObserver`1<T> observer);
    private void Unsubscribe(IObserver`1<T> observer);
    public virtual void Dispose();
    private void CheckDisposed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Subjects.ConnectableObservable`2 : object {
    private ISubject`2<TSource, TResult> _subject;
    private IObservable`1<TSource> _source;
    private object _gate;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Connection<TSource, TResult> _connection;
    public ConnectableObservable`2(IObservable`1<TSource> source, ISubject`2<TSource, TResult> subject);
    public sealed virtual IDisposable Connect();
    public sealed virtual IDisposable Subscribe(IObserver`1<TResult> observer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reactive.Subjects.FastImmediateObserver`1 : object {
    private object _gate;
    private IObserver`1 modreq(System.Runtime.CompilerServices.IsVolatile) _observer;
    private Queue`1<T> _queue;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Queue`1<T> _queue2;
    [NullableAttribute("2")]
private Exception _error;
    private bool _done;
    private bool _busy;
    private bool _hasFaulted;
    public FastImmediateObserver`1(IObserver`1<T> observer);
    public sealed virtual void Dispose();
    public sealed virtual void EnsureActive();
    public sealed virtual void EnsureActive(int count);
    public sealed virtual void OnCompleted();
    public sealed virtual void OnError(Exception error);
    public sealed virtual void OnNext(T value);
    private IObserver`1<T> Done();
}
[NullableContextAttribute("1")]
public interface System.Reactive.Subjects.IConnectableObservable`1 {
    public abstract virtual IDisposable Connect();
}
[NullableContextAttribute("2")]
public interface System.Reactive.Subjects.ISubject`1 {
}
[NullableContextAttribute("2")]
public interface System.Reactive.Subjects.ISubject`2 {
}
[CompilerGeneratedAttribute]
internal class System.Reactive.Subjects.NamespaceDoc : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class System.Reactive.Subjects.ReplaySubject`1 : SubjectBase`1<T> {
    private SubjectBase`1<T> _implementation;
    public bool HasObservers { get; }
    public bool IsDisposed { get; }
    public ReplaySubject`1(IScheduler scheduler);
    public ReplaySubject`1(int bufferSize);
    public ReplaySubject`1(int bufferSize, IScheduler scheduler);
    public ReplaySubject`1(TimeSpan window);
    public ReplaySubject`1(TimeSpan window, IScheduler scheduler);
    public ReplaySubject`1(int bufferSize, TimeSpan window);
    public ReplaySubject`1(int bufferSize, TimeSpan window, IScheduler scheduler);
    public virtual bool get_HasObservers();
    public virtual bool get_IsDisposed();
    public virtual void OnNext(T value);
    public virtual void OnError(Exception error);
    public virtual void OnCompleted();
    public virtual IDisposable Subscribe(IObserver`1<T> observer);
    public virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Reactive.Subjects.Subject : object {
    public static ISubject`2<TSource, TResult> Create(IObserver`1<TSource> observer, IObservable`1<TResult> observable);
    public static ISubject`1<T> Create(IObserver`1<T> observer, IObservable`1<T> observable);
    public static ISubject`2<TSource, TResult> Synchronize(ISubject`2<TSource, TResult> subject);
    public static ISubject`1<TSource> Synchronize(ISubject`1<TSource> subject);
    public static ISubject`2<TSource, TResult> Synchronize(ISubject`2<TSource, TResult> subject, IScheduler scheduler);
    public static ISubject`1<TSource> Synchronize(ISubject`1<TSource> subject, IScheduler scheduler);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class System.Reactive.Subjects.Subject`1 : SubjectBase`1<T> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private SubjectDisposable[] _observers;
    [NullableAttribute("2")]
private Exception _exception;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static SubjectDisposable[] Terminated;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static SubjectDisposable[] Disposed;
    public bool HasObservers { get; }
    public bool IsDisposed { get; }
    private static Subject`1();
    public virtual bool get_HasObservers();
    public virtual bool get_IsDisposed();
    private static void ThrowDisposed();
    public virtual void OnCompleted();
    public virtual void OnError(Exception error);
    public virtual void OnNext(T value);
    public virtual IDisposable Subscribe(IObserver`1<T> observer);
    private void Unsubscribe(SubjectDisposable<T> observer);
    public virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Reactive.Subjects.SubjectBase`1 : object {
    public bool HasObservers { get; }
    public bool IsDisposed { get; }
    public abstract virtual bool get_HasObservers();
    public abstract virtual bool get_IsDisposed();
    public abstract virtual void Dispose();
    public abstract virtual void OnCompleted();
    public abstract virtual void OnError(Exception error);
    public abstract virtual void OnNext(T value);
    public abstract virtual IDisposable Subscribe(IObserver`1<T> observer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Reactive.SynchronizedObserver`1 : ObserverBase`1<T> {
    private object _gate;
    private IObserver`1<T> _observer;
    public SynchronizedObserver`1(IObserver`1<T> observer, object gate);
    protected virtual void OnNextCore(T value);
    protected virtual void OnErrorCore(Exception exception);
    protected virtual void OnCompletedCore();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class System.Reactive.TailRecursiveSink`1 : IdentitySink`1<TSource> {
    private Stack`1<IEnumerator`1<IObservable`1<TSource>>> _stack;
    private bool _isDisposed;
    private int _trampoline;
    [NullableAttribute("2")]
private IDisposable _currentSubscription;
    protected TailRecursiveSink`1(IObserver`1<TSource> observer);
    public void Run(IEnumerable`1<IObservable`1<TSource>> sources);
    protected virtual void Dispose(bool disposing);
    private void Drain();
    private void DisposeAll();
    protected void Recurse();
    protected abstract virtual IEnumerable`1<IObservable`1<TSource>> Extract(IObservable`1<TSource> source);
    private bool TryGetEnumerator(IEnumerable`1<IObservable`1<TSource>> sources, IEnumerator`1& result);
    protected virtual void Done();
    protected virtual bool Fail(Exception error);
    [CompilerGeneratedAttribute]
internal static IObservable`1<T> <Drain>g__Unpack|7_0(IObservable`1<T> source);
}
[CompilerGeneratedAttribute]
internal class System.Reactive.Threading.Tasks.NamespaceDoc : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Reactive.Threading.Tasks.TaskObservableExtensions : object {
    [ExtensionAttribute]
public static IObservable`1<Unit> ToObservable(Task task);
    [ExtensionAttribute]
public static IObservable`1<Unit> ToObservable(Task task, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<Unit> ToObservable(Task task, TaskObservationOptions options);
    [ExtensionAttribute]
internal static IObservable`1<Unit> ToObservable(Task task, Value options);
    private static IObservable`1<Unit> ToObservableImpl(Task task, IScheduler scheduler, bool ignoreExceptionsAfterUnsubscribe);
    [ExtensionAttribute]
private static void EmitTaskResult(Task task, IObserver`1<Unit> subject);
    [ExtensionAttribute]
internal static IDisposable Subscribe(Task task, IObserver`1<Unit> observer);
    [ExtensionAttribute]
public static IObservable`1<TResult> ToObservable(Task`1<TResult> task);
    [ExtensionAttribute]
public static IObservable`1<TResult> ToObservable(Task`1<TResult> task, IScheduler scheduler);
    [ExtensionAttribute]
public static IObservable`1<TResult> ToObservable(Task`1<TResult> task, TaskObservationOptions options);
    [ExtensionAttribute]
internal static IObservable`1<TResult> ToObservable(Task`1<TResult> task, Value options);
    private static IObservable`1<TResult> ToObservableImpl(Task`1<TResult> task, IScheduler scheduler, bool ignoreExceptionsAfterUnsubscribe);
    [ExtensionAttribute]
private static void EmitTaskResult(Task`1<TResult> task, IObserver`1<TResult> subject);
    [NullableContextAttribute("2")]
private static TaskContinuationOptions GetTaskContinuationOptions(IScheduler scheduler);
    [ExtensionAttribute]
internal static IDisposable Subscribe(Task`1<TResult> task, IObserver`1<TResult> observer);
    [ExtensionAttribute]
public static Task`1<TResult> ToTask(IObservable`1<TResult> observable);
    [ExtensionAttribute]
public static Task`1<TResult> ToTask(IObservable`1<TResult> observable, IScheduler scheduler);
    [ExtensionAttribute]
public static Task`1<TResult> ToTask(IObservable`1<TResult> observable, object state);
    [ExtensionAttribute]
public static Task`1<TResult> ToTask(IObservable`1<TResult> observable, object state, IScheduler scheduler);
    [ExtensionAttribute]
public static Task`1<TResult> ToTask(IObservable`1<TResult> observable, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> ToTask(IObservable`1<TResult> observable, CancellationToken cancellationToken, IScheduler scheduler);
    [ExtensionAttribute]
internal static Task`1<TResult> ContinueOnScheduler(Task`1<TResult> task, IScheduler scheduler);
    [ExtensionAttribute]
public static Task`1<TResult> ToTask(IObservable`1<TResult> observable, CancellationToken cancellationToken, object state);
    [ExtensionAttribute]
public static Task`1<TResult> ToTask(IObservable`1<TResult> observable, CancellationToken cancellationToken, object state, IScheduler scheduler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reactive.TimeInterval`1 : ValueType {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Interval>k__BackingField;
    public T Value { get; }
    public TimeSpan Interval { get; }
    public TimeInterval`1(T value, TimeSpan interval);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public TimeSpan get_Interval();
    public void Deconstruct(T& value, TimeSpan& interval);
    public sealed virtual bool Equals(TimeInterval`1<T> other);
    public static bool op_Equality(TimeInterval`1<T> first, TimeInterval`1<T> second);
    public static bool op_Inequality(TimeInterval`1<T> first, TimeInterval`1<T> second);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal static class System.Reactive.TimerStubs : object {
    [NullableAttribute("1")]
public static Timer Never;
    private static TimerStubs();
}
public static class System.Reactive.Timestamped : object {
    [NullableContextAttribute("1")]
public static Timestamped`1<T> Create(T value, DateTimeOffset timestamp);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Reactive.Timestamped`1 : ValueType {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    public T Value { get; }
    public DateTimeOffset Timestamp { get; }
    public Timestamped`1(T value, DateTimeOffset timestamp);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    public void Deconstruct(T& value, DateTimeOffset& timestamp);
    public sealed virtual bool Equals(Timestamped`1<T> other);
    public static bool op_Equality(Timestamped`1<T> first, Timestamped`1<T> second);
    public static bool op_Inequality(Timestamped`1<T> first, Timestamped`1<T> second);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
public class System.Reactive.Unit : ValueType {
    public static Unit Default { get; }
    public sealed virtual bool Equals(Unit other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public static bool op_Equality(Unit first, Unit second);
    public static bool op_Inequality(Unit first, Unit second);
    public static Unit get_Default();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Runtime.CompilerServices.TaskObservableMethodBuilder`1 : ValueType {
    private IAsyncStateMachine _stateMachine;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TaskObservable<T> _inner;
    public ITaskObservable`1<T> Task { get; }
    public static TaskObservableMethodBuilder`1<T> Create();
    public void Start(TStateMachine& stateMachine);
    public void SetStateMachine(IAsyncStateMachine stateMachine);
    public void SetResult(T result);
    public void SetException(Exception exception);
    public ITaskObservable`1<T> get_Task();
    public void AwaitOnCompleted(TAwaiter& awaiter, TStateMachine& stateMachine);
    [SecuritySafeCriticalAttribute]
public void AwaitUnsafeOnCompleted(TAwaiter& awaiter, TStateMachine& stateMachine);
    private static void Rethrow(Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Threading.Tasks.TaskExtensions : object {
    [ExtensionAttribute]
public static Task ContinueWithState(Task task, Action`2<Task, TState> continuationAction, TState state, TaskContinuationOptions continuationOptions, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ContinueWithState(Task`1<TResult> task, Action`2<Task`1<TResult>, TState> continuationAction, TState state, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ContinueWithState(Task`1<TResult> task, Action`2<Task`1<TResult>, TState> continuationAction, TState state, TaskContinuationOptions continuationOptions, CancellationToken cancellationToken);
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.128.36433")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
