[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DataMisalignedException : SystemException {
    public DataMisalignedException(string message);
    public DataMisalignedException(string message, Exception innerException);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DllNotFoundException : TypeLoadException {
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected DllNotFoundException(SerializationInfo info, StreamingContext context);
    public DllNotFoundException(string message);
    public DllNotFoundException(string message, Exception inner);
}
public class System.IO.UnmanagedMemoryAccessor : object {
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public long Capacity { get; }
    protected bool IsOpen { get; }
    [NullableContextAttribute("1")]
public UnmanagedMemoryAccessor(SafeBuffer buffer, long offset, long capacity);
    [NullableContextAttribute("1")]
public UnmanagedMemoryAccessor(SafeBuffer buffer, long offset, long capacity, FileAccess access);
    public bool get_CanRead();
    public bool get_CanWrite();
    public long get_Capacity();
    protected bool get_IsOpen();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("1")]
protected void Initialize(SafeBuffer buffer, long offset, long capacity, FileAccess access);
    public int ReadArray(long position, T[] array, int offset, int count);
    public bool ReadBoolean(long position);
    public byte ReadByte(long position);
    public char ReadChar(long position);
    public decimal ReadDecimal(long position);
    public double ReadDouble(long position);
    public short ReadInt16(long position);
    public int ReadInt32(long position);
    public long ReadInt64(long position);
    [CLSCompliantAttribute("False")]
public sbyte ReadSByte(long position);
    public float ReadSingle(long position);
    [CLSCompliantAttribute("False")]
public ushort ReadUInt16(long position);
    [CLSCompliantAttribute("False")]
public UInt32 ReadUInt32(long position);
    [CLSCompliantAttribute("False")]
public ulong ReadUInt64(long position);
    public void Read(long position, T& structure);
    public void Write(long position, bool value);
    public void Write(long position, byte value);
    public void Write(long position, char value);
    public void Write(long position, decimal value);
    public void Write(long position, double value);
    public void Write(long position, short value);
    public void Write(long position, int value);
    public void Write(long position, long value);
    [CLSCompliantAttribute("False")]
public void Write(long position, sbyte value);
    public void Write(long position, float value);
    [CLSCompliantAttribute("False")]
public void Write(long position, ushort value);
    [CLSCompliantAttribute("False")]
public void Write(long position, UInt32 value);
    [CLSCompliantAttribute("False")]
public void Write(long position, ulong value);
    public void WriteArray(long position, T[] array, int offset, int count);
    public void Write(long position, T& structure);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SupportedOSPlatformAttribute("windows")]
[AttributeUsageAttribute("2304")]
public class System.Runtime.CompilerServices.IDispatchConstantAttribute : CustomConstantAttribute {
    public object Value { get; }
    public virtual object get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2304")]
public class System.Runtime.CompilerServices.IUnknownConstantAttribute : CustomConstantAttribute {
    public object Value { get; }
    public virtual object get_Value();
}
[ObsoleteAttribute("Code Access Security is not supported or honored by the runtime.")]
[AttributeUsageAttribute("64")]
public class System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Runtime.InteropServices.ArrayWithOffset : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public ArrayWithOffset(object array, int offset);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ArrayWithOffset obj);
    public object GetArray();
    public virtual int GetHashCode();
    public int GetOffset();
    public static bool op_Equality(ArrayWithOffset a, ArrayWithOffset b);
    public static bool op_Inequality(ArrayWithOffset a, ArrayWithOffset b);
}
[AttributeUsageAttribute("1029")]
public class System.Runtime.InteropServices.AutomationProxyAttribute : Attribute {
    public bool Value { get; }
    public AutomationProxyAttribute(bool val);
    public bool get_Value();
}
[AttributeUsageAttribute("1037")]
public class System.Runtime.InteropServices.BestFitMappingAttribute : Attribute {
    public bool ThrowOnUnmappableChar;
    public bool BestFitMapping { get; }
    public BestFitMappingAttribute(bool BestFitMapping);
    public bool get_BestFitMapping();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.BStrWrapper : object {
    public string WrappedObject { get; }
    public BStrWrapper(object value);
    public BStrWrapper(string value);
    public string get_WrappedObject();
}
public enum System.Runtime.InteropServices.CallingConvention : Enum {
    public int value__;
    public static CallingConvention Winapi;
    public static CallingConvention Cdecl;
    public static CallingConvention StdCall;
    public static CallingConvention ThisCall;
    public static CallingConvention FastCall;
}
[AttributeUsageAttribute("5")]
public class System.Runtime.InteropServices.ClassInterfaceAttribute : Attribute {
    public ClassInterfaceType Value { get; }
    public ClassInterfaceAttribute(short classInterfaceType);
    public ClassInterfaceAttribute(ClassInterfaceType classInterfaceType);
    public ClassInterfaceType get_Value();
}
public enum System.Runtime.InteropServices.ClassInterfaceType : Enum {
    public int value__;
    public static ClassInterfaceType None;
    public static ClassInterfaceType AutoDispatch;
    public static ClassInterfaceType AutoDual;
}
[IsReadOnlyAttribute]
[CLSCompliantAttribute("False")]
public class System.Runtime.InteropServices.CLong : ValueType {
    private int _dummyPrimitive;
    public IntPtr Value { get; }
    public CLong(int value);
    public CLong(IntPtr value);
    public IntPtr get_Value();
    [NullableContextAttribute("2")]
public virtual bool Equals(object o);
    public sealed virtual bool Equals(CLong other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1024")]
public class System.Runtime.InteropServices.CoClassAttribute : Attribute {
    public Type CoClass { get; }
    public CoClassAttribute(Type coClass);
    public Type get_CoClass();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Runtime.InteropServices.CollectionsMarshal : object {
    [NullableContextAttribute("2")]
public static Span`1<T> AsSpan(List`1<T> list);
    public static TValue& GetValueRefOrNullRef(Dictionary`2<TKey, TValue> dictionary, TKey key);
    public static TValue& GetValueRefOrAddDefault(Dictionary`2<TKey, TValue> dictionary, TKey key, Boolean& exists);
    public static void SetCount(List`1<T> list, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10624")]
public class System.Runtime.InteropServices.ComAliasNameAttribute : Attribute {
    public string Value { get; }
    public ComAliasNameAttribute(string alias);
    public string get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComAwareEventInfo : EventInfo {
    public EventAttributes Attributes { get; }
    [NullableAttribute("2")]
public Type DeclaringType { get; }
    public int MetadataToken { get; }
    public Module Module { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public Type ReflectedType { get; }
    public ComAwareEventInfo(Type type, string eventName);
    public virtual EventAttributes get_Attributes();
    [NullableContextAttribute("2")]
public virtual Type get_DeclaringType();
    public virtual int get_MetadataToken();
    public virtual Module get_Module();
    public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual Type get_ReflectedType();
    [SupportedOSPlatformAttribute("windows")]
public virtual void AddEventHandler(object target, Delegate handler);
    [NullableContextAttribute("2")]
public virtual MethodInfo GetAddMethod(bool nonPublic);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual IList`1<CustomAttributeData> GetCustomAttributesData();
    public virtual MethodInfo[] GetOtherMethods(bool nonPublic);
    [NullableContextAttribute("2")]
public virtual MethodInfo GetRaiseMethod(bool nonPublic);
    [NullableContextAttribute("2")]
public virtual MethodInfo GetRemoveMethod(bool nonPublic);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    [SupportedOSPlatformAttribute("windows")]
public virtual void RemoveEventHandler(object target, Delegate handler);
}
[AttributeUsageAttribute("1")]
public class System.Runtime.InteropServices.ComCompatibleVersionAttribute : Attribute {
    public int BuildNumber { get; }
    public int MajorVersion { get; }
    public int MinorVersion { get; }
    public int RevisionNumber { get; }
    public ComCompatibleVersionAttribute(int major, int minor, int build, int revision);
    public int get_BuildNumber();
    public int get_MajorVersion();
    public int get_MinorVersion();
    public int get_RevisionNumber();
}
[AttributeUsageAttribute("32767")]
public class System.Runtime.InteropServices.ComConversionLossAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class System.Runtime.InteropServices.ComDefaultInterfaceAttribute : Attribute {
    public Type Value { get; }
    public ComDefaultInterfaceAttribute(Type defaultInterface);
    public Type get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1024")]
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComEventInterfaceAttribute : Attribute {
    [DynamicallyAccessedMembersAttribute("2607")]
public Type EventProvider { get; }
    [DynamicallyAccessedMembersAttribute("8")]
public Type SourceInterface { get; }
    public ComEventInterfaceAttribute(Type SourceInterface, Type EventProvider);
    public Type get_EventProvider();
    public Type get_SourceInterface();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SupportedOSPlatformAttribute("windows")]
[EditorBrowsableAttribute("1")]
public static class System.Runtime.InteropServices.ComEventsHelper : object {
    public static void Combine(object rcw, Guid iid, int dispid, Delegate d);
    public static Delegate Remove(object rcw, Guid iid, int dispid, Delegate d);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Runtime.InteropServices.COMException : ExternalException {
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected COMException(SerializationInfo info, StreamingContext context);
    public COMException(string message);
    public COMException(string message, Exception inner);
    public COMException(string message, int errorCode);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[AttributeUsageAttribute("1028")]
public class System.Runtime.InteropServices.ComImportAttribute : Attribute {
}
public enum System.Runtime.InteropServices.ComInterfaceType : Enum {
    public int value__;
    public static ComInterfaceType InterfaceIsDual;
    public static ComInterfaceType InterfaceIsIUnknown;
    public static ComInterfaceType InterfaceIsIDispatch;
    public static ComInterfaceType InterfaceIsIInspectable;
}
public enum System.Runtime.InteropServices.ComMemberType : Enum {
    public int value__;
    public static ComMemberType Method;
    public static ComMemberType PropGet;
    public static ComMemberType PropSet;
}
[AttributeUsageAttribute("64")]
public class System.Runtime.InteropServices.ComRegisterFunctionAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComSourceInterfacesAttribute : Attribute {
    public string Value { get; }
    public ComSourceInterfacesAttribute(string sourceInterfaces);
    public ComSourceInterfacesAttribute(Type sourceInterface);
    public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2);
    public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2, Type sourceInterface3);
    public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2, Type sourceInterface3, Type sourceInterface4);
    public string get_Value();
}
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
public enum System.Runtime.InteropServices.ComTypes.ADVF : Enum {
    public int value__;
    public static ADVF ADVF_NODATA;
    public static ADVF ADVF_PRIMEFIRST;
    public static ADVF ADVF_ONLYONCE;
    public static ADVF ADVFCACHE_NOHANDLER;
    public static ADVF ADVFCACHE_FORCEBUILTIN;
    public static ADVF ADVFCACHE_ONSAVE;
    public static ADVF ADVF_DATAONSTOP;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.BIND_OPTS : ValueType {
    public int cbStruct;
    public int dwTickCountDeadline;
    public int grfFlags;
    public int grfMode;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.BINDPTR : ValueType {
    public IntPtr lpfuncdesc;
    public IntPtr lptcomp;
    public IntPtr lpvardesc;
}
[EditorBrowsableAttribute("1")]
public enum System.Runtime.InteropServices.ComTypes.CALLCONV : Enum {
    public int value__;
    public static CALLCONV CC_CDECL;
    public static CALLCONV CC_MSCPASCAL;
    public static CALLCONV CC_PASCAL;
    public static CALLCONV CC_MACPASCAL;
    public static CALLCONV CC_STDCALL;
    public static CALLCONV CC_RESERVED;
    public static CALLCONV CC_SYSCALL;
    public static CALLCONV CC_MPWCDECL;
    public static CALLCONV CC_MPWPASCAL;
    public static CALLCONV CC_MAX;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.CONNECTDATA : ValueType {
    public int dwCookie;
    [NullableAttribute("1")]
public object pUnk;
}
[EditorBrowsableAttribute("1")]
public enum System.Runtime.InteropServices.ComTypes.DATADIR : Enum {
    public int value__;
    public static DATADIR DATADIR_GET;
    public static DATADIR DATADIR_SET;
}
[EditorBrowsableAttribute("1")]
public enum System.Runtime.InteropServices.ComTypes.DESCKIND : Enum {
    public int value__;
    public static DESCKIND DESCKIND_NONE;
    public static DESCKIND DESCKIND_FUNCDESC;
    public static DESCKIND DESCKIND_VARDESC;
    public static DESCKIND DESCKIND_TYPECOMP;
    public static DESCKIND DESCKIND_IMPLICITAPPOBJ;
    public static DESCKIND DESCKIND_MAX;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.DISPPARAMS : ValueType {
    public int cArgs;
    public int cNamedArgs;
    public IntPtr rgdispidNamedArgs;
    public IntPtr rgvarg;
}
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
public enum System.Runtime.InteropServices.ComTypes.DVASPECT : Enum {
    public int value__;
    public static DVASPECT DVASPECT_CONTENT;
    public static DVASPECT DVASPECT_THUMBNAIL;
    public static DVASPECT DVASPECT_ICON;
    public static DVASPECT DVASPECT_DOCPRINT;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.ELEMDESC : ValueType {
    public DESCUNION desc;
    public TYPEDESC tdesc;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.EXCEPINFO : ValueType {
    public string bstrDescription;
    public string bstrHelpFile;
    public string bstrSource;
    public int dwHelpContext;
    public IntPtr pfnDeferredFillIn;
    public IntPtr pvReserved;
    public int scode;
    public short wCode;
    public short wReserved;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.FILETIME : ValueType {
    public int dwHighDateTime;
    public int dwLowDateTime;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.FORMATETC : ValueType {
    public short cfFormat;
    public DVASPECT dwAspect;
    public int lindex;
    public IntPtr ptd;
    public TYMED tymed;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.FUNCDESC : ValueType {
    public CALLCONV callconv;
    public short cParams;
    public short cParamsOpt;
    public short cScodes;
    public ELEMDESC elemdescFunc;
    public FUNCKIND funckind;
    public INVOKEKIND invkind;
    public IntPtr lprgelemdescParam;
    public IntPtr lprgscode;
    public int memid;
    public short oVft;
    public short wFuncFlags;
}
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
public enum System.Runtime.InteropServices.ComTypes.FUNCFLAGS : Enum {
    public short value__;
    public static FUNCFLAGS FUNCFLAG_FRESTRICTED;
    public static FUNCFLAGS FUNCFLAG_FSOURCE;
    public static FUNCFLAGS FUNCFLAG_FBINDABLE;
    public static FUNCFLAGS FUNCFLAG_FREQUESTEDIT;
    public static FUNCFLAGS FUNCFLAG_FDISPLAYBIND;
    public static FUNCFLAGS FUNCFLAG_FDEFAULTBIND;
    public static FUNCFLAGS FUNCFLAG_FHIDDEN;
    public static FUNCFLAGS FUNCFLAG_FUSESGETLASTERROR;
    public static FUNCFLAGS FUNCFLAG_FDEFAULTCOLLELEM;
    public static FUNCFLAGS FUNCFLAG_FUIDEFAULT;
    public static FUNCFLAGS FUNCFLAG_FNONBROWSABLE;
    public static FUNCFLAGS FUNCFLAG_FREPLACEABLE;
    public static FUNCFLAGS FUNCFLAG_FIMMEDIATEBIND;
}
[EditorBrowsableAttribute("1")]
public enum System.Runtime.InteropServices.ComTypes.FUNCKIND : Enum {
    public int value__;
    public static FUNCKIND FUNC_VIRTUAL;
    public static FUNCKIND FUNC_PUREVIRTUAL;
    public static FUNCKIND FUNC_NONVIRTUAL;
    public static FUNCKIND FUNC_STATIC;
    public static FUNCKIND FUNC_DISPATCH;
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IAdviseSink {
    public abstract virtual void OnClose();
    public abstract virtual void OnDataChange(FORMATETC& format, STGMEDIUM& stgmedium);
    public abstract virtual void OnRename(IMoniker moniker);
    public abstract virtual void OnSave();
    public abstract virtual void OnViewChange(int aspect, int index);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IBindCtx {
    [NullableContextAttribute("2")]
public abstract virtual void EnumObjectParam(IEnumString& ppenum);
    public abstract virtual void GetBindOptions(BIND_OPTS& pbindopts);
    public abstract virtual void GetObjectParam(string pszKey, Object& ppunk);
    [NullableContextAttribute("2")]
public abstract virtual void GetRunningObjectTable(IRunningObjectTable& pprot);
    public abstract virtual void RegisterObjectBound(object punk);
    public abstract virtual void RegisterObjectParam(string pszKey, object punk);
    public abstract virtual void ReleaseBoundObjects();
    public abstract virtual void RevokeObjectBound(object punk);
    public abstract virtual int RevokeObjectParam(string pszKey);
    public abstract virtual void SetBindOptions(BIND_OPTS& pbindopts);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IConnectionPoint {
    public abstract virtual void Advise(object pUnkSink, Int32& pdwCookie);
    public abstract virtual void EnumConnections(IEnumConnections& ppEnum);
    public abstract virtual void GetConnectionInterface(Guid& pIID);
    public abstract virtual void GetConnectionPointContainer(IConnectionPointContainer& ppCPC);
    public abstract virtual void Unadvise(int dwCookie);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IConnectionPointContainer {
    public abstract virtual void EnumConnectionPoints(IEnumConnectionPoints& ppEnum);
    [NullableContextAttribute("2")]
public abstract virtual void FindConnectionPoint(Guid& riid, IConnectionPoint& ppCP);
}
[NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IDataObject {
    public abstract virtual int DAdvise(FORMATETC& pFormatetc, ADVF advf, IAdviseSink adviseSink, Int32& connection);
    public abstract virtual void DUnadvise(int connection);
    [NullableContextAttribute("2")]
public abstract virtual int EnumDAdvise(IEnumSTATDATA& enumAdvise);
    public abstract virtual IEnumFORMATETC EnumFormatEtc(DATADIR direction);
    public abstract virtual int GetCanonicalFormatEtc(FORMATETC& formatIn, FORMATETC& formatOut);
    public abstract virtual void GetData(FORMATETC& format, STGMEDIUM& medium);
    public abstract virtual void GetDataHere(FORMATETC& format, STGMEDIUM& medium);
    public abstract virtual int QueryGetData(FORMATETC& format);
    public abstract virtual void SetData(FORMATETC& formatIn, STGMEDIUM& medium, bool release);
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.IDLDESC : ValueType {
    public IntPtr dwReserved;
    public IDLFLAG wIDLFlags;
}
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
public enum System.Runtime.InteropServices.ComTypes.IDLFLAG : Enum {
    public short value__;
    public static IDLFLAG IDLFLAG_NONE;
    public static IDLFLAG IDLFLAG_FIN;
    public static IDLFLAG IDLFLAG_FOUT;
    public static IDLFLAG IDLFLAG_FLCID;
    public static IDLFLAG IDLFLAG_FRETVAL;
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints {
    public abstract virtual void Clone(IEnumConnectionPoints& ppenum);
    public abstract virtual int Next(int celt, IConnectionPoint[] rgelt, IntPtr pceltFetched);
    public abstract virtual void Reset();
    public abstract virtual int Skip(int celt);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IEnumConnections {
    public abstract virtual void Clone(IEnumConnections& ppenum);
    public abstract virtual int Next(int celt, CONNECTDATA[] rgelt, IntPtr pceltFetched);
    public abstract virtual void Reset();
    public abstract virtual int Skip(int celt);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IEnumFORMATETC {
    public abstract virtual void Clone(IEnumFORMATETC& newEnum);
    public abstract virtual int Next(int celt, FORMATETC[] rgelt, Int32[] pceltFetched);
    public abstract virtual int Reset();
    public abstract virtual int Skip(int celt);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IEnumMoniker {
    public abstract virtual void Clone(IEnumMoniker& ppenum);
    public abstract virtual int Next(int celt, IMoniker[] rgelt, IntPtr pceltFetched);
    public abstract virtual void Reset();
    public abstract virtual int Skip(int celt);
}
[NullableContextAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IEnumSTATDATA {
    public abstract virtual void Clone(IEnumSTATDATA& newEnum);
    public abstract virtual int Next(int celt, STATDATA[] rgelt, Int32[] pceltFetched);
    public abstract virtual int Reset();
    public abstract virtual int Skip(int celt);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IEnumString {
    public abstract virtual void Clone(IEnumString& ppenum);
    public abstract virtual int Next(int celt, String[] rgelt, IntPtr pceltFetched);
    public abstract virtual void Reset();
    public abstract virtual int Skip(int celt);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IEnumVARIANT {
    public abstract virtual IEnumVARIANT Clone();
    public abstract virtual int Next(int celt, Object[] rgVar, IntPtr pceltFetched);
    public abstract virtual int Reset();
    public abstract virtual int Skip(int celt);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IMoniker {
    public abstract virtual void BindToObject(IBindCtx pbc, IMoniker pmkToLeft, Guid& riidResult, Object& ppvResult);
    public abstract virtual void BindToStorage(IBindCtx pbc, IMoniker pmkToLeft, Guid& riid, Object& ppvObj);
    public abstract virtual void CommonPrefixWith(IMoniker pmkOther, IMoniker& ppmkPrefix);
    public abstract virtual void ComposeWith(IMoniker pmkRight, bool fOnlyIfNotGeneric, IMoniker& ppmkComposite);
    [NullableContextAttribute("2")]
public abstract virtual void Enum(bool fForward, IEnumMoniker& ppenumMoniker);
    public abstract virtual void GetClassID(Guid& pClassID);
    public abstract virtual void GetDisplayName(IBindCtx pbc, IMoniker pmkToLeft, String& ppszDisplayName);
    public abstract virtual void GetSizeMax(Int64& pcbSize);
    public abstract virtual void GetTimeOfLastChange(IBindCtx pbc, IMoniker pmkToLeft, FILETIME& pFileTime);
    public abstract virtual void Hash(Int32& pdwHash);
    public abstract virtual void Inverse(IMoniker& ppmk);
    public abstract virtual int IsDirty();
    public abstract virtual int IsEqual(IMoniker pmkOtherMoniker);
    [NullableContextAttribute("2")]
public abstract virtual int IsRunning(IBindCtx pbc, IMoniker pmkToLeft, IMoniker pmkNewlyRunning);
    public abstract virtual int IsSystemMoniker(Int32& pdwMksys);
    public abstract virtual void Load(IStream pStm);
    public abstract virtual void ParseDisplayName(IBindCtx pbc, IMoniker pmkToLeft, string pszDisplayName, Int32& pchEaten, IMoniker& ppmkOut);
    [NullableContextAttribute("2")]
public abstract virtual void Reduce(IBindCtx pbc, int dwReduceHowFar, IMoniker& ppmkToLeft, IMoniker& ppmkReduced);
    public abstract virtual void RelativePathTo(IMoniker pmkOther, IMoniker& ppmkRelPath);
    public abstract virtual void Save(IStream pStm, bool fClearDirty);
}
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
public enum System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS : Enum {
    public int value__;
    public static IMPLTYPEFLAGS IMPLTYPEFLAG_FDEFAULT;
    public static IMPLTYPEFLAGS IMPLTYPEFLAG_FSOURCE;
    public static IMPLTYPEFLAGS IMPLTYPEFLAG_FRESTRICTED;
    public static IMPLTYPEFLAGS IMPLTYPEFLAG_FDEFAULTVTABLE;
}
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
public enum System.Runtime.InteropServices.ComTypes.INVOKEKIND : Enum {
    public int value__;
    public static INVOKEKIND INVOKE_FUNC;
    public static INVOKEKIND INVOKE_PROPERTYGET;
    public static INVOKEKIND INVOKE_PROPERTYPUT;
    public static INVOKEKIND INVOKE_PROPERTYPUTREF;
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IPersistFile {
    public abstract virtual void GetClassID(Guid& pClassID);
    public abstract virtual void GetCurFile(String& ppszFileName);
    public abstract virtual int IsDirty();
    public abstract virtual void Load(string pszFileName, int dwMode);
    [NullableContextAttribute("2")]
public abstract virtual void Save(string pszFileName, bool fRemember);
    public abstract virtual void SaveCompleted(string pszFileName);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IRunningObjectTable {
    public abstract virtual void EnumRunning(IEnumMoniker& ppenumMoniker);
    public abstract virtual int GetObject(IMoniker pmkObjectName, Object& ppunkObject);
    public abstract virtual int GetTimeOfLastChange(IMoniker pmkObjectName, FILETIME& pfiletime);
    public abstract virtual int IsRunning(IMoniker pmkObjectName);
    public abstract virtual void NoteChangeTime(int dwRegister, FILETIME& pfiletime);
    public abstract virtual int Register(int grfFlags, object punkObject, IMoniker pmkObjectName);
    public abstract virtual void Revoke(int dwRegister);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IStream {
    public abstract virtual void Clone(IStream& ppstm);
    public abstract virtual void Commit(int grfCommitFlags);
    public abstract virtual void CopyTo(IStream pstm, long cb, IntPtr pcbRead, IntPtr pcbWritten);
    public abstract virtual void LockRegion(long libOffset, long cb, int dwLockType);
    public abstract virtual void Read(Byte[] pv, int cb, IntPtr pcbRead);
    public abstract virtual void Revert();
    public abstract virtual void Seek(long dlibMove, int dwOrigin, IntPtr plibNewPosition);
    public abstract virtual void SetSize(long libNewSize);
    public abstract virtual void Stat(STATSTG& pstatstg, int grfStatFlag);
    public abstract virtual void UnlockRegion(long libOffset, long cb, int dwLockType);
    public abstract virtual void Write(Byte[] pv, int cb, IntPtr pcbWritten);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.ITypeComp {
    public abstract virtual void Bind(string szName, int lHashVal, short wFlags, ITypeInfo& ppTInfo, DESCKIND& pDescKind, BINDPTR& pBindPtr);
    public abstract virtual void BindType(string szName, int lHashVal, ITypeInfo& ppTInfo, ITypeComp& ppTComp);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.ITypeInfo {
    public abstract virtual void AddressOfMember(int memid, INVOKEKIND invKind, IntPtr& ppv);
    public abstract virtual void CreateInstance(object pUnkOuter, Guid& riid, Object& ppvObj);
    public abstract virtual void GetContainingTypeLib(ITypeLib& ppTLB, Int32& pIndex);
    public abstract virtual void GetDllEntry(int memid, INVOKEKIND invKind, IntPtr pBstrDllName, IntPtr pBstrName, IntPtr pwOrdinal);
    public abstract virtual void GetDocumentation(int index, String& strName, String& strDocString, Int32& dwHelpContext, String& strHelpFile);
    public abstract virtual void GetFuncDesc(int index, IntPtr& ppFuncDesc);
    public abstract virtual void GetIDsOfNames(String[] rgszNames, int cNames, Int32[] pMemId);
    public abstract virtual void GetImplTypeFlags(int index, IMPLTYPEFLAGS& pImplTypeFlags);
    [NullableContextAttribute("2")]
public abstract virtual void GetMops(int memid, String& pBstrMops);
    public abstract virtual void GetNames(int memid, String[] rgBstrNames, int cMaxNames, Int32& pcNames);
    public abstract virtual void GetRefTypeInfo(int hRef, ITypeInfo& ppTI);
    public abstract virtual void GetRefTypeOfImplType(int index, Int32& href);
    public abstract virtual void GetTypeAttr(IntPtr& ppTypeAttr);
    public abstract virtual void GetTypeComp(ITypeComp& ppTComp);
    public abstract virtual void GetVarDesc(int index, IntPtr& ppVarDesc);
    public abstract virtual void Invoke(object pvInstance, int memid, short wFlags, DISPPARAMS& pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, Int32& puArgErr);
    public abstract virtual void ReleaseFuncDesc(IntPtr pFuncDesc);
    public abstract virtual void ReleaseTypeAttr(IntPtr pTypeAttr);
    public abstract virtual void ReleaseVarDesc(IntPtr pVarDesc);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.ITypeInfo2 {
    public abstract virtual void AddressOfMember(int memid, INVOKEKIND invKind, IntPtr& ppv);
    public abstract virtual void CreateInstance(object pUnkOuter, Guid& riid, Object& ppvObj);
    public abstract virtual void GetAllCustData(IntPtr pCustData);
    public abstract virtual void GetAllFuncCustData(int index, IntPtr pCustData);
    public abstract virtual void GetAllImplTypeCustData(int index, IntPtr pCustData);
    public abstract virtual void GetAllParamCustData(int indexFunc, int indexParam, IntPtr pCustData);
    public abstract virtual void GetAllVarCustData(int index, IntPtr pCustData);
    public abstract virtual void GetContainingTypeLib(ITypeLib& ppTLB, Int32& pIndex);
    public abstract virtual void GetCustData(Guid& guid, Object& pVarVal);
    public abstract virtual void GetDllEntry(int memid, INVOKEKIND invKind, IntPtr pBstrDllName, IntPtr pBstrName, IntPtr pwOrdinal);
    public abstract virtual void GetDocumentation(int index, String& strName, String& strDocString, Int32& dwHelpContext, String& strHelpFile);
    public abstract virtual void GetDocumentation2(int memid, String& pbstrHelpString, Int32& pdwHelpStringContext, String& pbstrHelpStringDll);
    public abstract virtual void GetFuncCustData(int index, Guid& guid, Object& pVarVal);
    public abstract virtual void GetFuncDesc(int index, IntPtr& ppFuncDesc);
    public abstract virtual void GetFuncIndexOfMemId(int memid, INVOKEKIND invKind, Int32& pFuncIndex);
    public abstract virtual void GetIDsOfNames(String[] rgszNames, int cNames, Int32[] pMemId);
    public abstract virtual void GetImplTypeCustData(int index, Guid& guid, Object& pVarVal);
    public abstract virtual void GetImplTypeFlags(int index, IMPLTYPEFLAGS& pImplTypeFlags);
    [NullableContextAttribute("2")]
public abstract virtual void GetMops(int memid, String& pBstrMops);
    public abstract virtual void GetNames(int memid, String[] rgBstrNames, int cMaxNames, Int32& pcNames);
    public abstract virtual void GetParamCustData(int indexFunc, int indexParam, Guid& guid, Object& pVarVal);
    public abstract virtual void GetRefTypeInfo(int hRef, ITypeInfo& ppTI);
    public abstract virtual void GetRefTypeOfImplType(int index, Int32& href);
    public abstract virtual void GetTypeAttr(IntPtr& ppTypeAttr);
    public abstract virtual void GetTypeComp(ITypeComp& ppTComp);
    public abstract virtual void GetTypeFlags(Int32& pTypeFlags);
    public abstract virtual void GetTypeKind(TYPEKIND& pTypeKind);
    public abstract virtual void GetVarCustData(int index, Guid& guid, Object& pVarVal);
    public abstract virtual void GetVarDesc(int index, IntPtr& ppVarDesc);
    public abstract virtual void GetVarIndexOfMemId(int memid, Int32& pVarIndex);
    public abstract virtual void Invoke(object pvInstance, int memid, short wFlags, DISPPARAMS& pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, Int32& puArgErr);
    public abstract virtual void ReleaseFuncDesc(IntPtr pFuncDesc);
    public abstract virtual void ReleaseTypeAttr(IntPtr pTypeAttr);
    public abstract virtual void ReleaseVarDesc(IntPtr pVarDesc);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.ITypeLib {
    public abstract virtual void FindName(string szNameBuf, int lHashVal, ITypeInfo[] ppTInfo, Int32[] rgMemId, Int16& pcFound);
    public abstract virtual void GetDocumentation(int index, String& strName, String& strDocString, Int32& dwHelpContext, String& strHelpFile);
    public abstract virtual void GetLibAttr(IntPtr& ppTLibAttr);
    public abstract virtual void GetTypeComp(ITypeComp& ppTComp);
    public abstract virtual void GetTypeInfo(int index, ITypeInfo& ppTI);
    public abstract virtual int GetTypeInfoCount();
    public abstract virtual void GetTypeInfoOfGuid(Guid& guid, ITypeInfo& ppTInfo);
    public abstract virtual void GetTypeInfoType(int index, TYPEKIND& pTKind);
    public abstract virtual bool IsName(string szNameBuf, int lHashVal);
    public abstract virtual void ReleaseTLibAttr(IntPtr pTLibAttr);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.ITypeLib2 {
    public abstract virtual void FindName(string szNameBuf, int lHashVal, ITypeInfo[] ppTInfo, Int32[] rgMemId, Int16& pcFound);
    public abstract virtual void GetAllCustData(IntPtr pCustData);
    public abstract virtual void GetCustData(Guid& guid, Object& pVarVal);
    public abstract virtual void GetDocumentation(int index, String& strName, String& strDocString, Int32& dwHelpContext, String& strHelpFile);
    public abstract virtual void GetDocumentation2(int index, String& pbstrHelpString, Int32& pdwHelpStringContext, String& pbstrHelpStringDll);
    public abstract virtual void GetLibAttr(IntPtr& ppTLibAttr);
    public abstract virtual void GetLibStatistics(IntPtr pcUniqueNames, Int32& pcchUniqueNames);
    public abstract virtual void GetTypeComp(ITypeComp& ppTComp);
    public abstract virtual void GetTypeInfo(int index, ITypeInfo& ppTI);
    public abstract virtual int GetTypeInfoCount();
    public abstract virtual void GetTypeInfoOfGuid(Guid& guid, ITypeInfo& ppTInfo);
    public abstract virtual void GetTypeInfoType(int index, TYPEKIND& pTKind);
    public abstract virtual bool IsName(string szNameBuf, int lHashVal);
    public abstract virtual void ReleaseTLibAttr(IntPtr pTLibAttr);
}
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
public enum System.Runtime.InteropServices.ComTypes.LIBFLAGS : Enum {
    public short value__;
    public static LIBFLAGS LIBFLAG_FRESTRICTED;
    public static LIBFLAGS LIBFLAG_FCONTROL;
    public static LIBFLAGS LIBFLAG_FHIDDEN;
    public static LIBFLAGS LIBFLAG_FHASDISKIMAGE;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.PARAMDESC : ValueType {
    public IntPtr lpVarValue;
    public PARAMFLAG wParamFlags;
}
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
public enum System.Runtime.InteropServices.ComTypes.PARAMFLAG : Enum {
    public short value__;
    public static PARAMFLAG PARAMFLAG_NONE;
    public static PARAMFLAG PARAMFLAG_FIN;
    public static PARAMFLAG PARAMFLAG_FOUT;
    public static PARAMFLAG PARAMFLAG_FLCID;
    public static PARAMFLAG PARAMFLAG_FRETVAL;
    public static PARAMFLAG PARAMFLAG_FOPT;
    public static PARAMFLAG PARAMFLAG_FHASDEFAULT;
    public static PARAMFLAG PARAMFLAG_FHASCUSTDATA;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.STATDATA : ValueType {
    public ADVF advf;
    [NullableAttribute("1")]
public IAdviseSink advSink;
    public int connection;
    public FORMATETC formatetc;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.STATSTG : ValueType {
    public FILETIME atime;
    public long cbSize;
    public Guid clsid;
    public FILETIME ctime;
    public int grfLocksSupported;
    public int grfMode;
    public int grfStateBits;
    public FILETIME mtime;
    [NullableAttribute("1")]
public string pwcsName;
    public int reserved;
    public int type;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.STGMEDIUM : ValueType {
    [NullableAttribute("2")]
public object pUnkForRelease;
    public TYMED tymed;
    public IntPtr unionmember;
}
[EditorBrowsableAttribute("1")]
public enum System.Runtime.InteropServices.ComTypes.SYSKIND : Enum {
    public int value__;
    public static SYSKIND SYS_WIN16;
    public static SYSKIND SYS_WIN32;
    public static SYSKIND SYS_MAC;
    public static SYSKIND SYS_WIN64;
}
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
public enum System.Runtime.InteropServices.ComTypes.TYMED : Enum {
    public int value__;
    public static TYMED TYMED_NULL;
    public static TYMED TYMED_HGLOBAL;
    public static TYMED TYMED_FILE;
    public static TYMED TYMED_ISTREAM;
    public static TYMED TYMED_ISTORAGE;
    public static TYMED TYMED_GDI;
    public static TYMED TYMED_MFPICT;
    public static TYMED TYMED_ENHMF;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.TYPEATTR : ValueType {
    public short cbAlignment;
    public int cbSizeInstance;
    public short cbSizeVft;
    public short cFuncs;
    public short cImplTypes;
    public short cVars;
    public int dwReserved;
    public Guid guid;
    public IDLDESC idldescType;
    public int lcid;
    public IntPtr lpstrSchema;
    public static int MEMBER_ID_NIL;
    public int memidConstructor;
    public int memidDestructor;
    public TYPEDESC tdescAlias;
    public TYPEKIND typekind;
    public short wMajorVerNum;
    public short wMinorVerNum;
    public TYPEFLAGS wTypeFlags;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.TYPEDESC : ValueType {
    public IntPtr lpValue;
    public short vt;
}
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
public enum System.Runtime.InteropServices.ComTypes.TYPEFLAGS : Enum {
    public short value__;
    public static TYPEFLAGS TYPEFLAG_FAPPOBJECT;
    public static TYPEFLAGS TYPEFLAG_FCANCREATE;
    public static TYPEFLAGS TYPEFLAG_FLICENSED;
    public static TYPEFLAGS TYPEFLAG_FPREDECLID;
    public static TYPEFLAGS TYPEFLAG_FHIDDEN;
    public static TYPEFLAGS TYPEFLAG_FCONTROL;
    public static TYPEFLAGS TYPEFLAG_FDUAL;
    public static TYPEFLAGS TYPEFLAG_FNONEXTENSIBLE;
    public static TYPEFLAGS TYPEFLAG_FOLEAUTOMATION;
    public static TYPEFLAGS TYPEFLAG_FRESTRICTED;
    public static TYPEFLAGS TYPEFLAG_FAGGREGATABLE;
    public static TYPEFLAGS TYPEFLAG_FREPLACEABLE;
    public static TYPEFLAGS TYPEFLAG_FDISPATCHABLE;
    public static TYPEFLAGS TYPEFLAG_FREVERSEBIND;
    public static TYPEFLAGS TYPEFLAG_FPROXY;
}
[EditorBrowsableAttribute("1")]
public enum System.Runtime.InteropServices.ComTypes.TYPEKIND : Enum {
    public int value__;
    public static TYPEKIND TKIND_ENUM;
    public static TYPEKIND TKIND_RECORD;
    public static TYPEKIND TKIND_MODULE;
    public static TYPEKIND TKIND_INTERFACE;
    public static TYPEKIND TKIND_DISPATCH;
    public static TYPEKIND TKIND_COCLASS;
    public static TYPEKIND TKIND_ALIAS;
    public static TYPEKIND TKIND_UNION;
    public static TYPEKIND TKIND_MAX;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.TYPELIBATTR : ValueType {
    public Guid guid;
    public int lcid;
    public SYSKIND syskind;
    public LIBFLAGS wLibFlags;
    public short wMajorVerNum;
    public short wMinorVerNum;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.VARDESC : ValueType {
    public DESCUNION desc;
    public ELEMDESC elemdescVar;
    [NullableAttribute("1")]
public string lpstrSchema;
    public int memid;
    public VARKIND varkind;
    public short wVarFlags;
}
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
public enum System.Runtime.InteropServices.ComTypes.VARFLAGS : Enum {
    public short value__;
    public static VARFLAGS VARFLAG_FREADONLY;
    public static VARFLAGS VARFLAG_FSOURCE;
    public static VARFLAGS VARFLAG_FBINDABLE;
    public static VARFLAGS VARFLAG_FREQUESTEDIT;
    public static VARFLAGS VARFLAG_FDISPLAYBIND;
    public static VARFLAGS VARFLAG_FDEFAULTBIND;
    public static VARFLAGS VARFLAG_FHIDDEN;
    public static VARFLAGS VARFLAG_FRESTRICTED;
    public static VARFLAGS VARFLAG_FDEFAULTCOLLELEM;
    public static VARFLAGS VARFLAG_FUIDEFAULT;
    public static VARFLAGS VARFLAG_FNONBROWSABLE;
    public static VARFLAGS VARFLAG_FREPLACEABLE;
    public static VARFLAGS VARFLAG_FIMMEDIATEBIND;
}
[EditorBrowsableAttribute("1")]
public enum System.Runtime.InteropServices.ComTypes.VARKIND : Enum {
    public int value__;
    public static VARKIND VAR_PERINSTANCE;
    public static VARKIND VAR_STATIC;
    public static VARKIND VAR_CONST;
    public static VARKIND VAR_DISPATCH;
}
[AttributeUsageAttribute("64")]
public class System.Runtime.InteropServices.ComUnregisterFunctionAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.InteropServices.ComWrappers : object {
    public static bool TryGetComInstance(object obj, IntPtr& unknown);
    [NullableContextAttribute("2")]
public static bool TryGetObject(IntPtr unknown, Object& obj);
    public IntPtr GetOrCreateComInterfaceForObject(object instance, CreateComInterfaceFlags flags);
    [NullableContextAttribute("0")]
protected abstract virtual ComInterfaceEntry* ComputeVtables(object obj, CreateComInterfaceFlags flags, Int32& count);
    public object GetOrCreateObjectForComInstance(IntPtr externalComObject, CreateObjectFlags flags);
    [NullableContextAttribute("2")]
protected abstract virtual object CreateObject(IntPtr externalComObject, CreateObjectFlags flags);
    public object GetOrRegisterObjectForComInstance(IntPtr externalComObject, CreateObjectFlags flags, object wrapper);
    public object GetOrRegisterObjectForComInstance(IntPtr externalComObject, CreateObjectFlags flags, object wrapper, IntPtr inner);
    protected abstract virtual void ReleaseObjects(IEnumerable objects);
    public static void RegisterForTrackerSupport(ComWrappers instance);
    [SupportedOSPlatformAttribute("windows")]
public static void RegisterForMarshalling(ComWrappers instance);
    public static void GetIUnknownImpl(IntPtr& fpQueryInterface, IntPtr& fpAddRef, IntPtr& fpRelease);
}
[FlagsAttribute]
public enum System.Runtime.InteropServices.CreateComInterfaceFlags : Enum {
    public int value__;
    public static CreateComInterfaceFlags None;
    public static CreateComInterfaceFlags CallerDefinedIUnknown;
    public static CreateComInterfaceFlags TrackerSupport;
}
[FlagsAttribute]
public enum System.Runtime.InteropServices.CreateObjectFlags : Enum {
    public int value__;
    public static CreateObjectFlags None;
    public static CreateObjectFlags TrackerObject;
    public static CreateObjectFlags UniqueInstance;
    public static CreateObjectFlags Aggregation;
    public static CreateObjectFlags Unwrap;
}
[IsReadOnlyAttribute]
[CLSCompliantAttribute("False")]
public class System.Runtime.InteropServices.CULong : ValueType {
    private int _dummyPrimitive;
    public UIntPtr Value { get; }
    public CULong(UInt32 value);
    public CULong(UIntPtr value);
    public UIntPtr get_Value();
    [NullableContextAttribute("2")]
public virtual bool Equals(object o);
    public sealed virtual bool Equals(CULong other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("CurrencyWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
public class System.Runtime.InteropServices.CurrencyWrapper : object {
    public decimal WrappedObject { get; }
    public CurrencyWrapper(decimal obj);
    [NullableContextAttribute("1")]
public CurrencyWrapper(object obj);
    public decimal get_WrappedObject();
}
[EditorBrowsableAttribute("1")]
public enum System.Runtime.InteropServices.CustomQueryInterfaceMode : Enum {
    public int value__;
    public static CustomQueryInterfaceMode Ignore;
    public static CustomQueryInterfaceMode Allow;
}
[EditorBrowsableAttribute("1")]
public enum System.Runtime.InteropServices.CustomQueryInterfaceResult : Enum {
    public int value__;
    public static CustomQueryInterfaceResult Handled;
    public static CustomQueryInterfaceResult NotHandled;
    public static CustomQueryInterfaceResult Failed;
}
[AttributeUsageAttribute("2")]
public class System.Runtime.InteropServices.DefaultCharSetAttribute : Attribute {
    public CharSet CharSet { get; }
    public DefaultCharSetAttribute(CharSet charSet);
    public CharSet get_CharSet();
}
[AttributeUsageAttribute("65")]
public class System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute : Attribute {
    public DllImportSearchPath Paths { get; }
    public DefaultDllImportSearchPathsAttribute(DllImportSearchPath paths);
    public DllImportSearchPath get_Paths();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
public class System.Runtime.InteropServices.DefaultParameterValueAttribute : Attribute {
    public object Value { get; }
    public DefaultParameterValueAttribute(object value);
    public object get_Value();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[SupportedOSPlatformAttribute("windows")]
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.DispatchWrapper : object {
    public object WrappedObject { get; }
    public DispatchWrapper(object obj);
    public object get_WrappedObject();
}
[AttributeUsageAttribute("960")]
public class System.Runtime.InteropServices.DispIdAttribute : Attribute {
    public int Value { get; }
    public DispIdAttribute(int dispId);
    public int get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class System.Runtime.InteropServices.DllImportAttribute : Attribute {
    public bool BestFitMapping;
    public CallingConvention CallingConvention;
    public CharSet CharSet;
    [NullableAttribute("2")]
public string EntryPoint;
    public bool ExactSpelling;
    public bool PreserveSig;
    public bool SetLastError;
    public bool ThrowOnUnmappableChar;
    public string Value { get; }
    public DllImportAttribute(string dllName);
    public string get_Value();
}
public class System.Runtime.InteropServices.DllImportResolver : MulticastDelegate {
    public DllImportResolver(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual IntPtr Invoke(string libraryName, Assembly assembly, Nullable`1<DllImportSearchPath> searchPath);
    public virtual IAsyncResult BeginInvoke(string libraryName, Assembly assembly, Nullable`1<DllImportSearchPath> searchPath, AsyncCallback callback, object object);
    public virtual IntPtr EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum System.Runtime.InteropServices.DllImportSearchPath : Enum {
    public int value__;
    public static DllImportSearchPath LegacyBehavior;
    public static DllImportSearchPath AssemblyDirectory;
    public static DllImportSearchPath UseDllDirectoryForDependencies;
    public static DllImportSearchPath ApplicationDirectory;
    public static DllImportSearchPath UserDirectories;
    public static DllImportSearchPath System32;
    public static DllImportSearchPath SafeDirectories;
}
[AttributeUsageAttribute("1024")]
public class System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ErrorWrapper : object {
    public int ErrorCode { get; }
    public ErrorWrapper(Exception e);
    public ErrorWrapper(int errorCode);
    public ErrorWrapper(object errorCode);
    public int get_ErrorCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("5149")]
public class System.Runtime.InteropServices.GuidAttribute : Attribute {
    public string Value { get; }
    public GuidAttribute(string guid);
    public string get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Runtime.InteropServices.HandleCollector : object {
    public int Count { get; }
    public int InitialThreshold { get; }
    public int MaximumThreshold { get; }
    public string Name { get; }
    [NullableContextAttribute("2")]
public HandleCollector(string name, int initialThreshold);
    [NullableContextAttribute("2")]
public HandleCollector(string name, int initialThreshold, int maximumThreshold);
    public int get_Count();
    public int get_InitialThreshold();
    public int get_MaximumThreshold();
    public string get_Name();
    public void Add();
    public void Remove();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Runtime.InteropServices.HandleRef : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public IntPtr Handle { get; }
    public object Wrapper { get; }
    public HandleRef(object wrapper, IntPtr handle);
    public IntPtr get_Handle();
    public object get_Wrapper();
    public static IntPtr op_Explicit(HandleRef value);
    public static IntPtr ToIntPtr(HandleRef value);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
public interface System.Runtime.InteropServices.ICustomAdapter {
    public abstract virtual object GetUnderlyingObject();
}
[NullableContextAttribute("1")]
public interface System.Runtime.InteropServices.ICustomFactory {
    public abstract virtual MarshalByRefObject CreateInstance(Type serverType);
}
[NullableContextAttribute("1")]
public interface System.Runtime.InteropServices.ICustomMarshaler {
    public abstract virtual void CleanUpManagedData(object ManagedObj);
    public abstract virtual void CleanUpNativeData(IntPtr pNativeData);
    public abstract virtual int GetNativeDataSize();
    public abstract virtual IntPtr MarshalManagedToNative(object ManagedObj);
    public abstract virtual object MarshalNativeToManaged(IntPtr pNativeData);
}
[EditorBrowsableAttribute("1")]
public interface System.Runtime.InteropServices.ICustomQueryInterface {
    public abstract virtual CustomQueryInterfaceResult GetInterface(Guid& iid, IntPtr& ppv);
}
public interface System.Runtime.InteropServices.IDynamicInterfaceCastable {
    public abstract virtual bool IsInterfaceImplemented(RuntimeTypeHandle interfaceType, bool throwIfNotImplemented);
    public abstract virtual RuntimeTypeHandle GetInterfaceImplementation(RuntimeTypeHandle interfaceType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class System.Runtime.InteropServices.ImportedFromTypeLibAttribute : Attribute {
    public string Value { get; }
    public ImportedFromTypeLibAttribute(string tlbFile);
    public string get_Value();
}
[AttributeUsageAttribute("1024")]
public class System.Runtime.InteropServices.InterfaceTypeAttribute : Attribute {
    public ComInterfaceType Value { get; }
    public InterfaceTypeAttribute(short interfaceType);
    public InterfaceTypeAttribute(ComInterfaceType interfaceType);
    public ComInterfaceType get_Value();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Runtime.InteropServices.InvalidComObjectException : SystemException {
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected InvalidComObjectException(SerializationInfo info, StreamingContext context);
    public InvalidComObjectException(string message);
    public InvalidComObjectException(string message, Exception inner);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Runtime.InteropServices.InvalidOleVariantTypeException : SystemException {
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected InvalidOleVariantTypeException(SerializationInfo info, StreamingContext context);
    public InvalidOleVariantTypeException(string message);
    public InvalidOleVariantTypeException(string message, Exception inner);
}
[AttributeUsageAttribute("64")]
public class System.Runtime.InteropServices.LCIDConversionAttribute : Attribute {
    public int Value { get; }
    public LCIDConversionAttribute(int lcid);
    public int get_Value();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [NullableAttribute("1")]
public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public bool SetLastError { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    [NullableContextAttribute("1")]
public LibraryImportAttribute(string libraryName);
    [NullableContextAttribute("1")]
public string get_LibraryName();
    public string get_EntryPoint();
    public void set_EntryPoint(string value);
    public bool get_SetLastError();
    public void set_SetLastError(bool value);
    public StringMarshalling get_StringMarshalling();
    public void set_StringMarshalling(StringMarshalling value);
    public Type get_StringMarshallingCustomType();
    public void set_StringMarshallingCustomType(Type value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute : Attribute {
    public Type ClassType { get; }
    public string MethodName { get; }
    public ManagedToNativeComInteropStubAttribute(Type classType, string methodName);
    public Type get_ClassType();
    public string get_MethodName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Runtime.InteropServices.Marshal : object {
    public static int SystemDefaultCharSize;
    public static int SystemMaxDBCSCharSize;
    public static int AddRef(IntPtr pUnk);
    public static IntPtr AllocCoTaskMem(int cb);
    public static IntPtr AllocHGlobal(int cb);
    public static IntPtr AllocHGlobal(IntPtr cb);
    public static bool AreComObjectsAvailableForCleanup();
    [RequiresUnreferencedCodeAttribute("Built-in COM support is not trim compatible")]
[SupportedOSPlatformAttribute("windows")]
public static object BindToMoniker(string monikerName);
    [SupportedOSPlatformAttribute("windows")]
public static void ChangeWrapperHandleStrength(object otp, bool fIsWeak);
    public static void CleanupUnusedObjectsInCurrentContext();
    public static void Copy(Byte[] source, int startIndex, IntPtr destination, int length);
    public static void Copy(Char[] source, int startIndex, IntPtr destination, int length);
    public static void Copy(Double[] source, int startIndex, IntPtr destination, int length);
    public static void Copy(Int16[] source, int startIndex, IntPtr destination, int length);
    public static void Copy(Int32[] source, int startIndex, IntPtr destination, int length);
    public static void Copy(Int64[] source, int startIndex, IntPtr destination, int length);
    public static void Copy(IntPtr source, Byte[] destination, int startIndex, int length);
    public static void Copy(IntPtr source, Char[] destination, int startIndex, int length);
    public static void Copy(IntPtr source, Double[] destination, int startIndex, int length);
    public static void Copy(IntPtr source, Int16[] destination, int startIndex, int length);
    public static void Copy(IntPtr source, Int32[] destination, int startIndex, int length);
    public static void Copy(IntPtr source, Int64[] destination, int startIndex, int length);
    public static void Copy(IntPtr source, IntPtr[] destination, int startIndex, int length);
    public static void Copy(IntPtr source, Single[] destination, int startIndex, int length);
    public static void Copy(IntPtr[] source, int startIndex, IntPtr destination, int length);
    public static void Copy(Single[] source, int startIndex, IntPtr destination, int length);
    [SupportedOSPlatformAttribute("windows")]
[EditorBrowsableAttribute("1")]
public static IntPtr CreateAggregatedObject(IntPtr pOuter, object o);
    [SupportedOSPlatformAttribute("windows")]
public static IntPtr CreateAggregatedObject(IntPtr pOuter, T o);
    [NullableContextAttribute("2")]
[SupportedOSPlatformAttribute("windows")]
[EditorBrowsableAttribute("1")]
public static object CreateWrapperOfType(object o, Type t);
    [NullableContextAttribute("2")]
[SupportedOSPlatformAttribute("windows")]
public static TWrapper CreateWrapperOfType(T o);
    [RequiresDynamicCodeAttribute("Marshalling code for the object might not be available. Use the DestroyStructure<T> overload instead.")]
[EditorBrowsableAttribute("1")]
public static void DestroyStructure(IntPtr ptr, Type structuretype);
    [NullableContextAttribute("2")]
public static void DestroyStructure(IntPtr ptr);
    [SupportedOSPlatformAttribute("windows")]
public static int FinalReleaseComObject(object o);
    public static void FreeBSTR(IntPtr ptr);
    public static void FreeCoTaskMem(IntPtr ptr);
    public static void FreeHGlobal(IntPtr hglobal);
    public static Guid GenerateGuidForType(Type type);
    public static string GenerateProgIdForType(Type type);
    [SupportedOSPlatformAttribute("windows")]
[EditorBrowsableAttribute("1")]
public static IntPtr GetComInterfaceForObject(object o, Type T);
    [SupportedOSPlatformAttribute("windows")]
[EditorBrowsableAttribute("1")]
public static IntPtr GetComInterfaceForObject(object o, Type T, CustomQueryInterfaceMode mode);
    [NullableContextAttribute("2")]
[SupportedOSPlatformAttribute("windows")]
public static IntPtr GetComInterfaceForObject(T o);
    [SupportedOSPlatformAttribute("windows")]
public static object GetComObjectData(object obj, object key);
    [RequiresDynamicCodeAttribute("Marshalling code for the delegate might not be available. Use the GetDelegateForFunctionPointer<TDelegate> overload instead.")]
[EditorBrowsableAttribute("1")]
public static Delegate GetDelegateForFunctionPointer(IntPtr ptr, Type t);
    public static TDelegate GetDelegateForFunctionPointer(IntPtr ptr);
    [SupportedOSPlatformAttribute("windows")]
public static int GetEndComSlot(Type t);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("GetExceptionCode() may be unavailable in future releases.")]
public static int GetExceptionCode();
    [NullableContextAttribute("2")]
public static Exception GetExceptionForHR(int errorCode);
    [NullableContextAttribute("2")]
public static Exception GetExceptionForHR(int errorCode, IntPtr errorInfo);
    public static IntPtr GetExceptionPointers();
    [RequiresDynamicCodeAttribute("Marshalling code for the delegate might not be available. Use the GetFunctionPointerForDelegate<TDelegate> overload instead.")]
[EditorBrowsableAttribute("1")]
public static IntPtr GetFunctionPointerForDelegate(Delegate d);
    public static IntPtr GetFunctionPointerForDelegate(TDelegate d);
    [RequiresAssemblyFilesAttribute("Windows only assigns HINSTANCE to assemblies loaded from disk. This API will return -1 for modules without a file on disk.")]
public static IntPtr GetHINSTANCE(Module m);
    [NullableContextAttribute("2")]
public static int GetHRForException(Exception e);
    public static int GetHRForLastWin32Error();
    [SupportedOSPlatformAttribute("windows")]
public static IntPtr GetIDispatchForObject(object o);
    [SupportedOSPlatformAttribute("windows")]
public static IntPtr GetIUnknownForObject(object o);
    public static int GetLastPInvokeError();
    public static int GetLastSystemError();
    public static int GetLastWin32Error();
    public static string GetLastPInvokeErrorMessage();
    public static string GetPInvokeErrorMessage(int error);
    [NullableContextAttribute("2")]
[SupportedOSPlatformAttribute("windows")]
[EditorBrowsableAttribute("1")]
public static void GetNativeVariantForObject(object obj, IntPtr pDstNativeVariant);
    [NullableContextAttribute("2")]
[SupportedOSPlatformAttribute("windows")]
[EditorBrowsableAttribute("1")]
public static void GetNativeVariantForObject(T obj, IntPtr pDstNativeVariant);
    [SupportedOSPlatformAttribute("windows")]
public static object GetObjectForIUnknown(IntPtr pUnk);
    [NullableContextAttribute("2")]
[SupportedOSPlatformAttribute("windows")]
[EditorBrowsableAttribute("1")]
public static object GetObjectForNativeVariant(IntPtr pSrcNativeVariant);
    [NullableContextAttribute("2")]
[SupportedOSPlatformAttribute("windows")]
[EditorBrowsableAttribute("1")]
public static T GetObjectForNativeVariant(IntPtr pSrcNativeVariant);
    [SupportedOSPlatformAttribute("windows")]
[EditorBrowsableAttribute("1")]
public static Object[] GetObjectsForNativeVariants(IntPtr aSrcNativeVariant, int cVars);
    [SupportedOSPlatformAttribute("windows")]
[EditorBrowsableAttribute("1")]
public static T[] GetObjectsForNativeVariants(IntPtr aSrcNativeVariant, int cVars);
    [SupportedOSPlatformAttribute("windows")]
public static int GetStartComSlot(Type t);
    [SupportedOSPlatformAttribute("windows")]
public static object GetTypedObjectForIUnknown(IntPtr pUnk, Type t);
    [NullableContextAttribute("2")]
[SupportedOSPlatformAttribute("windows")]
public static Type GetTypeFromCLSID(Guid clsid);
    [SupportedOSPlatformAttribute("windows")]
public static string GetTypeInfoName(ITypeInfo typeInfo);
    [SupportedOSPlatformAttribute("windows")]
public static object GetUniqueObjectForIUnknown(IntPtr unknown);
    public static void InitHandle(SafeHandle safeHandle, IntPtr handle);
    public static bool IsComObject(object o);
    public static bool IsTypeVisibleFromCom(Type t);
    [EditorBrowsableAttribute("1")]
public static IntPtr OffsetOf(Type t, string fieldName);
    public static IntPtr OffsetOf(string fieldName);
    public static void Prelink(MethodInfo m);
    public static void PrelinkAll(Type c);
    [NullableContextAttribute("2")]
public static string PtrToStringAnsi(IntPtr ptr);
    public static string PtrToStringAnsi(IntPtr ptr, int len);
    [NullableContextAttribute("2")]
public static string PtrToStringAuto(IntPtr ptr);
    [NullableContextAttribute("2")]
public static string PtrToStringAuto(IntPtr ptr, int len);
    public static string PtrToStringBSTR(IntPtr ptr);
    [NullableContextAttribute("2")]
public static string PtrToStringUni(IntPtr ptr);
    public static string PtrToStringUni(IntPtr ptr, int len);
    [NullableContextAttribute("2")]
public static string PtrToStringUTF8(IntPtr ptr);
    public static string PtrToStringUTF8(IntPtr ptr, int byteLen);
    [RequiresDynamicCodeAttribute("Marshalling code for the object might not be available")]
[EditorBrowsableAttribute("1")]
public static void PtrToStructure(IntPtr ptr, object structure);
    [RequiresDynamicCodeAttribute("Marshalling code for the object might not be available")]
[EditorBrowsableAttribute("1")]
public static object PtrToStructure(IntPtr ptr, Type structureType);
    [NullableContextAttribute("2")]
public static T PtrToStructure(IntPtr ptr);
    public static void PtrToStructure(IntPtr ptr, T structure);
    public static int QueryInterface(IntPtr pUnk, Guid& iid, IntPtr& ppv);
    public static byte ReadByte(IntPtr ptr);
    public static byte ReadByte(IntPtr ptr, int ofs);
    [RequiresDynamicCodeAttribute("Marshalling code for the object might not be available")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("ReadByte(Object, Int32) may be unavailable in future releases.")]
public static byte ReadByte(object ptr, int ofs);
    public static short ReadInt16(IntPtr ptr);
    public static short ReadInt16(IntPtr ptr, int ofs);
    [RequiresDynamicCodeAttribute("Marshalling code for the object might not be available")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("ReadInt16(Object, Int32) may be unavailable in future releases.")]
public static short ReadInt16(object ptr, int ofs);
    public static int ReadInt32(IntPtr ptr);
    public static int ReadInt32(IntPtr ptr, int ofs);
    [RequiresDynamicCodeAttribute("Marshalling code for the object might not be available")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("ReadInt32(Object, Int32) may be unavailable in future releases.")]
public static int ReadInt32(object ptr, int ofs);
    public static long ReadInt64(IntPtr ptr);
    public static long ReadInt64(IntPtr ptr, int ofs);
    [RequiresDynamicCodeAttribute("Marshalling code for the object might not be available")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("ReadInt64(Object, Int32) may be unavailable in future releases.")]
public static long ReadInt64(object ptr, int ofs);
    public static IntPtr ReadIntPtr(IntPtr ptr);
    public static IntPtr ReadIntPtr(IntPtr ptr, int ofs);
    [RequiresDynamicCodeAttribute("Marshalling code for the object might not be available")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("ReadIntPtr(Object, Int32) may be unavailable in future releases.")]
public static IntPtr ReadIntPtr(object ptr, int ofs);
    public static IntPtr ReAllocCoTaskMem(IntPtr pv, int cb);
    public static IntPtr ReAllocHGlobal(IntPtr pv, IntPtr cb);
    public static int Release(IntPtr pUnk);
    [SupportedOSPlatformAttribute("windows")]
public static int ReleaseComObject(object o);
    public static IntPtr SecureStringToBSTR(SecureString s);
    public static IntPtr SecureStringToCoTaskMemAnsi(SecureString s);
    public static IntPtr SecureStringToCoTaskMemUnicode(SecureString s);
    public static IntPtr SecureStringToGlobalAllocAnsi(SecureString s);
    public static IntPtr SecureStringToGlobalAllocUnicode(SecureString s);
    [SupportedOSPlatformAttribute("windows")]
public static bool SetComObjectData(object obj, object key, object data);
    public static void SetLastPInvokeError(int error);
    public static void SetLastSystemError(int error);
    [RequiresDynamicCodeAttribute("Marshalling code for the object might not be available. Use the SizeOf<T> overload instead.")]
[EditorBrowsableAttribute("1")]
public static int SizeOf(object structure);
    [RequiresDynamicCodeAttribute("Marshalling code for the object might not be available. Use the SizeOf<T> overload instead.")]
[EditorBrowsableAttribute("1")]
public static int SizeOf(Type t);
    [NullableContextAttribute("2")]
public static int SizeOf();
    public static int SizeOf(T structure);
    [NullableContextAttribute("2")]
public static IntPtr StringToBSTR(string s);
    [NullableContextAttribute("2")]
public static IntPtr StringToCoTaskMemAnsi(string s);
    [NullableContextAttribute("2")]
public static IntPtr StringToCoTaskMemAuto(string s);
    [NullableContextAttribute("2")]
public static IntPtr StringToCoTaskMemUni(string s);
    [NullableContextAttribute("2")]
public static IntPtr StringToCoTaskMemUTF8(string s);
    [NullableContextAttribute("2")]
public static IntPtr StringToHGlobalAnsi(string s);
    [NullableContextAttribute("2")]
public static IntPtr StringToHGlobalAuto(string s);
    [NullableContextAttribute("2")]
public static IntPtr StringToHGlobalUni(string s);
    [RequiresDynamicCodeAttribute("Marshalling code for the object might not be available. Use the StructureToPtr<T> overload instead.")]
[EditorBrowsableAttribute("1")]
public static void StructureToPtr(object structure, IntPtr ptr, bool fDeleteOld);
    public static void StructureToPtr(T structure, IntPtr ptr, bool fDeleteOld);
    public static void ThrowExceptionForHR(int errorCode);
    public static void ThrowExceptionForHR(int errorCode, IntPtr errorInfo);
    [EditorBrowsableAttribute("1")]
public static IntPtr UnsafeAddrOfPinnedArrayElement(Array arr, int index);
    public static IntPtr UnsafeAddrOfPinnedArrayElement(T[] arr, int index);
    public static void WriteByte(IntPtr ptr, byte val);
    public static void WriteByte(IntPtr ptr, int ofs, byte val);
    [RequiresDynamicCodeAttribute("Marshalling code for the object might not be available")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("WriteByte(Object, Int32, Byte) may be unavailable in future releases.")]
public static void WriteByte(object ptr, int ofs, byte val);
    public static void WriteInt16(IntPtr ptr, char val);
    public static void WriteInt16(IntPtr ptr, short val);
    public static void WriteInt16(IntPtr ptr, int ofs, char val);
    public static void WriteInt16(IntPtr ptr, int ofs, short val);
    [RequiresDynamicCodeAttribute("Marshalling code for the object might not be available")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("WriteInt16(Object, Int32, Char) may be unavailable in future releases.")]
public static void WriteInt16(object ptr, int ofs, char val);
    [RequiresDynamicCodeAttribute("Marshalling code for the object might not be available")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("WriteInt16(Object, Int32, Int16) may be unavailable in future releases.")]
public static void WriteInt16(object ptr, int ofs, short val);
    public static void WriteInt32(IntPtr ptr, int val);
    public static void WriteInt32(IntPtr ptr, int ofs, int val);
    [RequiresDynamicCodeAttribute("Marshalling code for the object might not be available")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("WriteInt32(Object, Int32, Int32) may be unavailable in future releases.")]
public static void WriteInt32(object ptr, int ofs, int val);
    public static void WriteInt64(IntPtr ptr, int ofs, long val);
    public static void WriteInt64(IntPtr ptr, long val);
    [RequiresDynamicCodeAttribute("Marshalling code for the object might not be available")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("WriteInt64(Object, Int32, Int64) may be unavailable in future releases.")]
public static void WriteInt64(object ptr, int ofs, long val);
    public static void WriteIntPtr(IntPtr ptr, int ofs, IntPtr val);
    public static void WriteIntPtr(IntPtr ptr, IntPtr val);
    [RequiresDynamicCodeAttribute("Marshalling code for the object might not be available")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("WriteIntPtr(Object, Int32, IntPtr) may be unavailable in future releases.")]
public static void WriteIntPtr(object ptr, int ofs, IntPtr val);
    public static void ZeroFreeBSTR(IntPtr s);
    public static void ZeroFreeCoTaskMemAnsi(IntPtr s);
    public static void ZeroFreeCoTaskMemUnicode(IntPtr s);
    public static void ZeroFreeCoTaskMemUTF8(IntPtr s);
    public static void ZeroFreeGlobalAllocAnsi(IntPtr s);
    public static void ZeroFreeGlobalAllocUnicode(IntPtr s);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10496")]
public class System.Runtime.InteropServices.MarshalAsAttribute : Attribute {
    public UnmanagedType ArraySubType;
    public int IidParameterIndex;
    public string MarshalCookie;
    public string MarshalType;
    public Type MarshalTypeRef;
    public VarEnum SafeArraySubType;
    public Type SafeArrayUserDefinedSubType;
    public int SizeConst;
    public short SizeParamIndex;
    public UnmanagedType Value { get; }
    public MarshalAsAttribute(short unmanagedType);
    public MarshalAsAttribute(UnmanagedType unmanagedType);
    public UnmanagedType get_Value();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Runtime.InteropServices.MarshalDirectiveException : SystemException {
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected MarshalDirectiveException(SerializationInfo info, StreamingContext context);
    public MarshalDirectiveException(string message);
    public MarshalDirectiveException(string message, Exception inner);
}
[CLSCompliantAttribute("False")]
[CustomMarshallerAttribute("System.String", "0", "System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller")]
[CustomMarshallerAttribute("System.String", "1", "System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller/ManagedToUnmanagedIn")]
public static class System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller : object {
    public static Byte* ConvertToUnmanaged(string managed);
    public static string ConvertToManaged(Byte* unmanaged);
    public static void Free(Byte* unmanaged);
}
[CLSCompliantAttribute("False")]
[CustomMarshallerAttribute("System.Runtime.InteropServices.Marshalling.CustomMarshallerAttribute/GenericPlaceholder[]", "0", "System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2")]
[CustomMarshallerAttribute("System.Runtime.InteropServices.Marshalling.CustomMarshallerAttribute/GenericPlaceholder[]", "1", "System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2/ManagedToUnmanagedIn")]
[ContiguousCollectionMarshallerAttribute]
public static class System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2 : object {
    public static TUnmanagedElement* AllocateContainerForUnmanagedElements(T[] managed, Int32& numElements);
    public static ReadOnlySpan`1<T> GetManagedValuesSource(T[] managed);
    public static Span`1<TUnmanagedElement> GetUnmanagedValuesDestination(TUnmanagedElement* unmanaged, int numElements);
    public static T[] AllocateContainerForManagedElements(TUnmanagedElement* unmanaged, int numElements);
    public static Span`1<T> GetManagedValuesDestination(T[] managed);
    public static ReadOnlySpan`1<TUnmanagedElement> GetUnmanagedValuesSource(TUnmanagedElement* unmanagedValue, int numElements);
    public static void Free(TUnmanagedElement* unmanaged);
}
[CLSCompliantAttribute("False")]
[CustomMarshallerAttribute("System.String", "0", "System.Runtime.InteropServices.Marshalling.BStrStringMarshaller")]
[CustomMarshallerAttribute("System.String", "1", "System.Runtime.InteropServices.Marshalling.BStrStringMarshaller/ManagedToUnmanagedIn")]
public static class System.Runtime.InteropServices.Marshalling.BStrStringMarshaller : object {
    public static UInt16* ConvertToUnmanaged(string managed);
    public static string ConvertToManaged(UInt16* unmanaged);
    public static void Free(UInt16* unmanaged);
}
[AttributeUsageAttribute("4")]
[CLSCompliantAttribute("False")]
public class System.Runtime.InteropServices.Marshalling.ComExposedClassAttribute`1 : Attribute {
    public sealed virtual ComInterfaceEntry* GetComInterfaceEntries(Int32& count);
}
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[CLSCompliantAttribute("False")]
[CustomMarshallerAttribute("System.Runtime.InteropServices.Marshalling.CustomMarshallerAttribute/GenericPlaceholder", "0", "System.Runtime.InteropServices.Marshalling.ComInterfaceMarshaller`1")]
public static class System.Runtime.InteropServices.Marshalling.ComInterfaceMarshaller`1 : object {
    public static Void* ConvertToUnmanaged(T managed);
    public static T ConvertToManaged(Void* unmanaged);
    public static void Free(Void* unmanaged);
}
[FlagsAttribute]
public enum System.Runtime.InteropServices.Marshalling.ComInterfaceOptions : Enum {
    public int value__;
    [EditorBrowsableAttribute("1")]
public static ComInterfaceOptions None;
    public static ComInterfaceOptions ManagedObjectWrapper;
    public static ComInterfaceOptions ComObjectWrapper;
}
public class System.Runtime.InteropServices.Marshalling.ComObject : object {
    public void FinalRelease();
    protected virtual override void Finalize();
    private sealed virtual override RuntimeTypeHandle System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation(RuntimeTypeHandle interfaceType);
    private sealed virtual override bool System.Runtime.InteropServices.IDynamicInterfaceCastable.IsInterfaceImplemented(RuntimeTypeHandle interfaceType, bool throwIfNotImplemented);
    private sealed virtual override VirtualMethodTableInfo System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider.GetVirtualMethodTableInfoForKey(Type type);
}
[CustomMarshallerAttribute("System.Exception", "6", "System.Runtime.InteropServices.Marshalling.ExceptionAsDefaultMarshaller`1")]
public static class System.Runtime.InteropServices.Marshalling.ExceptionAsDefaultMarshaller`1 : object {
    public static T ConvertToUnmanaged(Exception e);
}
[CustomMarshallerAttribute("System.Exception", "6", "System.Runtime.InteropServices.Marshalling.ExceptionAsHResultMarshaller`1")]
public static class System.Runtime.InteropServices.Marshalling.ExceptionAsHResultMarshaller`1 : object {
    public static T ConvertToUnmanaged(Exception e);
}
[CustomMarshallerAttribute("System.Exception", "6", "System.Runtime.InteropServices.Marshalling.ExceptionAsNaNMarshaller`1")]
public static class System.Runtime.InteropServices.Marshalling.ExceptionAsNaNMarshaller`1 : object {
    public static T ConvertToUnmanaged(Exception e);
}
[CustomMarshallerAttribute("System.Exception", "6", "System.Runtime.InteropServices.Marshalling.ExceptionAsVoidMarshaller")]
public static class System.Runtime.InteropServices.Marshalling.ExceptionAsVoidMarshaller : object {
    [NullableContextAttribute("1")]
public static void ConvertToUnmanaged(Exception e);
}
[AttributeUsageAttribute("4")]
public class System.Runtime.InteropServices.Marshalling.GeneratedComClassAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1024")]
public class System.Runtime.InteropServices.Marshalling.GeneratedComInterfaceAttribute : Attribute {
    public ComInterfaceOptions Options { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public ComInterfaceOptions get_Options();
    public void set_Options(ComInterfaceOptions value);
    public StringMarshalling get_StringMarshalling();
    public void set_StringMarshalling(StringMarshalling value);
    public Type get_StringMarshallingCustomType();
    public void set_StringMarshallingCustomType(Type value);
}
[CLSCompliantAttribute("False")]
public interface System.Runtime.InteropServices.Marshalling.IComExposedClass {
    public static abstract virtual ComInterfaceEntry* GetComInterfaceEntries(Int32& count);
}
[CLSCompliantAttribute("False")]
public interface System.Runtime.InteropServices.Marshalling.IComExposedDetails {
    public abstract virtual ComInterfaceEntry* GetComInterfaceEntries(Int32& count);
}
[CLSCompliantAttribute("False")]
public interface System.Runtime.InteropServices.Marshalling.IIUnknownCacheStrategy {
    [NullableContextAttribute("1")]
public abstract virtual void Clear(IIUnknownStrategy unknownStrategy);
    public abstract virtual TableInfo ConstructTableInfo(RuntimeTypeHandle handle, IIUnknownDerivedDetails interfaceDetails, Void* ptr);
    public abstract virtual bool TryGetTableInfo(RuntimeTypeHandle handle, TableInfo& info);
    public abstract virtual bool TrySetTableInfo(RuntimeTypeHandle handle, TableInfo info);
}
[CLSCompliantAttribute("False")]
public interface System.Runtime.InteropServices.Marshalling.IIUnknownDerivedDetails {
    public Guid Iid { get; }
    [NullableAttribute("1")]
public Type Implementation { get; }
    public Void** ManagedVirtualMethodTable { get; }
    public abstract virtual Guid get_Iid();
    [NullableContextAttribute("1")]
public abstract virtual Type get_Implementation();
    public abstract virtual Void** get_ManagedVirtualMethodTable();
}
[NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public interface System.Runtime.InteropServices.Marshalling.IIUnknownInterfaceDetailsStrategy {
    public abstract virtual IComExposedDetails GetComExposedTypeDetails(RuntimeTypeHandle type);
    public abstract virtual IIUnknownDerivedDetails GetIUnknownDerivedDetails(RuntimeTypeHandle type);
}
[CLSCompliantAttribute("False")]
public interface System.Runtime.InteropServices.Marshalling.IIUnknownInterfaceType {
    public static Guid Iid { get; }
    public static Void** ManagedVirtualMethodTable { get; }
    public static abstract virtual Guid get_Iid();
    public static abstract virtual Void** get_ManagedVirtualMethodTable();
}
[CLSCompliantAttribute("False")]
public interface System.Runtime.InteropServices.Marshalling.IIUnknownStrategy {
    public abstract virtual Void* CreateInstancePointer(Void* unknown);
    public abstract virtual int QueryInterface(Void* instancePtr, Guid& modreq(System.Runtime.InteropServices.InAttribute) iid, Void*& ppObj);
    public abstract virtual int Release(Void* instancePtr);
}
[AttributeUsageAttribute("1024")]
[CLSCompliantAttribute("False")]
public class System.Runtime.InteropServices.Marshalling.IUnknownDerivedAttribute`2 : Attribute {
    public Guid Iid { get; }
    [NullableAttribute("1")]
public Type Implementation { get; }
    public Void** ManagedVirtualMethodTable { get; }
    public sealed virtual Guid get_Iid();
    [NullableContextAttribute("1")]
public sealed virtual Type get_Implementation();
    public sealed virtual Void** get_ManagedVirtualMethodTable();
}
[NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public interface System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider {
    public abstract virtual VirtualMethodTableInfo GetVirtualMethodTableInfoForKey(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10240")]
public class System.Runtime.InteropServices.Marshalling.MarshalUsingAttribute : Attribute {
    public static string ReturnsCountValue;
    [NullableAttribute("2")]
public Type NativeType { get; }
    public string CountElementName { get; public set; }
    public int ConstantElementCount { get; public set; }
    public int ElementIndirectionDepth { get; public set; }
    public MarshalUsingAttribute(Type nativeType);
    [NullableContextAttribute("2")]
public Type get_NativeType();
    public string get_CountElementName();
    public void set_CountElementName(string value);
    public int get_ConstantElementCount();
    public void set_ConstantElementCount(int value);
    public int get_ElementIndirectionDepth();
    public void set_ElementIndirectionDepth(int value);
}
[CLSCompliantAttribute("False")]
[CustomMarshallerAttribute("System.Runtime.InteropServices.Marshalling.CustomMarshallerAttribute/GenericPlaceholder*[]", "0", "System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller`2")]
[CustomMarshallerAttribute("System.Runtime.InteropServices.Marshalling.CustomMarshallerAttribute/GenericPlaceholder*[]", "1", "System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller`2/ManagedToUnmanagedIn")]
[ContiguousCollectionMarshallerAttribute]
public static class System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller`2 : object {
    public static TUnmanagedElement* AllocateContainerForUnmanagedElements(T*[] managed, Int32& numElements);
    public static ReadOnlySpan`1<IntPtr> GetManagedValuesSource(T*[] managed);
    public static Span`1<TUnmanagedElement> GetUnmanagedValuesDestination(TUnmanagedElement* unmanaged, int numElements);
    public static T*[] AllocateContainerForManagedElements(TUnmanagedElement* unmanaged, int numElements);
    public static Span`1<IntPtr> GetManagedValuesDestination(T*[] managed);
    public static ReadOnlySpan`1<TUnmanagedElement> GetUnmanagedValuesSource(TUnmanagedElement* unmanagedValue, int numElements);
    public static void Free(TUnmanagedElement* unmanaged);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class System.Runtime.InteropServices.Marshalling.StrategyBasedComWrappers : ComWrappers {
    public static IIUnknownInterfaceDetailsStrategy DefaultIUnknownInterfaceDetailsStrategy { get; }
    public static IIUnknownStrategy DefaultIUnknownStrategy { get; }
    public static IIUnknownInterfaceDetailsStrategy get_DefaultIUnknownInterfaceDetailsStrategy();
    public static IIUnknownStrategy get_DefaultIUnknownStrategy();
    [NullableContextAttribute("0")]
protected sealed virtual ComInterfaceEntry* ComputeVtables(object obj, CreateComInterfaceFlags flags, Int32& count);
    protected virtual IIUnknownCacheStrategy CreateCacheStrategy();
    protected static IIUnknownCacheStrategy CreateDefaultCacheStrategy();
    protected sealed virtual object CreateObject(IntPtr externalComObject, CreateObjectFlags flags);
    protected virtual IIUnknownInterfaceDetailsStrategy GetOrCreateInterfaceDetailsStrategy();
    protected virtual IIUnknownStrategy GetOrCreateIUnknownStrategy();
    protected sealed virtual void ReleaseObjects(IEnumerable objects);
}
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[CLSCompliantAttribute("False")]
[CustomMarshallerAttribute("System.Runtime.InteropServices.Marshalling.CustomMarshallerAttribute/GenericPlaceholder", "0", "System.Runtime.InteropServices.Marshalling.UniqueComInterfaceMarshaller`1")]
public static class System.Runtime.InteropServices.Marshalling.UniqueComInterfaceMarshaller`1 : object {
    public static Void* ConvertToUnmanaged(T managed);
    public static T ConvertToManaged(Void* unmanaged);
    public static void Free(Void* unmanaged);
}
[CLSCompliantAttribute("False")]
[CustomMarshallerAttribute("System.String", "0", "System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller")]
public static class System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller : object {
    public static UInt16* ConvertToUnmanaged(string managed);
    public static string ConvertToManaged(UInt16* unmanaged);
    public static void Free(UInt16* unmanaged);
    [NullableContextAttribute("2")]
public static Char& modreq(System.Runtime.InteropServices.InAttribute) GetPinnableReference(string str);
}
[CLSCompliantAttribute("False")]
[CustomMarshallerAttribute("System.String", "0", "System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller")]
[CustomMarshallerAttribute("System.String", "1", "System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller/ManagedToUnmanagedIn")]
public static class System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller : object {
    public static Byte* ConvertToUnmanaged(string managed);
    public static string ConvertToManaged(Byte* unmanaged);
    public static void Free(Byte* unmanaged);
}
[IsReadOnlyAttribute]
[CLSCompliantAttribute("False")]
public class System.Runtime.InteropServices.Marshalling.VirtualMethodTableInfo : ValueType {
    private int _dummyPrimitive;
    public Void* ThisPointer { get; }
    public Void** VirtualMethodTable { get; }
    public VirtualMethodTableInfo(Void* thisPointer, Void** virtualMethodTable);
    public Void* get_ThisPointer();
    public Void** get_VirtualMethodTable();
    public void Deconstruct(Void*& thisPointer, Void**& virtualMethodTable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Runtime.InteropServices.NativeLibrary : object {
    public static void Free(IntPtr handle);
    public static IntPtr GetMainProgramHandle();
    public static IntPtr GetExport(IntPtr handle, string name);
    public static IntPtr Load(string libraryPath);
    public static IntPtr Load(string libraryName, Assembly assembly, Nullable`1<DllImportSearchPath> searchPath);
    public static void SetDllImportResolver(Assembly assembly, DllImportResolver resolver);
    public static bool TryGetExport(IntPtr handle, string name, IntPtr& address);
    public static bool TryLoad(string libraryPath, IntPtr& handle);
    public static bool TryLoad(string libraryName, Assembly assembly, Nullable`1<DllImportSearchPath> searchPath, IntPtr& handle);
}
public static class System.Runtime.InteropServices.NativeMemory : object {
    [CLSCompliantAttribute("False")]
public static Void* AlignedAlloc(UIntPtr byteCount, UIntPtr alignment);
    [CLSCompliantAttribute("False")]
public static void AlignedFree(Void* ptr);
    [CLSCompliantAttribute("False")]
public static Void* AlignedRealloc(Void* ptr, UIntPtr byteCount, UIntPtr alignment);
    [CLSCompliantAttribute("False")]
public static Void* Alloc(UIntPtr byteCount);
    [CLSCompliantAttribute("False")]
public static Void* Alloc(UIntPtr elementCount, UIntPtr elementSize);
    [CLSCompliantAttribute("False")]
public static Void* AllocZeroed(UIntPtr byteCount);
    [CLSCompliantAttribute("False")]
public static Void* AllocZeroed(UIntPtr elementCount, UIntPtr elementSize);
    [CLSCompliantAttribute("False")]
public static void Free(Void* ptr);
    [CLSCompliantAttribute("False")]
public static Void* Realloc(Void* ptr, UIntPtr byteCount);
    [CLSCompliantAttribute("False")]
public static void Clear(Void* ptr, UIntPtr byteCount);
    [CLSCompliantAttribute("False")]
public static void Copy(Void* source, Void* destination, UIntPtr byteCount);
    [CLSCompliantAttribute("False")]
public static void Fill(Void* ptr, UIntPtr byteCount, byte value);
}
[IsReadOnlyAttribute]
public class System.Runtime.InteropServices.NFloat : ValueType {
    private int _dummyPrimitive;
    public static NFloat E { get; }
    public static NFloat Epsilon { get; }
    public static NFloat MaxValue { get; }
    public static NFloat MinValue { get; }
    public static NFloat NaN { get; }
    public static NFloat NegativeInfinity { get; }
    public static NFloat NegativeZero { get; }
    public static NFloat Pi { get; }
    public static NFloat PositiveInfinity { get; }
    public static int Size { get; }
    private static NFloat System.Numerics.IAdditiveIdentity<System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat>.AdditiveIdentity { get; }
    private static NFloat System.Numerics.IBinaryNumber<System.Runtime.InteropServices.NFloat>.AllBitsSet { get; }
    private static NFloat System.Numerics.IMultiplicativeIdentity<System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat>.MultiplicativeIdentity { get; }
    private static NFloat System.Numerics.INumberBase<System.Runtime.InteropServices.NFloat>.One { get; }
    private static int System.Numerics.INumberBase<System.Runtime.InteropServices.NFloat>.Radix { get; }
    private static NFloat System.Numerics.INumberBase<System.Runtime.InteropServices.NFloat>.Zero { get; }
    private static NFloat System.Numerics.ISignedNumber<System.Runtime.InteropServices.NFloat>.NegativeOne { get; }
    public static NFloat Tau { get; }
    public double Value { get; }
    public NFloat(double value);
    public NFloat(float value);
    public static override NFloat get_E();
    public static override NFloat get_Epsilon();
    public static override NFloat get_MaxValue();
    public static override NFloat get_MinValue();
    public static override NFloat get_NaN();
    public static override NFloat get_NegativeInfinity();
    public static override NFloat get_NegativeZero();
    public static override NFloat get_Pi();
    public static override NFloat get_PositiveInfinity();
    public static int get_Size();
    private static override NFloat System.Numerics.IAdditiveIdentity<System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat>.get_AdditiveIdentity();
    private static override NFloat System.Numerics.IBinaryNumber<System.Runtime.InteropServices.NFloat>.get_AllBitsSet();
    private static override NFloat System.Numerics.IMultiplicativeIdentity<System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat>.get_MultiplicativeIdentity();
    private static override NFloat System.Numerics.INumberBase<System.Runtime.InteropServices.NFloat>.get_One();
    private static override int System.Numerics.INumberBase<System.Runtime.InteropServices.NFloat>.get_Radix();
    private static override NFloat System.Numerics.INumberBase<System.Runtime.InteropServices.NFloat>.get_Zero();
    private static override NFloat System.Numerics.ISignedNumber<System.Runtime.InteropServices.NFloat>.get_NegativeOne();
    public static override NFloat get_Tau();
    public double get_Value();
    public static override NFloat Abs(NFloat value);
    public static override NFloat Acos(NFloat x);
    public static override NFloat Acosh(NFloat x);
    public static override NFloat AcosPi(NFloat x);
    public static override NFloat Asin(NFloat x);
    public static override NFloat Asinh(NFloat x);
    public static override NFloat AsinPi(NFloat x);
    public static override NFloat Atan(NFloat x);
    public static override NFloat Atan2(NFloat y, NFloat x);
    public static override NFloat Atan2Pi(NFloat y, NFloat x);
    public static override NFloat Atanh(NFloat x);
    public static override NFloat AtanPi(NFloat x);
    public static override NFloat BitDecrement(NFloat x);
    public static override NFloat BitIncrement(NFloat x);
    public static override NFloat Cbrt(NFloat x);
    public static override NFloat Ceiling(NFloat x);
    public static override NFloat Clamp(NFloat value, NFloat min, NFloat max);
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(object obj);
    public sealed virtual int CompareTo(NFloat other);
    public static override NFloat CopySign(NFloat value, NFloat sign);
    public static override NFloat Cos(NFloat x);
    public static override NFloat Cosh(NFloat x);
    public static override NFloat CosPi(NFloat x);
    [NullableContextAttribute("1")]
public static override NFloat CreateChecked(TOther value);
    [NullableContextAttribute("1")]
public static override NFloat CreateSaturating(TOther value);
    [NullableContextAttribute("1")]
public static override NFloat CreateTruncating(TOther value);
    public static override NFloat DegreesToRadians(NFloat degrees);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(NFloat other);
    public static override NFloat Exp(NFloat x);
    public static override NFloat Exp10(NFloat x);
    public static override NFloat Exp10M1(NFloat x);
    public static override NFloat Exp2(NFloat x);
    public static override NFloat Exp2M1(NFloat x);
    public static override NFloat ExpM1(NFloat x);
    public static override NFloat Floor(NFloat x);
    public static override NFloat FusedMultiplyAdd(NFloat left, NFloat right, NFloat addend);
    public virtual int GetHashCode();
    public static override NFloat Hypot(NFloat x, NFloat y);
    public static override NFloat Ieee754Remainder(NFloat left, NFloat right);
    public static override int ILogB(NFloat x);
    public static override bool IsEvenInteger(NFloat value);
    public static override bool IsFinite(NFloat value);
    public static override bool IsInfinity(NFloat value);
    public static override bool IsInteger(NFloat value);
    public static override bool IsNaN(NFloat value);
    public static override bool IsNegative(NFloat value);
    public static override bool IsNegativeInfinity(NFloat value);
    public static override bool IsNormal(NFloat value);
    public static override bool IsOddInteger(NFloat value);
    public static override bool IsPositive(NFloat value);
    public static override bool IsPositiveInfinity(NFloat value);
    public static override bool IsPow2(NFloat value);
    public static override bool IsRealNumber(NFloat value);
    public static override bool IsSubnormal(NFloat value);
    public static override NFloat Lerp(NFloat value1, NFloat value2, NFloat amount);
    public static override NFloat Log(NFloat x);
    public static override NFloat Log(NFloat x, NFloat newBase);
    public static override NFloat Log10(NFloat x);
    public static override NFloat Log10P1(NFloat x);
    public static override NFloat Log2(NFloat value);
    public static override NFloat Log2P1(NFloat x);
    public static override NFloat LogP1(NFloat x);
    public static override NFloat Max(NFloat x, NFloat y);
    public static override NFloat MaxMagnitude(NFloat x, NFloat y);
    public static override NFloat MaxMagnitudeNumber(NFloat x, NFloat y);
    public static override NFloat MaxNumber(NFloat x, NFloat y);
    public static override NFloat Min(NFloat x, NFloat y);
    public static override NFloat MinMagnitude(NFloat x, NFloat y);
    public static override NFloat MinMagnitudeNumber(NFloat x, NFloat y);
    public static override NFloat MinNumber(NFloat x, NFloat y);
    public static override NFloat op_Addition(NFloat left, NFloat right);
    public static byte op_CheckedExplicit(NFloat value);
    public static char op_CheckedExplicit(NFloat value);
    public static short op_CheckedExplicit(NFloat value);
    public static int op_CheckedExplicit(NFloat value);
    public static long op_CheckedExplicit(NFloat value);
    public static Int128 op_CheckedExplicit(NFloat value);
    public static IntPtr op_CheckedExplicit(NFloat value);
    [CLSCompliantAttribute("False")]
public static sbyte op_CheckedExplicit(NFloat value);
    [CLSCompliantAttribute("False")]
public static ushort op_CheckedExplicit(NFloat value);
    [CLSCompliantAttribute("False")]
public static UInt32 op_CheckedExplicit(NFloat value);
    [CLSCompliantAttribute("False")]
public static ulong op_CheckedExplicit(NFloat value);
    [CLSCompliantAttribute("False")]
public static UInt128 op_CheckedExplicit(NFloat value);
    [CLSCompliantAttribute("False")]
public static UIntPtr op_CheckedExplicit(NFloat value);
    public static override NFloat op_Decrement(NFloat value);
    public static override NFloat op_Division(NFloat left, NFloat right);
    public static override bool op_Equality(NFloat left, NFloat right);
    public static NFloat op_Explicit(decimal value);
    public static NFloat op_Explicit(double value);
    public static NFloat op_Explicit(Int128 value);
    public static byte op_Explicit(NFloat value);
    public static char op_Explicit(NFloat value);
    public static decimal op_Explicit(NFloat value);
    public static Half op_Explicit(NFloat value);
    public static Int128 op_Explicit(NFloat value);
    public static short op_Explicit(NFloat value);
    public static int op_Explicit(NFloat value);
    public static long op_Explicit(NFloat value);
    public static IntPtr op_Explicit(NFloat value);
    [CLSCompliantAttribute("False")]
public static sbyte op_Explicit(NFloat value);
    public static float op_Explicit(NFloat value);
    [CLSCompliantAttribute("False")]
public static UInt128 op_Explicit(NFloat value);
    [CLSCompliantAttribute("False")]
public static ushort op_Explicit(NFloat value);
    [CLSCompliantAttribute("False")]
public static UInt32 op_Explicit(NFloat value);
    [CLSCompliantAttribute("False")]
public static ulong op_Explicit(NFloat value);
    [CLSCompliantAttribute("False")]
public static UIntPtr op_Explicit(NFloat value);
    [CLSCompliantAttribute("False")]
public static NFloat op_Explicit(UInt128 value);
    public static override bool op_GreaterThan(NFloat left, NFloat right);
    public static override bool op_GreaterThanOrEqual(NFloat left, NFloat right);
    public static NFloat op_Implicit(byte value);
    public static NFloat op_Implicit(char value);
    public static NFloat op_Implicit(short value);
    public static NFloat op_Implicit(int value);
    public static NFloat op_Implicit(long value);
    public static NFloat op_Implicit(IntPtr value);
    public static NFloat op_Implicit(Half value);
    public static double op_Implicit(NFloat value);
    [CLSCompliantAttribute("False")]
public static NFloat op_Implicit(sbyte value);
    public static NFloat op_Implicit(float value);
    [CLSCompliantAttribute("False")]
public static NFloat op_Implicit(ushort value);
    [CLSCompliantAttribute("False")]
public static NFloat op_Implicit(UInt32 value);
    [CLSCompliantAttribute("False")]
public static NFloat op_Implicit(ulong value);
    [CLSCompliantAttribute("False")]
public static NFloat op_Implicit(UIntPtr value);
    public static override NFloat op_Increment(NFloat value);
    public static override bool op_Inequality(NFloat left, NFloat right);
    public static override bool op_LessThan(NFloat left, NFloat right);
    public static override bool op_LessThanOrEqual(NFloat left, NFloat right);
    public static override NFloat op_Modulus(NFloat left, NFloat right);
    public static override NFloat op_Multiply(NFloat left, NFloat right);
    public static override NFloat op_Subtraction(NFloat left, NFloat right);
    public static override NFloat op_UnaryNegation(NFloat value);
    public static override NFloat op_UnaryPlus(NFloat value);
    public static override NFloat Parse(ReadOnlySpan`1<byte> utf8Text, NumberStyles style, IFormatProvider provider);
    public static override NFloat Parse(ReadOnlySpan`1<byte> utf8Text, IFormatProvider provider);
    public static override NFloat Parse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider);
    public static override NFloat Parse(ReadOnlySpan`1<char> s, IFormatProvider provider);
    [NullableContextAttribute("1")]
public static NFloat Parse(string s);
    [NullableContextAttribute("1")]
public static NFloat Parse(string s, NumberStyles style);
    [NullableContextAttribute("1")]
public static override NFloat Parse(string s, NumberStyles style, IFormatProvider provider);
    [NullableContextAttribute("1")]
public static override NFloat Parse(string s, IFormatProvider provider);
    public static override NFloat Pow(NFloat x, NFloat y);
    public static override NFloat RadiansToDegrees(NFloat radians);
    public static override NFloat ReciprocalEstimate(NFloat x);
    public static override NFloat ReciprocalSqrtEstimate(NFloat x);
    public static override NFloat RootN(NFloat x, int n);
    public static override NFloat Round(NFloat x);
    public static override NFloat Round(NFloat x, int digits);
    public static override NFloat Round(NFloat x, int digits, MidpointRounding mode);
    public static override NFloat Round(NFloat x, MidpointRounding mode);
    public static override NFloat ScaleB(NFloat x, int n);
    public static override int Sign(NFloat value);
    public static override NFloat Sin(NFloat x);
    public static override ValueTuple`2<NFloat, NFloat> SinCos(NFloat x);
    public static override ValueTuple`2<NFloat, NFloat> SinCosPi(NFloat x);
    public static override NFloat Sinh(NFloat x);
    public static override NFloat SinPi(NFloat x);
    public static override NFloat Sqrt(NFloat x);
    private static override NFloat System.Numerics.IAdditionOperators<System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat>.op_CheckedAddition(NFloat left, NFloat right);
    private static override NFloat System.Numerics.IBitwiseOperators<System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat>.op_BitwiseAnd(NFloat left, NFloat right);
    private static override NFloat System.Numerics.IBitwiseOperators<System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat>.op_BitwiseOr(NFloat left, NFloat right);
    private static override NFloat System.Numerics.IBitwiseOperators<System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat>.op_ExclusiveOr(NFloat left, NFloat right);
    private static override NFloat System.Numerics.IBitwiseOperators<System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat>.op_OnesComplement(NFloat value);
    private static override NFloat System.Numerics.IDecrementOperators<System.Runtime.InteropServices.NFloat>.op_CheckedDecrement(NFloat value);
    private static override NFloat System.Numerics.IDivisionOperators<System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat>.op_CheckedDivision(NFloat left, NFloat right);
    private sealed virtual override int System.Numerics.IFloatingPoint<System.Runtime.InteropServices.NFloat>.GetExponentByteCount();
    private sealed virtual override int System.Numerics.IFloatingPoint<System.Runtime.InteropServices.NFloat>.GetExponentShortestBitLength();
    private sealed virtual override int System.Numerics.IFloatingPoint<System.Runtime.InteropServices.NFloat>.GetSignificandBitLength();
    private sealed virtual override int System.Numerics.IFloatingPoint<System.Runtime.InteropServices.NFloat>.GetSignificandByteCount();
    private sealed virtual override bool System.Numerics.IFloatingPoint<System.Runtime.InteropServices.NFloat>.TryWriteExponentBigEndian(Span`1<byte> destination, Int32& bytesWritten);
    private sealed virtual override bool System.Numerics.IFloatingPoint<System.Runtime.InteropServices.NFloat>.TryWriteExponentLittleEndian(Span`1<byte> destination, Int32& bytesWritten);
    private sealed virtual override bool System.Numerics.IFloatingPoint<System.Runtime.InteropServices.NFloat>.TryWriteSignificandBigEndian(Span`1<byte> destination, Int32& bytesWritten);
    private sealed virtual override bool System.Numerics.IFloatingPoint<System.Runtime.InteropServices.NFloat>.TryWriteSignificandLittleEndian(Span`1<byte> destination, Int32& bytesWritten);
    private static override NFloat System.Numerics.IIncrementOperators<System.Runtime.InteropServices.NFloat>.op_CheckedIncrement(NFloat value);
    private static override NFloat System.Numerics.IMultiplyOperators<System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat>.op_CheckedMultiply(NFloat left, NFloat right);
    private static override bool System.Numerics.INumberBase<System.Runtime.InteropServices.NFloat>.IsCanonical(NFloat value);
    private static override bool System.Numerics.INumberBase<System.Runtime.InteropServices.NFloat>.IsComplexNumber(NFloat value);
    private static override bool System.Numerics.INumberBase<System.Runtime.InteropServices.NFloat>.IsImaginaryNumber(NFloat value);
    private static override bool System.Numerics.INumberBase<System.Runtime.InteropServices.NFloat>.IsZero(NFloat value);
    private static override bool System.Numerics.INumberBase<System.Runtime.InteropServices.NFloat>.TryConvertFromChecked(TOther value, NFloat& result);
    private static override bool System.Numerics.INumberBase<System.Runtime.InteropServices.NFloat>.TryConvertFromSaturating(TOther value, NFloat& result);
    private static override bool System.Numerics.INumberBase<System.Runtime.InteropServices.NFloat>.TryConvertFromTruncating(TOther value, NFloat& result);
    private static override bool System.Numerics.INumberBase<System.Runtime.InteropServices.NFloat>.TryConvertToChecked(NFloat value, TOther& result);
    private static override bool System.Numerics.INumberBase<System.Runtime.InteropServices.NFloat>.TryConvertToSaturating(NFloat value, TOther& result);
    private static override bool System.Numerics.INumberBase<System.Runtime.InteropServices.NFloat>.TryConvertToTruncating(NFloat value, TOther& result);
    private static override NFloat System.Numerics.ISubtractionOperators<System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat>.op_CheckedSubtraction(NFloat left, NFloat right);
    private static override NFloat System.Numerics.IUnaryNegationOperators<System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat>.op_CheckedUnaryNegation(NFloat value);
    public static override NFloat Tan(NFloat x);
    public static override NFloat Tanh(NFloat x);
    public static override NFloat TanPi(NFloat x);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public string ToString(IFormatProvider provider);
    [NullableContextAttribute("1")]
public string ToString(string format);
    [NullableContextAttribute("2")]
public sealed virtual string ToString(string format, IFormatProvider provider);
    public static override NFloat Truncate(NFloat x);
    public sealed virtual bool TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    public sealed virtual bool TryFormat(Span`1<byte> utf8Destination, Int32& bytesWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    public static override bool TryParse(ReadOnlySpan`1<byte> utf8Text, NumberStyles style, IFormatProvider provider, NFloat& result);
    public static override bool TryParse(ReadOnlySpan`1<byte> utf8Text, IFormatProvider provider, NFloat& result);
    public static bool TryParse(ReadOnlySpan`1<byte> utf8Text, NFloat& result);
    public static override bool TryParse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider, NFloat& result);
    public static override bool TryParse(ReadOnlySpan`1<char> s, IFormatProvider provider, NFloat& result);
    public static bool TryParse(ReadOnlySpan`1<char> s, NFloat& result);
    [NullableContextAttribute("2")]
public static override bool TryParse(string s, NumberStyles style, IFormatProvider provider, NFloat& result);
    [NullableContextAttribute("2")]
public static override bool TryParse(string s, IFormatProvider provider, NFloat& result);
    [NullableContextAttribute("2")]
public static bool TryParse(string s, NFloat& result);
}
[SupportedOSPlatformAttribute("macos")]
[CLSCompliantAttribute("False")]
public static class System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal : object {
    public static void Initialize(method beginEndCallback, method isReferencedCallback, method trackedObjectEnteredFinalization, UnhandledExceptionPropagationHandler unhandledExceptionPropagationHandler);
    public static GCHandle CreateReferenceTrackingHandle(object obj, Span`1& taggedMemory);
    public static void SetMessageSendCallback(MessageSendFunction msgSendFunction, IntPtr func);
    [NullableContextAttribute("2")]
public static void SetMessageSendPendingException(Exception exception);
}
[SupportedOSPlatformAttribute("macos")]
[AttributeUsageAttribute("4")]
public class System.Runtime.InteropServices.ObjectiveC.ObjectiveCTrackedTypeAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
public class System.Runtime.InteropServices.OptionalAttribute : Attribute {
}
public enum System.Runtime.InteropServices.PosixSignal : Enum {
    public int value__;
    [UnsupportedOSPlatformAttribute("windows")]
public static PosixSignal SIGTSTP;
    [UnsupportedOSPlatformAttribute("windows")]
public static PosixSignal SIGTTOU;
    [UnsupportedOSPlatformAttribute("windows")]
public static PosixSignal SIGTTIN;
    [UnsupportedOSPlatformAttribute("windows")]
public static PosixSignal SIGWINCH;
    [UnsupportedOSPlatformAttribute("windows")]
public static PosixSignal SIGCONT;
    [UnsupportedOSPlatformAttribute("windows")]
public static PosixSignal SIGCHLD;
    public static PosixSignal SIGTERM;
    public static PosixSignal SIGQUIT;
    public static PosixSignal SIGINT;
    public static PosixSignal SIGHUP;
}
public class System.Runtime.InteropServices.PosixSignalContext : object {
    public bool Cancel { get; public set; }
    public PosixSignal Signal { get; }
    public PosixSignalContext(PosixSignal signal);
    public bool get_Cancel();
    public void set_Cancel(bool value);
    public PosixSignal get_Signal();
}
public class System.Runtime.InteropServices.PosixSignalRegistration : object {
    [NullableContextAttribute("1")]
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static PosixSignalRegistration Create(PosixSignal signal, Action`1<PosixSignalContext> handler);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
[AttributeUsageAttribute("64")]
public class System.Runtime.InteropServices.PreserveSigAttribute : Attribute {
}
[AttributeUsageAttribute("1")]
public class System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute : Attribute {
    public int MajorVersion { get; }
    public int MinorVersion { get; }
    public PrimaryInteropAssemblyAttribute(int major, int minor);
    public int get_MajorVersion();
    public int get_MinorVersion();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class System.Runtime.InteropServices.ProgIdAttribute : Attribute {
    public string Value { get; }
    public ProgIdAttribute(string progId);
    public string get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Runtime.InteropServices.RuntimeEnvironment : object {
    [ObsoleteAttribute("RuntimeEnvironment members SystemConfigurationFile, GetRuntimeInterfaceAsIntPtr, and GetRuntimeInterfaceAsObject are not supported and throw PlatformNotSupportedException.")]
public static string SystemConfigurationFile { get; }
    public static string get_SystemConfigurationFile();
    public static bool FromGlobalAccessCache(Assembly a);
    public static string GetRuntimeDirectory();
    [ObsoleteAttribute("RuntimeEnvironment members SystemConfigurationFile, GetRuntimeInterfaceAsIntPtr, and GetRuntimeInterfaceAsObject are not supported and throw PlatformNotSupportedException.")]
public static IntPtr GetRuntimeInterfaceAsIntPtr(Guid clsid, Guid riid);
    [ObsoleteAttribute("RuntimeEnvironment members SystemConfigurationFile, GetRuntimeInterfaceAsIntPtr, and GetRuntimeInterfaceAsObject are not supported and throw PlatformNotSupportedException.")]
public static object GetRuntimeInterfaceAsObject(Guid clsid, Guid riid);
    public static string GetSystemVersion();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Runtime.InteropServices.SafeArrayRankMismatchException : SystemException {
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected SafeArrayRankMismatchException(SerializationInfo info, StreamingContext context);
    public SafeArrayRankMismatchException(string message);
    public SafeArrayRankMismatchException(string message, Exception inner);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Runtime.InteropServices.SafeArrayTypeMismatchException : SystemException {
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected SafeArrayTypeMismatchException(SerializationInfo info, StreamingContext context);
    public SafeArrayTypeMismatchException(string message);
    public SafeArrayTypeMismatchException(string message, Exception inner);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Runtime.InteropServices.SEHException : ExternalException {
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected SEHException(SerializationInfo info, StreamingContext context);
    public SEHException(string message);
    public SEHException(string message, Exception inner);
    public virtual bool CanResume();
}
public class System.Runtime.InteropServices.StandardOleMarshalObject : MarshalByRefObject {
}
public enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("5144")]
public class System.Runtime.InteropServices.TypeIdentifierAttribute : Attribute {
    public string Identifier { get; }
    public string Scope { get; }
    public TypeIdentifierAttribute(string scope, string identifier);
    public string get_Identifier();
    public string get_Scope();
}
[AttributeUsageAttribute("64")]
public class System.Runtime.InteropServices.TypeLibFuncAttribute : Attribute {
    public TypeLibFuncFlags Value { get; }
    public TypeLibFuncAttribute(short flags);
    public TypeLibFuncAttribute(TypeLibFuncFlags flags);
    public TypeLibFuncFlags get_Value();
}
[FlagsAttribute]
public enum System.Runtime.InteropServices.TypeLibFuncFlags : Enum {
    public int value__;
    public static TypeLibFuncFlags FRestricted;
    public static TypeLibFuncFlags FSource;
    public static TypeLibFuncFlags FBindable;
    public static TypeLibFuncFlags FRequestEdit;
    public static TypeLibFuncFlags FDisplayBind;
    public static TypeLibFuncFlags FDefaultBind;
    public static TypeLibFuncFlags FHidden;
    public static TypeLibFuncFlags FUsesGetLastError;
    public static TypeLibFuncFlags FDefaultCollelem;
    public static TypeLibFuncFlags FUiDefault;
    public static TypeLibFuncFlags FNonBrowsable;
    public static TypeLibFuncFlags FReplaceable;
    public static TypeLibFuncFlags FImmediateBind;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1024")]
public class System.Runtime.InteropServices.TypeLibImportClassAttribute : Attribute {
    public string Value { get; }
    public TypeLibImportClassAttribute(Type importClass);
    public string get_Value();
}
[AttributeUsageAttribute("1052")]
public class System.Runtime.InteropServices.TypeLibTypeAttribute : Attribute {
    public TypeLibTypeFlags Value { get; }
    public TypeLibTypeAttribute(short flags);
    public TypeLibTypeAttribute(TypeLibTypeFlags flags);
    public TypeLibTypeFlags get_Value();
}
[FlagsAttribute]
public enum System.Runtime.InteropServices.TypeLibTypeFlags : Enum {
    public int value__;
    public static TypeLibTypeFlags FAppObject;
    public static TypeLibTypeFlags FCanCreate;
    public static TypeLibTypeFlags FLicensed;
    public static TypeLibTypeFlags FPreDeclId;
    public static TypeLibTypeFlags FHidden;
    public static TypeLibTypeFlags FControl;
    public static TypeLibTypeFlags FDual;
    public static TypeLibTypeFlags FNonExtensible;
    public static TypeLibTypeFlags FOleAutomation;
    public static TypeLibTypeFlags FRestricted;
    public static TypeLibTypeFlags FAggregatable;
    public static TypeLibTypeFlags FReplaceable;
    public static TypeLibTypeFlags FDispatchable;
    public static TypeLibTypeFlags FReverseBind;
}
[AttributeUsageAttribute("256")]
public class System.Runtime.InteropServices.TypeLibVarAttribute : Attribute {
    public TypeLibVarFlags Value { get; }
    public TypeLibVarAttribute(short flags);
    public TypeLibVarAttribute(TypeLibVarFlags flags);
    public TypeLibVarFlags get_Value();
}
[FlagsAttribute]
public enum System.Runtime.InteropServices.TypeLibVarFlags : Enum {
    public int value__;
    public static TypeLibVarFlags FReadOnly;
    public static TypeLibVarFlags FSource;
    public static TypeLibVarFlags FBindable;
    public static TypeLibVarFlags FRequestEdit;
    public static TypeLibVarFlags FDisplayBind;
    public static TypeLibVarFlags FDefaultBind;
    public static TypeLibVarFlags FHidden;
    public static TypeLibVarFlags FRestricted;
    public static TypeLibVarFlags FDefaultCollelem;
    public static TypeLibVarFlags FUiDefault;
    public static TypeLibVarFlags FNonBrowsable;
    public static TypeLibVarFlags FReplaceable;
    public static TypeLibVarFlags FImmediateBind;
}
[AttributeUsageAttribute("1")]
public class System.Runtime.InteropServices.TypeLibVersionAttribute : Attribute {
    public int MajorVersion { get; }
    public int MinorVersion { get; }
    public TypeLibVersionAttribute(int major, int minor);
    public int get_MajorVersion();
    public int get_MinorVersion();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.UnknownWrapper : object {
    public object WrappedObject { get; }
    public UnknownWrapper(object obj);
    public object get_WrappedObject();
}
[AttributeUsageAttribute("64")]
public class System.Runtime.InteropServices.UnmanagedCallConvAttribute : Attribute {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type[] CallConvs;
}
[AttributeUsageAttribute("64")]
public class System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute : Attribute {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type[] CallConvs;
    [NullableAttribute("2")]
public string EntryPoint;
}
[AttributeUsageAttribute("4096")]
public class System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute : Attribute {
    public bool BestFitMapping;
    public CharSet CharSet;
    public bool SetLastError;
    public bool ThrowOnUnmappableChar;
    public CallingConvention CallingConvention { get; }
    public UnmanagedFunctionPointerAttribute(CallingConvention callingConvention);
    public CallingConvention get_CallingConvention();
}
[EditorBrowsableAttribute("1")]
public enum System.Runtime.InteropServices.VarEnum : Enum {
    public int value__;
    public static VarEnum VT_EMPTY;
    public static VarEnum VT_NULL;
    public static VarEnum VT_I2;
    public static VarEnum VT_I4;
    public static VarEnum VT_R4;
    public static VarEnum VT_R8;
    public static VarEnum VT_CY;
    public static VarEnum VT_DATE;
    public static VarEnum VT_BSTR;
    public static VarEnum VT_DISPATCH;
    public static VarEnum VT_ERROR;
    public static VarEnum VT_BOOL;
    public static VarEnum VT_VARIANT;
    public static VarEnum VT_UNKNOWN;
    public static VarEnum VT_DECIMAL;
    public static VarEnum VT_I1;
    public static VarEnum VT_UI1;
    public static VarEnum VT_UI2;
    public static VarEnum VT_UI4;
    public static VarEnum VT_I8;
    public static VarEnum VT_UI8;
    public static VarEnum VT_INT;
    public static VarEnum VT_UINT;
    public static VarEnum VT_VOID;
    public static VarEnum VT_HRESULT;
    public static VarEnum VT_PTR;
    public static VarEnum VT_SAFEARRAY;
    public static VarEnum VT_CARRAY;
    public static VarEnum VT_USERDEFINED;
    public static VarEnum VT_LPSTR;
    public static VarEnum VT_LPWSTR;
    public static VarEnum VT_RECORD;
    public static VarEnum VT_FILETIME;
    public static VarEnum VT_BLOB;
    public static VarEnum VT_STREAM;
    public static VarEnum VT_STORAGE;
    public static VarEnum VT_STREAMED_OBJECT;
    public static VarEnum VT_STORED_OBJECT;
    public static VarEnum VT_BLOB_OBJECT;
    public static VarEnum VT_CF;
    public static VarEnum VT_CLSID;
    public static VarEnum VT_VECTOR;
    public static VarEnum VT_ARRAY;
    public static VarEnum VT_BYREF;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.VariantWrapper : object {
    public object WrappedObject { get; }
    public VariantWrapper(object obj);
    public object get_WrappedObject();
}
public class System.Security.SecureString : object {
    public int Length { get; }
    [CLSCompliantAttribute("False")]
public SecureString(Char* value, int length);
    public int get_Length();
    public void AppendChar(char c);
    public void Clear();
    [NullableContextAttribute("1")]
public SecureString Copy();
    public sealed virtual void Dispose();
    public void InsertAt(int index, char c);
    public bool IsReadOnly();
    public void MakeReadOnly();
    public void RemoveAt(int index);
    public void SetAt(int index, char c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Security.SecureStringMarshal : object {
    public static IntPtr SecureStringToCoTaskMemAnsi(SecureString s);
    public static IntPtr SecureStringToCoTaskMemUnicode(SecureString s);
    public static IntPtr SecureStringToGlobalAllocAnsi(SecureString s);
    public static IntPtr SecureStringToGlobalAllocUnicode(SecureString s);
}
