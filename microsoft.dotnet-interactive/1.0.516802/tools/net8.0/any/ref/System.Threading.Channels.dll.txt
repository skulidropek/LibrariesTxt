public enum System.Threading.Channels.BoundedChannelFullMode : Enum {
    public int value__;
    public static BoundedChannelFullMode Wait;
    public static BoundedChannelFullMode DropNewest;
    public static BoundedChannelFullMode DropOldest;
    public static BoundedChannelFullMode DropWrite;
}
public class System.Threading.Channels.BoundedChannelOptions : ChannelOptions {
    public int Capacity { get; public set; }
    public BoundedChannelFullMode FullMode { get; public set; }
    public BoundedChannelOptions(int capacity);
    public int get_Capacity();
    public void set_Capacity(int value);
    public BoundedChannelFullMode get_FullMode();
    public void set_FullMode(BoundedChannelFullMode value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Threading.Channels.Channel : object {
    public static Channel`1<T> CreateBounded(int capacity);
    public static Channel`1<T> CreateBounded(BoundedChannelOptions options);
    public static Channel`1<T> CreateBounded(BoundedChannelOptions options, Action`1<T> itemDropped);
    public static Channel`1<T> CreateUnbounded();
    public static Channel`1<T> CreateUnbounded(UnboundedChannelOptions options);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class System.Threading.Channels.Channel`1 : Channel`2<T, T> {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Threading.Channels.Channel`2 : object {
    public ChannelReader`1<TRead> Reader { get; protected set; }
    public ChannelWriter`1<TWrite> Writer { get; protected set; }
    public ChannelReader`1<TRead> get_Reader();
    protected void set_Reader(ChannelReader`1<TRead> value);
    public ChannelWriter`1<TWrite> get_Writer();
    protected void set_Writer(ChannelWriter`1<TWrite> value);
    public static ChannelReader`1<TRead> op_Implicit(Channel`2<TWrite, TRead> channel);
    public static ChannelWriter`1<TWrite> op_Implicit(Channel`2<TWrite, TRead> channel);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Threading.Channels.ChannelClosedException : InvalidOperationException {
    public ChannelClosedException(Exception innerException);
    public ChannelClosedException(string message);
    public ChannelClosedException(string message, Exception innerException);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected ChannelClosedException(SerializationInfo info, StreamingContext context);
}
public abstract class System.Threading.Channels.ChannelOptions : object {
    public bool AllowSynchronousContinuations { get; public set; }
    public bool SingleReader { get; public set; }
    public bool SingleWriter { get; public set; }
    public bool get_AllowSynchronousContinuations();
    public void set_AllowSynchronousContinuations(bool value);
    public bool get_SingleReader();
    public void set_SingleReader(bool value);
    public bool get_SingleWriter();
    public void set_SingleWriter(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Threading.Channels.ChannelReader`1 : object {
    public bool CanCount { get; }
    public bool CanPeek { get; }
    public Task Completion { get; }
    public int Count { get; }
    public virtual bool get_CanCount();
    public virtual bool get_CanPeek();
    public virtual Task get_Completion();
    public virtual int get_Count();
    public virtual ValueTask`1<T> ReadAsync(CancellationToken cancellationToken);
    public virtual bool TryPeek(T& item);
    public abstract virtual bool TryRead(T& item);
    [NullableContextAttribute("0")]
public abstract virtual ValueTask`1<bool> WaitToReadAsync(CancellationToken cancellationToken);
    public virtual IAsyncEnumerable`1<T> ReadAllAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class System.Threading.Channels.ChannelWriter`1 : object {
    public void Complete(Exception error);
    public virtual bool TryComplete(Exception error);
    [NullableContextAttribute("1")]
public abstract virtual bool TryWrite(T item);
    [NullableContextAttribute("0")]
public abstract virtual ValueTask`1<bool> WaitToWriteAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public virtual ValueTask WriteAsync(T item, CancellationToken cancellationToken);
}
public class System.Threading.Channels.UnboundedChannelOptions : ChannelOptions {
}
