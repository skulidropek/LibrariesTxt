[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.CanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    public string Contract { get; }
    public bool ForceFullStates { get; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("4320")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    [NotNullAttribute]
public string FormatParameterName { get; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; }
    public ImplicitUseTargetFlags TargetFlags { get; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
}
public static class Microsoft.EntityFrameworkCore.Design.DbContextActivator : object {
    public static DbContext CreateInstance(Type contextType, Assembly startupAssembly, IOperationReportHandler reportHandler);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Design.DesignTimeServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddEntityFrameworkDesignTimeServices(IServiceCollection services, IOperationReporter reporter, Func`1<IServiceProvider> applicationServiceProviderAccessor);
    [ExtensionAttribute]
public static IServiceCollection AddDbContextDesignTimeServices(IServiceCollection services, DbContext context);
}
public interface Microsoft.EntityFrameworkCore.Design.ICSharpHelper {
    public abstract virtual string Fragment(MethodCallCodeFragment fragment);
    public abstract virtual string Identifier(string name, ICollection`1<string> scope);
    public abstract virtual string Lambda(IReadOnlyList`1<string> properties);
    public abstract virtual string Literal(Object[0...,0...] values);
    public abstract virtual string Literal(Nullable`1<T> value);
    public abstract virtual string Literal(bool value);
    public abstract virtual string Literal(byte value);
    public abstract virtual string Literal(char value);
    public abstract virtual string Literal(DateTime value);
    public abstract virtual string Literal(DateTimeOffset value);
    public abstract virtual string Literal(decimal value);
    public abstract virtual string Literal(double value);
    public abstract virtual string Literal(Enum value);
    public abstract virtual string Literal(float value);
    public abstract virtual string Literal(Guid value);
    public abstract virtual string Literal(int value);
    public abstract virtual string Literal(long value);
    public abstract virtual string Literal(sbyte value);
    public abstract virtual string Literal(short value);
    public abstract virtual string Literal(string value);
    public abstract virtual string Literal(TimeSpan value);
    public abstract virtual string Literal(UInt32 value);
    public abstract virtual string Literal(ulong value);
    public abstract virtual string Literal(ushort value);
    public abstract virtual string Literal(T[] values, bool vertical);
    public abstract virtual string Namespace(String[] name);
    public abstract virtual string Reference(Type type);
    public abstract virtual string UnknownLiteral(object value);
}
public interface Microsoft.EntityFrameworkCore.Design.ILanguageBasedService {
    public string Language { get; }
    public abstract virtual string get_Language();
}
public class Microsoft.EntityFrameworkCore.Design.Internal.AppServiceProviderFactory : object {
    private Assembly _startupAssembly;
    private IOperationReporter _reporter;
    public AppServiceProviderFactory(Assembly startupAssembly, IOperationReporter reporter);
    public virtual IServiceProvider Create(String[] args);
    private IServiceProvider CreateFromHosting(String[] args);
    private IServiceProvider CreateEmptyServiceProvider();
}
public class Microsoft.EntityFrameworkCore.Design.Internal.ContextInfo : object {
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Options>k__BackingField;
    public string ProviderName { get; public set; }
    public string DatabaseName { get; public set; }
    public string DataSource { get; public set; }
    public string Options { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_ProviderName();
    [CompilerGeneratedAttribute]
public virtual void set_ProviderName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DatabaseName();
    [CompilerGeneratedAttribute]
public virtual void set_DatabaseName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DataSource();
    [CompilerGeneratedAttribute]
public virtual void set_DataSource(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Options();
    [CompilerGeneratedAttribute]
public virtual void set_Options(string value);
}
public class Microsoft.EntityFrameworkCore.Design.Internal.CSharpHelper : object {
    private IRelationalTypeMappingSource _relationalTypeMappingSource;
    private static IReadOnlyDictionary`2<Type, string> _builtInTypes;
    private static IReadOnlyCollection`1<string> _keywords;
    private static IReadOnlyDictionary`2<Type, Func`3<CSharpHelper, object, string>> _literalFuncs;
    public CSharpHelper(IRelationalTypeMappingSource relationalTypeMappingSource);
    private static CSharpHelper();
    public virtual string Lambda(IReadOnlyList`1<string> properties);
    public virtual string Reference(Type type);
    private string Reference(Type type, bool useFullName);
    public virtual string Identifier(string name, ICollection`1<string> scope);
    public virtual string Namespace(String[] name);
    public virtual string Literal(string value);
    public virtual string Literal(bool value);
    public virtual string Literal(byte value);
    public virtual string Literal(char value);
    public virtual string Literal(DateTime value);
    public virtual string Literal(DateTimeOffset value);
    public virtual string Literal(decimal value);
    public virtual string Literal(double value);
    private static string EnsureDecimalPlaces(double number);
    public virtual string Literal(float value);
    public virtual string Literal(Guid value);
    public virtual string Literal(int value);
    public virtual string Literal(long value);
    public virtual string Literal(sbyte value);
    public virtual string Literal(short value);
    public virtual string Literal(TimeSpan value);
    public virtual string Literal(UInt32 value);
    public virtual string Literal(ulong value);
    public virtual string Literal(ushort value);
    public virtual string Literal(BigInteger value);
    public virtual string Literal(Nullable`1<T> value);
    public virtual string Literal(T[] values, bool vertical);
    private string Array(Type type, IEnumerable values, bool vertical);
    public virtual string Literal(Object[0...,0...] values);
    public virtual string Literal(Enum value);
    protected virtual string GetSimpleEnumValue(Type type, string name);
    protected virtual string GetCompositeEnumValue(Type type, Enum flags);
    internal static IReadOnlyCollection`1<Enum> GetFlags(Enum flags);
    public virtual string UnknownLiteral(object value);
    private bool HandleExpression(Expression expression, StringBuilder builder, bool simple);
    private bool HandleArguments(IEnumerable`1<Expression> argumentExpressions, StringBuilder builder);
    private bool HandleList(IEnumerable`1<Expression> argumentExpressions, StringBuilder builder, bool simple);
    public virtual string Fragment(MethodCallCodeFragment fragment);
    private string Fragment(NestedClosureCodeFragment fragment);
    private static bool IsIdentifierStartCharacter(char ch);
    private static bool IsIdentifierPartCharacter(char ch);
    private static bool IsLetterChar(UnicodeCategory cat);
}
public class Microsoft.EntityFrameworkCore.Design.Internal.DatabaseOperations : object {
    private IOperationReporter _reporter;
    private string _projectDir;
    private string _rootNamespace;
    private string _language;
    private DesignTimeServicesBuilder _servicesBuilder;
    public DatabaseOperations(IOperationReporter reporter, Assembly assembly, Assembly startupAssembly, string projectDir, string rootNamespace, string language, String[] args);
    public virtual SavedModelFiles ScaffoldContext(string provider, string connectionString, string outputDir, string outputContextDir, string dbContextClassName, IEnumerable`1<string> schemas, IEnumerable`1<string> tables, bool useDataAnnotations, bool overwriteFiles, bool useDatabaseNames);
    private string GetNamespaceFromOutputPath(string directoryPath);
    private static string SubnamespaceFromOutputPath(string projectDir, string outputDir);
    private static string MakeDirRelative(string root, string path);
    private static string NormalizeDir(string path);
}
public class Microsoft.EntityFrameworkCore.Design.Internal.DbContextOperations : object {
    private IOperationReporter _reporter;
    private Assembly _assembly;
    private Assembly _startupAssembly;
    private String[] _args;
    private AppServiceProviderFactory _appServicesFactory;
    public DbContextOperations(IOperationReporter reporter, Assembly assembly, Assembly startupAssembly, String[] args);
    protected DbContextOperations(IOperationReporter reporter, Assembly assembly, Assembly startupAssembly, String[] args, AppServiceProviderFactory appServicesFactory);
    public virtual void DropDatabase(string contextType);
    public virtual string ScriptDbContext(string contextType);
    public virtual DbContext CreateContext(string contextType);
    private DbContext CreateContext(Func`1<DbContext> factory);
    public virtual IEnumerable`1<Type> GetContextTypes();
    public virtual Type GetContextType(string name);
    private IDictionary`2<Type, Func`1<DbContext>> FindContextTypes();
    public virtual ContextInfo GetContextInfo(string contextType);
    private Func`1<DbContext> FindContextFactory(Type contextType);
    private DbContext CreateContextFromFactory(Type factory);
    private KeyValuePair`2<Type, Func`1<DbContext>> FindContextType(string name);
    private static IDictionary`2<Type, Func`1<DbContext>> FilterTypes(IDictionary`2<Type, Func`1<DbContext>> types, string name, bool ignoreCase);
}
public class Microsoft.EntityFrameworkCore.Design.Internal.DesignTimeConnectionStringResolver : NamedConnectionStringResolverBase {
    private Func`1<IServiceProvider> _applicationServiceProviderAccessor;
    protected IServiceProvider ApplicationServiceProvider { get; }
    public DesignTimeConnectionStringResolver(Func`1<IServiceProvider> applicationServiceProviderAccessor);
    protected virtual IServiceProvider get_ApplicationServiceProvider();
}
public class Microsoft.EntityFrameworkCore.Design.Internal.DesignTimeServicesBuilder : object {
    private Assembly _assembly;
    private Assembly _startupAssembly;
    private IOperationReporter _reporter;
    private String[] _args;
    public DesignTimeServicesBuilder(Assembly assembly, Assembly startupAssembly, IOperationReporter reporter, String[] args);
    public virtual IServiceProvider Build(DbContext context);
    public virtual IServiceProvider Build(string provider);
    private IServiceProvider GetApplicationServices();
    private void ConfigureUserServices(IServiceCollection services);
    private void ConfigureReferencedServices(IServiceCollection services, string provider);
    private void ConfigureProviderServices(string provider, IServiceCollection services, bool throwOnError);
    private static void ConfigureDesignTimeServices(Type designTimeServicesType, IServiceCollection services);
}
public interface Microsoft.EntityFrameworkCore.Design.Internal.IOperationReporter {
    public abstract virtual void WriteError(string message);
    public abstract virtual void WriteWarning(string message);
    public abstract virtual void WriteInformation(string message);
    public abstract virtual void WriteVerbose(string message);
}
public abstract class Microsoft.EntityFrameworkCore.Design.Internal.LanguageBasedSelector`1 : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Services>k__BackingField;
    protected IEnumerable`1<T> Services { get; }
    protected LanguageBasedSelector`1(IEnumerable`1<T> services);
    [CompilerGeneratedAttribute]
protected virtual IEnumerable`1<T> get_Services();
    public virtual T Select(string language);
}
public class Microsoft.EntityFrameworkCore.Design.Internal.MigrationInfo : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Id { get; public set; }
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
}
public class Microsoft.EntityFrameworkCore.Design.Internal.MigrationsOperations : object {
    private IOperationReporter _reporter;
    private Assembly _assembly;
    private string _projectDir;
    private string _rootNamespace;
    private string _language;
    private DesignTimeServicesBuilder _servicesBuilder;
    private DbContextOperations _contextOperations;
    public MigrationsOperations(IOperationReporter reporter, Assembly assembly, Assembly startupAssembly, string projectDir, string rootNamespace, string language, String[] args);
    public virtual MigrationFiles AddMigration(string name, string outputDir, string contextType);
    private string SubnamespaceFromOutputPath(string outputDir);
    public virtual IEnumerable`1<MigrationInfo> GetMigrations(string contextType);
    public virtual string ScriptMigration(string fromMigration, string toMigration, bool idempotent, string contextType);
    public virtual void UpdateDatabase(string targetMigration, string contextType);
    public virtual MigrationFiles RemoveMigration(string contextType, bool force);
    private static void EnsureServices(IServiceProvider services);
    private void EnsureMigrationsAssembly(IServiceProvider services);
}
public class Microsoft.EntityFrameworkCore.Design.Internal.NamespaceComparer : object {
    public virtual int Compare(string x, string y);
}
public class Microsoft.EntityFrameworkCore.Design.Internal.NullPluralizer : object {
    public virtual string Pluralize(string identifier);
    public virtual string Singularize(string identifier);
}
public class Microsoft.EntityFrameworkCore.Design.Internal.OperationLogger : object {
    private string _categoryName;
    private IOperationReporter _reporter;
    public OperationLogger(string categoryName, IOperationReporter reporter);
    public virtual bool IsEnabled(LogLevel logLevel);
    public virtual IDisposable BeginScope(TState state);
    public virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    private static string GetMessage(TState state, Exception exception, Func`3<TState, Exception, string> formatter);
}
public class Microsoft.EntityFrameworkCore.Design.Internal.OperationLoggerProvider : object {
    private IOperationReporter _reporter;
    public OperationLoggerProvider(IOperationReporter reporter);
    public virtual ILogger CreateLogger(string categoryName);
    public virtual void Dispose();
}
public class Microsoft.EntityFrameworkCore.Design.Internal.OperationReporter : object {
    private IOperationReportHandler _handler;
    public OperationReporter(IOperationReportHandler handler);
    public virtual void WriteError(string message);
    public virtual void WriteWarning(string message);
    public virtual void WriteInformation(string message);
    public virtual void WriteVerbose(string message);
}
public interface Microsoft.EntityFrameworkCore.Design.IOperationReportHandler {
    public int Version { get; }
    public abstract virtual int get_Version();
    public abstract virtual void OnError(string message);
    public abstract virtual void OnWarning(string message);
    public abstract virtual void OnInformation(string message);
    public abstract virtual void OnVerbose(string message);
}
public interface Microsoft.EntityFrameworkCore.Design.IOperationResultHandler {
    public int Version { get; }
    public abstract virtual int get_Version();
    public abstract virtual void OnResult(object value);
    public abstract virtual void OnError(string type, string message, string stackTrace);
}
public interface Microsoft.EntityFrameworkCore.Design.IPluralizer {
    public abstract virtual string Pluralize(string identifier);
    public abstract virtual string Singularize(string identifier);
}
public class Microsoft.EntityFrameworkCore.Design.OperationException : Exception {
    public OperationException(string message);
    public OperationException(string message, Exception innerException);
    public OperationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.EntityFrameworkCore.Design.OperationExecutor : MarshalByRefObject {
    private string _projectDir;
    private string _targetName;
    private string _startupTargetName;
    private string _rootNamespace;
    private string _language;
    private String[] _designArgs;
    private OperationReporter _reporter;
    private DbContextOperations _contextOperations;
    private DatabaseOperations _databaseOperations;
    private MigrationsOperations _migrationsOperations;
    private Assembly _assembly;
    private Assembly _startupAssembly;
    private Assembly Assembly { get; }
    private Assembly StartupAssembly { get; }
    private MigrationsOperations MigrationsOperations { get; }
    private DbContextOperations ContextOperations { get; }
    private DatabaseOperations DatabaseOperations { get; }
    public OperationExecutor(IOperationReportHandler reportHandler, IDictionary args);
    private Assembly get_Assembly();
    private Assembly get_StartupAssembly();
    private MigrationsOperations get_MigrationsOperations();
    private DbContextOperations get_ContextOperations();
    private DatabaseOperations get_DatabaseOperations();
    private IDictionary AddMigrationImpl(string name, string outputDir, string contextType);
    private IDictionary GetContextInfoImpl(string contextType);
    private void UpdateDatabaseImpl(string targetMigration, string contextType);
    private string ScriptMigrationImpl(string fromMigration, string toMigration, bool idempotent, string contextType);
    private IDictionary RemoveMigrationImpl(string contextType, bool force);
    private IEnumerable`1<IDictionary> GetContextTypesImpl();
    private IEnumerable`1<IDictionary> GetMigrationsImpl(string contextType);
    private IDictionary ScaffoldContextImpl(string provider, string connectionString, string outputDir, string outputDbContextDir, string dbContextClassName, IEnumerable`1<string> schemaFilters, IEnumerable`1<string> tableFilters, bool useDataAnnotations, bool overwriteFiles, bool useDatabaseNames);
    private void DropDatabaseImpl(string contextType);
    private string ScriptDbContextImpl(string contextType);
    [CompilerGeneratedAttribute]
private Assembly <get_Assembly>g__Create|14_0();
}
public class Microsoft.EntityFrameworkCore.Design.OperationReportHandler : MarshalByRefObject {
    private Action`1<string> _errorHandler;
    private Action`1<string> _warningHandler;
    private Action`1<string> _informationHandler;
    private Action`1<string> _verboseHandler;
    public int Version { get; }
    public OperationReportHandler(Action`1<string> errorHandler, Action`1<string> warningHandler, Action`1<string> informationHandler, Action`1<string> verboseHandler);
    public virtual int get_Version();
    public virtual void OnError(string message);
    public virtual void OnWarning(string message);
    public virtual void OnInformation(string message);
    public virtual void OnVerbose(string message);
}
public class Microsoft.EntityFrameworkCore.Design.OperationResultHandler : MarshalByRefObject {
    private bool _hasResult;
    private object _result;
    private string _errorType;
    private string _errorMessage;
    private string _errorStackTrace;
    public int Version { get; }
    public bool HasResult { get; }
    public object Result { get; }
    public string ErrorType { get; }
    public string ErrorMessage { get; }
    public string ErrorStackTrace { get; }
    public virtual int get_Version();
    public virtual bool get_HasResult();
    public virtual object get_Result();
    public virtual string get_ErrorType();
    public virtual string get_ErrorMessage();
    public virtual string get_ErrorStackTrace();
    public virtual void OnResult(object value);
    public virtual void OnError(string type, string message, string stackTrace);
}
internal static class Microsoft.EntityFrameworkCore.EnumerableMethods : object {
    [CompilerGeneratedAttribute]
private static MethodInfo <All>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AsEnumerable>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Cast>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Concat>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Contains>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <CountWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <CountWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <DefaultIfEmptyWithoutArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <DefaultIfEmptyWithArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Distinct>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ElementAt>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ElementAtOrDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Except>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeySelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyElementSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyElementResultSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyResultSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupJoin>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Intersect>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Join>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LongCountWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LongCountWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MaxWithoutSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MaxWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MinWithoutSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MinWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OfType>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OrderByDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Reverse>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Select>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectWithOrdinal>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectManyWithoutCollectionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectManyWithCollectionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SequenceEqual>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SkipWhile>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Take>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <TakeWhile>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ThenBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ThenByDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ToArray>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ToList>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Union>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <SumWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <SumWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <AverageWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <AverageWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MaxWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MaxWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MinWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MinWithSelectorMethods>k__BackingField;
    public static MethodInfo All { get; }
    public static MethodInfo AnyWithoutPredicate { get; }
    public static MethodInfo AnyWithPredicate { get; }
    public static MethodInfo AsEnumerable { get; }
    public static MethodInfo Cast { get; }
    public static MethodInfo Concat { get; }
    public static MethodInfo Contains { get; }
    public static MethodInfo CountWithoutPredicate { get; }
    public static MethodInfo CountWithPredicate { get; }
    public static MethodInfo DefaultIfEmptyWithoutArgument { get; }
    public static MethodInfo DefaultIfEmptyWithArgument { get; }
    public static MethodInfo Distinct { get; }
    public static MethodInfo ElementAt { get; }
    public static MethodInfo ElementAtOrDefault { get; }
    public static MethodInfo Except { get; }
    public static MethodInfo FirstWithoutPredicate { get; }
    public static MethodInfo FirstWithPredicate { get; }
    public static MethodInfo FirstOrDefaultWithoutPredicate { get; }
    public static MethodInfo FirstOrDefaultWithPredicate { get; }
    public static MethodInfo GroupByWithKeySelector { get; }
    public static MethodInfo GroupByWithKeyElementSelector { get; }
    public static MethodInfo GroupByWithKeyElementResultSelector { get; }
    public static MethodInfo GroupByWithKeyResultSelector { get; }
    public static MethodInfo GroupJoin { get; }
    public static MethodInfo Intersect { get; }
    public static MethodInfo Join { get; }
    public static MethodInfo LastWithoutPredicate { get; }
    public static MethodInfo LastWithPredicate { get; }
    public static MethodInfo LastOrDefaultWithoutPredicate { get; }
    public static MethodInfo LastOrDefaultWithPredicate { get; }
    public static MethodInfo LongCountWithoutPredicate { get; }
    public static MethodInfo LongCountWithPredicate { get; }
    public static MethodInfo MaxWithoutSelector { get; }
    public static MethodInfo MaxWithSelector { get; }
    public static MethodInfo MinWithoutSelector { get; }
    public static MethodInfo MinWithSelector { get; }
    public static MethodInfo OfType { get; }
    public static MethodInfo OrderBy { get; }
    public static MethodInfo OrderByDescending { get; }
    public static MethodInfo Reverse { get; }
    public static MethodInfo Select { get; }
    public static MethodInfo SelectWithOrdinal { get; }
    public static MethodInfo SelectManyWithoutCollectionSelector { get; }
    public static MethodInfo SelectManyWithCollectionSelector { get; }
    public static MethodInfo SequenceEqual { get; }
    public static MethodInfo SingleWithoutPredicate { get; }
    public static MethodInfo SingleWithPredicate { get; }
    public static MethodInfo SingleOrDefaultWithoutPredicate { get; }
    public static MethodInfo SingleOrDefaultWithPredicate { get; }
    public static MethodInfo Skip { get; }
    public static MethodInfo SkipWhile { get; }
    public static MethodInfo Take { get; }
    public static MethodInfo TakeWhile { get; }
    public static MethodInfo ThenBy { get; }
    public static MethodInfo ThenByDescending { get; }
    public static MethodInfo ToArray { get; }
    public static MethodInfo ToList { get; }
    public static MethodInfo Union { get; }
    public static MethodInfo Where { get; }
    private static Dictionary`2<Type, MethodInfo> SumWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> SumWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> AverageWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> AverageWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MaxWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MaxWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MinWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MinWithSelectorMethods { get; }
    private static EnumerableMethods();
    [CompilerGeneratedAttribute]
public static MethodInfo get_All();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AsEnumerable();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Cast();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Concat();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Contains();
    [CompilerGeneratedAttribute]
public static MethodInfo get_CountWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_CountWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_DefaultIfEmptyWithoutArgument();
    [CompilerGeneratedAttribute]
public static MethodInfo get_DefaultIfEmptyWithArgument();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Distinct();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ElementAt();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ElementAtOrDefault();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Except();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeySelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyElementSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyElementResultSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyResultSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupJoin();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Intersect();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Join();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LongCountWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LongCountWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MaxWithoutSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MaxWithSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MinWithoutSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MinWithSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OfType();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OrderBy();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OrderByDescending();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Reverse();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Select();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectWithOrdinal();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectManyWithoutCollectionSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectManyWithCollectionSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SequenceEqual();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Skip();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SkipWhile();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Take();
    [CompilerGeneratedAttribute]
public static MethodInfo get_TakeWhile();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ThenBy();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ThenByDescending();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ToArray();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ToList();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Union();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Where();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_SumWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_SumWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_AverageWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_AverageWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MaxWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MaxWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MinWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MinWithSelectorMethods();
    public static bool IsSumWithoutSelector(MethodInfo methodInfo);
    public static bool IsSumWithSelector(MethodInfo methodInfo);
    public static bool IsAverageWithoutSelector(MethodInfo methodInfo);
    public static bool IsAverageWithSelector(MethodInfo methodInfo);
    public static MethodInfo GetSumWithoutSelector(Type type);
    public static MethodInfo GetSumWithSelector(Type type);
    public static MethodInfo GetAverageWithoutSelector(Type type);
    public static MethodInfo GetAverageWithSelector(Type type);
    public static MethodInfo GetMaxWithoutSelector(Type type);
    public static MethodInfo GetMaxWithSelector(Type type);
    public static MethodInfo GetMinWithoutSelector(Type type);
    public static MethodInfo GetMinWithSelector(Type type);
    [CompilerGeneratedAttribute]
internal static MethodInfo <.cctor>g__GetMethod|213_62(string name, int genericParameterCount, Func`2<Type[], Type[]> parameterGenerator, <>c__DisplayClass213_0& );
}
public static class Microsoft.EntityFrameworkCore.Internal.DesignStrings : object {
    private static ResourceManager _resourceManager;
    public static string MultipleContexts { get; }
    public static string ManuallyDeleted { get; }
    public static string NoSnapshot { get; }
    public static string RemovingSnapshot { get; }
    public static string RevertingSnapshot { get; }
    public static string DestructiveOperation { get; }
    public static string Done { get; }
    public static string FindingContexts { get; }
    public static string SensitiveInformationWarning { get; }
    public static string FindingServiceProvider { get; }
    public static string NoServiceProvider { get; }
    public static string NoDesignTimeServices { get; }
    public static string FindingContextFactories { get; }
    public static string FindingReferencedContexts { get; }
    public static string SequencesRequireName { get; }
    public static string NoReferencedServices { get; }
    public static string FindingHostingServices { get; }
    public static string MalformedCreateHostBuilder { get; }
    public static string NoCreateHostBuilder { get; }
    public static string UsingHostingServices { get; }
    private static DesignStrings();
    public static string DuplicateMigrationName(object migrationName);
    public static string get_MultipleContexts();
    public static string MultipleContextsWithName(object name);
    public static string MultipleContextsWithQualifiedName(object name);
    public static string NoContext(object assembly);
    public static string NoContextWithName(object name);
    public static string UseContext(object name);
    public static string DroppingDatabase(object name);
    public static string DatabaseDropped(object name);
    public static string get_ManuallyDeleted();
    public static string NoMigrationFile(object file, object migrationClass);
    public static string NoMigrationMetadataFile(object file);
    public static string get_NoSnapshot();
    public static string NoSnapshotFile(object file, object snapshotClass);
    public static string RemovingMigration(object name);
    public static string get_RemovingSnapshot();
    public static string get_RevertingSnapshot();
    public static string RevertMigration(object name);
    public static string UnknownOperation(object operationType);
    public static string UnknownLiteral(object literalType);
    public static string LiteralExpressionNotSupported(object expression, object type);
    public static string CannotFindRuntimeProviderAssembly(object assemblyName);
    public static string get_DestructiveOperation();
    public static string WritingMigration(object file);
    public static string WritingSnapshot(object file);
    public static string get_Done();
    public static string ReusingNamespace(object type);
    public static string ReusingSnapshotName(object name);
    public static string CannotFindDesignTimeProviderAssemblyAttribute(object attributeName, object runtimeProviderAssemblyName);
    public static string NonRelationalProvider(object provider);
    public static string UnreferencedAssembly(object assembly, object startupProject);
    public static string get_FindingContexts();
    public static string ForeignMigrations(object migrationsNamespace);
    public static string ContextClassNotValidCSharpIdentifier(object contextClassName);
    public static string MigrationsAssemblyMismatch(object assembly, object migrationsAssembly);
    public static string get_SensitiveInformationWarning();
    public static string ForceRemoveMigration(object name, object error);
    public static string NoParameterlessConstructor(object contextType);
    public static string NotExistDatabase(object name);
    public static string UsingEnvironment(object environment);
    public static string get_FindingServiceProvider();
    public static string get_NoServiceProvider();
    public static string FoundDbContext(object contextType);
    public static string UsingDbContextFactory(object factory);
    public static string FindingDesignTimeServices(object startupAssembly);
    public static string FindingProviderServices(object provider);
    public static string get_NoDesignTimeServices();
    public static string UsingDesignTimeServices(object designTimeServices);
    public static string UsingProviderServices(object provider);
    public static string get_FindingContextFactories();
    public static string get_FindingReferencedContexts();
    public static string FoundContextFactory(object factory);
    public static string ProviderReturnedNullModel(object providerTypeName);
    public static string ReadOnlyFiles(object outputDirectoryName, object readOnlyFiles);
    public static string ExistingFiles(object outputDirectoryName, object existingFiles);
    public static string CannotFindTypeMappingForColumn(object columnName, object dateType);
    public static string ForeignKeyScaffoldErrorPrincipalKeyNotFound(object foreignKeyName, object columnsList, object principalEntityType);
    public static string ForeignKeyScaffoldErrorPrincipalTableScaffoldingError(object foreignKeyName, object principaltableName);
    public static string PrimaryKeyErrorPropertyNotFound(object tableName, object columnNames);
    public static string UnableToGenerateEntityType(object tableName);
    public static string BadSequenceType(object sequenceName, object typeName);
    public static string ForeignKeyPrincipalEndContainsNullableColumns(object foreignKeyName, object indexName, object columnNames);
    public static string NonNullableBoooleanColumnHasDefaultConstraint(object columnName);
    public static string ForeignKeyScaffoldErrorPrincipalTableNotFound(object foreignKeyName);
    public static string ForeignKeyScaffoldErrorPropertyNotFound(object foreignKeyName, object columnNames);
    public static string UnableToScaffoldIndexMissingProperty(object indexName, object columnNames);
    public static string MultipleAnnotationConflict(object annotationName);
    public static string get_SequencesRequireName();
    public static string NoLanguageService(object language, object service);
    public static string RevertingMigration(object name);
    public static string FindingReferencedServices(object startupAssembly);
    public static string get_NoReferencedServices();
    public static string UsingReferencedServices(object referencedAssembly);
    public static string VersionMismatch(object toolsVersion, object runtimeVersion);
    public static string get_FindingHostingServices();
    public static string InvokeCreateHostBuilderFailed(object error);
    public static string get_MalformedCreateHostBuilder();
    public static string get_NoCreateHostBuilder();
    public static string get_UsingHostingServices();
    private static string GetString(string name, String[] formatterNames);
}
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingAnnotationNames : object {
    public static string Prefix;
    public static string ColumnOrdinal;
    public static string EntityTypeErrors;
    public static string DbSetName;
    public static string DatabaseName;
    public static string ConcurrencyToken;
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingEntityTypeAnnotations : object {
    [ExtensionAttribute]
public static string GetDbSetName(IEntityType entityType);
    [ExtensionAttribute]
public static void SetDbSetName(IMutableEntityType entityType, string value);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingModelExtensions : object {
    [ExtensionAttribute]
public static IDictionary`2<string, string> GetEntityTypeErrors(IModel model);
    [ExtensionAttribute]
public static void SetEntityTypeErrors(IMutableModel model, IDictionary`2<string, string> value);
    [ExtensionAttribute]
public static string GetDatabaseName(IModel model);
    [ExtensionAttribute]
public static void SetDatabaseName(IMutableModel model, string value);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingPropertyExtensions : object {
    [ExtensionAttribute]
public static int GetColumnOrdinal(IProperty property);
    [ExtensionAttribute]
public static void SetColumnOrdinal(IMutableProperty property, Nullable`1<int> ordinal);
}
public class Microsoft.EntityFrameworkCore.Migrations.Design.CSharpMigrationOperationGenerator : object {
    [CompilerGeneratedAttribute]
private CSharpMigrationOperationGeneratorDependencies <Dependencies>k__BackingField;
    protected CSharpMigrationOperationGeneratorDependencies Dependencies { get; }
    private ICSharpHelper Code { get; }
    public CSharpMigrationOperationGenerator(CSharpMigrationOperationGeneratorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual CSharpMigrationOperationGeneratorDependencies get_Dependencies();
    private ICSharpHelper get_Code();
    public virtual void Generate(string builderName, IReadOnlyList`1<MigrationOperation> operations, IndentedStringBuilder builder);
    protected virtual void Generate(MigrationOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(AddColumnOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(AddForeignKeyOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(AddPrimaryKeyOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(AddUniqueConstraintOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(CreateCheckConstraintOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(AlterColumnOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(AlterDatabaseOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(AlterSequenceOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(AlterTableOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(CreateIndexOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(EnsureSchemaOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(CreateSequenceOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(CreateTableOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(DropColumnOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(DropForeignKeyOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(DropIndexOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(DropPrimaryKeyOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(DropSchemaOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(DropSequenceOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(DropTableOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(DropUniqueConstraintOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(DropCheckConstraintOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(RenameColumnOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(RenameIndexOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(RenameSequenceOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(RenameTableOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(RestartSequenceOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(SqlOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(InsertDataOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(DeleteDataOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(UpdateDataOperation operation, IndentedStringBuilder builder);
    protected virtual void Annotations(IEnumerable`1<Annotation> annotations, IndentedStringBuilder builder);
    protected virtual void OldAnnotations(IEnumerable`1<Annotation> annotations, IndentedStringBuilder builder);
    private static Object[] ToOnedimensionalArray(Object[0...,0...] values, bool firstDimension);
}
public class Microsoft.EntityFrameworkCore.Migrations.Design.CSharpMigrationOperationGeneratorDependencies : object {
    [CompilerGeneratedAttribute]
private ICSharpHelper <CSharpHelper>k__BackingField;
    public ICSharpHelper CSharpHelper { get; }
    [EntityFrameworkInternalAttribute]
public CSharpMigrationOperationGeneratorDependencies(ICSharpHelper csharpHelper);
    [CompilerGeneratedAttribute]
public ICSharpHelper get_CSharpHelper();
    public CSharpMigrationOperationGeneratorDependencies With(ICSharpHelper csharpHelper);
}
public class Microsoft.EntityFrameworkCore.Migrations.Design.CSharpMigrationsGenerator : MigrationsCodeGenerator {
    [CompilerGeneratedAttribute]
private CSharpMigrationsGeneratorDependencies <CSharpDependencies>k__BackingField;
    protected CSharpMigrationsGeneratorDependencies CSharpDependencies { get; }
    private ICSharpHelper Code { get; }
    public string FileExtension { get; }
    public string Language { get; }
    public CSharpMigrationsGenerator(MigrationsCodeGeneratorDependencies dependencies, CSharpMigrationsGeneratorDependencies csharpDependencies);
    [CompilerGeneratedAttribute]
protected virtual CSharpMigrationsGeneratorDependencies get_CSharpDependencies();
    private ICSharpHelper get_Code();
    public virtual string get_FileExtension();
    public virtual string get_Language();
    public virtual string GenerateMigration(string migrationNamespace, string migrationName, IReadOnlyList`1<MigrationOperation> upOperations, IReadOnlyList`1<MigrationOperation> downOperations);
    private static void AppendAutoGeneratedTag(IndentedStringBuilder builder);
    public virtual string GenerateMetadata(string migrationNamespace, Type contextType, string migrationName, string migrationId, IModel targetModel);
    public virtual string GenerateSnapshot(string modelSnapshotNamespace, Type contextType, string modelSnapshotName, IModel model);
}
public class Microsoft.EntityFrameworkCore.Migrations.Design.CSharpMigrationsGeneratorDependencies : object {
    [CompilerGeneratedAttribute]
private ICSharpHelper <CSharpHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private ICSharpMigrationOperationGenerator <CSharpMigrationOperationGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private ICSharpSnapshotGenerator <CSharpSnapshotGenerator>k__BackingField;
    public ICSharpHelper CSharpHelper { get; }
    public ICSharpMigrationOperationGenerator CSharpMigrationOperationGenerator { get; }
    public ICSharpSnapshotGenerator CSharpSnapshotGenerator { get; }
    [EntityFrameworkInternalAttribute]
public CSharpMigrationsGeneratorDependencies(ICSharpHelper csharpHelper, ICSharpMigrationOperationGenerator csharpMigrationOperationGenerator, ICSharpSnapshotGenerator csharpSnapshotGenerator);
    [CompilerGeneratedAttribute]
public ICSharpHelper get_CSharpHelper();
    [CompilerGeneratedAttribute]
public ICSharpMigrationOperationGenerator get_CSharpMigrationOperationGenerator();
    [CompilerGeneratedAttribute]
public ICSharpSnapshotGenerator get_CSharpSnapshotGenerator();
    public CSharpMigrationsGeneratorDependencies With(ICSharpHelper csharpHelper);
    public CSharpMigrationsGeneratorDependencies With(ICSharpMigrationOperationGenerator csharpMigrationOperationGenerator);
    public CSharpMigrationsGeneratorDependencies With(ICSharpSnapshotGenerator csharpSnapshotGenerator);
}
public class Microsoft.EntityFrameworkCore.Migrations.Design.CSharpSnapshotGenerator : object {
    [CompilerGeneratedAttribute]
private CSharpSnapshotGeneratorDependencies <Dependencies>k__BackingField;
    protected CSharpSnapshotGeneratorDependencies Dependencies { get; }
    private ICSharpHelper Code { get; }
    public CSharpSnapshotGenerator(CSharpSnapshotGeneratorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual CSharpSnapshotGeneratorDependencies get_Dependencies();
    private ICSharpHelper get_Code();
    public virtual void Generate(string builderName, IModel model, IndentedStringBuilder stringBuilder);
    private static IReadOnlyList`1<IEntityType> Sort(IReadOnlyList`1<IEntityType> entityTypes);
    protected virtual void GenerateEntityTypes(string builderName, IReadOnlyList`1<IEntityType> entityTypes, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateEntityType(string builderName, IEntityType entityType, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateOwnedTypes(string builderName, IEnumerable`1<IForeignKey> ownerships, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateOwnedType(string builderName, IForeignKey ownership, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateEntityTypeRelationships(string builderName, IEntityType entityType, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateRelationships(string builderName, IEntityType entityType, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateBaseType(string builderName, IEntityType baseType, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateProperties(string builderName, IEnumerable`1<IProperty> properties, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateProperty(string builderName, IProperty property, IndentedStringBuilder stringBuilder);
    protected virtual void GeneratePropertyAnnotations(IProperty property, IndentedStringBuilder stringBuilder);
    private ValueConverter FindValueConverter(IProperty property);
    protected virtual void GenerateKeys(string builderName, IEnumerable`1<IKey> keys, IKey primaryKey, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateKey(string builderName, IKey key, IndentedStringBuilder stringBuilder, bool primary);
    protected virtual void GenerateIndexes(string builderName, IEnumerable`1<IIndex> indexes, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateIndex(string builderName, IIndex index, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateEntityTypeAnnotations(string builderName, IEntityType entityType, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateCheckConstraints(string builderName, IEntityType entityType, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateCheckConstraint(string builderName, ICheckConstraint checkConstraint, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateForeignKeys(string builderName, IEnumerable`1<IForeignKey> foreignKeys, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateForeignKey(string builderName, IForeignKey foreignKey, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateForeignKeyAnnotations(IForeignKey foreignKey, IndentedStringBuilder stringBuilder);
    protected virtual void IgnoreAnnotations(IList`1<IAnnotation> annotations, String[] annotationNames);
    protected virtual void IgnoreAnnotationTypes(IList`1<IAnnotation> annotations, String[] annotationPrefixes);
    protected virtual void GenerateAnnotations(IReadOnlyList`1<IAnnotation> annotations, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateFluentApiForAnnotation(List`1& annotations, string annotationName, string fluentApiMethodName, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateFluentApiForAnnotation(List`1& annotations, string annotationName, Func`2<IAnnotation, object> annotationValueFunc, string fluentApiMethodName, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateAnnotation(IAnnotation annotation, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateData(string builderName, IEnumerable`1<IProperty> properties, IEnumerable`1<IDictionary`2<string, object>> data, IndentedStringBuilder stringBuilder);
    [CompilerGeneratedAttribute]
private string <GenerateKey>b__20_0(IProperty p);
    [CompilerGeneratedAttribute]
private string <GenerateIndex>b__22_0(IProperty p);
    [CompilerGeneratedAttribute]
private string <GenerateForeignKey>b__27_0(IProperty p);
    [CompilerGeneratedAttribute]
private string <GenerateForeignKey>b__27_1(IProperty p);
    [CompilerGeneratedAttribute]
private string <GenerateForeignKey>b__27_2(IProperty p);
    [CompilerGeneratedAttribute]
private string <GenerateForeignKey>b__27_3(IProperty p);
}
public class Microsoft.EntityFrameworkCore.Migrations.Design.CSharpSnapshotGeneratorDependencies : object {
    [CompilerGeneratedAttribute]
private ICSharpHelper <CSharpHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <RelationalTypeMappingSource>k__BackingField;
    public ICSharpHelper CSharpHelper { get; }
    public IRelationalTypeMappingSource RelationalTypeMappingSource { get; }
    [EntityFrameworkInternalAttribute]
public CSharpSnapshotGeneratorDependencies(ICSharpHelper csharpHelper, IRelationalTypeMappingSource relationalTypeMappingSource);
    [CompilerGeneratedAttribute]
public ICSharpHelper get_CSharpHelper();
    [CompilerGeneratedAttribute]
public IRelationalTypeMappingSource get_RelationalTypeMappingSource();
    public CSharpSnapshotGeneratorDependencies With(ICSharpHelper csharpHelper);
    public CSharpSnapshotGeneratorDependencies With(IRelationalTypeMappingSource relationalTypeMappingSource);
}
public interface Microsoft.EntityFrameworkCore.Migrations.Design.ICSharpMigrationOperationGenerator {
    public abstract virtual void Generate(string builderName, IReadOnlyList`1<MigrationOperation> operations, IndentedStringBuilder builder);
}
public interface Microsoft.EntityFrameworkCore.Migrations.Design.ICSharpSnapshotGenerator {
    public abstract virtual void Generate(string builderName, IModel model, IndentedStringBuilder stringBuilder);
}
public interface Microsoft.EntityFrameworkCore.Migrations.Design.IMigrationsCodeGenerator {
    public string FileExtension { get; }
    public abstract virtual string GenerateMetadata(string migrationNamespace, Type contextType, string migrationName, string migrationId, IModel targetModel);
    public abstract virtual string GenerateMigration(string migrationNamespace, string migrationName, IReadOnlyList`1<MigrationOperation> upOperations, IReadOnlyList`1<MigrationOperation> downOperations);
    public abstract virtual string GenerateSnapshot(string modelSnapshotNamespace, Type contextType, string modelSnapshotName, IModel model);
    public abstract virtual string get_FileExtension();
}
public interface Microsoft.EntityFrameworkCore.Migrations.Design.IMigrationsCodeGeneratorSelector {
    public abstract virtual IMigrationsCodeGenerator Select(string language);
}
public interface Microsoft.EntityFrameworkCore.Migrations.Design.IMigrationsScaffolder {
    public abstract virtual ScaffoldedMigration ScaffoldMigration(string migrationName, string rootNamespace, string subNamespace, string language);
    public abstract virtual MigrationFiles RemoveMigration(string projectDir, string rootNamespace, bool force, string language);
    public abstract virtual MigrationFiles Save(string projectDir, ScaffoldedMigration migration, string outputDir);
}
public class Microsoft.EntityFrameworkCore.Migrations.Design.MigrationFiles : object {
    [CompilerGeneratedAttribute]
private string <MigrationFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MetadataFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SnapshotFile>k__BackingField;
    public string MigrationFile { get; public set; }
    public string MetadataFile { get; public set; }
    public string SnapshotFile { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_MigrationFile();
    [CompilerGeneratedAttribute]
public virtual void set_MigrationFile(string value);
    [CompilerGeneratedAttribute]
public virtual string get_MetadataFile();
    [CompilerGeneratedAttribute]
public virtual void set_MetadataFile(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SnapshotFile();
    [CompilerGeneratedAttribute]
public virtual void set_SnapshotFile(string value);
}
public abstract class Microsoft.EntityFrameworkCore.Migrations.Design.MigrationsCodeGenerator : object {
    [CompilerGeneratedAttribute]
private MigrationsCodeGeneratorDependencies <Dependencies>k__BackingField;
    public string FileExtension { get; }
    public string Language { get; }
    protected MigrationsCodeGeneratorDependencies Dependencies { get; }
    protected MigrationsCodeGenerator(MigrationsCodeGeneratorDependencies dependencies);
    public abstract virtual string get_FileExtension();
    public virtual string get_Language();
    [CompilerGeneratedAttribute]
protected virtual MigrationsCodeGeneratorDependencies get_Dependencies();
    public abstract virtual string GenerateMigration(string migrationNamespace, string migrationName, IReadOnlyList`1<MigrationOperation> upOperations, IReadOnlyList`1<MigrationOperation> downOperations);
    public abstract virtual string GenerateMetadata(string migrationNamespace, Type contextType, string migrationName, string migrationId, IModel targetModel);
    public abstract virtual string GenerateSnapshot(string modelSnapshotNamespace, Type contextType, string modelSnapshotName, IModel model);
    protected virtual IEnumerable`1<string> GetNamespaces(IEnumerable`1<MigrationOperation> operations);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Design.MigrationsCodeGenerator/<GetColumnNamespaces>d__12")]
private static IEnumerable`1<string> GetColumnNamespaces(ColumnOperation columnOperation);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Design.MigrationsCodeGenerator/<GetDataNamespaces>d__13")]
private static IEnumerable`1<string> GetDataNamespaces(Object[0...,0...] values);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Design.MigrationsCodeGenerator/<GetAnnotatables>d__14")]
private static IEnumerable`1<IAnnotatable> GetAnnotatables(IEnumerable`1<MigrationOperation> operations);
    protected virtual IEnumerable`1<string> GetNamespaces(IModel model);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Design.MigrationsCodeGenerator/<GetAnnotatables>d__16")]
private static IEnumerable`1<IAnnotatable> GetAnnotatables(IModel model);
    private IEnumerable`1<string> GetAnnotationNamespaces(IEnumerable`1<IAnnotatable> items);
    private ValueConverter FindValueConverter(IProperty property);
    private Type GetProviderType(IAnnotatable annotatable, Type valueType);
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <GetNamespaces>b__15_0(IEntityType e);
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <GetNamespaces>b__15_1(IProperty p);
}
public class Microsoft.EntityFrameworkCore.Migrations.Design.MigrationsCodeGeneratorDependencies : object {
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <RelationalTypeMappingSource>k__BackingField;
    public IRelationalTypeMappingSource RelationalTypeMappingSource { get; }
    [EntityFrameworkInternalAttribute]
public MigrationsCodeGeneratorDependencies(IRelationalTypeMappingSource relationalTypeMappingSource);
    [CompilerGeneratedAttribute]
public IRelationalTypeMappingSource get_RelationalTypeMappingSource();
    public MigrationsCodeGeneratorDependencies With(IRelationalTypeMappingSource relationalTypeMappingSource);
}
public class Microsoft.EntityFrameworkCore.Migrations.Design.MigrationsScaffolder : object {
    private Type _contextType;
    private string _activeProvider;
    [CompilerGeneratedAttribute]
private MigrationsScaffolderDependencies <Dependencies>k__BackingField;
    protected MigrationsScaffolderDependencies Dependencies { get; }
    public MigrationsScaffolder(MigrationsScaffolderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual MigrationsScaffolderDependencies get_Dependencies();
    public virtual ScaffoldedMigration ScaffoldMigration(string migrationName, string rootNamespace, string subNamespace);
    public virtual ScaffoldedMigration ScaffoldMigration(string migrationName, string rootNamespace, string subNamespace, string language);
    protected virtual string GetSubNamespace(string rootNamespace, string namespace);
    public virtual MigrationFiles RemoveMigration(string projectDir, string rootNamespace, bool force);
    public virtual MigrationFiles RemoveMigration(string projectDir, string rootNamespace, bool force, string language);
    public virtual MigrationFiles Save(string projectDir, ScaffoldedMigration migration, string outputDir);
    protected virtual string GetNamespace(Type siblingType, string defaultNamespace);
    protected virtual string GetDirectory(string projectDir, string siblingFileName, string subnamespace);
    protected virtual string TryGetProjectFile(string projectDir, string fileName);
    private bool ContainsForeignMigrations(string migrationsNamespace);
    [CompilerGeneratedAttribute]
private Migration <RemoveMigration>b__10_0(KeyValuePair`2<string, TypeInfo> m);
}
public class Microsoft.EntityFrameworkCore.Migrations.Design.MigrationsScaffolderDependencies : object {
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationsAssembly <MigrationsAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationsModelDiffer <MigrationsModelDiffer>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationsIdGenerator <MigrationsIdGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationsCodeGeneratorSelector <MigrationsCodeGeneratorSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private IHistoryRepository <HistoryRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IOperationReporter <OperationReporter>k__BackingField;
    [CompilerGeneratedAttribute]
private IDatabaseProvider <DatabaseProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ISnapshotModelProcessor <SnapshotModelProcessor>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrator <Migrator>k__BackingField;
    public ICurrentDbContext CurrentContext { get; }
    public IModel Model { get; }
    public IMigrationsAssembly MigrationsAssembly { get; }
    public IMigrationsModelDiffer MigrationsModelDiffer { get; }
    public IMigrationsIdGenerator MigrationsIdGenerator { get; }
    public IMigrationsCodeGeneratorSelector MigrationsCodeGeneratorSelector { get; }
    public IHistoryRepository HistoryRepository { get; }
    public IOperationReporter OperationReporter { get; }
    public IDatabaseProvider DatabaseProvider { get; }
    public ISnapshotModelProcessor SnapshotModelProcessor { get; }
    public IMigrator Migrator { get; }
    [EntityFrameworkInternalAttribute]
public MigrationsScaffolderDependencies(ICurrentDbContext currentContext, IModel model, IMigrationsAssembly migrationsAssembly, IMigrationsModelDiffer migrationsModelDiffer, IMigrationsIdGenerator migrationsIdGenerator, IMigrationsCodeGeneratorSelector migrationsCodeGeneratorSelector, IHistoryRepository historyRepository, IOperationReporter operationReporter, IDatabaseProvider databaseProvider, ISnapshotModelProcessor snapshotModelProcessor, IMigrator migrator);
    [CompilerGeneratedAttribute]
public ICurrentDbContext get_CurrentContext();
    [CompilerGeneratedAttribute]
public IModel get_Model();
    [CompilerGeneratedAttribute]
public IMigrationsAssembly get_MigrationsAssembly();
    [CompilerGeneratedAttribute]
public IMigrationsModelDiffer get_MigrationsModelDiffer();
    [CompilerGeneratedAttribute]
public IMigrationsIdGenerator get_MigrationsIdGenerator();
    [CompilerGeneratedAttribute]
public IMigrationsCodeGeneratorSelector get_MigrationsCodeGeneratorSelector();
    [CompilerGeneratedAttribute]
public IHistoryRepository get_HistoryRepository();
    [CompilerGeneratedAttribute]
public IOperationReporter get_OperationReporter();
    [CompilerGeneratedAttribute]
public IDatabaseProvider get_DatabaseProvider();
    [CompilerGeneratedAttribute]
public ISnapshotModelProcessor get_SnapshotModelProcessor();
    [CompilerGeneratedAttribute]
public IMigrator get_Migrator();
    public MigrationsScaffolderDependencies With(ICurrentDbContext currentContext);
    public MigrationsScaffolderDependencies With(IModel model);
    public MigrationsScaffolderDependencies With(IMigrationsAssembly migrationsAssembly);
    public MigrationsScaffolderDependencies With(IMigrationsModelDiffer migrationsModelDiffer);
    public MigrationsScaffolderDependencies With(IMigrationsIdGenerator migrationsIdGenerator);
    public MigrationsScaffolderDependencies With(IMigrationsCodeGeneratorSelector migrationsCodeGeneratorSelector);
    public MigrationsScaffolderDependencies With(IHistoryRepository historyRepository);
    public MigrationsScaffolderDependencies With(IOperationReporter operationReporter);
    public MigrationsScaffolderDependencies With(IDatabaseProvider databaseProvider);
    public MigrationsScaffolderDependencies With(ISnapshotModelProcessor snapshotModelProcessor);
    public MigrationsScaffolderDependencies With(IMigrator migrator);
}
public class Microsoft.EntityFrameworkCore.Migrations.Design.ScaffoldedMigration : object {
    [CompilerGeneratedAttribute]
private string <FileExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviousMigrationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MigrationCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MigrationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MetadataCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MigrationSubNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SnapshotCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SnapshotName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SnapshotSubnamespace>k__BackingField;
    public string FileExtension { get; }
    public string PreviousMigrationId { get; }
    public string MigrationCode { get; }
    public string MigrationId { get; }
    public string MetadataCode { get; }
    public string MigrationSubNamespace { get; }
    public string SnapshotCode { get; }
    public string SnapshotName { get; }
    public string SnapshotSubnamespace { get; }
    public ScaffoldedMigration(string fileExtension, string previousMigrationId, string migrationCode, string migrationId, string metadataCode, string migrationSubNamespace, string snapshotCode, string snapshotName, string snapshotSubNamespace);
    [CompilerGeneratedAttribute]
public virtual string get_FileExtension();
    [CompilerGeneratedAttribute]
public virtual string get_PreviousMigrationId();
    [CompilerGeneratedAttribute]
public virtual string get_MigrationCode();
    [CompilerGeneratedAttribute]
public virtual string get_MigrationId();
    [CompilerGeneratedAttribute]
public virtual string get_MetadataCode();
    [CompilerGeneratedAttribute]
public virtual string get_MigrationSubNamespace();
    [CompilerGeneratedAttribute]
public virtual string get_SnapshotCode();
    [CompilerGeneratedAttribute]
public virtual string get_SnapshotName();
    [CompilerGeneratedAttribute]
public virtual string get_SnapshotSubnamespace();
}
public interface Microsoft.EntityFrameworkCore.Migrations.Internal.ISnapshotModelProcessor {
    public abstract virtual IModel Process(IModel model);
}
public class Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsCodeGeneratorSelector : LanguageBasedSelector`1<IMigrationsCodeGenerator> {
    [CompilerGeneratedAttribute]
private IMigrationsCodeGenerator <Override>k__BackingField;
    public IMigrationsCodeGenerator Override { get; public set; }
    public MigrationsCodeGeneratorSelector(IEnumerable`1<IMigrationsCodeGenerator> services);
    [CompilerGeneratedAttribute]
public virtual IMigrationsCodeGenerator get_Override();
    [CompilerGeneratedAttribute]
public virtual void set_Override(IMigrationsCodeGenerator value);
    public virtual IMigrationsCodeGenerator Select(string language);
}
public class Microsoft.EntityFrameworkCore.Migrations.Internal.SnapshotModelProcessor : object {
    private IOperationReporter _operationReporter;
    private HashSet`1<string> _relationalNames;
    public SnapshotModelProcessor(IOperationReporter operationReporter);
    public virtual IModel Process(IModel model);
    private void ProcessCollection(IEnumerable`1<IAnnotatable> metadata, string version);
    private void ProcessElement(IEntityType entityType, string version);
    private void ProcessElement(IAnnotatable metadata, string version);
    private void UpdateOwnedTypes(IMutableEntityType entityType);
}
public interface Microsoft.EntityFrameworkCore.Scaffolding.IModelCodeGenerator {
    public abstract virtual ScaffoldedModel GenerateModel(IModel model, ModelCodeGenerationOptions options);
}
public interface Microsoft.EntityFrameworkCore.Scaffolding.IModelCodeGeneratorSelector {
    public abstract virtual IModelCodeGenerator Select(string language);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.CandidateNamingService : object {
    public virtual string GenerateCandidateIdentifier(DatabaseTable originalTable);
    public virtual string GenerateCandidateIdentifier(DatabaseColumn originalColumn);
    public virtual string GetDependentEndCandidateNavigationPropertyName(IForeignKey foreignKey);
    public virtual string GetPrincipalEndCandidateNavigationPropertyName(IForeignKey foreignKey, string dependentEndNavigationPropertyName);
    private static string GenerateCandidateIdentifier(string originalIdentifier);
    private static string FindCandidateNavigationName(IEnumerable`1<IProperty> properties);
    private static string FindCommonPrefix(string firstName, IEnumerable`1<string> propertyNames);
    private static string StripId(string commonPrefix);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpDbContextGenerator : object {
    private static string EntityLambdaIdentifier;
    private static string Language;
    private ICSharpHelper _code;
    private IProviderConfigurationCodeGenerator _providerConfigurationCodeGenerator;
    private IAnnotationCodeGenerator _annotationCodeGenerator;
    private IndentedStringBuilder _sb;
    private bool _entityTypeBuilderInitialized;
    public CSharpDbContextGenerator(IProviderConfigurationCodeGenerator providerConfigurationCodeGenerator, IAnnotationCodeGenerator annotationCodeGenerator, ICSharpHelper cSharpHelper);
    public virtual string WriteCode(IModel model, string contextName, string connectionString, string contextNamespace, string modelNamespace, bool useDataAnnotations, bool suppressConnectionStringWarning);
    protected virtual void GenerateClass(IModel model, string contextName, string connectionString, bool useDataAnnotations, bool suppressConnectionStringWarning);
    private void GenerateConstructors(string contextName);
    private void GenerateDbSets(IModel model);
    private void GenerateEntityTypeErrors(IModel model);
    protected virtual void GenerateOnConfiguring(string connectionString, bool suppressConnectionStringWarning);
    protected virtual void GenerateOnModelCreating(IModel model, bool useDataAnnotations);
    private void InitializeEntityTypeBuilder(IEntityType entityType);
    private void GenerateEntityType(IEntityType entityType, bool useDataAnnotations);
    private void AppendMultiLineFluentApi(IEntityType entityType, IList`1<string> lines);
    private void GenerateKey(IKey key, IEntityType entityType, bool useDataAnnotations);
    private void GenerateTableName(IEntityType entityType);
    private void GenerateIndex(IIndex index);
    private void GenerateProperty(IProperty property, bool useDataAnnotations);
    private void GenerateRelationship(IForeignKey foreignKey, bool useDataAnnotations);
    private void GenerateSequence(ISequence sequence);
    private static string GenerateLambdaToKey(IReadOnlyList`1<IProperty> properties, string lambdaIdentifier);
    private static void RemoveAnnotation(List`1& annotations, string annotationName);
    private IList`1<string> GenerateAnnotations(IEnumerable`1<IAnnotation> annotations);
    private string GenerateAnnotation(IAnnotation annotation);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpEntityTypeGenerator : object {
    private ICSharpHelper _code;
    private IndentedStringBuilder _sb;
    private bool _useDataAnnotations;
    public CSharpEntityTypeGenerator(ICSharpHelper cSharpHelper);
    public virtual string WriteCode(IEntityType entityType, string namespace, bool useDataAnnotations);
    protected virtual void GenerateClass(IEntityType entityType);
    protected virtual void GenerateEntityTypeDataAnnotations(IEntityType entityType);
    private void GenerateTableAttribute(IEntityType entityType);
    protected virtual void GenerateConstructor(IEntityType entityType);
    protected virtual void GenerateProperties(IEntityType entityType);
    protected virtual void GeneratePropertyDataAnnotations(IProperty property);
    private void GenerateKeyAttribute(IProperty property);
    private void GenerateColumnAttribute(IProperty property);
    private void GenerateMaxLengthAttribute(IProperty property);
    private void GenerateRequiredAttribute(IProperty property);
    protected virtual void GenerateNavigationProperties(IEntityType entityType);
    private void GenerateNavigationDataAnnotations(INavigation navigation);
    private void GenerateForeignKeyAttribute(INavigation navigation);
    private void GenerateInversePropertyAttribute(INavigation navigation);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpModelGenerator : ModelCodeGenerator {
    [CompilerGeneratedAttribute]
private ICSharpDbContextGenerator <CSharpDbContextGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private ICSharpEntityTypeGenerator <CSharpEntityTypeGenerator>k__BackingField;
    private static string FileExtension;
    public ICSharpDbContextGenerator CSharpDbContextGenerator { get; }
    public ICSharpEntityTypeGenerator CSharpEntityTypeGenerator { get; }
    public string Language { get; }
    public CSharpModelGenerator(ModelCodeGeneratorDependencies dependencies, ICSharpDbContextGenerator cSharpDbContextGenerator, ICSharpEntityTypeGenerator cSharpEntityTypeGenerator);
    [CompilerGeneratedAttribute]
public virtual ICSharpDbContextGenerator get_CSharpDbContextGenerator();
    [CompilerGeneratedAttribute]
public virtual ICSharpEntityTypeGenerator get_CSharpEntityTypeGenerator();
    public virtual string get_Language();
    public virtual ScaffoldedModel GenerateModel(IModel model, ModelCodeGenerationOptions options);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer`1 : object {
    private Func`2<T, string> _nameGetter;
    private ICSharpUtilities _cSharpUtilities;
    private Func`2<string, string> _singularizePluralizer;
    protected Dictionary`2<T, string> NameCache;
    public CSharpNamer`1(Func`2<T, string> nameGetter, ICSharpUtilities cSharpUtilities, Func`2<string, string> singularizePluralizer);
    public virtual string GetName(T item);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpUniqueNamer`1 : CSharpNamer`1<T> {
    private HashSet`1<string> _usedNames;
    public CSharpUniqueNamer`1(Func`2<T, string> nameGetter, ICSharpUtilities cSharpUtilities, Func`2<string, string> singularizePluralizer);
    public CSharpUniqueNamer`1(Func`2<T, string> nameGetter, IEnumerable`1<string> usedNames, ICSharpUtilities cSharpUtilities, Func`2<string, string> singularizePluralizer);
    public virtual string GetName(T item);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpUtilities : object {
    private static HashSet`1<string> _cSharpKeywords;
    private static Regex _invalidCharsRegex;
    private static CSharpUtilities();
    public virtual bool IsCSharpKeyword(string identifier);
    public virtual string GenerateCSharpIdentifier(string identifier, ICollection`1<string> existingIdentifiers, Func`2<string, string> singularizePluralizer);
    public virtual string GenerateCSharpIdentifier(string identifier, ICollection`1<string> existingIdentifiers, Func`2<string, string> singularizePluralizer, Func`3<string, ICollection`1<string>, string> uniquifier);
    public virtual string Uniquifier(string proposedIdentifier, ICollection`1<string> existingIdentifiers);
    public virtual bool IsValidIdentifier(string name);
    private static bool IsIdentifierStartCharacter(char ch);
    private static bool IsIdentifierPartCharacter(char ch);
    private static bool IsLetterChar(UnicodeCategory cat);
}
public interface Microsoft.EntityFrameworkCore.Scaffolding.Internal.ICandidateNamingService {
    public abstract virtual string GenerateCandidateIdentifier(DatabaseTable originalTable);
    public abstract virtual string GenerateCandidateIdentifier(DatabaseColumn originalColumn);
    public abstract virtual string GetDependentEndCandidateNavigationPropertyName(IForeignKey foreignKey);
    public abstract virtual string GetPrincipalEndCandidateNavigationPropertyName(IForeignKey foreignKey, string dependentEndNavigationPropertyName);
}
public interface Microsoft.EntityFrameworkCore.Scaffolding.Internal.ICSharpDbContextGenerator {
    public abstract virtual string WriteCode(IModel model, string contextName, string connectionString, string contextNamespace, string modelNamespace, bool useDataAnnotations, bool suppressConnectionStringWarning);
}
public interface Microsoft.EntityFrameworkCore.Scaffolding.Internal.ICSharpEntityTypeGenerator {
    public abstract virtual string WriteCode(IEntityType entityType, string namespace, bool useDataAnnotations);
}
public interface Microsoft.EntityFrameworkCore.Scaffolding.Internal.ICSharpUtilities {
    public abstract virtual string GenerateCSharpIdentifier(string identifier, ICollection`1<string> existingIdentifiers, Func`2<string, string> singularizePluralizer);
    public abstract virtual string GenerateCSharpIdentifier(string identifier, ICollection`1<string> existingIdentifiers, Func`2<string, string> singularizePluralizer, Func`3<string, ICollection`1<string>, string> uniquifier);
    public abstract virtual bool IsCSharpKeyword(string identifier);
    public abstract virtual bool IsValidIdentifier(string name);
}
public interface Microsoft.EntityFrameworkCore.Scaffolding.Internal.IScaffoldingModelFactory {
    public abstract virtual IModel Create(DatabaseModel databaseModel, bool useDatabaseNames);
}
public interface Microsoft.EntityFrameworkCore.Scaffolding.Internal.IScaffoldingTypeMapper {
    public abstract virtual TypeScaffoldingInfo FindMapping(string storeType, bool keyOrIndex, bool rowVersion);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.ModelCodeGeneratorSelector : LanguageBasedSelector`1<IModelCodeGenerator> {
    public ModelCodeGeneratorSelector(IEnumerable`1<IModelCodeGenerator> services);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.RelationalScaffoldingModelFactory : object {
    internal static string NavigationNameUniquifyingPattern;
    internal static string SelfReferencingPrincipalEndNavigationNamePattern;
    private IOperationReporter _reporter;
    private ICandidateNamingService _candidateNamingService;
    private Dictionary`2<DatabaseTable, CSharpUniqueNamer`1<DatabaseColumn>> _columnNamers;
    private bool _useDatabaseNames;
    private DatabaseTable _nullTable;
    private CSharpUniqueNamer`1<DatabaseTable> _tableNamer;
    private CSharpUniqueNamer`1<DatabaseTable> _dbSetNamer;
    private HashSet`1<DatabaseColumn> _unmappedColumns;
    private IPluralizer _pluralizer;
    private ICSharpUtilities _cSharpUtilities;
    private IScaffoldingTypeMapper _scaffoldingTypeMapper;
    private LoggingDefinitions _loggingDefinitions;
    private Dictionary`2<IEntityType, List`1<string>> _entityTypeAndPropertyIdentifiers;
    public RelationalScaffoldingModelFactory(IOperationReporter reporter, ICandidateNamingService candidateNamingService, IPluralizer pluralizer, ICSharpUtilities cSharpUtilities, IScaffoldingTypeMapper scaffoldingTypeMapper, LoggingDefinitions loggingDefinitions);
    public virtual IModel Create(DatabaseModel databaseModel, bool useDatabaseNames);
    protected virtual string GetEntityTypeName(DatabaseTable table);
    protected virtual string GetDbSetName(DatabaseTable table);
    protected virtual string GetPropertyName(DatabaseColumn column);
    protected virtual ModelBuilder VisitDatabaseModel(ModelBuilder modelBuilder, DatabaseModel databaseModel);
    protected virtual ModelBuilder VisitSequences(ModelBuilder modelBuilder, ICollection`1<DatabaseSequence> sequences);
    protected virtual SequenceBuilder VisitSequence(ModelBuilder modelBuilder, DatabaseSequence sequence);
    protected virtual ModelBuilder VisitTables(ModelBuilder modelBuilder, ICollection`1<DatabaseTable> tables);
    protected virtual EntityTypeBuilder VisitTable(ModelBuilder modelBuilder, DatabaseTable table);
    protected virtual EntityTypeBuilder VisitColumns(EntityTypeBuilder builder, ICollection`1<DatabaseColumn> columns);
    protected virtual PropertyBuilder VisitColumn(EntityTypeBuilder builder, DatabaseColumn column);
    protected virtual KeyBuilder VisitPrimaryKey(EntityTypeBuilder builder, DatabaseTable table);
    protected virtual EntityTypeBuilder VisitUniqueConstraints(EntityTypeBuilder builder, ICollection`1<DatabaseUniqueConstraint> uniqueConstraints);
    protected virtual IndexBuilder VisitUniqueConstraint(EntityTypeBuilder builder, DatabaseUniqueConstraint uniqueConstraint);
    protected virtual EntityTypeBuilder VisitIndexes(EntityTypeBuilder builder, ICollection`1<DatabaseIndex> indexes);
    protected virtual IndexBuilder VisitIndex(EntityTypeBuilder builder, DatabaseIndex index);
    protected virtual ModelBuilder VisitForeignKeys(ModelBuilder modelBuilder, IList`1<DatabaseForeignKey> foreignKeys);
    protected virtual IMutableForeignKey VisitForeignKey(ModelBuilder modelBuilder, DatabaseForeignKey foreignKey);
    protected virtual void AddNavigationProperties(IMutableForeignKey foreignKey);
    protected virtual List`1<string> ExistingIdentifiers(IEntityType entityType);
    protected virtual TypeScaffoldingInfo GetTypeScaffoldingInfo(DatabaseColumn column);
    private static void AssignOnDeleteAction(DatabaseForeignKey databaseForeignKey, IMutableForeignKey foreignKey);
    private static string NavigationUniquifier(string proposedIdentifier, ICollection`1<string> existingIdentifiers);
    [CompilerGeneratedAttribute]
private string <Create>b__15_1(DatabaseTable t);
    [CompilerGeneratedAttribute]
private string <Create>b__15_3(DatabaseTable t);
    [CompilerGeneratedAttribute]
private string <GetPropertyName>b__18_1(DatabaseColumn c);
    [CompilerGeneratedAttribute]
private bool <VisitPrimaryKey>b__26_0(DatabaseColumn c);
    [CompilerGeneratedAttribute]
private bool <VisitUniqueConstraint>b__28_0(DatabaseColumn c);
    [CompilerGeneratedAttribute]
private bool <VisitIndex>b__30_0(DatabaseColumn c);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.ReverseEngineerScaffolder : object {
    private IDatabaseModelFactory _databaseModelFactory;
    private IScaffoldingModelFactory _factory;
    private ICSharpUtilities _cSharpUtilities;
    private ICSharpHelper _code;
    private INamedConnectionStringResolver _connectionStringResolver;
    private static string DbContextSuffix;
    private static string DefaultDbContextName;
    [CompilerGeneratedAttribute]
private IModelCodeGeneratorSelector <ModelCodeGeneratorSelector>k__BackingField;
    private IModelCodeGeneratorSelector ModelCodeGeneratorSelector { get; }
    public ReverseEngineerScaffolder(IDatabaseModelFactory databaseModelFactory, IScaffoldingModelFactory scaffoldingModelFactory, IModelCodeGeneratorSelector modelCodeGeneratorSelector, ICSharpUtilities cSharpUtilities, ICSharpHelper cSharpHelper, INamedConnectionStringResolver connectionStringResolver);
    [CompilerGeneratedAttribute]
private IModelCodeGeneratorSelector get_ModelCodeGeneratorSelector();
    public virtual ScaffoldedModel ScaffoldModel(string connectionString, DatabaseModelFactoryOptions databaseOptions, ModelReverseEngineerOptions modelOptions, ModelCodeGenerationOptions codeOptions);
    public virtual SavedModelFiles Save(ScaffoldedModel scaffoldedModel, string outputDir, bool overwriteFiles);
    private static void CheckOutputFiles(ScaffoldedModel scaffoldedModel, string outputDir, bool overwriteFiles);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.ScaffoldingTypeMapper : object {
    private IRelationalTypeMappingSource _typeMappingSource;
    public ScaffoldingTypeMapper(IRelationalTypeMappingSource typeMappingSource);
    public virtual TypeScaffoldingInfo FindMapping(string storeType, bool keyOrIndex, bool rowVersion);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.TypeScaffoldingInfo : object {
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInferred>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ScaffoldUnicode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ScaffoldFixedLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ScaffoldMaxLength>k__BackingField;
    public Type ClrType { get; }
    public bool IsInferred { get; }
    public Nullable`1<bool> ScaffoldUnicode { get; }
    public Nullable`1<bool> ScaffoldFixedLength { get; }
    public Nullable`1<int> ScaffoldMaxLength { get; }
    public TypeScaffoldingInfo(Type clrType, bool inferred, Nullable`1<bool> scaffoldUnicode, Nullable`1<int> scaffoldMaxLength, Nullable`1<bool> scaffoldFixedLength);
    [CompilerGeneratedAttribute]
public virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
public virtual bool get_IsInferred();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_ScaffoldUnicode();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_ScaffoldFixedLength();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_ScaffoldMaxLength();
}
public interface Microsoft.EntityFrameworkCore.Scaffolding.IReverseEngineerScaffolder {
    public abstract virtual ScaffoldedModel ScaffoldModel(string connectionString, DatabaseModelFactoryOptions databaseOptions, ModelReverseEngineerOptions modelOptions, ModelCodeGenerationOptions codeOptions);
    public abstract virtual SavedModelFiles Save(ScaffoldedModel scaffoldedModel, string outputDir, bool overwriteFiles);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseColumnExtensions : object {
    [ExtensionAttribute]
public static string DisplayName(DatabaseColumn column);
    [ExtensionAttribute]
public static bool IsKeyOrIndex(DatabaseColumn column);
    [ExtensionAttribute]
public static bool IsRowVersion(DatabaseColumn column);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseForeignKeyExtensions : object {
    [ExtensionAttribute]
public static string DisplayName(DatabaseForeignKey foreignKey);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseTableExtensions : object {
    [ExtensionAttribute]
public static string DisplayName(DatabaseTable table);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions : object {
    [CompilerGeneratedAttribute]
private bool <UseDataAnnotations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressConnectionStringWarning>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModelNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    public bool UseDataAnnotations { get; public set; }
    public bool SuppressConnectionStringWarning { get; public set; }
    public string RootNamespace { get; public set; }
    public string ModelNamespace { get; public set; }
    public string ContextNamespace { get; public set; }
    public string Language { get; public set; }
    public string ContextDir { get; public set; }
    public string ContextName { get; public set; }
    public string ConnectionString { get; public set; }
    [CompilerGeneratedAttribute]
public virtual bool get_UseDataAnnotations();
    [CompilerGeneratedAttribute]
public virtual void set_UseDataAnnotations(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_SuppressConnectionStringWarning();
    [CompilerGeneratedAttribute]
public virtual void set_SuppressConnectionStringWarning(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_RootNamespace();
    [CompilerGeneratedAttribute]
public virtual void set_RootNamespace(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ModelNamespace();
    [CompilerGeneratedAttribute]
public virtual void set_ModelNamespace(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ContextNamespace();
    [CompilerGeneratedAttribute]
public virtual void set_ContextNamespace(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Language();
    [CompilerGeneratedAttribute]
public virtual void set_Language(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ContextDir();
    [CompilerGeneratedAttribute]
public virtual void set_ContextDir(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ContextName();
    [CompilerGeneratedAttribute]
public virtual void set_ContextName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ConnectionString();
    [CompilerGeneratedAttribute]
public virtual void set_ConnectionString(string value);
}
public abstract class Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerator : object {
    [CompilerGeneratedAttribute]
private ModelCodeGeneratorDependencies <Dependencies>k__BackingField;
    public string Language { get; }
    protected ModelCodeGeneratorDependencies Dependencies { get; }
    protected ModelCodeGenerator(ModelCodeGeneratorDependencies dependencies);
    public abstract virtual string get_Language();
    [CompilerGeneratedAttribute]
protected virtual ModelCodeGeneratorDependencies get_Dependencies();
    public abstract virtual ScaffoldedModel GenerateModel(IModel model, ModelCodeGenerationOptions options);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGeneratorDependencies : object {
}
public class Microsoft.EntityFrameworkCore.Scaffolding.ModelReverseEngineerOptions : object {
    [CompilerGeneratedAttribute]
private bool <UseDatabaseNames>k__BackingField;
    public bool UseDatabaseNames { get; public set; }
    [CompilerGeneratedAttribute]
public virtual bool get_UseDatabaseNames();
    [CompilerGeneratedAttribute]
public virtual void set_UseDatabaseNames(bool value);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.SavedModelFiles : object {
    [CompilerGeneratedAttribute]
private string <ContextFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <AdditionalFiles>k__BackingField;
    public string ContextFile { get; }
    public IList`1<string> AdditionalFiles { get; }
    public SavedModelFiles(string contextFile, IEnumerable`1<string> additionalFiles);
    [CompilerGeneratedAttribute]
public virtual string get_ContextFile();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_AdditionalFiles();
}
public class Microsoft.EntityFrameworkCore.Scaffolding.ScaffoldedFile : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    public string Path { get; public set; }
    public string Code { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Path();
    [CompilerGeneratedAttribute]
public virtual void set_Path(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Code();
    [CompilerGeneratedAttribute]
public virtual void set_Code(string value);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.ScaffoldedModel : object {
    [CompilerGeneratedAttribute]
private ScaffoldedFile <ContextFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ScaffoldedFile> <AdditionalFiles>k__BackingField;
    public ScaffoldedFile ContextFile { get; public set; }
    public IList`1<ScaffoldedFile> AdditionalFiles { get; }
    [CompilerGeneratedAttribute]
public virtual ScaffoldedFile get_ContextFile();
    [CompilerGeneratedAttribute]
public virtual void set_ContextFile(ScaffoldedFile value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ScaffoldedFile> get_AdditionalFiles();
}
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.Check : object {
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static IReadOnlyList`1<T> NotEmpty(IReadOnlyList`1<T> value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static string NotEmpty(string value, string parameterName);
    public static string NullButNotEmpty(string value, string parameterName);
    public static IReadOnlyList`1<T> HasNoNulls(IReadOnlyList`1<T> value, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void DebugAssert(bool condition, string message);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.DictionaryExtensions : object {
    [ExtensionAttribute]
public static TValue GetOrAddNew(IDictionary`2<TKey, TValue> source, TKey key);
    [ExtensionAttribute]
public static TValue Find(IReadOnlyDictionary`2<TKey, TValue> source, TKey key);
}
[ExtensionAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.DisposableExtensions : object {
    [ExtensionAttribute]
public static ValueTask DisposeAsyncIfAvailable(IDisposable disposable);
}
internal class Microsoft.Extensions.Hosting.HostFactoryResolver : object {
    public static string BuildWebHost;
    public static string CreateWebHostBuilder;
    public static string CreateHostBuilder;
    private static HostFactoryResolver();
    public static Func`2<String[], TWebHost> ResolveWebHostFactory(Assembly assembly);
    public static Func`2<String[], TWebHostBuilder> ResolveWebHostBuilderFactory(Assembly assembly);
    public static Func`2<String[], THostBuilder> ResolveHostBuilderFactory(Assembly assembly);
    private static Func`2<String[], T> ResolveFactory(Assembly assembly, string name);
    private static bool IsFactory(MethodInfo factory);
    public static Func`2<String[], IServiceProvider> ResolveServiceProviderFactory(Assembly assembly);
    private static object Build(object builder);
    private static IServiceProvider GetServiceProvider(object host);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Linq.Expressions.ExpressionExtensions : object {
    [ExtensionAttribute]
public static LambdaExpression UnwrapLambdaFromQuote(Expression expression);
    [ExtensionAttribute]
public static Expression UnwrapTypeConversion(Expression expression, Type& convertedType);
}
[ExtensionAttribute]
internal static class System.Reflection.MemberInfoExtensions : object {
    [ExtensionAttribute]
public static Type GetMemberType(MemberInfo memberInfo);
    [ExtensionAttribute]
public static bool IsSameAs(MemberInfo propertyInfo, MemberInfo otherPropertyInfo);
    [ExtensionAttribute]
public static string GetSimpleMemberName(MemberInfo member);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Reflection.PropertyInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsStatic(PropertyInfo property);
    [ExtensionAttribute]
public static bool IsCandidateProperty(PropertyInfo propertyInfo, bool needsWrite, bool publicOnly);
    [ExtensionAttribute]
public static bool IsEFIndexerProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static PropertyInfo FindGetterProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static PropertyInfo FindSetterProperty(PropertyInfo propertyInfo);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.SharedTypeExtensions : object {
    private static Dictionary`2<Type, object> _commonTypeDictionary;
    private static SharedTypeExtensions();
    [ExtensionAttribute]
public static Type UnwrapNullableType(Type type);
    [ExtensionAttribute]
public static bool IsNullableValueType(Type type);
    [ExtensionAttribute]
public static bool IsNullableType(Type type);
    [ExtensionAttribute]
public static bool IsValidEntityType(Type type);
    [ExtensionAttribute]
public static Type MakeNullable(Type type, bool nullable);
    [ExtensionAttribute]
public static bool IsNumeric(Type type);
    [ExtensionAttribute]
public static bool IsInteger(Type type);
    [ExtensionAttribute]
public static bool IsSignedInteger(Type type);
    [ExtensionAttribute]
public static bool IsAnonymousType(Type type);
    [ExtensionAttribute]
public static bool IsTupleType(Type type);
    [ExtensionAttribute]
public static PropertyInfo GetAnyProperty(Type type, string name);
    [ExtensionAttribute]
public static bool IsInstantiable(Type type);
    private static bool IsInstantiable(TypeInfo type);
    [ExtensionAttribute]
public static Type UnwrapEnumType(Type type);
    [ExtensionAttribute]
public static Type GetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetElementType(Type type, Type interfaceOrBaseType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetGenericTypeImplementations>d__17")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetGenericTypeImplementations(Type type, Type interfaceOrBaseType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetBaseTypes>d__18")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetBaseTypes(Type type);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetTypesInHierarchy>d__19")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetTypesInHierarchy(Type type);
    [ExtensionAttribute]
public static ConstructorInfo GetDeclaredConstructor(Type type, Type[] types);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetPropertiesInHierarchy>d__21")]
[ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetPropertiesInHierarchy(Type type, string name);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetMembersInHierarchy>d__22")]
[ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type, string name);
    [ExtensionAttribute]
public static object GetDefaultValue(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<TypeInfo> GetConstructibleTypes(Assembly assembly);
    [ExtensionAttribute]
public static IEnumerable`1<TypeInfo> GetLoadableDefinedTypes(Assembly assembly);
}
[ExtensionAttribute]
internal static class System.Text.StringBuilderExtensions : object {
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<string> values, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, string separator, String[] values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, Action`2<StringBuilder, T> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam param, Action`3<StringBuilder, T, TParam> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam1 param1, TParam2 param2, Action`4<StringBuilder, T, TParam1, TParam2> joinAction, string separator);
}
