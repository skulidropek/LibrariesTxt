[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    public string Contract { get; }
    public bool ForceFullStates { get; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4320")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    public string FormatParameterName { get; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; }
    public ImplicitUseTargetFlags TargetFlags { get; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.DotNet.Cli.CommandLine.CommandArgument : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultipleValues>k__BackingField;
    public string Name { get; public set; }
    public string Description { get; public set; }
    [NullableAttribute("1")]
public List`1<string> Values { get; }
    public bool MultipleValues { get; public set; }
    public string Value { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<string> get_Values();
    [CompilerGeneratedAttribute]
public bool get_MultipleValues();
    [CompilerGeneratedAttribute]
public void set_MultipleValues(bool value);
    public string get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.DotNet.Cli.CommandLine.CommandLineApplication : object {
    private bool _throwOnUnexpectedArg;
    [CompilerGeneratedAttribute]
private CommandLineApplication <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CommandOption> <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOption <OptionHelp>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOption <OptionVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CommandArgument> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <RemainingArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ApplicationArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsShowingInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<String[], int> <Invoke>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<string> <LongVersionGetter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<string> <ShortVersionGetter>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CommandLineApplication> <Commands>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HandleResponseFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowArgumentSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HandleRemainingArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ArgumentSeparatorHelpText>k__BackingField;
    [NullableAttribute("2")]
public CommandLineApplication Parent { get; public set; }
    [NullableAttribute("2")]
public string Name { get; public set; }
    [NullableAttribute("2")]
public string FullName { get; public set; }
    [NullableAttribute("2")]
public string Syntax { get; public set; }
    [NullableAttribute("2")]
public string Description { get; public set; }
    public List`1<CommandOption> Options { get; }
    [NullableAttribute("2")]
public CommandOption OptionHelp { get; private set; }
    [NullableAttribute("2")]
public CommandOption OptionVersion { get; private set; }
    public List`1<CommandArgument> Arguments { get; }
    public List`1<string> RemainingArguments { get; }
    public List`1<string> ApplicationArguments { get; }
    public bool IsShowingInformation { get; protected set; }
    public Func`2<String[], int> Invoke { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<string> LongVersionGetter { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<string> ShortVersionGetter { get; public set; }
    public List`1<CommandLineApplication> Commands { get; }
    public bool HandleResponseFiles { get; public set; }
    public bool AllowArgumentSeparator { get; public set; }
    public bool HandleRemainingArguments { get; public set; }
    [NullableAttribute("2")]
public string ArgumentSeparatorHelpText { get; public set; }
    public CommandLineApplication(bool throwOnUnexpectedArg);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public CommandLineApplication get_Parent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Parent(CommandLineApplication value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_FullName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_FullName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Syntax();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Syntax(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Description();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public List`1<CommandOption> get_Options();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public CommandOption get_OptionHelp();
    [CompilerGeneratedAttribute]
private void set_OptionHelp(CommandOption value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public CommandOption get_OptionVersion();
    [CompilerGeneratedAttribute]
private void set_OptionVersion(CommandOption value);
    [CompilerGeneratedAttribute]
public List`1<CommandArgument> get_Arguments();
    [CompilerGeneratedAttribute]
public List`1<string> get_RemainingArguments();
    [CompilerGeneratedAttribute]
public List`1<string> get_ApplicationArguments();
    [CompilerGeneratedAttribute]
public bool get_IsShowingInformation();
    [CompilerGeneratedAttribute]
protected void set_IsShowingInformation(bool value);
    [CompilerGeneratedAttribute]
public Func`2<String[], int> get_Invoke();
    [CompilerGeneratedAttribute]
public void set_Invoke(Func`2<String[], int> value);
    [CompilerGeneratedAttribute]
public Func`1<string> get_LongVersionGetter();
    [CompilerGeneratedAttribute]
public void set_LongVersionGetter(Func`1<string> value);
    [CompilerGeneratedAttribute]
public Func`1<string> get_ShortVersionGetter();
    [CompilerGeneratedAttribute]
public void set_ShortVersionGetter(Func`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<CommandLineApplication> get_Commands();
    [CompilerGeneratedAttribute]
public bool get_HandleResponseFiles();
    [CompilerGeneratedAttribute]
public void set_HandleResponseFiles(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowArgumentSeparator();
    [CompilerGeneratedAttribute]
public void set_AllowArgumentSeparator(bool value);
    [CompilerGeneratedAttribute]
public bool get_HandleRemainingArguments();
    [CompilerGeneratedAttribute]
public void set_HandleRemainingArguments(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ArgumentSeparatorHelpText();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ArgumentSeparatorHelpText(string value);
    public CommandLineApplication Command(string name, bool throwOnUnexpectedArg);
    public CommandLineApplication Command(string name, Action`1<CommandLineApplication> configuration, bool throwOnUnexpectedArg);
    public CommandOption Option(string template, string description, CommandOptionType optionType);
    public CommandOption Option(string template, string description, CommandOptionType optionType, Action`1<CommandOption> configuration);
    public CommandArgument Argument(string name, string description, bool multipleValues);
    public CommandArgument Argument(string name, string description, Action`1<CommandArgument> configuration, bool multipleValues);
    public void OnExecute(Func`2<String[], int> invoke);
    public void OnExecute(Func`2<String[], Task`1<int>> invoke);
    public int Execute(String[] args);
    private static ParseOptionResult ParseOption(bool isLongOption, CommandLineApplication command, String[] args, Int32& index, CommandOption& option);
    private static CommandLineApplication ParseSubCommand(string arg, CommandLineApplication command);
    public CommandOption HelpOption(string template);
    public CommandOption VersionOption(string template, string shortFormVersion, string longFormVersion);
    public CommandOption VersionOption(string template, Func`1<string> shortFormVersionGetter, Func`1<string> longFormVersionGetter);
    public void ShowHint();
    [NullableContextAttribute("2")]
public void ShowHelp(string commandName);
    public void ShowVersion();
    [NullableContextAttribute("2")]
public string GetFullNameAndVersion();
    public void ShowRootCommandFullNameAndVersion();
    private static int MaxOptionTemplateLength(IEnumerable`1<CommandOption> options);
    private static int MaxCommandLength(IEnumerable`1<CommandLineApplication> commands);
    private static int MaxArgumentLength(IEnumerable`1<CommandArgument> arguments);
    private static void HandleUnexpectedArg(CommandLineApplication command, String[] args, int index, string argTypeName);
    [IteratorStateMachineAttribute("Microsoft.DotNet.Cli.CommandLine.CommandLineApplication/<ExpandResponseFiles>d__101")]
private IEnumerable`1<string> ExpandResponseFiles(IEnumerable`1<string> args);
    private IEnumerable`1<string> ParseResponseFile(string fileName);
}
[ExtensionAttribute]
internal static class Microsoft.DotNet.Cli.CommandLine.CommandLineApplicationExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static CommandOption Option(CommandLineApplication command, string template, string description);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.DotNet.Cli.CommandLine.CommandOption : object {
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LongName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SymbolName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <BoolValue>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOptionType <OptionType>k__BackingField;
    [NullableAttribute("1")]
public string Template { get; public set; }
    public string ShortName { get; public set; }
    public string LongName { get; public set; }
    public string SymbolName { get; public set; }
    public string ValueName { get; public set; }
    public string Description { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<string> Values { get; }
    public Nullable`1<bool> BoolValue { get; private set; }
    public CommandOptionType OptionType { get; }
    [NullableContextAttribute("1")]
public CommandOption(string template, CommandOptionType optionType);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Template();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Template(string value);
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public void set_ShortName(string value);
    [CompilerGeneratedAttribute]
public string get_LongName();
    [CompilerGeneratedAttribute]
public void set_LongName(string value);
    [CompilerGeneratedAttribute]
public string get_SymbolName();
    [CompilerGeneratedAttribute]
public void set_SymbolName(string value);
    [CompilerGeneratedAttribute]
public string get_ValueName();
    [CompilerGeneratedAttribute]
public void set_ValueName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Values();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_BoolValue();
    [CompilerGeneratedAttribute]
private void set_BoolValue(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public CommandOptionType get_OptionType();
    public bool TryParse(string value);
    public bool HasValue();
    public string Value();
    private static bool IsEnglishLetter(char c);
}
internal enum Microsoft.DotNet.Cli.CommandLine.CommandOptionType : Enum {
    public int value__;
    public static CommandOptionType MultipleValue;
    public static CommandOptionType SingleValue;
    public static CommandOptionType BoolValue;
    public static CommandOptionType NoValue;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.DotNet.Cli.CommandLine.CommandParsingException : Exception {
    [CompilerGeneratedAttribute]
private CommandLineApplication <Command>k__BackingField;
    public CommandLineApplication Command { get; }
    public CommandParsingException(CommandLineApplication command, string message);
    [CompilerGeneratedAttribute]
public CommandLineApplication get_Command();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.EntityFrameworkCore.Design.DbContextActivator : object {
    public static DbContext CreateInstance(Type contextType, Assembly startupAssembly, IOperationReportHandler reportHandler);
    public static DbContext CreateInstance(Type contextType, Assembly startupAssembly, IOperationReportHandler reportHandler, String[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Design.DesignTimeServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddEntityFrameworkDesignTimeServices(IServiceCollection services, IOperationReporter reporter, Func`1<IServiceProvider> applicationServiceProviderAccessor);
    [ExtensionAttribute]
public static IServiceCollection AddDbContextDesignTimeServices(IServiceCollection services, DbContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment : object {
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <TypeArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<object> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHandledByDataAnnotations>k__BackingField;
    [CompilerGeneratedAttribute]
private FluentApiCodeFragment <ChainedCall>k__BackingField;
    [NullableAttribute("2")]
public string Namespace { get; public set; }
    [NullableAttribute("2")]
public string DeclaringType { get; public set; }
    public string Method { get; public set; }
    public IList`1<string> TypeArguments { get; public set; }
    private IEnumerable`1<string> Microsoft.EntityFrameworkCore.Design.IMethodCallCodeFragment.TypeArguments { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<object> Arguments { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerable`1<object> Microsoft.EntityFrameworkCore.Design.IMethodCallCodeFragment.Arguments { get; }
    public bool IsHandledByDataAnnotations { get; public set; }
    [NullableAttribute("2")]
public FluentApiCodeFragment ChainedCall { get; public set; }
    [NullableAttribute("2")]
private IMethodCallCodeFragment Microsoft.EntityFrameworkCore.Design.IMethodCallCodeFragment.ChainedCall { get; }
    public FluentApiCodeFragment(string method);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Namespace();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Namespace(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_DeclaringType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_DeclaringType(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Method();
    [CompilerGeneratedAttribute]
public virtual void set_Method(string value);
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_TypeArguments();
    [CompilerGeneratedAttribute]
public virtual void set_TypeArguments(IList`1<string> value);
    private sealed virtual override IEnumerable`1<string> Microsoft.EntityFrameworkCore.Design.IMethodCallCodeFragment.get_TypeArguments();
    [CompilerGeneratedAttribute]
public virtual IList`1<object> get_Arguments();
    [CompilerGeneratedAttribute]
public virtual void set_Arguments(IList`1<object> value);
    private sealed virtual override IEnumerable`1<object> Microsoft.EntityFrameworkCore.Design.IMethodCallCodeFragment.get_Arguments();
    [CompilerGeneratedAttribute]
public virtual bool get_IsHandledByDataAnnotations();
    [CompilerGeneratedAttribute]
public virtual void set_IsHandledByDataAnnotations(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual FluentApiCodeFragment get_ChainedCall();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_ChainedCall(FluentApiCodeFragment value);
    private sealed virtual override IMethodCallCodeFragment Microsoft.EntityFrameworkCore.Design.IMethodCallCodeFragment.get_ChainedCall();
    [NullableContextAttribute("2")]
public static FluentApiCodeFragment From(MethodCallCodeFragment call);
    public virtual FluentApiCodeFragment Chain(FluentApiCodeFragment call);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment/<GetRequiredUsings>d__37")]
public virtual IEnumerable`1<string> GetRequiredUsings();
    public virtual FluentApiCodeFragment FilterChain(Func`2<FluentApiCodeFragment, bool> predicate);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Design.ILanguageBasedService {
    public string Language { get; }
    public abstract virtual string get_Language();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.Internal.AppServiceProviderFactory : object {
    private Assembly _startupAssembly;
    private IOperationReporter _reporter;
    public AppServiceProviderFactory(Assembly startupAssembly, IOperationReporter reporter);
    public virtual IServiceProvider Create(String[] args);
    private IServiceProvider CreateFromHosting(String[] args);
    private IServiceProvider CreateEmptyServiceProvider();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.Internal.ContextInfo : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Options>k__BackingField;
    public string Type { get; public set; }
    public string ProviderName { get; public set; }
    public string DatabaseName { get; public set; }
    public string DataSource { get; public set; }
    public string Options { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProviderName();
    [CompilerGeneratedAttribute]
public virtual void set_ProviderName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DatabaseName();
    [CompilerGeneratedAttribute]
public virtual void set_DatabaseName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DataSource();
    [CompilerGeneratedAttribute]
public virtual void set_DataSource(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Options();
    [CompilerGeneratedAttribute]
public virtual void set_Options(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.Internal.CSharpHelper : object {
    private ITypeMappingSource _typeMappingSource;
    private Project _project;
    private LinqToCSharpSyntaxTranslator _translator;
    private static IReadOnlyCollection`1<string> Keywords;
    private static IReadOnlyDictionary`2<Type, Func`3<CSharpHelper, object, string>> LiteralFuncs;
    public CSharpHelper(ITypeMappingSource typeMappingSource);
    private static CSharpHelper();
    public virtual string Lambda(IReadOnlyList`1<string> properties, string lambdaIdentifier);
    public virtual string Reference(Type type, Nullable`1<bool> fullName);
    protected virtual bool ShouldUseFullName(Type type);
    protected virtual bool ShouldUseFullName(string shortTypeName);
    public virtual string Identifier(string name, ICollection`1<string> scope, Nullable`1<bool> capitalize);
    private static void ChangeFirstLetterCase(StringBuilder builder, bool capitalize);
    public virtual string Namespace(String[] name);
    public virtual string Literal(string value);
    public virtual string Literal(bool value);
    public virtual string Literal(byte value);
    public virtual string Literal(char value);
    public virtual string Literal(DateOnly value);
    public virtual string Literal(DateTime value);
    public virtual string Literal(DateTimeOffset value);
    public virtual string Literal(decimal value);
    public virtual string Literal(double value);
    private static string EnsureDecimalPlaces(double number);
    public virtual string Literal(float value);
    public virtual string Literal(Guid value);
    public virtual string Literal(int value);
    public virtual string Literal(long value);
    public virtual string Literal(sbyte value);
    public virtual string Literal(short value);
    public virtual string Literal(TimeOnly value);
    public virtual string Literal(TimeSpan value);
    public virtual string Literal(UInt32 value);
    public virtual string Literal(ulong value);
    public virtual string Literal(ushort value);
    public virtual string Literal(BigInteger value);
    public virtual string Literal(Type value, Nullable`1<bool> useFullName);
    [NullableContextAttribute("0")]
public virtual string Literal(Nullable`1<T> value);
    public virtual string Literal(T[] values, bool vertical);
    private string Array(Type type, IEnumerable values, bool vertical);
    private string ValueTuple(ITuple tuple);
    public virtual string Literal(Object[0...,0...] values);
    public virtual string Literal(List`1<T> values, bool vertical);
    private string List(Type type, IEnumerable values, bool vertical);
    public virtual string Literal(Dictionary`2<TKey, TValue> dict, bool vertical);
    private string Dictionary(Type keyType, Type valueType, IDictionary dict, bool vertical);
    private static string HandleEnumerable(IndentedStringBuilder builder, bool vertical, IEnumerable values, Action`1<object> handleValue);
    public virtual string Literal(Enum value, bool fullName);
    protected virtual string GetSimpleEnumValue(Type type, string name, bool fullName);
    protected virtual string GetCompositeEnumValue(Type type, Enum flags, bool fullName);
    internal static IReadOnlyCollection`1<Enum> GetFlags(Enum flags);
    public virtual string UnknownLiteral(object value);
    private bool HandleExpression(Expression expression, StringBuilder builder, bool simple);
    private bool HandleArguments(IEnumerable`1<Expression> argumentExpressions, StringBuilder builder);
    private bool HandleList(IEnumerable`1<Expression> argumentExpressions, StringBuilder builder, bool simple);
    public virtual string Fragment(IMethodCallCodeFragment fragment, string instanceIdentifier, bool typeQualified);
    public virtual string Fragment(IMethodCallCodeFragment fragment, int indent);
    public virtual string Fragment(NestedClosureCodeFragment fragment, int indent);
    public virtual string Fragment(PropertyAccessorCodeFragment fragment);
    public virtual string Fragment(AttributeCodeFragment fragment);
    public virtual string XmlComment(string comment, int indent);
    public virtual string Arguments(IEnumerable`1<object> values);
    public virtual IEnumerable`1<string> GetRequiredUsings(Type type);
    private string ToSourceCode(SyntaxNode node);
    public virtual string Statement(Expression node, ISet`1<string> collectedNamespaces);
    public virtual string Expression(Expression node, ISet`1<string> collectedNamespaces);
    private static bool IsIdentifierStartCharacter(char ch);
    private static bool IsIdentifierPartCharacter(char ch);
    private static bool IsLetterChar(UnicodeCategory cat);
    [CompilerGeneratedAttribute]
private void <ValueTuple>g__AppendItem|39_0(object item, <>c__DisplayClass39_0& );
    [CompilerGeneratedAttribute]
private void <Fragment>g__AppendMethodCall|55_0(IMethodCallCodeFragment current, <>c__DisplayClass55_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.Internal.DatabaseOperations : object {
    private string _projectDir;
    private string _rootNamespace;
    private string _language;
    private bool _nullable;
    private DesignTimeServicesBuilder _servicesBuilder;
    private String[] _args;
    public DatabaseOperations(IOperationReporter reporter, Assembly assembly, Assembly startupAssembly, string projectDir, string rootNamespace, string language, bool nullable, String[] args);
    public virtual SavedModelFiles ScaffoldContext(string provider, string connectionString, string outputDir, string outputContextDir, string dbContextClassName, IEnumerable`1<string> schemas, IEnumerable`1<string> tables, string modelNamespace, string contextNamespace, bool useDataAnnotations, bool overwriteFiles, bool useDatabaseNames, bool suppressOnConfiguring, bool noPluralize);
    private string GetNamespaceFromOutputPath(string directoryPath);
    private static string SubnamespaceFromOutputPath(string projectDir, string outputDir);
    private static string MakeDirRelative(string root, string path);
    private static string NormalizeDir(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.Internal.DbContextOperations : object {
    private IOperationReporter _reporter;
    private Assembly _assembly;
    private Assembly _startupAssembly;
    private string _projectDir;
    private string _rootNamespace;
    private string _language;
    private bool _nullable;
    private String[] _args;
    private AppServiceProviderFactory _appServicesFactory;
    private DesignTimeServicesBuilder _servicesBuilder;
    public DbContextOperations(IOperationReporter reporter, Assembly assembly, Assembly startupAssembly, string projectDir, string rootNamespace, string language, bool nullable, String[] args);
    protected DbContextOperations(IOperationReporter reporter, Assembly assembly, Assembly startupAssembly, string projectDir, string rootNamespace, string language, bool nullable, String[] args, AppServiceProviderFactory appServicesFactory);
    [NullableContextAttribute("2")]
public virtual void DropDatabase(string contextType);
    public virtual string ScriptDbContext(string contextType);
    [NullableContextAttribute("2")]
public virtual void Optimize(string outputDir, string modelNamespace, string contextTypeName);
    private string GetNamespaceFromOutputPath(string directoryPath);
    private static string SubnamespaceFromOutputPath(string projectDir, string outputDir);
    public virtual DbContext CreateContext(string contextType);
    public virtual IEnumerable`1<Type> GetContextTypes();
    public virtual Type GetContextType(string name);
    private IDictionary`2<Type, Func`1<DbContext>> FindContextTypes();
    public virtual ContextInfo GetContextInfo(string contextType);
    private static Func`1<DbContext> FindContextFromRuntimeDbContextFactory(IServiceProvider appServices, Type contextType);
    private Func`1<DbContext> FindContextFactory(Type contextType);
    private DbContext CreateContextFromFactory(Type factory, Type contextType);
    private KeyValuePair`2<Type, Func`1<DbContext>> FindContextType(string name);
    private static IDictionary`2<Type, Func`1<DbContext>> FilterTypes(IDictionary`2<Type, Func`1<DbContext>> types, string name, bool ignoreCase);
}
public class Microsoft.EntityFrameworkCore.Design.Internal.DesignTimeConnectionStringResolver : NamedConnectionStringResolverBase {
    private Func`1<IServiceProvider> _applicationServiceProviderAccessor;
    [NullableAttribute("2")]
protected IServiceProvider ApplicationServiceProvider { get; }
    public DesignTimeConnectionStringResolver(Func`1<IServiceProvider> applicationServiceProviderAccessor);
    [NullableContextAttribute("2")]
protected virtual IServiceProvider get_ApplicationServiceProvider();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.Internal.DesignTimeServicesBuilder : object {
    private Assembly _assembly;
    private Assembly _startupAssembly;
    private IOperationReporter _reporter;
    private String[] _args;
    public DesignTimeServicesBuilder(Assembly assembly, Assembly startupAssembly, IOperationReporter reporter, String[] args);
    public virtual IServiceProvider Build(DbContext context);
    public virtual IServiceCollection CreateServiceCollection(DbContext context);
    public virtual IServiceProvider Build(string provider);
    public virtual IServiceCollection CreateServiceCollection(string provider);
    private IServiceProvider GetApplicationServices();
    private void ConfigureUserServices(IServiceCollection services);
    private void ConfigureReferencedServices(IServiceCollection services, string provider);
    private void ConfigureProviderServices(string provider, IServiceCollection services, bool throwOnError);
    private static void ConfigureDesignTimeServices(Type designTimeServicesType, IServiceCollection services);
}
public class Microsoft.EntityFrameworkCore.Design.Internal.HumanizerPluralizer : object {
    [NullableContextAttribute("1")]
public virtual string Pluralize(string name);
    [NullableContextAttribute("1")]
public virtual string Singularize(string name);
}
public interface Microsoft.EntityFrameworkCore.Design.Internal.IDesignTimeConnectionStringResolver {
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Design.Internal.IOperationReporter {
    public abstract virtual void WriteError(string message);
    public abstract virtual void WriteWarning(string message);
    public abstract virtual void WriteInformation(string message);
    public abstract virtual void WriteVerbose(string message);
    public virtual void Write(CompilerError error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Design.Internal.LanguageBasedSelector`1 : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Services>k__BackingField;
    protected IEnumerable`1<T> Services { get; }
    protected LanguageBasedSelector`1(IEnumerable`1<T> services);
    [CompilerGeneratedAttribute]
protected virtual IEnumerable`1<T> get_Services();
    public virtual T Select(string language);
    protected virtual T Select(string language, IEnumerable`1<T> services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.Internal.MigrationInfo : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Applied>k__BackingField;
    public string Id { get; public set; }
    public string Name { get; public set; }
    public Nullable`1<bool> Applied { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_Applied();
    [CompilerGeneratedAttribute]
public virtual void set_Applied(Nullable`1<bool> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.Internal.MigrationsOperations : object {
    private IOperationReporter _reporter;
    private Assembly _assembly;
    private string _projectDir;
    private string _rootNamespace;
    private string _language;
    private DesignTimeServicesBuilder _servicesBuilder;
    private DbContextOperations _contextOperations;
    [NullableContextAttribute("1")]
public MigrationsOperations(IOperationReporter reporter, Assembly assembly, Assembly startupAssembly, string projectDir, string rootNamespace, string language, bool nullable, String[] args);
    public virtual MigrationFiles AddMigration(string name, string outputDir, string contextType, string namespace);
    private string SubnamespaceFromOutputPath(string outputDir);
    public virtual IEnumerable`1<MigrationInfo> GetMigrations(string contextType, string connectionString, bool noConnect);
    public virtual string ScriptMigration(string fromMigration, string toMigration, MigrationsSqlGenerationOptions options, string contextType);
    public virtual void UpdateDatabase(string targetMigration, string connectionString, string contextType);
    [NullableContextAttribute("1")]
public virtual MigrationFiles RemoveMigration(string contextType, bool force);
    public virtual void HasPendingModelChanges(string contextType);
    private static void EnsureServices(IServiceProvider services);
    private void EnsureMigrationsAssembly(IServiceProvider services);
}
public class Microsoft.EntityFrameworkCore.Design.Internal.OperationLogger : object {
    private string _categoryName;
    private IOperationReporter _reporter;
    [NullableContextAttribute("1")]
public OperationLogger(string categoryName, IOperationReporter reporter);
    public virtual bool IsEnabled(LogLevel logLevel);
    [NullableContextAttribute("1")]
public virtual IDisposable BeginScope(TState state);
    [NullableContextAttribute("2")]
public virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    private static string GetMessage(TState state, Exception exception, Func`3<TState, Exception, string> formatter);
}
public class Microsoft.EntityFrameworkCore.Design.Internal.OperationLoggerProvider : object {
    private IOperationReporter _reporter;
    [NullableContextAttribute("1")]
public OperationLoggerProvider(IOperationReporter reporter);
    [NullableContextAttribute("1")]
public virtual ILogger CreateLogger(string categoryName);
    public virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.Internal.OperationReporter : object {
    private IOperationReportHandler _handler;
    [NullableContextAttribute("2")]
public OperationReporter(IOperationReportHandler handler);
    public virtual void WriteError(string message);
    public virtual void WriteWarning(string message);
    public virtual void WriteInformation(string message);
    public virtual void WriteVerbose(string message);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Design.IOperationReportHandler {
    public int Version { get; }
    public abstract virtual int get_Version();
    public abstract virtual void OnError(string message);
    public abstract virtual void OnWarning(string message);
    public abstract virtual void OnInformation(string message);
    public abstract virtual void OnVerbose(string message);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Design.IOperationResultHandler {
    public int Version { get; }
    public abstract virtual int get_Version();
    [NullableContextAttribute("2")]
public abstract virtual void OnResult(object value);
    public abstract virtual void OnError(string type, string message, string stackTrace);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Design.IPluralizer {
    public abstract virtual string Pluralize(string identifier);
    public abstract virtual string Singularize(string identifier);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragmentExtensions : object {
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragmentExtensions/<GetRequiredUsings>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<string> GetRequiredUsings(MethodCallCodeFragment methodCall);
}
public class Microsoft.EntityFrameworkCore.Design.NamespaceComparer : object {
    [NullableContextAttribute("2")]
public virtual int Compare(string x, string y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.OperationException : Exception {
    public OperationException(string message);
    public OperationException(string message, Exception innerException);
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
public OperationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.EntityFrameworkCore.Design.OperationExecutor : MarshalByRefObject {
    private string _projectDir;
    private string _targetName;
    private string _startupTargetName;
    private string _rootNamespace;
    private string _language;
    private bool _nullable;
    private String[] _designArgs;
    private OperationReporter _reporter;
    private DbContextOperations _contextOperations;
    private DatabaseOperations _databaseOperations;
    private MigrationsOperations _migrationsOperations;
    private Assembly _assembly;
    private Assembly _startupAssembly;
    [NullableAttribute("1")]
private Assembly Assembly { get; }
    [NullableAttribute("1")]
private Assembly StartupAssembly { get; }
    [NullableAttribute("1")]
private MigrationsOperations MigrationsOperations { get; }
    [NullableAttribute("1")]
private DbContextOperations ContextOperations { get; }
    [NullableAttribute("1")]
private DatabaseOperations DatabaseOperations { get; }
    [NullableContextAttribute("1")]
public OperationExecutor(IOperationReportHandler reportHandler, IDictionary args);
    private Assembly get_Assembly();
    private Assembly get_StartupAssembly();
    private MigrationsOperations get_MigrationsOperations();
    private DbContextOperations get_ContextOperations();
    private DatabaseOperations get_DatabaseOperations();
    private IDictionary AddMigrationImpl(string name, string outputDir, string contextType, string namespace);
    private IDictionary GetContextInfoImpl(string contextType);
    private void UpdateDatabaseImpl(string targetMigration, string connectionString, string contextType);
    private string ScriptMigrationImpl(string fromMigration, string toMigration, bool idempotent, bool noTransactions, string contextType);
    private IDictionary RemoveMigrationImpl(string contextType, bool force);
    private IEnumerable`1<IDictionary> GetContextTypesImpl();
    private IEnumerable`1<IDictionary> GetMigrationsImpl(string contextType, string connectionString, bool noConnect);
    private void OptimizeContextImpl(string outputDir, string modelNamespace, string contextType);
    private IDictionary ScaffoldContextImpl(string provider, string connectionString, string outputDir, string outputDbContextDir, string dbContextClassName, IEnumerable`1<string> schemaFilters, IEnumerable`1<string> tableFilters, string modelNamespace, string contextNamespace, bool useDataAnnotations, bool overwriteFiles, bool useDatabaseNames, bool suppressOnConfiguring, bool noPluralize);
    private void DropDatabaseImpl(string contextType);
    private string ScriptDbContextImpl(string contextType);
    private void HasPendingModelChangesImpl(string contextType);
    [CompilerGeneratedAttribute]
private Assembly <get_Assembly>g__Create|15_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.OperationReportHandler : MarshalByRefObject {
    private Action`1<string> _errorHandler;
    private Action`1<string> _warningHandler;
    private Action`1<string> _informationHandler;
    private Action`1<string> _verboseHandler;
    public int Version { get; }
    public OperationReportHandler(Action`1<string> errorHandler, Action`1<string> warningHandler, Action`1<string> informationHandler, Action`1<string> verboseHandler);
    public virtual int get_Version();
    public virtual void OnError(string message);
    public virtual void OnWarning(string message);
    public virtual void OnInformation(string message);
    public virtual void OnVerbose(string message);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.OperationResultHandler : MarshalByRefObject {
    private bool _hasResult;
    private object _result;
    private string _errorType;
    private string _errorMessage;
    private string _errorStackTrace;
    public int Version { get; }
    public bool HasResult { get; }
    public object Result { get; }
    public string ErrorType { get; }
    public string ErrorMessage { get; }
    public string ErrorStackTrace { get; }
    public virtual int get_Version();
    public virtual bool get_HasResult();
    public virtual object get_Result();
    public virtual string get_ErrorType();
    public virtual string get_ErrorMessage();
    public virtual string get_ErrorStackTrace();
    public virtual void OnResult(object value);
    [NullableContextAttribute("1")]
public virtual void OnError(string type, string message, string stackTrace);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.EntityFrameworkCore.EnumerableMethods : object {
    [CompilerGeneratedAttribute]
private static MethodInfo <AggregateWithSeedSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <All>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AsEnumerable>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Cast>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Concat>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Contains>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <CountWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <CountWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <DefaultIfEmptyWithoutArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <DefaultIfEmptyWithArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Distinct>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ElementAt>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ElementAtOrDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Except>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeySelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyElementSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyElementResultSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyResultSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupJoin>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Intersect>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Join>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <JoinWithComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LongCountWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LongCountWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MaxWithoutSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MaxWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MinWithoutSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MinWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OfType>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OrderByDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Reverse>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Select>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectWithOrdinal>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectManyWithoutCollectionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectManyWithCollectionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SequenceEqual>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SkipWhile>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Take>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <TakeWhile>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ThenBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ThenByDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ToArray>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ToList>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Union>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ZipWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <SumWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <AverageWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MaxWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MaxWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MinWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MinWithSelectorMethods>k__BackingField;
    public static MethodInfo AggregateWithSeedSelector { get; }
    public static MethodInfo All { get; }
    public static MethodInfo AnyWithoutPredicate { get; }
    public static MethodInfo AnyWithPredicate { get; }
    public static MethodInfo AsEnumerable { get; }
    public static MethodInfo Cast { get; }
    public static MethodInfo Concat { get; }
    public static MethodInfo Contains { get; }
    public static MethodInfo CountWithoutPredicate { get; }
    public static MethodInfo CountWithPredicate { get; }
    public static MethodInfo DefaultIfEmptyWithoutArgument { get; }
    public static MethodInfo DefaultIfEmptyWithArgument { get; }
    public static MethodInfo Distinct { get; }
    public static MethodInfo ElementAt { get; }
    public static MethodInfo ElementAtOrDefault { get; }
    public static MethodInfo Except { get; }
    public static MethodInfo FirstWithoutPredicate { get; }
    public static MethodInfo FirstWithPredicate { get; }
    public static MethodInfo FirstOrDefaultWithoutPredicate { get; }
    public static MethodInfo FirstOrDefaultWithPredicate { get; }
    public static MethodInfo GroupByWithKeySelector { get; }
    public static MethodInfo GroupByWithKeyElementSelector { get; }
    public static MethodInfo GroupByWithKeyElementResultSelector { get; }
    public static MethodInfo GroupByWithKeyResultSelector { get; }
    public static MethodInfo GroupJoin { get; }
    public static MethodInfo Intersect { get; }
    public static MethodInfo Join { get; }
    public static MethodInfo JoinWithComparer { get; }
    public static MethodInfo LastWithoutPredicate { get; }
    public static MethodInfo LastWithPredicate { get; }
    public static MethodInfo LastOrDefaultWithoutPredicate { get; }
    public static MethodInfo LastOrDefaultWithPredicate { get; }
    public static MethodInfo LongCountWithoutPredicate { get; }
    public static MethodInfo LongCountWithPredicate { get; }
    public static MethodInfo MaxWithoutSelector { get; }
    public static MethodInfo MaxWithSelector { get; }
    public static MethodInfo MinWithoutSelector { get; }
    public static MethodInfo MinWithSelector { get; }
    public static MethodInfo OfType { get; }
    public static MethodInfo OrderBy { get; }
    public static MethodInfo OrderByDescending { get; }
    public static MethodInfo Reverse { get; }
    public static MethodInfo Select { get; }
    public static MethodInfo SelectWithOrdinal { get; }
    public static MethodInfo SelectManyWithoutCollectionSelector { get; }
    public static MethodInfo SelectManyWithCollectionSelector { get; }
    public static MethodInfo SequenceEqual { get; }
    public static MethodInfo SingleWithoutPredicate { get; }
    public static MethodInfo SingleWithPredicate { get; }
    public static MethodInfo SingleOrDefaultWithoutPredicate { get; }
    public static MethodInfo SingleOrDefaultWithPredicate { get; }
    public static MethodInfo Skip { get; }
    public static MethodInfo SkipWhile { get; }
    public static MethodInfo Take { get; }
    public static MethodInfo TakeWhile { get; }
    public static MethodInfo ThenBy { get; }
    public static MethodInfo ThenByDescending { get; }
    public static MethodInfo ToArray { get; }
    public static MethodInfo ToList { get; }
    public static MethodInfo Union { get; }
    public static MethodInfo Where { get; }
    public static MethodInfo ZipWithSelector { get; }
    private static Dictionary`2<Type, MethodInfo> SumWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> AverageWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MaxWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MaxWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MinWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MinWithSelectorMethods { get; }
    private static EnumerableMethods();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AggregateWithSeedSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_All();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AsEnumerable();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Cast();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Concat();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Contains();
    [CompilerGeneratedAttribute]
public static MethodInfo get_CountWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_CountWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_DefaultIfEmptyWithoutArgument();
    [CompilerGeneratedAttribute]
public static MethodInfo get_DefaultIfEmptyWithArgument();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Distinct();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ElementAt();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ElementAtOrDefault();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Except();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeySelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyElementSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyElementResultSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyResultSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupJoin();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Intersect();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Join();
    [CompilerGeneratedAttribute]
public static MethodInfo get_JoinWithComparer();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LongCountWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LongCountWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MaxWithoutSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MaxWithSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MinWithoutSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MinWithSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OfType();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OrderBy();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OrderByDescending();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Reverse();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Select();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectWithOrdinal();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectManyWithoutCollectionSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectManyWithCollectionSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SequenceEqual();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Skip();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SkipWhile();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Take();
    [CompilerGeneratedAttribute]
public static MethodInfo get_TakeWhile();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ThenBy();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ThenByDescending();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ToArray();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ToList();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Union();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Where();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ZipWithSelector();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_SumWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_AverageWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MaxWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MaxWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MinWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MinWithSelectorMethods();
    public static MethodInfo GetSumWithSelector(Type type);
    public static MethodInfo GetAverageWithSelector(Type type);
    public static MethodInfo GetMaxWithoutSelector(Type type);
    public static MethodInfo GetMaxWithSelector(Type type);
    public static MethodInfo GetMinWithoutSelector(Type type);
    public static MethodInfo GetMinWithSelector(Type type);
    [CompilerGeneratedAttribute]
internal static MethodInfo <.cctor>g__GetMethod|210_65(string name, int genericParameterCount, Func`2<Type[], Type[]> parameterGenerator, <>c__DisplayClass210_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.EntityFrameworkCore.Internal.DesignStrings : object {
    private static ResourceManager _resourceManager;
    public static string BundleFullName { get; }
    public static string CannotGenerateTypeQualifiedMethodCall { get; }
    public static string CircularBaseClassDependency { get; }
    public static string ConnectionDescription { get; }
    public static string DestructiveOperation { get; }
    public static string Done { get; }
    public static string FindingContextFactories { get; }
    public static string FindingContexts { get; }
    public static string FindingHostingServices { get; }
    public static string FindingReferencedContexts { get; }
    public static string MalformedCreateHostBuilder { get; }
    public static string ManuallyDeleted { get; }
    public static string MigrationDescription { get; }
    public static string MultipleContexts { get; }
    public static string NoColorDescription { get; }
    public static string NoContextTemplate { get; }
    public static string NoContextTemplateButConfiguration { get; }
    public static string NoCreateHostBuilder { get; }
    public static string NoDesignTimeServices { get; }
    public static string NoPendingModelChanges { get; }
    public static string NoReferencedServices { get; }
    public static string NoRelationalConnection { get; }
    public static string NoServiceProvider { get; }
    public static string NoSnapshot { get; }
    public static string PendingModelChanges { get; }
    public static string PrefixDescription { get; }
    public static string RemovingSnapshot { get; }
    public static string RevertingSnapshot { get; }
    public static string SensitiveInformationWarning { get; }
    public static string SequencesRequireName { get; }
    public static string UsingHostingServices { get; }
    public static string VerboseDescription { get; }
    private static DesignStrings();
    public static string BadConnection(object exceptionMessage);
    [NullableContextAttribute("2")]
public static string BadSequenceType(object sequenceName, object typeName);
    public static string get_BundleFullName();
    [NullableContextAttribute("2")]
public static string CannotCreateContextInstance(object contextType, object rootException);
    public static string CannotFindDbContextTypes(object rootException);
    public static string CannotFindDesignTimeProviderAssemblyAttribute(object runtimeProviderAssemblyName);
    public static string CannotFindRuntimeProviderAssembly(object assemblyName);
    [NullableContextAttribute("2")]
public static string CannotFindTypeMappingForColumn(object columnName, object dateType);
    public static string get_CannotGenerateTypeQualifiedMethodCall();
    public static string get_CircularBaseClassDependency();
    [NullableContextAttribute("2")]
public static string CompiledModelConstructorBinding(object entityType, object customize, object className);
    public static string CompiledModelCustomCacheKeyFactory(object factoryType);
    public static string CompiledModelDefiningQuery(object entityType);
    public static string CompiledModelGenerated(object optionsCall);
    public static string CompiledModelQueryFilter(object entityType);
    [NullableContextAttribute("2")]
public static string CompiledModelValueGenerator(object entityType, object property, object method);
    public static string ConflictingContextAndMigrationName(object name);
    public static string get_ConnectionDescription();
    public static string ContextClassNotValidCSharpIdentifier(object contextClassName);
    public static string DatabaseDropped(object name);
    public static string get_DestructiveOperation();
    public static string get_Done();
    [NullableContextAttribute("2")]
public static string DroppingDatabase(object database, object dataSource);
    public static string DuplicateMigrationName(object migrationName);
    public static string EncodingIgnored(object encoding);
    public static string ErrorConnecting(object message);
    public static string ErrorGeneratingOutput(object inputFile);
    [NullableContextAttribute("2")]
public static string ExistingFiles(object outputDirectoryName, object existingFiles);
    public static string get_FindingContextFactories();
    public static string get_FindingContexts();
    public static string FindingDesignTimeServices(object startupAssembly);
    public static string get_FindingHostingServices();
    public static string FindingProviderServices(object provider);
    public static string get_FindingReferencedContexts();
    public static string FindingReferencedServices(object startupAssembly);
    public static string FindingServiceProvider(object startupAssembly);
    [NullableContextAttribute("2")]
public static string ForceRemoveMigration(object name, object error);
    [NullableContextAttribute("2")]
public static string ForeignKeyPrincipalEndContainsNullableColumns(object foreignKeyName, object indexName, object columnNames);
    [NullableContextAttribute("2")]
public static string ForeignKeyScaffoldErrorPrincipalKeyNotFound(object foreignKeyName, object columnsList, object principalEntityType);
    public static string ForeignKeyScaffoldErrorPrincipalTableNotFound(object foreignKeyName);
    [NullableContextAttribute("2")]
public static string ForeignKeyScaffoldErrorPrincipalTableScaffoldingError(object foreignKeyName, object principalTableName);
    [NullableContextAttribute("2")]
public static string ForeignKeyScaffoldErrorPropertyNotFound(object foreignKeyName, object columnNames);
    [NullableContextAttribute("2")]
public static string ForeignKeyWithSameFacetsExists(object foreignKeyName, object existingForeignKey);
    public static string ForeignMigrations(object migrationsNamespace);
    public static string FoundContextFactory(object factory);
    public static string FoundDbContext(object contextType);
    public static string InvokeCreateHostBuilderFailed(object error);
    [NullableContextAttribute("2")]
public static string LiteralExpressionNotSupported(object expression, object type);
    public static string get_MalformedCreateHostBuilder();
    public static string get_ManuallyDeleted();
    public static string get_MigrationDescription();
    [NullableContextAttribute("2")]
public static string MigrationsAssemblyMismatch(object assembly, object migrationsAssembly);
    public static string MultipleAnnotationConflict(object annotationName);
    public static string get_MultipleContexts();
    public static string MultipleContextsWithName(object name);
    public static string MultipleContextsWithQualifiedName(object name);
    public static string get_NoColorDescription();
    public static string NoContext(object assembly);
    public static string get_NoContextTemplate();
    public static string get_NoContextTemplateButConfiguration();
    public static string NoContextWithName(object name);
    public static string get_NoCreateHostBuilder();
    public static string get_NoDesignTimeServices();
    [NullableContextAttribute("2")]
public static string NoLanguageService(object language, object service);
    [NullableContextAttribute("2")]
public static string NoMigrationFile(object file, object migrationClass);
    public static string NoMigrationMetadataFile(object file);
    public static string NonNullableBoooleanColumnHasDefaultConstraint(object columnName);
    public static string NonRelationalProvider(object provider);
    public static string get_NoPendingModelChanges();
    public static string get_NoReferencedServices();
    public static string get_NoRelationalConnection();
    public static string get_NoServiceProvider();
    public static string get_NoSnapshot();
    [NullableContextAttribute("2")]
public static string NoSnapshotFile(object file, object snapshotClass);
    public static string NotExistDatabase(object name);
    public static string get_PendingModelChanges();
    public static string get_PrefixDescription();
    [NullableContextAttribute("2")]
public static string PrimaryKeyErrorPropertyNotFound(object tableName, object columnNames);
    public static string ProviderReturnedNullModel(object providerTypeName);
    [NullableContextAttribute("2")]
public static string ReadOnlyFiles(object outputDirectoryName, object readOnlyFiles);
    public static string RemovingMigration(object name);
    public static string get_RemovingSnapshot();
    public static string ReusingNamespace(object type);
    public static string ReusingSnapshotName(object name);
    public static string get_RevertingSnapshot();
    public static string RevertMigration(object name);
    public static string get_SensitiveInformationWarning();
    public static string get_SequencesRequireName();
    public static string UnableToGenerateEntityType(object tableName);
    [NullableContextAttribute("2")]
public static string UnableToScaffoldIndexMissingProperty(object indexName, object columnNames);
    public static string UnhandledEnumValue(object enumValue);
    public static string UnknownDirectiveProcessor(object name);
    public static string UnknownLiteral(object literalType);
    public static string UnknownOperation(object operationType);
    [NullableContextAttribute("2")]
public static string UnreferencedAssembly(object assembly, object startupProject);
    public static string UseContext(object name);
    public static string UsingDbContextFactory(object factory);
    public static string UsingDesignTimeServices(object designTimeServices);
    public static string UsingEnvironment(object environment);
    public static string get_UsingHostingServices();
    public static string UsingProviderServices(object provider);
    public static string UsingReferencedServices(object referencedAssembly);
    public static string get_VerboseDescription();
    [NullableContextAttribute("2")]
public static string VersionMismatch(object toolsVersion, object runtimeVersion);
    public static string WritingMigration(object file);
    public static string WritingSnapshot(object file);
    private static string GetString(string name, String[] formatterNames);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer : object {
    public static TValue EnsureInitialized(TValue& target, TParam param, Func`2<TParam, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TParam1 param1, TParam2 param2, Func`3<TParam1, TParam2, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TParam1 param1, TParam2 param2, TParam3 param3, Func`4<TParam1, TParam2, TParam3, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, Boolean& initialized, TParam param, Func`2<TParam, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TValue value);
    public static TValue EnsureInitialized(TValue& target, TParam param, Action`1<TParam> valueFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalScaffoldingModelExtensions : object {
    [ExtensionAttribute]
public static string GetDatabaseName(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetDatabaseName(IMutableModel model, string value);
    [ExtensionAttribute]
public static void SetDbSetName(IMutableEntityType entityType, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingAnnotationNames : object {
    public static string Prefix;
    public static string DbSetName;
    public static string DatabaseName;
    public static string ConcurrencyToken;
    public static string ClrType;
    public static string ConnectionString;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.Design.CSharpMigrationOperationGenerator : object {
    [CompilerGeneratedAttribute]
private CSharpMigrationOperationGeneratorDependencies <Dependencies>k__BackingField;
    protected CSharpMigrationOperationGeneratorDependencies Dependencies { get; }
    private ICSharpHelper Code { get; }
    public CSharpMigrationOperationGenerator(CSharpMigrationOperationGeneratorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual CSharpMigrationOperationGeneratorDependencies get_Dependencies();
    private ICSharpHelper get_Code();
    public virtual void Generate(string builderName, IReadOnlyList`1<MigrationOperation> operations, IndentedStringBuilder builder);
    protected virtual void Generate(MigrationOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(AddColumnOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(AddForeignKeyOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(AddPrimaryKeyOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(AddUniqueConstraintOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(AddCheckConstraintOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(AlterColumnOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(AlterDatabaseOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(AlterSequenceOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(AlterTableOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(CreateIndexOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(EnsureSchemaOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(CreateSequenceOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(CreateTableOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(DropColumnOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(DropForeignKeyOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(DropIndexOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(DropPrimaryKeyOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(DropSchemaOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(DropSequenceOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(DropTableOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(DropUniqueConstraintOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(DropCheckConstraintOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(RenameColumnOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(RenameIndexOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(RenameSequenceOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(RenameTableOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(RestartSequenceOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(SqlOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(InsertDataOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(DeleteDataOperation operation, IndentedStringBuilder builder);
    protected virtual void Generate(UpdateDataOperation operation, IndentedStringBuilder builder);
    protected virtual void Annotations(IEnumerable`1<Annotation> annotations, IndentedStringBuilder builder);
    protected virtual void OldAnnotations(IEnumerable`1<Annotation> annotations, IndentedStringBuilder builder);
    private static Object[] ToOnedimensionalArray(Object[0...,0...] values, bool firstDimension);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.Design.CSharpMigrationOperationGeneratorDependencies : object {
    [CompilerGeneratedAttribute]
private ICSharpHelper <CSharpHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public ICSharpHelper CSharpHelper { get; public set; }
    [EntityFrameworkInternalAttribute]
public CSharpMigrationOperationGeneratorDependencies(ICSharpHelper csharpHelper);
    [CompilerGeneratedAttribute]
private CSharpMigrationOperationGeneratorDependencies(CSharpMigrationOperationGeneratorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ICSharpHelper get_CSharpHelper();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CSharpHelper(ICSharpHelper value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CSharpMigrationOperationGeneratorDependencies left, CSharpMigrationOperationGeneratorDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CSharpMigrationOperationGeneratorDependencies left, CSharpMigrationOperationGeneratorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(CSharpMigrationOperationGeneratorDependencies other);
    [CompilerGeneratedAttribute]
public CSharpMigrationOperationGeneratorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.Design.CSharpMigrationsGenerator : MigrationsCodeGenerator {
    [CompilerGeneratedAttribute]
private CSharpMigrationsGeneratorDependencies <CSharpDependencies>k__BackingField;
    protected CSharpMigrationsGeneratorDependencies CSharpDependencies { get; }
    private ICSharpHelper Code { get; }
    public string FileExtension { get; }
    public string Language { get; }
    public CSharpMigrationsGenerator(MigrationsCodeGeneratorDependencies dependencies, CSharpMigrationsGeneratorDependencies csharpDependencies);
    [CompilerGeneratedAttribute]
protected virtual CSharpMigrationsGeneratorDependencies get_CSharpDependencies();
    private ICSharpHelper get_Code();
    public virtual string get_FileExtension();
    public virtual string get_Language();
    public virtual string GenerateMigration(string migrationNamespace, string migrationName, IReadOnlyList`1<MigrationOperation> upOperations, IReadOnlyList`1<MigrationOperation> downOperations);
    private static void AppendAutoGeneratedTag(IndentedStringBuilder builder);
    public virtual string GenerateMetadata(string migrationNamespace, Type contextType, string migrationName, string migrationId, IModel targetModel);
    public virtual string GenerateSnapshot(string modelSnapshotNamespace, Type contextType, string modelSnapshotName, IModel model);
    private bool HasMultidimensionalArray(IEnumerable`1<MigrationOperation> operations);
    [CompilerGeneratedAttribute]
internal static bool <HasMultidimensionalArray>g__IsMultidimensional|14_1(Array array);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.Design.CSharpMigrationsGeneratorDependencies : object {
    [CompilerGeneratedAttribute]
private ICSharpHelper <CSharpHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private ICSharpMigrationOperationGenerator <CSharpMigrationOperationGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private ICSharpSnapshotGenerator <CSharpSnapshotGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public ICSharpHelper CSharpHelper { get; public set; }
    public ICSharpMigrationOperationGenerator CSharpMigrationOperationGenerator { get; public set; }
    public ICSharpSnapshotGenerator CSharpSnapshotGenerator { get; public set; }
    [EntityFrameworkInternalAttribute]
public CSharpMigrationsGeneratorDependencies(ICSharpHelper csharpHelper, ICSharpMigrationOperationGenerator csharpMigrationOperationGenerator, ICSharpSnapshotGenerator csharpSnapshotGenerator);
    [CompilerGeneratedAttribute]
private CSharpMigrationsGeneratorDependencies(CSharpMigrationsGeneratorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ICSharpHelper get_CSharpHelper();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CSharpHelper(ICSharpHelper value);
    [CompilerGeneratedAttribute]
public ICSharpMigrationOperationGenerator get_CSharpMigrationOperationGenerator();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CSharpMigrationOperationGenerator(ICSharpMigrationOperationGenerator value);
    [CompilerGeneratedAttribute]
public ICSharpSnapshotGenerator get_CSharpSnapshotGenerator();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CSharpSnapshotGenerator(ICSharpSnapshotGenerator value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CSharpMigrationsGeneratorDependencies left, CSharpMigrationsGeneratorDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CSharpMigrationsGeneratorDependencies left, CSharpMigrationsGeneratorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(CSharpMigrationsGeneratorDependencies other);
    [CompilerGeneratedAttribute]
public CSharpMigrationsGeneratorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.Design.CSharpSnapshotGenerator : object {
    private static MethodInfo HasAnnotationMethodInfo;
    private static MethodInfo HasPropertyAnnotationMethodInfo;
    private static MethodInfo HasTypeAnnotationMethodInfo;
    [CompilerGeneratedAttribute]
private CSharpSnapshotGeneratorDependencies <Dependencies>k__BackingField;
    protected CSharpSnapshotGeneratorDependencies Dependencies { get; }
    private ICSharpHelper Code { get; }
    public CSharpSnapshotGenerator(CSharpSnapshotGeneratorDependencies dependencies);
    private static CSharpSnapshotGenerator();
    [CompilerGeneratedAttribute]
protected virtual CSharpSnapshotGeneratorDependencies get_Dependencies();
    private ICSharpHelper get_Code();
    public virtual void Generate(string modelBuilderName, IModel model, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateEntityTypes(string modelBuilderName, IEnumerable`1<IEntityType> entityTypes, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateEntityType(string builderName, IEntityType entityType, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateOwnedTypes(string entityTypeBuilderName, IEnumerable`1<IForeignKey> ownerships, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateOwnedType(string entityTypeBuilderName, IForeignKey ownership, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateEntityTypeRelationships(string modelBuilderName, IEntityType entityType, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateRelationships(string entityTypeBuilderName, IEntityType entityType, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateBaseType(string entityTypeBuilderName, IEntityType baseType, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateSequence(string modelBuilderName, ISequence sequence, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateSequenceAnnotations(string sequenceBuilderName, ISequence sequence, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateProperties(string entityTypeBuilderName, IEnumerable`1<IProperty> properties, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateProperty(string entityTypeBuilderName, IProperty property, IndentedStringBuilder stringBuilder);
    protected virtual void GeneratePropertyAnnotations(string propertyBuilderName, IProperty property, IndentedStringBuilder stringBuilder);
    private ValueConverter FindValueConverter(IProperty property);
    protected virtual void GenerateComplexProperties(string typeBuilderName, IEnumerable`1<IComplexProperty> properties, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateComplexProperty(string builderName, IComplexProperty complexProperty, IndentedStringBuilder stringBuilder);
    private static string GenerateNestedBuilderName(string builderName);
    protected virtual void GenerateComplexPropertyAnnotations(string propertyBuilderName, IComplexProperty property, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateKeys(string entityTypeBuilderName, IEnumerable`1<IKey> keys, IKey primaryKey, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateKey(string entityTypeBuilderName, IKey key, IndentedStringBuilder stringBuilder, bool primary);
    protected virtual void GenerateKeyAnnotations(string keyBuilderName, IKey key, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateIndexes(string entityTypeBuilderName, IEnumerable`1<IIndex> indexes, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateIndex(string entityTypeBuilderName, IIndex index, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateIndexAnnotations(string indexBuilderName, IIndex index, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateEntityTypeAnnotations(string entityTypeBuilderName, IEntityType entityType, IndentedStringBuilder stringBuilder);
    private void GenerateTableMapping(string entityTypeBuilderName, IEntityType entityType, IndentedStringBuilder stringBuilder, Dictionary`2<string, IAnnotation> annotations);
    private void GenerateSplitTableMapping(string entityTypeBuilderName, IEntityType entityType, IndentedStringBuilder stringBuilder);
    private void GenerateViewMapping(string entityTypeBuilderName, IEntityType entityType, IndentedStringBuilder stringBuilder, Dictionary`2<string, IAnnotation> annotations);
    private void GenerateSplitViewMapping(string entityTypeBuilderName, IEntityType entityType, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateEntityTypeMappingFragmentAnnotations(string tableBuilderName, IEntityTypeMappingFragment fragment, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateCheckConstraints(string entityTypeBuilderName, IEntityType entityType, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateCheckConstraint(string entityTypeBuilderName, ICheckConstraint checkConstraint, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateCheckConstraintAnnotations(ICheckConstraint checkConstraint, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateTriggers(string tableBuilderName, IEntityType entityType, string table, string schema, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateTrigger(string tableBuilderName, ITrigger trigger, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateTriggerAnnotations(string triggerBuilderName, ITrigger trigger, IndentedStringBuilder stringBuilder);
    protected virtual void GeneratePropertyOverrides(string tableBuilderName, IEntityType entityType, StoreObjectIdentifier storeObject, IndentedStringBuilder stringBuilder);
    protected virtual void GeneratePropertyOverride(string tableBuilderName, IRelationalPropertyOverrides overrides, IndentedStringBuilder stringBuilder);
    protected virtual void GeneratePropertyOverridesAnnotations(string propertyBuilderName, IRelationalPropertyOverrides overrides, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateForeignKeys(string entityTypeBuilderName, IEnumerable`1<IForeignKey> foreignKeys, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateForeignKey(string entityTypeBuilderName, IForeignKey foreignKey, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateForeignKeyAnnotations(string foreignKeyBuilderName, IForeignKey foreignKey, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateEntityTypeNavigations(string modelBuilderName, IEntityType entityType, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateNavigations(string entityTypeBuilderName, IEnumerable`1<INavigation> navigations, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateNavigation(string entityTypeBuilderName, INavigation navigation, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateNavigationAnnotations(string navigationBuilderName, INavigation navigation, IndentedStringBuilder stringBuilder);
    protected virtual void GenerateData(string entityTypeBuilderName, IEnumerable`1<IProperty> properties, IEnumerable`1<IDictionary`2<string, object>> data, IndentedStringBuilder stringBuilder);
    private void GenerateFluentApiForMaxLength(IProperty property, IndentedStringBuilder stringBuilder);
    private void GenerateFluentApiForPrecisionAndScale(IProperty property, IndentedStringBuilder stringBuilder);
    private void GenerateFluentApiForIsUnicode(IProperty property, IndentedStringBuilder stringBuilder);
    private void GenerateAnnotations(string builderName, IAnnotatable annotatable, IndentedStringBuilder stringBuilder, Dictionary`2<string, IAnnotation> annotations, bool inChainedCall, bool leadingNewline, MethodInfo hasAnnotationMethodInfo);
    private static string GetFullName(IReadOnlyEntityType entityType);
    [CompilerGeneratedAttribute]
private string <GenerateKey>b__28_0(IProperty p);
    [CompilerGeneratedAttribute]
private string <GenerateIndex>b__31_0(IProperty p);
    [CompilerGeneratedAttribute]
private string <GenerateForeignKey>b__49_0(IProperty p);
    [CompilerGeneratedAttribute]
private string <GenerateForeignKey>b__49_1(IProperty p);
    [CompilerGeneratedAttribute]
private string <GenerateForeignKey>b__49_2(IProperty p);
    [CompilerGeneratedAttribute]
private string <GenerateForeignKey>b__49_3(IProperty p);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.Design.CSharpSnapshotGeneratorDependencies : object {
    [CompilerGeneratedAttribute]
private ICSharpHelper <CSharpHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <RelationalTypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnnotationCodeGenerator <AnnotationCodeGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public ICSharpHelper CSharpHelper { get; public set; }
    public IRelationalTypeMappingSource RelationalTypeMappingSource { get; public set; }
    public IAnnotationCodeGenerator AnnotationCodeGenerator { get; public set; }
    [EntityFrameworkInternalAttribute]
public CSharpSnapshotGeneratorDependencies(ICSharpHelper csharpHelper, IRelationalTypeMappingSource relationalTypeMappingSource, IAnnotationCodeGenerator annotationCodeGenerator);
    [CompilerGeneratedAttribute]
private CSharpSnapshotGeneratorDependencies(CSharpSnapshotGeneratorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ICSharpHelper get_CSharpHelper();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CSharpHelper(ICSharpHelper value);
    [CompilerGeneratedAttribute]
public IRelationalTypeMappingSource get_RelationalTypeMappingSource();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RelationalTypeMappingSource(IRelationalTypeMappingSource value);
    [CompilerGeneratedAttribute]
public IAnnotationCodeGenerator get_AnnotationCodeGenerator();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AnnotationCodeGenerator(IAnnotationCodeGenerator value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CSharpSnapshotGeneratorDependencies left, CSharpSnapshotGeneratorDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CSharpSnapshotGeneratorDependencies left, CSharpSnapshotGeneratorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(CSharpSnapshotGeneratorDependencies other);
    [CompilerGeneratedAttribute]
public CSharpSnapshotGeneratorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Migrations.Design.ICSharpMigrationOperationGenerator {
    public abstract virtual void Generate(string builderName, IReadOnlyList`1<MigrationOperation> operations, IndentedStringBuilder builder);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Migrations.Design.ICSharpSnapshotGenerator {
    public abstract virtual void Generate(string builderName, IModel model, IndentedStringBuilder stringBuilder);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Migrations.Design.IMigrationsCodeGenerator {
    public string FileExtension { get; }
    public abstract virtual string GenerateMetadata(string migrationNamespace, Type contextType, string migrationName, string migrationId, IModel targetModel);
    public abstract virtual string GenerateMigration(string migrationNamespace, string migrationName, IReadOnlyList`1<MigrationOperation> upOperations, IReadOnlyList`1<MigrationOperation> downOperations);
    public abstract virtual string GenerateSnapshot(string modelSnapshotNamespace, Type contextType, string modelSnapshotName, IModel model);
    public abstract virtual string get_FileExtension();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Migrations.Design.IMigrationsCodeGeneratorSelector {
    public abstract virtual IMigrationsCodeGenerator Select(string language);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Migrations.Design.IMigrationsScaffolder {
    [NullableContextAttribute("2")]
public abstract virtual ScaffoldedMigration ScaffoldMigration(string migrationName, string rootNamespace, string subNamespace, string language);
    public abstract virtual MigrationFiles RemoveMigration(string projectDir, string rootNamespace, bool force, string language);
    public abstract virtual MigrationFiles Save(string projectDir, ScaffoldedMigration migration, string outputDir);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.Design.MigrationFiles : object {
    [CompilerGeneratedAttribute]
private string <MigrationFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MetadataFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SnapshotFile>k__BackingField;
    public string MigrationFile { get; public set; }
    public string MetadataFile { get; public set; }
    public string SnapshotFile { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_MigrationFile();
    [CompilerGeneratedAttribute]
public virtual void set_MigrationFile(string value);
    [CompilerGeneratedAttribute]
public virtual string get_MetadataFile();
    [CompilerGeneratedAttribute]
public virtual void set_MetadataFile(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SnapshotFile();
    [CompilerGeneratedAttribute]
public virtual void set_SnapshotFile(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.EntityFrameworkCore.Migrations.Design.MigrationsBundle : object {
    private static string _context;
    private static Assembly _assembly;
    private static Assembly _startupAssembly;
    private static CommandArgument _migration;
    private static CommandOption _connection;
    public static int Execute(string context, Assembly assembly, Assembly startupAssembly, String[] args);
    internal static void Configure(CommandLineApplication app);
    private static void ExecuteInternal(String[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Migrations.Design.MigrationsCodeGenerator : object {
    [CompilerGeneratedAttribute]
private MigrationsCodeGeneratorDependencies <Dependencies>k__BackingField;
    public string FileExtension { get; }
    [NullableAttribute("2")]
public string Language { get; }
    protected MigrationsCodeGeneratorDependencies Dependencies { get; }
    protected MigrationsCodeGenerator(MigrationsCodeGeneratorDependencies dependencies);
    public abstract virtual string get_FileExtension();
    [NullableContextAttribute("2")]
public virtual string get_Language();
    [CompilerGeneratedAttribute]
protected virtual MigrationsCodeGeneratorDependencies get_Dependencies();
    public abstract virtual string GenerateMigration(string migrationNamespace, string migrationName, IReadOnlyList`1<MigrationOperation> upOperations, IReadOnlyList`1<MigrationOperation> downOperations);
    public abstract virtual string GenerateMetadata(string migrationNamespace, Type contextType, string migrationName, string migrationId, IModel targetModel);
    public abstract virtual string GenerateSnapshot(string modelSnapshotNamespace, Type contextType, string modelSnapshotName, IModel model);
    protected virtual IEnumerable`1<string> GetNamespaces(IEnumerable`1<MigrationOperation> operations);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Design.MigrationsCodeGenerator/<GetColumnNamespaces>d__12")]
private static IEnumerable`1<string> GetColumnNamespaces(ColumnOperation columnOperation);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Design.MigrationsCodeGenerator/<GetDataNamespaces>d__13")]
private static IEnumerable`1<string> GetDataNamespaces(Object[0...,0...] values);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Design.MigrationsCodeGenerator/<GetAnnotatables>d__14")]
private static IEnumerable`1<IAnnotatable> GetAnnotatables(IEnumerable`1<MigrationOperation> operations);
    protected virtual IEnumerable`1<string> GetNamespaces(IModel model);
    private IEnumerable`1<string> GetNamespaces(ITypeBase typeBase);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Design.MigrationsCodeGenerator/<GetAnnotatables>d__17")]
private static IEnumerable`1<IAnnotatable> GetAnnotatables(IModel model);
    private IEnumerable`1<string> GetAnnotationNamespaces(IEnumerable`1<IAnnotatable> items);
    private ValueConverter FindValueConverter(IProperty property);
    private Type GetProviderType(IAnnotatable annotatable, Type valueType);
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <GetNamespaces>b__15_0(IEntityType e);
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <GetNamespaces>b__16_0(IProperty p);
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <GetNamespaces>b__16_1(IComplexProperty p);
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <GetAnnotationNamespaces>b__18_0(IAnnotatable i);
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <GetAnnotationNamespaces>b__18_3(<>f__AnonymousType0`2<IAnnotatable, IAnnotation> a);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.Design.MigrationsCodeGeneratorDependencies : object {
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <RelationalTypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnnotationCodeGenerator <AnnotationCodeGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IRelationalTypeMappingSource RelationalTypeMappingSource { get; public set; }
    public IAnnotationCodeGenerator AnnotationCodeGenerator { get; public set; }
    [EntityFrameworkInternalAttribute]
public MigrationsCodeGeneratorDependencies(IRelationalTypeMappingSource relationalTypeMappingSource, IAnnotationCodeGenerator annotationCodeGenerator);
    [CompilerGeneratedAttribute]
private MigrationsCodeGeneratorDependencies(MigrationsCodeGeneratorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IRelationalTypeMappingSource get_RelationalTypeMappingSource();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RelationalTypeMappingSource(IRelationalTypeMappingSource value);
    [CompilerGeneratedAttribute]
public IAnnotationCodeGenerator get_AnnotationCodeGenerator();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AnnotationCodeGenerator(IAnnotationCodeGenerator value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(MigrationsCodeGeneratorDependencies left, MigrationsCodeGeneratorDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(MigrationsCodeGeneratorDependencies left, MigrationsCodeGeneratorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(MigrationsCodeGeneratorDependencies other);
    [CompilerGeneratedAttribute]
public MigrationsCodeGeneratorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.Design.MigrationsScaffolder : object {
    private Type _contextType;
    private string _activeProvider;
    [CompilerGeneratedAttribute]
private MigrationsScaffolderDependencies <Dependencies>k__BackingField;
    protected MigrationsScaffolderDependencies Dependencies { get; }
    public MigrationsScaffolder(MigrationsScaffolderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual MigrationsScaffolderDependencies get_Dependencies();
    public virtual ScaffoldedMigration ScaffoldMigration(string migrationName, string rootNamespace, string subNamespace);
    [NullableContextAttribute("2")]
public virtual ScaffoldedMigration ScaffoldMigration(string migrationName, string rootNamespace, string subNamespace, string language);
    protected virtual string GetSubNamespace(string rootNamespace, string namespace);
    public virtual MigrationFiles RemoveMigration(string projectDir, string rootNamespace, bool force);
    public virtual MigrationFiles RemoveMigration(string projectDir, string rootNamespace, bool force, string language);
    public virtual MigrationFiles Save(string projectDir, ScaffoldedMigration migration, string outputDir);
    protected virtual string GetNamespace(Type siblingType, string defaultNamespace);
    protected virtual string GetDirectory(string projectDir, string siblingFileName, string subnamespace);
    protected virtual string TryGetProjectFile(string projectDir, string fileName);
    private bool ContainsForeignMigrations(string migrationsNamespace);
    [CompilerGeneratedAttribute]
private Migration <RemoveMigration>b__10_0(KeyValuePair`2<string, TypeInfo> m);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.Design.MigrationsScaffolderDependencies : object {
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationsAssembly <MigrationsAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationsModelDiffer <MigrationsModelDiffer>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationsIdGenerator <MigrationsIdGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationsCodeGeneratorSelector <MigrationsCodeGeneratorSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private IHistoryRepository <HistoryRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IOperationReporter <OperationReporter>k__BackingField;
    [CompilerGeneratedAttribute]
private IDatabaseProvider <DatabaseProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ISnapshotModelProcessor <SnapshotModelProcessor>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrator <Migrator>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public ICurrentDbContext CurrentContext { get; public set; }
    public IModel Model { get; public set; }
    public IMigrationsAssembly MigrationsAssembly { get; public set; }
    public IMigrationsModelDiffer MigrationsModelDiffer { get; public set; }
    public IMigrationsIdGenerator MigrationsIdGenerator { get; public set; }
    public IMigrationsCodeGeneratorSelector MigrationsCodeGeneratorSelector { get; public set; }
    public IHistoryRepository HistoryRepository { get; public set; }
    [EntityFrameworkInternalAttribute]
public IOperationReporter OperationReporter { get; public set; }
    public IDatabaseProvider DatabaseProvider { get; public set; }
    [EntityFrameworkInternalAttribute]
public ISnapshotModelProcessor SnapshotModelProcessor { get; public set; }
    public IMigrator Migrator { get; public set; }
    [EntityFrameworkInternalAttribute]
public MigrationsScaffolderDependencies(ICurrentDbContext currentContext, IModel model, IMigrationsAssembly migrationsAssembly, IMigrationsModelDiffer migrationsModelDiffer, IMigrationsIdGenerator migrationsIdGenerator, IMigrationsCodeGeneratorSelector migrationsCodeGeneratorSelector, IHistoryRepository historyRepository, IOperationReporter operationReporter, IDatabaseProvider databaseProvider, ISnapshotModelProcessor snapshotModelProcessor, IMigrator migrator);
    [CompilerGeneratedAttribute]
private MigrationsScaffolderDependencies(MigrationsScaffolderDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ICurrentDbContext get_CurrentContext();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CurrentContext(ICurrentDbContext value);
    [CompilerGeneratedAttribute]
public IModel get_Model();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Model(IModel value);
    [CompilerGeneratedAttribute]
public IMigrationsAssembly get_MigrationsAssembly();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MigrationsAssembly(IMigrationsAssembly value);
    [CompilerGeneratedAttribute]
public IMigrationsModelDiffer get_MigrationsModelDiffer();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MigrationsModelDiffer(IMigrationsModelDiffer value);
    [CompilerGeneratedAttribute]
public IMigrationsIdGenerator get_MigrationsIdGenerator();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MigrationsIdGenerator(IMigrationsIdGenerator value);
    [CompilerGeneratedAttribute]
public IMigrationsCodeGeneratorSelector get_MigrationsCodeGeneratorSelector();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MigrationsCodeGeneratorSelector(IMigrationsCodeGeneratorSelector value);
    [CompilerGeneratedAttribute]
public IHistoryRepository get_HistoryRepository();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HistoryRepository(IHistoryRepository value);
    [CompilerGeneratedAttribute]
public IOperationReporter get_OperationReporter();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OperationReporter(IOperationReporter value);
    [CompilerGeneratedAttribute]
public IDatabaseProvider get_DatabaseProvider();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DatabaseProvider(IDatabaseProvider value);
    [CompilerGeneratedAttribute]
public ISnapshotModelProcessor get_SnapshotModelProcessor();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SnapshotModelProcessor(ISnapshotModelProcessor value);
    [CompilerGeneratedAttribute]
public IMigrator get_Migrator();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Migrator(IMigrator value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(MigrationsScaffolderDependencies left, MigrationsScaffolderDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(MigrationsScaffolderDependencies left, MigrationsScaffolderDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(MigrationsScaffolderDependencies other);
    [CompilerGeneratedAttribute]
public MigrationsScaffolderDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.Design.ScaffoldedMigration : object {
    [CompilerGeneratedAttribute]
private string <FileExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviousMigrationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MigrationCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MigrationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MetadataCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MigrationSubNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SnapshotCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SnapshotName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SnapshotSubnamespace>k__BackingField;
    public string FileExtension { get; }
    [NullableAttribute("2")]
public string PreviousMigrationId { get; }
    public string MigrationCode { get; }
    public string MigrationId { get; }
    public string MetadataCode { get; }
    public string MigrationSubNamespace { get; }
    public string SnapshotCode { get; }
    public string SnapshotName { get; }
    public string SnapshotSubnamespace { get; }
    public ScaffoldedMigration(string fileExtension, string previousMigrationId, string migrationCode, string migrationId, string metadataCode, string migrationSubNamespace, string snapshotCode, string snapshotName, string snapshotSubNamespace);
    [CompilerGeneratedAttribute]
public virtual string get_FileExtension();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_PreviousMigrationId();
    [CompilerGeneratedAttribute]
public virtual string get_MigrationCode();
    [CompilerGeneratedAttribute]
public virtual string get_MigrationId();
    [CompilerGeneratedAttribute]
public virtual string get_MetadataCode();
    [CompilerGeneratedAttribute]
public virtual string get_MigrationSubNamespace();
    [CompilerGeneratedAttribute]
public virtual string get_SnapshotCode();
    [CompilerGeneratedAttribute]
public virtual string get_SnapshotName();
    [CompilerGeneratedAttribute]
public virtual string get_SnapshotSubnamespace();
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Migrations.Internal.ISnapshotModelProcessor {
    public abstract virtual IModel Process(IReadOnlyModel model);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsCodeGeneratorSelector : LanguageBasedSelector`1<IMigrationsCodeGenerator> {
    [NullableContextAttribute("1")]
public MigrationsCodeGeneratorSelector(IEnumerable`1<IMigrationsCodeGenerator> services);
}
public class Microsoft.EntityFrameworkCore.Migrations.Internal.SnapshotModelProcessor : object {
    private IOperationReporter _operationReporter;
    private HashSet`1<string> _relationalNames;
    private IModelRuntimeInitializer _modelRuntimeInitializer;
    [NullableContextAttribute("1")]
public SnapshotModelProcessor(IOperationReporter operationReporter, IModelRuntimeInitializer modelRuntimeInitializer);
    [NullableContextAttribute("2")]
public virtual IModel Process(IReadOnlyModel model);
    private void ProcessCollection(IEnumerable`1<IReadOnlyAnnotatable> metadata, string version);
    private void ProcessElement(IReadOnlyEntityType entityType, string version);
    private void ProcessElement(IReadOnlyAnnotatable metadata, string version);
    private static void UpdateSequences(IReadOnlyModel model, string version);
    private static void UpdateOwnedTypes(IMutableEntityType entityType);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.Internal.ILinqToCSharpSyntaxTranslator {
    public IReadOnlySet`1<ParameterExpression> CapturedVariables { get; }
    public abstract virtual SyntaxNode TranslateStatement(Expression node, ISet`1<string> collectedNamespaces);
    public abstract virtual SyntaxNode TranslateExpression(Expression node, ISet`1<string> collectedNamespaces);
    public abstract virtual IReadOnlySet`1<ParameterExpression> get_CapturedVariables();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator : ExpressionVisitor {
    private Stack`1<StackFrame> _stack;
    private int _unnamedParameterCounter;
    private LiftedState _liftedState;
    private ExpressionContext _context;
    private bool _onLastLambdaLine;
    private HashSet`1<ParameterExpression> _capturedVariables;
    private ISet`1<string> _collectedNamespaces;
    private static MethodInfo _activatorCreateInstanceMethod;
    private static MethodInfo _typeGetFieldMethod;
    private static MethodInfo _fieldGetValueMethod;
    private static MethodInfo _mathPowMethod;
    private SideEffectDetectionSyntaxWalker _sideEffectDetector;
    private ConstantDetectionSyntaxWalker _constantDetector;
    private SyntaxGenerator _g;
    [CompilerGeneratedAttribute]
private SyntaxNode <Result>k__BackingField;
    public IReadOnlySet`1<ParameterExpression> CapturedVariables { get; }
    [NullableAttribute("2")]
protected SyntaxNode Result { get; protected set; }
    public LinqToCSharpSyntaxTranslator(SyntaxGenerator syntaxGenerator);
    public sealed virtual IReadOnlySet`1<ParameterExpression> get_CapturedVariables();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected virtual SyntaxNode get_Result();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected virtual void set_Result(SyntaxNode value);
    public virtual SyntaxNode TranslateStatement(Expression node, ISet`1<string> collectedNamespaces);
    public virtual SyntaxNode TranslateExpression(Expression node, ISet`1<string> collectedNamespaces);
    protected virtual SyntaxNode TranslateCore(Expression node, ISet`1<string> collectedNamespaces, bool statementContext);
    [NullableContextAttribute("2")]
protected virtual SyntaxNode Translate(Expression node);
    protected virtual T Translate(Expression node);
    protected virtual ExpressionSyntax Translate(Expression expression, IdentifierNameSyntax lowerableAssignmentVariable);
    [NullableContextAttribute("2")]
public virtual Expression Visit(Expression node);
    protected virtual Expression VisitBinary(BinaryExpression binary);
    protected virtual Expression VisitBlock(BlockExpression block);
    protected virtual CatchBlock VisitCatchBlock(CatchBlock catchBlock);
    protected virtual SyntaxNode TranslateCatchBlock(CatchBlock catchBlock, bool noType);
    protected virtual Expression VisitConditional(ConditionalExpression conditional);
    protected virtual CSharpSyntaxNode TranslateConditional(ConditionalExpression conditional, IdentifierNameSyntax lowerableAssignmentVariable);
    protected virtual Expression VisitConstant(ConstantExpression constant);
    protected virtual Expression VisitDebugInfo(DebugInfoExpression node);
    protected virtual Expression VisitDefault(DefaultExpression node);
    protected virtual Expression VisitGoto(GotoExpression gotoNode);
    protected virtual Expression VisitInvocation(InvocationExpression invocation);
    protected virtual Expression VisitLabel(LabelExpression label);
    protected virtual LabelTarget VisitLabelTarget(LabelTarget labelTarget);
    protected virtual IdentifierNameSyntax TranslateLabelTarget(LabelTarget labelTarget);
    private TypeSyntax Translate(Type type);
    protected virtual Expression VisitLambda(Expression`1<T> lambda);
    protected virtual Expression VisitLoop(LoopExpression loop);
    protected virtual Expression VisitMember(MemberExpression member);
    protected virtual Expression VisitIndex(IndexExpression index);
    protected virtual Expression VisitMethodCall(MethodCallExpression call);
    protected virtual Expression VisitNewArray(NewArrayExpression newArray);
    protected virtual Expression VisitNew(NewExpression node);
    protected virtual Expression VisitParameter(ParameterExpression parameter);
    protected virtual Expression VisitRuntimeVariables(RuntimeVariablesExpression node);
    protected virtual SwitchCase VisitSwitchCase(SwitchCase node);
    protected virtual Expression VisitSwitch(SwitchExpression switchNode);
    protected virtual CSharpSyntaxNode TranslateSwitch(SwitchExpression switchNode, IdentifierNameSyntax lowerableAssignmentVariable);
    protected virtual Expression VisitTry(TryExpression tryNode);
    protected virtual Expression VisitTypeBinary(TypeBinaryExpression node);
    protected virtual Expression VisitUnary(UnaryExpression unary);
    protected virtual Expression VisitMemberInit(MemberInitExpression memberInit);
    protected virtual Expression VisitListInit(ListInitExpression listInit);
    protected virtual ElementInit VisitElementInit(ElementInit elementInit);
    protected virtual MemberAssignment VisitMemberAssignment(MemberAssignment memberAssignment);
    protected virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding memberMemberBinding);
    protected virtual MemberListBinding VisitMemberListBinding(MemberListBinding memberListBinding);
    protected virtual Expression VisitExtension(Expression node);
    private ArgumentSyntax[] TranslateMethodArguments(ParameterInfo[] parameters, IReadOnlyList`1<Expression> arguments);
    private ExpressionSyntax[] TranslateList(IReadOnlyList`1<Expression> list);
    private StackFrame PushNewStackFrame();
    private string LookupVariableName(ParameterExpression parameter);
    private string UniquifyVariableName(string name);
    private static LocalDeclarationStatementSyntax GenerateVarDeclaration(string variableIdentifier, ExpressionSyntax initializer);
    private ContextChanger ChangeContext(ExpressionContext newContext);
    [CompilerGeneratedAttribute]
private Expression <VisitBinary>g__VisitAssignment|30_0(BinaryExpression assignment);
    [CompilerGeneratedAttribute]
internal static bool <VisitBlock>g__IsExpressionValidAsStatement|31_0(ExpressionSyntax expression);
    [CompilerGeneratedAttribute]
private StatementSyntax <TranslateConditional>g__ProcessArmBody|35_1(Expression body, <>c__DisplayClass35_0& , <>c__DisplayClass35_1& );
    [CompilerGeneratedAttribute]
private IfStatementSyntax <TranslateConditional>g__TranslateConditionalStatement|35_0(ConditionalExpression conditional, <>c__DisplayClass35_0& );
    [CompilerGeneratedAttribute]
internal static StatementSyntax <TranslateConditional>g__ProcessArmBody|35_2(SyntaxNode body, bool isTrueArm);
    [CompilerGeneratedAttribute]
private ExpressionSyntax <VisitConstant>g__GenerateValue|36_0(object value, <>c__DisplayClass36_0& );
    [CompilerGeneratedAttribute]
private ExpressionSyntax <VisitConstant>g__HandleEnum|36_1(Enum e, <>c__DisplayClass36_0& );
    [CompilerGeneratedAttribute]
private ExpressionSyntax <VisitConstant>g__HandleValueTuple|36_2(ITuple tuple, <>c__DisplayClass36_0& );
    [CompilerGeneratedAttribute]
private ParameterSyntax <VisitLambda>b__45_0(ParameterExpression p);
    [CompilerGeneratedAttribute]
private ExpressionSyntax <VisitMethodCall>g__GetMemberAccessesForAllDeclaringTypes|49_1(Type type, <>c__DisplayClass49_0& );
    [CompilerGeneratedAttribute]
private bool <VisitMethodCall>g__GenericTypeParameterAreInferrable|49_0(<>c__DisplayClass49_0& );
    [CompilerGeneratedAttribute]
internal static void <VisitMethodCall>g__ProcessType|49_2(Type type, <>c__DisplayClass49_1& );
    [CompilerGeneratedAttribute]
private SwitchSectionSyntax <TranslateSwitch>b__56_1(SwitchCase c);
    [CompilerGeneratedAttribute]
private CaseSwitchLabelSyntax <TranslateSwitch>b__56_4(Expression tv);
    [CompilerGeneratedAttribute]
private bool <TranslateSwitch>b__56_2(SwitchSectionSyntax c);
    [CompilerGeneratedAttribute]
private bool <TranslateSwitch>b__56_5(SwitchLabelSyntax l);
    [CompilerGeneratedAttribute]
private SyntaxList`1<StatementSyntax> <TranslateSwitch>g__ProcessArmBody|56_3(Expression body);
    [CompilerGeneratedAttribute]
private SwitchExpressionArmSyntax <TranslateSwitch>b__56_7(SwitchCase c, Expression tv);
    [CompilerGeneratedAttribute]
private bool <TranslateSwitch>b__56_8(SwitchExpressionArmSyntax a);
    [CompilerGeneratedAttribute]
private CaseSwitchLabelSyntax <TranslateSwitch>b__56_11(Expression tv);
    [CompilerGeneratedAttribute]
internal static ConditionalExpression <TranslateSwitch>g__RewriteSwitchToConditionals|56_0(SwitchExpression node);
    [CompilerGeneratedAttribute]
private SyntaxNode <VisitTry>b__57_0(CatchBlock h);
    [CompilerGeneratedAttribute]
private ExpressionSyntax <VisitMemberMemberBinding>b__64_0(MemberBinding b);
    [CompilerGeneratedAttribute]
private ExpressionSyntax <VisitMemberListBinding>b__65_0(ElementInit i);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelCodeGenerationOptions : object {
    [CompilerGeneratedAttribute]
private string <ModelNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ContextType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseNullableReferenceTypes>k__BackingField;
    public string ModelNamespace { get; public set; }
    public Type ContextType { get; public set; }
    [NullableAttribute("2")]
public string Language { get; public set; }
    public bool UseNullableReferenceTypes { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_ModelNamespace();
    [CompilerGeneratedAttribute]
public virtual void set_ModelNamespace(string value);
    [CompilerGeneratedAttribute]
public virtual Type get_ContextType();
    [CompilerGeneratedAttribute]
public virtual void set_ContextType(Type value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Language();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Language(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_UseNullableReferenceTypes();
    [CompilerGeneratedAttribute]
public virtual void set_UseNullableReferenceTypes(bool value);
}
public interface Microsoft.EntityFrameworkCore.Scaffolding.ICompiledModelCodeGenerator {
    [NullableContextAttribute("1")]
public abstract virtual IReadOnlyCollection`1<ScaffoldedFile> GenerateModel(IModel model, CompiledModelCodeGenerationOptions options);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Scaffolding.ICompiledModelCodeGeneratorSelector {
    public abstract virtual ICompiledModelCodeGenerator Select(CompiledModelCodeGenerationOptions options);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Scaffolding.ICompiledModelScaffolder {
    public abstract virtual IReadOnlyList`1<string> ScaffoldModel(IModel model, string outputDir, CompiledModelCodeGenerationOptions options);
}
public interface Microsoft.EntityFrameworkCore.Scaffolding.IModelCodeGenerator {
    [NullableContextAttribute("1")]
public abstract virtual ScaffoldedModel GenerateModel(IModel model, ModelCodeGenerationOptions options);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Scaffolding.IModelCodeGeneratorSelector {
    [ObsoleteAttribute("Use the overload that takes ModelCodeGenerationOptions instead.")]
public abstract virtual IModelCodeGenerator Select(string language);
    public virtual IModelCodeGenerator Select(ModelCodeGenerationOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.CandidateNamingService : object {
    public virtual string GenerateCandidateIdentifier(DatabaseTable originalTable);
    public virtual string GenerateCandidateIdentifier(DatabaseColumn originalColumn);
    public virtual string GetDependentEndCandidateNavigationPropertyName(IReadOnlyForeignKey foreignKey);
    public virtual string GetPrincipalEndCandidateNavigationPropertyName(IReadOnlyForeignKey foreignKey, string dependentEndNavigationPropertyName);
    public virtual string GenerateCandidateIdentifier(string originalIdentifier);
    private static string FindCandidateNavigationName(IEnumerable`1<IReadOnlyProperty> properties);
    private static string StripId(string commonPrefix);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.CompiledModelCodeGeneratorSelector : LanguageBasedSelector`1<ICompiledModelCodeGenerator> {
    public CompiledModelCodeGeneratorSelector(IEnumerable`1<ICompiledModelCodeGenerator> services);
    public virtual ICompiledModelCodeGenerator Select(CompiledModelCodeGenerationOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.CompiledModelScaffolder : object {
    [CompilerGeneratedAttribute]
private ICompiledModelCodeGeneratorSelector <ModelCodeGeneratorSelector>k__BackingField;
    private ICompiledModelCodeGeneratorSelector ModelCodeGeneratorSelector { get; }
    public CompiledModelScaffolder(ICompiledModelCodeGeneratorSelector modelCodeGeneratorSelector);
    [CompilerGeneratedAttribute]
private ICompiledModelCodeGeneratorSelector get_ModelCodeGeneratorSelector();
    public virtual IReadOnlyList`1<string> ScaffoldModel(IModel model, string outputDir, CompiledModelCodeGenerationOptions options);
    private static void CheckOutputFiles(IReadOnlyCollection`1<ScaffoldedFile> scaffoldedModel, string outputDir);
}
[GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpDbContextGenerator : CSharpDbContextGeneratorBase {
    private ITextTemplatingEngineHost hostValue;
    private IModel _ModelField;
    private ModelCodeGenerationOptions _OptionsField;
    private string _NamespaceHintField;
    public ITextTemplatingEngineHost Host { get; public set; }
    private IModel Model { get; }
    private ModelCodeGenerationOptions Options { get; }
    private string NamespaceHint { get; }
    public virtual string TransformText();
    public virtual ITextTemplatingEngineHost get_Host();
    public virtual void set_Host(ITextTemplatingEngineHost value);
    private IModel get_Model();
    private ModelCodeGenerationOptions get_Options();
    private string get_NamespaceHint();
    public virtual void Initialize();
}
[GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpDbContextGeneratorBase : object {
    private StringBuilder generationEnvironmentField;
    private CompilerErrorCollection errorsField;
    private List`1<int> indentLengthsField;
    private string currentIndentField;
    private bool endsWithNewline;
    private IDictionary`2<string, object> sessionField;
    private ToStringInstanceHelper toStringHelperField;
    public StringBuilder GenerationEnvironment { get; public set; }
    public CompilerErrorCollection Errors { get; }
    private List`1<int> indentLengths { get; }
    public string CurrentIndent { get; }
    public IDictionary`2<string, object> Session { get; public set; }
    public ToStringInstanceHelper ToStringHelper { get; }
    public StringBuilder get_GenerationEnvironment();
    public void set_GenerationEnvironment(StringBuilder value);
    public sealed virtual CompilerErrorCollection get_Errors();
    private List`1<int> get_indentLengths();
    public string get_CurrentIndent();
    public virtual IDictionary`2<string, object> get_Session();
    public virtual void set_Session(IDictionary`2<string, object> value);
    public void Write(string textToAppend);
    public void WriteLine(string textToAppend);
    public void Write(string format, Object[] args);
    public void WriteLine(string format, Object[] args);
    public void Error(string message);
    public void Warning(string message);
    public void PushIndent(string indent);
    public string PopIndent();
    public void ClearIndent();
    public ToStringInstanceHelper get_ToStringHelper();
}
[GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpEntityTypeGenerator : CSharpEntityTypeGeneratorBase {
    private ITextTemplatingEngineHost hostValue;
    private IEntityType _EntityTypeField;
    private ModelCodeGenerationOptions _OptionsField;
    private string _NamespaceHintField;
    public ITextTemplatingEngineHost Host { get; public set; }
    private IEntityType EntityType { get; }
    private ModelCodeGenerationOptions Options { get; }
    private string NamespaceHint { get; }
    public virtual string TransformText();
    public virtual ITextTemplatingEngineHost get_Host();
    public virtual void set_Host(ITextTemplatingEngineHost value);
    private IEntityType get_EntityType();
    private ModelCodeGenerationOptions get_Options();
    private string get_NamespaceHint();
    public virtual void Initialize();
}
[GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpEntityTypeGeneratorBase : object {
    private StringBuilder generationEnvironmentField;
    private CompilerErrorCollection errorsField;
    private List`1<int> indentLengthsField;
    private string currentIndentField;
    private bool endsWithNewline;
    private IDictionary`2<string, object> sessionField;
    private ToStringInstanceHelper toStringHelperField;
    protected StringBuilder GenerationEnvironment { get; protected set; }
    public CompilerErrorCollection Errors { get; }
    private List`1<int> indentLengths { get; }
    public string CurrentIndent { get; }
    public IDictionary`2<string, object> Session { get; public set; }
    public ToStringInstanceHelper ToStringHelper { get; }
    protected StringBuilder get_GenerationEnvironment();
    protected void set_GenerationEnvironment(StringBuilder value);
    public sealed virtual CompilerErrorCollection get_Errors();
    private List`1<int> get_indentLengths();
    public string get_CurrentIndent();
    public virtual IDictionary`2<string, object> get_Session();
    public virtual void set_Session(IDictionary`2<string, object> value);
    public void Write(string textToAppend);
    public void WriteLine(string textToAppend);
    public void Write(string format, Object[] args);
    public void WriteLine(string format, Object[] args);
    public void Error(string message);
    public void Warning(string message);
    public void PushIndent(string indent);
    public string PopIndent();
    public void ClearIndent();
    public ToStringInstanceHelper get_ToStringHelper();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpModelGenerator : ModelCodeGenerator {
    private IOperationReporter _reporter;
    private IServiceProvider _serviceProvider;
    public string Language { get; }
    public CSharpModelGenerator(ModelCodeGeneratorDependencies dependencies, IOperationReporter reporter, IServiceProvider serviceProvider);
    public virtual string get_Language();
    public virtual ScaffoldedModel GenerateModel(IModel model, ModelCodeGenerationOptions options);
    private string ProcessTemplate(ITextTransformation transformation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer`1 : object {
    private Func`2<T, string> _nameGetter;
    private ICSharpUtilities _cSharpUtilities;
    private Func`2<string, string> _singularizePluralizer;
    protected Dictionary`2<T, string> NameCache;
    public CSharpNamer`1(Func`2<T, string> nameGetter, ICSharpUtilities cSharpUtilities, Func`2<string, string> singularizePluralizer);
    public virtual string GetName(T item);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGenerator : object {
    private ICSharpHelper _code;
    private ICSharpRuntimeAnnotationCodeGenerator _annotationCodeGenerator;
    private static string FileExtension;
    private static string ModelSuffix;
    private static string ModelBuilderSuffix;
    private static string EntityTypeSuffix;
    public string Language { get; }
    public CSharpRuntimeModelCodeGenerator(ICSharpRuntimeAnnotationCodeGenerator annotationCodeGenerator, ICSharpHelper cSharpHelper);
    public virtual string get_Language();
    public virtual IReadOnlyCollection`1<ScaffoldedFile> GenerateModel(IModel model, CompiledModelCodeGenerationOptions options);
    private static string GenerateHeader(SortedSet`1<string> namespaces, string currentNamespace, bool nullable);
    private string CreateModel(string namespace, Type contextType, bool nullable);
    private string CreateModelBuilder(IModel model, string namespace, Type contextType, Dictionary`2<IEntityType, ValueTuple`2<string, string>> entityTypeIds, bool nullable);
    private void Create(ITypeMappingConfiguration typeConfiguration, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    private string GenerateEntityType(IEntityType entityType, string namespace, string className, bool nullable);
    private void CreateEntityType(IEntityType entityType, IndentedStringBuilder mainBuilder, IndentedStringBuilder methodBuilder, SortedSet`1<string> namespaces, string className, bool nullable);
    private void Create(IEntityType entityType, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    private void Create(IProperty property, Dictionary`2<IProperty, string> propertyVariables, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    private void Create(IProperty property, string variableName, Dictionary`2<IProperty, string> propertyVariables, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    private static Type GetValueConverterType(IProperty property);
    private void PropertyBaseParameters(IPropertyBase property, CSharpRuntimeAnnotationCodeGeneratorParameters parameters, bool skipType);
    private void FindProperties(string entityTypeVariable, IEnumerable`1<IProperty> properties, IndentedStringBuilder mainBuilder, bool nullable, Dictionary`2<IProperty, string> propertyVariables);
    private void Create(IServiceProperty property, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    private void Create(IKey key, Dictionary`2<IProperty, string> propertyVariables, CSharpRuntimeAnnotationCodeGeneratorParameters parameters, bool nullable);
    private void Create(IIndex index, Dictionary`2<IProperty, string> propertyVariables, CSharpRuntimeAnnotationCodeGeneratorParameters parameters, bool nullable);
    private void CreateComplexProperty(IComplexProperty complexProperty, IndentedStringBuilder mainBuilder, IndentedStringBuilder methodBuilder, SortedSet`1<string> namespaces, string topClassName, bool nullable);
    private void CreateForeignKey(IForeignKey foreignKey, int foreignKeyNumber, IndentedStringBuilder mainBuilder, IndentedStringBuilder methodBuilder, SortedSet`1<string> namespaces, string className, bool nullable);
    private void Create(INavigation navigation, string foreignKeyVariable, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    private void CreateSkipNavigation(ISkipNavigation navigation, int navigationNumber, IndentedStringBuilder mainBuilder, IndentedStringBuilder methodBuilder, SortedSet`1<string> namespaces, string className, bool nullable);
    private void Create(ITrigger trigger, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    private void CreateAnnotations(IEntityType entityType, IndentedStringBuilder mainBuilder, IndentedStringBuilder methodBuilder, SortedSet`1<string> namespaces, string className, bool nullable);
    private static void CreateAnnotations(TAnnotatable annotatable, Action`2<TAnnotatable, CSharpRuntimeAnnotationCodeGeneratorParameters> process, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    private static void AddNamespace(Type type, ISet`1<string> namespaces);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpUniqueNamer`1 : CSharpNamer`1<T> {
    private HashSet`1<string> _usedNames;
    public CSharpUniqueNamer`1(Func`2<T, string> nameGetter, ICSharpUtilities cSharpUtilities, Func`2<string, string> singularizePluralizer);
    public CSharpUniqueNamer`1(Func`2<T, string> nameGetter, IEnumerable`1<string> usedNames, ICSharpUtilities cSharpUtilities, Func`2<string, string> singularizePluralizer);
    public virtual string GetName(T item);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpUtilities : object {
    private static HashSet`1<string> CSharpKeywords;
    private static Regex InvalidCharsRegex;
    private static CSharpUtilities();
    public virtual bool IsCSharpKeyword(string identifier);
    public virtual string GenerateCSharpIdentifier(string identifier, ICollection`1<string> existingIdentifiers, Func`2<string, string> singularizePluralizer);
    public virtual string GenerateCSharpIdentifier(string identifier, ICollection`1<string> existingIdentifiers, Func`2<string, string> singularizePluralizer, Func`3<string, ICollection`1<string>, string> uniquifier);
    public virtual string Uniquifier(string proposedIdentifier, ICollection`1<string> existingIdentifiers);
    [NullableContextAttribute("2")]
public virtual bool IsValidIdentifier(string name);
    private static bool IsIdentifierStartCharacter(char ch);
    private static bool IsIdentifierPartCharacter(char ch);
    private static bool IsLetterChar(UnicodeCategory cat);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Scaffolding.Internal.ICandidateNamingService {
    public abstract virtual string GenerateCandidateIdentifier(DatabaseTable originalTable);
    public abstract virtual string GenerateCandidateIdentifier(DatabaseColumn originalColumn);
    public abstract virtual string GenerateCandidateIdentifier(string databaseName);
    public abstract virtual string GetDependentEndCandidateNavigationPropertyName(IReadOnlyForeignKey foreignKey);
    public abstract virtual string GetPrincipalEndCandidateNavigationPropertyName(IReadOnlyForeignKey foreignKey, string dependentEndNavigationPropertyName);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Scaffolding.Internal.ICSharpUtilities {
    public abstract virtual string GenerateCSharpIdentifier(string identifier, ICollection`1<string> existingIdentifiers, Func`2<string, string> singularizePluralizer);
    public abstract virtual string GenerateCSharpIdentifier(string identifier, ICollection`1<string> existingIdentifiers, Func`2<string, string> singularizePluralizer, Func`3<string, ICollection`1<string>, string> uniquifier);
    public abstract virtual bool IsCSharpKeyword(string identifier);
    [NullableContextAttribute("2")]
public abstract virtual bool IsValidIdentifier(string name);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Scaffolding.Internal.IScaffoldingTypeMapper {
    public abstract virtual TypeScaffoldingInfo FindMapping(string storeType, bool keyOrIndex, bool rowVersion, Type clrType);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Scaffolding.Internal.ITextTransformation {
    public IDictionary`2<string, object> Session { get; public set; }
    public CompilerErrorCollection Errors { get; }
    public abstract virtual IDictionary`2<string, object> get_Session();
    public abstract virtual void set_Session(IDictionary`2<string, object> value);
    public abstract virtual CompilerErrorCollection get_Errors();
    public abstract virtual void Initialize();
    public abstract virtual string TransformText();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.ModelCodeGeneratorSelector : LanguageBasedSelector`1<IModelCodeGenerator> {
    private IEnumerable`1<TemplatedModelGenerator> _templatedModelGenerators;
    public ModelCodeGeneratorSelector(IEnumerable`1<IModelCodeGenerator> services);
    public virtual IModelCodeGenerator Select(ModelCodeGenerationOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.RelationalScaffoldingModelFactory : object {
    internal static string NavigationNameUniquifyingPattern;
    internal static string SelfReferencingPrincipalEndNavigationNamePattern;
    private IOperationReporter _reporter;
    private ICandidateNamingService _candidateNamingService;
    private Dictionary`2<DatabaseTable, CSharpUniqueNamer`1<DatabaseColumn>> _columnNamers;
    private ModelReverseEngineerOptions _options;
    private DatabaseTable _nullTable;
    private CSharpUniqueNamer`1<DatabaseTable> _tableNamer;
    private CSharpUniqueNamer`1<DatabaseTable> _dbSetNamer;
    private HashSet`1<DatabaseColumn> _unmappedColumns;
    private IPluralizer _pluralizer;
    private ICSharpUtilities _cSharpUtilities;
    private IScaffoldingTypeMapper _scaffoldingTypeMapper;
    private IModelRuntimeInitializer _modelRuntimeInitializer;
    private Dictionary`2<IReadOnlyEntityType, List`1<string>> _entityTypeAndPropertyIdentifiers;
    public RelationalScaffoldingModelFactory(IOperationReporter reporter, ICandidateNamingService candidateNamingService, IPluralizer pluralizer, ICSharpUtilities cSharpUtilities, IScaffoldingTypeMapper scaffoldingTypeMapper, IModelRuntimeInitializer modelRuntimeInitializer);
    public virtual IModel Create(DatabaseModel databaseModel, ModelReverseEngineerOptions options);
    protected virtual string GetEntityTypeName(DatabaseTable table);
    protected virtual string GetDbSetName(DatabaseTable table);
    protected virtual string GetPropertyName(DatabaseColumn column);
    protected virtual ModelBuilder VisitDatabaseModel(ModelBuilder modelBuilder, DatabaseModel databaseModel);
    protected virtual ModelBuilder VisitSequences(ModelBuilder modelBuilder, ICollection`1<DatabaseSequence> sequences);
    protected virtual SequenceBuilder VisitSequence(ModelBuilder modelBuilder, DatabaseSequence sequence);
    protected virtual ModelBuilder VisitTables(ModelBuilder modelBuilder, ICollection`1<DatabaseTable> tables);
    protected virtual EntityTypeBuilder VisitTable(ModelBuilder modelBuilder, DatabaseTable table);
    protected virtual EntityTypeBuilder VisitColumns(EntityTypeBuilder builder, ICollection`1<DatabaseColumn> columns);
    protected virtual PropertyBuilder VisitColumn(EntityTypeBuilder builder, DatabaseColumn column);
    protected virtual KeyBuilder VisitPrimaryKey(EntityTypeBuilder builder, DatabaseTable table);
    protected virtual EntityTypeBuilder VisitUniqueConstraints(EntityTypeBuilder builder, ICollection`1<DatabaseUniqueConstraint> uniqueConstraints);
    protected virtual IndexBuilder VisitUniqueConstraint(EntityTypeBuilder builder, DatabaseUniqueConstraint uniqueConstraint);
    protected virtual EntityTypeBuilder VisitIndexes(EntityTypeBuilder builder, ICollection`1<DatabaseIndex> indexes);
    protected virtual IndexBuilder VisitIndex(EntityTypeBuilder builder, DatabaseIndex index);
    protected virtual ModelBuilder VisitForeignKeys(ModelBuilder modelBuilder, IList`1<DatabaseForeignKey> foreignKeys);
    protected virtual IMutableForeignKey VisitForeignKey(ModelBuilder modelBuilder, DatabaseForeignKey foreignKey);
    protected virtual void AddNavigationProperties(IMutableForeignKey foreignKey);
    protected virtual List`1<string> ExistingIdentifiers(IReadOnlyEntityType entityType);
    protected virtual TypeScaffoldingInfo GetTypeScaffoldingInfo(DatabaseColumn column);
    private static void AssignOnDeleteAction(DatabaseForeignKey databaseForeignKey, IMutableForeignKey foreignKey);
    private static string NavigationUniquifier(string proposedIdentifier, ICollection`1<string> existingIdentifiers);
    [CompilerGeneratedAttribute]
private string <Create>b__15_1(DatabaseTable t);
    [CompilerGeneratedAttribute]
private string <Create>b__15_3(DatabaseTable t);
    [CompilerGeneratedAttribute]
private string <GetPropertyName>b__18_1(DatabaseColumn c);
    [CompilerGeneratedAttribute]
private bool <VisitPrimaryKey>b__26_0(DatabaseColumn c);
    [CompilerGeneratedAttribute]
private bool <VisitUniqueConstraint>b__28_0(DatabaseColumn c);
    [CompilerGeneratedAttribute]
private bool <VisitIndex>b__30_0(DatabaseColumn c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.ReverseEngineerScaffolder : object {
    private IDatabaseModelFactory _databaseModelFactory;
    private IScaffoldingModelFactory _factory;
    private ICSharpUtilities _cSharpUtilities;
    private ICSharpHelper _code;
    private IDesignTimeConnectionStringResolver _connectionStringResolver;
    private IOperationReporter _reporter;
    private static string DbContextSuffix;
    private static string DefaultDbContextName;
    [CompilerGeneratedAttribute]
private IModelCodeGeneratorSelector <ModelCodeGeneratorSelector>k__BackingField;
    private IModelCodeGeneratorSelector ModelCodeGeneratorSelector { get; }
    public ReverseEngineerScaffolder(IDatabaseModelFactory databaseModelFactory, IScaffoldingModelFactory scaffoldingModelFactory, IModelCodeGeneratorSelector modelCodeGeneratorSelector, ICSharpUtilities cSharpUtilities, ICSharpHelper cSharpHelper, IDesignTimeConnectionStringResolver connectionStringResolver, IOperationReporter reporter);
    [CompilerGeneratedAttribute]
private IModelCodeGeneratorSelector get_ModelCodeGeneratorSelector();
    public virtual ScaffoldedModel ScaffoldModel(string connectionString, DatabaseModelFactoryOptions databaseOptions, ModelReverseEngineerOptions modelOptions, ModelCodeGenerationOptions codeOptions);
    public virtual SavedModelFiles Save(ScaffoldedModel scaffoldedModel, string outputDir, bool overwriteFiles);
    private static void CheckOutputFiles(ScaffoldedModel scaffoldedModel, string outputDir, bool overwriteFiles);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.ScaffoldingTypeMapper : object {
    private IRelationalTypeMappingSource _typeMappingSource;
    [NullableContextAttribute("1")]
public ScaffoldingTypeMapper(IRelationalTypeMappingSource typeMappingSource);
    [NullableContextAttribute("2")]
public virtual TypeScaffoldingInfo FindMapping(string storeType, bool keyOrIndex, bool rowVersion, Type clrType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost : object {
    private static List`1<string> _noWarn;
    private IServiceProvider _serviceProvider;
    private ITextTemplatingSession _session;
    private CompilerErrorCollection _errors;
    private string _extension;
    private Encoding _outputEncoding;
    private bool _fromOutputDirective;
    [CompilerGeneratedAttribute]
private IList`1<string> <StandardAssemblyReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <StandardImports>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TemplateFile>k__BackingField;
    public ITextTemplatingSession Session { get; public set; }
    public IList`1<string> StandardAssemblyReferences { get; }
    public IList`1<string> StandardImports { get; }
    [NullableAttribute("2")]
public string TemplateFile { get; public set; }
    public string Extension { get; }
    public CompilerErrorCollection Errors { get; }
    public Encoding OutputEncoding { get; }
    [NullableContextAttribute("2")]
public TextTemplatingEngineHost(IServiceProvider serviceProvider);
    private static TextTemplatingEngineHost();
    public virtual ITextTemplatingSession get_Session();
    public virtual void set_Session(ITextTemplatingSession value);
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_StandardAssemblyReferences();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_StandardImports();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_TemplateFile();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_TemplateFile(string value);
    public virtual string get_Extension();
    public virtual CompilerErrorCollection get_Errors();
    public virtual Encoding get_OutputEncoding();
    public virtual void Initialize();
    public virtual ITextTemplatingSession CreateSession();
    public virtual object GetHostOption(string optionName);
    public virtual bool LoadIncludeText(string requestFileName, String& content, String& location);
    public virtual void LogErrors(CompilerErrorCollection errors);
    public virtual AppDomain ProvideTemplatingAppDomain(string content);
    public virtual string ResolveAssemblyReference(string assemblyReference);
    public virtual Type ResolveDirectiveProcessor(string processorName);
    public virtual string ResolveParameterValue(string directiveId, string processorName, string parameterName);
    public virtual string ResolvePath(string path);
    public virtual void SetFileExtension(string extension);
    public virtual void SetOutputEncoding(Encoding encoding, bool fromOutputDirective);
    public virtual object GetService(Type serviceType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingModelGenerator : TemplatedModelGenerator {
    private static string DbContextTemplate;
    private static string EntityTypeTemplate;
    private static string EntityTypeConfigurationTemplate;
    private IOperationReporter _reporter;
    private IServiceProvider _serviceProvider;
    private TemplatingEngine _engine;
    protected TemplatingEngine Engine { get; }
    public TextTemplatingModelGenerator(ModelCodeGeneratorDependencies dependencies, IOperationReporter reporter, IServiceProvider serviceProvider);
    protected virtual TemplatingEngine get_Engine();
    public virtual bool HasTemplates(string projectDir);
    public virtual ScaffoldedModel GenerateModel(IModel model, ModelCodeGenerationOptions options);
    private void CheckEncoding(Encoding outputEncoding);
    private void HandleErrors(TextTemplatingEngineHost host);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.TypeScaffoldingInfo : object {
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInferred>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ScaffoldUnicode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ScaffoldFixedLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ScaffoldMaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ScaffoldPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ScaffoldScale>k__BackingField;
    public Type ClrType { get; }
    public bool IsInferred { get; }
    public Nullable`1<bool> ScaffoldUnicode { get; }
    public Nullable`1<bool> ScaffoldFixedLength { get; }
    public Nullable`1<int> ScaffoldMaxLength { get; }
    public Nullable`1<int> ScaffoldPrecision { get; }
    public Nullable`1<int> ScaffoldScale { get; }
    public TypeScaffoldingInfo(Type clrType, bool inferred, Nullable`1<bool> scaffoldUnicode, Nullable`1<int> scaffoldMaxLength, Nullable`1<bool> scaffoldFixedLength, Nullable`1<int> scaffoldPrecision, Nullable`1<int> scaffoldScale);
    [CompilerGeneratedAttribute]
public virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
public virtual bool get_IsInferred();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_ScaffoldUnicode();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_ScaffoldFixedLength();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_ScaffoldMaxLength();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_ScaffoldPrecision();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_ScaffoldScale();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Scaffolding.IReverseEngineerScaffolder {
    public abstract virtual ScaffoldedModel ScaffoldModel(string connectionString, DatabaseModelFactoryOptions databaseOptions, ModelReverseEngineerOptions modelOptions, ModelCodeGenerationOptions codeOptions);
    public abstract virtual SavedModelFiles Save(ScaffoldedModel scaffoldedModel, string outputDir, bool overwriteFiles);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Scaffolding.IScaffoldingModelFactory {
    public abstract virtual IModel Create(DatabaseModel databaseModel, ModelReverseEngineerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseColumnExtensions : object {
    [ExtensionAttribute]
public static string DisplayName(DatabaseColumn column);
    [ExtensionAttribute]
public static bool IsKeyOrIndex(DatabaseColumn column);
    [ExtensionAttribute]
public static bool IsRowVersion(DatabaseColumn column);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseForeignKeyExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string DisplayName(DatabaseForeignKey foreignKey);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.DatabaseTableExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string DisplayName(DatabaseTable table);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions : object {
    [CompilerGeneratedAttribute]
private bool <UseDataAnnotations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressConnectionStringWarning>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressOnConfiguring>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModelNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseNullableReferenceTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectDir>k__BackingField;
    public bool UseDataAnnotations { get; public set; }
    public bool SuppressConnectionStringWarning { get; public set; }
    public bool SuppressOnConfiguring { get; public set; }
    public string RootNamespace { get; public set; }
    public string ModelNamespace { get; public set; }
    public string ContextNamespace { get; public set; }
    public string Language { get; public set; }
    public bool UseNullableReferenceTypes { get; public set; }
    public string ContextDir { get; public set; }
    public string ContextName { get; public set; }
    public string ConnectionString { get; public set; }
    public string ProjectDir { get; public set; }
    [CompilerGeneratedAttribute]
public virtual bool get_UseDataAnnotations();
    [CompilerGeneratedAttribute]
public virtual void set_UseDataAnnotations(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_SuppressConnectionStringWarning();
    [CompilerGeneratedAttribute]
public virtual void set_SuppressConnectionStringWarning(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_SuppressOnConfiguring();
    [CompilerGeneratedAttribute]
public virtual void set_SuppressOnConfiguring(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_RootNamespace();
    [CompilerGeneratedAttribute]
public virtual void set_RootNamespace(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ModelNamespace();
    [CompilerGeneratedAttribute]
public virtual void set_ModelNamespace(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ContextNamespace();
    [CompilerGeneratedAttribute]
public virtual void set_ContextNamespace(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Language();
    [CompilerGeneratedAttribute]
public virtual void set_Language(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_UseNullableReferenceTypes();
    [CompilerGeneratedAttribute]
public virtual void set_UseNullableReferenceTypes(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_ContextDir();
    [CompilerGeneratedAttribute]
public virtual void set_ContextDir(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ContextName();
    [CompilerGeneratedAttribute]
public virtual void set_ContextName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ConnectionString();
    [CompilerGeneratedAttribute]
public virtual void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProjectDir();
    [CompilerGeneratedAttribute]
public virtual void set_ProjectDir(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerator : object {
    [CompilerGeneratedAttribute]
private ModelCodeGeneratorDependencies <Dependencies>k__BackingField;
    [NullableAttribute("2")]
public string Language { get; }
    protected ModelCodeGeneratorDependencies Dependencies { get; }
    protected ModelCodeGenerator(ModelCodeGeneratorDependencies dependencies);
    [NullableContextAttribute("2")]
public abstract virtual string get_Language();
    [CompilerGeneratedAttribute]
protected virtual ModelCodeGeneratorDependencies get_Dependencies();
    public abstract virtual ScaffoldedModel GenerateModel(IModel model, ModelCodeGenerationOptions options);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGeneratorDependencies : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private ModelCodeGeneratorDependencies(ModelCodeGeneratorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ModelCodeGeneratorDependencies left, ModelCodeGeneratorDependencies right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ModelCodeGeneratorDependencies left, ModelCodeGeneratorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ModelCodeGeneratorDependencies other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public ModelCodeGeneratorDependencies <Clone>$();
}
public class Microsoft.EntityFrameworkCore.Scaffolding.ModelReverseEngineerOptions : object {
    [CompilerGeneratedAttribute]
private bool <UseDatabaseNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoPluralize>k__BackingField;
    public bool UseDatabaseNames { get; public set; }
    public bool NoPluralize { get; public set; }
    [CompilerGeneratedAttribute]
public virtual bool get_UseDatabaseNames();
    [CompilerGeneratedAttribute]
public virtual void set_UseDatabaseNames(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_NoPluralize();
    [CompilerGeneratedAttribute]
public virtual void set_NoPluralize(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.SavedModelFiles : object {
    [CompilerGeneratedAttribute]
private string <ContextFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <AdditionalFiles>k__BackingField;
    public string ContextFile { get; }
    public IList`1<string> AdditionalFiles { get; }
    public SavedModelFiles(string contextFile, IEnumerable`1<string> additionalFiles);
    [CompilerGeneratedAttribute]
public virtual string get_ContextFile();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_AdditionalFiles();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.ScaffoldedFile : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    public string Path { get; public set; }
    public string Code { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Path();
    [CompilerGeneratedAttribute]
public virtual void set_Path(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Code();
    [CompilerGeneratedAttribute]
public virtual void set_Code(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.ScaffoldedModel : object {
    [CompilerGeneratedAttribute]
private ScaffoldedFile <ContextFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ScaffoldedFile> <AdditionalFiles>k__BackingField;
    public ScaffoldedFile ContextFile { get; public set; }
    public IList`1<ScaffoldedFile> AdditionalFiles { get; }
    [CompilerGeneratedAttribute]
public virtual ScaffoldedFile get_ContextFile();
    [CompilerGeneratedAttribute]
public virtual void set_ContextFile(ScaffoldedFile value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ScaffoldedFile> get_AdditionalFiles();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Scaffolding.TemplatedModelGenerator : ModelCodeGenerator {
    [CompilerGeneratedAttribute]
private static string <TemplatesDirectory>k__BackingField;
    protected static string TemplatesDirectory { get; }
    [NullableAttribute("2")]
public string Language { get; }
    protected TemplatedModelGenerator(ModelCodeGeneratorDependencies dependencies);
    private static TemplatedModelGenerator();
    [CompilerGeneratedAttribute]
protected static string get_TemplatesDirectory();
    [NullableContextAttribute("2")]
public virtual string get_Language();
    public abstract virtual bool HasTemplates(string projectDir);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions : object {
    private static bool UseOldBehavior28905;
    private static ScaffoldingModelExtensions();
    [ExtensionAttribute]
public static bool IsSimpleManyToManyJoinEntityType(IEntityType entityType);
    [ExtensionAttribute]
public static bool IsLeftNavigation(ISkipNavigation skipNavigation);
    [ExtensionAttribute]
public static string GetDbSetName(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static bool IsHandledByConvention(IKey key);
    [ExtensionAttribute]
public static bool IsHandledByDataAnnotations(IIndex index, IAnnotationCodeGenerator annotationCodeGenerator);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions/<GetDataAnnotations>d__6")]
[ExtensionAttribute]
public static IEnumerable`1<AttributeCodeFragment> GetDataAnnotations(IEntityType entityType, IAnnotationCodeGenerator annotationCodeGenerator);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions/<GetDataAnnotations>d__7")]
[ExtensionAttribute]
public static IEnumerable`1<AttributeCodeFragment> GetDataAnnotations(IProperty property, IAnnotationCodeGenerator annotationCodeGenerator);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions/<GetDataAnnotations>d__8")]
[ExtensionAttribute]
public static IEnumerable`1<AttributeCodeFragment> GetDataAnnotations(INavigation navigation, IAnnotationCodeGenerator annotationCodeGenerator);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions/<GetDataAnnotations>d__9")]
[ExtensionAttribute]
public static IEnumerable`1<AttributeCodeFragment> GetDataAnnotations(ISkipNavigation skipNavigation, IAnnotationCodeGenerator annotationCodeGenerator);
    [ExtensionAttribute]
public static FluentApiCodeFragment GetFluentApiCalls(IModel model, IAnnotationCodeGenerator annotationCodeGenerator);
    [ExtensionAttribute]
public static FluentApiCodeFragment GetFluentApiCalls(IEntityType entityType, IAnnotationCodeGenerator annotationCodeGenerator);
    [ExtensionAttribute]
public static FluentApiCodeFragment GetFluentApiCalls(IKey key, IAnnotationCodeGenerator annotationCodeGenerator);
    [ExtensionAttribute]
public static FluentApiCodeFragment GetFluentApiCalls(IIndex index, IAnnotationCodeGenerator annotationCodeGenerator);
    [ExtensionAttribute]
public static FluentApiCodeFragment GetFluentApiCalls(IProperty property, IAnnotationCodeGenerator annotationCodeGenerator);
    [ExtensionAttribute]
public static FluentApiCodeFragment GetFluentApiCalls(IForeignKey foreignKey, IAnnotationCodeGenerator annotationCodeGenerator, bool useStrings);
    [ExtensionAttribute]
public static FluentApiCodeFragment GetFluentApiCalls(ISequence sequence, IAnnotationCodeGenerator annotationCodeGenerator);
    private static FluentApiCodeFragment GenerateAnnotations(IAnnotatable annotatable, Dictionary`2<string, IAnnotation> annotations, IAnnotationCodeGenerator annotationCodeGenerator, bool isHandledByDataAnnotations);
}
internal static class Microsoft.EntityFrameworkCore.Tools.AnsiConsole : object {
    [NullableAttribute("1")]
public static AnsiTextWriter Out;
    private static AnsiConsole();
    [NullableContextAttribute("2")]
public static void WriteLine(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.EntityFrameworkCore.Tools.AnsiConstants : object {
    public static string Reset;
    public static string Bold;
    public static string Dark;
    public static string Black;
    public static string Red;
    public static string Green;
    public static string Yellow;
    public static string Blue;
    public static string Magenta;
    public static string Cyan;
    public static string Gray;
}
internal class Microsoft.EntityFrameworkCore.Tools.AnsiTextWriter : object {
    private TextWriter _writer;
    [NullableContextAttribute("1")]
public AnsiTextWriter(TextWriter writer);
    [NullableContextAttribute("2")]
public void WriteLine(string text);
    private void Interpret(string value);
    private static void Apply(string parameter);
    private static void ApplyBold();
    private static void ResetBold();
    private static void ApplyColor(ConsoleColor color);
    private static void ResetColor();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class Microsoft.EntityFrameworkCore.Tools.Reporter : object {
    [CompilerGeneratedAttribute]
private static bool <IsVerbose>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <NoColor>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <PrefixOutput>k__BackingField;
    public static bool IsVerbose { get; public set; }
    public static bool NoColor { get; public set; }
    public static bool PrefixOutput { get; public set; }
    [CompilerGeneratedAttribute]
public static bool get_IsVerbose();
    [CompilerGeneratedAttribute]
public static void set_IsVerbose(bool value);
    [CompilerGeneratedAttribute]
public static bool get_NoColor();
    [CompilerGeneratedAttribute]
public static void set_NoColor(bool value);
    [CompilerGeneratedAttribute]
public static bool get_PrefixOutput();
    [CompilerGeneratedAttribute]
public static void set_PrefixOutput(bool value);
    public static string Colorize(string value, Func`2<string, string> colorizeFunc);
    public static void WriteError(string message);
    public static void WriteWarning(string message);
    public static void WriteInformation(string message);
    public static void WriteData(string message);
    public static void WriteVerbose(string message);
    private static string Prefix(string prefix, string value);
    private static void WriteLine(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.Check : object {
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static IReadOnlyList`1<T> NotEmpty(IReadOnlyList`1<T> value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static string NotEmpty(string value, string parameterName);
    [NullableContextAttribute("2")]
public static string NullButNotEmpty(string value, string parameterName);
    public static IReadOnlyList`1<T> HasNoNulls(IReadOnlyList`1<T> value, string parameterName);
    public static IReadOnlyList`1<string> HasNoEmptyElements(IReadOnlyList`1<string> value, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void DebugAssert(bool condition, string message);
    [ConditionalAttribute("DEBUG")]
[DoesNotReturnAttribute]
public static void DebugFail(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.DictionaryExtensions : object {
    [ExtensionAttribute]
public static TValue GetOrAddNew(IDictionary`2<TKey, TValue> source, TKey key);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TValue Find(IReadOnlyDictionary`2<TKey, TValue> source, TKey key);
    [ExtensionAttribute]
public static bool TryGetAndRemove(IDictionary`2<TKey, TValue> source, TKey key, TReturn& value);
    [ExtensionAttribute]
public static void Remove(IDictionary`2<TKey, TValue> source, Func`3<TKey, TValue, bool> predicate);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void Remove(IDictionary`2<TKey, TValue> source, Func`4<TKey, TValue, TState, bool> predicate, TState state);
}
[ExtensionAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.DisposableExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ValueTask DisposeAsyncIfAvailable(IDisposable disposable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.EnumerableExtensions : object {
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByOrdinal(IEnumerable`1<TSource> source, Func`2<TSource, string> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<T> Distinct(IEnumerable`1<T> source, Func`3<T, T, bool> comparer);
    [ExtensionAttribute]
public static string Join(IEnumerable`1<object> source, string separator);
    [ExtensionAttribute]
public static bool StructuralSequenceEqual(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static bool StartsWith(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> source, T item);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> source, T item, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static T FirstOr(IEnumerable`1<T> source, T alternate);
    [ExtensionAttribute]
public static T FirstOr(IEnumerable`1<T> source, Func`2<T, bool> predicate, T alternate);
    [ExtensionAttribute]
public static bool Any(IEnumerable source);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Utilities.EnumerableExtensions/<ToListAsync>d__11`1")]
[ExtensionAttribute]
public static Task`1<List`1<TSource>> ToListAsync(IAsyncEnumerable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static List`1<TSource> ToList(IEnumerable source);
    [ExtensionAttribute]
public static string Format(IEnumerable`1<string> strings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.EntityFrameworkCore.Utilities.Graph`1 : object {
    public IEnumerable`1<TVertex> Vertices { get; }
    public abstract virtual IEnumerable`1<TVertex> get_Vertices();
    public abstract virtual void Clear();
    public abstract virtual IEnumerable`1<TVertex> GetOutgoingNeighbors(TVertex from);
    public abstract virtual IEnumerable`1<TVertex> GetIncomingNeighbors(TVertex to);
    public ISet`1<TVertex> GetUnreachableVertices(IReadOnlyList`1<TVertex> roots);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.EntityFrameworkCore.Utilities.HashHelpers : object {
    internal static Int32[] SizeOneIntArray;
    public static int HashCollisionThreshold;
    public static int MaxPrimeArrayLength;
    public static int HashPrime;
    public static Int32[] primes;
    private static HashHelpers();
    internal static int PowerOf2(int v);
    public static bool IsPrime(int candidate);
    public static int GetPrime(int min);
    public static int ExpandPrime(int oldSize);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Microsoft.EntityFrameworkCore.Utilities.Multigraph`2 : Graph`1<TVertex> {
    private IComparer`1<TVertex> _secondarySortComparer;
    private HashSet`1<TVertex> _vertices;
    private Dictionary`2<TVertex, Dictionary`2<TVertex, object>> _successorMap;
    private Dictionary`2<TVertex, Dictionary`2<TVertex, object>> _predecessorMap;
    public IEnumerable`1<TVertex> Vertices { get; }
    public Multigraph`2(IComparer`1<TVertex> secondarySortComparer);
    public Multigraph`2(Comparison`1<TVertex> secondarySortComparer);
    public IEnumerable`1<TEdge> GetEdges(TVertex from, TVertex to);
    public void AddVertex(TVertex vertex);
    public void AddVertices(IEnumerable`1<TVertex> vertices);
    public void AddEdge(TVertex from, TVertex to, TEdge payload, bool requiresBatchingBoundary);
    public virtual void Clear();
    public IReadOnlyList`1<TVertex> TopologicalSort();
    public IReadOnlyList`1<TVertex> TopologicalSort(Func`4<TVertex, TVertex, IEnumerable`1<TEdge>, bool> tryBreakEdge);
    public IReadOnlyList`1<TVertex> TopologicalSort(Func`2<IEnumerable`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle);
    public IReadOnlyList`1<TVertex> TopologicalSort(Func`4<TVertex, TVertex, IEnumerable`1<TEdge>, bool> tryBreakEdge, Func`2<IReadOnlyList`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle, Func`2<string, string> formatException);
    protected virtual string ToString(TVertex vertex);
    public IReadOnlyList`1<List`1<TVertex>> BatchingTopologicalSort();
    public IReadOnlyList`1<List`1<TVertex>> BatchingTopologicalSort(Func`4<TVertex, TVertex, IEnumerable`1<TEdge>, bool> canBreakEdges, Func`2<IReadOnlyList`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle, Func`2<string, string> formatException);
    private IReadOnlyList`1<List`1<TVertex>> TopologicalSortCore(bool withBatching, Func`4<TVertex, TVertex, IEnumerable`1<TEdge>, bool> canBreakEdges, Func`2<IReadOnlyList`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle, Func`2<string, string> formatException);
    private void ThrowCycle(List`1<TVertex> cycle, Func`2<IReadOnlyList`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle, Func`2<string, string> formatException);
    public virtual IEnumerable`1<TVertex> get_Vertices();
    public virtual IEnumerable`1<TVertex> GetOutgoingNeighbors(TVertex from);
    public virtual IEnumerable`1<TVertex> GetIncomingNeighbors(TVertex to);
    [CompilerGeneratedAttribute]
private string <ThrowCycle>b__20_0(TVertex e);
}
[IsReadOnlyAttribute]
internal class Microsoft.EntityFrameworkCore.Utilities.SharedStopwatch : ValueType {
    private static Stopwatch Stopwatch;
    private TimeSpan _started;
    public TimeSpan Elapsed { get; }
    private SharedStopwatch(TimeSpan started);
    private static SharedStopwatch();
    public TimeSpan get_Elapsed();
    public static SharedStopwatch StartNew();
    private static SharedStopwatch StartNewCore();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Hosting.HostFactoryResolver : object {
    private static BindingFlags DeclaredOnlyLookup;
    public static string BuildWebHost;
    public static string CreateWebHostBuilder;
    public static string CreateHostBuilder;
    private static string TimeoutEnvironmentKey;
    private static TimeSpan s_defaultWaitTimeout;
    private static HostFactoryResolver();
    private static TimeSpan SetupDefaultTimeout();
    public static Func`2<String[], TWebHost> ResolveWebHostFactory(Assembly assembly);
    public static Func`2<String[], TWebHostBuilder> ResolveWebHostBuilderFactory(Assembly assembly);
    public static Func`2<String[], THostBuilder> ResolveHostBuilderFactory(Assembly assembly);
    public static Func`2<String[], object> ResolveHostFactory(Assembly assembly, Nullable`1<TimeSpan> waitTimeout, bool stopApplication, Action`1<object> configureHostBuilder, Action`1<Exception> entrypointCompleted);
    private static Func`2<String[], T> ResolveFactory(Assembly assembly, string name);
    private static bool IsFactory(MethodInfo factory);
    public static Func`2<String[], IServiceProvider> ResolveServiceProviderFactory(Assembly assembly, Nullable`1<TimeSpan> waitTimeout);
    private static object Build(object builder);
    private static IServiceProvider GetServiceProvider(object host);
    [CompilerGeneratedAttribute]
internal static bool <ResolveServiceProviderFactory>g__IsApplicationNameArg|13_4(string arg);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Linq.Expressions.ExpressionExtensions : object {
    [ExtensionAttribute]
public static bool IsNullConstantExpression(Expression expression);
    [ExtensionAttribute]
public static LambdaExpression UnwrapLambdaFromQuote(Expression expression);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Expression UnwrapTypeConversion(Expression expression, Type& convertedType);
    private static Expression RemoveConvert(Expression expression);
    [ExtensionAttribute]
public static T GetConstantValue(Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Linq.Expressions.ExpressionVisitorExtensions : object {
    [ExtensionAttribute]
public static IReadOnlyList`1<Expression> Visit(ExpressionVisitor visitor, IReadOnlyList`1<Expression> nodes);
    [ExtensionAttribute]
public static IReadOnlyList`1<T> VisitAndConvert(ExpressionVisitor visitor, IReadOnlyList`1<T> nodes, string callerName);
    [ExtensionAttribute]
public static IReadOnlyList`1<T> Visit(ExpressionVisitor visitor, IReadOnlyList`1<T> nodes, Func`2<T, T> elementVisitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Reflection.EntityFrameworkMemberInfoExtensions : object {
    [ExtensionAttribute]
public static Type GetMemberType(MemberInfo memberInfo);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsSameAs(MemberInfo propertyInfo, MemberInfo otherPropertyInfo);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsOverriddenBy(MemberInfo propertyInfo, MemberInfo otherPropertyInfo);
    [ExtensionAttribute]
public static string GetSimpleMemberName(MemberInfo member);
    [ExtensionAttribute]
public static bool IsReallyVirtual(MethodInfo method);
}
[ExtensionAttribute]
internal static class System.Reflection.MethodInfoExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsContainsMethod(MethodInfo method);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Reflection.PropertyInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsStatic(PropertyInfo property);
    [ExtensionAttribute]
public static bool IsCandidateProperty(MemberInfo memberInfo, bool needsWrite, bool publicOnly);
    [ExtensionAttribute]
public static bool IsIndexerProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static PropertyInfo FindGetterProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static PropertyInfo FindSetterProperty(PropertyInfo propertyInfo);
}
internal class System.Runtime.Remoting.Messaging.CallContext : object {
    [NullableContextAttribute("1")]
public static object LogicalGetData(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.SharedTypeExtensions : object {
    private static Dictionary`2<Type, string> BuiltInTypeNames;
    private static Dictionary`2<Type, object> CommonTypeDictionary;
    private static MethodInfo GenerateDefaultValueConstantMethod;
    private static SharedTypeExtensions();
    [ExtensionAttribute]
public static Type UnwrapNullableType(Type type);
    [ExtensionAttribute]
public static bool IsNullableValueType(Type type);
    [ExtensionAttribute]
public static bool IsNullableType(Type type);
    [ExtensionAttribute]
public static bool IsValidEntityType(Type type);
    [ExtensionAttribute]
public static bool IsValidComplexType(Type type);
    [ExtensionAttribute]
public static bool IsScalarType(Type type);
    [ExtensionAttribute]
public static bool IsPropertyBagType(Type type);
    [ExtensionAttribute]
public static Type MakeNullable(Type type, bool nullable);
    [ExtensionAttribute]
public static bool IsNumeric(Type type);
    [ExtensionAttribute]
public static bool IsInteger(Type type);
    [ExtensionAttribute]
public static bool IsSignedInteger(Type type);
    [ExtensionAttribute]
public static bool IsAnonymousType(Type type);
    [ExtensionAttribute]
public static PropertyInfo GetAnyProperty(Type type, string name);
    [ExtensionAttribute]
public static bool IsInstantiable(Type type);
    [ExtensionAttribute]
public static Type UnwrapEnumType(Type type);
    [ExtensionAttribute]
public static Type GetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetElementType(Type type, Type interfaceOrBaseType);
    [ExtensionAttribute]
public static bool IsCompatibleWith(Type propertyType, Type fieldType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetGenericTypeImplementations>d__20")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetGenericTypeImplementations(Type type, Type interfaceOrBaseType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetBaseTypes>d__21")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetBaseTypes(Type type);
    [ExtensionAttribute]
public static List`1<Type> GetBaseTypesAndInterfacesInclusive(Type type);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetTypesInHierarchy>d__23")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetTypesInHierarchy(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetDeclaredInterfaces(Type type);
    [ExtensionAttribute]
public static ConstructorInfo GetDeclaredConstructor(Type type, Type[] types);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetPropertiesInHierarchy>d__26")]
[ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetPropertiesInHierarchy(Type type, string name);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetMembersInHierarchy>d__27")]
[ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type, string name);
    [ExtensionAttribute]
public static object GetDefaultValue(Type type);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("Gets all types from the given assembly - unsafe for trimming")]
public static IEnumerable`1<TypeInfo> GetConstructibleTypes(Assembly assembly);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("Gets all types from the given assembly - unsafe for trimming")]
public static IEnumerable`1<TypeInfo> GetLoadableDefinedTypes(Assembly assembly);
    [ExtensionAttribute]
public static string DisplayName(Type type, bool fullName, bool compilable);
    private static void ProcessType(StringBuilder builder, Type type, bool fullName, bool compilable);
    private static void ProcessArrayType(StringBuilder builder, Type type, bool fullName, bool compilable);
    private static void ProcessGenericType(StringBuilder builder, Type type, Type[] genericArguments, int length, bool fullName, bool compilable);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetNamespaces>d__37")]
[ExtensionAttribute]
public static IEnumerable`1<string> GetNamespaces(Type type);
    [ExtensionAttribute]
public static ConstantExpression GetDefaultValueConstant(Type type);
    private static ConstantExpression GenerateDefaultValueConstant();
    [CompilerGeneratedAttribute]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2070")]
internal static IEnumerable`1<Type> <GetDeclaredInterfaces>g__GetInterfacesSuppressed|24_0(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Text.StringBuilderExtensions : object {
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<string> values, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, string separator, String[] values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, Action`2<StringBuilder, T> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, Func`3<StringBuilder, T, bool> joinFunc, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam param, Action`3<StringBuilder, T, TParam> joinAction, string separator);
    [ExtensionAttribute]
public static void AppendBytes(StringBuilder builder, Byte[] bytes);
}
