[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.CanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    public string Contract { get; private set; }
    public bool ForceFullStates { get; private set; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
private void set_Contract(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
    [CompilerGeneratedAttribute]
private void set_ForceFullStates(bool value);
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("4320")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    [NotNullAttribute]
public string FormatParameterName { get; private set; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
    [CompilerGeneratedAttribute]
private void set_FormatParameterName(string value);
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; private set; }
    public ImplicitUseTargetFlags TargetFlags { get; private set; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
private void set_UseKindFlags(ImplicitUseKindFlags value);
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
    [CompilerGeneratedAttribute]
private void set_TargetFlags(ImplicitUseTargetFlags value);
}
public enum Microsoft.EntityFrameworkCore.Infrastructure.RelationalDesignEventId : Enum {
    public int value__;
    public static RelationalDesignEventId MissingSchemaWarning;
    public static RelationalDesignEventId MissingTableWarning;
    public static RelationalDesignEventId SequenceMustBeNamedWarning;
    public static RelationalDesignEventId SequenceTypeNotSupportedWarning;
    public static RelationalDesignEventId UnableToGenerateEntityTypeWarning;
    public static RelationalDesignEventId ColumnTypeNotMappedWarning;
    public static RelationalDesignEventId MissingPrimaryKeyWarning;
    public static RelationalDesignEventId PrimaryKeyColumnsNotMappedWarning;
    public static RelationalDesignEventId IndexColumnsNotMappedWarning;
    public static RelationalDesignEventId ForeignKeyReferencesMissingTableWarning;
    public static RelationalDesignEventId ForeignKeyColumnsNotMappedWarning;
    public static RelationalDesignEventId ForeignKeyReferencesMissingPrincipalKeyWarning;
    public static RelationalDesignEventId FoundTable;
    public static RelationalDesignEventId TableSkipped;
    public static RelationalDesignEventId FoundColumn;
    public static RelationalDesignEventId ColumnSkipped;
    public static RelationalDesignEventId FoundIndex;
    public static RelationalDesignEventId FoundIndexColumn;
    public static RelationalDesignEventId IndexColumnSkipped;
    public static RelationalDesignEventId FoundForeignKeyColumn;
    public static RelationalDesignEventId FoundSequence;
    public static RelationalDesignEventId ForeignKeyReferencesMissingTable;
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Internal.RelationalDesignLoggerExtensions : object {
    [ExtensionAttribute]
public static void LogWarning(ILogger logger, RelationalDesignEventId eventId, Func`1<string> formatter);
    [ExtensionAttribute]
public static void LogDebug(ILogger logger, RelationalDesignEventId eventId, Func`1<string> formatter);
}
public static class Microsoft.EntityFrameworkCore.Internal.RelationalDesignStrings : object {
    private static ResourceManager _resourceManager;
    public static string MissingUseProviderMethodNameAnnotation { get; }
    public static string SequencesRequireName { get; }
    private static RelationalDesignStrings();
    public static string CannotFindTypeMappingForColumn(object columnName, object dateType);
    public static string ForeignKeyScaffoldErrorPrincipalKeyNotFound(object foreignKeyName, object columnsList, object principalEntityType);
    public static string ForeignKeyScaffoldErrorPrincipalTableNotFound(object foreignKeyName);
    public static string ForeignKeyScaffoldErrorPrincipalTableScaffoldingError(object foreignKeyName, object principalTableName);
    public static string ForeignKeyScaffoldErrorPropertyNotFound(object foreignKeyName, object columnNames);
    public static string PrimaryKeyErrorPropertyNotFound(object tableName, object columnNames);
    public static string MissingPrimaryKey(object tableName);
    public static string ProviderReturnedNullModel(object providerTypeName);
    public static string ReadOnlyFiles(object outputDirectoryName, object readOnlyFiles);
    public static string UnableToGenerateEntityType(object tableName);
    public static string UnableToScaffoldIndexMissingProperty(object indexName, object columnNames);
    public static string get_MissingUseProviderMethodNameAnnotation();
    public static string ExistingFiles(object outputDirectoryName, object existingFiles);
    public static string get_SequencesRequireName();
    public static string BadSequenceType(object sequenceName, object typeName);
    public static string MissingSchema(object schema);
    public static string MissingTable(object table);
    private static string GetString(string name, String[] formatterNames);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.ScaffoldingMetadataExtensions : object {
    [ExtensionAttribute]
public static ScaffoldingModelAnnotations Scaffolding(IModel model);
    [ExtensionAttribute]
public static ScaffoldingPropertyAnnotations Scaffolding(IProperty property);
}
public interface Microsoft.EntityFrameworkCore.Scaffolding.IDatabaseModelFactory {
    public abstract virtual DatabaseModel Create(string connectionString, TableSelectionSet tableSelectionSet);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.CandidateNamingService : object {
    public virtual string GenerateCandidateIdentifier(string originalIdentifier);
    public virtual string GetDependentEndCandidateNavigationPropertyName(IForeignKey foreignKey);
    public virtual string GetPrincipalEndCandidateNavigationPropertyName(IForeignKey foreignKey, string dependentEndNavigationPropertyName);
    private string FindCandidateNavigationName(IEnumerable`1<IProperty> properties);
    private string FindCommonPrefix(string firstName, IEnumerable`1<string> propertyNames);
    private string StripId(string commonPrefix, IEnumerable`1<IProperty> properties);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer`1 : object {
    private Func`2<T, string> _nameGetter;
    protected Dictionary`2<T, string> NameCache;
    public CSharpNamer`1(Func`2<T, string> nameGetter);
    public virtual string GetName(T item);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpUniqueNamer`1 : CSharpNamer`1<T> {
    private HashSet`1<string> _usedNames;
    public CSharpUniqueNamer`1(Func`2<T, string> nameGetter);
    public CSharpUniqueNamer`1(Func`2<T, string> nameGetter, IEnumerable`1<string> usedNames);
    public virtual string GetName(T item);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpUtilities : object {
    private static HashSet`1<string> _cSharpKeywords;
    private static Regex _invalidCharsRegex;
    [CompilerGeneratedAttribute]
private static CSharpUtilities <Instance>k__BackingField;
    private static Dictionary`2<Type, string> _primitiveTypeNames;
    public static CSharpUtilities Instance { get; }
    private static CSharpUtilities();
    [CompilerGeneratedAttribute]
public static CSharpUtilities get_Instance();
    public virtual string DelimitString(string value);
    public virtual string EscapeString(string str);
    public virtual string EscapeVerbatimString(string str);
    public virtual string GenerateLiteral(Byte[] value);
    public virtual string GenerateLiteral(bool value);
    public virtual string GenerateLiteral(int value);
    public virtual string GenerateLiteral(long value);
    public virtual string GenerateLiteral(decimal value);
    public virtual string GenerateLiteral(float value);
    public virtual string GenerateLiteral(double value);
    public virtual string GenerateLiteral(TimeSpan value);
    public virtual string GenerateLiteral(DateTime value);
    public virtual string GenerateLiteral(DateTimeOffset value);
    public virtual string GenerateLiteral(Guid value);
    public virtual string GenerateLiteral(string value);
    public virtual string GenerateVerbatimStringLiteral(string value);
    public virtual string GenerateLiteral(object value);
    public virtual bool IsCSharpKeyword(string identifier);
    public virtual string GenerateCSharpIdentifier(string identifier, ICollection`1<string> existingIdentifiers);
    public virtual string GenerateCSharpIdentifier(string identifier, ICollection`1<string> existingIdentifiers, Func`3<string, ICollection`1<string>, string> uniquifier);
    public virtual string Uniquifier(string proposedIdentifier, ICollection`1<string> existingIdentifiers);
    public virtual string GetTypeName(Type propertyType);
    public virtual bool IsValidIdentifier(string name);
    private static bool IsIdentifierStartCharacter(char ch);
    private static bool IsIdentifierPartCharacter(char ch);
    private static bool IsLetterChar(UnicodeCategory cat);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Scaffolding.Internal.DbDataReaderExtension : object {
    [ExtensionAttribute]
public static T GetValueOrDefault(DbDataReader reader, string name);
}
public interface Microsoft.EntityFrameworkCore.Scaffolding.Internal.IInternalDatabaseModelFactory {
    public abstract virtual DatabaseModel Create(DbConnection connection, TableSelectionSet tableSelectionSet);
}
public interface Microsoft.EntityFrameworkCore.Scaffolding.IScaffoldingModelFactory {
    public abstract virtual IModel Create(string connectionString, TableSelectionSet tableSelectionSet);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.ColumnModel : Annotatable {
    [CompilerGeneratedAttribute]
private TableModel <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PrimaryKeyOrdinal>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Ordinal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ComputedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ValueGenerated> <ValueGenerated>k__BackingField;
    public TableModel Table { get; public set; }
    public string Name { get; public set; }
    public Nullable`1<int> PrimaryKeyOrdinal { get; public set; }
    public int Ordinal { get; public set; }
    public bool IsNullable { get; public set; }
    public string DataType { get; public set; }
    public string DefaultValue { get; public set; }
    public string ComputedValue { get; public set; }
    public Nullable`1<int> MaxLength { get; public set; }
    public Nullable`1<int> Precision { get; public set; }
    public Nullable`1<int> Scale { get; public set; }
    public Nullable`1<ValueGenerated> ValueGenerated { get; public set; }
    public string DisplayName { get; }
    [CompilerGeneratedAttribute]
public virtual TableModel get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(TableModel value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_PrimaryKeyOrdinal();
    [CompilerGeneratedAttribute]
public virtual void set_PrimaryKeyOrdinal(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual int get_Ordinal();
    [CompilerGeneratedAttribute]
public virtual void set_Ordinal(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_DataType();
    [CompilerGeneratedAttribute]
public virtual void set_DataType(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DefaultValue();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ComputedValue();
    [CompilerGeneratedAttribute]
public virtual void set_ComputedValue(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_MaxLength();
    [CompilerGeneratedAttribute]
public virtual void set_MaxLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_Precision();
    [CompilerGeneratedAttribute]
public virtual void set_Precision(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_Scale();
    [CompilerGeneratedAttribute]
public virtual void set_Scale(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<ValueGenerated> get_ValueGenerated();
    [CompilerGeneratedAttribute]
public virtual void set_ValueGenerated(Nullable`1<ValueGenerated> value);
    public virtual string get_DisplayName();
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel : Annotatable {
    [CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultSchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<TableModel> <Tables>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<SequenceModel> <Sequences>k__BackingField;
    public string DatabaseName { get; public set; }
    public string DefaultSchemaName { get; public set; }
    public ICollection`1<TableModel> Tables { get; }
    public ICollection`1<SequenceModel> Sequences { get; }
    [CompilerGeneratedAttribute]
public virtual string get_DatabaseName();
    [CompilerGeneratedAttribute]
public virtual void set_DatabaseName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DefaultSchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultSchemaName(string value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<TableModel> get_Tables();
    [CompilerGeneratedAttribute]
public virtual ICollection`1<SequenceModel> get_Sequences();
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.ForeignKeyColumnModel : Annotatable {
    [CompilerGeneratedAttribute]
private int <Ordinal>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnModel <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnModel <PrincipalColumn>k__BackingField;
    public int Ordinal { get; public set; }
    public ColumnModel Column { get; public set; }
    public ColumnModel PrincipalColumn { get; public set; }
    [CompilerGeneratedAttribute]
public virtual int get_Ordinal();
    [CompilerGeneratedAttribute]
public virtual void set_Ordinal(int value);
    [CompilerGeneratedAttribute]
public virtual ColumnModel get_Column();
    [CompilerGeneratedAttribute]
public virtual void set_Column(ColumnModel value);
    [CompilerGeneratedAttribute]
public virtual ColumnModel get_PrincipalColumn();
    [CompilerGeneratedAttribute]
public virtual void set_PrincipalColumn(ColumnModel value);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.ForeignKeyModel : Annotatable {
    [CompilerGeneratedAttribute]
private TableModel <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private TableModel <PrincipalTable>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ForeignKeyColumnModel> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReferentialAction> <OnDelete>k__BackingField;
    public TableModel Table { get; public set; }
    public TableModel PrincipalTable { get; public set; }
    public ICollection`1<ForeignKeyColumnModel> Columns { get; }
    public string Name { get; public set; }
    public Nullable`1<ReferentialAction> OnDelete { get; public set; }
    public string DisplayName { get; }
    [CompilerGeneratedAttribute]
public virtual TableModel get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(TableModel value);
    [CompilerGeneratedAttribute]
public virtual TableModel get_PrincipalTable();
    [CompilerGeneratedAttribute]
public virtual void set_PrincipalTable(TableModel value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<ForeignKeyColumnModel> get_Columns();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<ReferentialAction> get_OnDelete();
    [CompilerGeneratedAttribute]
public virtual void set_OnDelete(Nullable`1<ReferentialAction> value);
    public virtual string get_DisplayName();
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.IndexColumnModel : Annotatable {
    [CompilerGeneratedAttribute]
private int <Ordinal>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnModel <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private IndexModel <Index>k__BackingField;
    public int Ordinal { get; public set; }
    public ColumnModel Column { get; public set; }
    public IndexModel Index { get; public set; }
    [CompilerGeneratedAttribute]
public virtual int get_Ordinal();
    [CompilerGeneratedAttribute]
public virtual void set_Ordinal(int value);
    [CompilerGeneratedAttribute]
public virtual ColumnModel get_Column();
    [CompilerGeneratedAttribute]
public virtual void set_Column(ColumnModel value);
    [CompilerGeneratedAttribute]
public virtual IndexModel get_Index();
    [CompilerGeneratedAttribute]
public virtual void set_Index(IndexModel value);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.IndexModel : Annotatable {
    [CompilerGeneratedAttribute]
private TableModel <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IndexColumnModel> <IndexColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUnique>k__BackingField;
    public TableModel Table { get; public set; }
    public string Name { get; public set; }
    public ICollection`1<IndexColumnModel> IndexColumns { get; public set; }
    public bool IsUnique { get; public set; }
    [CompilerGeneratedAttribute]
public virtual TableModel get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(TableModel value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<IndexColumnModel> get_IndexColumns();
    [CompilerGeneratedAttribute]
public virtual void set_IndexColumns(ICollection`1<IndexColumnModel> value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsUnique();
    [CompilerGeneratedAttribute]
public virtual void set_IsUnique(bool value);
}
public static class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.ScaffoldingAnnotationNames : object {
    public static string Prefix;
    public static string UseProviderMethodName;
    public static string ColumnOrdinal;
    public static string DependentEndNavigation;
    public static string PrincipalEndNavigation;
    public static string EntityTypeErrors;
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.ScaffoldingFullAnnotationNames : RelationalFullAnnotationNames {
    [CompilerGeneratedAttribute]
private static ScaffoldingFullAnnotationNames <Instance>k__BackingField;
    public string UseProviderMethodName;
    public string ColumnOrdinal;
    public string DependentEndNavigation;
    public string PrincipalEndNavigation;
    public string EntityTypeErrors;
    public static ScaffoldingFullAnnotationNames Instance { get; }
    protected ScaffoldingFullAnnotationNames(string prefix);
    private static ScaffoldingFullAnnotationNames();
    [CompilerGeneratedAttribute]
public static ScaffoldingFullAnnotationNames get_Instance();
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.ScaffoldingModelAnnotations : RelationalModelAnnotations {
    public string UseProviderMethodName { get; public set; }
    public IDictionary`2<string, string> EntityTypeErrors { get; public set; }
    public ScaffoldingModelAnnotations(IModel model);
    public virtual string get_UseProviderMethodName();
    public virtual void set_UseProviderMethodName(string value);
    public virtual IDictionary`2<string, string> get_EntityTypeErrors();
    public virtual void set_EntityTypeErrors(IDictionary`2<string, string> value);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.ScaffoldingPropertyAnnotations : RelationalPropertyAnnotations {
    public int ColumnOrdinal { get; public set; }
    public ScaffoldingPropertyAnnotations(IProperty property);
    public virtual int get_ColumnOrdinal();
    public virtual void set_ColumnOrdinal(int value);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.SequenceModel : Annotatable {
    [CompilerGeneratedAttribute]
private DatabaseModel <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <IncrementBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsCyclic>k__BackingField;
    public DatabaseModel Database { get; public set; }
    public string Name { get; public set; }
    public string SchemaName { get; public set; }
    public string DataType { get; public set; }
    public Nullable`1<long> Start { get; public set; }
    public Nullable`1<int> IncrementBy { get; public set; }
    public Nullable`1<long> Min { get; public set; }
    public Nullable`1<long> Max { get; public set; }
    public Nullable`1<bool> IsCyclic { get; public set; }
    [CompilerGeneratedAttribute]
public virtual DatabaseModel get_Database();
    [CompilerGeneratedAttribute]
public virtual void set_Database(DatabaseModel value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DataType();
    [CompilerGeneratedAttribute]
public virtual void set_DataType(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_Start();
    [CompilerGeneratedAttribute]
public virtual void set_Start(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_IncrementBy();
    [CompilerGeneratedAttribute]
public virtual void set_IncrementBy(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_Min();
    [CompilerGeneratedAttribute]
public virtual void set_Min(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_Max();
    [CompilerGeneratedAttribute]
public virtual void set_Max(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsCyclic();
    [CompilerGeneratedAttribute]
public virtual void set_IsCyclic(Nullable`1<bool> value);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.TableModel : Annotatable {
    [CompilerGeneratedAttribute]
private DatabaseModel <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ColumnModel> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IndexModel> <Indexes>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ForeignKeyModel> <ForeignKeys>k__BackingField;
    public DatabaseModel Database { get; public set; }
    public string Name { get; public set; }
    [CanBeNullAttribute]
public string SchemaName { get; public set; }
    public ICollection`1<ColumnModel> Columns { get; public set; }
    public ICollection`1<IndexModel> Indexes { get; }
    public ICollection`1<ForeignKeyModel> ForeignKeys { get; }
    public string DisplayName { get; }
    [CompilerGeneratedAttribute]
public virtual DatabaseModel get_Database();
    [CompilerGeneratedAttribute]
public virtual void set_Database(DatabaseModel value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<ColumnModel> get_Columns();
    [CompilerGeneratedAttribute]
public virtual void set_Columns(ICollection`1<ColumnModel> value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<IndexModel> get_Indexes();
    [CompilerGeneratedAttribute]
public virtual ICollection`1<ForeignKeyModel> get_ForeignKeys();
    public virtual string get_DisplayName();
}
public class Microsoft.EntityFrameworkCore.Scaffolding.RelationalScaffoldingModelFactory : object {
    internal static string NavigationNameUniquifyingPattern;
    internal static string SelfReferencingPrincipalEndNavigationNamePattern;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalTypeMapper <TypeMapper>k__BackingField;
    [CompilerGeneratedAttribute]
private CandidateNamingService <CandidateNamingService>k__BackingField;
    private Dictionary`2<TableModel, CSharpUniqueNamer`1<ColumnModel>> _columnNamers;
    private TableModel _nullTable;
    private CSharpUniqueNamer`1<TableModel> _tableNamer;
    private IDatabaseModelFactory _databaseModelFactory;
    private HashSet`1<ColumnModel> _unmappedColumns;
    private Dictionary`2<IEntityType, List`1<string>> _entityTypeAndPropertyIdentifiers;
    protected ILogger Logger { get; }
    protected IRelationalTypeMapper TypeMapper { get; }
    protected CandidateNamingService CandidateNamingService { get; }
    public RelationalScaffoldingModelFactory(ILoggerFactory loggerFactory, IRelationalTypeMapper typeMapper, IDatabaseModelFactory databaseModelFactory, CandidateNamingService candidateNamingService);
    [CompilerGeneratedAttribute]
protected virtual ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected virtual IRelationalTypeMapper get_TypeMapper();
    [CompilerGeneratedAttribute]
protected virtual CandidateNamingService get_CandidateNamingService();
    public virtual IModel Create(string connectionString, TableSelectionSet tableSelectionSet);
    public virtual void CheckSelectionsMatched(TableSelectionSet tableSelectionSet);
    protected virtual IModel CreateFromDatabaseModel(DatabaseModel databaseModel);
    protected virtual string GetEntityTypeName(TableModel table);
    protected virtual string GetPropertyName(ColumnModel column);
    protected virtual ModelBuilder VisitDatabaseModel(ModelBuilder modelBuilder, DatabaseModel databaseModel);
    protected virtual ModelBuilder VisitSequences(ModelBuilder modelBuilder, ICollection`1<SequenceModel> sequences);
    protected virtual RelationalSequenceBuilder VisitSequence(ModelBuilder modelBuilder, SequenceModel sequence);
    protected virtual ModelBuilder VisitTables(ModelBuilder modelBuilder, ICollection`1<TableModel> tables);
    protected virtual EntityTypeBuilder VisitTable(ModelBuilder modelBuilder, TableModel table);
    protected virtual EntityTypeBuilder VisitColumns(EntityTypeBuilder builder, ICollection`1<ColumnModel> columns);
    protected virtual PropertyBuilder VisitColumn(EntityTypeBuilder builder, ColumnModel column);
    protected virtual RelationalTypeMapping GetTypeMapping(ColumnModel column);
    protected virtual KeyBuilder VisitPrimaryKey(EntityTypeBuilder builder, TableModel table);
    protected virtual EntityTypeBuilder VisitIndexes(EntityTypeBuilder builder, ICollection`1<IndexModel> indexes);
    protected virtual IndexBuilder VisitIndex(EntityTypeBuilder builder, IndexModel index);
    protected virtual ModelBuilder VisitForeignKeys(ModelBuilder modelBuilder, IList`1<ForeignKeyModel> foreignKeys);
    protected virtual IMutableForeignKey VisitForeignKey(ModelBuilder modelBuilder, ForeignKeyModel foreignKey);
    protected virtual void AddNavigationProperties(IMutableForeignKey foreignKey);
    protected virtual List`1<string> ExistingIdentifiers(IEntityType entityType);
    private static void AssignOnDeleteAction(ForeignKeyModel fkModel, IMutableForeignKey foreignKey);
    private string NavigationUniquifier(string proposedIdentifier, ICollection`1<string> existingIdentifiers);
    [CompilerGeneratedAttribute]
private string <CreateFromDatabaseModel>b__19_0(TableModel t);
    [CompilerGeneratedAttribute]
private string <GetPropertyName>b__21_0(ColumnModel c);
    [CompilerGeneratedAttribute]
private bool <VisitPrimaryKey>b__30_3(ColumnModel c);
    [CompilerGeneratedAttribute]
private bool <VisitIndex>b__32_2(ColumnModel c);
    [CompilerGeneratedAttribute]
private bool <VisitForeignKey>b__34_3(ColumnModel c);
    [CompilerGeneratedAttribute]
private string <VisitForeignKey>b__34_6(ForeignKeyColumnModel fc);
    [CompilerGeneratedAttribute]
private string <VisitForeignKey>b__34_13(ForeignKeyColumnModel fc);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.ScaffoldingTypeMapper : object {
    [CompilerGeneratedAttribute]
private IRelationalTypeMapper <TypeMapper>k__BackingField;
    protected IRelationalTypeMapper TypeMapper { get; }
    public ScaffoldingTypeMapper(IRelationalTypeMapper typeMapper);
    [CompilerGeneratedAttribute]
protected virtual IRelationalTypeMapper get_TypeMapper();
    public virtual TypeScaffoldingInfo FindMapping(string storeType, bool keyOrIndex, bool rowVersion);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.TableSelectionSet : object {
    public static TableSelectionSet All;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Selection> <Schemas>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Selection> <Tables>k__BackingField;
    public IReadOnlyList`1<Selection> Schemas { get; }
    public IReadOnlyList`1<Selection> Tables { get; }
    public TableSelectionSet(IEnumerable`1<string> tables);
    public TableSelectionSet(IEnumerable`1<string> tables, IEnumerable`1<string> schemas);
    private static TableSelectionSet();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<Selection> get_Schemas();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<Selection> get_Tables();
}
public class Microsoft.EntityFrameworkCore.Scaffolding.TypeScaffoldingInfo : object {
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInferred>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ScaffoldUnicode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ScaffoldMaxLength>k__BackingField;
    public Type ClrType { get; }
    public bool IsInferred { get; }
    public Nullable`1<bool> ScaffoldUnicode { get; }
    public Nullable`1<int> ScaffoldMaxLength { get; }
    public TypeScaffoldingInfo(Type clrType, bool inferred, Nullable`1<bool> scaffoldUnicode, Nullable`1<int> scaffoldMaxLength);
    [CompilerGeneratedAttribute]
public virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
public virtual bool get_IsInferred();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_ScaffoldUnicode();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_ScaffoldMaxLength();
}
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.Check : object {
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName, string propertyName);
    [ContractAnnotationAttribute("value:null => halt")]
public static IReadOnlyList`1<T> NotEmpty(IReadOnlyList`1<T> value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static string NotEmpty(string value, string parameterName);
    public static string NullButNotEmpty(string value, string parameterName);
    public static IReadOnlyList`1<T> HasNoNulls(IReadOnlyList`1<T> value, string parameterName);
    public static Type ValidEntityType(Type value, string parameterName);
}
[ExtensionAttribute]
internal static class System.Reflection.MemberInfoExtensions : object {
    [ExtensionAttribute]
public static Type GetMemberType(MemberInfo memberInfo);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Reflection.PropertyInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsStatic(PropertyInfo property);
    [ExtensionAttribute]
public static bool IsCandidateProperty(PropertyInfo propertyInfo, bool needsWrite);
    [ExtensionAttribute]
public static Type FindCandidateNavigationPropertyType(PropertyInfo propertyInfo, Func`2<Type, bool> isPrimitiveProperty);
    [ExtensionAttribute]
public static PropertyInfo FindGetterProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static PropertyInfo FindSetterProperty(PropertyInfo propertyInfo);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.SharedTypeExtensions : object {
    private static Dictionary`2<Type, object> _commonTypeDictionary;
    private static SharedTypeExtensions();
    [ExtensionAttribute]
public static Type UnwrapNullableType(Type type);
    [ExtensionAttribute]
public static bool IsNullableType(Type type);
    [ExtensionAttribute]
public static Type MakeNullable(Type type);
    [ExtensionAttribute]
public static bool IsInteger(Type type);
    [ExtensionAttribute]
public static PropertyInfo GetAnyProperty(Type type, string name);
    [ExtensionAttribute]
private static bool IsNonIntegerPrimitive(Type type);
    [ExtensionAttribute]
public static bool IsPrimitive(Type type);
    [ExtensionAttribute]
public static bool IsInstantiable(Type type);
    private static bool IsInstantiable(TypeInfo type);
    [ExtensionAttribute]
public static bool IsGrouping(Type type);
    private static bool IsGrouping(TypeInfo type);
    [ExtensionAttribute]
public static Type UnwrapEnumType(Type type);
    [ExtensionAttribute]
public static Type GetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetElementType(Type type, Type interfaceOrBaseType);
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetGenericTypeImplementations(Type type, Type interfaceOrBaseType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetBaseTypes>d__16")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetBaseTypes(Type type);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetTypesInHierarchy>d__17")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetTypesInHierarchy(Type type);
    [ExtensionAttribute]
public static ConstructorInfo GetDeclaredConstructor(Type type, Type[] types);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetPropertiesInHierarchy>d__19")]
[ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetPropertiesInHierarchy(Type type, string name);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetMembersInHierarchy>d__20")]
[ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type, string name);
    [ExtensionAttribute]
public static object GetDefaultValue(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<TypeInfo> GetConstructableTypes(Assembly assembly);
    [ExtensionAttribute]
public static IEnumerable`1<TypeInfo> GetLoadableDefinedTypes(Assembly assembly);
}
[ExtensionAttribute]
internal static class System.Text.StringBuilderExtensions : object {
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<string> values, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, string separator, String[] values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, Action`2<StringBuilder, T> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam param, Action`3<StringBuilder, T, TParam> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam1 param1, TParam2 param2, Action`4<StringBuilder, T, TParam1, TParam2> joinAction, string separator);
}
