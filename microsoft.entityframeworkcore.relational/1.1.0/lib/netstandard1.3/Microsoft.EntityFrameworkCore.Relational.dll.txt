[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.CanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    public string Contract { get; private set; }
    public bool ForceFullStates { get; private set; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
private void set_Contract(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
    [CompilerGeneratedAttribute]
private void set_ForceFullStates(bool value);
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("4320")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    [NotNullAttribute]
public string FormatParameterName { get; private set; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
    [CompilerGeneratedAttribute]
private void set_FormatParameterName(string value);
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; private set; }
    public ImplicitUseTargetFlags TargetFlags { get; private set; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
private void set_UseKindFlags(ImplicitUseKindFlags value);
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
    [CompilerGeneratedAttribute]
private void set_TargetFlags(ImplicitUseTargetFlags value);
}
public class Microsoft.EntityFrameworkCore.Infrastructure.Internal.RelationalModelSource : ModelSource {
    public RelationalModelSource(IDbSetFinder setFinder, ICoreConventionSetBuilder coreConventionSetBuilder, IModelCustomizer modelCustomizer, IModelCacheKeyFactory modelCacheKeyFactory);
    protected virtual void FindSets(ModelBuilder modelBuilder, DbContext context);
}
public abstract class Microsoft.EntityFrameworkCore.Infrastructure.ModelSnapshot : object {
    private LazyRef`1<IModel> _model;
    public IModel Model { get; }
    public virtual IModel get_Model();
    protected abstract virtual void BuildModel(ModelBuilder modelBuilder);
    [CompilerGeneratedAttribute]
private IModel <.ctor>b__1_0();
}
public abstract class Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2 : object {
    [CompilerGeneratedAttribute]
private DbContextOptionsBuilder <OptionsBuilder>k__BackingField;
    protected DbContextOptionsBuilder OptionsBuilder { get; }
    protected RelationalDbContextOptionsBuilder`2(DbContextOptionsBuilder optionsBuilder);
    [CompilerGeneratedAttribute]
protected virtual DbContextOptionsBuilder get_OptionsBuilder();
    protected abstract virtual TExtension CloneExtension();
    public virtual TBuilder MaxBatchSize(int maxBatchSize);
    public virtual TBuilder CommandTimeout(Nullable`1<int> commandTimeout);
    public virtual TBuilder MigrationsAssembly(string assemblyName);
    public virtual TBuilder MigrationsHistoryTable(string tableName, string schema);
    public virtual TBuilder UseRelationalNulls();
    public virtual TBuilder ExecutionStrategy(Func`2<ExecutionStrategyContext, IExecutionStrategy> getExecutionStrategy);
    protected virtual TBuilder SetOption(Action`1<TExtension> setAction);
}
public enum Microsoft.EntityFrameworkCore.Infrastructure.RelationalEventId : Enum {
    public int value__;
    public static RelationalEventId ExecutedCommand;
    public static RelationalEventId CreatingDatabase;
    public static RelationalEventId OpeningConnection;
    public static RelationalEventId ClosingConnection;
    public static RelationalEventId BeginningTransaction;
    public static RelationalEventId CommittingTransaction;
    public static RelationalEventId RollingbackTransaction;
    public static RelationalEventId QueryClientEvaluationWarning;
    public static RelationalEventId PossibleUnintendedUseOfEqualsWarning;
    public static RelationalEventId AmbientTransactionWarning;
    public static RelationalEventId PossibleIncorrectResultsUsingLikeOperator;
    public static RelationalEventId ApplyingMigration;
    public static RelationalEventId GeneratingMigrationDownScript;
    public static RelationalEventId GeneratingMigrationUpScript;
    public static RelationalEventId MigrateUsingConnection;
    public static RelationalEventId RevertingMigration;
    public static RelationalEventId RevertingMigrationSql;
    public static RelationalEventId ApplyingMigrationSql;
}
public abstract class Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension : object {
    private string _connectionString;
    private DbConnection _connection;
    private Nullable`1<int> _commandTimeout;
    private Nullable`1<int> _maxBatchSize;
    private bool _useRelationalNulls;
    private string _migrationsAssembly;
    private string _migrationsHistoryTableName;
    private string _migrationsHistoryTableSchema;
    private Func`2<ExecutionStrategyContext, IExecutionStrategy> _executionStrategyFactory;
    public string ConnectionString { get; public set; }
    public DbConnection Connection { get; public set; }
    public Nullable`1<int> CommandTimeout { get; public set; }
    public Nullable`1<int> MaxBatchSize { get; public set; }
    public bool UseRelationalNulls { get; public set; }
    public string MigrationsAssembly { get; public set; }
    public string MigrationsHistoryTableName { get; public set; }
    public string MigrationsHistoryTableSchema { get; public set; }
    public Func`2<ExecutionStrategyContext, IExecutionStrategy> ExecutionStrategyFactory { get; public set; }
    protected RelationalOptionsExtension(RelationalOptionsExtension copyFrom);
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public virtual DbConnection get_Connection();
    public virtual void set_Connection(DbConnection value);
    public virtual Nullable`1<int> get_CommandTimeout();
    public virtual void set_CommandTimeout(Nullable`1<int> value);
    public virtual Nullable`1<int> get_MaxBatchSize();
    public virtual void set_MaxBatchSize(Nullable`1<int> value);
    public virtual bool get_UseRelationalNulls();
    public virtual void set_UseRelationalNulls(bool value);
    public virtual string get_MigrationsAssembly();
    public virtual void set_MigrationsAssembly(string value);
    public virtual string get_MigrationsHistoryTableName();
    public virtual void set_MigrationsHistoryTableName(string value);
    public virtual string get_MigrationsHistoryTableSchema();
    public virtual void set_MigrationsHistoryTableSchema(string value);
    public virtual Func`2<ExecutionStrategyContext, IExecutionStrategy> get_ExecutionStrategyFactory();
    public virtual void set_ExecutionStrategyFactory(Func`2<ExecutionStrategyContext, IExecutionStrategy> value);
    public static RelationalOptionsExtension Extract(IDbContextOptions options);
    public abstract virtual void ApplyServices(IServiceCollection services);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Infrastructure.RelationalServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddRelational(IServiceCollection services);
    [ExtensionAttribute]
private static IServiceCollection AddQuery(IServiceCollection serviceCollection);
    private static IRelationalDatabaseProviderServices GetProviderServices(IServiceProvider serviceProvider);
}
[ExtensionAttribute]
internal static class Microsoft.EntityFrameworkCore.Internal.RelationalDiagnostics : object {
    private static string NamePrefix;
    public static string BeforeExecuteCommand;
    public static string AfterExecuteCommand;
    public static string CommandExecutionError;
    [ExtensionAttribute]
public static void WriteCommandBefore(DiagnosticSource diagnosticSource, DbCommand command, string executeMethod, Guid instanceId, long startTimestamp, bool async);
    [ExtensionAttribute]
public static void WriteCommandAfter(DiagnosticSource diagnosticSource, DbCommand command, string executeMethod, Guid instanceId, long startTimestamp, long currentTimestamp, bool async);
    [ExtensionAttribute]
public static void WriteCommandError(DiagnosticSource diagnosticSource, DbCommand command, string executeMethod, Guid instanceId, long startTimestamp, long currentTimestamp, Exception exception, bool async);
}
internal class Microsoft.EntityFrameworkCore.Internal.RelationalDiagnosticSourceAfterMessage : object {
    [CompilerGeneratedAttribute]
private DbCommand <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecuteMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public DbCommand Command { get; public set; }
    public string ExecuteMethod { get; public set; }
    public bool IsAsync { get; public set; }
    public Guid InstanceId { get; public set; }
    public long Timestamp { get; public set; }
    public long Duration { get; public set; }
    public Exception Exception { get; public set; }
    [CompilerGeneratedAttribute]
public DbCommand get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(DbCommand value);
    [CompilerGeneratedAttribute]
public string get_ExecuteMethod();
    [CompilerGeneratedAttribute]
public void set_ExecuteMethod(string value);
    [CompilerGeneratedAttribute]
public bool get_IsAsync();
    [CompilerGeneratedAttribute]
public void set_IsAsync(bool value);
    [CompilerGeneratedAttribute]
public Guid get_InstanceId();
    [CompilerGeneratedAttribute]
public void set_InstanceId(Guid value);
    [CompilerGeneratedAttribute]
public long get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(long value);
    [CompilerGeneratedAttribute]
public long get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(long value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
}
internal class Microsoft.EntityFrameworkCore.Internal.RelationalDiagnosticSourceBeforeMessage : object {
    [CompilerGeneratedAttribute]
private DbCommand <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecuteMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Timestamp>k__BackingField;
    public DbCommand Command { get; public set; }
    public string ExecuteMethod { get; public set; }
    public bool IsAsync { get; public set; }
    public Guid InstanceId { get; public set; }
    public long Timestamp { get; public set; }
    [CompilerGeneratedAttribute]
public DbCommand get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(DbCommand value);
    [CompilerGeneratedAttribute]
public string get_ExecuteMethod();
    [CompilerGeneratedAttribute]
public void set_ExecuteMethod(string value);
    [CompilerGeneratedAttribute]
public bool get_IsAsync();
    [CompilerGeneratedAttribute]
public void set_IsAsync(bool value);
    [CompilerGeneratedAttribute]
public Guid get_InstanceId();
    [CompilerGeneratedAttribute]
public void set_InstanceId(Guid value);
    [CompilerGeneratedAttribute]
public long get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(long value);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions : object {
    [ExtensionAttribute]
public static ColumnExpression TryGetColumnExpression(Expression expression);
    [ExtensionAttribute]
public static bool IsAliasWithColumnExpression(Expression expression);
    [ExtensionAttribute]
public static bool IsAliasWithSelectExpression(Expression expression);
    [ExtensionAttribute]
public static bool HasColumnExpression(AliasExpression aliasExpression);
    [ExtensionAttribute]
public static ColumnExpression TryGetColumnExpression(AliasExpression aliasExpression);
    [ExtensionAttribute]
public static bool IsSimpleExpression(Expression expression);
}
public class Microsoft.EntityFrameworkCore.Internal.RelationalModelValidator : LoggingModelValidator {
    [CompilerGeneratedAttribute]
private IRelationalAnnotationProvider <RelationalExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalTypeMapper <TypeMapper>k__BackingField;
    protected IRelationalAnnotationProvider RelationalExtensions { get; }
    protected IRelationalTypeMapper TypeMapper { get; }
    public RelationalModelValidator(ILogger`1<RelationalModelValidator> loggerFactory, IRelationalAnnotationProvider relationalExtensions, IRelationalTypeMapper typeMapper);
    [CompilerGeneratedAttribute]
protected virtual IRelationalAnnotationProvider get_RelationalExtensions();
    [CompilerGeneratedAttribute]
protected virtual IRelationalTypeMapper get_TypeMapper();
    public virtual void Validate(IModel model);
    protected virtual void EnsureDataTypes(IModel model);
    protected virtual void EnsureNoDefaultValuesOnKeys(IModel model);
    protected virtual void EnsureDistinctTableNames(IModel model);
    protected virtual void EnsureSharedColumnsCompatibility(IModel model);
    protected virtual void EnsureSharedForeignKeysCompatibility(IModel model);
    protected virtual void EnsureSharedIndexesCompatibility(IModel model);
    private static string Format(IEnumerable`1<string> columnNames);
    private static string Format(string schema, string name);
    protected virtual void ValidateInheritanceMapping(IModel model);
    private void ValidateDiscriminator(IEntityType entityType);
    private void ValidateDiscriminatorValues(IEntityType rootEntityType);
    [CompilerGeneratedAttribute]
private bool <EnsureNoDefaultValuesOnKeys>b__9_2(IProperty p);
    [CompilerGeneratedAttribute]
private string <EnsureSharedForeignKeysCompatibility>b__12_1(IProperty p);
    [CompilerGeneratedAttribute]
private string <EnsureSharedForeignKeysCompatibility>b__12_2(IProperty p);
    [CompilerGeneratedAttribute]
private string <EnsureSharedForeignKeysCompatibility>b__12_3(IProperty p);
    [CompilerGeneratedAttribute]
private string <EnsureSharedForeignKeysCompatibility>b__12_4(IProperty p);
    [CompilerGeneratedAttribute]
private string <EnsureSharedIndexesCompatibility>b__13_1(IProperty p);
    [CompilerGeneratedAttribute]
private string <EnsureSharedIndexesCompatibility>b__13_2(IProperty p);
}
public static class Microsoft.EntityFrameworkCore.Internal.RelationalStrings : object {
    private static ResourceManager _resourceManager;
    public static string MultipleProvidersConfigured { get; }
    public static string NoProviderConfigured { get; }
    public static string ConnectionAndConnectionString { get; }
    public static string NoConnectionOrConnectionString { get; }
    public static string RelationalNotInUse { get; }
    public static string UpdateStoreException { get; }
    public static string TransactionAlreadyStarted { get; }
    public static string TransactionAssociatedWithDifferentConnection { get; }
    public static string RelationalLoggerCommittingTransaction { get; }
    public static string RelationalLoggerRollingbackTransaction { get; }
    public static string BadSequenceType { get; }
    public static string BadSequenceString { get; }
    public static string InvalidCommandTimeout { get; }
    public static string InvalidMaxBatchSize { get; }
    public static string AmbientTransaction { get; }
    public static string StoredProcedureIncludeNotSupported { get; }
    public static string NoActiveTransaction { get; }
    public static string ConflictingRowUpdates { get; }
    private static RelationalStrings();
    public static string ModificationFunctionInvalidEntityState(object entityState);
    public static string UpdateConcurrencyException(object expectedRows, object actualRows);
    public static string get_MultipleProvidersConfigured();
    public static string get_NoProviderConfigured();
    public static string get_ConnectionAndConnectionString();
    public static string get_NoConnectionOrConnectionString();
    public static string UnsupportedType(object clrType);
    public static string get_RelationalNotInUse();
    public static string get_UpdateStoreException();
    public static string get_TransactionAlreadyStarted();
    public static string get_TransactionAssociatedWithDifferentConnection();
    public static string RelationalLoggerOpeningConnection(object database, object server);
    public static string RelationalLoggerClosingConnection(object database, object server);
    public static string RelationalLoggerBeginningTransaction(object isolationLevel);
    public static string get_RelationalLoggerCommittingTransaction();
    public static string get_RelationalLoggerRollingbackTransaction();
    public static string get_BadSequenceType();
    public static string get_BadSequenceString();
    public static string MigrationNotFound(object migrationName);
    public static string UnknownOperation(object sqlGeneratorType, object operationType);
    public static string get_InvalidCommandTimeout();
    public static string get_InvalidMaxBatchSize();
    public static string UnableToDiscriminate(object entityType);
    public static string DiscriminatorPropertyMustBeOnRoot(object entityType);
    public static string DiscriminatorPropertyNotFound(object property, object entityType);
    public static string get_AmbientTransaction();
    public static string PossibleUnintendedUseOfEquals(object left, object right);
    public static string PossibleIncorrectResultsUsingLikeOperator(object function);
    public static string get_StoredProcedureIncludeNotSupported();
    public static string GeneratingDown(object migration);
    public static string GeneratingUp(object migration);
    public static string ApplyingMigration(object migration);
    public static string RevertingMigration(object migration);
    public static string UsingConnection(object database, object dataSource);
    public static string FromSqlMissingColumn(object column);
    public static string DuplicateTableName(object table, object schema, object entityType);
    public static string KeyHasDefaultValue(object property, object entityType);
    public static string DiscriminatorEntityTypeNotDerived(object entityType, object rootEntityType);
    public static string DiscriminatorValueIncompatible(object value, object discriminator, object discriminatorType);
    public static string NoDiscriminatorForValue(object entityType, object rootEntityType);
    public static string NoDiscriminatorProperty(object entityType);
    public static string NoDiscriminatorValue(object entityType);
    public static string ClientEvalWarning(object expression);
    public static string MissingParameterValue(object parameter);
    public static string ParameterNotObjectArray(object parameter);
    public static string RelationalLoggerExecutedCommand(object elapsed, object parameters, object commandType, object commandTimeout, object newLine, object commandText);
    public static string DuplicateColumnNameDataTypeMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table, object dataType1, object dataType2);
    public static string get_NoActiveTransaction();
    public static string get_ConflictingRowUpdates();
    public static string IncorrectDefaultValueType(object value, object valueType, object property, object propertyType, object entityType);
    public static string DuplicateDiscriminatorValue(object entityType1, object discriminatorValue, object entityType2);
    public static string DuplicateColumnNameNullabilityMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table);
    public static string DuplicateColumnNameComputedSqlMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table, object value1, object value2);
    public static string DuplicateColumnNameDefaultSqlMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table, object value1, object value2);
    public static string ConflictingColumnServerGeneration(object conflictingConfiguration, object property, object existingConfiguration);
    public static string DuplicateForeignKeyColumnMismatch(object index1, object entityType1, object index2, object entityType2, object table, object foreignKeyName, object columnNames1, object columnNames2);
    public static string DuplicateForeignKeyDeleteBehaviorMismatch(object index1, object entityType1, object index2, object entityType2, object table, object foreignKeyName, object deleteBehavior1, object deleteBehavior2);
    public static string DuplicateForeignKeyPrincipalColumnMismatch(object index1, object entityType1, object index2, object entityType2, object table, object foreignKeyName, object principalColumnNames1, object principalColumnNames2);
    public static string DuplicateForeignKeyPrincipalTableMismatch(object index1, object entityType1, object index2, object entityType2, object table, object foreignKeyName, object principalTable1, object principalTable2);
    public static string DuplicateForeignKeyUniquenessMismatch(object index1, object entityType1, object index2, object entityType2, object table, object foreignKeyName);
    public static string DuplicateIndexColumnMismatch(object index1, object entityType1, object index2, object entityType2, object table, object indexName, object columnNames1, object columnNames2);
    public static string DuplicateIndexUniquenessMismatch(object index1, object entityType1, object index2, object entityType2, object table, object indexName);
    public static string UnsupportedPropertyType(object entity, object property, object clrType);
    private static string GetString(string name, String[] formatterNames);
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder : object {
    [CompilerGeneratedAttribute]
private Func`2<InternalEntityTypeBuilder, RelationalEntityTypeBuilderAnnotations> <GetRelationalEntityTypeBuilderAnnotations>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalAnnotationsBuilder <AnnotationsBuilder>k__BackingField;
    private Func`2<InternalEntityTypeBuilder, RelationalEntityTypeBuilderAnnotations> GetRelationalEntityTypeBuilderAnnotations { get; }
    protected RelationalAnnotationsBuilder AnnotationsBuilder { get; }
    protected InternalEntityTypeBuilder EntityTypeBuilder { get; }
    public DiscriminatorBuilder(RelationalAnnotationsBuilder annotationsBuilder, Func`2<InternalEntityTypeBuilder, RelationalEntityTypeBuilderAnnotations> getRelationalEntityTypeBuilderAnnotations);
    [CompilerGeneratedAttribute]
private Func`2<InternalEntityTypeBuilder, RelationalEntityTypeBuilderAnnotations> get_GetRelationalEntityTypeBuilderAnnotations();
    [CompilerGeneratedAttribute]
protected virtual RelationalAnnotationsBuilder get_AnnotationsBuilder();
    protected virtual InternalEntityTypeBuilder get_EntityTypeBuilder();
    public virtual DiscriminatorBuilder HasValue(object value);
    public virtual DiscriminatorBuilder HasValue(object value);
    public virtual DiscriminatorBuilder HasValue(Type entityType, object value);
    public virtual DiscriminatorBuilder HasValue(string entityTypeName, object value);
    private DiscriminatorBuilder HasValue(InternalEntityTypeBuilder entityTypeBuilder, object value);
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder`1 : object {
    [CompilerGeneratedAttribute]
private DiscriminatorBuilder <Builder>k__BackingField;
    private DiscriminatorBuilder Builder { get; }
    public DiscriminatorBuilder`1(DiscriminatorBuilder builder);
    [CompilerGeneratedAttribute]
private DiscriminatorBuilder get_Builder();
    public virtual DiscriminatorBuilder`1<TDiscriminator> HasValue(TDiscriminator value);
    public virtual DiscriminatorBuilder`1<TDiscriminator> HasValue(TDiscriminator value);
    public virtual DiscriminatorBuilder`1<TDiscriminator> HasValue(Type entityType, TDiscriminator value);
    public virtual DiscriminatorBuilder`1<TDiscriminator> HasValue(string entityTypeName, TDiscriminator value);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.DiscriminatorConvention : object {
    public virtual bool Apply(InternalEntityTypeBuilder entityTypeBuilder, EntityType oldBaseType);
    private void SetDefaultDiscriminatorValues(IReadOnlyList`1<EntityType> entityTypes, DiscriminatorBuilder discriminator);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RelationalColumnAttributeConvention : PropertyAttributeConvention`1<ColumnAttribute> {
    public virtual InternalPropertyBuilder Apply(InternalPropertyBuilder propertyBuilder, ColumnAttribute attribute, MemberInfo clrMember);
}
public abstract class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RelationalConventionSetBuilder : object {
    private IRelationalTypeMapper _typeMapper;
    private DbContext _context;
    private IDbSetFinder _setFinder;
    protected RelationalConventionSetBuilder(IRelationalTypeMapper typeMapper, ICurrentDbContext currentContext, IDbSetFinder setFinder);
    public virtual ConventionSet AddConventions(ConventionSet conventionSet);
    protected virtual void ReplaceConvention(IList`1<T1> conventionsList, T2 newConvention);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RelationalForeignKeyAttributeConvention : ForeignKeyAttributeConvention {
    private IRelationalTypeMapper _typeMapper;
    public RelationalForeignKeyAttributeConvention(IRelationalTypeMapper typeMapper);
    public virtual Type FindCandidateNavigationPropertyType(PropertyInfo propertyInfo);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RelationalInversePropertyAttributeConvention : InversePropertyAttributeConvention {
    private IRelationalTypeMapper _typeMapper;
    public RelationalInversePropertyAttributeConvention(IRelationalTypeMapper typeMapper);
    public virtual Type FindCandidateNavigationPropertyType(PropertyInfo propertyInfo);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RelationalPropertyDiscoveryConvention : PropertyDiscoveryConvention {
    private IRelationalTypeMapper _typeMapper;
    public RelationalPropertyDiscoveryConvention(IRelationalTypeMapper typeMapper);
    protected virtual bool IsCandidatePrimitiveProperty(PropertyInfo propertyInfo);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RelationalPropertyMappingValidationConvention : PropertyMappingValidationConvention {
    private IRelationalTypeMapper _typeMapper;
    public RelationalPropertyMappingValidationConvention(IRelationalTypeMapper typeMapper);
    public virtual bool IsMappedPrimitiveProperty(Type clrType);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RelationalRelationshipDiscoveryConvention : RelationshipDiscoveryConvention {
    private IRelationalTypeMapper _typeMapper;
    public RelationalRelationshipDiscoveryConvention(IRelationalTypeMapper typeMapper);
    public virtual Type FindCandidateNavigationPropertyType(PropertyInfo propertyInfo);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RelationalTableAttributeConvention : EntityTypeAttributeConvention`1<TableAttribute> {
    public virtual InternalEntityTypeBuilder Apply(InternalEntityTypeBuilder entityTypeBuilder, TableAttribute attribute);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.TableNameFromDbSetConvention : object {
    private IDictionary`2<Type, DbSetProperty> _sets;
    public TableNameFromDbSetConvention(DbContext context, IDbSetFinder setFinder);
    public virtual bool Apply(InternalEntityTypeBuilder entityTypeBuilder, EntityType oldBaseType);
}
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalAnnotationNames : object {
    public static string Prefix;
    public static string ColumnName;
    public static string ColumnType;
    public static string DefaultValueSql;
    public static string ComputedColumnSql;
    public static string DefaultValue;
    public static string DatabaseName;
    public static string TableName;
    public static string Schema;
    public static string DefaultSchema;
    public static string Name;
    public static string SequencePrefix;
    public static string DiscriminatorProperty;
    public static string DiscriminatorValue;
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalAnnotationsBuilder : RelationalAnnotations {
    [CompilerGeneratedAttribute]
private ConfigurationSource <ConfigurationSource>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalMetadataBuilder <MetadataBuilder>k__BackingField;
    public ConfigurationSource ConfigurationSource { get; }
    public InternalMetadataBuilder MetadataBuilder { get; }
    public RelationalAnnotationsBuilder(InternalMetadataBuilder internalBuilder, ConfigurationSource configurationSource);
    [CompilerGeneratedAttribute]
public virtual ConfigurationSource get_ConfigurationSource();
    [CompilerGeneratedAttribute]
public virtual InternalMetadataBuilder get_MetadataBuilder();
    public virtual bool SetAnnotation(string relationalAnnotationName, string providerAnnotationName, object value);
    public virtual bool CanSetAnnotation(string relationalAnnotationName, string providerAnnotationName, object value);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalEntityTypeBuilderAnnotations : RelationalEntityTypeAnnotations {
    protected string DefaultDiscriminatorName;
    protected RelationalAnnotationsBuilder Annotations { get; }
    protected InternalEntityTypeBuilder EntityTypeBuilder { get; }
    public RelationalEntityTypeBuilderAnnotations(InternalEntityTypeBuilder internalBuilder, ConfigurationSource configurationSource, RelationalFullAnnotationNames providerFullAnnotationNames);
    protected virtual RelationalAnnotationsBuilder get_Annotations();
    protected virtual InternalEntityTypeBuilder get_EntityTypeBuilder();
    protected virtual RelationalModelAnnotations GetAnnotations(IModel model);
    protected virtual RelationalEntityTypeAnnotations GetAnnotations(IEntityType entityType);
    public virtual bool ToTable(string name);
    public virtual bool ToSchema(string name);
    public virtual bool ToTable(string name, string schema);
    public virtual DiscriminatorBuilder HasDiscriminator();
    public virtual DiscriminatorBuilder HasDiscriminator(Type discriminatorType);
    public virtual DiscriminatorBuilder HasDiscriminator(string name, Type discriminatorType);
    public virtual DiscriminatorBuilder HasDiscriminator(PropertyInfo propertyInfo);
    private DiscriminatorBuilder RemoveDiscriminator();
    private DiscriminatorBuilder DiscriminatorBuilder(Func`2<InternalEntityTypeBuilder, InternalPropertyBuilder> createProperty, Type propertyType);
    public virtual bool HasDiscriminatorValue(object value);
    [CompilerGeneratedAttribute]
private RelationalEntityTypeBuilderAnnotations <RemoveDiscriminator>b__15_0(InternalEntityTypeBuilder entityBuilder);
    [CompilerGeneratedAttribute]
private ValueGenerator <DiscriminatorBuilder>b__16_0(IProperty property, IEntityType entityType);
    [CompilerGeneratedAttribute]
private RelationalEntityTypeBuilderAnnotations <DiscriminatorBuilder>b__16_1(InternalEntityTypeBuilder entityBuilder);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyBuilderAnnotations : RelationalForeignKeyAnnotations {
    public RelationalForeignKeyBuilderAnnotations(InternalRelationshipBuilder internalBuilder, ConfigurationSource configurationSource, RelationalFullAnnotationNames providerFullAnnotationNames);
    public virtual bool HasConstraintName(string value);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalFullAnnotationNames : object {
    [CompilerGeneratedAttribute]
private static RelationalFullAnnotationNames <Instance>k__BackingField;
    public string ColumnName;
    public string ColumnType;
    public string DefaultValueSql;
    public string ComputedColumnSql;
    public string DefaultValue;
    public string DatabaseName;
    public string TableName;
    public string Schema;
    public string DefaultSchema;
    public string Name;
    public string SequencePrefix;
    public string DiscriminatorProperty;
    public string DiscriminatorValue;
    public static RelationalFullAnnotationNames Instance { get; }
    protected RelationalFullAnnotationNames(string prefix);
    private static RelationalFullAnnotationNames();
    [CompilerGeneratedAttribute]
public static RelationalFullAnnotationNames get_Instance();
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalIndexBuilderAnnotations : RelationalIndexAnnotations {
    public RelationalIndexBuilderAnnotations(InternalIndexBuilder internalBuilder, ConfigurationSource configurationSource, RelationalFullAnnotationNames providerFullAnnotationNames);
    public virtual bool HasName(string value);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalInternalMetadataBuilderExtensions : object {
    [ExtensionAttribute]
public static RelationalModelBuilderAnnotations Relational(InternalModelBuilder builder, ConfigurationSource configurationSource);
    [ExtensionAttribute]
public static RelationalPropertyBuilderAnnotations Relational(InternalPropertyBuilder builder, ConfigurationSource configurationSource);
    [ExtensionAttribute]
public static RelationalEntityTypeBuilderAnnotations Relational(InternalEntityTypeBuilder builder, ConfigurationSource configurationSource);
    [ExtensionAttribute]
public static RelationalKeyBuilderAnnotations Relational(InternalKeyBuilder builder, ConfigurationSource configurationSource);
    [ExtensionAttribute]
public static RelationalIndexBuilderAnnotations Relational(InternalIndexBuilder builder, ConfigurationSource configurationSource);
    [ExtensionAttribute]
public static RelationalForeignKeyBuilderAnnotations Relational(InternalRelationshipBuilder builder, ConfigurationSource configurationSource);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalKeyBuilderAnnotations : RelationalKeyAnnotations {
    public RelationalKeyBuilderAnnotations(InternalKeyBuilder internalBuilder, ConfigurationSource configurationSource, RelationalFullAnnotationNames providerFullAnnotationNames);
    public virtual bool HasName(string value);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModelBuilderAnnotations : RelationalModelAnnotations {
    public RelationalModelBuilderAnnotations(InternalModelBuilder internalBuilder, ConfigurationSource configurationSource, RelationalFullAnnotationNames providerFullAnnotationNames);
    public virtual bool HasDatabaseName(string value);
    public virtual bool HasDefaultSchema(string value);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyBuilderAnnotations : RelationalPropertyAnnotations {
    protected RelationalAnnotationsBuilder Annotations { get; }
    private InternalPropertyBuilder PropertyBuilder { get; }
    protected bool ShouldThrowOnConflict { get; }
    public RelationalPropertyBuilderAnnotations(InternalPropertyBuilder internalBuilder, ConfigurationSource configurationSource, RelationalFullAnnotationNames providerFullAnnotationNames);
    protected virtual RelationalAnnotationsBuilder get_Annotations();
    private InternalPropertyBuilder get_PropertyBuilder();
    protected virtual bool get_ShouldThrowOnConflict();
    public virtual bool HasColumnName(string value);
    public virtual bool HasColumnType(string value);
    public virtual bool HasDefaultValueSql(string value);
    public virtual bool HasComputedColumnSql(string value);
    public virtual bool HasDefaultValue(object value);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider {
    public abstract virtual IRelationalEntityTypeAnnotations For(IEntityType entityType);
    public abstract virtual IRelationalForeignKeyAnnotations For(IForeignKey foreignKey);
    public abstract virtual IRelationalIndexAnnotations For(IIndex index);
    public abstract virtual IRelationalKeyAnnotations For(IKey key);
    public abstract virtual IRelationalModelAnnotations For(IModel model);
    public abstract virtual IRelationalPropertyAnnotations For(IProperty property);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IRelationalEntityTypeAnnotations {
    public string TableName { get; }
    public string Schema { get; }
    public IProperty DiscriminatorProperty { get; }
    public object DiscriminatorValue { get; }
    public abstract virtual string get_TableName();
    public abstract virtual string get_Schema();
    public abstract virtual IProperty get_DiscriminatorProperty();
    public abstract virtual object get_DiscriminatorValue();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IRelationalForeignKeyAnnotations {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IRelationalIndexAnnotations {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IRelationalKeyAnnotations {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IRelationalModelAnnotations {
    public IReadOnlyList`1<ISequence> Sequences { get; }
    public string DefaultSchema { get; }
    public string DatabaseName { get; }
    public abstract virtual ISequence FindSequence(string name, string schema);
    public abstract virtual IReadOnlyList`1<ISequence> get_Sequences();
    public abstract virtual string get_DefaultSchema();
    public abstract virtual string get_DatabaseName();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyAnnotations {
    public string ColumnName { get; }
    public string ColumnType { get; }
    public string DefaultValueSql { get; }
    public string ComputedColumnSql { get; }
    public object DefaultValue { get; }
    public abstract virtual string get_ColumnName();
    public abstract virtual string get_ColumnType();
    public abstract virtual string get_DefaultValueSql();
    public abstract virtual string get_ComputedColumnSql();
    public abstract virtual object get_DefaultValue();
}
public interface Microsoft.EntityFrameworkCore.Metadata.ISequence {
    public string Name { get; }
    public string Schema { get; }
    public long StartValue { get; }
    public int IncrementBy { get; }
    public Nullable`1<long> MinValue { get; }
    public Nullable`1<long> MaxValue { get; }
    public Type ClrType { get; }
    public IModel Model { get; }
    public bool IsCyclic { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Schema();
    public abstract virtual long get_StartValue();
    public abstract virtual int get_IncrementBy();
    public abstract virtual Nullable`1<long> get_MinValue();
    public abstract virtual Nullable`1<long> get_MaxValue();
    public abstract virtual Type get_ClrType();
    public abstract virtual IModel get_Model();
    public abstract virtual bool get_IsCyclic();
}
public class Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotations : object {
    [CompilerGeneratedAttribute]
private IAnnotatable <Metadata>k__BackingField;
    public IAnnotatable Metadata { get; }
    public RelationalAnnotations(IAnnotatable metadata);
    [CompilerGeneratedAttribute]
public virtual IAnnotatable get_Metadata();
    public virtual object GetAnnotation(string fallbackAnnotationName, string primaryAnnotationName);
    public virtual bool SetAnnotation(string relationalAnnotationName, string providerAnnotationName, object value);
    public virtual bool CanSetAnnotation(string relationalAnnotationName, string providerAnnotationName, object value);
}
public class Microsoft.EntityFrameworkCore.Metadata.RelationalEntityTypeAnnotations : object {
    protected RelationalFullAnnotationNames ProviderFullAnnotationNames;
    [CompilerGeneratedAttribute]
private RelationalAnnotations <Annotations>k__BackingField;
    protected RelationalAnnotations Annotations { get; }
    protected IEntityType EntityType { get; }
    public string TableName { get; public set; }
    public string Schema { get; public set; }
    public IProperty DiscriminatorProperty { get; public set; }
    public object DiscriminatorValue { get; public set; }
    public RelationalEntityTypeAnnotations(IEntityType entityType, RelationalFullAnnotationNames providerFullAnnotationNames);
    protected RelationalEntityTypeAnnotations(RelationalAnnotations annotations, RelationalFullAnnotationNames providerFullAnnotationNames);
    [CompilerGeneratedAttribute]
protected virtual RelationalAnnotations get_Annotations();
    protected virtual IEntityType get_EntityType();
    protected virtual RelationalModelAnnotations GetAnnotations(IModel model);
    protected virtual RelationalEntityTypeAnnotations GetAnnotations(IEntityType entityType);
    public virtual string get_TableName();
    public virtual void set_TableName(string value);
    protected virtual bool SetTableName(string value);
    public virtual string get_Schema();
    public virtual void set_Schema(string value);
    protected virtual bool SetSchema(string value);
    public virtual IProperty get_DiscriminatorProperty();
    public virtual void set_DiscriminatorProperty(IProperty value);
    protected virtual IProperty GetNonRootDiscriminatorProperty();
    protected virtual bool SetDiscriminatorProperty(IProperty value);
    protected virtual bool SetDiscriminatorProperty(IProperty value, Type oldDiscriminatorType);
    protected virtual Nullable`1<ConfigurationSource> GetDiscriminatorPropertyConfigurationSource();
    public virtual object get_DiscriminatorValue();
    public virtual void set_DiscriminatorValue(object value);
    protected virtual bool SetDiscriminatorValue(object value);
    protected virtual Nullable`1<ConfigurationSource> GetDiscriminatorValueConfigurationSource();
}
public class Microsoft.EntityFrameworkCore.Metadata.RelationalForeignKeyAnnotations : object {
    protected static string DefaultForeignKeyNamePrefix;
    protected RelationalFullAnnotationNames ProviderFullAnnotationNames;
    [CompilerGeneratedAttribute]
private RelationalAnnotations <Annotations>k__BackingField;
    protected RelationalAnnotations Annotations { get; }
    protected IForeignKey ForeignKey { get; }
    public string Name { get; public set; }
    public RelationalForeignKeyAnnotations(IForeignKey foreignKey, RelationalFullAnnotationNames providerFullAnnotationNames);
    protected RelationalForeignKeyAnnotations(RelationalAnnotations annotations, RelationalFullAnnotationNames providerFullAnnotationNames);
    [CompilerGeneratedAttribute]
protected virtual RelationalAnnotations get_Annotations();
    protected virtual IForeignKey get_ForeignKey();
    protected virtual IRelationalEntityTypeAnnotations GetAnnotations(IEntityType entityType);
    protected virtual IRelationalPropertyAnnotations GetAnnotations(IProperty property);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    protected virtual bool SetName(string value);
    protected virtual string GetDefaultName();
    public static string GetDefaultForeignKeyName(string dependentTableName, string principalTableName, IEnumerable`1<string> dependentEndPropertyNames);
    [CompilerGeneratedAttribute]
private string <GetDefaultName>b__15_0(IProperty p);
}
public class Microsoft.EntityFrameworkCore.Metadata.RelationalIndexAnnotations : object {
    protected static string DefaultIndexNamePrefix;
    protected RelationalFullAnnotationNames ProviderFullAnnotationNames;
    [CompilerGeneratedAttribute]
private RelationalAnnotations <Annotations>k__BackingField;
    protected RelationalAnnotations Annotations { get; }
    protected IIndex Index { get; }
    public string Name { get; public set; }
    public RelationalIndexAnnotations(IIndex index, RelationalFullAnnotationNames providerFullAnnotationNames);
    protected RelationalIndexAnnotations(RelationalAnnotations annotations, RelationalFullAnnotationNames providerFullAnnotationNames);
    [CompilerGeneratedAttribute]
protected virtual RelationalAnnotations get_Annotations();
    protected virtual IIndex get_Index();
    protected virtual IRelationalEntityTypeAnnotations GetAnnotations(IEntityType entityType);
    protected virtual IRelationalPropertyAnnotations GetAnnotations(IProperty property);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    protected virtual bool SetName(string value);
    protected virtual string GetDefaultName();
    public static string GetDefaultIndexName(string tableName, IEnumerable`1<string> propertyNames);
    [CompilerGeneratedAttribute]
private string <GetDefaultName>b__15_0(IProperty p);
}
public class Microsoft.EntityFrameworkCore.Metadata.RelationalKeyAnnotations : object {
    protected static string DefaultPrimaryKeyNamePrefix;
    protected static string DefaultAlternateKeyNamePrefix;
    protected RelationalFullAnnotationNames ProviderFullAnnotationNames;
    [CompilerGeneratedAttribute]
private RelationalAnnotations <Annotations>k__BackingField;
    protected RelationalAnnotations Annotations { get; }
    protected IKey Key { get; }
    public string Name { get; public set; }
    public RelationalKeyAnnotations(IKey key, RelationalFullAnnotationNames providerFullAnnotationNames);
    protected RelationalKeyAnnotations(RelationalAnnotations annotations, RelationalFullAnnotationNames providerFullAnnotationNames);
    [CompilerGeneratedAttribute]
protected virtual RelationalAnnotations get_Annotations();
    protected virtual IKey get_Key();
    protected virtual IRelationalEntityTypeAnnotations GetAnnotations(IEntityType entityType);
    protected virtual IRelationalPropertyAnnotations GetAnnotations(IProperty property);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    protected virtual bool SetName(string value);
    protected virtual string GetDefaultName();
    public static string GetDefaultKeyName(string tableName, bool primaryKey, IEnumerable`1<string> propertyNames);
    [CompilerGeneratedAttribute]
private string <GetDefaultName>b__16_0(IProperty p);
}
public class Microsoft.EntityFrameworkCore.Metadata.RelationalModelAnnotations : object {
    protected RelationalFullAnnotationNames ProviderFullAnnotationNames;
    [CompilerGeneratedAttribute]
private RelationalAnnotations <Annotations>k__BackingField;
    protected RelationalAnnotations Annotations { get; }
    protected IModel Model { get; }
    public IReadOnlyList`1<ISequence> Sequences { get; }
    public string DefaultSchema { get; public set; }
    public string DatabaseName { get; public set; }
    public RelationalModelAnnotations(IModel model, RelationalFullAnnotationNames providerFullAnnotationNames);
    protected RelationalModelAnnotations(RelationalAnnotations annotations, RelationalFullAnnotationNames providerFullAnnotationNames);
    [CompilerGeneratedAttribute]
protected virtual RelationalAnnotations get_Annotations();
    protected virtual IModel get_Model();
    public virtual IReadOnlyList`1<ISequence> get_Sequences();
    public virtual ISequence FindSequence(string name, string schema);
    public virtual Sequence GetOrAddSequence(string name, string schema);
    public virtual string get_DefaultSchema();
    public virtual void set_DefaultSchema(string value);
    protected virtual bool SetDefaultSchema(string value);
    public virtual string get_DatabaseName();
    public virtual void set_DatabaseName(string value);
    protected virtual bool SetDatabaseName(string value);
}
public class Microsoft.EntityFrameworkCore.Metadata.RelationalPropertyAnnotations : object {
    protected RelationalFullAnnotationNames ProviderFullAnnotationNames;
    [CompilerGeneratedAttribute]
private RelationalAnnotations <Annotations>k__BackingField;
    protected RelationalAnnotations Annotations { get; }
    protected IProperty Property { get; }
    protected bool ShouldThrowOnConflict { get; }
    public string ColumnName { get; public set; }
    public string ColumnType { get; public set; }
    public string DefaultValueSql { get; public set; }
    public string ComputedColumnSql { get; public set; }
    public object DefaultValue { get; public set; }
    public RelationalPropertyAnnotations(IProperty property, RelationalFullAnnotationNames providerFullAnnotationNames);
    protected RelationalPropertyAnnotations(RelationalAnnotations annotations, RelationalFullAnnotationNames providerFullAnnotationNames);
    [CompilerGeneratedAttribute]
protected virtual RelationalAnnotations get_Annotations();
    protected virtual IProperty get_Property();
    protected virtual bool get_ShouldThrowOnConflict();
    public virtual string get_ColumnName();
    public virtual void set_ColumnName(string value);
    protected virtual bool SetColumnName(string value);
    public virtual string get_ColumnType();
    public virtual void set_ColumnType(string value);
    protected virtual bool SetColumnType(string value);
    public virtual string get_DefaultValueSql();
    public virtual void set_DefaultValueSql(string value);
    protected virtual string GetDefaultValueSql(bool fallback);
    protected virtual bool SetDefaultValueSql(string value);
    protected virtual bool CanSetDefaultValueSql(string value);
    public virtual string get_ComputedColumnSql();
    public virtual void set_ComputedColumnSql(string value);
    protected virtual string GetComputedColumnSql(bool fallback);
    protected virtual bool SetComputedColumnSql(string value);
    protected virtual bool CanSetComputedColumnSql(string value);
    public virtual object get_DefaultValue();
    public virtual void set_DefaultValue(object value);
    protected virtual object GetDefaultValue(bool fallback);
    protected virtual bool SetDefaultValue(object value);
    protected virtual bool CanSetDefaultValue(object value);
    protected virtual void ClearAllServerGeneratedValues();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.RelationalPropertyExtensions : object {
    [ExtensionAttribute]
public static bool IsColumnNullable(IProperty property);
}
public class Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder : object {
    private Sequence _sequence;
    public Sequence Metadata { get; }
    public RelationalSequenceBuilder(Sequence sequence);
    public virtual Sequence get_Metadata();
    public virtual RelationalSequenceBuilder IncrementsBy(int increment);
    public virtual RelationalSequenceBuilder StartsAt(long startValue);
    public virtual RelationalSequenceBuilder HasMax(long maximum);
    public virtual RelationalSequenceBuilder HasMin(long minimum);
    public virtual RelationalSequenceBuilder IsCyclic(bool cyclic);
}
public class Microsoft.EntityFrameworkCore.Metadata.Sequence : object {
    private IModel _model;
    private string _annotationName;
    public static Type DefaultClrType;
    public static int DefaultIncrementBy;
    public static int DefaultStartValue;
    public static Nullable`1<long> DefaultMaxValue;
    public static Nullable`1<long> DefaultMinValue;
    public static bool DefaultIsCyclic;
    [CompilerGeneratedAttribute]
private static IReadOnlyCollection`1<Type> <SupportedTypes>k__BackingField;
    public Model Model { get; }
    public string Name { get; }
    public string Schema { get; }
    public long StartValue { get; public set; }
    public int IncrementBy { get; public set; }
    public Nullable`1<long> MinValue { get; public set; }
    public Nullable`1<long> MaxValue { get; public set; }
    public static IReadOnlyCollection`1<Type> SupportedTypes { get; }
    public Type ClrType { get; public set; }
    public bool IsCyclic { get; public set; }
    private IModel Microsoft.EntityFrameworkCore.Metadata.ISequence.Model { get; }
    private long Microsoft.EntityFrameworkCore.Metadata.ISequence.StartValue { get; }
    private int Microsoft.EntityFrameworkCore.Metadata.ISequence.IncrementBy { get; }
    private Nullable`1<long> Microsoft.EntityFrameworkCore.Metadata.ISequence.MinValue { get; }
    private Nullable`1<long> Microsoft.EntityFrameworkCore.Metadata.ISequence.MaxValue { get; }
    private Type Microsoft.EntityFrameworkCore.Metadata.ISequence.ClrType { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.ISequence.IsCyclic { get; }
    private Sequence(IMutableModel model, string annotationPrefix, string name, string schema);
    private Sequence(IModel model, string annotationName);
    private static Sequence();
    public static Sequence GetOrAddSequence(IMutableModel model, string annotationPrefix, string name, string schema);
    private static string BuildAnnotationName(string annotationPrefix, string name, string schema);
    public static Sequence FindSequence(IMutableModel model, string annotationPrefix, string name, string schema);
    public static ISequence FindSequence(IModel model, string annotationPrefix, string name, string schema);
    public static IEnumerable`1<ISequence> GetSequences(IModel model, string annotationPrefix);
    public virtual Model get_Model();
    public virtual string get_Name();
    public virtual string get_Schema();
    public virtual long get_StartValue();
    public virtual void set_StartValue(long value);
    public virtual int get_IncrementBy();
    public virtual void set_IncrementBy(int value);
    public virtual Nullable`1<long> get_MinValue();
    public virtual void set_MinValue(Nullable`1<long> value);
    public virtual Nullable`1<long> get_MaxValue();
    public virtual void set_MaxValue(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public static IReadOnlyCollection`1<Type> get_SupportedTypes();
    public virtual Type get_ClrType();
    public virtual void set_ClrType(Type value);
    public virtual bool get_IsCyclic();
    public virtual void set_IsCyclic(bool value);
    private SequenceData GetData();
    private void SetData(SequenceData data);
    private sealed virtual override IModel Microsoft.EntityFrameworkCore.Metadata.ISequence.get_Model();
    private sealed virtual override long Microsoft.EntityFrameworkCore.Metadata.ISequence.get_StartValue();
    private sealed virtual override int Microsoft.EntityFrameworkCore.Metadata.ISequence.get_IncrementBy();
    private sealed virtual override Nullable`1<long> Microsoft.EntityFrameworkCore.Metadata.ISequence.get_MinValue();
    private sealed virtual override Nullable`1<long> Microsoft.EntityFrameworkCore.Metadata.ISequence.get_MaxValue();
    private sealed virtual override Type Microsoft.EntityFrameworkCore.Metadata.ISequence.get_ClrType();
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.ISequence.get_IsCyclic();
}
public abstract class Microsoft.EntityFrameworkCore.Migrations.HistoryRepository : object {
    public static string DefaultTableName;
    private IRelationalDatabaseCreator _databaseCreator;
    private IRawSqlCommandBuilder _rawSqlCommandBuilder;
    private IRelationalConnection _connection;
    private IMigrationsModelDiffer _modelDiffer;
    private IMigrationsSqlGenerator _migrationsSqlGenerator;
    private LazyRef`1<IModel> _model;
    private LazyRef`1<string> _migrationIdColumnName;
    private LazyRef`1<string> _productVersionColumnName;
    [CompilerGeneratedAttribute]
private ISqlGenerationHelper <SqlGenerationHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableSchema>k__BackingField;
    protected ISqlGenerationHelper SqlGenerationHelper { get; }
    protected string TableName { get; }
    protected string TableSchema { get; }
    protected string MigrationIdColumnName { get; }
    protected string ProductVersionColumnName { get; }
    protected string ExistsSql { get; }
    protected string GetAppliedMigrationsSql { get; }
    protected HistoryRepository(IDatabaseCreator databaseCreator, IRawSqlCommandBuilder rawSqlCommandBuilder, IRelationalConnection connection, IDbContextOptions options, IMigrationsModelDiffer modelDiffer, IMigrationsSqlGenerator migrationsSqlGenerator, IRelationalAnnotationProvider annotations, ISqlGenerationHelper sqlGenerationHelper);
    [CompilerGeneratedAttribute]
protected virtual ISqlGenerationHelper get_SqlGenerationHelper();
    [CompilerGeneratedAttribute]
protected virtual string get_TableName();
    [CompilerGeneratedAttribute]
protected virtual string get_TableSchema();
    protected virtual string get_MigrationIdColumnName();
    protected virtual string get_ProductVersionColumnName();
    protected abstract virtual string get_ExistsSql();
    public virtual bool Exists();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.HistoryRepository/<ExistsAsync>d__26")]
public virtual Task`1<bool> ExistsAsync(CancellationToken cancellationToken);
    protected abstract virtual bool InterpretExistsResult(object value);
    public abstract virtual string GetCreateIfNotExistsScript();
    public virtual string GetCreateScript();
    protected virtual void ConfigureTable(EntityTypeBuilder`1<HistoryRow> history);
    public virtual IReadOnlyList`1<HistoryRow> GetAppliedMigrations();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.HistoryRepository/<GetAppliedMigrationsAsync>d__32")]
public virtual Task`1<IReadOnlyList`1<HistoryRow>> GetAppliedMigrationsAsync(CancellationToken cancellationToken);
    protected virtual string get_GetAppliedMigrationsSql();
    public virtual string GetInsertScript(HistoryRow row);
    public virtual string GetDeleteScript(string migrationId);
    public abstract virtual string GetBeginIfNotExistsScript(string migrationId);
    public abstract virtual string GetBeginIfExistsScript(string migrationId);
    public abstract virtual string GetEndIfScript();
    [CompilerGeneratedAttribute]
private IModel <.ctor>b__9_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_1(EntityTypeBuilder`1<HistoryRow> x);
    [CompilerGeneratedAttribute]
private IEntityType <.ctor>b__9_2();
}
public class Microsoft.EntityFrameworkCore.Migrations.HistoryRow : object {
    [CompilerGeneratedAttribute]
private string <MigrationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductVersion>k__BackingField;
    public string MigrationId { get; }
    public string ProductVersion { get; }
    public HistoryRow(string migrationId, string productVersion);
    [CompilerGeneratedAttribute]
public virtual string get_MigrationId();
    [CompilerGeneratedAttribute]
public virtual string get_ProductVersion();
}
public interface Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository {
    public abstract virtual bool Exists();
    public abstract virtual Task`1<bool> ExistsAsync(CancellationToken cancellationToken);
    public abstract virtual IReadOnlyList`1<HistoryRow> GetAppliedMigrations();
    public abstract virtual Task`1<IReadOnlyList`1<HistoryRow>> GetAppliedMigrationsAsync(CancellationToken cancellationToken);
    public abstract virtual string GetCreateScript();
    public abstract virtual string GetCreateIfNotExistsScript();
    public abstract virtual string GetInsertScript(HistoryRow row);
    public abstract virtual string GetDeleteScript(string migrationId);
    public abstract virtual string GetBeginIfNotExistsScript(string migrationId);
    public abstract virtual string GetBeginIfExistsScript(string migrationId);
    public abstract virtual string GetEndIfScript();
}
public interface Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor {
    public abstract virtual void ExecuteNonQuery(IEnumerable`1<MigrationCommand> migrationCommands, IRelationalConnection connection);
    public abstract virtual Task ExecuteNonQueryAsync(IEnumerable`1<MigrationCommand> migrationCommands, IRelationalConnection connection, CancellationToken cancellationToken);
}
public interface Microsoft.EntityFrameworkCore.Migrations.IMigrationsAnnotationProvider {
    public abstract virtual IEnumerable`1<IAnnotation> For(IModel model);
    public abstract virtual IEnumerable`1<IAnnotation> For(IIndex index);
    public abstract virtual IEnumerable`1<IAnnotation> For(IProperty property);
    public abstract virtual IEnumerable`1<IAnnotation> For(IKey key);
    public abstract virtual IEnumerable`1<IAnnotation> For(IForeignKey foreignKey);
    public abstract virtual IEnumerable`1<IAnnotation> For(IEntityType entityType);
    public abstract virtual IEnumerable`1<IAnnotation> For(ISequence sequence);
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(IModel model);
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(IIndex index);
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(IProperty property);
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(IKey key);
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(IForeignKey foreignKey);
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(IEntityType entityType);
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(ISequence sequence);
}
public interface Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly {
    public IReadOnlyDictionary`2<string, TypeInfo> Migrations { get; }
    public ModelSnapshot ModelSnapshot { get; }
    public Assembly Assembly { get; }
    public abstract virtual IReadOnlyDictionary`2<string, TypeInfo> get_Migrations();
    public abstract virtual ModelSnapshot get_ModelSnapshot();
    public abstract virtual Assembly get_Assembly();
    public abstract virtual string FindMigrationId(string nameOrId);
    public abstract virtual Migration CreateMigration(TypeInfo migrationClass, string activeProvider);
}
public interface Microsoft.EntityFrameworkCore.Migrations.IMigrationsIdGenerator {
    public abstract virtual string GenerateId(string name);
    public abstract virtual string GetName(string id);
    public abstract virtual bool IsValidId(string value);
}
public interface Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer {
    public abstract virtual bool HasDifferences(IModel source, IModel target);
    public abstract virtual IReadOnlyList`1<MigrationOperation> GetDifferences(IModel source, IModel target);
}
public interface Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator {
    public abstract virtual IReadOnlyList`1<MigrationCommand> Generate(IReadOnlyList`1<MigrationOperation> operations, IModel model);
}
public interface Microsoft.EntityFrameworkCore.Migrations.IMigrator {
    public abstract virtual void Migrate(string targetMigration);
    public abstract virtual Task MigrateAsync(string targetMigration, CancellationToken cancellationToken);
    public abstract virtual string GenerateScript(string fromMigration, string toMigration, bool idempotent);
}
public class Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationCommandExecutor : object {
    public virtual void ExecuteNonQuery(IEnumerable`1<MigrationCommand> migrationCommands, IRelationalConnection connection);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationCommandExecutor/<ExecuteNonQueryAsync>d__1")]
public virtual Task ExecuteNonQueryAsync(IEnumerable`1<MigrationCommand> migrationCommands, IRelationalConnection connection, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationExtensions : object {
    [ExtensionAttribute]
public static string GetId(Migration migration);
}
public class Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsAssembly : object {
    private IMigrationsIdGenerator _idGenerator;
    private LazyRef`1<IReadOnlyDictionary`2<string, TypeInfo>> _migrations;
    private LazyRef`1<ModelSnapshot> _modelSnapshot;
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    public IReadOnlyDictionary`2<string, TypeInfo> Migrations { get; }
    public ModelSnapshot ModelSnapshot { get; }
    public Assembly Assembly { get; }
    public MigrationsAssembly(ICurrentDbContext currentContext, IDbContextOptions options, IMigrationsIdGenerator idGenerator);
    public virtual IReadOnlyDictionary`2<string, TypeInfo> get_Migrations();
    public virtual ModelSnapshot get_ModelSnapshot();
    [CompilerGeneratedAttribute]
public virtual Assembly get_Assembly();
    public virtual string FindMigrationId(string nameOrId);
    public virtual Migration CreateMigration(TypeInfo migrationClass, string activeProvider);
}
public class Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsIdGenerator : object {
    private static string Format;
    private DateTime _lastTimestamp;
    public virtual string GetName(string id);
    public virtual bool IsValidId(string value);
    public virtual string GenerateId(string name);
}
public class Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer : object {
    private static Type[] _dropOperationTypes;
    private static Type[] _alterOperationTypes;
    private static Type[] _renameOperationTypes;
    private static Type[] _columnOperationTypes;
    private static Type[] _constraintOperationTypes;
    [CompilerGeneratedAttribute]
private IRelationalTypeMapper <TypeMapper>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalAnnotationProvider <Annotations>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationsAnnotationProvider <MigrationsAnnotations>k__BackingField;
    protected IRelationalTypeMapper TypeMapper { get; }
    protected IRelationalAnnotationProvider Annotations { get; }
    protected IMigrationsAnnotationProvider MigrationsAnnotations { get; }
    public MigrationsModelDiffer(IRelationalTypeMapper typeMapper, IRelationalAnnotationProvider annotations, IMigrationsAnnotationProvider migrationsAnnotations);
    private static MigrationsModelDiffer();
    [CompilerGeneratedAttribute]
protected virtual IRelationalTypeMapper get_TypeMapper();
    [CompilerGeneratedAttribute]
protected virtual IRelationalAnnotationProvider get_Annotations();
    [CompilerGeneratedAttribute]
protected virtual IMigrationsAnnotationProvider get_MigrationsAnnotations();
    public virtual bool HasDifferences(IModel source, IModel target);
    public virtual IReadOnlyList`1<MigrationOperation> GetDifferences(IModel source, IModel target);
    protected virtual IReadOnlyList`1<MigrationOperation> Sort(IEnumerable`1<MigrationOperation> operations, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IModel source, IModel target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<DiffAnnotations>d__19")]
private IEnumerable`1<MigrationOperation> DiffAnnotations(IModel source, IModel target);
    protected virtual IEnumerable`1<MigrationOperation> Add(IModel target, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Remove(IModel source, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IEnumerable`1<string> source, IEnumerable`1<string> target);
    protected virtual IEnumerable`1<MigrationOperation> Diff(string source, string target);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Add>d__24")]
protected virtual IEnumerable`1<MigrationOperation> Add(string target);
    protected virtual IEnumerable`1<MigrationOperation> Remove(string source);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IEnumerable`1<IEntityType> source, IEnumerable`1<IEntityType> target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Diff>d__27")]
protected virtual IEnumerable`1<MigrationOperation> Diff(IEntityType source, IEntityType target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<DiffAnnotations>d__28")]
private IEnumerable`1<MigrationOperation> DiffAnnotations(IEntityType source, IEntityType target);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Add>d__29")]
protected virtual IEnumerable`1<MigrationOperation> Add(IEntityType target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Remove>d__30")]
protected virtual IEnumerable`1<MigrationOperation> Remove(IEntityType source, DiffContext diffContext);
    private IEnumerable`1<IForeignKey> GetForeignKeysInHierarchy(IEntityType entityType);
    private IEnumerable`1<IIndex> GetIndexesInHierarchy(IEntityType entityType);
    private IEnumerable`1<IProperty> GetPropertiesInHierarchy(IEntityType entityType);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IEnumerable`1<IProperty> source, IEnumerable`1<IProperty> target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Diff>d__35")]
protected virtual IEnumerable`1<MigrationOperation> Diff(IProperty source, IProperty target);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Add>d__36")]
protected virtual IEnumerable`1<MigrationOperation> Add(IProperty target, DiffContext diffContext, bool inline);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Remove>d__37")]
protected virtual IEnumerable`1<MigrationOperation> Remove(IProperty source);
    private ColumnOperation Initialize(ColumnOperation columnOperation, IProperty property, bool isNullable, IRelationalPropertyAnnotations annotations, IEnumerable`1<IAnnotation> migrationsAnnotations, bool inline);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IEnumerable`1<IKey> source, IEnumerable`1<IKey> target, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IKey source, IKey target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Add>d__41")]
protected virtual IEnumerable`1<MigrationOperation> Add(IKey target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Remove>d__42")]
protected virtual IEnumerable`1<MigrationOperation> Remove(IKey source, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IEnumerable`1<IForeignKey> source, IEnumerable`1<IForeignKey> target, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IForeignKey source, IForeignKey target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Add>d__45")]
protected virtual IEnumerable`1<MigrationOperation> Add(IForeignKey target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Remove>d__46")]
protected virtual IEnumerable`1<MigrationOperation> Remove(IForeignKey source, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IEnumerable`1<IIndex> source, IEnumerable`1<IIndex> target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Diff>d__48")]
protected virtual IEnumerable`1<MigrationOperation> Diff(IIndex source, IIndex target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Add>d__49")]
protected virtual IEnumerable`1<MigrationOperation> Add(IIndex target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Remove>d__50")]
protected virtual IEnumerable`1<MigrationOperation> Remove(IIndex source);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IEnumerable`1<ISequence> source, IEnumerable`1<ISequence> target);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Diff>d__52")]
protected virtual IEnumerable`1<MigrationOperation> Diff(ISequence source, ISequence target);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Add>d__53")]
protected virtual IEnumerable`1<MigrationOperation> Add(ISequence target);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Remove>d__54")]
protected virtual IEnumerable`1<MigrationOperation> Remove(ISequence source);
    private SequenceOperation Initialize(SequenceOperation sequenceOperation, ISequence sequence, IEnumerable`1<IAnnotation> migrationsAnnotations);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<DiffCollection>d__56`1")]
protected virtual IEnumerable`1<MigrationOperation> DiffCollection(IEnumerable`1<T> sources, IEnumerable`1<T> targets, Func`3<T, T, IEnumerable`1<MigrationOperation>> diff, Func`2<T, IEnumerable`1<MigrationOperation>> add, Func`2<T, IEnumerable`1<MigrationOperation>> remove, Func`3[] predicates);
    protected virtual String[] GetColumns(IEnumerable`1<IProperty> properties);
    protected virtual bool HasDifferences(IEnumerable`1<IAnnotation> source, IEnumerable`1<IAnnotation> target);
    protected virtual IEnumerable`1<string> GetSchemas(IModel model);
    protected virtual object GetDefaultValue(Type type);
    [CompilerGeneratedAttribute]
private bool <Diff>b__26_4(IEntityType s, IEntityType t);
    [CompilerGeneratedAttribute]
private bool <Diff>b__26_5(IEntityType s, IEntityType t);
    [CompilerGeneratedAttribute]
private bool <GetForeignKeysInHierarchy>b__31_1(IForeignKey x, IForeignKey y);
    [CompilerGeneratedAttribute]
private bool <GetIndexesInHierarchy>b__32_1(IIndex x, IIndex y);
    [CompilerGeneratedAttribute]
private bool <GetPropertiesInHierarchy>b__33_1(IProperty x, IProperty y);
    [CompilerGeneratedAttribute]
private bool <Diff>b__34_3(IProperty s, IProperty t);
    [CompilerGeneratedAttribute]
private bool <Diff>b__34_4(IProperty s, IProperty t);
    [CompilerGeneratedAttribute]
private string <GetColumns>b__57_0(IProperty p);
    [CompilerGeneratedAttribute]
private string <GetSchemas>b__59_0(IEntityType t);
}
public class Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator : object {
    private IMigrationsAssembly _migrationsAssembly;
    private IHistoryRepository _historyRepository;
    private IRelationalDatabaseCreator _databaseCreator;
    private IMigrationsSqlGenerator _migrationsSqlGenerator;
    private IRawSqlCommandBuilder _rawSqlCommandBuilder;
    private IMigrationCommandExecutor _migrationCommandExecutor;
    private IRelationalConnection _connection;
    private ISqlGenerationHelper _sqlGenerationHelper;
    private ILogger _logger;
    private string _activeProvider;
    public Migrator(IMigrationsAssembly migrationsAssembly, IHistoryRepository historyRepository, IDatabaseCreator databaseCreator, IMigrationsSqlGenerator migrationsSqlGenerator, IRawSqlCommandBuilder rawSqlCommandBuilder, IMigrationCommandExecutor migrationCommandExecutor, IRelationalConnection connection, ISqlGenerationHelper sqlGenerationHelper, ILogger`1<Migrator> logger, IDatabaseProviderServices providerServices);
    public virtual void Migrate(string targetMigration);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator/<MigrateAsync>d__12")]
public virtual Task MigrateAsync(string targetMigration, CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator/<GetMigrationCommandLists>d__13")]
private IEnumerable`1<Func`1<IReadOnlyList`1<MigrationCommand>>> GetMigrationCommandLists(IReadOnlyList`1<HistoryRow> appliedMigrationEntries, string targetMigration);
    private void PopulateMigrations(IEnumerable`1<string> appliedMigrationEntries, string targetMigration, IReadOnlyList`1& migrationsToApply, IReadOnlyList`1& migrationsToRevert);
    public virtual string GenerateScript(string fromMigration, string toMigration, bool idempotent);
    protected virtual IReadOnlyList`1<MigrationCommand> GenerateUpSql(Migration migration);
    protected virtual IReadOnlyList`1<MigrationCommand> GenerateDownSql(Migration migration, Migration previousMigration);
    private string FormatCommandsForReporting(IEnumerable`1<MigrationCommand> commands);
    [CompilerGeneratedAttribute]
private Migration <PopulateMigrations>b__14_0(KeyValuePair`2<string, TypeInfo> p);
    [CompilerGeneratedAttribute]
private Migration <PopulateMigrations>b__14_2(KeyValuePair`2<string, TypeInfo> p);
    [CompilerGeneratedAttribute]
private Migration <PopulateMigrations>b__14_4(KeyValuePair`2<string, TypeInfo> p);
    [CompilerGeneratedAttribute]
private Migration <PopulateMigrations>b__14_7(KeyValuePair`2<string, TypeInfo> p);
}
public abstract class Microsoft.EntityFrameworkCore.Migrations.Migration : object {
    public static string InitialDatabase;
    private LazyRef`1<IModel> _targetModel;
    private LazyRef`1<List`1<MigrationOperation>> _upOperations;
    private LazyRef`1<List`1<MigrationOperation>> _downOperations;
    [CompilerGeneratedAttribute]
private string <ActiveProvider>k__BackingField;
    public IModel TargetModel { get; }
    public IReadOnlyList`1<MigrationOperation> UpOperations { get; }
    public IReadOnlyList`1<MigrationOperation> DownOperations { get; }
    public string ActiveProvider { get; public set; }
    public virtual IModel get_TargetModel();
    public virtual IReadOnlyList`1<MigrationOperation> get_UpOperations();
    public virtual IReadOnlyList`1<MigrationOperation> get_DownOperations();
    [CompilerGeneratedAttribute]
public virtual string get_ActiveProvider();
    [CompilerGeneratedAttribute]
public virtual void set_ActiveProvider(string value);
    protected virtual void BuildTargetModel(ModelBuilder modelBuilder);
    protected abstract virtual void Up(MigrationBuilder migrationBuilder);
    protected virtual void Down(MigrationBuilder migrationBuilder);
    private List`1<MigrationOperation> BuildOperations(Action`1<MigrationBuilder> buildAction);
    [CompilerGeneratedAttribute]
private IModel <.ctor>b__4_0();
    [CompilerGeneratedAttribute]
private List`1<MigrationOperation> <.ctor>b__4_1();
    [CompilerGeneratedAttribute]
private List`1<MigrationOperation> <.ctor>b__4_2();
}
[AttributeUsageAttribute("4")]
public class Microsoft.EntityFrameworkCore.Migrations.MigrationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; }
    public MigrationAttribute(string id);
    [CompilerGeneratedAttribute]
public string get_Id();
}
public class Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder : object {
    [CompilerGeneratedAttribute]
private string <ActiveProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MigrationOperation> <Operations>k__BackingField;
    public string ActiveProvider { get; }
    public List`1<MigrationOperation> Operations { get; }
    public MigrationBuilder(string activeProvider);
    [CompilerGeneratedAttribute]
public virtual string get_ActiveProvider();
    [CompilerGeneratedAttribute]
public virtual List`1<MigrationOperation> get_Operations();
    public virtual OperationBuilder`1<AddColumnOperation> AddColumn(string name, string table, string type, Nullable`1<bool> unicode, Nullable`1<int> maxLength, bool rowVersion, string schema, bool nullable, object defaultValue, string defaultValueSql, string computedColumnSql);
    public virtual OperationBuilder`1<AddForeignKeyOperation> AddForeignKey(string name, string table, string column, string principalTable, string schema, string principalSchema, string principalColumn, ReferentialAction onUpdate, ReferentialAction onDelete);
    public virtual OperationBuilder`1<AddForeignKeyOperation> AddForeignKey(string name, string table, String[] columns, string principalTable, string schema, string principalSchema, String[] principalColumns, ReferentialAction onUpdate, ReferentialAction onDelete);
    public virtual OperationBuilder`1<AddPrimaryKeyOperation> AddPrimaryKey(string name, string table, string column, string schema);
    public virtual OperationBuilder`1<AddPrimaryKeyOperation> AddPrimaryKey(string name, string table, String[] columns, string schema);
    public virtual OperationBuilder`1<AddUniqueConstraintOperation> AddUniqueConstraint(string name, string table, string column, string schema);
    public virtual OperationBuilder`1<AddUniqueConstraintOperation> AddUniqueConstraint(string name, string table, String[] columns, string schema);
    public virtual AlterOperationBuilder`1<AlterColumnOperation> AlterColumn(string name, string table, string type, Nullable`1<bool> unicode, Nullable`1<int> maxLength, bool rowVersion, string schema, bool nullable, object defaultValue, string defaultValueSql, string computedColumnSql, Type oldClrType, string oldType, Nullable`1<bool> oldUnicode, Nullable`1<int> oldMaxLength, bool oldRowVersion, bool oldNullable, object oldDefaultValue, string oldDefaultValueSql, string oldComputedColumnSql);
    public virtual AlterOperationBuilder`1<AlterDatabaseOperation> AlterDatabase();
    public virtual AlterOperationBuilder`1<AlterSequenceOperation> AlterSequence(string name, string schema, int incrementBy, Nullable`1<long> minValue, Nullable`1<long> maxValue, bool cyclic, int oldIncrementBy, Nullable`1<long> oldMinValue, Nullable`1<long> oldMaxValue, bool oldCyclic);
    public virtual AlterOperationBuilder`1<AlterTableOperation> AlterTable(string name, string schema);
    public virtual OperationBuilder`1<CreateIndexOperation> CreateIndex(string name, string table, string column, string schema, bool unique);
    public virtual OperationBuilder`1<CreateIndexOperation> CreateIndex(string name, string table, String[] columns, string schema, bool unique);
    public virtual OperationBuilder`1<EnsureSchemaOperation> EnsureSchema(string name);
    public virtual OperationBuilder`1<CreateSequenceOperation> CreateSequence(string name, string schema, long startValue, int incrementBy, Nullable`1<long> minValue, Nullable`1<long> maxValue, bool cyclic);
    public virtual OperationBuilder`1<CreateSequenceOperation> CreateSequence(string name, string schema, long startValue, int incrementBy, Nullable`1<long> minValue, Nullable`1<long> maxValue, bool cyclic);
    public virtual CreateTableBuilder`1<TColumns> CreateTable(string name, Func`2<ColumnsBuilder, TColumns> columns, string schema, Action`1<CreateTableBuilder`1<TColumns>> constraints);
    public virtual OperationBuilder`1<DropColumnOperation> DropColumn(string name, string table, string schema);
    public virtual OperationBuilder`1<DropForeignKeyOperation> DropForeignKey(string name, string table, string schema);
    public virtual OperationBuilder`1<DropIndexOperation> DropIndex(string name, string table, string schema);
    public virtual OperationBuilder`1<DropPrimaryKeyOperation> DropPrimaryKey(string name, string table, string schema);
    public virtual OperationBuilder`1<DropSchemaOperation> DropSchema(string name);
    public virtual OperationBuilder`1<DropSequenceOperation> DropSequence(string name, string schema);
    public virtual OperationBuilder`1<DropTableOperation> DropTable(string name, string schema);
    public virtual OperationBuilder`1<DropUniqueConstraintOperation> DropUniqueConstraint(string name, string table, string schema);
    public virtual OperationBuilder`1<RenameColumnOperation> RenameColumn(string name, string table, string newName, string schema);
    public virtual OperationBuilder`1<RenameIndexOperation> RenameIndex(string name, string newName, string table, string schema);
    public virtual OperationBuilder`1<RenameSequenceOperation> RenameSequence(string name, string schema, string newName, string newSchema);
    public virtual OperationBuilder`1<RenameTableOperation> RenameTable(string name, string schema, string newName, string newSchema);
    public virtual OperationBuilder`1<RestartSequenceOperation> RestartSequence(string name, long startValue, string schema);
    public virtual OperationBuilder`1<SqlOperation> Sql(string sql, bool suppressTransaction);
}
public class Microsoft.EntityFrameworkCore.Migrations.MigrationCommand : object {
    private IRelationalCommand _relationalCommand;
    [CompilerGeneratedAttribute]
private bool <TransactionSuppressed>k__BackingField;
    public bool TransactionSuppressed { get; }
    public string CommandText { get; }
    public MigrationCommand(IRelationalCommand relationalCommand, bool transactionSuppressed);
    [CompilerGeneratedAttribute]
public virtual bool get_TransactionSuppressed();
    public virtual string get_CommandText();
    public virtual int ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.MigrationCommand/<ExecuteNonQueryAsync>d__8")]
public virtual Task`1<int> ExecuteNonQueryAsync(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, CancellationToken cancellationToken);
}
public class Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder : object {
    private IRelationalCommandBuilderFactory _commandBuilderFactory;
    private List`1<MigrationCommand> _commands;
    private IRelationalCommandBuilder _commandBuilder;
    public MigrationCommandListBuilder(IRelationalCommandBuilderFactory commandBuilderFactory);
    public virtual IReadOnlyList`1<MigrationCommand> GetCommandList();
    public virtual MigrationCommandListBuilder EndCommand(bool suppressTransaction);
    public virtual MigrationCommandListBuilder Append(object o);
    public virtual MigrationCommandListBuilder AppendLine();
    public virtual MigrationCommandListBuilder AppendLine(object o);
    public virtual MigrationCommandListBuilder AppendLines(object o);
    public virtual IDisposable Indent();
    public virtual MigrationCommandListBuilder IncrementIndent();
    public virtual MigrationCommandListBuilder DecrementIndent();
}
public class Microsoft.EntityFrameworkCore.Migrations.MigrationsAnnotationProvider : object {
    public virtual IEnumerable`1<IAnnotation> For(IModel model);
    public virtual IEnumerable`1<IAnnotation> For(IEntityType entityType);
    public virtual IEnumerable`1<IAnnotation> For(IForeignKey foreignKey);
    public virtual IEnumerable`1<IAnnotation> For(IIndex index);
    public virtual IEnumerable`1<IAnnotation> For(IKey key);
    public virtual IEnumerable`1<IAnnotation> For(IProperty property);
    public virtual IEnumerable`1<IAnnotation> For(ISequence sequence);
    public virtual IEnumerable`1<IAnnotation> ForRemove(IModel model);
    public virtual IEnumerable`1<IAnnotation> ForRemove(IEntityType entityType);
    public virtual IEnumerable`1<IAnnotation> ForRemove(IForeignKey foreignKey);
    public virtual IEnumerable`1<IAnnotation> ForRemove(IIndex index);
    public virtual IEnumerable`1<IAnnotation> ForRemove(IKey key);
    public virtual IEnumerable`1<IAnnotation> ForRemove(IProperty property);
    public virtual IEnumerable`1<IAnnotation> ForRemove(ISequence sequence);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Migrations.MigrationsAssemblyExtensions : object {
    [ExtensionAttribute]
public static string GetMigrationId(IMigrationsAssembly assembly, string nameOrId);
}
public class Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator : object {
    private static IReadOnlyDictionary`2<Type, Action`4<MigrationsSqlGenerator, MigrationOperation, IModel, MigrationCommandListBuilder>> _generateActions;
    private IRelationalCommandBuilderFactory _commandBuilderFactory;
    [CompilerGeneratedAttribute]
private ISqlGenerationHelper <SqlGenerationHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalTypeMapper <TypeMapper>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalAnnotationProvider <Annotations>k__BackingField;
    protected ISqlGenerationHelper SqlGenerationHelper { get; }
    protected IRelationalTypeMapper TypeMapper { get; }
    protected IRelationalAnnotationProvider Annotations { get; }
    public MigrationsSqlGenerator(IRelationalCommandBuilderFactory commandBuilderFactory, ISqlGenerationHelper sqlGenerationHelper, IRelationalTypeMapper typeMapper, IRelationalAnnotationProvider annotations);
    private static MigrationsSqlGenerator();
    [CompilerGeneratedAttribute]
protected virtual ISqlGenerationHelper get_SqlGenerationHelper();
    [CompilerGeneratedAttribute]
protected virtual IRelationalTypeMapper get_TypeMapper();
    [CompilerGeneratedAttribute]
protected virtual IRelationalAnnotationProvider get_Annotations();
    public virtual IReadOnlyList`1<MigrationCommand> Generate(IReadOnlyList`1<MigrationOperation> operations, IModel model);
    protected virtual void Generate(MigrationOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AddColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AddColumnOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(AddForeignKeyOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AddForeignKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(AddPrimaryKeyOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AddPrimaryKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(AddUniqueConstraintOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AlterColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AlterDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameIndexOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AlterSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AlterTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(CreateIndexOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(CreateIndexOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(EnsureSchemaOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(CreateSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropColumnOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropForeignKeyOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropForeignKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropIndexOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropPrimaryKeyOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropPrimaryKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropSchemaOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropTableOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropUniqueConstraintOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RestartSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(SqlOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void SequenceOptions(AlterSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void SequenceOptions(CreateSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void SequenceOptions(string schema, string name, int increment, Nullable`1<long> minimumValue, Nullable`1<long> maximumValue, bool cycle, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ColumnDefinition(AddColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ColumnDefinition(string schema, string table, string name, Type clrType, string type, Nullable`1<bool> unicode, Nullable`1<int> maxLength, bool rowVersion, bool nullable, object defaultValue, string defaultValueSql, string computedColumnSql, IAnnotatable annotatable, IModel model, MigrationCommandListBuilder builder);
    protected virtual string GetColumnType(string schema, string table, string name, Type clrType, Nullable`1<bool> unicode, Nullable`1<int> maxLength, bool rowVersion, IModel model);
    protected virtual void DefaultValue(object defaultValue, string defaultValueSql, MigrationCommandListBuilder builder);
    protected virtual void ForeignKeyConstraint(AddForeignKeyOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void PrimaryKeyConstraint(AddPrimaryKeyOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void UniqueConstraint(AddUniqueConstraintOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void IndexTraits(MigrationOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ForeignKeyAction(ReferentialAction referentialAction, MigrationCommandListBuilder builder);
    protected virtual IEnumerable`1<IEntityType> FindEntityTypes(IModel model, string schema, string tableName);
    protected virtual IProperty FindProperty(IModel model, string schema, string tableName, string columnName);
    protected virtual void EndStatement(MigrationCommandListBuilder builder, bool suppressTransaction);
    protected virtual string ColumnList(String[] columns);
    protected virtual bool IsOldColumnSupported(IModel model);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation : ColumnOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Table { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrincipalSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrincipalTable>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PrincipalColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferentialAction <OnUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferentialAction <OnDelete>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Table { get; public set; }
    public String[] Columns { get; public set; }
    public string PrincipalSchema { get; public set; }
    public string PrincipalTable { get; public set; }
    public String[] PrincipalColumns { get; public set; }
    public ReferentialAction OnUpdate { get; public set; }
    public ReferentialAction OnDelete { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [CompilerGeneratedAttribute]
public virtual String[] get_Columns();
    [CompilerGeneratedAttribute]
public virtual void set_Columns(String[] value);
    [CompilerGeneratedAttribute]
public virtual string get_PrincipalSchema();
    [CompilerGeneratedAttribute]
public virtual void set_PrincipalSchema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PrincipalTable();
    [CompilerGeneratedAttribute]
public virtual void set_PrincipalTable(string value);
    [CompilerGeneratedAttribute]
public virtual String[] get_PrincipalColumns();
    [CompilerGeneratedAttribute]
public virtual void set_PrincipalColumns(String[] value);
    [CompilerGeneratedAttribute]
public virtual ReferentialAction get_OnUpdate();
    [CompilerGeneratedAttribute]
public virtual void set_OnUpdate(ReferentialAction value);
    [CompilerGeneratedAttribute]
public virtual ReferentialAction get_OnDelete();
    [CompilerGeneratedAttribute]
public virtual void set_OnDelete(ReferentialAction value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AddPrimaryKeyOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Columns>k__BackingField;
    public string Schema { get; public set; }
    public string Table { get; public set; }
    public string Name { get; public set; }
    public String[] Columns { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual String[] get_Columns();
    [CompilerGeneratedAttribute]
public virtual void set_Columns(String[] value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AddUniqueConstraintOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Columns>k__BackingField;
    public string Schema { get; public set; }
    public string Table { get; public set; }
    public string Name { get; public set; }
    public String[] Columns { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual String[] get_Columns();
    [CompilerGeneratedAttribute]
public virtual void set_Columns(String[] value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AlterColumnOperation : ColumnOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnOperation <OldColumn>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Table { get; public set; }
    public ColumnOperation OldColumn { get; public set; }
    private IMutableAnnotatable Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.OldAnnotations { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [CompilerGeneratedAttribute]
public virtual ColumnOperation get_OldColumn();
    [CompilerGeneratedAttribute]
public virtual void set_OldColumn(ColumnOperation value);
    private sealed virtual override IMutableAnnotatable Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.get_OldAnnotations();
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AlterDatabaseOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private Annotatable <OldDatabase>k__BackingField;
    public Annotatable OldDatabase { get; }
    private IMutableAnnotatable Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.OldAnnotations { get; }
    [CompilerGeneratedAttribute]
public virtual Annotatable get_OldDatabase();
    private sealed virtual override IMutableAnnotatable Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.get_OldAnnotations();
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AlterSequenceOperation : SequenceOperation {
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SequenceOperation <OldSequence>k__BackingField;
    public string Schema { get; public set; }
    public string Name { get; public set; }
    public SequenceOperation OldSequence { get; public set; }
    private IMutableAnnotatable Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.OldAnnotations { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual SequenceOperation get_OldSequence();
    [CompilerGeneratedAttribute]
public virtual void set_OldSequence(SequenceOperation value);
    private sealed virtual override IMutableAnnotatable Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.get_OldAnnotations();
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AlterTableOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private Annotatable <OldTable>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public Annotatable OldTable { get; public set; }
    private IMutableAnnotatable Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.OldAnnotations { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual Annotatable get_OldTable();
    [CompilerGeneratedAttribute]
public virtual void set_OldTable(Annotatable value);
    private sealed virtual override IMutableAnnotatable Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.get_OldAnnotations();
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.AlterOperationBuilder`1 : OperationBuilder`1<TOperation> {
    public AlterOperationBuilder`1(TOperation operation);
    public virtual AlterOperationBuilder`1<TOperation> Annotation(string name, object value);
    public virtual AlterOperationBuilder`1<TOperation> OldAnnotation(string name, object value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder : object {
    private CreateTableOperation _createTableOperation;
    public ColumnsBuilder(CreateTableOperation createTableOperation);
    public virtual OperationBuilder`1<AddColumnOperation> Column(string type, Nullable`1<bool> unicode, Nullable`1<int> maxLength, bool rowVersion, string name, bool nullable, object defaultValue, string defaultValueSql, string computedColumnSql);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder`1 : OperationBuilder`1<CreateTableOperation> {
    private IReadOnlyDictionary`2<PropertyInfo, AddColumnOperation> _columnMap;
    public CreateTableBuilder`1(CreateTableOperation operation, IReadOnlyDictionary`2<PropertyInfo, AddColumnOperation> columnMap);
    public virtual OperationBuilder`1<AddForeignKeyOperation> ForeignKey(string name, Expression`1<Func`2<TColumns, object>> column, string principalTable, string principalColumn, string principalSchema, ReferentialAction onUpdate, ReferentialAction onDelete);
    public virtual OperationBuilder`1<AddForeignKeyOperation> ForeignKey(string name, Expression`1<Func`2<TColumns, object>> columns, string principalTable, String[] principalColumns, string principalSchema, ReferentialAction onUpdate, ReferentialAction onDelete);
    public virtual OperationBuilder`1<AddPrimaryKeyOperation> PrimaryKey(string name, Expression`1<Func`2<TColumns, object>> columns);
    public virtual OperationBuilder`1<AddUniqueConstraintOperation> UniqueConstraint(string name, Expression`1<Func`2<TColumns, object>> columns);
    public virtual CreateTableBuilder`1<TColumns> Annotation(string name, object value);
    private String[] Map(LambdaExpression columns);
    [CompilerGeneratedAttribute]
private string <Map>b__7_0(PropertyInfo c);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder`1 : object {
    [CompilerGeneratedAttribute]
private TOperation <Operation>k__BackingField;
    protected TOperation Operation { get; }
    private TOperation Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<TOperation>.Instance { get; }
    public OperationBuilder`1(TOperation operation);
    [CompilerGeneratedAttribute]
protected virtual TOperation get_Operation();
    private sealed virtual override TOperation Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<TOperation>.get_Instance();
    public virtual OperationBuilder`1<TOperation> Annotation(string name, object value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsUnicode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRowVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValueSql>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ComputedColumnSql>k__BackingField;
    public Type ClrType { get; public set; }
    public string ColumnType { get; public set; }
    public Nullable`1<bool> IsUnicode { get; public set; }
    public Nullable`1<int> MaxLength { get; public set; }
    public bool IsRowVersion { get; public set; }
    public bool IsNullable { get; public set; }
    public object DefaultValue { get; public set; }
    public string DefaultValueSql { get; public set; }
    public string ComputedColumnSql { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
public virtual void set_ClrType(Type value);
    [CompilerGeneratedAttribute]
public virtual string get_ColumnType();
    [CompilerGeneratedAttribute]
public virtual void set_ColumnType(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsUnicode();
    [CompilerGeneratedAttribute]
public virtual void set_IsUnicode(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_MaxLength();
    [CompilerGeneratedAttribute]
public virtual void set_MaxLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsRowVersion();
    [CompilerGeneratedAttribute]
public virtual void set_IsRowVersion(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public virtual object get_DefaultValue();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultValue(object value);
    [CompilerGeneratedAttribute]
public virtual string get_DefaultValueSql();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultValueSql(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ComputedColumnSql();
    [CompilerGeneratedAttribute]
public virtual void set_ComputedColumnSql(string value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private bool <IsUnique>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Columns>k__BackingField;
    public bool IsUnique { get; public set; }
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Table { get; public set; }
    public String[] Columns { get; public set; }
    [CompilerGeneratedAttribute]
public virtual bool get_IsUnique();
    [CompilerGeneratedAttribute]
public virtual void set_IsUnique(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [CompilerGeneratedAttribute]
public virtual String[] get_Columns();
    [CompilerGeneratedAttribute]
public virtual void set_Columns(String[] value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.CreateSequenceOperation : SequenceOperation {
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StartValue>k__BackingField;
    public string Schema { get; public set; }
    public string Name { get; public set; }
    public Type ClrType { get; public set; }
    public long StartValue { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
public virtual void set_ClrType(Type value);
    [CompilerGeneratedAttribute]
public virtual long get_StartValue();
    [CompilerGeneratedAttribute]
public virtual void set_StartValue(long value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private AddPrimaryKeyOperation <PrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AddColumnOperation> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AddForeignKeyOperation> <ForeignKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AddUniqueConstraintOperation> <UniqueConstraints>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public AddPrimaryKeyOperation PrimaryKey { get; public set; }
    public List`1<AddColumnOperation> Columns { get; }
    public List`1<AddForeignKeyOperation> ForeignKeys { get; }
    public List`1<AddUniqueConstraintOperation> UniqueConstraints { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual AddPrimaryKeyOperation get_PrimaryKey();
    [CompilerGeneratedAttribute]
public virtual void set_PrimaryKey(AddPrimaryKeyOperation value);
    [CompilerGeneratedAttribute]
public virtual List`1<AddColumnOperation> get_Columns();
    [CompilerGeneratedAttribute]
public virtual List`1<AddForeignKeyOperation> get_ForeignKeys();
    [CompilerGeneratedAttribute]
public virtual List`1<AddUniqueConstraintOperation> get_UniqueConstraints();
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropColumnOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Table { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropForeignKeyOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Table { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropIndexOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Table { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropPrimaryKeyOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Table { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropSchemaOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropSequenceOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropTableOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropUniqueConstraintOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Table { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.EnsureSchemaOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
}
public interface Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation {
    public IMutableAnnotatable OldAnnotations { get; }
    public abstract virtual IMutableAnnotatable get_OldAnnotations();
}
public abstract class Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation : Annotatable {
    [CompilerGeneratedAttribute]
private bool <IsDestructiveChange>k__BackingField;
    public bool IsDestructiveChange { get; public set; }
    [CompilerGeneratedAttribute]
public virtual bool get_IsDestructiveChange();
    [CompilerGeneratedAttribute]
public virtual void set_IsDestructiveChange(bool value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.RenameColumnOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Table { get; public set; }
    public string NewName { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
    [CompilerGeneratedAttribute]
public virtual void set_NewName(string value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.RenameIndexOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Name { get; public set; }
    public string NewName { get; public set; }
    public string Schema { get; public set; }
    public string Table { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
    [CompilerGeneratedAttribute]
public virtual void set_NewName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.RenameSequenceOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewSchema>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string NewName { get; public set; }
    public string NewSchema { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
    [CompilerGeneratedAttribute]
public virtual void set_NewName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NewSchema();
    [CompilerGeneratedAttribute]
public virtual void set_NewSchema(string value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.RenameTableOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    public string Schema { get; public set; }
    public string Name { get; public set; }
    public string NewSchema { get; public set; }
    public string NewName { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NewSchema();
    [CompilerGeneratedAttribute]
public virtual void set_NewSchema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
    [CompilerGeneratedAttribute]
public virtual void set_NewName(string value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.RestartSequenceOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StartValue>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public long StartValue { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual long get_StartValue();
    [CompilerGeneratedAttribute]
public virtual void set_StartValue(long value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.SequenceOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private int <IncrementBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCyclic>k__BackingField;
    public int IncrementBy { get; public set; }
    public Nullable`1<long> MaxValue { get; public set; }
    public Nullable`1<long> MinValue { get; public set; }
    public bool IsCyclic { get; public set; }
    [CompilerGeneratedAttribute]
public virtual int get_IncrementBy();
    [CompilerGeneratedAttribute]
public virtual void set_IncrementBy(int value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_MaxValue();
    [CompilerGeneratedAttribute]
public virtual void set_MaxValue(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_MinValue();
    [CompilerGeneratedAttribute]
public virtual void set_MinValue(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsCyclic();
    [CompilerGeneratedAttribute]
public virtual void set_IsCyclic(bool value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.SqlOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressTransaction>k__BackingField;
    public string Sql { get; public set; }
    public bool SuppressTransaction { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Sql();
    [CompilerGeneratedAttribute]
public virtual void set_Sql(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_SuppressTransaction();
    [CompilerGeneratedAttribute]
public virtual void set_SuppressTransaction(bool value);
}
public enum Microsoft.EntityFrameworkCore.Migrations.ReferentialAction : Enum {
    public int value__;
    public static ReferentialAction NoAction;
    public static ReferentialAction Restrict;
    public static ReferentialAction Cascade;
    public static ReferentialAction SetNull;
    public static ReferentialAction SetDefault;
}
public class Microsoft.EntityFrameworkCore.Query.AsyncQueryMethodProvider : object {
    private static MethodInfo _shapedQueryMethodInfo;
    private static MethodInfo _defaultIfEmptyShapedQueryMethodInfo;
    private static MethodInfo _queryMethodInfo;
    private static MethodInfo _getResultMethodInfo;
    private static MethodInfo _groupByMethodInfo;
    private static MethodInfo _groupJoinMethodInfo;
    private static MethodInfo _includeMethodInfo;
    private static MethodInfo _createReferenceRelatedEntitiesLoaderMethod;
    private static MethodInfo _createCollectionRelatedEntitiesLoaderMethod;
    private static MethodInfo _injectParametersMethodInfo;
    public MethodInfo ShapedQueryMethod { get; }
    public MethodInfo DefaultIfEmptyShapedQueryMethod { get; }
    public MethodInfo QueryMethod { get; }
    public MethodInfo GetResultMethod { get; }
    public MethodInfo GroupByMethod { get; }
    public Type GroupJoinIncludeType { get; }
    public MethodInfo GroupJoinMethod { get; }
    public MethodInfo IncludeMethod { get; }
    public Type RelatedEntitiesLoaderType { get; }
    public MethodInfo CreateReferenceRelatedEntitiesLoaderMethod { get; }
    public MethodInfo CreateCollectionRelatedEntitiesLoaderMethod { get; }
    public MethodInfo InjectParametersMethod { get; }
    private static AsyncQueryMethodProvider();
    public virtual MethodInfo get_ShapedQueryMethod();
    [UsedImplicitlyAttribute]
private static IAsyncEnumerable`1<T> _ShapedQuery(QueryContext queryContext, ShaperCommandContext shaperCommandContext, IShaper`1<T> shaper);
    public virtual MethodInfo get_DefaultIfEmptyShapedQueryMethod();
    [UsedImplicitlyAttribute]
private static IAsyncEnumerable`1<T> _DefaultIfEmptyShapedQuery(QueryContext queryContext, ShaperCommandContext shaperCommandContext, IShaper`1<T> shaper);
    public virtual MethodInfo get_QueryMethod();
    [UsedImplicitlyAttribute]
private static IAsyncEnumerable`1<ValueBuffer> _Query(QueryContext queryContext, ShaperCommandContext shaperCommandContext, Nullable`1<int> queryIndex);
    public virtual MethodInfo get_GetResultMethod();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Query.AsyncQueryMethodProvider/<GetResult>d__16`1")]
[UsedImplicitlyAttribute]
private static Task`1<TResult> GetResult(IAsyncEnumerable`1<ValueBuffer> valueBuffers, CancellationToken cancellationToken);
    public virtual MethodInfo get_GroupByMethod();
    [UsedImplicitlyAttribute]
private static IAsyncEnumerable`1<IGrouping`2<TKey, TElement>> _GroupBy(IAsyncEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    public virtual Type get_GroupJoinIncludeType();
    public virtual object CreateGroupJoinInclude(IReadOnlyList`1<INavigation> navigationPath, bool querySourceRequiresTracking, object existingGroupJoinInclude, object relatedEntitiesLoaders);
    public virtual MethodInfo get_GroupJoinMethod();
    [UsedImplicitlyAttribute]
private static IAsyncEnumerable`1<TResult> _GroupJoin(RelationalQueryContext queryContext, IAsyncEnumerable`1<ValueBuffer> source, IShaper`1<TOuter> outerShaper, IShaper`1<TInner> innerShaper, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, IAsyncEnumerable`1<TInner>, TResult> resultSelector, AsyncGroupJoinInclude outerGroupJoinInclude, AsyncGroupJoinInclude innerGroupJoinInclude);
    public virtual MethodInfo get_IncludeMethod();
    [UsedImplicitlyAttribute]
private static IAsyncEnumerable`1<T> _Include(RelationalQueryContext queryContext, IAsyncEnumerable`1<T> innerResults, Func`2<T, object> entityAccessor, IReadOnlyList`1<INavigation> navigationPath, IReadOnlyList`1<Func`2<QueryContext, IAsyncRelatedEntitiesLoader>> relatedEntitiesLoaderFactories, bool querySourceRequiresTracking);
    public virtual Type get_RelatedEntitiesLoaderType();
    public virtual MethodInfo get_CreateReferenceRelatedEntitiesLoaderMethod();
    [UsedImplicitlyAttribute]
private static IAsyncRelatedEntitiesLoader _CreateReferenceRelatedEntitiesLoader(int valueBufferOffset, int queryIndex, Func`2<ValueBuffer, object> materializer);
    public virtual MethodInfo get_CreateCollectionRelatedEntitiesLoaderMethod();
    [UsedImplicitlyAttribute]
private static IAsyncRelatedEntitiesLoader _CreateCollectionRelatedEntitiesLoader(QueryContext queryContext, ShaperCommandContext shaperCommandContext, int queryIndex, Func`2<ValueBuffer, object> materializer);
    public virtual MethodInfo get_InjectParametersMethod();
    [UsedImplicitlyAttribute]
private static IAsyncEnumerable`1<TElement> _InjectParameters(QueryContext queryContext, IAsyncEnumerable`1<TElement> source, String[] parameterNames, Object[] parameterValues);
}
public abstract class Microsoft.EntityFrameworkCore.Query.Expressions.AggregateExpression : Expression {
    private Expression _expression;
    public Expression Expression { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    protected AggregateExpression(Expression expression);
    public virtual Expression get_Expression();
    public virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
}
public class Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression : Expression {
    private Expression _expression;
    private string _alias;
    private Expression _sourceExpression;
    [CompilerGeneratedAttribute]
private bool <IsProjected>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <SourceMember>k__BackingField;
    public string Alias { get; public set; }
    public Expression Expression { get; }
    public bool IsProjected { get; public set; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public Expression SourceExpression { get; public set; }
    public MemberInfo SourceMember { get; public set; }
    public AliasExpression(Expression expression);
    public AliasExpression(string alias, Expression expression);
    public virtual string get_Alias();
    public virtual void set_Alias(string value);
    public virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public virtual bool get_IsProjected();
    [CompilerGeneratedAttribute]
public virtual void set_IsProjected(bool value);
    public virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    public virtual Expression get_SourceExpression();
    public virtual void set_SourceExpression(Expression value);
    [CompilerGeneratedAttribute]
public virtual MemberInfo get_SourceMember();
    [CompilerGeneratedAttribute]
public virtual void set_SourceMember(MemberInfo value);
    protected virtual Expression Accept(ExpressionVisitor visitor);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    private bool Equals(AliasExpression other);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression : Expression {
    private IProperty _property;
    private TableExpressionBase _tableExpression;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    public TableExpressionBase Table { get; }
    public string TableAlias { get; }
    public IProperty Property { get; }
    public string Name { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public bool IsNullable { get; public set; }
    public ColumnExpression(string name, IProperty property, TableExpressionBase tableExpression);
    public ColumnExpression(string name, Type type, TableExpressionBase tableExpression);
    public virtual TableExpressionBase get_Table();
    public virtual string get_TableAlias();
    public virtual IProperty get_Property();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    public virtual ExpressionType get_NodeType();
    [CompilerGeneratedAttribute]
public virtual Type get_Type();
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual void set_IsNullable(bool value);
    protected virtual Expression Accept(ExpressionVisitor visitor);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    private bool Equals(ColumnExpression other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression : Expression {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public CountExpression(Type type);
    public virtual ExpressionType get_NodeType();
    [CompilerGeneratedAttribute]
public virtual Type get_Type();
    protected virtual Expression Accept(ExpressionVisitor visitor);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
}
public class Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression : TableExpressionBase {
    private TableExpressionBase _tableExpression;
    public TableExpressionBase TableExpression { get; }
    public CrossJoinExpression(TableExpressionBase tableExpression);
    public virtual TableExpressionBase get_TableExpression();
    protected virtual Expression Accept(ExpressionVisitor visitor);
    public virtual string ToString();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
}
public class Microsoft.EntityFrameworkCore.Query.Expressions.DiscriminatorPredicateExpression : Expression {
    private Expression _predicate;
    [CompilerGeneratedAttribute]
private IQuerySource <QuerySource>k__BackingField;
    public IQuerySource QuerySource { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public bool CanReduce { get; }
    public DiscriminatorPredicateExpression(Expression predicate, IQuerySource querySource);
    [CompilerGeneratedAttribute]
public virtual IQuerySource get_QuerySource();
    public virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    public virtual bool get_CanReduce();
    public virtual Expression Reduce();
    public virtual string ToString();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
}
public class Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    public Expression Expression { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public ExistsExpression(Expression expression);
    [CompilerGeneratedAttribute]
public virtual Expression get_Expression();
    public virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    protected virtual Expression Accept(ExpressionVisitor visitor);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
}
public class Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression : Expression {
    private Type _type;
    [CompilerGeneratedAttribute]
private Expression <Operand>k__BackingField;
    public Expression Operand { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public ExplicitCastExpression(Expression operand, Type type);
    [CompilerGeneratedAttribute]
public virtual Expression get_Operand();
    public virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    protected virtual Expression Accept(ExpressionVisitor visitor);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual string ToString();
}
public class Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression : TableExpressionBase {
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Arguments>k__BackingField;
    public string Sql { get; }
    public Expression Arguments { get; }
    public FromSqlExpression(string sql, Expression arguments, string alias, IQuerySource querySource);
    [CompilerGeneratedAttribute]
public virtual string get_Sql();
    [CompilerGeneratedAttribute]
public virtual Expression get_Arguments();
    protected virtual Expression Accept(ExpressionVisitor visitor);
    public virtual string ToString();
}
public class Microsoft.EntityFrameworkCore.Query.Expressions.InExpression : Expression {
    [CompilerGeneratedAttribute]
private AliasExpression <Operand>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Expression> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectExpression <SubQuery>k__BackingField;
    public AliasExpression Operand { get; }
    public IReadOnlyList`1<Expression> Values { get; }
    public SelectExpression SubQuery { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public InExpression(AliasExpression operand, IReadOnlyList`1<Expression> values);
    public InExpression(AliasExpression operand, SelectExpression subQuery);
    [CompilerGeneratedAttribute]
public virtual AliasExpression get_Operand();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<Expression> get_Values();
    [CompilerGeneratedAttribute]
public virtual SelectExpression get_SubQuery();
    public virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    protected virtual Expression Accept(ExpressionVisitor visitor);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual string ToString();
}
public class Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression : JoinExpressionBase {
    public InnerJoinExpression(TableExpressionBase tableExpression);
    protected virtual Expression Accept(ExpressionVisitor visitor);
    public virtual string ToString();
}
public interface Microsoft.EntityFrameworkCore.Query.Expressions.ISelectExpressionFactory {
    public abstract virtual SelectExpression Create(RelationalQueryCompilationContext queryCompilationContext);
    public abstract virtual SelectExpression Create(RelationalQueryCompilationContext queryCompilationContext, string alias);
}
public class Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression : Expression {
    private Expression _operand;
    public Expression Operand { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public IsNullExpression(Expression operand);
    public virtual Expression get_Operand();
    public virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    protected virtual Expression Accept(ExpressionVisitor visitor);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual string ToString();
}
public abstract class Microsoft.EntityFrameworkCore.Query.Expressions.JoinExpressionBase : TableExpressionBase {
    private TableExpressionBase _tableExpression;
    private Expression _predicate;
    public TableExpressionBase TableExpression { get; }
    public Expression Predicate { get; public set; }
    protected JoinExpressionBase(TableExpressionBase tableExpression);
    public virtual TableExpressionBase get_TableExpression();
    public virtual Expression get_Predicate();
    public virtual void set_Predicate(Expression value);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
}
public class Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression : TableExpressionBase {
    private TableExpressionBase _tableExpression;
    public TableExpressionBase TableExpression { get; }
    public LateralJoinExpression(TableExpressionBase tableExpression);
    public virtual TableExpressionBase get_TableExpression();
    protected virtual Expression Accept(ExpressionVisitor visitor);
    public virtual string ToString();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
}
public class Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression : JoinExpressionBase {
    public LeftOuterJoinExpression(TableExpressionBase tableExpression);
    protected virtual Expression Accept(ExpressionVisitor visitor);
    public virtual string ToString();
}
public class Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <Match>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Pattern>k__BackingField;
    public Expression Match { get; }
    public Expression Pattern { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public LikeExpression(Expression match, Expression pattern);
    [CompilerGeneratedAttribute]
public virtual Expression get_Match();
    [CompilerGeneratedAttribute]
public virtual Expression get_Pattern();
    public virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    protected virtual Expression Accept(ExpressionVisitor visitor);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual string ToString();
}
public class Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression : AggregateExpression {
    public MaxExpression(Expression expression);
    protected virtual Expression Accept(ExpressionVisitor visitor);
}
public class Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression : AggregateExpression {
    public MinExpression(Expression expression);
    protected virtual Expression Accept(ExpressionVisitor visitor);
}
public class Microsoft.EntityFrameworkCore.Query.Expressions.NotNullableExpression : Expression {
    private Expression _operand;
    public Expression Operand { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public bool CanReduce { get; }
    public NotNullableExpression(Expression operand);
    public virtual Expression get_Operand();
    public virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual bool get_CanReduce();
    public virtual Expression Reduce();
}
public class Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression : Expression {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty <Property>k__BackingField;
    public string Name { get; }
    public IProperty Property { get; }
    public string PropertyParameterName { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public PropertyParameterExpression(string name, IProperty property);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual IProperty get_Property();
    public virtual string get_PropertyParameterName();
    public virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    public virtual string ToString();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    protected virtual Expression Accept(ExpressionVisitor visitor);
}
public class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression : TableExpressionBase {
    private static string SystemAliasPrefix;
    private IQuerySqlGeneratorFactory _querySqlGeneratorFactory;
    private RelationalQueryCompilationContext _queryCompilationContext;
    private List`1<Expression> _projection;
    private List`1<TableExpressionBase> _tables;
    private List`1<Ordering> _orderBy;
    private Expression _limit;
    private Expression _offset;
    private int _subqueryDepth;
    private bool _isDistinct;
    [CompilerGeneratedAttribute]
private Expression <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectStarAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsProjectStar>k__BackingField;
    public Expression Predicate { get; public set; }
    public string ProjectStarAlias { get; public set; }
    public Type Type { get; }
    public IReadOnlyList`1<TableExpressionBase> Tables { get; }
    public bool IsProjectStar { get; public set; }
    public bool IsDistinct { get; public set; }
    public Expression Limit { get; public set; }
    public Expression Offset { get; public set; }
    public IReadOnlyList`1<Expression> Projection { get; }
    public IReadOnlyList`1<Ordering> OrderBy { get; }
    public SelectExpression(IQuerySqlGeneratorFactory querySqlGeneratorFactory, RelationalQueryCompilationContext queryCompilationContext);
    public SelectExpression(IQuerySqlGeneratorFactory querySqlGeneratorFactory, RelationalQueryCompilationContext queryCompilationContext, string alias);
    [CompilerGeneratedAttribute]
public virtual Expression get_Predicate();
    [CompilerGeneratedAttribute]
public virtual void set_Predicate(Expression value);
    [CompilerGeneratedAttribute]
public virtual string get_ProjectStarAlias();
    [CompilerGeneratedAttribute]
public virtual void set_ProjectStarAlias(string value);
    public virtual Type get_Type();
    public virtual SelectExpression Clone(string alias);
    public virtual IReadOnlyList`1<TableExpressionBase> get_Tables();
    [CompilerGeneratedAttribute]
public virtual bool get_IsProjectStar();
    [CompilerGeneratedAttribute]
public virtual void set_IsProjectStar(bool value);
    public virtual bool IsIdentityQuery();
    public virtual void AddTable(TableExpressionBase tableExpression, bool createUniqueAlias);
    public virtual void AddTables(IEnumerable`1<TableExpressionBase> tableExpressions);
    public virtual void ClearTables();
    public virtual bool IsCorrelated();
    public virtual bool HandlesQuerySource(IQuerySource querySource);
    public virtual TableExpressionBase GetTableForQuerySource(IQuerySource querySource);
    public virtual bool get_IsDistinct();
    public virtual void set_IsDistinct(bool value);
    public virtual Expression get_Limit();
    public virtual void set_Limit(Expression value);
    public virtual Expression get_Offset();
    public virtual void set_Offset(Expression value);
    private void PushDownIfLimit();
    private void PushDownIfDistinct();
    public virtual SelectExpression PushDownSubquery();
    public virtual IReadOnlyList`1<Expression> get_Projection();
    public virtual int AddToProjection(string column, IProperty property, IQuerySource querySource);
    public virtual int AddToProjection(Expression expression);
    public virtual int AddToProjection(Expression expression, bool resetProjectStar);
    public virtual int AddToProjection(AliasExpression aliasExpression);
    public virtual int AddAliasToProjection(string alias, Expression expression);
    public virtual int AddToProjection(ColumnExpression columnExpression);
    public virtual IEnumerable`1<Type> GetProjectionTypes();
    public virtual void SetProjectionConditionalExpression(ConditionalExpression conditionalExpression);
    public virtual void SetProjectionExpression(Expression expression);
    public virtual void ClearProjection();
    public virtual void ClearColumnProjections();
    public virtual void RemoveRangeFromProjection(int index);
    public virtual void RemoveFromProjection(IEnumerable`1<Ordering> orderBy);
    public virtual int GetProjectionIndex(IProperty property, IQuerySource querySource);
    public virtual AliasExpression AddToOrderBy(string column, IProperty property, TableExpressionBase table, OrderingDirection orderingDirection);
    public virtual void AddToOrderBy(IEnumerable`1<Ordering> orderings);
    public virtual void AddToOrderBy(Ordering ordering);
    public virtual void PrependToOrderBy(IEnumerable`1<Ordering> orderings);
    public virtual IReadOnlyList`1<Ordering> get_OrderBy();
    public virtual void ClearOrderBy();
    public virtual void ExplodeStarProjection();
    public virtual void AddCrossJoin(TableExpressionBase tableExpression, IEnumerable`1<Expression> projection);
    public virtual void AddLateralJoin(TableExpressionBase tableExpression, IEnumerable`1<Expression> projection);
    public virtual JoinExpressionBase AddInnerJoin(TableExpressionBase tableExpression);
    public virtual JoinExpressionBase AddInnerJoin(TableExpressionBase tableExpression, IEnumerable`1<Expression> projection);
    public virtual JoinExpressionBase AddLeftOuterJoin(TableExpressionBase tableExpression);
    public virtual JoinExpressionBase AddLeftOuterJoin(TableExpressionBase tableExpression, IEnumerable`1<Expression> projection);
    private string CreateUniqueProjectionAlias(string currentAlias);
    public virtual void RemoveTable(TableExpressionBase tableExpression);
    protected virtual Expression Accept(ExpressionVisitor visitor);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual IQuerySqlGenerator CreateDefaultQuerySqlGenerator();
    public virtual IQuerySqlGenerator CreateFromSqlQuerySqlGenerator(string sql, Expression arguments);
    public virtual string ToString();
    public virtual Expression UpdateColumnExpression(Expression expression, TableExpressionBase tableExpression);
}
public class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpressionFactory : object {
    private IQuerySqlGeneratorFactory _querySqlGeneratorFactory;
    public SelectExpressionFactory(IQuerySqlGeneratorFactory querySqlGeneratorFactory);
    public virtual SelectExpression Create(RelationalQueryCompilationContext queryCompilationContext);
    public virtual SelectExpression Create(RelationalQueryCompilationContext queryCompilationContext, string alias);
}
[DebuggerDisplayAttribute("{this.FunctionName}({string.Join(", ", this.Arguments)})")]
public class Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression : Expression {
    private ReadOnlyCollection`1<Expression> _arguments;
    [CompilerGeneratedAttribute]
private string <FunctionName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public string FunctionName { get; public set; }
    public IReadOnlyCollection`1<Expression> Arguments { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public SqlFunctionExpression(string functionName, Type returnType);
    public SqlFunctionExpression(string functionName, Type returnType, IEnumerable`1<Expression> arguments);
    [CompilerGeneratedAttribute]
public virtual string get_FunctionName();
    [CompilerGeneratedAttribute]
public virtual void set_FunctionName(string value);
    public virtual IReadOnlyCollection`1<Expression> get_Arguments();
    public virtual ExpressionType get_NodeType();
    [CompilerGeneratedAttribute]
public virtual Type get_Type();
    protected virtual Expression Accept(ExpressionVisitor visitor);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
}
public class Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression : Expression {
    [CompilerGeneratedAttribute]
private ExpressionType <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Right>k__BackingField;
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public ExpressionType Operator { get; }
    public Expression Left { get; }
    public Expression Right { get; }
    public StringCompareExpression(ExpressionType op, Expression left, Expression right);
    public virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    [CompilerGeneratedAttribute]
public virtual ExpressionType get_Operator();
    [CompilerGeneratedAttribute]
public virtual Expression get_Left();
    [CompilerGeneratedAttribute]
public virtual Expression get_Right();
    protected virtual Expression Accept(ExpressionVisitor visitor);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
}
public class Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression : AggregateExpression {
    public SumExpression(Expression expression);
    protected virtual Expression Accept(ExpressionVisitor visitor);
}
public class Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression : TableExpressionBase {
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    public string Table { get; }
    public string Schema { get; }
    public TableExpression(string table, string schema, string alias, IQuerySource querySource);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    protected virtual Expression Accept(ExpressionVisitor visitor);
    public virtual string ToString();
}
public abstract class Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase : Expression {
    private string _alias;
    private IQuerySource _querySource;
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public IQuerySource QuerySource { get; public set; }
    public string Alias { get; public set; }
    protected TableExpressionBase(IQuerySource querySource, string alias);
    public virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    public virtual IQuerySource get_QuerySource();
    public virtual void set_QuerySource(IQuerySource value);
    public virtual string get_Alias();
    public virtual void set_Alias(string value);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
}
public interface Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IExpressionFragmentTranslator {
    public abstract virtual Expression Translate(Expression expression);
}
public interface Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IMemberTranslator {
    public abstract virtual Expression Translate(MemberExpression memberExpression);
}
public interface Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IMethodCallTranslator {
    public abstract virtual Expression Translate(MethodCallExpression methodCallExpression);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.Internal.ContainsTranslator : object {
    private ILogger _logger;
    private static MethodInfo _methodInfo;
    private static MethodInfo _concat;
    public ContainsTranslator(ILogger logger);
    private static ContainsTranslator();
    public virtual Expression Translate(MethodCallExpression methodCallExpression);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.Internal.EndsWithTranslator : object {
    private ILogger _logger;
    private static MethodInfo _methodInfo;
    private static MethodInfo _concat;
    public EndsWithTranslator(ILogger logger);
    private static EndsWithTranslator();
    public virtual Expression Translate(MethodCallExpression methodCallExpression);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.Internal.EnumHasFlagTranslator : object {
    private static MethodInfo _methodInfo;
    private static EnumHasFlagTranslator();
    public virtual Expression Translate(MethodCallExpression methodCallExpression);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.Internal.EqualsTranslator : object {
    private ILogger _logger;
    public EqualsTranslator(ILogger logger);
    public virtual Expression Translate(MethodCallExpression methodCallExpression);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.Internal.IsNullOrEmptyTranslator : object {
    private static MethodInfo _methodInfo;
    private static IsNullOrEmptyTranslator();
    public virtual Expression Translate(MethodCallExpression methodCallExpression);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.Internal.StartsWithTranslator : object {
    private ILogger _logger;
    private static MethodInfo _methodInfo;
    private static MethodInfo _concat;
    public StartsWithTranslator(ILogger logger);
    private static StartsWithTranslator();
    public virtual Expression Translate(MethodCallExpression methodCallExpression);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.Internal.StringCompareTranslator : object {
    private static Dictionary`2<ExpressionType, ExpressionType> _operatorMap;
    private static MethodInfo _methodInfo;
    private static StringCompareTranslator();
    public virtual Expression Translate(Expression expression);
    private static Expression TranslateInternal(Func`2<ExpressionType, ExpressionType> opFunc, ExpressionType op, MethodCallExpression methodCall, ConstantExpression constant);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.Internal.StringConcatTranslator : object {
    private static MethodInfo _stringConcatMethodInfo;
    private static StringConcatTranslator();
    public virtual Expression Translate(Expression expression);
    private static Expression HandleNullTypedConstant(Expression expression);
}
public abstract class Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.MultipleOverloadStaticMethodCallTranslator : object {
    private Type _declaringType;
    private string _clrMethodName;
    private string _sqlFunctionName;
    protected MultipleOverloadStaticMethodCallTranslator(Type declaringType, string clrMethodName, string sqlFunctionName);
    public virtual Expression Translate(MethodCallExpression methodCallExpression);
}
public abstract class Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.ParameterlessInstanceMethodCallTranslator : object {
    private Type _declaringType;
    private string _clrMethodName;
    private string _sqlFunctionName;
    protected ParameterlessInstanceMethodCallTranslator(Type declaringType, string clrMethodName, string sqlFunctionName);
    public virtual Expression Translate(MethodCallExpression methodCallExpression);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.RelationalCompositeExpressionFragmentTranslator : object {
    private List`1<IExpressionFragmentTranslator> _translators;
    public virtual Expression Translate(Expression expression);
    protected virtual void AddTranslators(IEnumerable`1<IExpressionFragmentTranslator> translators);
}
public abstract class Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.RelationalCompositeMemberTranslator : object {
    private List`1<IMemberTranslator> _translators;
    public virtual Expression Translate(MemberExpression memberExpression);
    protected virtual void AddTranslators(IEnumerable`1<IMemberTranslator> translators);
}
public abstract class Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.RelationalCompositeMethodCallTranslator : object {
    private List`1<IMethodCallTranslator> _methodCallTranslators;
    protected RelationalCompositeMethodCallTranslator(ILogger logger);
    public virtual Expression Translate(MethodCallExpression methodCallExpression);
    protected virtual void AddTranslators(IEnumerable`1<IMethodCallTranslator> translators);
}
public abstract class Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.SingleOverloadStaticMethodCallTranslator : object {
    private Type _declaringType;
    private string _clrMethodName;
    private string _sqlFunctionName;
    protected SingleOverloadStaticMethodCallTranslator(Type declaringType, string clrMethodName, string sqlFunctionName);
    public virtual Expression Translate(MethodCallExpression methodCallExpression);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.BufferedEntityShaper`1 : EntityShaper {
    public Type Type { get; }
    public BufferedEntityShaper`1(IQuerySource querySource, string entityType, bool trackingQuery, IKey key, Func`2<ValueBuffer, object> materializer);
    public virtual Type get_Type();
    public virtual TEntity Shape(QueryContext queryContext, ValueBuffer valueBuffer);
    public virtual IShaper`1<TDerived> Cast();
    public virtual EntityShaper WithOffset(int offset);
    public virtual string ToString();
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.BufferedOffsetEntityShaper`1 : BufferedEntityShaper`1<TEntity> {
    public BufferedOffsetEntityShaper`1(IQuerySource querySource, string entityType, bool trackingQuery, IKey key, Func`2<ValueBuffer, object> materializer);
    public virtual TEntity Shape(QueryContext queryContext, ValueBuffer valueBuffer);
    public virtual string ToString();
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositePredicateExpressionVisitor : RelinqExpressionVisitor {
    private bool _useRelationalNulls;
    public CompositePredicateExpressionVisitor(bool useRelationalNulls);
    public virtual Expression Visit(Expression expression);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositePredicateExpressionVisitorFactory : object {
    private IDbContextOptions _contextOptions;
    public CompositePredicateExpressionVisitorFactory(IDbContextOptions contextOptions);
    public virtual ExpressionVisitor Create();
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ConditionalRemovingExpressionVisitor : ExpressionVisitorBase {
    public virtual Expression Visit(Expression node);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ConditionalRemovingExpressionVisitorFactory : object {
    public virtual ExpressionVisitor Create();
}
public abstract class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.EntityShaper : Shaper {
    [CompilerGeneratedAttribute]
private string <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTrackingQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private IKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<ValueBuffer, object> <Materializer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowNullResult>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ValueBufferOffset>k__BackingField;
    protected string EntityType { get; }
    protected bool IsTrackingQuery { get; }
    protected IKey Key { get; }
    protected Func`2<ValueBuffer, object> Materializer { get; }
    protected bool AllowNullResult { get; private set; }
    public int ValueBufferOffset { get; private set; }
    protected EntityShaper(IQuerySource querySource, string entityType, bool trackingQuery, IKey key, Func`2<ValueBuffer, object> materializer);
    [CompilerGeneratedAttribute]
protected virtual string get_EntityType();
    [CompilerGeneratedAttribute]
protected virtual bool get_IsTrackingQuery();
    [CompilerGeneratedAttribute]
protected virtual IKey get_Key();
    [CompilerGeneratedAttribute]
protected virtual Func`2<ValueBuffer, object> get_Materializer();
    [CompilerGeneratedAttribute]
protected virtual bool get_AllowNullResult();
    [CompilerGeneratedAttribute]
private void set_AllowNullResult(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_ValueBufferOffset();
    [CompilerGeneratedAttribute]
private void set_ValueBufferOffset(int value);
    public abstract virtual IShaper`1<TDerived> Cast();
    public abstract virtual EntityShaper WithOffset(int offset);
    protected virtual EntityShaper SetOffset(int offset);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.EqualityPredicateExpandingVisitor : RelinqExpressionVisitor {
    protected virtual Expression VisitBinary(BinaryExpression node);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.EqualityPredicateInExpressionOptimizer : RelinqExpressionVisitor {
    protected virtual Expression VisitBinary(BinaryExpression node);
    private Expression Optimize(BinaryExpression binaryExpression, ExpressionType equalityType, Func`3<AliasExpression, List`1<Expression>, Expression> inExpressionFactory);
    private static AliasExpression MatchEqualityExpression(Expression expression, ExpressionType equalityType, Expression& nonColumnExpression);
    private static AliasExpression MatchInExpression(Expression expression, IReadOnlyList`1& values);
    private static AliasExpression MatchNotInExpression(Expression expression, IReadOnlyList`1& values);
}
public interface Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ICompositePredicateExpressionVisitorFactory {
    public abstract virtual ExpressionVisitor Create();
}
public interface Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IConditionalRemovingExpressionVisitorFactory {
    public abstract virtual ExpressionVisitor Create();
}
public interface Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IIncludeExpressionVisitorFactory {
    public abstract virtual ExpressionVisitor Create(IQuerySource querySource, IReadOnlyList`1<INavigation> navigationPath, RelationalQueryCompilationContext relationalQueryCompilationContext, IReadOnlyList`1<int> queryIndexes, bool querySourceRequiresTracking);
}
public interface Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMaterializerFactory {
    public abstract virtual Expression`1<Func`2<ValueBuffer, object>> CreateMaterializer(IEntityType entityType, SelectExpression selectExpression, Func`3<IProperty, SelectExpression, int> projectionAdder, IQuerySource querySource);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IncludeExpressionVisitor : ExpressionVisitorBase {
    private ISelectExpressionFactory _selectExpressionFactory;
    private ICompositePredicateExpressionVisitorFactory _compositePredicateExpressionVisitorFactory;
    private IMaterializerFactory _materializerFactory;
    private IShaperCommandContextFactory _shaperCommandContextFactory;
    private IRelationalAnnotationProvider _relationalAnnotationProvider;
    private IQuerySqlGeneratorFactory _querySqlGeneratorFactory;
    private IQuerySource _querySource;
    private IReadOnlyList`1<INavigation> _navigationPath;
    private RelationalQueryCompilationContext _queryCompilationContext;
    private IReadOnlyList`1<int> _queryIndexes;
    private bool _querySourceRequiresTracking;
    private static MethodInfo _createRelatedEntitiesLoadersMethodInfo;
    public IncludeExpressionVisitor(ISelectExpressionFactory selectExpressionFactory, ICompositePredicateExpressionVisitorFactory compositePredicateExpressionVisitorFactory, IMaterializerFactory materializerFactory, IShaperCommandContextFactory shaperCommandContextFactory, IRelationalAnnotationProvider relationalAnnotationProvider, IQuerySqlGeneratorFactory querySqlGeneratorFactory, IQuerySource querySource, IReadOnlyList`1<INavigation> navigationPath, RelationalQueryCompilationContext queryCompilationContext, IReadOnlyList`1<int> queryIndexes, bool querySourceRequiresTracking);
    private static IncludeExpressionVisitor();
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    private Expression TryMatchGroupJoinShaper(MethodCallExpression methodCallExpression, int shaperArgumentIndex);
    [UsedImplicitlyAttribute]
private NewArrayExpression CreateRelatedEntitiesLoaders(IQuerySource querySource, IEnumerable`1<INavigation> navigationPath);
    private JoinExpressionBase AdjustJoinExpression(SelectExpression selectExpression, JoinExpressionBase joinExpression);
    private static void LiftOrderBy(SelectExpression innerJoinSelectExpression, SelectExpression targetSelectExpression, TableExpressionBase innerJoinExpression);
    private Expression BuildJoinEqualityExpression(INavigation navigation, TableExpressionBase targetTableExpression, TableExpressionBase joinExpression, IQuerySource querySource);
    private Expression BuildColumnExpression(IReadOnlyCollection`1<Expression> projections, TableExpressionBase tableExpression, IProperty property, IQuerySource querySource);
    private static IEnumerable`1<Expression> ExtractProjections(TableExpressionBase tableExpression);
    private static void AddToPredicate(SelectExpression selectExpression, Expression predicateToAdd);
    private static bool IsOrderingOnNonPrincipalKeyProperties(IEnumerable`1<Ordering> orderings, IReadOnlyList`1<IProperty> properties);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IncludeExpressionVisitorFactory : object {
    private ISelectExpressionFactory _selectExpressionFactory;
    private ICompositePredicateExpressionVisitorFactory _compositePredicateExpressionVisitorFactory;
    private IMaterializerFactory _materializerFactory;
    private IShaperCommandContextFactory _shaperCommandContextFactory;
    private IRelationalAnnotationProvider _relationalAnnotationProvider;
    private IQuerySqlGeneratorFactory _querySqlGeneratorFactory;
    public IncludeExpressionVisitorFactory(ISelectExpressionFactory selectExpressionFactory, ICompositePredicateExpressionVisitorFactory compositePredicateExpressionVisitorFactory, IMaterializerFactory materializerFactory, IShaperCommandContextFactory shaperCommandContextFactory, IRelationalAnnotationProvider relationalAnnotationProvider, IQuerySqlGeneratorFactory querySqlGeneratorFactory);
    public virtual ExpressionVisitor Create(IQuerySource querySource, IReadOnlyList`1<INavigation> navigationPath, RelationalQueryCompilationContext relationalQueryCompilationContext, IReadOnlyList`1<int> queryIndexes, bool querySourceRequiresTracking);
}
public interface Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IQueryFlattenerFactory {
    public abstract virtual QueryFlattener Create(IQuerySource querySource, RelationalQueryCompilationContext relationalQueryCompilationContext, MethodInfo operatorToFlatten, int readerOffset);
}
public interface Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IShaper`1 {
    public abstract virtual T Shape(QueryContext queryContext, ValueBuffer valueBuffer);
    public abstract virtual bool IsShaperForQuerySource(IQuerySource querySource);
    public abstract virtual void SaveAccessorExpression(QuerySourceMapping querySourceMapping);
    public abstract virtual Expression GetAccessorExpression(IQuerySource querySource);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IsNullExpressionBuildingVisitor : RelinqExpressionVisitor {
    private bool _nullConstantAdded;
    [CompilerGeneratedAttribute]
private Expression <ResultExpression>k__BackingField;
    public Expression ResultExpression { get; private set; }
    [CompilerGeneratedAttribute]
public virtual Expression get_ResultExpression();
    [CompilerGeneratedAttribute]
private void set_ResultExpression(Expression value);
    protected virtual Expression VisitConstant(ConstantExpression node);
    protected virtual Expression VisitBinary(BinaryExpression node);
    protected virtual Expression VisitExtension(Expression node);
    protected virtual Expression VisitConditional(ConditionalExpression node);
    private static Expression CombineExpressions(Expression left, Expression right, ExpressionType expressionType);
    private void AddToResult(Expression expression);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MaterializerFactory : object {
    private IEntityMaterializerSource _entityMaterializerSource;
    private IRelationalAnnotationProvider _relationalAnnotationProvider;
    private static MethodInfo _createUnableToDiscriminateException;
    public MaterializerFactory(IEntityMaterializerSource entityMaterializerSource, IRelationalAnnotationProvider relationalAnnotationProvider);
    private static MaterializerFactory();
    public virtual Expression`1<Func`2<ValueBuffer, object>> CreateMaterializer(IEntityType entityType, SelectExpression selectExpression, Func`3<IProperty, SelectExpression, int> projectionAdder, IQuerySource querySource);
    [UsedImplicitlyAttribute]
private static Exception CreateUnableToDiscriminateException(IEntityType entityType);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.PredicateNegationExpressionOptimizer : RelinqExpressionVisitor {
    private static Dictionary`2<ExpressionType, ExpressionType> _nodeTypeMapping;
    private static PredicateNegationExpressionOptimizer();
    protected virtual Expression VisitBinary(BinaryExpression node);
    private static Expression BuildIsNullExpression(Expression expression);
    protected virtual Expression VisitUnary(UnaryExpression node);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.PredicateReductionExpressionOptimizer : RelinqExpressionVisitor {
    protected virtual Expression VisitBinary(BinaryExpression node);
    private bool NegatedNullableAliasOrColumn(Expression expression);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.QueryFlattener : object {
    private IQuerySource _querySource;
    private MethodInfo _operatorToFlatten;
    private RelationalQueryCompilationContext _relationalQueryCompilationContext;
    private int _readerOffset;
    private static MethodInfo _createCompositeShaperMethodInfo;
    public QueryFlattener(IQuerySource querySource, RelationalQueryCompilationContext relationalQueryCompilationContext, MethodInfo operatorToFlatten, int readerOffset);
    private static QueryFlattener();
    public virtual Expression Flatten(MethodCallExpression methodCallExpression);
    [UsedImplicitlyAttribute]
private static CompositeShaper`3<TOuter, TInner, TResult> CreateCompositeShaper(IQuerySource querySource, IShaper`1<TOuter> outerShaper, IShaper`1<TInner> innerShaper, Func`3<TOuter, TInner, TResult> materializer);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.QueryFlattenerFactory : object {
    public virtual QueryFlattener Create(IQuerySource querySource, RelationalQueryCompilationContext relationalQueryCompilationContext, MethodInfo operatorToFlatten, int readerOffset);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.RelationalNullsExpandingVisitor : RelationalNullsExpressionVisitorBase {
    protected virtual Expression VisitBinary(BinaryExpression node);
    protected virtual Expression VisitExtension(Expression node);
    private static Expression UnwrapConvertExpression(Expression expression, Type& conversionResultType);
    private static Expression ExpandNullableEqualNullable(Expression left, Expression right, Expression leftIsNull, Expression rightIsNull);
    private static Expression ExpandNegatedNullableEqualNullable(Expression left, Expression right, Expression leftIsNull, Expression rightIsNull);
    private static Expression ExpandNullableEqualNonNullable(Expression left, Expression right, Expression leftIsNull);
    private static Expression ExpandNegatedNullableEqualNonNullable(Expression left, Expression right, Expression leftIsNull);
    private static Expression ExpandNonNullableEqualNullable(Expression left, Expression right, Expression rightIsNull);
    private static Expression ExpandNegatedNonNullableEqualNullable(Expression left, Expression right, Expression rightIsNull);
    private static Expression ExpandNullableNotEqualNullable(Expression left, Expression right, Expression leftIsNull, Expression rightIsNull);
    private static Expression ExpandNegatedNullableNotEqualNullable(Expression left, Expression right, Expression leftIsNull, Expression rightIsNull);
    private static Expression ExpandNullableNotEqualNonNullable(Expression left, Expression right, Expression leftIsNull);
    private static Expression ExpandNegatedNullableNotEqualNonNullable(Expression left, Expression right, Expression leftIsNull);
    private static Expression ExpandNonNullableNotEqualNullable(Expression left, Expression right, Expression rightIsNull);
    private static Expression ExpandNegatedNonNullableNotEqualNullable(Expression left, Expression right, Expression rightIsNull);
}
public abstract class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.RelationalNullsExpressionVisitorBase : RelinqExpressionVisitor {
    protected virtual Expression BuildIsNullExpression(Expression expression);
    protected virtual Expression VisitExtension(Expression node);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.RelationalNullsOptimizedExpandingVisitor : RelationalNullsExpressionVisitorBase {
    [CompilerGeneratedAttribute]
private bool <IsOptimalExpansion>k__BackingField;
    public bool IsOptimalExpansion { get; private set; }
    [CompilerGeneratedAttribute]
public virtual bool get_IsOptimalExpansion();
    [CompilerGeneratedAttribute]
private void set_IsOptimalExpansion(bool value);
    protected virtual Expression VisitBinary(BinaryExpression node);
    protected virtual Expression VisitUnary(UnaryExpression node);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ResultTransformingExpressionVisitor`1 : ExpressionVisitorBase {
    private RelationalQueryCompilationContext _relationalQueryCompilationContext;
    public ResultTransformingExpressionVisitor`1(IQuerySource outerQuerySource, RelationalQueryCompilationContext relationalQueryCompilationContext);
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
}
public abstract class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.Shaper : object {
    private IQuerySource _querySource;
    private Expression _accessorExpression;
    public Type Type { get; }
    protected IQuerySource QuerySource { get; }
    protected Shaper(IQuerySource querySource);
    public virtual bool IsShaperForQuerySource(IQuerySource querySource);
    public virtual void UpdateQuerySource(IQuerySource querySource);
    public abstract virtual Type get_Type();
    protected virtual IQuerySource get_QuerySource();
    public virtual void SaveAccessorExpression(QuerySourceMapping querySourceMapping);
    public virtual Expression GetAccessorExpression(IQuerySource querySource);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.UnbufferedEntityShaper`1 : EntityShaper {
    public Type Type { get; }
    public UnbufferedEntityShaper`1(IQuerySource querySource, string entityType, bool trackingQuery, IKey key, Func`2<ValueBuffer, object> materializer);
    public virtual Type get_Type();
    public virtual TEntity Shape(QueryContext queryContext, ValueBuffer valueBuffer);
    public virtual IShaper`1<TDerived> Cast();
    public virtual EntityShaper WithOffset(int offset);
    public virtual string ToString();
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.UnbufferedOffsetEntityShaper`1 : UnbufferedEntityShaper`1<TEntity> {
    public UnbufferedOffsetEntityShaper`1(IQuerySource querySource, string entityType, bool trackingQuery, IKey key, Func`2<ValueBuffer, object> materializer);
    public virtual TEntity Shape(QueryContext queryContext, ValueBuffer valueBuffer);
    public virtual string ToString();
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ValueBufferShaper : Shaper {
    public Type Type { get; }
    public ValueBufferShaper(IQuerySource querySource);
    public virtual Type get_Type();
    public virtual ValueBuffer Shape(QueryContext queryContext, ValueBuffer valueBuffer);
}
public interface Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ISqlTranslatingExpressionVisitorFactory {
    public abstract virtual SqlTranslatingExpressionVisitor Create(RelationalQueryModelVisitor queryModelVisitor, SelectExpression targetSelectExpression, Expression topLevelPredicate, bool bindParentQueries, bool inProjection);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor : EntityQueryableExpressionVisitor {
    private IModel _model;
    private ISelectExpressionFactory _selectExpressionFactory;
    private IMaterializerFactory _materializerFactory;
    private IShaperCommandContextFactory _shaperCommandContextFactory;
    private IRelationalAnnotationProvider _relationalAnnotationProvider;
    private IQuerySource _querySource;
    private static MethodInfo _createEntityShaperMethodInfo;
    private RelationalQueryModelVisitor QueryModelVisitor { get; }
    public RelationalEntityQueryableExpressionVisitor(IModel model, ISelectExpressionFactory selectExpressionFactory, IMaterializerFactory materializerFactory, IShaperCommandContextFactory shaperCommandContextFactory, IRelationalAnnotationProvider relationalAnnotationProvider, RelationalQueryModelVisitor queryModelVisitor, IQuerySource querySource);
    private static RelationalEntityQueryableExpressionVisitor();
    private RelationalQueryModelVisitor get_QueryModelVisitor();
    protected virtual Expression VisitSubQuery(SubQueryExpression expression);
    protected virtual Expression VisitMember(MemberExpression node);
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    protected virtual Expression VisitEntityQueryable(Type elementType);
    private Shaper CreateShaper(Type elementType, IEntityType entityType, SelectExpression selectExpression);
    private void DiscriminateProjectionQuery(IEntityType entityType, SelectExpression selectExpression, IQuerySource querySource);
    [UsedImplicitlyAttribute]
private static IShaper`1<TEntity> CreateEntityShaper(IQuerySource querySource, string entityType, bool trackingQuery, IKey key, Func`2<ValueBuffer, object> materializer, bool useQueryBuffer);
    [CompilerGeneratedAttribute]
private int <VisitMember>b__10_0(IProperty property, IQuerySource querySource, SelectExpression selectExpression);
    [CompilerGeneratedAttribute]
private int <VisitMethodCall>b__11_0(IProperty property, IQuerySource querySource, SelectExpression selectExpression);
    [CompilerGeneratedAttribute]
private bool <VisitEntityQueryable>b__12_0(FromSqlResultOperator a);
    [CompilerGeneratedAttribute]
private int <CreateShaper>b__13_0(IProperty p, SelectExpression se);
    [CompilerGeneratedAttribute]
private ConstantExpression <DiscriminateProjectionQuery>b__14_0(IEntityType concreteEntityType);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitorFactory : object {
    private IModel _model;
    private ISelectExpressionFactory _selectExpressionFactory;
    private IMaterializerFactory _materializerFactory;
    private IShaperCommandContextFactory _shaperCommandContextFactory;
    private IRelationalAnnotationProvider _relationalAnnotationProvider;
    public RelationalEntityQueryableExpressionVisitorFactory(IModel model, ISelectExpressionFactory selectExpressionFactory, IMaterializerFactory materializerFactory, IShaperCommandContextFactory shaperCommandContextFactory, IRelationalAnnotationProvider relationalAnnotationProvider);
    public virtual ExpressionVisitor Create(EntityQueryModelVisitor queryModelVisitor, IQuerySource querySource);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalProjectionExpressionVisitor : ProjectionExpressionVisitor {
    private ISqlTranslatingExpressionVisitorFactory _sqlTranslatingExpressionVisitorFactory;
    private IEntityMaterializerSource _entityMaterializerSource;
    private IQuerySource _querySource;
    private RelationalQueryModelVisitor QueryModelVisitor { get; }
    public RelationalProjectionExpressionVisitor(ISqlTranslatingExpressionVisitorFactory sqlTranslatingExpressionVisitorFactory, IEntityMaterializerSource entityMaterializerSource, RelationalQueryModelVisitor queryModelVisitor, IQuerySource querySource);
    private RelationalQueryModelVisitor get_QueryModelVisitor();
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    protected virtual Expression VisitNew(NewExpression expression);
    public virtual Expression Visit(Expression node);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalProjectionExpressionVisitorFactory : object {
    private ISqlTranslatingExpressionVisitorFactory _sqlTranslatingExpressionVisitorFactory;
    private IEntityMaterializerSource _entityMaterializerSource;
    public RelationalProjectionExpressionVisitorFactory(ISqlTranslatingExpressionVisitorFactory sqlTranslatingExpressionVisitorFactory, IEntityMaterializerSource entityMaterializerSource);
    public virtual ExpressionVisitor Create(EntityQueryModelVisitor entityQueryModelVisitor, IQuerySource querySource);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor : ThrowingExpressionVisitor {
    private static Dictionary`2<ExpressionType, ExpressionType> _inverseOperatorMap;
    private IRelationalAnnotationProvider _relationalAnnotationProvider;
    private IExpressionFragmentTranslator _compositeExpressionFragmentTranslator;
    private IMethodCallTranslator _methodCallTranslator;
    private IMemberTranslator _memberTranslator;
    private RelationalQueryModelVisitor _queryModelVisitor;
    private IRelationalTypeMapper _relationalTypeMapper;
    private SelectExpression _targetSelectExpression;
    private Expression _topLevelPredicate;
    private bool _bindParentQueries;
    private bool _inProjection;
    [CompilerGeneratedAttribute]
private Expression <ClientEvalPredicate>k__BackingField;
    public Expression ClientEvalPredicate { get; private set; }
    public SqlTranslatingExpressionVisitor(IRelationalAnnotationProvider relationalAnnotationProvider, IExpressionFragmentTranslator compositeExpressionFragmentTranslator, IMethodCallTranslator methodCallTranslator, IMemberTranslator memberTranslator, IRelationalTypeMapper relationalTypeMapper, RelationalQueryModelVisitor queryModelVisitor, SelectExpression targetSelectExpression, Expression topLevelPredicate, bool bindParentQueries, bool inProjection);
    private static SqlTranslatingExpressionVisitor();
    [CompilerGeneratedAttribute]
public virtual Expression get_ClientEvalPredicate();
    [CompilerGeneratedAttribute]
private void set_ClientEvalPredicate(Expression value);
    public virtual Expression Visit(Expression expression);
    protected virtual Expression VisitBinary(BinaryExpression expression);
    protected virtual Expression VisitConditional(ConditionalExpression expression);
    private static Expression Invert(Expression test);
    private Expression TryRemoveNullCheck(ConditionalExpression node);
    private static Expression UnfoldStructuralComparison(ExpressionType expressionType, Expression expression);
    private Expression ProcessComparisonExpression(BinaryExpression binaryExpression);
    private static Expression TransformNullComparison(Expression left, Expression right, ExpressionType expressionType);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    protected virtual Expression VisitMember(MemberExpression expression);
    private static AliasExpression TryBindParentExpression(RelationalQueryModelVisitor queryModelVisitor, Func`2<RelationalQueryModelVisitor, AliasExpression> binder);
    private AliasExpression CreateAliasedColumnExpression(IProperty property, IQuerySource querySource, SelectExpression selectExpression);
    private AliasExpression CreateAliasedColumnExpressionCore(IProperty property, IQuerySource querySource, SelectExpression selectExpression);
    protected virtual Expression VisitUnary(UnaryExpression expression);
    protected virtual Expression VisitNew(NewExpression expression);
    protected virtual Expression VisitSubQuery(SubQueryExpression expression);
    protected virtual Expression VisitConstant(ConstantExpression expression);
    protected virtual Expression VisitParameter(ParameterExpression expression);
    protected virtual Expression VisitExtension(Expression expression);
    protected virtual Expression VisitQuerySourceReference(QuerySourceReferenceExpression expression);
    protected virtual TResult VisitUnhandledItem(TItem unhandledItem, string visitMethod, Func`2<TItem, TResult> baseBehavior);
    protected virtual Exception CreateUnhandledItemException(T unhandledItem, string visitMethod);
    [CompilerGeneratedAttribute]
private Expression <VisitMethodCall>b__25_1(Expression e);
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitorFactory : object {
    private IRelationalAnnotationProvider _relationalAnnotationProvider;
    private IExpressionFragmentTranslator _compositeExpressionFragmentTranslator;
    private IMethodCallTranslator _methodCallTranslator;
    private IMemberTranslator _memberTranslator;
    private IRelationalTypeMapper _relationalTypeMapper;
    public SqlTranslatingExpressionVisitorFactory(IRelationalAnnotationProvider relationalAnnotationProvider, IExpressionFragmentTranslator compositeExpressionFragmentTranslator, IMethodCallTranslator methodCallTranslator, IMemberTranslator memberTranslator, IRelationalTypeMapper relationalTypeMapper);
    public virtual SqlTranslatingExpressionVisitor Create(RelationalQueryModelVisitor queryModelVisitor, SelectExpression targetSelectExpression, Expression topLevelPredicate, bool bindParentQueries, bool inProjection);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.AsyncGroupJoinInclude : GroupJoinIncludeBase {
    private IReadOnlyList`1<Func`2<QueryContext, IAsyncRelatedEntitiesLoader>> _relatedEntitiesLoaderFactories;
    private AsyncGroupJoinInclude _previous;
    public AsyncGroupJoinInclude(IReadOnlyList`1<INavigation> navigationPath, IReadOnlyList`1<Func`2<QueryContext, IAsyncRelatedEntitiesLoader>> relatedEntitiesLoaderFactories, bool querySourceRequiresTracking);
    public virtual AsyncGroupJoinInclude WithEntityAccessor(Delegate entityAccessor);
    public virtual void SetPrevious(AsyncGroupJoinInclude previous);
    public virtual AsyncGroupJoinIncludeContext CreateIncludeContext(RelationalQueryContext queryContext);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.AsyncIncludeCollectionIterator : object {
    private IAsyncEnumerator`1<ValueBuffer> _relatedValuesEnumerator;
    private bool _hasRemainingRows;
    private bool _moveNextPending;
    public AsyncIncludeCollectionIterator(IAsyncEnumerator`1<ValueBuffer> relatedValuesEnumerator);
    public virtual IAsyncEnumerable`1<ValueBuffer> GetRelatedValues(IIncludeKeyComparer keyComparer);
    public virtual void Dispose();
}
public class Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable : object {
    private RelationalQueryContext _relationalQueryContext;
    private ShaperCommandContext _shaperCommandContext;
    private Nullable`1<int> _queryIndex;
    public AsyncQueryingEnumerable(RelationalQueryContext relationalQueryContext, ShaperCommandContext shaperCommandContext, Nullable`1<int> queryIndex);
    public virtual IAsyncEnumerator`1<ValueBuffer> GetEnumerator();
}
public class Microsoft.EntityFrameworkCore.Query.Internal.GroupJoinInclude : GroupJoinIncludeBase {
    private IReadOnlyList`1<Func`2<QueryContext, IRelatedEntitiesLoader>> _relatedEntitiesLoaderFactories;
    private GroupJoinInclude _previous;
    public GroupJoinInclude(IReadOnlyList`1<INavigation> navigationPath, IReadOnlyList`1<Func`2<QueryContext, IRelatedEntitiesLoader>> relatedEntitiesLoaderFactories, bool querySourceRequiresTracking);
    public virtual GroupJoinInclude WithEntityAccessor(Delegate entityAccessor);
    public virtual void SetPrevious(GroupJoinInclude previous);
    public virtual GroupJoinIncludeContext CreateIncludeContext(RelationalQueryContext queryContext);
}
public abstract class Microsoft.EntityFrameworkCore.Query.Internal.GroupJoinIncludeBase : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<INavigation> <NavigationPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <QuerySourceRequiresTracking>k__BackingField;
    [CompilerGeneratedAttribute]
private Delegate <EntityAccessor>k__BackingField;
    protected IReadOnlyList`1<INavigation> NavigationPath { get; }
    protected bool QuerySourceRequiresTracking { get; }
    public Delegate EntityAccessor { get; protected set; }
    protected GroupJoinIncludeBase(IReadOnlyList`1<INavigation> navigationPath, bool querySourceRequiresTracking);
    [CompilerGeneratedAttribute]
protected virtual IReadOnlyList`1<INavigation> get_NavigationPath();
    [CompilerGeneratedAttribute]
protected virtual bool get_QuerySourceRequiresTracking();
    [CompilerGeneratedAttribute]
public virtual Delegate get_EntityAccessor();
    [CompilerGeneratedAttribute]
protected virtual void set_EntityAccessor(Delegate value);
    public virtual void Dispose();
}
public class Microsoft.EntityFrameworkCore.Query.Internal.IncludeCollectionIterator : object {
    private IEnumerator`1<ValueBuffer> _relatedValuesEnumerator;
    private bool _hasRemainingRows;
    private bool _initialized;
    public IncludeCollectionIterator(IEnumerator`1<ValueBuffer> relatedValuesEnumerator);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Query.Internal.IncludeCollectionIterator/<GetRelatedValues>d__4")]
public virtual IEnumerable`1<ValueBuffer> GetRelatedValues(IIncludeKeyComparer keyComparer);
    public virtual void Dispose();
}
public interface Microsoft.EntityFrameworkCore.Query.Internal.IShaperCommandContextFactory {
    public abstract virtual ShaperCommandContext Create(Func`1<IQuerySqlGenerator> sqlGeneratorFunc);
}
public interface Microsoft.EntityFrameworkCore.Query.Internal.IValueBufferCursor {
    public ValueBuffer Current { get; }
    public abstract virtual ValueBuffer get_Current();
    public abstract virtual void BufferAll();
    public abstract virtual Task BufferAllAsync(CancellationToken cancellationToken);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable : object {
    private RelationalQueryContext _relationalQueryContext;
    private ShaperCommandContext _shaperCommandContext;
    private Nullable`1<int> _queryIndex;
    public QueryingEnumerable(RelationalQueryContext relationalQueryContext, ShaperCommandContext shaperCommandContext, Nullable`1<int> queryIndex);
    public virtual IEnumerator`1<ValueBuffer> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.EntityFrameworkCore.Query.Internal.RelationalCompiledQueryCacheKeyGenerator : CompiledQueryCacheKeyGenerator {
    private IDbContextOptions _contextOptions;
    public RelationalCompiledQueryCacheKeyGenerator(IModel model, ICurrentDbContext currentContext, IDbContextOptions contextOptions);
    public virtual object GenerateCacheKey(Expression query, bool async);
    protected RelationalCompiledQueryCacheKey GenerateCacheKeyCore(Expression query, bool async);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.RelationalExpressionPrinter : ExpressionPrinter {
}
public class Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryContextFactory : QueryContextFactory {
    private IRelationalConnection _connection;
    [CompilerGeneratedAttribute]
private IExecutionStrategyFactory <ExecutionStrategyFactory>k__BackingField;
    protected IExecutionStrategyFactory ExecutionStrategyFactory { get; }
    public RelationalQueryContextFactory(ICurrentDbContext currentContext, IConcurrencyDetector concurrencyDetector, IRelationalConnection connection, IExecutionStrategyFactory executionStrategyFactory);
    [CompilerGeneratedAttribute]
protected virtual IExecutionStrategyFactory get_ExecutionStrategyFactory();
    public virtual QueryContext Create();
}
public class Microsoft.EntityFrameworkCore.Query.Internal.RelationalResultOperatorHandler : object {
    private static Dictionary`2<Type, Func`2<HandlerContext, Expression>> _resultHandlers;
    private IModel _model;
    private IRelationalAnnotationProvider _relationalAnnotationProvider;
    private ISqlTranslatingExpressionVisitorFactory _sqlTranslatingExpressionVisitorFactory;
    private ISelectExpressionFactory _selectExpressionFactory;
    private ResultOperatorHandler _resultOperatorHandler;
    private static MethodInfo _createDowncastingShaperMethodInfo;
    private static MethodInfo _transformClientExpressionMethodInfo;
    public RelationalResultOperatorHandler(IModel model, IRelationalAnnotationProvider relationalAnnotationProvider, ISqlTranslatingExpressionVisitorFactory sqlTranslatingExpressionVisitorFactory, ISelectExpressionFactory selectExpressionFactory, ResultOperatorHandler resultOperatorHandler);
    private static RelationalResultOperatorHandler();
    public virtual Expression HandleResultOperator(EntityQueryModelVisitor entityQueryModelVisitor, ResultOperatorBase resultOperator, QueryModel queryModel);
    private static Expression HandleAll(HandlerContext handlerContext);
    private static Expression HandleAny(HandlerContext handlerContext);
    private static Expression HandleCast(HandlerContext handlerContext);
    private static Expression HandleContains(HandlerContext handlerContext);
    private static Expression HandleCount(HandlerContext handlerContext);
    private static Expression HandleDefaultIfEmpty(HandlerContext handlerContext);
    private static Expression HandleDistinct(HandlerContext handlerContext);
    private static Expression HandleFirst(HandlerContext handlerContext);
    private static Expression HandleGroup(HandlerContext handlerContext);
    private static Expression HandleLast(HandlerContext handlerContext);
    private static Expression HandleLongCount(HandlerContext handlerContext);
    private static Expression HandleMin(HandlerContext handlerContext);
    private static Expression HandleMax(HandlerContext handlerContext);
    private static Expression HandleOfType(HandlerContext handlerContext);
    [UsedImplicitlyAttribute]
private static IShaper`1<TDerived> CreateDowncastingShaper(EntityShaper shaper);
    private static Expression HandleSingle(HandlerContext handlerContext);
    private static Expression HandleSkip(HandlerContext handlerContext);
    private static Expression HandleSum(HandlerContext handlerContext);
    private static Expression HandleTake(HandlerContext handlerContext);
    private static void SetProjectionConditionalExpression(HandlerContext handlerContext, ConditionalExpression conditionalExpression);
    private static Expression TransformClientExpression(HandlerContext handlerContext);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext : object {
    private ConcurrentDictionary`2<CommandCacheKey, IRelationalCommand> _commandCache;
    private IRelationalValueBufferFactoryFactory _valueBufferFactoryFactory;
    private IRelationalValueBufferFactory _valueBufferFactory;
    [CompilerGeneratedAttribute]
private Func`1<IQuerySqlGenerator> <QuerySqlGeneratorFactory>k__BackingField;
    public Func`1<IQuerySqlGenerator> QuerySqlGeneratorFactory { get; }
    public IRelationalValueBufferFactory ValueBufferFactory { get; }
    public ShaperCommandContext(IRelationalValueBufferFactoryFactory valueBufferFactoryFactory, Func`1<IQuerySqlGenerator> querySqlGeneratorFactory);
    [CompilerGeneratedAttribute]
public virtual Func`1<IQuerySqlGenerator> get_QuerySqlGeneratorFactory();
    public virtual IRelationalValueBufferFactory get_ValueBufferFactory();
    public virtual IRelationalCommand GetRelationalCommand(IReadOnlyDictionary`2<string, object> parameters);
    public virtual void NotifyReaderCreated(DbDataReader dataReader);
    [CompilerGeneratedAttribute]
private IRelationalValueBufferFactory <NotifyReaderCreated>b__11_0(FactoryAndReader s);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContextFactory : object {
    private IRelationalValueBufferFactoryFactory _valueBufferFactoryFactory;
    public ShaperCommandContextFactory(IRelationalValueBufferFactoryFactory valueBufferFactoryFactory);
    public virtual ShaperCommandContext Create(Func`1<IQuerySqlGenerator> sqlGeneratorFunc);
}
public interface Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider {
    public MethodInfo GroupJoinMethod { get; }
    public MethodInfo GroupByMethod { get; }
    public MethodInfo ShapedQueryMethod { get; }
    public MethodInfo DefaultIfEmptyShapedQueryMethod { get; }
    public MethodInfo QueryMethod { get; }
    public MethodInfo GetResultMethod { get; }
    public MethodInfo IncludeMethod { get; }
    public Type RelatedEntitiesLoaderType { get; }
    public MethodInfo CreateReferenceRelatedEntitiesLoaderMethod { get; }
    public MethodInfo CreateCollectionRelatedEntitiesLoaderMethod { get; }
    public MethodInfo InjectParametersMethod { get; }
    public Type GroupJoinIncludeType { get; }
    public abstract virtual MethodInfo get_GroupJoinMethod();
    public abstract virtual MethodInfo get_GroupByMethod();
    public abstract virtual MethodInfo get_ShapedQueryMethod();
    public abstract virtual MethodInfo get_DefaultIfEmptyShapedQueryMethod();
    public abstract virtual MethodInfo get_QueryMethod();
    public abstract virtual MethodInfo get_GetResultMethod();
    public abstract virtual MethodInfo get_IncludeMethod();
    public abstract virtual Type get_RelatedEntitiesLoaderType();
    public abstract virtual MethodInfo get_CreateReferenceRelatedEntitiesLoaderMethod();
    public abstract virtual MethodInfo get_CreateCollectionRelatedEntitiesLoaderMethod();
    public abstract virtual MethodInfo get_InjectParametersMethod();
    public abstract virtual Type get_GroupJoinIncludeType();
    public abstract virtual object CreateGroupJoinInclude(IReadOnlyList`1<INavigation> navigationPath, bool querySourceRequiresTracking, object existingGroupJoinInclude, object relatedEntitiesLoaders);
}
public class Microsoft.EntityFrameworkCore.Query.QueryMethodProvider : object {
    private static MethodInfo _shapedQueryMethodInfo;
    private static MethodInfo _defaultIfEmptyShapedQueryMethodInfo;
    private static MethodInfo _queryMethodInfo;
    private static MethodInfo _getResultMethodInfo;
    private static MethodInfo _groupByMethodInfo;
    private static MethodInfo _groupJoinMethodInfo;
    private static MethodInfo _includeMethodInfo;
    private static MethodInfo _createReferenceRelatedEntitiesLoaderMethod;
    private static MethodInfo _createCollectionRelatedEntitiesLoaderMethod;
    private static MethodInfo _injectParametersMethodInfo;
    public MethodInfo ShapedQueryMethod { get; }
    public MethodInfo DefaultIfEmptyShapedQueryMethod { get; }
    public MethodInfo QueryMethod { get; }
    public MethodInfo GetResultMethod { get; }
    public MethodInfo GroupByMethod { get; }
    public Type GroupJoinIncludeType { get; }
    public MethodInfo GroupJoinMethod { get; }
    public MethodInfo IncludeMethod { get; }
    public Type RelatedEntitiesLoaderType { get; }
    public MethodInfo CreateReferenceRelatedEntitiesLoaderMethod { get; }
    public MethodInfo CreateCollectionRelatedEntitiesLoaderMethod { get; }
    public MethodInfo InjectParametersMethod { get; }
    private static QueryMethodProvider();
    public virtual MethodInfo get_ShapedQueryMethod();
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Query.QueryMethodProvider/<_ShapedQuery>d__3`1")]
[UsedImplicitlyAttribute]
private static IEnumerable`1<T> _ShapedQuery(QueryContext queryContext, ShaperCommandContext shaperCommandContext, IShaper`1<T> shaper);
    public virtual MethodInfo get_DefaultIfEmptyShapedQueryMethod();
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Query.QueryMethodProvider/<_DefaultIfEmptyShapedQuery>d__7`1")]
[UsedImplicitlyAttribute]
private static IEnumerable`1<T> _DefaultIfEmptyShapedQuery(QueryContext queryContext, ShaperCommandContext shaperCommandContext, IShaper`1<T> shaper);
    public virtual MethodInfo get_QueryMethod();
    [UsedImplicitlyAttribute]
private static IEnumerable`1<ValueBuffer> _Query(QueryContext queryContext, ShaperCommandContext shaperCommandContext, Nullable`1<int> queryIndex);
    public virtual MethodInfo get_GetResultMethod();
    [UsedImplicitlyAttribute]
private static TResult GetResult(IEnumerable`1<ValueBuffer> valueBuffers);
    public virtual MethodInfo get_GroupByMethod();
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Query.QueryMethodProvider/<_GroupBy>d__19`3")]
[UsedImplicitlyAttribute]
private static IEnumerable`1<IGrouping`2<TKey, TElement>> _GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    public virtual Type get_GroupJoinIncludeType();
    public virtual object CreateGroupJoinInclude(IReadOnlyList`1<INavigation> navigationPath, bool querySourceRequiresTracking, object existingGroupJoinInclude, object relatedEntitiesLoaders);
    public virtual MethodInfo get_GroupJoinMethod();
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Query.QueryMethodProvider/<_GroupJoin>d__26`4")]
[UsedImplicitlyAttribute]
private static IEnumerable`1<TResult> _GroupJoin(RelationalQueryContext queryContext, IEnumerable`1<ValueBuffer> source, IShaper`1<TOuter> outerShaper, IShaper`1<TInner> innerShaper, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, IEnumerable`1<TInner>, TResult> resultSelector, GroupJoinInclude outerGroupJoinInclude, GroupJoinInclude innerGroupJoinInclude);
    public virtual MethodInfo get_IncludeMethod();
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Query.QueryMethodProvider/<_Include>d__30`1")]
[UsedImplicitlyAttribute]
private static IEnumerable`1<T> _Include(RelationalQueryContext queryContext, IEnumerable`1<T> innerResults, Func`2<T, object> entityAccessor, IReadOnlyList`1<INavigation> navigationPath, IReadOnlyList`1<Func`2<QueryContext, IRelatedEntitiesLoader>> relatedEntitiesLoaderFactories, bool querySourceRequiresTracking);
    public virtual Type get_RelatedEntitiesLoaderType();
    public virtual MethodInfo get_CreateReferenceRelatedEntitiesLoaderMethod();
    [UsedImplicitlyAttribute]
private static IRelatedEntitiesLoader _CreateReferenceRelatedEntitiesLoader(int valueBufferOffset, int queryIndex, Func`2<ValueBuffer, object> materializer);
    public virtual MethodInfo get_CreateCollectionRelatedEntitiesLoaderMethod();
    [UsedImplicitlyAttribute]
private static IRelatedEntitiesLoader _CreateCollectionRelatedEntitiesLoader(QueryContext queryContext, ShaperCommandContext shaperCommandContext, int queryIndex, Func`2<ValueBuffer, object> materializer);
    public virtual MethodInfo get_InjectParametersMethod();
    [UsedImplicitlyAttribute]
private static IEnumerable`1<TElement> _InjectParameters(QueryContext queryContext, IEnumerable`1<TElement> source, String[] parameterNames, Object[] parameterValues);
}
public class Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext : QueryCompilationContext {
    private List`1<RelationalQueryModelVisitor> _relationalQueryModelVisitors;
    private static string SystemAliasPrefix;
    private ISet`1<string> _tableAliasSet;
    [CompilerGeneratedAttribute]
private IQueryMethodProvider <QueryMethodProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ParentQueryReferenceParameters>k__BackingField;
    public IQueryMethodProvider QueryMethodProvider { get; }
    public IList`1<string> ParentQueryReferenceParameters { get; }
    public bool IsLateralJoinSupported { get; }
    public RelationalQueryCompilationContext(IModel model, ISensitiveDataLogger logger, IEntityQueryModelVisitorFactory entityQueryModelVisitorFactory, IRequiresMaterializationExpressionVisitorFactory requiresMaterializationExpressionVisitorFactory, ILinqOperatorProvider linqOperatorProvider, IQueryMethodProvider queryMethodProvider, Type contextType, bool trackQueryResults);
    [CompilerGeneratedAttribute]
public virtual IQueryMethodProvider get_QueryMethodProvider();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_ParentQueryReferenceParameters();
    public virtual EntityQueryModelVisitor CreateQueryModelVisitor();
    public virtual bool get_IsLateralJoinSupported();
    public virtual EntityQueryModelVisitor CreateQueryModelVisitor(EntityQueryModelVisitor parentEntityQueryModelVisitor);
    public virtual SelectExpression FindSelectExpression(IQuerySource querySource);
    public virtual string CreateUniqueTableAlias();
    public virtual string CreateUniqueTableAlias(string currentAlias);
}
public class Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContextFactory : QueryCompilationContextFactory {
    public RelationalQueryCompilationContextFactory(IModel model, ISensitiveDataLogger`1<RelationalQueryCompilationContextFactory> logger, IEntityQueryModelVisitorFactory entityQueryModelVisitorFactory, IRequiresMaterializationExpressionVisitorFactory requiresMaterializationExpressionVisitorFactory, MethodInfoBasedNodeTypeRegistry methodInfoBasedNodeTypeRegistry, ICurrentDbContext currentContext);
    public virtual QueryCompilationContext Create(bool async);
}
public class Microsoft.EntityFrameworkCore.Query.RelationalQueryContext : QueryContext {
    private List`1<IValueBufferCursor> _activeQueries;
    private List`1<IValueBufferCursor> _activeIncludeQueries;
    private int _activeIncludeQueryOffset;
    [CompilerGeneratedAttribute]
private IRelationalConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private SemaphoreSlim <Semaphore>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecutionStrategyFactory <ExecutionStrategyFactory>k__BackingField;
    public IRelationalConnection Connection { get; }
    public SemaphoreSlim Semaphore { get; }
    public IExecutionStrategyFactory ExecutionStrategyFactory { get; }
    public RelationalQueryContext(Func`1<IQueryBuffer> queryBufferFactory, IRelationalConnection connection, LazyRef`1<IStateManager> stateManager, IConcurrencyDetector concurrencyDetector, IExecutionStrategyFactory executionStrategyFactory);
    [CompilerGeneratedAttribute]
public virtual IRelationalConnection get_Connection();
    [CompilerGeneratedAttribute]
public virtual SemaphoreSlim get_Semaphore();
    [CompilerGeneratedAttribute]
public virtual IExecutionStrategyFactory get_ExecutionStrategyFactory();
    public virtual void RegisterValueBufferCursor(IValueBufferCursor valueBufferCursor, Nullable`1<int> queryIndex);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Query.RelationalQueryContext/<RegisterValueBufferCursorAsync>d__14")]
public virtual Task RegisterValueBufferCursorAsync(IValueBufferCursor valueBufferCursor, Nullable`1<int> queryIndex, CancellationToken cancellationToken);
    private void AddBufferCursorToIncludeQueriesList(IValueBufferCursor valueBufferCursor, int includeQueryIndex);
    public virtual void DeregisterValueBufferCursor(IValueBufferCursor valueBufferCursor);
    public virtual ValueBuffer GetIncludeValueBuffer(int queryIndex);
    public virtual void BeginIncludeScope();
    public virtual void EndIncludeScope();
}
public class Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor : EntityQueryModelVisitor {
    [CompilerGeneratedAttribute]
private Dictionary`2<IQuerySource, SelectExpression> <QueriesBySource>k__BackingField;
    private Dictionary`2<IQuerySource, RelationalQueryModelVisitor> _subQueryModelVisitorsBySource;
    private IRelationalAnnotationProvider _relationalAnnotationProvider;
    private IIncludeExpressionVisitorFactory _includeExpressionVisitorFactory;
    private ISqlTranslatingExpressionVisitorFactory _sqlTranslatingExpressionVisitorFactory;
    private ICompositePredicateExpressionVisitorFactory _compositePredicateExpressionVisitorFactory;
    private IConditionalRemovingExpressionVisitorFactory _conditionalRemovingExpressionVisitorFactory;
    private IQueryFlattenerFactory _queryFlattenerFactory;
    private bool _bindParentQueries;
    private bool _requiresClientSelectMany;
    private bool _requiresClientJoin;
    private bool _requiresClientFilter;
    private bool _requiresClientProjection;
    private bool _requiresClientOrderBy;
    private bool _requiresClientResultOperator;
    private Dictionary`2<IncludeSpecification, List`1<int>> _navigationIndexMap;
    [CompilerGeneratedAttribute]
private IDbContextOptions <ContextOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresClientEval>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalQueryModelVisitor <ParentQueryModelVisitor>k__BackingField;
    private bool _canBindPropertyToOuterParameter;
    private static string OuterQueryParameterNamePrefix;
    protected Dictionary`2<IQuerySource, SelectExpression> QueriesBySource { get; }
    protected IDbContextOptions ContextOptions { get; }
    public bool RequiresClientEval { get; public set; }
    public bool RequiresClientSelectMany { get; public set; }
    public bool RequiresClientJoin { get; public set; }
    public bool RequiresClientFilter { get; public set; }
    public bool RequiresClientOrderBy { get; public set; }
    public bool RequiresClientProjection { get; public set; }
    public bool RequiresClientResultOperator { get; public set; }
    public RelationalQueryCompilationContext QueryCompilationContext { get; }
    public ICollection`1<SelectExpression> Queries { get; }
    public RelationalQueryModelVisitor ParentQueryModelVisitor { get; }
    public RelationalQueryModelVisitor(IQueryOptimizer queryOptimizer, INavigationRewritingExpressionVisitorFactory navigationRewritingExpressionVisitorFactory, ISubQueryMemberPushDownExpressionVisitor subQueryMemberPushDownExpressionVisitor, IQuerySourceTracingExpressionVisitorFactory querySourceTracingExpressionVisitorFactory, IEntityResultFindingExpressionVisitorFactory entityResultFindingExpressionVisitorFactory, ITaskBlockingExpressionVisitor taskBlockingExpressionVisitor, IMemberAccessBindingExpressionVisitorFactory memberAccessBindingExpressionVisitorFactory, IOrderingExpressionVisitorFactory orderingExpressionVisitorFactory, IProjectionExpressionVisitorFactory projectionExpressionVisitorFactory, IEntityQueryableExpressionVisitorFactory entityQueryableExpressionVisitorFactory, IQueryAnnotationExtractor queryAnnotationExtractor, IResultOperatorHandler resultOperatorHandler, IEntityMaterializerSource entityMaterializerSource, IExpressionPrinter expressionPrinter, IRelationalAnnotationProvider relationalAnnotationProvider, IIncludeExpressionVisitorFactory includeExpressionVisitorFactory, ISqlTranslatingExpressionVisitorFactory sqlTranslatingExpressionVisitorFactory, ICompositePredicateExpressionVisitorFactory compositePredicateExpressionVisitorFactory, IConditionalRemovingExpressionVisitorFactory conditionalRemovingExpressionVisitorFactory, IQueryFlattenerFactory queryFlattenerFactory, IDbContextOptions contextOptions, RelationalQueryCompilationContext queryCompilationContext, RelationalQueryModelVisitor parentQueryModelVisitor);
    [CompilerGeneratedAttribute]
protected virtual Dictionary`2<IQuerySource, SelectExpression> get_QueriesBySource();
    [CompilerGeneratedAttribute]
protected virtual IDbContextOptions get_ContextOptions();
    [CompilerGeneratedAttribute]
public virtual bool get_RequiresClientEval();
    [CompilerGeneratedAttribute]
public virtual void set_RequiresClientEval(bool value);
    public virtual bool get_RequiresClientSelectMany();
    public virtual void set_RequiresClientSelectMany(bool value);
    public virtual bool get_RequiresClientJoin();
    public virtual void set_RequiresClientJoin(bool value);
    public virtual bool get_RequiresClientFilter();
    public virtual void set_RequiresClientFilter(bool value);
    public virtual bool get_RequiresClientOrderBy();
    public virtual void set_RequiresClientOrderBy(bool value);
    public virtual bool get_RequiresClientProjection();
    public virtual void set_RequiresClientProjection(bool value);
    public virtual bool get_RequiresClientResultOperator();
    public virtual void set_RequiresClientResultOperator(bool value);
    public virtual RelationalQueryCompilationContext get_QueryCompilationContext();
    public virtual ICollection`1<SelectExpression> get_Queries();
    [CompilerGeneratedAttribute]
public virtual RelationalQueryModelVisitor get_ParentQueryModelVisitor();
    public virtual void RegisterSubQueryVisitor(IQuerySource querySource, RelationalQueryModelVisitor queryModelVisitor);
    public virtual void AddQuery(IQuerySource querySource, SelectExpression selectExpression);
    public virtual SelectExpression TryGetQuery(IQuerySource querySource);
    protected virtual void IncludeNavigations(QueryModel queryModel, IReadOnlyCollection`1<IncludeSpecification> includeSpecifications);
    private static Dictionary`2<IncludeSpecification, List`1<int>> BuildNavigationIndexMap(IEnumerable`1<IncludeSpecification> includeSpecifications);
    protected virtual void IncludeNavigations(IncludeSpecification includeSpecification, Type resultType, Expression accessorExpression, bool querySourceRequiresTracking);
    public virtual void VisitQueryModel(QueryModel queryModel);
    public virtual void VisitSubQueryModel(QueryModel queryModel);
    protected virtual Expression CompileMainFromClauseExpression(MainFromClause mainFromClause, QueryModel queryModel);
    public virtual void VisitAdditionalFromClause(AdditionalFromClause fromClause, QueryModel queryModel, int index);
    private bool CanFlattenSelectMany();
    private bool IsShapedQueryExpression(MethodCallExpression shapedQueryExpression, bool innerShapedQuery);
    protected virtual Expression CompileAdditionalFromClauseExpression(AdditionalFromClause additionalFromClause, QueryModel queryModel);
    public virtual void VisitJoinClause(JoinClause joinClause, QueryModel queryModel, int index);
    protected virtual Expression CompileJoinClauseInnerSequenceExpression(JoinClause joinClause, QueryModel queryModel);
    public virtual void VisitGroupJoinClause(GroupJoinClause groupJoinClause, QueryModel queryModel, int index);
    protected virtual void OptimizeJoinClause(JoinClause joinClause, QueryModel queryModel, int index, Action baseVisitAction, MethodInfo operatorToFlatten, bool groupJoin);
    private Dictionary`2<IQuerySource, Expression> SnapshotQuerySourceMapping(QueryModel queryModel);
    private bool CanFlattenJoin();
    private static IQuerySource FindPreviousQuerySource(QueryModel queryModel, int index);
    protected virtual Expression CompileGroupJoinInnerSequenceExpression(GroupJoinClause groupJoinClause, QueryModel queryModel);
    private Expression LiftSubQuery(IQuerySource querySource, Expression itemsExpression, Expression expression);
    public virtual void VisitWhereClause(WhereClause whereClause, QueryModel queryModel, int index);
    public virtual void VisitOrderByClause(OrderByClause orderByClause, QueryModel queryModel, int index);
    public virtual void VisitResultOperator(ResultOperatorBase resultOperator, QueryModel queryModel, int index);
    protected virtual void WarnClientEval(object expression);
    public virtual Expression BindMemberToValueBuffer(MemberExpression memberExpression, Expression expression);
    public virtual Expression BindMethodCallToValueBuffer(MethodCallExpression methodCallExpression, Expression expression);
    public virtual TResult BindMemberExpression(MemberExpression memberExpression, Func`4<IProperty, IQuerySource, SelectExpression, TResult> memberBinder, bool bindSubQueries);
    private TResult BindMemberExpression(MemberExpression memberExpression, IQuerySource querySource, Func`4<IProperty, IQuerySource, SelectExpression, TResult> memberBinder, bool bindSubQueries);
    public virtual Expression BindMemberToOuterQueryParameter(MemberExpression memberExpression);
    public virtual TResult BindMethodCallExpression(MethodCallExpression methodCallExpression, Func`4<IProperty, IQuerySource, SelectExpression, TResult> memberBinder, bool bindSubQueries);
    private TResult BindMethodCallExpression(MethodCallExpression methodCallExpression, IQuerySource querySource, Func`4<IProperty, IQuerySource, SelectExpression, TResult> memberBinder, bool bindSubQueries);
    public virtual Expression BindLocalMethodCallExpression(MethodCallExpression methodCallExpression);
    public virtual Expression BindMethodToOuterQueryParameter(MethodCallExpression methodCallExpression);
    private TResult BindMemberOrMethod(Func`4<IProperty, IQuerySource, SelectExpression, TResult> memberBinder, IQuerySource querySource, IProperty property, bool bindSubQueries);
    private ParameterExpression BindPropertyToOuterParameter(IQuerySource querySource, IProperty property, bool isMemberExpression);
    private Expression CreateInjectParametersExpression(Expression expression, IQuerySource querySource, IProperty property, string parameterName, bool isMemberExpression);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(JoinClause joinClause, QueryModel queryModel, int index);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__1(GroupJoinClause groupJoinClause, QueryModel queryModel, int index);
    [CompilerGeneratedAttribute]
private ParameterExpression <BindMemberToOuterQueryParameter>b__84_0(IProperty property, IQuerySource qs);
    [CompilerGeneratedAttribute]
private Expression <BindMethodToOuterQueryParameter>b__88_0(IProperty property, IQuerySource qs);
}
public class Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitorFactory : EntityQueryModelVisitorFactory {
    [CompilerGeneratedAttribute]
private IRelationalAnnotationProvider <RelationalAnnotationProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IIncludeExpressionVisitorFactory <IncludeExpressionVisitorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlTranslatingExpressionVisitorFactory <SqlTranslatingExpressionVisitorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ICompositePredicateExpressionVisitorFactory <CompositePredicateExpressionVisitorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IConditionalRemovingExpressionVisitorFactory <ConditionalRemovingExpressionVisitorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueryFlattenerFactory <QueryFlattenerFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbContextOptions <ContextOptions>k__BackingField;
    protected IRelationalAnnotationProvider RelationalAnnotationProvider { get; }
    protected IIncludeExpressionVisitorFactory IncludeExpressionVisitorFactory { get; }
    protected ISqlTranslatingExpressionVisitorFactory SqlTranslatingExpressionVisitorFactory { get; }
    protected ICompositePredicateExpressionVisitorFactory CompositePredicateExpressionVisitorFactory { get; }
    protected IConditionalRemovingExpressionVisitorFactory ConditionalRemovingExpressionVisitorFactory { get; }
    protected IQueryFlattenerFactory QueryFlattenerFactory { get; }
    protected IDbContextOptions ContextOptions { get; }
    public RelationalQueryModelVisitorFactory(IQueryOptimizer queryOptimizer, INavigationRewritingExpressionVisitorFactory navigationRewritingExpressionVisitorFactory, ISubQueryMemberPushDownExpressionVisitor subQueryMemberPushDownExpressionVisitor, IQuerySourceTracingExpressionVisitorFactory querySourceTracingExpressionVisitorFactory, IEntityResultFindingExpressionVisitorFactory entityResultFindingExpressionVisitorFactory, ITaskBlockingExpressionVisitor taskBlockingExpressionVisitor, IMemberAccessBindingExpressionVisitorFactory memberAccessBindingExpressionVisitorFactory, IOrderingExpressionVisitorFactory orderingExpressionVisitorFactory, IProjectionExpressionVisitorFactory projectionExpressionVisitorFactory, IEntityQueryableExpressionVisitorFactory entityQueryableExpressionVisitorFactory, IQueryAnnotationExtractor queryAnnotationExtractor, IResultOperatorHandler resultOperatorHandler, IEntityMaterializerSource entityMaterializerSource, IExpressionPrinter expressionPrinter, IRelationalAnnotationProvider relationalAnnotationProvider, IIncludeExpressionVisitorFactory includeExpressionVisitorFactory, ISqlTranslatingExpressionVisitorFactory sqlTranslatingExpressionVisitorFactory, ICompositePredicateExpressionVisitorFactory compositePredicateExpressionVisitorFactory, IConditionalRemovingExpressionVisitorFactory conditionalRemovingExpressionVisitorFactory, IQueryFlattenerFactory queryFlattenerFactory, IDbContextOptions contextOptions);
    [CompilerGeneratedAttribute]
protected virtual IRelationalAnnotationProvider get_RelationalAnnotationProvider();
    [CompilerGeneratedAttribute]
protected virtual IIncludeExpressionVisitorFactory get_IncludeExpressionVisitorFactory();
    [CompilerGeneratedAttribute]
protected virtual ISqlTranslatingExpressionVisitorFactory get_SqlTranslatingExpressionVisitorFactory();
    [CompilerGeneratedAttribute]
protected virtual ICompositePredicateExpressionVisitorFactory get_CompositePredicateExpressionVisitorFactory();
    [CompilerGeneratedAttribute]
protected virtual IConditionalRemovingExpressionVisitorFactory get_ConditionalRemovingExpressionVisitorFactory();
    [CompilerGeneratedAttribute]
protected virtual IQueryFlattenerFactory get_QueryFlattenerFactory();
    [CompilerGeneratedAttribute]
protected virtual IDbContextOptions get_ContextOptions();
    public virtual EntityQueryModelVisitor Create(QueryCompilationContext queryCompilationContext, EntityQueryModelVisitor parentEntityQueryModelVisitor);
}
public class Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode : ResultOperatorExpressionNodeBase {
    public static IReadOnlyCollection`1<MethodInfo> SupportedMethods;
    private string _sql;
    private Expression _arguments;
    public FromSqlExpressionNode(MethodCallExpressionParseInfo parseInfo, ConstantExpression sql, Expression arguments);
    private static FromSqlExpressionNode();
    protected virtual ResultOperatorBase CreateResultOperator(ClauseGenerationContext clauseGenerationContext);
    public virtual Expression Resolve(ParameterExpression inputParameter, Expression expressionToBeResolved, ClauseGenerationContext clauseGenerationContext);
}
public class Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlResultOperator : SequenceTypePreservingResultOperatorBase {
    [CompilerGeneratedAttribute]
private IQuerySource <QuerySource>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryModel <QueryModel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Arguments>k__BackingField;
    public IQuerySource QuerySource { get; public set; }
    public QueryModel QueryModel { get; public set; }
    public string Sql { get; }
    public Expression Arguments { get; }
    public FromSqlResultOperator(string sql, Expression arguments);
    [CompilerGeneratedAttribute]
public virtual IQuerySource get_QuerySource();
    [CompilerGeneratedAttribute]
[NotNullAttribute]
public virtual void set_QuerySource(IQuerySource value);
    [CompilerGeneratedAttribute]
public virtual QueryModel get_QueryModel();
    [CompilerGeneratedAttribute]
public virtual void set_QueryModel(QueryModel value);
    [CompilerGeneratedAttribute]
public virtual string get_Sql();
    [CompilerGeneratedAttribute]
public virtual Expression get_Arguments();
    public virtual string ToString();
    public virtual ResultOperatorBase Clone(CloneContext cloneContext);
    public virtual void TransformExpressions(Func`2<Expression, Expression> transformation);
    public virtual StreamedSequence ExecuteInMemory(StreamedSequence input);
}
public class Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator : ThrowingExpressionVisitor {
    private IRelationalCommandBuilderFactory _relationalCommandBuilderFactory;
    private ISqlGenerationHelper _sqlGenerationHelper;
    private IParameterNameGeneratorFactory _parameterNameGeneratorFactory;
    private IRelationalTypeMapper _relationalTypeMapper;
    private IRelationalCommandBuilder _relationalCommandBuilder;
    private IReadOnlyDictionary`2<string, object> _parametersValues;
    private ParameterNameGenerator _parameterNameGenerator;
    private RelationalTypeMapping _typeMapping;
    private static Dictionary`2<ExpressionType, string> _operatorMap;
    [CompilerGeneratedAttribute]
private bool <IsCacheable>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectExpression <SelectExpression>k__BackingField;
    public bool IsCacheable { get; private set; }
    protected SelectExpression SelectExpression { get; }
    protected ISqlGenerationHelper SqlGenerator { get; }
    protected IReadOnlyDictionary`2<string, object> ParameterValues { get; }
    protected IRelationalCommandBuilder Sql { get; }
    protected string ConcatOperator { get; }
    protected string TypedTrueLiteral { get; }
    protected string TypedFalseLiteral { get; }
    public DefaultQuerySqlGenerator(IRelationalCommandBuilderFactory relationalCommandBuilderFactory, ISqlGenerationHelper sqlGenerationHelper, IParameterNameGeneratorFactory parameterNameGeneratorFactory, IRelationalTypeMapper relationalTypeMapper, SelectExpression selectExpression);
    private static DefaultQuerySqlGenerator();
    [CompilerGeneratedAttribute]
public virtual bool get_IsCacheable();
    [CompilerGeneratedAttribute]
private void set_IsCacheable(bool value);
    [CompilerGeneratedAttribute]
protected virtual SelectExpression get_SelectExpression();
    protected virtual ISqlGenerationHelper get_SqlGenerator();
    protected virtual IReadOnlyDictionary`2<string, object> get_ParameterValues();
    public virtual IRelationalCommand GenerateSql(IReadOnlyDictionary`2<string, object> parameterValues);
    public virtual IRelationalValueBufferFactory CreateValueBufferFactory(IRelationalValueBufferFactoryFactory relationalValueBufferFactoryFactory, DbDataReader dataReader);
    protected virtual IRelationalCommandBuilder get_Sql();
    protected virtual string get_ConcatOperator();
    protected virtual string get_TypedTrueLiteral();
    protected virtual string get_TypedFalseLiteral();
    public virtual Expression VisitSelect(SelectExpression selectExpression);
    private Expression ApplyOptimizations(Expression expression, bool searchCondition, bool joinCondition);
    protected virtual void VisitProjection(IReadOnlyList`1<Expression> projections);
    protected virtual void GenerateOrderBy(IReadOnlyList`1<Ordering> orderings);
    protected virtual void GenerateOrdering(Ordering ordering);
    private void VisitJoin(IReadOnlyList`1<Expression> expressions, Action`1<IRelationalCommandBuilder> joinAction);
    private void VisitJoin(IReadOnlyList`1<T> items, Action`1<T> itemAction, Action`1<IRelationalCommandBuilder> joinAction);
    public virtual Expression VisitFromSql(FromSqlExpression fromSqlExpression);
    protected virtual void GenerateFromSql(string sql, Expression arguments, IReadOnlyDictionary`2<string, object> parameters);
    private RelationalTypeMapping GetTypeMapping(object value);
    public virtual Expression VisitTable(TableExpression tableExpression);
    public virtual Expression VisitCrossJoin(CrossJoinExpression crossJoinExpression);
    public virtual Expression VisitLateralJoin(LateralJoinExpression lateralJoinExpression);
    public virtual Expression VisitCount(CountExpression countExpression);
    public virtual Expression VisitSum(SumExpression sumExpression);
    public virtual Expression VisitMin(MinExpression minExpression);
    public virtual Expression VisitMax(MaxExpression maxExpression);
    public virtual Expression VisitStringCompare(StringCompareExpression stringCompareExpression);
    public virtual Expression VisitIn(InExpression inExpression);
    protected virtual Expression VisitNotIn(InExpression inExpression);
    protected virtual IReadOnlyList`1<Expression> ProcessInExpressionValues(IEnumerable`1<Expression> inExpressionValues);
    private static void AddInExpressionValues(object value, List`1<Expression> inConstants, Expression expression);
    protected virtual IReadOnlyList`1<Expression> ExtractNonNullExpressionValues(IReadOnlyList`1<Expression> inExpressionValues);
    public virtual Expression VisitInnerJoin(InnerJoinExpression innerJoinExpression);
    public virtual Expression VisitLeftOuterJoin(LeftOuterJoinExpression leftOuterJoinExpression);
    protected virtual void GenerateTop(SelectExpression selectExpression);
    protected virtual void GenerateLimitOffset(SelectExpression selectExpression);
    protected virtual Expression VisitConditional(ConditionalExpression expression);
    public virtual Expression VisitExists(ExistsExpression existsExpression);
    protected virtual Expression VisitBinary(BinaryExpression expression);
    public virtual Expression VisitColumn(ColumnExpression columnExpression);
    public virtual Expression VisitAlias(AliasExpression aliasExpression);
    public virtual Expression VisitIsNull(IsNullExpression isNullExpression);
    public virtual Expression VisitIsNotNull(IsNullExpression isNotNullExpression);
    public virtual Expression VisitLike(LikeExpression likeExpression);
    public virtual Expression VisitSqlFunction(SqlFunctionExpression sqlFunctionExpression);
    public virtual Expression VisitExplicitCast(ExplicitCastExpression explicitCastExpression);
    protected virtual Expression VisitUnary(UnaryExpression expression);
    protected virtual Expression VisitConstant(ConstantExpression expression);
    protected virtual Expression VisitParameter(ParameterExpression parameterExpression);
    public virtual Expression VisitPropertyParameter(PropertyParameterExpression propertyParameterExpression);
    protected virtual RelationalTypeMapping InferTypeMappingFromColumn(Expression expression);
    protected virtual bool TryGenerateBinaryOperator(ExpressionType op, String& result);
    protected virtual string GenerateBinaryOperator(ExpressionType op);
    protected virtual string GenerateOperator(Expression expression);
    protected virtual Exception CreateUnhandledItemException(T unhandledItem, string visitMethod);
    [CompilerGeneratedAttribute]
private Expression <VisitProjection>b__33_0(Expression e);
    [CompilerGeneratedAttribute]
private void <VisitJoin>b__36_0(Expression e);
}
public class Microsoft.EntityFrameworkCore.Query.Sql.Internal.FromSqlNonComposedQuerySqlGenerator : DefaultQuerySqlGenerator {
    private string _sql;
    private Expression _arguments;
    public FromSqlNonComposedQuerySqlGenerator(IRelationalCommandBuilderFactory relationalCommandBuilderFactory, ISqlGenerationHelper sqlGenerationHelper, IParameterNameGeneratorFactory parameterNameGeneratorFactory, IRelationalTypeMapper relationalTypeMapper, SelectExpression selectExpression, string sql, Expression arguments);
    public virtual Expression Visit(Expression expression);
    public virtual IRelationalValueBufferFactory CreateValueBufferFactory(IRelationalValueBufferFactoryFactory relationalValueBufferFactoryFactory, DbDataReader dataReader);
}
public interface Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator {
    public bool IsCacheable { get; }
    public abstract virtual IRelationalCommand GenerateSql(IReadOnlyDictionary`2<string, object> parameterValues);
    public abstract virtual bool get_IsCacheable();
    public abstract virtual IRelationalValueBufferFactory CreateValueBufferFactory(IRelationalValueBufferFactoryFactory relationalValueBufferFactoryFactory, DbDataReader dataReader);
}
public interface Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory {
    public abstract virtual IQuerySqlGenerator CreateDefault(SelectExpression selectExpression);
    public abstract virtual IQuerySqlGenerator CreateFromSql(SelectExpression selectExpression, string sql, Expression arguments);
}
public interface Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor {
    public abstract virtual Expression VisitColumn(ColumnExpression columnExpression);
    public abstract virtual Expression VisitAlias(AliasExpression aliasExpression);
    public abstract virtual Expression VisitIsNull(IsNullExpression isNullExpression);
    public abstract virtual Expression VisitLike(LikeExpression likeExpression);
    public abstract virtual Expression VisitSelect(SelectExpression selectExpression);
    public abstract virtual Expression VisitTable(TableExpression tableExpression);
    public abstract virtual Expression VisitFromSql(FromSqlExpression fromSqlExpression);
    public abstract virtual Expression VisitCrossJoin(CrossJoinExpression crossJoinExpression);
    public abstract virtual Expression VisitLateralJoin(LateralJoinExpression lateralJoinExpression);
    public abstract virtual Expression VisitInnerJoin(InnerJoinExpression innerJoinExpression);
    public abstract virtual Expression VisitLeftOuterJoin(LeftOuterJoinExpression leftOuterJoinExpression);
    public abstract virtual Expression VisitExists(ExistsExpression existsExpression);
    public abstract virtual Expression VisitCount(CountExpression countExpression);
    public abstract virtual Expression VisitSum(SumExpression sumExpression);
    public abstract virtual Expression VisitMin(MinExpression minExpression);
    public abstract virtual Expression VisitMax(MaxExpression maxExpression);
    public abstract virtual Expression VisitIn(InExpression inExpression);
    public abstract virtual Expression VisitSqlFunction(SqlFunctionExpression sqlFunctionExpression);
    public abstract virtual Expression VisitStringCompare(StringCompareExpression stringCompareExpression);
    public abstract virtual Expression VisitExplicitCast(ExplicitCastExpression explicitCastExpression);
    public abstract virtual Expression VisitPropertyParameter(PropertyParameterExpression propertyParameterExpression);
}
public abstract class Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase : object {
    [CompilerGeneratedAttribute]
private IRelationalCommandBuilderFactory <CommandBuilderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlGenerationHelper <SqlGenerationHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IParameterNameGeneratorFactory <ParameterNameGeneratorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalTypeMapper <RelationalTypeMapper>k__BackingField;
    protected IRelationalCommandBuilderFactory CommandBuilderFactory { get; }
    protected ISqlGenerationHelper SqlGenerationHelper { get; }
    protected IParameterNameGeneratorFactory ParameterNameGeneratorFactory { get; }
    protected IRelationalTypeMapper RelationalTypeMapper { get; }
    protected QuerySqlGeneratorFactoryBase(IRelationalCommandBuilderFactory commandBuilderFactory, ISqlGenerationHelper sqlGenerationHelper, IParameterNameGeneratorFactory parameterNameGeneratorFactory, IRelationalTypeMapper relationalTypeMapper);
    [CompilerGeneratedAttribute]
protected virtual IRelationalCommandBuilderFactory get_CommandBuilderFactory();
    [CompilerGeneratedAttribute]
protected virtual ISqlGenerationHelper get_SqlGenerationHelper();
    [CompilerGeneratedAttribute]
protected virtual IParameterNameGeneratorFactory get_ParameterNameGeneratorFactory();
    [CompilerGeneratedAttribute]
protected virtual IRelationalTypeMapper get_RelationalTypeMapper();
    public abstract virtual IQuerySqlGenerator CreateDefault(SelectExpression selectExpression);
    public virtual IQuerySqlGenerator CreateFromSql(SelectExpression selectExpression, string sql, Expression arguments);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions : object {
    [ExtensionAttribute]
public static void Migrate(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetMigrations(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetAppliedMigrations(DatabaseFacade databaseFacade);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions/<GetAppliedMigrationsAsync>d__3")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<string>> GetAppliedMigrationsAsync(DatabaseFacade databaseFacade, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetPendingMigrations(DatabaseFacade databaseFacade);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions/<GetPendingMigrationsAsync>d__5")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<string>> GetPendingMigrationsAsync(DatabaseFacade databaseFacade, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task MigrateAsync(DatabaseFacade databaseFacade, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static int ExecuteSqlCommand(DatabaseFacade databaseFacade, string sql, Object[] parameters);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions/<ExecuteSqlCommandAsync>d__8")]
[ExtensionAttribute]
public static Task`1<int> ExecuteSqlCommandAsync(DatabaseFacade databaseFacade, string sql, CancellationToken cancellationToken, Object[] parameters);
    [ExtensionAttribute]
public static DbConnection GetDbConnection(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
public static void OpenConnection(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
public static Task OpenConnectionAsync(DatabaseFacade databaseFacade, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void CloseConnection(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
public static IDbContextTransaction BeginTransaction(DatabaseFacade databaseFacade, IsolationLevel isolationLevel);
    [ExtensionAttribute]
public static Task`1<IDbContextTransaction> BeginTransactionAsync(DatabaseFacade databaseFacade, IsolationLevel isolationLevel, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IDbContextTransaction UseTransaction(DatabaseFacade databaseFacade, DbTransaction transaction);
    [ExtensionAttribute]
public static void SetCommandTimeout(DatabaseFacade databaseFacade, Nullable`1<int> timeout);
    [ExtensionAttribute]
public static Nullable`1<int> GetCommandTimeout(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
private static IRelationalConnection GetRelationalConnection(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
private static IDbContextTransactionManager GetTransactionManager(DatabaseFacade databaseFacade);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions : object {
    [ExtensionAttribute]
public static EntityTypeBuilder ToTable(EntityTypeBuilder entityTypeBuilder, string name);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> ToTable(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name);
    [ExtensionAttribute]
public static EntityTypeBuilder ToTable(EntityTypeBuilder entityTypeBuilder, string name, string schema);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> ToTable(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, string schema);
    [ExtensionAttribute]
public static DiscriminatorBuilder HasDiscriminator(EntityTypeBuilder entityTypeBuilder);
    [ExtensionAttribute]
public static DiscriminatorBuilder HasDiscriminator(EntityTypeBuilder entityTypeBuilder, string name, Type discriminatorType);
    [ExtensionAttribute]
public static DiscriminatorBuilder`1<TDiscriminator> HasDiscriminator(EntityTypeBuilder entityTypeBuilder, string name);
    [ExtensionAttribute]
public static DiscriminatorBuilder`1<TDiscriminator> HasDiscriminator(EntityTypeBuilder`1<TEntity> entityTypeBuilder, Expression`1<Func`2<TEntity, TDiscriminator>> propertyExpression);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions : object {
    [ExtensionAttribute]
public static IndexBuilder HasName(IndexBuilder indexBuilder, string name);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalKeyBuilderExtensions : object {
    [ExtensionAttribute]
public static KeyBuilder HasName(KeyBuilder keyBuilder, string name);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalMetadataExtensions : object {
    [ExtensionAttribute]
public static RelationalPropertyAnnotations Relational(IMutableProperty property);
    [ExtensionAttribute]
public static IRelationalPropertyAnnotations Relational(IProperty property);
    [ExtensionAttribute]
public static RelationalEntityTypeAnnotations Relational(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IRelationalEntityTypeAnnotations Relational(IEntityType entityType);
    [ExtensionAttribute]
public static RelationalKeyAnnotations Relational(IMutableKey key);
    [ExtensionAttribute]
public static IRelationalKeyAnnotations Relational(IKey key);
    [ExtensionAttribute]
public static RelationalIndexAnnotations Relational(IMutableIndex index);
    [ExtensionAttribute]
public static IRelationalIndexAnnotations Relational(IIndex index);
    [ExtensionAttribute]
public static RelationalForeignKeyAnnotations Relational(IMutableForeignKey foreignKey);
    [ExtensionAttribute]
public static IRelationalForeignKeyAnnotations Relational(IForeignKey foreignKey);
    [ExtensionAttribute]
public static RelationalModelAnnotations Relational(IMutableModel model);
    [ExtensionAttribute]
public static IRelationalModelAnnotations Relational(IModel model);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions : object {
    [ExtensionAttribute]
public static RelationalSequenceBuilder HasSequence(ModelBuilder modelBuilder, string name, string schema);
    [ExtensionAttribute]
public static ModelBuilder HasSequence(ModelBuilder modelBuilder, string name, Action`1<RelationalSequenceBuilder> builderAction);
    [ExtensionAttribute]
public static ModelBuilder HasSequence(ModelBuilder modelBuilder, string name, string schema, Action`1<RelationalSequenceBuilder> builderAction);
    [ExtensionAttribute]
public static RelationalSequenceBuilder HasSequence(ModelBuilder modelBuilder, Type clrType, string name, string schema);
    [ExtensionAttribute]
public static ModelBuilder HasSequence(ModelBuilder modelBuilder, Type clrType, string name, Action`1<RelationalSequenceBuilder> builderAction);
    [ExtensionAttribute]
public static ModelBuilder HasSequence(ModelBuilder modelBuilder, Type clrType, string name, string schema, Action`1<RelationalSequenceBuilder> builderAction);
    [ExtensionAttribute]
public static RelationalSequenceBuilder HasSequence(ModelBuilder modelBuilder, string name, string schema);
    [ExtensionAttribute]
public static ModelBuilder HasSequence(ModelBuilder modelBuilder, string name, Action`1<RelationalSequenceBuilder> builderAction);
    [ExtensionAttribute]
public static ModelBuilder HasSequence(ModelBuilder modelBuilder, string name, string schema, Action`1<RelationalSequenceBuilder> builderAction);
    [ExtensionAttribute]
public static ModelBuilder HasDefaultSchema(ModelBuilder modelBuilder, string schema);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions : object {
    [ExtensionAttribute]
public static PropertyBuilder HasColumnName(PropertyBuilder propertyBuilder, string name);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasColumnName(PropertyBuilder`1<TProperty> propertyBuilder, string name);
    [ExtensionAttribute]
public static PropertyBuilder HasColumnType(PropertyBuilder propertyBuilder, string typeName);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasColumnType(PropertyBuilder`1<TProperty> propertyBuilder, string typeName);
    [ExtensionAttribute]
public static PropertyBuilder HasDefaultValueSql(PropertyBuilder propertyBuilder, string sql);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasDefaultValueSql(PropertyBuilder`1<TProperty> propertyBuilder, string sql);
    [ExtensionAttribute]
public static PropertyBuilder HasComputedColumnSql(PropertyBuilder propertyBuilder, string sql);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasComputedColumnSql(PropertyBuilder`1<TProperty> propertyBuilder, string sql);
    [ExtensionAttribute]
public static PropertyBuilder HasDefaultValue(PropertyBuilder propertyBuilder, object value);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasDefaultValue(PropertyBuilder`1<TProperty> propertyBuilder, object value);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalQueryableExtensions : object {
    internal static MethodInfo FromSqlMethodInfo;
    private static RelationalQueryableExtensions();
    [ExtensionAttribute]
[StringFormatMethodAttribute("sql")]
public static IQueryable`1<TEntity> FromSql(IQueryable`1<TEntity> source, string sql, Object[] parameters);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalReferenceCollectionBuilderExtensions : object {
    [ExtensionAttribute]
public static ReferenceCollectionBuilder HasConstraintName(ReferenceCollectionBuilder referenceCollectionBuilder, string name);
    [ExtensionAttribute]
public static ReferenceCollectionBuilder`2<TEntity, TRelatedEntity> HasConstraintName(ReferenceCollectionBuilder`2<TEntity, TRelatedEntity> referenceCollectionBuilder, string name);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalReferenceReferenceBuilderExtensions : object {
    [ExtensionAttribute]
public static ReferenceReferenceBuilder HasConstraintName(ReferenceReferenceBuilder referenceReferenceBuilder, string name);
    [ExtensionAttribute]
public static ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> HasConstraintName(ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> referenceReferenceBuilder, string name);
}
public class Microsoft.EntityFrameworkCore.Storage.ByteArrayRelationalTypeMapper : object {
    private ConcurrentDictionary`2<int, RelationalTypeMapping> _boundedMappings;
    [CompilerGeneratedAttribute]
private int <MaxBoundedLength>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <DefaultMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <UnboundedMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <KeyMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <RowVersionMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<int, RelationalTypeMapping> <CreateBoundedMapping>k__BackingField;
    public int MaxBoundedLength { get; }
    public RelationalTypeMapping DefaultMapping { get; }
    public RelationalTypeMapping UnboundedMapping { get; }
    public RelationalTypeMapping KeyMapping { get; }
    public RelationalTypeMapping RowVersionMapping { get; }
    public Func`2<int, RelationalTypeMapping> CreateBoundedMapping { get; }
    public ByteArrayRelationalTypeMapper(int maxBoundedLength, RelationalTypeMapping defaultMapping, RelationalTypeMapping unboundedMapping, RelationalTypeMapping keyMapping, RelationalTypeMapping rowVersionMapping, Func`2<int, RelationalTypeMapping> createBoundedMapping);
    [CompilerGeneratedAttribute]
public virtual int get_MaxBoundedLength();
    [CompilerGeneratedAttribute]
public virtual RelationalTypeMapping get_DefaultMapping();
    [CompilerGeneratedAttribute]
public virtual RelationalTypeMapping get_UnboundedMapping();
    [CompilerGeneratedAttribute]
public virtual RelationalTypeMapping get_KeyMapping();
    [CompilerGeneratedAttribute]
public virtual RelationalTypeMapping get_RowVersionMapping();
    [CompilerGeneratedAttribute]
public virtual Func`2<int, RelationalTypeMapping> get_CreateBoundedMapping();
    public virtual RelationalTypeMapping FindMapping(bool rowVersion, bool keyOrIndex, Nullable`1<int> size);
}
[ObsoleteAttribute("This class is obsolete. It will be removed in a future release.")]
public class Microsoft.EntityFrameworkCore.Storage.DbCommandLogData : object {
    [CompilerGeneratedAttribute]
private string <CommandText>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandType <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CommandTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<DbParameterLogData> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ElapsedMilliseconds>k__BackingField;
    public string CommandText { get; }
    public CommandType CommandType { get; }
    public int CommandTimeout { get; }
    public IReadOnlyList`1<DbParameterLogData> Parameters { get; }
    public Nullable`1<long> ElapsedMilliseconds { get; }
    public DbCommandLogData(string commandText, CommandType commandType, int commandTimeout, IReadOnlyList`1<DbParameterLogData> parameters, Nullable`1<long> elapsedMilliseconds);
    [CompilerGeneratedAttribute]
public virtual string get_CommandText();
    [CompilerGeneratedAttribute]
public virtual CommandType get_CommandType();
    [CompilerGeneratedAttribute]
public virtual int get_CommandTimeout();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<DbParameterLogData> get_Parameters();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_ElapsedMilliseconds();
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.DbCommandLogData/<GetEnumerator>d__16")]
public virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Storage.DbContextTransactionExtensions : object {
    [ExtensionAttribute]
public static DbTransaction GetDbTransaction(IDbContextTransaction dbContextTransaction);
}
public class Microsoft.EntityFrameworkCore.Storage.DbParameterLogData : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private DbType <DbType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Scale>k__BackingField;
    public string Name { get; }
    public object Value { get; }
    public bool HasValue { get; public set; }
    public ParameterDirection Direction { get; public set; }
    public DbType DbType { get; public set; }
    public bool IsNullable { get; }
    public int Size { get; }
    public byte Precision { get; }
    public byte Scale { get; }
    public DbParameterLogData(string name, object value, bool hasValue, ParameterDirection direction, DbType dbType, bool nullable, int size, byte precision, byte scale);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual object get_Value();
    [CompilerGeneratedAttribute]
public virtual bool get_HasValue();
    [CompilerGeneratedAttribute]
public virtual void set_HasValue(bool value);
    [CompilerGeneratedAttribute]
public virtual ParameterDirection get_Direction();
    [CompilerGeneratedAttribute]
public virtual void set_Direction(ParameterDirection value);
    [CompilerGeneratedAttribute]
public virtual DbType get_DbType();
    [CompilerGeneratedAttribute]
public virtual void set_DbType(DbType value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual int get_Size();
    [CompilerGeneratedAttribute]
public virtual byte get_Precision();
    [CompilerGeneratedAttribute]
public virtual byte get_Scale();
}
public interface Microsoft.EntityFrameworkCore.Storage.IByteArrayRelationalTypeMapper {
    public abstract virtual RelationalTypeMapping FindMapping(bool rowVersion, bool keyOrIndex, Nullable`1<int> size);
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.CompositeRelationalParameter : object {
    [CompilerGeneratedAttribute]
private string <InvariantName>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IRelationalParameter> <RelationalParameters>k__BackingField;
    public string InvariantName { get; }
    public IReadOnlyList`1<IRelationalParameter> RelationalParameters { get; }
    public CompositeRelationalParameter(string invariantName, IReadOnlyList`1<IRelationalParameter> relationalParameters);
    [CompilerGeneratedAttribute]
public virtual string get_InvariantName();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<IRelationalParameter> get_RelationalParameters();
    public virtual void AddDbParameter(DbCommand command, object value);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Storage.Internal.DbParameterLogDataExtensions : object {
    [ExtensionAttribute]
public static string FormatParameter(DbParameterLogData parameterData, bool quoteValues);
    private static void FormatParameterValue(StringBuilder builder, object parameterValue, bool quoteValues);
    private static bool IsNormalDbType(DbType dbType, Type clrType);
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.DynamicRelationalParameter : object {
    private IRelationalTypeMapper _typeMapper;
    [CompilerGeneratedAttribute]
private string <InvariantName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string InvariantName { get; }
    public string Name { get; }
    public DynamicRelationalParameter(string invariantName, string name, IRelationalTypeMapper typeMapper);
    [CompilerGeneratedAttribute]
public virtual string get_InvariantName();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    public virtual void AddDbParameter(DbCommand command, object value);
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.RawSqlCommandBuilder : object {
    private IRelationalCommandBuilderFactory _relationalCommandBuilderFactory;
    private ISqlGenerationHelper _sqlGenerationHelper;
    private IParameterNameGeneratorFactory _parameterNameGeneratorFactory;
    public RawSqlCommandBuilder(IRelationalCommandBuilderFactory relationalCommandBuilderFactory, ISqlGenerationHelper sqlGenerationHelper, IParameterNameGeneratorFactory parameterNameGeneratorFactory);
    public virtual IRelationalCommand Build(string sql);
    public virtual RawSqlCommand Build(string sql, IReadOnlyList`1<object> parameters);
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand : object {
    [CompilerGeneratedAttribute]
private ISensitiveDataLogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticSource <DiagnosticSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandText>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IRelationalParameter> <Parameters>k__BackingField;
    protected ISensitiveDataLogger Logger { get; }
    protected DiagnosticSource DiagnosticSource { get; }
    public string CommandText { get; }
    public IReadOnlyList`1<IRelationalParameter> Parameters { get; }
    public RelationalCommand(ISensitiveDataLogger logger, DiagnosticSource diagnosticSource, string commandText, IReadOnlyList`1<IRelationalParameter> parameters);
    [CompilerGeneratedAttribute]
protected virtual ISensitiveDataLogger get_Logger();
    [CompilerGeneratedAttribute]
protected virtual DiagnosticSource get_DiagnosticSource();
    [CompilerGeneratedAttribute]
public virtual string get_CommandText();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<IRelationalParameter> get_Parameters();
    public virtual int ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues);
    private sealed virtual override int Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, bool manageConnection);
    public virtual Task`1<int> ExecuteNonQueryAsync(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteNonQueryAsync(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, bool manageConnection, CancellationToken cancellationToken);
    public virtual object ExecuteScalar(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues);
    private sealed virtual override object Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteScalar(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, bool manageConnection);
    public virtual Task`1<object> ExecuteScalarAsync(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, CancellationToken cancellationToken);
    private sealed virtual override Task`1<object> Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteScalarAsync(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, bool manageConnection, CancellationToken cancellationToken);
    public virtual RelationalDataReader ExecuteReader(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues);
    private sealed virtual override RelationalDataReader Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteReader(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, bool manageConnection);
    public virtual Task`1<RelationalDataReader> ExecuteReaderAsync(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, CancellationToken cancellationToken);
    private sealed virtual override Task`1<RelationalDataReader> Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteReaderAsync(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, bool manageConnection, CancellationToken cancellationToken);
    protected virtual object Execute(IRelationalConnection connection, string executeMethod, IReadOnlyDictionary`2<string, object> parameterValues, bool closeConnection);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand/<ExecuteAsync>d__26")]
protected virtual Task`1<object> ExecuteAsync(IRelationalConnection connection, string executeMethod, IReadOnlyDictionary`2<string, object> parameterValues, bool closeConnection, CancellationToken cancellationToken);
    private DbCommand CreateCommand(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues);
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommandBuilder : object {
    private ISensitiveDataLogger _logger;
    private DiagnosticSource _diagnosticSource;
    private IndentedStringBuilder _commandTextBuilder;
    [CompilerGeneratedAttribute]
private IRelationalParameterBuilder <ParameterBuilder>k__BackingField;
    private IndentedStringBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Internal.IndentedStringBuilder>.Instance { get; }
    public IRelationalParameterBuilder ParameterBuilder { get; }
    public RelationalCommandBuilder(ISensitiveDataLogger logger, DiagnosticSource diagnosticSource, IRelationalTypeMapper typeMapper);
    private sealed virtual override IndentedStringBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Internal.IndentedStringBuilder>.get_Instance();
    [CompilerGeneratedAttribute]
public virtual IRelationalParameterBuilder get_ParameterBuilder();
    public virtual IRelationalCommand Build();
    public virtual string ToString();
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommandBuilderFactory : object {
    private ISensitiveDataLogger _logger;
    private DiagnosticSource _diagnosticSource;
    private IRelationalTypeMapper _typeMapper;
    public RelationalCommandBuilderFactory(ISensitiveDataLogger`1<IRelationalCommandBuilderFactory> logger, DiagnosticSource diagnosticSource, IRelationalTypeMapper typeMapper);
    public virtual IRelationalCommandBuilder Create();
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.RelationalExecutionStrategyFactory : object {
    private Func`2<ExecutionStrategyContext, IExecutionStrategy> _createExecutionStrategy;
    private ExecutionStrategyContext _context;
    public RelationalExecutionStrategyFactory(IDbContextOptions options, ICurrentDbContext currentDbContext, ILogger`1<IExecutionStrategy> logger);
    protected RelationalExecutionStrategyFactory(IDbContextOptions options, ExecutionStrategyContext context);
    protected virtual IExecutionStrategy CreateDefaultStrategy(ExecutionStrategyContext context);
    public virtual IExecutionStrategy Create();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Storage.Internal.RelationalLoggerExtensions : object {
    private static double TimestampToMilliseconds;
    private static RelationalLoggerExtensions();
    [ExtensionAttribute]
public static void LogCommandExecuted(ISensitiveDataLogger logger, DbCommand command, long startTimestamp, long currentTimestamp);
    [ExtensionAttribute]
public static void LogDebug(ILogger logger, RelationalEventId eventId, Func`1<string> formatter);
    [ExtensionAttribute]
public static void LogDebug(ILogger logger, RelationalEventId eventId, TState state, Func`2<TState, string> formatter);
    [ExtensionAttribute]
public static void LogWarning(ILogger logger, RelationalEventId eventId, Func`1<string> formatter);
    [ExtensionAttribute]
public static void LogInformation(ILogger logger, RelationalEventId eventId, Func`1<string> formatter);
    private static long DeriveTimespan(long startTimestamp, long currentTimestamp);
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.RelationalParameterBuilder : object {
    private List`1<IRelationalParameter> _parameters;
    [CompilerGeneratedAttribute]
private IRelationalTypeMapper <TypeMapper>k__BackingField;
    public IReadOnlyList`1<IRelationalParameter> Parameters { get; }
    protected IRelationalTypeMapper TypeMapper { get; }
    public RelationalParameterBuilder(IRelationalTypeMapper typeMapper);
    public virtual IReadOnlyList`1<IRelationalParameter> get_Parameters();
    [CompilerGeneratedAttribute]
protected virtual IRelationalTypeMapper get_TypeMapper();
    public virtual void AddParameter(string invariantName, string name);
    public virtual void AddParameter(string invariantName, string name, RelationalTypeMapping typeMapping, bool nullable);
    public virtual void AddParameter(string invariantName, string name, IProperty property);
    public virtual void AddCompositeParameter(string invariantName, Action`1<IRelationalParameterBuilder> buildAction);
    public virtual void AddPropertyParameter(string invariantName, string name, IProperty property);
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.RemappingUntypedRelationalValueBufferFactory : object {
    private IReadOnlyList`1<int> _indexMap;
    private Action`1<Object[]> _processValuesAction;
    public RemappingUntypedRelationalValueBufferFactory(IReadOnlyList`1<int> indexMap, Action`1<Object[]> processValuesAction);
    public virtual ValueBuffer Create(DbDataReader dataReader);
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.TypedRelationalValueBufferFactory : object {
    private Func`2<DbDataReader, Object[]> _valueFactory;
    public TypedRelationalValueBufferFactory(Func`2<DbDataReader, Object[]> valueFactory);
    public virtual ValueBuffer Create(DbDataReader dataReader);
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.TypeMappedPropertyRelationalParameter : TypeMappedRelationalParameter {
    private IClrPropertyGetter _clrPropertyGetter;
    public TypeMappedPropertyRelationalParameter(string invariantName, string name, RelationalTypeMapping relationalTypeMapping, IProperty property);
    public virtual void AddDbParameter(DbCommand command, object value);
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.TypeMappedRelationalParameter : object {
    [CompilerGeneratedAttribute]
private string <InvariantName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <RelationalTypeMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsNullable>k__BackingField;
    public string InvariantName { get; }
    public string Name { get; }
    internal RelationalTypeMapping RelationalTypeMapping { get; }
    internal Nullable`1<bool> IsNullable { get; }
    public TypeMappedRelationalParameter(string invariantName, string name, RelationalTypeMapping relationalTypeMapping, Nullable`1<bool> nullable);
    [CompilerGeneratedAttribute]
public virtual string get_InvariantName();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
internal RelationalTypeMapping get_RelationalTypeMapping();
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_IsNullable();
    public virtual void AddDbParameter(DbCommand command, object value);
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.UntypedRelationalValueBufferFactory : object {
    private Action`1<Object[]> _processValuesAction;
    public UntypedRelationalValueBufferFactory(Action`1<Object[]> processValuesAction);
    public virtual ValueBuffer Create(DbDataReader dataReader);
}
public interface Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory {
    public abstract virtual ParameterNameGenerator Create();
}
public interface Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder {
    public abstract virtual IRelationalCommand Build(string sql);
    public abstract virtual RawSqlCommand Build(string sql, IReadOnlyList`1<object> parameters);
}
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalCommand {
    public string CommandText { get; }
    public IReadOnlyList`1<IRelationalParameter> Parameters { get; }
    public abstract virtual string get_CommandText();
    public abstract virtual IReadOnlyList`1<IRelationalParameter> get_Parameters();
    public abstract virtual int ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues);
    [ObsoleteAttribute("Use overload without 'manageConnection' parameter")]
public abstract virtual int ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, bool manageConnection);
    public abstract virtual Task`1<int> ExecuteNonQueryAsync(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use overload without 'manageConnection' parameter")]
public abstract virtual Task`1<int> ExecuteNonQueryAsync(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, bool manageConnection, CancellationToken cancellationToken);
    public abstract virtual object ExecuteScalar(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues);
    [ObsoleteAttribute("Use overload without 'manageConnection' parameter")]
public abstract virtual object ExecuteScalar(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, bool manageConnection);
    public abstract virtual Task`1<object> ExecuteScalarAsync(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use overload without 'manageConnection' parameter")]
public abstract virtual Task`1<object> ExecuteScalarAsync(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, bool manageConnection, CancellationToken cancellationToken);
    public abstract virtual RelationalDataReader ExecuteReader(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues);
    [ObsoleteAttribute("Use overload without 'manageConnection' parameter")]
public abstract virtual RelationalDataReader ExecuteReader(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, bool manageConnection);
    public abstract virtual Task`1<RelationalDataReader> ExecuteReaderAsync(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use overload without 'manageConnection' parameter")]
public abstract virtual Task`1<RelationalDataReader> ExecuteReaderAsync(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, bool manageConnection, CancellationToken cancellationToken);
}
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder {
    public IRelationalParameterBuilder ParameterBuilder { get; }
    public abstract virtual IRelationalParameterBuilder get_ParameterBuilder();
    public abstract virtual IRelationalCommand Build();
}
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory {
    public abstract virtual IRelationalCommandBuilder Create();
}
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalConnection {
    public string ConnectionString { get; }
    public DbConnection DbConnection { get; }
    public Nullable`1<int> CommandTimeout { get; public set; }
    public bool IsMultipleActiveResultSetsEnabled { get; }
    public IValueBufferCursor ActiveCursor { get; public set; }
    public IDbContextTransaction CurrentTransaction { get; }
    public abstract virtual string get_ConnectionString();
    public abstract virtual DbConnection get_DbConnection();
    public abstract virtual Nullable`1<int> get_CommandTimeout();
    public abstract virtual void set_CommandTimeout(Nullable`1<int> value);
    public abstract virtual void Open();
    public abstract virtual Task OpenAsync(CancellationToken cancellationToken);
    public abstract virtual void Close();
    public abstract virtual bool get_IsMultipleActiveResultSetsEnabled();
    public abstract virtual IValueBufferCursor get_ActiveCursor();
    public abstract virtual void set_ActiveCursor(IValueBufferCursor value);
    public abstract virtual IDbContextTransaction get_CurrentTransaction();
}
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator {
    public abstract virtual bool Exists();
    public abstract virtual Task`1<bool> ExistsAsync(CancellationToken cancellationToken);
    public abstract virtual void Create();
    public abstract virtual Task CreateAsync(CancellationToken cancellationToken);
    public abstract virtual void Delete();
    public abstract virtual Task DeleteAsync(CancellationToken cancellationToken);
    public abstract virtual void CreateTables();
    public abstract virtual Task CreateTablesAsync(CancellationToken cancellationToken);
}
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseProviderServices {
    public IMigrationsAnnotationProvider MigrationsAnnotationProvider { get; }
    public IHistoryRepository HistoryRepository { get; }
    public IMigrationsSqlGenerator MigrationsSqlGenerator { get; }
    public IRelationalConnection RelationalConnection { get; }
    public IRelationalTypeMapper TypeMapper { get; }
    public IUpdateSqlGenerator UpdateSqlGenerator { get; }
    public IModificationCommandBatchFactory ModificationCommandBatchFactory { get; }
    public ICommandBatchPreparer CommandBatchPreparer { get; }
    public IBatchExecutor BatchExecutor { get; }
    public IRelationalValueBufferFactoryFactory ValueBufferFactoryFactory { get; }
    public IRelationalDatabaseCreator RelationalDatabaseCreator { get; }
    public IRelationalAnnotationProvider AnnotationProvider { get; }
    public IMethodCallTranslator CompositeMethodCallTranslator { get; }
    public IMemberTranslator CompositeMemberTranslator { get; }
    public IExpressionFragmentTranslator CompositeExpressionFragmentTranslator { get; }
    public IParameterNameGeneratorFactory ParameterNameGeneratorFactory { get; }
    public ISqlGenerationHelper SqlGenerationHelper { get; }
    public IQuerySqlGeneratorFactory QuerySqlGeneratorFactory { get; }
    public abstract virtual IMigrationsAnnotationProvider get_MigrationsAnnotationProvider();
    public abstract virtual IHistoryRepository get_HistoryRepository();
    public abstract virtual IMigrationsSqlGenerator get_MigrationsSqlGenerator();
    public abstract virtual IRelationalConnection get_RelationalConnection();
    public abstract virtual IRelationalTypeMapper get_TypeMapper();
    public abstract virtual IUpdateSqlGenerator get_UpdateSqlGenerator();
    public abstract virtual IModificationCommandBatchFactory get_ModificationCommandBatchFactory();
    public abstract virtual ICommandBatchPreparer get_CommandBatchPreparer();
    public abstract virtual IBatchExecutor get_BatchExecutor();
    public abstract virtual IRelationalValueBufferFactoryFactory get_ValueBufferFactoryFactory();
    public abstract virtual IRelationalDatabaseCreator get_RelationalDatabaseCreator();
    public abstract virtual IRelationalAnnotationProvider get_AnnotationProvider();
    public abstract virtual IMethodCallTranslator get_CompositeMethodCallTranslator();
    public abstract virtual IMemberTranslator get_CompositeMemberTranslator();
    public abstract virtual IExpressionFragmentTranslator get_CompositeExpressionFragmentTranslator();
    public abstract virtual IParameterNameGeneratorFactory get_ParameterNameGeneratorFactory();
    public abstract virtual ISqlGenerationHelper get_SqlGenerationHelper();
    public abstract virtual IQuerySqlGeneratorFactory get_QuerySqlGeneratorFactory();
}
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalParameter {
    public string InvariantName { get; }
    public abstract virtual string get_InvariantName();
    public abstract virtual void AddDbParameter(DbCommand command, object value);
}
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalParameterBuilder {
    public IReadOnlyList`1<IRelationalParameter> Parameters { get; }
    public abstract virtual IReadOnlyList`1<IRelationalParameter> get_Parameters();
    public abstract virtual void AddParameter(string invariantName, string name);
    public abstract virtual void AddParameter(string invariantName, string name, RelationalTypeMapping typeMapping, bool nullable);
    public abstract virtual void AddParameter(string invariantName, string name, IProperty property);
    public abstract virtual void AddCompositeParameter(string invariantName, Action`1<IRelationalParameterBuilder> buildAction);
    public abstract virtual void AddPropertyParameter(string invariantName, string name, IProperty property);
}
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager {
    public abstract virtual IDbContextTransaction BeginTransaction(IsolationLevel isolationLevel);
    public abstract virtual Task`1<IDbContextTransaction> BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken);
    public abstract virtual IDbContextTransaction UseTransaction(DbTransaction transaction);
}
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper {
    public IByteArrayRelationalTypeMapper ByteArrayMapper { get; }
    public IStringRelationalTypeMapper StringMapper { get; }
    public abstract virtual RelationalTypeMapping FindMapping(IProperty property);
    public abstract virtual RelationalTypeMapping FindMapping(Type clrType);
    public abstract virtual RelationalTypeMapping FindMapping(string storeType);
    public abstract virtual void ValidateTypeName(string storeType);
    public abstract virtual IByteArrayRelationalTypeMapper get_ByteArrayMapper();
    public abstract virtual IStringRelationalTypeMapper get_StringMapper();
}
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory {
    public abstract virtual ValueBuffer Create(DbDataReader dataReader);
}
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory {
    public abstract virtual IRelationalValueBufferFactory Create(IReadOnlyList`1<Type> valueTypes, IReadOnlyList`1<int> indexMap);
}
public interface Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper {
    public string StatementTerminator { get; }
    public string BatchTerminator { get; }
    public abstract virtual string get_StatementTerminator();
    public abstract virtual string get_BatchTerminator();
    public abstract virtual string GenerateParameterName(string name);
    public abstract virtual void GenerateParameterName(StringBuilder builder, string name);
    public abstract virtual string GenerateLiteral(object value, RelationalTypeMapping typeMapping);
    public abstract virtual void GenerateLiteral(StringBuilder builder, object value, RelationalTypeMapping typeMapping);
    public abstract virtual string EscapeLiteral(string literal);
    public abstract virtual void EscapeLiteral(StringBuilder builder, string literal);
    public abstract virtual string EscapeIdentifier(string identifier);
    public abstract virtual void EscapeIdentifier(StringBuilder builder, string identifier);
    public abstract virtual string DelimitIdentifier(string identifier);
    public abstract virtual void DelimitIdentifier(StringBuilder builder, string identifier);
    public abstract virtual string DelimitIdentifier(string name, string schema);
    public abstract virtual void DelimitIdentifier(StringBuilder builder, string name, string schema);
}
public interface Microsoft.EntityFrameworkCore.Storage.IStringRelationalTypeMapper {
    public abstract virtual RelationalTypeMapping FindMapping(bool unicode, bool keyOrIndex, Nullable`1<int> maxLength);
}
public class Microsoft.EntityFrameworkCore.Storage.ParameterNameGenerator : object {
    private int _count;
    public virtual string GenerateNext();
    public virtual void Reset();
}
public class Microsoft.EntityFrameworkCore.Storage.ParameterNameGeneratorFactory : object {
    public virtual ParameterNameGenerator Create();
}
public class Microsoft.EntityFrameworkCore.Storage.RawSqlCommand : object {
    [CompilerGeneratedAttribute]
private IRelationalCommand <RelationalCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <ParameterValues>k__BackingField;
    public IRelationalCommand RelationalCommand { get; }
    public IReadOnlyDictionary`2<string, object> ParameterValues { get; }
    public RawSqlCommand(IRelationalCommand relationalCommand, IReadOnlyDictionary`2<string, object> parameterValues);
    [CompilerGeneratedAttribute]
public virtual IRelationalCommand get_RelationalCommand();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyDictionary`2<string, object> get_ParameterValues();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions : object {
    [ExtensionAttribute]
public static IRelationalCommandBuilder Append(IRelationalCommandBuilder commandBuilder, object o);
    [ExtensionAttribute]
public static IRelationalCommandBuilder AppendLine(IRelationalCommandBuilder commandBuilder);
    [ExtensionAttribute]
public static IRelationalCommandBuilder AppendLine(IRelationalCommandBuilder commandBuilder, object o);
    [ExtensionAttribute]
public static IRelationalCommandBuilder AppendLines(IRelationalCommandBuilder commandBuilder, object o);
    [ExtensionAttribute]
public static IRelationalCommandBuilder IncrementIndent(IRelationalCommandBuilder commandBuilder);
    [ExtensionAttribute]
public static IRelationalCommandBuilder DecrementIndent(IRelationalCommandBuilder commandBuilder);
    [ExtensionAttribute]
public static IDisposable Indent(IRelationalCommandBuilder commandBuilder);
    [ExtensionAttribute]
public static int GetLength(IRelationalCommandBuilder commandBuilder);
    [ExtensionAttribute]
public static IRelationalCommandBuilder AddParameter(IRelationalCommandBuilder commandBuilder, string invariantName, string name);
    [ExtensionAttribute]
public static IRelationalCommandBuilder AddParameter(IRelationalCommandBuilder commandBuilder, string invariantName, string name, RelationalTypeMapping typeMapping, bool nullable);
    [ExtensionAttribute]
public static IRelationalCommandBuilder AddParameter(IRelationalCommandBuilder commandBuilder, string invariantName, string name, IProperty property);
    [ExtensionAttribute]
public static IRelationalCommandBuilder AddCompositeParameter(IRelationalCommandBuilder commandBuilder, string invariantName, Action`1<IRelationalParameterBuilder> buildAction);
    [ExtensionAttribute]
public static IRelationalCommandBuilder AddPropertyParameter(IRelationalCommandBuilder commandBuilder, string invariantName, string name, IProperty property);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Storage.RelationalCommandExtensions : object {
    [ExtensionAttribute]
public static int ExecuteNonQuery(IRelationalCommand command, IRelationalConnection connection);
    [ExtensionAttribute]
public static Task`1<int> ExecuteNonQueryAsync(IRelationalCommand command, IRelationalConnection connection, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static object ExecuteScalar(IRelationalCommand command, IRelationalConnection connection);
    [ExtensionAttribute]
public static Task`1<object> ExecuteScalarAsync(IRelationalCommand command, IRelationalConnection connection, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static RelationalDataReader ExecuteReader(IRelationalCommand command, IRelationalConnection connection);
    [ExtensionAttribute]
public static Task`1<RelationalDataReader> ExecuteReaderAsync(IRelationalCommand command, IRelationalConnection connection, CancellationToken cancellationToken);
}
public abstract class Microsoft.EntityFrameworkCore.Storage.RelationalConnection : object {
    private string _connectionString;
    private LazyRef`1<DbConnection> _connection;
    private bool _connectionOwned;
    private int _openedCount;
    private bool _openedInternally;
    private Nullable`1<int> _commandTimeout;
    private ILogger _logger;
    [CompilerGeneratedAttribute]
private IDbContextTransaction <CurrentTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueBufferCursor <ActiveCursor>k__BackingField;
    protected ILogger Logger { get; }
    public string ConnectionString { get; }
    public DbConnection DbConnection { get; }
    public IDbContextTransaction CurrentTransaction { get; protected set; }
    public Nullable`1<int> CommandTimeout { get; public set; }
    public bool IsMultipleActiveResultSetsEnabled { get; }
    public IValueBufferCursor ActiveCursor { get; public set; }
    protected RelationalConnection(IDbContextOptions options, ILogger logger);
    protected abstract virtual DbConnection CreateDbConnection();
    protected virtual ILogger get_Logger();
    public virtual string get_ConnectionString();
    public virtual DbConnection get_DbConnection();
    [CompilerGeneratedAttribute]
public virtual IDbContextTransaction get_CurrentTransaction();
    [CompilerGeneratedAttribute]
protected virtual void set_CurrentTransaction(IDbContextTransaction value);
    public virtual Nullable`1<int> get_CommandTimeout();
    public virtual void set_CommandTimeout(Nullable`1<int> value);
    [NotNullAttribute]
public virtual IDbContextTransaction BeginTransaction();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalConnection/<BeginTransactionAsync>d__23")]
[NotNullAttribute]
public virtual Task`1<IDbContextTransaction> BeginTransactionAsync(CancellationToken cancellationToken);
    [NotNullAttribute]
public virtual IDbContextTransaction BeginTransaction(IsolationLevel isolationLevel);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalConnection/<BeginTransactionAsync>d__25")]
[NotNullAttribute]
public virtual Task`1<IDbContextTransaction> BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken);
    private IDbContextTransaction BeginTransactionWithNoPreconditions(IsolationLevel isolationLevel);
    public virtual IDbContextTransaction UseTransaction(DbTransaction transaction);
    public virtual void CommitTransaction();
    public virtual void RollbackTransaction();
    public virtual void Open();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalConnection/<OpenAsync>d__31")]
public virtual Task OpenAsync(CancellationToken cancellationToken);
    private void CheckForAmbientTransactions();
    public virtual void Close();
    public virtual bool get_IsMultipleActiveResultSetsEnabled();
    [CompilerGeneratedAttribute]
public virtual IValueBufferCursor get_ActiveCursor();
    [CompilerGeneratedAttribute]
public virtual void set_ActiveCursor(IValueBufferCursor value);
    public virtual void Dispose();
}
public class Microsoft.EntityFrameworkCore.Storage.RelationalDatabase : Database {
    private ICommandBatchPreparer _batchPreparer;
    private IBatchExecutor _batchExecutor;
    private IRelationalConnection _connection;
    public RelationalDatabase(IQueryCompilationContextFactory queryCompilationContextFactory, ICommandBatchPreparer batchPreparer, IBatchExecutor batchExecutor, IRelationalConnection connection);
    public virtual int SaveChanges(IReadOnlyList`1<IUpdateEntry> entries);
    public virtual Task`1<int> SaveChangesAsync(IReadOnlyList`1<IUpdateEntry> entries, CancellationToken cancellationToken);
}
public abstract class Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator : object {
    private IMigrationsModelDiffer _modelDiffer;
    private IMigrationsSqlGenerator _migrationsSqlGenerator;
    [CompilerGeneratedAttribute]
private IModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationCommandExecutor <MigrationCommandExecutor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecutionStrategyFactory <ExecutionStrategyFactory>k__BackingField;
    protected IModel Model { get; }
    protected IRelationalConnection Connection { get; }
    protected IMigrationCommandExecutor MigrationCommandExecutor { get; }
    protected IExecutionStrategyFactory ExecutionStrategyFactory { get; private set; }
    [ObsoleteAttribute("Derived classes must be updated to call the new constructor with additional parameters.")]
protected RelationalDatabaseCreator(IModel model, IRelationalConnection connection, IMigrationsModelDiffer modelDiffer, IMigrationsSqlGenerator migrationsSqlGenerator, IMigrationCommandExecutor migrationCommandExecutor);
    protected RelationalDatabaseCreator(IModel model, IRelationalConnection connection, IMigrationsModelDiffer modelDiffer, IMigrationsSqlGenerator migrationsSqlGenerator, IMigrationCommandExecutor migrationCommandExecutor, IExecutionStrategyFactory executionStrategyFactory);
    [CompilerGeneratedAttribute]
protected virtual IModel get_Model();
    [CompilerGeneratedAttribute]
protected virtual IRelationalConnection get_Connection();
    [CompilerGeneratedAttribute]
protected virtual IMigrationCommandExecutor get_MigrationCommandExecutor();
    [CompilerGeneratedAttribute]
protected virtual IExecutionStrategyFactory get_ExecutionStrategyFactory();
    [CompilerGeneratedAttribute]
private void set_ExecutionStrategyFactory(IExecutionStrategyFactory value);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite.InjectServices(IServiceProvider serviceProvider);
    public abstract virtual bool Exists();
    public virtual Task`1<bool> ExistsAsync(CancellationToken cancellationToken);
    public abstract virtual void Create();
    public virtual Task CreateAsync(CancellationToken cancellationToken);
    public abstract virtual void Delete();
    public virtual Task DeleteAsync(CancellationToken cancellationToken);
    public virtual void CreateTables();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator/<CreateTablesAsync>d__25")]
public virtual Task CreateTablesAsync(CancellationToken cancellationToken);
    protected virtual IReadOnlyList`1<MigrationCommand> GetCreateTablesCommands();
    protected abstract virtual bool HasTables();
    protected virtual Task`1<bool> HasTablesAsync(CancellationToken cancellationToken);
    public virtual bool EnsureDeleted();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator/<EnsureDeletedAsync>d__30")]
public virtual Task`1<bool> EnsureDeletedAsync(CancellationToken cancellationToken);
    public virtual bool EnsureCreated();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator/<EnsureCreatedAsync>d__32")]
public virtual Task`1<bool> EnsureCreatedAsync(CancellationToken cancellationToken);
}
public abstract class Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseProviderServices : DatabaseProviderServices {
    public IDatabase Database { get; }
    public IDbContextTransactionManager TransactionManager { get; }
    public IModelValidator ModelValidator { get; }
    public ICompiledQueryCacheKeyGenerator CompiledQueryCacheKeyGenerator { get; }
    public IValueGeneratorSelector ValueGeneratorSelector { get; }
    public IExpressionPrinter ExpressionPrinter { get; }
    public IResultOperatorHandler ResultOperatorHandler { get; }
    public IQueryContextFactory QueryContextFactory { get; }
    public IQueryCompilationContextFactory QueryCompilationContextFactory { get; }
    public IEntityQueryableExpressionVisitorFactory EntityQueryableExpressionVisitorFactory { get; }
    public IEntityQueryModelVisitorFactory EntityQueryModelVisitorFactory { get; }
    public IProjectionExpressionVisitorFactory ProjectionExpressionVisitorFactory { get; }
    public IRelationalTypeMapper TypeMapper { get; }
    public IMigrationsAnnotationProvider MigrationsAnnotationProvider { get; }
    public IBatchExecutor BatchExecutor { get; }
    public IRelationalValueBufferFactoryFactory ValueBufferFactoryFactory { get; }
    public ICommandBatchPreparer CommandBatchPreparer { get; }
    public IParameterNameGeneratorFactory ParameterNameGeneratorFactory { get; }
    public IMigrationsSqlGenerator MigrationsSqlGenerator { get; }
    public IExpressionFragmentTranslator CompositeExpressionFragmentTranslator { get; }
    public IDatabaseCreator Creator { get; }
    public IMethodCallTranslator CompositeMethodCallTranslator { get; }
    public IMemberTranslator CompositeMemberTranslator { get; }
    public IHistoryRepository HistoryRepository { get; }
    public IRelationalConnection RelationalConnection { get; }
    public ISqlGenerationHelper SqlGenerationHelper { get; }
    public IUpdateSqlGenerator UpdateSqlGenerator { get; }
    public IModificationCommandBatchFactory ModificationCommandBatchFactory { get; }
    public IRelationalDatabaseCreator RelationalDatabaseCreator { get; }
    public IRelationalAnnotationProvider AnnotationProvider { get; }
    public IQuerySqlGeneratorFactory QuerySqlGeneratorFactory { get; }
    public IExecutionStrategyFactory ExecutionStrategyFactory { get; }
    protected RelationalDatabaseProviderServices(IServiceProvider services);
    public virtual IDatabase get_Database();
    public virtual IDbContextTransactionManager get_TransactionManager();
    public virtual IModelValidator get_ModelValidator();
    public virtual ICompiledQueryCacheKeyGenerator get_CompiledQueryCacheKeyGenerator();
    public virtual IValueGeneratorSelector get_ValueGeneratorSelector();
    public virtual IExpressionPrinter get_ExpressionPrinter();
    public virtual IResultOperatorHandler get_ResultOperatorHandler();
    public virtual IQueryContextFactory get_QueryContextFactory();
    public virtual IQueryCompilationContextFactory get_QueryCompilationContextFactory();
    public virtual IEntityQueryableExpressionVisitorFactory get_EntityQueryableExpressionVisitorFactory();
    public virtual IEntityQueryModelVisitorFactory get_EntityQueryModelVisitorFactory();
    public virtual IProjectionExpressionVisitorFactory get_ProjectionExpressionVisitorFactory();
    public virtual IRelationalTypeMapper get_TypeMapper();
    public virtual IMigrationsAnnotationProvider get_MigrationsAnnotationProvider();
    public virtual IBatchExecutor get_BatchExecutor();
    public virtual IRelationalValueBufferFactoryFactory get_ValueBufferFactoryFactory();
    public virtual ICommandBatchPreparer get_CommandBatchPreparer();
    public virtual IParameterNameGeneratorFactory get_ParameterNameGeneratorFactory();
    public virtual IMigrationsSqlGenerator get_MigrationsSqlGenerator();
    public virtual IExpressionFragmentTranslator get_CompositeExpressionFragmentTranslator();
    public virtual IDatabaseCreator get_Creator();
    public abstract virtual IMethodCallTranslator get_CompositeMethodCallTranslator();
    public abstract virtual IMemberTranslator get_CompositeMemberTranslator();
    public abstract virtual IHistoryRepository get_HistoryRepository();
    public abstract virtual IRelationalConnection get_RelationalConnection();
    public abstract virtual ISqlGenerationHelper get_SqlGenerationHelper();
    public abstract virtual IUpdateSqlGenerator get_UpdateSqlGenerator();
    public abstract virtual IModificationCommandBatchFactory get_ModificationCommandBatchFactory();
    public abstract virtual IRelationalDatabaseCreator get_RelationalDatabaseCreator();
    public abstract virtual IRelationalAnnotationProvider get_AnnotationProvider();
    public abstract virtual IQuerySqlGeneratorFactory get_QuerySqlGeneratorFactory();
    public virtual IExecutionStrategyFactory get_ExecutionStrategyFactory();
}
public class Microsoft.EntityFrameworkCore.Storage.RelationalDataReader : object {
    private IRelationalConnection _connection;
    private DbCommand _command;
    private DbDataReader _reader;
    private bool _disposed;
    public DbDataReader DbDataReader { get; }
    public RelationalDataReader(IRelationalConnection connection, DbCommand command, DbDataReader reader);
    public virtual DbDataReader get_DbDataReader();
    public virtual void Dispose();
}
public class Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelper : object {
    private static string DecimalFormatConst;
    private static string DecimalFormatStringConst;
    private static string DateTimeFormatConst;
    private static string DateTimeFormatStringConst;
    private static string DateTimeOffsetFormatConst;
    private static string DateTimeOffsetFormatStringConst;
    private Dictionary`2<DbType, string> _dbTypeNameMapping;
    protected string FloatingPointFormatString { get; }
    protected string DecimalFormat { get; }
    protected string DecimalFormatString { get; }
    protected string DateTimeFormat { get; }
    protected string DateTimeFormatString { get; }
    protected string DateTimeOffsetFormat { get; }
    protected string DateTimeOffsetFormatString { get; }
    public string StatementTerminator { get; }
    public string BatchTerminator { get; }
    protected virtual string get_FloatingPointFormatString();
    protected virtual string get_DecimalFormat();
    protected virtual string get_DecimalFormatString();
    protected virtual string get_DateTimeFormat();
    protected virtual string get_DateTimeFormatString();
    protected virtual string get_DateTimeOffsetFormat();
    protected virtual string get_DateTimeOffsetFormatString();
    public virtual string get_StatementTerminator();
    public virtual string get_BatchTerminator();
    public virtual string GenerateParameterName(string name);
    public virtual void GenerateParameterName(StringBuilder builder, string name);
    public virtual string GenerateLiteral(object value, RelationalTypeMapping typeMapping);
    public virtual void GenerateLiteral(StringBuilder builder, object value, RelationalTypeMapping typeMapping);
    public virtual string EscapeLiteral(string literal);
    public virtual void EscapeLiteral(StringBuilder builder, string literal);
    public virtual string EscapeIdentifier(string identifier);
    public virtual void EscapeIdentifier(StringBuilder builder, string identifier);
    public virtual string DelimitIdentifier(string identifier);
    public virtual void DelimitIdentifier(StringBuilder builder, string identifier);
    public virtual string DelimitIdentifier(string name, string schema);
    public virtual void DelimitIdentifier(StringBuilder builder, string name, string schema);
    protected virtual string GenerateLiteralValue(int value);
    protected virtual void GenerateLiteralValue(StringBuilder builder, int value);
    protected virtual string GenerateLiteralValue(short value);
    protected virtual void GenerateLiteralValue(StringBuilder builder, short value);
    protected virtual string GenerateLiteralValue(long value);
    protected virtual void GenerateLiteralValue(StringBuilder builder, long value);
    protected virtual string GenerateLiteralValue(byte value);
    protected virtual void GenerateLiteralValue(StringBuilder builder, byte value);
    protected virtual string GenerateLiteralValue(decimal value);
    protected virtual void GenerateLiteralValue(StringBuilder builder, decimal value);
    protected virtual string GenerateLiteralValue(double value);
    protected virtual void GenerateLiteralValue(StringBuilder builder, double value);
    protected virtual string GenerateLiteralValue(float value);
    protected virtual void GenerateLiteralValue(StringBuilder builder, float value);
    protected virtual string GenerateLiteralValue(bool value);
    protected virtual void GenerateLiteralValue(StringBuilder builder, bool value);
    protected virtual string GenerateLiteralValue(char value);
    protected virtual void GenerateLiteralValue(StringBuilder builder, char value);
    protected virtual string GenerateLiteralValue(string value, RelationalTypeMapping typeMapping);
    protected virtual void GenerateLiteralValue(StringBuilder builder, string value, RelationalTypeMapping typeMapping);
    protected virtual string GenerateLiteralValue(object value);
    protected virtual void GenerateLiteralValue(StringBuilder builder, object value);
    protected virtual string GenerateLiteralValue(Byte[] value);
    protected virtual void GenerateLiteralValue(StringBuilder builder, Byte[] value);
    protected virtual string GenerateLiteralValue(DbType value);
    protected virtual void GenerateLiteralValue(StringBuilder builder, DbType value);
    protected virtual string GenerateLiteralValue(Enum value);
    protected virtual void GenerateLiteralValue(StringBuilder builder, Enum value);
    protected virtual string GenerateLiteralValue(Guid value);
    protected virtual void GenerateLiteralValue(StringBuilder builder, Guid value);
    protected virtual string GenerateLiteralValue(DateTime value);
    protected virtual void GenerateLiteralValue(StringBuilder builder, DateTime value);
    protected virtual string GenerateLiteralValue(DateTimeOffset value);
    protected virtual void GenerateLiteralValue(StringBuilder builder, DateTimeOffset value);
    protected virtual string GenerateLiteralValue(TimeSpan value);
    protected virtual void GenerateLiteralValue(StringBuilder builder, TimeSpan value);
}
public class Microsoft.EntityFrameworkCore.Storage.RelationalTransaction : object {
    private IRelationalConnection _relationalConnection;
    private DbTransaction _dbTransaction;
    private ILogger _logger;
    private bool _transactionOwned;
    private bool _connectionClosed;
    private bool _disposed;
    private DbTransaction Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.Data.Common.DbTransaction>.Instance { get; }
    public RelationalTransaction(IRelationalConnection connection, DbTransaction transaction, ILogger logger, bool transactionOwned);
    public virtual void Commit();
    public virtual void Rollback();
    public virtual void Dispose();
    private void ClearTransaction();
    private sealed virtual override DbTransaction Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.Data.Common.DbTransaction>.get_Instance();
}
public abstract class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapper : object {
    private ConcurrentDictionary`2<string, RelationalTypeMapping> _explicitMappings;
    public IByteArrayRelationalTypeMapper ByteArrayMapper { get; }
    public IStringRelationalTypeMapper StringMapper { get; }
    protected abstract virtual IReadOnlyDictionary`2<Type, RelationalTypeMapping> GetClrTypeMappings();
    protected abstract virtual IReadOnlyDictionary`2<string, RelationalTypeMapping> GetStoreTypeMappings();
    protected abstract virtual string GetColumnType(IProperty property);
    public virtual void ValidateTypeName(string storeType);
    public virtual RelationalTypeMapping FindMapping(IProperty property);
    public virtual RelationalTypeMapping FindMapping(Type clrType);
    public virtual RelationalTypeMapping FindMapping(string storeType);
    protected virtual RelationalTypeMapping CreateMappingFromStoreType(string storeType);
    protected virtual RelationalTypeMapping FindCustomMapping(IProperty property);
    public virtual IByteArrayRelationalTypeMapper get_ByteArrayMapper();
    public virtual IStringRelationalTypeMapper get_StringMapper();
    protected virtual RelationalTypeMapping GetStringMapping(IProperty property);
    protected virtual RelationalTypeMapping GetByteArrayMapping(IProperty property);
    protected virtual bool RequiresKeyMapping(IProperty property);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapperExtensions : object {
    [ExtensionAttribute]
public static RelationalTypeMapping GetMappingForValue(IRelationalTypeMapper typeMapper, object value);
    [ExtensionAttribute]
public static RelationalTypeMapping GetMapping(IRelationalTypeMapper typeMapper, IProperty property);
    [ExtensionAttribute]
public static RelationalTypeMapping GetMapping(IRelationalTypeMapper typeMapper, Type clrType);
    [ExtensionAttribute]
public static RelationalTypeMapping GetMapping(IRelationalTypeMapper typeMapper, string typeName);
    [ExtensionAttribute]
public static bool IsTypeMapped(IRelationalTypeMapper typeMapper, Type clrType);
}
public class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping : object {
    public static RelationalTypeMapping NullMapping;
    [CompilerGeneratedAttribute]
private string <StoreType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DbType> <DbType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUnicode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasNonDefaultUnicode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasNonDefaultSize>k__BackingField;
    public string StoreType { get; }
    public Type ClrType { get; }
    public Nullable`1<DbType> DbType { get; }
    public bool IsUnicode { get; }
    public Nullable`1<int> Size { get; }
    public bool HasNonDefaultUnicode { get; }
    public bool HasNonDefaultSize { get; }
    public RelationalTypeMapping(string storeType, Type clrType);
    public RelationalTypeMapping(string storeType, Type clrType, Nullable`1<DbType> dbType);
    public RelationalTypeMapping(string storeType, Type clrType, Nullable`1<DbType> dbType, bool unicode, Nullable`1<int> size, bool hasNonDefaultUnicode, bool hasNonDefaultSize);
    private RelationalTypeMapping(string storeType);
    private static RelationalTypeMapping();
    public virtual RelationalTypeMapping CreateCopy(string storeType, Nullable`1<int> size);
    [CompilerGeneratedAttribute]
public virtual string get_StoreType();
    [CompilerGeneratedAttribute]
public virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DbType> get_DbType();
    [CompilerGeneratedAttribute]
public virtual bool get_IsUnicode();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_Size();
    [CompilerGeneratedAttribute]
public virtual bool get_HasNonDefaultUnicode();
    [CompilerGeneratedAttribute]
public virtual bool get_HasNonDefaultSize();
    public virtual DbParameter CreateParameter(DbCommand command, string name, object value, Nullable`1<bool> nullable);
    protected virtual void ConfigureParameter(DbParameter parameter);
}
public class Microsoft.EntityFrameworkCore.Storage.StringRelationalTypeMapper : object {
    private ConcurrentDictionary`2<int, RelationalTypeMapping> _boundedAnsiMappings;
    private ConcurrentDictionary`2<int, RelationalTypeMapping> _boundedUnicodeMappings;
    [CompilerGeneratedAttribute]
private int <MaxBoundedAnsiLength>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <DefaultAnsiMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <UnboundedAnsiMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <KeyAnsiMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<int, RelationalTypeMapping> <CreateBoundedAnsiMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxBoundedUnicodeLength>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <DefaultUnicodeMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <UnboundedUnicodeMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <KeyUnicodeMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<int, RelationalTypeMapping> <CreateBoundedUnicodeMapping>k__BackingField;
    public int MaxBoundedAnsiLength { get; }
    public RelationalTypeMapping DefaultAnsiMapping { get; }
    public RelationalTypeMapping UnboundedAnsiMapping { get; }
    public RelationalTypeMapping KeyAnsiMapping { get; }
    public Func`2<int, RelationalTypeMapping> CreateBoundedAnsiMapping { get; }
    public int MaxBoundedUnicodeLength { get; }
    public RelationalTypeMapping DefaultUnicodeMapping { get; }
    public RelationalTypeMapping UnboundedUnicodeMapping { get; }
    public RelationalTypeMapping KeyUnicodeMapping { get; }
    public Func`2<int, RelationalTypeMapping> CreateBoundedUnicodeMapping { get; }
    public StringRelationalTypeMapper(int maxBoundedAnsiLength, RelationalTypeMapping defaultAnsiMapping, RelationalTypeMapping unboundedAnsiMapping, RelationalTypeMapping keyAnsiMapping, Func`2<int, RelationalTypeMapping> createBoundedAnsiMapping, int maxBoundedUnicodeLength, RelationalTypeMapping defaultUnicodeMapping, RelationalTypeMapping unboundedUnicodeMapping, RelationalTypeMapping keyUnicodeMapping, Func`2<int, RelationalTypeMapping> createBoundedUnicodeMapping);
    [CompilerGeneratedAttribute]
public virtual int get_MaxBoundedAnsiLength();
    [CompilerGeneratedAttribute]
public virtual RelationalTypeMapping get_DefaultAnsiMapping();
    [CompilerGeneratedAttribute]
public virtual RelationalTypeMapping get_UnboundedAnsiMapping();
    [CompilerGeneratedAttribute]
public virtual RelationalTypeMapping get_KeyAnsiMapping();
    [CompilerGeneratedAttribute]
public virtual Func`2<int, RelationalTypeMapping> get_CreateBoundedAnsiMapping();
    [CompilerGeneratedAttribute]
public virtual int get_MaxBoundedUnicodeLength();
    [CompilerGeneratedAttribute]
public virtual RelationalTypeMapping get_DefaultUnicodeMapping();
    [CompilerGeneratedAttribute]
public virtual RelationalTypeMapping get_UnboundedUnicodeMapping();
    [CompilerGeneratedAttribute]
public virtual RelationalTypeMapping get_KeyUnicodeMapping();
    [CompilerGeneratedAttribute]
public virtual Func`2<int, RelationalTypeMapping> get_CreateBoundedUnicodeMapping();
    public virtual RelationalTypeMapping FindMapping(bool unicode, bool keyOrIndex, Nullable`1<int> maxLength);
    private static RelationalTypeMapping FindMapping(bool isKeyOrIndex, Nullable`1<int> maxLength, int maxBoundedLength, RelationalTypeMapping unboundedMapping, RelationalTypeMapping defaultMapping, RelationalTypeMapping keyMapping, ConcurrentDictionary`2<int, RelationalTypeMapping> boundedMappings, Func`2<int, RelationalTypeMapping> createBoundedMapping);
}
public class Microsoft.EntityFrameworkCore.Storage.TypedRelationalValueBufferFactoryFactory : object {
    private static MethodInfo _getFieldValueMethod;
    private static MethodInfo _isDbNullMethod;
    private static IDictionary`2<Type, MethodInfo> _getXMethods;
    private ConcurrentDictionary`2<CacheKey, Func`2<DbDataReader, Object[]>> _cache;
    private static TypedRelationalValueBufferFactoryFactory();
    public virtual IRelationalValueBufferFactory Create(IReadOnlyList`1<Type> valueTypes, IReadOnlyList`1<int> indexMap);
    private static Func`2<DbDataReader, Object[]> CreateArrayInitializer(CacheKey cacheKey);
    private static Expression CreateGetValueExpression(Expression dataReaderExpression, Type type, Expression indexExpression);
}
public class Microsoft.EntityFrameworkCore.Storage.UntypedRelationalValueBufferFactoryFactory : object {
    private ConcurrentDictionary`2<CacheKey, Action`1<Object[]>> _cache;
    private static Func`2<CacheKey, Action`1<Object[]>> _createValueProcessorDelegate;
    private static UntypedRelationalValueBufferFactoryFactory();
    public virtual IRelationalValueBufferFactory Create(IReadOnlyList`1<Type> valueTypes, IReadOnlyList`1<int> indexMap);
    private static Action`1<Object[]> CreateValueProcessor(CacheKey cacheKey);
}
public abstract class Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch : ReaderModificationCommandBatch {
    protected AffectedCountModificationCommandBatch(IRelationalCommandBuilderFactory commandBuilderFactory, ISqlGenerationHelper sqlGenerationHelper, IUpdateSqlGenerator updateSqlGenerator, IRelationalValueBufferFactoryFactory valueBufferFactoryFactory);
    protected virtual void Consume(DbDataReader reader);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch/<ConsumeAsync>d__2")]
protected virtual Task ConsumeAsync(DbDataReader reader, CancellationToken cancellationToken);
    protected virtual int ConsumeResultSetWithPropagation(int commandIndex, DbDataReader reader);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch/<ConsumeResultSetWithPropagationAsync>d__4")]
protected virtual Task`1<int> ConsumeResultSetWithPropagationAsync(int commandIndex, DbDataReader reader, CancellationToken cancellationToken);
    protected virtual int ConsumeResultSetWithoutPropagation(int commandIndex, DbDataReader reader);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch/<ConsumeResultSetWithoutPropagationAsync>d__6")]
protected virtual Task`1<int> ConsumeResultSetWithoutPropagationAsync(int commandIndex, DbDataReader reader, CancellationToken cancellationToken);
    private IReadOnlyList`1<IUpdateEntry> AggregateEntries(int endIndex, int commandCount);
    protected virtual void ThrowAggregateUpdateConcurrencyException(int commandIndex, int expectedRowsAffected, int rowsAffected);
}
public class Microsoft.EntityFrameworkCore.Update.ColumnModification : object {
    private string _parameterName;
    private string _originalParameterName;
    private Func`1<string> _generateParameterName;
    [CompilerGeneratedAttribute]
private IUpdateEntry <Entry>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRead>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWrite>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCondition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConcurrencyToken>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    public IUpdateEntry Entry { get; }
    public IProperty Property { get; }
    public bool IsRead { get; }
    public bool IsWrite { get; }
    public bool IsCondition { get; }
    public bool IsConcurrencyToken { get; }
    public bool IsKey { get; }
    public bool UseOriginalValueParameter { get; }
    public bool UseCurrentValueParameter { get; }
    public string ParameterName { get; }
    public string OriginalParameterName { get; }
    public string ColumnName { get; }
    public object OriginalValue { get; }
    public object Value { get; public set; }
    public ColumnModification(IUpdateEntry entry, IProperty property, IRelationalPropertyAnnotations propertyAnnotations, Func`1<string> generateParameterName, bool isRead, bool isWrite, bool isKey, bool isCondition, bool isConcurrencyToken);
    [CompilerGeneratedAttribute]
public virtual IUpdateEntry get_Entry();
    [CompilerGeneratedAttribute]
public virtual IProperty get_Property();
    [CompilerGeneratedAttribute]
public virtual bool get_IsRead();
    [CompilerGeneratedAttribute]
public virtual bool get_IsWrite();
    [CompilerGeneratedAttribute]
public virtual bool get_IsCondition();
    [CompilerGeneratedAttribute]
public virtual bool get_IsConcurrencyToken();
    [CompilerGeneratedAttribute]
public virtual bool get_IsKey();
    public virtual bool get_UseOriginalValueParameter();
    public virtual bool get_UseCurrentValueParameter();
    public virtual string get_ParameterName();
    public virtual string get_OriginalParameterName();
    [CompilerGeneratedAttribute]
public virtual string get_ColumnName();
    public virtual object get_OriginalValue();
    public virtual object get_Value();
    public virtual void set_Value(object value);
}
public interface Microsoft.EntityFrameworkCore.Update.IBatchExecutor {
    public abstract virtual int Execute(IEnumerable`1<ModificationCommandBatch> commandBatches, IRelationalConnection connection);
    public abstract virtual Task`1<int> ExecuteAsync(IEnumerable`1<ModificationCommandBatch> commandBatches, IRelationalConnection connection, CancellationToken cancellationToken);
}
public interface Microsoft.EntityFrameworkCore.Update.ICommandBatchPreparer {
    public abstract virtual IEnumerable`1<ModificationCommandBatch> BatchCommands(IReadOnlyList`1<IUpdateEntry> entries);
}
public interface Microsoft.EntityFrameworkCore.Update.IModificationCommandBatchFactory {
    public abstract virtual ModificationCommandBatch Create();
}
public class Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor : object {
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecutionStrategyFactory <ExecutionStrategyFactory>k__BackingField;
    public ICurrentDbContext CurrentContext { get; }
    protected IExecutionStrategyFactory ExecutionStrategyFactory { get; }
    public BatchExecutor(ICurrentDbContext currentContext, IExecutionStrategyFactory executionStrategyFactory);
    [CompilerGeneratedAttribute]
public virtual ICurrentDbContext get_CurrentContext();
    [CompilerGeneratedAttribute]
protected virtual IExecutionStrategyFactory get_ExecutionStrategyFactory();
    public virtual int Execute(IEnumerable`1<ModificationCommandBatch> commandBatches, IRelationalConnection connection);
    private int Execute(Tuple`2<IEnumerable`1<ModificationCommandBatch>, IRelationalConnection> parameters);
    public virtual Task`1<int> ExecuteAsync(IEnumerable`1<ModificationCommandBatch> commandBatches, IRelationalConnection connection, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor/<ExecuteAsync>d__10")]
private Task`1<int> ExecuteAsync(Tuple`2<IEnumerable`1<ModificationCommandBatch>, IRelationalConnection> parameters, CancellationToken cancellationToken);
    private IExecutionStrategy GetExecutionStrategy();
}
public class Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer : object {
    private IModificationCommandBatchFactory _modificationCommandBatchFactory;
    private IParameterNameGeneratorFactory _parameterNameGeneratorFactory;
    private IComparer`1<ModificationCommand> _modificationCommandComparer;
    private IRelationalAnnotationProvider _annotationProvider;
    private IKeyValueIndexFactorySource _keyValueIndexFactoryFactory;
    public CommandBatchPreparer(IModificationCommandBatchFactory modificationCommandBatchFactory, IParameterNameGeneratorFactory parameterNameGeneratorFactory, IComparer`1<ModificationCommand> modificationCommandComparer, IRelationalAnnotationProvider annotations, IKeyValueIndexFactorySource keyValueIndexFactoryFactory);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer/<BatchCommands>d__6")]
public virtual IEnumerable`1<ModificationCommandBatch> BatchCommands(IReadOnlyList`1<IUpdateEntry> entries);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer/<CreateModificationCommands>d__7")]
protected virtual IEnumerable`1<ModificationCommand> CreateModificationCommands(IReadOnlyList`1<IUpdateEntry> entries, Func`1<string> generateParameterName);
    protected virtual IReadOnlyList`1<List`1<ModificationCommand>> TopologicalSort(IEnumerable`1<ModificationCommand> commands);
    private Dictionary`2<IKeyValueIndex, List`1<ModificationCommand>> CreateKeyValuePredecessorMap(Graph`1<ModificationCommand> commandGraph);
    private void AddForeignKeyEdges(Multigraph`2<ModificationCommand, IForeignKey> commandGraph, Dictionary`2<IKeyValueIndex, List`1<ModificationCommand>> predecessorsMap);
    private static void AddMatchingPredecessorEdge(Dictionary`2<IKeyValueIndex, List`1<ModificationCommand>> predecessorsMap, IKeyValueIndex dependentKeyValue, Multigraph`2<ModificationCommand, IForeignKey> commandGraph, ModificationCommand command, IForeignKey foreignKey);
}
public interface Microsoft.EntityFrameworkCore.Update.Internal.IKeyValueIndex {
    public abstract virtual IKeyValueIndex WithOriginalValuesFlag();
}
public interface Microsoft.EntityFrameworkCore.Update.Internal.IKeyValueIndexFactory {
    public abstract virtual IKeyValueIndex CreatePrincipalKeyValue(InternalEntityEntry entry, IForeignKey foreignKey);
    public abstract virtual IKeyValueIndex CreatePrincipalKeyValueFromOriginalValues(InternalEntityEntry entry, IForeignKey foreignKey);
    public abstract virtual IKeyValueIndex CreateDependentKeyValue(InternalEntityEntry entry, IForeignKey foreignKey);
    public abstract virtual IKeyValueIndex CreateDependentKeyValueFromOriginalValues(InternalEntityEntry entry, IForeignKey foreignKey);
}
public interface Microsoft.EntityFrameworkCore.Update.Internal.IKeyValueIndexFactorySource {
    public abstract virtual IKeyValueIndexFactory GetKeyValueIndexFactory(IKey key);
}
public class Microsoft.EntityFrameworkCore.Update.Internal.KeyValueIndex`1 : object {
    private IForeignKey _foreignKey;
    private TKey _keyValue;
    private IEqualityComparer`1<TKey> _keyComparer;
    private bool _fromOriginalValues;
    public KeyValueIndex`1(IForeignKey foreignKey, TKey keyValue, IEqualityComparer`1<TKey> keyComparer, bool fromOriginalValues);
    public sealed virtual IKeyValueIndex WithOriginalValuesFlag();
    private bool Equals(KeyValueIndex`1<TKey> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Update.Internal.KeyValueIndexFactory`1 : object {
    private IPrincipalKeyValueFactory`1<TKey> _principalKeyValueFactory;
    public KeyValueIndexFactory`1(IPrincipalKeyValueFactory`1<TKey> principalKeyValueFactory);
    public virtual IKeyValueIndex CreatePrincipalKeyValue(InternalEntityEntry entry, IForeignKey foreignKey);
    public virtual IKeyValueIndex CreatePrincipalKeyValueFromOriginalValues(InternalEntityEntry entry, IForeignKey foreignKey);
    public virtual IKeyValueIndex CreateDependentKeyValue(InternalEntityEntry entry, IForeignKey foreignKey);
    public virtual IKeyValueIndex CreateDependentKeyValueFromOriginalValues(InternalEntityEntry entry, IForeignKey foreignKey);
}
public class Microsoft.EntityFrameworkCore.Update.Internal.KeyValueIndexFactorySource : IdentityMapFactoryFactoryBase {
    private ConcurrentDictionary`2<IKey, IKeyValueIndexFactory> _factories;
    public virtual IKeyValueIndexFactory GetKeyValueIndexFactory(IKey key);
    public virtual IKeyValueIndexFactory Create(IKey key);
    [UsedImplicitlyAttribute]
private static IKeyValueIndexFactory CreateFactory(IKey key);
}
public class Microsoft.EntityFrameworkCore.Update.Internal.ModificationCommandComparer : object {
    private ConcurrentDictionary`2<Type, Func`3<object, object, int>> _comparers;
    private static MethodInfo _compareMethod;
    private static ModificationCommandComparer();
    public virtual int Compare(ModificationCommand x, ModificationCommand y);
    protected virtual Func`3<object, object, int> GetComparer(Type type);
    private static int CompareValue(T x, T y);
}
public interface Microsoft.EntityFrameworkCore.Update.IUpdateSqlGenerator {
    public abstract virtual string GenerateNextSequenceValueOperation(string name, string schema);
    public abstract virtual void AppendNextSequenceValueOperation(StringBuilder commandStringBuilder, string name, string schema);
    public abstract virtual void AppendBatchHeader(StringBuilder commandStringBuilder);
    public abstract virtual ResultSetMapping AppendDeleteOperation(StringBuilder commandStringBuilder, ModificationCommand command, int commandPosition);
    public abstract virtual ResultSetMapping AppendInsertOperation(StringBuilder commandStringBuilder, ModificationCommand command, int commandPosition);
    public abstract virtual ResultSetMapping AppendUpdateOperation(StringBuilder commandStringBuilder, ModificationCommand command, int commandPosition);
}
public class Microsoft.EntityFrameworkCore.Update.ModificationCommand : object {
    private Func`2<IProperty, IRelationalPropertyAnnotations> _getPropertyExtensions;
    private Func`1<string> _generateParameterName;
    private List`1<IUpdateEntry> _entries;
    private IReadOnlyList`1<ColumnModification> _columnModifications;
    private bool _requiresResultPropagation;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    public string TableName { get; }
    public string Schema { get; }
    public IReadOnlyList`1<IUpdateEntry> Entries { get; }
    public EntityState EntityState { get; }
    public IReadOnlyList`1<ColumnModification> ColumnModifications { get; }
    public bool RequiresResultPropagation { get; }
    public ModificationCommand(string name, string schema, Func`1<string> generateParameterName, Func`2<IProperty, IRelationalPropertyAnnotations> getPropertyExtensions);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    public virtual IReadOnlyList`1<IUpdateEntry> get_Entries();
    public virtual EntityState get_EntityState();
    public virtual IReadOnlyList`1<ColumnModification> get_ColumnModifications();
    public virtual bool get_RequiresResultPropagation();
    public virtual void AddEntry(IUpdateEntry entry);
    private IReadOnlyList`1<ColumnModification> GenerateColumnModifications();
    public virtual void PropagateResults(ValueBuffer valueBuffer);
}
public abstract class Microsoft.EntityFrameworkCore.Update.ModificationCommandBatch : object {
    public IReadOnlyList`1<ModificationCommand> ModificationCommands { get; }
    public abstract virtual IReadOnlyList`1<ModificationCommand> get_ModificationCommands();
    public abstract virtual bool AddCommand(ModificationCommand modificationCommand);
    public abstract virtual void Execute(IRelationalConnection connection);
    public abstract virtual Task ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken);
}
public abstract class Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch : ModificationCommandBatch {
    private IRelationalCommandBuilderFactory _commandBuilderFactory;
    private IRelationalValueBufferFactoryFactory _valueBufferFactoryFactory;
    private List`1<ModificationCommand> _modificationCommands;
    [CompilerGeneratedAttribute]
private StringBuilder <CachedCommandText>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LastCachedCommandIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlGenerationHelper <SqlGenerationHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IUpdateSqlGenerator <UpdateSqlGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ResultSetMapping> <CommandResultSet>k__BackingField;
    protected StringBuilder CachedCommandText { get; protected set; }
    protected int LastCachedCommandIndex { get; protected set; }
    protected ISqlGenerationHelper SqlGenerationHelper { get; }
    protected IUpdateSqlGenerator UpdateSqlGenerator { get; }
    public IReadOnlyList`1<ModificationCommand> ModificationCommands { get; }
    protected IList`1<ResultSetMapping> CommandResultSet { get; }
    protected ReaderModificationCommandBatch(IRelationalCommandBuilderFactory commandBuilderFactory, ISqlGenerationHelper sqlGenerationHelper, IUpdateSqlGenerator updateSqlGenerator, IRelationalValueBufferFactoryFactory valueBufferFactoryFactory);
    [CompilerGeneratedAttribute]
protected virtual StringBuilder get_CachedCommandText();
    [CompilerGeneratedAttribute]
protected virtual void set_CachedCommandText(StringBuilder value);
    [CompilerGeneratedAttribute]
protected virtual int get_LastCachedCommandIndex();
    [CompilerGeneratedAttribute]
protected virtual void set_LastCachedCommandIndex(int value);
    [CompilerGeneratedAttribute]
protected virtual ISqlGenerationHelper get_SqlGenerationHelper();
    [CompilerGeneratedAttribute]
protected virtual IUpdateSqlGenerator get_UpdateSqlGenerator();
    public virtual IReadOnlyList`1<ModificationCommand> get_ModificationCommands();
    [CompilerGeneratedAttribute]
protected virtual IList`1<ResultSetMapping> get_CommandResultSet();
    public virtual bool AddCommand(ModificationCommand modificationCommand);
    protected virtual void ResetCommandText();
    protected abstract virtual bool CanAddCommand(ModificationCommand modificationCommand);
    protected abstract virtual bool IsCommandTextValid();
    protected virtual string GetCommandText();
    protected virtual void UpdateCachedCommandText(int commandPosition);
    protected virtual int GetParameterCount();
    protected virtual RawSqlCommand CreateStoreCommand();
    public virtual void Execute(IRelationalConnection connection);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch/<ExecuteAsync>d__32")]
public virtual Task ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken);
    protected abstract virtual void Consume(DbDataReader reader);
    protected abstract virtual Task ConsumeAsync(DbDataReader reader, CancellationToken cancellationToken);
    protected virtual IRelationalValueBufferFactory CreateValueBufferFactory(IReadOnlyList`1<ColumnModification> columnModifications);
}
public enum Microsoft.EntityFrameworkCore.Update.ResultSetMapping : Enum {
    public int value__;
    public static ResultSetMapping NoResultSet;
    public static ResultSetMapping NotLastInResultSet;
    public static ResultSetMapping LastInResultSet;
}
public class Microsoft.EntityFrameworkCore.Update.SingularModificationCommandBatch : AffectedCountModificationCommandBatch {
    public SingularModificationCommandBatch(IRelationalCommandBuilderFactory commandBuilderFactory, ISqlGenerationHelper sqlGenerationHelper, IUpdateSqlGenerator updateSqlGenerator, IRelationalValueBufferFactoryFactory valueBufferFactoryFactory);
    protected virtual bool CanAddCommand(ModificationCommand modificationCommand);
    protected virtual bool IsCommandTextValid();
}
public abstract class Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator : object {
    [CompilerGeneratedAttribute]
private ISqlGenerationHelper <SqlGenerationHelper>k__BackingField;
    protected ISqlGenerationHelper SqlGenerationHelper { get; }
    protected UpdateSqlGenerator(ISqlGenerationHelper sqlGenerationHelper);
    [CompilerGeneratedAttribute]
protected virtual ISqlGenerationHelper get_SqlGenerationHelper();
    public virtual ResultSetMapping AppendInsertOperation(StringBuilder commandStringBuilder, ModificationCommand command, int commandPosition);
    public virtual ResultSetMapping AppendUpdateOperation(StringBuilder commandStringBuilder, ModificationCommand command, int commandPosition);
    public virtual ResultSetMapping AppendDeleteOperation(StringBuilder commandStringBuilder, ModificationCommand command, int commandPosition);
    protected virtual void AppendInsertCommand(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<ColumnModification> writeOperations);
    protected virtual void AppendUpdateCommand(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<ColumnModification> writeOperations, IReadOnlyList`1<ColumnModification> conditionOperations);
    protected virtual void AppendDeleteCommand(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<ColumnModification> conditionOperations);
    protected virtual ResultSetMapping AppendSelectAffectedCountCommand(StringBuilder commandStringBuilder, string name, string schema, int commandPosition);
    protected virtual ResultSetMapping AppendSelectAffectedCommand(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<ColumnModification> readOperations, IReadOnlyList`1<ColumnModification> conditionOperations, int commandPosition);
    protected virtual void AppendInsertCommandHeader(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<ColumnModification> operations);
    protected virtual void AppendDeleteCommandHeader(StringBuilder commandStringBuilder, string name, string schema);
    protected virtual void AppendUpdateCommandHeader(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<ColumnModification> operations);
    protected virtual void AppendSelectCommandHeader(StringBuilder commandStringBuilder, IReadOnlyList`1<ColumnModification> operations);
    protected virtual void AppendFromClause(StringBuilder commandStringBuilder, string name, string schema);
    protected virtual void AppendValuesHeader(StringBuilder commandStringBuilder, IReadOnlyList`1<ColumnModification> operations);
    protected virtual void AppendValues(StringBuilder commandStringBuilder, IReadOnlyList`1<ColumnModification> operations);
    protected virtual void AppendWhereClause(StringBuilder commandStringBuilder, IReadOnlyList`1<ColumnModification> operations);
    protected virtual void AppendWhereAffectedClause(StringBuilder commandStringBuilder, IReadOnlyList`1<ColumnModification> operations);
    protected abstract virtual void AppendRowsAffectedWhereCondition(StringBuilder commandStringBuilder, int expectedRowsAffected);
    protected virtual void AppendWhereCondition(StringBuilder commandStringBuilder, ColumnModification columnModification, bool useOriginalValue);
    protected abstract virtual void AppendIdentityWhereCondition(StringBuilder commandStringBuilder, ColumnModification columnModification);
    public virtual void AppendBatchHeader(StringBuilder commandStringBuilder);
    public virtual string GenerateNextSequenceValueOperation(string name, string schema);
    public virtual void AppendNextSequenceValueOperation(StringBuilder commandStringBuilder, string name, string schema);
    [CompilerGeneratedAttribute]
private void <AppendWhereClause>b__19_0(StringBuilder sb, ColumnModification v);
    [CompilerGeneratedAttribute]
private void <AppendWhereAffectedClause>b__20_0(StringBuilder sb, ColumnModification v);
}
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.Check : object {
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName, string propertyName);
    [ContractAnnotationAttribute("value:null => halt")]
public static IReadOnlyList`1<T> NotEmpty(IReadOnlyList`1<T> value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static string NotEmpty(string value, string parameterName);
    public static string NullButNotEmpty(string value, string parameterName);
    public static IReadOnlyList`1<T> HasNoNulls(IReadOnlyList`1<T> value, string parameterName);
    public static Type ValidEntityType(Type value, string parameterName);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.DiscriminatorValueGenerator : ValueGenerator {
    private object _discriminator;
    public bool GeneratesTemporaryValues { get; }
    public DiscriminatorValueGenerator(object discriminator);
    protected virtual object NextValue(EntityEntry entry);
    public virtual bool get_GeneratesTemporaryValues();
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.RelationalValueGeneratorSelector : ValueGeneratorSelector {
    private TemporaryNumberValueGeneratorFactory _numberFactory;
    [CompilerGeneratedAttribute]
private IRelationalAnnotationProvider <RelationalExtensions>k__BackingField;
    protected IRelationalAnnotationProvider RelationalExtensions { get; }
    public RelationalValueGeneratorSelector(IValueGeneratorCache cache, IRelationalAnnotationProvider relationalExtensions);
    [CompilerGeneratedAttribute]
protected virtual IRelationalAnnotationProvider get_RelationalExtensions();
    public virtual ValueGenerator Create(IProperty property, IEntityType entityType);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.WarningConfigurationBuilderExtensions : object {
    [ExtensionAttribute]
public static WarningsConfigurationBuilder Throw(WarningsConfigurationBuilder warningsConfigurationBuilder, RelationalEventId[] relationalEventIds);
    [ExtensionAttribute]
public static WarningsConfigurationBuilder Log(WarningsConfigurationBuilder warningsConfigurationBuilder, RelationalEventId[] relationalEventIds);
    [ExtensionAttribute]
public static WarningsConfigurationBuilder Ignore(WarningsConfigurationBuilder warningsConfigurationBuilder, RelationalEventId[] relationalEventIds);
}
[ExtensionAttribute]
internal static class System.Reflection.MemberInfoExtensions : object {
    [ExtensionAttribute]
public static Type GetMemberType(MemberInfo memberInfo);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Reflection.PropertyInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsStatic(PropertyInfo property);
    [ExtensionAttribute]
public static bool IsCandidateProperty(PropertyInfo propertyInfo, bool needsWrite);
    [ExtensionAttribute]
public static Type FindCandidateNavigationPropertyType(PropertyInfo propertyInfo, Func`2<Type, bool> isPrimitiveProperty);
    [ExtensionAttribute]
public static PropertyInfo FindGetterProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static PropertyInfo FindSetterProperty(PropertyInfo propertyInfo);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.SharedTypeExtensions : object {
    private static Dictionary`2<Type, object> _commonTypeDictionary;
    private static SharedTypeExtensions();
    [ExtensionAttribute]
public static Type UnwrapNullableType(Type type);
    [ExtensionAttribute]
public static bool IsNullableType(Type type);
    [ExtensionAttribute]
public static Type MakeNullable(Type type);
    [ExtensionAttribute]
public static bool IsInteger(Type type);
    [ExtensionAttribute]
public static PropertyInfo GetAnyProperty(Type type, string name);
    [ExtensionAttribute]
private static bool IsNonIntegerPrimitive(Type type);
    [ExtensionAttribute]
public static bool IsPrimitive(Type type);
    [ExtensionAttribute]
public static bool IsInstantiable(Type type);
    private static bool IsInstantiable(TypeInfo type);
    [ExtensionAttribute]
public static bool IsGrouping(Type type);
    private static bool IsGrouping(TypeInfo type);
    [ExtensionAttribute]
public static Type UnwrapEnumType(Type type);
    [ExtensionAttribute]
public static Type GetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetElementType(Type type, Type interfaceOrBaseType);
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetGenericTypeImplementations(Type type, Type interfaceOrBaseType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetBaseTypes>d__16")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetBaseTypes(Type type);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetTypesInHierarchy>d__17")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetTypesInHierarchy(Type type);
    [ExtensionAttribute]
public static ConstructorInfo GetDeclaredConstructor(Type type, Type[] types);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetPropertiesInHierarchy>d__19")]
[ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetPropertiesInHierarchy(Type type, string name);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetMembersInHierarchy>d__20")]
[ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type, string name);
    [ExtensionAttribute]
public static object GetDefaultValue(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<TypeInfo> GetConstructableTypes(Assembly assembly);
    [ExtensionAttribute]
public static IEnumerable`1<TypeInfo> GetLoadableDefinedTypes(Assembly assembly);
}
[ExtensionAttribute]
internal static class System.Text.StringBuilderExtensions : object {
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<string> values, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, string separator, String[] values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, Action`2<StringBuilder, T> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam param, Action`3<StringBuilder, T, TParam> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam1 param1, TParam2 param2, Action`4<StringBuilder, T, TParam1, TParam2> joinAction, string separator);
}
[ExtensionAttribute]
internal static class System.Threading.Tasks.TaskExtensions : object {
    [ExtensionAttribute]
public static Task`1<TDerived> Cast(Task`1<T> task);
}
