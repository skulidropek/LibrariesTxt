[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.CanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    public string Contract { get; }
    public bool ForceFullStates { get; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("4320")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    [NotNullAttribute]
public string FormatParameterName { get; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; }
    public ImplicitUseTargetFlags TargetFlags { get; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator : object {
    [CompilerGeneratedAttribute]
private AnnotationCodeGeneratorDependencies <Dependencies>k__BackingField;
    protected AnnotationCodeGeneratorDependencies Dependencies { get; }
    public AnnotationCodeGenerator(AnnotationCodeGeneratorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual AnnotationCodeGeneratorDependencies get_Dependencies();
    public virtual bool IsHandledByConvention(IModel model, IAnnotation annotation);
    public virtual bool IsHandledByConvention(IEntityType entityType, IAnnotation annotation);
    public virtual bool IsHandledByConvention(IKey key, IAnnotation annotation);
    public virtual bool IsHandledByConvention(IProperty property, IAnnotation annotation);
    public virtual bool IsHandledByConvention(IForeignKey foreignKey, IAnnotation annotation);
    public virtual bool IsHandledByConvention(IIndex index, IAnnotation annotation);
    public virtual MethodCallCodeFragment GenerateFluentApi(IModel model, IAnnotation annotation);
    public virtual MethodCallCodeFragment GenerateFluentApi(IEntityType entityType, IAnnotation annotation);
    public virtual MethodCallCodeFragment GenerateFluentApi(IKey key, IAnnotation annotation);
    public virtual MethodCallCodeFragment GenerateFluentApi(IProperty property, IAnnotation annotation);
    public virtual MethodCallCodeFragment GenerateFluentApi(IForeignKey foreignKey, IAnnotation annotation);
    public virtual MethodCallCodeFragment GenerateFluentApi(IIndex index, IAnnotation annotation);
}
public class Microsoft.EntityFrameworkCore.Design.AnnotationCodeGeneratorDependencies : object {
}
public interface Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator {
    public abstract virtual bool IsHandledByConvention(IModel model, IAnnotation annotation);
    public abstract virtual bool IsHandledByConvention(IEntityType entityType, IAnnotation annotation);
    public abstract virtual bool IsHandledByConvention(IKey key, IAnnotation annotation);
    public abstract virtual bool IsHandledByConvention(IProperty property, IAnnotation annotation);
    public abstract virtual bool IsHandledByConvention(IForeignKey foreignKey, IAnnotation annotation);
    public abstract virtual bool IsHandledByConvention(IIndex index, IAnnotation annotation);
    public abstract virtual MethodCallCodeFragment GenerateFluentApi(IModel model, IAnnotation annotation);
    public abstract virtual MethodCallCodeFragment GenerateFluentApi(IEntityType entityType, IAnnotation annotation);
    public abstract virtual MethodCallCodeFragment GenerateFluentApi(IKey key, IAnnotation annotation);
    public abstract virtual MethodCallCodeFragment GenerateFluentApi(IProperty property, IAnnotation annotation);
    public abstract virtual MethodCallCodeFragment GenerateFluentApi(IForeignKey foreignKey, IAnnotation annotation);
    public abstract virtual MethodCallCodeFragment GenerateFluentApi(IIndex index, IAnnotation annotation);
}
public class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment : object {
    private List`1<object> _arguments;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodCallCodeFragment <ChainedCall>k__BackingField;
    public string Method { get; }
    public IReadOnlyList`1<object> Arguments { get; }
    public MethodCallCodeFragment ChainedCall { get; }
    public MethodCallCodeFragment(string method, Object[] arguments);
    public MethodCallCodeFragment(string method, Object[] arguments, MethodCallCodeFragment chainedCall);
    [CompilerGeneratedAttribute]
public virtual string get_Method();
    public virtual IReadOnlyList`1<object> get_Arguments();
    [CompilerGeneratedAttribute]
public virtual MethodCallCodeFragment get_ChainedCall();
    public virtual MethodCallCodeFragment Chain(string method, Object[] arguments);
    public virtual MethodCallCodeFragment Chain(MethodCallCodeFragment call);
}
public class Microsoft.EntityFrameworkCore.Design.NestedClosureCodeFragment : object {
    [CompilerGeneratedAttribute]
private string <Parameter>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodCallCodeFragment <MethodCall>k__BackingField;
    public string Parameter { get; }
    public MethodCallCodeFragment MethodCall { get; }
    public NestedClosureCodeFragment(string parameter, MethodCallCodeFragment methodCall);
    [CompilerGeneratedAttribute]
public virtual string get_Parameter();
    [CompilerGeneratedAttribute]
public virtual MethodCallCodeFragment get_MethodCall();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.BatchEventData : EventData {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IUpdateEntry> <Entries>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CommandCount>k__BackingField;
    public IEnumerable`1<IUpdateEntry> Entries { get; }
    public int CommandCount { get; }
    public BatchEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IEnumerable`1<IUpdateEntry> entries, int commandCount);
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<IUpdateEntry> get_Entries();
    [CompilerGeneratedAttribute]
public virtual int get_CommandCount();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData : DbContextEventData {
    [CompilerGeneratedAttribute]
private DbConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <CommandId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private DbCommandMethod <ExecuteMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTime>k__BackingField;
    public DbConnection Connection { get; }
    public Guid CommandId { get; }
    public Guid ConnectionId { get; }
    public DbCommandMethod ExecuteMethod { get; }
    public bool IsAsync { get; }
    public DateTimeOffset StartTime { get; }
    public CommandCorrelatedEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbConnection connection, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, bool async, DateTimeOffset startTime);
    [CompilerGeneratedAttribute]
public virtual DbConnection get_Connection();
    [CompilerGeneratedAttribute]
public virtual Guid get_CommandId();
    [CompilerGeneratedAttribute]
public virtual Guid get_ConnectionId();
    [CompilerGeneratedAttribute]
public virtual DbCommandMethod get_ExecuteMethod();
    [CompilerGeneratedAttribute]
public virtual bool get_IsAsync();
    [CompilerGeneratedAttribute]
public virtual DateTimeOffset get_StartTime();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData : CommandEventData {
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    public TimeSpan Duration { get; }
    public CommandEndEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, bool async, bool logParameterValues, DateTimeOffset startTime, TimeSpan duration);
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_Duration();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData : CommandEndEventData {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; }
    public CommandErrorEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, Exception exception, bool async, bool logParameterValues, DateTimeOffset startTime, TimeSpan duration);
    [CompilerGeneratedAttribute]
public virtual Exception get_Exception();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData : CommandCorrelatedEventData {
    [CompilerGeneratedAttribute]
private DbCommand <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogParameterValues>k__BackingField;
    public DbCommand Command { get; }
    public bool LogParameterValues { get; }
    public CommandEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, bool async, bool logParameterValues, DateTimeOffset startTime);
    [CompilerGeneratedAttribute]
public virtual DbCommand get_Command();
    [CompilerGeneratedAttribute]
public virtual bool get_LogParameterValues();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData : CommandEndEventData {
    [CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    public object Result { get; }
    public CommandExecutedEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, object result, bool async, bool logParameterValues, DateTimeOffset startTime, TimeSpan duration);
    [CompilerGeneratedAttribute]
public virtual object get_Result();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData : ConnectionEventData {
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    public TimeSpan Duration { get; }
    public ConnectionEndEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbConnection connection, DbContext context, Guid connectionId, bool async, DateTimeOffset startTime, TimeSpan duration);
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_Duration();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionErrorEventData : ConnectionEndEventData {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; }
    public ConnectionErrorEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbConnection connection, DbContext context, Guid connectionId, Exception exception, bool async, DateTimeOffset startTime, TimeSpan duration);
    [CompilerGeneratedAttribute]
public virtual Exception get_Exception();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData : DbContextEventData {
    [CompilerGeneratedAttribute]
private DbConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTime>k__BackingField;
    public DbConnection Connection { get; }
    public Guid ConnectionId { get; }
    public bool IsAsync { get; }
    public DateTimeOffset StartTime { get; }
    public ConnectionEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbConnection connection, DbContext context, Guid connectionId, bool async, DateTimeOffset startTime);
    [CompilerGeneratedAttribute]
public virtual DbConnection get_Connection();
    [CompilerGeneratedAttribute]
public virtual Guid get_ConnectionId();
    [CompilerGeneratedAttribute]
public virtual bool get_IsAsync();
    [CompilerGeneratedAttribute]
public virtual DateTimeOffset get_StartTime();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.DataReaderDisposingEventData : DbContextEventData {
    [CompilerGeneratedAttribute]
private DbCommand <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private DbDataReader <DataReader>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <CommandId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RecordsAffected>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    public DbCommand Command { get; }
    public DbDataReader DataReader { get; }
    public Guid CommandId { get; }
    public Guid ConnectionId { get; }
    public int RecordsAffected { get; }
    public int ReadCount { get; }
    public DateTimeOffset StartTime { get; }
    public TimeSpan Duration { get; }
    public DataReaderDisposingEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbCommand command, DbDataReader dataReader, DbContext context, Guid commandId, Guid connectionId, int recordsAffected, int readCount, DateTimeOffset startTime, TimeSpan duration);
    [CompilerGeneratedAttribute]
public virtual DbCommand get_Command();
    [CompilerGeneratedAttribute]
public virtual DbDataReader get_DataReader();
    [CompilerGeneratedAttribute]
public virtual Guid get_CommandId();
    [CompilerGeneratedAttribute]
public virtual Guid get_ConnectionId();
    [CompilerGeneratedAttribute]
public virtual int get_RecordsAffected();
    [CompilerGeneratedAttribute]
public virtual int get_ReadCount();
    [CompilerGeneratedAttribute]
public virtual DateTimeOffset get_StartTime();
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_Duration();
}
public abstract class Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor : object {
    public virtual InterceptionResult`1<DbCommand> CommandCreating(CommandCorrelatedEventData eventData, InterceptionResult`1<DbCommand> result);
    public virtual DbCommand CommandCreated(CommandEndEventData eventData, DbCommand result);
    public virtual InterceptionResult`1<DbDataReader> ReaderExecuting(DbCommand command, CommandEventData eventData, InterceptionResult`1<DbDataReader> result);
    public virtual InterceptionResult`1<object> ScalarExecuting(DbCommand command, CommandEventData eventData, InterceptionResult`1<object> result);
    public virtual InterceptionResult`1<int> NonQueryExecuting(DbCommand command, CommandEventData eventData, InterceptionResult`1<int> result);
    public virtual Task`1<InterceptionResult`1<DbDataReader>> ReaderExecutingAsync(DbCommand command, CommandEventData eventData, InterceptionResult`1<DbDataReader> result, CancellationToken cancellationToken);
    public virtual Task`1<InterceptionResult`1<object>> ScalarExecutingAsync(DbCommand command, CommandEventData eventData, InterceptionResult`1<object> result, CancellationToken cancellationToken);
    public virtual Task`1<InterceptionResult`1<int>> NonQueryExecutingAsync(DbCommand command, CommandEventData eventData, InterceptionResult`1<int> result, CancellationToken cancellationToken);
    public virtual DbDataReader ReaderExecuted(DbCommand command, CommandExecutedEventData eventData, DbDataReader result);
    public virtual object ScalarExecuted(DbCommand command, CommandExecutedEventData eventData, object result);
    public virtual int NonQueryExecuted(DbCommand command, CommandExecutedEventData eventData, int result);
    public virtual Task`1<DbDataReader> ReaderExecutedAsync(DbCommand command, CommandExecutedEventData eventData, DbDataReader result, CancellationToken cancellationToken);
    public virtual Task`1<object> ScalarExecutedAsync(DbCommand command, CommandExecutedEventData eventData, object result, CancellationToken cancellationToken);
    public virtual Task`1<int> NonQueryExecutedAsync(DbCommand command, CommandExecutedEventData eventData, int result, CancellationToken cancellationToken);
    public virtual void CommandFailed(DbCommand command, CommandErrorEventData eventData);
    public virtual Task CommandFailedAsync(DbCommand command, CommandErrorEventData eventData, CancellationToken cancellationToken);
    public virtual InterceptionResult DataReaderDisposing(DbCommand command, DataReaderDisposingEventData eventData, InterceptionResult result);
}
public enum Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod : Enum {
    public int value__;
    public static DbCommandMethod ExecuteNonQuery;
    public static DbCommandMethod ExecuteScalar;
    public static DbCommandMethod ExecuteReader;
}
public abstract class Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor : object {
    public virtual InterceptionResult ConnectionOpening(DbConnection connection, ConnectionEventData eventData, InterceptionResult result);
    public virtual Task`1<InterceptionResult> ConnectionOpeningAsync(DbConnection connection, ConnectionEventData eventData, InterceptionResult result, CancellationToken cancellationToken);
    public virtual void ConnectionOpened(DbConnection connection, ConnectionEndEventData eventData);
    public virtual Task ConnectionOpenedAsync(DbConnection connection, ConnectionEndEventData eventData, CancellationToken cancellationToken);
    public virtual InterceptionResult ConnectionClosing(DbConnection connection, ConnectionEventData eventData, InterceptionResult result);
    public virtual Task`1<InterceptionResult> ConnectionClosingAsync(DbConnection connection, ConnectionEventData eventData, InterceptionResult result);
    public virtual void ConnectionClosed(DbConnection connection, ConnectionEndEventData eventData);
    public virtual Task ConnectionClosedAsync(DbConnection connection, ConnectionEndEventData eventData);
    public virtual void ConnectionFailed(DbConnection connection, ConnectionErrorEventData eventData);
    public virtual Task ConnectionFailedAsync(DbConnection connection, ConnectionErrorEventData eventData, CancellationToken cancellationToken);
}
public abstract class Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor : object {
    public virtual InterceptionResult`1<DbTransaction> TransactionStarting(DbConnection connection, TransactionStartingEventData eventData, InterceptionResult`1<DbTransaction> result);
    public virtual DbTransaction TransactionStarted(DbConnection connection, TransactionEndEventData eventData, DbTransaction result);
    public virtual Task`1<InterceptionResult`1<DbTransaction>> TransactionStartingAsync(DbConnection connection, TransactionStartingEventData eventData, InterceptionResult`1<DbTransaction> result, CancellationToken cancellationToken);
    public virtual Task`1<DbTransaction> TransactionStartedAsync(DbConnection connection, TransactionEndEventData eventData, DbTransaction result, CancellationToken cancellationToken);
    public virtual DbTransaction TransactionUsed(DbConnection connection, TransactionEventData eventData, DbTransaction result);
    public virtual Task`1<DbTransaction> TransactionUsedAsync(DbConnection connection, TransactionEventData eventData, DbTransaction result, CancellationToken cancellationToken);
    public virtual InterceptionResult TransactionCommitting(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result);
    public virtual void TransactionCommitted(DbTransaction transaction, TransactionEndEventData eventData);
    public virtual Task`1<InterceptionResult> TransactionCommittingAsync(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result, CancellationToken cancellationToken);
    public virtual Task TransactionCommittedAsync(DbTransaction transaction, TransactionEndEventData eventData, CancellationToken cancellationToken);
    public virtual InterceptionResult TransactionRollingBack(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result);
    public virtual void TransactionRolledBack(DbTransaction transaction, TransactionEndEventData eventData);
    public virtual Task`1<InterceptionResult> TransactionRollingBackAsync(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result, CancellationToken cancellationToken);
    public virtual Task TransactionRolledBackAsync(DbTransaction transaction, TransactionEndEventData eventData, CancellationToken cancellationToken);
    public virtual void TransactionFailed(DbTransaction transaction, TransactionErrorEventData eventData);
    public virtual Task TransactionFailedAsync(DbTransaction transaction, TransactionErrorEventData eventData, CancellationToken cancellationToken);
}
public class Microsoft.EntityFrameworkCore.Diagnostics.EntityTypeSchemaEventData : EventData {
    [CompilerGeneratedAttribute]
private IEntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    public IEntityType EntityType { get; }
    public string Schema { get; }
    public EntityTypeSchemaEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IEntityType entityType, string schema);
    [CompilerGeneratedAttribute]
public virtual IEntityType get_EntityType();
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
}
public interface Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor {
    public abstract virtual InterceptionResult`1<DbCommand> CommandCreating(CommandCorrelatedEventData eventData, InterceptionResult`1<DbCommand> result);
    public abstract virtual DbCommand CommandCreated(CommandEndEventData eventData, DbCommand result);
    public abstract virtual InterceptionResult`1<DbDataReader> ReaderExecuting(DbCommand command, CommandEventData eventData, InterceptionResult`1<DbDataReader> result);
    public abstract virtual InterceptionResult`1<object> ScalarExecuting(DbCommand command, CommandEventData eventData, InterceptionResult`1<object> result);
    public abstract virtual InterceptionResult`1<int> NonQueryExecuting(DbCommand command, CommandEventData eventData, InterceptionResult`1<int> result);
    public abstract virtual Task`1<InterceptionResult`1<DbDataReader>> ReaderExecutingAsync(DbCommand command, CommandEventData eventData, InterceptionResult`1<DbDataReader> result, CancellationToken cancellationToken);
    public abstract virtual Task`1<InterceptionResult`1<object>> ScalarExecutingAsync(DbCommand command, CommandEventData eventData, InterceptionResult`1<object> result, CancellationToken cancellationToken);
    public abstract virtual Task`1<InterceptionResult`1<int>> NonQueryExecutingAsync(DbCommand command, CommandEventData eventData, InterceptionResult`1<int> result, CancellationToken cancellationToken);
    public abstract virtual DbDataReader ReaderExecuted(DbCommand command, CommandExecutedEventData eventData, DbDataReader result);
    public abstract virtual object ScalarExecuted(DbCommand command, CommandExecutedEventData eventData, object result);
    public abstract virtual int NonQueryExecuted(DbCommand command, CommandExecutedEventData eventData, int result);
    public abstract virtual Task`1<DbDataReader> ReaderExecutedAsync(DbCommand command, CommandExecutedEventData eventData, DbDataReader result, CancellationToken cancellationToken);
    public abstract virtual Task`1<object> ScalarExecutedAsync(DbCommand command, CommandExecutedEventData eventData, object result, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> NonQueryExecutedAsync(DbCommand command, CommandExecutedEventData eventData, int result, CancellationToken cancellationToken);
    public abstract virtual void CommandFailed(DbCommand command, CommandErrorEventData eventData);
    public abstract virtual Task CommandFailedAsync(DbCommand command, CommandErrorEventData eventData, CancellationToken cancellationToken);
    public abstract virtual InterceptionResult DataReaderDisposing(DbCommand command, DataReaderDisposingEventData eventData, InterceptionResult result);
}
public interface Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor {
    public abstract virtual InterceptionResult ConnectionOpening(DbConnection connection, ConnectionEventData eventData, InterceptionResult result);
    public abstract virtual Task`1<InterceptionResult> ConnectionOpeningAsync(DbConnection connection, ConnectionEventData eventData, InterceptionResult result, CancellationToken cancellationToken);
    public abstract virtual void ConnectionOpened(DbConnection connection, ConnectionEndEventData eventData);
    public abstract virtual Task ConnectionOpenedAsync(DbConnection connection, ConnectionEndEventData eventData, CancellationToken cancellationToken);
    public abstract virtual InterceptionResult ConnectionClosing(DbConnection connection, ConnectionEventData eventData, InterceptionResult result);
    public abstract virtual Task`1<InterceptionResult> ConnectionClosingAsync(DbConnection connection, ConnectionEventData eventData, InterceptionResult result);
    public abstract virtual void ConnectionClosed(DbConnection connection, ConnectionEndEventData eventData);
    public abstract virtual Task ConnectionClosedAsync(DbConnection connection, ConnectionEndEventData eventData);
    public abstract virtual void ConnectionFailed(DbConnection connection, ConnectionErrorEventData eventData);
    public abstract virtual Task ConnectionFailedAsync(DbConnection connection, ConnectionErrorEventData eventData, CancellationToken cancellationToken);
}
public interface Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor {
    public abstract virtual InterceptionResult`1<DbTransaction> TransactionStarting(DbConnection connection, TransactionStartingEventData eventData, InterceptionResult`1<DbTransaction> result);
    public abstract virtual DbTransaction TransactionStarted(DbConnection connection, TransactionEndEventData eventData, DbTransaction result);
    public abstract virtual Task`1<InterceptionResult`1<DbTransaction>> TransactionStartingAsync(DbConnection connection, TransactionStartingEventData eventData, InterceptionResult`1<DbTransaction> result, CancellationToken cancellationToken);
    public abstract virtual Task`1<DbTransaction> TransactionStartedAsync(DbConnection connection, TransactionEndEventData eventData, DbTransaction result, CancellationToken cancellationToken);
    public abstract virtual DbTransaction TransactionUsed(DbConnection connection, TransactionEventData eventData, DbTransaction result);
    public abstract virtual Task`1<DbTransaction> TransactionUsedAsync(DbConnection connection, TransactionEventData eventData, DbTransaction result, CancellationToken cancellationToken);
    public abstract virtual InterceptionResult TransactionCommitting(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result);
    public abstract virtual void TransactionCommitted(DbTransaction transaction, TransactionEndEventData eventData);
    public abstract virtual Task`1<InterceptionResult> TransactionCommittingAsync(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result, CancellationToken cancellationToken);
    public abstract virtual Task TransactionCommittedAsync(DbTransaction transaction, TransactionEndEventData eventData, CancellationToken cancellationToken);
    public abstract virtual InterceptionResult TransactionRollingBack(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result);
    public abstract virtual void TransactionRolledBack(DbTransaction transaction, TransactionEndEventData eventData);
    public abstract virtual Task`1<InterceptionResult> TransactionRollingBackAsync(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result, CancellationToken cancellationToken);
    public abstract virtual Task TransactionRolledBackAsync(DbTransaction transaction, TransactionEndEventData eventData, CancellationToken cancellationToken);
    public abstract virtual void TransactionFailed(DbTransaction transaction, TransactionErrorEventData eventData);
    public abstract virtual Task TransactionFailedAsync(DbTransaction transaction, TransactionErrorEventData eventData, CancellationToken cancellationToken);
}
public class Microsoft.EntityFrameworkCore.Diagnostics.Internal.DbCommandInterceptorAggregator : InterceptorAggregator`1<IDbCommandInterceptor> {
    protected virtual IDbCommandInterceptor CreateChain(IEnumerable`1<IDbCommandInterceptor> interceptors);
}
public class Microsoft.EntityFrameworkCore.Diagnostics.Internal.DbConnectionInterceptorAggregator : InterceptorAggregator`1<IDbConnectionInterceptor> {
    protected virtual IDbConnectionInterceptor CreateChain(IEnumerable`1<IDbConnectionInterceptor> interceptors);
}
public class Microsoft.EntityFrameworkCore.Diagnostics.Internal.DbTransactionInterceptorAggregator : InterceptorAggregator`1<IDbTransactionInterceptor> {
    protected virtual IDbTransactionInterceptor CreateChain(IEnumerable`1<IDbTransactionInterceptor> interceptors);
}
public static class Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources : object {
    private static ResourceManager _resourceManager;
    private static RelationalResources();
    public static EventDefinition`2<string, string> LogBoolWithDefaultWarning(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogOpeningConnection(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogOpenedConnection(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogClosingConnection(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogClosedConnection(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogConnectionError(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogBeganTransaction(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogBeginningTransaction(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogUsingTransaction(IDiagnosticsLogger logger);
    public static EventDefinition LogCommittingTransaction(IDiagnosticsLogger logger);
    public static EventDefinition LogCommittedTransaction(IDiagnosticsLogger logger);
    public static EventDefinition LogRollingBackTransaction(IDiagnosticsLogger logger);
    public static EventDefinition LogRolledBackTransaction(IDiagnosticsLogger logger);
    public static EventDefinition LogDisposingTransaction(IDiagnosticsLogger logger);
    public static EventDefinition LogTransactionError(IDiagnosticsLogger logger);
    public static EventDefinition LogDisposingDataReader(IDiagnosticsLogger logger);
    public static EventDefinition LogAmbientTransaction(IDiagnosticsLogger logger);
    public static EventDefinition`1<object> LogPossibleUnintendedUseOfEquals(IDiagnosticsLogger logger);
    public static EventDefinition LogQueryPossibleExceptionWithAggregateOperatorWarning(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogGeneratingDown(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogGeneratingUp(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogApplyingMigration(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogRevertingMigration(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogMigrating(IDiagnosticsLogger logger);
    public static EventDefinition LogNoMigrationsApplied(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogNoMigrationsFound(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogKeyHasDefaultValue(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogCommandCreating(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, int> LogCommandCreated(IDiagnosticsLogger logger);
    public static EventDefinition`5<string, CommandType, int, string, string> LogExecutingCommand(IDiagnosticsLogger logger);
    public static EventDefinition`6<string, string, CommandType, int, string, string> LogExecutedCommand(IDiagnosticsLogger logger);
    public static EventDefinition`6<string, string, CommandType, int, string, string> LogCommandFailed(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogConnectionErrorAsDebug(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogAmbientTransactionEnlisted(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogExplicitTransactionEnlisted(IDiagnosticsLogger logger);
    public static EventDefinition`2<int, int> LogBatchSmallerThanMinBatchSize(IDiagnosticsLogger logger);
    public static EventDefinition`1<int> LogBatchReadyForExecution(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogMigrationAttributeMissingWarning(IDiagnosticsLogger logger);
}
public class Microsoft.EntityFrameworkCore.Diagnostics.MigrationAssemblyEventData : MigratorEventData {
    [CompilerGeneratedAttribute]
private IMigrationsAssembly <MigrationsAssembly>k__BackingField;
    public IMigrationsAssembly MigrationsAssembly { get; }
    public MigrationAssemblyEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IMigrator migrator, IMigrationsAssembly migrationsAssembly);
    [CompilerGeneratedAttribute]
public virtual IMigrationsAssembly get_MigrationsAssembly();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.MigrationEventData : MigratorEventData {
    [CompilerGeneratedAttribute]
private Migration <Migration>k__BackingField;
    public Migration Migration { get; }
    public MigrationEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IMigrator migrator, Migration migration);
    [CompilerGeneratedAttribute]
public virtual Migration get_Migration();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.MigrationScriptingEventData : MigrationEventData {
    [CompilerGeneratedAttribute]
private string <FromMigration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToMigration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIdempotent>k__BackingField;
    public string FromMigration { get; }
    public string ToMigration { get; }
    public bool IsIdempotent { get; }
    public MigrationScriptingEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IMigrator migrator, Migration migration, string fromMigration, string toMigration, bool idempotent);
    [CompilerGeneratedAttribute]
public virtual string get_FromMigration();
    [CompilerGeneratedAttribute]
public virtual string get_ToMigration();
    [CompilerGeneratedAttribute]
public virtual bool get_IsIdempotent();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.MigrationTypeEventData : EventData {
    [CompilerGeneratedAttribute]
private TypeInfo <MigrationType>k__BackingField;
    public TypeInfo MigrationType { get; }
    public MigrationTypeEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, TypeInfo migrationType);
    [CompilerGeneratedAttribute]
public virtual TypeInfo get_MigrationType();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.MigratorConnectionEventData : MigratorEventData {
    [CompilerGeneratedAttribute]
private DbConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ConnectionId>k__BackingField;
    public DbConnection Connection { get; }
    public Guid ConnectionId { get; }
    public MigratorConnectionEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IMigrator migrator, DbConnection connection, Guid connectionId);
    [CompilerGeneratedAttribute]
public virtual DbConnection get_Connection();
    [CompilerGeneratedAttribute]
public virtual Guid get_ConnectionId();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.MigratorEventData : EventData {
    [CompilerGeneratedAttribute]
private IMigrator <Migrator>k__BackingField;
    public IMigrator Migrator { get; }
    public MigratorEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IMigrator migrator);
    [CompilerGeneratedAttribute]
public virtual IMigrator get_Migrator();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.MinBatchSizeEventData : BatchEventData {
    [CompilerGeneratedAttribute]
private int <MinBatchSize>k__BackingField;
    public int MinBatchSize { get; }
    public MinBatchSizeEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IEnumerable`1<IUpdateEntry> entries, int commandCount, int minBatchSize);
    [CompilerGeneratedAttribute]
public virtual int get_MinBatchSize();
}
public static class Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId : object {
    private static string _connectionPrefix;
    public static EventId ConnectionOpening;
    public static EventId ConnectionOpened;
    public static EventId ConnectionClosing;
    public static EventId ConnectionClosed;
    public static EventId ConnectionError;
    private static string _sqlPrefix;
    public static EventId CommandCreating;
    public static EventId CommandCreated;
    public static EventId CommandExecuting;
    public static EventId CommandExecuted;
    public static EventId CommandError;
    private static string _transactionPrefix;
    public static EventId TransactionStarted;
    public static EventId TransactionStarting;
    public static EventId TransactionUsed;
    public static EventId TransactionCommitting;
    public static EventId TransactionCommitted;
    public static EventId TransactionRollingBack;
    public static EventId TransactionRolledBack;
    public static EventId TransactionDisposed;
    public static EventId TransactionError;
    public static EventId AmbientTransactionWarning;
    public static EventId AmbientTransactionEnlisted;
    public static EventId ExplicitTransactionEnlisted;
    public static EventId DataReaderDisposing;
    private static string _migrationsPrefix;
    public static EventId MigrateUsingConnection;
    public static EventId MigrationReverting;
    public static EventId MigrationApplying;
    public static EventId MigrationGeneratingDownScript;
    public static EventId MigrationGeneratingUpScript;
    public static EventId MigrationsNotApplied;
    public static EventId MigrationsNotFound;
    public static EventId MigrationAttributeMissingWarning;
    private static string _queryPrefix;
    [ObsoleteAttribute("Automatic client evaluation is no longer supported. This event is no longer generated.")]
public static EventId QueryClientEvaluationWarning;
    public static EventId QueryPossibleUnintendedUseOfEqualsWarning;
    public static EventId QueryPossibleExceptionWithAggregateOperatorWarning;
    private static string _validationPrefix;
    public static EventId ModelValidationKeyDefaultValueWarning;
    public static EventId BoolWithDefaultWarning;
    private static string _updatePrefix;
    public static EventId BatchReadyForExecution;
    public static EventId BatchSmallerThanMinBatchSize;
    private static RelationalEventId();
    private static EventId MakeConnectionId(Id id);
    private static EventId MakeCommandId(Id id);
    private static EventId MakeTransactionId(Id id);
    private static EventId MakeMigrationsId(Id id);
    private static EventId MakeQueryId(Id id);
    private static EventId MakeValidationId(Id id);
    private static EventId MakeUpdateId(Id id);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions : object {
    [ExtensionAttribute]
public static InterceptionResult`1<DbCommand> CommandCreating(IDiagnosticsLogger`1<Command> diagnostics, IRelationalConnection connection, DbCommandMethod commandMethod, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime);
    private static CommandCorrelatedEventData BroadcastCommandCreating(IDiagnosticsLogger`1<Command> diagnostics, DbConnection connection, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, bool async, DateTimeOffset startTime, EventDefinition`1<string> definition, bool diagnosticSourceEnabled);
    private static void LogCommandCreating(IDiagnosticsLogger`1<Command> diagnostics, EventDefinition`1<string> definition, DbCommandMethod commandMethod);
    private static string CommandCreating(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static DbCommand CommandCreated(IDiagnosticsLogger`1<Command> diagnostics, IRelationalConnection connection, DbCommand command, DbCommandMethod commandMethod, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime, TimeSpan duration);
    private static CommandEndEventData BroadcastCommandCreated(IDiagnosticsLogger`1<Command> diagnostics, DbConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, bool async, DateTimeOffset startTime, TimeSpan duration, EventDefinition`2<string, int> definition, bool diagnosticSourceEnabled);
    private static void LogCommandCreated(IDiagnosticsLogger`1<Command> diagnostics, EventDefinition`2<string, int> definition, DbCommandMethod commandMethod, TimeSpan duration);
    private static string CommandCreated(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static InterceptionResult`1<DbDataReader> CommandReaderExecuting(IDiagnosticsLogger`1<Command> diagnostics, IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime);
    [ExtensionAttribute]
public static InterceptionResult`1<object> CommandScalarExecuting(IDiagnosticsLogger`1<Command> diagnostics, IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime);
    [ExtensionAttribute]
public static InterceptionResult`1<int> CommandNonQueryExecuting(IDiagnosticsLogger`1<Command> diagnostics, IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime);
    [ExtensionAttribute]
public static Task`1<InterceptionResult`1<DbDataReader>> CommandReaderExecutingAsync(IDiagnosticsLogger`1<Command> diagnostics, IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<InterceptionResult`1<object>> CommandScalarExecutingAsync(IDiagnosticsLogger`1<Command> diagnostics, IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<InterceptionResult`1<int>> CommandNonQueryExecutingAsync(IDiagnosticsLogger`1<Command> diagnostics, IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime, CancellationToken cancellationToken);
    private static CommandEventData BroadcastCommandExecuting(IDiagnosticsLogger`1<Command> diagnostics, DbConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, bool async, DateTimeOffset startTime, EventDefinition`5<string, CommandType, int, string, string> definition, bool diagnosticSourceEnabled);
    private static void LogCommandExecuting(IDiagnosticsLogger`1<Command> diagnostics, DbCommand command, EventDefinition`5<string, CommandType, int, string, string> definition);
    private static string CommandExecuting(EventDefinitionBase definition, EventData payload);
    private static bool ShouldLogParameterValues(IDiagnosticsLogger`1<Command> diagnostics, DbCommand command);
    [ExtensionAttribute]
public static DbDataReader CommandReaderExecuted(IDiagnosticsLogger`1<Command> diagnostics, IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DbDataReader methodResult, DateTimeOffset startTime, TimeSpan duration);
    [ExtensionAttribute]
public static object CommandScalarExecuted(IDiagnosticsLogger`1<Command> diagnostics, IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, object methodResult, DateTimeOffset startTime, TimeSpan duration);
    [ExtensionAttribute]
public static int CommandNonQueryExecuted(IDiagnosticsLogger`1<Command> diagnostics, IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, int methodResult, DateTimeOffset startTime, TimeSpan duration);
    [ExtensionAttribute]
public static Task`1<DbDataReader> CommandReaderExecutedAsync(IDiagnosticsLogger`1<Command> diagnostics, IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DbDataReader methodResult, DateTimeOffset startTime, TimeSpan duration, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> CommandScalarExecutedAsync(IDiagnosticsLogger`1<Command> diagnostics, IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, object methodResult, DateTimeOffset startTime, TimeSpan duration, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> CommandNonQueryExecutedAsync(IDiagnosticsLogger`1<Command> diagnostics, IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, int methodResult, DateTimeOffset startTime, TimeSpan duration, CancellationToken cancellationToken);
    private static CommandExecutedEventData BroadcastCommandExecuted(IDiagnosticsLogger`1<Command> diagnostics, DbConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, object methodResult, bool async, DateTimeOffset startTime, TimeSpan duration, EventDefinition`6<string, string, CommandType, int, string, string> definition, bool diagnosticSourceEnabled);
    private static void LogCommandExecuted(IDiagnosticsLogger`1<Command> diagnostics, DbCommand command, TimeSpan duration, EventDefinition`6<string, string, CommandType, int, string, string> definition);
    private static string CommandExecuted(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void CommandError(IDiagnosticsLogger`1<Command> diagnostics, IRelationalConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, Exception exception, DateTimeOffset startTime, TimeSpan duration);
    private static void LogCommandError(IDiagnosticsLogger`1<Command> diagnostics, DbCommand command, TimeSpan duration, EventDefinition`6<string, string, CommandType, int, string, string> definition);
    [ExtensionAttribute]
public static Task CommandErrorAsync(IDiagnosticsLogger`1<Command> diagnostics, IRelationalConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, Exception exception, DateTimeOffset startTime, TimeSpan duration, CancellationToken cancellationToken);
    private static CommandErrorEventData BroadcastCommandError(IDiagnosticsLogger`1<Command> diagnostics, DbConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, Exception exception, bool async, DateTimeOffset startTime, TimeSpan duration, EventDefinition`6<string, string, CommandType, int, string, string> definition, bool diagnosticSourceEnabled);
    private static string CommandError(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static InterceptionResult ConnectionOpening(IDiagnosticsLogger`1<Connection> diagnostics, IRelationalConnection connection, DateTimeOffset startTime);
    [ExtensionAttribute]
public static Task`1<InterceptionResult> ConnectionOpeningAsync(IDiagnosticsLogger`1<Connection> diagnostics, IRelationalConnection connection, DateTimeOffset startTime, CancellationToken cancellationToken);
    private static void LogConnectionOpening(IDiagnosticsLogger`1<Connection> diagnostics, IRelationalConnection connection, EventDefinition`2<string, string> definition);
    private static ConnectionEventData BroadcastConnectionOpening(IDiagnosticsLogger`1<Connection> diagnostics, IRelationalConnection connection, DateTimeOffset startTime, EventDefinition`2<string, string> definition, bool async, bool diagnosticSourceEnabled);
    private static string ConnectionOpening(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ConnectionOpened(IDiagnosticsLogger`1<Connection> diagnostics, IRelationalConnection connection, DateTimeOffset startTime, TimeSpan duration);
    [ExtensionAttribute]
public static Task ConnectionOpenedAsync(IDiagnosticsLogger`1<Connection> diagnostics, IRelationalConnection connection, DateTimeOffset startTime, TimeSpan duration, CancellationToken cancellationToken);
    private static ConnectionEndEventData BroadcastConnectionOpened(IDiagnosticsLogger`1<Connection> diagnostics, IRelationalConnection connection, bool async, DateTimeOffset startTime, TimeSpan duration, EventDefinition`2<string, string> definition, bool diagnosticSourceEnabled);
    private static void LogConnectionOpened(IDiagnosticsLogger`1<Connection> diagnostics, IRelationalConnection connection, EventDefinition`2<string, string> definition);
    private static string ConnectionOpened(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static InterceptionResult ConnectionClosing(IDiagnosticsLogger`1<Connection> diagnostics, IRelationalConnection connection, DateTimeOffset startTime);
    [ExtensionAttribute]
public static Task`1<InterceptionResult> ConnectionClosingAsync(IDiagnosticsLogger`1<Connection> diagnostics, IRelationalConnection connection, DateTimeOffset startTime);
    private static ConnectionEventData BroadcastConnectionClosing(IDiagnosticsLogger`1<Connection> diagnostics, IRelationalConnection connection, DateTimeOffset startTime, bool async, EventDefinition`2<string, string> definition, bool diagnosticSourceEnabled);
    private static void LogConnectionClosing(IDiagnosticsLogger`1<Connection> diagnostics, IRelationalConnection connection, EventDefinition`2<string, string> definition);
    private static string ConnectionClosing(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ConnectionClosed(IDiagnosticsLogger`1<Connection> diagnostics, IRelationalConnection connection, DateTimeOffset startTime, TimeSpan duration);
    [ExtensionAttribute]
public static Task ConnectionClosedAsync(IDiagnosticsLogger`1<Connection> diagnostics, IRelationalConnection connection, DateTimeOffset startTime, TimeSpan duration);
    private static ConnectionEndEventData BroadcastCollectionClosed(IDiagnosticsLogger`1<Connection> diagnostics, IRelationalConnection connection, DateTimeOffset startTime, TimeSpan duration, bool async, EventDefinition`2<string, string> definition, bool diagnosticSourceEnabled);
    private static void LogConnectionClosed(IDiagnosticsLogger`1<Connection> diagnostics, IRelationalConnection connection, EventDefinition`2<string, string> definition);
    private static string ConnectionClosed(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ConnectionError(IDiagnosticsLogger`1<Connection> diagnostics, IRelationalConnection connection, Exception exception, DateTimeOffset startTime, TimeSpan duration, bool logErrorAsDebug);
    [ExtensionAttribute]
public static Task ConnectionErrorAsync(IDiagnosticsLogger`1<Connection> diagnostics, IRelationalConnection connection, Exception exception, DateTimeOffset startTime, TimeSpan duration, bool logErrorAsDebug, CancellationToken cancellationToken);
    private static ConnectionErrorEventData BroadcastConnectionError(IDiagnosticsLogger`1<Connection> diagnostics, IRelationalConnection connection, Exception exception, DateTimeOffset startTime, TimeSpan duration, bool async, EventDefinition`2<string, string> definition, bool diagnosticSourceEnabled);
    private static void LogConnectionError(IDiagnosticsLogger`1<Connection> diagnostics, IRelationalConnection connection, EventDefinition`2<string, string> definition);
    private static string ConnectionError(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static InterceptionResult`1<DbTransaction> TransactionStarting(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, IsolationLevel isolationLevel, Guid transactionId, DateTimeOffset startTime);
    [ExtensionAttribute]
public static Task`1<InterceptionResult`1<DbTransaction>> TransactionStartingAsync(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, IsolationLevel isolationLevel, Guid transactionId, DateTimeOffset startTime, CancellationToken cancellationToken);
    private static TransactionStartingEventData BroadcastTransactionStarting(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, IsolationLevel isolationLevel, Guid transactionId, bool async, DateTimeOffset startTime, EventDefinition`1<string> definition, bool diagnosticSourceEnabled);
    private static void LogTransactionStarting(IDiagnosticsLogger`1<Transaction> diagnostics, IsolationLevel isolationLevel, EventDefinition`1<string> definition);
    private static string TransactionStarting(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static DbTransaction TransactionStarted(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, TimeSpan duration);
    [ExtensionAttribute]
public static Task`1<DbTransaction> TransactionStartedAsync(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, TimeSpan duration, CancellationToken cancellationToken);
    private static TransactionEndEventData BroadcastTransactionStarted(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, bool async, DateTimeOffset startTime, TimeSpan duration, EventDefinition`1<string> definition, bool diagnosticSourceEnabled);
    private static void LogTransactionStarted(IDiagnosticsLogger`1<Transaction> diagnostics, DbTransaction transaction, EventDefinition`1<string> definition);
    private static string TransactionStarted(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static DbTransaction TransactionUsed(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime);
    [ExtensionAttribute]
public static Task`1<DbTransaction> TransactionUsedAsync(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, CancellationToken cancellationToken);
    private static TransactionEventData BroadcasstTransactionUsed(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, bool async, DateTimeOffset startTime, EventDefinition`1<string> definition, bool diagnosticSourceEnabled);
    private static void LogTransactionUsed(IDiagnosticsLogger`1<Transaction> diagnostics, DbTransaction transaction, EventDefinition`1<string> definition);
    private static string TransactionUsed(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static InterceptionResult TransactionCommitting(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime);
    [ExtensionAttribute]
public static Task`1<InterceptionResult> TransactionCommittingAsync(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, CancellationToken cancellationToken);
    private static TransactionEventData BroadcastTransactionCommitting(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, EventDefinition definition, bool async, bool diagnosticSourceEnabled);
    private static void LogTransactionCommitting(IDiagnosticsLogger`1<Transaction> diagnostics, EventDefinition definition);
    [ExtensionAttribute]
public static void TransactionCommitted(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, TimeSpan duration);
    [ExtensionAttribute]
public static Task TransactionCommittedAsync(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, TimeSpan duration, CancellationToken cancellationToken);
    private static TransactionEndEventData BroadcastTransactionCommitted(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, TimeSpan duration, EventDefinition definition, bool async, bool diagnosticSourceEnabled);
    private static void LogTransactionCommitted(IDiagnosticsLogger`1<Transaction> diagnostics, EventDefinition definition);
    [ExtensionAttribute]
public static void TransactionRolledBack(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, TimeSpan duration);
    [ExtensionAttribute]
public static Task TransactionRolledBackAsync(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, TimeSpan duration, CancellationToken cancellationToken);
    private static TransactionEndEventData BroadcastTransactionRolledBack(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, TimeSpan duration, EventDefinition definition, bool async, bool diagnosticSourceEnabled);
    private static void LogTransactionRolledBack(IDiagnosticsLogger`1<Transaction> diagnostics, EventDefinition definition);
    [ExtensionAttribute]
public static InterceptionResult TransactionRollingBack(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime);
    [ExtensionAttribute]
public static Task`1<InterceptionResult> TransactionRollingBackAsync(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, CancellationToken cancellationToken);
    private static TransactionEventData BroadcastTransactionRollingBack(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, EventDefinition definition, bool async, bool diagnosticSourceEnabled);
    private static void LogTransactionRollingBack(IDiagnosticsLogger`1<Transaction> diagnostics, EventDefinition definition);
    [ExtensionAttribute]
public static void TransactionDisposed(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime);
    [ExtensionAttribute]
public static void TransactionError(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, string action, Exception exception, DateTimeOffset startTime, TimeSpan duration);
    [ExtensionAttribute]
public static Task TransactionErrorAsync(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, string action, Exception exception, DateTimeOffset startTime, TimeSpan duration, CancellationToken cancellationToken);
    private static TransactionErrorEventData BroadcastTransactionError(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, string action, Exception exception, DateTimeOffset startTime, TimeSpan duration, EventDefinition definition, bool async, bool diagnosticSourceEnabled);
    private static void LogTransactionError(IDiagnosticsLogger`1<Transaction> diagnostics, Exception exception, EventDefinition definition);
    [ExtensionAttribute]
public static void AmbientTransactionWarning(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DateTimeOffset startTime);
    [ExtensionAttribute]
public static void AmbientTransactionEnlisted(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, Transaction transaction);
    private static string AmbientTransactionEnlisted(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ExplicitTransactionEnlisted(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, Transaction transaction);
    private static string ExplicitTransactionEnlisted(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static InterceptionResult DataReaderDisposing(IDiagnosticsLogger`1<Command> diagnostics, IRelationalConnection connection, DbCommand command, DbDataReader dataReader, Guid commandId, int recordsAffected, int readCount, DateTimeOffset startTime, TimeSpan duration);
    [ExtensionAttribute]
public static void MigrateUsingConnection(IDiagnosticsLogger`1<Migrations> diagnostics, IMigrator migrator, IRelationalConnection connection);
    private static string MigrateUsingConnection(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void MigrationReverting(IDiagnosticsLogger`1<Migrations> diagnostics, IMigrator migrator, Migration migration);
    private static string MigrationReverting(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void MigrationApplying(IDiagnosticsLogger`1<Migrations> diagnostics, IMigrator migrator, Migration migration);
    private static string MigrationApplying(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void MigrationGeneratingDownScript(IDiagnosticsLogger`1<Migrations> diagnostics, IMigrator migrator, Migration migration, string fromMigration, string toMigration, bool idempotent);
    private static string MigrationGeneratingDownScript(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void MigrationGeneratingUpScript(IDiagnosticsLogger`1<Migrations> diagnostics, IMigrator migrator, Migration migration, string fromMigration, string toMigration, bool idempotent);
    private static string MigrationGeneratingUpScript(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void MigrationsNotApplied(IDiagnosticsLogger`1<Migrations> diagnostics, IMigrator migrator);
    [ExtensionAttribute]
public static void MigrationsNotFound(IDiagnosticsLogger`1<Migrations> diagnostics, IMigrator migrator, IMigrationsAssembly migrationsAssembly);
    private static string MigrationsNotFound(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void MigrationAttributeMissingWarning(IDiagnosticsLogger`1<Migrations> diagnostics, TypeInfo migrationType);
    private static string MigrationAttributeMissingWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void QueryPossibleUnintendedUseOfEqualsWarning(IDiagnosticsLogger`1<Query> diagnostics, MethodCallExpression methodCallExpression);
    private static string QueryPossibleUnintendedUseOfEqualsWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void QueryPossibleExceptionWithAggregateOperatorWarning(IDiagnosticsLogger`1<Query> diagnostics);
    [ExtensionAttribute]
public static void ModelValidationKeyDefaultValueWarning(IDiagnosticsLogger`1<Validation> diagnostics, IProperty property);
    private static string ModelValidationKeyDefaultValueWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void BoolWithDefaultWarning(IDiagnosticsLogger`1<Validation> diagnostics, IProperty property);
    private static string BoolWithDefaultWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void BatchReadyForExecution(IDiagnosticsLogger`1<Update> diagnostics, IEnumerable`1<IUpdateEntry> entries, int commandCount);
    private static string BatchReadyForExecution(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void BatchSmallerThanMinBatchSize(IDiagnosticsLogger`1<Update> diagnostics, IEnumerable`1<IUpdateEntry> entries, int commandCount, int minBatchSize);
    private static string BatchSmallerThanMinBatchSize(EventDefinitionBase definition, EventData payload);
}
public abstract class Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions : LoggingDefinitions {
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogTransactionError;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogBoolWithDefaultWarning;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogOpeningConnection;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogOpenedConnection;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogClosingConnection;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogClosedConnection;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogConnectionError;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogBeginningTransaction;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogBeganTransaction;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogUsingTransaction;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCommittingTransaction;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogRollingBackTransaction;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCommittedTransaction;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogRolledBackTransaction;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogDisposingTransaction;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogDisposingDataReader;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogAmbientTransaction;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogPossibleUnintendedUseOfEquals;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogQueryPossibleExceptionWithAggregateOperatorWarning;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogGeneratingDown;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogGeneratingUp;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogApplyingMigration;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogRevertingMigration;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogMigrating;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogNoMigrationsApplied;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogNoMigrationsFound;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogKeyHasDefaultValue;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCommandCreating;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCommandCreated;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogExecutingCommand;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogExecutedCommand;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCommandFailed;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogConnectionErrorAsDebug;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogAmbientTransactionEnlisted;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogExplicitTransactionEnlisted;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogBatchSmallerThanMinBatchSize;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogBatchReadyForExecution;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogMigrationAttributeMissingWarning;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogValueConversionSqlLiteralWarning;
}
public static class Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings : object {
    private static ResourceManager _resourceManager;
    public static string MultipleProvidersConfigured { get; }
    public static string NoProviderConfigured { get; }
    public static string ConnectionAndConnectionString { get; }
    public static string NoConnectionOrConnectionString { get; }
    public static string RelationalNotInUse { get; }
    public static string UpdateStoreException { get; }
    public static string TransactionAlreadyStarted { get; }
    public static string TransactionAssociatedWithDifferentConnection { get; }
    public static string BadSequenceType { get; }
    public static string BadSequenceString { get; }
    public static string BadCheckConstraintString { get; }
    public static string InvalidCommandTimeout { get; }
    public static string InvalidMaxBatchSize { get; }
    public static string NoActiveTransaction { get; }
    public static string ConflictingAmbientTransaction { get; }
    public static string ConflictingEnlistedTransaction { get; }
    public static string InvalidMinBatchSize { get; }
    public static string SqlFunctionArgumentsAndMappingsMismatch { get; }
    public static string SqlFunctionNullArgumentMapping { get; }
    public static string SqlFunctionUnexpectedInstanceMapping { get; }
    public static string PendingAmbientTransaction { get; }
    public static string SetOperationNotWithinEntityTypeHierarchy { get; }
    public static string FromSqlNonComposable { get; }
    private static RelationalStrings();
    public static string ModificationCommandInvalidEntityState(object entityState);
    public static string UpdateConcurrencyException(object expectedRows, object actualRows);
    public static string get_MultipleProvidersConfigured();
    public static string get_NoProviderConfigured();
    public static string get_ConnectionAndConnectionString();
    public static string get_NoConnectionOrConnectionString();
    public static string NamedConnectionStringNotFound(object name);
    public static string UnsupportedType(object clrType);
    public static string get_RelationalNotInUse();
    public static string get_UpdateStoreException();
    public static string get_TransactionAlreadyStarted();
    public static string get_TransactionAssociatedWithDifferentConnection();
    public static string get_BadSequenceType();
    public static string get_BadSequenceString();
    public static string get_BadCheckConstraintString();
    public static string MigrationNotFound(object migrationName);
    public static string UnknownOperation(object sqlGeneratorType, object operationType);
    public static string get_InvalidCommandTimeout();
    public static string get_InvalidMaxBatchSize();
    public static string FromSqlMissingColumn(object column);
    public static string IncompatibleTableKeyNameMismatch(object table, object entityType, object otherEntityType, object keyName, object primaryKey, object otherName, object otherPrimaryKey);
    public static string IncompatibleTableCommentMismatch(object table, object entityType, object otherEntityType, object comment, object otherComment);
    public static string IncompatibleTableNoRelationship(object table, object entityType, object otherEntityType);
    public static string MissingParameterValue(object parameter);
    public static string ParameterNotObjectArray(object parameter);
    public static string DuplicateColumnNameDataTypeMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table, object dataType1, object dataType2);
    public static string get_NoActiveTransaction();
    public static string ConflictingRowUpdateTypes(object firstEntityType, object firstState, object secondEntityType, object secondState);
    public static string ConflictingRowUpdateTypesSensitive(object firstEntityType, object firstKeyValue, object firstState, object secondEntityType, object secondKeyValue, object secondState);
    public static string ConflictingRowValues(object firstEntityType, object secondEntityType, object firstProperties, object secondProperties, object columns);
    public static string ConflictingRowValuesSensitive(object firstEntityType, object secondEntityType, object keyValue, object firstConflictingValues, object secondConflictingValues, object columns);
    public static string ConflictingOriginalRowValues(object firstEntityType, object secondEntityType, object firstProperties, object secondProperties, object columns);
    public static string ConflictingOriginalRowValuesSensitive(object firstEntityType, object secondEntityType, object keyValue, object firstConflictingValues, object secondConflictingValues, object columns);
    public static string SharedRowEntryCountMismatch(object entityType, object tableName, object missingEntityType, object state);
    public static string SharedRowEntryCountMismatchSensitive(object entityType, object tableName, object missingEntityType, object keyValue, object state);
    public static string IncorrectDefaultValueType(object value, object valueType, object property, object propertyType, object entityType);
    public static string DuplicateColumnNameNullabilityMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table);
    public static string DuplicateColumnNameComputedSqlMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table, object value1, object value2);
    public static string DuplicateColumnNameDefaultSqlMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table, object value1, object value2);
    public static string DuplicateColumnNameCommentMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table, object comment1, object comment2);
    public static string ConflictingColumnServerGeneration(object conflictingConfiguration, object property, object existingConfiguration);
    public static string DuplicateCheckConstraint(object checkConstraint, object entityType);
    public static string DuplicateForeignKeyColumnMismatch(object index1, object entityType1, object index2, object entityType2, object table, object foreignKeyName, object columnNames1, object columnNames2);
    public static string DuplicateForeignKeyDeleteBehaviorMismatch(object index1, object entityType1, object index2, object entityType2, object table, object foreignKeyName, object deleteBehavior1, object deleteBehavior2);
    public static string DuplicateForeignKeyPrincipalColumnMismatch(object index1, object entityType1, object index2, object entityType2, object table, object foreignKeyName, object principalColumnNames1, object principalColumnNames2);
    public static string DuplicateForeignKeyPrincipalTableMismatch(object index1, object entityType1, object index2, object entityType2, object table, object foreignKeyName, object principalTable1, object principalTable2);
    public static string DuplicateForeignKeyUniquenessMismatch(object index1, object entityType1, object index2, object entityType2, object table, object foreignKeyName);
    public static string DuplicateIndexColumnMismatch(object index1, object entityType1, object index2, object entityType2, object table, object indexName, object columnNames1, object columnNames2);
    public static string DuplicateIndexUniquenessMismatch(object index1, object entityType1, object index2, object entityType2, object table, object indexName);
    public static string DuplicateKeyColumnMismatch(object key1, object entityType1, object key2, object entityType2, object table, object keyName, object columnNames1, object columnNames2);
    public static string UnsupportedPropertyType(object entity, object property, object clrType);
    public static string TimeoutTooSmall(object seconds);
    public static string TimeoutTooBig(object seconds);
    public static string DbFunctionInvalidReturnType(object function, object type);
    public static string DbFunctionNameEmpty(object function);
    public static string DbFunctionInvalidParameterType(object parameter, object function, object type);
    public static string DbFunctionInvalidParameterName(object function, object parameter);
    public static string DbFunctionGenericMethodNotSupported(object function);
    public static string DbFunctionExpressionIsNotMethodCall(object expression);
    public static string DbFunctionInvalidInstanceType(object function, object type);
    public static string get_ConflictingAmbientTransaction();
    public static string get_ConflictingEnlistedTransaction();
    public static string get_InvalidMinBatchSize();
    public static string ExpectedNonNullParameter(object parameter);
    public static string DerivedTypeTable(object entityType, object baseType);
    public static string RelationalCloneNotImplemented(object mapping);
    public static string CaseElseResultTypeUnexpected(object elseResultType, object resultType);
    public static string CaseWhenClauseResultTypeUnexpected(object whenResultType, object resultType);
    public static string CaseWhenClauseTestTypeUnexpected(object whenOperandType, object expectedWhenOperandType);
    public static string get_SqlFunctionArgumentsAndMappingsMismatch();
    public static string get_SqlFunctionNullArgumentMapping();
    public static string get_SqlFunctionUnexpectedInstanceMapping();
    public static string MissingConcurrencyColumn(object entityType, object missingColumn, object table);
    public static string get_PendingAmbientTransaction();
    public static string get_SetOperationNotWithinEntityTypeHierarchy();
    public static string get_FromSqlNonComposable();
    private static string GetString(string name, String[] formatterNames);
}
public class Microsoft.EntityFrameworkCore.Diagnostics.SequenceEventData : EventData {
    [CompilerGeneratedAttribute]
private ISequence <Sequence>k__BackingField;
    public ISequence Sequence { get; }
    public SequenceEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, ISequence sequence);
    [CompilerGeneratedAttribute]
public virtual ISequence get_Sequence();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.TransactionEndEventData : TransactionEventData {
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    public TimeSpan Duration { get; }
    public TransactionEndEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbTransaction transaction, DbContext context, Guid transactionId, Guid connectionId, bool async, DateTimeOffset startTime, TimeSpan duration);
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_Duration();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.TransactionEnlistedEventData : EventData {
    [CompilerGeneratedAttribute]
private Transaction <Transaction>k__BackingField;
    [CompilerGeneratedAttribute]
private DbConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ConnectionId>k__BackingField;
    public Transaction Transaction { get; }
    public DbConnection Connection { get; }
    public Guid ConnectionId { get; }
    public TransactionEnlistedEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, Transaction transaction, DbConnection connection, Guid connectionId);
    [CompilerGeneratedAttribute]
public virtual Transaction get_Transaction();
    [CompilerGeneratedAttribute]
public virtual DbConnection get_Connection();
    [CompilerGeneratedAttribute]
public virtual Guid get_ConnectionId();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.TransactionErrorEventData : TransactionEndEventData {
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public string Action { get; }
    public Exception Exception { get; }
    public TransactionErrorEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbTransaction transaction, DbContext context, Guid transactionId, Guid connectionId, bool async, string action, Exception exception, DateTimeOffset startTime, TimeSpan duration);
    [CompilerGeneratedAttribute]
public virtual string get_Action();
    [CompilerGeneratedAttribute]
public virtual Exception get_Exception();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData : DbContextEventData {
    [CompilerGeneratedAttribute]
private DbTransaction <Transaction>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <TransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTime>k__BackingField;
    public DbTransaction Transaction { get; }
    public Guid TransactionId { get; }
    public Guid ConnectionId { get; }
    public bool IsAsync { get; }
    public DateTimeOffset StartTime { get; }
    public TransactionEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbTransaction transaction, DbContext context, Guid transactionId, Guid connectionId, bool async, DateTimeOffset startTime);
    [CompilerGeneratedAttribute]
public virtual DbTransaction get_Transaction();
    [CompilerGeneratedAttribute]
public virtual Guid get_TransactionId();
    [CompilerGeneratedAttribute]
public virtual Guid get_ConnectionId();
    [CompilerGeneratedAttribute]
public virtual bool get_IsAsync();
    [CompilerGeneratedAttribute]
public virtual DateTimeOffset get_StartTime();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.TransactionStartingEventData : DbContextEventData {
    [CompilerGeneratedAttribute]
private IsolationLevel <IsolationLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <TransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTime>k__BackingField;
    public IsolationLevel IsolationLevel { get; }
    public Guid TransactionId { get; }
    public Guid ConnectionId { get; }
    public bool IsAsync { get; }
    public DateTimeOffset StartTime { get; }
    public TransactionStartingEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbContext context, IsolationLevel isolationLevel, Guid transactionId, Guid connectionId, bool async, DateTimeOffset startTime);
    [CompilerGeneratedAttribute]
public virtual IsolationLevel get_IsolationLevel();
    [CompilerGeneratedAttribute]
public virtual Guid get_TransactionId();
    [CompilerGeneratedAttribute]
public virtual Guid get_ConnectionId();
    [CompilerGeneratedAttribute]
public virtual bool get_IsAsync();
    [CompilerGeneratedAttribute]
public virtual DateTimeOffset get_StartTime();
}
internal static class Microsoft.EntityFrameworkCore.EnumerableMethods : object {
    [CompilerGeneratedAttribute]
private static MethodInfo <All>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AsEnumerable>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Cast>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Concat>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Contains>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <CountWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <CountWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <DefaultIfEmptyWithoutArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <DefaultIfEmptyWithArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Distinct>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ElementAt>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ElementAtOrDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Except>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeySelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyElementSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyElementResultSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyResultSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupJoin>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Intersect>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Join>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LongCountWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LongCountWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MaxWithoutSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MaxWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MinWithoutSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MinWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OfType>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OrderByDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Reverse>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Select>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectWithOrdinal>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectManyWithoutCollectionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectManyWithCollectionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SequenceEqual>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SkipWhile>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Take>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <TakeWhile>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ThenBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ThenByDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ToArray>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ToList>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Union>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <SumWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <SumWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <AverageWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <AverageWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MaxWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MaxWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MinWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MinWithSelectorMethods>k__BackingField;
    public static MethodInfo All { get; }
    public static MethodInfo AnyWithoutPredicate { get; }
    public static MethodInfo AnyWithPredicate { get; }
    public static MethodInfo AsEnumerable { get; }
    public static MethodInfo Cast { get; }
    public static MethodInfo Concat { get; }
    public static MethodInfo Contains { get; }
    public static MethodInfo CountWithoutPredicate { get; }
    public static MethodInfo CountWithPredicate { get; }
    public static MethodInfo DefaultIfEmptyWithoutArgument { get; }
    public static MethodInfo DefaultIfEmptyWithArgument { get; }
    public static MethodInfo Distinct { get; }
    public static MethodInfo ElementAt { get; }
    public static MethodInfo ElementAtOrDefault { get; }
    public static MethodInfo Except { get; }
    public static MethodInfo FirstWithoutPredicate { get; }
    public static MethodInfo FirstWithPredicate { get; }
    public static MethodInfo FirstOrDefaultWithoutPredicate { get; }
    public static MethodInfo FirstOrDefaultWithPredicate { get; }
    public static MethodInfo GroupByWithKeySelector { get; }
    public static MethodInfo GroupByWithKeyElementSelector { get; }
    public static MethodInfo GroupByWithKeyElementResultSelector { get; }
    public static MethodInfo GroupByWithKeyResultSelector { get; }
    public static MethodInfo GroupJoin { get; }
    public static MethodInfo Intersect { get; }
    public static MethodInfo Join { get; }
    public static MethodInfo LastWithoutPredicate { get; }
    public static MethodInfo LastWithPredicate { get; }
    public static MethodInfo LastOrDefaultWithoutPredicate { get; }
    public static MethodInfo LastOrDefaultWithPredicate { get; }
    public static MethodInfo LongCountWithoutPredicate { get; }
    public static MethodInfo LongCountWithPredicate { get; }
    public static MethodInfo MaxWithoutSelector { get; }
    public static MethodInfo MaxWithSelector { get; }
    public static MethodInfo MinWithoutSelector { get; }
    public static MethodInfo MinWithSelector { get; }
    public static MethodInfo OfType { get; }
    public static MethodInfo OrderBy { get; }
    public static MethodInfo OrderByDescending { get; }
    public static MethodInfo Reverse { get; }
    public static MethodInfo Select { get; }
    public static MethodInfo SelectWithOrdinal { get; }
    public static MethodInfo SelectManyWithoutCollectionSelector { get; }
    public static MethodInfo SelectManyWithCollectionSelector { get; }
    public static MethodInfo SequenceEqual { get; }
    public static MethodInfo SingleWithoutPredicate { get; }
    public static MethodInfo SingleWithPredicate { get; }
    public static MethodInfo SingleOrDefaultWithoutPredicate { get; }
    public static MethodInfo SingleOrDefaultWithPredicate { get; }
    public static MethodInfo Skip { get; }
    public static MethodInfo SkipWhile { get; }
    public static MethodInfo Take { get; }
    public static MethodInfo TakeWhile { get; }
    public static MethodInfo ThenBy { get; }
    public static MethodInfo ThenByDescending { get; }
    public static MethodInfo ToArray { get; }
    public static MethodInfo ToList { get; }
    public static MethodInfo Union { get; }
    public static MethodInfo Where { get; }
    private static Dictionary`2<Type, MethodInfo> SumWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> SumWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> AverageWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> AverageWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MaxWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MaxWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MinWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MinWithSelectorMethods { get; }
    private static EnumerableMethods();
    [CompilerGeneratedAttribute]
public static MethodInfo get_All();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AsEnumerable();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Cast();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Concat();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Contains();
    [CompilerGeneratedAttribute]
public static MethodInfo get_CountWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_CountWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_DefaultIfEmptyWithoutArgument();
    [CompilerGeneratedAttribute]
public static MethodInfo get_DefaultIfEmptyWithArgument();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Distinct();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ElementAt();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ElementAtOrDefault();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Except();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeySelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyElementSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyElementResultSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyResultSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupJoin();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Intersect();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Join();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LongCountWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LongCountWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MaxWithoutSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MaxWithSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MinWithoutSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MinWithSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OfType();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OrderBy();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OrderByDescending();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Reverse();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Select();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectWithOrdinal();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectManyWithoutCollectionSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectManyWithCollectionSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SequenceEqual();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Skip();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SkipWhile();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Take();
    [CompilerGeneratedAttribute]
public static MethodInfo get_TakeWhile();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ThenBy();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ThenByDescending();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ToArray();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ToList();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Union();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Where();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_SumWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_SumWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_AverageWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_AverageWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MaxWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MaxWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MinWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MinWithSelectorMethods();
    public static bool IsSumWithoutSelector(MethodInfo methodInfo);
    public static bool IsSumWithSelector(MethodInfo methodInfo);
    public static bool IsAverageWithoutSelector(MethodInfo methodInfo);
    public static bool IsAverageWithSelector(MethodInfo methodInfo);
    public static MethodInfo GetSumWithoutSelector(Type type);
    public static MethodInfo GetSumWithSelector(Type type);
    public static MethodInfo GetAverageWithoutSelector(Type type);
    public static MethodInfo GetAverageWithSelector(Type type);
    public static MethodInfo GetMaxWithoutSelector(Type type);
    public static MethodInfo GetMaxWithSelector(Type type);
    public static MethodInfo GetMinWithoutSelector(Type type);
    public static MethodInfo GetMinWithSelector(Type type);
    [CompilerGeneratedAttribute]
internal static MethodInfo <.cctor>g__GetMethod|213_62(string name, int genericParameterCount, Func`2<Type[], Type[]> parameterGenerator, <>c__DisplayClass213_0& );
}
public class Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkRelationalServicesBuilder : EntityFrameworkServicesBuilder {
    [EntityFrameworkInternalAttribute]
public static IDictionary`2<Type, ServiceCharacteristics> RelationalServices;
    public EntityFrameworkRelationalServicesBuilder(IServiceCollection serviceCollection);
    private static EntityFrameworkRelationalServicesBuilder();
    [EntityFrameworkInternalAttribute]
protected virtual ServiceCharacteristics GetServiceCharacteristics(Type serviceType);
    public virtual EntityFrameworkServicesBuilder TryAddCoreServices();
}
public interface Microsoft.EntityFrameworkCore.Infrastructure.IRelationalDbContextOptionsBuilderInfrastructure {
    public DbContextOptionsBuilder OptionsBuilder { get; }
    public abstract virtual DbContextOptionsBuilder get_OptionsBuilder();
}
public abstract class Microsoft.EntityFrameworkCore.Infrastructure.ModelSnapshot : object {
    private IModel _model;
    public IModel Model { get; }
    private IModel CreateModel();
    public virtual IModel get_Model();
    protected abstract virtual void BuildModel(ModelBuilder modelBuilder);
}
public abstract class Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2 : object {
    [CompilerGeneratedAttribute]
private DbContextOptionsBuilder <OptionsBuilder>k__BackingField;
    protected DbContextOptionsBuilder OptionsBuilder { get; }
    private DbContextOptionsBuilder Microsoft.EntityFrameworkCore.Infrastructure.IRelationalDbContextOptionsBuilderInfrastructure.OptionsBuilder { get; }
    protected RelationalDbContextOptionsBuilder`2(DbContextOptionsBuilder optionsBuilder);
    [CompilerGeneratedAttribute]
protected virtual DbContextOptionsBuilder get_OptionsBuilder();
    private sealed virtual override DbContextOptionsBuilder Microsoft.EntityFrameworkCore.Infrastructure.IRelationalDbContextOptionsBuilderInfrastructure.get_OptionsBuilder();
    public virtual TBuilder MaxBatchSize(int maxBatchSize);
    public virtual TBuilder MinBatchSize(int minBatchSize);
    public virtual TBuilder CommandTimeout(Nullable`1<int> commandTimeout);
    public virtual TBuilder MigrationsAssembly(string assemblyName);
    public virtual TBuilder MigrationsHistoryTable(string tableName, string schema);
    public virtual TBuilder UseRelationalNulls(bool useRelationalNulls);
    public virtual TBuilder ExecutionStrategy(Func`2<ExecutionStrategyDependencies, IExecutionStrategy> getExecutionStrategy);
    protected virtual TBuilder WithOption(Func`2<TExtension, TExtension> setAction);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelCustomizer : ModelCustomizer {
    public RelationalModelCustomizer(ModelCustomizerDependencies dependencies);
}
public class Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator : ModelValidator {
    [CompilerGeneratedAttribute]
private RelationalModelValidatorDependencies <RelationalDependencies>k__BackingField;
    protected RelationalModelValidatorDependencies RelationalDependencies { get; }
    public RelationalModelValidator(ModelValidatorDependencies dependencies, RelationalModelValidatorDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalModelValidatorDependencies get_RelationalDependencies();
    public virtual void Validate(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateDbFunctions(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateBoolsWithDefaults(IModel model, IDiagnosticsLogger`1<Validation> logger);
    private static bool IsNotNullAndFalse(object value);
    protected virtual void ValidateDefaultValuesOnKeys(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateSharedTableCompatibility(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateSharedTableCompatibility(IReadOnlyList`1<IEntityType> mappedTypes, string tableName, IDiagnosticsLogger`1<Validation> logger);
    private static bool IsIdentifyingPrincipal(IEntityType dependentEntityType, IEntityType principalEntityType);
    protected virtual void ValidateSharedColumnsCompatibility(IReadOnlyList`1<IEntityType> mappedTypes, string tableName, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateSharedForeignKeysCompatibility(IReadOnlyList`1<IEntityType> mappedTypes, string tableName, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateSharedIndexesCompatibility(IReadOnlyList`1<IEntityType> mappedTypes, string tableName, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateSharedKeysCompatibility(IReadOnlyList`1<IEntityType> mappedTypes, string tableName, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateInheritanceMapping(IModel model, IDiagnosticsLogger`1<Validation> logger);
    private static string Format(string schema, string name);
}
public class Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidatorDependencies : object {
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <TypeMappingSource>k__BackingField;
    public IRelationalTypeMappingSource TypeMappingSource { get; }
    [EntityFrameworkInternalAttribute]
public RelationalModelValidatorDependencies(IRelationalTypeMappingSource typeMappingSource);
    [CompilerGeneratedAttribute]
public IRelationalTypeMappingSource get_TypeMappingSource();
    public RelationalModelValidatorDependencies With(IRelationalTypeMappingSource typeMappingSource);
}
public abstract class Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension : object {
    private string _connectionString;
    private DbConnection _connection;
    private Nullable`1<int> _commandTimeout;
    private Nullable`1<int> _maxBatchSize;
    private Nullable`1<int> _minBatchSize;
    private bool _useRelationalNulls;
    private string _migrationsAssembly;
    private string _migrationsHistoryTableName;
    private string _migrationsHistoryTableSchema;
    private Func`2<ExecutionStrategyDependencies, IExecutionStrategy> _executionStrategyFactory;
    public DbContextOptionsExtensionInfo Info { get; }
    public string ConnectionString { get; }
    public DbConnection Connection { get; }
    public Nullable`1<int> CommandTimeout { get; }
    public Nullable`1<int> MaxBatchSize { get; }
    public Nullable`1<int> MinBatchSize { get; }
    public bool UseRelationalNulls { get; }
    public string MigrationsAssembly { get; }
    public string MigrationsHistoryTableName { get; }
    public string MigrationsHistoryTableSchema { get; }
    public Func`2<ExecutionStrategyDependencies, IExecutionStrategy> ExecutionStrategyFactory { get; }
    protected RelationalOptionsExtension(RelationalOptionsExtension copyFrom);
    public abstract virtual DbContextOptionsExtensionInfo get_Info();
    protected abstract virtual RelationalOptionsExtension Clone();
    public virtual string get_ConnectionString();
    public virtual RelationalOptionsExtension WithConnectionString(string connectionString);
    public virtual DbConnection get_Connection();
    public virtual RelationalOptionsExtension WithConnection(DbConnection connection);
    public virtual Nullable`1<int> get_CommandTimeout();
    public virtual RelationalOptionsExtension WithCommandTimeout(Nullable`1<int> commandTimeout);
    public virtual Nullable`1<int> get_MaxBatchSize();
    public virtual RelationalOptionsExtension WithMaxBatchSize(Nullable`1<int> maxBatchSize);
    public virtual Nullable`1<int> get_MinBatchSize();
    public virtual RelationalOptionsExtension WithMinBatchSize(Nullable`1<int> minBatchSize);
    public virtual bool get_UseRelationalNulls();
    public virtual RelationalOptionsExtension WithUseRelationalNulls(bool useRelationalNulls);
    public virtual string get_MigrationsAssembly();
    public virtual RelationalOptionsExtension WithMigrationsAssembly(string migrationsAssembly);
    public virtual string get_MigrationsHistoryTableName();
    public virtual RelationalOptionsExtension WithMigrationsHistoryTableName(string migrationsHistoryTableName);
    public virtual string get_MigrationsHistoryTableSchema();
    public virtual RelationalOptionsExtension WithMigrationsHistoryTableSchema(string migrationsHistoryTableSchema);
    public virtual Func`2<ExecutionStrategyDependencies, IExecutionStrategy> get_ExecutionStrategyFactory();
    public virtual RelationalOptionsExtension WithExecutionStrategyFactory(Func`2<ExecutionStrategyDependencies, IExecutionStrategy> executionStrategyFactory);
    public static RelationalOptionsExtension Extract(IDbContextOptions options);
    public abstract virtual void ApplyServices(IServiceCollection services);
    public virtual void Validate(IDbContextOptions options);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Infrastructure.RelationalPropertyExtensions : object {
    [ExtensionAttribute]
public static string FormatColumns(IEnumerable`1<IProperty> properties);
}
public interface Microsoft.EntityFrameworkCore.Internal.IRelationalDatabaseFacadeDependencies {
    public IRelationalConnection RelationalConnection { get; }
    public IRawSqlCommandBuilder RawSqlCommandBuilder { get; }
    public abstract virtual IRelationalConnection get_RelationalConnection();
    public abstract virtual IRawSqlCommandBuilder get_RawSqlCommandBuilder();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Internal.MethodInfoExtensions : object {
    [ExtensionAttribute]
public static string DisplayName(MethodInfo methodInfo);
}
public class Microsoft.EntityFrameworkCore.Internal.RelationalDatabaseFacadeDependencies : DatabaseFacadeDependencies {
    [CompilerGeneratedAttribute]
private IRelationalConnection <RelationalConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private IRawSqlCommandBuilder <RawSqlCommandBuilder>k__BackingField;
    public IRelationalConnection RelationalConnection { get; }
    public IRawSqlCommandBuilder RawSqlCommandBuilder { get; }
    public RelationalDatabaseFacadeDependencies(IDbContextTransactionManager transactionManager, IDatabaseCreator databaseCreator, IExecutionStrategyFactory executionStrategyFactory, IEnumerable`1<IDatabaseProvider> databaseProviders, IDiagnosticsLogger`1<Command> commandLogger, IConcurrencyDetector concurrencyDetector, IRelationalConnection relationalConnection, IRawSqlCommandBuilder rawSqlCommandBuilder);
    [CompilerGeneratedAttribute]
public virtual IRelationalConnection get_RelationalConnection();
    [CompilerGeneratedAttribute]
public virtual IRawSqlCommandBuilder get_RawSqlCommandBuilder();
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder : object {
    private DbFunction _function;
    public IMutableDbFunction Metadata { get; }
    private IConventionDbFunction Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.Metadata { get; }
    [EntityFrameworkInternalAttribute]
public DbFunctionBuilder(IMutableDbFunction function);
    public virtual IMutableDbFunction get_Metadata();
    public virtual DbFunctionBuilder HasName(string name);
    private sealed virtual override IConventionDbFunctionBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasName(string name, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetName(string name, bool fromDataAnnotation);
    public virtual DbFunctionBuilder HasSchema(string schema);
    private sealed virtual override IConventionDbFunctionBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasSchema(string schema, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetSchema(string schema, bool fromDataAnnotation);
    public virtual DbFunctionBuilder HasStoreType(string storeType);
    private sealed virtual override IConventionDbFunctionBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasStoreType(string storeType, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetStoreType(string storeType, bool fromDataAnnotation);
    private sealed virtual override IConventionDbFunctionBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasTypeMapping(RelationalTypeMapping returnTypeMapping, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetTypeMapping(RelationalTypeMapping returnTypeMapping, bool fromDataAnnotation);
    public virtual DbFunctionBuilder HasTranslation(Func`2<IReadOnlyCollection`1<SqlExpression>, SqlExpression> translation);
    private sealed virtual override IConventionDbFunction Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.get_Metadata();
    private sealed virtual override IConventionDbFunctionBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasTranslation(Func`2<IReadOnlyCollection`1<SqlExpression>, SqlExpression> translation, bool fromDataAnnotation);
    public virtual DbFunctionParameterBuilder HasParameter(string name);
    private IDbFunctionParameter FindParameter(string name);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetTranslation(Func`2<IReadOnlyCollection`1<SqlExpression>, SqlExpression> translation, bool fromDataAnnotation);
    private bool Overrides(bool fromDataAnnotation, Nullable`1<ConfigurationSource> configurationSource);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder : object {
    private DbFunctionParameter _parameter;
    public IMutableDbFunctionParameter Metadata { get; }
    private IConventionDbFunctionParameter Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameterBuilder.Metadata { get; }
    [EntityFrameworkInternalAttribute]
public DbFunctionParameterBuilder(IMutableDbFunctionParameter parameter);
    public virtual IMutableDbFunctionParameter get_Metadata();
    private sealed virtual override IConventionDbFunctionParameter Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameterBuilder.get_Metadata();
    public virtual DbFunctionParameterBuilder HasStoreType(string storeType);
    private sealed virtual override IConventionDbFunctionParameterBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameterBuilder.HasStoreType(string storeType, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameterBuilder.CanSetStoreType(string storeType, bool fromDataAnnotation);
    private sealed virtual override IConventionDbFunctionParameterBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameterBuilder.HasTypeMapping(RelationalTypeMapping typeMapping, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameterBuilder.CanSetTypeMapping(RelationalTypeMapping typeMapping, bool fromDataAnnotation);
    private bool Overrides(bool fromDataAnnotation, Nullable`1<ConfigurationSource> configurationSource);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder {
    public IConventionDbFunction Metadata { get; }
    public abstract virtual IConventionDbFunction get_Metadata();
    public abstract virtual IConventionDbFunctionBuilder HasName(string name, bool fromDataAnnotation);
    public abstract virtual bool CanSetName(string name, bool fromDataAnnotation);
    public abstract virtual IConventionDbFunctionBuilder HasSchema(string schema, bool fromDataAnnotation);
    public abstract virtual bool CanSetSchema(string schema, bool fromDataAnnotation);
    public abstract virtual IConventionDbFunctionBuilder HasStoreType(string storeType, bool fromDataAnnotation);
    public abstract virtual bool CanSetStoreType(string storeType, bool fromDataAnnotation);
    public abstract virtual IConventionDbFunctionBuilder HasTypeMapping(RelationalTypeMapping typeMapping, bool fromDataAnnotation);
    public abstract virtual bool CanSetTypeMapping(RelationalTypeMapping typeMapping, bool fromDataAnnotation);
    public abstract virtual IConventionDbFunctionBuilder HasTranslation(Func`2<IReadOnlyCollection`1<SqlExpression>, SqlExpression> translation, bool fromDataAnnotation);
    public abstract virtual bool CanSetTranslation(Func`2<IReadOnlyCollection`1<SqlExpression>, SqlExpression> translation, bool fromDataAnnotation);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder {
    public IConventionSequence Metadata { get; }
    public abstract virtual IConventionSequence get_Metadata();
    public abstract virtual IConventionSequenceBuilder HasType(Type type, bool fromDataAnnotation);
    public abstract virtual bool CanSetType(Type type, bool fromDataAnnotation);
    public abstract virtual IConventionSequenceBuilder IncrementsBy(Nullable`1<int> increment, bool fromDataAnnotation);
    public abstract virtual bool CanSetIncrementsBy(Nullable`1<int> increment, bool fromDataAnnotation);
    public abstract virtual IConventionSequenceBuilder StartsAt(Nullable`1<long> startValue, bool fromDataAnnotation);
    public abstract virtual bool CanSetStartsAt(Nullable`1<long> startValue, bool fromDataAnnotation);
    public abstract virtual IConventionSequenceBuilder HasMax(Nullable`1<long> maximum, bool fromDataAnnotation);
    public abstract virtual bool CanSetMax(Nullable`1<long> maximum, bool fromDataAnnotation);
    public abstract virtual IConventionSequenceBuilder HasMin(Nullable`1<long> minimum, bool fromDataAnnotation);
    public abstract virtual bool CanSetMin(Nullable`1<long> minimum, bool fromDataAnnotation);
    public abstract virtual IConventionSequenceBuilder IsCyclic(Nullable`1<bool> cyclic, bool fromDataAnnotation);
    public abstract virtual bool CanSetCyclic(Nullable`1<bool> cyclic, bool fromDataAnnotation);
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.SequenceBuilder : object {
    private Sequence _sequence;
    public IMutableSequence Metadata { get; }
    private IConventionSequence Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.Metadata { get; }
    public SequenceBuilder(IMutableSequence sequence);
    public virtual IMutableSequence get_Metadata();
    private sealed virtual override IConventionSequenceBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.HasType(Type type, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.CanSetType(Type type, bool fromDataAnnotation);
    public virtual SequenceBuilder IncrementsBy(int increment);
    private sealed virtual override IConventionSequenceBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.IncrementsBy(Nullable`1<int> increment, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.CanSetIncrementsBy(Nullable`1<int> increment, bool fromDataAnnotation);
    public virtual SequenceBuilder StartsAt(long startValue);
    private sealed virtual override IConventionSequenceBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.StartsAt(Nullable`1<long> startValue, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.CanSetStartsAt(Nullable`1<long> startValue, bool fromDataAnnotation);
    public virtual SequenceBuilder HasMax(long maximum);
    private sealed virtual override IConventionSequenceBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.HasMax(Nullable`1<long> maximum, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.CanSetMax(Nullable`1<long> maximum, bool fromDataAnnotation);
    public virtual SequenceBuilder HasMin(long minimum);
    private sealed virtual override IConventionSequenceBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.HasMin(Nullable`1<long> minimum, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.CanSetMin(Nullable`1<long> minimum, bool fromDataAnnotation);
    public virtual SequenceBuilder IsCyclic(bool cyclic);
    private sealed virtual override IConventionSequenceBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.IsCyclic(Nullable`1<bool> cyclic, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.CanSetCyclic(Nullable`1<bool> cyclic, bool fromDataAnnotation);
    private bool Overrides(bool fromDataAnnotation, Nullable`1<ConfigurationSource> configurationSource);
    private sealed virtual override IConventionSequence Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.get_Metadata();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.DbFunctionTypeMappingConvention : object {
    private IRelationalTypeMappingSource _relationalTypeMappingSource;
    public DbFunctionTypeMappingConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    public virtual void ProcessModelFinalized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
public abstract class Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilder : ProviderConventionSetBuilder {
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    protected RelationalConventionSetBuilder(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual ConventionSet CreateConventionSet();
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies : object {
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalColumnAttributeConvention : PropertyAttributeConventionBase`1<ColumnAttribute> {
    public RelationalColumnAttributeConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, ColumnAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalDbFunctionAttributeConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public RelationalDbFunctionAttributeConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessModelInitialized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    public virtual void ProcessModelAnnotationChanged(IConventionModelBuilder modelBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    protected virtual void ProcessDbFunctionAdded(IConventionDbFunctionBuilder dbFunctionBuilder, IConventionContext context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalMaxIdentifierLengthConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxIdentifierLength>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public int MaxIdentifierLength { get; }
    public RelationalMaxIdentifierLengthConvention(int maxIdentifierLength, ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
public virtual int get_MaxIdentifierLength();
    public virtual void ProcessModelInitialized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalQueryFilterDefiningQueryRewritingConvention : QueryFilterDefiningQueryRewritingConvention {
    public RelationalQueryFilterDefiningQueryRewritingConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalTableAttributeConvention : EntityTypeAttributeConventionBase`1<TableAttribute> {
    public RelationalTableAttributeConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    protected virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, TableAttribute attribute, IConventionContext`1<IConventionEntityTypeBuilder> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalValueGenerationConvention : ValueGenerationConvention {
    public RelationalValueGenerationConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    public virtual void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    public virtual void ProcessEntityTypeAnnotationChanged(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    private void ProcessTableChanged(IConventionEntityTypeBuilder entityTypeBuilder, string oldTable, string oldSchema);
    protected virtual Nullable`1<ValueGenerated> GetValueGenerated(IConventionProperty property);
    public static Nullable`1<ValueGenerated> GetValueGenerated(IProperty property);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public SharedTableConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessModelFinalized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    private static void TryUniquifyTableNames(IConventionModel model, Dictionary`2<ValueTuple`2<string, string>, List`1<IConventionEntityType>> tables, int maxLength);
    private static bool ShouldUniquify(IConventionEntityType entityType, ICollection`1<IConventionEntityType> entityTypes);
    private static void TryUniquifyColumnNames(IConventionEntityType entityType, Dictionary`2<string, IConventionProperty> properties, int maxLength);
    private static string TryUniquify(IConventionProperty property, string columnName, Dictionary`2<string, IConventionProperty> properties, bool usePrefix, int maxLength);
    private static void TryUniquifyKeyNames(IConventionEntityType entityType, Dictionary`2<string, IConventionKey> keys, int maxLength);
    private static string TryUniquify(IConventionKey key, string keyName, Dictionary`2<string, T> keys, int maxLength);
    private static void TryUniquifyIndexNames(IConventionEntityType entityType, Dictionary`2<string, IConventionIndex> indexes, int maxLength);
    private static string TryUniquify(IConventionIndex index, string indexName, Dictionary`2<string, T> indexes, int maxLength);
    private static void TryUniquifyForeignKeyNames(IConventionEntityType entityType, Dictionary`2<string, IConventionForeignKey> foreignKeys, int maxLength);
    private static string TryUniquify(IConventionForeignKey foreignKey, string foreignKeyName, Dictionary`2<string, T> foreignKeys, int maxLength);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.StoreGenerationConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public StoreGenerationConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    public virtual void ProcessModelFinalized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    protected virtual void Validate(IConventionProperty property);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.TableNameFromDbSetConvention : object {
    private IDictionary`2<Type, DbSetProperty> _sets;
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public TableNameFromDbSetConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint {
    public string Name { get; }
    public IEntityType EntityType { get; }
    public string Sql { get; }
    public abstract virtual string get_Name();
    public abstract virtual IEntityType get_EntityType();
    public abstract virtual string get_Sql();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint {
    public IConventionEntityType EntityType { get; }
    public abstract virtual IConventionEntityType get_EntityType();
    public abstract virtual ConfigurationSource GetConfigurationSource();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction {
    public IConventionModel Model { get; }
    public IConventionDbFunctionBuilder Builder { get; }
    public IReadOnlyList`1<IConventionDbFunctionParameter> Parameters { get; }
    public abstract virtual IConventionModel get_Model();
    public abstract virtual IConventionDbFunctionBuilder get_Builder();
    public abstract virtual ConfigurationSource GetConfigurationSource();
    public abstract virtual void SetName(string name, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetNameConfigurationSource();
    public abstract virtual void SetSchema(string schema, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetSchemaConfigurationSource();
    public abstract virtual void SetStoreType(string storeType, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetStoreTypeConfigurationSource();
    public abstract virtual void SetTypeMapping(RelationalTypeMapping typeMapping, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetTypeMappingConfigurationSource();
    public abstract virtual void SetTranslation(Func`2<IReadOnlyCollection`1<SqlExpression>, SqlExpression> translation, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetTranslationConfigurationSource();
    public abstract virtual IReadOnlyList`1<IConventionDbFunctionParameter> get_Parameters();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameter {
    public IConventionDbFunction Function { get; }
    public IConventionDbFunctionParameterBuilder Builder { get; }
    public abstract virtual IConventionDbFunction get_Function();
    public abstract virtual IConventionDbFunctionParameterBuilder get_Builder();
    public abstract virtual void SetStoreType(string storeType, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetStoreTypeConfigurationSource();
    public abstract virtual void SetTypeMapping(RelationalTypeMapping typeMapping, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetTypeMappingConfigurationSource();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameterBuilder {
    public IConventionDbFunctionParameter Metadata { get; }
    public abstract virtual IConventionDbFunctionParameter get_Metadata();
    public abstract virtual IConventionDbFunctionParameterBuilder HasStoreType(string storeType, bool fromDataAnnotation);
    public abstract virtual bool CanSetStoreType(string storeType, bool fromDataAnnotation);
    public abstract virtual IConventionDbFunctionParameterBuilder HasTypeMapping(RelationalTypeMapping typeMapping, bool fromDataAnnotation);
    public abstract virtual bool CanSetTypeMapping(RelationalTypeMapping typeMapping, bool fromDataAnnotation);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionSequence {
    public IConventionModel Model { get; }
    public IConventionSequenceBuilder Builder { get; }
    public abstract virtual IConventionModel get_Model();
    public abstract virtual IConventionSequenceBuilder get_Builder();
    public abstract virtual ConfigurationSource GetConfigurationSource();
    public abstract virtual void SetStartValue(Nullable`1<long> startValue, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetStartValueConfigurationSource();
    public abstract virtual void SetIncrementBy(Nullable`1<int> incrementBy, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetIncrementByConfigurationSource();
    public abstract virtual void SetMinValue(Nullable`1<long> minValue, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetMinValueConfigurationSource();
    public abstract virtual void SetMaxValue(Nullable`1<long> maxValue, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetMaxValueConfigurationSource();
    public abstract virtual void SetClrType(Type clrType, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetClrTypeConfigurationSource();
    public abstract virtual void SetIsCyclic(Nullable`1<bool> cyclic, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetIsCyclicConfigurationSource();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IDbFunction {
    public string Name { get; }
    public string Schema { get; }
    public IModel Model { get; }
    public MethodInfo MethodInfo { get; }
    public string StoreType { get; }
    public RelationalTypeMapping TypeMapping { get; }
    public IReadOnlyList`1<IDbFunctionParameter> Parameters { get; }
    public Func`2<IReadOnlyCollection`1<SqlExpression>, SqlExpression> Translation { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Schema();
    public abstract virtual IModel get_Model();
    public abstract virtual MethodInfo get_MethodInfo();
    public abstract virtual string get_StoreType();
    public abstract virtual RelationalTypeMapping get_TypeMapping();
    public abstract virtual IReadOnlyList`1<IDbFunctionParameter> get_Parameters();
    public abstract virtual Func`2<IReadOnlyCollection`1<SqlExpression>, SqlExpression> get_Translation();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter {
    public IDbFunction Function { get; }
    public string Name { get; }
    public Type ClrType { get; }
    public string StoreType { get; }
    public RelationalTypeMapping TypeMapping { get; }
    public abstract virtual IDbFunction get_Function();
    public abstract virtual string get_Name();
    public abstract virtual Type get_ClrType();
    public abstract virtual string get_StoreType();
    public abstract virtual RelationalTypeMapping get_TypeMapping();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction {
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string StoreType { get; public set; }
    public RelationalTypeMapping TypeMapping { get; public set; }
    public IMutableModel Model { get; }
    public Func`2<IReadOnlyCollection`1<SqlExpression>, SqlExpression> Translation { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Schema();
    public abstract virtual void set_Schema(string value);
    public abstract virtual string get_StoreType();
    public abstract virtual void set_StoreType(string value);
    public abstract virtual RelationalTypeMapping get_TypeMapping();
    public abstract virtual void set_TypeMapping(RelationalTypeMapping value);
    public abstract virtual IMutableModel get_Model();
    public abstract virtual Func`2<IReadOnlyCollection`1<SqlExpression>, SqlExpression> get_Translation();
    public abstract virtual void set_Translation(Func`2<IReadOnlyCollection`1<SqlExpression>, SqlExpression> value);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunctionParameter {
    public IMutableDbFunction Function { get; }
    public string StoreType { get; public set; }
    public RelationalTypeMapping TypeMapping { get; public set; }
    public abstract virtual IMutableDbFunction get_Function();
    public abstract virtual string get_StoreType();
    public abstract virtual void set_StoreType(string value);
    public abstract virtual RelationalTypeMapping get_TypeMapping();
    public abstract virtual void set_TypeMapping(RelationalTypeMapping value);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableSequence {
    public IMutableModel Model { get; }
    public long StartValue { get; public set; }
    public int IncrementBy { get; public set; }
    public Nullable`1<long> MinValue { get; public set; }
    public Nullable`1<long> MaxValue { get; public set; }
    public Type ClrType { get; public set; }
    public bool IsCyclic { get; public set; }
    public abstract virtual IMutableModel get_Model();
    public abstract virtual long get_StartValue();
    public abstract virtual void set_StartValue(long value);
    public abstract virtual int get_IncrementBy();
    public abstract virtual void set_IncrementBy(int value);
    public abstract virtual Nullable`1<long> get_MinValue();
    public abstract virtual void set_MinValue(Nullable`1<long> value);
    public abstract virtual Nullable`1<long> get_MaxValue();
    public abstract virtual void set_MaxValue(Nullable`1<long> value);
    public abstract virtual Type get_ClrType();
    public abstract virtual void set_ClrType(Type value);
    public abstract virtual bool get_IsCyclic();
    public abstract virtual void set_IsCyclic(bool value);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.CheckConstraint : object {
    private ConfigurationSource _configurationSource;
    [CompilerGeneratedAttribute]
private IEntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    public IEntityType EntityType { get; }
    public string Name { get; }
    public string Sql { get; }
    private IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint.EntityType { get; }
    public CheckConstraint(IMutableEntityType entityType, string name, string sql, ConfigurationSource configurationSource);
    public static IEnumerable`1<CheckConstraint> GetCheckConstraints(IEntityType entityType);
    public static ICheckConstraint FindCheckConstraint(IEntityType entityType, string name);
    public static bool RemoveCheckConstraint(IMutableEntityType entityType, string name);
    [CompilerGeneratedAttribute]
public virtual IEntityType get_EntityType();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual string get_Sql();
    public virtual ConfigurationSource GetConfigurationSource();
    public virtual void UpdateConfigurationSource(ConfigurationSource configurationSource);
    private static Dictionary`2<string, CheckConstraint> GetAnnotationsDictionary(IEntityType entityType);
    private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint.get_EntityType();
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction : object {
    private IMutableModel _model;
    private string _annotationName;
    private List`1<DbFunctionParameter> _parameters;
    private string _schema;
    private string _name;
    private string _storeType;
    private RelationalTypeMapping _typeMapping;
    private Func`2<IReadOnlyCollection`1<SqlExpression>, SqlExpression> _translation;
    private Nullable`1<ConfigurationSource> _schemaConfigurationSource;
    private Nullable`1<ConfigurationSource> _nameConfigurationSource;
    private Nullable`1<ConfigurationSource> _storeTypeConfigurationSource;
    private Nullable`1<ConfigurationSource> _typeMappingConfigurationSource;
    private Nullable`1<ConfigurationSource> _translationConfigurationSource;
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    public IConventionDbFunctionBuilder Builder { get; }
    public string Schema { get; public set; }
    public string Name { get; public set; }
    public MethodInfo MethodInfo { get; }
    public string StoreType { get; public set; }
    public RelationalTypeMapping TypeMapping { get; public set; }
    public Func`2<IReadOnlyCollection`1<SqlExpression>, SqlExpression> Translation { get; public set; }
    private IModel Microsoft.EntityFrameworkCore.Metadata.IDbFunction.Model { get; }
    private IMutableModel Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction.Model { get; }
    private IConventionModel Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.Model { get; }
    public IReadOnlyList`1<IDbFunctionParameter> Parameters { get; }
    private IReadOnlyList`1<IConventionDbFunctionParameter> Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.Parameters { get; }
    public DbFunction(MethodInfo methodInfo, IMutableModel model, ConfigurationSource configurationSource);
    public virtual IConventionDbFunctionBuilder get_Builder();
    public static IEnumerable`1<DbFunction> GetDbFunctions(Model model);
    private static string BuildAnnotationName(MethodBase methodBase);
    public virtual ConfigurationSource GetConfigurationSource();
    public virtual void UpdateConfigurationSource(ConfigurationSource configurationSource);
    public virtual string get_Schema();
    public virtual void set_Schema(string value);
    public virtual void SetSchema(string schema, ConfigurationSource configurationSource);
    private void UpdateSchemaConfigurationSource(ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetSchemaConfigurationSource();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual void SetName(string name, ConfigurationSource configurationSource);
    private void UpdateNameConfigurationSource(ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetNameConfigurationSource();
    [CompilerGeneratedAttribute]
public virtual MethodInfo get_MethodInfo();
    public virtual string get_StoreType();
    public virtual void set_StoreType(string value);
    public virtual void SetStoreType(string storeType, ConfigurationSource configurationSource);
    private void UpdateStoreTypeConfigurationSource(ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetStoreTypeConfigurationSource();
    public virtual RelationalTypeMapping get_TypeMapping();
    public virtual void set_TypeMapping(RelationalTypeMapping value);
    public virtual void SetTypeMapping(RelationalTypeMapping typeMapping, ConfigurationSource configurationSource);
    private void UpdateTypeMappingConfigurationSource(ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetTypeMappingConfigurationSource();
    public virtual Func`2<IReadOnlyCollection`1<SqlExpression>, SqlExpression> get_Translation();
    public virtual void set_Translation(Func`2<IReadOnlyCollection`1<SqlExpression>, SqlExpression> value);
    public virtual void SetTranslation(Func`2<IReadOnlyCollection`1<SqlExpression>, SqlExpression> translation, ConfigurationSource configurationSource);
    private void UpdateTranslationConfigurationSource(ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetTranslationConfigurationSource();
    public static DbFunction FindDbFunction(IModel model, MethodInfo methodInfo);
    public static DbFunction RemoveDbFunction(IMutableModel model, MethodInfo methodInfo);
    private sealed virtual override IModel Microsoft.EntityFrameworkCore.Metadata.IDbFunction.get_Model();
    private sealed virtual override IMutableModel Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction.get_Model();
    private sealed virtual override IConventionModel Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.get_Model();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.SetName(string name, bool fromDataAnnotation);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.SetSchema(string schema, bool fromDataAnnotation);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.SetStoreType(string storeType, bool fromDataAnnotation);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.SetTypeMapping(RelationalTypeMapping returnTypeMapping, bool fromDataAnnotation);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.SetTranslation(Func`2<IReadOnlyCollection`1<SqlExpression>, SqlExpression> translation, bool fromDataAnnotation);
    public virtual IReadOnlyList`1<IDbFunctionParameter> get_Parameters();
    private sealed virtual override IReadOnlyList`1<IConventionDbFunctionParameter> Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.get_Parameters();
    [CompilerGeneratedAttribute]
private DbFunctionParameter <.ctor>b__13_0(ParameterInfo pi, int i);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter : object {
    private IMutableDbFunction _function;
    private string _name;
    private Type _clrType;
    private string _storeType;
    private RelationalTypeMapping _typeMapping;
    private Nullable`1<ConfigurationSource> _storeTypeConfigurationSource;
    private Nullable`1<ConfigurationSource> _typeMappingConfigurationSource;
    public IConventionDbFunctionParameterBuilder Builder { get; }
    public string StoreType { get; public set; }
    public RelationalTypeMapping TypeMapping { get; public set; }
    private IConventionDbFunction Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameter.Function { get; }
    private IDbFunction Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.Function { get; }
    private IMutableDbFunction Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunctionParameter.Function { get; }
    private string Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.Name { get; }
    private Type Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.ClrType { get; }
    public DbFunctionParameter(IMutableDbFunction function, string name, Type clrType);
    public virtual IConventionDbFunctionParameterBuilder get_Builder();
    public virtual string get_StoreType();
    public virtual void set_StoreType(string value);
    public virtual void SetStoreType(string storeType, ConfigurationSource configurationSource);
    private void UpdateStoreTypeConfigurationSource(ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetStoreTypeConfigurationSource();
    public virtual RelationalTypeMapping get_TypeMapping();
    public virtual void set_TypeMapping(RelationalTypeMapping value);
    public virtual void SetTypeMapping(RelationalTypeMapping typeMapping, ConfigurationSource configurationSource);
    private void UpdateTypeMappingConfigurationSource(ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetTypeMappingConfigurationSource();
    private sealed virtual override IConventionDbFunction Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameter.get_Function();
    private sealed virtual override IDbFunction Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.get_Function();
    private sealed virtual override IMutableDbFunction Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunctionParameter.get_Function();
    private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.get_Name();
    private sealed virtual override Type Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.get_ClrType();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameter.SetStoreType(string storeType, bool fromDataAnnotation);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameter.SetTypeMapping(RelationalTypeMapping typeMapping, bool fromDataAnnotation);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyExtensions : object {
    [ExtensionAttribute]
public static bool AreCompatible(IForeignKey foreignKey, IForeignKey duplicateForeignKey, bool shouldThrow);
    private static string Format(IEntityType entityType);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalIndexExtensions : object {
    [ExtensionAttribute]
public static bool AreCompatible(IIndex index, IIndex duplicateIndex, bool shouldThrow);
    private static string Format(IEntityType entityType);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyExtensions : object {
    [ExtensionAttribute]
public static IForeignKey FindSharedTableLink(IProperty property);
    [ExtensionAttribute]
public static IForeignKey FindSharedTableLink(IProperty property, string table, string schema);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static string GetConfiguredColumnType(IProperty property);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence : object {
    private IModel _model;
    private string _annotationName;
    public static Type DefaultClrType;
    public static int DefaultIncrementBy;
    public static int DefaultStartValue;
    public static Nullable`1<long> DefaultMaxValue;
    public static Nullable`1<long> DefaultMinValue;
    public static bool DefaultIsCyclic;
    [CompilerGeneratedAttribute]
private static IReadOnlyCollection`1<Type> <SupportedTypes>k__BackingField;
    public IMutableModel Model { get; }
    private IConventionSequenceBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.Builder { get; }
    public string Name { get; }
    public string Schema { get; }
    public long StartValue { get; public set; }
    public int IncrementBy { get; public set; }
    public Nullable`1<long> MinValue { get; public set; }
    public Nullable`1<long> MaxValue { get; public set; }
    public static IReadOnlyCollection`1<Type> SupportedTypes { get; }
    public Type ClrType { get; public set; }
    public bool IsCyclic { get; public set; }
    private IConventionModel Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.Model { get; }
    private IModel Microsoft.EntityFrameworkCore.Metadata.ISequence.Model { get; }
    public Sequence(IMutableModel model, string name, string schema, ConfigurationSource configurationSource);
    public Sequence(IModel model, string annotationName);
    private static Sequence();
    public static IEnumerable`1<Sequence> GetSequences(IModel model, string annotationPrefix);
    public virtual IMutableModel get_Model();
    private sealed virtual override IConventionSequenceBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.get_Builder();
    public virtual string get_Name();
    public virtual string get_Schema();
    public virtual long get_StartValue();
    public virtual void set_StartValue(long value);
    public virtual void SetStartValue(Nullable`1<long> startValue, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetStartValueConfigurationSource();
    public virtual int get_IncrementBy();
    public virtual void set_IncrementBy(int value);
    public virtual void SetIncrementBy(Nullable`1<int> incrementBy, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetIncrementByConfigurationSource();
    public virtual Nullable`1<long> get_MinValue();
    public virtual void set_MinValue(Nullable`1<long> value);
    public virtual void SetMinValue(Nullable`1<long> minValue, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetMinValueConfigurationSource();
    public virtual Nullable`1<long> get_MaxValue();
    public virtual void set_MaxValue(Nullable`1<long> value);
    public virtual void SetMaxValue(Nullable`1<long> maxValue, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetMaxValueConfigurationSource();
    [CompilerGeneratedAttribute]
public static IReadOnlyCollection`1<Type> get_SupportedTypes();
    public virtual Type get_ClrType();
    public virtual void set_ClrType(Type value);
    public virtual void SetClrType(Type clrType, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetClrTypeConfigurationSource();
    public virtual bool get_IsCyclic();
    public virtual void set_IsCyclic(bool value);
    public virtual void SetIsCyclic(Nullable`1<bool> cyclic, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetIsCyclicConfigurationSource();
    public virtual ConfigurationSource GetConfigurationSource();
    public virtual void UpdateConfigurationSource(ConfigurationSource configurationSource);
    private SequenceData GetData();
    private void SetData(SequenceData data);
    private sealed virtual override IConventionModel Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.get_Model();
    public static ISequence FindSequence(IModel model, string name, string schema);
    public static ISequence RemoveSequence(IMutableModel model, string name, string schema);
    private static string BuildSequenceAnnotationName(string annotationPrefix, string name, string schema);
    private sealed virtual override IModel Microsoft.EntityFrameworkCore.Metadata.ISequence.get_Model();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.SetStartValue(Nullable`1<long> startValue, bool fromDataAnnotation);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.SetIncrementBy(Nullable`1<int> incrementBy, bool fromDataAnnotation);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.SetMinValue(Nullable`1<long> minValue, bool fromDataAnnotation);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.SetMaxValue(Nullable`1<long> maxValue, bool fromDataAnnotation);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.SetClrType(Type clrType, bool fromDataAnnotation);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.SetIsCyclic(Nullable`1<bool> cyclic, bool fromDataAnnotation);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.TableMapping : object {
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IEntityType> <EntityTypes>k__BackingField;
    public string Schema { get; }
    public string Name { get; }
    public IReadOnlyList`1<IEntityType> EntityTypes { get; }
    public TableMapping(string schema, string name, IReadOnlyList`1<IEntityType> entityTypes);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<IEntityType> get_EntityTypes();
    public virtual IEntityType GetRootType();
    public virtual IEnumerable`1<IProperty> GetProperties();
    public virtual Dictionary`2<string, IProperty> GetPropertyMap();
    public virtual IEnumerable`1<IKey> GetKeys();
    public virtual IEnumerable`1<IIndex> GetIndexes();
    public virtual IEnumerable`1<IForeignKey> GetForeignKeys();
    public virtual IEnumerable`1<ICheckConstraint> GetCheckConstraints();
    public static IReadOnlyList`1<TableMapping> GetTableMappings(IModel model);
    public static TableMapping GetTableMapping(IModel model, string table, string schema);
    public virtual string GetComment();
    [CompilerGeneratedAttribute]
private bool <GetForeignKeys>b__15_1(IForeignKey fk);
}
public interface Microsoft.EntityFrameworkCore.Metadata.ISequence {
    public string Name { get; }
    public string Schema { get; }
    public IModel Model { get; }
    public long StartValue { get; }
    public int IncrementBy { get; }
    public Nullable`1<long> MinValue { get; }
    public Nullable`1<long> MaxValue { get; }
    public Type ClrType { get; }
    public bool IsCyclic { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Schema();
    public abstract virtual IModel get_Model();
    public abstract virtual long get_StartValue();
    public abstract virtual int get_IncrementBy();
    public abstract virtual Nullable`1<long> get_MinValue();
    public abstract virtual Nullable`1<long> get_MaxValue();
    public abstract virtual Type get_ClrType();
    public abstract virtual bool get_IsCyclic();
}
public static class Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames : object {
    public static string Prefix;
    public static string ColumnName;
    public static string ColumnType;
    public static string DefaultValueSql;
    public static string ComputedColumnSql;
    public static string DefaultValue;
    public static string TableName;
    public static string Schema;
    public static string Comment;
    public static string DefaultSchema;
    public static string Name;
    public static string SequencePrefix;
    public static string CheckConstraints;
    public static string Filter;
    public static string DbFunction;
    public static string MaxIdentifierLength;
    public static string IsFixedLength;
    public static string ViewDefinition;
}
public abstract class Microsoft.EntityFrameworkCore.Migrations.HistoryRepository : object {
    public static string DefaultTableName;
    private IModel _model;
    private string _migrationIdColumnName;
    private string _productVersionColumnName;
    [CompilerGeneratedAttribute]
private HistoryRepositoryDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableSchema>k__BackingField;
    protected HistoryRepositoryDependencies Dependencies { get; }
    protected ISqlGenerationHelper SqlGenerationHelper { get; }
    protected string TableName { get; }
    protected string TableSchema { get; }
    protected string MigrationIdColumnName { get; }
    protected string ProductVersionColumnName { get; }
    protected string ExistsSql { get; }
    protected string GetAppliedMigrationsSql { get; }
    protected HistoryRepository(HistoryRepositoryDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual HistoryRepositoryDependencies get_Dependencies();
    protected virtual ISqlGenerationHelper get_SqlGenerationHelper();
    [CompilerGeneratedAttribute]
protected virtual string get_TableName();
    [CompilerGeneratedAttribute]
protected virtual string get_TableSchema();
    protected virtual string get_MigrationIdColumnName();
    private IModel EnsureModel();
    protected virtual string get_ProductVersionColumnName();
    protected abstract virtual string get_ExistsSql();
    public virtual bool Exists();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.HistoryRepository/<ExistsAsync>d__24")]
public virtual Task`1<bool> ExistsAsync(CancellationToken cancellationToken);
    protected abstract virtual bool InterpretExistsResult(object value);
    public abstract virtual string GetCreateIfNotExistsScript();
    public virtual string GetCreateScript();
    protected virtual void ConfigureTable(EntityTypeBuilder`1<HistoryRow> history);
    public virtual IReadOnlyList`1<HistoryRow> GetAppliedMigrations();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.HistoryRepository/<GetAppliedMigrationsAsync>d__30")]
public virtual Task`1<IReadOnlyList`1<HistoryRow>> GetAppliedMigrationsAsync(CancellationToken cancellationToken);
    protected virtual string get_GetAppliedMigrationsSql();
    public virtual string GetInsertScript(HistoryRow row);
    public virtual string GetDeleteScript(string migrationId);
    public abstract virtual string GetBeginIfNotExistsScript(string migrationId);
    public abstract virtual string GetBeginIfExistsScript(string migrationId);
    public abstract virtual string GetEndIfScript();
    [CompilerGeneratedAttribute]
private void <EnsureModel>b__18_0(EntityTypeBuilder`1<HistoryRow> x);
}
public class Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies : object {
    [CompilerGeneratedAttribute]
private IRelationalDatabaseCreator <DatabaseCreator>k__BackingField;
    [CompilerGeneratedAttribute]
private IRawSqlCommandBuilder <RawSqlCommandBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbContextOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationsModelDiffer <ModelDiffer>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationsSqlGenerator <MigrationsSqlGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlGenerationHelper <SqlGenerationHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IConventionSetBuilder <ConventionSetBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <TypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Model> <ModelLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Command> <CommandLogger>k__BackingField;
    public IRelationalDatabaseCreator DatabaseCreator { get; }
    public IRawSqlCommandBuilder RawSqlCommandBuilder { get; }
    public IRelationalConnection Connection { get; }
    public IDbContextOptions Options { get; }
    public IMigrationsModelDiffer ModelDiffer { get; }
    public IMigrationsSqlGenerator MigrationsSqlGenerator { get; }
    public ISqlGenerationHelper SqlGenerationHelper { get; }
    public IConventionSetBuilder ConventionSetBuilder { get; }
    public IRelationalTypeMappingSource TypeMappingSource { get; }
    public ICurrentDbContext CurrentContext { get; }
    public IDiagnosticsLogger`1<Model> ModelLogger { get; }
    public IDiagnosticsLogger`1<Command> CommandLogger { get; }
    [EntityFrameworkInternalAttribute]
public HistoryRepositoryDependencies(IRelationalDatabaseCreator databaseCreator, IRawSqlCommandBuilder rawSqlCommandBuilder, IRelationalConnection connection, IDbContextOptions options, IMigrationsModelDiffer modelDiffer, IMigrationsSqlGenerator migrationsSqlGenerator, ISqlGenerationHelper sqlGenerationHelper, IConventionSetBuilder conventionSetBuilder, IRelationalTypeMappingSource typeMappingSource, ICurrentDbContext currentContext, IDiagnosticsLogger`1<Model> modelLogger, IDiagnosticsLogger`1<Command> commandLogger);
    [CompilerGeneratedAttribute]
public IRelationalDatabaseCreator get_DatabaseCreator();
    [CompilerGeneratedAttribute]
public IRawSqlCommandBuilder get_RawSqlCommandBuilder();
    [CompilerGeneratedAttribute]
public IRelationalConnection get_Connection();
    [CompilerGeneratedAttribute]
public IDbContextOptions get_Options();
    [CompilerGeneratedAttribute]
public IMigrationsModelDiffer get_ModelDiffer();
    [CompilerGeneratedAttribute]
public IMigrationsSqlGenerator get_MigrationsSqlGenerator();
    [CompilerGeneratedAttribute]
public ISqlGenerationHelper get_SqlGenerationHelper();
    [CompilerGeneratedAttribute]
public IConventionSetBuilder get_ConventionSetBuilder();
    [CompilerGeneratedAttribute]
public IRelationalTypeMappingSource get_TypeMappingSource();
    [CompilerGeneratedAttribute]
public ICurrentDbContext get_CurrentContext();
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Model> get_ModelLogger();
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Command> get_CommandLogger();
    public HistoryRepositoryDependencies With(IRelationalDatabaseCreator databaseCreator);
    public HistoryRepositoryDependencies With(IRawSqlCommandBuilder rawSqlCommandBuilder);
    public HistoryRepositoryDependencies With(IRelationalConnection connection);
    public HistoryRepositoryDependencies With(IDbContextOptions options);
    public HistoryRepositoryDependencies With(IMigrationsModelDiffer modelDiffer);
    public HistoryRepositoryDependencies With(IMigrationsSqlGenerator migrationsSqlGenerator);
    public HistoryRepositoryDependencies With(ISqlGenerationHelper sqlGenerationHelper);
    public HistoryRepositoryDependencies With(IConventionSetBuilder conventionSetBuilder);
    public HistoryRepositoryDependencies With(IRelationalTypeMappingSource typeMappingSource);
    public HistoryRepositoryDependencies With(ICurrentDbContext currentContext);
    public HistoryRepositoryDependencies With(IDiagnosticsLogger`1<Model> modelLogger);
    public HistoryRepositoryDependencies With(IDiagnosticsLogger`1<Command> commandLogger);
}
public class Microsoft.EntityFrameworkCore.Migrations.HistoryRow : object {
    [CompilerGeneratedAttribute]
private string <MigrationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductVersion>k__BackingField;
    public string MigrationId { get; }
    public string ProductVersion { get; }
    public HistoryRow(string migrationId, string productVersion);
    [CompilerGeneratedAttribute]
public virtual string get_MigrationId();
    [CompilerGeneratedAttribute]
public virtual string get_ProductVersion();
}
public interface Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository {
    public abstract virtual bool Exists();
    public abstract virtual Task`1<bool> ExistsAsync(CancellationToken cancellationToken);
    public abstract virtual IReadOnlyList`1<HistoryRow> GetAppliedMigrations();
    public abstract virtual Task`1<IReadOnlyList`1<HistoryRow>> GetAppliedMigrationsAsync(CancellationToken cancellationToken);
    public abstract virtual string GetCreateScript();
    public abstract virtual string GetCreateIfNotExistsScript();
    public abstract virtual string GetInsertScript(HistoryRow row);
    public abstract virtual string GetDeleteScript(string migrationId);
    public abstract virtual string GetBeginIfNotExistsScript(string migrationId);
    public abstract virtual string GetBeginIfExistsScript(string migrationId);
    public abstract virtual string GetEndIfScript();
}
public interface Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor {
    public abstract virtual void ExecuteNonQuery(IEnumerable`1<MigrationCommand> migrationCommands, IRelationalConnection connection);
    public abstract virtual Task ExecuteNonQueryAsync(IEnumerable`1<MigrationCommand> migrationCommands, IRelationalConnection connection, CancellationToken cancellationToken);
}
public interface Microsoft.EntityFrameworkCore.Migrations.IMigrationsAnnotationProvider {
    public abstract virtual IEnumerable`1<IAnnotation> For(IModel model);
    public abstract virtual IEnumerable`1<IAnnotation> For(IIndex index);
    public abstract virtual IEnumerable`1<IAnnotation> For(IProperty property);
    public abstract virtual IEnumerable`1<IAnnotation> For(IKey key);
    public abstract virtual IEnumerable`1<IAnnotation> For(IForeignKey foreignKey);
    public abstract virtual IEnumerable`1<IAnnotation> For(IEntityType entityType);
    public abstract virtual IEnumerable`1<IAnnotation> For(ISequence sequence);
    public abstract virtual IEnumerable`1<IAnnotation> For(ICheckConstraint checkConstraint);
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(IModel model);
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(IIndex index);
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(IProperty property);
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(IKey key);
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(IForeignKey foreignKey);
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(IEntityType entityType);
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(ISequence sequence);
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(ICheckConstraint checkConstraint);
}
public interface Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly {
    public IReadOnlyDictionary`2<string, TypeInfo> Migrations { get; }
    public ModelSnapshot ModelSnapshot { get; }
    public Assembly Assembly { get; }
    public abstract virtual IReadOnlyDictionary`2<string, TypeInfo> get_Migrations();
    public abstract virtual ModelSnapshot get_ModelSnapshot();
    public abstract virtual Assembly get_Assembly();
    public abstract virtual string FindMigrationId(string nameOrId);
    public abstract virtual Migration CreateMigration(TypeInfo migrationClass, string activeProvider);
}
public interface Microsoft.EntityFrameworkCore.Migrations.IMigrationsIdGenerator {
    public abstract virtual string GenerateId(string name);
    public abstract virtual string GetName(string id);
    public abstract virtual bool IsValidId(string value);
}
public interface Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer {
    public abstract virtual bool HasDifferences(IModel source, IModel target);
    public abstract virtual IReadOnlyList`1<MigrationOperation> GetDifferences(IModel source, IModel target);
}
public interface Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator {
    public abstract virtual IReadOnlyList`1<MigrationCommand> Generate(IReadOnlyList`1<MigrationOperation> operations, IModel model);
}
public interface Microsoft.EntityFrameworkCore.Migrations.IMigrator {
    public abstract virtual void Migrate(string targetMigration);
    public abstract virtual Task MigrateAsync(string targetMigration, CancellationToken cancellationToken);
    public abstract virtual string GenerateScript(string fromMigration, string toMigration, bool idempotent);
}
public class Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationCommandExecutor : object {
    public virtual void ExecuteNonQuery(IEnumerable`1<MigrationCommand> migrationCommands, IRelationalConnection connection);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationCommandExecutor/<ExecuteNonQueryAsync>d__1")]
public virtual Task ExecuteNonQueryAsync(IEnumerable`1<MigrationCommand> migrationCommands, IRelationalConnection connection, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationExtensions : object {
    [ExtensionAttribute]
public static string GetId(Migration migration);
}
public class Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsAssembly : object {
    private IMigrationsIdGenerator _idGenerator;
    private IDiagnosticsLogger`1<Migrations> _logger;
    private IReadOnlyDictionary`2<string, TypeInfo> _migrations;
    private ModelSnapshot _modelSnapshot;
    private Type _contextType;
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    public IReadOnlyDictionary`2<string, TypeInfo> Migrations { get; }
    public ModelSnapshot ModelSnapshot { get; }
    public Assembly Assembly { get; }
    public MigrationsAssembly(ICurrentDbContext currentContext, IDbContextOptions options, IMigrationsIdGenerator idGenerator, IDiagnosticsLogger`1<Migrations> logger);
    public virtual IReadOnlyDictionary`2<string, TypeInfo> get_Migrations();
    public virtual ModelSnapshot get_ModelSnapshot();
    [CompilerGeneratedAttribute]
public virtual Assembly get_Assembly();
    public virtual string FindMigrationId(string nameOrId);
    public virtual Migration CreateMigration(TypeInfo migrationClass, string activeProvider);
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, TypeInfo> <get_Migrations>g__Create|7_0();
    [CompilerGeneratedAttribute]
private bool <get_Migrations>b__7_1(TypeInfo t);
    [CompilerGeneratedAttribute]
private bool <get_ModelSnapshot>b__9_0(TypeInfo t);
}
public class Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsIdGenerator : object {
    private static string Format;
    private DateTime _lastTimestamp;
    private object _lock;
    public virtual string GetName(string id);
    public virtual bool IsValidId(string value);
    public virtual string GenerateId(string name);
}
public class Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer : object {
    private static Type[] _dropOperationTypes;
    private static Type[] _alterOperationTypes;
    private static Type[] _renameOperationTypes;
    private static Type[] _columnOperationTypes;
    private static Type[] _constraintOperationTypes;
    private IUpdateAdapter _sourceUpdateAdapter;
    private IUpdateAdapter _targetUpdateAdapter;
    private List`1<SharedTableEntryMap`1<EntryMapping>> _sharedTableEntryMaps;
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <TypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationsAnnotationProvider <MigrationsAnnotations>k__BackingField;
    [CompilerGeneratedAttribute]
private IUpdateAdapterFactory <UpdateAdapterFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandBatchPreparerDependencies <CommandBatchPreparerDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private IChangeDetector <ChangeDetector>k__BackingField;
    protected IRelationalTypeMappingSource TypeMappingSource { get; }
    protected IMigrationsAnnotationProvider MigrationsAnnotations { get; }
    protected IUpdateAdapterFactory UpdateAdapterFactory { get; }
    protected CommandBatchPreparerDependencies CommandBatchPreparerDependencies { get; }
    protected IChangeDetector ChangeDetector { get; }
    public MigrationsModelDiffer(IRelationalTypeMappingSource typeMappingSource, IMigrationsAnnotationProvider migrationsAnnotations, IChangeDetector changeDetector, IUpdateAdapterFactory updateAdapterFactory, CommandBatchPreparerDependencies commandBatchPreparerDependencies);
    private static MigrationsModelDiffer();
    [CompilerGeneratedAttribute]
protected virtual IRelationalTypeMappingSource get_TypeMappingSource();
    [CompilerGeneratedAttribute]
protected virtual IMigrationsAnnotationProvider get_MigrationsAnnotations();
    [CompilerGeneratedAttribute]
protected virtual IUpdateAdapterFactory get_UpdateAdapterFactory();
    [CompilerGeneratedAttribute]
protected virtual CommandBatchPreparerDependencies get_CommandBatchPreparerDependencies();
    [CompilerGeneratedAttribute]
protected virtual IChangeDetector get_ChangeDetector();
    public virtual bool HasDifferences(IModel source, IModel target);
    public virtual IReadOnlyList`1<MigrationOperation> GetDifferences(IModel source, IModel target);
    protected virtual IReadOnlyList`1<MigrationOperation> Sort(IEnumerable`1<MigrationOperation> operations, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IModel source, IModel target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<DiffAnnotations>d__28")]
private IEnumerable`1<MigrationOperation> DiffAnnotations(IModel source, IModel target);
    protected virtual IEnumerable`1<MigrationOperation> Add(IModel target, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Remove(IModel source, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IEnumerable`1<string> source, IEnumerable`1<string> target, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(string source, string target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Add>d__33")]
protected virtual IEnumerable`1<MigrationOperation> Add(string target, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Remove(string source, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IEnumerable`1<TableMapping> source, IEnumerable`1<TableMapping> target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Diff>d__36")]
protected virtual IEnumerable`1<MigrationOperation> Diff(TableMapping source, TableMapping target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Add>d__37")]
protected virtual IEnumerable`1<MigrationOperation> Add(TableMapping target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Remove>d__38")]
protected virtual IEnumerable`1<MigrationOperation> Remove(TableMapping source, DiffContext diffContext);
    private static IEnumerable`1<IProperty> GetSortedProperties(TableMapping target);
    private static IEnumerable`1<IProperty> GetSortedProperties(IEntityType entityType);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IEnumerable`1<IProperty> source, IEnumerable`1<IProperty> target, DiffContext diffContext);
    private bool PropertyStructureEquals(IProperty source, IProperty target);
    private static bool EntityTypePathEquals(IEntityType source, IEntityType target, DiffContext diffContext);
    private static string GetDefiningNavigationName(IEntityType entityType);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Diff>d__46")]
protected virtual IEnumerable`1<MigrationOperation> Diff(IProperty source, IProperty target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Add>d__47")]
protected virtual IEnumerable`1<MigrationOperation> Add(IProperty target, DiffContext diffContext, bool inline);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Remove>d__48")]
protected virtual IEnumerable`1<MigrationOperation> Remove(IProperty source, DiffContext diffContext);
    private void Initialize(ColumnOperation columnOperation, IProperty property, CoreTypeMapping typeMapping, bool isNullable, IEnumerable`1<IAnnotation> migrationsAnnotations, bool inline);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IEnumerable`1<IKey> source, IEnumerable`1<IKey> target, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IKey source, IKey target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Add>d__52")]
protected virtual IEnumerable`1<MigrationOperation> Add(IKey target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Remove>d__53")]
protected virtual IEnumerable`1<MigrationOperation> Remove(IKey source, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IEnumerable`1<IForeignKey> source, IEnumerable`1<IForeignKey> target, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IForeignKey source, IForeignKey target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Add>d__56")]
protected virtual IEnumerable`1<MigrationOperation> Add(IForeignKey target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Remove>d__57")]
protected virtual IEnumerable`1<MigrationOperation> Remove(IForeignKey source, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IEnumerable`1<IIndex> source, IEnumerable`1<IIndex> target, DiffContext diffContext);
    private bool IndexStructureEquals(IIndex source, IIndex target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Diff>d__60")]
protected virtual IEnumerable`1<MigrationOperation> Diff(IIndex source, IIndex target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Add>d__61")]
protected virtual IEnumerable`1<MigrationOperation> Add(IIndex target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Remove>d__62")]
protected virtual IEnumerable`1<MigrationOperation> Remove(IIndex source, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IEnumerable`1<ICheckConstraint> source, IEnumerable`1<ICheckConstraint> target, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(ICheckConstraint source, ICheckConstraint target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Add>d__65")]
protected virtual IEnumerable`1<MigrationOperation> Add(ICheckConstraint target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Remove>d__66")]
protected virtual IEnumerable`1<MigrationOperation> Remove(ICheckConstraint source, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IEnumerable`1<ISequence> source, IEnumerable`1<ISequence> target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Diff>d__68")]
protected virtual IEnumerable`1<MigrationOperation> Diff(ISequence source, ISequence target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Add>d__69")]
protected virtual IEnumerable`1<MigrationOperation> Add(ISequence target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Remove>d__70")]
protected virtual IEnumerable`1<MigrationOperation> Remove(ISequence source, DiffContext diffContext);
    private static SequenceOperation Initialize(SequenceOperation sequenceOperation, ISequence sequence, IEnumerable`1<IAnnotation> migrationsAnnotations);
    protected virtual void TrackData(IModel source, IModel target);
    protected virtual void DiffData(TableMapping source, TableMapping target, DiffContext diffContext);
    private static IUpdateEntry GetEntry(IDictionary`2<string, object> sourceSeed, IEntityType sourceEntityType, IUpdateAdapter updateAdapter);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<GetDataOperations>d__75")]
protected virtual IEnumerable`1<MigrationOperation> GetDataOperations(DiffContext diffContext);
    private object GetValue(ColumnModification columnModification);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<DiffCollection>d__77`1")]
protected virtual IEnumerable`1<MigrationOperation> DiffCollection(IEnumerable`1<T> sources, IEnumerable`1<T> targets, DiffContext diffContext, Func`4<T, T, DiffContext, IEnumerable`1<MigrationOperation>> diff, Func`3<T, DiffContext, IEnumerable`1<MigrationOperation>> add, Func`3<T, DiffContext, IEnumerable`1<MigrationOperation>> remove, Func`4[] predicates);
    protected virtual String[] GetColumns(IEnumerable`1<IProperty> properties);
    protected virtual bool HasDifferences(IEnumerable`1<IAnnotation> source, IEnumerable`1<IAnnotation> target);
    protected virtual IEnumerable`1<string> GetSchemas(IModel model);
    protected virtual object GetDefaultValue(Type type);
    private object GetDefaultValue(IProperty property);
    private ValueConverter GetValueConverter(IProperty property);
    private static ReferentialAction ToReferentialAction(DeleteBehavior deleteBehavior);
    private static Object[0...,0...] ToMultidimensionalArray(IReadOnlyList`1<object> values);
    private static Object[0...,0...] AddToMultidimensionalArray(IReadOnlyList`1<object> values, Object[0...,0...] array);
    [CompilerGeneratedAttribute]
private IEnumerable`1<MigrationOperation> <Diff>b__42_0(IProperty t, DiffContext c);
    [CompilerGeneratedAttribute]
private bool <Diff>b__42_4(IProperty s, IProperty t, DiffContext c);
    [CompilerGeneratedAttribute]
private bool <Diff>b__42_5(IProperty s, IProperty t, DiffContext c);
    [CompilerGeneratedAttribute]
private bool <Diff>b__50_0(IKey s, IKey t, DiffContext c);
    [CompilerGeneratedAttribute]
private bool <Diff>b__54_0(IForeignKey s, IForeignKey t, DiffContext c);
    [CompilerGeneratedAttribute]
private bool <Diff>b__58_0(IIndex s, IIndex t, DiffContext c);
    [CompilerGeneratedAttribute]
private bool <Diff>b__58_1(IIndex s, IIndex t, DiffContext c);
}
public class Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator : object {
    private IMigrationsAssembly _migrationsAssembly;
    private IHistoryRepository _historyRepository;
    private IRelationalDatabaseCreator _databaseCreator;
    private IMigrationsSqlGenerator _migrationsSqlGenerator;
    private IRawSqlCommandBuilder _rawSqlCommandBuilder;
    private IMigrationCommandExecutor _migrationCommandExecutor;
    private IRelationalConnection _connection;
    private ISqlGenerationHelper _sqlGenerationHelper;
    private ICurrentDbContext _currentContext;
    private IDiagnosticsLogger`1<Migrations> _logger;
    private IDiagnosticsLogger`1<Command> _commandLogger;
    private string _activeProvider;
    public Migrator(IMigrationsAssembly migrationsAssembly, IHistoryRepository historyRepository, IDatabaseCreator databaseCreator, IMigrationsSqlGenerator migrationsSqlGenerator, IRawSqlCommandBuilder rawSqlCommandBuilder, IMigrationCommandExecutor migrationCommandExecutor, IRelationalConnection connection, ISqlGenerationHelper sqlGenerationHelper, ICurrentDbContext currentContext, IDiagnosticsLogger`1<Migrations> logger, IDiagnosticsLogger`1<Command> commandLogger, IDatabaseProvider databaseProvider);
    public virtual void Migrate(string targetMigration);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator/<MigrateAsync>d__14")]
public virtual Task MigrateAsync(string targetMigration, CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator/<GetMigrationCommandLists>d__15")]
private IEnumerable`1<Func`1<IReadOnlyList`1<MigrationCommand>>> GetMigrationCommandLists(IReadOnlyList`1<HistoryRow> appliedMigrationEntries, string targetMigration);
    protected virtual void PopulateMigrations(IEnumerable`1<string> appliedMigrationEntries, string targetMigration, IReadOnlyList`1& migrationsToApply, IReadOnlyList`1& migrationsToRevert, Migration& actualTargetMigration);
    public virtual string GenerateScript(string fromMigration, string toMigration, bool idempotent);
    protected virtual IReadOnlyList`1<MigrationCommand> GenerateUpSql(Migration migration);
    protected virtual IReadOnlyList`1<MigrationCommand> GenerateDownSql(Migration migration, Migration previousMigration);
}
public abstract class Microsoft.EntityFrameworkCore.Migrations.Migration : object {
    public static string InitialDatabase;
    private IModel _targetModel;
    private List`1<MigrationOperation> _upOperations;
    private List`1<MigrationOperation> _downOperations;
    [CompilerGeneratedAttribute]
private string <ActiveProvider>k__BackingField;
    public IModel TargetModel { get; }
    public IReadOnlyList`1<MigrationOperation> UpOperations { get; }
    public IReadOnlyList`1<MigrationOperation> DownOperations { get; }
    public string ActiveProvider { get; public set; }
    public virtual IModel get_TargetModel();
    public virtual IReadOnlyList`1<MigrationOperation> get_UpOperations();
    public virtual IReadOnlyList`1<MigrationOperation> get_DownOperations();
    [CompilerGeneratedAttribute]
public virtual string get_ActiveProvider();
    [CompilerGeneratedAttribute]
public virtual void set_ActiveProvider(string value);
    protected virtual void BuildTargetModel(ModelBuilder modelBuilder);
    protected abstract virtual void Up(MigrationBuilder migrationBuilder);
    protected virtual void Down(MigrationBuilder migrationBuilder);
    private List`1<MigrationOperation> BuildOperations(Action`1<MigrationBuilder> buildAction);
    [CompilerGeneratedAttribute]
private IModel <get_TargetModel>g__Create|5_0();
}
[AttributeUsageAttribute("4")]
public class Microsoft.EntityFrameworkCore.Migrations.MigrationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; }
    public MigrationAttribute(string id);
    [CompilerGeneratedAttribute]
public string get_Id();
}
public class Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder : object {
    [CompilerGeneratedAttribute]
private string <ActiveProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MigrationOperation> <Operations>k__BackingField;
    public string ActiveProvider { get; }
    public List`1<MigrationOperation> Operations { get; }
    public MigrationBuilder(string activeProvider);
    [CompilerGeneratedAttribute]
public virtual string get_ActiveProvider();
    [CompilerGeneratedAttribute]
public virtual List`1<MigrationOperation> get_Operations();
    public virtual OperationBuilder`1<AddColumnOperation> AddColumn(string name, string table, string type, Nullable`1<bool> unicode, Nullable`1<int> maxLength, bool rowVersion, string schema, bool nullable, object defaultValue, string defaultValueSql, string computedColumnSql, Nullable`1<bool> fixedLength, string comment);
    public virtual OperationBuilder`1<AddForeignKeyOperation> AddForeignKey(string name, string table, string column, string principalTable, string schema, string principalSchema, string principalColumn, ReferentialAction onUpdate, ReferentialAction onDelete);
    public virtual OperationBuilder`1<AddForeignKeyOperation> AddForeignKey(string name, string table, String[] columns, string principalTable, string schema, string principalSchema, String[] principalColumns, ReferentialAction onUpdate, ReferentialAction onDelete);
    public virtual OperationBuilder`1<AddPrimaryKeyOperation> AddPrimaryKey(string name, string table, string column, string schema);
    public virtual OperationBuilder`1<AddPrimaryKeyOperation> AddPrimaryKey(string name, string table, String[] columns, string schema);
    public virtual OperationBuilder`1<AddUniqueConstraintOperation> AddUniqueConstraint(string name, string table, string column, string schema);
    public virtual OperationBuilder`1<AddUniqueConstraintOperation> AddUniqueConstraint(string name, string table, String[] columns, string schema);
    public virtual AlterOperationBuilder`1<AlterColumnOperation> AlterColumn(string name, string table, string type, Nullable`1<bool> unicode, Nullable`1<int> maxLength, bool rowVersion, string schema, bool nullable, object defaultValue, string defaultValueSql, string computedColumnSql, Type oldClrType, string oldType, Nullable`1<bool> oldUnicode, Nullable`1<int> oldMaxLength, bool oldRowVersion, bool oldNullable, object oldDefaultValue, string oldDefaultValueSql, string oldComputedColumnSql, Nullable`1<bool> fixedLength, Nullable`1<bool> oldFixedLength, string comment, string oldComment);
    public virtual AlterOperationBuilder`1<AlterDatabaseOperation> AlterDatabase();
    public virtual AlterOperationBuilder`1<AlterSequenceOperation> AlterSequence(string name, string schema, int incrementBy, Nullable`1<long> minValue, Nullable`1<long> maxValue, bool cyclic, int oldIncrementBy, Nullable`1<long> oldMinValue, Nullable`1<long> oldMaxValue, bool oldCyclic);
    public virtual AlterOperationBuilder`1<AlterTableOperation> AlterTable(string name, string schema, string comment, string oldComment);
    public virtual OperationBuilder`1<CreateIndexOperation> CreateIndex(string name, string table, string column, string schema, bool unique, string filter);
    public virtual OperationBuilder`1<CreateIndexOperation> CreateIndex(string name, string table, String[] columns, string schema, bool unique, string filter);
    public virtual OperationBuilder`1<EnsureSchemaOperation> EnsureSchema(string name);
    public virtual OperationBuilder`1<CreateSequenceOperation> CreateSequence(string name, string schema, long startValue, int incrementBy, Nullable`1<long> minValue, Nullable`1<long> maxValue, bool cyclic);
    public virtual OperationBuilder`1<CreateSequenceOperation> CreateSequence(string name, string schema, long startValue, int incrementBy, Nullable`1<long> minValue, Nullable`1<long> maxValue, bool cyclic);
    public virtual OperationBuilder`1<CreateCheckConstraintOperation> CreateCheckConstraint(string name, string table, string sql, string schema);
    public virtual CreateTableBuilder`1<TColumns> CreateTable(string name, Func`2<ColumnsBuilder, TColumns> columns, string schema, Action`1<CreateTableBuilder`1<TColumns>> constraints, string comment);
    public virtual OperationBuilder`1<DropColumnOperation> DropColumn(string name, string table, string schema);
    public virtual OperationBuilder`1<DropForeignKeyOperation> DropForeignKey(string name, string table, string schema);
    public virtual OperationBuilder`1<DropIndexOperation> DropIndex(string name, string table, string schema);
    public virtual OperationBuilder`1<DropPrimaryKeyOperation> DropPrimaryKey(string name, string table, string schema);
    public virtual OperationBuilder`1<DropSchemaOperation> DropSchema(string name);
    public virtual OperationBuilder`1<DropSequenceOperation> DropSequence(string name, string schema);
    public virtual OperationBuilder`1<DropCheckConstraintOperation> DropCheckConstraint(string name, string table, string schema);
    public virtual OperationBuilder`1<DropTableOperation> DropTable(string name, string schema);
    public virtual OperationBuilder`1<DropUniqueConstraintOperation> DropUniqueConstraint(string name, string table, string schema);
    public virtual OperationBuilder`1<RenameColumnOperation> RenameColumn(string name, string table, string newName, string schema);
    public virtual OperationBuilder`1<RenameIndexOperation> RenameIndex(string name, string newName, string table, string schema);
    public virtual OperationBuilder`1<RenameSequenceOperation> RenameSequence(string name, string schema, string newName, string newSchema);
    public virtual OperationBuilder`1<RenameTableOperation> RenameTable(string name, string schema, string newName, string newSchema);
    public virtual OperationBuilder`1<RestartSequenceOperation> RestartSequence(string name, long startValue, string schema);
    public virtual OperationBuilder`1<SqlOperation> Sql(string sql, bool suppressTransaction);
    public virtual OperationBuilder`1<InsertDataOperation> InsertData(string table, string column, object value, string schema);
    public virtual OperationBuilder`1<InsertDataOperation> InsertData(string table, String[] columns, Object[] values, string schema);
    public virtual OperationBuilder`1<InsertDataOperation> InsertData(string table, string column, Object[] values, string schema);
    public virtual OperationBuilder`1<InsertDataOperation> InsertData(string table, String[] columns, Object[0...,0...] values, string schema);
    public virtual OperationBuilder`1<DeleteDataOperation> DeleteData(string table, string keyColumn, object keyValue, string schema);
    public virtual OperationBuilder`1<DeleteDataOperation> DeleteData(string table, String[] keyColumns, Object[] keyValues, string schema);
    public virtual OperationBuilder`1<DeleteDataOperation> DeleteData(string table, string keyColumn, Object[] keyValues, string schema);
    public virtual OperationBuilder`1<DeleteDataOperation> DeleteData(string table, String[] keyColumns, Object[0...,0...] keyValues, string schema);
    public virtual OperationBuilder`1<UpdateDataOperation> UpdateData(string table, string keyColumn, object keyValue, string column, object value, string schema);
    public virtual OperationBuilder`1<UpdateDataOperation> UpdateData(string table, string keyColumn, object keyValue, String[] columns, Object[] values, string schema);
    public virtual OperationBuilder`1<UpdateDataOperation> UpdateData(string table, String[] keyColumns, Object[] keyValues, string column, object value, string schema);
    public virtual OperationBuilder`1<UpdateDataOperation> UpdateData(string table, String[] keyColumns, Object[] keyValues, String[] columns, Object[] values, string schema);
    public virtual OperationBuilder`1<UpdateDataOperation> UpdateData(string table, string keyColumn, Object[] keyValues, string column, Object[] values, string schema);
    public virtual OperationBuilder`1<UpdateDataOperation> UpdateData(string table, string keyColumn, Object[] keyValues, String[] columns, Object[0...,0...] values, string schema);
    public virtual OperationBuilder`1<UpdateDataOperation> UpdateData(string table, String[] keyColumns, Object[0...,0...] keyValues, string column, Object[] values, string schema);
    public virtual OperationBuilder`1<UpdateDataOperation> UpdateData(string table, String[] keyColumns, Object[0...,0...] keyValues, String[] columns, Object[0...,0...] values, string schema);
    private static Object[0...,0...] ToMultidimensionalArray(Object[] values, bool firstDimension);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Migrations.MigrationCommand : object {
    private IRelationalCommand _relationalCommand;
    private DbContext _context;
    private IDiagnosticsLogger`1<Command> _logger;
    [CompilerGeneratedAttribute]
private bool <TransactionSuppressed>k__BackingField;
    public bool TransactionSuppressed { get; }
    public string CommandText { get; }
    public MigrationCommand(IRelationalCommand relationalCommand, DbContext context, IDiagnosticsLogger`1<Command> logger, bool transactionSuppressed);
    [CompilerGeneratedAttribute]
public virtual bool get_TransactionSuppressed();
    public virtual string get_CommandText();
    public virtual int ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues);
    public virtual Task`1<int> ExecuteNonQueryAsync(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, CancellationToken cancellationToken);
}
public class Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder : object {
    private List`1<MigrationCommand> _commands;
    private MigrationsSqlGeneratorDependencies _dependencies;
    private IRelationalCommandBuilder _commandBuilder;
    public MigrationCommandListBuilder(MigrationsSqlGeneratorDependencies dependencies);
    public virtual IReadOnlyList`1<MigrationCommand> GetCommandList();
    public virtual MigrationCommandListBuilder EndCommand(bool suppressTransaction);
    public virtual MigrationCommandListBuilder Append(object o);
    public virtual MigrationCommandListBuilder AppendLine();
    public virtual MigrationCommandListBuilder AppendLine(object o);
    public virtual MigrationCommandListBuilder AppendLines(object o);
    public virtual IDisposable Indent();
    public virtual MigrationCommandListBuilder IncrementIndent();
    public virtual MigrationCommandListBuilder DecrementIndent();
}
public class Microsoft.EntityFrameworkCore.Migrations.MigrationsAnnotationProvider : object {
    public MigrationsAnnotationProvider(MigrationsAnnotationProviderDependencies dependencies);
    public virtual IEnumerable`1<IAnnotation> For(IModel model);
    public virtual IEnumerable`1<IAnnotation> For(IEntityType entityType);
    public virtual IEnumerable`1<IAnnotation> For(IForeignKey foreignKey);
    public virtual IEnumerable`1<IAnnotation> For(IIndex index);
    public virtual IEnumerable`1<IAnnotation> For(IKey key);
    public virtual IEnumerable`1<IAnnotation> For(IProperty property);
    public virtual IEnumerable`1<IAnnotation> For(ISequence sequence);
    public virtual IEnumerable`1<IAnnotation> For(ICheckConstraint checkConstraint);
    public virtual IEnumerable`1<IAnnotation> ForRemove(IModel model);
    public virtual IEnumerable`1<IAnnotation> ForRemove(IEntityType entityType);
    public virtual IEnumerable`1<IAnnotation> ForRemove(IForeignKey foreignKey);
    public virtual IEnumerable`1<IAnnotation> ForRemove(IIndex index);
    public virtual IEnumerable`1<IAnnotation> ForRemove(IKey key);
    public virtual IEnumerable`1<IAnnotation> ForRemove(IProperty property);
    public virtual IEnumerable`1<IAnnotation> ForRemove(ISequence sequence);
    public virtual IEnumerable`1<IAnnotation> ForRemove(ICheckConstraint checkConstraint);
}
[EntityFrameworkInternalAttribute]
public class Microsoft.EntityFrameworkCore.Migrations.MigrationsAnnotationProviderDependencies : object {
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Migrations.MigrationsAssemblyExtensions : object {
    [ExtensionAttribute]
public static string GetMigrationId(IMigrationsAssembly assembly, string nameOrId);
}
public class Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator : object {
    private static IReadOnlyDictionary`2<Type, Action`4<MigrationsSqlGenerator, MigrationOperation, IModel, MigrationCommandListBuilder>> _generateActions;
    [CompilerGeneratedAttribute]
private MigrationsSqlGeneratorDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private IComparer`1<string> <VersionComparer>k__BackingField;
    protected MigrationsSqlGeneratorDependencies Dependencies { get; }
    protected IUpdateSqlGenerator SqlGenerator { get; }
    protected IComparer`1<string> VersionComparer { get; }
    public MigrationsSqlGenerator(MigrationsSqlGeneratorDependencies dependencies);
    private static MigrationsSqlGenerator();
    [CompilerGeneratedAttribute]
protected virtual MigrationsSqlGeneratorDependencies get_Dependencies();
    protected virtual IUpdateSqlGenerator get_SqlGenerator();
    [CompilerGeneratedAttribute]
protected virtual IComparer`1<string> get_VersionComparer();
    public virtual IReadOnlyList`1<MigrationCommand> Generate(IReadOnlyList`1<MigrationOperation> operations, IModel model);
    protected virtual void Generate(MigrationOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AddColumnOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(AddForeignKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(AddPrimaryKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(AddUniqueConstraintOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(CreateCheckConstraintOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AlterColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AlterDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameIndexOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AlterSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AlterTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(CreateIndexOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(EnsureSchemaOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(CreateSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropColumnOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropForeignKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropIndexOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropPrimaryKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropSchemaOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropTableOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropUniqueConstraintOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropCheckConstraintOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RestartSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(SqlOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(InsertDataOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DeleteDataOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(UpdateDataOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void SequenceOptions(AlterSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void SequenceOptions(CreateSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void SequenceOptions(string schema, string name, SequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void CreateTableColumns(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ColumnDefinition(AddColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ColumnDefinition(string schema, string table, string name, ColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ComputedColumnDefinition(string schema, string table, string name, ColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual string GetColumnType(string schema, string table, string name, ColumnOperation operation, IModel model);
    protected virtual void DefaultValue(object defaultValue, string defaultValueSql, string columnType, MigrationCommandListBuilder builder);
    protected virtual void CreateTableConstraints(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void CreateTableForeignKeys(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ForeignKeyConstraint(AddForeignKeyOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void CreateTablePrimaryKeyConstraint(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void PrimaryKeyConstraint(AddPrimaryKeyOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void CreateTableUniqueConstraints(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void UniqueConstraint(AddUniqueConstraintOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void CreateTableCheckConstraints(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void CheckConstraint(CreateCheckConstraintOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void IndexTraits(MigrationOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void IndexOptions(CreateIndexOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ForeignKeyAction(ReferentialAction referentialAction, MigrationCommandListBuilder builder);
    protected virtual IEnumerable`1<IEntityType> FindEntityTypes(IModel model, string schema, string tableName);
    protected virtual IProperty FindProperty(IModel model, string schema, string tableName, string columnName);
    protected virtual void EndStatement(MigrationCommandListBuilder builder, bool suppressTransaction);
    protected virtual string ColumnList(String[] columns);
    protected virtual bool IsOldColumnSupported(IModel model);
    protected virtual bool HasLegacyRenameOperations(IModel model);
    protected virtual bool TryGetVersion(IModel model, String& version);
}
public class Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGeneratorDependencies : object {
    [CompilerGeneratedAttribute]
private IRelationalCommandBuilderFactory <CommandBuilderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IUpdateSqlGenerator <UpdateSqlGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlGenerationHelper <SqlGenerationHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <TypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Command> <Logger>k__BackingField;
    public IRelationalCommandBuilderFactory CommandBuilderFactory { get; }
    public IUpdateSqlGenerator UpdateSqlGenerator { get; }
    public ISqlGenerationHelper SqlGenerationHelper { get; }
    public IRelationalTypeMappingSource TypeMappingSource { get; }
    public ICurrentDbContext CurrentContext { get; }
    public IDiagnosticsLogger`1<Command> Logger { get; }
    [EntityFrameworkInternalAttribute]
public MigrationsSqlGeneratorDependencies(IRelationalCommandBuilderFactory commandBuilderFactory, IUpdateSqlGenerator updateSqlGenerator, ISqlGenerationHelper sqlGenerationHelper, IRelationalTypeMappingSource typeMappingSource, ICurrentDbContext currentContext, IDiagnosticsLogger`1<Command> logger);
    [CompilerGeneratedAttribute]
public IRelationalCommandBuilderFactory get_CommandBuilderFactory();
    [CompilerGeneratedAttribute]
public IUpdateSqlGenerator get_UpdateSqlGenerator();
    [CompilerGeneratedAttribute]
public ISqlGenerationHelper get_SqlGenerationHelper();
    [CompilerGeneratedAttribute]
public IRelationalTypeMappingSource get_TypeMappingSource();
    [CompilerGeneratedAttribute]
public ICurrentDbContext get_CurrentContext();
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Command> get_Logger();
    public MigrationsSqlGeneratorDependencies With(IRelationalCommandBuilderFactory commandBuilderFactory);
    public MigrationsSqlGeneratorDependencies With(IUpdateSqlGenerator updateSqlGenerator);
    public MigrationsSqlGeneratorDependencies With(ISqlGenerationHelper sqlGenerationHelper);
    public MigrationsSqlGeneratorDependencies With(IRelationalTypeMappingSource typeMappingSource);
    public MigrationsSqlGeneratorDependencies With(ICurrentDbContext currentContext);
    public MigrationsSqlGeneratorDependencies With(IDiagnosticsLogger`1<Command> logger);
}
[DebuggerDisplayAttribute("ALTER TABLE {Table} ADD {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation : ColumnOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Table { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
}
[DebuggerDisplayAttribute("ALTER TABLE {Table} ADD CONSTRAINT {Name} FOREIGN KEY")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrincipalSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrincipalTable>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PrincipalColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferentialAction <OnUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferentialAction <OnDelete>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Table { get; public set; }
    public String[] Columns { get; public set; }
    public string PrincipalSchema { get; public set; }
    public string PrincipalTable { get; public set; }
    public String[] PrincipalColumns { get; public set; }
    public ReferentialAction OnUpdate { get; public set; }
    public ReferentialAction OnDelete { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [CompilerGeneratedAttribute]
public virtual String[] get_Columns();
    [CompilerGeneratedAttribute]
public virtual void set_Columns(String[] value);
    [CompilerGeneratedAttribute]
public virtual string get_PrincipalSchema();
    [CompilerGeneratedAttribute]
public virtual void set_PrincipalSchema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PrincipalTable();
    [CompilerGeneratedAttribute]
public virtual void set_PrincipalTable(string value);
    [CompilerGeneratedAttribute]
public virtual String[] get_PrincipalColumns();
    [CompilerGeneratedAttribute]
public virtual void set_PrincipalColumns(String[] value);
    [CompilerGeneratedAttribute]
public virtual ReferentialAction get_OnUpdate();
    [CompilerGeneratedAttribute]
public virtual void set_OnUpdate(ReferentialAction value);
    [CompilerGeneratedAttribute]
public virtual ReferentialAction get_OnDelete();
    [CompilerGeneratedAttribute]
public virtual void set_OnDelete(ReferentialAction value);
}
[DebuggerDisplayAttribute("ALTER TABLE {Table} ADD CONSTRAINT {Name} PRIMARY KEY")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AddPrimaryKeyOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Columns>k__BackingField;
    public string Schema { get; public set; }
    public string Table { get; public set; }
    public string Name { get; public set; }
    public String[] Columns { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual String[] get_Columns();
    [CompilerGeneratedAttribute]
public virtual void set_Columns(String[] value);
}
[DebuggerDisplayAttribute("ALTER TABLE {Table} ADD CONSTRAINT {Name} UNIQUE")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AddUniqueConstraintOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Columns>k__BackingField;
    public string Schema { get; public set; }
    public string Table { get; public set; }
    public string Name { get; public set; }
    public String[] Columns { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual String[] get_Columns();
    [CompilerGeneratedAttribute]
public virtual void set_Columns(String[] value);
}
[DebuggerDisplayAttribute("ALTER TABLE {Table} ALTER COLUMN {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AlterColumnOperation : ColumnOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnOperation <OldColumn>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Table { get; public set; }
    public ColumnOperation OldColumn { get; public set; }
    private IMutableAnnotatable Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.OldAnnotations { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [CompilerGeneratedAttribute]
public virtual ColumnOperation get_OldColumn();
    [CompilerGeneratedAttribute]
public virtual void set_OldColumn(ColumnOperation value);
    private sealed virtual override IMutableAnnotatable Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.get_OldAnnotations();
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AlterDatabaseOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private Annotatable <OldDatabase>k__BackingField;
    public Annotatable OldDatabase { get; }
    private IMutableAnnotatable Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.OldAnnotations { get; }
    [CompilerGeneratedAttribute]
public virtual Annotatable get_OldDatabase();
    private sealed virtual override IMutableAnnotatable Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.get_OldAnnotations();
}
[DebuggerDisplayAttribute("ALTER SEQUENCE {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AlterSequenceOperation : SequenceOperation {
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SequenceOperation <OldSequence>k__BackingField;
    public string Schema { get; public set; }
    public string Name { get; public set; }
    public SequenceOperation OldSequence { get; public set; }
    private IMutableAnnotatable Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.OldAnnotations { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual SequenceOperation get_OldSequence();
    [CompilerGeneratedAttribute]
public virtual void set_OldSequence(SequenceOperation value);
    private sealed virtual override IMutableAnnotatable Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.get_OldAnnotations();
}
[DebuggerDisplayAttribute("ALTER TABLE {Table}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AlterTableOperation : TableOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private TableOperation <OldTable>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public TableOperation OldTable { get; public set; }
    private IMutableAnnotatable Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.OldAnnotations { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual TableOperation get_OldTable();
    [CompilerGeneratedAttribute]
public virtual void set_OldTable(TableOperation value);
    private sealed virtual override IMutableAnnotatable Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.get_OldAnnotations();
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.AlterOperationBuilder`1 : OperationBuilder`1<TOperation> {
    public AlterOperationBuilder`1(TOperation operation);
    public virtual AlterOperationBuilder`1<TOperation> Annotation(string name, object value);
    public virtual AlterOperationBuilder`1<TOperation> OldAnnotation(string name, object value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder : object {
    private CreateTableOperation _createTableOperation;
    public ColumnsBuilder(CreateTableOperation createTableOperation);
    public virtual OperationBuilder`1<AddColumnOperation> Column(string type, Nullable`1<bool> unicode, Nullable`1<int> maxLength, bool rowVersion, string name, bool nullable, object defaultValue, string defaultValueSql, string computedColumnSql, Nullable`1<bool> fixedLength, string comment);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder`1 : OperationBuilder`1<CreateTableOperation> {
    private IReadOnlyDictionary`2<PropertyInfo, AddColumnOperation> _columnMap;
    public CreateTableBuilder`1(CreateTableOperation operation, IReadOnlyDictionary`2<PropertyInfo, AddColumnOperation> columnMap);
    public virtual OperationBuilder`1<AddForeignKeyOperation> ForeignKey(string name, Expression`1<Func`2<TColumns, object>> column, string principalTable, string principalColumn, string principalSchema, ReferentialAction onUpdate, ReferentialAction onDelete);
    public virtual OperationBuilder`1<AddForeignKeyOperation> ForeignKey(string name, Expression`1<Func`2<TColumns, object>> columns, string principalTable, String[] principalColumns, string principalSchema, ReferentialAction onUpdate, ReferentialAction onDelete);
    public virtual OperationBuilder`1<AddPrimaryKeyOperation> PrimaryKey(string name, Expression`1<Func`2<TColumns, object>> columns);
    public virtual OperationBuilder`1<AddUniqueConstraintOperation> UniqueConstraint(string name, Expression`1<Func`2<TColumns, object>> columns);
    public virtual OperationBuilder`1<CreateCheckConstraintOperation> CheckConstraint(string name, string sql);
    public virtual CreateTableBuilder`1<TColumns> Annotation(string name, object value);
    private String[] Map(LambdaExpression columns);
    [CompilerGeneratedAttribute]
private string <Map>b__8_0(PropertyInfo c);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder`1 : object {
    [CompilerGeneratedAttribute]
private TOperation <Operation>k__BackingField;
    protected TOperation Operation { get; }
    private TOperation Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<TOperation>.Instance { get; }
    public OperationBuilder`1(TOperation operation);
    [CompilerGeneratedAttribute]
protected virtual TOperation get_Operation();
    private sealed virtual override TOperation Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<TOperation>.get_Instance();
    public virtual OperationBuilder`1<TOperation> Annotation(string name, object value);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsUnicode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsFixedLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRowVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValueSql>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ComputedColumnSql>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    public Type ClrType { get; public set; }
    public string ColumnType { get; public set; }
    public Nullable`1<bool> IsUnicode { get; public set; }
    public Nullable`1<bool> IsFixedLength { get; public set; }
    public Nullable`1<int> MaxLength { get; public set; }
    public bool IsRowVersion { get; public set; }
    public bool IsNullable { get; public set; }
    public object DefaultValue { get; public set; }
    public string DefaultValueSql { get; public set; }
    public string ComputedColumnSql { get; public set; }
    public string Comment { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
public virtual void set_ClrType(Type value);
    [CompilerGeneratedAttribute]
public virtual string get_ColumnType();
    [CompilerGeneratedAttribute]
public virtual void set_ColumnType(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsUnicode();
    [CompilerGeneratedAttribute]
public virtual void set_IsUnicode(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsFixedLength();
    [CompilerGeneratedAttribute]
public virtual void set_IsFixedLength(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_MaxLength();
    [CompilerGeneratedAttribute]
public virtual void set_MaxLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsRowVersion();
    [CompilerGeneratedAttribute]
public virtual void set_IsRowVersion(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public virtual object get_DefaultValue();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultValue(object value);
    [CompilerGeneratedAttribute]
public virtual string get_DefaultValueSql();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultValueSql(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ComputedColumnSql();
    [CompilerGeneratedAttribute]
public virtual void set_ComputedColumnSql(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Comment();
    [CompilerGeneratedAttribute]
public virtual void set_Comment(string value);
}
[DebuggerDisplayAttribute("ALTER TABLE {Table} ADD CONSTRAINT {Name} CHECK")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.CreateCheckConstraintOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    public string Name { get; public set; }
    public string Table { get; public set; }
    public string Schema { get; public set; }
    public string Sql { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Sql();
    [CompilerGeneratedAttribute]
public virtual void set_Sql(string value);
}
[DebuggerDisplayAttribute("CREATE INDEX {Name} ON {Table}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private bool <IsUnique>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    public bool IsUnique { get; public set; }
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Table { get; public set; }
    public String[] Columns { get; public set; }
    public string Filter { get; public set; }
    [CompilerGeneratedAttribute]
public virtual bool get_IsUnique();
    [CompilerGeneratedAttribute]
public virtual void set_IsUnique(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [CompilerGeneratedAttribute]
public virtual String[] get_Columns();
    [CompilerGeneratedAttribute]
public virtual void set_Columns(String[] value);
    [CompilerGeneratedAttribute]
public virtual string get_Filter();
    [CompilerGeneratedAttribute]
public virtual void set_Filter(string value);
}
[DebuggerDisplayAttribute("CREATE SEQUENCE {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.CreateSequenceOperation : SequenceOperation {
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StartValue>k__BackingField;
    public string Schema { get; public set; }
    public string Name { get; public set; }
    public Type ClrType { get; public set; }
    public long StartValue { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
public virtual void set_ClrType(Type value);
    [CompilerGeneratedAttribute]
public virtual long get_StartValue();
    [CompilerGeneratedAttribute]
public virtual void set_StartValue(long value);
}
[DebuggerDisplayAttribute("CREATE TABLE {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation : TableOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private AddPrimaryKeyOperation <PrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AddColumnOperation> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AddForeignKeyOperation> <ForeignKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AddUniqueConstraintOperation> <UniqueConstraints>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CreateCheckConstraintOperation> <CheckConstraints>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public AddPrimaryKeyOperation PrimaryKey { get; public set; }
    public List`1<AddColumnOperation> Columns { get; }
    public List`1<AddForeignKeyOperation> ForeignKeys { get; }
    public List`1<AddUniqueConstraintOperation> UniqueConstraints { get; }
    public List`1<CreateCheckConstraintOperation> CheckConstraints { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual AddPrimaryKeyOperation get_PrimaryKey();
    [CompilerGeneratedAttribute]
public virtual void set_PrimaryKey(AddPrimaryKeyOperation value);
    [CompilerGeneratedAttribute]
public virtual List`1<AddColumnOperation> get_Columns();
    [CompilerGeneratedAttribute]
public virtual List`1<AddForeignKeyOperation> get_ForeignKeys();
    [CompilerGeneratedAttribute]
public virtual List`1<AddUniqueConstraintOperation> get_UniqueConstraints();
    [CompilerGeneratedAttribute]
public virtual List`1<CreateCheckConstraintOperation> get_CheckConstraints();
}
[DebuggerDisplayAttribute("DELETE FROM {Table}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DeleteDataOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <KeyColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[0...,0...] <KeyValues>k__BackingField;
    public string Table { get; public set; }
    public string Schema { get; public set; }
    public String[] KeyColumns { get; public set; }
    public Object[0...,0...] KeyValues { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual String[] get_KeyColumns();
    [CompilerGeneratedAttribute]
public virtual void set_KeyColumns(String[] value);
    [CompilerGeneratedAttribute]
public virtual Object[0...,0...] get_KeyValues();
    [CompilerGeneratedAttribute]
public virtual void set_KeyValues(Object[0...,0...] value);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Operations.DeleteDataOperation/<GenerateModificationCommands>d__16")]
public virtual IEnumerable`1<ModificationCommand> GenerateModificationCommands(IModel model);
}
[DebuggerDisplayAttribute("ALTER TABLE {Table} DROP CONSTRAINT {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropCheckConstraintOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Table { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
}
[DebuggerDisplayAttribute("ALTER TABLE {Table} DROP COLUMN {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropColumnOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Table { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
}
[DebuggerDisplayAttribute("ALTER TABLE {Table} DROP CONSTRAINT {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropForeignKeyOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Table { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
}
[DebuggerDisplayAttribute("DROP INDEX {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropIndexOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Table { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
}
[DebuggerDisplayAttribute("ALTER TABLE {Table} DROP CONSTRAINT {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropPrimaryKeyOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Table { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
}
[DebuggerDisplayAttribute("DROP SCHEMA {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropSchemaOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
}
[DebuggerDisplayAttribute("DROP SEQUENCE {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropSequenceOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
}
[DebuggerDisplayAttribute("DROP TABLE {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropTableOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
}
[DebuggerDisplayAttribute("ALTER TABLE {Table} DROP CONSTRAINT {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropUniqueConstraintOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Table { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
}
[DebuggerDisplayAttribute("CREATE SCHEMA {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.EnsureSchemaOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
}
public interface Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation {
    public IMutableAnnotatable OldAnnotations { get; }
    public abstract virtual IMutableAnnotatable get_OldAnnotations();
}
[DebuggerDisplayAttribute("INSERT INTO {Table}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[0...,0...] <Values>k__BackingField;
    public string Table { get; public set; }
    public string Schema { get; public set; }
    public String[] Columns { get; public set; }
    public Object[0...,0...] Values { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual String[] get_Columns();
    [CompilerGeneratedAttribute]
public virtual void set_Columns(String[] value);
    [CompilerGeneratedAttribute]
public virtual Object[0...,0...] get_Values();
    [CompilerGeneratedAttribute]
public virtual void set_Values(Object[0...,0...] value);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation/<GenerateModificationCommands>d__16")]
public virtual IEnumerable`1<ModificationCommand> GenerateModificationCommands(IModel model);
}
public abstract class Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation : Annotatable {
    [CompilerGeneratedAttribute]
private bool <IsDestructiveChange>k__BackingField;
    public bool IsDestructiveChange { get; public set; }
    [CompilerGeneratedAttribute]
public virtual bool get_IsDestructiveChange();
    [CompilerGeneratedAttribute]
public virtual void set_IsDestructiveChange(bool value);
}
[DebuggerDisplayAttribute("ALTER TABLE {Table} RENAME COLUMN {Name} TO {NewName}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.RenameColumnOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Table { get; public set; }
    public string NewName { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
    [CompilerGeneratedAttribute]
public virtual void set_NewName(string value);
}
[DebuggerDisplayAttribute("ALTER INDEX {Name} RENAME TO {NewName}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.RenameIndexOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Name { get; public set; }
    public string NewName { get; public set; }
    public string Schema { get; public set; }
    public string Table { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
    [CompilerGeneratedAttribute]
public virtual void set_NewName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
}
[DebuggerDisplayAttribute("ALTER SEQUENCE {Name} RENAME TO {NewName}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.RenameSequenceOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewSchema>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string NewName { get; public set; }
    public string NewSchema { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
    [CompilerGeneratedAttribute]
public virtual void set_NewName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NewSchema();
    [CompilerGeneratedAttribute]
public virtual void set_NewSchema(string value);
}
[DebuggerDisplayAttribute("ALTER TABLE {Name} RENAME TO {NewName}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.RenameTableOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    public string Schema { get; public set; }
    public string Name { get; public set; }
    public string NewSchema { get; public set; }
    public string NewName { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NewSchema();
    [CompilerGeneratedAttribute]
public virtual void set_NewSchema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
    [CompilerGeneratedAttribute]
public virtual void set_NewName(string value);
}
[DebuggerDisplayAttribute("ALTER SEQUENCE {Name} RESTART")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.RestartSequenceOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StartValue>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public long StartValue { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual long get_StartValue();
    [CompilerGeneratedAttribute]
public virtual void set_StartValue(long value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.SequenceOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private int <IncrementBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCyclic>k__BackingField;
    public int IncrementBy { get; public set; }
    public Nullable`1<long> MaxValue { get; public set; }
    public Nullable`1<long> MinValue { get; public set; }
    public bool IsCyclic { get; public set; }
    [CompilerGeneratedAttribute]
public virtual int get_IncrementBy();
    [CompilerGeneratedAttribute]
public virtual void set_IncrementBy(int value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_MaxValue();
    [CompilerGeneratedAttribute]
public virtual void set_MaxValue(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_MinValue();
    [CompilerGeneratedAttribute]
public virtual void set_MinValue(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsCyclic();
    [CompilerGeneratedAttribute]
public virtual void set_IsCyclic(bool value);
}
[DebuggerDisplayAttribute("{Sql}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.SqlOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressTransaction>k__BackingField;
    public string Sql { get; public set; }
    public bool SuppressTransaction { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Sql();
    [CompilerGeneratedAttribute]
public virtual void set_Sql(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_SuppressTransaction();
    [CompilerGeneratedAttribute]
public virtual void set_SuppressTransaction(bool value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.TableOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    public string Comment { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Comment();
    [CompilerGeneratedAttribute]
public virtual void set_Comment(string value);
}
[DebuggerDisplayAttribute("UPDATE {Table}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <KeyColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[0...,0...] <KeyValues>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[0...,0...] <Values>k__BackingField;
    public string Table { get; public set; }
    public string Schema { get; public set; }
    public String[] KeyColumns { get; public set; }
    public Object[0...,0...] KeyValues { get; public set; }
    public String[] Columns { get; public set; }
    public Object[0...,0...] Values { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual String[] get_KeyColumns();
    [CompilerGeneratedAttribute]
public virtual void set_KeyColumns(String[] value);
    [CompilerGeneratedAttribute]
public virtual Object[0...,0...] get_KeyValues();
    [CompilerGeneratedAttribute]
public virtual void set_KeyValues(Object[0...,0...] value);
    [CompilerGeneratedAttribute]
public virtual String[] get_Columns();
    [CompilerGeneratedAttribute]
public virtual void set_Columns(String[] value);
    [CompilerGeneratedAttribute]
public virtual Object[0...,0...] get_Values();
    [CompilerGeneratedAttribute]
public virtual void set_Values(Object[0...,0...] value);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation/<GenerateModificationCommands>d__24")]
public virtual IEnumerable`1<ModificationCommand> GenerateModificationCommands(IModel model);
}
public enum Microsoft.EntityFrameworkCore.Migrations.ReferentialAction : Enum {
    public int value__;
    public static ReferentialAction NoAction;
    public static ReferentialAction Restrict;
    public static ReferentialAction Cascade;
    public static ReferentialAction SetNull;
    public static ReferentialAction SetDefault;
}
public class Microsoft.EntityFrameworkCore.Query.CollectionInitializingExpression : Expression {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CollectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <ParentIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <OuterIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private INavigation <Navigation>k__BackingField;
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public int CollectionId { get; }
    public Expression Parent { get; }
    public Expression ParentIdentifier { get; }
    public Expression OuterIdentifier { get; }
    public INavigation Navigation { get; }
    public CollectionInitializingExpression(int collectionId, Expression parent, Expression parentIdentifier, Expression outerIdentifier, INavigation navigation, Type type);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    [CompilerGeneratedAttribute]
public virtual Type get_Type();
    public sealed virtual ExpressionType get_NodeType();
    [CompilerGeneratedAttribute]
public virtual int get_CollectionId();
    [CompilerGeneratedAttribute]
public virtual Expression get_Parent();
    [CompilerGeneratedAttribute]
public virtual Expression get_ParentIdentifier();
    [CompilerGeneratedAttribute]
public virtual Expression get_OuterIdentifier();
    [CompilerGeneratedAttribute]
public virtual INavigation get_Navigation();
}
public class Microsoft.EntityFrameworkCore.Query.CollectionPopulatingExpression : Expression {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalCollectionShaperExpression <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInclude>k__BackingField;
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public RelationalCollectionShaperExpression Parent { get; }
    public bool IsInclude { get; }
    public CollectionPopulatingExpression(RelationalCollectionShaperExpression parent, Type type, bool include);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    [CompilerGeneratedAttribute]
public virtual Type get_Type();
    public sealed virtual ExpressionType get_NodeType();
    [CompilerGeneratedAttribute]
public virtual RelationalCollectionShaperExpression get_Parent();
    [CompilerGeneratedAttribute]
public virtual bool get_IsInclude();
}
public class Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression : Expression {
    private IDictionary`2<IProperty, ColumnExpression> _propertyExpressionsCache;
    private IDictionary`2<INavigation, EntityShaperExpression> _navigationExpressionsCache;
    private TableExpressionBase _innerTable;
    private bool _nullable;
    [CompilerGeneratedAttribute]
private IEntityType <EntityType>k__BackingField;
    public IEntityType EntityType { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public EntityProjectionExpression(IEntityType entityType, TableExpressionBase innerTable, bool nullable);
    public EntityProjectionExpression(IEntityType entityType, IDictionary`2<IProperty, ColumnExpression> propertyExpressions);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual EntityProjectionExpression MakeNullable();
    public virtual EntityProjectionExpression UpdateEntityType(IEntityType derivedType);
    [CompilerGeneratedAttribute]
public virtual IEntityType get_EntityType();
    public sealed virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    public virtual ColumnExpression BindProperty(IProperty property);
    public virtual void AddNavigationBinding(INavigation navigation, EntityShaperExpression entityShaper);
    public virtual EntityShaperExpression BindNavigation(INavigation navigation);
}
public static class Microsoft.EntityFrameworkCore.Query.ExpressionExtensions : object {
    public static RelationalTypeMapping InferTypeMapping(SqlExpression[] expressions);
}
public interface Microsoft.EntityFrameworkCore.Query.IMemberTranslator {
    public abstract virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType);
}
public interface Microsoft.EntityFrameworkCore.Query.IMemberTranslatorPlugin {
    public IEnumerable`1<IMemberTranslator> Translators { get; }
    public abstract virtual IEnumerable`1<IMemberTranslator> get_Translators();
}
public interface Microsoft.EntityFrameworkCore.Query.IMemberTranslatorProvider {
    public abstract virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType);
}
public interface Microsoft.EntityFrameworkCore.Query.IMethodCallTranslator {
    public abstract virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
}
public interface Microsoft.EntityFrameworkCore.Query.IMethodCallTranslatorPlugin {
    public IEnumerable`1<IMethodCallTranslator> Translators { get; }
    public abstract virtual IEnumerable`1<IMethodCallTranslator> get_Translators();
}
public interface Microsoft.EntityFrameworkCore.Query.IMethodCallTranslatorProvider {
    public abstract virtual SqlExpression Translate(IModel model, SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader : DbDataReader {
    private DbDataReader _underlyingReader;
    private List`1<BufferedDataRecord> _bufferedDataRecords;
    private BufferedDataRecord _currentResultSet;
    private int _currentResultSetNumber;
    private int _recordsAffected;
    private bool _disposed;
    private bool _isClosed;
    public int RecordsAffected { get; }
    public object Item { get; }
    public object Item { get; }
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public BufferedDataReader(DbDataReader reader);
    public virtual int get_RecordsAffected();
    public virtual object get_Item(string name);
    public virtual object get_Item(int ordinal);
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    [ConditionalAttribute("DEBUG")]
private void AssertReaderIsOpen();
    [ConditionalAttribute("DEBUG")]
private void AssertReaderIsOpenWithData();
    [ConditionalAttribute("DEBUG")]
private void AssertFieldIsReady(int ordinal);
    public virtual BufferedDataReader Initialize(IReadOnlyList`1<ReaderColumn> columns);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader/<InitializeAsync>d__26")]
public virtual Task`1<BufferedDataReader> InitializeAsync(IReadOnlyList`1<ReaderColumn> columns, CancellationToken cancellationToken);
    public static bool IsSupportedValueType(Type type);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual T GetFieldValue(int ordinal);
    public virtual Task`1<T> GetFieldValueAsync(int ordinal, CancellationToken cancellationToken);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual string GetDataTypeName(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual bool IsDBNull(int ordinal);
    public virtual Task`1<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken);
    public virtual IEnumerator GetEnumerator();
    public virtual DataTable GetSchemaTable();
    public virtual bool NextResult();
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    public virtual bool Read();
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.CaseWhenFlatteningExpressionVisitor : ExpressionVisitor {
    private ISqlExpressionFactory _sqlExpressionFactory;
    public CaseWhenFlatteningExpressionVisitor(ISqlExpressionFactory sqlExpressionFactory);
    protected virtual Expression VisitExtension(Expression node);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.CollectionJoinApplyingExpressionVisitor : ExpressionVisitor {
    private int _collectionId;
    protected virtual Expression VisitExtension(Expression extensionExpression);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.CollectionMaterializationContext : object {
    [CompilerGeneratedAttribute]
private ResultContext <ResultContext>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Collection>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <ParentIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <OuterIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <SelfIdentifier>k__BackingField;
    public ResultContext ResultContext { get; }
    public object Parent { get; }
    public object Collection { get; }
    public Object[] ParentIdentifier { get; }
    public Object[] OuterIdentifier { get; }
    public Object[] SelfIdentifier { get; private set; }
    public CollectionMaterializationContext(object parent, object collection, Object[] parentIdentifier, Object[] outerIdentifier);
    [CompilerGeneratedAttribute]
public virtual ResultContext get_ResultContext();
    [CompilerGeneratedAttribute]
public virtual object get_Parent();
    [CompilerGeneratedAttribute]
public virtual object get_Collection();
    [CompilerGeneratedAttribute]
public virtual Object[] get_ParentIdentifier();
    [CompilerGeneratedAttribute]
public virtual Object[] get_OuterIdentifier();
    [CompilerGeneratedAttribute]
public virtual Object[] get_SelfIdentifier();
    [CompilerGeneratedAttribute]
private void set_SelfIdentifier(Object[] value);
    public virtual void UpdateSelfIdentifier(Object[] selfIdentifier);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.ComparisonTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    public ComparisonTranslator(ISqlExpressionFactory sqlExpressionFactory);
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.ContainsTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    public ContainsTranslator(ISqlExpressionFactory sqlExpressionFactory);
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.EnumHasFlagTranslator : object {
    private static MethodInfo _methodInfo;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public EnumHasFlagTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static EnumHasFlagTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.EqualsTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    public EqualsTranslator(ISqlExpressionFactory sqlExpressionFactory);
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
    private SqlExpression RemoveObjectConvert(SqlExpression expression);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.GetValueOrDefaultTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    private static MethodInfo _generateDefaultValueConstantMethod;
    public GetValueOrDefaultTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static GetValueOrDefaultTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
    private SqlConstantExpression GetDefaultConstant(Type type);
    private static SqlConstantExpression GenerateDefaultValueConstant();
}
public class Microsoft.EntityFrameworkCore.Query.Internal.LikeTranslator : object {
    private static MethodInfo _methodInfo;
    private static MethodInfo _methodInfoWithEscape;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public LikeTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static LikeTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.NullableMemberTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    public NullableMemberTranslator(ISqlExpressionFactory sqlExpressionFactory);
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.NullSemanticsRewritingExpressionVisitor : SqlExpressionVisitor {
    private ISqlExpressionFactory _sqlExpressionFactory;
    private bool _isNullable;
    private bool _canOptimize;
    private List`1<ColumnExpression> _nonNullableColumns;
    public NullSemanticsRewritingExpressionVisitor(ISqlExpressionFactory sqlExpressionFactory);
    protected virtual Expression VisitCase(CaseExpression caseExpression);
    protected virtual Expression VisitColumn(ColumnExpression columnExpression);
    protected virtual Expression VisitCrossApply(CrossApplyExpression crossApplyExpression);
    protected virtual Expression VisitCrossJoin(CrossJoinExpression crossJoinExpression);
    protected virtual Expression VisitExcept(ExceptExpression exceptExpression);
    protected virtual Expression VisitExists(ExistsExpression existsExpression);
    protected virtual Expression VisitFromSql(FromSqlExpression fromSqlExpression);
    protected virtual Expression VisitIn(InExpression inExpression);
    protected virtual Expression VisitIntersect(IntersectExpression intersectExpression);
    protected virtual Expression VisitLike(LikeExpression likeExpression);
    protected virtual Expression VisitInnerJoin(InnerJoinExpression innerJoinExpression);
    protected virtual Expression VisitLeftJoin(LeftJoinExpression leftJoinExpression);
    private SqlExpression VisitJoinPredicate(SqlBinaryExpression predicate);
    protected virtual Expression VisitOrdering(OrderingExpression orderingExpression);
    protected virtual Expression VisitOuterApply(OuterApplyExpression outerApplyExpression);
    protected virtual Expression VisitProjection(ProjectionExpression projectionExpression);
    protected virtual Expression VisitRowNumber(RowNumberExpression rowNumberExpression);
    protected virtual Expression VisitSelect(SelectExpression selectExpression);
    protected virtual Expression VisitSqlBinary(SqlBinaryExpression sqlBinaryExpression);
    protected virtual Expression VisitSqlConstant(SqlConstantExpression sqlConstantExpression);
    protected virtual Expression VisitSqlFragment(SqlFragmentExpression sqlFragmentExpression);
    protected virtual Expression VisitSqlFunction(SqlFunctionExpression sqlFunctionExpression);
    protected virtual Expression VisitSqlParameter(SqlParameterExpression sqlParameterExpression);
    protected virtual Expression VisitSqlUnary(SqlUnaryExpression sqlCastExpression);
    protected virtual Expression VisitSubSelect(ScalarSubqueryExpression scalarSubqueryExpression);
    protected virtual Expression VisitTable(TableExpression tableExpression);
    protected virtual Expression VisitUnion(UnionExpression unionExpression);
    private List`1<ColumnExpression> FindNonNullableColumns(SqlExpression sqlExpression);
    private SqlBinaryExpression ExpandNullableEqualNullable(SqlExpression left, SqlExpression right, SqlExpression leftIsNull, SqlExpression rightIsNull);
    private SqlBinaryExpression ExpandNegatedNullableEqualNullable(SqlExpression left, SqlExpression right, SqlExpression leftIsNull, SqlExpression rightIsNull);
    private SqlBinaryExpression ExpandNullableEqualNonNullable(SqlExpression left, SqlExpression right, SqlExpression leftIsNull);
    private SqlBinaryExpression ExpandNegatedNullableEqualNonNullable(SqlExpression left, SqlExpression right, SqlExpression leftIsNull);
    private SqlBinaryExpression ExpandNullableNotEqualNullable(SqlExpression left, SqlExpression right, SqlExpression leftIsNull, SqlExpression rightIsNull);
    private SqlBinaryExpression ExpandNegatedNullableNotEqualNullable(SqlExpression left, SqlExpression right, SqlExpression leftIsNull, SqlExpression rightIsNull);
    private SqlBinaryExpression ExpandNullableNotEqualNonNullable(SqlExpression left, SqlExpression right, SqlExpression leftIsNull);
    private SqlBinaryExpression ExpandNegatedNullableNotEqualNonNullable(SqlExpression left, SqlExpression right, SqlExpression leftIsNull);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.ParameterValueBasedSelectExpressionOptimizer : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    private IParameterNameGeneratorFactory _parameterNameGeneratorFactory;
    private bool _useRelationalNulls;
    public ParameterValueBasedSelectExpressionOptimizer(ISqlExpressionFactory sqlExpressionFactory, IParameterNameGeneratorFactory parameterNameGeneratorFactory, bool useRelationalNulls);
    public virtual ValueTuple`2<SelectExpression, bool> Optimize(SelectExpression selectExpression, IReadOnlyDictionary`2<string, object> parametersValues);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1 : object {
    private RelationalQueryContext _relationalQueryContext;
    private RelationalCommandCache _relationalCommandCache;
    private IReadOnlyList`1<string> _columnNames;
    private IReadOnlyList`1<ReaderColumn> _readerColumns;
    private Func`6<QueryContext, DbDataReader, ResultContext, Int32[], ResultCoordinator, T> _shaper;
    private Type _contextType;
    private IDiagnosticsLogger`1<Query> _logger;
    public QueryingEnumerable`1(RelationalQueryContext relationalQueryContext, RelationalCommandCache relationalCommandCache, IReadOnlyList`1<string> columnNames, IReadOnlyList`1<ReaderColumn> readerColumns, Func`6<QueryContext, DbDataReader, ResultContext, Int32[], ResultCoordinator, T> shaper, Type contextType, IDiagnosticsLogger`1<Query> logger);
    public virtual IAsyncEnumerator`1<T> GetAsyncEnumerator(CancellationToken cancellationToken);
    public virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public static Int32[] BuildIndexMap(IReadOnlyList`1<string> columnNames, DbDataReader dataReader);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.QuerySqlGeneratorFactory : object {
    private QuerySqlGeneratorDependencies _dependencies;
    public QuerySqlGeneratorFactory(QuerySqlGeneratorDependencies dependencies);
    public virtual QuerySqlGenerator Create();
}
public class Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache : object {
    private static ConcurrentDictionary`2<object, object> _syncObjects;
    private IMemoryCache _memoryCache;
    private IQuerySqlGeneratorFactory _querySqlGeneratorFactory;
    private SelectExpression _selectExpression;
    private ParameterValueBasedSelectExpressionOptimizer _parameterValueBasedSelectExpressionOptimizer;
    public RelationalCommandCache(IMemoryCache memoryCache, ISqlExpressionFactory sqlExpressionFactory, IParameterNameGeneratorFactory parameterNameGeneratorFactory, IQuerySqlGeneratorFactory querySqlGeneratorFactory, bool useRelationalNulls, SelectExpression selectExpression);
    private static RelationalCommandCache();
    public virtual IRelationalCommand GetRelationalCommand(IReadOnlyDictionary`2<string, object> parameters);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor : ExpressionVisitor {
    private RelationalQueryableMethodTranslatingExpressionVisitor _queryableMethodTranslatingExpressionVisitor;
    private RelationalSqlTranslatingExpressionVisitor _sqlTranslator;
    private SelectExpression _selectExpression;
    private bool _clientEval;
    private IDictionary`2<ProjectionMember, Expression> _projectionMapping;
    private Stack`1<ProjectionMember> _projectionMembers;
    private static MethodInfo _getParameterValueMethodInfo;
    public RelationalProjectionBindingExpressionVisitor(RelationalQueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor, RelationalSqlTranslatingExpressionVisitor sqlTranslatingExpressionVisitor);
    private static RelationalProjectionBindingExpressionVisitor();
    public virtual Expression Translate(SelectExpression selectExpression, Expression expression);
    public virtual Expression Visit(Expression expression);
    private static T GetParameterValue(QueryContext queryContext, string parameterName);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected virtual Expression VisitNew(NewExpression newExpression);
    protected virtual Expression VisitMemberInit(MemberInitExpression memberInitExpression);
    protected virtual MemberAssignment VisitMemberAssignment(MemberAssignment memberAssignment);
    private void VerifySelectExpression(ProjectionBindingExpression projectionBindingExpression);
    [CompilerGeneratedAttribute]
internal static bool <Visit>g__IsAggregateResultWithCustomShaper|8_0(MethodInfo method);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryableMethodTranslatingExpressionVisitorFactory : object {
    private QueryableMethodTranslatingExpressionVisitorDependencies _dependencies;
    private RelationalQueryableMethodTranslatingExpressionVisitorDependencies _relationalDependencies;
    public RelationalQueryableMethodTranslatingExpressionVisitorFactory(QueryableMethodTranslatingExpressionVisitorDependencies dependencies, RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies);
    public virtual QueryableMethodTranslatingExpressionVisitor Create(IModel model);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryContextFactory : object {
    private QueryContextDependencies _dependencies;
    private RelationalQueryContextDependencies _relationalDependencies;
    public RelationalQueryContextFactory(QueryContextDependencies dependencies, RelationalQueryContextDependencies relationalDependencies);
    public virtual QueryContext Create();
}
public class Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryTranslationPostprocessorFactory : object {
    private QueryTranslationPostprocessorDependencies _dependencies;
    private RelationalQueryTranslationPostprocessorDependencies _relationalDependencies;
    public RelationalQueryTranslationPostprocessorFactory(QueryTranslationPostprocessorDependencies dependencies, RelationalQueryTranslationPostprocessorDependencies relationalDependencies);
    public virtual QueryTranslationPostprocessor Create(QueryCompilationContext queryCompilationContext);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryTranslationPreprocessorFactory : object {
    private QueryTranslationPreprocessorDependencies _dependencies;
    private RelationalQueryTranslationPreprocessorDependencies _relationalDependencies;
    public RelationalQueryTranslationPreprocessorFactory(QueryTranslationPreprocessorDependencies dependencies, RelationalQueryTranslationPreprocessorDependencies relationalDependencies);
    public virtual QueryTranslationPreprocessor Create(QueryCompilationContext queryCompilationContext);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.RelationalShapedQueryCompilingExpressionVisitorFactory : object {
    private ShapedQueryCompilingExpressionVisitorDependencies _dependencies;
    private RelationalShapedQueryCompilingExpressionVisitorDependencies _relationalDependencies;
    public RelationalShapedQueryCompilingExpressionVisitorFactory(ShapedQueryCompilingExpressionVisitorDependencies dependencies, RelationalShapedQueryCompilingExpressionVisitorDependencies relationalDependencies);
    public virtual ShapedQueryCompilingExpressionVisitor Create(QueryCompilationContext queryCompilationContext);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.ResultContext : object {
    [CompilerGeneratedAttribute]
private Object[] <Values>k__BackingField;
    public Object[] Values { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Object[] get_Values();
    [CompilerGeneratedAttribute]
public virtual void set_Values(Object[] value);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.ResultCoordinator : object {
    [CompilerGeneratedAttribute]
private ResultContext <ResultContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResultReady>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasNext>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<CollectionMaterializationContext> <Collections>k__BackingField;
    public ResultContext ResultContext { get; }
    public bool ResultReady { get; public set; }
    public Nullable`1<bool> HasNext { get; public set; }
    public IList`1<CollectionMaterializationContext> Collections { get; }
    [CompilerGeneratedAttribute]
public virtual ResultContext get_ResultContext();
    [CompilerGeneratedAttribute]
public virtual bool get_ResultReady();
    [CompilerGeneratedAttribute]
public virtual void set_ResultReady(bool value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_HasNext();
    [CompilerGeneratedAttribute]
public virtual void set_HasNext(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<CollectionMaterializationContext> get_Collections();
    public virtual void SetCollectionMaterializationContext(int collectionId, CollectionMaterializationContext collectionMaterializationContext);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.SelectExpressionProjectionApplyingExpressionVisitor : ExpressionVisitor {
    protected virtual Expression VisitExtension(Expression node);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.SqlExpressionOptimizingExpressionVisitor : ExpressionVisitor {
    private bool _useRelationalNulls;
    [CompilerGeneratedAttribute]
private ISqlExpressionFactory <SqlExpressionFactory>k__BackingField;
    protected ISqlExpressionFactory SqlExpressionFactory { get; }
    public SqlExpressionOptimizingExpressionVisitor(ISqlExpressionFactory sqlExpressionFactory, bool useRelationalNulls);
    private static bool TryNegate(ExpressionType expressionType, ExpressionType& result);
    [CompilerGeneratedAttribute]
protected virtual ISqlExpressionFactory get_SqlExpressionFactory();
    protected virtual Expression VisitExtension(Expression extensionExpression);
    private Expression VisitSelectExpression(SelectExpression selectExpression);
    protected virtual Expression VisitSqlUnaryExpression(SqlUnaryExpression sqlUnaryExpression);
    private SqlExpression SimplifyUnaryExpression(ExpressionType operatorType, SqlExpression operand, Type type, RelationalTypeMapping typeMapping);
    private SqlExpression SimplifyNullNotNullExpression(ExpressionType operatorType, SqlExpression operand, Type type, RelationalTypeMapping typeMapping);
    protected virtual Expression VisitSqlBinaryExpression(SqlBinaryExpression sqlBinaryExpression);
    private SqlExpression SimplifyBinaryExpression(ExpressionType operatorType, SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    protected virtual SqlExpression SimplifyNullComparisonExpression(ExpressionType operatorType, SqlExpression left, SqlExpression right, bool leftNull, bool rightNull, RelationalTypeMapping typeMapping);
    private SqlExpression SimplifyBoolConstantComparisonExpression(ExpressionType operatorType, SqlExpression left, SqlExpression right, SqlConstantExpression leftBoolConstant, SqlConstantExpression rightBoolConstant, RelationalTypeMapping typeMapping);
    private SqlExpression SimplifyLogicalSqlBinaryExpression(ExpressionType operatorType, SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
internal static bool <SimplifyBoolConstantComparisonExpression>g__CanOptimize|14_0(SqlExpression operand);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.StringMethodTranslator : object {
    private static MethodInfo _isNullOrEmptyMethodInfo;
    private static MethodInfo _concatMethodInfo;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public StringMethodTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static StringMethodTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.TableAliasUniquifyingExpressionVisitor : ExpressionVisitor {
    private ISet`1<string> _usedAliases;
    private ISet`1<TableExpressionBase> _visitedTableExpressionBases;
    protected virtual Expression VisitExtension(Expression extensionExpression);
    private string GenerateUniqueAlias(string currentAlias);
}
public interface Microsoft.EntityFrameworkCore.Query.IQuerySqlGeneratorFactory {
    public abstract virtual QuerySqlGenerator Create();
}
public interface Microsoft.EntityFrameworkCore.Query.IRelationalSqlTranslatingExpressionVisitorFactory {
    public abstract virtual RelationalSqlTranslatingExpressionVisitor Create(IModel model, QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor);
}
public interface Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory {
    public abstract virtual SqlExpression ApplyTypeMapping(SqlExpression sqlExpression, RelationalTypeMapping typeMapping);
    public abstract virtual SqlExpression ApplyDefaultTypeMapping(SqlExpression sqlExpression);
    public abstract virtual RelationalTypeMapping GetTypeMappingForValue(object value);
    public abstract virtual RelationalTypeMapping FindMapping(Type type);
    public abstract virtual SqlUnaryExpression MakeUnary(ExpressionType operatorType, SqlExpression operand, Type type, RelationalTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression MakeBinary(ExpressionType operatorType, SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression Equal(SqlExpression left, SqlExpression right);
    public abstract virtual SqlBinaryExpression NotEqual(SqlExpression left, SqlExpression right);
    public abstract virtual SqlBinaryExpression GreaterThan(SqlExpression left, SqlExpression right);
    public abstract virtual SqlBinaryExpression GreaterThanOrEqual(SqlExpression left, SqlExpression right);
    public abstract virtual SqlBinaryExpression LessThan(SqlExpression left, SqlExpression right);
    public abstract virtual SqlBinaryExpression LessThanOrEqual(SqlExpression left, SqlExpression right);
    public abstract virtual SqlBinaryExpression AndAlso(SqlExpression left, SqlExpression right);
    public abstract virtual SqlBinaryExpression OrElse(SqlExpression left, SqlExpression right);
    public abstract virtual SqlBinaryExpression Add(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression Subtract(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression Multiply(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression Divide(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression Modulo(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression And(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression Or(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression Coalesce(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public abstract virtual SqlUnaryExpression IsNull(SqlExpression operand);
    public abstract virtual SqlUnaryExpression IsNotNull(SqlExpression operand);
    public abstract virtual SqlUnaryExpression Convert(SqlExpression operand, Type type, RelationalTypeMapping typeMapping);
    public abstract virtual SqlUnaryExpression Not(SqlExpression operand);
    public abstract virtual SqlUnaryExpression Negate(SqlExpression operand);
    public abstract virtual CaseExpression Case(SqlExpression operand, CaseWhenClause[] whenClauses);
    public abstract virtual CaseExpression Case(IReadOnlyList`1<CaseWhenClause> whenClauses, SqlExpression elseResult);
    public abstract virtual SqlFunctionExpression Function(string name, IEnumerable`1<SqlExpression> arguments, Type returnType, RelationalTypeMapping typeMapping);
    public abstract virtual SqlFunctionExpression Function(string schema, string name, IEnumerable`1<SqlExpression> arguments, Type returnType, RelationalTypeMapping typeMapping);
    public abstract virtual SqlFunctionExpression Function(SqlExpression instance, string name, IEnumerable`1<SqlExpression> arguments, Type returnType, RelationalTypeMapping typeMapping);
    public abstract virtual SqlFunctionExpression Function(string name, Type returnType, RelationalTypeMapping typeMapping);
    public abstract virtual SqlFunctionExpression Function(string schema, string name, Type returnType, RelationalTypeMapping typeMapping);
    public abstract virtual SqlFunctionExpression Function(SqlExpression instance, string name, Type returnType, RelationalTypeMapping typeMapping);
    public abstract virtual ExistsExpression Exists(SelectExpression subquery, bool negated);
    public abstract virtual InExpression In(SqlExpression item, SqlExpression values, bool negated);
    public abstract virtual InExpression In(SqlExpression item, SelectExpression subquery, bool negated);
    public abstract virtual LikeExpression Like(SqlExpression match, SqlExpression pattern, SqlExpression escapeChar);
    public abstract virtual SqlConstantExpression Constant(object value, RelationalTypeMapping typeMapping);
    public abstract virtual SqlFragmentExpression Fragment(string sql);
    public abstract virtual SelectExpression Select(SqlExpression projection);
    public abstract virtual SelectExpression Select(IEntityType entityType);
    public abstract virtual SelectExpression Select(IEntityType entityType, string sql, Expression sqlArguments);
}
public class Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator : SqlExpressionVisitor {
    private static Regex _composableSql;
    private IRelationalCommandBuilderFactory _relationalCommandBuilderFactory;
    private ISqlGenerationHelper _sqlGenerationHelper;
    private IRelationalCommandBuilder _relationalCommandBuilder;
    private static Dictionary`2<ExpressionType, string> _operatorMap;
    [CompilerGeneratedAttribute]
private QuerySqlGeneratorDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AliasSeparator>k__BackingField;
    protected QuerySqlGeneratorDependencies Dependencies { get; }
    protected string AliasSeparator { get; }
    protected IRelationalCommandBuilder Sql { get; }
    public QuerySqlGenerator(QuerySqlGeneratorDependencies dependencies);
    private static QuerySqlGenerator();
    [CompilerGeneratedAttribute]
protected virtual QuerySqlGeneratorDependencies get_Dependencies();
    public virtual IRelationalCommand GetCommand(SelectExpression selectExpression);
    [CompilerGeneratedAttribute]
protected virtual string get_AliasSeparator();
    protected virtual IRelationalCommandBuilder get_Sql();
    protected virtual void GenerateTagsHeaderComment(SelectExpression selectExpression);
    protected virtual Expression VisitSqlFragment(SqlFragmentExpression sqlFragmentExpression);
    private bool IsNonComposedSetOperation(SelectExpression selectExpression);
    protected virtual Expression VisitSelect(SelectExpression selectExpression);
    protected virtual Expression VisitProjection(ProjectionExpression projectionExpression);
    protected virtual Expression VisitSqlFunction(SqlFunctionExpression sqlFunctionExpression);
    protected virtual Expression VisitColumn(ColumnExpression columnExpression);
    protected virtual Expression VisitTable(TableExpression tableExpression);
    private void GenerateFromSql(FromSqlExpression fromSqlExpression);
    protected virtual Expression VisitFromSql(FromSqlExpression fromSqlExpression);
    protected virtual Expression VisitSqlBinary(SqlBinaryExpression sqlBinaryExpression);
    private bool RequiresBrackets(SqlExpression expression);
    protected virtual Expression VisitSqlConstant(SqlConstantExpression sqlConstantExpression);
    protected virtual Expression VisitSqlParameter(SqlParameterExpression sqlParameterExpression);
    protected virtual Expression VisitOrdering(OrderingExpression orderingExpression);
    protected virtual Expression VisitLike(LikeExpression likeExpression);
    protected virtual Expression VisitCase(CaseExpression caseExpression);
    protected virtual Expression VisitSqlUnary(SqlUnaryExpression sqlUnaryExpression);
    protected virtual Expression VisitExists(ExistsExpression existsExpression);
    protected virtual Expression VisitIn(InExpression inExpression);
    protected virtual string GenerateOperator(SqlBinaryExpression binaryExpression);
    protected virtual void GenerateTop(SelectExpression selectExpression);
    protected virtual void GenerateOrderings(SelectExpression selectExpression);
    protected virtual void GenerateLimitOffset(SelectExpression selectExpression);
    private void GenerateList(IReadOnlyList`1<T> items, Action`1<T> generationAction, Action`1<IRelationalCommandBuilder> joinAction);
    protected virtual Expression VisitCrossJoin(CrossJoinExpression crossJoinExpression);
    protected virtual Expression VisitCrossApply(CrossApplyExpression crossApplyExpression);
    protected virtual Expression VisitOuterApply(OuterApplyExpression outerApplyExpression);
    protected virtual Expression VisitInnerJoin(InnerJoinExpression innerJoinExpression);
    protected virtual Expression VisitLeftJoin(LeftJoinExpression leftJoinExpression);
    protected virtual Expression VisitSubSelect(ScalarSubqueryExpression scalarSubqueryExpression);
    protected virtual Expression VisitRowNumber(RowNumberExpression rowNumberExpression);
    protected virtual void GenerateSetOperation(SetOperationBase setOperation);
    protected virtual void GenerateSetOperationOperand(SetOperationBase setOperation, SelectExpression operand);
    private void GenerateSetOperationHelper(SetOperationBase setOperation);
    protected virtual Expression VisitExcept(ExceptExpression exceptExpression);
    protected virtual Expression VisitIntersect(IntersectExpression intersectExpression);
    protected virtual Expression VisitUnion(UnionExpression unionExpression);
    [CompilerGeneratedAttribute]
private void <VisitSelect>b__18_0(ProjectionExpression e);
    [CompilerGeneratedAttribute]
private void <VisitSelect>b__18_1(TableExpressionBase e);
    [CompilerGeneratedAttribute]
private void <VisitSelect>b__18_3(SqlExpression e);
    [CompilerGeneratedAttribute]
private void <VisitSqlFunction>b__20_0(SqlExpression e);
    [CompilerGeneratedAttribute]
private void <VisitIn>b__34_1(SqlConstantExpression e);
    [CompilerGeneratedAttribute]
private void <GenerateOrderings>b__37_1(OrderingExpression e);
    [CompilerGeneratedAttribute]
private void <VisitRowNumber>b__46_0(SqlExpression e);
    [CompilerGeneratedAttribute]
private void <VisitRowNumber>b__46_1(OrderingExpression e);
    [CompilerGeneratedAttribute]
internal static string <GenerateSetOperation>g__getSetOperation|47_0(<>c__DisplayClass47_0& );
}
public class Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies : object {
    [CompilerGeneratedAttribute]
private IRelationalCommandBuilderFactory <RelationalCommandBuilderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlGenerationHelper <SqlGenerationHelper>k__BackingField;
    public IRelationalCommandBuilderFactory RelationalCommandBuilderFactory { get; }
    public ISqlGenerationHelper SqlGenerationHelper { get; }
    [EntityFrameworkInternalAttribute]
public QuerySqlGeneratorDependencies(IRelationalCommandBuilderFactory relationalCommandBuilderFactory, ISqlGenerationHelper sqlGenerationHelper);
    [CompilerGeneratedAttribute]
public IRelationalCommandBuilderFactory get_RelationalCommandBuilderFactory();
    [CompilerGeneratedAttribute]
public ISqlGenerationHelper get_SqlGenerationHelper();
    public QuerySqlGeneratorDependencies With(IRelationalCommandBuilderFactory relationalCommandBuilderFactory);
    public QuerySqlGeneratorDependencies With(ISqlGenerationHelper sqlGenerationHelper);
}
public class Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression : Expression {
    [CompilerGeneratedAttribute]
private int <CollectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <ParentIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <OuterIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <SelfIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <InnerShaper>k__BackingField;
    [CompilerGeneratedAttribute]
private INavigation <Navigation>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ElementType>k__BackingField;
    public int CollectionId { get; }
    public Expression ParentIdentifier { get; }
    public Expression OuterIdentifier { get; }
    public Expression SelfIdentifier { get; }
    public Expression InnerShaper { get; }
    public INavigation Navigation { get; }
    public Type ElementType { get; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public RelationalCollectionShaperExpression(int collectionId, Expression parentIdentifier, Expression outerIdentifier, Expression selfIdentifier, Expression innerShaper, INavigation navigation, Type elementType);
    [CompilerGeneratedAttribute]
public virtual int get_CollectionId();
    [CompilerGeneratedAttribute]
public virtual Expression get_ParentIdentifier();
    [CompilerGeneratedAttribute]
public virtual Expression get_OuterIdentifier();
    [CompilerGeneratedAttribute]
public virtual Expression get_SelfIdentifier();
    [CompilerGeneratedAttribute]
public virtual Expression get_InnerShaper();
    [CompilerGeneratedAttribute]
public virtual INavigation get_Navigation();
    [CompilerGeneratedAttribute]
public virtual Type get_ElementType();
    public virtual Type get_Type();
    public sealed virtual ExpressionType get_NodeType();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual RelationalCollectionShaperExpression Update(Expression parentIdentifier, Expression outerIdentifier, Expression selfIdentifier, Expression innerShaper);
    public virtual void Print(ExpressionPrinter expressionPrinter);
}
public class Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGenerator : CompiledQueryCacheKeyGenerator {
    [CompilerGeneratedAttribute]
private RelationalCompiledQueryCacheKeyGeneratorDependencies <RelationalDependencies>k__BackingField;
    protected RelationalCompiledQueryCacheKeyGeneratorDependencies RelationalDependencies { get; }
    public RelationalCompiledQueryCacheKeyGenerator(CompiledQueryCacheKeyGeneratorDependencies dependencies, RelationalCompiledQueryCacheKeyGeneratorDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalCompiledQueryCacheKeyGeneratorDependencies get_RelationalDependencies();
    public virtual object GenerateCacheKey(Expression query, bool async);
    protected RelationalCompiledQueryCacheKey GenerateCacheKeyCore(Expression query, bool async);
}
public class Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGeneratorDependencies : object {
    [CompilerGeneratedAttribute]
private IDbContextOptions <ContextOptions>k__BackingField;
    public IDbContextOptions ContextOptions { get; }
    [EntityFrameworkInternalAttribute]
public RelationalCompiledQueryCacheKeyGeneratorDependencies(IDbContextOptions contextOptions);
    [CompilerGeneratedAttribute]
public IDbContextOptions get_ContextOptions();
    public RelationalCompiledQueryCacheKeyGeneratorDependencies With(IDbContextOptions contextOptions);
}
public class Microsoft.EntityFrameworkCore.Query.RelationalEvaluatableExpressionFilter : EvaluatableExpressionFilter {
    [CompilerGeneratedAttribute]
private RelationalEvaluatableExpressionFilterDependencies <RelationalDependencies>k__BackingField;
    protected RelationalEvaluatableExpressionFilterDependencies RelationalDependencies { get; }
    public RelationalEvaluatableExpressionFilter(EvaluatableExpressionFilterDependencies dependencies, RelationalEvaluatableExpressionFilterDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalEvaluatableExpressionFilterDependencies get_RelationalDependencies();
    public virtual bool IsEvaluatableExpression(Expression expression, IModel model);
}
public class Microsoft.EntityFrameworkCore.Query.RelationalEvaluatableExpressionFilterDependencies : object {
}
public class Microsoft.EntityFrameworkCore.Query.RelationalMemberTranslatorProvider : object {
    private List`1<IMemberTranslator> _plugins;
    private List`1<IMemberTranslator> _translators;
    public RelationalMemberTranslatorProvider(RelationalMemberTranslatorProviderDependencies dependencies);
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType);
    protected virtual void AddTranslators(IEnumerable`1<IMemberTranslator> translators);
}
public class Microsoft.EntityFrameworkCore.Query.RelationalMemberTranslatorProviderDependencies : object {
    [CompilerGeneratedAttribute]
private ISqlExpressionFactory <SqlExpressionFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IMemberTranslatorPlugin> <Plugins>k__BackingField;
    public ISqlExpressionFactory SqlExpressionFactory { get; }
    public IEnumerable`1<IMemberTranslatorPlugin> Plugins { get; }
    [EntityFrameworkInternalAttribute]
public RelationalMemberTranslatorProviderDependencies(ISqlExpressionFactory sqlExpressionFactory, IEnumerable`1<IMemberTranslatorPlugin> plugins);
    [CompilerGeneratedAttribute]
public ISqlExpressionFactory get_SqlExpressionFactory();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IMemberTranslatorPlugin> get_Plugins();
    public RelationalMemberTranslatorProviderDependencies With(ISqlExpressionFactory sqlExpressionFactory);
    public RelationalMemberTranslatorProviderDependencies With(IEnumerable`1<IMemberTranslatorPlugin> plugins);
}
public class Microsoft.EntityFrameworkCore.Query.RelationalMethodCallTranslatorProvider : object {
    private List`1<IMethodCallTranslator> _plugins;
    private List`1<IMethodCallTranslator> _translators;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public RelationalMethodCallTranslatorProvider(RelationalMethodCallTranslatorProviderDependencies dependencies);
    public virtual SqlExpression Translate(IModel model, SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
    protected virtual void AddTranslators(IEnumerable`1<IMethodCallTranslator> translators);
}
public class Microsoft.EntityFrameworkCore.Query.RelationalMethodCallTranslatorProviderDependencies : object {
    [CompilerGeneratedAttribute]
private ISqlExpressionFactory <SqlExpressionFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IMethodCallTranslatorPlugin> <Plugins>k__BackingField;
    public ISqlExpressionFactory SqlExpressionFactory { get; }
    public IEnumerable`1<IMethodCallTranslatorPlugin> Plugins { get; }
    [EntityFrameworkInternalAttribute]
public RelationalMethodCallTranslatorProviderDependencies(ISqlExpressionFactory sqlExpressionFactory, IEnumerable`1<IMethodCallTranslatorPlugin> plugins);
    [CompilerGeneratedAttribute]
public ISqlExpressionFactory get_SqlExpressionFactory();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IMethodCallTranslatorPlugin> get_Plugins();
    public RelationalMethodCallTranslatorProviderDependencies With(ISqlExpressionFactory sqlExpressionFactory);
    public RelationalMethodCallTranslatorProviderDependencies With(IEnumerable`1<IMethodCallTranslatorPlugin> plugins);
}
public class Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor : QueryableMethodTranslatingExpressionVisitor {
    private RelationalSqlTranslatingExpressionVisitor _sqlTranslator;
    private WeakEntityExpandingExpressionVisitor _weakEntityExpandingExpressionVisitor;
    private RelationalProjectionBindingExpressionVisitor _projectionBindingExpressionVisitor;
    private IModel _model;
    private ISqlExpressionFactory _sqlExpressionFactory;
    private bool _subquery;
    [CompilerGeneratedAttribute]
private RelationalQueryableMethodTranslatingExpressionVisitorDependencies <RelationalDependencies>k__BackingField;
    protected RelationalQueryableMethodTranslatingExpressionVisitorDependencies RelationalDependencies { get; }
    public RelationalQueryableMethodTranslatingExpressionVisitor(QueryableMethodTranslatingExpressionVisitorDependencies dependencies, RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies, IModel model);
    protected RelationalQueryableMethodTranslatingExpressionVisitor(RelationalQueryableMethodTranslatingExpressionVisitor parentVisitor);
    [CompilerGeneratedAttribute]
protected virtual RelationalQueryableMethodTranslatingExpressionVisitorDependencies get_RelationalDependencies();
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    protected virtual QueryableMethodTranslatingExpressionVisitor CreateSubqueryVisitor();
    protected virtual ShapedQueryExpression CreateShapedQueryExpression(Type elementType);
    private ShapedQueryExpression CreateShapedQueryExpression(Type elementType, string sql, Expression arguments);
    private static ShapedQueryExpression CreateShapedQueryExpression(IEntityType entityType, SelectExpression selectExpression);
    protected virtual ShapedQueryExpression TranslateAll(ShapedQueryExpression source, LambdaExpression predicate);
    protected virtual ShapedQueryExpression TranslateAny(ShapedQueryExpression source, LambdaExpression predicate);
    protected virtual ShapedQueryExpression TranslateAverage(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    protected virtual ShapedQueryExpression TranslateCast(ShapedQueryExpression source, Type resultType);
    protected virtual ShapedQueryExpression TranslateConcat(ShapedQueryExpression source1, ShapedQueryExpression source2);
    protected virtual ShapedQueryExpression TranslateContains(ShapedQueryExpression source, Expression item);
    protected virtual ShapedQueryExpression TranslateCount(ShapedQueryExpression source, LambdaExpression predicate);
    protected virtual ShapedQueryExpression TranslateDefaultIfEmpty(ShapedQueryExpression source, Expression defaultValue);
    protected virtual ShapedQueryExpression TranslateDistinct(ShapedQueryExpression source);
    protected virtual ShapedQueryExpression TranslateElementAtOrDefault(ShapedQueryExpression source, Expression index, bool returnDefault);
    protected virtual ShapedQueryExpression TranslateExcept(ShapedQueryExpression source1, ShapedQueryExpression source2);
    protected virtual ShapedQueryExpression TranslateFirstOrDefault(ShapedQueryExpression source, LambdaExpression predicate, Type returnType, bool returnDefault);
    protected virtual ShapedQueryExpression TranslateGroupBy(ShapedQueryExpression source, LambdaExpression keySelector, LambdaExpression elementSelector, LambdaExpression resultSelector);
    private Expression TranslateGroupingKey(Expression expression);
    protected virtual ShapedQueryExpression TranslateGroupJoin(ShapedQueryExpression outer, ShapedQueryExpression inner, LambdaExpression outerKeySelector, LambdaExpression innerKeySelector, LambdaExpression resultSelector);
    protected virtual ShapedQueryExpression TranslateIntersect(ShapedQueryExpression source1, ShapedQueryExpression source2);
    protected virtual ShapedQueryExpression TranslateJoin(ShapedQueryExpression outer, ShapedQueryExpression inner, LambdaExpression outerKeySelector, LambdaExpression innerKeySelector, LambdaExpression resultSelector);
    protected virtual ShapedQueryExpression TranslateLeftJoin(ShapedQueryExpression outer, ShapedQueryExpression inner, LambdaExpression outerKeySelector, LambdaExpression innerKeySelector, LambdaExpression resultSelector);
    private SqlExpression CreateJoinPredicate(ShapedQueryExpression outer, LambdaExpression outerKeySelector, ShapedQueryExpression inner, LambdaExpression innerKeySelector);
    private SqlExpression CreateJoinPredicate(Expression outerKey, Expression innerKey);
    protected virtual ShapedQueryExpression TranslateLastOrDefault(ShapedQueryExpression source, LambdaExpression predicate, Type returnType, bool returnDefault);
    protected virtual ShapedQueryExpression TranslateLongCount(ShapedQueryExpression source, LambdaExpression predicate);
    protected virtual ShapedQueryExpression TranslateMax(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    protected virtual ShapedQueryExpression TranslateMin(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    protected virtual ShapedQueryExpression TranslateOfType(ShapedQueryExpression source, Type resultType);
    protected virtual ShapedQueryExpression TranslateOrderBy(ShapedQueryExpression source, LambdaExpression keySelector, bool ascending);
    protected virtual ShapedQueryExpression TranslateReverse(ShapedQueryExpression source);
    protected virtual ShapedQueryExpression TranslateSelect(ShapedQueryExpression source, LambdaExpression selector);
    protected virtual ShapedQueryExpression TranslateSelectMany(ShapedQueryExpression source, LambdaExpression collectionSelector, LambdaExpression resultSelector);
    protected virtual ShapedQueryExpression TranslateSelectMany(ShapedQueryExpression source, LambdaExpression selector);
    protected virtual ShapedQueryExpression TranslateSingleOrDefault(ShapedQueryExpression source, LambdaExpression predicate, Type returnType, bool returnDefault);
    protected virtual ShapedQueryExpression TranslateSkip(ShapedQueryExpression source, Expression count);
    protected virtual ShapedQueryExpression TranslateSkipWhile(ShapedQueryExpression source, LambdaExpression predicate);
    protected virtual ShapedQueryExpression TranslateSum(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    protected virtual ShapedQueryExpression TranslateTake(ShapedQueryExpression source, Expression count);
    protected virtual ShapedQueryExpression TranslateTakeWhile(ShapedQueryExpression source, LambdaExpression predicate);
    protected virtual ShapedQueryExpression TranslateThenBy(ShapedQueryExpression source, LambdaExpression keySelector, bool ascending);
    protected virtual ShapedQueryExpression TranslateUnion(ShapedQueryExpression source1, ShapedQueryExpression source2);
    protected virtual ShapedQueryExpression TranslateWhere(ShapedQueryExpression source, LambdaExpression predicate);
    private SqlExpression TranslateExpression(Expression expression);
    private SqlExpression TranslateLambdaExpression(ShapedQueryExpression shapedQueryExpression, LambdaExpression lambdaExpression);
    private Expression RemapLambdaBody(ShapedQueryExpression shapedQueryExpression, LambdaExpression lambdaExpression);
    internal Expression ExpandWeakEntities(SelectExpression selectExpression, Expression lambdaBody);
    private ShapedQueryExpression AggregateResultShaper(ShapedQueryExpression source, Expression projection, bool throwOnNullResult, Type resultType);
}
public class Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies : object {
    [CompilerGeneratedAttribute]
private IRelationalSqlTranslatingExpressionVisitorFactory <RelationalSqlTranslatingExpressionVisitorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlExpressionFactory <SqlExpressionFactory>k__BackingField;
    public IRelationalSqlTranslatingExpressionVisitorFactory RelationalSqlTranslatingExpressionVisitorFactory { get; }
    public ISqlExpressionFactory SqlExpressionFactory { get; }
    [EntityFrameworkInternalAttribute]
public RelationalQueryableMethodTranslatingExpressionVisitorDependencies(IRelationalSqlTranslatingExpressionVisitorFactory relationalSqlTranslatingExpressionVisitorFactory, ISqlExpressionFactory sqlExpressionFactory);
    [CompilerGeneratedAttribute]
public IRelationalSqlTranslatingExpressionVisitorFactory get_RelationalSqlTranslatingExpressionVisitorFactory();
    [CompilerGeneratedAttribute]
public ISqlExpressionFactory get_SqlExpressionFactory();
    public RelationalQueryableMethodTranslatingExpressionVisitorDependencies With(IRelationalSqlTranslatingExpressionVisitorFactory relationalSqlTranslatingExpressionVisitorFactory);
    public RelationalQueryableMethodTranslatingExpressionVisitorDependencies With(ISqlExpressionFactory sqlExpressionFactory);
}
public class Microsoft.EntityFrameworkCore.Query.RelationalQueryContext : QueryContext {
    [CompilerGeneratedAttribute]
private RelationalQueryContextDependencies <RelationalDependencies>k__BackingField;
    protected RelationalQueryContextDependencies RelationalDependencies { get; }
    public IRelationalConnection Connection { get; }
    public RelationalQueryContext(QueryContextDependencies dependencies, RelationalQueryContextDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalQueryContextDependencies get_RelationalDependencies();
    public virtual IRelationalConnection get_Connection();
}
public class Microsoft.EntityFrameworkCore.Query.RelationalQueryContextDependencies : object {
    [CompilerGeneratedAttribute]
private IRelationalConnection <RelationalConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecutionStrategyFactory <ExecutionStrategyFactory>k__BackingField;
    public IRelationalConnection RelationalConnection { get; }
    [ObsoleteAttribute("Moved to QueryContextDependencies")]
public IExecutionStrategyFactory ExecutionStrategyFactory { get; }
    [EntityFrameworkInternalAttribute]
public RelationalQueryContextDependencies(IRelationalConnection relationalConnection, IExecutionStrategyFactory executionStrategyFactory);
    [CompilerGeneratedAttribute]
public IRelationalConnection get_RelationalConnection();
    [CompilerGeneratedAttribute]
public IExecutionStrategyFactory get_ExecutionStrategyFactory();
    public RelationalQueryContextDependencies With(IRelationalConnection relationalConnection);
    public RelationalQueryContextDependencies With(IExecutionStrategyFactory executionStrategyFactory);
}
public class Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessor : QueryTranslationPostprocessor {
    private SqlExpressionOptimizingExpressionVisitor _sqlExpressionOptimizingExpressionVisitor;
    [CompilerGeneratedAttribute]
private RelationalQueryTranslationPostprocessorDependencies <RelationalDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlExpressionFactory <SqlExpressionFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseRelationalNulls>k__BackingField;
    protected RelationalQueryTranslationPostprocessorDependencies RelationalDependencies { get; }
    protected ISqlExpressionFactory SqlExpressionFactory { get; }
    protected bool UseRelationalNulls { get; }
    public RelationalQueryTranslationPostprocessor(QueryTranslationPostprocessorDependencies dependencies, RelationalQueryTranslationPostprocessorDependencies relationalDependencies, QueryCompilationContext queryCompilationContext);
    [CompilerGeneratedAttribute]
protected virtual RelationalQueryTranslationPostprocessorDependencies get_RelationalDependencies();
    [CompilerGeneratedAttribute]
protected virtual ISqlExpressionFactory get_SqlExpressionFactory();
    [CompilerGeneratedAttribute]
protected virtual bool get_UseRelationalNulls();
    public virtual Expression Process(Expression query);
    protected virtual Expression OptimizeSqlExpression(Expression query);
}
public class Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessorDependencies : object {
    [CompilerGeneratedAttribute]
private ISqlExpressionFactory <SqlExpressionFactory>k__BackingField;
    public ISqlExpressionFactory SqlExpressionFactory { get; }
    [EntityFrameworkInternalAttribute]
public RelationalQueryTranslationPostprocessorDependencies(ISqlExpressionFactory sqlExpressionFactory);
    [CompilerGeneratedAttribute]
public ISqlExpressionFactory get_SqlExpressionFactory();
    public RelationalQueryTranslationPostprocessorDependencies With(ISqlExpressionFactory sqlExpressionFactory);
}
public class Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPreprocessor : QueryTranslationPreprocessor {
    [CompilerGeneratedAttribute]
private RelationalQueryTranslationPreprocessorDependencies <RelationalDependencies>k__BackingField;
    protected RelationalQueryTranslationPreprocessorDependencies RelationalDependencies { get; }
    public RelationalQueryTranslationPreprocessor(QueryTranslationPreprocessorDependencies dependencies, RelationalQueryTranslationPreprocessorDependencies relationalDependencies, QueryCompilationContext queryCompilationContext);
    [CompilerGeneratedAttribute]
protected virtual RelationalQueryTranslationPreprocessorDependencies get_RelationalDependencies();
}
public class Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPreprocessorDependencies : object {
}
public class Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor : ShapedQueryCompilingExpressionVisitor {
    private Type _contextType;
    private IDiagnosticsLogger`1<Query> _logger;
    private ISet`1<string> _tags;
    private bool _useRelationalNulls;
    [CompilerGeneratedAttribute]
private RelationalShapedQueryCompilingExpressionVisitorDependencies <RelationalDependencies>k__BackingField;
    protected RelationalShapedQueryCompilingExpressionVisitorDependencies RelationalDependencies { get; }
    public RelationalShapedQueryCompilingExpressionVisitor(ShapedQueryCompilingExpressionVisitorDependencies dependencies, RelationalShapedQueryCompilingExpressionVisitorDependencies relationalDependencies, QueryCompilationContext queryCompilationContext);
    [CompilerGeneratedAttribute]
protected virtual RelationalShapedQueryCompilingExpressionVisitorDependencies get_RelationalDependencies();
    protected virtual Expression VisitShapedQueryExpression(ShapedQueryExpression shapedQueryExpression);
}
public class Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitorDependencies : object {
    [CompilerGeneratedAttribute]
private IQuerySqlGeneratorFactory <QuerySqlGeneratorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlExpressionFactory <SqlExpressionFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IParameterNameGeneratorFactory <ParameterNameGeneratorFactory>k__BackingField;
    public IQuerySqlGeneratorFactory QuerySqlGeneratorFactory { get; }
    public ISqlExpressionFactory SqlExpressionFactory { get; }
    public IParameterNameGeneratorFactory ParameterNameGeneratorFactory { get; }
    [EntityFrameworkInternalAttribute]
public RelationalShapedQueryCompilingExpressionVisitorDependencies(IQuerySqlGeneratorFactory querySqlGeneratorFactory, ISqlExpressionFactory sqlExpressionFactory, IParameterNameGeneratorFactory parameterNameGeneratorFactory);
    [CompilerGeneratedAttribute]
public IQuerySqlGeneratorFactory get_QuerySqlGeneratorFactory();
    [CompilerGeneratedAttribute]
public ISqlExpressionFactory get_SqlExpressionFactory();
    [CompilerGeneratedAttribute]
public IParameterNameGeneratorFactory get_ParameterNameGeneratorFactory();
    public RelationalShapedQueryCompilingExpressionVisitorDependencies With(IQuerySqlGeneratorFactory querySqlGeneratorFactory);
    public RelationalShapedQueryCompilingExpressionVisitorDependencies With(ISqlExpressionFactory sqlExpressionFactory);
    public RelationalShapedQueryCompilingExpressionVisitorDependencies With(IParameterNameGeneratorFactory parameterNameGeneratorFactory);
}
public class Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor : ExpressionVisitor {
    private IModel _model;
    private QueryableMethodTranslatingExpressionVisitor _queryableMethodTranslatingExpressionVisitor;
    private ISqlExpressionFactory _sqlExpressionFactory;
    private SqlTypeMappingVerifyingExpressionVisitor _sqlTypeMappingVerifyingExpressionVisitor;
    [CompilerGeneratedAttribute]
private RelationalSqlTranslatingExpressionVisitorDependencies <Dependencies>k__BackingField;
    protected RelationalSqlTranslatingExpressionVisitorDependencies Dependencies { get; }
    public RelationalSqlTranslatingExpressionVisitor(RelationalSqlTranslatingExpressionVisitorDependencies dependencies, IModel model, QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor);
    [CompilerGeneratedAttribute]
protected virtual RelationalSqlTranslatingExpressionVisitorDependencies get_Dependencies();
    public virtual SqlExpression Translate(Expression expression);
    public virtual SqlExpression TranslateAverage(Expression expression);
    public virtual SqlExpression TranslateCount(Expression expression);
    public virtual SqlExpression TranslateLongCount(Expression expression);
    public virtual SqlExpression TranslateMax(Expression expression);
    public virtual SqlExpression TranslateMin(Expression expression);
    public virtual SqlExpression TranslateSum(Expression expression);
    protected virtual Expression VisitMember(MemberExpression memberExpression);
    private bool TryBindMember(Expression source, MemberIdentity member, Expression& expression);
    protected virtual Expression VisitTypeBinary(TypeBinaryExpression typeBinaryExpression);
    private Expression GetSelector(MethodCallExpression methodCallExpression, GroupByShaperExpression groupByShaperExpression);
    private Expression GetPredicate(MethodCallExpression methodCallExpression, GroupByShaperExpression groupByShaperExpression);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    private static Expression TryRemoveImplicitConvert(Expression expression);
    private Expression ConvertAnonymousObjectEqualityComparison(BinaryExpression binaryExpression);
    protected virtual Expression VisitBinary(BinaryExpression binaryExpression);
    private SqlConstantExpression GetConstantOrNull(Expression expression);
    private static bool CanEvaluate(Expression expression);
    protected virtual Expression VisitNew(NewExpression node);
    protected virtual Expression VisitMemberInit(MemberInitExpression node);
    protected virtual Expression VisitNewArray(NewArrayExpression node);
    protected virtual Expression VisitListInit(ListInitExpression node);
    protected virtual Expression VisitInvocation(InvocationExpression node);
    protected virtual Expression VisitLambda(Expression`1<T> node);
    protected virtual Expression VisitConstant(ConstantExpression constantExpression);
    protected virtual Expression VisitParameter(ParameterExpression parameterExpression);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected virtual Expression VisitConditional(ConditionalExpression conditionalExpression);
    protected virtual Expression VisitUnary(UnaryExpression unaryExpression);
    [DebuggerStepThroughAttribute]
private bool TranslationFailed(Expression original, Expression translation, SqlExpression& castTranslation);
    [CompilerGeneratedAttribute]
internal static bool <VisitMethodCall>g__IsAggregateResultWithCustomShaper|21_0(MethodInfo method);
    [CompilerGeneratedAttribute]
internal static Expression <ConvertAnonymousObjectEqualityComparison>g__RemoveObjectConvert|23_2(Expression expression);
}
public class Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorDependencies : object {
    [CompilerGeneratedAttribute]
private ISqlExpressionFactory <SqlExpressionFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IMemberTranslatorProvider <MemberTranslatorProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethodCallTranslatorProvider <MethodCallTranslatorProvider>k__BackingField;
    public ISqlExpressionFactory SqlExpressionFactory { get; }
    public IMemberTranslatorProvider MemberTranslatorProvider { get; }
    public IMethodCallTranslatorProvider MethodCallTranslatorProvider { get; }
    [EntityFrameworkInternalAttribute]
public RelationalSqlTranslatingExpressionVisitorDependencies(ISqlExpressionFactory sqlExpressionFactory, IMemberTranslatorProvider memberTranslatorProvider, IMethodCallTranslatorProvider methodCallTranslatorProvider);
    [CompilerGeneratedAttribute]
public ISqlExpressionFactory get_SqlExpressionFactory();
    [CompilerGeneratedAttribute]
public IMemberTranslatorProvider get_MemberTranslatorProvider();
    [CompilerGeneratedAttribute]
public IMethodCallTranslatorProvider get_MethodCallTranslatorProvider();
    public RelationalSqlTranslatingExpressionVisitorDependencies With(ISqlExpressionFactory sqlExpressionFactory);
    public RelationalSqlTranslatingExpressionVisitorDependencies With(IMemberTranslatorProvider memberTranslatorProvider);
    public RelationalSqlTranslatingExpressionVisitorDependencies With(IMethodCallTranslatorProvider methodCallTranslatorProvider);
}
public class Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorFactory : object {
    private RelationalSqlTranslatingExpressionVisitorDependencies _dependencies;
    public RelationalSqlTranslatingExpressionVisitorFactory(RelationalSqlTranslatingExpressionVisitorDependencies dependencies);
    public virtual RelationalSqlTranslatingExpressionVisitor Create(IModel model, QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor);
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory : object {
    private IRelationalTypeMappingSource _typeMappingSource;
    private RelationalTypeMapping _boolTypeMapping;
    public SqlExpressionFactory(SqlExpressionFactoryDependencies dependencies);
    public virtual SqlExpression ApplyDefaultTypeMapping(SqlExpression sqlExpression);
    public virtual SqlExpression ApplyTypeMapping(SqlExpression sqlExpression, RelationalTypeMapping typeMapping);
    private SqlExpression ApplyTypeMappingOnLike(LikeExpression likeExpression);
    private SqlExpression ApplyTypeMappingOnCase(CaseExpression caseExpression, RelationalTypeMapping typeMapping);
    private SqlExpression ApplyTypeMappingOnSqlUnary(SqlUnaryExpression sqlUnaryExpression, RelationalTypeMapping typeMapping);
    private SqlExpression ApplyTypeMappingOnSqlBinary(SqlBinaryExpression sqlBinaryExpression, RelationalTypeMapping typeMapping);
    public virtual RelationalTypeMapping GetTypeMappingForValue(object value);
    public virtual RelationalTypeMapping FindMapping(Type type);
    public virtual SqlBinaryExpression MakeBinary(ExpressionType operatorType, SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual SqlBinaryExpression Equal(SqlExpression left, SqlExpression right);
    public virtual SqlBinaryExpression NotEqual(SqlExpression left, SqlExpression right);
    public virtual SqlBinaryExpression GreaterThan(SqlExpression left, SqlExpression right);
    public virtual SqlBinaryExpression GreaterThanOrEqual(SqlExpression left, SqlExpression right);
    public virtual SqlBinaryExpression LessThan(SqlExpression left, SqlExpression right);
    public virtual SqlBinaryExpression LessThanOrEqual(SqlExpression left, SqlExpression right);
    public virtual SqlBinaryExpression AndAlso(SqlExpression left, SqlExpression right);
    public virtual SqlBinaryExpression OrElse(SqlExpression left, SqlExpression right);
    public virtual SqlBinaryExpression Add(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual SqlBinaryExpression Subtract(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual SqlBinaryExpression Multiply(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual SqlBinaryExpression Divide(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual SqlBinaryExpression Modulo(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual SqlBinaryExpression And(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual SqlBinaryExpression Or(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual SqlBinaryExpression Coalesce(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual SqlUnaryExpression MakeUnary(ExpressionType operatorType, SqlExpression operand, Type type, RelationalTypeMapping typeMapping);
    public virtual SqlUnaryExpression IsNull(SqlExpression operand);
    public virtual SqlUnaryExpression IsNotNull(SqlExpression operand);
    public virtual SqlUnaryExpression Convert(SqlExpression operand, Type type, RelationalTypeMapping typeMapping);
    public virtual SqlUnaryExpression Not(SqlExpression operand);
    public virtual SqlUnaryExpression Negate(SqlExpression operand);
    public virtual CaseExpression Case(SqlExpression operand, SqlExpression elseResult, CaseWhenClause[] whenClauses);
    public virtual CaseExpression Case(SqlExpression operand, CaseWhenClause[] whenClauses);
    public virtual CaseExpression Case(IReadOnlyList`1<CaseWhenClause> whenClauses, SqlExpression elseResult);
    public virtual SqlFunctionExpression Function(string name, IEnumerable`1<SqlExpression> arguments, Type returnType, RelationalTypeMapping typeMapping);
    public virtual SqlFunctionExpression Function(string schema, string name, IEnumerable`1<SqlExpression> arguments, Type returnType, RelationalTypeMapping typeMapping);
    public virtual SqlFunctionExpression Function(SqlExpression instance, string name, IEnumerable`1<SqlExpression> arguments, Type returnType, RelationalTypeMapping typeMapping);
    public virtual SqlFunctionExpression Function(string name, Type returnType, RelationalTypeMapping typeMapping);
    public virtual SqlFunctionExpression Function(string schema, string name, Type returnType, RelationalTypeMapping typeMapping);
    public virtual SqlFunctionExpression Function(SqlExpression instance, string name, Type returnType, RelationalTypeMapping typeMapping);
    public virtual ExistsExpression Exists(SelectExpression subquery, bool negated);
    public virtual InExpression In(SqlExpression item, SqlExpression values, bool negated);
    public virtual InExpression In(SqlExpression item, SelectExpression subquery, bool negated);
    public virtual LikeExpression Like(SqlExpression match, SqlExpression pattern, SqlExpression escapeChar);
    public virtual SqlFragmentExpression Fragment(string sql);
    public virtual SqlConstantExpression Constant(object value, RelationalTypeMapping typeMapping);
    public virtual SelectExpression Select(SqlExpression projection);
    public virtual SelectExpression Select(IEntityType entityType);
    public virtual SelectExpression Select(IEntityType entityType, string sql, Expression sqlArguments);
    private void AddConditions(SelectExpression selectExpression, IEntityType entityType, ICollection`1<IEntityType> sharingTypes, bool skipJoins);
    private void AddInnerJoin(SelectExpression selectExpression, IForeignKey foreignKey, ICollection`1<IEntityType> sharingTypes, bool skipInnerJoins);
    private SqlExpression GenerateJoinPredicate(SelectExpression selectExpression, IForeignKey foreignKey, ICollection`1<IEntityType> sharingTypes, bool skipInnerJoins, SelectExpression& innerSelect);
    private bool AddDiscriminatorCondition(SelectExpression selectExpression, IEntityType entityType);
    private void AddOptionalDependentConditions(SelectExpression selectExpression, IEntityType entityType, ICollection`1<IEntityType> sharingTypes);
    private EntityProjectionExpression GetMappedEntityProjectionExpression(SelectExpression selectExpression);
    private SqlExpression IsNotNull(IProperty property, EntityProjectionExpression entityProjection);
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressionFactoryDependencies : object {
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <TypeMappingSource>k__BackingField;
    public IRelationalTypeMappingSource TypeMappingSource { get; }
    [EntityFrameworkInternalAttribute]
public SqlExpressionFactoryDependencies(IRelationalTypeMappingSource typeMappingSource);
    [CompilerGeneratedAttribute]
public IRelationalTypeMappingSource get_TypeMappingSource();
    public SqlExpressionFactoryDependencies With(IRelationalTypeMappingSource typeMappingSource);
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression : SqlExpression {
    private List`1<CaseWhenClause> _whenClauses;
    [CompilerGeneratedAttribute]
private SqlExpression <Operand>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <ElseResult>k__BackingField;
    public SqlExpression Operand { get; }
    public IReadOnlyList`1<CaseWhenClause> WhenClauses { get; }
    public SqlExpression ElseResult { get; }
    public CaseExpression(SqlExpression operand, IReadOnlyList`1<CaseWhenClause> whenClauses);
    public CaseExpression(IReadOnlyList`1<CaseWhenClause> whenClauses, SqlExpression elseResult);
    public CaseExpression(SqlExpression operand, IReadOnlyList`1<CaseWhenClause> whenClauses, SqlExpression elseResult);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Operand();
    public virtual IReadOnlyList`1<CaseWhenClause> get_WhenClauses();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_ElseResult();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual CaseExpression Update(SqlExpression operand, IReadOnlyList`1<CaseWhenClause> whenClauses, SqlExpression elseResult);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(CaseExpression caseExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause : object {
    [CompilerGeneratedAttribute]
private SqlExpression <Test>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Result>k__BackingField;
    public SqlExpression Test { get; }
    public SqlExpression Result { get; }
    public CaseWhenClause(SqlExpression test, SqlExpression result);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Test();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Result();
    public virtual bool Equals(object obj);
    private bool Equals(CaseWhenClause caseWhenClause);
    public virtual int GetHashCode();
}
[DebuggerDisplayAttribute("{DebuggerDisplay(),nq}")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private TableExpressionBase <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    public string Name { get; }
    public TableExpressionBase Table { get; }
    public bool IsNullable { get; }
    internal ColumnExpression(IProperty property, TableExpressionBase table, bool nullable);
    internal ColumnExpression(ProjectionExpression subqueryProjection, TableExpressionBase table);
    private ColumnExpression(string name, TableExpressionBase table, Type type, RelationalTypeMapping typeMapping, bool nullable);
    private static bool IsNullableProjection(ProjectionExpression projectionExpression);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public TableExpressionBase get_Table();
    [CompilerGeneratedAttribute]
public bool get_IsNullable();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public ColumnExpression MakeNullable();
    public virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(ColumnExpression columnExpression);
    public virtual int GetHashCode();
    private string DebuggerDisplay();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossApplyExpression : JoinExpressionBase {
    public CrossApplyExpression(TableExpressionBase table);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual CrossApplyExpression Update(TableExpressionBase table);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(CrossApplyExpression crossApplyExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossJoinExpression : JoinExpressionBase {
    public CrossJoinExpression(TableExpressionBase table);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual CrossJoinExpression Update(TableExpressionBase table);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(CrossJoinExpression crossJoinExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExceptExpression : SetOperationBase {
    public ExceptExpression(string alias, SelectExpression source1, SelectExpression source2, bool distinct);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual ExceptExpression Update(SelectExpression source1, SelectExpression source2);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(ExceptExpression exceptExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private SelectExpression <Subquery>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNegated>k__BackingField;
    public SelectExpression Subquery { get; }
    public bool IsNegated { get; }
    public ExistsExpression(SelectExpression subquery, bool negated, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual SelectExpression get_Subquery();
    [CompilerGeneratedAttribute]
public virtual bool get_IsNegated();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual ExistsExpression Update(SelectExpression subquery);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(ExistsExpression existsExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression : TableExpressionBase {
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Arguments>k__BackingField;
    public string Sql { get; }
    public Expression Arguments { get; }
    public FromSqlExpression(string sql, Expression arguments, string alias);
    [CompilerGeneratedAttribute]
public virtual string get_Sql();
    [CompilerGeneratedAttribute]
public virtual Expression get_Arguments();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(FromSqlExpression fromSqlExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private SqlExpression <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNegated>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectExpression <Subquery>k__BackingField;
    public SqlExpression Item { get; }
    public bool IsNegated { get; }
    public SqlExpression Values { get; }
    public SelectExpression Subquery { get; }
    public InExpression(SqlExpression item, bool negated, SelectExpression subquery, RelationalTypeMapping typeMapping);
    public InExpression(SqlExpression item, bool negated, SqlExpression values, RelationalTypeMapping typeMapping);
    private InExpression(SqlExpression item, bool negated, SqlExpression values, SelectExpression subquery, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Item();
    [CompilerGeneratedAttribute]
public virtual bool get_IsNegated();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Values();
    [CompilerGeneratedAttribute]
public virtual SelectExpression get_Subquery();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual InExpression Negate();
    public virtual InExpression Update(SqlExpression item, SqlExpression values, SelectExpression subquery);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(InExpression inExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.InnerJoinExpression : PredicateJoinExpressionBase {
    public InnerJoinExpression(TableExpressionBase table, SqlExpression joinPredicate);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual InnerJoinExpression Update(TableExpressionBase table, SqlExpression joinPredicate);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(InnerJoinExpression innerJoinExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.IntersectExpression : SetOperationBase {
    public IntersectExpression(string alias, SelectExpression source1, SelectExpression source2, bool distinct);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual IntersectExpression Update(SelectExpression source1, SelectExpression source2);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(IntersectExpression intersectExpression);
    public virtual int GetHashCode();
}
public abstract class Microsoft.EntityFrameworkCore.Query.SqlExpressions.JoinExpressionBase : TableExpressionBase {
    [CompilerGeneratedAttribute]
private TableExpressionBase <Table>k__BackingField;
    public TableExpressionBase Table { get; }
    protected JoinExpressionBase(TableExpressionBase table);
    [CompilerGeneratedAttribute]
public virtual TableExpressionBase get_Table();
    public virtual bool Equals(object obj);
    private bool Equals(JoinExpressionBase joinExpressionBase);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.LeftJoinExpression : PredicateJoinExpressionBase {
    public LeftJoinExpression(TableExpressionBase table, SqlExpression joinPredicate);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual LeftJoinExpression Update(TableExpressionBase table, SqlExpression joinPredicate);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(LeftJoinExpression leftJoinExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private SqlExpression <Match>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <EscapeChar>k__BackingField;
    public SqlExpression Match { get; }
    public SqlExpression Pattern { get; }
    public SqlExpression EscapeChar { get; }
    public LikeExpression(SqlExpression match, SqlExpression pattern, SqlExpression escapeChar, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Match();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Pattern();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_EscapeChar();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual LikeExpression Update(SqlExpression match, SqlExpression pattern, SqlExpression escapeChar);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(LikeExpression likeExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression : Expression {
    [CompilerGeneratedAttribute]
private SqlExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAscending>k__BackingField;
    public SqlExpression Expression { get; }
    public bool IsAscending { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public OrderingExpression(SqlExpression expression, bool ascending);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Expression();
    [CompilerGeneratedAttribute]
public virtual bool get_IsAscending();
    public sealed virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual OrderingExpression Update(SqlExpression expression);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(OrderingExpression orderingExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.OuterApplyExpression : JoinExpressionBase {
    public OuterApplyExpression(TableExpressionBase table);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual OuterApplyExpression Update(TableExpressionBase table);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(OuterApplyExpression outerApplyExpression);
    public virtual int GetHashCode();
}
public abstract class Microsoft.EntityFrameworkCore.Query.SqlExpressions.PredicateJoinExpressionBase : JoinExpressionBase {
    [CompilerGeneratedAttribute]
private SqlExpression <JoinPredicate>k__BackingField;
    public SqlExpression JoinPredicate { get; }
    protected PredicateJoinExpressionBase(TableExpressionBase table, SqlExpression joinPredicate);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_JoinPredicate();
    public virtual bool Equals(object obj);
    private bool Equals(PredicateJoinExpressionBase predicateJoinExpressionBase);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression : Expression {
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Expression>k__BackingField;
    public string Alias { get; }
    public SqlExpression Expression { get; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public ProjectionExpression(SqlExpression expression, string alias);
    [CompilerGeneratedAttribute]
public virtual string get_Alias();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Expression();
    public virtual Type get_Type();
    public sealed virtual ExpressionType get_NodeType();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual ProjectionExpression Update(SqlExpression expression);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(ProjectionExpression projectionExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<SqlExpression> <Partitions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<OrderingExpression> <Orderings>k__BackingField;
    public IReadOnlyList`1<SqlExpression> Partitions { get; }
    public IReadOnlyList`1<OrderingExpression> Orderings { get; }
    public RowNumberExpression(IReadOnlyList`1<SqlExpression> partitions, IReadOnlyList`1<OrderingExpression> orderings, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<SqlExpression> get_Partitions();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<OrderingExpression> get_Orderings();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual RowNumberExpression Update(IReadOnlyList`1<SqlExpression> partitions, IReadOnlyList`1<OrderingExpression> orderings);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(RowNumberExpression rowNumberExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private SelectExpression <Subquery>k__BackingField;
    public SelectExpression Subquery { get; }
    public ScalarSubqueryExpression(SelectExpression subquery);
    private static SelectExpression Verify(SelectExpression selectExpression);
    [CompilerGeneratedAttribute]
public virtual SelectExpression get_Subquery();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual ScalarSubqueryExpression Update(SelectExpression subquery);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(ScalarSubqueryExpression scalarSubqueryExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression : TableExpressionBase {
    private IDictionary`2<EntityProjectionExpression, IDictionary`2<IProperty, int>> _entityProjectionCache;
    private List`1<ProjectionExpression> _projection;
    private List`1<TableExpressionBase> _tables;
    private List`1<SqlExpression> _groupBy;
    private List`1<OrderingExpression> _orderings;
    private List`1<SqlExpression> _identifier;
    private List`1<SqlExpression> _childIdentifiers;
    private List`1<SelectExpression> _pendingCollections;
    private IDictionary`2<ProjectionMember, Expression> _projectionMapping;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Having>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Limit>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDistinct>k__BackingField;
    public IReadOnlyList`1<ProjectionExpression> Projection { get; }
    public IReadOnlyList`1<TableExpressionBase> Tables { get; }
    public IReadOnlyList`1<SqlExpression> GroupBy { get; }
    public IReadOnlyList`1<OrderingExpression> Orderings { get; }
    public ISet`1<string> Tags { get; private set; }
    public SqlExpression Predicate { get; private set; }
    public SqlExpression Having { get; private set; }
    public SqlExpression Limit { get; private set; }
    public SqlExpression Offset { get; private set; }
    public bool IsDistinct { get; private set; }
    internal SelectExpression(string alias, List`1<ProjectionExpression> projections, List`1<TableExpressionBase> tables, List`1<SqlExpression> groupBy, List`1<OrderingExpression> orderings);
    internal SelectExpression(IEntityType entityType);
    internal SelectExpression(IEntityType entityType, string sql, Expression arguments);
    private SelectExpression(IEntityType entityType, TableExpressionBase tableExpression);
    public IReadOnlyList`1<ProjectionExpression> get_Projection();
    public IReadOnlyList`1<TableExpressionBase> get_Tables();
    public IReadOnlyList`1<SqlExpression> get_GroupBy();
    public IReadOnlyList`1<OrderingExpression> get_Orderings();
    [CompilerGeneratedAttribute]
public ISet`1<string> get_Tags();
    [CompilerGeneratedAttribute]
private void set_Tags(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public SqlExpression get_Predicate();
    [CompilerGeneratedAttribute]
private void set_Predicate(SqlExpression value);
    [CompilerGeneratedAttribute]
public SqlExpression get_Having();
    [CompilerGeneratedAttribute]
private void set_Having(SqlExpression value);
    [CompilerGeneratedAttribute]
public SqlExpression get_Limit();
    [CompilerGeneratedAttribute]
private void set_Limit(SqlExpression value);
    [CompilerGeneratedAttribute]
public SqlExpression get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(SqlExpression value);
    [CompilerGeneratedAttribute]
public bool get_IsDistinct();
    [CompilerGeneratedAttribute]
private void set_IsDistinct(bool value);
    public void ApplyTags(ISet`1<string> tags);
    public bool IsNonComposedFromSql();
    public void ApplyProjection();
    private static IEnumerable`1<IProperty> GetAllPropertiesInHierarchy(IEntityType entityType);
    public void ReplaceProjectionMapping(IDictionary`2<ProjectionMember, Expression> projectionMapping);
    public Expression GetMappedProjection(ProjectionMember projectionMember);
    public int AddToProjection(SqlExpression sqlExpression);
    private int AddToProjection(SqlExpression sqlExpression, string alias);
    public IDictionary`2<IProperty, int> AddToProjection(EntityProjectionExpression entityProjection);
    public void PrepareForAggregate();
    public void ApplyPredicate(SqlExpression expression);
    public void ApplyGrouping(Expression keySelector);
    private void AppendGroupBy(Expression keySelector);
    public void ApplyOrdering(OrderingExpression orderingExpression);
    public void AppendOrdering(OrderingExpression orderingExpression);
    public void ApplyLimit(SqlExpression sqlExpression);
    public void ApplyOffset(SqlExpression sqlExpression);
    public void ReverseOrderings();
    public void ApplyDistinct();
    public void ApplyDefaultIfEmpty(ISqlExpressionFactory sqlExpressionFactory);
    public void ClearOrdering();
    public void ApplyExcept(SelectExpression source2, bool distinct);
    public void ApplyIntersect(SelectExpression source2, bool distinct);
    public void ApplyUnion(SelectExpression source2, bool distinct);
    private void ApplySetOperation(SetOperationType setOperationType, SelectExpression select2, bool distinct);
    private ColumnExpression GenerateOuterColumn(SqlExpression projection, string alias);
    public IDictionary`2<SqlExpression, ColumnExpression> PushdownIntoSubquery();
    public Expression AddSingleProjection(ShapedQueryExpression shapedQueryExpression);
    public CollectionShaperExpression AddCollectionProjection(ShapedQueryExpression shapedQueryExpression, INavigation navigation, Type elementType);
    public Expression ApplyCollectionJoin(int collectionIndex, int collectionId, Expression innerShaper, INavigation navigation, Type elementType);
    private static SqlExpression MakeNullable(SqlExpression sqlExpression);
    private Expression GetIdentifierAccessor(IEnumerable`1<SqlExpression> identifyingProjection);
    private SqlExpression TryExtractJoinKey(SelectExpression selectExpression);
    private SqlExpression TryExtractJoinKey(SelectExpression selectExpression, SqlExpression predicate, List`1<ColumnExpression> columnExpressions, SqlExpression& updatedPredicate);
    private static SqlExpression CombineNonNullExpressions(SqlExpression left, SqlExpression right);
    private SqlBinaryExpression ValidateKeyComparison(SelectExpression inner, SqlBinaryExpression sqlBinaryExpression, List`1<ColumnExpression> columnExpressions);
    private SqlExpression RemoveRedundantNullChecks(SqlExpression predicate, List`1<ColumnExpression> columnExpressions);
    private bool ContainsTableReference(TableExpressionBase table);
    private void GetPartitions(SqlExpression sqlExpression, List`1<SqlExpression> partitions);
    private void AddJoin(JoinType joinType, SelectExpression innerSelectExpression, Type transparentIdentifierType, SqlExpression joinPredicate);
    public void AddInnerJoin(SelectExpression innerSelectExpression, SqlExpression joinPredicate, Type transparentIdentifierType);
    public void AddLeftJoin(SelectExpression innerSelectExpression, SqlExpression joinPredicate, Type transparentIdentifierType);
    public void AddCrossJoin(SelectExpression innerSelectExpression, Type transparentIdentifierType);
    public void AddCrossApply(SelectExpression innerSelectExpression, Type transparentIdentifierType);
    public void AddOuterApply(SelectExpression innerSelectExpression, Type transparentIdentifierType);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual bool Equals(object obj);
    private bool Equals(SelectExpression selectExpression);
    public SelectExpression Update(List`1<ProjectionExpression> projections, List`1<TableExpressionBase> tables, SqlExpression predicate, List`1<SqlExpression> groupBy, SqlExpression havingExpression, List`1<OrderingExpression> orderings, SqlExpression limit, SqlExpression offset, bool distinct, string alias);
    public virtual int GetHashCode();
    public virtual void Print(ExpressionPrinter expressionPrinter);
    [CompilerGeneratedAttribute]
private void <ApplySetOperation>g__HandleEntityMapping|70_0(ProjectionMember projectionMember, SelectExpression select1, EntityProjectionExpression projection1, SelectExpression select2, EntityProjectionExpression projection2, <>c__DisplayClass70_0& );
    [CompilerGeneratedAttribute]
private ColumnExpression <ApplySetOperation>g__AddSetOperationColumnProjections|70_1(SelectExpression select1, ColumnExpression column1, SelectExpression select2, ColumnExpression column2, <>c__DisplayClass70_0& );
    [CompilerGeneratedAttribute]
private string <ApplySetOperation>g__GenerateUniqueAlias|70_2(string baseAlias, <>c__DisplayClass70_0& );
    [CompilerGeneratedAttribute]
internal static bool <ApplySetOperation>g__IsNullableProjection|70_3(ProjectionExpression projectionExpression);
    [CompilerGeneratedAttribute]
internal static EntityProjectionExpression <PushdownIntoSubquery>g__LiftEntityProjectionFromSubquery|72_0(EntityProjectionExpression entityProjection, <>c__DisplayClass72_0& );
    [CompilerGeneratedAttribute]
internal static Expression <AddSingleProjection>g__RemoveConvert|73_0(Expression expression);
}
public abstract class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase : TableExpressionBase {
    [CompilerGeneratedAttribute]
private bool <IsDistinct>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectExpression <Source1>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectExpression <Source2>k__BackingField;
    public bool IsDistinct { get; }
    public SelectExpression Source1 { get; }
    public SelectExpression Source2 { get; }
    protected SetOperationBase(string alias, SelectExpression source1, SelectExpression source2, bool distinct);
    [CompilerGeneratedAttribute]
public virtual bool get_IsDistinct();
    [CompilerGeneratedAttribute]
public virtual SelectExpression get_Source1();
    [CompilerGeneratedAttribute]
public virtual SelectExpression get_Source2();
    public virtual bool Equals(object obj);
    private bool Equals(SetOperationBase setOperationBase);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression : SqlExpression {
    private static ISet`1<ExpressionType> _allowedOperators;
    [CompilerGeneratedAttribute]
private ExpressionType <OperatorType>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Right>k__BackingField;
    public ExpressionType OperatorType { get; }
    public SqlExpression Left { get; }
    public SqlExpression Right { get; }
    public SqlBinaryExpression(ExpressionType operatorType, SqlExpression left, SqlExpression right, Type type, RelationalTypeMapping typeMapping);
    private static SqlBinaryExpression();
    private static ExpressionType VerifyOperator(ExpressionType operatorType);
    [CompilerGeneratedAttribute]
public virtual ExpressionType get_OperatorType();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Left();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Right();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual SqlBinaryExpression Update(SqlExpression left, SqlExpression right);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    private bool RequiresBrackets(SqlExpression expression);
    public virtual bool Equals(object obj);
    private bool Equals(SqlBinaryExpression sqlBinaryExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression : SqlExpression {
    private ConstantExpression _constantExpression;
    public object Value { get; }
    public SqlConstantExpression(ConstantExpression constantExpression, RelationalTypeMapping typeMapping);
    public virtual object get_Value();
    public virtual SqlExpression ApplyTypeMapping(RelationalTypeMapping typeMapping);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    private void Print(object value, ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(SqlConstantExpression sqlConstantExpression);
    private bool ValueEquals(object value1, object value2);
    public virtual int GetHashCode();
}
public abstract class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression : Expression {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <TypeMapping>k__BackingField;
    public Type Type { get; }
    public RelationalTypeMapping TypeMapping { get; }
    public ExpressionType NodeType { get; }
    protected SqlExpression(Type type, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual Type get_Type();
    [CompilerGeneratedAttribute]
public virtual RelationalTypeMapping get_TypeMapping();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public sealed virtual ExpressionType get_NodeType();
    public abstract virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(SqlExpression sqlExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    public string Sql { get; }
    public SqlFragmentExpression(string sql);
    [CompilerGeneratedAttribute]
public virtual string get_Sql();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(SqlFragmentExpression sqlFragmentExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNiladic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBuiltIn>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<SqlExpression> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Instance>k__BackingField;
    public string Name { get; }
    public string Schema { get; }
    public bool IsNiladic { get; }
    public bool IsBuiltIn { get; }
    public IReadOnlyList`1<SqlExpression> Arguments { get; }
    public Expression Instance { get; }
    public SqlFunctionExpression(Expression instance, string schema, string name, bool niladic, IEnumerable`1<SqlExpression> arguments, bool builtIn, Type type, RelationalTypeMapping typeMapping);
    public static SqlFunctionExpression CreateNiladic(string name, Type type, RelationalTypeMapping typeMapping);
    public static SqlFunctionExpression CreateNiladic(string schema, string name, Type type, RelationalTypeMapping typeMapping);
    public static SqlFunctionExpression CreateNiladic(SqlExpression instance, string name, Type type, RelationalTypeMapping typeMapping);
    public static SqlFunctionExpression Create(SqlExpression instance, string name, IEnumerable`1<SqlExpression> arguments, Type type, RelationalTypeMapping typeMapping);
    public static SqlFunctionExpression Create(string name, IEnumerable`1<SqlExpression> arguments, Type type, RelationalTypeMapping typeMapping);
    public static SqlFunctionExpression Create(string schema, string name, IEnumerable`1<SqlExpression> arguments, Type type, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual bool get_IsNiladic();
    [CompilerGeneratedAttribute]
public virtual bool get_IsBuiltIn();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<SqlExpression> get_Arguments();
    [CompilerGeneratedAttribute]
public virtual Expression get_Instance();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual SqlFunctionExpression ApplyTypeMapping(RelationalTypeMapping typeMapping);
    public virtual SqlFunctionExpression Update(SqlExpression instance, IReadOnlyList`1<SqlExpression> arguments);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(SqlFunctionExpression sqlFunctionExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression : SqlExpression {
    private ParameterExpression _parameterExpression;
    public string Name { get; }
    internal SqlParameterExpression(ParameterExpression parameterExpression, RelationalTypeMapping typeMapping);
    public string get_Name();
    public SqlExpression ApplyTypeMapping(RelationalTypeMapping typeMapping);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(SqlParameterExpression sqlParameterExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression : SqlExpression {
    private static ISet`1<ExpressionType> _allowedOperators;
    [CompilerGeneratedAttribute]
private ExpressionType <OperatorType>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Operand>k__BackingField;
    public ExpressionType OperatorType { get; }
    public SqlExpression Operand { get; }
    public SqlUnaryExpression(ExpressionType operatorType, SqlExpression operand, Type type, RelationalTypeMapping typeMapping);
    private static SqlUnaryExpression();
    private static ExpressionType VerifyOperator(ExpressionType operatorType);
    [CompilerGeneratedAttribute]
public virtual ExpressionType get_OperatorType();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Operand();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual SqlUnaryExpression Update(SqlExpression operand);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(SqlUnaryExpression sqlUnaryExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression : TableExpressionBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    public string Name { get; }
    public string Schema { get; }
    internal TableExpression(string name, string schema, string alias);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Schema();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase : Expression {
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    public string Alias { get; internal set; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    protected TableExpressionBase(string alias);
    [CompilerGeneratedAttribute]
public virtual string get_Alias();
    [CompilerGeneratedAttribute]
internal virtual void set_Alias(string value);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual Type get_Type();
    public sealed virtual ExpressionType get_NodeType();
    public abstract virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(TableExpressionBase tableExpressionBase);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.UnionExpression : SetOperationBase {
    public UnionExpression(string alias, SelectExpression source1, SelectExpression source2, bool distinct);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual UnionExpression Update(SelectExpression source1, SelectExpression source2);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(UnionExpression unionExpression);
    public virtual int GetHashCode();
}
public abstract class Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor : ExpressionVisitor {
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected abstract virtual Expression VisitCase(CaseExpression caseExpression);
    protected abstract virtual Expression VisitColumn(ColumnExpression columnExpression);
    protected abstract virtual Expression VisitCrossApply(CrossApplyExpression crossApplyExpression);
    protected abstract virtual Expression VisitCrossJoin(CrossJoinExpression crossJoinExpression);
    protected abstract virtual Expression VisitExcept(ExceptExpression exceptExpression);
    protected abstract virtual Expression VisitExists(ExistsExpression existsExpression);
    protected abstract virtual Expression VisitFromSql(FromSqlExpression fromSqlExpression);
    protected abstract virtual Expression VisitIn(InExpression inExpression);
    protected abstract virtual Expression VisitIntersect(IntersectExpression intersectExpression);
    protected abstract virtual Expression VisitLike(LikeExpression likeExpression);
    protected abstract virtual Expression VisitInnerJoin(InnerJoinExpression innerJoinExpression);
    protected abstract virtual Expression VisitLeftJoin(LeftJoinExpression leftJoinExpression);
    protected abstract virtual Expression VisitOrdering(OrderingExpression orderingExpression);
    protected abstract virtual Expression VisitOuterApply(OuterApplyExpression outerApplyExpression);
    protected abstract virtual Expression VisitProjection(ProjectionExpression projectionExpression);
    protected abstract virtual Expression VisitRowNumber(RowNumberExpression rowNumberExpression);
    protected abstract virtual Expression VisitSelect(SelectExpression selectExpression);
    protected abstract virtual Expression VisitSqlBinary(SqlBinaryExpression sqlBinaryExpression);
    protected abstract virtual Expression VisitSqlConstant(SqlConstantExpression sqlConstantExpression);
    protected abstract virtual Expression VisitSqlFragment(SqlFragmentExpression sqlFragmentExpression);
    protected abstract virtual Expression VisitSqlFunction(SqlFunctionExpression sqlFunctionExpression);
    protected abstract virtual Expression VisitSqlParameter(SqlParameterExpression sqlParameterExpression);
    protected abstract virtual Expression VisitSqlUnary(SqlUnaryExpression sqlCastExpression);
    protected abstract virtual Expression VisitSubSelect(ScalarSubqueryExpression scalarSubqueryExpression);
    protected abstract virtual Expression VisitTable(TableExpression tableExpression);
    protected abstract virtual Expression VisitUnion(UnionExpression unionExpression);
}
[IsReadOnlyAttribute]
[ObsoleteAttribute("For the execution of SQL queries using plain strings, use FromSqlRaw, ExecuteSqlRaw, or ExecuteSqlRawAsync instead. For the execution of SQL queries using interpolated string syntax to create parameters, use FromSqlInterpolated, ExecuteSqlInterpolated, or ExecuteSqlInterpolatedAsync instead.")]
public class Microsoft.EntityFrameworkCore.RawSqlString : ValueType {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    public string Format { get; }
    public RawSqlString(string s);
    public static RawSqlString op_Implicit(string s);
    public static RawSqlString op_Implicit(FormattableString fs);
    [CompilerGeneratedAttribute]
public string get_Format();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions : object {
    [ExtensionAttribute]
public static void Migrate(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetMigrations(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetAppliedMigrations(DatabaseFacade databaseFacade);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions/<GetAppliedMigrationsAsync>d__3")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<string>> GetAppliedMigrationsAsync(DatabaseFacade databaseFacade, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetPendingMigrations(DatabaseFacade databaseFacade);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions/<GetPendingMigrationsAsync>d__5")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<string>> GetPendingMigrationsAsync(DatabaseFacade databaseFacade, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task MigrateAsync(DatabaseFacade databaseFacade, CancellationToken cancellationToken);
    [ExtensionAttribute]
[ObsoleteAttribute("For the execution of SQL queries using plain strings, use ExecuteSqlRaw instead. For the execution of SQL queries using interpolated string syntax to create parameters, use ExecuteSqlInterpolated instead.")]
public static int ExecuteSqlCommand(DatabaseFacade databaseFacade, RawSqlString sql, Object[] parameters);
    [ExtensionAttribute]
[ObsoleteAttribute("For the execution of SQL queries using plain strings, use ExecuteSqlRaw instead. For the execution of SQL queries using interpolated string syntax to create parameters, use ExecuteSqlInterpolated instead.")]
public static int ExecuteSqlCommand(DatabaseFacade databaseFacade, FormattableString sql);
    [ExtensionAttribute]
[ObsoleteAttribute("For the execution of SQL queries using plain strings, use ExecuteSqlRaw instead. For the execution of SQL queries using interpolated string syntax to create parameters, use ExecuteSqlInterpolated instead.")]
public static int ExecuteSqlCommand(DatabaseFacade databaseFacade, RawSqlString sql, IEnumerable`1<object> parameters);
    [ExtensionAttribute]
[ObsoleteAttribute("For the async execution of SQL queries using plain strings, use ExecuteSqlRawAsync instead. For the async execution of SQL queries using interpolated string syntax to create parameters, use ExecuteSqlInterpolatedAsync instead.")]
public static Task`1<int> ExecuteSqlCommandAsync(DatabaseFacade databaseFacade, FormattableString sql, CancellationToken cancellationToken);
    [ExtensionAttribute]
[ObsoleteAttribute("For the async execution of SQL queries using plain strings, use ExecuteSqlRawAsync instead. For the async execution of SQL queries using interpolated string syntax to create parameters, use ExecuteSqlInterpolatedAsync instead.")]
public static Task`1<int> ExecuteSqlCommandAsync(DatabaseFacade databaseFacade, RawSqlString sql, CancellationToken cancellationToken);
    [ExtensionAttribute]
[ObsoleteAttribute("For the async execution of SQL queries using plain strings, use ExecuteSqlRawAsync instead. For the async execution of SQL queries using interpolated string syntax to create parameters, use ExecuteSqlInterpolatedAsync instead.")]
public static Task`1<int> ExecuteSqlCommandAsync(DatabaseFacade databaseFacade, RawSqlString sql, Object[] parameters);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions/<ExecuteSqlCommandAsync>d__13")]
[ExtensionAttribute]
[ObsoleteAttribute("For the async execution of SQL queries using plain strings, use ExecuteSqlRawAsync instead. For the async execution of SQL queries using interpolated string syntax to create parameters, use ExecuteSqlInterpolatedAsync instead.")]
public static Task`1<int> ExecuteSqlCommandAsync(DatabaseFacade databaseFacade, RawSqlString sql, IEnumerable`1<object> parameters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static int ExecuteSqlRaw(DatabaseFacade databaseFacade, string sql, Object[] parameters);
    [ExtensionAttribute]
public static int ExecuteSqlInterpolated(DatabaseFacade databaseFacade, FormattableString sql);
    [ExtensionAttribute]
public static int ExecuteSqlRaw(DatabaseFacade databaseFacade, string sql, IEnumerable`1<object> parameters);
    [ExtensionAttribute]
public static Task`1<int> ExecuteSqlInterpolatedAsync(DatabaseFacade databaseFacade, FormattableString sql, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ExecuteSqlRawAsync(DatabaseFacade databaseFacade, string sql, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ExecuteSqlRawAsync(DatabaseFacade databaseFacade, string sql, Object[] parameters);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions/<ExecuteSqlRawAsync>d__20")]
[ExtensionAttribute]
public static Task`1<int> ExecuteSqlRawAsync(DatabaseFacade databaseFacade, string sql, IEnumerable`1<object> parameters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static DbConnection GetDbConnection(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
public static void OpenConnection(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
public static Task OpenConnectionAsync(DatabaseFacade databaseFacade, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void CloseConnection(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
public static Task CloseConnectionAsync(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
public static IDbContextTransaction BeginTransaction(DatabaseFacade databaseFacade, IsolationLevel isolationLevel);
    [ExtensionAttribute]
public static Task`1<IDbContextTransaction> BeginTransactionAsync(DatabaseFacade databaseFacade, IsolationLevel isolationLevel, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IDbContextTransaction UseTransaction(DatabaseFacade databaseFacade, DbTransaction transaction);
    [ExtensionAttribute]
public static Task`1<IDbContextTransaction> UseTransactionAsync(DatabaseFacade databaseFacade, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SetCommandTimeout(DatabaseFacade databaseFacade, Nullable`1<int> timeout);
    [ExtensionAttribute]
public static void SetCommandTimeout(DatabaseFacade databaseFacade, TimeSpan timeout);
    [ExtensionAttribute]
public static Nullable`1<int> GetCommandTimeout(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
public static string GenerateCreateScript(DatabaseFacade databaseFacade);
    private static IRelationalDatabaseFacadeDependencies GetFacadeDependencies(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
private static TService GetRelationalService(IInfrastructure`1<IServiceProvider> databaseFacade);
    [ExtensionAttribute]
private static IDbContextTransactionManager GetTransactionManager(DatabaseFacade databaseFacade);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions : object {
    [ExtensionAttribute]
public static EntityTypeBuilder ToTable(EntityTypeBuilder entityTypeBuilder, string name);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> ToTable(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name);
    [ExtensionAttribute]
public static EntityTypeBuilder ToTable(EntityTypeBuilder entityTypeBuilder, string name, string schema);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> ToTable(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, string schema);
    [ExtensionAttribute]
public static OwnedNavigationBuilder ToTable(OwnedNavigationBuilder referenceOwnershipBuilder, string name);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TEntity, TRelatedEntity> ToTable(OwnedNavigationBuilder`2<TEntity, TRelatedEntity> referenceOwnershipBuilder, string name);
    [ExtensionAttribute]
public static OwnedNavigationBuilder ToTable(OwnedNavigationBuilder referenceOwnershipBuilder, string name, string schema);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TEntity, TRelatedEntity> ToTable(OwnedNavigationBuilder`2<TEntity, TRelatedEntity> referenceOwnershipBuilder, string name, string schema);
    [ExtensionAttribute]
public static IConventionEntityTypeBuilder ToTable(IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionEntityTypeBuilder ToTable(IConventionEntityTypeBuilder entityTypeBuilder, string name, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetTable(IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionEntityTypeBuilder ToSchema(IConventionEntityTypeBuilder entityTypeBuilder, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetSchema(IConventionEntityTypeBuilder entityTypeBuilder, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static EntityTypeBuilder ToView(EntityTypeBuilder entityTypeBuilder, string name);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> ToView(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name);
    [ExtensionAttribute]
public static EntityTypeBuilder ToView(EntityTypeBuilder entityTypeBuilder, string name, string schema);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> ToView(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, string schema);
    [ExtensionAttribute]
public static EntityTypeBuilder HasCheckConstraint(EntityTypeBuilder entityTypeBuilder, string name, string sql);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> HasCheckConstraint(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, string sql);
    [ExtensionAttribute]
public static IConventionEntityTypeBuilder HasCheckConstraint(IConventionEntityTypeBuilder entityTypeBuilder, string name, string sql, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetCheckConstraint(IConventionEntityTypeBuilder entityTypeBuilder, string name, string sql, bool fromDataAnnotation);
    [ExtensionAttribute]
public static EntityTypeBuilder HasComment(EntityTypeBuilder entityTypeBuilder, string comment);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> HasComment(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string comment);
    [ExtensionAttribute]
public static IConventionEntityTypeBuilder HasComment(IConventionEntityTypeBuilder entityTypeBuilder, string comment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetComment(IConventionEntityTypeBuilder entityTypeBuilder, string comment, bool fromDataAnnotation);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions : object {
    [ExtensionAttribute]
public static string GetTableName(IEntityType entityType);
    [ExtensionAttribute]
public static string GetDefaultTableName(IEntityType entityType);
    [ExtensionAttribute]
public static void SetTableName(IMutableEntityType entityType, string name);
    [ExtensionAttribute]
public static void SetTableName(IConventionEntityType entityType, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetTableNameConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static string GetSchema(IEntityType entityType);
    [ExtensionAttribute]
public static string GetDefaultSchema(IEntityType entityType);
    [ExtensionAttribute]
public static void SetSchema(IMutableEntityType entityType, string value);
    [ExtensionAttribute]
public static void SetSchema(IConventionEntityType entityType, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetSchemaConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static ICheckConstraint FindCheckConstraint(IEntityType entityType, string name);
    [ExtensionAttribute]
public static IConventionCheckConstraint FindCheckConstraint(IConventionEntityType entityType, string name);
    [ExtensionAttribute]
public static ICheckConstraint AddCheckConstraint(IMutableEntityType entityType, string name, string sql);
    [ExtensionAttribute]
public static IConventionCheckConstraint AddCheckConstraint(IConventionEntityType entityType, string name, string sql, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool RemoveCheckConstraint(IMutableEntityType entityType, string name);
    [ExtensionAttribute]
public static bool RemoveCheckConstraint(IConventionEntityType entityType, string name);
    [ExtensionAttribute]
public static IEnumerable`1<ICheckConstraint> GetCheckConstraints(IEntityType entityType);
    [ExtensionAttribute]
public static string GetComment(IEntityType entityType);
    [ExtensionAttribute]
public static void SetComment(IMutableEntityType entityType, string comment);
    [ExtensionAttribute]
public static void SetComment(IConventionEntityType entityType, string comment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool IsIgnoredByMigrations(IEntityType entityType);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalForeignKeyBuilderExtensions : object {
    [ExtensionAttribute]
public static ReferenceCollectionBuilder HasConstraintName(ReferenceCollectionBuilder referenceCollectionBuilder, string name);
    [ExtensionAttribute]
public static ReferenceCollectionBuilder`2<TEntity, TRelatedEntity> HasConstraintName(ReferenceCollectionBuilder`2<TEntity, TRelatedEntity> referenceCollectionBuilder, string name);
    [ExtensionAttribute]
public static ReferenceReferenceBuilder HasConstraintName(ReferenceReferenceBuilder referenceReferenceBuilder, string name);
    [ExtensionAttribute]
public static ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> HasConstraintName(ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> referenceReferenceBuilder, string name);
    [ExtensionAttribute]
public static OwnershipBuilder HasConstraintName(OwnershipBuilder ownershipBuilder, string name);
    [ExtensionAttribute]
public static OwnershipBuilder`2<TEntity, TDependentEntity> HasConstraintName(OwnershipBuilder`2<TEntity, TDependentEntity> ownershipBuilder, string name);
    [ExtensionAttribute]
public static IConventionRelationshipBuilder HasConstraintName(IConventionRelationshipBuilder relationship, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetConstraintName(IConventionRelationshipBuilder relationship, string name, bool fromDataAnnotation);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalForeignKeyExtensions : object {
    [ExtensionAttribute]
public static string GetConstraintName(IForeignKey foreignKey);
    [ExtensionAttribute]
public static string GetDefaultName(IForeignKey foreignKey);
    [ExtensionAttribute]
public static void SetConstraintName(IMutableForeignKey foreignKey, string value);
    [ExtensionAttribute]
public static void SetConstraintName(IConventionForeignKey foreignKey, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetConstraintNameConfigurationSource(IConventionForeignKey foreignKey);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions : object {
    [ExtensionAttribute]
public static IndexBuilder HasName(IndexBuilder indexBuilder, string name);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> HasName(IndexBuilder`1<TEntity> indexBuilder, string name);
    [ExtensionAttribute]
public static IConventionIndexBuilder HasName(IConventionIndexBuilder indexBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetName(IConventionIndexBuilder indexBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IndexBuilder HasFilter(IndexBuilder indexBuilder, string sql);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> HasFilter(IndexBuilder`1<TEntity> indexBuilder, string sql);
    [ExtensionAttribute]
public static IConventionIndexBuilder HasFilter(IConventionIndexBuilder indexBuilder, string sql, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetFilter(IConventionIndexBuilder indexBuilder, string sql, bool fromDataAnnotation);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalIndexExtensions : object {
    [ExtensionAttribute]
public static string GetName(IIndex index);
    [ExtensionAttribute]
public static string GetDefaultName(IIndex index);
    [ExtensionAttribute]
public static void SetName(IMutableIndex index, string name);
    [ExtensionAttribute]
public static void SetName(IConventionIndex index, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetNameConfigurationSource(IConventionIndex index);
    [ExtensionAttribute]
public static string GetFilter(IIndex index);
    [ExtensionAttribute]
public static void SetFilter(IMutableIndex index, string value);
    [ExtensionAttribute]
public static void SetFilter(IConventionIndex index, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetFilterConfigurationSource(IConventionIndex index);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalKeyBuilderExtensions : object {
    [ExtensionAttribute]
public static KeyBuilder HasName(KeyBuilder keyBuilder, string name);
    [ExtensionAttribute]
public static IConventionKeyBuilder HasName(IConventionKeyBuilder keyBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetName(IConventionKeyBuilder keyBuilder, string name, bool fromDataAnnotation);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalKeyExtensions : object {
    [ExtensionAttribute]
public static string GetName(IKey key);
    [ExtensionAttribute]
public static string GetDefaultName(IKey key);
    [ExtensionAttribute]
public static void SetName(IMutableKey key, string name);
    [ExtensionAttribute]
public static void SetName(IConventionKey key, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetNameConfigurationSource(IConventionKey key);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions : object {
    [ExtensionAttribute]
public static SequenceBuilder HasSequence(ModelBuilder modelBuilder, string name, string schema);
    [ExtensionAttribute]
public static ModelBuilder HasSequence(ModelBuilder modelBuilder, string name, Action`1<SequenceBuilder> builderAction);
    [ExtensionAttribute]
public static ModelBuilder HasSequence(ModelBuilder modelBuilder, string name, string schema, Action`1<SequenceBuilder> builderAction);
    [ExtensionAttribute]
public static SequenceBuilder HasSequence(ModelBuilder modelBuilder, Type clrType, string name, string schema);
    [ExtensionAttribute]
public static ModelBuilder HasSequence(ModelBuilder modelBuilder, Type clrType, string name, Action`1<SequenceBuilder> builderAction);
    [ExtensionAttribute]
public static ModelBuilder HasSequence(ModelBuilder modelBuilder, Type clrType, string name, string schema, Action`1<SequenceBuilder> builderAction);
    [ExtensionAttribute]
public static SequenceBuilder HasSequence(ModelBuilder modelBuilder, string name, string schema);
    [ExtensionAttribute]
public static ModelBuilder HasSequence(ModelBuilder modelBuilder, string name, Action`1<SequenceBuilder> builderAction);
    [ExtensionAttribute]
public static ModelBuilder HasSequence(ModelBuilder modelBuilder, string name, string schema, Action`1<SequenceBuilder> builderAction);
    private static IMutableSequence GetOrAddSequence(ModelBuilder modelBuilder, string name, string schema);
    private static IConventionSequence GetOrAddSequence(IConventionModelBuilder modelBuilder, string name, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionSequenceBuilder HasSequence(IConventionModelBuilder modelBuilder, string name, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static DbFunctionBuilder HasDbFunction(ModelBuilder modelBuilder, MethodInfo methodInfo);
    [ExtensionAttribute]
public static DbFunctionBuilder HasDbFunction(ModelBuilder modelBuilder, Expression`1<Func`1<TResult>> expression);
    [ExtensionAttribute]
public static ModelBuilder HasDbFunction(ModelBuilder modelBuilder, MethodInfo methodInfo, Action`1<DbFunctionBuilder> builderAction);
    [ExtensionAttribute]
public static IConventionDbFunctionBuilder HasDbFunction(IConventionModelBuilder modelBuilder, MethodInfo methodInfo, bool fromDataAnnotation);
    [ExtensionAttribute]
public static ModelBuilder HasDefaultSchema(ModelBuilder modelBuilder, string schema);
    [ExtensionAttribute]
public static IConventionModelBuilder HasDefaultSchema(IConventionModelBuilder modelBuilder, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetDefaultSchema(IConventionModelBuilder modelBuilder, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionModelBuilder HasMaxIdentifierLength(IConventionModelBuilder modelBuilder, Nullable`1<int> length, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetMaxIdentifierLength(IConventionModelBuilder modelBuilder, Nullable`1<int> length, bool fromDataAnnotation);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalModelExtensions : object {
    [ExtensionAttribute]
public static string GetDefaultSchema(IModel model);
    [ExtensionAttribute]
public static void SetDefaultSchema(IMutableModel model, string value);
    [ExtensionAttribute]
public static void SetDefaultSchema(IConventionModel model, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetDefaultSchemaConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static int GetMaxIdentifierLength(IModel model);
    [ExtensionAttribute]
public static void SetMaxIdentifierLength(IMutableModel model, Nullable`1<int> length);
    [ExtensionAttribute]
public static void SetMaxIdentifierLength(IConventionModel model, Nullable`1<int> length, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetMaxIdentifierLengthConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static ISequence FindSequence(IModel model, string name, string schema);
    [ExtensionAttribute]
public static IMutableSequence FindSequence(IMutableModel model, string name, string schema);
    [ExtensionAttribute]
public static IConventionSequence FindSequence(IConventionModel model, string name, string schema);
    [ExtensionAttribute]
public static IMutableSequence AddSequence(IMutableModel model, string name, string schema);
    [ExtensionAttribute]
public static IConventionSequence AddSequence(IConventionModel model, string name, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IMutableSequence RemoveSequence(IMutableModel model, string name, string schema);
    [ExtensionAttribute]
public static IConventionSequence RemoveSequence(IConventionModel model, string name, string schema);
    [ExtensionAttribute]
public static IReadOnlyList`1<ISequence> GetSequences(IModel model);
    [ExtensionAttribute]
public static IReadOnlyList`1<IMutableSequence> GetSequences(IMutableModel model);
    [ExtensionAttribute]
public static IReadOnlyList`1<IConventionSequence> GetSequences(IConventionModel model);
    [ExtensionAttribute]
public static IDbFunction FindDbFunction(IModel model, MethodInfo method);
    [ExtensionAttribute]
public static IMutableDbFunction FindDbFunction(IMutableModel model, MethodInfo method);
    [ExtensionAttribute]
public static IConventionDbFunction FindDbFunction(IConventionModel model, MethodInfo method);
    [ExtensionAttribute]
public static DbFunction AddDbFunction(IMutableModel model, MethodInfo methodInfo);
    [ExtensionAttribute]
public static IConventionDbFunction AddDbFunction(IConventionModel model, MethodInfo methodInfo, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IMutableDbFunction RemoveDbFunction(IMutableModel model, MethodInfo method);
    [ExtensionAttribute]
public static IConventionDbFunction RemoveDbFunction(IConventionModel model, MethodInfo method);
    [ExtensionAttribute]
public static IEnumerable`1<IDbFunction> GetDbFunctions(IModel model);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableDbFunction> GetDbFunctions(IMutableModel model);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionDbFunction> GetDbFunctions(IConventionModel model);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions : object {
    [ExtensionAttribute]
public static PropertyBuilder HasColumnName(PropertyBuilder propertyBuilder, string name);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasColumnName(PropertyBuilder`1<TProperty> propertyBuilder, string name);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasColumnName(IConventionPropertyBuilder propertyBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetColumnName(IConventionPropertyBuilder propertyBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder HasColumnType(PropertyBuilder propertyBuilder, string typeName);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasColumnType(PropertyBuilder`1<TProperty> propertyBuilder, string typeName);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasColumnType(IConventionPropertyBuilder propertyBuilder, string typeName, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetColumnType(IConventionPropertyBuilder propertyBuilder, string typeName, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder IsFixedLength(PropertyBuilder propertyBuilder, bool fixedLength);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> IsFixedLength(PropertyBuilder`1<TProperty> propertyBuilder, bool fixedLength);
    [ExtensionAttribute]
public static IConventionPropertyBuilder IsFixedLength(IConventionPropertyBuilder propertyBuilder, Nullable`1<bool> fixedLength, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIsFixedLength(IConventionPropertyBuilder propertyBuilder, Nullable`1<bool> fixedLength, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder HasDefaultValueSql(PropertyBuilder propertyBuilder, string sql);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasDefaultValueSql(PropertyBuilder`1<TProperty> propertyBuilder, string sql);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasDefaultValueSql(IConventionPropertyBuilder propertyBuilder, string sql, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetDefaultValueSql(IConventionPropertyBuilder propertyBuilder, string sql, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder HasComputedColumnSql(PropertyBuilder propertyBuilder, string sql);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasComputedColumnSql(PropertyBuilder`1<TProperty> propertyBuilder, string sql);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasComputedColumnSql(IConventionPropertyBuilder propertyBuilder, string sql, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetComputedColumnSql(IConventionPropertyBuilder propertyBuilder, string sql, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder HasDefaultValue(PropertyBuilder propertyBuilder, object value);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasDefaultValue(PropertyBuilder`1<TProperty> propertyBuilder, object value);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasDefaultValue(IConventionPropertyBuilder propertyBuilder, object value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetDefaultValue(IConventionPropertyBuilder propertyBuilder, object value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder HasComment(PropertyBuilder propertyBuilder, string comment);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasComment(PropertyBuilder`1<TProperty> propertyBuilder, string comment);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasComment(IConventionPropertyBuilder propertyBuilder, string comment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetComment(IConventionPropertyBuilder propertyBuilder, object comment, bool fromDataAnnotation);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalPropertyExtensions : object {
    [ExtensionAttribute]
public static string GetColumnName(IProperty property);
    [ExtensionAttribute]
public static string GetDefaultColumnName(IProperty property);
    [ExtensionAttribute]
public static void SetColumnName(IMutableProperty property, string name);
    [ExtensionAttribute]
public static void SetColumnName(IConventionProperty property, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetColumnNameConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static string GetColumnType(IProperty property);
    private static string GetDefaultColumnType(IProperty property);
    [ExtensionAttribute]
public static void SetColumnType(IMutableProperty property, string value);
    [ExtensionAttribute]
public static void SetColumnType(IConventionProperty property, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetColumnTypeConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static string GetDefaultValueSql(IProperty property);
    [ExtensionAttribute]
public static void SetDefaultValueSql(IMutableProperty property, string value);
    [ExtensionAttribute]
public static void SetDefaultValueSql(IConventionProperty property, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetDefaultValueSqlConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static string GetComputedColumnSql(IProperty property);
    [ExtensionAttribute]
public static void SetComputedColumnSql(IMutableProperty property, string value);
    [ExtensionAttribute]
public static void SetComputedColumnSql(IConventionProperty property, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetComputedColumnSqlConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static object GetDefaultValue(IProperty property);
    [ExtensionAttribute]
public static void SetDefaultValue(IMutableProperty property, object value);
    [ExtensionAttribute]
public static void SetDefaultValue(IConventionProperty property, object value, bool fromDataAnnotation);
    private static object ConvertDefaultValue(IProperty property, object value);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetDefaultValueConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static bool IsFixedLength(IProperty property);
    private static bool GetDefaultIsFixedLength(IProperty property);
    [ExtensionAttribute]
public static void SetIsFixedLength(IMutableProperty property, Nullable`1<bool> fixedLength);
    [ExtensionAttribute]
public static void SetIsFixedLength(IConventionProperty property, Nullable`1<bool> fixedLength, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIsFixedLengthConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static RelationalTypeMapping GetRelationalTypeMapping(IProperty property);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static RelationalTypeMapping FindRelationalMapping(IProperty property);
    [ExtensionAttribute]
public static bool IsColumnNullable(IProperty property);
    private static bool IsTableSplitting(IEntityType entityType);
    [ExtensionAttribute]
public static IProperty FindSharedTableRootPrimaryKeyProperty(IProperty property);
    [ExtensionAttribute]
public static string GetComment(IProperty property);
    [ExtensionAttribute]
public static void SetComment(IMutableProperty property, string comment);
    [ExtensionAttribute]
public static void SetComment(IConventionProperty property, string comment, bool fromDataAnnotation);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalQueryableExtensions : object {
    internal static MethodInfo FromSqlOnQueryableMethodInfo;
    private static RelationalQueryableExtensions();
    [ExtensionAttribute]
[StringFormatMethodAttribute("sql")]
[ObsoleteAttribute("For returning objects from SQL queries using plain strings, use FromSqlRaw instead. For returning objects from SQL queries using interpolated string syntax to create parameters, use FromSqlInterpolated instead. Call either new method directly on the DbSet at the root of the query.", "True")]
public static IQueryable`1<TEntity> FromSql(IQueryable`1<TEntity> source, RawSqlString sql, Object[] parameters);
    [ExtensionAttribute]
[ObsoleteAttribute("For returning objects from SQL queries using plain strings, use FromSqlRaw instead. For returning objects from SQL queries using interpolated string syntax to create parameters, use FromSqlInterpolated instead. Call either new method directly on the DbSet at the root of the query.", "True")]
public static IQueryable`1<TEntity> FromSql(IQueryable`1<TEntity> source, FormattableString sql);
    [ExtensionAttribute]
[StringFormatMethodAttribute("sql")]
public static IQueryable`1<TEntity> FromSqlRaw(DbSet`1<TEntity> source, string sql, Object[] parameters);
    [ExtensionAttribute]
public static IQueryable`1<TEntity> FromSqlInterpolated(DbSet`1<TEntity> source, FormattableString sql);
    [ExtensionAttribute]
internal static IQueryable`1<TEntity> FromSqlOnQueryable(IQueryable`1<TEntity> source, string sql, Object[] parameters);
}
public abstract class Microsoft.EntityFrameworkCore.Scaffolding.DatabaseModelFactory : object {
    public abstract virtual DatabaseModel Create(string connectionString, DatabaseModelFactoryOptions options);
    public abstract virtual DatabaseModel Create(DbConnection connection, DatabaseModelFactoryOptions options);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.DatabaseModelFactoryOptions : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Tables>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Schemas>k__BackingField;
    public IEnumerable`1<string> Tables { get; }
    public IEnumerable`1<string> Schemas { get; }
    public DatabaseModelFactoryOptions(IEnumerable`1<string> tables, IEnumerable`1<string> schemas);
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<string> get_Tables();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<string> get_Schemas();
}
public interface Microsoft.EntityFrameworkCore.Scaffolding.IDatabaseModelFactory {
    public abstract virtual DatabaseModel Create(string connectionString, DatabaseModelFactoryOptions options);
    public abstract virtual DatabaseModel Create(DbConnection connection, DatabaseModelFactoryOptions options);
}
public interface Microsoft.EntityFrameworkCore.Scaffolding.IProviderCodeGeneratorPlugin {
    public abstract virtual MethodCallCodeFragment GenerateProviderOptions();
    public abstract virtual MethodCallCodeFragment GenerateContextOptions();
}
public interface Microsoft.EntityFrameworkCore.Scaffolding.IProviderConfigurationCodeGenerator {
    public abstract virtual MethodCallCodeFragment GenerateProviderOptions();
    public abstract virtual MethodCallCodeFragment GenerateUseProvider(string connectionString, MethodCallCodeFragment providerOptions);
    public abstract virtual MethodCallCodeFragment GenerateContextOptions();
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn : Annotatable {
    [CompilerGeneratedAttribute]
private DatabaseTable <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StoreType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValueSql>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ComputedColumnSql>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ValueGenerated> <ValueGenerated>k__BackingField;
    public DatabaseTable Table { get; public set; }
    public string Name { get; public set; }
    public bool IsNullable { get; public set; }
    public string StoreType { get; public set; }
    public string DefaultValueSql { get; public set; }
    public string ComputedColumnSql { get; public set; }
    public string Comment { get; public set; }
    public Nullable`1<ValueGenerated> ValueGenerated { get; public set; }
    [CompilerGeneratedAttribute]
public virtual DatabaseTable get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(DatabaseTable value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_StoreType();
    [CompilerGeneratedAttribute]
public virtual void set_StoreType(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DefaultValueSql();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultValueSql(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ComputedColumnSql();
    [CompilerGeneratedAttribute]
public virtual void set_ComputedColumnSql(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Comment();
    [CompilerGeneratedAttribute]
public virtual void set_Comment(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<ValueGenerated> get_ValueGenerated();
    [CompilerGeneratedAttribute]
public virtual void set_ValueGenerated(Nullable`1<ValueGenerated> value);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseForeignKey : Annotatable {
    [CompilerGeneratedAttribute]
private DatabaseTable <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private DatabaseTable <PrincipalTable>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DatabaseColumn> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DatabaseColumn> <PrincipalColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReferentialAction> <OnDelete>k__BackingField;
    public DatabaseTable Table { get; public set; }
    public DatabaseTable PrincipalTable { get; public set; }
    public IList`1<DatabaseColumn> Columns { get; }
    public IList`1<DatabaseColumn> PrincipalColumns { get; }
    public string Name { get; public set; }
    public Nullable`1<ReferentialAction> OnDelete { get; public set; }
    [CompilerGeneratedAttribute]
public virtual DatabaseTable get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(DatabaseTable value);
    [CompilerGeneratedAttribute]
public virtual DatabaseTable get_PrincipalTable();
    [CompilerGeneratedAttribute]
public virtual void set_PrincipalTable(DatabaseTable value);
    [CompilerGeneratedAttribute]
public virtual IList`1<DatabaseColumn> get_Columns();
    [CompilerGeneratedAttribute]
public virtual IList`1<DatabaseColumn> get_PrincipalColumns();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<ReferentialAction> get_OnDelete();
    [CompilerGeneratedAttribute]
public virtual void set_OnDelete(Nullable`1<ReferentialAction> value);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseIndex : Annotatable {
    [CompilerGeneratedAttribute]
private DatabaseTable <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DatabaseColumn> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUnique>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    public DatabaseTable Table { get; public set; }
    public string Name { get; public set; }
    public IList`1<DatabaseColumn> Columns { get; }
    public bool IsUnique { get; public set; }
    public string Filter { get; public set; }
    [CompilerGeneratedAttribute]
public virtual DatabaseTable get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(DatabaseTable value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual IList`1<DatabaseColumn> get_Columns();
    [CompilerGeneratedAttribute]
public virtual bool get_IsUnique();
    [CompilerGeneratedAttribute]
public virtual void set_IsUnique(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_Filter();
    [CompilerGeneratedAttribute]
public virtual void set_Filter(string value);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel : Annotatable {
    [CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DatabaseTable> <Tables>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DatabaseSequence> <Sequences>k__BackingField;
    public string DatabaseName { get; public set; }
    public string DefaultSchema { get; public set; }
    public IList`1<DatabaseTable> Tables { get; }
    public IList`1<DatabaseSequence> Sequences { get; }
    [CompilerGeneratedAttribute]
public virtual string get_DatabaseName();
    [CompilerGeneratedAttribute]
public virtual void set_DatabaseName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DefaultSchema();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultSchema(string value);
    [CompilerGeneratedAttribute]
public virtual IList`1<DatabaseTable> get_Tables();
    [CompilerGeneratedAttribute]
public virtual IList`1<DatabaseSequence> get_Sequences();
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabasePrimaryKey : Annotatable {
    [CompilerGeneratedAttribute]
private DatabaseTable <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DatabaseColumn> <Columns>k__BackingField;
    public DatabaseTable Table { get; public set; }
    public string Name { get; public set; }
    public IList`1<DatabaseColumn> Columns { get; }
    [CompilerGeneratedAttribute]
public virtual DatabaseTable get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(DatabaseTable value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual IList`1<DatabaseColumn> get_Columns();
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseSequence : Annotatable {
    [CompilerGeneratedAttribute]
private DatabaseModel <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StoreType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <StartValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <IncrementBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsCyclic>k__BackingField;
    public DatabaseModel Database { get; public set; }
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string StoreType { get; public set; }
    public Nullable`1<long> StartValue { get; public set; }
    public Nullable`1<int> IncrementBy { get; public set; }
    public Nullable`1<long> MinValue { get; public set; }
    public Nullable`1<long> MaxValue { get; public set; }
    public Nullable`1<bool> IsCyclic { get; public set; }
    [CompilerGeneratedAttribute]
public virtual DatabaseModel get_Database();
    [CompilerGeneratedAttribute]
public virtual void set_Database(DatabaseModel value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_StoreType();
    [CompilerGeneratedAttribute]
public virtual void set_StoreType(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_StartValue();
    [CompilerGeneratedAttribute]
public virtual void set_StartValue(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_IncrementBy();
    [CompilerGeneratedAttribute]
public virtual void set_IncrementBy(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_MinValue();
    [CompilerGeneratedAttribute]
public virtual void set_MinValue(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_MaxValue();
    [CompilerGeneratedAttribute]
public virtual void set_MaxValue(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsCyclic();
    [CompilerGeneratedAttribute]
public virtual void set_IsCyclic(Nullable`1<bool> value);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable : Annotatable {
    [CompilerGeneratedAttribute]
private DatabaseModel <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private DatabasePrimaryKey <PrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DatabaseColumn> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DatabaseUniqueConstraint> <UniqueConstraints>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DatabaseIndex> <Indexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DatabaseForeignKey> <ForeignKeys>k__BackingField;
    public DatabaseModel Database { get; public set; }
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Comment { get; public set; }
    public DatabasePrimaryKey PrimaryKey { get; public set; }
    public IList`1<DatabaseColumn> Columns { get; }
    public IList`1<DatabaseUniqueConstraint> UniqueConstraints { get; }
    public IList`1<DatabaseIndex> Indexes { get; }
    public IList`1<DatabaseForeignKey> ForeignKeys { get; }
    [CompilerGeneratedAttribute]
public virtual DatabaseModel get_Database();
    [CompilerGeneratedAttribute]
public virtual void set_Database(DatabaseModel value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Comment();
    [CompilerGeneratedAttribute]
public virtual void set_Comment(string value);
    [CompilerGeneratedAttribute]
public virtual DatabasePrimaryKey get_PrimaryKey();
    [CompilerGeneratedAttribute]
public virtual void set_PrimaryKey(DatabasePrimaryKey value);
    [CompilerGeneratedAttribute]
public virtual IList`1<DatabaseColumn> get_Columns();
    [CompilerGeneratedAttribute]
public virtual IList`1<DatabaseUniqueConstraint> get_UniqueConstraints();
    [CompilerGeneratedAttribute]
public virtual IList`1<DatabaseIndex> get_Indexes();
    [CompilerGeneratedAttribute]
public virtual IList`1<DatabaseForeignKey> get_ForeignKeys();
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseUniqueConstraint : Annotatable {
    [CompilerGeneratedAttribute]
private DatabaseTable <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DatabaseColumn> <Columns>k__BackingField;
    public DatabaseTable Table { get; public set; }
    public string Name { get; public set; }
    public IList`1<DatabaseColumn> Columns { get; }
    [CompilerGeneratedAttribute]
public virtual DatabaseTable get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(DatabaseTable value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual IList`1<DatabaseColumn> get_Columns();
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseView : DatabaseTable {
}
public abstract class Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGenerator : object {
    [CompilerGeneratedAttribute]
private ProviderCodeGeneratorDependencies <Dependencies>k__BackingField;
    protected ProviderCodeGeneratorDependencies Dependencies { get; }
    protected ProviderCodeGenerator(ProviderCodeGeneratorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderCodeGeneratorDependencies get_Dependencies();
    public virtual MethodCallCodeFragment GenerateProviderOptions();
    public abstract virtual MethodCallCodeFragment GenerateUseProvider(string connectionString, MethodCallCodeFragment providerOptions);
    public virtual MethodCallCodeFragment GenerateContextOptions();
}
public class Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGeneratorDependencies : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IProviderCodeGeneratorPlugin> <Plugins>k__BackingField;
    public IEnumerable`1<IProviderCodeGeneratorPlugin> Plugins { get; }
    [EntityFrameworkInternalAttribute]
public ProviderCodeGeneratorDependencies(IEnumerable`1<IProviderCodeGeneratorPlugin> plugins);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IProviderCodeGeneratorPlugin> get_Plugins();
    public ProviderCodeGeneratorDependencies With(IEnumerable`1<IProviderCodeGeneratorPlugin> plugins);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGeneratorPlugin : object {
    public virtual MethodCallCodeFragment GenerateContextOptions();
    public virtual MethodCallCodeFragment GenerateProviderOptions();
}
public class Microsoft.EntityFrameworkCore.Storage.BoolTypeMapping : RelationalTypeMapping {
    public BoolTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected BoolTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
public class Microsoft.EntityFrameworkCore.Storage.ByteArrayTypeMapping : RelationalTypeMapping {
    public ByteArrayTypeMapping(string storeType, Nullable`1<DbType> dbType, Nullable`1<int> size);
    protected ByteArrayTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
public class Microsoft.EntityFrameworkCore.Storage.ByteTypeMapping : RelationalTypeMapping {
    public ByteTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected ByteTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
public class Microsoft.EntityFrameworkCore.Storage.CharTypeMapping : RelationalTypeMapping {
    public CharTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected CharTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
public class Microsoft.EntityFrameworkCore.Storage.DateTimeOffsetTypeMapping : RelationalTypeMapping {
    private static string DateTimeOffsetFormatConst;
    protected string SqlLiteralFormatString { get; }
    public DateTimeOffsetTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected DateTimeOffsetTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string get_SqlLiteralFormatString();
}
public class Microsoft.EntityFrameworkCore.Storage.DateTimeTypeMapping : RelationalTypeMapping {
    private static string DateTimeFormatConst;
    protected string SqlLiteralFormatString { get; }
    public DateTimeTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected DateTimeTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string get_SqlLiteralFormatString();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Storage.DbContextTransactionExtensions : object {
    [ExtensionAttribute]
public static DbTransaction GetDbTransaction(IDbContextTransaction dbContextTransaction);
}
public class Microsoft.EntityFrameworkCore.Storage.DecimalTypeMapping : RelationalTypeMapping {
    private static string DecimalFormatConst;
    protected string SqlLiteralFormatString { get; }
    public DecimalTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected DecimalTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string get_SqlLiteralFormatString();
}
public class Microsoft.EntityFrameworkCore.Storage.DoubleTypeMapping : RelationalTypeMapping {
    public DoubleTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected DoubleTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
public class Microsoft.EntityFrameworkCore.Storage.FloatTypeMapping : RelationalTypeMapping {
    public FloatTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected FloatTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
public class Microsoft.EntityFrameworkCore.Storage.GuidTypeMapping : RelationalTypeMapping {
    protected string SqlLiteralFormatString { get; }
    public GuidTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected GuidTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string get_SqlLiteralFormatString();
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.CompositeRelationalParameter : RelationalParameterBase {
    [CompilerGeneratedAttribute]
private string <InvariantName>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IRelationalParameter> <RelationalParameters>k__BackingField;
    public string InvariantName { get; }
    public IReadOnlyList`1<IRelationalParameter> RelationalParameters { get; }
    public CompositeRelationalParameter(string invariantName, IReadOnlyList`1<IRelationalParameter> relationalParameters);
    [CompilerGeneratedAttribute]
public virtual string get_InvariantName();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<IRelationalParameter> get_RelationalParameters();
    public virtual void AddDbParameter(DbCommand command, object value);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Storage.Internal.DbParameterCollectionExtensions : object {
    [ExtensionAttribute]
public static string FormatParameters(DbParameterCollection parameters, bool logParameterValues);
    public static string FormatParameter(string name, object value, bool hasValue, ParameterDirection direction, DbType dbType, bool nullable, int size, byte precision, byte scale);
    private static void FormatParameterValue(StringBuilder builder, object parameterValue);
    private static bool ShouldShowDbType(bool hasValue, DbType dbType, Type clrType);
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.DynamicRelationalParameter : RelationalParameterBase {
    private IRelationalTypeMappingSource _typeMappingSource;
    [CompilerGeneratedAttribute]
private string <InvariantName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string InvariantName { get; }
    public string Name { get; }
    public DynamicRelationalParameter(string invariantName, string name, IRelationalTypeMappingSource typeMappingSource);
    [CompilerGeneratedAttribute]
public virtual string get_InvariantName();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    public virtual void AddDbParameter(DbCommand command, object value);
}
public interface Microsoft.EntityFrameworkCore.Storage.Internal.INamedConnectionStringResolver {
    public abstract virtual string ResolveConnectionString(string connectionString);
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.NamedConnectionStringResolver : NamedConnectionStringResolverBase {
    private IDbContextOptions _options;
    protected IServiceProvider ApplicationServiceProvider { get; }
    public NamedConnectionStringResolver(IDbContextOptions options);
    protected virtual IServiceProvider get_ApplicationServiceProvider();
}
public abstract class Microsoft.EntityFrameworkCore.Storage.Internal.NamedConnectionStringResolverBase : object {
    private static string DefaultSection;
    protected IServiceProvider ApplicationServiceProvider { get; }
    protected abstract virtual IServiceProvider get_ApplicationServiceProvider();
    public virtual string ResolveConnectionString(string connectionString);
    private static string TryGetConnectionName(string connectionString);
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.RawRelationalParameter : RelationalParameterBase {
    private DbParameter _parameter;
    [CompilerGeneratedAttribute]
private string <InvariantName>k__BackingField;
    public string InvariantName { get; }
    public RawRelationalParameter(string invariantName, DbParameter parameter);
    [CompilerGeneratedAttribute]
public virtual string get_InvariantName();
    public virtual void AddDbParameter(DbCommand command, IReadOnlyDictionary`2<string, object> parameterValues);
    public virtual void AddDbParameter(DbCommand command, object value);
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.RawSqlCommandBuilder : object {
    private IRelationalCommandBuilderFactory _relationalCommandBuilderFactory;
    private ISqlGenerationHelper _sqlGenerationHelper;
    private IParameterNameGeneratorFactory _parameterNameGeneratorFactory;
    public RawSqlCommandBuilder(IRelationalCommandBuilderFactory relationalCommandBuilderFactory, ISqlGenerationHelper sqlGenerationHelper, IParameterNameGeneratorFactory parameterNameGeneratorFactory);
    public virtual IRelationalCommand Build(string sql);
    public virtual RawSqlCommand Build(string sql, IEnumerable`1<object> parameters);
}
public abstract class Microsoft.EntityFrameworkCore.Storage.Internal.RelationalParameterBase : object {
    [CompilerGeneratedAttribute]
private string <InvariantName>k__BackingField;
    public string InvariantName { get; }
    [CompilerGeneratedAttribute]
public virtual string get_InvariantName();
    public abstract virtual void AddDbParameter(DbCommand command, object value);
    public virtual void AddDbParameter(DbCommand command, IReadOnlyDictionary`2<string, object> parameterValues);
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.TypedRelationalValueBufferFactory : object {
    private Func`2<DbDataReader, Object[]> _valueFactory;
    public TypedRelationalValueBufferFactory(RelationalValueBufferFactoryDependencies dependencies, Func`2<DbDataReader, Object[]> valueFactory);
    public sealed virtual ValueBuffer Create(DbDataReader dataReader);
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.TypeMappedPropertyRelationalParameter : TypeMappedRelationalParameter {
    private IClrPropertyGetter _clrPropertyGetter;
    public TypeMappedPropertyRelationalParameter(string invariantName, string name, RelationalTypeMapping relationalTypeMapping, IProperty property);
    public virtual void AddDbParameter(DbCommand command, object value);
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.TypeMappedRelationalParameter : RelationalParameterBase {
    [CompilerGeneratedAttribute]
private string <InvariantName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <RelationalTypeMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsNullable>k__BackingField;
    public string InvariantName { get; }
    public string Name { get; }
    internal RelationalTypeMapping RelationalTypeMapping { get; }
    internal Nullable`1<bool> IsNullable { get; }
    public TypeMappedRelationalParameter(string invariantName, string name, RelationalTypeMapping relationalTypeMapping, Nullable`1<bool> nullable);
    [CompilerGeneratedAttribute]
public virtual string get_InvariantName();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
internal RelationalTypeMapping get_RelationalTypeMapping();
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_IsNullable();
    public virtual void AddDbParameter(DbCommand command, object value);
}
public class Microsoft.EntityFrameworkCore.Storage.IntTypeMapping : RelationalTypeMapping {
    public IntTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected IntTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
public interface Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory {
    public abstract virtual ParameterNameGenerator Create();
}
public interface Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder {
    public abstract virtual IRelationalCommand Build(string sql);
    public abstract virtual RawSqlCommand Build(string sql, IEnumerable`1<object> parameters);
}
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalCommand {
    public string CommandText { get; }
    public IReadOnlyList`1<IRelationalParameter> Parameters { get; }
    public abstract virtual string get_CommandText();
    public abstract virtual IReadOnlyList`1<IRelationalParameter> get_Parameters();
    public abstract virtual int ExecuteNonQuery(RelationalCommandParameterObject parameterObject);
    public abstract virtual Task`1<int> ExecuteNonQueryAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken);
    public abstract virtual object ExecuteScalar(RelationalCommandParameterObject parameterObject);
    public abstract virtual Task`1<object> ExecuteScalarAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken);
    public abstract virtual RelationalDataReader ExecuteReader(RelationalCommandParameterObject parameterObject);
    public abstract virtual Task`1<RelationalDataReader> ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken);
}
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder {
    public IReadOnlyList`1<IRelationalParameter> Parameters { get; }
    public IRelationalTypeMappingSource TypeMappingSource { get; }
    public int CommandTextLength { get; }
    public abstract virtual IReadOnlyList`1<IRelationalParameter> get_Parameters();
    public abstract virtual IRelationalCommandBuilder AddParameter(IRelationalParameter parameter);
    public abstract virtual IRelationalTypeMappingSource get_TypeMappingSource();
    public abstract virtual IRelationalCommand Build();
    public abstract virtual IRelationalCommandBuilder Append(object value);
    public abstract virtual IRelationalCommandBuilder AppendLine();
    public abstract virtual IRelationalCommandBuilder IncrementIndent();
    public abstract virtual IRelationalCommandBuilder DecrementIndent();
    public abstract virtual int get_CommandTextLength();
}
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory {
    public abstract virtual IRelationalCommandBuilder Create();
}
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalConnection {
    public string ConnectionString { get; }
    public DbConnection DbConnection { get; }
    public DbContext Context { get; }
    public Guid ConnectionId { get; }
    public Nullable`1<int> CommandTimeout { get; public set; }
    public bool IsMultipleActiveResultSetsEnabled { get; }
    public IDbContextTransaction CurrentTransaction { get; }
    public SemaphoreSlim Semaphore { get; }
    public abstract virtual string get_ConnectionString();
    public abstract virtual DbConnection get_DbConnection();
    public abstract virtual DbContext get_Context();
    public abstract virtual Guid get_ConnectionId();
    public abstract virtual Nullable`1<int> get_CommandTimeout();
    public abstract virtual void set_CommandTimeout(Nullable`1<int> value);
    public abstract virtual bool Open(bool errorsExpected);
    public abstract virtual Task`1<bool> OpenAsync(CancellationToken cancellationToken, bool errorsExpected);
    public abstract virtual bool Close();
    public abstract virtual Task`1<bool> CloseAsync();
    public abstract virtual bool get_IsMultipleActiveResultSetsEnabled();
    public abstract virtual IDbContextTransaction get_CurrentTransaction();
    public abstract virtual SemaphoreSlim get_Semaphore();
}
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator {
    public abstract virtual bool Exists();
    public abstract virtual Task`1<bool> ExistsAsync(CancellationToken cancellationToken);
    public abstract virtual bool HasTables();
    public abstract virtual Task`1<bool> HasTablesAsync(CancellationToken cancellationToken);
    public abstract virtual void Create();
    public abstract virtual Task CreateAsync(CancellationToken cancellationToken);
    public abstract virtual void Delete();
    public abstract virtual Task DeleteAsync(CancellationToken cancellationToken);
    public abstract virtual void CreateTables();
    public abstract virtual Task CreateTablesAsync(CancellationToken cancellationToken);
    public abstract virtual string GenerateCreateScript();
}
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalParameter {
    public string InvariantName { get; }
    public abstract virtual string get_InvariantName();
    public abstract virtual void AddDbParameter(DbCommand command, object value);
    public abstract virtual void AddDbParameter(DbCommand command, IReadOnlyDictionary`2<string, object> parameterValues);
}
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionFactory {
    public abstract virtual RelationalTransaction Create(IRelationalConnection connection, DbTransaction transaction, Guid transactionId, IDiagnosticsLogger`1<Transaction> logger, bool transactionOwned);
}
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager {
    public abstract virtual IDbContextTransaction BeginTransaction(IsolationLevel isolationLevel);
    public abstract virtual Task`1<IDbContextTransaction> BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken);
    public abstract virtual IDbContextTransaction UseTransaction(DbTransaction transaction);
    public abstract virtual Task`1<IDbContextTransaction> UseTransactionAsync(DbTransaction transaction, CancellationToken cancellationToken);
}
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource {
    public abstract virtual RelationalTypeMapping FindMapping(IProperty property);
    public abstract virtual RelationalTypeMapping FindMapping(MemberInfo member);
    public abstract virtual RelationalTypeMapping FindMapping(Type type);
    public abstract virtual RelationalTypeMapping FindMapping(string storeTypeName);
    public abstract virtual RelationalTypeMapping FindMapping(Type type, string storeTypeName, bool keyOrIndex, Nullable`1<bool> unicode, Nullable`1<int> size, Nullable`1<bool> rowVersion, Nullable`1<bool> fixedLength, Nullable`1<int> precision, Nullable`1<int> scale);
}
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSourcePlugin {
    public abstract virtual RelationalTypeMapping FindMapping(RelationalTypeMappingInfo& modreq(System.Runtime.InteropServices.InAttribute) mappingInfo);
}
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory {
    public abstract virtual ValueBuffer Create(DbDataReader dataReader);
}
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory {
    public abstract virtual IRelationalValueBufferFactory Create(IReadOnlyList`1<TypeMaterializationInfo> types);
}
public interface Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper {
    public string StatementTerminator { get; }
    public string BatchTerminator { get; }
    public string SingleLineCommentToken { get; }
    public abstract virtual string get_StatementTerminator();
    public abstract virtual string get_BatchTerminator();
    public abstract virtual string get_SingleLineCommentToken();
    public abstract virtual string GenerateParameterName(string name);
    public abstract virtual void GenerateParameterName(StringBuilder builder, string name);
    public abstract virtual string GenerateParameterNamePlaceholder(string name);
    public abstract virtual void GenerateParameterNamePlaceholder(StringBuilder builder, string name);
    public abstract virtual string DelimitIdentifier(string identifier);
    public abstract virtual void DelimitIdentifier(StringBuilder builder, string identifier);
    public abstract virtual string DelimitIdentifier(string name, string schema);
    public abstract virtual void DelimitIdentifier(StringBuilder builder, string name, string schema);
    public abstract virtual string GenerateComment(string text);
}
public class Microsoft.EntityFrameworkCore.Storage.LongTypeMapping : RelationalTypeMapping {
    public LongTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected LongTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
public class Microsoft.EntityFrameworkCore.Storage.ParameterNameGenerator : object {
    private int _count;
    public virtual string GenerateNext();
    public virtual void Reset();
}
public class Microsoft.EntityFrameworkCore.Storage.ParameterNameGeneratorDependencies : object {
}
public class Microsoft.EntityFrameworkCore.Storage.ParameterNameGeneratorFactory : object {
    public ParameterNameGeneratorFactory(ParameterNameGeneratorDependencies dependencies);
    public virtual ParameterNameGenerator Create();
}
public class Microsoft.EntityFrameworkCore.Storage.RawSqlCommand : object {
    [CompilerGeneratedAttribute]
private IRelationalCommand <RelationalCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <ParameterValues>k__BackingField;
    public IRelationalCommand RelationalCommand { get; }
    public IReadOnlyDictionary`2<string, object> ParameterValues { get; }
    public RawSqlCommand(IRelationalCommand relationalCommand, IReadOnlyDictionary`2<string, object> parameterValues);
    [CompilerGeneratedAttribute]
public virtual IRelationalCommand get_RelationalCommand();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyDictionary`2<string, object> get_ParameterValues();
}
public abstract class Microsoft.EntityFrameworkCore.Storage.ReaderColumn : object {
    private static ConcurrentDictionary`2<Type, ConstructorInfo> _constructors;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public Type Type { get; }
    public bool IsNullable { get; }
    public string Name { get; }
    protected ReaderColumn(Type type, bool nullable, string name);
    private static ReaderColumn();
    [CompilerGeneratedAttribute]
public virtual Type get_Type();
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    public static ReaderColumn Create(Type type, bool nullable, string columnName, object readFunc);
    private static ConstructorInfo GetConstructor(Type type);
}
public class Microsoft.EntityFrameworkCore.Storage.ReaderColumn`1 : ReaderColumn {
    [CompilerGeneratedAttribute]
private Func`3<DbDataReader, Int32[], T> <GetFieldValue>k__BackingField;
    public Func`3<DbDataReader, Int32[], T> GetFieldValue { get; }
    public ReaderColumn`1(bool nullable, string name, Func`3<DbDataReader, Int32[], T> getFieldValue);
    [CompilerGeneratedAttribute]
public virtual Func`3<DbDataReader, Int32[], T> get_GetFieldValue();
}
public class Microsoft.EntityFrameworkCore.Storage.RelationalCommand : object {
    [CompilerGeneratedAttribute]
private RelationalCommandBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandText>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IRelationalParameter> <Parameters>k__BackingField;
    protected RelationalCommandBuilderDependencies Dependencies { get; }
    public string CommandText { get; }
    public IReadOnlyList`1<IRelationalParameter> Parameters { get; }
    public RelationalCommand(RelationalCommandBuilderDependencies dependencies, string commandText, IReadOnlyList`1<IRelationalParameter> parameters);
    [CompilerGeneratedAttribute]
protected virtual RelationalCommandBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
public virtual string get_CommandText();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<IRelationalParameter> get_Parameters();
    public virtual int ExecuteNonQuery(RelationalCommandParameterObject parameterObject);
    private static void CleanupCommand(DbCommand command, IRelationalConnection connection);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalCommand/<CleanupCommandAsync>d__12")]
private static Task CleanupCommandAsync(DbCommand command, IRelationalConnection connection);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalCommand/<ExecuteNonQueryAsync>d__13")]
public virtual Task`1<int> ExecuteNonQueryAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken);
    public virtual object ExecuteScalar(RelationalCommandParameterObject parameterObject);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalCommand/<ExecuteScalarAsync>d__15")]
public virtual Task`1<object> ExecuteScalarAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken);
    public virtual RelationalDataReader ExecuteReader(RelationalCommandParameterObject parameterObject);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalCommand/<ExecuteReaderAsync>d__17")]
public virtual Task`1<RelationalDataReader> ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken);
    protected virtual DbCommand CreateCommand(RelationalCommandParameterObject parameterObject, Guid commandId, DbCommandMethod commandMethod);
}
public class Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilder : object {
    private List`1<IRelationalParameter> _parameters;
    private IndentedStringBuilder _commandTextBuilder;
    [CompilerGeneratedAttribute]
private RelationalCommandBuilderDependencies <Dependencies>k__BackingField;
    public RelationalCommandBuilderDependencies Dependencies { get; }
    public IRelationalTypeMappingSource TypeMappingSource { get; }
    public IReadOnlyList`1<IRelationalParameter> Parameters { get; }
    public int CommandTextLength { get; }
    public RelationalCommandBuilder(RelationalCommandBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
public virtual RelationalCommandBuilderDependencies get_Dependencies();
    public virtual IRelationalTypeMappingSource get_TypeMappingSource();
    public virtual IRelationalCommand Build();
    public virtual string ToString();
    public virtual IReadOnlyList`1<IRelationalParameter> get_Parameters();
    public virtual IRelationalCommandBuilder AddParameter(IRelationalParameter parameter);
    public virtual IRelationalCommandBuilder Append(object value);
    public virtual IRelationalCommandBuilder AppendLine();
    public virtual IRelationalCommandBuilder IncrementIndent();
    public virtual IRelationalCommandBuilder DecrementIndent();
    public virtual int get_CommandTextLength();
}
public class Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderDependencies : object {
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <TypeMappingSource>k__BackingField;
    public IRelationalTypeMappingSource TypeMappingSource { get; }
    [EntityFrameworkInternalAttribute]
public RelationalCommandBuilderDependencies(IRelationalTypeMappingSource typeMappingSource);
    [CompilerGeneratedAttribute]
public IRelationalTypeMappingSource get_TypeMappingSource();
    public RelationalCommandBuilderDependencies With(IRelationalTypeMappingSource typeMappingSource);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions : object {
    [ExtensionAttribute]
public static IRelationalCommandBuilder AppendLine(IRelationalCommandBuilder commandBuilder, object value);
    [ExtensionAttribute]
public static IRelationalCommandBuilder AppendLines(IRelationalCommandBuilder commandBuilder, object value, bool skipFinalNewline);
    [ExtensionAttribute]
public static IDisposable Indent(IRelationalCommandBuilder commandBuilder);
    [ExtensionAttribute]
public static IRelationalCommandBuilder AddParameter(IRelationalCommandBuilder commandBuilder, string invariantName, string name);
    [ExtensionAttribute]
public static IRelationalCommandBuilder AddParameter(IRelationalCommandBuilder commandBuilder, string invariantName, string name, RelationalTypeMapping typeMapping, bool nullable);
    [ExtensionAttribute]
public static IRelationalCommandBuilder AddParameter(IRelationalCommandBuilder commandBuilder, string invariantName, string name, IProperty property);
    [ExtensionAttribute]
public static IRelationalCommandBuilder AddCompositeParameter(IRelationalCommandBuilder commandBuilder, string invariantName, IReadOnlyList`1<IRelationalParameter> subParameters);
    [ExtensionAttribute]
public static IRelationalCommandBuilder AddRawParameter(IRelationalCommandBuilder commandBuilder, string invariantName, DbParameter dbParameter);
    [ExtensionAttribute]
public static IRelationalCommandBuilder AddPropertyParameter(IRelationalCommandBuilder commandBuilder, string invariantName, string name, IProperty property);
}
public class Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderFactory : object {
    [CompilerGeneratedAttribute]
private RelationalCommandBuilderDependencies <Dependencies>k__BackingField;
    public RelationalCommandBuilderDependencies Dependencies { get; }
    public RelationalCommandBuilderFactory(RelationalCommandBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
public virtual RelationalCommandBuilderDependencies get_Dependencies();
    public virtual IRelationalCommandBuilder Create();
}
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject : ValueType {
    [CompilerGeneratedAttribute]
private IRelationalConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <ParameterValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ReaderColumn> <ReaderColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Command> <Logger>k__BackingField;
    public IRelationalConnection Connection { get; }
    public IReadOnlyDictionary`2<string, object> ParameterValues { get; }
    public IReadOnlyList`1<ReaderColumn> ReaderColumns { get; }
    public DbContext Context { get; }
    public IDiagnosticsLogger`1<Command> Logger { get; }
    [ObsoleteAttribute("Use the overload with the readerColumns parameter")]
public RelationalCommandParameterObject(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, DbContext context, IDiagnosticsLogger`1<Command> logger);
    public RelationalCommandParameterObject(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, IReadOnlyList`1<ReaderColumn> readerColumns, DbContext context, IDiagnosticsLogger`1<Command> logger);
    [CompilerGeneratedAttribute]
public IRelationalConnection get_Connection();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_ParameterValues();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ReaderColumn> get_ReaderColumns();
    [CompilerGeneratedAttribute]
public DbContext get_Context();
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Command> get_Logger();
}
public abstract class Microsoft.EntityFrameworkCore.Storage.RelationalConnection : object {
    private string _connectionString;
    private bool _connectionOwned;
    private int _openedCount;
    private bool _openedInternally;
    private Nullable`1<int> _commandTimeout;
    private Transaction _ambientTransaction;
    private DbConnection _connection;
    [CompilerGeneratedAttribute]
private Guid <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConnectionDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbContextTransaction <CurrentTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private SemaphoreSlim <Semaphore>k__BackingField;
    private Transaction _enlistedTransaction;
    public Guid ConnectionId { get; }
    public DbContext Context { get; }
    protected RelationalConnectionDependencies Dependencies { get; }
    public string ConnectionString { get; }
    public DbConnection DbConnection { get; }
    public IDbContextTransaction CurrentTransaction { get; protected set; }
    public Transaction EnlistedTransaction { get; protected set; }
    protected bool SupportsAmbientTransactions { get; }
    public Nullable`1<int> CommandTimeout { get; public set; }
    public bool IsMultipleActiveResultSetsEnabled { get; }
    public SemaphoreSlim Semaphore { get; }
    protected RelationalConnection(RelationalConnectionDependencies dependencies);
    [CompilerGeneratedAttribute]
public virtual Guid get_ConnectionId();
    [CompilerGeneratedAttribute]
public virtual DbContext get_Context();
    [CompilerGeneratedAttribute]
protected virtual RelationalConnectionDependencies get_Dependencies();
    protected abstract virtual DbConnection CreateDbConnection();
    public virtual string get_ConnectionString();
    public virtual DbConnection get_DbConnection();
    [CompilerGeneratedAttribute]
public virtual IDbContextTransaction get_CurrentTransaction();
    [CompilerGeneratedAttribute]
protected virtual void set_CurrentTransaction(IDbContextTransaction value);
    public virtual Transaction get_EnlistedTransaction();
    protected virtual void set_EnlistedTransaction(Transaction value);
    public virtual void EnlistTransaction(Transaction transaction);
    protected virtual bool get_SupportsAmbientTransactions();
    public virtual Nullable`1<int> get_CommandTimeout();
    public virtual void set_CommandTimeout(Nullable`1<int> value);
    [NotNullAttribute]
public virtual IDbContextTransaction BeginTransaction();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalConnection/<BeginTransactionAsync>d__36")]
[NotNullAttribute]
public virtual Task`1<IDbContextTransaction> BeginTransactionAsync(CancellationToken cancellationToken);
    public virtual IDbContextTransaction BeginTransaction(IsolationLevel isolationLevel);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalConnection/<BeginTransactionAsync>d__38")]
public virtual Task`1<IDbContextTransaction> BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken);
    private void EnsureNoTransactions();
    private IDbContextTransaction CreateRelationalTransaction(DbTransaction transaction, Guid transactionId, bool transactionOwned);
    public virtual IDbContextTransaction UseTransaction(DbTransaction transaction);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalConnection/<UseTransactionAsync>d__42")]
public virtual Task`1<IDbContextTransaction> UseTransactionAsync(DbTransaction transaction, CancellationToken cancellationToken);
    private bool ShouldUseTransaction(DbTransaction transaction);
    public virtual void CommitTransaction();
    public virtual void RollbackTransaction();
    public virtual bool Open(bool errorsExpected);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalConnection/<OpenAsync>d__47")]
public virtual Task`1<bool> OpenAsync(CancellationToken cancellationToken, bool errorsExpected);
    private void ClearTransactions(bool clearAmbient);
    private void OpenDbConnection(bool errorsExpected);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalConnection/<OpenDbConnectionAsync>d__50")]
private Task OpenDbConnectionAsync(bool errorsExpected, CancellationToken cancellationToken);
    private void HandleAmbientTransactions();
    private void HandleTransactionCompleted(object sender, TransactionEventArgs e);
    public virtual bool Close();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalConnection/<CloseAsync>d__54")]
public virtual Task`1<bool> CloseAsync();
    private bool ShouldClose();
    public virtual bool get_IsMultipleActiveResultSetsEnabled();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetState();
    private sealed virtual override Task Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetStateAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public virtual SemaphoreSlim get_Semaphore();
    public virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalConnection/<DisposeAsync>d__65")]
public virtual ValueTask DisposeAsync();
}
public class Microsoft.EntityFrameworkCore.Storage.RelationalConnectionDependencies : object {
    [CompilerGeneratedAttribute]
private IDbContextOptions <ContextOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Transaction> <TransactionLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Connection> <ConnectionLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedConnectionStringResolver <ConnectionStringResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalTransactionFactory <RelationalTransactionFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    public IDbContextOptions ContextOptions { get; }
    public IDiagnosticsLogger`1<Transaction> TransactionLogger { get; }
    public IDiagnosticsLogger`1<Connection> ConnectionLogger { get; }
    public INamedConnectionStringResolver ConnectionStringResolver { get; }
    public IRelationalTransactionFactory RelationalTransactionFactory { get; }
    public ICurrentDbContext CurrentContext { get; }
    [EntityFrameworkInternalAttribute]
public RelationalConnectionDependencies(IDbContextOptions contextOptions, IDiagnosticsLogger`1<Transaction> transactionLogger, IDiagnosticsLogger`1<Connection> connectionLogger, INamedConnectionStringResolver connectionStringResolver, IRelationalTransactionFactory relationalTransactionFactory, ICurrentDbContext currentContext);
    [CompilerGeneratedAttribute]
public IDbContextOptions get_ContextOptions();
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Transaction> get_TransactionLogger();
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Connection> get_ConnectionLogger();
    [CompilerGeneratedAttribute]
public INamedConnectionStringResolver get_ConnectionStringResolver();
    [CompilerGeneratedAttribute]
public IRelationalTransactionFactory get_RelationalTransactionFactory();
    [CompilerGeneratedAttribute]
public ICurrentDbContext get_CurrentContext();
    public RelationalConnectionDependencies With(IDbContextOptions contextOptions);
    public RelationalConnectionDependencies With(IDiagnosticsLogger`1<Connection> connectionLogger);
    public RelationalConnectionDependencies With(IDiagnosticsLogger`1<Transaction> transactionLogger);
    public RelationalConnectionDependencies With(INamedConnectionStringResolver connectionStringResolver);
    public RelationalConnectionDependencies With(IRelationalTransactionFactory relationalTransactionFactory);
    public RelationalConnectionDependencies With(ICurrentDbContext currentContext);
}
public class Microsoft.EntityFrameworkCore.Storage.RelationalDatabase : Database {
    [CompilerGeneratedAttribute]
private RelationalDatabaseDependencies <RelationalDependencies>k__BackingField;
    protected RelationalDatabaseDependencies RelationalDependencies { get; }
    public RelationalDatabase(DatabaseDependencies dependencies, RelationalDatabaseDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalDatabaseDependencies get_RelationalDependencies();
    public virtual int SaveChanges(IList`1<IUpdateEntry> entries);
    public virtual Task`1<int> SaveChangesAsync(IList`1<IUpdateEntry> entries, CancellationToken cancellationToken);
}
public abstract class Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator : object {
    [CompilerGeneratedAttribute]
private RelationalDatabaseCreatorDependencies <Dependencies>k__BackingField;
    protected RelationalDatabaseCreatorDependencies Dependencies { get; }
    protected RelationalDatabaseCreator(RelationalDatabaseCreatorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalDatabaseCreatorDependencies get_Dependencies();
    public abstract virtual bool Exists();
    public virtual Task`1<bool> ExistsAsync(CancellationToken cancellationToken);
    public abstract virtual void Create();
    public virtual Task CreateAsync(CancellationToken cancellationToken);
    public abstract virtual void Delete();
    public virtual Task DeleteAsync(CancellationToken cancellationToken);
    public virtual void CreateTables();
    public virtual Task CreateTablesAsync(CancellationToken cancellationToken);
    protected virtual IReadOnlyList`1<MigrationCommand> GetCreateTablesCommands();
    public abstract virtual bool HasTables();
    public virtual Task`1<bool> HasTablesAsync(CancellationToken cancellationToken);
    public virtual bool EnsureDeleted();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator/<EnsureDeletedAsync>d__16")]
public virtual Task`1<bool> EnsureDeletedAsync(CancellationToken cancellationToken);
    public virtual bool EnsureCreated();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator/<EnsureCreatedAsync>d__18")]
public virtual Task`1<bool> EnsureCreatedAsync(CancellationToken cancellationToken);
    public virtual string GenerateCreateScript();
    public virtual bool CanConnect();
    public virtual Task`1<bool> CanConnectAsync(CancellationToken cancellationToken);
}
public class Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies : object {
    [CompilerGeneratedAttribute]
private IMigrationsModelDiffer <ModelDiffer>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationsSqlGenerator <MigrationsSqlGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private IModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationCommandExecutor <MigrationCommandExecutor>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlGenerationHelper <SqlGenerationHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecutionStrategyFactory <ExecutionStrategyFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Command> <CommandLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    public IMigrationsModelDiffer ModelDiffer { get; }
    public IMigrationsSqlGenerator MigrationsSqlGenerator { get; }
    public IModel Model { get; }
    public IRelationalConnection Connection { get; }
    public IMigrationCommandExecutor MigrationCommandExecutor { get; }
    public ISqlGenerationHelper SqlGenerationHelper { get; }
    public IExecutionStrategyFactory ExecutionStrategyFactory { get; }
    public IDiagnosticsLogger`1<Command> CommandLogger { get; }
    public ICurrentDbContext CurrentContext { get; }
    [EntityFrameworkInternalAttribute]
public RelationalDatabaseCreatorDependencies(IModel model, IRelationalConnection connection, IMigrationsModelDiffer modelDiffer, IMigrationsSqlGenerator migrationsSqlGenerator, IMigrationCommandExecutor migrationCommandExecutor, ISqlGenerationHelper sqlGenerationHelper, IExecutionStrategyFactory executionStrategyFactory, ICurrentDbContext currentContext, IDiagnosticsLogger`1<Command> commandLogger);
    [CompilerGeneratedAttribute]
public IMigrationsModelDiffer get_ModelDiffer();
    [CompilerGeneratedAttribute]
public IMigrationsSqlGenerator get_MigrationsSqlGenerator();
    [CompilerGeneratedAttribute]
public IModel get_Model();
    [CompilerGeneratedAttribute]
public IRelationalConnection get_Connection();
    [CompilerGeneratedAttribute]
public IMigrationCommandExecutor get_MigrationCommandExecutor();
    [CompilerGeneratedAttribute]
public ISqlGenerationHelper get_SqlGenerationHelper();
    [CompilerGeneratedAttribute]
public IExecutionStrategyFactory get_ExecutionStrategyFactory();
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Command> get_CommandLogger();
    [CompilerGeneratedAttribute]
public ICurrentDbContext get_CurrentContext();
    public RelationalDatabaseCreatorDependencies With(IModel model);
    public RelationalDatabaseCreatorDependencies With(IRelationalConnection connection);
    public RelationalDatabaseCreatorDependencies With(IMigrationsModelDiffer modelDiffer);
    public RelationalDatabaseCreatorDependencies With(IMigrationsSqlGenerator migrationsSqlGenerator);
    public RelationalDatabaseCreatorDependencies With(IMigrationCommandExecutor migrationCommandExecutor);
    public RelationalDatabaseCreatorDependencies With(ISqlGenerationHelper sqlGenerationHelper);
    public RelationalDatabaseCreatorDependencies With(IExecutionStrategyFactory executionStrategyFactory);
    public RelationalDatabaseCreatorDependencies With(ICurrentDbContext currentContext);
    public RelationalDatabaseCreatorDependencies With(IDiagnosticsLogger`1<Command> commandLogger);
}
public class Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseDependencies : object {
    [CompilerGeneratedAttribute]
private ICommandBatchPreparer <BatchPreparer>k__BackingField;
    [CompilerGeneratedAttribute]
private IBatchExecutor <BatchExecutor>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalConnection <Connection>k__BackingField;
    public ICommandBatchPreparer BatchPreparer { get; }
    public IBatchExecutor BatchExecutor { get; }
    public IRelationalConnection Connection { get; }
    [EntityFrameworkInternalAttribute]
public RelationalDatabaseDependencies(ICommandBatchPreparer batchPreparer, IBatchExecutor batchExecutor, IRelationalConnection connection);
    [CompilerGeneratedAttribute]
public ICommandBatchPreparer get_BatchPreparer();
    [CompilerGeneratedAttribute]
public IBatchExecutor get_BatchExecutor();
    [CompilerGeneratedAttribute]
public IRelationalConnection get_Connection();
    public RelationalDatabaseDependencies With(ICommandBatchPreparer batchPreparer);
    public RelationalDatabaseDependencies With(IBatchExecutor batchExecutor);
    public RelationalDatabaseDependencies With(IRelationalConnection connection);
}
public class Microsoft.EntityFrameworkCore.Storage.RelationalDataReader : object {
    private IRelationalConnection _connection;
    private DbCommand _command;
    private DbDataReader _reader;
    private Guid _commandId;
    private IDiagnosticsLogger`1<Command> _logger;
    private DateTimeOffset _startTime;
    private Stopwatch _stopwatch;
    private int _readCount;
    private bool _disposed;
    public DbDataReader DbDataReader { get; }
    public DbCommand DbCommand { get; }
    public RelationalDataReader(IRelationalConnection connection, DbCommand command, DbDataReader reader, Guid commandId, IDiagnosticsLogger`1<Command> logger);
    public virtual DbDataReader get_DbDataReader();
    public virtual DbCommand get_DbCommand();
    public virtual bool Read();
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    public virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalDataReader/<DisposeAsync>d__17")]
public virtual ValueTask DisposeAsync();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions : object {
    [ExtensionAttribute]
public static void ExecuteInTransaction(IExecutionStrategy strategy, Action operation, Func`1<bool> verifySucceeded, IsolationLevel isolationLevel);
    [ExtensionAttribute]
public static Task ExecuteInTransactionAsync(IExecutionStrategy strategy, Func`1<Task> operation, Func`1<Task`1<bool>> verifySucceeded, IsolationLevel isolationLevel);
    [ExtensionAttribute]
public static Task ExecuteInTransactionAsync(IExecutionStrategy strategy, Func`2<CancellationToken, Task> operation, Func`2<CancellationToken, Task`1<bool>> verifySucceeded, IsolationLevel isolationLevel, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TResult ExecuteInTransaction(IExecutionStrategy strategy, Func`1<TResult> operation, Func`1<bool> verifySucceeded, IsolationLevel isolationLevel);
    [ExtensionAttribute]
public static Task`1<TResult> ExecuteInTransactionAsync(IExecutionStrategy strategy, Func`2<CancellationToken, Task`1<TResult>> operation, Func`2<CancellationToken, Task`1<bool>> verifySucceeded, IsolationLevel isolationLevel, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void ExecuteInTransaction(IExecutionStrategy strategy, TState state, Action`1<TState> operation, Func`2<TState, bool> verifySucceeded, IsolationLevel isolationLevel);
    [ExtensionAttribute]
public static Task ExecuteInTransactionAsync(IExecutionStrategy strategy, TState state, Func`3<TState, CancellationToken, Task> operation, Func`3<TState, CancellationToken, Task`1<bool>> verifySucceeded, IsolationLevel isolationLevel, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TResult ExecuteInTransaction(IExecutionStrategy strategy, TState state, Func`2<TState, TResult> operation, Func`2<TState, bool> verifySucceeded, IsolationLevel isolationLevel);
    [ExtensionAttribute]
public static Task`1<TResult> ExecuteInTransactionAsync(IExecutionStrategy strategy, TState state, Func`3<TState, CancellationToken, Task`1<TResult>> operation, Func`3<TState, CancellationToken, Task`1<bool>> verifySucceeded, IsolationLevel isolationLevel, CancellationToken cancellationToken);
}
public class Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyFactory : object {
    private Func`2<ExecutionStrategyDependencies, IExecutionStrategy> _createExecutionStrategy;
    [CompilerGeneratedAttribute]
private ExecutionStrategyDependencies <Dependencies>k__BackingField;
    protected ExecutionStrategyDependencies Dependencies { get; }
    public RelationalExecutionStrategyFactory(ExecutionStrategyDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ExecutionStrategyDependencies get_Dependencies();
    protected virtual IExecutionStrategy CreateDefaultStrategy(ExecutionStrategyDependencies dependencies);
    public virtual IExecutionStrategy Create();
}
public abstract class Microsoft.EntityFrameworkCore.Storage.RelationalGeometryTypeMapping`2 : RelationalTypeMapping {
    [CompilerGeneratedAttribute]
private ValueConverter`2<TGeometry, TProvider> <SpatialConverter>k__BackingField;
    protected ValueConverter`2<TGeometry, TProvider> SpatialConverter { get; }
    protected Type WKTReaderType { get; }
    protected RelationalGeometryTypeMapping`2(ValueConverter`2<TGeometry, TProvider> converter, string storeType);
    protected RelationalGeometryTypeMapping`2(RelationalTypeMappingParameters parameters, ValueConverter`2<TGeometry, TProvider> converter);
    [CompilerGeneratedAttribute]
protected virtual ValueConverter`2<TGeometry, TProvider> get_SpatialConverter();
    private static RelationalTypeMappingParameters CreateRelationalTypeMappingParameters(string storeType);
    public virtual DbParameter CreateParameter(DbCommand command, string name, object value, Nullable`1<bool> nullable);
    public virtual Expression CustomizeDataReaderExpression(Expression expression);
    public virtual Expression GenerateCodeLiteral(object value);
    private string CreateWktWithSrid(object value);
    protected abstract virtual Type get_WKTReaderType();
    protected abstract virtual string AsText(object value);
    protected abstract virtual int GetSrid(object value);
}
public class Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelper : object {
    public string StatementTerminator { get; }
    public string BatchTerminator { get; }
    public string SingleLineCommentToken { get; }
    public RelationalSqlGenerationHelper(RelationalSqlGenerationHelperDependencies dependencies);
    public virtual string get_StatementTerminator();
    public virtual string get_BatchTerminator();
    public virtual string get_SingleLineCommentToken();
    public virtual string GenerateParameterName(string name);
    public virtual void GenerateParameterName(StringBuilder builder, string name);
    public virtual string GenerateParameterNamePlaceholder(string name);
    public virtual void GenerateParameterNamePlaceholder(StringBuilder builder, string name);
    public virtual string EscapeIdentifier(string identifier);
    public virtual void EscapeIdentifier(StringBuilder builder, string identifier);
    public virtual string DelimitIdentifier(string identifier);
    public virtual void DelimitIdentifier(StringBuilder builder, string identifier);
    public virtual string DelimitIdentifier(string name, string schema);
    public virtual void DelimitIdentifier(StringBuilder builder, string name, string schema);
    public virtual string GenerateComment(string text);
}
public class Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelperDependencies : object {
}
public class Microsoft.EntityFrameworkCore.Storage.RelationalTransaction : object {
    private DbTransaction _dbTransaction;
    private bool _transactionOwned;
    private bool _connectionClosed;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private IRelationalConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Transaction> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <TransactionId>k__BackingField;
    protected IRelationalConnection Connection { get; }
    protected IDiagnosticsLogger`1<Transaction> Logger { get; }
    public Guid TransactionId { get; }
    private DbTransaction Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.Data.Common.DbTransaction>.Instance { get; }
    public RelationalTransaction(IRelationalConnection connection, DbTransaction transaction, Guid transactionId, IDiagnosticsLogger`1<Transaction> logger, bool transactionOwned);
    [CompilerGeneratedAttribute]
protected virtual IRelationalConnection get_Connection();
    [CompilerGeneratedAttribute]
protected virtual IDiagnosticsLogger`1<Transaction> get_Logger();
    [CompilerGeneratedAttribute]
public virtual Guid get_TransactionId();
    public virtual void Commit();
    public virtual void Rollback();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalTransaction/<CommitAsync>d__16")]
public virtual Task CommitAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalTransaction/<RollbackAsync>d__17")]
public virtual Task RollbackAsync(CancellationToken cancellationToken);
    public virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalTransaction/<DisposeAsync>d__19")]
public virtual ValueTask DisposeAsync();
    protected virtual void ClearTransaction();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalTransaction/<ClearTransactionAsync>d__21")]
protected virtual Task ClearTransactionAsync(CancellationToken cancellationToken);
    private sealed virtual override DbTransaction Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.Data.Common.DbTransaction>.get_Instance();
}
public class Microsoft.EntityFrameworkCore.Storage.RelationalTransactionFactory : object {
    [CompilerGeneratedAttribute]
private RelationalTransactionFactoryDependencies <Dependencies>k__BackingField;
    protected RelationalTransactionFactoryDependencies Dependencies { get; }
    public RelationalTransactionFactory(RelationalTransactionFactoryDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalTransactionFactoryDependencies get_Dependencies();
    public virtual RelationalTransaction Create(IRelationalConnection connection, DbTransaction transaction, Guid transactionId, IDiagnosticsLogger`1<Transaction> logger, bool transactionOwned);
}
public class Microsoft.EntityFrameworkCore.Storage.RelationalTransactionFactoryDependencies : object {
}
public abstract class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping : CoreTypeMapping {
    private bool _quirk19128;
    private static MethodInfo _getFieldValueMethod;
    private static IDictionary`2<Type, MethodInfo> _getXMethods;
    public static RelationalTypeMapping NullMapping;
    [CompilerGeneratedAttribute]
private RelationalTypeMappingParameters <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StoreType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StoreTypeNameBase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SqlLiteralFormatString>k__BackingField;
    protected RelationalTypeMappingParameters Parameters { get; }
    public StoreTypePostfix StoreTypePostfix { get; }
    public string StoreType { get; }
    public string StoreTypeNameBase { get; }
    public Nullable`1<DbType> DbType { get; }
    public bool IsUnicode { get; }
    public Nullable`1<int> Size { get; }
    public bool IsFixedLength { get; }
    protected string SqlLiteralFormatString { get; }
    protected RelationalTypeMapping(RelationalTypeMappingParameters parameters);
    protected RelationalTypeMapping(string storeType, Type clrType, Nullable`1<DbType> dbType, bool unicode, Nullable`1<int> size);
    private static RelationalTypeMapping();
    private static MethodInfo GetDataReaderMethod(string name);
    protected virtual string ProcessStoreType(RelationalTypeMappingParameters parameters, string storeType, string storeTypeNameBase);
    private static string GetBaseName(string storeType);
    [CompilerGeneratedAttribute]
protected virtual RelationalTypeMappingParameters get_Parameters();
    protected abstract virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    public virtual RelationalTypeMapping Clone(string storeType, Nullable`1<int> size);
    public virtual RelationalTypeMapping Clone(Nullable`1<int> precision, Nullable`1<int> scale);
    public virtual CoreTypeMapping Clone(ValueConverter converter);
    public virtual RelationalTypeMapping Clone(RelationalTypeMappingInfo& modreq(System.Runtime.InteropServices.InAttribute) mappingInfo);
    public virtual StoreTypePostfix get_StoreTypePostfix();
    [CompilerGeneratedAttribute]
public virtual string get_StoreType();
    [CompilerGeneratedAttribute]
public virtual string get_StoreTypeNameBase();
    public virtual Nullable`1<DbType> get_DbType();
    public virtual bool get_IsUnicode();
    public virtual Nullable`1<int> get_Size();
    public virtual bool get_IsFixedLength();
    [CompilerGeneratedAttribute]
protected virtual string get_SqlLiteralFormatString();
    public virtual DbParameter CreateParameter(DbCommand command, string name, object value, Nullable`1<bool> nullable);
    private object ConvertUnderlyingEnumValueToEnum(object value);
    protected virtual void ConfigureParameter(DbParameter parameter);
    public virtual string GenerateSqlLiteral(object value);
    public virtual string GenerateProviderValueSqlLiteral(object value);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    public virtual MethodInfo GetDataReaderMethod();
    public static MethodInfo GetDataReaderMethod(Type type);
    public virtual Expression CustomizeDataReaderExpression(Expression expression);
}
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo : ValueType {
    private TypeMappingInfo _coreTypeMappingInfo;
    [CompilerGeneratedAttribute]
private string <StoreTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StoreTypeNameBase>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsFixedLength>k__BackingField;
    public string StoreTypeName { get; }
    public string StoreTypeNameBase { get; }
    public Nullable`1<int> Size { get; }
    public Nullable`1<int> Precision { get; }
    public Nullable`1<int> Scale { get; }
    public Nullable`1<bool> IsFixedLength { get; }
    public bool IsKeyOrIndex { get; }
    public Nullable`1<bool> IsUnicode { get; }
    public Nullable`1<bool> IsRowVersion { get; }
    public Type ClrType { get; }
    public RelationalTypeMappingInfo(IProperty property);
    public RelationalTypeMappingInfo(IReadOnlyList`1<IProperty> principals, string storeTypeName, string storeTypeNameBase, Nullable`1<bool> fallbackUnicode, Nullable`1<bool> fixedLength, Nullable`1<int> fallbackSize, Nullable`1<int> fallbackPrecision, Nullable`1<int> fallbackScale);
    public RelationalTypeMappingInfo(string storeTypeName, string storeTypeNameBase, Nullable`1<bool> unicode, Nullable`1<int> size, Nullable`1<int> precision, Nullable`1<int> scale);
    public RelationalTypeMappingInfo(MemberInfo member, string storeTypeName, string storeTypeNameBase, Nullable`1<bool> unicode, Nullable`1<int> size, Nullable`1<int> precision, Nullable`1<int> scale);
    public RelationalTypeMappingInfo(RelationalTypeMappingInfo& source, ValueConverterInfo& converter);
    public RelationalTypeMappingInfo(Type type, string storeTypeName, string storeTypeNameBase, bool keyOrIndex, Nullable`1<bool> unicode, Nullable`1<int> size, Nullable`1<bool> rowVersion, Nullable`1<bool> fixedLength, Nullable`1<int> precision, Nullable`1<int> scale);
    [CompilerGeneratedAttribute]
public string get_StoreTypeName();
    [CompilerGeneratedAttribute]
public string get_StoreTypeNameBase();
    public Nullable`1<int> get_Size();
    public Nullable`1<int> get_Precision();
    public Nullable`1<int> get_Scale();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsFixedLength();
    public bool get_IsKeyOrIndex();
    public Nullable`1<bool> get_IsUnicode();
    public Nullable`1<bool> get_IsRowVersion();
    public Type get_ClrType();
    public RelationalTypeMappingInfo WithConverter(ValueConverterInfo& converterInfo);
    public sealed virtual bool Equals(RelationalTypeMappingInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource : TypeMappingSourceBase {
    private ConcurrentDictionary`2<ValueTuple`3<RelationalTypeMappingInfo, Type, ValueConverter>, RelationalTypeMapping> _explicitMappings;
    [CompilerGeneratedAttribute]
private RelationalTypeMappingSourceDependencies <RelationalDependencies>k__BackingField;
    protected RelationalTypeMappingSourceDependencies RelationalDependencies { get; }
    protected RelationalTypeMappingSource(TypeMappingSourceDependencies dependencies, RelationalTypeMappingSourceDependencies relationalDependencies);
    protected virtual RelationalTypeMapping FindMapping(RelationalTypeMappingInfo& modreq(System.Runtime.InteropServices.InAttribute) mappingInfo);
    [CompilerGeneratedAttribute]
protected virtual RelationalTypeMappingSourceDependencies get_RelationalDependencies();
    protected virtual CoreTypeMapping FindMapping(TypeMappingInfo& modreq(System.Runtime.InteropServices.InAttribute) mappingInfo);
    private RelationalTypeMapping FindMappingWithConversion(RelationalTypeMappingInfo& mappingInfo, IReadOnlyList`1<IProperty> principals);
    public virtual CoreTypeMapping FindMapping(IProperty property);
    public virtual CoreTypeMapping FindMapping(Type type);
    public virtual CoreTypeMapping FindMapping(MemberInfo member);
    public virtual RelationalTypeMapping FindMapping(string storeTypeName);
    public virtual RelationalTypeMapping FindMapping(Type type, string storeTypeName, bool keyOrIndex, Nullable`1<bool> unicode, Nullable`1<int> size, Nullable`1<bool> rowVersion, Nullable`1<bool> fixedLength, Nullable`1<int> precision, Nullable`1<int> scale);
    private sealed virtual override RelationalTypeMapping Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(IProperty property);
    private sealed virtual override RelationalTypeMapping Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(Type type);
    private sealed virtual override RelationalTypeMapping Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(MemberInfo member);
    protected virtual string ParseStoreTypeName(string storeTypeName, Nullable`1& unicode, Nullable`1& size, Nullable`1& precision, Nullable`1& scale);
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <FindMappingWithConversion>b__7_0(ValueTuple`3<RelationalTypeMappingInfo, Type, ValueConverter> k);
}
public class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceDependencies : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IRelationalTypeMappingSourcePlugin> <Plugins>k__BackingField;
    public IEnumerable`1<IRelationalTypeMappingSourcePlugin> Plugins { get; }
    [EntityFrameworkInternalAttribute]
public RelationalTypeMappingSourceDependencies(IEnumerable`1<IRelationalTypeMappingSourcePlugin> plugins);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IRelationalTypeMappingSourcePlugin> get_Plugins();
    public RelationalTypeMappingSourceDependencies With(IEnumerable`1<IRelationalTypeMappingSourcePlugin> plugins);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceExtensions : object {
    [ExtensionAttribute]
public static RelationalTypeMapping GetMappingForValue(IRelationalTypeMappingSource typeMappingSource, object value);
    [ExtensionAttribute]
public static RelationalTypeMapping GetMapping(IRelationalTypeMappingSource typeMappingSource, IProperty property);
    [ExtensionAttribute]
public static RelationalTypeMapping GetMapping(IRelationalTypeMappingSource typeMappingSource, Type clrType);
    [ExtensionAttribute]
public static RelationalTypeMapping GetMapping(IRelationalTypeMappingSource typeMappingSource, string typeName);
}
public class Microsoft.EntityFrameworkCore.Storage.RelationalValueBufferFactoryDependencies : object {
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <TypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private ICoreSingletonOptions <CoreOptions>k__BackingField;
    public IRelationalTypeMappingSource TypeMappingSource { get; }
    public ICoreSingletonOptions CoreOptions { get; }
    [EntityFrameworkInternalAttribute]
public RelationalValueBufferFactoryDependencies(IRelationalTypeMappingSource typeMappingSource, ICoreSingletonOptions coreOptions);
    [CompilerGeneratedAttribute]
public IRelationalTypeMappingSource get_TypeMappingSource();
    [CompilerGeneratedAttribute]
public ICoreSingletonOptions get_CoreOptions();
    public RelationalValueBufferFactoryDependencies With(IRelationalTypeMappingSource typeMappingSource);
    public RelationalValueBufferFactoryDependencies With(ICoreSingletonOptions coreOptions);
}
public class Microsoft.EntityFrameworkCore.Storage.SByteTypeMapping : RelationalTypeMapping {
    public SByteTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected SByteTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
public class Microsoft.EntityFrameworkCore.Storage.ShortTypeMapping : RelationalTypeMapping {
    public ShortTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected ShortTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
public enum Microsoft.EntityFrameworkCore.Storage.StoreTypePostfix : Enum {
    public int value__;
    public static StoreTypePostfix None;
    public static StoreTypePostfix Size;
    public static StoreTypePostfix Precision;
    public static StoreTypePostfix PrecisionAndScale;
}
public class Microsoft.EntityFrameworkCore.Storage.StringTypeMapping : RelationalTypeMapping {
    public StringTypeMapping(string storeType, Nullable`1<DbType> dbType, bool unicode, Nullable`1<int> size);
    protected StringTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string EscapeSqlLiteral(string literal);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
public class Microsoft.EntityFrameworkCore.Storage.TimeSpanTypeMapping : RelationalTypeMapping {
    protected string SqlLiteralFormatString { get; }
    public TimeSpanTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected TimeSpanTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string get_SqlLiteralFormatString();
}
public class Microsoft.EntityFrameworkCore.Storage.TypedRelationalValueBufferFactoryFactory : object {
    public static ParameterExpression DataReaderParameter;
    private static MethodInfo _getFieldValueMethod;
    private static MethodInfo _isDbNullMethod;
    private static MethodInfo _throwReadValueExceptionMethod;
    [CompilerGeneratedAttribute]
private RelationalValueBufferFactoryDependencies <Dependencies>k__BackingField;
    private ConcurrentDictionary`2<CacheKey, TypedRelationalValueBufferFactory> _cache;
    protected RelationalValueBufferFactoryDependencies Dependencies { get; }
    public TypedRelationalValueBufferFactoryFactory(RelationalValueBufferFactoryDependencies dependencies);
    private static TypedRelationalValueBufferFactoryFactory();
    [CompilerGeneratedAttribute]
protected virtual RelationalValueBufferFactoryDependencies get_Dependencies();
    public virtual IRelationalValueBufferFactory Create(IReadOnlyList`1<TypeMaterializationInfo> types);
    public virtual IReadOnlyList`1<Expression> CreateAssignmentExpressions(IReadOnlyList`1<TypeMaterializationInfo> types);
    private static Func`2<DbDataReader, Object[]> CreateArrayInitializer(CacheKey cacheKey, bool detailedErrorsEnabled);
    private static TValue ThrowReadValueException(Exception exception, object value, IPropertyBase property);
    private static Expression CreateGetValueExpression(Expression dataReaderExpression, int index, TypeMaterializationInfo materializationInfo, bool detailedErrorsEnabled, bool box);
    [CompilerGeneratedAttribute]
private TypedRelationalValueBufferFactory <Create>b__10_0(CacheKey k);
    [CompilerGeneratedAttribute]
private Expression <CreateAssignmentExpressions>b__11_0(TypeMaterializationInfo mi, int i);
}
public class Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo : object {
    [CompilerGeneratedAttribute]
private Type <ProviderClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ModelClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <Mapping>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsFromLeftOuterJoin>k__BackingField;
    public Type ProviderClrType { get; }
    public Type ModelClrType { get; }
    public RelationalTypeMapping Mapping { get; }
    public IProperty Property { get; }
    public int Index { get; }
    public Nullable`1<bool> IsFromLeftOuterJoin { get; }
    public TypeMaterializationInfo(Type modelClrType, IProperty property, IRelationalTypeMappingSource typeMappingSource, int index);
    public TypeMaterializationInfo(Type modelClrType, IProperty property, IRelationalTypeMappingSource typeMappingSource, Nullable`1<bool> fromLeftOuterJoin, int index);
    public TypeMaterializationInfo(Type modelClrType, IProperty property, IRelationalTypeMappingSource typeMappingSource, Nullable`1<bool> fromLeftOuterJoin, int index, RelationalTypeMapping mapping);
    [CompilerGeneratedAttribute]
public virtual Type get_ProviderClrType();
    [CompilerGeneratedAttribute]
public virtual Type get_ModelClrType();
    [CompilerGeneratedAttribute]
public virtual RelationalTypeMapping get_Mapping();
    [CompilerGeneratedAttribute]
public virtual IProperty get_Property();
    [CompilerGeneratedAttribute]
public virtual int get_Index();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsFromLeftOuterJoin();
    protected virtual bool Equals(TypeMaterializationInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Storage.UIntTypeMapping : RelationalTypeMapping {
    public UIntTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected UIntTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
public class Microsoft.EntityFrameworkCore.Storage.ULongTypeMapping : RelationalTypeMapping {
    public ULongTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected ULongTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
public class Microsoft.EntityFrameworkCore.Storage.UShortTypeMapping : RelationalTypeMapping {
    public UShortTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected UShortTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.RelationalConverterMappingHints : ConverterMappingHints {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsFixedLength>k__BackingField;
    public Nullable`1<bool> IsFixedLength { get; }
    public RelationalConverterMappingHints(Nullable`1<int> size, Nullable`1<int> precision, Nullable`1<int> scale, Nullable`1<bool> unicode, Nullable`1<bool> fixedLength, Func`3<IProperty, IEntityType, ValueGenerator> valueGeneratorFactory);
    public virtual ConverterMappingHints With(ConverterMappingHints hints);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsFixedLength();
}
public abstract class Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch : ReaderModificationCommandBatch {
    protected AffectedCountModificationCommandBatch(ModificationCommandBatchFactoryDependencies dependencies);
    protected virtual void Consume(RelationalDataReader reader);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch/<ConsumeAsync>d__2")]
protected virtual Task ConsumeAsync(RelationalDataReader reader, CancellationToken cancellationToken);
    protected virtual int ConsumeResultSetWithPropagation(int commandIndex, RelationalDataReader reader);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch/<ConsumeResultSetWithPropagationAsync>d__4")]
protected virtual Task`1<int> ConsumeResultSetWithPropagationAsync(int commandIndex, RelationalDataReader reader, CancellationToken cancellationToken);
    protected virtual int ConsumeResultSetWithoutPropagation(int commandIndex, RelationalDataReader reader);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch/<ConsumeResultSetWithoutPropagationAsync>d__6")]
protected virtual Task`1<int> ConsumeResultSetWithoutPropagationAsync(int commandIndex, RelationalDataReader reader, CancellationToken cancellationToken);
    private IReadOnlyList`1<IUpdateEntry> AggregateEntries(int endIndex, int commandCount);
    protected virtual void ThrowAggregateUpdateConcurrencyException(int commandIndex, int expectedRowsAffected, int rowsAffected);
}
public class Microsoft.EntityFrameworkCore.Update.ColumnModification : object {
    private string _parameterName;
    private string _originalParameterName;
    private Func`1<string> _generateParameterName;
    private object _originalValue;
    private object _value;
    private bool _useParameters;
    private bool _sensitiveLoggingEnabled;
    private List`1<ColumnModification> _sharedColumnModifications;
    [CompilerGeneratedAttribute]
private IUpdateEntry <Entry>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRead>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWrite>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCondition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConcurrencyToken>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    public IUpdateEntry Entry { get; }
    public IProperty Property { get; }
    public bool IsRead { get; }
    public bool IsWrite { get; }
    public bool IsCondition { get; }
    public bool IsConcurrencyToken { get; }
    public bool IsKey { get; }
    public bool UseOriginalValueParameter { get; }
    public bool UseCurrentValueParameter { get; }
    public string ParameterName { get; }
    public string OriginalParameterName { get; }
    public string ColumnName { get; }
    public object OriginalValue { get; }
    public object Value { get; public set; }
    public ColumnModification(IUpdateEntry entry, IProperty property, Func`1<string> generateParameterName, bool isRead, bool isWrite, bool isKey, bool isCondition, bool isConcurrencyToken, bool sensitiveLoggingEnabled);
    public ColumnModification(string columnName, object originalValue, object value, IProperty property, bool isRead, bool isWrite, bool isKey, bool isCondition, bool sensitiveLoggingEnabled);
    [CompilerGeneratedAttribute]
public virtual IUpdateEntry get_Entry();
    [CompilerGeneratedAttribute]
public virtual IProperty get_Property();
    [CompilerGeneratedAttribute]
public virtual bool get_IsRead();
    [CompilerGeneratedAttribute]
public virtual bool get_IsWrite();
    [CompilerGeneratedAttribute]
public virtual bool get_IsCondition();
    [CompilerGeneratedAttribute]
public virtual bool get_IsConcurrencyToken();
    [CompilerGeneratedAttribute]
public virtual bool get_IsKey();
    public virtual bool get_UseOriginalValueParameter();
    public virtual bool get_UseCurrentValueParameter();
    public virtual string get_ParameterName();
    public virtual string get_OriginalParameterName();
    [CompilerGeneratedAttribute]
public virtual string get_ColumnName();
    public virtual object get_OriginalValue();
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public virtual void AddSharedColumnModification(ColumnModification modification);
}
public interface Microsoft.EntityFrameworkCore.Update.IBatchExecutor {
    public abstract virtual int Execute(IEnumerable`1<ModificationCommandBatch> commandBatches, IRelationalConnection connection);
    public abstract virtual Task`1<int> ExecuteAsync(IEnumerable`1<ModificationCommandBatch> commandBatches, IRelationalConnection connection, CancellationToken cancellationToken);
}
public interface Microsoft.EntityFrameworkCore.Update.ICommandBatchPreparer {
    public abstract virtual IEnumerable`1<ModificationCommandBatch> BatchCommands(IList`1<IUpdateEntry> entries, IUpdateAdapter updateAdapter);
}
public interface Microsoft.EntityFrameworkCore.Update.IModificationCommandBatchFactory {
    public abstract virtual ModificationCommandBatch Create();
}
public class Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor : object {
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecutionStrategyFactory <ExecutionStrategyFactory>k__BackingField;
    public ICurrentDbContext CurrentContext { get; }
    [ObsoleteAttribute("This isn't used anymore")]
protected IExecutionStrategyFactory ExecutionStrategyFactory { get; }
    public BatchExecutor(ICurrentDbContext currentContext, IExecutionStrategyFactory executionStrategyFactory);
    [CompilerGeneratedAttribute]
public virtual ICurrentDbContext get_CurrentContext();
    [CompilerGeneratedAttribute]
protected virtual IExecutionStrategyFactory get_ExecutionStrategyFactory();
    public virtual int Execute(IEnumerable`1<ModificationCommandBatch> commandBatches, IRelationalConnection connection);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor/<ExecuteAsync>d__8")]
public virtual Task`1<int> ExecuteAsync(IEnumerable`1<ModificationCommandBatch> commandBatches, IRelationalConnection connection, CancellationToken cancellationToken);
}
public class Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer : object {
    private IModificationCommandBatchFactory _modificationCommandBatchFactory;
    private IParameterNameGeneratorFactory _parameterNameGeneratorFactory;
    private IComparer`1<ModificationCommand> _modificationCommandComparer;
    private IKeyValueIndexFactorySource _keyValueIndexFactorySource;
    private int _minBatchSize;
    private bool _sensitiveLoggingEnabled;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyDictionary`2<ValueTuple`2<string, string>, SharedTableEntryMapFactory`1<ModificationCommand>> _sharedTableEntryMapFactories;
    [CompilerGeneratedAttribute]
private CommandBatchPreparerDependencies <Dependencies>k__BackingField;
    private CommandBatchPreparerDependencies Dependencies { get; }
    public CommandBatchPreparer(CommandBatchPreparerDependencies dependencies);
    [CompilerGeneratedAttribute]
private CommandBatchPreparerDependencies get_Dependencies();
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer/<BatchCommands>d__11")]
public virtual IEnumerable`1<ModificationCommandBatch> BatchCommands(IList`1<IUpdateEntry> entries, IUpdateAdapter updateAdapter);
    private ModificationCommandBatch StartNewBatch(ParameterNameGenerator parameterNameGenerator, ModificationCommand modificationCommand);
    protected virtual IEnumerable`1<ModificationCommand> CreateModificationCommands(IList`1<IUpdateEntry> entries, IUpdateAdapter updateAdapter, Func`1<string> generateParameterName);
    private void AddUnchangedSharingEntries(Dictionary`2<ValueTuple`2<string, string>, SharedTableEntryMap`1<ModificationCommand>> sharedTablesCommandsMap, IList`1<IUpdateEntry> entries);
    protected virtual IReadOnlyList`1<List`1<ModificationCommand>> TopologicalSort(IEnumerable`1<ModificationCommand> commands);
    private string FormatCycle(IReadOnlyList`1<Tuple`3<ModificationCommand, ModificationCommand, IEnumerable`1<IAnnotatable>>> data);
    private void Format(ModificationCommand command, StringBuilder builder);
    private void Format(IForeignKey foreignKey, ModificationCommand source, ModificationCommand target, StringBuilder builder);
    private void Format(IIndex index, ModificationCommand source, ModificationCommand target, StringBuilder builder);
    private Dictionary`2<IKeyValueIndex, List`1<ModificationCommand>> CreateKeyValuePredecessorMap(Graph`1<ModificationCommand> commandGraph);
    private void AddForeignKeyEdges(Multigraph`2<ModificationCommand, IAnnotatable> commandGraph, Dictionary`2<IKeyValueIndex, List`1<ModificationCommand>> predecessorsMap);
    private static void AddMatchingPredecessorEdge(Dictionary`2<IKeyValueIndex, List`1<ModificationCommand>> predecessorsMap, IKeyValueIndex dependentKeyValue, Multigraph`2<ModificationCommand, IAnnotatable> commandGraph, ModificationCommand command, IForeignKey foreignKey);
    private void AddUniqueValueEdges(Multigraph`2<ModificationCommand, IAnnotatable> commandGraph);
}
public class Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparerDependencies : object {
    [CompilerGeneratedAttribute]
private IModificationCommandBatchFactory <ModificationCommandBatchFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IParameterNameGeneratorFactory <ParameterNameGeneratorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IComparer`1<ModificationCommand> <ModificationCommandComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private IKeyValueIndexFactorySource <KeyValueIndexFactorySource>k__BackingField;
    [CompilerGeneratedAttribute]
private ILoggingOptions <LoggingOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Update> <UpdateLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbContextOptions <Options>k__BackingField;
    public IModificationCommandBatchFactory ModificationCommandBatchFactory { get; }
    public IParameterNameGeneratorFactory ParameterNameGeneratorFactory { get; }
    public IComparer`1<ModificationCommand> ModificationCommandComparer { get; }
    public IKeyValueIndexFactorySource KeyValueIndexFactorySource { get; }
    public ILoggingOptions LoggingOptions { get; }
    public IDiagnosticsLogger`1<Update> UpdateLogger { get; }
    public IDbContextOptions Options { get; }
    [EntityFrameworkInternalAttribute]
public CommandBatchPreparerDependencies(IModificationCommandBatchFactory modificationCommandBatchFactory, IParameterNameGeneratorFactory parameterNameGeneratorFactory, IComparer`1<ModificationCommand> modificationCommandComparer, IKeyValueIndexFactorySource keyValueIndexFactorySource, ILoggingOptions loggingOptions, IDiagnosticsLogger`1<Update> updateLogger, IDbContextOptions options);
    [CompilerGeneratedAttribute]
public IModificationCommandBatchFactory get_ModificationCommandBatchFactory();
    [CompilerGeneratedAttribute]
public IParameterNameGeneratorFactory get_ParameterNameGeneratorFactory();
    [CompilerGeneratedAttribute]
public IComparer`1<ModificationCommand> get_ModificationCommandComparer();
    [CompilerGeneratedAttribute]
public IKeyValueIndexFactorySource get_KeyValueIndexFactorySource();
    [CompilerGeneratedAttribute]
public ILoggingOptions get_LoggingOptions();
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Update> get_UpdateLogger();
    [CompilerGeneratedAttribute]
public IDbContextOptions get_Options();
    public CommandBatchPreparerDependencies With(IModificationCommandBatchFactory modificationCommandBatchFactory);
    public CommandBatchPreparerDependencies With(IParameterNameGeneratorFactory parameterNameGeneratorFactory);
    public CommandBatchPreparerDependencies With(IComparer`1<ModificationCommand> modificationCommandComparer);
    public CommandBatchPreparerDependencies With(IKeyValueIndexFactorySource keyValueIndexFactorySource);
    public CommandBatchPreparerDependencies With(ILoggingOptions loggingOptions);
    public CommandBatchPreparerDependencies With(IDiagnosticsLogger`1<Update> updateLogger);
    public CommandBatchPreparerDependencies With(IDbContextOptions options);
}
public interface Microsoft.EntityFrameworkCore.Update.Internal.IKeyValueIndex {
    public abstract virtual IKeyValueIndex WithOriginalValuesFlag();
}
public interface Microsoft.EntityFrameworkCore.Update.Internal.IKeyValueIndexFactory {
    public abstract virtual IKeyValueIndex CreatePrincipalKeyValue(InternalEntityEntry entry, IForeignKey foreignKey);
    public abstract virtual IKeyValueIndex CreatePrincipalKeyValueFromOriginalValues(InternalEntityEntry entry, IForeignKey foreignKey);
    public abstract virtual IKeyValueIndex CreateDependentKeyValue(InternalEntityEntry entry, IForeignKey foreignKey);
    public abstract virtual IKeyValueIndex CreateDependentKeyValueFromOriginalValues(InternalEntityEntry entry, IForeignKey foreignKey);
}
public interface Microsoft.EntityFrameworkCore.Update.Internal.IKeyValueIndexFactorySource {
    public abstract virtual IKeyValueIndexFactory GetKeyValueIndexFactory(IKey key);
}
public class Microsoft.EntityFrameworkCore.Update.Internal.KeyValueIndex`1 : object {
    private IForeignKey _foreignKey;
    private TKey _keyValue;
    private IEqualityComparer`1<TKey> _keyComparer;
    private bool _fromOriginalValues;
    public KeyValueIndex`1(IForeignKey foreignKey, TKey keyValue, IEqualityComparer`1<TKey> keyComparer, bool fromOriginalValues);
    public sealed virtual IKeyValueIndex WithOriginalValuesFlag();
    private bool Equals(KeyValueIndex`1<TKey> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Update.Internal.KeyValueIndexFactory`1 : object {
    private IPrincipalKeyValueFactory`1<TKey> _principalKeyValueFactory;
    public KeyValueIndexFactory`1(IPrincipalKeyValueFactory`1<TKey> principalKeyValueFactory);
    public virtual IKeyValueIndex CreatePrincipalKeyValue(InternalEntityEntry entry, IForeignKey foreignKey);
    public virtual IKeyValueIndex CreatePrincipalKeyValueFromOriginalValues(InternalEntityEntry entry, IForeignKey foreignKey);
    public virtual IKeyValueIndex CreateDependentKeyValue(InternalEntityEntry entry, IForeignKey foreignKey);
    public virtual IKeyValueIndex CreateDependentKeyValueFromOriginalValues(InternalEntityEntry entry, IForeignKey foreignKey);
}
public class Microsoft.EntityFrameworkCore.Update.Internal.KeyValueIndexFactorySource : IdentityMapFactoryFactoryBase {
    private ConcurrentDictionary`2<IKey, IKeyValueIndexFactory> _factories;
    public virtual IKeyValueIndexFactory GetKeyValueIndexFactory(IKey key);
    public virtual IKeyValueIndexFactory Create(IKey key);
    [UsedImplicitlyAttribute]
private static IKeyValueIndexFactory CreateFactory(IKey key);
}
public class Microsoft.EntityFrameworkCore.Update.Internal.ModificationCommandComparer : object {
    private ConcurrentDictionary`2<Type, Func`3<object, object, int>> _comparers;
    private static MethodInfo _compareMethod;
    private static MethodInfo _structuralCompareMethod;
    private static ModificationCommandComparer();
    public virtual int Compare(ModificationCommand x, ModificationCommand y);
    protected virtual Func`3<object, object, int> GetComparer(Type type);
    private static int CompareValue(T x, T y);
    private static int CompareStructureValue(T x, T y);
}
public class Microsoft.EntityFrameworkCore.Update.Internal.SharedTableEntryMap`1 : object {
    private IUpdateAdapter _updateAdapter;
    private IReadOnlyDictionary`2<IEntityType, IReadOnlyList`1<IEntityType>> _principals;
    private IReadOnlyDictionary`2<IEntityType, IReadOnlyList`1<IEntityType>> _dependents;
    private string _name;
    private string _schema;
    private SharedTableEntryValueFactory`1<TValue> _createElement;
    private IComparer`1<IUpdateEntry> _comparer;
    private Dictionary`2<IUpdateEntry, TValue> _entryValueMap;
    public IEnumerable`1<TValue> Values { get; }
    public SharedTableEntryMap`1(IUpdateAdapter updateAdapter, IReadOnlyDictionary`2<IEntityType, IReadOnlyList`1<IEntityType>> principals, IReadOnlyDictionary`2<IEntityType, IReadOnlyList`1<IEntityType>> dependents, string name, string schema, SharedTableEntryValueFactory`1<TValue> createElement);
    public static Dictionary`2<ValueTuple`2<string, string>, SharedTableEntryMapFactory`1<TValue>> CreateSharedTableEntryMapFactories(IModel model, IUpdateAdapter updateAdapter);
    public static SharedTableEntryMapFactory`1<TValue> CreateSharedTableEntryMapFactory(IReadOnlyList`1<IEntityType> entityTypes, IUpdateAdapter updateAdapter, string tableName, string schema);
    public virtual IEnumerable`1<TValue> get_Values();
    public virtual TValue GetOrAddValue(IUpdateEntry entry);
    public virtual IReadOnlyList`1<IEntityType> GetPrincipals(IEntityType entityType);
    public virtual IReadOnlyList`1<IEntityType> GetDependents(IEntityType entityType);
    private IUpdateEntry GetMainEntry(IUpdateEntry entry);
    public virtual IReadOnlyList`1<IUpdateEntry> GetAllEntries(IUpdateEntry entry);
    private void AddAllDependentsInclusive(IUpdateEntry entry, List`1<IUpdateEntry> entries);
}
public class Microsoft.EntityFrameworkCore.Update.Internal.SharedTableEntryMapFactory`1 : MulticastDelegate {
    public SharedTableEntryMapFactory`1(object object, IntPtr method);
    public virtual SharedTableEntryMap`1<TValue> Invoke(SharedTableEntryValueFactory`1<TValue> valueFactory);
    public virtual IAsyncResult BeginInvoke(SharedTableEntryValueFactory`1<TValue> valueFactory, AsyncCallback callback, object object);
    public virtual SharedTableEntryMap`1<TValue> EndInvoke(IAsyncResult result);
}
public class Microsoft.EntityFrameworkCore.Update.Internal.SharedTableEntryValueFactory`1 : MulticastDelegate {
    public SharedTableEntryValueFactory`1(object object, IntPtr method);
    public virtual TValue Invoke(string tableName, string schema, IComparer`1<IUpdateEntry> comparer);
    public virtual IAsyncResult BeginInvoke(string tableName, string schema, IComparer`1<IUpdateEntry> comparer, AsyncCallback callback, object object);
    public virtual TValue EndInvoke(IAsyncResult result);
}
public interface Microsoft.EntityFrameworkCore.Update.IUpdateSqlGenerator {
    public abstract virtual string GenerateNextSequenceValueOperation(string name, string schema);
    public abstract virtual void AppendNextSequenceValueOperation(StringBuilder commandStringBuilder, string name, string schema);
    public abstract virtual void AppendBatchHeader(StringBuilder commandStringBuilder);
    public abstract virtual ResultSetMapping AppendDeleteOperation(StringBuilder commandStringBuilder, ModificationCommand command, int commandPosition);
    public abstract virtual ResultSetMapping AppendInsertOperation(StringBuilder commandStringBuilder, ModificationCommand command, int commandPosition);
    public abstract virtual ResultSetMapping AppendUpdateOperation(StringBuilder commandStringBuilder, ModificationCommand command, int commandPosition);
}
public class Microsoft.EntityFrameworkCore.Update.ModificationCommand : object {
    private Func`1<string> _generateParameterName;
    private bool _sensitiveLoggingEnabled;
    private IComparer`1<IUpdateEntry> _comparer;
    private List`1<IUpdateEntry> _entries;
    private IReadOnlyList`1<ColumnModification> _columnModifications;
    private bool _requiresResultPropagation;
    private bool _mainEntryAdded;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    public string TableName { get; }
    public string Schema { get; }
    public IReadOnlyList`1<IUpdateEntry> Entries { get; }
    public EntityState EntityState { get; }
    public IReadOnlyList`1<ColumnModification> ColumnModifications { get; }
    public bool RequiresResultPropagation { get; }
    public ModificationCommand(string name, string schema, Func`1<string> generateParameterName, bool sensitiveLoggingEnabled, IComparer`1<IUpdateEntry> comparer);
    public ModificationCommand(string name, string schema, IReadOnlyList`1<ColumnModification> columnModifications, bool sensitiveLoggingEnabled);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    public virtual IReadOnlyList`1<IUpdateEntry> get_Entries();
    public virtual EntityState get_EntityState();
    public virtual IReadOnlyList`1<ColumnModification> get_ColumnModifications();
    public virtual bool get_RequiresResultPropagation();
    [ObsoleteAttribute("Use AddEntry with most parameters")]
public virtual void AddEntry(IUpdateEntry entry);
    public virtual void AddEntry(IUpdateEntry entry, bool mainEntry);
    private void ValidateState(IUpdateEntry mainEntry, IUpdateEntry entry);
    private IReadOnlyList`1<ColumnModification> GenerateColumnModifications();
    private static void InitializeSharedColumns(IUpdateEntry entry, bool updating, Dictionary`2<string, ColumnValuePropagator> columnMap);
    public virtual void PropagateResults(ValueBuffer valueBuffer);
}
public abstract class Microsoft.EntityFrameworkCore.Update.ModificationCommandBatch : object {
    public IReadOnlyList`1<ModificationCommand> ModificationCommands { get; }
    public abstract virtual IReadOnlyList`1<ModificationCommand> get_ModificationCommands();
    public abstract virtual bool AddCommand(ModificationCommand modificationCommand);
    public abstract virtual void Execute(IRelationalConnection connection);
    public abstract virtual Task ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken);
}
public class Microsoft.EntityFrameworkCore.Update.ModificationCommandBatchFactoryDependencies : object {
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Command> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalCommandBuilderFactory <CommandBuilderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlGenerationHelper <SqlGenerationHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IUpdateSqlGenerator <UpdateSqlGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalValueBufferFactoryFactory <ValueBufferFactoryFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    public IDiagnosticsLogger`1<Command> Logger { get; }
    public IRelationalCommandBuilderFactory CommandBuilderFactory { get; }
    public ISqlGenerationHelper SqlGenerationHelper { get; }
    public IUpdateSqlGenerator UpdateSqlGenerator { get; }
    public IRelationalValueBufferFactoryFactory ValueBufferFactoryFactory { get; }
    public ICurrentDbContext CurrentContext { get; }
    [EntityFrameworkInternalAttribute]
public ModificationCommandBatchFactoryDependencies(IRelationalCommandBuilderFactory commandBuilderFactory, ISqlGenerationHelper sqlGenerationHelper, IUpdateSqlGenerator updateSqlGenerator, IRelationalValueBufferFactoryFactory valueBufferFactoryFactory, ICurrentDbContext currentContext, IDiagnosticsLogger`1<Command> logger);
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Command> get_Logger();
    [CompilerGeneratedAttribute]
public IRelationalCommandBuilderFactory get_CommandBuilderFactory();
    [CompilerGeneratedAttribute]
public ISqlGenerationHelper get_SqlGenerationHelper();
    [CompilerGeneratedAttribute]
public IUpdateSqlGenerator get_UpdateSqlGenerator();
    [CompilerGeneratedAttribute]
public IRelationalValueBufferFactoryFactory get_ValueBufferFactoryFactory();
    [CompilerGeneratedAttribute]
public ICurrentDbContext get_CurrentContext();
    public ModificationCommandBatchFactoryDependencies With(IDiagnosticsLogger`1<Command> logger);
    public ModificationCommandBatchFactoryDependencies With(IRelationalValueBufferFactoryFactory valueBufferFactoryFactory);
    public ModificationCommandBatchFactoryDependencies With(IRelationalCommandBuilderFactory commandBuilderFactory);
    public ModificationCommandBatchFactoryDependencies With(ISqlGenerationHelper sqlGenerationHelper);
    public ModificationCommandBatchFactoryDependencies With(IUpdateSqlGenerator updateSqlGenerator);
    public ModificationCommandBatchFactoryDependencies With(ICurrentDbContext currentContext);
}
public abstract class Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch : ModificationCommandBatch {
    private List`1<ModificationCommand> _modificationCommands;
    [CompilerGeneratedAttribute]
private ModificationCommandBatchFactoryDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private StringBuilder <CachedCommandText>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LastCachedCommandIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ResultSetMapping> <CommandResultSet>k__BackingField;
    public ModificationCommandBatchFactoryDependencies Dependencies { get; }
    protected IUpdateSqlGenerator UpdateSqlGenerator { get; }
    protected StringBuilder CachedCommandText { get; protected set; }
    protected int LastCachedCommandIndex { get; protected set; }
    public IReadOnlyList`1<ModificationCommand> ModificationCommands { get; }
    protected IList`1<ResultSetMapping> CommandResultSet { get; }
    protected ReaderModificationCommandBatch(ModificationCommandBatchFactoryDependencies dependencies);
    [CompilerGeneratedAttribute]
public virtual ModificationCommandBatchFactoryDependencies get_Dependencies();
    protected virtual IUpdateSqlGenerator get_UpdateSqlGenerator();
    [CompilerGeneratedAttribute]
protected virtual StringBuilder get_CachedCommandText();
    [CompilerGeneratedAttribute]
protected virtual void set_CachedCommandText(StringBuilder value);
    [CompilerGeneratedAttribute]
protected virtual int get_LastCachedCommandIndex();
    [CompilerGeneratedAttribute]
protected virtual void set_LastCachedCommandIndex(int value);
    public virtual IReadOnlyList`1<ModificationCommand> get_ModificationCommands();
    [CompilerGeneratedAttribute]
protected virtual IList`1<ResultSetMapping> get_CommandResultSet();
    public virtual bool AddCommand(ModificationCommand modificationCommand);
    protected virtual void ResetCommandText();
    protected abstract virtual bool CanAddCommand(ModificationCommand modificationCommand);
    protected abstract virtual bool IsCommandTextValid();
    protected virtual string GetCommandText();
    protected virtual void UpdateCachedCommandText(int commandPosition);
    protected virtual int GetParameterCount();
    protected virtual RawSqlCommand CreateStoreCommand();
    public virtual void Execute(IRelationalConnection connection);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch/<ExecuteAsync>d__29")]
public virtual Task ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken);
    protected abstract virtual void Consume(RelationalDataReader reader);
    protected abstract virtual Task ConsumeAsync(RelationalDataReader reader, CancellationToken cancellationToken);
    protected virtual IRelationalValueBufferFactory CreateValueBufferFactory(IReadOnlyList`1<ColumnModification> columnModifications);
}
public enum Microsoft.EntityFrameworkCore.Update.ResultSetMapping : Enum {
    public int value__;
    public static ResultSetMapping NoResultSet;
    public static ResultSetMapping NotLastInResultSet;
    public static ResultSetMapping LastInResultSet;
}
public class Microsoft.EntityFrameworkCore.Update.SingularModificationCommandBatch : AffectedCountModificationCommandBatch {
    public SingularModificationCommandBatch(ModificationCommandBatchFactoryDependencies dependencies);
    protected virtual bool CanAddCommand(ModificationCommand modificationCommand);
    protected virtual bool IsCommandTextValid();
}
public abstract class Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator : object {
    [CompilerGeneratedAttribute]
private UpdateSqlGeneratorDependencies <Dependencies>k__BackingField;
    protected UpdateSqlGeneratorDependencies Dependencies { get; }
    protected ISqlGenerationHelper SqlGenerationHelper { get; }
    protected UpdateSqlGenerator(UpdateSqlGeneratorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual UpdateSqlGeneratorDependencies get_Dependencies();
    protected virtual ISqlGenerationHelper get_SqlGenerationHelper();
    public virtual ResultSetMapping AppendInsertOperation(StringBuilder commandStringBuilder, ModificationCommand command, int commandPosition);
    public virtual ResultSetMapping AppendUpdateOperation(StringBuilder commandStringBuilder, ModificationCommand command, int commandPosition);
    public virtual ResultSetMapping AppendDeleteOperation(StringBuilder commandStringBuilder, ModificationCommand command, int commandPosition);
    protected virtual void AppendInsertCommand(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<ColumnModification> writeOperations);
    protected virtual void AppendUpdateCommand(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<ColumnModification> writeOperations, IReadOnlyList`1<ColumnModification> conditionOperations);
    protected virtual void AppendDeleteCommand(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<ColumnModification> conditionOperations);
    protected virtual ResultSetMapping AppendSelectAffectedCountCommand(StringBuilder commandStringBuilder, string name, string schema, int commandPosition);
    protected virtual ResultSetMapping AppendSelectAffectedCommand(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<ColumnModification> readOperations, IReadOnlyList`1<ColumnModification> conditionOperations, int commandPosition);
    protected virtual void AppendInsertCommandHeader(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<ColumnModification> operations);
    protected virtual void AppendDeleteCommandHeader(StringBuilder commandStringBuilder, string name, string schema);
    protected virtual void AppendUpdateCommandHeader(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<ColumnModification> operations);
    protected virtual void AppendSelectCommandHeader(StringBuilder commandStringBuilder, IReadOnlyList`1<ColumnModification> operations);
    protected virtual void AppendFromClause(StringBuilder commandStringBuilder, string name, string schema);
    protected virtual void AppendValuesHeader(StringBuilder commandStringBuilder, IReadOnlyList`1<ColumnModification> operations);
    protected virtual void AppendValues(StringBuilder commandStringBuilder, IReadOnlyList`1<ColumnModification> operations);
    protected virtual void AppendWhereClause(StringBuilder commandStringBuilder, IReadOnlyList`1<ColumnModification> operations);
    protected virtual void AppendWhereAffectedClause(StringBuilder commandStringBuilder, IReadOnlyList`1<ColumnModification> operations);
    protected abstract virtual void AppendRowsAffectedWhereCondition(StringBuilder commandStringBuilder, int expectedRowsAffected);
    protected virtual void AppendWhereCondition(StringBuilder commandStringBuilder, ColumnModification columnModification, bool useOriginalValue);
    protected abstract virtual void AppendIdentityWhereCondition(StringBuilder commandStringBuilder, ColumnModification columnModification);
    public virtual void AppendBatchHeader(StringBuilder commandStringBuilder);
    public virtual string GenerateNextSequenceValueOperation(string name, string schema);
    public virtual void AppendNextSequenceValueOperation(StringBuilder commandStringBuilder, string name, string schema);
    private void AppendSqlLiteral(StringBuilder commandStringBuilder, object value, IProperty property);
    [CompilerGeneratedAttribute]
private void <AppendUpdateCommandHeader>b__16_0(StringBuilder sb, ColumnModification o, ISqlGenerationHelper helper);
    [CompilerGeneratedAttribute]
private void <AppendValues>b__20_0(StringBuilder sb, ColumnModification o, ISqlGenerationHelper helper);
    [CompilerGeneratedAttribute]
private void <AppendWhereClause>b__21_0(StringBuilder sb, ColumnModification v);
    [CompilerGeneratedAttribute]
private void <AppendWhereAffectedClause>b__22_0(StringBuilder sb, ColumnModification v);
}
public class Microsoft.EntityFrameworkCore.Update.UpdateSqlGeneratorDependencies : object {
    [CompilerGeneratedAttribute]
private ISqlGenerationHelper <SqlGenerationHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <TypeMappingSource>k__BackingField;
    public ISqlGenerationHelper SqlGenerationHelper { get; }
    public IRelationalTypeMappingSource TypeMappingSource { get; }
    [EntityFrameworkInternalAttribute]
public UpdateSqlGeneratorDependencies(ISqlGenerationHelper sqlGenerationHelper, IRelationalTypeMappingSource typeMappingSource);
    [CompilerGeneratedAttribute]
public ISqlGenerationHelper get_SqlGenerationHelper();
    [CompilerGeneratedAttribute]
public IRelationalTypeMappingSource get_TypeMappingSource();
    public UpdateSqlGeneratorDependencies With(ISqlGenerationHelper sqlGenerationHelper);
    public UpdateSqlGeneratorDependencies With(IRelationalTypeMappingSource typeMappingSource);
}
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.Check : object {
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static IReadOnlyList`1<T> NotEmpty(IReadOnlyList`1<T> value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static string NotEmpty(string value, string parameterName);
    public static string NullButNotEmpty(string value, string parameterName);
    public static IReadOnlyList`1<T> HasNoNulls(IReadOnlyList`1<T> value, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void DebugAssert(bool condition, string message);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.DictionaryExtensions : object {
    [ExtensionAttribute]
public static TValue GetOrAddNew(IDictionary`2<TKey, TValue> source, TKey key);
    [ExtensionAttribute]
public static TValue Find(IReadOnlyDictionary`2<TKey, TValue> source, TKey key);
}
[ExtensionAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.DisposableExtensions : object {
    [ExtensionAttribute]
public static ValueTask DisposeAsyncIfAvailable(IDisposable disposable);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.RelationalValueGeneratorSelector : ValueGeneratorSelector {
    private TemporaryNumberValueGeneratorFactory _numberFactory;
    public RelationalValueGeneratorSelector(ValueGeneratorSelectorDependencies dependencies);
    public virtual ValueGenerator Create(IProperty property, IEntityType entityType);
}
[ExtensionAttribute]
internal static class System.Data.Common.DbConnectionExtensions : object {
    private static Func`4<DbConnection, IsolationLevel, CancellationToken, ValueTask`1<DbTransaction>> _beginTransactionAsync;
    private static Func`2<DbConnection, Task> _closeAsync;
    private static DbConnectionExtensions();
    [ExtensionAttribute]
public static ValueTask`1<DbTransaction> BeginTransactionAsync(DbConnection connection, IsolationLevel isolationLevel, CancellationToken cancellationToken);
    private static ValueTask`1<DbTransaction> BeginTransactionSync(DbConnection connection, IsolationLevel isolationLevel, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task CloseAsync(DbConnection connection);
    private static Task CloseSync(DbConnection connection);
}
[ExtensionAttribute]
internal static class System.Data.Common.DbTransactionExtensions : object {
    private static Func`3<DbTransaction, CancellationToken, Task> _commitAsync;
    private static Func`3<DbTransaction, CancellationToken, Task> _rollbackAsync;
    private static DbTransactionExtensions();
    [ExtensionAttribute]
public static Task CommitAsync(DbTransaction transaction, CancellationToken cancellationToken);
    private static Task CommitSync(DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RollbackAsync(DbTransaction transaction, CancellationToken cancellationToken);
    private static Task RollbackSync(DbTransaction transaction, CancellationToken cancellationToken);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Linq.Expressions.ExpressionExtensions : object {
    [ExtensionAttribute]
public static LambdaExpression UnwrapLambdaFromQuote(Expression expression);
    [ExtensionAttribute]
public static Expression UnwrapTypeConversion(Expression expression, Type& convertedType);
}
[ExtensionAttribute]
internal static class System.Reflection.MemberInfoExtensions : object {
    [ExtensionAttribute]
public static Type GetMemberType(MemberInfo memberInfo);
    [ExtensionAttribute]
public static bool IsSameAs(MemberInfo propertyInfo, MemberInfo otherPropertyInfo);
    [ExtensionAttribute]
public static string GetSimpleMemberName(MemberInfo member);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Reflection.PropertyInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsStatic(PropertyInfo property);
    [ExtensionAttribute]
public static bool IsCandidateProperty(PropertyInfo propertyInfo, bool needsWrite, bool publicOnly);
    [ExtensionAttribute]
public static bool IsEFIndexerProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static PropertyInfo FindGetterProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static PropertyInfo FindSetterProperty(PropertyInfo propertyInfo);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.SharedTypeExtensions : object {
    private static Dictionary`2<Type, object> _commonTypeDictionary;
    private static SharedTypeExtensions();
    [ExtensionAttribute]
public static Type UnwrapNullableType(Type type);
    [ExtensionAttribute]
public static bool IsNullableValueType(Type type);
    [ExtensionAttribute]
public static bool IsNullableType(Type type);
    [ExtensionAttribute]
public static bool IsValidEntityType(Type type);
    [ExtensionAttribute]
public static Type MakeNullable(Type type, bool nullable);
    [ExtensionAttribute]
public static bool IsNumeric(Type type);
    [ExtensionAttribute]
public static bool IsInteger(Type type);
    [ExtensionAttribute]
public static bool IsSignedInteger(Type type);
    [ExtensionAttribute]
public static bool IsAnonymousType(Type type);
    [ExtensionAttribute]
public static bool IsTupleType(Type type);
    [ExtensionAttribute]
public static PropertyInfo GetAnyProperty(Type type, string name);
    [ExtensionAttribute]
public static bool IsInstantiable(Type type);
    private static bool IsInstantiable(TypeInfo type);
    [ExtensionAttribute]
public static Type UnwrapEnumType(Type type);
    [ExtensionAttribute]
public static Type GetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetElementType(Type type, Type interfaceOrBaseType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetGenericTypeImplementations>d__17")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetGenericTypeImplementations(Type type, Type interfaceOrBaseType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetBaseTypes>d__18")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetBaseTypes(Type type);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetTypesInHierarchy>d__19")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetTypesInHierarchy(Type type);
    [ExtensionAttribute]
public static ConstructorInfo GetDeclaredConstructor(Type type, Type[] types);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetPropertiesInHierarchy>d__21")]
[ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetPropertiesInHierarchy(Type type, string name);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetMembersInHierarchy>d__22")]
[ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type, string name);
    [ExtensionAttribute]
public static object GetDefaultValue(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<TypeInfo> GetConstructibleTypes(Assembly assembly);
    [ExtensionAttribute]
public static IEnumerable`1<TypeInfo> GetLoadableDefinedTypes(Assembly assembly);
}
[ExtensionAttribute]
internal static class System.Text.StringBuilderExtensions : object {
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<string> values, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, string separator, String[] values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, Action`2<StringBuilder, T> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam param, Action`3<StringBuilder, T, TParam> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam1 param1, TParam2 param2, Action`4<StringBuilder, T, TParam1, TParam2> joinAction, string separator);
}
[ExtensionAttribute]
internal static class System.Threading.Tasks.RelationalTaskExtensions : object {
    [ExtensionAttribute]
public static Task`1<TDerived> Cast(Task`1<T> task);
    [ExtensionAttribute]
public static Task`1<Nullable`1<T>> CastToNullable(Task`1<T> task);
}
