[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    public string Contract { get; }
    public bool ForceFullStates { get; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4320")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    public string FormatParameterName { get; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; }
    public ImplicitUseTargetFlags TargetFlags { get; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator : object {
    private static ISet`1<string> IgnoredRelationalAnnotations;
    [CompilerGeneratedAttribute]
private AnnotationCodeGeneratorDependencies <Dependencies>k__BackingField;
    protected AnnotationCodeGeneratorDependencies Dependencies { get; }
    public AnnotationCodeGenerator(AnnotationCodeGeneratorDependencies dependencies);
    private static AnnotationCodeGenerator();
    [CompilerGeneratedAttribute]
protected virtual AnnotationCodeGeneratorDependencies get_Dependencies();
    public virtual IEnumerable`1<IAnnotation> FilterIgnoredAnnotations(IEnumerable`1<IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(IModel model, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(IEntityType entityType, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(IEntityTypeMappingFragment fragment, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(IProperty property, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(IKey key, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(IForeignKey foreignKey, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(INavigation navigation, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(ISkipNavigation navigation, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(IIndex index, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(ICheckConstraint checkConstraint, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(ITrigger trigger, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(IRelationalPropertyOverrides overrides, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(ISequence sequence, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(IAnnotatable annotatable, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IModel model, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IEntityType entityType, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IEntityTypeMappingFragment fragment, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IProperty property, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IKey key, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IForeignKey foreignKey, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(INavigation navigation, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(ISkipNavigation navigation, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IIndex index, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(ICheckConstraint checkConstraint, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(ITrigger trigger, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IRelationalPropertyOverrides overrides, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(ISequence sequence, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IAnnotatable annotatable, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<AttributeCodeFragment> GenerateDataAnnotationAttributes(IEntityType entityType, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<AttributeCodeFragment> GenerateDataAnnotationAttributes(IProperty property, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<AttributeCodeFragment> GenerateDataAnnotationAttributes(IAnnotatable annotatable, IDictionary`2<string, IAnnotation> annotations);
    protected virtual bool IsHandledByConvention(IModel model, IAnnotation annotation);
    protected virtual bool IsHandledByConvention(IEntityType entityType, IAnnotation annotation);
    protected virtual bool IsHandledByConvention(IEntityTypeMappingFragment fragment, IAnnotation annotation);
    protected virtual bool IsHandledByConvention(IKey key, IAnnotation annotation);
    protected virtual bool IsHandledByConvention(IProperty property, IAnnotation annotation);
    protected virtual bool IsHandledByConvention(IForeignKey foreignKey, IAnnotation annotation);
    protected virtual bool IsHandledByConvention(INavigation navigation, IAnnotation annotation);
    protected virtual bool IsHandledByConvention(ISkipNavigation navigation, IAnnotation annotation);
    protected virtual bool IsHandledByConvention(IIndex index, IAnnotation annotation);
    protected virtual bool IsHandledByConvention(ICheckConstraint checkConstraint, IAnnotation annotation);
    protected virtual bool IsHandledByConvention(ITrigger trigger, IAnnotation annotation);
    protected virtual bool IsHandledByConvention(IRelationalPropertyOverrides overrides, IAnnotation annotation);
    protected virtual bool IsHandledByConvention(ISequence sequence, IAnnotation annotation);
    protected virtual MethodCallCodeFragment GenerateFluentApi(IModel model, IAnnotation annotation);
    protected virtual MethodCallCodeFragment GenerateFluentApi(IEntityType entityType, IAnnotation annotation);
    protected virtual MethodCallCodeFragment GenerateFluentApi(IEntityTypeMappingFragment fragment, IAnnotation annotation);
    protected virtual MethodCallCodeFragment GenerateFluentApi(IKey key, IAnnotation annotation);
    protected virtual MethodCallCodeFragment GenerateFluentApi(IProperty property, IAnnotation annotation);
    protected virtual MethodCallCodeFragment GenerateFluentApi(IForeignKey foreignKey, IAnnotation annotation);
    protected virtual MethodCallCodeFragment GenerateFluentApi(INavigation navigation, IAnnotation annotation);
    protected virtual MethodCallCodeFragment GenerateFluentApi(ISkipNavigation navigation, IAnnotation annotation);
    protected virtual MethodCallCodeFragment GenerateFluentApi(IIndex index, IAnnotation annotation);
    protected virtual MethodCallCodeFragment GenerateFluentApi(ICheckConstraint checkConstraint, IAnnotation annotation);
    protected virtual MethodCallCodeFragment GenerateFluentApi(ITrigger trigger, IAnnotation annotation);
    protected virtual MethodCallCodeFragment GenerateFluentApi(IRelationalPropertyOverrides overrides, IAnnotation annotation);
    protected virtual MethodCallCodeFragment GenerateFluentApi(ISequence sequence, IAnnotation annotation);
    protected virtual AttributeCodeFragment GenerateDataAnnotation(IEntityType entityType, IAnnotation annotation);
    protected virtual AttributeCodeFragment GenerateDataAnnotation(IProperty property, IAnnotation annotation);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator/<GenerateFluentApiCallsHelper>d__65`2")]
private static IEnumerable`1<TCodeFragment> GenerateFluentApiCallsHelper(TAnnotatable annotatable, IDictionary`2<string, IAnnotation> annotations, Func`3<TAnnotatable, IAnnotation, TCodeFragment> generateCodeFragment);
    private static void RemoveConventionalAnnotationsHelper(TAnnotatable annotatable, IDictionary`2<string, IAnnotation> annotations, Func`3<TAnnotatable, IAnnotation, bool> isHandledByConvention);
    private static bool TryGetAndRemove(IDictionary`2<string, IAnnotation> annotations, string annotationName, T& annotationValue);
    private static void GenerateSimpleFluentApiCall(IDictionary`2<string, IAnnotation> annotations, string annotationName, string method, List`1<MethodCallCodeFragment> methodCallCodeFragments);
    private static IEnumerable`1<KeyValuePair`2<string, IAnnotation>> EnumerateForRemoval(IDictionary`2<string, IAnnotation> annotations);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.AnnotationCodeGeneratorDependencies : object {
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <RelationalTypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IRelationalTypeMappingSource RelationalTypeMappingSource { get; public set; }
    [EntityFrameworkInternalAttribute]
public AnnotationCodeGeneratorDependencies(IRelationalTypeMappingSource relationalTypeMappingSource);
    [CompilerGeneratedAttribute]
private AnnotationCodeGeneratorDependencies(AnnotationCodeGeneratorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IRelationalTypeMappingSource get_RelationalTypeMappingSource();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RelationalTypeMappingSource(IRelationalTypeMappingSource value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(AnnotationCodeGeneratorDependencies left, AnnotationCodeGeneratorDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(AnnotationCodeGeneratorDependencies left, AnnotationCodeGeneratorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(AnnotationCodeGeneratorDependencies other);
    [CompilerGeneratedAttribute]
public AnnotationCodeGeneratorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.EntityFrameworkRelationalDesignServicesBuilder : EntityFrameworkDesignServicesBuilder {
    [EntityFrameworkInternalAttribute]
public static IDictionary`2<Type, ServiceCharacteristics> RelationalServices;
    public EntityFrameworkRelationalDesignServicesBuilder(IServiceCollection serviceCollection);
    private static EntityFrameworkRelationalDesignServicesBuilder();
    protected virtual Nullable`1<ServiceCharacteristics> TryGetServiceCharacteristics(Type serviceType);
    public virtual EntityFrameworkServicesBuilder TryAddCoreServices();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator {
    public abstract virtual IEnumerable`1<IAnnotation> FilterIgnoredAnnotations(IEnumerable`1<IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(IModel model, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(IEntityType entity, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(IEntityTypeMappingFragment fragment, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(IProperty property, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(IKey key, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(IForeignKey foreignKey, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(INavigation navigation, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(ISkipNavigation navigation, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(IIndex index, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(ICheckConstraint checkConstraint, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(ITrigger trigger, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(IRelationalPropertyOverrides overrides, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(ISequence sequence, IDictionary`2<string, IAnnotation> annotations);
    public virtual void RemoveAnnotationsHandledByConventions(IAnnotatable annotatable, IDictionary`2<string, IAnnotation> annotations);
    internal void RemoveAnnotationsHandledByConventionsInternal(IAnnotatable annotatable, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IModel model, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IEntityType entityType, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IEntityTypeMappingFragment fragment, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IProperty property, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IKey key, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IForeignKey foreignKey, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(INavigation navigation, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(ISkipNavigation navigation, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IIndex index, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(ICheckConstraint checkConstraint, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(ITrigger trigger, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IRelationalPropertyOverrides overrides, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(ISequence sequence, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IAnnotatable annotatable, IDictionary`2<string, IAnnotation> annotations);
    internal IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCallsInternal(IAnnotatable annotatable, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<AttributeCodeFragment> GenerateDataAnnotationAttributes(IEntityType entityType, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<AttributeCodeFragment> GenerateDataAnnotationAttributes(IProperty property, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<AttributeCodeFragment> GenerateDataAnnotationAttributes(IAnnotatable annotatable, IDictionary`2<string, IAnnotation> annotations);
    internal IReadOnlyList`1<AttributeCodeFragment> GenerateDataAnnotationAttributesInternal(IAnnotatable annotatable, IDictionary`2<string, IAnnotation> annotations);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.Internal.RelationalCSharpRuntimeAnnotationCodeGenerator : CSharpRuntimeAnnotationCodeGenerator {
    [CompilerGeneratedAttribute]
private RelationalCSharpRuntimeAnnotationCodeGeneratorDependencies <RelationalDependencies>k__BackingField;
    protected RelationalCSharpRuntimeAnnotationCodeGeneratorDependencies RelationalDependencies { get; }
    public RelationalCSharpRuntimeAnnotationCodeGenerator(CSharpRuntimeAnnotationCodeGeneratorDependencies dependencies, RelationalCSharpRuntimeAnnotationCodeGeneratorDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalCSharpRuntimeAnnotationCodeGeneratorDependencies get_RelationalDependencies();
    public virtual void Generate(IModel model, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    private void Create(IDbFunction function, string functionsVariable, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IDbFunction function, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    private void Create(IDbFunctionParameter parameter, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IDbFunctionParameter functionParameter, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    private void Create(ISequence sequence, string sequencesVariable, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(ISequence sequence, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IEntityType entityType, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    private void Create(IEntityTypeMappingFragment fragment, string fragmentsVariable, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IEntityTypeMappingFragment fragment, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    private void Create(IStoredProcedure storedProcedure, string sprocVariable, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IStoredProcedure storedProcedure, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    private void Create(IStoredProcedureParameter parameter, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IStoredProcedureParameter storedProcedure, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    private void Create(IStoredProcedureResultColumn resultColumn, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IStoredProcedureResultColumn storedProcedure, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(ICheckConstraint constraint, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IProperty property, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    private void Create(IRelationalPropertyOverrides overrides, string overridesVariable, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IRelationalPropertyOverrides overrides, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IKey key, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IForeignKey foreignKey, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IIndex index, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    private static void CreateAnnotations(TAnnotatable annotatable, Action`2<TAnnotatable, CSharpRuntimeAnnotationCodeGeneratorParameters> process, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    private static string Capitalize(string string);
    private static void AppendLiteral(StoreObjectIdentifier storeObject, IndentedStringBuilder builder, ICSharpHelper code);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.Internal.RelationalCSharpRuntimeAnnotationCodeGeneratorDependencies : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private RelationalCSharpRuntimeAnnotationCodeGeneratorDependencies(RelationalCSharpRuntimeAnnotationCodeGeneratorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalCSharpRuntimeAnnotationCodeGeneratorDependencies left, RelationalCSharpRuntimeAnnotationCodeGeneratorDependencies right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(RelationalCSharpRuntimeAnnotationCodeGeneratorDependencies left, RelationalCSharpRuntimeAnnotationCodeGeneratorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalCSharpRuntimeAnnotationCodeGeneratorDependencies other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public RelationalCSharpRuntimeAnnotationCodeGeneratorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.BatchEventData : EventData {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IUpdateEntry> <Entries>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CommandCount>k__BackingField;
    public IEnumerable`1<IUpdateEntry> Entries { get; }
    public int CommandCount { get; }
    public BatchEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IEnumerable`1<IUpdateEntry> entries, int commandCount);
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<IUpdateEntry> get_Entries();
    [CompilerGeneratedAttribute]
public virtual int get_CommandCount();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.ColumnsEventData : EventData {
    [CompilerGeneratedAttribute]
private StoreObjectIdentifier <StoreObject>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Columns>k__BackingField;
    public StoreObjectIdentifier StoreObject { get; }
    public IReadOnlyList`1<string> Columns { get; }
    public ColumnsEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, StoreObjectIdentifier storeObject, IReadOnlyList`1<string> columns);
    [CompilerGeneratedAttribute]
public virtual StoreObjectIdentifier get_StoreObject();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<string> get_Columns();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData : DbContextEventData {
    [CompilerGeneratedAttribute]
private DbConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <CommandId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private DbCommandMethod <ExecuteMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandSource <CommandSource>k__BackingField;
    public DbConnection Connection { get; }
    public Guid CommandId { get; }
    public Guid ConnectionId { get; }
    public DbCommandMethod ExecuteMethod { get; }
    public bool IsAsync { get; }
    public DateTimeOffset StartTime { get; }
    public CommandSource CommandSource { get; }
    public CommandCorrelatedEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbConnection connection, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, bool async, DateTimeOffset startTime, CommandSource commandSource);
    [CompilerGeneratedAttribute]
public virtual DbConnection get_Connection();
    [CompilerGeneratedAttribute]
public virtual Guid get_CommandId();
    [CompilerGeneratedAttribute]
public virtual Guid get_ConnectionId();
    [CompilerGeneratedAttribute]
public virtual DbCommandMethod get_ExecuteMethod();
    [CompilerGeneratedAttribute]
public virtual bool get_IsAsync();
    [CompilerGeneratedAttribute]
public virtual DateTimeOffset get_StartTime();
    [CompilerGeneratedAttribute]
public virtual CommandSource get_CommandSource();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData : CommandEventData {
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    public TimeSpan Duration { get; }
    [NullableContextAttribute("1")]
public CommandEndEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, bool async, bool logParameterValues, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource);
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_Duration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData : CommandEndEventData {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; }
    public CommandErrorEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, Exception exception, bool async, bool logParameterValues, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource);
    [CompilerGeneratedAttribute]
public virtual Exception get_Exception();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData : CommandCorrelatedEventData {
    [CompilerGeneratedAttribute]
private DbCommand <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogParameterValues>k__BackingField;
    public DbCommand Command { get; }
    public bool LogParameterValues { get; }
    public CommandEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, bool async, bool logParameterValues, DateTimeOffset startTime, CommandSource commandSource);
    [CompilerGeneratedAttribute]
public virtual DbCommand get_Command();
    [CompilerGeneratedAttribute]
public virtual bool get_LogParameterValues();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData : CommandEndEventData {
    [CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    public object Result { get; }
    [NullableContextAttribute("1")]
public CommandExecutedEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, object result, bool async, bool logParameterValues, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource);
    [CompilerGeneratedAttribute]
public virtual object get_Result();
}
public enum Microsoft.EntityFrameworkCore.Diagnostics.CommandSource : Enum {
    public int value__;
    public static CommandSource Unknown;
    public static CommandSource LinqQuery;
    public static CommandSource SaveChanges;
    public static CommandSource Migrations;
    public static CommandSource FromSqlQuery;
    public static CommandSource ExecuteSqlRaw;
    public static CommandSource ValueGenerator;
    public static CommandSource Scaffolding;
    [ObsoleteAttribute("Use ExecuteDelete or ExecuteUpdate instead.")]
public static CommandSource BulkUpdate;
    public static CommandSource ExecuteDelete;
    public static CommandSource ExecuteUpdate;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionCreatedEventData : DbContextEventData {
    [CompilerGeneratedAttribute]
private DbConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    public DbConnection Connection { get; }
    public Guid ConnectionId { get; }
    public DateTimeOffset StartTime { get; }
    public TimeSpan Duration { get; }
    public ConnectionCreatedEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbConnection connection, DbContext context, Guid connectionId, DateTimeOffset startTime, TimeSpan duration);
    [CompilerGeneratedAttribute]
public virtual DbConnection get_Connection();
    [CompilerGeneratedAttribute]
public virtual Guid get_ConnectionId();
    [CompilerGeneratedAttribute]
public virtual DateTimeOffset get_StartTime();
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_Duration();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionCreatingEventData : DbContextEventData {
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTime>k__BackingField;
    public string ConnectionString { get; }
    public Guid ConnectionId { get; }
    public DateTimeOffset StartTime { get; }
    [NullableContextAttribute("1")]
public ConnectionCreatingEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbContext context, string connectionString, Guid connectionId, DateTimeOffset startTime);
    [CompilerGeneratedAttribute]
public virtual string get_ConnectionString();
    [CompilerGeneratedAttribute]
public virtual Guid get_ConnectionId();
    [CompilerGeneratedAttribute]
public virtual DateTimeOffset get_StartTime();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData : ConnectionEventData {
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    public TimeSpan Duration { get; }
    [NullableContextAttribute("1")]
public ConnectionEndEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbConnection connection, DbContext context, Guid connectionId, bool async, DateTimeOffset startTime, TimeSpan duration);
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_Duration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionErrorEventData : ConnectionEndEventData {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; }
    public ConnectionErrorEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbConnection connection, DbContext context, Guid connectionId, Exception exception, bool async, DateTimeOffset startTime, TimeSpan duration);
    [CompilerGeneratedAttribute]
public virtual Exception get_Exception();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData : DbContextEventData {
    [CompilerGeneratedAttribute]
private DbConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTime>k__BackingField;
    public DbConnection Connection { get; }
    public Guid ConnectionId { get; }
    public bool IsAsync { get; }
    public DateTimeOffset StartTime { get; }
    public ConnectionEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbConnection connection, DbContext context, Guid connectionId, bool async, DateTimeOffset startTime);
    [CompilerGeneratedAttribute]
public virtual DbConnection get_Connection();
    [CompilerGeneratedAttribute]
public virtual Guid get_ConnectionId();
    [CompilerGeneratedAttribute]
public virtual bool get_IsAsync();
    [CompilerGeneratedAttribute]
public virtual DateTimeOffset get_StartTime();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.DataReaderClosingEventData : DataReaderEventData {
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    public bool IsAsync { get; }
    [NullableContextAttribute("1")]
public DataReaderClosingEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbCommand command, DbDataReader dataReader, DbContext context, Guid commandId, Guid connectionId, bool async, int recordsAffected, int readCount, DateTimeOffset startTime);
    [CompilerGeneratedAttribute]
public virtual bool get_IsAsync();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.DataReaderDisposingEventData : DataReaderEventData {
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    public TimeSpan Duration { get; }
    [NullableContextAttribute("1")]
public DataReaderDisposingEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbCommand command, DbDataReader dataReader, DbContext context, Guid commandId, Guid connectionId, int recordsAffected, int readCount, DateTimeOffset startTime, TimeSpan duration);
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_Duration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.DataReaderEventData : DbContextEventData {
    [CompilerGeneratedAttribute]
private DbCommand <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private DbDataReader <DataReader>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <CommandId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RecordsAffected>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTime>k__BackingField;
    public DbCommand Command { get; }
    public DbDataReader DataReader { get; }
    public Guid CommandId { get; }
    public Guid ConnectionId { get; }
    public int RecordsAffected { get; }
    public int ReadCount { get; }
    public DateTimeOffset StartTime { get; }
    public DataReaderEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbCommand command, DbDataReader dataReader, DbContext context, Guid commandId, Guid connectionId, int recordsAffected, int readCount, DateTimeOffset startTime);
    [CompilerGeneratedAttribute]
public virtual DbCommand get_Command();
    [CompilerGeneratedAttribute]
public virtual DbDataReader get_DataReader();
    [CompilerGeneratedAttribute]
public virtual Guid get_CommandId();
    [CompilerGeneratedAttribute]
public virtual Guid get_ConnectionId();
    [CompilerGeneratedAttribute]
public virtual int get_RecordsAffected();
    [CompilerGeneratedAttribute]
public virtual int get_ReadCount();
    [CompilerGeneratedAttribute]
public virtual DateTimeOffset get_StartTime();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor : object {
    public virtual InterceptionResult`1<DbCommand> CommandCreating(CommandCorrelatedEventData eventData, InterceptionResult`1<DbCommand> result);
    public virtual DbCommand CommandCreated(CommandEndEventData eventData, DbCommand result);
    public virtual DbCommand CommandInitialized(CommandEndEventData eventData, DbCommand result);
    public virtual InterceptionResult`1<DbDataReader> ReaderExecuting(DbCommand command, CommandEventData eventData, InterceptionResult`1<DbDataReader> result);
    public virtual InterceptionResult`1<object> ScalarExecuting(DbCommand command, CommandEventData eventData, InterceptionResult`1<object> result);
    [NullableContextAttribute("0")]
public virtual InterceptionResult`1<int> NonQueryExecuting(DbCommand command, CommandEventData eventData, InterceptionResult`1<int> result);
    public virtual ValueTask`1<InterceptionResult`1<DbDataReader>> ReaderExecutingAsync(DbCommand command, CommandEventData eventData, InterceptionResult`1<DbDataReader> result, CancellationToken cancellationToken);
    public virtual ValueTask`1<InterceptionResult`1<object>> ScalarExecutingAsync(DbCommand command, CommandEventData eventData, InterceptionResult`1<object> result, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<InterceptionResult`1<int>> NonQueryExecutingAsync(DbCommand command, CommandEventData eventData, InterceptionResult`1<int> result, CancellationToken cancellationToken);
    public virtual DbDataReader ReaderExecuted(DbCommand command, CommandExecutedEventData eventData, DbDataReader result);
    public virtual object ScalarExecuted(DbCommand command, CommandExecutedEventData eventData, object result);
    public virtual int NonQueryExecuted(DbCommand command, CommandExecutedEventData eventData, int result);
    public virtual ValueTask`1<DbDataReader> ReaderExecutedAsync(DbCommand command, CommandExecutedEventData eventData, DbDataReader result, CancellationToken cancellationToken);
    public virtual ValueTask`1<object> ScalarExecutedAsync(DbCommand command, CommandExecutedEventData eventData, object result, CancellationToken cancellationToken);
    public virtual ValueTask`1<int> NonQueryExecutedAsync(DbCommand command, CommandExecutedEventData eventData, int result, CancellationToken cancellationToken);
    public virtual void CommandCanceled(DbCommand command, CommandEndEventData eventData);
    public virtual Task CommandCanceledAsync(DbCommand command, CommandEndEventData eventData, CancellationToken cancellationToken);
    public virtual void CommandFailed(DbCommand command, CommandErrorEventData eventData);
    public virtual Task CommandFailedAsync(DbCommand command, CommandErrorEventData eventData, CancellationToken cancellationToken);
    public virtual InterceptionResult DataReaderClosing(DbCommand command, DataReaderClosingEventData eventData, InterceptionResult result);
    public virtual ValueTask`1<InterceptionResult> DataReaderClosingAsync(DbCommand command, DataReaderClosingEventData eventData, InterceptionResult result);
    public virtual InterceptionResult DataReaderDisposing(DbCommand command, DataReaderDisposingEventData eventData, InterceptionResult result);
}
public enum Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod : Enum {
    public int value__;
    public static DbCommandMethod ExecuteNonQuery;
    public static DbCommandMethod ExecuteScalar;
    public static DbCommandMethod ExecuteReader;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor : object {
    public virtual InterceptionResult`1<DbConnection> ConnectionCreating(ConnectionCreatingEventData eventData, InterceptionResult`1<DbConnection> result);
    public virtual DbConnection ConnectionCreated(ConnectionCreatedEventData eventData, DbConnection result);
    public virtual InterceptionResult ConnectionOpening(DbConnection connection, ConnectionEventData eventData, InterceptionResult result);
    public virtual ValueTask`1<InterceptionResult> ConnectionOpeningAsync(DbConnection connection, ConnectionEventData eventData, InterceptionResult result, CancellationToken cancellationToken);
    public virtual void ConnectionOpened(DbConnection connection, ConnectionEndEventData eventData);
    public virtual Task ConnectionOpenedAsync(DbConnection connection, ConnectionEndEventData eventData, CancellationToken cancellationToken);
    public virtual InterceptionResult ConnectionClosing(DbConnection connection, ConnectionEventData eventData, InterceptionResult result);
    public virtual ValueTask`1<InterceptionResult> ConnectionClosingAsync(DbConnection connection, ConnectionEventData eventData, InterceptionResult result);
    public virtual void ConnectionClosed(DbConnection connection, ConnectionEndEventData eventData);
    public virtual Task ConnectionClosedAsync(DbConnection connection, ConnectionEndEventData eventData);
    public virtual InterceptionResult ConnectionDisposing(DbConnection connection, ConnectionEventData eventData, InterceptionResult result);
    public virtual ValueTask`1<InterceptionResult> ConnectionDisposingAsync(DbConnection connection, ConnectionEventData eventData, InterceptionResult result);
    public virtual void ConnectionDisposed(DbConnection connection, ConnectionEndEventData eventData);
    public virtual Task ConnectionDisposedAsync(DbConnection connection, ConnectionEndEventData eventData);
    public virtual void ConnectionFailed(DbConnection connection, ConnectionErrorEventData eventData);
    public virtual Task ConnectionFailedAsync(DbConnection connection, ConnectionErrorEventData eventData, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor : object {
    public virtual InterceptionResult`1<DbTransaction> TransactionStarting(DbConnection connection, TransactionStartingEventData eventData, InterceptionResult`1<DbTransaction> result);
    public virtual DbTransaction TransactionStarted(DbConnection connection, TransactionEndEventData eventData, DbTransaction result);
    public virtual ValueTask`1<InterceptionResult`1<DbTransaction>> TransactionStartingAsync(DbConnection connection, TransactionStartingEventData eventData, InterceptionResult`1<DbTransaction> result, CancellationToken cancellationToken);
    public virtual ValueTask`1<DbTransaction> TransactionStartedAsync(DbConnection connection, TransactionEndEventData eventData, DbTransaction result, CancellationToken cancellationToken);
    public virtual DbTransaction TransactionUsed(DbConnection connection, TransactionEventData eventData, DbTransaction result);
    public virtual ValueTask`1<DbTransaction> TransactionUsedAsync(DbConnection connection, TransactionEventData eventData, DbTransaction result, CancellationToken cancellationToken);
    public virtual InterceptionResult TransactionCommitting(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result);
    public virtual void TransactionCommitted(DbTransaction transaction, TransactionEndEventData eventData);
    public virtual ValueTask`1<InterceptionResult> TransactionCommittingAsync(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result, CancellationToken cancellationToken);
    public virtual Task TransactionCommittedAsync(DbTransaction transaction, TransactionEndEventData eventData, CancellationToken cancellationToken);
    public virtual InterceptionResult TransactionRollingBack(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result);
    public virtual void TransactionRolledBack(DbTransaction transaction, TransactionEndEventData eventData);
    public virtual ValueTask`1<InterceptionResult> TransactionRollingBackAsync(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result, CancellationToken cancellationToken);
    public virtual Task TransactionRolledBackAsync(DbTransaction transaction, TransactionEndEventData eventData, CancellationToken cancellationToken);
    public virtual InterceptionResult CreatingSavepoint(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result);
    public virtual void CreatedSavepoint(DbTransaction transaction, TransactionEventData eventData);
    public virtual ValueTask`1<InterceptionResult> CreatingSavepointAsync(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result, CancellationToken cancellationToken);
    public virtual Task CreatedSavepointAsync(DbTransaction transaction, TransactionEventData eventData, CancellationToken cancellationToken);
    public virtual InterceptionResult RollingBackToSavepoint(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result);
    public virtual void RolledBackToSavepoint(DbTransaction transaction, TransactionEventData eventData);
    public virtual ValueTask`1<InterceptionResult> RollingBackToSavepointAsync(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result, CancellationToken cancellationToken);
    public virtual Task RolledBackToSavepointAsync(DbTransaction transaction, TransactionEventData eventData, CancellationToken cancellationToken);
    public virtual InterceptionResult ReleasingSavepoint(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result);
    public virtual void ReleasedSavepoint(DbTransaction transaction, TransactionEventData eventData);
    public virtual ValueTask`1<InterceptionResult> ReleasingSavepointAsync(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result, CancellationToken cancellationToken);
    public virtual Task ReleasedSavepointAsync(DbTransaction transaction, TransactionEventData eventData, CancellationToken cancellationToken);
    public virtual void TransactionFailed(DbTransaction transaction, TransactionErrorEventData eventData);
    public virtual Task TransactionFailedAsync(DbTransaction transaction, TransactionErrorEventData eventData, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.EntityTypeSchemaEventData : EventData {
    [CompilerGeneratedAttribute]
private IEntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    public IEntityType EntityType { get; }
    public string Schema { get; }
    public EntityTypeSchemaEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IEntityType entityType, string schema);
    [CompilerGeneratedAttribute]
public virtual IEntityType get_EntityType();
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor {
    public virtual InterceptionResult`1<DbCommand> CommandCreating(CommandCorrelatedEventData eventData, InterceptionResult`1<DbCommand> result);
    public virtual DbCommand CommandCreated(CommandEndEventData eventData, DbCommand result);
    public virtual DbCommand CommandInitialized(CommandEndEventData eventData, DbCommand result);
    public virtual InterceptionResult`1<DbDataReader> ReaderExecuting(DbCommand command, CommandEventData eventData, InterceptionResult`1<DbDataReader> result);
    public virtual InterceptionResult`1<object> ScalarExecuting(DbCommand command, CommandEventData eventData, InterceptionResult`1<object> result);
    [NullableContextAttribute("0")]
public virtual InterceptionResult`1<int> NonQueryExecuting(DbCommand command, CommandEventData eventData, InterceptionResult`1<int> result);
    public virtual ValueTask`1<InterceptionResult`1<DbDataReader>> ReaderExecutingAsync(DbCommand command, CommandEventData eventData, InterceptionResult`1<DbDataReader> result, CancellationToken cancellationToken);
    public virtual ValueTask`1<InterceptionResult`1<object>> ScalarExecutingAsync(DbCommand command, CommandEventData eventData, InterceptionResult`1<object> result, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<InterceptionResult`1<int>> NonQueryExecutingAsync(DbCommand command, CommandEventData eventData, InterceptionResult`1<int> result, CancellationToken cancellationToken);
    public virtual DbDataReader ReaderExecuted(DbCommand command, CommandExecutedEventData eventData, DbDataReader result);
    public virtual object ScalarExecuted(DbCommand command, CommandExecutedEventData eventData, object result);
    public virtual int NonQueryExecuted(DbCommand command, CommandExecutedEventData eventData, int result);
    public virtual ValueTask`1<DbDataReader> ReaderExecutedAsync(DbCommand command, CommandExecutedEventData eventData, DbDataReader result, CancellationToken cancellationToken);
    public virtual ValueTask`1<object> ScalarExecutedAsync(DbCommand command, CommandExecutedEventData eventData, object result, CancellationToken cancellationToken);
    public virtual ValueTask`1<int> NonQueryExecutedAsync(DbCommand command, CommandExecutedEventData eventData, int result, CancellationToken cancellationToken);
    public virtual void CommandCanceled(DbCommand command, CommandEndEventData eventData);
    public virtual Task CommandCanceledAsync(DbCommand command, CommandEndEventData eventData, CancellationToken cancellationToken);
    public virtual void CommandFailed(DbCommand command, CommandErrorEventData eventData);
    public virtual Task CommandFailedAsync(DbCommand command, CommandErrorEventData eventData, CancellationToken cancellationToken);
    public virtual InterceptionResult DataReaderClosing(DbCommand command, DataReaderClosingEventData eventData, InterceptionResult result);
    public virtual ValueTask`1<InterceptionResult> DataReaderClosingAsync(DbCommand command, DataReaderClosingEventData eventData, InterceptionResult result);
    public virtual InterceptionResult DataReaderDisposing(DbCommand command, DataReaderDisposingEventData eventData, InterceptionResult result);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor {
    public virtual InterceptionResult`1<DbConnection> ConnectionCreating(ConnectionCreatingEventData eventData, InterceptionResult`1<DbConnection> result);
    public virtual DbConnection ConnectionCreated(ConnectionCreatedEventData eventData, DbConnection result);
    public virtual InterceptionResult ConnectionOpening(DbConnection connection, ConnectionEventData eventData, InterceptionResult result);
    public virtual ValueTask`1<InterceptionResult> ConnectionOpeningAsync(DbConnection connection, ConnectionEventData eventData, InterceptionResult result, CancellationToken cancellationToken);
    public virtual void ConnectionOpened(DbConnection connection, ConnectionEndEventData eventData);
    public virtual Task ConnectionOpenedAsync(DbConnection connection, ConnectionEndEventData eventData, CancellationToken cancellationToken);
    public virtual InterceptionResult ConnectionClosing(DbConnection connection, ConnectionEventData eventData, InterceptionResult result);
    public virtual ValueTask`1<InterceptionResult> ConnectionClosingAsync(DbConnection connection, ConnectionEventData eventData, InterceptionResult result);
    public virtual void ConnectionClosed(DbConnection connection, ConnectionEndEventData eventData);
    public virtual Task ConnectionClosedAsync(DbConnection connection, ConnectionEndEventData eventData);
    public virtual InterceptionResult ConnectionDisposing(DbConnection connection, ConnectionEventData eventData, InterceptionResult result);
    public virtual ValueTask`1<InterceptionResult> ConnectionDisposingAsync(DbConnection connection, ConnectionEventData eventData, InterceptionResult result);
    public virtual void ConnectionDisposed(DbConnection connection, ConnectionEndEventData eventData);
    public virtual Task ConnectionDisposedAsync(DbConnection connection, ConnectionEndEventData eventData);
    public virtual void ConnectionFailed(DbConnection connection, ConnectionErrorEventData eventData);
    public virtual Task ConnectionFailedAsync(DbConnection connection, ConnectionErrorEventData eventData, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor {
    public virtual InterceptionResult`1<DbTransaction> TransactionStarting(DbConnection connection, TransactionStartingEventData eventData, InterceptionResult`1<DbTransaction> result);
    public virtual DbTransaction TransactionStarted(DbConnection connection, TransactionEndEventData eventData, DbTransaction result);
    public virtual ValueTask`1<InterceptionResult`1<DbTransaction>> TransactionStartingAsync(DbConnection connection, TransactionStartingEventData eventData, InterceptionResult`1<DbTransaction> result, CancellationToken cancellationToken);
    public virtual ValueTask`1<DbTransaction> TransactionStartedAsync(DbConnection connection, TransactionEndEventData eventData, DbTransaction result, CancellationToken cancellationToken);
    public virtual DbTransaction TransactionUsed(DbConnection connection, TransactionEventData eventData, DbTransaction result);
    public virtual ValueTask`1<DbTransaction> TransactionUsedAsync(DbConnection connection, TransactionEventData eventData, DbTransaction result, CancellationToken cancellationToken);
    public virtual InterceptionResult TransactionCommitting(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result);
    public virtual void TransactionCommitted(DbTransaction transaction, TransactionEndEventData eventData);
    public virtual ValueTask`1<InterceptionResult> TransactionCommittingAsync(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result, CancellationToken cancellationToken);
    public virtual Task TransactionCommittedAsync(DbTransaction transaction, TransactionEndEventData eventData, CancellationToken cancellationToken);
    public virtual InterceptionResult TransactionRollingBack(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result);
    public virtual void TransactionRolledBack(DbTransaction transaction, TransactionEndEventData eventData);
    public virtual ValueTask`1<InterceptionResult> TransactionRollingBackAsync(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result, CancellationToken cancellationToken);
    public virtual Task TransactionRolledBackAsync(DbTransaction transaction, TransactionEndEventData eventData, CancellationToken cancellationToken);
    public virtual InterceptionResult CreatingSavepoint(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result);
    public virtual void CreatedSavepoint(DbTransaction transaction, TransactionEventData eventData);
    public virtual ValueTask`1<InterceptionResult> CreatingSavepointAsync(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result, CancellationToken cancellationToken);
    public virtual Task CreatedSavepointAsync(DbTransaction transaction, TransactionEventData eventData, CancellationToken cancellationToken);
    public virtual InterceptionResult RollingBackToSavepoint(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result);
    public virtual void RolledBackToSavepoint(DbTransaction transaction, TransactionEventData eventData);
    public virtual ValueTask`1<InterceptionResult> RollingBackToSavepointAsync(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result, CancellationToken cancellationToken);
    public virtual Task RolledBackToSavepointAsync(DbTransaction transaction, TransactionEventData eventData, CancellationToken cancellationToken);
    public virtual InterceptionResult ReleasingSavepoint(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result);
    public virtual void ReleasedSavepoint(DbTransaction transaction, TransactionEventData eventData);
    public virtual ValueTask`1<InterceptionResult> ReleasingSavepointAsync(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result, CancellationToken cancellationToken);
    public virtual Task ReleasedSavepointAsync(DbTransaction transaction, TransactionEventData eventData, CancellationToken cancellationToken);
    public virtual void TransactionFailed(DbTransaction transaction, TransactionErrorEventData eventData);
    public virtual Task TransactionFailedAsync(DbTransaction transaction, TransactionErrorEventData eventData, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.IndexEventData : EventData {
    [CompilerGeneratedAttribute]
private IEntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <PropertyNames>k__BackingField;
    public IEntityType EntityType { get; }
    [NullableAttribute("2")]
public string Name { get; }
    public List`1<string> PropertyNames { get; }
    public IndexEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IEntityType entityType, string indexName, List`1<string> indexPropertyNames);
    [CompilerGeneratedAttribute]
public virtual IEntityType get_EntityType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual List`1<string> get_PropertyNames();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.IndexWithPropertiesEventData : EventData {
    [CompilerGeneratedAttribute]
private IEntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <PropertyNames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Property1Name>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`2<string, string>> <TablesMappedToProperty1>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Property2Name>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`2<string, string>> <TablesMappedToProperty2>k__BackingField;
    public IEntityType EntityType { get; }
    [NullableAttribute("2")]
public string Name { get; }
    public List`1<string> PropertyNames { get; }
    public string Property1Name { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ValueTuple`2<string, string>> TablesMappedToProperty1 { get; }
    public string Property2Name { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ValueTuple`2<string, string>> TablesMappedToProperty2 { get; }
    public IndexWithPropertiesEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IEntityType entityType, string indexName, List`1<string> indexPropertyNames, string property1Name, List`1<ValueTuple`2<string, string>> tablesMappedToProperty1, string property2Name, List`1<ValueTuple`2<string, string>> tablesMappedToProperty2);
    [CompilerGeneratedAttribute]
public virtual IEntityType get_EntityType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual List`1<string> get_PropertyNames();
    [CompilerGeneratedAttribute]
public virtual string get_Property1Name();
    [CompilerGeneratedAttribute]
public virtual List`1<ValueTuple`2<string, string>> get_TablesMappedToProperty1();
    [CompilerGeneratedAttribute]
public virtual string get_Property2Name();
    [CompilerGeneratedAttribute]
public virtual List`1<ValueTuple`2<string, string>> get_TablesMappedToProperty2();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.IndexWithPropertyEventData : EventData {
    [CompilerGeneratedAttribute]
private IEntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <PropertyNames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public IEntityType EntityType { get; }
    [NullableAttribute("2")]
public string Name { get; }
    public List`1<string> PropertyNames { get; }
    public string PropertyName { get; }
    public IndexWithPropertyEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IEntityType entityType, string indexName, List`1<string> indexPropertyNames, string invalidPropertyName);
    [CompilerGeneratedAttribute]
public virtual IEntityType get_EntityType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual List`1<string> get_PropertyNames();
    [CompilerGeneratedAttribute]
public virtual string get_PropertyName();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Diagnostics.Internal.DbCommandInterceptorAggregator : InterceptorAggregator`1<IDbCommandInterceptor> {
    protected virtual IDbCommandInterceptor CreateChain(IEnumerable`1<IDbCommandInterceptor> interceptors);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Diagnostics.Internal.DbConnectionInterceptorAggregator : InterceptorAggregator`1<IDbConnectionInterceptor> {
    protected virtual IDbConnectionInterceptor CreateChain(IEnumerable`1<IDbConnectionInterceptor> interceptors);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Diagnostics.Internal.DbTransactionInterceptorAggregator : InterceptorAggregator`1<IDbTransactionInterceptor> {
    protected virtual IDbTransactionInterceptor CreateChain(IEnumerable`1<IDbTransactionInterceptor> interceptors);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalCommandDiagnosticsLogger : DiagnosticsLogger`1<Command> {
    private DateTimeOffset _suppressCommandCreateExpiration;
    private DateTimeOffset _suppressCommandExecuteExpiration;
    private DateTimeOffset _suppressDataReaderClosingExpiration;
    private DateTimeOffset _suppressDataReaderDisposingExpiration;
    private TimeSpan _loggingCacheTime;
    public RelationalCommandDiagnosticsLogger(ILoggerFactory loggerFactory, ILoggingOptions loggingOptions, DiagnosticSource diagnosticSource, LoggingDefinitions loggingDefinitions, IDbContextLogger contextLogger, IDbContextOptions contextOptions, IInterceptors interceptors);
    public virtual InterceptionResult`1<DbCommand> CommandCreating(IRelationalConnection connection, DbCommandMethod commandMethod, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime, CommandSource commandSource);
    private CommandCorrelatedEventData BroadcastCommandCreating(DbConnection connection, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, bool async, DateTimeOffset startTime, EventDefinition`1<string> definition, bool diagnosticSourceEnabled, bool simpleLogEnabled, CommandSource commandSource);
    public virtual DbCommand CommandCreated(IRelationalConnection connection, DbCommand command, DbCommandMethod commandMethod, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource);
    private CommandEndEventData BroadcastCommandCreated(DbConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, bool async, DateTimeOffset startTime, TimeSpan duration, EventDefinition`2<string, int> definition, bool diagnosticSourceEnabled, bool simpleLogEnabled, CommandSource commandSource);
    public virtual DbCommand CommandInitialized(IRelationalConnection connection, DbCommand command, DbCommandMethod commandMethod, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource);
    private CommandEndEventData BroadcastCommandInitialized(DbConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, bool async, DateTimeOffset startTime, TimeSpan duration, EventDefinition`2<string, int> definition, bool diagnosticSourceEnabled, bool simpleLogEnabled, CommandSource commandSource);
    public virtual InterceptionResult`1<DbDataReader> CommandReaderExecuting(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime, CommandSource commandSource);
    public virtual InterceptionResult`1<object> CommandScalarExecuting(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime, CommandSource commandSource);
    public virtual InterceptionResult`1<int> CommandNonQueryExecuting(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime, CommandSource commandSource);
    public virtual ValueTask`1<InterceptionResult`1<DbDataReader>> CommandReaderExecutingAsync(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime, CommandSource commandSource, CancellationToken cancellationToken);
    public virtual ValueTask`1<InterceptionResult`1<object>> CommandScalarExecutingAsync(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime, CommandSource commandSource, CancellationToken cancellationToken);
    public virtual ValueTask`1<InterceptionResult`1<int>> CommandNonQueryExecutingAsync(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime, CommandSource commandSource, CancellationToken cancellationToken);
    private CommandEventData BroadcastCommandExecuting(DbConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, bool async, DateTimeOffset startTime, EventDefinition`5<string, CommandType, int, string, string> definition, bool diagnosticSourceEnabled, bool simpleLogEnabled, CommandSource commandSource);
    public virtual DbDataReader CommandReaderExecuted(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DbDataReader methodResult, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource);
    [NullableContextAttribute("2")]
public virtual object CommandScalarExecuted(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, object methodResult, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource);
    public virtual int CommandNonQueryExecuted(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, int methodResult, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource);
    public virtual ValueTask`1<DbDataReader> CommandReaderExecutedAsync(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DbDataReader methodResult, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource, CancellationToken cancellationToken);
    public virtual ValueTask`1<object> CommandScalarExecutedAsync(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, object methodResult, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource, CancellationToken cancellationToken);
    public virtual ValueTask`1<int> CommandNonQueryExecutedAsync(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, int methodResult, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource, CancellationToken cancellationToken);
    private CommandExecutedEventData BroadcastCommandExecuted(DbConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, object methodResult, bool async, DateTimeOffset startTime, TimeSpan duration, EventDefinition`6<string, string, CommandType, int, string, string> definition, bool diagnosticSourceEnabled, bool simpleLogEnabled, CommandSource commandSource);
    public virtual void CommandError(IRelationalConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, Exception exception, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource);
    private void LogCommandError(DbCommand command, TimeSpan duration, EventDefinition`6<string, string, CommandType, int, string, string> definition);
    public virtual Task CommandErrorAsync(IRelationalConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, Exception exception, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource, CancellationToken cancellationToken);
    private CommandErrorEventData BroadcastCommandError(DbConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, Exception exception, bool async, DateTimeOffset startTime, TimeSpan duration, EventDefinition`6<string, string, CommandType, int, string, string> definition, bool diagnosticSourceEnabled, bool simpleLogEnabled, CommandSource commandSource);
    public virtual void CommandCanceled(IRelationalConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource);
    public virtual Task CommandCanceledAsync(IRelationalConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource, CancellationToken cancellationToken);
    private void LogCommandCanceled(DbCommand command, TimeSpan duration, EventDefinition`6<string, string, CommandType, int, string, string> definition);
    private CommandEndEventData BroadcastCommandCanceled(DbConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, bool async, DateTimeOffset startTime, TimeSpan duration, EventDefinition`6<string, string, CommandType, int, string, string> definition, bool diagnosticSourceEnabled, bool simpleLogEnabled, CommandSource commandSource);
    public virtual InterceptionResult DataReaderClosing(IRelationalConnection connection, DbCommand command, DbDataReader dataReader, Guid commandId, int recordsAffected, int readCount, DateTimeOffset startTime);
    public virtual ValueTask`1<InterceptionResult> DataReaderClosingAsync(IRelationalConnection connection, DbCommand command, DbDataReader dataReader, Guid commandId, int recordsAffected, int readCount, DateTimeOffset startTime);
    private static string CreateDataReaderClosingString(EventDefinitionBase definition, EventData payload);
    public virtual InterceptionResult DataReaderDisposing(IRelationalConnection connection, DbCommand command, DbDataReader dataReader, Guid commandId, int recordsAffected, int readCount, DateTimeOffset startTime, TimeSpan duration);
    private static string CreateDataReaderDisposingString(EventDefinitionBase definition, EventData payload);
    public virtual bool ShouldLogCommandCreate(DateTimeOffset now);
    public virtual bool ShouldLogCommandExecute(DateTimeOffset now);
    public virtual bool ShouldLogDataReaderClose(DateTimeOffset now);
    public virtual bool ShouldLogDataReaderDispose(DateTimeOffset now);
    private bool ShouldLogParameterValues(DbCommand command);
    [CompilerGeneratedAttribute]
internal static string <BroadcastCommandCreating>g__CommandCreating|7_0(EventDefinitionBase definition, EventData payload);
    [CompilerGeneratedAttribute]
internal static string <BroadcastCommandCreated>g__CommandCreated|9_0(EventDefinitionBase definition, EventData payload);
    [CompilerGeneratedAttribute]
internal static string <BroadcastCommandInitialized>g__CommandInitialized|11_0(EventDefinitionBase definition, EventData payload);
    [CompilerGeneratedAttribute]
internal static string <BroadcastCommandExecuting>g__CommandExecuting|18_0(EventDefinitionBase definition, EventData payload);
    [CompilerGeneratedAttribute]
internal static string <BroadcastCommandExecuted>g__CommandExecuted|25_0(EventDefinitionBase definition, EventData payload);
    [CompilerGeneratedAttribute]
internal static string <BroadcastCommandError>g__CommandError|29_0(EventDefinitionBase definition, EventData payload);
    [CompilerGeneratedAttribute]
internal static string <BroadcastCommandCanceled>g__CommandCanceled|33_0(EventDefinitionBase definition, EventData payload);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalConnectionDiagnosticsLogger : DiagnosticsLogger`1<Connection> {
    private DateTimeOffset _suppressCreateExpiration;
    private DateTimeOffset _suppressDisposeExpiration;
    private DateTimeOffset _suppressOpenExpiration;
    private DateTimeOffset _suppressCloseExpiration;
    private TimeSpan _loggingCacheTime;
    public RelationalConnectionDiagnosticsLogger(ILoggerFactory loggerFactory, ILoggingOptions loggingOptions, DiagnosticSource diagnosticSource, LoggingDefinitions loggingDefinitions, IDbContextLogger contextLogger, IDbContextOptions contextOptions, IInterceptors interceptors);
    public virtual InterceptionResult ConnectionOpening(IRelationalConnection connection, DateTimeOffset startTime);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<InterceptionResult> ConnectionOpeningAsync(IRelationalConnection connection, DateTimeOffset startTime, CancellationToken cancellationToken);
    private ConnectionEventData BroadcastConnectionOpening(IRelationalConnection connection, DateTimeOffset startTime, EventDefinition`2<string, string> definition, bool async, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    public virtual void ConnectionOpened(IRelationalConnection connection, DateTimeOffset startTime, TimeSpan duration);
    public virtual Task ConnectionOpenedAsync(IRelationalConnection connection, DateTimeOffset startTime, TimeSpan duration, CancellationToken cancellationToken);
    private ConnectionEndEventData BroadcastConnectionOpened(IRelationalConnection connection, bool async, DateTimeOffset startTime, TimeSpan duration, EventDefinition`2<string, string> definition, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    public virtual InterceptionResult ConnectionClosing(IRelationalConnection connection, DateTimeOffset startTime);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<InterceptionResult> ConnectionClosingAsync(IRelationalConnection connection, DateTimeOffset startTime);
    private ConnectionEventData BroadcastConnectionClosing(IRelationalConnection connection, DateTimeOffset startTime, bool async, EventDefinition`2<string, string> definition, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    public virtual void ConnectionClosed(IRelationalConnection connection, DateTimeOffset startTime, TimeSpan duration);
    public virtual Task ConnectionClosedAsync(IRelationalConnection connection, DateTimeOffset startTime, TimeSpan duration);
    private ConnectionEndEventData BroadcastCollectionClosed(IRelationalConnection connection, DateTimeOffset startTime, TimeSpan duration, bool async, EventDefinition`3<string, string, int> definition, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    public virtual InterceptionResult ConnectionDisposing(IRelationalConnection connection, DateTimeOffset startTime);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<InterceptionResult> ConnectionDisposingAsync(IRelationalConnection connection, DateTimeOffset startTime);
    private ConnectionEventData BroadcastConnectionDisposing(IRelationalConnection connection, DateTimeOffset startTime, bool async, EventDefinition`2<string, string> definition, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    public virtual void ConnectionDisposed(IRelationalConnection connection, DateTimeOffset startTime, TimeSpan duration);
    public virtual Task ConnectionDisposedAsync(IRelationalConnection connection, DateTimeOffset startTime, TimeSpan duration);
    private ConnectionEndEventData BroadcastCollectionDisposed(IRelationalConnection connection, DateTimeOffset startTime, TimeSpan duration, bool async, EventDefinition`3<string, string, int> definition, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    public virtual void ConnectionError(IRelationalConnection connection, Exception exception, DateTimeOffset startTime, TimeSpan duration, bool logErrorAsDebug);
    public virtual Task ConnectionErrorAsync(IRelationalConnection connection, Exception exception, DateTimeOffset startTime, TimeSpan duration, bool logErrorAsDebug, CancellationToken cancellationToken);
    private ConnectionErrorEventData BroadcastConnectionError(IRelationalConnection connection, Exception exception, DateTimeOffset startTime, TimeSpan duration, bool async, EventDefinition`2<string, string> definition, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    private void LogConnectionError(IRelationalConnection connection, EventDefinition`2<string, string> definition);
    public virtual InterceptionResult`1<DbConnection> ConnectionCreating(IRelationalConnection connection, DateTimeOffset startTime);
    private ConnectionCreatingEventData BroadcastConnectionCreating(DbContext context, string connectionString, Guid connectionId, DateTimeOffset startTime, EventDefinition definition, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    public virtual DbConnection ConnectionCreated(IRelationalConnection connection, DateTimeOffset startTime, TimeSpan duration);
    private ConnectionCreatedEventData BroadcastConnectionCreated(DbConnection connection, DbContext context, Guid connectionId, DateTimeOffset startTime, TimeSpan duration, EventDefinition`1<int> definition, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    public virtual bool ShouldLogConnectionCreate(DateTimeOffset now);
    public virtual bool ShouldLogConnectionDispose(DateTimeOffset now);
    public virtual bool ShouldLogConnectionOpen(DateTimeOffset now);
    public virtual bool ShouldLogConnectionClose(DateTimeOffset now);
    [CompilerGeneratedAttribute]
internal static string <BroadcastConnectionOpening>g__ConnectionOpening|8_0(EventDefinitionBase definition, EventData payload);
    [CompilerGeneratedAttribute]
internal static string <BroadcastConnectionOpened>g__ConnectionOpened|11_0(EventDefinitionBase definition, EventData payload);
    [CompilerGeneratedAttribute]
internal static string <BroadcastConnectionClosing>g__ConnectionClosing|14_0(EventDefinitionBase definition, EventData payload);
    [CompilerGeneratedAttribute]
internal static string <BroadcastCollectionClosed>g__ConnectionClosed|17_0(EventDefinitionBase definition, EventData payload);
    [CompilerGeneratedAttribute]
internal static string <BroadcastConnectionDisposing>g__ConnectionDisposing|20_0(EventDefinitionBase definition, EventData payload);
    [CompilerGeneratedAttribute]
internal static string <BroadcastCollectionDisposed>g__ConnectionDisposed|23_0(EventDefinitionBase definition, EventData payload);
    [CompilerGeneratedAttribute]
internal static string <BroadcastConnectionError>g__ConnectionError|26_0(EventDefinitionBase definition, EventData payload);
    [CompilerGeneratedAttribute]
internal static string <BroadcastConnectionCreating>g__ConnectionCreating|29_0(EventDefinitionBase definition, EventData payload);
    [CompilerGeneratedAttribute]
internal static string <BroadcastConnectionCreated>g__ConnectionCreated|31_0(EventDefinitionBase definition, EventData payload);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources : object {
    private static ResourceManager _resourceManager;
    private static RelationalResources();
    public static EventDefinition LogAmbientTransaction(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogAmbientTransactionEnlisted(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogApplyingMigration(IDiagnosticsLogger logger);
    public static EventDefinition LogBatchExecutorFailedToReleaseSavepoint(IDiagnosticsLogger logger);
    public static EventDefinition LogBatchExecutorFailedToRollbackToSavepoint(IDiagnosticsLogger logger);
    public static EventDefinition`1<int> LogBatchReadyForExecution(IDiagnosticsLogger logger);
    public static EventDefinition`2<int, int> LogBatchSmallerThanMinBatchSize(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogBeganTransaction(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogBeginningTransaction(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogBoolWithDefaultWarning(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, int> LogClosedConnection(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogClosingConnection(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogClosingDataReader(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogColumnOrderIgnoredWarning(IDiagnosticsLogger logger);
    public static EventDefinition`6<string, string, CommandType, int, string, string> LogCommandCanceled(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, int> LogCommandCreated(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogCommandCreating(IDiagnosticsLogger logger);
    public static EventDefinition`6<string, string, CommandType, int, string, string> LogCommandFailed(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, int> LogCommandInitialized(IDiagnosticsLogger logger);
    public static EventDefinition LogCommittedTransaction(IDiagnosticsLogger logger);
    public static EventDefinition LogCommittingTransaction(IDiagnosticsLogger logger);
    public static EventDefinition`1<int> LogConnectionCreated(IDiagnosticsLogger logger);
    public static EventDefinition LogConnectionCreating(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, int> LogConnectionDisposed(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogConnectionDisposing(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogConnectionError(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogConnectionErrorAsDebug(IDiagnosticsLogger logger);
    public static EventDefinition LogCreatedTransactionSavepoint(IDiagnosticsLogger logger);
    public static EventDefinition LogCreatingTransactionSavepoint(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, int> LogDisposingDataReader(IDiagnosticsLogger logger);
    public static EventDefinition LogDisposingTransaction(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogDuplicateColumnOrders(IDiagnosticsLogger logger);
    public static EventDefinition`3<Type, string, Exception> LogExceptionDuringExecuteDelete(IDiagnosticsLogger logger);
    public static EventDefinition`3<Type, string, Exception> LogExceptionDuringExecuteUpdate(IDiagnosticsLogger logger);
    public static EventDefinition`3<Type, string, Exception> LogExceptionDuringNonQueryOperation(IDiagnosticsLogger logger);
    public static EventDefinition`6<string, string, CommandType, int, string, string> LogExecutedCommand(IDiagnosticsLogger logger);
    public static EventDefinition`5<string, CommandType, int, string, string> LogExecutingCommand(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogExplicitTransactionEnlisted(IDiagnosticsLogger logger);
    public static FallbackEventDefinition LogForeignKeyPropertiesMappedToUnrelatedTables(IDiagnosticsLogger logger);
    public static FallbackEventDefinition LogForeignKeyTpcPrincipal(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogGeneratingDown(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogGeneratingUp(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogKeyHasDefaultValue(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogKeyPropertiesNotMappedToTable(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogMigrating(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogMigrationAttributeMissingWarning(IDiagnosticsLogger logger);
    public static EventDefinition LogMultipleCollectionIncludeWarning(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogNamedIndexAllPropertiesNotToMappedToAnyTable(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, string, string> LogNamedIndexPropertiesBothMappedAndNotMappedToTable(IDiagnosticsLogger logger);
    public static FallbackEventDefinition LogNamedIndexPropertiesMappedToNonOverlappingTables(IDiagnosticsLogger logger);
    public static EventDefinition LogNoMigrationsApplied(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogNoMigrationsFound(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogOpenedConnection(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogOpeningConnection(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogOptionalDependentWithAllNullProperties(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogOptionalDependentWithAllNullPropertiesSensitive(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogOptionalDependentWithoutIdentifyingProperty(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogStoredProcedureConcurrencyTokenNotMapped(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogPossibleUnintendedUseOfEquals(IDiagnosticsLogger logger);
    public static EventDefinition LogReleasedTransactionSavepoint(IDiagnosticsLogger logger);
    public static EventDefinition LogReleasingTransactionSavepoint(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogRevertingMigration(IDiagnosticsLogger logger);
    public static EventDefinition LogRolledBackToTransactionSavepoint(IDiagnosticsLogger logger);
    public static EventDefinition LogRolledBackTransaction(IDiagnosticsLogger logger);
    public static EventDefinition LogRollingBackToTransactionSavepoint(IDiagnosticsLogger logger);
    public static EventDefinition LogRollingBackTransaction(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogTpcStoreGeneratedIdentity(IDiagnosticsLogger logger);
    public static EventDefinition LogTransactionError(IDiagnosticsLogger logger);
    public static EventDefinition LogUnexpectedTrailingResultSetWhenSaving(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogUnnamedIndexAllPropertiesNotToMappedToAnyTable(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogUnnamedIndexPropertiesBothMappedAndNotMappedToTable(IDiagnosticsLogger logger);
    public static EventDefinition`6<string, string, string, string, string, string> LogUnnamedIndexPropertiesMappedToNonOverlappingTables(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogUsingTransaction(IDiagnosticsLogger logger);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Diagnostics.IRelationalCommandDiagnosticsLogger {
    public abstract virtual InterceptionResult`1<DbCommand> CommandCreating(IRelationalConnection connection, DbCommandMethod commandMethod, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime, CommandSource commandSource);
    public abstract virtual DbCommand CommandCreated(IRelationalConnection connection, DbCommand command, DbCommandMethod commandMethod, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource);
    public abstract virtual DbCommand CommandInitialized(IRelationalConnection connection, DbCommand command, DbCommandMethod commandMethod, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource);
    public abstract virtual InterceptionResult`1<DbDataReader> CommandReaderExecuting(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime, CommandSource commandSource);
    public abstract virtual InterceptionResult`1<object> CommandScalarExecuting(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime, CommandSource commandSource);
    public abstract virtual InterceptionResult`1<int> CommandNonQueryExecuting(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime, CommandSource commandSource);
    public abstract virtual ValueTask`1<InterceptionResult`1<DbDataReader>> CommandReaderExecutingAsync(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime, CommandSource commandSource, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<InterceptionResult`1<object>> CommandScalarExecutingAsync(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime, CommandSource commandSource, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<InterceptionResult`1<int>> CommandNonQueryExecutingAsync(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime, CommandSource commandSource, CancellationToken cancellationToken);
    public abstract virtual DbDataReader CommandReaderExecuted(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DbDataReader methodResult, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource);
    [NullableContextAttribute("2")]
public abstract virtual object CommandScalarExecuted(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, object methodResult, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource);
    public abstract virtual int CommandNonQueryExecuted(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, int methodResult, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource);
    public abstract virtual ValueTask`1<DbDataReader> CommandReaderExecutedAsync(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DbDataReader methodResult, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<object> CommandScalarExecutedAsync(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, object methodResult, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<int> CommandNonQueryExecutedAsync(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, int methodResult, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource, CancellationToken cancellationToken);
    public abstract virtual void CommandError(IRelationalConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, Exception exception, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource);
    public abstract virtual Task CommandErrorAsync(IRelationalConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, Exception exception, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource, CancellationToken cancellationToken);
    public abstract virtual void CommandCanceled(IRelationalConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource);
    public abstract virtual Task CommandCanceledAsync(IRelationalConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource, CancellationToken cancellationToken);
    public abstract virtual InterceptionResult DataReaderDisposing(IRelationalConnection connection, DbCommand command, DbDataReader dataReader, Guid commandId, int recordsAffected, int readCount, DateTimeOffset startTime, TimeSpan duration);
    public abstract virtual InterceptionResult DataReaderClosing(IRelationalConnection connection, DbCommand command, DbDataReader dataReader, Guid commandId, int recordsAffected, int readCount, DateTimeOffset startTime);
    public abstract virtual ValueTask`1<InterceptionResult> DataReaderClosingAsync(IRelationalConnection connection, DbCommand command, DbDataReader dataReader, Guid commandId, int recordsAffected, int readCount, DateTimeOffset startTime);
    public abstract virtual bool ShouldLogCommandCreate(DateTimeOffset now);
    public abstract virtual bool ShouldLogCommandExecute(DateTimeOffset now);
    public abstract virtual bool ShouldLogDataReaderClose(DateTimeOffset now);
    public abstract virtual bool ShouldLogDataReaderDispose(DateTimeOffset now);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Diagnostics.IRelationalConnectionDiagnosticsLogger {
    public abstract virtual InterceptionResult`1<DbConnection> ConnectionCreating(IRelationalConnection connection, DateTimeOffset startTime);
    public abstract virtual DbConnection ConnectionCreated(IRelationalConnection connection, DateTimeOffset startTime, TimeSpan duration);
    public abstract virtual InterceptionResult ConnectionDisposing(IRelationalConnection connection, DateTimeOffset startTime);
    [NullableContextAttribute("0")]
public abstract virtual ValueTask`1<InterceptionResult> ConnectionDisposingAsync(IRelationalConnection connection, DateTimeOffset startTime);
    public abstract virtual void ConnectionDisposed(IRelationalConnection connection, DateTimeOffset startTime, TimeSpan duration);
    public abstract virtual Task ConnectionDisposedAsync(IRelationalConnection connection, DateTimeOffset startTime, TimeSpan duration);
    public abstract virtual InterceptionResult ConnectionOpening(IRelationalConnection connection, DateTimeOffset startTime);
    [NullableContextAttribute("0")]
public abstract virtual ValueTask`1<InterceptionResult> ConnectionOpeningAsync(IRelationalConnection connection, DateTimeOffset startTime, CancellationToken cancellationToken);
    public abstract virtual void ConnectionOpened(IRelationalConnection connection, DateTimeOffset startTime, TimeSpan duration);
    public abstract virtual Task ConnectionOpenedAsync(IRelationalConnection connection, DateTimeOffset startTime, TimeSpan duration, CancellationToken cancellationToken);
    public abstract virtual InterceptionResult ConnectionClosing(IRelationalConnection connection, DateTimeOffset startTime);
    [NullableContextAttribute("0")]
public abstract virtual ValueTask`1<InterceptionResult> ConnectionClosingAsync(IRelationalConnection connection, DateTimeOffset startTime);
    public abstract virtual void ConnectionClosed(IRelationalConnection connection, DateTimeOffset startTime, TimeSpan duration);
    public abstract virtual Task ConnectionClosedAsync(IRelationalConnection connection, DateTimeOffset startTime, TimeSpan duration);
    public abstract virtual void ConnectionError(IRelationalConnection connection, Exception exception, DateTimeOffset startTime, TimeSpan duration, bool logErrorAsDebug);
    public abstract virtual Task ConnectionErrorAsync(IRelationalConnection connection, Exception exception, DateTimeOffset startTime, TimeSpan duration, bool logErrorAsDebug, CancellationToken cancellationToken);
    public abstract virtual bool ShouldLogConnectionCreate(DateTimeOffset now);
    public abstract virtual bool ShouldLogConnectionDispose(DateTimeOffset now);
    public abstract virtual bool ShouldLogConnectionOpen(DateTimeOffset now);
    public abstract virtual bool ShouldLogConnectionClose(DateTimeOffset now);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.MigrationAssemblyEventData : MigratorEventData {
    [CompilerGeneratedAttribute]
private IMigrationsAssembly <MigrationsAssembly>k__BackingField;
    public IMigrationsAssembly MigrationsAssembly { get; }
    public MigrationAssemblyEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IMigrator migrator, IMigrationsAssembly migrationsAssembly);
    [CompilerGeneratedAttribute]
public virtual IMigrationsAssembly get_MigrationsAssembly();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.MigrationColumnOperationEventData : EventData {
    [CompilerGeneratedAttribute]
private ColumnOperation <ColumnOperation>k__BackingField;
    public ColumnOperation ColumnOperation { get; }
    public MigrationColumnOperationEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, ColumnOperation columnOperation);
    [CompilerGeneratedAttribute]
public virtual ColumnOperation get_ColumnOperation();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.MigrationEventData : MigratorEventData {
    [CompilerGeneratedAttribute]
private Migration <Migration>k__BackingField;
    public Migration Migration { get; }
    public MigrationEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IMigrator migrator, Migration migration);
    [CompilerGeneratedAttribute]
public virtual Migration get_Migration();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.MigrationScriptingEventData : MigrationEventData {
    [CompilerGeneratedAttribute]
private string <FromMigration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToMigration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIdempotent>k__BackingField;
    public string FromMigration { get; }
    public string ToMigration { get; }
    public bool IsIdempotent { get; }
    [NullableContextAttribute("1")]
public MigrationScriptingEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IMigrator migrator, Migration migration, string fromMigration, string toMigration, bool idempotent);
    [CompilerGeneratedAttribute]
public virtual string get_FromMigration();
    [CompilerGeneratedAttribute]
public virtual string get_ToMigration();
    [CompilerGeneratedAttribute]
public virtual bool get_IsIdempotent();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.MigrationTypeEventData : EventData {
    [CompilerGeneratedAttribute]
private TypeInfo <MigrationType>k__BackingField;
    public TypeInfo MigrationType { get; }
    public MigrationTypeEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, TypeInfo migrationType);
    [CompilerGeneratedAttribute]
public virtual TypeInfo get_MigrationType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.MigratorConnectionEventData : MigratorEventData {
    [CompilerGeneratedAttribute]
private DbConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ConnectionId>k__BackingField;
    public DbConnection Connection { get; }
    public Guid ConnectionId { get; }
    public MigratorConnectionEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IMigrator migrator, DbConnection connection, Guid connectionId);
    [CompilerGeneratedAttribute]
public virtual DbConnection get_Connection();
    [CompilerGeneratedAttribute]
public virtual Guid get_ConnectionId();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.MigratorEventData : EventData {
    [CompilerGeneratedAttribute]
private IMigrator <Migrator>k__BackingField;
    public IMigrator Migrator { get; }
    public MigratorEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IMigrator migrator);
    [CompilerGeneratedAttribute]
public virtual IMigrator get_Migrator();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.MinBatchSizeEventData : BatchEventData {
    [CompilerGeneratedAttribute]
private int <MinBatchSize>k__BackingField;
    public int MinBatchSize { get; }
    [NullableContextAttribute("1")]
public MinBatchSizeEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IEnumerable`1<IUpdateEntry> entries, int commandCount, int minBatchSize);
    [CompilerGeneratedAttribute]
public virtual int get_MinBatchSize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.RelationalConcurrencyExceptionEventData : ConcurrencyExceptionEventData {
    [CompilerGeneratedAttribute]
private DbConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private DbCommand <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private DbDataReader <DataReader>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <CommandId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ConnectionId>k__BackingField;
    public DbConnection Connection { get; }
    public DbCommand Command { get; }
    public DbDataReader DataReader { get; }
    public Guid CommandId { get; }
    public Guid ConnectionId { get; }
    public RelationalConcurrencyExceptionEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbContext context, DbConnection connection, DbCommand command, DbDataReader dataReader, Guid commandId, Guid connectionId, IReadOnlyList`1<IUpdateEntry> entries, DbUpdateConcurrencyException exception);
    [CompilerGeneratedAttribute]
public virtual DbConnection get_Connection();
    [CompilerGeneratedAttribute]
public virtual DbCommand get_Command();
    [CompilerGeneratedAttribute]
public virtual DbDataReader get_DataReader();
    [CompilerGeneratedAttribute]
public virtual Guid get_CommandId();
    [CompilerGeneratedAttribute]
public virtual Guid get_ConnectionId();
}
public static class Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId : object {
    private static string _connectionPrefix;
    public static EventId ConnectionOpening;
    public static EventId ConnectionOpened;
    public static EventId ConnectionClosing;
    public static EventId ConnectionClosed;
    public static EventId ConnectionDisposing;
    public static EventId ConnectionDisposed;
    public static EventId ConnectionError;
    public static EventId ConnectionCreating;
    public static EventId ConnectionCreated;
    private static string _sqlPrefix;
    public static EventId CommandCanceled;
    public static EventId CommandCreating;
    public static EventId CommandCreated;
    public static EventId CommandInitialized;
    public static EventId CommandExecuting;
    public static EventId CommandExecuted;
    public static EventId CommandError;
    private static string _transactionPrefix;
    public static EventId TransactionStarted;
    public static EventId TransactionStarting;
    public static EventId TransactionUsed;
    public static EventId TransactionCommitting;
    public static EventId TransactionCommitted;
    public static EventId TransactionRollingBack;
    public static EventId TransactionRolledBack;
    public static EventId CreatingTransactionSavepoint;
    public static EventId CreatedTransactionSavepoint;
    public static EventId RollingBackToTransactionSavepoint;
    public static EventId RolledBackToTransactionSavepoint;
    public static EventId ReleasingTransactionSavepoint;
    public static EventId ReleasedTransactionSavepoint;
    public static EventId TransactionDisposed;
    public static EventId TransactionError;
    public static EventId AmbientTransactionWarning;
    public static EventId AmbientTransactionEnlisted;
    public static EventId ExplicitTransactionEnlisted;
    public static EventId DataReaderDisposing;
    public static EventId DataReaderClosing;
    private static string _migrationsPrefix;
    public static EventId MigrateUsingConnection;
    public static EventId MigrationReverting;
    public static EventId MigrationApplying;
    public static EventId MigrationGeneratingDownScript;
    public static EventId MigrationGeneratingUpScript;
    public static EventId MigrationsNotApplied;
    public static EventId MigrationsNotFound;
    public static EventId MigrationAttributeMissingWarning;
    public static EventId ColumnOrderIgnoredWarning;
    private static string _queryPrefix;
    public static EventId QueryPossibleUnintendedUseOfEqualsWarning;
    public static EventId MultipleCollectionIncludeWarning;
    public static EventId NonQueryOperationFailed;
    public static EventId ExecuteDeleteFailed;
    public static EventId ExecuteUpdateFailed;
    private static string _validationPrefix;
    public static EventId ModelValidationKeyDefaultValueWarning;
    public static EventId BoolWithDefaultWarning;
    public static EventId AllIndexPropertiesNotToMappedToAnyTable;
    public static EventId IndexPropertiesBothMappedAndNotMappedToTable;
    public static EventId IndexPropertiesMappedToNonOverlappingTables;
    public static EventId KeyPropertiesNotMappedToTable;
    public static EventId StoredProcedureConcurrencyTokenNotMapped;
    public static EventId ForeignKeyPropertiesMappedToUnrelatedTables;
    public static EventId ForeignKeyTpcPrincipalWarning;
    public static EventId TpcStoreGeneratedIdentityWarning;
    public static EventId OptionalDependentWithoutIdentifyingPropertyWarning;
    public static EventId DuplicateColumnOrders;
    private static string _updatePrefix;
    public static EventId BatchReadyForExecution;
    public static EventId BatchSmallerThanMinBatchSize;
    public static EventId BatchExecutorFailedToRollbackToSavepoint;
    public static EventId BatchExecutorFailedToReleaseSavepoint;
    public static EventId OptionalDependentWithAllNullPropertiesWarning;
    public static EventId UnexpectedTrailingResultSetWhenSaving;
    private static RelationalEventId();
    private static EventId MakeConnectionId(Id id);
    private static EventId MakeCommandId(Id id);
    private static EventId MakeTransactionId(Id id);
    private static EventId MakeMigrationsId(Id id);
    private static EventId MakeQueryId(Id id);
    private static EventId MakeValidationId(Id id);
    private static EventId MakeUpdateId(Id id);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions : object {
    [ExtensionAttribute]
public static InterceptionResult`1<DbTransaction> TransactionStarting(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, IsolationLevel isolationLevel, Guid transactionId, DateTimeOffset startTime);
    [ExtensionAttribute]
public static ValueTask`1<InterceptionResult`1<DbTransaction>> TransactionStartingAsync(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, IsolationLevel isolationLevel, Guid transactionId, DateTimeOffset startTime, CancellationToken cancellationToken);
    private static TransactionStartingEventData BroadcastTransactionStarting(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, IsolationLevel isolationLevel, Guid transactionId, bool async, DateTimeOffset startTime, EventDefinition`1<string> definition, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    private static void LogTransactionStarting(IDiagnosticsLogger`1<Transaction> diagnostics, IsolationLevel isolationLevel, EventDefinition`1<string> definition);
    private static string TransactionStarting(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static DbTransaction TransactionStarted(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, TimeSpan duration);
    [ExtensionAttribute]
public static ValueTask`1<DbTransaction> TransactionStartedAsync(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, TimeSpan duration, CancellationToken cancellationToken);
    private static TransactionEndEventData BroadcastTransactionStarted(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, bool async, DateTimeOffset startTime, TimeSpan duration, EventDefinition`1<string> definition, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    private static void LogTransactionStarted(IDiagnosticsLogger`1<Transaction> diagnostics, DbTransaction transaction, EventDefinition`1<string> definition);
    private static string TransactionStarted(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static DbTransaction TransactionUsed(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime);
    [ExtensionAttribute]
public static ValueTask`1<DbTransaction> TransactionUsedAsync(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, CancellationToken cancellationToken);
    private static TransactionEventData BroadcastTransactionUsed(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, bool async, DateTimeOffset startTime, EventDefinition`1<string> definition, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    private static void LogTransactionUsed(IDiagnosticsLogger`1<Transaction> diagnostics, DbTransaction transaction, EventDefinition`1<string> definition);
    private static string TransactionUsed(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static InterceptionResult TransactionCommitting(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime);
    [ExtensionAttribute]
public static ValueTask`1<InterceptionResult> TransactionCommittingAsync(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, CancellationToken cancellationToken);
    private static TransactionEventData BroadcastTransactionCommitting(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, EventDefinition definition, bool async, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    private static void LogTransactionCommitting(IDiagnosticsLogger`1<Transaction> diagnostics, EventDefinition definition);
    [ExtensionAttribute]
public static void TransactionCommitted(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, TimeSpan duration);
    [ExtensionAttribute]
public static Task TransactionCommittedAsync(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, TimeSpan duration, CancellationToken cancellationToken);
    private static TransactionEndEventData BroadcastTransactionCommitted(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, TimeSpan duration, EventDefinition definition, bool async, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    private static void LogTransactionCommitted(IDiagnosticsLogger`1<Transaction> diagnostics, EventDefinition definition);
    [ExtensionAttribute]
public static void TransactionRolledBack(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, TimeSpan duration);
    [ExtensionAttribute]
public static Task TransactionRolledBackAsync(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, TimeSpan duration, CancellationToken cancellationToken);
    private static TransactionEndEventData BroadcastTransactionRolledBack(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, TimeSpan duration, EventDefinition definition, bool async, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    private static void LogTransactionRolledBack(IDiagnosticsLogger`1<Transaction> diagnostics, EventDefinition definition);
    [ExtensionAttribute]
public static InterceptionResult TransactionRollingBack(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime);
    [ExtensionAttribute]
public static ValueTask`1<InterceptionResult> TransactionRollingBackAsync(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, CancellationToken cancellationToken);
    private static TransactionEventData BroadcastTransactionRollingBack(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, EventDefinition definition, bool async, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    private static void LogTransactionRollingBack(IDiagnosticsLogger`1<Transaction> diagnostics, EventDefinition definition);
    [ExtensionAttribute]
public static InterceptionResult CreatingTransactionSavepoint(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime);
    [ExtensionAttribute]
public static ValueTask`1<InterceptionResult> CreatingTransactionSavepointAsync(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, CancellationToken cancellationToken);
    private static TransactionEventData BroadcastCreatingTransactionSavepoint(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, EventDefinition definition, bool async, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    private static void LogCreatingTransactionSavepoint(IDiagnosticsLogger`1<Transaction> diagnostics, EventDefinition definition);
    [ExtensionAttribute]
public static void CreatedTransactionSavepoint(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime);
    [ExtensionAttribute]
public static Task CreatedTransactionSavepointAsync(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, CancellationToken cancellationToken);
    private static TransactionEventData BroadcastCreatedTransactionSavepoint(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, EventDefinition definition, bool async, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    private static void LogCreatedTransactionSavepoint(IDiagnosticsLogger`1<Transaction> diagnostics, EventDefinition definition);
    [ExtensionAttribute]
public static InterceptionResult RollingBackToTransactionSavepoint(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime);
    [ExtensionAttribute]
public static ValueTask`1<InterceptionResult> RollingBackToTransactionSavepointAsync(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, CancellationToken cancellationToken);
    private static TransactionEventData BroadcastRollingBackToTransactionSavepoint(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, EventDefinition definition, bool async, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    private static void LogRollingBackToTransactionSavepoint(IDiagnosticsLogger`1<Transaction> diagnostics, EventDefinition definition);
    [ExtensionAttribute]
public static void RolledBackToTransactionSavepoint(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime);
    [ExtensionAttribute]
public static Task RolledBackToTransactionSavepointAsync(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, CancellationToken cancellationToken);
    private static TransactionEventData BroadcastRolledBackToTransactionSavepoint(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, EventDefinition definition, bool async, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    private static void LogRolledBackToTransactionSavepoint(IDiagnosticsLogger`1<Transaction> diagnostics, EventDefinition definition);
    [ExtensionAttribute]
public static InterceptionResult ReleasingTransactionSavepoint(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime);
    [ExtensionAttribute]
public static ValueTask`1<InterceptionResult> ReleasingTransactionSavepointAsync(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, CancellationToken cancellationToken);
    private static TransactionEventData BroadcastReleasingTransactionSavepoint(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, EventDefinition definition, bool async, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    private static void LogReleasingTransactionSavepoint(IDiagnosticsLogger`1<Transaction> diagnostics, EventDefinition definition);
    [ExtensionAttribute]
public static void ReleasedTransactionSavepoint(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime);
    [ExtensionAttribute]
public static Task ReleasedTransactionSavepointAsync(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, CancellationToken cancellationToken);
    private static TransactionEventData BroadcastReleasedTransactionSavepoint(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime, EventDefinition definition, bool async, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    private static void LogReleasedTransactionSavepoint(IDiagnosticsLogger`1<Transaction> diagnostics, EventDefinition definition);
    [ExtensionAttribute]
public static void TransactionDisposed(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, DateTimeOffset startTime);
    [ExtensionAttribute]
public static void TransactionError(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, string action, Exception exception, DateTimeOffset startTime, TimeSpan duration);
    [ExtensionAttribute]
public static Task TransactionErrorAsync(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, string action, Exception exception, DateTimeOffset startTime, TimeSpan duration, CancellationToken cancellationToken);
    private static TransactionErrorEventData BroadcastTransactionError(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DbTransaction transaction, Guid transactionId, string action, Exception exception, DateTimeOffset startTime, TimeSpan duration, EventDefinition definition, bool async, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    private static void LogTransactionError(IDiagnosticsLogger`1<Transaction> diagnostics, EventDefinition definition);
    [ExtensionAttribute]
public static void AmbientTransactionWarning(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, DateTimeOffset startTime);
    [ExtensionAttribute]
public static void AmbientTransactionEnlisted(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, Transaction transaction);
    private static string AmbientTransactionEnlisted(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ExplicitTransactionEnlisted(IDiagnosticsLogger`1<Transaction> diagnostics, IRelationalConnection connection, Transaction transaction);
    private static string ExplicitTransactionEnlisted(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void MigrateUsingConnection(IDiagnosticsLogger`1<Migrations> diagnostics, IMigrator migrator, IRelationalConnection connection);
    private static string MigrateUsingConnection(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void MigrationReverting(IDiagnosticsLogger`1<Migrations> diagnostics, IMigrator migrator, Migration migration);
    private static string MigrationReverting(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void MigrationApplying(IDiagnosticsLogger`1<Migrations> diagnostics, IMigrator migrator, Migration migration);
    private static string MigrationApplying(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void MigrationGeneratingDownScript(IDiagnosticsLogger`1<Migrations> diagnostics, IMigrator migrator, Migration migration, string fromMigration, string toMigration, bool idempotent);
    private static string MigrationGeneratingDownScript(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void MigrationGeneratingUpScript(IDiagnosticsLogger`1<Migrations> diagnostics, IMigrator migrator, Migration migration, string fromMigration, string toMigration, bool idempotent);
    private static string MigrationGeneratingUpScript(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void MigrationsNotApplied(IDiagnosticsLogger`1<Migrations> diagnostics, IMigrator migrator);
    [ExtensionAttribute]
public static void MigrationsNotFound(IDiagnosticsLogger`1<Migrations> diagnostics, IMigrator migrator, IMigrationsAssembly migrationsAssembly);
    private static string MigrationsNotFound(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void MigrationAttributeMissingWarning(IDiagnosticsLogger`1<Migrations> diagnostics, TypeInfo migrationType);
    private static string MigrationAttributeMissingWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void QueryPossibleUnintendedUseOfEqualsWarning(IDiagnosticsLogger`1<Query> diagnostics, SqlExpression left, SqlExpression right);
    private static string QueryPossibleUnintendedUseOfEqualsWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ExecuteDeleteFailed(IDiagnosticsLogger`1<Query> diagnostics, Type contextType, Exception exception);
    private static string ExecuteDeleteFailed(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ExecuteUpdateFailed(IDiagnosticsLogger`1<Query> diagnostics, Type contextType, Exception exception);
    private static string ExecuteUpdateFailed(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void NonQueryOperationFailed(IDiagnosticsLogger`1<Query> diagnostics, Type contextType, Exception exception);
    private static string NonQueryOperationFailed(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void MultipleCollectionIncludeWarning(IDiagnosticsLogger`1<Query> diagnostics);
    [ExtensionAttribute]
public static void ModelValidationKeyDefaultValueWarning(IDiagnosticsLogger`1<Validation> diagnostics, IProperty property);
    private static string ModelValidationKeyDefaultValueWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void BoolWithDefaultWarning(IDiagnosticsLogger`1<Validation> diagnostics, IProperty property);
    private static string BoolWithDefaultWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void BatchReadyForExecution(IDiagnosticsLogger`1<Update> diagnostics, IEnumerable`1<IUpdateEntry> entries, int commandCount);
    private static string BatchReadyForExecution(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void BatchSmallerThanMinBatchSize(IDiagnosticsLogger`1<Update> diagnostics, IEnumerable`1<IUpdateEntry> entries, int commandCount, int minBatchSize);
    private static string BatchSmallerThanMinBatchSize(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void AllIndexPropertiesNotToMappedToAnyTable(IDiagnosticsLogger`1<Validation> diagnostics, IEntityType entityType, IIndex index);
    private static string UnnamedIndexAllPropertiesNotToMappedToAnyTable(EventDefinitionBase definition, EventData payload);
    private static string NamedIndexAllPropertiesNotToMappedToAnyTable(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void IndexPropertiesBothMappedAndNotMappedToTable(IDiagnosticsLogger`1<Validation> diagnostics, IEntityType entityType, IIndex index, string unmappedPropertyName);
    private static string UnnamedIndexPropertiesBothMappedAndNotMappedToTable(EventDefinitionBase definition, EventData payload);
    private static string NamedIndexPropertiesBothMappedAndNotMappedToTable(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void IndexPropertiesMappedToNonOverlappingTables(IDiagnosticsLogger`1<Validation> diagnostics, IEntityType entityType, IIndex index, string property1Name, List`1<ValueTuple`2<string, string>> tablesMappedToProperty1, string property2Name, List`1<ValueTuple`2<string, string>> tablesMappedToProperty2);
    private static string UnnamedIndexPropertiesMappedToNonOverlappingTables(EventDefinitionBase definition, EventData payload);
    private static string NamedIndexPropertiesMappedToNonOverlappingTables(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void KeyPropertiesNotMappedToTable(IDiagnosticsLogger`1<Validation> diagnostics, IKey key);
    private static string KeyPropertiesNotMappedToTable(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ForeignKeyPropertiesMappedToUnrelatedTables(IDiagnosticsLogger`1<Validation> diagnostics, IForeignKey foreignKey);
    private static string ForeignKeyPropertiesMappedToUnrelatedTables(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ForeignKeyTpcPrincipalWarning(IDiagnosticsLogger`1<Validation> diagnostics, IForeignKey foreignKey);
    private static string ForeignKeyTPCPrincipal(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void TpcStoreGeneratedIdentityWarning(IDiagnosticsLogger`1<Validation> diagnostics, IProperty property);
    private static string TpcStoreGeneratedIdentity(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void OptionalDependentWithoutIdentifyingPropertyWarning(IDiagnosticsLogger`1<Validation> diagnostics, IEntityType entityType);
    private static string OptionalDependentWithoutIdentifyingPropertyWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void StoredProcedureConcurrencyTokenNotMapped(IDiagnosticsLogger`1<Validation> diagnostics, IEntityType entityType, IProperty concurrencyProperty, string storedProcedureName);
    private static string StoredProcedureConcurrencyTokenNotMapped(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void BatchExecutorFailedToRollbackToSavepoint(IDiagnosticsLogger`1<Update> diagnostics, Type contextType, Exception exception);
    [ExtensionAttribute]
public static void BatchExecutorFailedToReleaseSavepoint(IDiagnosticsLogger`1<Update> diagnostics, Type contextType, Exception exception);
    [ExtensionAttribute]
public static void OptionalDependentWithAllNullPropertiesWarning(IDiagnosticsLogger`1<Update> diagnostics, IUpdateEntry entry);
    private static string OptionalDependentWithAllNullPropertiesWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void OptionalDependentWithAllNullPropertiesWarningSensitive(IDiagnosticsLogger`1<Update> diagnostics, IUpdateEntry entry);
    private static string OptionalDependentWithAllNullPropertiesWarningSensitive(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void DuplicateColumnOrders(IDiagnosticsLogger`1<Validation> diagnostics, StoreObjectIdentifier storeObject, IReadOnlyList`1<string> columns);
    private static string DuplicateColumnOrders(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ColumnOrderIgnoredWarning(IDiagnosticsLogger`1<Migrations> diagnostics, ColumnOperation operation);
    private static string ColumnOrderIgnoredWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void UnexpectedTrailingResultSetWhenSaving(IDiagnosticsLogger`1<Update> diagnostics);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions : LoggingDefinitions {
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogTransactionError;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogBoolWithDefaultWarning;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogConnectionCreating;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogConnectionCreated;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogConnectionDisposing;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogConnectionDisposed;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogOpeningConnection;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogOpenedConnection;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogClosingConnection;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogClosingDataReader;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogClosedConnection;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogConnectionError;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogBeginningTransaction;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogBeganTransaction;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogUsingTransaction;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCommittingTransaction;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogRollingBackTransaction;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCommittedTransaction;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogRolledBackTransaction;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCreatingTransactionSavepoint;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogRollingBackToTransactionSavepoint;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCreatedTransactionSavepoint;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogRolledBackToTransactionSavepoint;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogReleasingTransactionSavepoint;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogReleasedTransactionSavepoint;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogDisposingTransaction;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogDisposingDataReader;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogAmbientTransaction;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogPossibleUnintendedUseOfEquals;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogStoredProcedureConcurrencyTokenNotMapped;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogGeneratingDown;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogGeneratingUp;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogApplyingMigration;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogRevertingMigration;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogMigrating;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogNoMigrationsApplied;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogNoMigrationsFound;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogKeyHasDefaultValue;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCommandCanceled;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCommandCreating;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCommandCreated;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCommandInitialized;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogExecutingCommand;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogExecutedCommand;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCommandFailed;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogConnectionErrorAsDebug;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogAmbientTransactionEnlisted;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogExplicitTransactionEnlisted;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogBatchSmallerThanMinBatchSize;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogBatchReadyForExecution;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogMigrationAttributeMissingWarning;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogNamedIndexAllPropertiesNotToMappedToAnyTable;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogUnnamedIndexAllPropertiesNotToMappedToAnyTable;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogNamedIndexPropertiesBothMappedAndNotMappedToTable;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogUnnamedIndexPropertiesBothMappedAndNotMappedToTable;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogNamedIndexPropertiesMappedToNonOverlappingTables;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogUnnamedIndexPropertiesMappedToNonOverlappingTables;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogKeyPropertiesNotMappedToTable;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogForeignKeyPropertiesMappedToUnrelatedTables;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogForeignKeyTpcPrincipal;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogTpcStoreGeneratedIdentity;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogMultipleCollectionIncludeWarning;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogBatchExecutorFailedToRollbackToSavepoint;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogBatchExecutorFailedToReleaseSavepoint;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogOptionalDependentWithoutIdentifyingProperty;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogOptionalDependentWithAllNullProperties;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogOptionalDependentWithAllNullPropertiesSensitive;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogDuplicateColumnOrders;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogColumnOrderIgnoredWarning;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogExceptionDuringNonQueryOperation;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogExceptionDuringExecuteDelete;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogExceptionDuringExecuteUpdate;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogUnexpectedTrailingResultSetWhenSaving;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings : object {
    private static ResourceManager _resourceManager;
    [NullableAttribute("1")]
[ObsoleteAttribute]
public static string BadSequenceString { get; }
    [NullableAttribute("1")]
public static string BadSequenceType { get; }
    [NullableAttribute("1")]
public static string CannotChangeWhenOpen { get; }
    [NullableAttribute("1")]
public static string ClientGroupByNotSupported { get; }
    [NullableAttribute("1")]
public static string ConflictingAmbientTransaction { get; }
    [NullableAttribute("1")]
public static string ConflictingEnlistedTransaction { get; }
    [NullableAttribute("1")]
public static string DistinctOnCollectionNotSupported { get; }
    [NullableAttribute("1")]
public static string ErrorMaterializingValue { get; }
    [NullableAttribute("1")]
public static string ExecuteDeleteOnNonEntityType { get; }
    [NullableAttribute("1")]
public static string FromSqlNonComposable { get; }
    [NullableAttribute("1")]
public static string InsufficientInformationToIdentifyElementOfCollectionJoin { get; }
    [NullableAttribute("1")]
public static string InvalidArgumentToExecuteUpdate { get; }
    [NullableAttribute("1")]
public static string JsonEntityWithTableSplittingIsNotSupported { get; }
    [NullableAttribute("1")]
public static string JsonNodeMustBeHandledByProviderSpecificVisitor { get; }
    [NullableAttribute("1")]
public static string JsonPropertyNameShouldBeConfiguredOnNestedNavigation { get; }
    [NullableAttribute("1")]
public static string MappingFragmentMissingName { get; }
    [NullableAttribute("1")]
public static string MethodNeedsToBeImplementedInTheProvider { get; }
    [NullableAttribute("1")]
public static string MigrationDownMissing { get; }
    [NullableAttribute("1")]
public static string MissingOrderingInSelectExpression { get; }
    [NullableAttribute("1")]
public static string MissingResultSetWhenSaving { get; }
    [NullableAttribute("1")]
public static string ModificationCommandBatchAlreadyComplete { get; }
    [NullableAttribute("1")]
public static string ModificationCommandBatchNotComplete { get; }
    [NullableAttribute("1")]
public static string MultipleProvidersConfigured { get; }
    [NullableAttribute("1")]
public static string NestedAmbientTransactionError { get; }
    [NullableAttribute("1")]
public static string NoActiveTransaction { get; }
    [NullableAttribute("1")]
public static string NoDbCommand { get; }
    [NullableAttribute("1")]
public static string NoneRelationalTypeMappingOnARelationalTypeMappingSource { get; }
    [NullableAttribute("1")]
public static string NoProviderConfigured { get; }
    [NullableAttribute("1")]
public static string NoSetPropertyInvocation { get; }
    [NullableAttribute("1")]
public static string PendingAmbientTransaction { get; }
    [NullableAttribute("1")]
public static string ProjectionMappingCountMismatch { get; }
    [NullableAttribute("1")]
public static string RelationalNotInUse { get; }
    [NullableAttribute("1")]
public static string SetOperationsNotAllowedAfterClientEvaluation { get; }
    [NullableAttribute("1")]
public static string SetOperationsOnDifferentStoreTypes { get; }
    [NullableAttribute("1")]
public static string SetPropertyMethodInvoked { get; }
    [NullableAttribute("1")]
public static string SplitQueryString { get; }
    [NullableAttribute("1")]
public static string TransactionAlreadyStarted { get; }
    [NullableAttribute("1")]
public static string TransactionAssociatedWithDifferentConnection { get; }
    [NullableAttribute("1")]
public static string TransactionSuppressedMigrationInUserTransaction { get; }
    [NullableAttribute("1")]
public static string UpdateStoreException { get; }
    [NullableAttribute("1")]
public static string VisitChildrenMustBeOverridden { get; }
    private static RelationalStrings();
    public static string AbstractTpc(object entityType, object storeObject);
    [NullableContextAttribute("1")]
public static string get_BadSequenceString();
    [NullableContextAttribute("1")]
public static string get_BadSequenceType();
    [NullableContextAttribute("1")]
public static string get_CannotChangeWhenOpen();
    [NullableContextAttribute("1")]
public static string get_ClientGroupByNotSupported();
    public static string CompiledModelFunctionParameterTypeMapping(object function, object parameter, object customize, object className);
    [NullableContextAttribute("1")]
public static string CompiledModelFunctionTranslation(object function);
    public static string CompiledModelFunctionTypeMapping(object function, object customize, object className);
    public static string ComputedColumnSqlUnspecified(object table, object column);
    [NullableContextAttribute("1")]
public static string get_ConflictingAmbientTransaction();
    public static string ConflictingColumnServerGeneration(object conflictingConfiguration, object property, object existingConfiguration);
    [NullableContextAttribute("1")]
public static string get_ConflictingEnlistedTransaction();
    public static string ConflictingOriginalRowValues(object firstEntityType, object secondEntityType, object firstProperty, object secondProperty, object column);
    public static string ConflictingOriginalRowValuesSensitive(object firstEntityType, object secondEntityType, object keyValue, object firstConflictingValues, object secondConflictingValues, object column);
    public static string ConflictingRowUpdateTypes(object firstEntityType, object firstState, object secondEntityType, object secondState);
    public static string ConflictingRowUpdateTypesSensitive(object firstEntityType, object firstKeyValue, object firstState, object secondEntityType, object secondKeyValue, object secondState);
    public static string ConflictingRowValues(object firstEntityType, object secondEntityType, object firstProperty, object secondProperty, object column);
    public static string ConflictingRowValuesSensitive(object firstEntityType, object secondEntityType, object keyValue, object firstConflictingValue, object secondConflictingValue, object column);
    public static string ConflictingSeedValues(object entityType, object table, object column);
    public static string ConflictingSeedValuesSensitive(object entityType, object keyValue, object table, object column, object firstValue, object secondValue);
    public static string CreateIndexOperationWithInvalidSortOrder(object numSortOrderProperties, object numColumns);
    public static string DataOperationNoProperty(object table, object column);
    [NullableContextAttribute("1")]
public static string DataOperationNoTable(object table);
    [NullableContextAttribute("1")]
public static string DbFunctionExpressionIsNotMethodCall(object expression);
    [NullableContextAttribute("1")]
public static string DbFunctionGenericMethodNotSupported(object function);
    public static string DbFunctionInvalidInstanceType(object function, object type);
    public static string DbFunctionInvalidIQueryableOwnedReturnType(object function, object type);
    public static string DbFunctionInvalidIQueryableReturnType(object function, object type);
    public static string DbFunctionInvalidParameterName(object function, object parameter);
    public static string DbFunctionInvalidParameterType(object parameter, object function, object type);
    public static string DbFunctionInvalidReturnEntityType(object function, object type, object elementType);
    public static string DbFunctionInvalidReturnType(object function, object type);
    [NullableContextAttribute("1")]
public static string DbFunctionNonScalarCustomTranslation(object function);
    public static string DefaultValueSqlUnspecified(object table, object column);
    public static string DefaultValueUnspecified(object table, object column);
    [NullableContextAttribute("1")]
public static string DeleteDataOperationNoModel(object table);
    public static string DeleteDataOperationTypesCountMismatch(object typesCount, object columnsCount, object table);
    public static string DeleteDataOperationValuesCountMismatch(object valuesCount, object columnsCount, object table);
    public static string DerivedStrategy(object entityType, object strategy);
    [NullableContextAttribute("1")]
public static string get_DistinctOnCollectionNotSupported();
    public static string DuplicateCheckConstraint(object checkConstraint, object entityType, object conflictingEntityType);
    public static string DuplicateCheckConstraintSqlMismatch(object checkConstraint1, object entityType1, object checkConstraint2, object entityType2, object checkConstraintName);
    public static string DuplicateColumnNameCollationMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table, object collation1, object collation2);
    public static string DuplicateColumnNameCommentMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table, object comment1, object comment2);
    public static string DuplicateColumnNameComputedSqlMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table, object value1, object value2);
    public static string DuplicateColumnNameConcurrencyTokenMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table);
    public static string DuplicateColumnNameDataTypeMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table, object dataType1, object dataType2);
    public static string DuplicateColumnNameDefaultSqlMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table, object value1, object value2);
    public static string DuplicateColumnNameFixedLengthMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table);
    public static string DuplicateColumnNameIsStoredMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table, object value1, object value2);
    public static string DuplicateColumnNameMaxLengthMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table, object maxLength1, object maxLength2);
    public static string DuplicateColumnNameNullabilityMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table);
    public static string DuplicateColumnNameOrderMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table, object columnOrder1, object columnOrder2);
    public static string DuplicateColumnNamePrecisionMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table, object precision1, object precision2);
    public static string DuplicateColumnNameProviderTypeMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table, object type1, object type2);
    public static string DuplicateColumnNameSameHierarchy(object entityType1, object property1, object entityType2, object property2, object columnName, object table);
    public static string DuplicateColumnNameScaleMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table, object scale1, object scale2);
    public static string DuplicateColumnNameUnicodenessMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table);
    public static string DuplicateForeignKeyColumnMismatch(object foreignKeyProperties1, object entityType1, object foreignKeyProperties2, object entityType2, object table, object foreignKeyName, object columnNames1, object columnNames2);
    public static string DuplicateForeignKeyDeleteBehaviorMismatch(object foreignKeyProperties1, object entityType1, object foreignKeyProperties2, object entityType2, object table, object foreignKeyName, object deleteBehavior1, object deleteBehavior2);
    public static string DuplicateForeignKeyPrincipalColumnMismatch(object foreignKeyProperties1, object entityType1, object foreignKeyProperties2, object entityType2, object table, object foreignKeyName, object principalColumnNames1, object principalColumnNames2);
    public static string DuplicateForeignKeyPrincipalTableMismatch(object foreignKeyProperties1, object entityType1, object foreignKeyProperties2, object entityType2, object table, object foreignKeyName, object principalTable1, object principalTable2);
    public static string DuplicateForeignKeyTableMismatch(object foreignKeyProperties1, object entityType1, object foreignKeyProperties2, object entityType2, object foreignKeyName, object table1, object table2);
    public static string DuplicateForeignKeyUniquenessMismatch(object foreignKeyProperties1, object entityType1, object foreignKeyProperties2, object entityType2, object table, object foreignKeyName);
    public static string DuplicateIndexColumnMismatch(object index1, object entityType1, object index2, object entityType2, object table, object indexName, object columnNames1, object columnNames2);
    public static string DuplicateIndexFiltersMismatch(object index1, object entityType1, object index2, object entityType2, object table, object indexName, object filter1, object filter2);
    public static string DuplicateIndexSortOrdersMismatch(object index1, object entityType1, object index2, object entityType2, object table, object indexName);
    public static string DuplicateIndexTableMismatch(object index1, object entityType1, object index2, object entityType2, object indexName, object table1, object table2);
    public static string DuplicateIndexUniquenessMismatch(object index1, object entityType1, object index2, object entityType2, object table, object indexName);
    public static string DuplicateKeyColumnMismatch(object keyProperties1, object entityType1, object keyProperties2, object entityType2, object table, object keyName, object columnNames1, object columnNames2);
    public static string DuplicateKeyTableMismatch(object keyProperties1, object entityType1, object keyProperties2, object entityType2, object keyName, object table1, object table2);
    public static string DuplicateSeedData(object entityType, object table);
    public static string DuplicateSeedDataSensitive(object entityType, object keyValue, object table);
    public static string EitherOfTwoValuesMustBeNull(object param1, object param2);
    public static string EntityShortNameNotUnique(object entityType1, object discriminatorValue, object entityType2);
    public static string EntitySplittingConflictingMainFragment(object entityType, object storeObject);
    public static string EntitySplittingHierarchy(object entityType, object storeObject);
    public static string EntitySplittingMissingPrimaryKey(object entityType, object storeObject);
    public static string EntitySplittingMissingProperties(object entityType, object storeObject);
    public static string EntitySplittingMissingPropertiesMainFragment(object entityType, object storeObject);
    public static string EntitySplittingMissingRequiredPropertiesOptionalDependent(object entityType, object storeObject, object requiredDependentConfig);
    public static string EntitySplittingUnmappedMainFragment(object entityType, object storeObject, object storeObjectType);
    public static string EntitySplittingUnmatchedMainTableSplitting(object entityType, object storeObject, object principalEntityType, object principalStoreObject);
    public static string ErrorMaterializingProperty(object entityType, object property);
    public static string ErrorMaterializingPropertyNullReference(object entityType, object property, object expectedType);
    [NullableContextAttribute("1")]
public static string get_ErrorMaterializingValue();
    public static string ErrorMaterializingValueInvalidCast(object expectedType, object actualType);
    [NullableContextAttribute("1")]
public static string ErrorMaterializingValueNullReference(object expectedType);
    [NullableContextAttribute("1")]
public static string get_ExecuteDeleteOnNonEntityType();
    [NullableContextAttribute("1")]
public static string ExecuteDeleteOnTableSplitting(object tableName);
    public static string ExecuteOperationOnEntitySplitting(object operation, object entityType);
    public static string ExecuteOperationOnKeylessEntityTypeWithUnsupportedOperator(object operation, object entityType);
    public static string ExecuteOperationOnTPC(object operation, object entityType);
    public static string ExecuteOperationOnTPT(object operation, object entityType);
    [NullableContextAttribute("1")]
public static string ExecuteOperationWithUnsupportedOperatorInSqlGeneration(object operation);
    [NullableContextAttribute("1")]
public static string FromSqlMissingColumn(object column);
    [NullableContextAttribute("1")]
public static string get_FromSqlNonComposable();
    public static string FunctionOverrideMismatch(object propertySpecification, object function);
    public static string IncompatibleTableCommentMismatch(object table, object entityType, object otherEntityType, object comment, object otherComment);
    public static string IncompatibleTableDerivedRelationship(object table, object entityType, object otherEntityType);
    public static string IncompatibleTableExcludedMismatch(object table, object entityType, object otherEntityType);
    public static string IncompatibleTableKeyNameMismatch(object table, object entityType, object otherEntityType, object keyName, object primaryKey, object otherName, object otherPrimaryKey);
    public static string IncompatibleTableNoRelationship(object table, object entityType, object otherEntityType);
    public static string IncompatibleViewDerivedRelationship(object view, object entityType, object otherEntityType);
    public static string IncompatibleViewNoRelationship(object view, object entityType, object otherEntityType);
    public static string IncorrectDefaultValueType(object value, object valueType, object property, object propertyType, object entityType);
    [NullableContextAttribute("1")]
public static string InsertDataOperationNoModel(object table);
    public static string InsertDataOperationTypesCountMismatch(object typesCount, object columnsCount, object table);
    public static string InsertDataOperationValuesCountMismatch(object valuesCount, object columnsCount, object table);
    [NullableContextAttribute("1")]
public static string get_InsufficientInformationToIdentifyElementOfCollectionJoin();
    [NullableContextAttribute("1")]
public static string get_InvalidArgumentToExecuteUpdate();
    [NullableContextAttribute("1")]
public static string InvalidCommandTimeout(object value);
    public static string InvalidDerivedTypeInEntityProjection(object derivedType, object entityType);
    public static string InvalidFromSqlArguments(object expressionType, object valueType);
    public static string InvalidKeySelectorForGroupBy(object keySelector, object keyType);
    public static string InvalidMappedFunctionDerivedType(object entityType, object functionName, object baseEntityType);
    public static string InvalidMappedFunctionUnmatchedReturn(object entityType, object functionName, object returnType, object clrType);
    public static string InvalidMappedFunctionWithParameters(object entityType, object functionName, object parameters);
    public static string InvalidMappedSqlQueryDerivedType(object entityType, object baseEntityType);
    public static string InvalidMappingStrategy(object mappingStrategy, object entityType);
    [NullableContextAttribute("1")]
public static string InvalidMaxBatchSize(object value);
    [NullableContextAttribute("1")]
public static string InvalidMinBatchSize(object value);
    [NullableContextAttribute("1")]
public static string InvalidPropertyInSetProperty(object propertyExpression);
    public static string JsonCantNavigateToParentEntity(object jsonEntity, object parentEntity, object navigation);
    public static string JsonEntityMappedToDifferentViewThanOwner(object jsonType, object viewName, object ownerType, object ownerViewName);
    public static string JsonEntityMultipleRootsMappedToTheSameJsonColumn(object column, object table);
    public static string JsonEntityOwnedByNonJsonOwnedType(object nonJsonType, object table);
    [NullableContextAttribute("1")]
public static string JsonEntityReferencingRegularEntity(object jsonEntity);
    public static string JsonEntityWithDefaultValueSetOnItsProperty(object jsonEntity, object property);
    public static string JsonEntityWithExplicitlyConfiguredJsonPropertyNameOnKey(object keyProperty, object jsonEntity);
    [NullableContextAttribute("1")]
public static string JsonEntityWithExplicitlyConfiguredOrdinalKey(object jsonEntity);
    public static string JsonEntityWithIncorrectNumberOfKeyProperties(object jsonEntity, object expectedCount, object actualCount);
    public static string JsonEntityWithMultiplePropertiesMappedToSameJsonProperty(object jsonEntity, object property);
    [NullableContextAttribute("1")]
public static string JsonEntityWithNonTphInheritanceOnOwner(object rootType);
    [NullableContextAttribute("1")]
public static string JsonEntityWithOwnerNotMappedToTableOrView(object entity);
    [NullableContextAttribute("1")]
public static string get_JsonEntityWithTableSplittingIsNotSupported();
    public static string JsonErrorExtractingJsonProperty(object entityType, object propertyName);
    [NullableContextAttribute("1")]
public static string get_JsonNodeMustBeHandledByProviderSpecificVisitor();
    [NullableContextAttribute("1")]
public static string get_JsonPropertyNameShouldBeConfiguredOnNestedNavigation();
    [NullableContextAttribute("1")]
public static string JsonRequiredEntityWithNullJson(object entity);
    public static string KeylessMappingStrategy(object mappingStrategy, object entityType);
    [NullableContextAttribute("1")]
public static string LastUsedWithoutOrderBy(object method);
    public static string MappedFunctionNotFound(object entityType, object functionName);
    [NullableContextAttribute("1")]
public static string get_MappingFragmentMissingName();
    [NullableContextAttribute("1")]
public static string get_MethodNeedsToBeImplementedInTheProvider();
    public static string MethodOnNonTphRootNotSupported(object methodName, object entityType);
    [NullableContextAttribute("1")]
public static string get_MigrationDownMissing();
    [NullableContextAttribute("1")]
public static string MigrationNotFound(object migrationName);
    [NullableContextAttribute("1")]
public static string MigrationSqlGenerationMissing(object operation);
    public static string MissingConcurrencyColumn(object entityType, object missingColumn, object table);
    [NullableContextAttribute("1")]
public static string get_MissingOrderingInSelectExpression();
    [NullableContextAttribute("1")]
public static string MissingParameterValue(object parameter);
    [NullableContextAttribute("1")]
public static string get_MissingResultSetWhenSaving();
    [NullableContextAttribute("1")]
public static string get_ModificationCommandBatchAlreadyComplete();
    [NullableContextAttribute("1")]
public static string get_ModificationCommandBatchNotComplete();
    public static string ModificationCommandInvalidEntityState(object entityType, object entityState);
    public static string ModificationCommandInvalidEntityStateSensitive(object entityType, object keyValues, object entityState);
    public static string MultipleEntityPropertiesInSetProperty(object entityType1, object entityType2);
    [NullableContextAttribute("1")]
public static string get_MultipleProvidersConfigured();
    [NullableContextAttribute("1")]
public static string NamedConnectionStringNotFound(object name);
    [NullableContextAttribute("1")]
public static string get_NestedAmbientTransactionError();
    [NullableContextAttribute("1")]
public static string get_NoActiveTransaction();
    [NullableContextAttribute("1")]
public static string get_NoDbCommand();
    [NullableContextAttribute("1")]
public static string NonConstantOrParameterAsInExpressionValues(object type);
    [NullableContextAttribute("1")]
public static string get_NoneRelationalTypeMappingOnARelationalTypeMappingSource();
    public static string NonQueryTranslationFailedWithDetails(object expression, object details);
    [NullableContextAttribute("1")]
public static string NonScalarFunctionCannotBeNullable(object functionName);
    public static string NonScalarFunctionParameterCannotPropagatesNullability(object parameterName, object functionName);
    public static string NonTphDiscriminatorValueNotString(object value, object entityType);
    public static string NonTphMappingStrategy(object mappingStrategy, object entityType);
    public static string NonTphStoredProcedureClash(object entityType, object otherEntityType, object sproc);
    public static string NonTphTableClash(object entityType, object otherEntityType, object table);
    public static string NonTphViewClash(object entityType, object otherEntityType, object view);
    [NullableContextAttribute("1")]
public static string get_NoProviderConfigured();
    [NullableContextAttribute("1")]
public static string get_NoSetPropertyInvocation();
    public static string NullKeyValue(object table, object keyColumn);
    [NullableContextAttribute("1")]
public static string NullTypeMappingInSqlTree(object sqlExpression);
    [NullableContextAttribute("1")]
public static string OptionalDependentWithDependentWithoutIdentifyingProperty(object entityType);
    [NullableContextAttribute("1")]
public static string ParameterNotObjectArray(object parameter);
    [NullableContextAttribute("1")]
public static string get_PendingAmbientTransaction();
    [NullableContextAttribute("1")]
public static string get_ProjectionMappingCountMismatch();
    public static string PropertyNotMapped(object propertyType, object entityType, object property, object storeType);
    public static string PropertyNotMappedToTable(object property, object entityType, object table);
    [NullableContextAttribute("1")]
public static string ReadonlyEntitySaved(object entityType);
    [NullableContextAttribute("1")]
public static string get_RelationalNotInUse();
    [NullableContextAttribute("1")]
public static string SelectExpressionNonTphWithCustomTable(object entityType);
    [NullableContextAttribute("1")]
public static string get_SetOperationsNotAllowedAfterClientEvaluation();
    [NullableContextAttribute("1")]
public static string get_SetOperationsOnDifferentStoreTypes();
    [NullableContextAttribute("1")]
public static string get_SetPropertyMethodInvoked();
    [NullableContextAttribute("1")]
public static string get_SplitQueryString();
    public static string SqlQueryOverrideMismatch(object propertySpecification, object query);
    [NullableContextAttribute("1")]
public static string SqlQueryUnmappedType(object elementType);
    public static string StoredProcedureCurrentValueParameterOnDelete(object parameter, object sproc);
    public static string StoredProcedureDeleteNonKeyProperty(object entityType, object property, object sproc);
    public static string StoredProcedureDuplicateOriginalValueParameter(object property, object sproc);
    public static string StoredProcedureDuplicateParameter(object property, object sproc);
    public static string StoredProcedureDuplicateParameterName(object parameter, object sproc);
    public static string StoredProcedureDuplicateResultColumn(object property, object sproc);
    public static string StoredProcedureDuplicateResultColumnName(object column, object sproc);
    [NullableContextAttribute("1")]
public static string StoredProcedureDuplicateRowsAffectedParameter(object sproc);
    [NullableContextAttribute("1")]
public static string StoredProcedureDuplicateRowsAffectedResultColumn(object sproc);
    public static string StoredProcedureGeneratedPropertiesNotMapped(object entityType, object sproc, object properties);
    public static string StoredProcedureInputParameterForInsertNonSaveProperty(object parameter, object sproc, object property, object entityType, object behavior);
    public static string StoredProcedureInputParameterForUpdateNonSaveProperty(object parameter, object sproc, object property, object entityType, object behavior);
    public static string StoredProcedureKeyless(object entityType, object sproc);
    public static string StoredProcedureNoName(object entityType, object sproc);
    public static string StoredProcedureOriginalValueParameterOnInsert(object parameter, object sproc);
    public static string StoredProcedureOutputParameterConflict(object entityType, object property, object sproc);
    public static string StoredProcedureOutputParameterNotGenerated(object entityType, object property, object sproc);
    public static string StoredProcedureOverrideMismatch(object propertySpecification, object sproc);
    public static string StoredProcedureParameterInvalidConfiguration(object facet, object parameter, object sproc);
    public static string StoredProcedureParameterInvalidDirection(object direction, object parameter, object sproc);
    public static string StoredProcedureParameterNotFound(object property, object entityType, object sproc);
    public static string StoredProcedurePropertiesNotMapped(object entityType, object sproc, object properties);
    public static string StoredProcedureResultColumnDelete(object entityType, object property, object sproc);
    public static string StoredProcedureResultColumnNotFound(object property, object entityType, object sproc);
    public static string StoredProcedureResultColumnNotGenerated(object entityType, object property, object sproc);
    public static string StoredProcedureResultColumnParameterConflict(object entityType, object property, object sproc);
    [NullableContextAttribute("1")]
public static string StoredProcedureRowsAffectedNotPopulated(object sproc);
    [NullableContextAttribute("1")]
public static string StoredProcedureRowsAffectedForInsert(object sproc);
    [NullableContextAttribute("1")]
public static string StoredProcedureRowsAffectedReturnConflictingParameter(object sproc);
    public static string StoredProcedureRowsAffectedWithResultColumns(object entityType, object sproc);
    public static string StoredProcedureTableSharing(object entityType1, object entityType2, object sproc);
    public static string StoredProcedureTphDuplicate(object entityType, object otherEntityType, object sproc);
    [NullableContextAttribute("1")]
public static string StoredProcedureUnmapped(object entityType);
    public static string StoredKeyTypesNotConvertable(object fkColumnName, object fkColumnType, object pkColumnType, object pkColumnName);
    public static string TableExpressionBaseWithoutCloningLogic(object expressionType, object tableExpressionBase, object clonableTableExpressionBase, object cloningExpressionVisitor, object selectExpression);
    public static string TableNotMappedEntityType(object entityType, object table);
    public static string TableOverrideMismatch(object propertySpecification, object table);
    public static string TableValuedFunctionNonTph(object dbFunction, object entityType);
    [NullableContextAttribute("1")]
public static string TimeoutTooBig(object seconds);
    [NullableContextAttribute("1")]
public static string TimeoutTooSmall(object seconds);
    public static string TooFewReaderFields(object expected, object actual);
    public static string TpcTableSharing(object dependentType, object storeObject, object principalEntityType);
    public static string TpcTableSharingDependent(object dependentType, object storeObject, object derivedType, object otherStoreObject);
    public static string TphDbFunctionMismatch(object entityType, object function, object otherEntityType, object otherFunction);
    public static string TphStoredProcedureMismatch(object entityType, object sproc, object otherEntityType, object otherSproc);
    public static string TphTableMismatch(object entityType, object table, object otherEntityType, object otherTable);
    public static string TphViewMismatch(object entityType, object view, object otherEntityType, object otherView);
    [NullableContextAttribute("1")]
public static string get_TransactionAlreadyStarted();
    [NullableContextAttribute("1")]
public static string get_TransactionAssociatedWithDifferentConnection();
    [NullableContextAttribute("1")]
public static string get_TransactionSuppressedMigrationInUserTransaction();
    public static string TriggerWithMismatchedTable(object trigger, object triggerTable, object entityType, object entityTable);
    public static string UnableToBindMemberToEntityProjection(object memberType, object member, object entityType);
    public static string UnableToTranslateSetProperty(object property, object value, object details);
    [NullableContextAttribute("1")]
public static string UnhandledAnnotatableType(object annotatableType);
    public static string UnhandledExpressionInVisitor(object expression, object expressionType, object visitor);
    public static string UnknownOperation(object sqlGeneratorType, object operationType);
    public static string UnsupportedDataOperationStoreType(object type, object column);
    public static string UnsupportedOperatorForSqlExpression(object nodeType, object expressionType);
    public static string UnsupportedPropertyType(object entity, object property, object clrType);
    [NullableContextAttribute("1")]
public static string UnsupportedStoreType(object type);
    [NullableContextAttribute("1")]
public static string UnsupportedType(object clrType);
    public static string UpdateConcurrencyException(object expectedRows, object actualRows);
    public static string UpdateDataOperationKeyTypesCountMismatch(object typesCount, object columnsCount, object table);
    public static string UpdateDataOperationKeyValuesCountMismatch(object valuesCount, object columnsCount, object table);
    [NullableContextAttribute("1")]
public static string UpdateDataOperationNoModel(object table);
    public static string UpdateDataOperationRowCountMismatch(object valuesCount, object keyCount, object table);
    public static string UpdateDataOperationTypesCountMismatch(object typesCount, object columnsCount, object table);
    public static string UpdateDataOperationValuesCountMismatch(object valuesCount, object columnsCount, object table);
    [NullableContextAttribute("1")]
public static string get_UpdateStoreException();
    public static string ViewOverrideMismatch(object propertySpecification, object view);
    [NullableContextAttribute("1")]
public static string get_VisitChildrenMustBeOverridden();
    private static string GetString(string name, String[] formatterNames);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.SequenceEventData : EventData {
    [CompilerGeneratedAttribute]
private IReadOnlySequence <Sequence>k__BackingField;
    public IReadOnlySequence Sequence { get; }
    public SequenceEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IReadOnlySequence sequence);
    [CompilerGeneratedAttribute]
public virtual IReadOnlySequence get_Sequence();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.TransactionEndEventData : TransactionEventData {
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    public TimeSpan Duration { get; }
    [NullableContextAttribute("1")]
public TransactionEndEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbTransaction transaction, DbContext context, Guid transactionId, Guid connectionId, bool async, DateTimeOffset startTime, TimeSpan duration);
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_Duration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.TransactionEnlistedEventData : EventData {
    [CompilerGeneratedAttribute]
private Transaction <Transaction>k__BackingField;
    [CompilerGeneratedAttribute]
private DbConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ConnectionId>k__BackingField;
    public Transaction Transaction { get; }
    public DbConnection Connection { get; }
    public Guid ConnectionId { get; }
    public TransactionEnlistedEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, Transaction transaction, DbConnection connection, Guid connectionId);
    [CompilerGeneratedAttribute]
public virtual Transaction get_Transaction();
    [CompilerGeneratedAttribute]
public virtual DbConnection get_Connection();
    [CompilerGeneratedAttribute]
public virtual Guid get_ConnectionId();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.TransactionErrorEventData : TransactionEndEventData {
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public string Action { get; }
    public Exception Exception { get; }
    public TransactionErrorEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbTransaction transaction, DbContext context, Guid transactionId, Guid connectionId, bool async, string action, Exception exception, DateTimeOffset startTime, TimeSpan duration);
    [CompilerGeneratedAttribute]
public virtual string get_Action();
    [CompilerGeneratedAttribute]
public virtual Exception get_Exception();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData : DbContextEventData {
    [CompilerGeneratedAttribute]
private DbTransaction <Transaction>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <TransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTime>k__BackingField;
    public DbTransaction Transaction { get; }
    public Guid TransactionId { get; }
    public Guid ConnectionId { get; }
    public bool IsAsync { get; }
    public DateTimeOffset StartTime { get; }
    public TransactionEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbTransaction transaction, DbContext context, Guid transactionId, Guid connectionId, bool async, DateTimeOffset startTime);
    [CompilerGeneratedAttribute]
public virtual DbTransaction get_Transaction();
    [CompilerGeneratedAttribute]
public virtual Guid get_TransactionId();
    [CompilerGeneratedAttribute]
public virtual Guid get_ConnectionId();
    [CompilerGeneratedAttribute]
public virtual bool get_IsAsync();
    [CompilerGeneratedAttribute]
public virtual DateTimeOffset get_StartTime();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.TransactionStartingEventData : DbContextEventData {
    [CompilerGeneratedAttribute]
private IsolationLevel <IsolationLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <TransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTime>k__BackingField;
    public IsolationLevel IsolationLevel { get; }
    public Guid TransactionId { get; }
    public Guid ConnectionId { get; }
    public bool IsAsync { get; }
    public DateTimeOffset StartTime { get; }
    [NullableContextAttribute("1")]
public TransactionStartingEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbContext context, IsolationLevel isolationLevel, Guid transactionId, Guid connectionId, bool async, DateTimeOffset startTime);
    [CompilerGeneratedAttribute]
public virtual IsolationLevel get_IsolationLevel();
    [CompilerGeneratedAttribute]
public virtual Guid get_TransactionId();
    [CompilerGeneratedAttribute]
public virtual Guid get_ConnectionId();
    [CompilerGeneratedAttribute]
public virtual bool get_IsAsync();
    [CompilerGeneratedAttribute]
public virtual DateTimeOffset get_StartTime();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.TwoSqlExpressionsEventData : EventData {
    [CompilerGeneratedAttribute]
private SqlExpression <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Right>k__BackingField;
    public SqlExpression Left { get; }
    public SqlExpression Right { get; }
    public TwoSqlExpressionsEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, SqlExpression left, SqlExpression right);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Left();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Right();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.EntityFrameworkCore.EnumerableMethods : object {
    [CompilerGeneratedAttribute]
private static MethodInfo <All>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AsEnumerable>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Cast>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Concat>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Contains>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <CountWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <CountWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <DefaultIfEmptyWithoutArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <DefaultIfEmptyWithArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Distinct>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ElementAt>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ElementAtOrDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Except>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeySelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyElementSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyElementResultSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyResultSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupJoin>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Intersect>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Join>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LongCountWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LongCountWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MaxWithoutSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MaxWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MinWithoutSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MinWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OfType>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OrderByDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Reverse>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Select>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectWithOrdinal>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectManyWithoutCollectionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectManyWithCollectionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SequenceEqual>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SkipWhile>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Take>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <TakeWhile>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ThenBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ThenByDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ToArray>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ToList>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Union>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <SumWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <AverageWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MaxWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MaxWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MinWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MinWithSelectorMethods>k__BackingField;
    public static MethodInfo All { get; }
    public static MethodInfo AnyWithoutPredicate { get; }
    public static MethodInfo AnyWithPredicate { get; }
    public static MethodInfo AsEnumerable { get; }
    public static MethodInfo Cast { get; }
    public static MethodInfo Concat { get; }
    public static MethodInfo Contains { get; }
    public static MethodInfo CountWithoutPredicate { get; }
    public static MethodInfo CountWithPredicate { get; }
    public static MethodInfo DefaultIfEmptyWithoutArgument { get; }
    public static MethodInfo DefaultIfEmptyWithArgument { get; }
    public static MethodInfo Distinct { get; }
    public static MethodInfo ElementAt { get; }
    public static MethodInfo ElementAtOrDefault { get; }
    public static MethodInfo Except { get; }
    public static MethodInfo FirstWithoutPredicate { get; }
    public static MethodInfo FirstWithPredicate { get; }
    public static MethodInfo FirstOrDefaultWithoutPredicate { get; }
    public static MethodInfo FirstOrDefaultWithPredicate { get; }
    public static MethodInfo GroupByWithKeySelector { get; }
    public static MethodInfo GroupByWithKeyElementSelector { get; }
    public static MethodInfo GroupByWithKeyElementResultSelector { get; }
    public static MethodInfo GroupByWithKeyResultSelector { get; }
    public static MethodInfo GroupJoin { get; }
    public static MethodInfo Intersect { get; }
    public static MethodInfo Join { get; }
    public static MethodInfo LastWithoutPredicate { get; }
    public static MethodInfo LastWithPredicate { get; }
    public static MethodInfo LastOrDefaultWithoutPredicate { get; }
    public static MethodInfo LastOrDefaultWithPredicate { get; }
    public static MethodInfo LongCountWithoutPredicate { get; }
    public static MethodInfo LongCountWithPredicate { get; }
    public static MethodInfo MaxWithoutSelector { get; }
    public static MethodInfo MaxWithSelector { get; }
    public static MethodInfo MinWithoutSelector { get; }
    public static MethodInfo MinWithSelector { get; }
    public static MethodInfo OfType { get; }
    public static MethodInfo OrderBy { get; }
    public static MethodInfo OrderByDescending { get; }
    public static MethodInfo Reverse { get; }
    public static MethodInfo Select { get; }
    public static MethodInfo SelectWithOrdinal { get; }
    public static MethodInfo SelectManyWithoutCollectionSelector { get; }
    public static MethodInfo SelectManyWithCollectionSelector { get; }
    public static MethodInfo SequenceEqual { get; }
    public static MethodInfo SingleWithoutPredicate { get; }
    public static MethodInfo SingleWithPredicate { get; }
    public static MethodInfo SingleOrDefaultWithoutPredicate { get; }
    public static MethodInfo SingleOrDefaultWithPredicate { get; }
    public static MethodInfo Skip { get; }
    public static MethodInfo SkipWhile { get; }
    public static MethodInfo Take { get; }
    public static MethodInfo TakeWhile { get; }
    public static MethodInfo ThenBy { get; }
    public static MethodInfo ThenByDescending { get; }
    public static MethodInfo ToArray { get; }
    public static MethodInfo ToList { get; }
    public static MethodInfo Union { get; }
    public static MethodInfo Where { get; }
    private static Dictionary`2<Type, MethodInfo> SumWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> AverageWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MaxWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MaxWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MinWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MinWithSelectorMethods { get; }
    private static EnumerableMethods();
    [CompilerGeneratedAttribute]
public static MethodInfo get_All();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AsEnumerable();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Cast();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Concat();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Contains();
    [CompilerGeneratedAttribute]
public static MethodInfo get_CountWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_CountWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_DefaultIfEmptyWithoutArgument();
    [CompilerGeneratedAttribute]
public static MethodInfo get_DefaultIfEmptyWithArgument();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Distinct();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ElementAt();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ElementAtOrDefault();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Except();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeySelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyElementSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyElementResultSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyResultSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupJoin();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Intersect();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Join();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LongCountWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LongCountWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MaxWithoutSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MaxWithSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MinWithoutSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MinWithSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OfType();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OrderBy();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OrderByDescending();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Reverse();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Select();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectWithOrdinal();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectManyWithoutCollectionSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectManyWithCollectionSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SequenceEqual();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Skip();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SkipWhile();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Take();
    [CompilerGeneratedAttribute]
public static MethodInfo get_TakeWhile();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ThenBy();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ThenByDescending();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ToArray();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ToList();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Union();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Where();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_SumWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_AverageWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MaxWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MaxWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MinWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MinWithSelectorMethods();
    public static MethodInfo GetSumWithSelector(Type type);
    public static MethodInfo GetAverageWithSelector(Type type);
    public static MethodInfo GetMaxWithoutSelector(Type type);
    public static MethodInfo GetMaxWithSelector(Type type);
    public static MethodInfo GetMinWithoutSelector(Type type);
    public static MethodInfo GetMinWithSelector(Type type);
    [CompilerGeneratedAttribute]
internal static MethodInfo <.cctor>g__GetMethod|201_62(string name, int genericParameterCount, Func`2<Type[], Type[]> parameterGenerator, <>c__DisplayClass201_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkRelationalServicesBuilder : EntityFrameworkServicesBuilder {
    [EntityFrameworkInternalAttribute]
public static IDictionary`2<Type, ServiceCharacteristics> RelationalServices;
    public EntityFrameworkRelationalServicesBuilder(IServiceCollection serviceCollection);
    private static EntityFrameworkRelationalServicesBuilder();
    protected virtual Nullable`1<ServiceCharacteristics> TryGetServiceCharacteristics(Type serviceType);
    public virtual EntityFrameworkServicesBuilder TryAddCoreServices();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Infrastructure.IRelationalDbContextOptionsBuilderInfrastructure {
    public DbContextOptionsBuilder OptionsBuilder { get; }
    public abstract virtual DbContextOptionsBuilder get_OptionsBuilder();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Infrastructure.ModelSnapshot : object {
    private IModel _model;
    public IModel Model { get; }
    private IModel CreateModel();
    public virtual IModel get_Model();
    protected abstract virtual void BuildModel(ModelBuilder modelBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2 : object {
    [CompilerGeneratedAttribute]
private DbContextOptionsBuilder <OptionsBuilder>k__BackingField;
    protected DbContextOptionsBuilder OptionsBuilder { get; }
    private DbContextOptionsBuilder Microsoft.EntityFrameworkCore.Infrastructure.IRelationalDbContextOptionsBuilderInfrastructure.OptionsBuilder { get; }
    protected RelationalDbContextOptionsBuilder`2(DbContextOptionsBuilder optionsBuilder);
    [CompilerGeneratedAttribute]
protected virtual DbContextOptionsBuilder get_OptionsBuilder();
    private sealed virtual override DbContextOptionsBuilder Microsoft.EntityFrameworkCore.Infrastructure.IRelationalDbContextOptionsBuilderInfrastructure.get_OptionsBuilder();
    public virtual TBuilder MaxBatchSize(int maxBatchSize);
    public virtual TBuilder MinBatchSize(int minBatchSize);
    public virtual TBuilder CommandTimeout(Nullable`1<int> commandTimeout);
    public virtual TBuilder MigrationsAssembly(string assemblyName);
    public virtual TBuilder MigrationsHistoryTable(string tableName, string schema);
    public virtual TBuilder UseRelationalNulls(bool useRelationalNulls);
    public virtual TBuilder UseQuerySplittingBehavior(QuerySplittingBehavior querySplittingBehavior);
    public virtual TBuilder ExecutionStrategy(Func`2<ExecutionStrategyDependencies, IExecutionStrategy> getExecutionStrategy);
    protected virtual TBuilder WithOption(Func`2<TExtension, TExtension> setAction);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelCustomizer : ModelCustomizer {
    [NullableContextAttribute("1")]
public RelationalModelCustomizer(ModelCustomizerDependencies dependencies);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelDependencies : object {
    [CompilerGeneratedAttribute]
private IRowKeyValueFactoryFactory <RowKeyValueFactoryFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IRowForeignKeyValueFactoryFactory <RowForeignKeyValueFactoryFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IRowIndexValueFactoryFactory <RowIndexValueFactoryFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [EntityFrameworkInternalAttribute]
public IRowKeyValueFactoryFactory RowKeyValueFactoryFactory { get; public set; }
    [EntityFrameworkInternalAttribute]
public IRowForeignKeyValueFactoryFactory RowForeignKeyValueFactoryFactory { get; public set; }
    [EntityFrameworkInternalAttribute]
public IRowIndexValueFactoryFactory RowIndexValueFactoryFactory { get; public set; }
    [EntityFrameworkInternalAttribute]
public RelationalModelDependencies(IRowKeyValueFactoryFactory rowKeyValueFactoryFactory, IRowForeignKeyValueFactoryFactory foreignKeyRowValueFactorySource, IRowIndexValueFactoryFactory rowIndexValueFactoryFactory);
    [CompilerGeneratedAttribute]
private RelationalModelDependencies(RelationalModelDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IRowKeyValueFactoryFactory get_RowKeyValueFactoryFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RowKeyValueFactoryFactory(IRowKeyValueFactoryFactory value);
    [CompilerGeneratedAttribute]
public IRowForeignKeyValueFactoryFactory get_RowForeignKeyValueFactoryFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RowForeignKeyValueFactoryFactory(IRowForeignKeyValueFactoryFactory value);
    [CompilerGeneratedAttribute]
public IRowIndexValueFactoryFactory get_RowIndexValueFactoryFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RowIndexValueFactoryFactory(IRowIndexValueFactoryFactory value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalModelDependencies left, RelationalModelDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RelationalModelDependencies left, RelationalModelDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalModelDependencies other);
    [CompilerGeneratedAttribute]
public RelationalModelDependencies <Clone>$();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static RelationalModelDependencies GetRelationalDependencies(IModel model, string methodName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelRuntimeInitializer : ModelRuntimeInitializer {
    [CompilerGeneratedAttribute]
private RelationalModelRuntimeInitializerDependencies <RelationalDependencies>k__BackingField;
    protected RelationalModelRuntimeInitializerDependencies RelationalDependencies { get; }
    public RelationalModelRuntimeInitializer(ModelRuntimeInitializerDependencies dependencies, RelationalModelRuntimeInitializerDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalModelRuntimeInitializerDependencies get_RelationalDependencies();
    protected virtual void InitializeModel(IModel model, bool designTime, bool prevalidation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelRuntimeInitializerDependencies : object {
    [CompilerGeneratedAttribute]
private RelationalModelDependencies <RelationalModelDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalAnnotationProvider <RelationalAnnotationProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public RelationalModelDependencies RelationalModelDependencies { get; public set; }
    public IRelationalAnnotationProvider RelationalAnnotationProvider { get; public set; }
    [EntityFrameworkInternalAttribute]
public RelationalModelRuntimeInitializerDependencies(RelationalModelDependencies relationalModelDependencies, IRelationalAnnotationProvider relationalAnnotationProvider);
    [CompilerGeneratedAttribute]
private RelationalModelRuntimeInitializerDependencies(RelationalModelRuntimeInitializerDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public RelationalModelDependencies get_RelationalModelDependencies();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RelationalModelDependencies(RelationalModelDependencies value);
    [CompilerGeneratedAttribute]
public IRelationalAnnotationProvider get_RelationalAnnotationProvider();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RelationalAnnotationProvider(IRelationalAnnotationProvider value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalModelRuntimeInitializerDependencies left, RelationalModelRuntimeInitializerDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RelationalModelRuntimeInitializerDependencies left, RelationalModelRuntimeInitializerDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalModelRuntimeInitializerDependencies other);
    [CompilerGeneratedAttribute]
public RelationalModelRuntimeInitializerDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator : ModelValidator {
    private static bool QuirkEnabled29859;
    private static bool QuirkEnabled29531;
    [CompilerGeneratedAttribute]
private RelationalModelValidatorDependencies <RelationalDependencies>k__BackingField;
    protected RelationalModelValidatorDependencies RelationalDependencies { get; }
    public RelationalModelValidator(ModelValidatorDependencies dependencies, RelationalModelValidatorDependencies relationalDependencies);
    private static RelationalModelValidator();
    [CompilerGeneratedAttribute]
protected virtual RelationalModelValidatorDependencies get_RelationalDependencies();
    public virtual void Validate(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateSqlQueries(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateDbFunctions(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateStoredProcedures(IModel model, IDiagnosticsLogger`1<Validation> logger);
    private static void ValidateSproc(IStoredProcedure sproc, string mappingStrategy, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateBoolsWithDefaults(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateDefaultValuesOnKeys(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateNoMutableKeys(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateSharedTableCompatibility(IModel model, IDiagnosticsLogger`1<Validation> logger);
    private Dictionary`2<StoreObjectIdentifier, List`1<IEntityType>> BuildSharedTableEntityMap(IEnumerable`1<IEntityType> entityTypes);
    protected virtual void ValidateSharedTableCompatibility(IReadOnlyList`1<IEntityType> mappedTypes, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateSharedViewCompatibility(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateSharedViewCompatibility(IReadOnlyList`1<IEntityType> mappedTypes, string viewName, string schema, IDiagnosticsLogger`1<Validation> logger);
    private static bool IsIdentifyingPrincipal(IEntityType dependentEntityType, IEntityType principalEntityType);
    protected virtual void ValidateSharedColumnsCompatibility(IReadOnlyList`1<IEntityType> mappedTypes, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateCompatible(IProperty property, IProperty duplicateProperty, string columnName, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IDiagnosticsLogger`1<Validation> logger);
    protected virtual object GetDefaultColumnValue(IProperty property, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject);
    protected virtual void ValidateSharedForeignKeysCompatibility(IReadOnlyList`1<IEntityType> mappedTypes, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateCompatible(IForeignKey foreignKey, IForeignKey duplicateForeignKey, string foreignKeyName, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateSharedIndexesCompatibility(IReadOnlyList`1<IEntityType> mappedTypes, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateCompatible(IIndex index, IIndex duplicateIndex, string indexName, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateSharedKeysCompatibility(IReadOnlyList`1<IEntityType> mappedTypes, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateCompatible(IKey key, IKey duplicateKey, string keyName, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateSharedCheckConstraintCompatibility(IReadOnlyList`1<IEntityType> mappedTypes, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateCompatible(ICheckConstraint checkConstraint, ICheckConstraint duplicateCheckConstraint, string indexName, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateSharedTriggerCompatibility(IReadOnlyList`1<IEntityType> mappedTypes, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateCompatible(ITrigger trigger, ITrigger duplicateTrigger, string indexName, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateInheritanceMapping(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateValueGeneration(IEntityType entityType, IKey key, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateMappingStrategy(IEntityType entityType, string mappingStrategy);
    private static void ValidateNonTphMapping(IEntityType rootEntityType, StoreObjectType storeObjectType);
    private static void ValidateTphMapping(IEntityType rootEntityType, StoreObjectType storeObjectType);
    protected virtual bool IsRedundant(IForeignKey foreignKey);
    protected virtual void ValidateMappingFragments(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidatePropertyOverrides(IModel model, IDiagnosticsLogger`1<Validation> logger);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator/<GetAllMappedStoreObjects>d__41")]
private static IEnumerable`1<StoreObjectIdentifier> GetAllMappedStoreObjects(IReadOnlyProperty property, StoreObjectType storeObjectType);
    protected virtual void ValidateIndexProperties(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateTriggers(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateJsonEntities(IModel model, IDiagnosticsLogger`1<Validation> logger);
    private void ValidateJsonEntitiesNotMappedToTableOrView(IEnumerable`1<IEntityType> entityTypes);
    private void ValidateJsonViews(IEnumerable`1<IEntityType> entityTypes);
    protected virtual void ValidateJsonEntityRoot(StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IEntityType rootType);
    protected virtual void ValidateJsonEntityNavigations(StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IEntityType jsonEntityType);
    protected virtual void ValidateJsonEntityKey(StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IEntityType jsonEntityType);
    protected virtual void ValidateJsonEntityProperties(StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IEntityType jsonEntityType);
    protected virtual void ThrowPropertyNotMappedException(string propertyType, IConventionEntityType entityType, IConventionProperty unmappedProperty);
    [CompilerGeneratedAttribute]
internal static void <ValidateStoredProcedures>g__AddSproc|9_0(StoreObjectType storedProcedureType, IEntityType entityType, Dictionary`2<StoreObjectIdentifier, List`1<IEntityType>> storedProcedures);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <ValidateBoolsWithDefaults>g__IsNotNullAndFalse|11_0(object value);
    [CompilerGeneratedAttribute]
internal static Nullable`1<StoreObjectIdentifier> <ValidateMappingFragments>g__ValidateMainMapping|39_0(IEntityType entityType, StoreObjectIdentifier mainObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidatorDependencies : object {
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <TypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IRelationalTypeMappingSource TypeMappingSource { get; public set; }
    [EntityFrameworkInternalAttribute]
public RelationalModelValidatorDependencies(IRelationalTypeMappingSource typeMappingSource);
    [CompilerGeneratedAttribute]
private RelationalModelValidatorDependencies(RelationalModelValidatorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IRelationalTypeMappingSource get_TypeMappingSource();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeMappingSource(IRelationalTypeMappingSource value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalModelValidatorDependencies left, RelationalModelValidatorDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RelationalModelValidatorDependencies left, RelationalModelValidatorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalModelValidatorDependencies other);
    [CompilerGeneratedAttribute]
public RelationalModelValidatorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension : object {
    private string _connectionString;
    private DbConnection _connection;
    private Nullable`1<int> _commandTimeout;
    private Nullable`1<int> _maxBatchSize;
    private Nullable`1<int> _minBatchSize;
    private bool _useRelationalNulls;
    private Nullable`1<QuerySplittingBehavior> _querySplittingBehavior;
    private string _migrationsAssembly;
    private string _migrationsHistoryTableName;
    private string _migrationsHistoryTableSchema;
    private Func`2<ExecutionStrategyDependencies, IExecutionStrategy> _executionStrategyFactory;
    public DbContextOptionsExtensionInfo Info { get; }
    [NullableAttribute("2")]
public string ConnectionString { get; }
    [NullableAttribute("2")]
public DbConnection Connection { get; }
    public Nullable`1<int> CommandTimeout { get; }
    public Nullable`1<int> MaxBatchSize { get; }
    public Nullable`1<int> MinBatchSize { get; }
    public bool UseRelationalNulls { get; }
    public Nullable`1<QuerySplittingBehavior> QuerySplittingBehavior { get; }
    [NullableAttribute("2")]
public string MigrationsAssembly { get; }
    [NullableAttribute("2")]
public string MigrationsHistoryTableName { get; }
    [NullableAttribute("2")]
public string MigrationsHistoryTableSchema { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<ExecutionStrategyDependencies, IExecutionStrategy> ExecutionStrategyFactory { get; }
    protected RelationalOptionsExtension(RelationalOptionsExtension copyFrom);
    public abstract virtual DbContextOptionsExtensionInfo get_Info();
    protected abstract virtual RelationalOptionsExtension Clone();
    [NullableContextAttribute("2")]
public virtual string get_ConnectionString();
    public virtual RelationalOptionsExtension WithConnectionString(string connectionString);
    [NullableContextAttribute("2")]
public virtual DbConnection get_Connection();
    public virtual RelationalOptionsExtension WithConnection(DbConnection connection);
    public virtual Nullable`1<int> get_CommandTimeout();
    public virtual RelationalOptionsExtension WithCommandTimeout(Nullable`1<int> commandTimeout);
    public virtual Nullable`1<int> get_MaxBatchSize();
    public virtual RelationalOptionsExtension WithMaxBatchSize(Nullable`1<int> maxBatchSize);
    public virtual Nullable`1<int> get_MinBatchSize();
    public virtual RelationalOptionsExtension WithMinBatchSize(Nullable`1<int> minBatchSize);
    public virtual bool get_UseRelationalNulls();
    public virtual RelationalOptionsExtension WithUseRelationalNulls(bool useRelationalNulls);
    public virtual Nullable`1<QuerySplittingBehavior> get_QuerySplittingBehavior();
    public virtual RelationalOptionsExtension WithUseQuerySplittingBehavior(QuerySplittingBehavior querySplittingBehavior);
    [NullableContextAttribute("2")]
public virtual string get_MigrationsAssembly();
    public virtual RelationalOptionsExtension WithMigrationsAssembly(string migrationsAssembly);
    [NullableContextAttribute("2")]
public virtual string get_MigrationsHistoryTableName();
    public virtual RelationalOptionsExtension WithMigrationsHistoryTableName(string migrationsHistoryTableName);
    [NullableContextAttribute("2")]
public virtual string get_MigrationsHistoryTableSchema();
    public virtual RelationalOptionsExtension WithMigrationsHistoryTableSchema(string migrationsHistoryTableSchema);
    public virtual Func`2<ExecutionStrategyDependencies, IExecutionStrategy> get_ExecutionStrategyFactory();
    public virtual RelationalOptionsExtension WithExecutionStrategyFactory(Func`2<ExecutionStrategyDependencies, IExecutionStrategy> executionStrategyFactory);
    public static RelationalOptionsExtension Extract(IDbContextOptions options);
    public abstract virtual void ApplyServices(IServiceCollection services);
    public virtual void Validate(IDbContextOptions options);
    public static CoreOptionsExtension WithDefaultWarningConfiguration(CoreOptionsExtension coreOptionsExtension);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Infrastructure.RelationalPropertyExtensions : object {
    [ExtensionAttribute]
public static string FormatColumns(IEnumerable`1<IReadOnlyProperty> properties, StoreObjectIdentifier storeObject);
    [ExtensionAttribute]
public static IReadOnlyList`1<string> GetColumnNames(IEnumerable`1<IReadOnlyProperty> properties, StoreObjectIdentifier& storeObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.EntityFrameworkCore.Internal.LegacyReferenceEqualityComparer : object {
    [CompilerGeneratedAttribute]
private static LegacyReferenceEqualityComparer <Instance>k__BackingField;
    public static LegacyReferenceEqualityComparer Instance { get; }
    private static LegacyReferenceEqualityComparer();
    [CompilerGeneratedAttribute]
public static LegacyReferenceEqualityComparer get_Instance();
    [NullableContextAttribute("2")]
public bool Equals(object x, object y);
    public int GetHashCode(object obj);
    private sealed virtual override bool System.Collections.Generic.IEqualityComparer<System.Object>.Equals(object x, object y);
    private sealed virtual override int System.Collections.IEqualityComparer.GetHashCode(object obj);
    private sealed virtual override bool System.Collections.IEqualityComparer.Equals(object x, object y);
    private sealed virtual override int System.Collections.Generic.IEqualityComparer<System.Object>.GetHashCode(object obj);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Internal.MethodInfoExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string DisplayName(MethodInfo methodInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer : object {
    public static TValue EnsureInitialized(TValue& target, TParam param, Func`2<TParam, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TParam1 param1, TParam2 param2, Func`3<TParam1, TParam2, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TParam1 param1, TParam2 param2, TParam3 param3, Func`4<TParam1, TParam2, TParam3, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, Boolean& initialized, TParam param, Func`2<TParam, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TValue value);
    public static TValue EnsureInitialized(TValue& target, TParam param, Action`1<TParam> valueFactory);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Internal.RelationCommandCacheExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IRelationalCommand RentAndPopulateRelationalCommand(RelationalCommandCache relationalCommandCache, RelationalQueryContext queryContext);
}
public class Microsoft.EntityFrameworkCore.Internal.SemanticVersionComparer : object {
    [NullableContextAttribute("2")]
public virtual int Compare(string x, string y);
    private static Version CreateVersion(string semanticVersion);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Internal.TupleExtensions : object {
    [ExtensionAttribute]
public static string FormatTables(IEnumerable`1<ValueTuple`2<string, string>> tables);
    [ExtensionAttribute]
public static string FormatTable(ValueTuple`2<string, string> table);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.CheckConstraintBuilder : object {
    [CompilerGeneratedAttribute]
private InternalCheckConstraintBuilder <Builder>k__BackingField;
    [EntityFrameworkInternalAttribute]
protected InternalCheckConstraintBuilder Builder { get; }
    private IConventionCheckConstraintBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionCheckConstraintBuilder>.Instance { get; }
    public IMutableCheckConstraint Metadata { get; }
    [EntityFrameworkInternalAttribute]
public CheckConstraintBuilder(IMutableCheckConstraint checkConstraint);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
protected virtual InternalCheckConstraintBuilder get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionCheckConstraintBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionCheckConstraintBuilder>.get_Instance();
    public virtual IMutableCheckConstraint get_Metadata();
    public virtual CheckConstraintBuilder HasName(string name);
    public virtual CheckConstraintBuilder HasAnnotation(string annotation, object value);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder : object {
    [CompilerGeneratedAttribute]
private RelationalPropertyOverrides <InternalOverrides>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyBuilder <PropertyBuilder>k__BackingField;
    public IMutableRelationalPropertyOverrides Overrides { get; }
    [EntityFrameworkInternalAttribute]
protected RelationalPropertyOverrides InternalOverrides { get; }
    private PropertyBuilder PropertyBuilder { get; }
    private PropertyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public ColumnBuilder(StoreObjectIdentifier& storeObject, PropertyBuilder propertyBuilder);
    public virtual IMutableRelationalPropertyOverrides get_Overrides();
    [CompilerGeneratedAttribute]
protected virtual RelationalPropertyOverrides get_InternalOverrides();
    [CompilerGeneratedAttribute]
private PropertyBuilder get_PropertyBuilder();
    public virtual ColumnBuilder HasColumnName(string name);
    public virtual ColumnBuilder HasAnnotation(string annotation, object value);
    private sealed virtual override PropertyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder>.get_Instance();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder`1 : ColumnBuilder {
    private PropertyBuilder`1<TProperty> PropertyBuilder { get; }
    private PropertyBuilder`1<TProperty> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<TProperty>>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public ColumnBuilder`1(StoreObjectIdentifier& storeObject, PropertyBuilder`1<TProperty> propertyBuilder);
    private PropertyBuilder`1<TProperty> get_PropertyBuilder();
    public virtual ColumnBuilder`1<TProperty> HasColumnName(string name);
    public virtual ColumnBuilder`1<TProperty> HasAnnotation(string annotation, object value);
    private sealed virtual override PropertyBuilder`1<TProperty> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<TProperty>>.get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder : DbFunctionBuilderBase {
    [EntityFrameworkInternalAttribute]
public DbFunctionBuilder(IMutableDbFunction function);
    public virtual DbFunctionBuilder HasName(string name);
    public virtual DbFunctionBuilder HasSchema(string schema);
    public virtual DbFunctionBuilder IsBuiltIn(bool builtIn);
    public virtual DbFunctionBuilderBase IsNullable(bool nullable);
    public virtual DbFunctionBuilder HasStoreType(string storeType);
    public virtual DbFunctionBuilder HasTranslation(Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> translation);
    public virtual DbFunctionBuilder HasParameter(string name, Action`1<DbFunctionParameterBuilder> buildAction);
    public virtual DbFunctionBuilder HasAnnotation(string annotation, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase : object {
    [CompilerGeneratedAttribute]
private InternalDbFunctionBuilder <Builder>k__BackingField;
    [EntityFrameworkInternalAttribute]
protected InternalDbFunctionBuilder Builder { get; }
    private IConventionDbFunctionBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder>.Instance { get; }
    public IMutableDbFunction Metadata { get; }
    [EntityFrameworkInternalAttribute]
protected DbFunctionBuilderBase(IMutableDbFunction function);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
protected virtual InternalDbFunctionBuilder get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDbFunctionBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder>.get_Instance();
    public virtual IMutableDbFunction get_Metadata();
    public virtual DbFunctionBuilderBase HasName(string name);
    public virtual DbFunctionBuilderBase HasSchema(string schema);
    public virtual DbFunctionBuilderBase IsBuiltIn(bool builtIn);
    public virtual DbFunctionParameterBuilder HasParameter(string name);
    public virtual DbFunctionBuilderBase HasParameter(string name, Action`1<DbFunctionParameterBuilder> buildAction);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder : object {
    [CompilerGeneratedAttribute]
private InternalDbFunctionParameterBuilder <Builder>k__BackingField;
    private InternalDbFunctionParameterBuilder Builder { get; }
    private IConventionDbFunctionParameterBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionParameterBuilder>.Instance { get; }
    public IMutableDbFunctionParameter Metadata { get; }
    [EntityFrameworkInternalAttribute]
public DbFunctionParameterBuilder(IMutableDbFunctionParameter parameter);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
private InternalDbFunctionParameterBuilder get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDbFunctionParameterBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionParameterBuilder>.get_Instance();
    public virtual IMutableDbFunctionParameter get_Metadata();
    public virtual DbFunctionParameterBuilder HasStoreType(string storeType);
    public virtual DbFunctionParameterBuilder PropagatesNullability(bool propagatesNullability);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionCheckConstraintBuilder {
    public IConventionCheckConstraint Metadata { get; }
    public abstract virtual IConventionCheckConstraint get_Metadata();
    [NullableContextAttribute("2")]
public abstract virtual IConventionCheckConstraintBuilder HasName(string name, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual bool CanSetName(string name, bool fromDataAnnotation);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder {
    [NullableAttribute("1")]
public IConventionDbFunction Metadata { get; }
    [NullableContextAttribute("1")]
public abstract virtual IConventionDbFunction get_Metadata();
    public abstract virtual IConventionDbFunctionBuilder HasName(string name, bool fromDataAnnotation);
    public abstract virtual bool CanSetName(string name, bool fromDataAnnotation);
    public abstract virtual IConventionDbFunctionBuilder HasSchema(string schema, bool fromDataAnnotation);
    public abstract virtual bool CanSetSchema(string schema, bool fromDataAnnotation);
    public abstract virtual IConventionDbFunctionBuilder IsBuiltIn(bool builtIn, bool fromDataAnnotation);
    public abstract virtual bool CanSetIsBuiltIn(bool builtIn, bool fromDataAnnotation);
    public abstract virtual IConventionDbFunctionBuilder IsNullable(bool nullable, bool fromDataAnnotation);
    public abstract virtual bool CanSetIsNullable(bool nullable, bool fromDataAnnotation);
    public abstract virtual IConventionDbFunctionBuilder HasStoreType(string storeType, bool fromDataAnnotation);
    public abstract virtual bool CanSetStoreType(string storeType, bool fromDataAnnotation);
    public abstract virtual IConventionDbFunctionBuilder HasTypeMapping(RelationalTypeMapping typeMapping, bool fromDataAnnotation);
    public abstract virtual bool CanSetTypeMapping(RelationalTypeMapping typeMapping, bool fromDataAnnotation);
    public abstract virtual IConventionDbFunctionBuilder HasTranslation(Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> translation, bool fromDataAnnotation);
    public abstract virtual bool CanSetTranslation(Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> translation, bool fromDataAnnotation);
    [NullableContextAttribute("1")]
public abstract virtual IConventionDbFunctionParameterBuilder HasParameter(string name, bool fromDataAnnotation);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionParameterBuilder {
    [NullableAttribute("1")]
public IConventionDbFunctionParameter Metadata { get; }
    [NullableContextAttribute("1")]
public abstract virtual IConventionDbFunctionParameter get_Metadata();
    public abstract virtual IConventionDbFunctionParameterBuilder HasStoreType(string storeType, bool fromDataAnnotation);
    public abstract virtual bool CanSetStoreType(string storeType, bool fromDataAnnotation);
    public abstract virtual IConventionDbFunctionParameterBuilder HasTypeMapping(RelationalTypeMapping typeMapping, bool fromDataAnnotation);
    public abstract virtual bool CanSetTypeMapping(RelationalTypeMapping typeMapping, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeMappingFragmentBuilder {
    public IConventionEntityTypeMappingFragment Metadata { get; }
    public abstract virtual IConventionEntityTypeMappingFragment get_Metadata();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationalPropertyOverridesBuilder {
    public IConventionRelationalPropertyOverrides Metadata { get; }
    public abstract virtual IConventionRelationalPropertyOverrides get_Metadata();
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder {
    [NullableAttribute("1")]
public IConventionSequence Metadata { get; }
    [NullableContextAttribute("1")]
public abstract virtual IConventionSequence get_Metadata();
    public abstract virtual IConventionSequenceBuilder HasType(Type type, bool fromDataAnnotation);
    public abstract virtual bool CanSetType(Type type, bool fromDataAnnotation);
    public abstract virtual IConventionSequenceBuilder IncrementsBy(Nullable`1<int> increment, bool fromDataAnnotation);
    public abstract virtual bool CanSetIncrementsBy(Nullable`1<int> increment, bool fromDataAnnotation);
    public abstract virtual IConventionSequenceBuilder StartsAt(Nullable`1<long> startValue, bool fromDataAnnotation);
    public abstract virtual bool CanSetStartsAt(Nullable`1<long> startValue, bool fromDataAnnotation);
    public abstract virtual IConventionSequenceBuilder HasMax(Nullable`1<long> maximum, bool fromDataAnnotation);
    public abstract virtual bool CanSetMax(Nullable`1<long> maximum, bool fromDataAnnotation);
    public abstract virtual IConventionSequenceBuilder HasMin(Nullable`1<long> minimum, bool fromDataAnnotation);
    public abstract virtual bool CanSetMin(Nullable`1<long> minimum, bool fromDataAnnotation);
    public abstract virtual IConventionSequenceBuilder IsCyclic(Nullable`1<bool> cyclic, bool fromDataAnnotation);
    public abstract virtual bool CanSetIsCyclic(Nullable`1<bool> cyclic, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder {
    public IConventionStoredProcedure Metadata { get; }
    public abstract virtual IConventionStoredProcedure get_Metadata();
    [NullableContextAttribute("2")]
public abstract virtual IConventionStoredProcedureBuilder HasName(string name, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual IConventionStoredProcedureBuilder HasName(string name, string schema, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual bool CanSetName(string name, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual IConventionStoredProcedureBuilder HasSchema(string schema, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual bool CanSetSchema(string schema, bool fromDataAnnotation);
    public abstract virtual IConventionStoredProcedureParameterBuilder HasParameter(string propertyName, bool fromDataAnnotation);
    public abstract virtual bool CanHaveParameter(string propertyName, bool fromDataAnnotation);
    public abstract virtual IConventionStoredProcedureParameterBuilder HasOriginalValueParameter(string propertyName, bool fromDataAnnotation);
    public abstract virtual bool CanHaveOriginalValueParameter(string propertyName, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual IConventionStoredProcedureParameterBuilder HasRowsAffectedParameter(bool fromDataAnnotation);
    public abstract virtual bool CanHaveRowsAffectedParameter(bool fromDataAnnotation);
    public abstract virtual IConventionStoredProcedureResultColumnBuilder HasResultColumn(string propertyName, bool fromDataAnnotation);
    public abstract virtual bool CanHaveResultColumn(string propertyName, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual IConventionStoredProcedureResultColumnBuilder HasRowsAffectedResultColumn(bool fromDataAnnotation);
    public abstract virtual bool CanHaveRowsAffectedResultColumn(bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureParameterBuilder {
    public IConventionStoredProcedureParameter Metadata { get; }
    public abstract virtual IConventionStoredProcedureParameter get_Metadata();
    public abstract virtual IConventionStoredProcedureParameterBuilder HasName(string name, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual bool CanSetName(string name, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual IConventionStoredProcedureParameterBuilder HasDirection(ParameterDirection direction, bool fromDataAnnotation);
    public abstract virtual bool CanSetDirection(ParameterDirection direction, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureResultColumnBuilder {
    public IConventionStoredProcedureResultColumn Metadata { get; }
    public abstract virtual IConventionStoredProcedureResultColumn get_Metadata();
    public abstract virtual IConventionStoredProcedureResultColumnBuilder HasName(string name, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual bool CanSetName(string name, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitTableBuilder : object {
    [CompilerGeneratedAttribute]
private EntityTypeMappingFragment <InternalMappingFragment>k__BackingField;
    [CompilerGeneratedAttribute]
private OwnedNavigationBuilder <OwnedNavigationBuilder>k__BackingField;
    public string Name { get; }
    [NullableAttribute("2")]
public string Schema { get; }
    [EntityFrameworkInternalAttribute]
protected EntityTypeMappingFragment InternalMappingFragment { get; }
    public IMutableEntityTypeMappingFragment MappingFragment { get; }
    private OwnedNavigationBuilder OwnedNavigationBuilder { get; }
    private OwnedNavigationBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public OwnedNavigationSplitTableBuilder(StoreObjectIdentifier& storeObject, OwnedNavigationBuilder ownedNavigationBuilder);
    public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
protected virtual EntityTypeMappingFragment get_InternalMappingFragment();
    public virtual IMutableEntityTypeMappingFragment get_MappingFragment();
    [CompilerGeneratedAttribute]
private OwnedNavigationBuilder get_OwnedNavigationBuilder();
    public virtual OwnedNavigationSplitTableBuilder ExcludeFromMigrations(bool excluded);
    public virtual TableTriggerBuilder HasTrigger(string modelName);
    public virtual ColumnBuilder Property(string propertyName);
    public virtual ColumnBuilder`1<TProperty> Property(string propertyName);
    public virtual OwnedNavigationSplitTableBuilder HasAnnotation(string annotation, object value);
    private sealed virtual override OwnedNavigationBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder>.get_Instance();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitTableBuilder`2 : OwnedNavigationSplitTableBuilder {
    private OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> OwnedNavigationBuilder { get; }
    private OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder<TOwnerEntity,TDependentEntity>>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public OwnedNavigationSplitTableBuilder`2(StoreObjectIdentifier& storeObject, OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder);
    private OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> get_OwnedNavigationBuilder();
    public virtual OwnedNavigationSplitTableBuilder`2<TOwnerEntity, TDependentEntity> ExcludeFromMigrations(bool excluded);
    public virtual ColumnBuilder`1<TProperty> Property(Expression`1<Func`2<TDependentEntity, TProperty>> propertyExpression);
    public virtual OwnedNavigationSplitTableBuilder`2<TOwnerEntity, TDependentEntity> HasAnnotation(string annotation, object value);
    private sealed virtual override OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder<TOwnerEntity,TDependentEntity>>.get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder : object {
    [CompilerGeneratedAttribute]
private IMutableEntityTypeMappingFragment <MappingFragment>k__BackingField;
    [CompilerGeneratedAttribute]
private OwnedNavigationBuilder <OwnedNavigationBuilder>k__BackingField;
    public string Name { get; }
    [NullableAttribute("2")]
public string Schema { get; }
    public IMutableEntityTypeMappingFragment MappingFragment { get; }
    private OwnedNavigationBuilder OwnedNavigationBuilder { get; }
    private OwnedNavigationBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public OwnedNavigationSplitViewBuilder(StoreObjectIdentifier& storeObject, OwnedNavigationBuilder ownedNavigationBuilder);
    public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual IMutableEntityTypeMappingFragment get_MappingFragment();
    [CompilerGeneratedAttribute]
private OwnedNavigationBuilder get_OwnedNavigationBuilder();
    public virtual ViewColumnBuilder Property(string propertyName);
    public virtual ViewColumnBuilder`1<TProperty> Property(string propertyName);
    public virtual OwnedNavigationSplitViewBuilder HasAnnotation(string annotation, object value);
    private sealed virtual override OwnedNavigationBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder>.get_Instance();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder`2 : OwnedNavigationSplitViewBuilder {
    private OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> OwnedNavigationBuilder { get; }
    private OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder<TOwnerEntity,TDependentEntity>>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public OwnedNavigationSplitViewBuilder`2(StoreObjectIdentifier& storeObject, OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder);
    private OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> get_OwnedNavigationBuilder();
    public virtual ViewColumnBuilder`1<TProperty> Property(Expression`1<Func`2<TDependentEntity, TProperty>> propertyExpression);
    public virtual OwnedNavigationSplitViewBuilder`2<TOwnerEntity, TDependentEntity> HasAnnotation(string annotation, object value);
    private sealed virtual override OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder<TOwnerEntity,TDependentEntity>>.get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder : object {
    [CompilerGeneratedAttribute]
private OwnedNavigationBuilder <OwnedNavigationBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalStoredProcedureBuilder <Builder>k__BackingField;
    private OwnedNavigationBuilder OwnedNavigationBuilder { get; }
    [EntityFrameworkInternalAttribute]
protected InternalStoredProcedureBuilder Builder { get; }
    private IConventionStoredProcedureBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder>.Instance { get; }
    public IMutableStoredProcedure Metadata { get; }
    private OwnedNavigationBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public OwnedNavigationStoredProcedureBuilder(IMutableStoredProcedure sproc, OwnedNavigationBuilder ownedNavigationBuilder);
    [CompilerGeneratedAttribute]
private OwnedNavigationBuilder get_OwnedNavigationBuilder();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
protected virtual InternalStoredProcedureBuilder get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder>.get_Instance();
    public virtual IMutableStoredProcedure get_Metadata();
    public virtual OwnedNavigationStoredProcedureBuilder HasParameter(string propertyName);
    public virtual OwnedNavigationStoredProcedureBuilder HasParameter(string propertyName, Action`1<StoredProcedureParameterBuilder> buildAction);
    public virtual OwnedNavigationStoredProcedureBuilder HasOriginalValueParameter(string propertyName);
    public virtual OwnedNavigationStoredProcedureBuilder HasOriginalValueParameter(string propertyName, Action`1<StoredProcedureParameterBuilder> buildAction);
    public virtual OwnedNavigationStoredProcedureBuilder HasRowsAffectedParameter();
    public virtual OwnedNavigationStoredProcedureBuilder HasRowsAffectedParameter(Action`1<StoredProcedureParameterBuilder> buildAction);
    [EntityFrameworkInternalAttribute]
protected virtual PropertyBuilder CreatePropertyBuilder(string propertyName);
    [EntityFrameworkInternalAttribute]
protected virtual PropertyBuilder CreatePropertyBuilder(Expression`1<Func`2<TDependentEntity, TProperty>> propertyExpression);
    public virtual OwnedNavigationStoredProcedureBuilder HasResultColumn(string propertyName);
    public virtual OwnedNavigationStoredProcedureBuilder HasResultColumn(string propertyName, Action`1<StoredProcedureResultColumnBuilder> buildAction);
    public virtual OwnedNavigationStoredProcedureBuilder HasRowsAffectedResultColumn();
    public virtual OwnedNavigationStoredProcedureBuilder HasRowsAffectedResultColumn(Action`1<StoredProcedureResultColumnBuilder> buildAction);
    public virtual OwnedNavigationStoredProcedureBuilder HasRowsAffectedReturnValue(bool rowsAffectedReturned);
    public virtual OwnedNavigationStoredProcedureBuilder HasAnnotation(string annotation, object value);
    private sealed virtual override OwnedNavigationBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder>.get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder`2 : OwnedNavigationStoredProcedureBuilder {
    private OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> OwnedNavigationBuilder { get; }
    private OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder<TOwnerEntity,TDependentEntity>>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public OwnedNavigationStoredProcedureBuilder`2(IMutableStoredProcedure sproc, OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder);
    private OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> get_OwnedNavigationBuilder();
    public virtual OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity> HasParameter(string propertyName);
    public virtual OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity> HasParameter(string propertyName, Action`1<StoredProcedureParameterBuilder> buildAction);
    public virtual OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity> HasParameter(Expression`1<Func`2<TDependentEntity, TProperty>> propertyExpression);
    public virtual OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity> HasParameter(Expression`1<Func`2<TDependentEntity, TProperty>> propertyExpression, Action`1<StoredProcedureParameterBuilder> buildAction);
    public virtual OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity> HasOriginalValueParameter(string propertyName);
    public virtual OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity> HasOriginalValueParameter(string propertyName, Action`1<StoredProcedureParameterBuilder> buildAction);
    public virtual OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity> HasOriginalValueParameter(Expression`1<Func`2<TDependentEntity, TProperty>> propertyExpression);
    public virtual OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity> HasOriginalValueParameter(Expression`1<Func`2<TDependentEntity, TProperty>> propertyExpression, Action`1<StoredProcedureParameterBuilder> buildAction);
    public virtual OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity> HasRowsAffectedParameter();
    public virtual OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity> HasRowsAffectedParameter(Action`1<StoredProcedureParameterBuilder> buildAction);
    public virtual OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity> HasResultColumn(string propertyName);
    public virtual OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity> HasResultColumn(string propertyName, Action`1<StoredProcedureResultColumnBuilder> buildAction);
    public virtual OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity> HasResultColumn(Expression`1<Func`2<TDependentEntity, TProperty>> propertyExpression);
    public virtual OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity> HasResultColumn(Expression`1<Func`2<TDependentEntity, TProperty>> propertyExpression, Action`1<StoredProcedureResultColumnBuilder> buildAction);
    public virtual OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity> HasRowsAffectedResultColumn();
    public virtual OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity> HasRowsAffectedResultColumn(Action`1<StoredProcedureResultColumnBuilder> buildAction);
    public virtual OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity> HasRowsAffectedReturnValue(bool rowsAffectedReturned);
    public virtual OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity> HasAnnotation(string annotation, object value);
    private sealed virtual override OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder<TOwnerEntity,TDependentEntity>>.get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder : object {
    [CompilerGeneratedAttribute]
private Nullable`1<StoreObjectIdentifier> <StoreObject>k__BackingField;
    [CompilerGeneratedAttribute]
private OwnedNavigationBuilder <OwnedNavigationBuilder>k__BackingField;
    [NullableAttribute("2")]
public string Name { get; }
    [NullableAttribute("2")]
public string Schema { get; }
    [EntityFrameworkInternalAttribute]
protected Nullable`1<StoreObjectIdentifier> StoreObject { get; }
    public IMutableEntityType Metadata { get; }
    private OwnedNavigationBuilder OwnedNavigationBuilder { get; }
    private OwnedNavigationBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public OwnedNavigationTableBuilder(Nullable`1& storeObject, OwnedNavigationBuilder ownedNavigationBuilder);
    [NullableContextAttribute("2")]
public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
protected virtual Nullable`1<StoreObjectIdentifier> get_StoreObject();
    public virtual IMutableEntityType get_Metadata();
    [CompilerGeneratedAttribute]
private OwnedNavigationBuilder get_OwnedNavigationBuilder();
    public virtual OwnedNavigationTableBuilder ExcludeFromMigrations(bool excluded);
    public virtual TableTriggerBuilder HasTrigger(string modelName);
    public virtual CheckConstraintBuilder HasCheckConstraint(string name, string sql);
    public virtual OwnedNavigationTableBuilder HasComment(string comment);
    public virtual ColumnBuilder Property(string propertyName);
    public virtual ColumnBuilder`1<TProperty> Property(string propertyName);
    [EntityFrameworkInternalAttribute]
protected virtual StoreObjectIdentifier GetStoreObjectIdentifier();
    private sealed virtual override OwnedNavigationBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder>.get_Instance();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder`2 : OwnedNavigationTableBuilder {
    private OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> OwnedNavigationBuilder { get; }
    private OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder<TOwnerEntity,TDependentEntity>>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public OwnedNavigationTableBuilder`2(Nullable`1& storeObject, OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder);
    private OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> get_OwnedNavigationBuilder();
    public virtual OwnedNavigationTableBuilder`2<TOwnerEntity, TDependentEntity> ExcludeFromMigrations(bool excluded);
    public virtual OwnedNavigationTableBuilder`2<TOwnerEntity, TDependentEntity> HasComment(string comment);
    public virtual ColumnBuilder`1<TProperty> Property(Expression`1<Func`2<TDependentEntity, TProperty>> propertyExpression);
    private sealed virtual override OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder<TOwnerEntity,TDependentEntity>>.get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableValuedFunctionBuilder : DbFunctionBuilderBase {
    [CompilerGeneratedAttribute]
private OwnedNavigationBuilder <OwnedNavigationBuilder>k__BackingField;
    private OwnedNavigationBuilder OwnedNavigationBuilder { get; }
    private OwnedNavigationBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public OwnedNavigationTableValuedFunctionBuilder(IMutableDbFunction function, OwnedNavigationBuilder ownedNavigationBuilder);
    [CompilerGeneratedAttribute]
private OwnedNavigationBuilder get_OwnedNavigationBuilder();
    public virtual OwnedNavigationTableValuedFunctionBuilder HasName(string name);
    public virtual OwnedNavigationTableValuedFunctionBuilder HasSchema(string schema);
    public virtual OwnedNavigationTableValuedFunctionBuilder IsBuiltIn(bool builtIn);
    public virtual OwnedNavigationTableValuedFunctionBuilder HasParameter(string name, Action`1<DbFunctionParameterBuilder> buildAction);
    public virtual OwnedNavigationTableValuedFunctionBuilder HasAnnotation(string annotation, object value);
    private sealed virtual override OwnedNavigationBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder>.get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableValuedFunctionBuilder`2 : OwnedNavigationTableValuedFunctionBuilder {
    private OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> OwnedNavigationBuilder { get; }
    private OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder<TOwnerEntity,TDependentEntity>>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public OwnedNavigationTableValuedFunctionBuilder`2(IMutableDbFunction function, OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder);
    private OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> get_OwnedNavigationBuilder();
    public virtual OwnedNavigationTableValuedFunctionBuilder`2<TOwnerEntity, TDependentEntity> HasName(string name);
    public virtual OwnedNavigationTableValuedFunctionBuilder`2<TOwnerEntity, TDependentEntity> HasSchema(string schema);
    public virtual OwnedNavigationTableValuedFunctionBuilder`2<TOwnerEntity, TDependentEntity> IsBuiltIn(bool builtIn);
    public virtual OwnedNavigationTableValuedFunctionBuilder`2<TOwnerEntity, TDependentEntity> HasParameter(string name, Action`1<DbFunctionParameterBuilder> buildAction);
    public virtual OwnedNavigationTableValuedFunctionBuilder`2<TOwnerEntity, TDependentEntity> HasAnnotation(string annotation, object value);
    private sealed virtual override OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder<TOwnerEntity,TDependentEntity>>.get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationViewBuilder : object {
    [CompilerGeneratedAttribute]
private StoreObjectIdentifier <StoreObject>k__BackingField;
    [CompilerGeneratedAttribute]
private OwnedNavigationBuilder <OwnedNavigationBuilder>k__BackingField;
    public string Name { get; }
    [NullableAttribute("2")]
public string Schema { get; }
    [EntityFrameworkInternalAttribute]
protected StoreObjectIdentifier StoreObject { get; }
    private OwnedNavigationBuilder OwnedNavigationBuilder { get; }
    private OwnedNavigationBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public OwnedNavigationViewBuilder(StoreObjectIdentifier& storeObject, OwnedNavigationBuilder ownedNavigationBuilder);
    public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
protected virtual StoreObjectIdentifier get_StoreObject();
    [CompilerGeneratedAttribute]
private OwnedNavigationBuilder get_OwnedNavigationBuilder();
    public virtual ViewColumnBuilder Property(string propertyName);
    public virtual ViewColumnBuilder`1<TProperty> Property(string propertyName);
    private sealed virtual override OwnedNavigationBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder>.get_Instance();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationViewBuilder`2 : OwnedNavigationViewBuilder {
    private OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> OwnedNavigationBuilder { get; }
    private OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder<TOwnerEntity,TDependentEntity>>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public OwnedNavigationViewBuilder`2(StoreObjectIdentifier& storeObject, OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder);
    private OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> get_OwnedNavigationBuilder();
    public virtual ViewColumnBuilder`1<TProperty> Property(Expression`1<Func`2<TDependentEntity, TProperty>> propertyExpression);
    private sealed virtual override OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder<TOwnerEntity,TDependentEntity>>.get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.SequenceBuilder : object {
    [CompilerGeneratedAttribute]
private InternalSequenceBuilder <Builder>k__BackingField;
    private InternalSequenceBuilder Builder { get; }
    private IConventionSequenceBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder>.Instance { get; }
    public IMutableSequence Metadata { get; }
    public SequenceBuilder(IMutableSequence sequence);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
private InternalSequenceBuilder get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionSequenceBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder>.get_Instance();
    public virtual IMutableSequence get_Metadata();
    public virtual SequenceBuilder IncrementsBy(int increment);
    public virtual SequenceBuilder StartsAt(long startValue);
    public virtual SequenceBuilder HasMax(long maximum);
    public virtual SequenceBuilder HasMin(long minimum);
    public virtual SequenceBuilder IsCyclic(bool cyclic);
    public virtual SequenceBuilder HasAnnotation(string annotation, object value);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder : object {
    [CompilerGeneratedAttribute]
private EntityTypeMappingFragment <InternalMappingFragment>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityTypeBuilder <EntityTypeBuilder>k__BackingField;
    public string Name { get; }
    [NullableAttribute("2")]
public string Schema { get; }
    [EntityFrameworkInternalAttribute]
protected EntityTypeMappingFragment InternalMappingFragment { get; }
    public IMutableEntityTypeMappingFragment MappingFragment { get; }
    private EntityTypeBuilder EntityTypeBuilder { get; }
    private EntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public SplitTableBuilder(StoreObjectIdentifier& storeObject, EntityTypeBuilder entityTypeBuilder);
    public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
protected virtual EntityTypeMappingFragment get_InternalMappingFragment();
    public virtual IMutableEntityTypeMappingFragment get_MappingFragment();
    [CompilerGeneratedAttribute]
private EntityTypeBuilder get_EntityTypeBuilder();
    public virtual SplitTableBuilder ExcludeFromMigrations(bool excluded);
    public virtual TableTriggerBuilder HasTrigger(string modelName);
    public virtual ColumnBuilder Property(string propertyName);
    public virtual ColumnBuilder`1<TProperty> Property(string propertyName);
    public virtual SplitTableBuilder HasAnnotation(string annotation, object value);
    private sealed virtual override EntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>.get_Instance();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder`1 : SplitTableBuilder {
    private EntityTypeBuilder`1<TEntity> EntityTypeBuilder { get; }
    private EntityTypeBuilder`1<TEntity> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<TEntity>>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public SplitTableBuilder`1(StoreObjectIdentifier& storeObject, EntityTypeBuilder`1<TEntity> entityTypeBuilder);
    private EntityTypeBuilder`1<TEntity> get_EntityTypeBuilder();
    public virtual SplitTableBuilder`1<TEntity> ExcludeFromMigrations(bool excluded);
    public virtual ColumnBuilder`1<TProperty> Property(Expression`1<Func`2<TEntity, TProperty>> propertyExpression);
    public virtual SplitTableBuilder`1<TEntity> HasAnnotation(string annotation, object value);
    private sealed virtual override EntityTypeBuilder`1<TEntity> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<TEntity>>.get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.SplitViewBuilder : object {
    [CompilerGeneratedAttribute]
private IMutableEntityTypeMappingFragment <MappingFragment>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityTypeBuilder <EntityTypeBuilder>k__BackingField;
    public string Name { get; }
    [NullableAttribute("2")]
public string Schema { get; }
    public IMutableEntityTypeMappingFragment MappingFragment { get; }
    private EntityTypeBuilder EntityTypeBuilder { get; }
    private EntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public SplitViewBuilder(StoreObjectIdentifier& storeObject, EntityTypeBuilder entityTypeBuilder);
    public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual IMutableEntityTypeMappingFragment get_MappingFragment();
    [CompilerGeneratedAttribute]
private EntityTypeBuilder get_EntityTypeBuilder();
    public virtual ViewColumnBuilder Property(string propertyName);
    public virtual ViewColumnBuilder`1<TProperty> Property(string propertyName);
    public virtual SplitViewBuilder HasAnnotation(string annotation, object value);
    private sealed virtual override EntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>.get_Instance();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.SplitViewBuilder`1 : SplitViewBuilder {
    private EntityTypeBuilder`1<TEntity> EntityTypeBuilder { get; }
    private EntityTypeBuilder`1<TEntity> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<TEntity>>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public SplitViewBuilder`1(StoreObjectIdentifier& storeObject, EntityTypeBuilder`1<TEntity> entityTypeBuilder);
    private EntityTypeBuilder`1<TEntity> get_EntityTypeBuilder();
    public virtual ViewColumnBuilder`1<TProperty> Property(Expression`1<Func`2<TEntity, TProperty>> propertyExpression);
    public virtual SplitViewBuilder`1<TEntity> HasAnnotation(string annotation, object value);
    private sealed virtual override EntityTypeBuilder`1<TEntity> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<TEntity>>.get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder : object {
    [CompilerGeneratedAttribute]
private EntityTypeBuilder <EntityTypeBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalStoredProcedureBuilder <Builder>k__BackingField;
    private EntityTypeBuilder EntityTypeBuilder { get; }
    [EntityFrameworkInternalAttribute]
protected InternalStoredProcedureBuilder Builder { get; }
    private IConventionStoredProcedureBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder>.Instance { get; }
    public IMutableStoredProcedure Metadata { get; }
    private EntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public StoredProcedureBuilder(IMutableStoredProcedure sproc, EntityTypeBuilder entityTypeBuilder);
    [CompilerGeneratedAttribute]
private EntityTypeBuilder get_EntityTypeBuilder();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
protected virtual InternalStoredProcedureBuilder get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder>.get_Instance();
    public virtual IMutableStoredProcedure get_Metadata();
    public virtual StoredProcedureBuilder HasParameter(string propertyName);
    public virtual StoredProcedureBuilder HasParameter(string propertyName, Action`1<StoredProcedureParameterBuilder> buildAction);
    public virtual StoredProcedureBuilder HasOriginalValueParameter(string propertyName);
    public virtual StoredProcedureBuilder HasOriginalValueParameter(string propertyName, Action`1<StoredProcedureParameterBuilder> buildAction);
    public virtual StoredProcedureBuilder HasRowsAffectedParameter();
    public virtual StoredProcedureBuilder HasRowsAffectedParameter(Action`1<StoredProcedureParameterBuilder> buildAction);
    public virtual StoredProcedureBuilder HasResultColumn(string propertyName);
    public virtual StoredProcedureBuilder HasResultColumn(string propertyName, Action`1<StoredProcedureResultColumnBuilder> buildAction);
    public virtual StoredProcedureBuilder HasRowsAffectedResultColumn();
    public virtual StoredProcedureBuilder HasRowsAffectedResultColumn(Action`1<StoredProcedureResultColumnBuilder> buildAction);
    public virtual StoredProcedureBuilder HasRowsAffectedReturnValue(bool rowsAffectedReturned);
    public virtual StoredProcedureBuilder HasAnnotation(string annotation, object value);
    [EntityFrameworkInternalAttribute]
protected virtual PropertyBuilder CreatePropertyBuilder(string propertyName);
    [EntityFrameworkInternalAttribute]
protected virtual PropertyBuilder CreatePropertyBuilder(Expression`1<Func`2<TDerivedEntity, TProperty>> propertyExpression);
    private sealed virtual override EntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>.get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder`1 : StoredProcedureBuilder {
    private EntityTypeBuilder`1<TEntity> EntityTypeBuilder { get; }
    private EntityTypeBuilder`1<TEntity> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<TEntity>>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public StoredProcedureBuilder`1(IMutableStoredProcedure sproc, EntityTypeBuilder`1<TEntity> entityTypeBuilder);
    private EntityTypeBuilder`1<TEntity> get_EntityTypeBuilder();
    public virtual StoredProcedureBuilder`1<TEntity> HasParameter(string propertyName);
    public virtual StoredProcedureBuilder`1<TEntity> HasParameter(string propertyName, Action`1<StoredProcedureParameterBuilder> buildAction);
    public virtual StoredProcedureBuilder`1<TEntity> HasParameter(Expression`1<Func`2<TEntity, TProperty>> propertyExpression);
    public virtual StoredProcedureBuilder`1<TEntity> HasParameter(Expression`1<Func`2<TDerivedEntity, TProperty>> propertyExpression);
    public virtual StoredProcedureBuilder`1<TEntity> HasParameter(Expression`1<Func`2<TEntity, TProperty>> propertyExpression, Action`1<StoredProcedureParameterBuilder> buildAction);
    public virtual StoredProcedureBuilder`1<TEntity> HasParameter(Expression`1<Func`2<TDerivedEntity, TProperty>> propertyExpression, Action`1<StoredProcedureParameterBuilder> buildAction);
    public virtual StoredProcedureBuilder`1<TEntity> HasOriginalValueParameter(string propertyName);
    public virtual StoredProcedureBuilder`1<TEntity> HasOriginalValueParameter(string propertyName, Action`1<StoredProcedureParameterBuilder> buildAction);
    public virtual StoredProcedureBuilder`1<TEntity> HasOriginalValueParameter(Expression`1<Func`2<TEntity, TProperty>> propertyExpression);
    public virtual StoredProcedureBuilder`1<TEntity> HasOriginalValueParameter(Expression`1<Func`2<TDerivedEntity, TProperty>> propertyExpression);
    public virtual StoredProcedureBuilder`1<TEntity> HasOriginalValueParameter(Expression`1<Func`2<TEntity, TProperty>> propertyExpression, Action`1<StoredProcedureParameterBuilder> buildAction);
    public virtual StoredProcedureBuilder`1<TEntity> HasOriginalValueParameter(Expression`1<Func`2<TDerivedEntity, TProperty>> propertyExpression, Action`1<StoredProcedureParameterBuilder> buildAction);
    public virtual StoredProcedureBuilder`1<TEntity> HasRowsAffectedParameter();
    public virtual StoredProcedureBuilder`1<TEntity> HasRowsAffectedParameter(Action`1<StoredProcedureParameterBuilder> buildAction);
    public virtual StoredProcedureBuilder`1<TEntity> HasResultColumn(string propertyName);
    public virtual StoredProcedureBuilder`1<TEntity> HasResultColumn(string propertyName, Action`1<StoredProcedureResultColumnBuilder> buildAction);
    public virtual StoredProcedureBuilder`1<TEntity> HasResultColumn(Expression`1<Func`2<TEntity, TProperty>> propertyExpression);
    public virtual StoredProcedureBuilder`1<TEntity> HasResultColumn(Expression`1<Func`2<TDerivedEntity, TProperty>> propertyExpression);
    public virtual StoredProcedureBuilder`1<TEntity> HasResultColumn(Expression`1<Func`2<TEntity, TProperty>> propertyExpression, Action`1<StoredProcedureResultColumnBuilder> buildAction);
    public virtual StoredProcedureBuilder`1<TEntity> HasResultColumn(Expression`1<Func`2<TDerivedEntity, TProperty>> propertyExpression, Action`1<StoredProcedureResultColumnBuilder> buildAction);
    public virtual StoredProcedureBuilder`1<TEntity> HasRowsAffectedResultColumn();
    public virtual StoredProcedureBuilder`1<TEntity> HasRowsAffectedResultColumn(Action`1<StoredProcedureResultColumnBuilder> buildAction);
    public virtual StoredProcedureBuilder`1<TEntity> HasRowsAffectedReturnValue(bool rowsAffectedReturned);
    public virtual StoredProcedureBuilder`1<TEntity> HasAnnotation(string annotation, object value);
    private sealed virtual override EntityTypeBuilder`1<TEntity> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<TEntity>>.get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureParameterBuilder : object {
    [CompilerGeneratedAttribute]
private InternalStoredProcedureParameterBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyBuilder <PropertyBuilder>k__BackingField;
    public IMutableStoredProcedureParameter Metadata { get; }
    [EntityFrameworkInternalAttribute]
protected InternalStoredProcedureParameterBuilder Builder { get; }
    [NullableAttribute("2")]
private PropertyBuilder PropertyBuilder { get; }
    [NullableAttribute("2")]
private PropertyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public StoredProcedureParameterBuilder(InternalStoredProcedureParameterBuilder builder, PropertyBuilder propertyBuilder);
    public virtual IMutableStoredProcedureParameter get_Metadata();
    [CompilerGeneratedAttribute]
protected virtual InternalStoredProcedureParameterBuilder get_Builder();
    [CompilerGeneratedAttribute]
private PropertyBuilder get_PropertyBuilder();
    public virtual StoredProcedureParameterBuilder HasName(string name);
    public virtual StoredProcedureParameterBuilder IsInputOutput();
    public virtual StoredProcedureParameterBuilder IsOutput();
    public virtual StoredProcedureParameterBuilder HasAnnotation(string annotation, object value);
    private sealed virtual override PropertyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder>.get_Instance();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureResultColumnBuilder : object {
    [CompilerGeneratedAttribute]
private InternalStoredProcedureResultColumnBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyBuilder <PropertyBuilder>k__BackingField;
    public IMutableStoredProcedureResultColumn Metadata { get; }
    [EntityFrameworkInternalAttribute]
protected InternalStoredProcedureResultColumnBuilder Builder { get; }
    [NullableAttribute("2")]
private PropertyBuilder PropertyBuilder { get; }
    [NullableAttribute("2")]
private PropertyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public StoredProcedureResultColumnBuilder(InternalStoredProcedureResultColumnBuilder builder, PropertyBuilder propertyBuilder);
    public virtual IMutableStoredProcedureResultColumn get_Metadata();
    [CompilerGeneratedAttribute]
protected virtual InternalStoredProcedureResultColumnBuilder get_Builder();
    [CompilerGeneratedAttribute]
private PropertyBuilder get_PropertyBuilder();
    public virtual StoredProcedureResultColumnBuilder HasName(string name);
    public virtual StoredProcedureResultColumnBuilder HasAnnotation(string annotation, object value);
    private sealed virtual override PropertyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder>.get_Instance();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder : object {
    [CompilerGeneratedAttribute]
private Nullable`1<StoreObjectIdentifier> <StoreObject>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityTypeBuilder <EntityTypeBuilder>k__BackingField;
    [NullableAttribute("2")]
public string Name { get; }
    [NullableAttribute("2")]
public string Schema { get; }
    [EntityFrameworkInternalAttribute]
protected Nullable`1<StoreObjectIdentifier> StoreObject { get; }
    public IMutableEntityType Metadata { get; }
    private EntityTypeBuilder EntityTypeBuilder { get; }
    private EntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public TableBuilder(Nullable`1& storeObject, EntityTypeBuilder entityTypeBuilder);
    [NullableContextAttribute("2")]
public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
protected virtual Nullable`1<StoreObjectIdentifier> get_StoreObject();
    public virtual IMutableEntityType get_Metadata();
    [CompilerGeneratedAttribute]
private EntityTypeBuilder get_EntityTypeBuilder();
    public virtual TableBuilder ExcludeFromMigrations(bool excluded);
    public virtual TableTriggerBuilder HasTrigger(string modelName);
    public virtual CheckConstraintBuilder HasCheckConstraint(string name, string sql);
    public virtual TableBuilder HasComment(string comment);
    public virtual ColumnBuilder Property(string propertyName);
    public virtual ColumnBuilder`1<TProperty> Property(string propertyName);
    [EntityFrameworkInternalAttribute]
protected virtual StoreObjectIdentifier GetStoreObjectIdentifier();
    private sealed virtual override EntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>.get_Instance();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder`1 : TableBuilder {
    private EntityTypeBuilder`1<TEntity> EntityTypeBuilder { get; }
    private EntityTypeBuilder`1<TEntity> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<TEntity>>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public TableBuilder`1(Nullable`1& storeObject, EntityTypeBuilder`1<TEntity> entityTypeBuilder);
    private EntityTypeBuilder`1<TEntity> get_EntityTypeBuilder();
    public virtual TableBuilder`1<TEntity> HasComment(string comment);
    public virtual TableBuilder`1<TEntity> ExcludeFromMigrations(bool excluded);
    public virtual ColumnBuilder`1<TProperty> Property(Expression`1<Func`2<TEntity, TProperty>> propertyExpression);
    private sealed virtual override EntityTypeBuilder`1<TEntity> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<TEntity>>.get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.TableTriggerBuilder : TriggerBuilder {
    public TableTriggerBuilder(IMutableTrigger trigger);
    public virtual TableTriggerBuilder HasDatabaseName(string name);
    public virtual TableTriggerBuilder HasAnnotation(string annotation, object value);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder : DbFunctionBuilderBase {
    [CompilerGeneratedAttribute]
private EntityTypeBuilder <EntityTypeBuilder>k__BackingField;
    private EntityTypeBuilder EntityTypeBuilder { get; }
    private EntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public TableValuedFunctionBuilder(IMutableDbFunction function, EntityTypeBuilder entityTypeBuilder);
    [CompilerGeneratedAttribute]
private EntityTypeBuilder get_EntityTypeBuilder();
    public virtual TableValuedFunctionBuilder HasName(string name);
    public virtual TableValuedFunctionBuilder HasSchema(string schema);
    public virtual TableValuedFunctionBuilder IsBuiltIn(bool builtIn);
    public virtual TableValuedFunctionBuilder HasParameter(string name, Action`1<DbFunctionParameterBuilder> buildAction);
    public virtual TableValuedFunctionBuilder HasAnnotation(string annotation, object value);
    private sealed virtual override EntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>.get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder`1 : TableValuedFunctionBuilder {
    private EntityTypeBuilder`1<TEntity> EntityTypeBuilder { get; }
    private EntityTypeBuilder`1<TEntity> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<TEntity>>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public TableValuedFunctionBuilder`1(IMutableDbFunction function, EntityTypeBuilder`1<TEntity> entityTypeBuilder);
    private EntityTypeBuilder`1<TEntity> get_EntityTypeBuilder();
    public virtual TableValuedFunctionBuilder`1<TEntity> HasName(string name);
    public virtual TableValuedFunctionBuilder`1<TEntity> HasSchema(string schema);
    public virtual TableValuedFunctionBuilder`1<TEntity> IsBuiltIn(bool builtIn);
    public virtual TableValuedFunctionBuilder`1<TEntity> HasParameter(string name, Action`1<DbFunctionParameterBuilder> buildAction);
    public virtual TableValuedFunctionBuilder`1<TEntity> HasAnnotation(string annotation, object value);
    private sealed virtual override EntityTypeBuilder`1<TEntity> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<TEntity>>.get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.ViewBuilder : object {
    [CompilerGeneratedAttribute]
private StoreObjectIdentifier <StoreObject>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityTypeBuilder <EntityTypeBuilder>k__BackingField;
    public string Name { get; }
    [NullableAttribute("2")]
public string Schema { get; }
    [EntityFrameworkInternalAttribute]
protected StoreObjectIdentifier StoreObject { get; }
    private EntityTypeBuilder EntityTypeBuilder { get; }
    private EntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public ViewBuilder(StoreObjectIdentifier& storeObject, EntityTypeBuilder entityTypeBuilder);
    public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
protected virtual StoreObjectIdentifier get_StoreObject();
    [CompilerGeneratedAttribute]
private EntityTypeBuilder get_EntityTypeBuilder();
    public virtual ViewColumnBuilder Property(string propertyName);
    public virtual ViewColumnBuilder`1<TProperty> Property(string propertyName);
    private sealed virtual override EntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder>.get_Instance();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.ViewBuilder`1 : ViewBuilder {
    private EntityTypeBuilder`1<TEntity> EntityTypeBuilder { get; }
    private EntityTypeBuilder`1<TEntity> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<TEntity>>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public ViewBuilder`1(StoreObjectIdentifier& storeObject, EntityTypeBuilder`1<TEntity> entityTypeBuilder);
    private EntityTypeBuilder`1<TEntity> get_EntityTypeBuilder();
    public virtual ViewColumnBuilder`1<TProperty> Property(Expression`1<Func`2<TEntity, TProperty>> propertyExpression);
    private sealed virtual override EntityTypeBuilder`1<TEntity> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<TEntity>>.get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.ViewColumnBuilder : object {
    [CompilerGeneratedAttribute]
private RelationalPropertyOverrides <InternalOverrides>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyBuilder <PropertyBuilder>k__BackingField;
    public IMutableRelationalPropertyOverrides Overrides { get; }
    [EntityFrameworkInternalAttribute]
protected RelationalPropertyOverrides InternalOverrides { get; }
    private PropertyBuilder PropertyBuilder { get; }
    private PropertyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public ViewColumnBuilder(StoreObjectIdentifier& storeObject, PropertyBuilder propertyBuilder);
    public virtual IMutableRelationalPropertyOverrides get_Overrides();
    [CompilerGeneratedAttribute]
protected virtual RelationalPropertyOverrides get_InternalOverrides();
    [CompilerGeneratedAttribute]
private PropertyBuilder get_PropertyBuilder();
    public virtual ViewColumnBuilder HasColumnName(string name);
    public virtual ViewColumnBuilder HasAnnotation(string annotation, object value);
    private sealed virtual override PropertyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder>.get_Instance();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.ViewColumnBuilder`1 : ViewColumnBuilder {
    private PropertyBuilder`1<TProperty> PropertyBuilder { get; }
    private PropertyBuilder`1<TProperty> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<TProperty>>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public ViewColumnBuilder`1(StoreObjectIdentifier& storeObject, PropertyBuilder`1<TProperty> propertyBuilder);
    private PropertyBuilder`1<TProperty> get_PropertyBuilder();
    public virtual ViewColumnBuilder`1<TProperty> HasColumnName(string name);
    public virtual ViewColumnBuilder`1<TProperty> HasAnnotation(string annotation, object value);
    private sealed virtual override PropertyBuilder`1<TProperty> Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<TProperty>>.get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.CheckConstraintConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public CheckConstraintConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    private static bool AreCompatible(IConventionCheckConstraint checkConstraint, IConventionCheckConstraint baseCheckConstraint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.EntitySplittingConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public EntitySplittingConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.EntityTypeHierarchyMappingConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public EntityTypeHierarchyMappingConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilder : ProviderConventionSetBuilder {
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    protected RelationalConventionSetBuilder(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual ConventionSet CreateConventionSet();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies : object {
    [CompilerGeneratedAttribute]
private IRelationalAnnotationProvider <RelationalAnnotationProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IUpdateSqlGenerator <UpdateSqlGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IRelationalAnnotationProvider RelationalAnnotationProvider { get; public set; }
    public IUpdateSqlGenerator UpdateSqlGenerator { get; public set; }
    [EntityFrameworkInternalAttribute]
public RelationalConventionSetBuilderDependencies(IRelationalAnnotationProvider relationalAnnotationProvider, IUpdateSqlGenerator updateSqlGenerator);
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies(RelationalConventionSetBuilderDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IRelationalAnnotationProvider get_RelationalAnnotationProvider();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RelationalAnnotationProvider(IRelationalAnnotationProvider value);
    [CompilerGeneratedAttribute]
public IUpdateSqlGenerator get_UpdateSqlGenerator();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UpdateSqlGenerator(IUpdateSqlGenerator value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalConventionSetBuilderDependencies left, RelationalConventionSetBuilderDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RelationalConventionSetBuilderDependencies left, RelationalConventionSetBuilderDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalConventionSetBuilderDependencies other);
    [CompilerGeneratedAttribute]
public RelationalConventionSetBuilderDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.PropertyOverridesConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public PropertyOverridesConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, IConventionContext`1<IConventionPropertyBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalColumnAttributeConvention : PropertyAttributeConventionBase`1<ColumnAttribute> {
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public RelationalColumnAttributeConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, ColumnAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalColumnCommentAttributeConvention : PropertyAttributeConventionBase`1<CommentAttribute> {
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public RelationalColumnCommentAttributeConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, CommentAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalDbFunctionAttributeConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public RelationalDbFunctionAttributeConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessModelInitialized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    protected virtual void ProcessDbFunctionAdded(IConventionDbFunctionBuilder dbFunctionBuilder, IConventionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalMapToJsonConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public RelationalMapToJsonConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessEntityTypeAnnotationChanged(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalMaxIdentifierLengthConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxIdentifierLength>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public int MaxIdentifierLength { get; }
    public RelationalMaxIdentifierLengthConvention(int maxIdentifierLength, ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    [CompilerGeneratedAttribute]
public virtual int get_MaxIdentifierLength();
    public virtual void ProcessModelInitialized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalNavigationJsonPropertyNameAttributeConvention : NavigationAttributeConventionBase`1<JsonPropertyNameAttribute> {
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public RelationalNavigationJsonPropertyNameAttributeConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessNavigationAdded(IConventionNavigationBuilder navigationBuilder, JsonPropertyNameAttribute attribute, IConventionContext`1<IConventionNavigationBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalPropertyJsonPropertyNameAttributeConvention : PropertyAttributeConventionBase`1<JsonPropertyNameAttribute> {
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public RelationalPropertyJsonPropertyNameAttributeConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, JsonPropertyNameAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalQueryFilterRewritingConvention : QueryFilterRewritingConvention {
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public RelationalQueryFilterRewritingConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalRuntimeModelConvention : RuntimeModelConvention {
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public RelationalRuntimeModelConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    protected virtual void ProcessModelAnnotations(Dictionary`2<string, object> annotations, IModel model, RuntimeModel runtimeModel, bool runtime);
    protected virtual void ProcessEntityTypeAnnotations(Dictionary`2<string, object> annotations, IEntityType entityType, RuntimeEntityType runtimeEntityType, bool runtime);
    private static RuntimeEntityTypeMappingFragment Create(IEntityTypeMappingFragment entityTypeMappingFragment, RuntimeEntityType runtimeEntityType);
    protected virtual void ProcessEntityTypeMappingFragmentAnnotations(Dictionary`2<string, object> annotations, IEntityTypeMappingFragment entityTypeMappingFragment, RuntimeEntityTypeMappingFragment runtimeEntityTypeMappingFragment, bool runtime);
    private void CreateAnnotations(TSource source, TTarget target, Action`5<RelationalRuntimeModelConvention, Dictionary`2<string, object>, TSource, TTarget, bool> process);
    private static RuntimeDbFunction Create(IDbFunction function, RuntimeModel runtimeModel);
    protected virtual void ProcessFunctionAnnotations(Dictionary`2<string, object> annotations, IDbFunction function, RuntimeDbFunction runtimeFunction, bool runtime);
    private static RuntimeDbFunctionParameter Create(IDbFunctionParameter parameter, RuntimeDbFunction runtimeFunction);
    protected virtual void ProcessFunctionParameterAnnotations(Dictionary`2<string, object> annotations, IDbFunctionParameter parameter, RuntimeDbFunctionParameter runtimeParameter, bool runtime);
    private static RuntimeSequence Create(ISequence sequence, RuntimeModel runtimeModel);
    protected virtual void ProcessSequenceAnnotations(Dictionary`2<string, object> annotations, ISequence sequence, RuntimeSequence runtimeSequence, bool runtime);
    protected virtual void ProcessPropertyAnnotations(Dictionary`2<string, object> annotations, IProperty property, RuntimeProperty runtimeProperty, bool runtime);
    private static RuntimeRelationalPropertyOverrides Create(IRelationalPropertyOverrides propertyOverrides, RuntimeProperty runtimeProperty);
    protected virtual void ProcessPropertyOverridesAnnotations(Dictionary`2<string, object> annotations, IRelationalPropertyOverrides propertyOverrides, RuntimeRelationalPropertyOverrides runtimePropertyOverrides, bool runtime);
    protected virtual void ProcessKeyAnnotations(Dictionary`2<string, object> annotations, IKey key, RuntimeKey runtimeKey, bool runtime);
    protected virtual void ProcessIndexAnnotations(Dictionary`2<string, object> annotations, IIndex index, RuntimeIndex runtimeIndex, bool runtime);
    protected virtual void ProcessForeignKeyAnnotations(Dictionary`2<string, object> annotations, IForeignKey foreignKey, RuntimeForeignKey runtimeForeignKey, bool runtime);
    private RuntimeStoredProcedure Create(IStoredProcedure storedProcedure, RuntimeEntityType runtimeEntityType);
    private RuntimeStoredProcedureParameter Create(IStoredProcedureParameter parameter, RuntimeStoredProcedure runtimeStoredProcedure);
    private RuntimeStoredProcedureResultColumn Create(IStoredProcedureResultColumn resultColumn, RuntimeStoredProcedure runtimeStoredProcedure);
    protected virtual void ProcessStoredProcedureAnnotations(Dictionary`2<string, object> annotations, IStoredProcedure storedProcedure, RuntimeStoredProcedure runtimeStoredProcedure, bool runtime);
    protected virtual void ProcessStoredProcedureParameterAnnotations(Dictionary`2<string, object> annotations, IStoredProcedureParameter parameter, RuntimeStoredProcedureParameter runtimeParameter, bool runtime);
    protected virtual void ProcessStoredProcedureResultColumnAnnotations(Dictionary`2<string, object> annotations, IStoredProcedureResultColumn resultColumn, RuntimeStoredProcedureResultColumn runtimeResultColumn, bool runtime);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalTableAttributeConvention : EntityTypeAttributeConventionBase`1<TableAttribute> {
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public RelationalTableAttributeConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    protected virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, TableAttribute attribute, IConventionContext`1<IConventionEntityTypeBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalTableCommentAttributeConvention : EntityTypeAttributeConventionBase`1<CommentAttribute> {
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public RelationalTableCommentAttributeConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    protected virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, CommentAttribute attribute, IConventionContext`1<IConventionEntityTypeBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalValueGenerationConvention : ValueGenerationConvention {
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public RelationalValueGenerationConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    public virtual void ProcessEntityTypeAnnotationChanged(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    private void ProcessTableChanged(IConventionEntityTypeBuilder entityTypeBuilder, string oldTable, string oldSchema, string newTable, string newSchema);
    protected virtual Nullable`1<ValueGenerated> GetValueGenerated(IConventionProperty property);
    protected virtual bool MappingStrategyAllowsValueGeneration(IConventionProperty property, string mappingStrategy);
    public static Nullable`1<ValueGenerated> GetValueGenerated(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.SequenceUniquificationConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public SequenceUniquificationConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    protected bool KeysUniqueAcrossTables { get; }
    protected bool ForeignKeysUniqueAcrossTables { get; }
    protected bool IndexesUniqueAcrossTables { get; }
    protected bool CheckConstraintsUniqueAcrossTables { get; }
    protected bool TriggersUniqueAcrossTables { get; }
    public SharedTableConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    protected virtual bool get_KeysUniqueAcrossTables();
    protected virtual bool get_ForeignKeysUniqueAcrossTables();
    protected virtual bool get_IndexesUniqueAcrossTables();
    protected virtual bool get_CheckConstraintsUniqueAcrossTables();
    protected virtual bool get_TriggersUniqueAcrossTables();
    private static void TryUniquifyTableNames(IConventionModel model, Dictionary`2<ValueTuple`2<string, string>, List`1<IConventionEntityType>> tables, int maxLength);
    private static void TryUniquifyColumnNames(IConventionEntityType entityType, Dictionary`2<string, IConventionProperty> properties, StoreObjectIdentifier& storeObject, int maxLength);
    private static string TryUniquify(IConventionProperty property, string columnName, Dictionary`2<string, IConventionProperty> properties, StoreObjectIdentifier& storeObject, bool usePrefix, int maxLength);
    private void TryUniquifyKeyNames(IConventionEntityType entityType, Dictionary`2<string, ValueTuple`2<IConventionKey, StoreObjectIdentifier>> keys, StoreObjectIdentifier& storeObject, int maxLength);
    protected virtual bool AreCompatible(IReadOnlyKey key, IReadOnlyKey duplicateKey, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject);
    private static string TryUniquify(IConventionKey key, string keyName, Dictionary`2<string, ValueTuple`2<IConventionKey, StoreObjectIdentifier>> keys, int maxLength);
    private void TryUniquifyIndexNames(IConventionEntityType entityType, Dictionary`2<string, ValueTuple`2<IConventionIndex, StoreObjectIdentifier>> indexes, StoreObjectIdentifier& storeObject, int maxLength);
    protected virtual bool AreCompatible(IReadOnlyIndex index, IReadOnlyIndex duplicateIndex, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject);
    private static string TryUniquify(IConventionIndex index, string indexName, Dictionary`2<string, ValueTuple`2<IConventionIndex, StoreObjectIdentifier>> indexes, int maxLength);
    private void TryUniquifyForeignKeyNames(IConventionEntityType entityType, Dictionary`2<string, ValueTuple`2<IConventionForeignKey, StoreObjectIdentifier>> foreignKeys, StoreObjectIdentifier& storeObject, int maxLength);
    protected virtual bool AreCompatible(IReadOnlyForeignKey foreignKey, IReadOnlyForeignKey duplicateForeignKey, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject);
    private static string TryUniquify(IConventionForeignKey foreignKey, string foreignKeyName, Dictionary`2<string, ValueTuple`2<IConventionForeignKey, StoreObjectIdentifier>> foreignKeys, int maxLength);
    private void TryUniquifyCheckConstraintNames(IConventionEntityType entityType, Dictionary`2<ValueTuple`2<string, string>, ValueTuple`2<IConventionCheckConstraint, StoreObjectIdentifier>> checkConstraints, StoreObjectIdentifier& storeObject, int maxLength);
    protected virtual bool AreCompatible(IReadOnlyCheckConstraint checkConstraint, IReadOnlyCheckConstraint duplicateCheckConstraint, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject);
    private static string TryUniquify(IConventionCheckConstraint checkConstraint, string checkConstraintName, string schema, Dictionary`2<ValueTuple`2<string, string>, ValueTuple`2<IConventionCheckConstraint, StoreObjectIdentifier>> checkConstraints, int maxLength);
    private void TryUniquifyTriggerNames(IConventionEntityType entityType, Dictionary`2<string, ValueTuple`2<IConventionTrigger, StoreObjectIdentifier>> triggers, StoreObjectIdentifier& storeObject, int maxLength);
    protected virtual bool AreCompatible(IReadOnlyTrigger trigger, IReadOnlyTrigger duplicateTrigger, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject);
    private static string TryUniquify(IConventionTrigger trigger, string triggerName, Dictionary`2<string, ValueTuple`2<IConventionTrigger, StoreObjectIdentifier>> triggers, int maxLength);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.StoredProcedureConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public StoredProcedureConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.StoreGenerationConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public StoreGenerationConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    protected virtual void Validate(IConventionProperty property, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.TableNameFromDbSetConvention : object {
    private IDictionary`2<Type, string> _sets;
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public TableNameFromDbSetConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
    public virtual void ProcessEntityTypeAnnotationChanged(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.TableSharingConcurrencyTokenConvention : object {
    private static string ConcurrencyPropertyPrefix;
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public TableSharingConcurrencyTokenConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    [EntityFrameworkInternalAttribute]
public static Dictionary`2<string, List`1<IReadOnlyProperty>> GetConcurrencyTokensMap(StoreObjectIdentifier& storeObject, IReadOnlyList`1<IReadOnlyEntityType> mappedTypes);
    [EntityFrameworkInternalAttribute]
public static bool IsConcurrencyTokenMissing(List`1<IReadOnlyProperty> propertiesMappedToConcurrencyColumn, IReadOnlyEntityType entityType, IReadOnlyList`1<IReadOnlyEntityType> mappedTypes);
    private static void RemoveDerivedEntityTypes(Dictionary`2<IConventionEntityType, IReadOnlyProperty> entityTypeDictionary, List`1<IConventionEntityType> mappedTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.TableValuedDbFunctionConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public TableValuedDbFunctionConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    private static void ProcessDbFunctionAdded(IConventionDbFunctionBuilder dbFunctionBuilder);
}
public interface Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint {
    [NullableAttribute("1")]
public IEntityType EntityType { get; }
    [NullableContextAttribute("1")]
public abstract virtual IEntityType get_EntityType();
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Metadata.IColumn {
    [NullableAttribute("1")]
public ITable Table { get; }
    [NullableAttribute("1")]
public IReadOnlyList`1<IColumnMapping> PropertyMappings { get; }
    public Nullable`1<int> MaxLength { get; }
    public Nullable`1<int> Precision { get; }
    public Nullable`1<int> Scale { get; }
    public Nullable`1<bool> IsUnicode { get; }
    public Nullable`1<bool> IsFixedLength { get; }
    public bool IsRowVersion { get; }
    public Nullable`1<int> Order { get; }
    public object DefaultValue { get; }
    public string DefaultValueSql { get; }
    public string ComputedColumnSql { get; }
    public Nullable`1<bool> IsStored { get; }
    public string Comment { get; }
    public string Collation { get; }
    [NullableContextAttribute("1")]
public abstract virtual ITable get_Table();
    [NullableContextAttribute("1")]
public abstract virtual IReadOnlyList`1<IColumnMapping> get_PropertyMappings();
    public virtual Nullable`1<int> get_MaxLength();
    public virtual Nullable`1<int> get_Precision();
    public virtual Nullable`1<int> get_Scale();
    public virtual Nullable`1<bool> get_IsUnicode();
    public virtual Nullable`1<bool> get_IsFixedLength();
    public virtual bool get_IsRowVersion();
    public virtual Nullable`1<int> get_Order();
    public virtual object get_DefaultValue();
    public virtual bool TryGetDefaultValue(Object& defaultValue);
    public virtual string get_DefaultValueSql();
    public virtual string get_ComputedColumnSql();
    public virtual Nullable`1<bool> get_IsStored();
    public virtual string get_Comment();
    public virtual string get_Collation();
    [NullableContextAttribute("1")]
public virtual IColumnMapping FindColumnMapping(IReadOnlyEntityType entityType);
    [NullableContextAttribute("1")]
public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IColumnBase {
    public string Name { get; }
    public string StoreType { get; }
    public Type ProviderClrType { get; }
    public RelationalTypeMapping StoreTypeMapping { get; }
    public bool IsNullable { get; }
    public ITableBase Table { get; }
    public IReadOnlyList`1<IColumnMappingBase> PropertyMappings { get; }
    public ValueComparer ProviderValueComparer { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_StoreType();
    public abstract virtual Type get_ProviderClrType();
    public abstract virtual RelationalTypeMapping get_StoreTypeMapping();
    public abstract virtual bool get_IsNullable();
    public abstract virtual ITableBase get_Table();
    public abstract virtual IReadOnlyList`1<IColumnMappingBase> get_PropertyMappings();
    public virtual ValueComparer get_ProviderValueComparer();
    public virtual IColumnMappingBase FindColumnMapping(IReadOnlyEntityType entityType);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IColumnMapping {
    public IColumn Column { get; }
    public ITableMapping TableMapping { get; }
    public abstract virtual IColumn get_Column();
    public abstract virtual ITableMapping get_TableMapping();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IColumnMappingBase {
    public IProperty Property { get; }
    public IColumnBase Column { get; }
    public RelationalTypeMapping TypeMapping { get; }
    public ITableMappingBase TableMapping { get; }
    public abstract virtual IProperty get_Property();
    public abstract virtual IColumnBase get_Column();
    public abstract virtual RelationalTypeMapping get_TypeMapping();
    public abstract virtual ITableMappingBase get_TableMapping();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint {
    public IConventionCheckConstraintBuilder Builder { get; }
    public IConventionEntityType EntityType { get; }
    public abstract virtual IConventionCheckConstraintBuilder get_Builder();
    public abstract virtual IConventionEntityType get_EntityType();
    public abstract virtual ConfigurationSource GetConfigurationSource();
    [NullableContextAttribute("2")]
public abstract virtual string SetName(string name, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetNameConfigurationSource();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction {
    public IConventionModel Model { get; }
    public IConventionDbFunctionBuilder Builder { get; }
    public IReadOnlyList`1<IConventionDbFunctionParameter> Parameters { get; }
    public abstract virtual IConventionModel get_Model();
    public abstract virtual IConventionDbFunctionBuilder get_Builder();
    public abstract virtual ConfigurationSource GetConfigurationSource();
    [NullableContextAttribute("2")]
public abstract virtual string SetName(string name, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetNameConfigurationSource();
    [NullableContextAttribute("2")]
public abstract virtual string SetSchema(string schema, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetSchemaConfigurationSource();
    public abstract virtual bool SetIsBuiltIn(bool builtIn, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetIsBuiltInConfigurationSource();
    public abstract virtual bool SetIsNullable(bool nullable, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetIsNullableConfigurationSource();
    [NullableContextAttribute("2")]
public abstract virtual string SetStoreType(string storeType, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetStoreTypeConfigurationSource();
    [NullableContextAttribute("2")]
public abstract virtual RelationalTypeMapping SetTypeMapping(RelationalTypeMapping typeMapping, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetTypeMappingConfigurationSource();
    public abstract virtual Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> SetTranslation(Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> translation, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetTranslationConfigurationSource();
    public abstract virtual IReadOnlyList`1<IConventionDbFunctionParameter> get_Parameters();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameter {
    public IConventionDbFunction Function { get; }
    public IConventionDbFunctionParameterBuilder Builder { get; }
    public abstract virtual IConventionDbFunction get_Function();
    public abstract virtual IConventionDbFunctionParameterBuilder get_Builder();
    public abstract virtual ConfigurationSource GetConfigurationSource();
    [NullableContextAttribute("2")]
public abstract virtual string SetStoreType(string storeType, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetStoreTypeConfigurationSource();
    [NullableContextAttribute("2")]
public abstract virtual RelationalTypeMapping SetTypeMapping(RelationalTypeMapping typeMapping, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetTypeMappingConfigurationSource();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionEntityTypeMappingFragment {
    public IConventionEntityType EntityType { get; }
    public IConventionEntityTypeMappingFragmentBuilder Builder { get; }
    public abstract virtual IConventionEntityType get_EntityType();
    public abstract virtual IConventionEntityTypeMappingFragmentBuilder get_Builder();
    public abstract virtual ConfigurationSource GetConfigurationSource();
    public abstract virtual Nullable`1<bool> SetIsTableExcludedFromMigrations(Nullable`1<bool> excluded, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetIsTableExcludedFromMigrationsConfigurationSource();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionRelationalPropertyOverrides {
    public IConventionProperty Property { get; }
    public IConventionRelationalPropertyOverridesBuilder Builder { get; }
    public abstract virtual IConventionProperty get_Property();
    public abstract virtual IConventionRelationalPropertyOverridesBuilder get_Builder();
    public abstract virtual ConfigurationSource GetConfigurationSource();
    [NullableContextAttribute("2")]
public abstract virtual string SetColumnName(string name, bool fromDataAnnotation);
    public abstract virtual bool RemoveColumnNameOverride(bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetColumnNameConfigurationSource();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionSequence {
    public IConventionModel Model { get; }
    public IConventionSequenceBuilder Builder { get; }
    public abstract virtual IConventionModel get_Model();
    public abstract virtual IConventionSequenceBuilder get_Builder();
    public abstract virtual ConfigurationSource GetConfigurationSource();
    public abstract virtual Nullable`1<long> SetStartValue(Nullable`1<long> startValue, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetStartValueConfigurationSource();
    public abstract virtual Nullable`1<int> SetIncrementBy(Nullable`1<int> incrementBy, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetIncrementByConfigurationSource();
    public abstract virtual Nullable`1<long> SetMinValue(Nullable`1<long> minValue, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetMinValueConfigurationSource();
    public abstract virtual Nullable`1<long> SetMaxValue(Nullable`1<long> maxValue, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetMaxValueConfigurationSource();
    [NullableContextAttribute("2")]
public abstract virtual Type SetType(Type type, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetTypeConfigurationSource();
    public abstract virtual Nullable`1<bool> SetIsCyclic(Nullable`1<bool> cyclic, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetIsCyclicConfigurationSource();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedure {
    public IConventionEntityType EntityType { get; }
    public IConventionStoredProcedureBuilder Builder { get; }
    public IReadOnlyList`1<IConventionStoredProcedureParameter> Parameters { get; }
    public IReadOnlyList`1<IConventionStoredProcedureResultColumn> ResultColumns { get; }
    public abstract virtual IConventionEntityType get_EntityType();
    public abstract virtual IConventionStoredProcedureBuilder get_Builder();
    public abstract virtual ConfigurationSource GetConfigurationSource();
    [NullableContextAttribute("2")]
public abstract virtual string SetName(string name, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetNameConfigurationSource();
    [NullableContextAttribute("2")]
public abstract virtual string SetSchema(string schema, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetSchemaConfigurationSource();
    public abstract virtual IReadOnlyList`1<IConventionStoredProcedureParameter> get_Parameters();
    public abstract virtual IConventionStoredProcedureParameter FindParameter(string propertyName);
    public abstract virtual IConventionStoredProcedureParameter AddParameter(string propertyName, bool fromDataAnnotation);
    public abstract virtual IConventionStoredProcedureParameter FindOriginalValueParameter(string propertyName);
    public abstract virtual IConventionStoredProcedureParameter AddOriginalValueParameter(string propertyName, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual IConventionStoredProcedureParameter FindRowsAffectedParameter();
    [NullableContextAttribute("2")]
public abstract virtual IConventionStoredProcedureParameter AddRowsAffectedParameter(bool fromDataAnnotation);
    public abstract virtual IReadOnlyList`1<IConventionStoredProcedureResultColumn> get_ResultColumns();
    public abstract virtual IConventionStoredProcedureResultColumn FindResultColumn(string propertyName);
    public abstract virtual IConventionStoredProcedureResultColumn AddResultColumn(string propertyName, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual IConventionStoredProcedureResultColumn FindRowsAffectedResultColumn();
    [NullableContextAttribute("2")]
public abstract virtual IConventionStoredProcedureResultColumn AddRowsAffectedResultColumn(bool fromDataAnnotation);
    public abstract virtual bool SetIsRowsAffectedReturned(bool rowsAffectedReturned, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedureParameter {
    public IConventionStoredProcedure StoredProcedure { get; }
    public IConventionStoredProcedureParameterBuilder Builder { get; }
    public abstract virtual IConventionStoredProcedure get_StoredProcedure();
    public abstract virtual IConventionStoredProcedureParameterBuilder get_Builder();
    public abstract virtual string SetName(string name, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetNameConfigurationSource();
    public abstract virtual ParameterDirection SetDirection(ParameterDirection direction, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetDirectionConfigurationSource();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedureResultColumn {
    public IConventionStoredProcedure StoredProcedure { get; }
    public IConventionStoredProcedureResultColumnBuilder Builder { get; }
    public abstract virtual IConventionStoredProcedure get_StoredProcedure();
    public abstract virtual IConventionStoredProcedureResultColumnBuilder get_Builder();
    public abstract virtual string SetName(string name, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetNameConfigurationSource();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IDbFunction {
    public IModel Model { get; }
    public IReadOnlyList`1<IDbFunctionParameter> Parameters { get; }
    public IStoreFunction StoreFunction { get; }
    public abstract virtual IModel get_Model();
    public abstract virtual IReadOnlyList`1<IDbFunctionParameter> get_Parameters();
    public abstract virtual IStoreFunction get_StoreFunction();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter {
    public string StoreType { get; }
    public IDbFunction Function { get; }
    public IStoreFunctionParameter StoreFunctionParameter { get; }
    public abstract virtual string get_StoreType();
    public abstract virtual IDbFunction get_Function();
    public abstract virtual IStoreFunctionParameter get_StoreFunctionParameter();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment {
    [NullableAttribute("1")]
public IEntityType EntityType { get; }
    [NullableContextAttribute("1")]
public abstract virtual IEntityType get_EntityType();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint {
    public string Name { get; }
    public IEnumerable`1<IForeignKey> MappedForeignKeys { get; }
    public ITable Table { get; }
    public ITable PrincipalTable { get; }
    public IReadOnlyList`1<IColumn> Columns { get; }
    public IReadOnlyList`1<IColumn> PrincipalColumns { get; }
    public IUniqueConstraint PrincipalUniqueConstraint { get; }
    public ReferentialAction OnDeleteAction { get; }
    public abstract virtual string get_Name();
    public abstract virtual IEnumerable`1<IForeignKey> get_MappedForeignKeys();
    public abstract virtual ITable get_Table();
    public abstract virtual ITable get_PrincipalTable();
    public abstract virtual IReadOnlyList`1<IColumn> get_Columns();
    public virtual IReadOnlyList`1<IColumn> get_PrincipalColumns();
    public abstract virtual IUniqueConstraint get_PrincipalUniqueConstraint();
    public abstract virtual ReferentialAction get_OnDeleteAction();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IFunctionColumn {
    public IStoreFunction Function { get; }
    public IReadOnlyList`1<IFunctionColumnMapping> PropertyMappings { get; }
    public abstract virtual IStoreFunction get_Function();
    public abstract virtual IReadOnlyList`1<IFunctionColumnMapping> get_PropertyMappings();
    public virtual IFunctionColumnMapping FindColumnMapping(IReadOnlyEntityType entityType);
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IFunctionColumnMapping {
    public IFunctionColumn Column { get; }
    public IFunctionMapping FunctionMapping { get; }
    public abstract virtual IFunctionColumn get_Column();
    public abstract virtual IFunctionMapping get_FunctionMapping();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IFunctionMapping {
    public bool IsDefaultFunctionMapping { get; }
    public IStoreFunction StoreFunction { get; }
    public IDbFunction DbFunction { get; }
    public IEnumerable`1<IFunctionColumnMapping> ColumnMappings { get; }
    public abstract virtual bool get_IsDefaultFunctionMapping();
    public abstract virtual IStoreFunction get_StoreFunction();
    public abstract virtual IDbFunction get_DbFunction();
    public abstract virtual IEnumerable`1<IFunctionColumnMapping> get_ColumnMappings();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint {
    [NullableAttribute("1")]
public IMutableEntityType EntityType { get; }
    [NullableAttribute("2")]
public string Name { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual IMutableEntityType get_EntityType();
    [NullableContextAttribute("2")]
public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual void set_Name(string value);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction {
    [NullableAttribute("1")]
public string Name { get; public set; }
    public string Schema { get; public set; }
    public bool IsBuiltIn { get; public set; }
    public bool IsNullable { get; public set; }
    public string StoreType { get; public set; }
    public RelationalTypeMapping TypeMapping { get; public set; }
    [NullableAttribute("1")]
public IMutableModel Model { get; }
    [NullableAttribute("1")]
public IReadOnlyList`1<IMutableDbFunctionParameter> Parameters { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> Translation { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual string get_Name();
    [NullableContextAttribute("1")]
public abstract virtual void set_Name(string value);
    public abstract virtual string get_Schema();
    public abstract virtual void set_Schema(string value);
    public abstract virtual bool get_IsBuiltIn();
    public abstract virtual void set_IsBuiltIn(bool value);
    public abstract virtual bool get_IsNullable();
    public abstract virtual void set_IsNullable(bool value);
    public abstract virtual string get_StoreType();
    public abstract virtual void set_StoreType(string value);
    public abstract virtual RelationalTypeMapping get_TypeMapping();
    public abstract virtual void set_TypeMapping(RelationalTypeMapping value);
    [NullableContextAttribute("1")]
public abstract virtual IMutableModel get_Model();
    [NullableContextAttribute("1")]
public abstract virtual IReadOnlyList`1<IMutableDbFunctionParameter> get_Parameters();
    public abstract virtual Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> get_Translation();
    public abstract virtual void set_Translation(Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> value);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunctionParameter {
    [NullableAttribute("1")]
public IMutableDbFunction Function { get; }
    public string StoreType { get; public set; }
    public RelationalTypeMapping TypeMapping { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual IMutableDbFunction get_Function();
    public abstract virtual string get_StoreType();
    public abstract virtual void set_StoreType(string value);
    public abstract virtual RelationalTypeMapping get_TypeMapping();
    public abstract virtual void set_TypeMapping(RelationalTypeMapping value);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableEntityTypeMappingFragment {
    [NullableAttribute("1")]
public IMutableEntityType EntityType { get; }
    public Nullable`1<bool> IsTableExcludedFromMigrations { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual IMutableEntityType get_EntityType();
    public abstract virtual Nullable`1<bool> get_IsTableExcludedFromMigrations();
    public abstract virtual void set_IsTableExcludedFromMigrations(Nullable`1<bool> value);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableRelationalPropertyOverrides {
    [NullableAttribute("1")]
public IMutableProperty Property { get; }
    [NullableAttribute("2")]
public string ColumnName { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual IMutableProperty get_Property();
    [NullableContextAttribute("2")]
public abstract virtual string get_ColumnName();
    [NullableContextAttribute("2")]
public abstract virtual void set_ColumnName(string value);
    public abstract virtual void RemoveColumnNameOverride();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableSequence {
    public IMutableModel Model { get; }
    public long StartValue { get; public set; }
    public int IncrementBy { get; public set; }
    public Nullable`1<long> MinValue { get; public set; }
    public Nullable`1<long> MaxValue { get; public set; }
    public Type Type { get; public set; }
    public bool IsCyclic { get; public set; }
    public abstract virtual IMutableModel get_Model();
    public abstract virtual long get_StartValue();
    public abstract virtual void set_StartValue(long value);
    public abstract virtual int get_IncrementBy();
    public abstract virtual void set_IncrementBy(int value);
    public abstract virtual Nullable`1<long> get_MinValue();
    public abstract virtual void set_MinValue(Nullable`1<long> value);
    public abstract virtual Nullable`1<long> get_MaxValue();
    public abstract virtual void set_MaxValue(Nullable`1<long> value);
    public abstract virtual Type get_Type();
    public abstract virtual void set_Type(Type value);
    public abstract virtual bool get_IsCyclic();
    public abstract virtual void set_IsCyclic(bool value);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableStoredProcedure {
    [NullableAttribute("2")]
public string Name { get; public set; }
    [NullableAttribute("2")]
public string Schema { get; public set; }
    public IMutableEntityType EntityType { get; }
    public bool IsRowsAffectedReturned { get; public set; }
    public IReadOnlyList`1<IMutableStoredProcedureParameter> Parameters { get; }
    public IReadOnlyList`1<IMutableStoredProcedureResultColumn> ResultColumns { get; }
    [NullableContextAttribute("2")]
public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual void set_Name(string value);
    [NullableContextAttribute("2")]
public abstract virtual string get_Schema();
    [NullableContextAttribute("2")]
public abstract virtual void set_Schema(string value);
    public abstract virtual IMutableEntityType get_EntityType();
    public abstract virtual bool get_IsRowsAffectedReturned();
    public abstract virtual void set_IsRowsAffectedReturned(bool value);
    public abstract virtual IReadOnlyList`1<IMutableStoredProcedureParameter> get_Parameters();
    public abstract virtual IMutableStoredProcedureParameter FindParameter(string propertyName);
    public abstract virtual IMutableStoredProcedureParameter AddParameter(string propertyName);
    public abstract virtual IMutableStoredProcedureParameter FindOriginalValueParameter(string propertyName);
    public abstract virtual IMutableStoredProcedureParameter AddOriginalValueParameter(string propertyName);
    [NullableContextAttribute("2")]
public abstract virtual IMutableStoredProcedureParameter FindRowsAffectedParameter();
    public abstract virtual IMutableStoredProcedureParameter AddRowsAffectedParameter();
    public abstract virtual IReadOnlyList`1<IMutableStoredProcedureResultColumn> get_ResultColumns();
    public abstract virtual IMutableStoredProcedureResultColumn FindResultColumn(string propertyName);
    public abstract virtual IMutableStoredProcedureResultColumn AddResultColumn(string propertyName);
    [NullableContextAttribute("2")]
public abstract virtual IMutableStoredProcedureResultColumn FindRowsAffectedResultColumn();
    public abstract virtual IMutableStoredProcedureResultColumn AddRowsAffectedResultColumn();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableStoredProcedureParameter {
    public IMutableStoredProcedure StoredProcedure { get; }
    public string Name { get; public set; }
    public ParameterDirection Direction { get; public set; }
    public abstract virtual IMutableStoredProcedure get_StoredProcedure();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual ParameterDirection get_Direction();
    public abstract virtual void set_Direction(ParameterDirection value);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableStoredProcedureResultColumn {
    public IMutableStoredProcedure StoredProcedure { get; }
    public string Name { get; public set; }
    public abstract virtual IMutableStoredProcedure get_StoredProcedure();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.CheckConstraint : ConventionAnnotatable {
    private string _name;
    private InternalCheckConstraintBuilder _builder;
    private ConfigurationSource _configurationSource;
    private Nullable`1<ConfigurationSource> _nameConfigurationSource;
    [CompilerGeneratedAttribute]
private IReadOnlyEntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModelName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    public InternalCheckConstraintBuilder Builder { get; }
    public bool IsInModel { get; }
    public IReadOnlyEntityType EntityType { get; }
    public bool IsReadOnly { get; }
    public string ModelName { get; }
    [NullableAttribute("2")]
public string Name { get; public set; }
    public string Sql { get; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint.EntityType { get; }
    private IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint.EntityType { get; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint.EntityType { get; }
    private IConventionCheckConstraintBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint.Builder { get; }
    public CheckConstraint(IMutableEntityType entityType, string name, string sql, ConfigurationSource configurationSource);
    public static IEnumerable`1<IReadOnlyCheckConstraint> GetDeclaredCheckConstraints(IReadOnlyEntityType entityType);
    public static IEnumerable`1<IReadOnlyCheckConstraint> GetCheckConstraints(IReadOnlyEntityType entityType);
    public static IReadOnlyCheckConstraint FindCheckConstraint(IReadOnlyEntityType entityType, string name);
    public static IReadOnlyCheckConstraint FindDeclaredCheckConstraint(IReadOnlyEntityType entityType, string name);
    public static IMutableCheckConstraint RemoveCheckConstraint(IMutableEntityType entityType, string name);
    public static void Attach(IConventionEntityType entityType, IConventionCheckConstraint detachedCheckConstraint);
    public static void MergeInto(IConventionCheckConstraint detachedCheckConstraint, IConventionCheckConstraint existingCheckConstraint);
    public static bool AreCompatible(IReadOnlyCheckConstraint checkConstraint, IReadOnlyCheckConstraint duplicateCheckConstraint, StoreObjectIdentifier& storeObject, bool shouldThrow);
    [DebuggerStepThroughAttribute]
public virtual InternalCheckConstraintBuilder get_Builder();
    public virtual bool get_IsInModel();
    public virtual void SetRemovedFromModel();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyEntityType get_EntityType();
    public virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public virtual string get_ModelName();
    [NullableContextAttribute("2")]
public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual void set_Name(string value);
    [NullableContextAttribute("2")]
public virtual string GetName(StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject);
    [NullableContextAttribute("2")]
public virtual string SetName(string name, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetNameConfigurationSource();
    [CompilerGeneratedAttribute]
public virtual string get_Sql();
    public virtual ConfigurationSource GetConfigurationSource();
    public virtual void UpdateConfigurationSource(ConfigurationSource configurationSource);
    private static SortedDictionary`2<string, ICheckConstraint> GetConstraintsDictionary(IReadOnlyEntityType entityType);
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint.get_EntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint.get_EntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint.get_EntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionCheckConstraintBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint.SetName(string name, bool fromDataAnnotation);
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__40_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__40_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.Column : ColumnBase`1<ColumnMapping> {
    private ColumnAccessors _accessors;
    public Table Table { get; }
    public ColumnAccessors Accessors { get; }
    private ITable Microsoft.EntityFrameworkCore.Metadata.IColumn.Table { get; }
    private IReadOnlyList`1<IColumnMapping> Microsoft.EntityFrameworkCore.Metadata.IColumn.PropertyMappings { get; }
    public Column(string name, string type, Table table);
    public virtual Table get_Table();
    public virtual ColumnAccessors get_Accessors();
    public virtual string ToString();
    [DebuggerStepThroughAttribute]
private sealed virtual override ITable Microsoft.EntityFrameworkCore.Metadata.IColumn.get_Table();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IColumnMapping> Microsoft.EntityFrameworkCore.Metadata.IColumn.get_PropertyMappings();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnBase`1 : Annotatable {
    private static bool QuirkEnabled29985;
    private Type _providerClrType;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private TableBase <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StoreType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TColumnMappingBase> <PropertyMappings>k__BackingField;
    public string Name { get; }
    public TableBase Table { get; }
    public bool IsReadOnly { get; }
    public string StoreType { get; }
    public bool IsNullable { get; public set; }
    public Type ProviderClrType { get; }
    public RelationalTypeMapping StoreTypeMapping { get; }
    protected List`1<TColumnMappingBase> PropertyMappings { get; }
    private IReadOnlyList`1<IColumnMappingBase> Microsoft.EntityFrameworkCore.Metadata.IColumnBase.PropertyMappings { get; }
    private ITableBase Microsoft.EntityFrameworkCore.Metadata.IColumnBase.Table { get; }
    public ColumnBase`1(string name, string type, TableBase table);
    private static ColumnBase`1();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual TableBase get_Table();
    public virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public virtual string get_StoreType();
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual void set_IsNullable(bool value);
    public virtual Type get_ProviderClrType();
    public virtual RelationalTypeMapping get_StoreTypeMapping();
    [CompilerGeneratedAttribute]
protected virtual List`1<TColumnMappingBase> get_PropertyMappings();
    public virtual bool AddPropertyMapping(TColumnMappingBase columnMapping);
    public static string Format(IEnumerable`1<IColumnBase> columns);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IColumnMappingBase> Microsoft.EntityFrameworkCore.Metadata.IColumnBase.get_PropertyMappings();
    [DebuggerStepThroughAttribute]
private sealed virtual override ITableBase Microsoft.EntityFrameworkCore.Metadata.IColumnBase.get_Table();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnListComparer : object {
    public static ColumnListComparer Instance;
    private static ColumnListComparer();
    public sealed virtual int Compare(IReadOnlyList`1<IColumn> x, IReadOnlyList`1<IColumn> y);
    public sealed virtual bool Equals(IReadOnlyList`1<IColumn> x, IReadOnlyList`1<IColumn> y);
    public sealed virtual int GetHashCode(IReadOnlyList`1<IColumn> obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnMapping : ColumnMappingBase {
    public ITableMapping TableMapping { get; }
    private IColumn Microsoft.EntityFrameworkCore.Metadata.IColumnMapping.Column { get; }
    public ColumnMapping(IProperty property, Column column, TableMapping tableMapping);
    public virtual ITableMapping get_TableMapping();
    protected virtual RelationalTypeMapping GetTypeMapping();
    public virtual string ToString();
    [DebuggerStepThroughAttribute]
private sealed virtual override IColumn Microsoft.EntityFrameworkCore.Metadata.IColumnMapping.get_Column();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnMappingBase : Annotatable {
    private RelationalTypeMapping _typeMapping;
    [CompilerGeneratedAttribute]
private IProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private IColumnBase <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private ITableMappingBase <TableMapping>k__BackingField;
    public IProperty Property { get; }
    public IColumnBase Column { get; }
    public RelationalTypeMapping TypeMapping { get; }
    public ITableMappingBase TableMapping { get; }
    public bool IsReadOnly { get; }
    private ITableMappingBase Microsoft.EntityFrameworkCore.Metadata.IColumnMappingBase.TableMapping { get; }
    public ColumnMappingBase(IProperty property, IColumnBase column, ITableMappingBase tableMapping);
    [CompilerGeneratedAttribute]
public virtual IProperty get_Property();
    [CompilerGeneratedAttribute]
public virtual IColumnBase get_Column();
    public virtual RelationalTypeMapping get_TypeMapping();
    protected virtual RelationalTypeMapping GetTypeMapping();
    [CompilerGeneratedAttribute]
public virtual ITableMappingBase get_TableMapping();
    public virtual bool get_IsReadOnly();
    [DebuggerStepThroughAttribute]
private sealed virtual override ITableMappingBase Microsoft.EntityFrameworkCore.Metadata.IColumnMappingBase.get_TableMapping();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnMappingBaseComparer : object {
    public static ColumnMappingBaseComparer Instance;
    private static ColumnMappingBaseComparer();
    [NullableContextAttribute("2")]
public sealed virtual int Compare(IColumnMappingBase x, IColumnMappingBase y);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IColumnMappingBase x, IColumnMappingBase y);
    public sealed virtual int GetHashCode(IColumnMappingBase obj);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnNameComparer : object {
    private Table _table;
    [NullableContextAttribute("1")]
public ColumnNameComparer(Table table);
    [NullableContextAttribute("2")]
public sealed virtual int Compare(string x, string y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction : ConventionAnnotatable {
    private List`1<DbFunctionParameter> _parameters;
    private string _schema;
    private string _name;
    private bool _builtIn;
    private bool _nullable;
    private string _storeType;
    private RelationalTypeMapping _typeMapping;
    private Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> _translation;
    private InternalDbFunctionBuilder _builder;
    private IStoreFunction _storeFunction;
    private ConfigurationSource _configurationSource;
    private Nullable`1<ConfigurationSource> _schemaConfigurationSource;
    private Nullable`1<ConfigurationSource> _nameConfigurationSource;
    private Nullable`1<ConfigurationSource> _builtInConfigurationSource;
    private Nullable`1<ConfigurationSource> _nullableConfigurationSource;
    private Nullable`1<ConfigurationSource> _storeTypeConfigurationSource;
    private Nullable`1<ConfigurationSource> _typeMappingConfigurationSource;
    private Nullable`1<ConfigurationSource> _translationConfigurationSource;
    [CompilerGeneratedAttribute]
private IMutableModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModelName>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsScalar>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAggregate>k__BackingField;
    public IMutableModel Model { get; }
    public InternalDbFunctionBuilder Builder { get; }
    public bool IsInModel { get; }
    public bool IsReadOnly { get; }
    public string ModelName { get; }
    [NullableAttribute("2")]
public MethodInfo MethodInfo { get; }
    public Type ReturnType { get; }
    public bool IsScalar { get; }
    public bool IsAggregate { get; }
    [NullableAttribute("2")]
public string Schema { get; public set; }
    public string Name { get; public set; }
    public bool IsBuiltIn { get; public set; }
    public bool IsNullable { get; public set; }
    [NullableAttribute("2")]
public string StoreType { get; public set; }
    [NullableAttribute("2")]
public RelationalTypeMapping TypeMapping { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> Translation { get; public set; }
    public IReadOnlyList`1<DbFunctionParameter> Parameters { get; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IConventionDbFunctionBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.Builder { get; }
    private IReadOnlyModel Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.Model { get; }
    private IConventionModel Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.Model { get; }
    private IModel Microsoft.EntityFrameworkCore.Metadata.IDbFunction.Model { get; }
    private IReadOnlyList`1<IReadOnlyDbFunctionParameter> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.Parameters { get; }
    private IReadOnlyList`1<IConventionDbFunctionParameter> Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.Parameters { get; }
    private IReadOnlyList`1<IMutableDbFunctionParameter> Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction.Parameters { get; }
    private IReadOnlyList`1<IDbFunctionParameter> Microsoft.EntityFrameworkCore.Metadata.IDbFunction.Parameters { get; }
    private IStoreFunction Microsoft.EntityFrameworkCore.Metadata.IDbFunction.StoreFunction { get; }
    private IStoreFunction Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeDbFunction.StoreFunction { get; private set; }
    public DbFunction(MethodInfo methodInfo, IMutableModel model, ConfigurationSource configurationSource);
    public DbFunction(string name, Type returnType, IEnumerable`1<ValueTuple`2<string, Type>> parameters, IMutableModel model, ConfigurationSource configurationSource);
    public static string GetFunctionName(MethodInfo methodInfo);
    [CompilerGeneratedAttribute]
public virtual IMutableModel get_Model();
    [DebuggerStepThroughAttribute]
public virtual InternalDbFunctionBuilder get_Builder();
    public virtual bool get_IsInModel();
    public virtual void SetRemovedFromModel();
    public virtual bool get_IsReadOnly();
    public static IEnumerable`1<IDbFunction> GetDbFunctions(IReadOnlyModel model);
    public static IReadOnlyDbFunction FindDbFunction(IReadOnlyModel model, MethodInfo methodInfo);
    public static IReadOnlyDbFunction FindDbFunction(IReadOnlyModel model, string name);
    public static DbFunction AddDbFunction(IMutableModel model, MethodInfo methodInfo, ConfigurationSource configurationSource);
    public static DbFunction AddDbFunction(IMutableModel model, string name, Type returnType, ConfigurationSource configurationSource);
    private static SortedDictionary`2<string, IDbFunction> GetOrCreateFunctions(IMutableModel model);
    public static DbFunction RemoveDbFunction(IMutableModel model, MethodInfo methodInfo);
    public static DbFunction RemoveDbFunction(IMutableModel model, string name);
    [CompilerGeneratedAttribute]
public virtual string get_ModelName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
public virtual Type get_ReturnType();
    [CompilerGeneratedAttribute]
public virtual bool get_IsScalar();
    [CompilerGeneratedAttribute]
public virtual bool get_IsAggregate();
    [DebuggerStepThroughAttribute]
public virtual ConfigurationSource GetConfigurationSource();
    [DebuggerStepThroughAttribute]
public virtual void UpdateConfigurationSource(ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual string get_Schema();
    [NullableContextAttribute("2")]
public virtual void set_Schema(string value);
    [NullableContextAttribute("2")]
public virtual string SetSchema(string schema, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetSchemaConfigurationSource();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    [NullableContextAttribute("2")]
public virtual string SetName(string name, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetNameConfigurationSource();
    public virtual bool get_IsBuiltIn();
    public virtual void set_IsBuiltIn(bool value);
    public virtual bool SetIsBuiltIn(bool builtIn, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetIsBuiltInConfigurationSource();
    public virtual bool get_IsNullable();
    public virtual void set_IsNullable(bool value);
    public virtual bool SetIsNullable(bool nullable, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetIsNullableConfigurationSource();
    [NullableContextAttribute("2")]
public virtual string get_StoreType();
    [NullableContextAttribute("2")]
public virtual void set_StoreType(string value);
    [NullableContextAttribute("2")]
public virtual string SetStoreType(string storeType, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetStoreTypeConfigurationSource();
    [NullableContextAttribute("2")]
public virtual RelationalTypeMapping get_TypeMapping();
    [NullableContextAttribute("2")]
public virtual void set_TypeMapping(RelationalTypeMapping value);
    [NullableContextAttribute("2")]
public virtual RelationalTypeMapping SetTypeMapping(RelationalTypeMapping typeMapping, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetTypeMappingConfigurationSource();
    public virtual Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> get_Translation();
    public virtual void set_Translation(Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> value);
    public virtual Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> SetTranslation(Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> translation, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetTranslationConfigurationSource();
    [DebuggerStepThroughAttribute]
public virtual IReadOnlyList`1<DbFunctionParameter> get_Parameters();
    public virtual DbFunctionParameter FindParameter(string name);
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDbFunctionBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyModel Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionModel Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IModel Microsoft.EntityFrameworkCore.Metadata.IDbFunction.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IReadOnlyDbFunctionParameter> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.get_Parameters();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IConventionDbFunctionParameter> Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.get_Parameters();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IMutableDbFunctionParameter> Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction.get_Parameters();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IDbFunctionParameter> Microsoft.EntityFrameworkCore.Metadata.IDbFunction.get_Parameters();
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.SetName(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.SetSchema(string schema, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.SetIsBuiltIn(bool builtIn, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.SetIsNullable(bool nullable, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.SetStoreType(string storeType, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override RelationalTypeMapping Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.SetTypeMapping(RelationalTypeMapping returnTypeMapping, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.SetTranslation(Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> translation, bool fromDataAnnotation);
    private sealed virtual override IStoreFunction Microsoft.EntityFrameworkCore.Metadata.IDbFunction.get_StoreFunction();
    private sealed virtual override IStoreFunction Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeDbFunction.get_StoreFunction();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeDbFunction.set_StoreFunction(IStoreFunction value);
    [CompilerGeneratedAttribute]
private DbFunctionParameter <.ctor>b__19_0(ValueTuple`2<string, Type> p);
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__96_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__96_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter : ConventionAnnotatable {
    private string _storeType;
    private RelationalTypeMapping _typeMapping;
    private bool _propagatesNullability;
    private Nullable`1<ConfigurationSource> _storeTypeConfigurationSource;
    private Nullable`1<ConfigurationSource> _typeMappingConfigurationSource;
    private Nullable`1<ConfigurationSource> _propagatesNullabilityConfigurationSource;
    private InternalDbFunctionParameterBuilder _builder;
    [CompilerGeneratedAttribute]
private DbFunction <Function>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private IStoreFunctionParameter <StoreFunctionParameter>k__BackingField;
    public InternalDbFunctionParameterBuilder Builder { get; }
    public bool IsInModel { get; }
    public bool IsReadOnly { get; }
    public DbFunction Function { get; }
    public string Name { get; }
    public Type ClrType { get; }
    public IStoreFunctionParameter StoreFunctionParameter { get; public set; }
    [NullableAttribute("2")]
public string StoreType { get; public set; }
    [NullableAttribute("2")]
public RelationalTypeMapping TypeMapping { get; public set; }
    public bool PropagatesNullability { get; public set; }
    private IConventionDbFunctionParameterBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameter.Builder { get; }
    private IConventionDbFunction Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameter.Function { get; }
    private IReadOnlyDbFunction Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunctionParameter.Function { get; }
    private IMutableDbFunction Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunctionParameter.Function { get; }
    private IDbFunction Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.Function { get; }
    private string Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.StoreType { get; }
    public DbFunctionParameter(DbFunction function, string name, Type clrType);
    [DebuggerStepThroughAttribute]
public virtual InternalDbFunctionParameterBuilder get_Builder();
    public virtual bool get_IsInModel();
    public virtual void SetRemovedFromModel();
    public virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public virtual DbFunction get_Function();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual Type get_ClrType();
    [DebuggerStepThroughAttribute]
public virtual ConfigurationSource GetConfigurationSource();
    [CompilerGeneratedAttribute]
public virtual IStoreFunctionParameter get_StoreFunctionParameter();
    [CompilerGeneratedAttribute]
public virtual void set_StoreFunctionParameter(IStoreFunctionParameter value);
    [NullableContextAttribute("2")]
public virtual string get_StoreType();
    [NullableContextAttribute("2")]
public virtual void set_StoreType(string value);
    [NullableContextAttribute("2")]
public virtual string SetStoreType(string storeType, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetStoreTypeConfigurationSource();
    [NullableContextAttribute("2")]
public virtual RelationalTypeMapping get_TypeMapping();
    [NullableContextAttribute("2")]
public virtual void set_TypeMapping(RelationalTypeMapping value);
    [NullableContextAttribute("2")]
public virtual RelationalTypeMapping SetTypeMapping(RelationalTypeMapping typeMapping, ConfigurationSource configurationSource);
    public virtual bool get_PropagatesNullability();
    public virtual void set_PropagatesNullability(bool value);
    public virtual bool SetPropagatesNullability(bool propagatesNullability, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetPropagatesNullabilityConfigurationSource();
    public virtual Nullable`1<ConfigurationSource> GetTypeMappingConfigurationSource();
    public virtual string ToString();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDbFunctionParameterBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameter.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDbFunction Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameter.get_Function();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyDbFunction Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunctionParameter.get_Function();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableDbFunction Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunctionParameter.get_Function();
    [DebuggerStepThroughAttribute]
private sealed virtual override IDbFunction Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.get_Function();
    [DebuggerStepThroughAttribute]
private sealed virtual override RelationalTypeMapping Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameter.SetTypeMapping(RelationalTypeMapping typeMapping, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.get_StoreType();
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameter.SetStoreType(string storeType, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeMappingFragment : ConventionAnnotatable {
    private Nullable`1<bool> _isTableExcludedFromMigrations;
    private InternalEntityTypeMappingFragmentBuilder _builder;
    private ConfigurationSource _configurationSource;
    private Nullable`1<ConfigurationSource> _isTableExcludedFromMigrationsConfigurationSource;
    [CompilerGeneratedAttribute]
private IReadOnlyEntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private StoreObjectIdentifier <StoreObject>k__BackingField;
    public InternalEntityTypeMappingFragmentBuilder Builder { get; }
    public bool IsInModel { get; }
    public IReadOnlyEntityType EntityType { get; }
    public StoreObjectIdentifier StoreObject { get; }
    public bool IsReadOnly { get; }
    public Nullable`1<bool> IsTableExcludedFromMigrations { get; public set; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment.EntityType { get; }
    private IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableEntityTypeMappingFragment.EntityType { get; }
    private IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionEntityTypeMappingFragment.EntityType { get; }
    private Nullable`1<bool> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityTypeMappingFragment.IsTableExcludedFromMigrations { get; }
    private IConventionEntityTypeMappingFragmentBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionEntityTypeMappingFragment.Builder { get; }
    public EntityTypeMappingFragment(IReadOnlyEntityType entityType, StoreObjectIdentifier& storeObject, ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
public virtual InternalEntityTypeMappingFragmentBuilder get_Builder();
    public virtual bool get_IsInModel();
    public virtual void SetRemovedFromModel();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyEntityType get_EntityType();
    [CompilerGeneratedAttribute]
public virtual StoreObjectIdentifier get_StoreObject();
    public virtual bool get_IsReadOnly();
    public virtual ConfigurationSource GetConfigurationSource();
    public virtual void UpdateConfigurationSource(ConfigurationSource configurationSource);
    public static void Attach(IConventionEntityType entityType, IConventionEntityTypeMappingFragment detachedFragment);
    public static EntityTypeMappingFragment MergeInto(IConventionEntityTypeMappingFragment detachedFragment, IConventionEntityTypeMappingFragment existingFragment);
    public virtual Nullable`1<bool> get_IsTableExcludedFromMigrations();
    public virtual void set_IsTableExcludedFromMigrations(Nullable`1<bool> value);
    public virtual Nullable`1<bool> SetIsTableExcludedFromMigrations(Nullable`1<bool> excluded, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetIsTableExcludedFromMigrationsConfigurationSource();
    public static IReadOnlyEntityTypeMappingFragment Find(IReadOnlyEntityType entityType, StoreObjectIdentifier& storeObject);
    public static IEnumerable`1<IReadOnlyEntityTypeMappingFragment> Get(IReadOnlyEntityType entityType);
    public static EntityTypeMappingFragment GetOrCreate(IMutableEntityType entityType, StoreObjectIdentifier& storeObject, ConfigurationSource configurationSource);
    public static EntityTypeMappingFragment Remove(IMutableEntityType entityType, StoreObjectIdentifier& storeObject);
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment.get_EntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableEntityTypeMappingFragment.get_EntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionEntityTypeMappingFragment.get_EntityType();
    private sealed virtual override Nullable`1<bool> Microsoft.EntityFrameworkCore.Metadata.IConventionEntityTypeMappingFragment.SetIsTableExcludedFromMigrations(Nullable`1<bool> excluded, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<bool> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityTypeMappingFragment.get_IsTableExcludedFromMigrations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeMappingFragmentBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionEntityTypeMappingFragment.get_Builder();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__33_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__33_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyConstraint : Annotatable {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedSet`1<IForeignKey> <MappedForeignKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private Table <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private Table <PrincipalTable>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Column> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private UniqueConstraint <PrincipalUniqueConstraint>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferentialAction <OnDeleteAction>k__BackingField;
    private IRowForeignKeyValueFactory _foreignKeyRowValueFactory;
    public string Name { get; }
    public SortedSet`1<IForeignKey> MappedForeignKeys { get; }
    public Table Table { get; }
    public Table PrincipalTable { get; }
    public IReadOnlyList`1<Column> Columns { get; }
    public IReadOnlyList`1<Column> PrincipalColumns { get; }
    public UniqueConstraint PrincipalUniqueConstraint { get; }
    public bool IsReadOnly { get; }
    public ReferentialAction OnDeleteAction { get; public set; }
    private IEnumerable`1<IForeignKey> Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint.MappedForeignKeys { get; }
    private ITable Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint.Table { get; }
    private ITable Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint.PrincipalTable { get; }
    private IReadOnlyList`1<IColumn> Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint.Columns { get; }
    private IReadOnlyList`1<IColumn> Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint.PrincipalColumns { get; }
    private IUniqueConstraint Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint.PrincipalUniqueConstraint { get; }
    public ForeignKeyConstraint(string name, Table table, Table principalTable, IReadOnlyList`1<Column> columns, UniqueConstraint principalUniqueConstraint, ReferentialAction onDeleteAction);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual SortedSet`1<IForeignKey> get_MappedForeignKeys();
    [CompilerGeneratedAttribute]
public virtual Table get_Table();
    [CompilerGeneratedAttribute]
public virtual Table get_PrincipalTable();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<Column> get_Columns();
    public virtual IReadOnlyList`1<Column> get_PrincipalColumns();
    [CompilerGeneratedAttribute]
public virtual UniqueConstraint get_PrincipalUniqueConstraint();
    public virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public virtual ReferentialAction get_OnDeleteAction();
    [CompilerGeneratedAttribute]
public virtual void set_OnDeleteAction(ReferentialAction value);
    public virtual IRowForeignKeyValueFactory GetRowForeignKeyValueFactory();
    public virtual string ToString();
    private sealed virtual override IEnumerable`1<IForeignKey> Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint.get_MappedForeignKeys();
    private sealed virtual override ITable Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint.get_Table();
    private sealed virtual override ITable Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint.get_PrincipalTable();
    private sealed virtual override IReadOnlyList`1<IColumn> Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint.get_Columns();
    private sealed virtual override IReadOnlyList`1<IColumn> Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint.get_PrincipalColumns();
    private sealed virtual override IUniqueConstraint Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint.get_PrincipalUniqueConstraint();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyConstraintComparer : object {
    private static bool QuirkEnabled29741;
    public static ForeignKeyConstraintComparer Instance;
    private static ForeignKeyConstraintComparer();
    [NullableContextAttribute("2")]
public sealed virtual int Compare(IForeignKeyConstraint x, IForeignKeyConstraint y);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IForeignKeyConstraint x, IForeignKeyConstraint y);
    public sealed virtual int GetHashCode(IForeignKeyConstraint obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.FunctionColumn : ColumnBase`1<FunctionColumnMapping> {
    public StoreFunction Function { get; }
    private IStoreFunction Microsoft.EntityFrameworkCore.Metadata.IFunctionColumn.Function { get; }
    private IReadOnlyList`1<IFunctionColumnMapping> Microsoft.EntityFrameworkCore.Metadata.IFunctionColumn.PropertyMappings { get; }
    public FunctionColumn(string name, string type, StoreFunction function);
    public virtual StoreFunction get_Function();
    public virtual string ToString();
    [DebuggerStepThroughAttribute]
private sealed virtual override IStoreFunction Microsoft.EntityFrameworkCore.Metadata.IFunctionColumn.get_Function();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IFunctionColumnMapping> Microsoft.EntityFrameworkCore.Metadata.IFunctionColumn.get_PropertyMappings();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.FunctionColumnMapping : ColumnMappingBase {
    public IFunctionMapping FunctionMapping { get; }
    private IFunctionColumn Microsoft.EntityFrameworkCore.Metadata.IFunctionColumnMapping.Column { get; }
    public FunctionColumnMapping(IProperty property, FunctionColumn column, FunctionMapping functionMapping);
    public virtual IFunctionMapping get_FunctionMapping();
    protected virtual RelationalTypeMapping GetTypeMapping();
    public virtual string ToString();
    [DebuggerStepThroughAttribute]
private sealed virtual override IFunctionColumn Microsoft.EntityFrameworkCore.Metadata.IFunctionColumnMapping.get_Column();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.FunctionMapping : TableMappingBase`1<FunctionColumnMapping> {
    [CompilerGeneratedAttribute]
private bool <IsDefaultFunctionMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbFunction <DbFunction>k__BackingField;
    public bool IsDefaultFunctionMapping { get; public set; }
    public IStoreFunction StoreFunction { get; }
    public IDbFunction DbFunction { get; }
    private IEnumerable`1<IFunctionColumnMapping> Microsoft.EntityFrameworkCore.Metadata.IFunctionMapping.ColumnMappings { get; }
    public FunctionMapping(IEntityType entityType, StoreFunction storeFunction, IDbFunction dbFunction, bool includesDerivedTypes);
    [CompilerGeneratedAttribute]
public virtual bool get_IsDefaultFunctionMapping();
    [CompilerGeneratedAttribute]
public virtual void set_IsDefaultFunctionMapping(bool value);
    public virtual IStoreFunction get_StoreFunction();
    [CompilerGeneratedAttribute]
public virtual IDbFunction get_DbFunction();
    public virtual string ToString();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IFunctionColumnMapping> Microsoft.EntityFrameworkCore.Metadata.IFunctionMapping.get_ColumnMappings();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalCheckConstraintBuilder : AnnotatableBuilder`2<CheckConstraint, IConventionModelBuilder> {
    private IConventionCheckConstraint Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionCheckConstraintBuilder.Metadata { get; }
    public InternalCheckConstraintBuilder(CheckConstraint checkConstraint, IConventionModelBuilder modelBuilder);
    [NullableContextAttribute("2")]
public virtual IConventionCheckConstraintBuilder HasName(string name, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual bool CanSetName(string name, ConfigurationSource configurationSource);
    public static IConventionCheckConstraint HasCheckConstraint(IConventionEntityType entityType, string name, string sql, ConfigurationSource configurationSource);
    public static bool CanHaveCheckConstraint(IConventionEntityType entityType, string name, string sql, ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionCheckConstraint Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionCheckConstraintBuilder.get_Metadata();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionCheckConstraintBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionCheckConstraintBuilder.HasName(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionCheckConstraintBuilder.CanSetName(string name, bool fromDataAnnotation);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalDbFunctionBuilder : AnnotatableBuilder`2<DbFunction, IConventionModelBuilder> {
    [NullableAttribute("1")]
private IConventionDbFunction Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.Metadata { get; }
    [NullableContextAttribute("1")]
public InternalDbFunctionBuilder(DbFunction function, IConventionModelBuilder modelBuilder);
    public virtual IConventionDbFunctionBuilder HasName(string name, ConfigurationSource configurationSource);
    public virtual bool CanSetName(string name, ConfigurationSource configurationSource);
    public virtual IConventionDbFunctionBuilder HasSchema(string schema, ConfigurationSource configurationSource);
    public virtual bool CanSetSchema(string schema, ConfigurationSource configurationSource);
    public virtual IConventionDbFunctionBuilder IsBuiltIn(bool builtIn, ConfigurationSource configurationSource);
    public virtual bool CanSetIsBuiltIn(bool builtIn, ConfigurationSource configurationSource);
    public virtual IConventionDbFunctionBuilder IsNullable(bool nullable, ConfigurationSource configurationSource);
    public virtual bool CanSetIsNullable(bool nullable, ConfigurationSource configurationSource);
    public virtual IConventionDbFunctionBuilder HasStoreType(string storeType, ConfigurationSource configurationSource);
    public virtual bool CanSetStoreType(string storeType, ConfigurationSource configurationSource);
    public virtual IConventionDbFunctionBuilder HasTypeMapping(RelationalTypeMapping returnTypeMapping, ConfigurationSource configurationSource);
    public virtual bool CanSetTypeMapping(RelationalTypeMapping returnTypeMapping, ConfigurationSource configurationSource);
    public virtual IConventionDbFunctionBuilder HasTranslation(Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> translation, ConfigurationSource configurationSource);
    public virtual bool CanSetTranslation(Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> translation, ConfigurationSource configurationSource);
    [NullableContextAttribute("1")]
public virtual InternalDbFunctionParameterBuilder HasParameter(string name, ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDbFunction Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.get_Metadata();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDbFunctionBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasName(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetName(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDbFunctionBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasSchema(string schema, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetSchema(string schema, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDbFunctionBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.IsBuiltIn(bool builtIn, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetIsBuiltIn(bool builtIn, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDbFunctionBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.IsNullable(bool nullable, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetIsNullable(bool nullable, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDbFunctionBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasStoreType(string storeType, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetStoreType(string storeType, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDbFunctionBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasTypeMapping(RelationalTypeMapping typeMapping, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetTypeMapping(RelationalTypeMapping typeMapping, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDbFunctionBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasTranslation(Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> translation, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetTranslation(Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> translation, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDbFunctionParameterBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasParameter(string name, bool fromDataAnnotation);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalDbFunctionParameterBuilder : AnnotatableBuilder`2<DbFunctionParameter, IConventionModelBuilder> {
    [NullableAttribute("1")]
private IConventionDbFunctionParameter Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionParameterBuilder.Metadata { get; }
    [NullableContextAttribute("1")]
[EntityFrameworkInternalAttribute]
public InternalDbFunctionParameterBuilder(DbFunctionParameter parameter, IConventionModelBuilder modelBuilder);
    public virtual IConventionDbFunctionParameterBuilder HasStoreType(string storeType, ConfigurationSource configurationSource);
    public virtual bool CanSetStoreType(string storeType, ConfigurationSource configurationSource);
    public virtual IConventionDbFunctionParameterBuilder HasTypeMapping(RelationalTypeMapping typeMapping, ConfigurationSource configurationSource);
    public virtual bool CanSetTypeMapping(RelationalTypeMapping typeMapping, ConfigurationSource configurationSource);
    public virtual IConventionDbFunctionParameterBuilder PropagatesNullability(bool propagatesNullability, ConfigurationSource configurationSource);
    public virtual bool CanSetPropagatesNullability(bool propagatesNullability, ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDbFunctionParameter Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionParameterBuilder.get_Metadata();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDbFunctionParameterBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionParameterBuilder.HasStoreType(string storeType, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionParameterBuilder.CanSetStoreType(string storeType, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDbFunctionParameterBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionParameterBuilder.HasTypeMapping(RelationalTypeMapping typeMapping, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionParameterBuilder.CanSetTypeMapping(RelationalTypeMapping typeMapping, bool fromDataAnnotation);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeMappingFragmentBuilder : AnnotatableBuilder`2<EntityTypeMappingFragment, IConventionModelBuilder> {
    [NullableAttribute("1")]
private IConventionEntityTypeMappingFragment Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeMappingFragmentBuilder.Metadata { get; }
    [NullableContextAttribute("1")]
public InternalEntityTypeMappingFragmentBuilder(EntityTypeMappingFragment fragment, IConventionModelBuilder modelBuilder);
    [NullableContextAttribute("2")]
public virtual InternalEntityTypeMappingFragmentBuilder ExcludeTableFromMigrations(Nullable`1<bool> excludedFromMigrations, ConfigurationSource configurationSource);
    public virtual bool CanExcludeTableFromMigrations(Nullable`1<bool> excludedFromMigrations, ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeMappingFragment Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeMappingFragmentBuilder.get_Metadata();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationalPropertyOverridesBuilder : AnnotatableBuilder`2<RelationalPropertyOverrides, IConventionModelBuilder> {
    [NullableAttribute("1")]
private IConventionRelationalPropertyOverrides Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationalPropertyOverridesBuilder.Metadata { get; }
    [NullableContextAttribute("1")]
public InternalRelationalPropertyOverridesBuilder(RelationalPropertyOverrides overrides, IConventionModelBuilder modelBuilder);
    [NullableContextAttribute("2")]
public virtual InternalRelationalPropertyOverridesBuilder HasColumnName(string name, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual bool CanSetColumnName(string name, ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionRelationalPropertyOverrides Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationalPropertyOverridesBuilder.get_Metadata();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSequenceBuilder : AnnotatableBuilder`2<Sequence, IConventionModelBuilder> {
    [NullableAttribute("1")]
private IConventionSequence Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.Metadata { get; }
    [NullableContextAttribute("1")]
public InternalSequenceBuilder(Sequence sequence, IConventionModelBuilder modelBuilder);
    public virtual IConventionSequenceBuilder HasType(Type type, ConfigurationSource configurationSource);
    public virtual bool CanSetType(Type type, ConfigurationSource configurationSource);
    public virtual IConventionSequenceBuilder IncrementsBy(Nullable`1<int> increment, ConfigurationSource configurationSource);
    public virtual bool CanSetIncrementsBy(Nullable`1<int> increment, ConfigurationSource configurationSource);
    public virtual IConventionSequenceBuilder StartsAt(Nullable`1<long> startValue, ConfigurationSource configurationSource);
    public virtual bool CanSetStartsAt(Nullable`1<long> startValue, ConfigurationSource configurationSource);
    public virtual IConventionSequenceBuilder HasMax(Nullable`1<long> maximum, ConfigurationSource configurationSource);
    public virtual bool CanSetMax(Nullable`1<long> maximum, ConfigurationSource configurationSource);
    public virtual IConventionSequenceBuilder HasMin(Nullable`1<long> minimum, ConfigurationSource configurationSource);
    public virtual bool CanSetMin(Nullable`1<long> minimum, ConfigurationSource configurationSource);
    public virtual IConventionSequenceBuilder IsCyclic(Nullable`1<bool> cyclic, ConfigurationSource configurationSource);
    public virtual bool CanSetIsCyclic(Nullable`1<bool> cyclic, ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionSequence Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.get_Metadata();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionSequenceBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.HasType(Type type, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.CanSetType(Type type, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionSequenceBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.IncrementsBy(Nullable`1<int> increment, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.CanSetIncrementsBy(Nullable`1<int> increment, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionSequenceBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.StartsAt(Nullable`1<long> startValue, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.CanSetStartsAt(Nullable`1<long> startValue, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionSequenceBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.HasMax(Nullable`1<long> maximum, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.CanSetMax(Nullable`1<long> maximum, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionSequenceBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.HasMin(Nullable`1<long> minimum, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.CanSetMin(Nullable`1<long> minimum, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionSequenceBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.IsCyclic(Nullable`1<bool> cyclic, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.CanSetIsCyclic(Nullable`1<bool> cyclic, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalStoredProcedureBuilder : AnnotatableBuilder`2<StoredProcedure, IConventionModelBuilder> {
    private IConventionStoredProcedure Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder.Metadata { get; }
    public InternalStoredProcedureBuilder(StoredProcedure storedProcedure, IConventionModelBuilder modelBuilder);
    public static InternalStoredProcedureBuilder HasStoredProcedure(IMutableEntityType entityType, StoreObjectType sprocType, string name, string schema);
    public static InternalStoredProcedureBuilder HasStoredProcedure(IConventionEntityType entityType, StoreObjectType sprocType, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public virtual InternalStoredProcedureBuilder HasName(string name, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalStoredProcedureBuilder HasName(string name, string schema, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual bool CanSetName(string name, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalStoredProcedureBuilder HasSchema(string schema, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual bool CanSetSchema(string schema, ConfigurationSource configurationSource);
    public virtual InternalStoredProcedureParameterBuilder HasParameter(string propertyName, ConfigurationSource configurationSource);
    public virtual InternalStoredProcedureParameterBuilder HasParameter(Expression`1<Func`2<TDerivedEntity, TProperty>> propertyExpression, ConfigurationSource configurationSource);
    public virtual bool CanHaveParameter(string propertyName, ConfigurationSource configurationSource);
    public virtual InternalStoredProcedureParameterBuilder HasOriginalValueParameter(string propertyName, ConfigurationSource configurationSource);
    public virtual InternalStoredProcedureParameterBuilder HasOriginalValueParameter(Expression`1<Func`2<TDerivedEntity, TProperty>> propertyExpression, ConfigurationSource configurationSource);
    public virtual bool CanHaveOriginalValueParameter(string propertyName, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalStoredProcedureParameterBuilder HasRowsAffectedParameter(ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalStoredProcedureParameterBuilder HasRowsAffectedParameter(ConfigurationSource configurationSource);
    public virtual bool CanHaveRowsAffectedParameter(ConfigurationSource configurationSource);
    public virtual InternalStoredProcedureResultColumnBuilder HasResultColumn(string propertyName, ConfigurationSource configurationSource);
    public virtual InternalStoredProcedureResultColumnBuilder HasResultColumn(Expression`1<Func`2<TDerivedEntity, TProperty>> propertyExpression, ConfigurationSource configurationSource);
    public virtual bool CanHaveResultColumn(string propertyName, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalStoredProcedureResultColumnBuilder HasRowsAffectedResultColumn(ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalStoredProcedureResultColumnBuilder HasRowsAffectedResultColumn(ConfigurationSource configurationSource);
    public virtual bool CanHaveRowsAffectedResultColumn(ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalStoredProcedureBuilder HasRowsAffectedReturn(bool rowsAffectedReturned, ConfigurationSource configurationSource);
    public virtual bool CanHaveRowsAffectedReturn(bool rowsAffectedReturned, ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedure Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder.get_Metadata();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder.HasName(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder.HasName(string name, string schema, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder.CanSetName(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder.HasSchema(string schema, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder.CanSetSchema(string schema, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureParameterBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder.HasParameter(string propertyName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder.CanHaveParameter(string propertyName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureParameterBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder.HasOriginalValueParameter(string propertyName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder.CanHaveOriginalValueParameter(string propertyName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureParameterBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder.HasRowsAffectedParameter(bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder.CanHaveRowsAffectedParameter(bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureResultColumnBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder.HasResultColumn(string propertyName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder.CanHaveResultColumn(string propertyName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureResultColumnBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder.HasRowsAffectedResultColumn(bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder.CanHaveRowsAffectedResultColumn(bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalStoredProcedureParameterBuilder : AnnotatableBuilder`2<StoredProcedureParameter, IConventionModelBuilder> {
    private IConventionStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureParameterBuilder.Metadata { get; }
    public InternalStoredProcedureParameterBuilder(StoredProcedureParameter parameter, IConventionModelBuilder modelBuilder);
    public virtual InternalStoredProcedureParameterBuilder HasName(string name, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual bool CanSetName(string name, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalStoredProcedureParameterBuilder HasDirection(ParameterDirection direction, ConfigurationSource configurationSource);
    public virtual bool CanSetDirection(ParameterDirection direction, ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureParameterBuilder.get_Metadata();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureParameterBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureParameterBuilder.HasName(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureParameterBuilder.CanSetName(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureParameterBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureParameterBuilder.HasDirection(ParameterDirection direction, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureParameterBuilder.CanSetDirection(ParameterDirection direction, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalStoredProcedureResultColumnBuilder : AnnotatableBuilder`2<StoredProcedureResultColumn, IConventionModelBuilder> {
    private IConventionStoredProcedureResultColumn Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureResultColumnBuilder.Metadata { get; }
    public InternalStoredProcedureResultColumnBuilder(StoredProcedureResultColumn resultColumn, IConventionModelBuilder modelBuilder);
    public virtual InternalStoredProcedureResultColumnBuilder HasName(string name, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual bool CanSetName(string name, ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureResultColumn Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureResultColumnBuilder.get_Metadata();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureResultColumnBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureResultColumnBuilder.HasName(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureResultColumnBuilder.CanSetName(string name, bool fromDataAnnotation);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeDbFunction {
    [NullableAttribute("1")]
public IStoreFunction StoreFunction { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual IStoreFunction get_StoreFunction();
    [NullableContextAttribute("1")]
public abstract virtual void set_StoreFunction(IStoreFunction value);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeDbFunctionParameter {
    [NullableAttribute("1")]
public IStoreFunctionParameter StoreFunctionParameter { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual IStoreFunctionParameter get_StoreFunctionParameter();
    [NullableContextAttribute("1")]
public abstract virtual void set_StoreFunctionParameter(IStoreFunctionParameter value);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeStoredProcedure {
    [NullableAttribute("1")]
public IStoreStoredProcedure StoreStoredProcedure { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual IStoreStoredProcedure get_StoreStoredProcedure();
    [NullableContextAttribute("1")]
public abstract virtual void set_StoreStoredProcedure(IStoreStoredProcedure value);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeStoredProcedureParameter {
    [NullableAttribute("1")]
public IStoreStoredProcedureParameter StoreParameter { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual IStoreStoredProcedureParameter get_StoreParameter();
    [NullableContextAttribute("1")]
public abstract virtual void set_StoreParameter(IStoreStoredProcedureParameter value);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeStoredProcedureResultColumn {
    [NullableAttribute("1")]
public IStoreStoredProcedureResultColumn StoreResultColumn { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual IStoreStoredProcedureResultColumn get_StoreResultColumn();
    [NullableContextAttribute("1")]
public abstract virtual void set_StoreResultColumn(IStoreStoredProcedureResultColumn value);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.JsonColumn : Column {
    private ValueComparer _providerValueComparer;
    private Nullable`1<int> Microsoft.EntityFrameworkCore.Metadata.IColumn.MaxLength { get; }
    private Nullable`1<int> Microsoft.EntityFrameworkCore.Metadata.IColumn.Precision { get; }
    private Nullable`1<int> Microsoft.EntityFrameworkCore.Metadata.IColumn.Scale { get; }
    private Nullable`1<bool> Microsoft.EntityFrameworkCore.Metadata.IColumn.IsUnicode { get; }
    private Nullable`1<bool> Microsoft.EntityFrameworkCore.Metadata.IColumn.IsFixedLength { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.IColumn.IsRowVersion { get; }
    private Nullable`1<int> Microsoft.EntityFrameworkCore.Metadata.IColumn.Order { get; }
    [NullableAttribute("2")]
private object Microsoft.EntityFrameworkCore.Metadata.IColumn.DefaultValue { get; }
    [NullableAttribute("2")]
private string Microsoft.EntityFrameworkCore.Metadata.IColumn.DefaultValueSql { get; }
    [NullableAttribute("2")]
private string Microsoft.EntityFrameworkCore.Metadata.IColumn.ComputedColumnSql { get; }
    private Nullable`1<bool> Microsoft.EntityFrameworkCore.Metadata.IColumn.IsStored { get; }
    [NullableAttribute("2")]
private string Microsoft.EntityFrameworkCore.Metadata.IColumn.Comment { get; }
    [NullableAttribute("2")]
private string Microsoft.EntityFrameworkCore.Metadata.IColumn.Collation { get; }
    [NullableAttribute("1")]
private ValueComparer Microsoft.EntityFrameworkCore.Metadata.IColumnBase.ProviderValueComparer { get; }
    [NullableContextAttribute("1")]
public JsonColumn(string name, string type, Table table, ValueComparer provierValueComparer);
    private sealed virtual override Nullable`1<int> Microsoft.EntityFrameworkCore.Metadata.IColumn.get_MaxLength();
    private sealed virtual override Nullable`1<int> Microsoft.EntityFrameworkCore.Metadata.IColumn.get_Precision();
    private sealed virtual override Nullable`1<int> Microsoft.EntityFrameworkCore.Metadata.IColumn.get_Scale();
    private sealed virtual override Nullable`1<bool> Microsoft.EntityFrameworkCore.Metadata.IColumn.get_IsUnicode();
    private sealed virtual override Nullable`1<bool> Microsoft.EntityFrameworkCore.Metadata.IColumn.get_IsFixedLength();
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IColumn.get_IsRowVersion();
    private sealed virtual override Nullable`1<int> Microsoft.EntityFrameworkCore.Metadata.IColumn.get_Order();
    private sealed virtual override object Microsoft.EntityFrameworkCore.Metadata.IColumn.get_DefaultValue();
    private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IColumn.get_DefaultValueSql();
    private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IColumn.get_ComputedColumnSql();
    private sealed virtual override Nullable`1<bool> Microsoft.EntityFrameworkCore.Metadata.IColumn.get_IsStored();
    private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IColumn.get_Comment();
    private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IColumn.get_Collation();
    private sealed virtual override ValueComparer Microsoft.EntityFrameworkCore.Metadata.IColumnBase.get_ProviderValueComparer();
    private sealed virtual override IColumnMapping Microsoft.EntityFrameworkCore.Metadata.IColumn.FindColumnMapping(IReadOnlyEntityType entityType);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.JsonViewColumn : ViewColumn {
    [NullableContextAttribute("1")]
public JsonViewColumn(string name, string type, View view);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.NamedListComparer : object {
    [NullableAttribute("1")]
public static NamedListComparer Instance;
    private static NamedListComparer();
    public sealed virtual int Compare(ValueTuple`3<string, string, IReadOnlyList`1<string>> x, ValueTuple`3<string, string, IReadOnlyList`1<string>> y);
    public sealed virtual bool Equals(ValueTuple`3<string, string, IReadOnlyList`1<string>> x, ValueTuple`3<string, string, IReadOnlyList`1<string>> y);
    public sealed virtual int GetHashCode(ValueTuple`3<string, string, IReadOnlyList`1<string>> obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalEntityTypeExtensions : object {
    public static int MaxEntityTypesSharingTable;
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalEntityTypeExtensions/<FindDeclaredReferencingRowInternalForeignKeys>d__1")]
[ExtensionAttribute]
public static IEnumerable`1<IForeignKey> FindDeclaredReferencingRowInternalForeignKeys(IEntityType entityType, StoreObjectIdentifier storeObject);
    [ExtensionAttribute]
public static IEnumerable`1<ITableMappingBase> GetViewOrTableMappings(IEntityType entityType);
    [ExtensionAttribute]
public static List`1<IProperty> GetNonPrincipalSharedNonPkProperties(IEntityType entityType, ITableBase table);
    [CompilerGeneratedAttribute]
internal static bool <FindDeclaredReferencingRowInternalForeignKeys>g__IsMapped|1_0(IReadOnlyForeignKey foreignKey, StoreObjectIdentifier storeObject);
    [CompilerGeneratedAttribute]
internal static void <GetNonPrincipalSharedNonPkProperties>g__PopulatePrincipalEntityTypes|3_0(ITableBase table, IEntityType entityType, HashSet`1<IEntityType> entityTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyExtensions : object {
    [ExtensionAttribute]
public static bool AreCompatible(IReadOnlyForeignKey foreignKey, IReadOnlyForeignKey duplicateForeignKey, StoreObjectIdentifier& storeObject, bool shouldThrow);
    [ExtensionAttribute]
public static string GetConstraintName(IReadOnlyForeignKey foreignKey, StoreObjectIdentifier& storeObject, StoreObjectIdentifier& principalStoreObject, IDiagnosticsLogger`1<Validation> logger);
    [ExtensionAttribute]
public static string GetDefaultName(IReadOnlyForeignKey foreignKey, StoreObjectIdentifier& storeObject, StoreObjectIdentifier& principalStoreObject, IDiagnosticsLogger`1<Validation> logger);
    [CompilerGeneratedAttribute]
internal static bool <GetDefaultName>g__ShareAnyFragments|2_1(IReadOnlyEntityType entityType1, IReadOnlyEntityType entityType2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalIndexExtensions : object {
    [ExtensionAttribute]
public static bool AreCompatible(IReadOnlyIndex index, IReadOnlyIndex duplicateIndex, StoreObjectIdentifier& storeObject, bool shouldThrow);
    [ExtensionAttribute]
public static string GetDatabaseName(IReadOnlyIndex index, StoreObjectIdentifier& storeObject, IDiagnosticsLogger`1<Validation> logger);
    [ExtensionAttribute]
public static string GetDefaultDatabaseName(IReadOnlyIndex index, StoreObjectIdentifier& storeObject, IDiagnosticsLogger`1<Validation> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalKeyExtensions : object {
    [ExtensionAttribute]
public static bool AreCompatible(IReadOnlyKey key, IReadOnlyKey duplicateKey, StoreObjectIdentifier& storeObject, bool shouldThrow);
    [ExtensionAttribute]
public static string GetName(IReadOnlyKey key, StoreObjectIdentifier& storeObject, IDiagnosticsLogger`1<Validation> logger);
    [ExtensionAttribute]
public static string GetDefaultName(IReadOnlyKey key, StoreObjectIdentifier& storeObject, IDiagnosticsLogger`1<Validation> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModel : Annotatable {
    private bool _isReadOnly;
    [CompilerGeneratedAttribute]
private IModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedDictionary`2<string, TableBase> <DefaultTables>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedDictionary`2<ValueTuple`2<string, string>, Table> <Tables>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedDictionary`2<ValueTuple`2<string, string>, View> <Views>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedDictionary`2<string, SqlQuery> <Queries>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedDictionary`2<ValueTuple`3<string, string, IReadOnlyList`1<string>>, StoreFunction> <Functions>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedDictionary`2<ValueTuple`2<string, string>, StoreStoredProcedure> <StoredProcedures>k__BackingField;
    public IModel Model { get; }
    public bool IsReadOnly { get; }
    public SortedDictionary`2<string, TableBase> DefaultTables { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SortedDictionary`2<ValueTuple`2<string, string>, Table> Tables { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SortedDictionary`2<ValueTuple`2<string, string>, View> Views { get; }
    public SortedDictionary`2<string, SqlQuery> Queries { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SortedDictionary`2<ValueTuple`3<string, string, IReadOnlyList`1<string>>, StoreFunction> Functions { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SortedDictionary`2<ValueTuple`2<string, string>, StoreStoredProcedure> StoredProcedures { get; }
    public DebugView DebugView { get; }
    private IEnumerable`1<ITable> Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Tables { get; }
    private IEnumerable`1<IView> Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Views { get; }
    private IEnumerable`1<IStoreFunction> Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Functions { get; }
    private IEnumerable`1<IStoreStoredProcedure> Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.StoredProcedures { get; }
    private IEnumerable`1<ISqlQuery> Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Queries { get; }
    public RelationalModel(IModel model);
    [CompilerGeneratedAttribute]
public virtual IModel get_Model();
    public virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public virtual SortedDictionary`2<string, TableBase> get_DefaultTables();
    [CompilerGeneratedAttribute]
public virtual SortedDictionary`2<ValueTuple`2<string, string>, Table> get_Tables();
    [CompilerGeneratedAttribute]
public virtual SortedDictionary`2<ValueTuple`2<string, string>, View> get_Views();
    [CompilerGeneratedAttribute]
public virtual SortedDictionary`2<string, SqlQuery> get_Queries();
    [CompilerGeneratedAttribute]
public virtual SortedDictionary`2<ValueTuple`3<string, string, IReadOnlyList`1<string>>, StoreFunction> get_Functions();
    [CompilerGeneratedAttribute]
public virtual SortedDictionary`2<ValueTuple`2<string, string>, StoreStoredProcedure> get_StoredProcedures();
    [NullableContextAttribute("2")]
public virtual ITable FindTable(string name, string schema);
    [NullableContextAttribute("2")]
public virtual IView FindView(string name, string schema);
    public virtual ISqlQuery FindQuery(string name);
    public virtual IStoreFunction FindFunction(string name, string schema, IReadOnlyList`1<string> parameters);
    [NullableContextAttribute("2")]
public virtual IStoreStoredProcedure FindStoredProcedure(string name, string schema);
    public static IModel Add(IModel model, IRelationalAnnotationProvider relationalAnnotationProvider, IRelationalTypeMappingSource relationalTypeMappingSource, bool designTime);
    public static IRelationalModel Create(IModel model, IRelationalAnnotationProvider relationalAnnotationProvider, IRelationalTypeMappingSource relationalTypeMappingSource, bool designTime);
    private static void AddDefaultMappings(RelationalModel databaseModel, IEntityType entityType);
    private static void AddTables(RelationalModel databaseModel, IEntityType entityType, IRelationalTypeMappingSource relationalTypeMappingSource);
    private static void CreateTableMapping(IRelationalTypeMappingSource relationalTypeMappingSource, IEntityType entityType, IEntityType mappedType, StoreObjectIdentifier mappedTable, RelationalModel databaseModel, List`1<TableMapping> tableMappings, bool includesDerivedTypes, Nullable`1<bool> isSplitEntityTypePrincipal);
    private static void AddViews(RelationalModel databaseModel, IEntityType entityType, IRelationalTypeMappingSource relationalTypeMappingSource);
    private static void CreateViewMapping(IRelationalTypeMappingSource relationalTypeMappingSource, IEntityType entityType, IEntityType mappedType, StoreObjectIdentifier mappedView, RelationalModel databaseModel, List`1<ViewMapping> viewMappings, bool includesDerivedTypes, Nullable`1<bool> isSplitEntityTypePrincipal);
    private static void AddSqlQueries(RelationalModel databaseModel, IEntityType entityType);
    private static void AddMappedFunctions(RelationalModel databaseModel, IEntityType entityType);
    private static void AddTvfs(RelationalModel relationalModel);
    private static FunctionMapping CreateFunctionMapping(IEntityType entityType, IEntityType mappedType, IRuntimeDbFunction dbFunction, RelationalModel model, bool default);
    private static StoreFunction GetOrCreateStoreFunction(IRuntimeDbFunction dbFunction, RelationalModel model);
    private static void AddStoredProcedures(RelationalModel databaseModel, IEntityType entityType, IRelationalTypeMappingSource relationalTypeMappingSource);
    private static StoredProcedureMapping CreateStoredProcedureMapping(IEntityType entityType, IEntityType mappedType, IRuntimeStoredProcedure storedProcedure, ITableMapping tableMapping, RelationalModel model, List`1<StoredProcedureMapping> storedProcedureMappings, bool includesDerivedTypes, IRelationalTypeMappingSource relationalTypeMappingSource);
    private static void PopulateTableConfiguration(Table table, bool designTime);
    private static void PopulateRowInternalForeignKeys(TableBase table);
    private static void PopulateForeignKeyConstraints(Table table);
    public static ReferentialAction ToReferentialAction(DeleteBehavior deleteBehavior);
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<ITable> Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.get_Tables();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IView> Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.get_Views();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IStoreFunction> Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.get_Functions();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IStoreStoredProcedure> Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.get_StoredProcedures();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<ISqlQuery> Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.get_Queries();
    [CompilerGeneratedAttribute]
internal static StoreStoredProcedure <CreateStoredProcedureMapping>g__GetOrCreateStoreStoredProcedure|43_0(IRuntimeStoredProcedure storedProcedure, RelationalModel model, IRelationalTypeMappingSource relationalTypeMappingSource);
    [CompilerGeneratedAttribute]
internal static StoreStoredProcedureParameter <CreateStoredProcedureMapping>g__GetOrCreateStoreStoredProcedureParameter|43_1(IStoredProcedureParameter parameter, IProperty property, int position, StoreStoredProcedure storeStoredProcedure, StoreObjectIdentifier identifier, IRelationalTypeMappingSource relationalTypeMappingSource);
    [CompilerGeneratedAttribute]
internal static StoreStoredProcedureResultColumn <CreateStoredProcedureMapping>g__GetOrCreateStoreStoredProcedureResultColumn|43_2(IStoredProcedureResultColumn resultColumn, IProperty property, int position, StoreStoredProcedure storeStoredProcedure, StoreObjectIdentifier identifier, IRelationalTypeMappingSource relationalTypeMappingSource);
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__49_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__49_1();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static string GetConfiguredColumnType(IReadOnlyProperty property);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyInternalExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsOrdinalKeyProperty(IReadOnlyProperty property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyOverrides : ConventionAnnotatable {
    private string _columnName;
    private InternalRelationalPropertyOverridesBuilder _builder;
    private ConfigurationSource _configurationSource;
    private Nullable`1<ConfigurationSource> _columnNameConfigurationSource;
    [CompilerGeneratedAttribute]
private IReadOnlyProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private StoreObjectIdentifier <StoreObject>k__BackingField;
    public IReadOnlyProperty Property { get; }
    public StoreObjectIdentifier StoreObject { get; }
    public bool IsReadOnly { get; }
    public InternalRelationalPropertyOverridesBuilder Builder { get; }
    public bool IsInModel { get; }
    [NullableAttribute("2")]
public string ColumnName { get; public set; }
    public bool IsColumnNameOverridden { get; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IProperty Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides.Property { get; }
    private IMutableProperty Microsoft.EntityFrameworkCore.Metadata.IMutableRelationalPropertyOverrides.Property { get; }
    private IConventionProperty Microsoft.EntityFrameworkCore.Metadata.IConventionRelationalPropertyOverrides.Property { get; }
    private IConventionRelationalPropertyOverridesBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionRelationalPropertyOverrides.Builder { get; }
    public RelationalPropertyOverrides(IReadOnlyProperty property, StoreObjectIdentifier& storeObject, ConfigurationSource configurationSource);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyProperty get_Property();
    [CompilerGeneratedAttribute]
public virtual StoreObjectIdentifier get_StoreObject();
    public virtual bool get_IsReadOnly();
    [DebuggerStepThroughAttribute]
public virtual InternalRelationalPropertyOverridesBuilder get_Builder();
    public virtual bool get_IsInModel();
    public virtual void SetRemovedFromModel();
    public static void Attach(IConventionProperty property, IConventionRelationalPropertyOverrides detachedOverrides);
    public static void Attach(IConventionProperty property, IConventionRelationalPropertyOverrides detachedOverrides, StoreObjectIdentifier newStoreObject);
    public static RelationalPropertyOverrides MergeInto(IConventionRelationalPropertyOverrides detachedOverrides, IConventionRelationalPropertyOverrides existingOverrides);
    public virtual ConfigurationSource GetConfigurationSource();
    public virtual void UpdateConfigurationSource(ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual string get_ColumnName();
    [NullableContextAttribute("2")]
public virtual void set_ColumnName(string value);
    [NullableContextAttribute("2")]
public virtual string SetColumnName(string columnName, ConfigurationSource configurationSource);
    public virtual bool get_IsColumnNameOverridden();
    private bool RemoveColumnNameOverride(ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetColumnNameConfigurationSource();
    public static IReadOnlyRelationalPropertyOverrides Find(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    public static IEnumerable`1<IReadOnlyRelationalPropertyOverrides> Get(IReadOnlyProperty property);
    public static RelationalPropertyOverrides GetOrCreate(IMutableProperty property, StoreObjectIdentifier& storeObject, ConfigurationSource configurationSource);
    public static RelationalPropertyOverrides Remove(IMutableProperty property, StoreObjectIdentifier& storeObject);
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IProperty Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides.get_Property();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableProperty Microsoft.EntityFrameworkCore.Metadata.IMutableRelationalPropertyOverrides.get_Property();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionProperty Microsoft.EntityFrameworkCore.Metadata.IConventionRelationalPropertyOverrides.get_Property();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionRelationalPropertyOverridesBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionRelationalPropertyOverrides.get_Builder();
    private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IConventionRelationalPropertyOverrides.SetColumnName(string name, bool fromDataAnnotation);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableRelationalPropertyOverrides.RemoveColumnNameOverride();
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IConventionRelationalPropertyOverrides.RemoveColumnNameOverride(bool fromDataAnnotation);
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__37_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__37_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.RuntimeStoredProcedureParameter : AnnotatableBase {
    private IStoreStoredProcedureParameter _storeParameter;
    private string _propertyName;
    private bool _forRowsAffected;
    private Nullable`1<bool> _forOriginalValue;
    private string _name;
    private ParameterDirection _direction;
    [CompilerGeneratedAttribute]
private RuntimeStoredProcedure <StoredProcedure>k__BackingField;
    public RuntimeStoredProcedure StoredProcedure { get; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IReadOnlyStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureParameter.StoredProcedure { get; }
    private IStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureParameter.StoredProcedure { get; }
    private string Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureParameter.Name { get; }
    [NullableAttribute("2")]
private string Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureParameter.PropertyName { get; }
    private ParameterDirection Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureParameter.Direction { get; }
    private Nullable`1<bool> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureParameter.ForOriginalValue { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureParameter.ForRowsAffected { get; }
    private IStoreStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureParameter.StoreParameter { get; }
    private IStoreStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeStoredProcedureParameter.StoreParameter { get; private set; }
    [EntityFrameworkInternalAttribute]
public RuntimeStoredProcedureParameter(RuntimeStoredProcedure storedProcedure, string name, ParameterDirection direction, bool forRowsAffected, string propertyName, Nullable`1<bool> forOriginalValue);
    [CompilerGeneratedAttribute]
public virtual RuntimeStoredProcedure get_StoredProcedure();
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureParameter.get_StoredProcedure();
    [DebuggerStepThroughAttribute]
private sealed virtual override IStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureParameter.get_StoredProcedure();
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureParameter.get_Name();
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureParameter.get_PropertyName();
    [DebuggerStepThroughAttribute]
private sealed virtual override ParameterDirection Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureParameter.get_Direction();
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<bool> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureParameter.get_ForOriginalValue();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureParameter.get_ForRowsAffected();
    [DebuggerStepThroughAttribute]
private sealed virtual override IStoreStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureParameter.get_StoreParameter();
    [DebuggerStepThroughAttribute]
private sealed virtual override IStoreStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeStoredProcedureParameter.get_StoreParameter();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeStoredProcedureParameter.set_StoreParameter(IStoreStoredProcedureParameter value);
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__12_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__12_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.RuntimeStoredProcedureResultColumn : AnnotatableBase {
    private IStoreStoredProcedureResultColumn _storeResultColumn;
    private string _propertyName;
    private bool _forRowsAffected;
    private string _name;
    [CompilerGeneratedAttribute]
private RuntimeStoredProcedure <StoredProcedure>k__BackingField;
    public RuntimeStoredProcedure StoredProcedure { get; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IReadOnlyStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureResultColumn.StoredProcedure { get; }
    private IStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureResultColumn.StoredProcedure { get; }
    private string Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureResultColumn.Name { get; }
    [NullableAttribute("2")]
private string Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureResultColumn.PropertyName { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureResultColumn.ForRowsAffected { get; }
    private IStoreStoredProcedureResultColumn Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureResultColumn.StoreResultColumn { get; }
    private IStoreStoredProcedureResultColumn Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeStoredProcedureResultColumn.StoreResultColumn { get; private set; }
    [EntityFrameworkInternalAttribute]
public RuntimeStoredProcedureResultColumn(RuntimeStoredProcedure storedProcedure, string name, bool forRowsAffected, string propertyName);
    [CompilerGeneratedAttribute]
public virtual RuntimeStoredProcedure get_StoredProcedure();
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureResultColumn.get_StoredProcedure();
    [DebuggerStepThroughAttribute]
private sealed virtual override IStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureResultColumn.get_StoredProcedure();
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureResultColumn.get_Name();
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureResultColumn.get_PropertyName();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureResultColumn.get_ForRowsAffected();
    [DebuggerStepThroughAttribute]
private sealed virtual override IStoreStoredProcedureResultColumn Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureResultColumn.get_StoreResultColumn();
    [DebuggerStepThroughAttribute]
private sealed virtual override IStoreStoredProcedureResultColumn Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeStoredProcedureResultColumn.get_StoreResultColumn();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeStoredProcedureResultColumn.set_StoreResultColumn(IStoreStoredProcedureResultColumn value);
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__10_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__10_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence : ConventionAnnotatable {
    private string _schema;
    private Nullable`1<long> _startValue;
    private Nullable`1<int> _incrementBy;
    private Nullable`1<long> _minValue;
    private Nullable`1<long> _maxValue;
    private Type _type;
    private Nullable`1<bool> _isCyclic;
    private InternalSequenceBuilder _builder;
    private ConfigurationSource _configurationSource;
    private Nullable`1<ConfigurationSource> _startValueConfigurationSource;
    private Nullable`1<ConfigurationSource> _incrementByConfigurationSource;
    private Nullable`1<ConfigurationSource> _minValueConfigurationSource;
    private Nullable`1<ConfigurationSource> _maxValueConfigurationSource;
    private Nullable`1<ConfigurationSource> _typeConfigurationSource;
    private Nullable`1<ConfigurationSource> _isCyclicConfigurationSource;
    public static Type DefaultClrType;
    public static int DefaultIncrementBy;
    public static int DefaultStartValue;
    public static Nullable`1<long> DefaultMaxValue;
    public static Nullable`1<long> DefaultMinValue;
    public static bool DefaultIsCyclic;
    [CompilerGeneratedAttribute]
private IReadOnlyModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private static IReadOnlyCollection`1<Type> <SupportedTypes>k__BackingField;
    public InternalSequenceBuilder Builder { get; }
    public bool IsInModel { get; }
    public IReadOnlyModel Model { get; }
    public bool IsReadOnly { get; }
    public string Name { get; public set; }
    [NullableAttribute("2")]
public string ModelSchema { get; }
    [NullableAttribute("2")]
public string Schema { get; }
    public long StartValue { get; public set; }
    public int IncrementBy { get; public set; }
    public Nullable`1<long> MinValue { get; public set; }
    public Nullable`1<long> MaxValue { get; public set; }
    public static IReadOnlyCollection`1<Type> SupportedTypes { get; }
    public Type Type { get; public set; }
    public bool IsCyclic { get; public set; }
    private IConventionSequenceBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.Builder { get; }
    private IMutableModel Microsoft.EntityFrameworkCore.Metadata.IMutableSequence.Model { get; }
    private IConventionModel Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.Model { get; }
    private IModel Microsoft.EntityFrameworkCore.Metadata.ISequence.Model { get; }
    public Sequence(string name, string schema, IReadOnlyModel model, ConfigurationSource configurationSource);
    [ObsoleteAttribute("Use the other constructor")]
public Sequence(IReadOnlyModel model, string annotationName);
    private static Sequence();
    public static IEnumerable`1<ISequence> GetSequences(IReadOnlyModel model);
    public static ISequence FindSequence(IReadOnlyModel model, string name, string schema);
    public static Sequence AddSequence(IMutableModel model, string name, string schema, ConfigurationSource configurationSource);
    public static Sequence SetName(IMutableModel model, Sequence sequence, string name);
    public static Sequence RemoveSequence(IMutableModel model, string name, string schema);
    [DebuggerStepThroughAttribute]
public virtual InternalSequenceBuilder get_Builder();
    public virtual bool get_IsInModel();
    public virtual void SetRemovedFromModel();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyModel get_Model();
    public virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [NullableContextAttribute("2")]
public virtual string get_ModelSchema();
    [NullableContextAttribute("2")]
public virtual string get_Schema();
    public virtual ConfigurationSource GetConfigurationSource();
    public virtual void UpdateConfigurationSource(ConfigurationSource configurationSource);
    public virtual long get_StartValue();
    public virtual void set_StartValue(long value);
    public virtual Nullable`1<long> SetStartValue(Nullable`1<long> startValue, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetStartValueConfigurationSource();
    public virtual int get_IncrementBy();
    public virtual void set_IncrementBy(int value);
    public virtual Nullable`1<int> SetIncrementBy(Nullable`1<int> incrementBy, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetIncrementByConfigurationSource();
    public virtual Nullable`1<long> get_MinValue();
    public virtual void set_MinValue(Nullable`1<long> value);
    public virtual Nullable`1<long> SetMinValue(Nullable`1<long> minValue, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetMinValueConfigurationSource();
    public virtual Nullable`1<long> get_MaxValue();
    public virtual void set_MaxValue(Nullable`1<long> value);
    public virtual Nullable`1<long> SetMaxValue(Nullable`1<long> maxValue, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetMaxValueConfigurationSource();
    [CompilerGeneratedAttribute]
public static IReadOnlyCollection`1<Type> get_SupportedTypes();
    public virtual Type get_Type();
    public virtual void set_Type(Type value);
    [NullableContextAttribute("2")]
public virtual Type SetType(Type type, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetTypeConfigurationSource();
    public virtual bool get_IsCyclic();
    public virtual void set_IsCyclic(bool value);
    public virtual Nullable`1<bool> SetIsCyclic(Nullable`1<bool> cyclic, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetIsCyclicConfigurationSource();
    public virtual string ToString();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionSequenceBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableModel Microsoft.EntityFrameworkCore.Metadata.IMutableSequence.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionModel Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IModel Microsoft.EntityFrameworkCore.Metadata.ISequence.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<long> Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.SetStartValue(Nullable`1<long> startValue, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<int> Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.SetIncrementBy(Nullable`1<int> incrementBy, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<long> Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.SetMinValue(Nullable`1<long> minValue, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<long> Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.SetMaxValue(Nullable`1<long> maxValue, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override Type Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.SetType(Type type, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<bool> Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.SetIsCyclic(Nullable`1<bool> cyclic, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQuery : TableBase {
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    public string Sql { get; public set; }
    private IEnumerable`1<ISqlQueryMapping> Microsoft.EntityFrameworkCore.Metadata.ISqlQuery.EntityTypeMappings { get; }
    private IEnumerable`1<ISqlQueryColumn> Microsoft.EntityFrameworkCore.Metadata.ISqlQuery.Columns { get; }
    public SqlQuery(string name, RelationalModel model, string sql);
    [CompilerGeneratedAttribute]
public virtual string get_Sql();
    [CompilerGeneratedAttribute]
public virtual void set_Sql(string value);
    public virtual IColumnBase FindColumn(IProperty property);
    public virtual string ToString();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<ISqlQueryMapping> Microsoft.EntityFrameworkCore.Metadata.ISqlQuery.get_EntityTypeMappings();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<ISqlQueryColumn> Microsoft.EntityFrameworkCore.Metadata.ISqlQuery.get_Columns();
    [DebuggerStepThroughAttribute]
private sealed virtual override ISqlQueryColumn Microsoft.EntityFrameworkCore.Metadata.ISqlQuery.FindColumn(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override ISqlQueryColumn Microsoft.EntityFrameworkCore.Metadata.ISqlQuery.FindColumn(IProperty property);
    [CompilerGeneratedAttribute]
private bool <FindColumn>b__5_0(ISqlQueryColumnMapping cm);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQueryColumn : ColumnBase`1<SqlQueryColumnMapping> {
    public SqlQuery SqlQuery { get; }
    private ISqlQuery Microsoft.EntityFrameworkCore.Metadata.ISqlQueryColumn.SqlQuery { get; }
    private IReadOnlyList`1<ISqlQueryColumnMapping> Microsoft.EntityFrameworkCore.Metadata.ISqlQueryColumn.PropertyMappings { get; }
    public SqlQueryColumn(string name, string type, SqlQuery sqlQuery);
    public virtual SqlQuery get_SqlQuery();
    public virtual string ToString();
    [DebuggerStepThroughAttribute]
private sealed virtual override ISqlQuery Microsoft.EntityFrameworkCore.Metadata.ISqlQueryColumn.get_SqlQuery();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<ISqlQueryColumnMapping> Microsoft.EntityFrameworkCore.Metadata.ISqlQueryColumn.get_PropertyMappings();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQueryColumnMapping : ColumnMappingBase {
    public ISqlQueryMapping SqlQueryMapping { get; }
    private ISqlQueryColumn Microsoft.EntityFrameworkCore.Metadata.ISqlQueryColumnMapping.Column { get; }
    public SqlQueryColumnMapping(IProperty property, SqlQueryColumn column, SqlQueryMapping sqlQueryMapping);
    public virtual ISqlQueryMapping get_SqlQueryMapping();
    protected virtual RelationalTypeMapping GetTypeMapping();
    public virtual string ToString();
    [DebuggerStepThroughAttribute]
private sealed virtual override ISqlQueryColumn Microsoft.EntityFrameworkCore.Metadata.ISqlQueryColumnMapping.get_Column();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQueryMapping : TableMappingBase`1<SqlQueryColumnMapping> {
    [CompilerGeneratedAttribute]
private bool <IsDefaultSqlQueryMapping>k__BackingField;
    public bool IsDefaultSqlQueryMapping { get; public set; }
    public ISqlQuery SqlQuery { get; }
    private IEnumerable`1<ISqlQueryColumnMapping> Microsoft.EntityFrameworkCore.Metadata.ISqlQueryMapping.ColumnMappings { get; }
    public SqlQueryMapping(IEntityType entityType, SqlQuery sqlQuery, bool includesDerivedTypes);
    [CompilerGeneratedAttribute]
public virtual bool get_IsDefaultSqlQueryMapping();
    [CompilerGeneratedAttribute]
public virtual void set_IsDefaultSqlQueryMapping(bool value);
    public virtual ISqlQuery get_SqlQuery();
    public virtual string ToString();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<ISqlQueryColumnMapping> Microsoft.EntityFrameworkCore.Metadata.ISqlQueryMapping.get_ColumnMappings();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.StoredProcedure : ConventionAnnotatable {
    private List`1<StoredProcedureParameter> _parameters;
    private Dictionary`2<string, StoredProcedureParameter> _currentValueParameters;
    private Dictionary`2<string, StoredProcedureParameter> _originalValueParameters;
    private StoredProcedureParameter _rowsAffectedParameter;
    private List`1<StoredProcedureResultColumn> _resultColumns;
    private StoredProcedureResultColumn _rowsAffectedResultColumn;
    private Dictionary`2<string, StoredProcedureResultColumn> _propertyResultColumns;
    private string _schema;
    private string _name;
    private InternalStoredProcedureBuilder _builder;
    private bool _isRowsAffectedReturned;
    private IStoreStoredProcedure _storeStoredProcedure;
    private ConfigurationSource _configurationSource;
    private Nullable`1<ConfigurationSource> _schemaConfigurationSource;
    private Nullable`1<ConfigurationSource> _nameConfigurationSource;
    [CompilerGeneratedAttribute]
private IMutableEntityType <EntityType>k__BackingField;
    public IMutableEntityType EntityType { get; public set; }
    public InternalStoredProcedureBuilder Builder { get; }
    public bool IsInModel { get; }
    public bool IsReadOnly { get; }
    [NullableAttribute("2")]
public string Schema { get; public set; }
    [NullableAttribute("2")]
public string Name { get; public set; }
    public bool IsRowsAffectedReturned { get; public set; }
    public IReadOnlyList`1<StoredProcedureParameter> Parameters { get; }
    public IReadOnlyList`1<StoredProcedureResultColumn> ResultColumns { get; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IConventionStoredProcedureBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedure.Builder { get; }
    private string Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.Name { get; }
    private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.EntityType { get; }
    private IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedure.EntityType { get; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.EntityType { get; }
    private IStoreStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.StoreStoredProcedure { get; }
    private IStoreStoredProcedure Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeStoredProcedure.StoreStoredProcedure { get; private set; }
    private IReadOnlyList`1<IReadOnlyStoredProcedureParameter> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.Parameters { get; }
    private IReadOnlyList`1<IMutableStoredProcedureParameter> Microsoft.EntityFrameworkCore.Metadata.IMutableStoredProcedure.Parameters { get; }
    private IReadOnlyList`1<IConventionStoredProcedureParameter> Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedure.Parameters { get; }
    private IReadOnlyList`1<IStoredProcedureParameter> Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.Parameters { get; }
    private IReadOnlyList`1<IReadOnlyStoredProcedureResultColumn> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.ResultColumns { get; }
    private IReadOnlyList`1<IMutableStoredProcedureResultColumn> Microsoft.EntityFrameworkCore.Metadata.IMutableStoredProcedure.ResultColumns { get; }
    private IReadOnlyList`1<IConventionStoredProcedureResultColumn> Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedure.ResultColumns { get; }
    private IReadOnlyList`1<IStoredProcedureResultColumn> Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.ResultColumns { get; }
    public StoredProcedure(IMutableEntityType entityType, ConfigurationSource configurationSource);
    [CompilerGeneratedAttribute]
public virtual IMutableEntityType get_EntityType();
    [CompilerGeneratedAttribute]
public virtual void set_EntityType(IMutableEntityType value);
    [DebuggerStepThroughAttribute]
public virtual InternalStoredProcedureBuilder get_Builder();
    public virtual bool get_IsInModel();
    public virtual void SetRemovedFromModel();
    public virtual bool get_IsReadOnly();
    public static IStoredProcedure FindStoredProcedure(IReadOnlyEntityType entityType, StoreObjectType sprocType);
    public static IStoredProcedure FindDeclaredStoredProcedure(IReadOnlyEntityType entityType, StoreObjectType sprocType);
    public static StoredProcedure SetStoredProcedure(IMutableEntityType entityType, StoreObjectType sprocType);
    public static StoredProcedure SetStoredProcedure(IMutableEntityType entityType, StoreObjectType sprocType, string name, string schema);
    public static StoredProcedure SetStoredProcedure(IConventionEntityType entityType, StoreObjectType sprocType, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public static StoredProcedure SetStoredProcedure(IConventionEntityType entityType, StoreObjectType sprocType, string name, string schema, bool fromDataAnnotation);
    public static IMutableStoredProcedure RemoveStoredProcedure(IMutableEntityType entityType, StoreObjectType sprocType);
    public static IConventionStoredProcedure RemoveStoredProcedure(IConventionEntityType entityType, StoreObjectType sprocType);
    public static Nullable`1<ConfigurationSource> GetStoredProcedureConfigurationSource(IConventionEntityType entityType, StoreObjectType sprocType);
    private static string GetAnnotationName(StoreObjectType sprocType);
    [DebuggerStepThroughAttribute]
public virtual ConfigurationSource GetConfigurationSource();
    [DebuggerStepThroughAttribute]
public virtual void UpdateConfigurationSource(ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual string get_Schema();
    [NullableContextAttribute("2")]
public virtual void set_Schema(string value);
    [NullableContextAttribute("2")]
public virtual string SetSchema(string schema, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetSchemaConfigurationSource();
    [NullableContextAttribute("2")]
public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual void set_Name(string value);
    private string GetDefaultName();
    [NullableContextAttribute("2")]
public virtual string SetName(string name, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual void SetName(string name, string schema, ConfigurationSource configurationSource, bool skipOverrides);
    public virtual Nullable`1<ConfigurationSource> GetNameConfigurationSource();
    public virtual bool get_IsRowsAffectedReturned();
    public virtual void set_IsRowsAffectedReturned(bool value);
    public virtual bool SetIsRowsAffectedReturned(bool rowsAffectedReturned);
    private static void UpdateOverrides(StoreObjectIdentifier oldId, Nullable`1<StoreObjectIdentifier> newId, IConventionEntityType entityType);
    [DebuggerStepThroughAttribute]
public virtual IReadOnlyList`1<StoredProcedureParameter> get_Parameters();
    public virtual StoredProcedureParameter FindParameter(string propertyName);
    public virtual StoredProcedureParameter AddParameter(string propertyName);
    public virtual StoredProcedureParameter FindOriginalValueParameter(string propertyName);
    public virtual StoredProcedureParameter AddOriginalValueParameter(string propertyName);
    [NullableContextAttribute("2")]
public virtual StoredProcedureParameter FindRowsAffectedParameter();
    public virtual StoredProcedureParameter AddRowsAffectedParameter();
    [DebuggerStepThroughAttribute]
public virtual IReadOnlyList`1<StoredProcedureResultColumn> get_ResultColumns();
    public virtual StoredProcedureResultColumn FindResultColumn(string propertyName);
    public virtual StoredProcedureResultColumn AddResultColumn(string propertyName);
    [NullableContextAttribute("2")]
public virtual StoredProcedureResultColumn FindRowsAffectedResultColumn();
    public virtual StoredProcedureResultColumn AddRowsAffectedResultColumn();
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedure.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.get_Name();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.get_EntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedure.get_EntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.get_EntityType();
    private sealed virtual override IStoreStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.get_StoreStoredProcedure();
    private sealed virtual override IStoreStoredProcedure Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeStoredProcedure.get_StoreStoredProcedure();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeStoredProcedure.set_StoreStoredProcedure(IStoreStoredProcedure value);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IReadOnlyStoredProcedureParameter> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.get_Parameters();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IMutableStoredProcedureParameter> Microsoft.EntityFrameworkCore.Metadata.IMutableStoredProcedure.get_Parameters();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IConventionStoredProcedureParameter> Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedure.get_Parameters();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IStoredProcedureParameter> Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.get_Parameters();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IReadOnlyStoredProcedureResultColumn> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.get_ResultColumns();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IMutableStoredProcedureResultColumn> Microsoft.EntityFrameworkCore.Metadata.IMutableStoredProcedure.get_ResultColumns();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IConventionStoredProcedureResultColumn> Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedure.get_ResultColumns();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IStoredProcedureResultColumn> Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.get_ResultColumns();
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedure.SetName(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedure.SetSchema(string schema, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedure.SetIsRowsAffectedReturned(bool rowsAffectedReturned, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.FindParameter(string propertyName);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IMutableStoredProcedure.FindParameter(string propertyName);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedure.FindParameter(string propertyName);
    [DebuggerStepThroughAttribute]
private sealed virtual override IStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.FindParameter(string propertyName);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedure.AddParameter(string propertyName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IMutableStoredProcedure.AddParameter(string propertyName);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.FindOriginalValueParameter(string propertyName);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IMutableStoredProcedure.FindOriginalValueParameter(string propertyName);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedure.FindOriginalValueParameter(string propertyName);
    [DebuggerStepThroughAttribute]
private sealed virtual override IStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.FindOriginalValueParameter(string propertyName);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IMutableStoredProcedure.AddOriginalValueParameter(string propertyName);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedure.AddOriginalValueParameter(string propertyName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.FindRowsAffectedParameter();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IMutableStoredProcedure.FindRowsAffectedParameter();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedure.FindRowsAffectedParameter();
    [DebuggerStepThroughAttribute]
private sealed virtual override IStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.FindRowsAffectedParameter();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IMutableStoredProcedure.AddRowsAffectedParameter();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedure.AddRowsAffectedParameter(bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyStoredProcedureResultColumn Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.FindResultColumn(string propertyName);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableStoredProcedureResultColumn Microsoft.EntityFrameworkCore.Metadata.IMutableStoredProcedure.FindResultColumn(string propertyName);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureResultColumn Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedure.FindResultColumn(string propertyName);
    [DebuggerStepThroughAttribute]
private sealed virtual override IStoredProcedureResultColumn Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.FindResultColumn(string propertyName);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableStoredProcedureResultColumn Microsoft.EntityFrameworkCore.Metadata.IMutableStoredProcedure.AddResultColumn(string propertyName);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureResultColumn Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedure.AddResultColumn(string propertyName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyStoredProcedureResultColumn Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.FindRowsAffectedResultColumn();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableStoredProcedureResultColumn Microsoft.EntityFrameworkCore.Metadata.IMutableStoredProcedure.FindRowsAffectedResultColumn();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureResultColumn Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedure.FindRowsAffectedResultColumn();
    [DebuggerStepThroughAttribute]
private sealed virtual override IStoredProcedureResultColumn Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.FindRowsAffectedResultColumn();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableStoredProcedureResultColumn Microsoft.EntityFrameworkCore.Metadata.IMutableStoredProcedure.AddRowsAffectedResultColumn();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureResultColumn Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedure.AddRowsAffectedResultColumn(bool fromDataAnnotation);
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__72_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__72_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.StoredProcedureComparer : object {
    public static StoredProcedureComparer Instance;
    private static StoredProcedureComparer();
    [NullableContextAttribute("2")]
public sealed virtual int Compare(IStoredProcedure x, IStoredProcedure y);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IStoredProcedure x, IStoredProcedure y);
    public sealed virtual int GetHashCode(IStoredProcedure obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.StoredProcedureMapping : TableMappingBase`1<IStoredProcedureResultColumnMapping> {
    [CompilerGeneratedAttribute]
private IStoredProcedure <StoredProcedure>k__BackingField;
    [CompilerGeneratedAttribute]
private StoreObjectIdentifier <StoredProcedureIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private ITableMapping <TableMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IStoredProcedureParameterMapping> <ParameterMappings>k__BackingField;
    public IStoreStoredProcedure StoreStoredProcedure { get; }
    public IStoredProcedure StoredProcedure { get; }
    public StoreObjectIdentifier StoredProcedureIdentifier { get; }
    [NullableAttribute("2")]
public ITableMapping TableMapping { get; }
    public List`1<IStoredProcedureParameterMapping> ParameterMappings { get; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IEnumerable`1<IStoredProcedureResultColumnMapping> Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureMapping.ResultColumnMappings { get; }
    private IEnumerable`1<IStoredProcedureParameterMapping> Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureMapping.ParameterMappings { get; }
    public StoredProcedureMapping(IEntityType entityType, StoreStoredProcedure storeStoredProcedure, IStoredProcedure storedProcedure, ITableMapping tableMapping, bool includesDerivedTypes);
    public virtual IStoreStoredProcedure get_StoreStoredProcedure();
    [CompilerGeneratedAttribute]
public virtual IStoredProcedure get_StoredProcedure();
    [CompilerGeneratedAttribute]
public virtual StoreObjectIdentifier get_StoredProcedureIdentifier();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual ITableMapping get_TableMapping();
    [CompilerGeneratedAttribute]
public virtual List`1<IStoredProcedureParameterMapping> get_ParameterMappings();
    public virtual bool AddParameterMapping(IStoredProcedureParameterMapping parameterMapping);
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IStoredProcedureResultColumnMapping> Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureMapping.get_ResultColumnMappings();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IStoredProcedureParameterMapping> Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureMapping.get_ParameterMappings();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__18_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__18_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.StoredProcedureParameter : ConventionAnnotatable {
    private string _name;
    private Nullable`1<ParameterDirection> _direction;
    private Nullable`1<ConfigurationSource> _nameConfigurationSource;
    private Nullable`1<ConfigurationSource> _directionConfigurationSource;
    private InternalStoredProcedureParameterBuilder _builder;
    [CompilerGeneratedAttribute]
private StoredProcedure <StoredProcedure>k__BackingField;
    [CompilerGeneratedAttribute]
private IStoreStoredProcedureParameter <StoreParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ForOriginalValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForRowsAffected>k__BackingField;
    public InternalStoredProcedureParameterBuilder Builder { get; }
    public bool IsInModel { get; }
    public bool IsReadOnly { get; }
    public StoredProcedure StoredProcedure { get; }
    public IStoreStoredProcedureParameter StoreParameter { get; public set; }
    [NullableAttribute("2")]
public string PropertyName { get; }
    public Nullable`1<bool> ForOriginalValue { get; }
    public bool ForRowsAffected { get; }
    public string Name { get; public set; }
    public ParameterDirection Direction { get; public set; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IReadOnlyStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureParameter.StoredProcedure { get; }
    private IMutableStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IMutableStoredProcedureParameter.StoredProcedure { get; }
    private IConventionStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedureParameter.StoredProcedure { get; }
    private IStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureParameter.StoredProcedure { get; }
    private IConventionStoredProcedureParameterBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedureParameter.Builder { get; }
    public StoredProcedureParameter(StoredProcedure storedProcedure, bool rowsAffected, string propertyName, Nullable`1<bool> originalValue);
    [DebuggerStepThroughAttribute]
public virtual InternalStoredProcedureParameterBuilder get_Builder();
    public virtual bool get_IsInModel();
    public virtual void SetRemovedFromModel();
    public virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public virtual StoredProcedure get_StoredProcedure();
    [CompilerGeneratedAttribute]
public virtual IStoreStoredProcedureParameter get_StoreParameter();
    [CompilerGeneratedAttribute]
public virtual void set_StoreParameter(IStoreStoredProcedureParameter value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_PropertyName();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_ForOriginalValue();
    [CompilerGeneratedAttribute]
public virtual bool get_ForRowsAffected();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string SetName(string name, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetNameConfigurationSource();
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    public virtual ParameterDirection SetDirection(ParameterDirection direction, ConfigurationSource configurationSource);
    public virtual bool IsValid(ParameterDirection direction);
    public virtual Nullable`1<ConfigurationSource> GetDirectionConfigurationSource();
    private IMutableProperty GetProperty();
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureParameter.get_StoredProcedure();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IMutableStoredProcedureParameter.get_StoredProcedure();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedureParameter.get_StoredProcedure();
    [DebuggerStepThroughAttribute]
private sealed virtual override IStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureParameter.get_StoredProcedure();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureParameterBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedureParameter.get_Builder();
    private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedureParameter.SetName(string name, bool fromDataAnnotation);
    private sealed virtual override ParameterDirection Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedureParameter.SetDirection(ParameterDirection direction, bool fromDataAnnotation);
    [CompilerGeneratedAttribute]
private IMutableProperty <GetProperty>b__40_0(IMutableEntityType t);
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__43_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__43_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.StoredProcedureParameterMapping : ColumnMappingBase {
    [CompilerGeneratedAttribute]
private IStoredProcedureParameter <Parameter>k__BackingField;
    public IStoredProcedureParameter Parameter { get; }
    public IStoredProcedureMapping StoredProcedureMapping { get; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IStoreStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureParameterMapping.StoreParameter { get; }
    public StoredProcedureParameterMapping(IProperty property, IStoredProcedureParameter parameter, StoreStoredProcedureParameter storeParameter, StoredProcedureMapping storedProcedureMapping);
    [CompilerGeneratedAttribute]
public virtual IStoredProcedureParameter get_Parameter();
    public virtual IStoredProcedureMapping get_StoredProcedureMapping();
    protected virtual RelationalTypeMapping GetTypeMapping();
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IStoreStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureParameterMapping.get_StoreParameter();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__9_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__9_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.StoredProcedureResultColumn : ConventionAnnotatable {
    private string _name;
    private Nullable`1<ConfigurationSource> _nameConfigurationSource;
    private InternalStoredProcedureResultColumnBuilder _builder;
    [CompilerGeneratedAttribute]
private StoredProcedure <StoredProcedure>k__BackingField;
    [CompilerGeneratedAttribute]
private IStoreStoredProcedureResultColumn <StoreResultColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForRowsAffected>k__BackingField;
    public InternalStoredProcedureResultColumnBuilder Builder { get; }
    public bool IsInModel { get; }
    public bool IsReadOnly { get; }
    public StoredProcedure StoredProcedure { get; }
    public IStoreStoredProcedureResultColumn StoreResultColumn { get; public set; }
    [NullableAttribute("2")]
public string PropertyName { get; }
    public bool ForRowsAffected { get; }
    public string Name { get; public set; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IReadOnlyStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureResultColumn.StoredProcedure { get; }
    private IMutableStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IMutableStoredProcedureResultColumn.StoredProcedure { get; }
    private IConventionStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedureResultColumn.StoredProcedure { get; }
    private IStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureResultColumn.StoredProcedure { get; }
    private IConventionStoredProcedureResultColumnBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedureResultColumn.Builder { get; }
    public StoredProcedureResultColumn(StoredProcedure storedProcedure, bool forRowsAffected, string propertyName);
    [DebuggerStepThroughAttribute]
public virtual InternalStoredProcedureResultColumnBuilder get_Builder();
    public virtual bool get_IsInModel();
    public virtual void SetRemovedFromModel();
    public virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public virtual StoredProcedure get_StoredProcedure();
    [CompilerGeneratedAttribute]
public virtual IStoreStoredProcedureResultColumn get_StoreResultColumn();
    [CompilerGeneratedAttribute]
public virtual void set_StoreResultColumn(IStoreStoredProcedureResultColumn value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_PropertyName();
    [CompilerGeneratedAttribute]
public virtual bool get_ForRowsAffected();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string SetName(string name, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetNameConfigurationSource();
    private IMutableProperty GetProperty();
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureResultColumn.get_StoredProcedure();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IMutableStoredProcedureResultColumn.get_StoredProcedure();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedureResultColumn.get_StoredProcedure();
    [DebuggerStepThroughAttribute]
private sealed virtual override IStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureResultColumn.get_StoredProcedure();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionStoredProcedureResultColumnBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedureResultColumn.get_Builder();
    private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IConventionStoredProcedureResultColumn.SetName(string name, bool fromDataAnnotation);
    [CompilerGeneratedAttribute]
private IMutableProperty <GetProperty>b__29_0(IMutableEntityType t);
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__32_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__32_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.StoredProcedureResultColumnMapping : ColumnMappingBase {
    [CompilerGeneratedAttribute]
private IStoredProcedureResultColumn <ResultColumn>k__BackingField;
    public IStoredProcedureResultColumn ResultColumn { get; }
    public IStoredProcedureMapping StoredProcedureMapping { get; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IStoreStoredProcedureResultColumn Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureResultColumnMapping.StoreResultColumn { get; }
    public StoredProcedureResultColumnMapping(IProperty property, IStoredProcedureResultColumn resultColumn, StoreStoredProcedureResultColumn storeResultColumn, StoredProcedureMapping storedProcedureMapping);
    [CompilerGeneratedAttribute]
public virtual IStoredProcedureResultColumn get_ResultColumn();
    public virtual IStoredProcedureMapping get_StoredProcedureMapping();
    protected virtual RelationalTypeMapping GetTypeMapping();
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IStoreStoredProcedureResultColumn Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureResultColumnMapping.get_StoreResultColumn();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__9_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__9_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunction : TableBase {
    [CompilerGeneratedAttribute]
private SortedDictionary`2<string, IDbFunction> <DbFunctions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBuiltIn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private StoreFunctionParameter[] <Parameters>k__BackingField;
    public SortedDictionary`2<string, IDbFunction> DbFunctions { get; }
    public bool IsBuiltIn { get; }
    [NullableAttribute("2")]
public string ReturnType { get; }
    public StoreFunctionParameter[] Parameters { get; }
    private IEnumerable`1<IFunctionMapping> Microsoft.EntityFrameworkCore.Metadata.IStoreFunction.EntityTypeMappings { get; }
    private IEnumerable`1<IFunctionColumn> Microsoft.EntityFrameworkCore.Metadata.IStoreFunction.Columns { get; }
    private IEnumerable`1<IStoreFunctionParameter> Microsoft.EntityFrameworkCore.Metadata.IStoreFunction.Parameters { get; }
    private IEnumerable`1<IDbFunction> Microsoft.EntityFrameworkCore.Metadata.IStoreFunction.DbFunctions { get; }
    public StoreFunction(IRuntimeDbFunction dbFunction, RelationalModel model);
    [CompilerGeneratedAttribute]
public virtual SortedDictionary`2<string, IDbFunction> get_DbFunctions();
    [CompilerGeneratedAttribute]
public virtual bool get_IsBuiltIn();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_ReturnType();
    [CompilerGeneratedAttribute]
public virtual StoreFunctionParameter[] get_Parameters();
    public virtual IColumnBase FindColumn(IProperty property);
    public virtual string ToString();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IFunctionMapping> Microsoft.EntityFrameworkCore.Metadata.IStoreFunction.get_EntityTypeMappings();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IFunctionColumn> Microsoft.EntityFrameworkCore.Metadata.IStoreFunction.get_Columns();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IStoreFunctionParameter> Microsoft.EntityFrameworkCore.Metadata.IStoreFunction.get_Parameters();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IDbFunction> Microsoft.EntityFrameworkCore.Metadata.IStoreFunction.get_DbFunctions();
    [DebuggerStepThroughAttribute]
private sealed virtual override IFunctionColumn Microsoft.EntityFrameworkCore.Metadata.IStoreFunction.FindColumn(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IFunctionColumn Microsoft.EntityFrameworkCore.Metadata.IStoreFunction.FindColumn(IProperty property);
    [CompilerGeneratedAttribute]
private bool <FindColumn>b__13_0(IFunctionColumnMapping cm);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunctionParameter : Annotatable {
    [CompilerGeneratedAttribute]
private StoreFunction <Function>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IDbFunctionParameter> <DbFunctionParameters>k__BackingField;
    public StoreFunction Function { get; }
    public bool IsReadOnly { get; }
    public string Name { get; }
    public string Type { get; }
    public List`1<IDbFunctionParameter> DbFunctionParameters { get; }
    private IStoreFunction Microsoft.EntityFrameworkCore.Metadata.IStoreFunctionParameter.Function { get; }
    private IEnumerable`1<IDbFunctionParameter> Microsoft.EntityFrameworkCore.Metadata.IStoreFunctionParameter.DbFunctionParameters { get; }
    public StoreFunctionParameter(StoreFunction function, IRuntimeDbFunctionParameter parameter);
    [CompilerGeneratedAttribute]
public virtual StoreFunction get_Function();
    public virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual List`1<IDbFunctionParameter> get_DbFunctionParameters();
    public virtual string ToString();
    [DebuggerStepThroughAttribute]
private sealed virtual override IStoreFunction Microsoft.EntityFrameworkCore.Metadata.IStoreFunctionParameter.get_Function();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IDbFunctionParameter> Microsoft.EntityFrameworkCore.Metadata.IStoreFunctionParameter.get_DbFunctionParameters();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.StoreStoredProcedure : TableBase {
    private SortedDictionary`2<string, IStoreStoredProcedureParameter> _parametersSet;
    [CompilerGeneratedAttribute]
private SortedSet`1<IStoredProcedure> <StoredProcedures>k__BackingField;
    [CompilerGeneratedAttribute]
private IStoreStoredProcedureReturnValue <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IStoreStoredProcedureParameter> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IStoreStoredProcedureResultColumn> <ResultColumns>k__BackingField;
    public SortedSet`1<IStoredProcedure> StoredProcedures { get; }
    [NullableAttribute("2")]
public IStoreStoredProcedureReturnValue ReturnValue { get; public set; }
    public List`1<IStoreStoredProcedureParameter> Parameters { get; protected set; }
    public List`1<IStoreStoredProcedureResultColumn> ResultColumns { get; protected set; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IEnumerable`1<IStoredProcedure> Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedure.StoredProcedures { get; }
    private IEnumerable`1<IStoredProcedureMapping> Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedure.EntityTypeMappings { get; }
    private IReadOnlyList`1<IStoreStoredProcedureParameter> Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedure.Parameters { get; }
    private IEnumerable`1<IStoreStoredProcedureResultColumn> Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedure.ResultColumns { get; }
    public StoreStoredProcedure(IRuntimeStoredProcedure sproc, RelationalModel model);
    [CompilerGeneratedAttribute]
public virtual SortedSet`1<IStoredProcedure> get_StoredProcedures();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual IStoreStoredProcedureReturnValue get_ReturnValue();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_ReturnValue(IStoreStoredProcedureReturnValue value);
    [CompilerGeneratedAttribute]
public virtual List`1<IStoreStoredProcedureParameter> get_Parameters();
    [CompilerGeneratedAttribute]
protected virtual void set_Parameters(List`1<IStoreStoredProcedureParameter> value);
    public virtual void AddParameter(IStoreStoredProcedureParameter parameter);
    public virtual IStoreStoredProcedureParameter FindParameter(string name);
    public virtual IStoreStoredProcedureParameter FindParameter(IProperty property);
    [CompilerGeneratedAttribute]
public virtual List`1<IStoreStoredProcedureResultColumn> get_ResultColumns();
    [CompilerGeneratedAttribute]
protected virtual void set_ResultColumns(List`1<IStoreStoredProcedureResultColumn> value);
    public virtual void AddResultColumn(IStoreStoredProcedureResultColumn column);
    public virtual IColumnBase FindColumn(IProperty property);
    [DebuggerStepThroughAttribute]
public virtual IStoreStoredProcedureResultColumn FindResultColumn(string name);
    [DebuggerStepThroughAttribute]
public virtual IStoreStoredProcedureResultColumn FindResultColumn(IProperty property);
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IStoredProcedure> Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedure.get_StoredProcedures();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IStoredProcedureMapping> Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedure.get_EntityTypeMappings();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IStoreStoredProcedureParameter> Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedure.get_Parameters();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IStoreStoredProcedureResultColumn> Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedure.get_ResultColumns();
    [CompilerGeneratedAttribute]
private bool <FindParameter>b__15_0(IStoredProcedureParameterMapping cm);
    [CompilerGeneratedAttribute]
private bool <FindColumn>b__21_0(IStoredProcedureResultColumnMapping cm);
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__26_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__26_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.StoreStoredProcedureParameter : ColumnBase`1<StoredProcedureParameterMapping> {
    private RelationalTypeMapping _storeTypeMapping;
    [CompilerGeneratedAttribute]
private ParameterDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public StoreStoredProcedure StoredProcedure { get; }
    public ParameterDirection Direction { get; }
    public int Position { get; }
    public RelationalTypeMapping StoreTypeMapping { get; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IStoreStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedureParameter.StoredProcedure { get; }
    private IReadOnlyList`1<IStoredProcedureParameterMapping> Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedureParameter.PropertyMappings { get; }
    public StoreStoredProcedureParameter(string name, string type, int position, StoreStoredProcedure storedProcedure, ParameterDirection direction, RelationalTypeMapping storeTypeMapping);
    public virtual StoreStoredProcedure get_StoredProcedure();
    [CompilerGeneratedAttribute]
public virtual ParameterDirection get_Direction();
    [CompilerGeneratedAttribute]
public virtual int get_Position();
    public virtual RelationalTypeMapping get_StoreTypeMapping();
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IStoreStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedureParameter.get_StoredProcedure();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IStoredProcedureParameterMapping> Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedureParameter.get_PropertyMappings();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__14_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__14_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.StoreStoredProcedureResultColumn : ColumnBase`1<StoredProcedureResultColumnMapping> {
    private RelationalTypeMapping _storeTypeMapping;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public StoreStoredProcedure StoredProcedure { get; }
    public int Position { get; }
    public RelationalTypeMapping StoreTypeMapping { get; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IStoreStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedureResultColumn.StoredProcedure { get; }
    private IReadOnlyList`1<IStoredProcedureResultColumnMapping> Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedureResultColumn.PropertyMappings { get; }
    public StoreStoredProcedureResultColumn(string name, string type, int position, StoreStoredProcedure storedProcedure, RelationalTypeMapping storeTypeMapping);
    public virtual StoreStoredProcedure get_StoredProcedure();
    [CompilerGeneratedAttribute]
public virtual int get_Position();
    public virtual RelationalTypeMapping get_StoreTypeMapping();
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IStoreStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedureResultColumn.get_StoredProcedure();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IStoredProcedureResultColumnMapping> Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedureResultColumn.get_PropertyMappings();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__11_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__11_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.StoreStoredProcedureReturnValue : ColumnBase`1<ColumnMappingBase> {
    private RelationalTypeMapping _storeTypeMapping;
    public StoreStoredProcedure StoredProcedure { get; }
    public RelationalTypeMapping StoreTypeMapping { get; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IStoreStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedureReturnValue.StoredProcedure { get; }
    public StoreStoredProcedureReturnValue(string name, string type, StoreStoredProcedure storedProcedure, RelationalTypeMapping storeTypeMapping);
    public virtual StoreStoredProcedure get_StoredProcedure();
    public virtual RelationalTypeMapping get_StoreTypeMapping();
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IStoreStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedureReturnValue.get_StoredProcedure();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__8_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__8_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.Table : TableBase {
    private UniqueConstraint _primaryKey;
    [CompilerGeneratedAttribute]
private SortedSet`1<ForeignKeyConstraint> <ForeignKeyConstraints>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedSet`1<ForeignKeyConstraint> <ReferencingForeignKeyConstraints>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedDictionary`2<string, UniqueConstraint> <UniqueConstraints>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedDictionary`2<string, TableIndex> <Indexes>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedDictionary`2<string, CheckConstraint> <CheckConstraints>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedDictionary`2<string, ITrigger> <Triggers>k__BackingField;
    public SortedSet`1<ForeignKeyConstraint> ForeignKeyConstraints { get; }
    public SortedSet`1<ForeignKeyConstraint> ReferencingForeignKeyConstraints { get; }
    [NullableAttribute("2")]
public UniqueConstraint PrimaryKey { get; public set; }
    public SortedDictionary`2<string, UniqueConstraint> UniqueConstraints { get; }
    public SortedDictionary`2<string, TableIndex> Indexes { get; }
    public SortedDictionary`2<string, CheckConstraint> CheckConstraints { get; }
    public SortedDictionary`2<string, ITrigger> Triggers { get; }
    public bool IsExcludedFromMigrations { get; }
    private IEnumerable`1<ITableMapping> Microsoft.EntityFrameworkCore.Metadata.ITable.EntityTypeMappings { get; }
    private IEnumerable`1<IColumn> Microsoft.EntityFrameworkCore.Metadata.ITable.Columns { get; }
    private IEnumerable`1<IForeignKeyConstraint> Microsoft.EntityFrameworkCore.Metadata.ITable.ForeignKeyConstraints { get; }
    private IEnumerable`1<IForeignKeyConstraint> Microsoft.EntityFrameworkCore.Metadata.ITable.ReferencingForeignKeyConstraints { get; }
    [NullableAttribute("2")]
private IPrimaryKeyConstraint Microsoft.EntityFrameworkCore.Metadata.ITable.PrimaryKey { get; }
    private IEnumerable`1<IUniqueConstraint> Microsoft.EntityFrameworkCore.Metadata.ITable.UniqueConstraints { get; }
    private IEnumerable`1<ITableIndex> Microsoft.EntityFrameworkCore.Metadata.ITable.Indexes { get; }
    private IEnumerable`1<ICheckConstraint> Microsoft.EntityFrameworkCore.Metadata.ITable.CheckConstraints { get; }
    private IEnumerable`1<ITrigger> Microsoft.EntityFrameworkCore.Metadata.ITable.Triggers { get; }
    public Table(string name, string schema, RelationalModel model);
    [CompilerGeneratedAttribute]
public virtual SortedSet`1<ForeignKeyConstraint> get_ForeignKeyConstraints();
    [CompilerGeneratedAttribute]
public virtual SortedSet`1<ForeignKeyConstraint> get_ReferencingForeignKeyConstraints();
    [NullableContextAttribute("2")]
public virtual UniqueConstraint get_PrimaryKey();
    [NullableContextAttribute("2")]
public virtual void set_PrimaryKey(UniqueConstraint value);
    [CompilerGeneratedAttribute]
public virtual SortedDictionary`2<string, UniqueConstraint> get_UniqueConstraints();
    public virtual UniqueConstraint FindUniqueConstraint(string name);
    [CompilerGeneratedAttribute]
public virtual SortedDictionary`2<string, TableIndex> get_Indexes();
    [CompilerGeneratedAttribute]
public virtual SortedDictionary`2<string, CheckConstraint> get_CheckConstraints();
    [CompilerGeneratedAttribute]
public virtual SortedDictionary`2<string, ITrigger> get_Triggers();
    public virtual bool get_IsExcludedFromMigrations();
    public virtual IColumnBase FindColumn(IProperty property);
    public virtual string ToString();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<ITableMapping> Microsoft.EntityFrameworkCore.Metadata.ITable.get_EntityTypeMappings();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IColumn> Microsoft.EntityFrameworkCore.Metadata.ITable.get_Columns();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IForeignKeyConstraint> Microsoft.EntityFrameworkCore.Metadata.ITable.get_ForeignKeyConstraints();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IForeignKeyConstraint> Microsoft.EntityFrameworkCore.Metadata.ITable.get_ReferencingForeignKeyConstraints();
    [DebuggerStepThroughAttribute]
private sealed virtual override IPrimaryKeyConstraint Microsoft.EntityFrameworkCore.Metadata.ITable.get_PrimaryKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IUniqueConstraint> Microsoft.EntityFrameworkCore.Metadata.ITable.get_UniqueConstraints();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<ITableIndex> Microsoft.EntityFrameworkCore.Metadata.ITable.get_Indexes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<ICheckConstraint> Microsoft.EntityFrameworkCore.Metadata.ITable.get_CheckConstraints();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<ITrigger> Microsoft.EntityFrameworkCore.Metadata.ITable.get_Triggers();
    [DebuggerStepThroughAttribute]
private sealed virtual override IColumn Microsoft.EntityFrameworkCore.Metadata.ITable.FindColumn(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IColumn Microsoft.EntityFrameworkCore.Metadata.ITable.FindColumn(IProperty property);
    [CompilerGeneratedAttribute]
private bool <FindColumn>b__26_0(IColumnMapping cm);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.TableBase : Annotatable {
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsShared>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedSet`1<ITableMappingBase> <EntityTypeMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedDictionary`2<string, IColumnBase> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedDictionary`2<IEntityType, IEnumerable`1<IForeignKey>> <RowInternalForeignKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedDictionary`2<IEntityType, IEnumerable`1<IForeignKey>> <ReferencingRowInternalForeignKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IEntityType, bool> <OptionalEntityTypes>k__BackingField;
    [NullableAttribute("2")]
public string Schema { get; }
    public string Name { get; }
    public RelationalModel Model { get; }
    public bool IsReadOnly { get; }
    public bool IsShared { get; public set; }
    public SortedSet`1<ITableMappingBase> EntityTypeMappings { get; }
    public SortedDictionary`2<string, IColumnBase> Columns { get; protected set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SortedDictionary`2<IEntityType, IEnumerable`1<IForeignKey>> RowInternalForeignKeys { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SortedDictionary`2<IEntityType, IEnumerable`1<IForeignKey>> ReferencingRowInternalForeignKeys { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<IEntityType, bool> OptionalEntityTypes { get; public set; }
    private IRelationalModel Microsoft.EntityFrameworkCore.Metadata.ITableBase.Model { get; }
    private IEnumerable`1<ITableMappingBase> Microsoft.EntityFrameworkCore.Metadata.ITableBase.EntityTypeMappings { get; }
    private IEnumerable`1<IColumnBase> Microsoft.EntityFrameworkCore.Metadata.ITableBase.Columns { get; }
    public TableBase(string name, string schema, RelationalModel model);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual RelationalModel get_Model();
    public virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public virtual bool get_IsShared();
    [CompilerGeneratedAttribute]
public virtual void set_IsShared(bool value);
    [CompilerGeneratedAttribute]
public virtual SortedSet`1<ITableMappingBase> get_EntityTypeMappings();
    [CompilerGeneratedAttribute]
public virtual SortedDictionary`2<string, IColumnBase> get_Columns();
    [CompilerGeneratedAttribute]
protected virtual void set_Columns(SortedDictionary`2<string, IColumnBase> value);
    public virtual IColumnBase FindColumn(string name);
    public virtual IColumnBase FindColumn(IProperty property);
    [CompilerGeneratedAttribute]
public virtual SortedDictionary`2<IEntityType, IEnumerable`1<IForeignKey>> get_RowInternalForeignKeys();
    [CompilerGeneratedAttribute]
public virtual void set_RowInternalForeignKeys(SortedDictionary`2<IEntityType, IEnumerable`1<IForeignKey>> value);
    [CompilerGeneratedAttribute]
public virtual SortedDictionary`2<IEntityType, IEnumerable`1<IForeignKey>> get_ReferencingRowInternalForeignKeys();
    [CompilerGeneratedAttribute]
public virtual void set_ReferencingRowInternalForeignKeys(SortedDictionary`2<IEntityType, IEnumerable`1<IForeignKey>> value);
    [CompilerGeneratedAttribute]
public virtual Dictionary`2<IEntityType, bool> get_OptionalEntityTypes();
    [CompilerGeneratedAttribute]
public virtual void set_OptionalEntityTypes(Dictionary`2<IEntityType, bool> value);
    public virtual bool IsOptional(IEntityType entityType);
    private void CheckMappedEntityType(IEntityType entityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IRelationalModel Microsoft.EntityFrameworkCore.Metadata.ITableBase.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<ITableMappingBase> Microsoft.EntityFrameworkCore.Metadata.ITableBase.get_EntityTypeMappings();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IColumnBase> Microsoft.EntityFrameworkCore.Metadata.ITableBase.get_Columns();
    private sealed virtual override IEnumerable`1<IForeignKey> Microsoft.EntityFrameworkCore.Metadata.ITableBase.GetRowInternalForeignKeys(IEntityType entityType);
    private sealed virtual override IEnumerable`1<IForeignKey> Microsoft.EntityFrameworkCore.Metadata.ITableBase.GetReferencingRowInternalForeignKeys(IEntityType entityType);
    [CompilerGeneratedAttribute]
private bool <FindColumn>b__24_0(IColumnMappingBase cm);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.TableBaseIdentityComparer : object {
    public static TableBaseIdentityComparer Instance;
    private static TableBaseIdentityComparer();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(ITableBase x, ITableBase y);
    public sealed virtual int GetHashCode(ITableBase obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.TableIndex : Annotatable {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedSet`1<IIndex> <MappedIndexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Table <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Column> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUnique>k__BackingField;
    private IRowIndexValueFactory _rowIndexValueFactory;
    public string Name { get; }
    public SortedSet`1<IIndex> MappedIndexes { get; }
    public Table Table { get; }
    public IReadOnlyList`1<Column> Columns { get; }
    public bool IsReadOnly { get; }
    public bool IsUnique { get; }
    [NullableAttribute("2")]
public IReadOnlyList`1<bool> IsDescending { get; }
    [NullableAttribute("2")]
public string Filter { get; }
    private ITable Microsoft.EntityFrameworkCore.Metadata.ITableIndex.Table { get; }
    private IReadOnlyList`1<IColumn> Microsoft.EntityFrameworkCore.Metadata.ITableIndex.Columns { get; }
    private IEnumerable`1<IIndex> Microsoft.EntityFrameworkCore.Metadata.ITableIndex.MappedIndexes { get; }
    public TableIndex(string name, Table table, IReadOnlyList`1<Column> columns, bool unique);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual SortedSet`1<IIndex> get_MappedIndexes();
    [CompilerGeneratedAttribute]
public virtual Table get_Table();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<Column> get_Columns();
    public virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public virtual bool get_IsUnique();
    [NullableContextAttribute("2")]
public virtual IReadOnlyList`1<bool> get_IsDescending();
    [NullableContextAttribute("2")]
public virtual string get_Filter();
    public virtual IRowIndexValueFactory GetRowIndexValueFactory();
    public virtual string ToString();
    private sealed virtual override ITable Microsoft.EntityFrameworkCore.Metadata.ITableIndex.get_Table();
    private sealed virtual override IReadOnlyList`1<IColumn> Microsoft.EntityFrameworkCore.Metadata.ITableIndex.get_Columns();
    private sealed virtual override IEnumerable`1<IIndex> Microsoft.EntityFrameworkCore.Metadata.ITableIndex.get_MappedIndexes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.TableIndexComparer : object {
    public static TableIndexComparer Instance;
    private static TableIndexComparer();
    [NullableContextAttribute("2")]
public sealed virtual int Compare(ITableIndex x, ITableIndex y);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(ITableIndex x, ITableIndex y);
    public sealed virtual int GetHashCode(ITableIndex obj);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.TableMapping : TableMappingBase`1<ColumnMapping> {
    [CompilerGeneratedAttribute]
private IStoredProcedureMapping <InsertStoredProcedureMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private IStoredProcedureMapping <DeleteStoredProcedureMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private IStoredProcedureMapping <UpdateStoredProcedureMapping>k__BackingField;
    [NullableAttribute("1")]
public ITable Table { get; }
    public IStoredProcedureMapping InsertStoredProcedureMapping { get; public set; }
    public IStoredProcedureMapping DeleteStoredProcedureMapping { get; public set; }
    public IStoredProcedureMapping UpdateStoredProcedureMapping { get; public set; }
    [NullableAttribute("1")]
private ITableBase Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.Table { get; }
    [NullableAttribute("1")]
private IEnumerable`1<IColumnMapping> Microsoft.EntityFrameworkCore.Metadata.ITableMapping.ColumnMappings { get; }
    [NullableContextAttribute("1")]
public TableMapping(IEntityType entityType, Table table, bool includesDerivedTypes);
    [NullableContextAttribute("1")]
public virtual ITable get_Table();
    [CompilerGeneratedAttribute]
public virtual IStoredProcedureMapping get_InsertStoredProcedureMapping();
    [CompilerGeneratedAttribute]
public virtual void set_InsertStoredProcedureMapping(IStoredProcedureMapping value);
    [CompilerGeneratedAttribute]
public virtual IStoredProcedureMapping get_DeleteStoredProcedureMapping();
    [CompilerGeneratedAttribute]
public virtual void set_DeleteStoredProcedureMapping(IStoredProcedureMapping value);
    [CompilerGeneratedAttribute]
public virtual IStoredProcedureMapping get_UpdateStoredProcedureMapping();
    [CompilerGeneratedAttribute]
public virtual void set_UpdateStoredProcedureMapping(IStoredProcedureMapping value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [DebuggerStepThroughAttribute]
private sealed virtual override ITableBase Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.get_Table();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IColumnMapping> Microsoft.EntityFrameworkCore.Metadata.ITableMapping.get_ColumnMappings();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.TableMappingBase`1 : Annotatable {
    [CompilerGeneratedAttribute]
private IEntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private TableBase <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TColumnMapping> <ColumnMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludesDerivedTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsSharedTablePrincipal>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsSplitEntityTypePrincipal>k__BackingField;
    public IEntityType EntityType { get; }
    public TableBase Table { get; }
    public bool IsReadOnly { get; }
    protected List`1<TColumnMapping> ColumnMappings { get; }
    public bool IncludesDerivedTypes { get; }
    public Nullable`1<bool> IsSharedTablePrincipal { get; public set; }
    public Nullable`1<bool> IsSplitEntityTypePrincipal { get; public set; }
    private IEnumerable`1<IColumnMappingBase> Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.ColumnMappings { get; }
    private ITableBase Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.Table { get; }
    public TableMappingBase`1(IEntityType entityType, TableBase table, bool includesDerivedTypes);
    [CompilerGeneratedAttribute]
public virtual IEntityType get_EntityType();
    [CompilerGeneratedAttribute]
public virtual TableBase get_Table();
    public virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
protected virtual List`1<TColumnMapping> get_ColumnMappings();
    public virtual bool AddColumnMapping(TColumnMapping columnMapping);
    [CompilerGeneratedAttribute]
public virtual bool get_IncludesDerivedTypes();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsSharedTablePrincipal();
    [CompilerGeneratedAttribute]
public virtual void set_IsSharedTablePrincipal(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsSplitEntityTypePrincipal();
    [CompilerGeneratedAttribute]
public virtual void set_IsSplitEntityTypePrincipal(Nullable`1<bool> value);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IColumnMappingBase> Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.get_ColumnMappings();
    [DebuggerStepThroughAttribute]
private sealed virtual override ITableBase Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.get_Table();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.TableMappingBaseComparer : object {
    public static TableMappingBaseComparer Instance;
    private static TableMappingBaseComparer();
    [NullableContextAttribute("2")]
public sealed virtual int Compare(ITableMappingBase x, ITableMappingBase y);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(ITableMappingBase x, ITableMappingBase y);
    public sealed virtual int GetHashCode(ITableMappingBase obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.UniqueConstraint : Annotatable {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedSet`1<IKey> <MappedKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private Table <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Column> <Columns>k__BackingField;
    private IRowKeyValueFactory _rowKeyValueFactory;
    public string Name { get; }
    public SortedSet`1<IKey> MappedKeys { get; }
    public Table Table { get; }
    public IReadOnlyList`1<Column> Columns { get; }
    public bool IsReadOnly { get; }
    private ITable Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint.Table { get; }
    private IReadOnlyList`1<IColumn> Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint.Columns { get; }
    private IEnumerable`1<IKey> Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint.MappedKeys { get; }
    public UniqueConstraint(string name, Table table, IReadOnlyList`1<Column> columns);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual SortedSet`1<IKey> get_MappedKeys();
    [CompilerGeneratedAttribute]
public virtual Table get_Table();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<Column> get_Columns();
    public virtual bool get_IsReadOnly();
    public virtual IRowKeyValueFactory GetRowKeyValueFactory();
    public virtual string ToString();
    private sealed virtual override ITable Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint.get_Table();
    private sealed virtual override IReadOnlyList`1<IColumn> Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint.get_Columns();
    private sealed virtual override IEnumerable`1<IKey> Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint.get_MappedKeys();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.UniqueConstraintComparer : object {
    public static UniqueConstraintComparer Instance;
    private static UniqueConstraintComparer();
    [NullableContextAttribute("2")]
public sealed virtual int Compare(IUniqueConstraint x, IUniqueConstraint y);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IUniqueConstraint x, IUniqueConstraint y);
    public sealed virtual int GetHashCode(IUniqueConstraint obj);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.View : TableBase {
    [NullableAttribute("2")]
public string ViewDefinitionSql { get; }
    [NullableAttribute("1")]
private IEnumerable`1<IViewMapping> Microsoft.EntityFrameworkCore.Metadata.IView.EntityTypeMappings { get; }
    [NullableAttribute("1")]
private IEnumerable`1<IViewColumn> Microsoft.EntityFrameworkCore.Metadata.IView.Columns { get; }
    [NullableContextAttribute("1")]
public View(string name, string schema, RelationalModel model);
    [NullableContextAttribute("2")]
public virtual string get_ViewDefinitionSql();
    [NullableContextAttribute("1")]
public virtual IColumnBase FindColumn(IProperty property);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IViewMapping> Microsoft.EntityFrameworkCore.Metadata.IView.get_EntityTypeMappings();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IViewColumn> Microsoft.EntityFrameworkCore.Metadata.IView.get_Columns();
    [DebuggerStepThroughAttribute]
private sealed virtual override IViewColumn Microsoft.EntityFrameworkCore.Metadata.IView.FindColumn(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IViewColumn Microsoft.EntityFrameworkCore.Metadata.IView.FindColumn(IProperty property);
    [CompilerGeneratedAttribute]
private bool <FindColumn>b__3_0(IViewColumnMapping cm);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ViewColumn : ColumnBase`1<ViewColumnMapping> {
    public View View { get; }
    private IView Microsoft.EntityFrameworkCore.Metadata.IViewColumn.View { get; }
    private IReadOnlyList`1<IViewColumnMapping> Microsoft.EntityFrameworkCore.Metadata.IViewColumn.PropertyMappings { get; }
    public ViewColumn(string name, string type, View view);
    public virtual View get_View();
    public virtual string ToString();
    [DebuggerStepThroughAttribute]
private sealed virtual override IView Microsoft.EntityFrameworkCore.Metadata.IViewColumn.get_View();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IViewColumnMapping> Microsoft.EntityFrameworkCore.Metadata.IViewColumn.get_PropertyMappings();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ViewColumnMapping : ColumnMappingBase {
    public IViewMapping ViewMapping { get; }
    private IViewColumn Microsoft.EntityFrameworkCore.Metadata.IViewColumnMapping.Column { get; }
    public ViewColumnMapping(IProperty property, ViewColumn column, ViewMapping viewMapping);
    public virtual IViewMapping get_ViewMapping();
    protected virtual RelationalTypeMapping GetTypeMapping();
    public virtual string ToString();
    [DebuggerStepThroughAttribute]
private sealed virtual override IViewColumn Microsoft.EntityFrameworkCore.Metadata.IViewColumnMapping.get_Column();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ViewMapping : TableMappingBase`1<ViewColumnMapping> {
    public IView View { get; }
    private IEnumerable`1<IViewColumnMapping> Microsoft.EntityFrameworkCore.Metadata.IViewMapping.ColumnMappings { get; }
    public ViewMapping(IEntityType entityType, View view, bool includesDerivedTypes);
    public virtual IView get_View();
    public virtual string ToString();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IViewColumnMapping> Microsoft.EntityFrameworkCore.Metadata.IViewMapping.get_ColumnMappings();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IPrimaryKeyConstraint {
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint {
    public string ModelName { get; }
    [NullableAttribute("2")]
public string Name { get; }
    public IReadOnlyEntityType EntityType { get; }
    public string Sql { get; }
    public abstract virtual string get_ModelName();
    [NullableContextAttribute("2")]
public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual string GetDefaultName();
    [NullableContextAttribute("2")]
public abstract virtual string GetName(StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject);
    [NullableContextAttribute("2")]
public virtual string GetDefaultName(StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject);
    public abstract virtual IReadOnlyEntityType get_EntityType();
    public abstract virtual string get_Sql();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction {
    public string Name { get; }
    [NullableAttribute("2")]
public string Schema { get; }
    public string ModelName { get; }
    public IReadOnlyModel Model { get; }
    [NullableAttribute("2")]
public MethodInfo MethodInfo { get; }
    public bool IsBuiltIn { get; }
    [MemberNotNullWhenAttribute("True", "TypeMapping")]
public bool IsScalar { get; }
    public bool IsAggregate { get; }
    public bool IsNullable { get; }
    [NullableAttribute("2")]
public string StoreType { get; }
    public Type ReturnType { get; }
    [NullableAttribute("2")]
public RelationalTypeMapping TypeMapping { get; }
    public IReadOnlyList`1<IReadOnlyDbFunctionParameter> Parameters { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> Translation { get; }
    public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual string get_Schema();
    public abstract virtual string get_ModelName();
    public abstract virtual IReadOnlyModel get_Model();
    [NullableContextAttribute("2")]
public abstract virtual MethodInfo get_MethodInfo();
    public abstract virtual bool get_IsBuiltIn();
    [MemberNotNullWhenAttribute("True", "TypeMapping")]
public abstract virtual bool get_IsScalar();
    public abstract virtual bool get_IsAggregate();
    public abstract virtual bool get_IsNullable();
    [NullableContextAttribute("2")]
public abstract virtual string get_StoreType();
    public abstract virtual Type get_ReturnType();
    [NullableContextAttribute("2")]
public abstract virtual RelationalTypeMapping get_TypeMapping();
    public abstract virtual IReadOnlyList`1<IReadOnlyDbFunctionParameter> get_Parameters();
    public abstract virtual Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> get_Translation();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunctionParameter {
    public IReadOnlyDbFunction Function { get; }
    public string Name { get; }
    public Type ClrType { get; }
    [NullableAttribute("2")]
public string StoreType { get; }
    public bool PropagatesNullability { get; }
    [NullableAttribute("2")]
public RelationalTypeMapping TypeMapping { get; }
    public abstract virtual IReadOnlyDbFunction get_Function();
    public abstract virtual string get_Name();
    public abstract virtual Type get_ClrType();
    [NullableContextAttribute("2")]
public abstract virtual string get_StoreType();
    public abstract virtual bool get_PropagatesNullability();
    [NullableContextAttribute("2")]
public abstract virtual RelationalTypeMapping get_TypeMapping();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityTypeMappingFragment {
    public IReadOnlyEntityType EntityType { get; }
    public StoreObjectIdentifier StoreObject { get; }
    public Nullable`1<bool> IsTableExcludedFromMigrations { get; }
    public abstract virtual IReadOnlyEntityType get_EntityType();
    public abstract virtual StoreObjectIdentifier get_StoreObject();
    public abstract virtual Nullable`1<bool> get_IsTableExcludedFromMigrations();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IReadOnlyRelationalPropertyOverrides {
    public IReadOnlyProperty Property { get; }
    public StoreObjectIdentifier StoreObject { get; }
    [NullableAttribute("2")]
public string ColumnName { get; }
    public bool IsColumnNameOverridden { get; }
    public abstract virtual IReadOnlyProperty get_Property();
    public abstract virtual StoreObjectIdentifier get_StoreObject();
    [NullableContextAttribute("2")]
public abstract virtual string get_ColumnName();
    public abstract virtual bool get_IsColumnNameOverridden();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IReadOnlySequence {
    public string Name { get; }
    [NullableAttribute("2")]
public string ModelSchema { get; }
    [NullableAttribute("2")]
public string Schema { get; }
    public IReadOnlyModel Model { get; }
    public long StartValue { get; }
    public int IncrementBy { get; }
    public Nullable`1<long> MinValue { get; }
    public Nullable`1<long> MaxValue { get; }
    public Type Type { get; }
    public bool IsCyclic { get; }
    public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual string get_ModelSchema();
    [NullableContextAttribute("2")]
public abstract virtual string get_Schema();
    public abstract virtual IReadOnlyModel get_Model();
    public abstract virtual long get_StartValue();
    public abstract virtual int get_IncrementBy();
    public abstract virtual Nullable`1<long> get_MinValue();
    public abstract virtual Nullable`1<long> get_MaxValue();
    public abstract virtual Type get_Type();
    public abstract virtual bool get_IsCyclic();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure {
    [NullableAttribute("2")]
public string Name { get; }
    [NullableAttribute("2")]
public string Schema { get; }
    public IReadOnlyEntityType EntityType { get; }
    public bool IsRowsAffectedReturned { get; }
    public IReadOnlyList`1<IReadOnlyStoredProcedureParameter> Parameters { get; }
    public IReadOnlyList`1<IReadOnlyStoredProcedureResultColumn> ResultColumns { get; }
    [NullableContextAttribute("2")]
public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual string get_Schema();
    public abstract virtual IReadOnlyEntityType get_EntityType();
    public abstract virtual bool get_IsRowsAffectedReturned();
    public virtual Nullable`1<StoreObjectIdentifier> GetStoreIdentifier();
    public abstract virtual IReadOnlyList`1<IReadOnlyStoredProcedureParameter> get_Parameters();
    public abstract virtual IReadOnlyStoredProcedureParameter FindParameter(string propertyName);
    public abstract virtual IReadOnlyStoredProcedureParameter FindOriginalValueParameter(string propertyName);
    [NullableContextAttribute("2")]
public abstract virtual IReadOnlyStoredProcedureParameter FindRowsAffectedParameter();
    public abstract virtual IReadOnlyList`1<IReadOnlyStoredProcedureResultColumn> get_ResultColumns();
    public abstract virtual IReadOnlyStoredProcedureResultColumn FindResultColumn(string propertyName);
    [NullableContextAttribute("2")]
public abstract virtual IReadOnlyStoredProcedureResultColumn FindRowsAffectedResultColumn();
    [NullableContextAttribute("2")]
public virtual string GetSchemaQualifiedName();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureParameter {
    public IReadOnlyStoredProcedure StoredProcedure { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public string PropertyName { get; }
    public ParameterDirection Direction { get; }
    public Nullable`1<bool> ForOriginalValue { get; }
    public bool ForRowsAffected { get; }
    public abstract virtual IReadOnlyStoredProcedure get_StoredProcedure();
    public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual string get_PropertyName();
    public abstract virtual ParameterDirection get_Direction();
    public abstract virtual Nullable`1<bool> get_ForOriginalValue();
    public abstract virtual bool get_ForRowsAffected();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedureResultColumn {
    public IReadOnlyStoredProcedure StoredProcedure { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public string PropertyName { get; }
    public bool ForRowsAffected { get; }
    public abstract virtual IReadOnlyStoredProcedure get_StoredProcedure();
    public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual string get_PropertyName();
    public abstract virtual bool get_ForRowsAffected();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoreObjectDictionary`1 {
    [NullableContextAttribute("2")]
public abstract virtual T Find(StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject);
    public abstract virtual IEnumerable`1<T> GetValues();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider {
    public abstract virtual IEnumerable`1<IAnnotation> For(IRelationalModel model, bool designTime);
    public abstract virtual IEnumerable`1<IAnnotation> For(ITable table, bool designTime);
    public abstract virtual IEnumerable`1<IAnnotation> For(IColumn column, bool designTime);
    public abstract virtual IEnumerable`1<IAnnotation> For(IView view, bool designTime);
    public abstract virtual IEnumerable`1<IAnnotation> For(IViewColumn column, bool designTime);
    public abstract virtual IEnumerable`1<IAnnotation> For(ISqlQuery sqlQuery, bool designTime);
    public abstract virtual IEnumerable`1<IAnnotation> For(ISqlQueryColumn column, bool designTime);
    public abstract virtual IEnumerable`1<IAnnotation> For(IStoreFunction function, bool designTime);
    public abstract virtual IEnumerable`1<IAnnotation> For(IFunctionColumn column, bool designTime);
    public abstract virtual IEnumerable`1<IAnnotation> For(IStoreStoredProcedure storedProcedure, bool designTime);
    public abstract virtual IEnumerable`1<IAnnotation> For(IStoreStoredProcedureParameter parameter, bool designTime);
    public abstract virtual IEnumerable`1<IAnnotation> For(IStoreStoredProcedureResultColumn column, bool designTime);
    public abstract virtual IEnumerable`1<IAnnotation> For(IUniqueConstraint constraint, bool designTime);
    public abstract virtual IEnumerable`1<IAnnotation> For(ITableIndex index, bool designTime);
    public abstract virtual IEnumerable`1<IAnnotation> For(IForeignKeyConstraint foreignKey, bool designTime);
    public abstract virtual IEnumerable`1<IAnnotation> For(ISequence sequence, bool designTime);
    public abstract virtual IEnumerable`1<IAnnotation> For(ICheckConstraint checkConstraint, bool designTime);
    public abstract virtual IEnumerable`1<IAnnotation> For(ITrigger trigger, bool designTime);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IRelationalModel {
    public IModel Model { get; }
    public IEnumerable`1<ITable> Tables { get; }
    public IEnumerable`1<IView> Views { get; }
    public IEnumerable`1<ISqlQuery> Queries { get; }
    public IEnumerable`1<ISequence> Sequences { get; }
    public IEnumerable`1<IStoreFunction> Functions { get; }
    public IEnumerable`1<IStoreStoredProcedure> StoredProcedures { get; }
    [NullableAttribute("2")]
public string Collation { get; }
    public abstract virtual IModel get_Model();
    public abstract virtual IEnumerable`1<ITable> get_Tables();
    public abstract virtual IEnumerable`1<IView> get_Views();
    public abstract virtual IEnumerable`1<ISqlQuery> get_Queries();
    public virtual IEnumerable`1<ISequence> get_Sequences();
    public abstract virtual IEnumerable`1<IStoreFunction> get_Functions();
    public abstract virtual IEnumerable`1<IStoreStoredProcedure> get_StoredProcedures();
    [NullableContextAttribute("2")]
public virtual string get_Collation();
    [NullableContextAttribute("2")]
public abstract virtual ITable FindTable(string name, string schema);
    [NullableContextAttribute("2")]
public abstract virtual IView FindView(string name, string schema);
    public abstract virtual ISqlQuery FindQuery(string name);
    [NullableContextAttribute("2")]
public virtual ISequence FindSequence(string name, string schema);
    public abstract virtual IStoreFunction FindFunction(string name, string schema, IReadOnlyList`1<string> parameters);
    [NullableContextAttribute("2")]
public abstract virtual IStoreStoredProcedure FindStoredProcedure(string name, string schema);
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides {
    [NullableAttribute("1")]
public IProperty Property { get; }
    [NullableContextAttribute("1")]
public abstract virtual IProperty get_Property();
}
public interface Microsoft.EntityFrameworkCore.Metadata.ISequence {
    [NullableAttribute("1")]
public IModel Model { get; }
    [NullableContextAttribute("1")]
public abstract virtual IModel get_Model();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.ISqlQuery {
    public IEnumerable`1<ISqlQueryMapping> EntityTypeMappings { get; }
    public IEnumerable`1<ISqlQueryColumn> Columns { get; }
    public string Sql { get; }
    public abstract virtual IEnumerable`1<ISqlQueryMapping> get_EntityTypeMappings();
    public abstract virtual IEnumerable`1<ISqlQueryColumn> get_Columns();
    public abstract virtual ISqlQueryColumn FindColumn(string name);
    public abstract virtual ISqlQueryColumn FindColumn(IProperty property);
    public abstract virtual string get_Sql();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.ISqlQueryColumn {
    public ISqlQuery SqlQuery { get; }
    public IReadOnlyList`1<ISqlQueryColumnMapping> PropertyMappings { get; }
    public abstract virtual ISqlQuery get_SqlQuery();
    public abstract virtual IReadOnlyList`1<ISqlQueryColumnMapping> get_PropertyMappings();
    public virtual ISqlQueryColumnMapping FindColumnMapping(IReadOnlyEntityType entityType);
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.ISqlQueryColumnMapping {
    public ISqlQueryColumn Column { get; }
    public ISqlQueryMapping SqlQueryMapping { get; }
    public abstract virtual ISqlQueryColumn get_Column();
    public abstract virtual ISqlQueryMapping get_SqlQueryMapping();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.ISqlQueryMapping {
    public bool IsDefaultSqlQueryMapping { get; public set; }
    public ISqlQuery SqlQuery { get; }
    public IEnumerable`1<ISqlQueryColumnMapping> ColumnMappings { get; }
    public abstract virtual bool get_IsDefaultSqlQueryMapping();
    public abstract virtual void set_IsDefaultSqlQueryMapping(bool value);
    public abstract virtual ISqlQuery get_SqlQuery();
    public abstract virtual IEnumerable`1<ISqlQueryColumnMapping> get_ColumnMappings();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure {
    public string Name { get; }
    public IEntityType EntityType { get; }
    public IStoreStoredProcedure StoreStoredProcedure { get; }
    public IReadOnlyList`1<IStoredProcedureParameter> Parameters { get; }
    public IReadOnlyList`1<IStoredProcedureResultColumn> ResultColumns { get; }
    public abstract virtual string get_Name();
    public abstract virtual IEntityType get_EntityType();
    public abstract virtual IStoreStoredProcedure get_StoreStoredProcedure();
    public abstract virtual IReadOnlyList`1<IStoredProcedureParameter> get_Parameters();
    public abstract virtual IStoredProcedureParameter FindParameter(string propertyName);
    public abstract virtual IStoredProcedureParameter FindOriginalValueParameter(string propertyName);
    [NullableContextAttribute("2")]
public abstract virtual IStoredProcedureParameter FindRowsAffectedParameter();
    public abstract virtual IReadOnlyList`1<IStoredProcedureResultColumn> get_ResultColumns();
    public abstract virtual IStoredProcedureResultColumn FindResultColumn(string propertyName);
    [NullableContextAttribute("2")]
public abstract virtual IStoredProcedureResultColumn FindRowsAffectedResultColumn();
    public virtual StoreObjectIdentifier GetStoreIdentifier();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureMapping {
    public IStoreStoredProcedure StoreStoredProcedure { get; }
    public IStoredProcedure StoredProcedure { get; }
    public StoreObjectIdentifier StoredProcedureIdentifier { get; }
    [NullableAttribute("2")]
public ITableMapping TableMapping { get; }
    public IEnumerable`1<IStoredProcedureParameterMapping> ParameterMappings { get; }
    public IEnumerable`1<IStoredProcedureResultColumnMapping> ResultColumnMappings { get; }
    public abstract virtual IStoreStoredProcedure get_StoreStoredProcedure();
    public abstract virtual IStoredProcedure get_StoredProcedure();
    public abstract virtual StoreObjectIdentifier get_StoredProcedureIdentifier();
    [NullableContextAttribute("2")]
public abstract virtual ITableMapping get_TableMapping();
    public abstract virtual IEnumerable`1<IStoredProcedureParameterMapping> get_ParameterMappings();
    public abstract virtual IEnumerable`1<IStoredProcedureResultColumnMapping> get_ResultColumnMappings();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureParameter {
    public IStoredProcedure StoredProcedure { get; }
    public IStoreStoredProcedureParameter StoreParameter { get; }
    public abstract virtual IStoredProcedure get_StoredProcedure();
    public abstract virtual IStoreStoredProcedureParameter get_StoreParameter();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureParameterMapping {
    public IStoreStoredProcedureParameter StoreParameter { get; }
    public IStoredProcedureParameter Parameter { get; }
    public IStoredProcedureMapping StoredProcedureMapping { get; }
    public abstract virtual IStoreStoredProcedureParameter get_StoreParameter();
    public abstract virtual IStoredProcedureParameter get_Parameter();
    public abstract virtual IStoredProcedureMapping get_StoredProcedureMapping();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureResultColumn {
    public IStoredProcedure StoredProcedure { get; }
    public IStoreStoredProcedureResultColumn StoreResultColumn { get; }
    public abstract virtual IStoredProcedure get_StoredProcedure();
    public abstract virtual IStoreStoredProcedureResultColumn get_StoreResultColumn();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureResultColumnMapping {
    public IStoreStoredProcedureResultColumn StoreResultColumn { get; }
    public IStoredProcedureResultColumn ResultColumn { get; }
    public IStoredProcedureMapping StoredProcedureMapping { get; }
    public abstract virtual IStoreStoredProcedureResultColumn get_StoreResultColumn();
    public abstract virtual IStoredProcedureResultColumn get_ResultColumn();
    public abstract virtual IStoredProcedureMapping get_StoredProcedureMapping();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IStoreFunction {
    public IEnumerable`1<IDbFunction> DbFunctions { get; }
    public bool IsBuiltIn { get; }
    public IEnumerable`1<IStoreFunctionParameter> Parameters { get; }
    [NullableAttribute("2")]
public string ReturnType { get; }
    public IEnumerable`1<IFunctionMapping> EntityTypeMappings { get; }
    public IEnumerable`1<IFunctionColumn> Columns { get; }
    public abstract virtual IEnumerable`1<IDbFunction> get_DbFunctions();
    public abstract virtual bool get_IsBuiltIn();
    public abstract virtual IEnumerable`1<IStoreFunctionParameter> get_Parameters();
    [NullableContextAttribute("2")]
public abstract virtual string get_ReturnType();
    public abstract virtual IEnumerable`1<IFunctionMapping> get_EntityTypeMappings();
    public abstract virtual IEnumerable`1<IFunctionColumn> get_Columns();
    public abstract virtual IFunctionColumn FindColumn(string name);
    public abstract virtual IFunctionColumn FindColumn(IProperty property);
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IStoreFunctionParameter {
    public IStoreFunction Function { get; }
    public IEnumerable`1<IDbFunctionParameter> DbFunctionParameters { get; }
    public string Name { get; }
    public string Type { get; }
    public abstract virtual IStoreFunction get_Function();
    public abstract virtual IEnumerable`1<IDbFunctionParameter> get_DbFunctionParameters();
    public abstract virtual string get_Name();
    public abstract virtual string get_Type();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedure {
    public IEnumerable`1<IStoredProcedure> StoredProcedures { get; }
    public IEnumerable`1<IStoredProcedureMapping> EntityTypeMappings { get; }
    [NullableAttribute("2")]
public IStoreStoredProcedureReturnValue ReturnValue { get; }
    public IReadOnlyList`1<IStoreStoredProcedureParameter> Parameters { get; }
    public IEnumerable`1<IStoreStoredProcedureResultColumn> ResultColumns { get; }
    public abstract virtual IEnumerable`1<IStoredProcedure> get_StoredProcedures();
    public abstract virtual IEnumerable`1<IStoredProcedureMapping> get_EntityTypeMappings();
    [NullableContextAttribute("2")]
public abstract virtual IStoreStoredProcedureReturnValue get_ReturnValue();
    public abstract virtual IReadOnlyList`1<IStoreStoredProcedureParameter> get_Parameters();
    public abstract virtual IStoreStoredProcedureParameter FindParameter(string name);
    public abstract virtual IStoreStoredProcedureParameter FindParameter(IProperty property);
    public abstract virtual IEnumerable`1<IStoreStoredProcedureResultColumn> get_ResultColumns();
    public abstract virtual IStoreStoredProcedureResultColumn FindResultColumn(string name);
    public abstract virtual IStoreStoredProcedureResultColumn FindResultColumn(IProperty property);
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedureParameter {
    public IStoreStoredProcedure StoredProcedure { get; }
    public IReadOnlyList`1<IStoredProcedureParameterMapping> PropertyMappings { get; }
    public ParameterDirection Direction { get; }
    public int Position { get; }
    public abstract virtual IStoreStoredProcedure get_StoredProcedure();
    public abstract virtual IReadOnlyList`1<IStoredProcedureParameterMapping> get_PropertyMappings();
    public abstract virtual ParameterDirection get_Direction();
    public abstract virtual int get_Position();
    public virtual IStoredProcedureParameterMapping FindParameterMapping(IReadOnlyEntityType entityType);
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedureResultColumn {
    public IStoreStoredProcedure StoredProcedure { get; }
    public IReadOnlyList`1<IStoredProcedureResultColumnMapping> PropertyMappings { get; }
    public int Position { get; }
    public abstract virtual IStoreStoredProcedure get_StoredProcedure();
    public abstract virtual IReadOnlyList`1<IStoredProcedureResultColumnMapping> get_PropertyMappings();
    public abstract virtual int get_Position();
    public virtual IStoredProcedureResultColumnMapping FindColumnMapping(IReadOnlyEntityType entityType);
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedureReturnValue {
    [NullableAttribute("1")]
public IStoreStoredProcedure StoredProcedure { get; }
    [NullableContextAttribute("1")]
public abstract virtual IStoreStoredProcedure get_StoredProcedure();
    [NullableContextAttribute("1")]
public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.ITable {
    public IEnumerable`1<ITableMapping> EntityTypeMappings { get; }
    public IEnumerable`1<IColumn> Columns { get; }
    public bool IsExcludedFromMigrations { get; }
    public IEnumerable`1<IForeignKeyConstraint> ForeignKeyConstraints { get; }
    public IEnumerable`1<IForeignKeyConstraint> ReferencingForeignKeyConstraints { get; }
    public IEnumerable`1<IUniqueConstraint> UniqueConstraints { get; }
    [NullableAttribute("2")]
public IPrimaryKeyConstraint PrimaryKey { get; }
    public IEnumerable`1<ITableIndex> Indexes { get; }
    public IEnumerable`1<ICheckConstraint> CheckConstraints { get; }
    public IEnumerable`1<ITrigger> Triggers { get; }
    [NullableAttribute("2")]
public string Comment { get; }
    public abstract virtual IEnumerable`1<ITableMapping> get_EntityTypeMappings();
    public abstract virtual IEnumerable`1<IColumn> get_Columns();
    public abstract virtual bool get_IsExcludedFromMigrations();
    public abstract virtual IEnumerable`1<IForeignKeyConstraint> get_ForeignKeyConstraints();
    public abstract virtual IEnumerable`1<IForeignKeyConstraint> get_ReferencingForeignKeyConstraints();
    public abstract virtual IEnumerable`1<IUniqueConstraint> get_UniqueConstraints();
    [NullableContextAttribute("2")]
public abstract virtual IPrimaryKeyConstraint get_PrimaryKey();
    public abstract virtual IEnumerable`1<ITableIndex> get_Indexes();
    public abstract virtual IEnumerable`1<ICheckConstraint> get_CheckConstraints();
    public abstract virtual IEnumerable`1<ITrigger> get_Triggers();
    [NullableContextAttribute("2")]
public virtual string get_Comment();
    public abstract virtual IColumn FindColumn(string name);
    public abstract virtual IColumn FindColumn(IProperty property);
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.ITableBase {
    public string Name { get; }
    [NullableAttribute("2")]
public string Schema { get; }
    public string SchemaQualifiedName { get; }
    public IRelationalModel Model { get; }
    public bool IsShared { get; }
    public IEnumerable`1<ITableMappingBase> EntityTypeMappings { get; }
    public IEnumerable`1<IColumnBase> Columns { get; }
    public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual string get_Schema();
    public virtual string get_SchemaQualifiedName();
    public abstract virtual IRelationalModel get_Model();
    public abstract virtual bool get_IsShared();
    public abstract virtual IEnumerable`1<ITableMappingBase> get_EntityTypeMappings();
    public abstract virtual IEnumerable`1<IColumnBase> get_Columns();
    public abstract virtual IColumnBase FindColumn(string name);
    public abstract virtual IColumnBase FindColumn(IProperty property);
    public abstract virtual IEnumerable`1<IForeignKey> GetRowInternalForeignKeys(IEntityType entityType);
    public abstract virtual IEnumerable`1<IForeignKey> GetReferencingRowInternalForeignKeys(IEntityType entityType);
    public abstract virtual bool IsOptional(IEntityType entityType);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.ITableIndex {
    public string Name { get; }
    public IEnumerable`1<IIndex> MappedIndexes { get; }
    public ITable Table { get; }
    public IReadOnlyList`1<IColumn> Columns { get; }
    public bool IsUnique { get; }
    [NullableAttribute("2")]
public IReadOnlyList`1<bool> IsDescending { get; }
    [NullableAttribute("2")]
public string Filter { get; }
    public abstract virtual string get_Name();
    public abstract virtual IEnumerable`1<IIndex> get_MappedIndexes();
    public abstract virtual ITable get_Table();
    public abstract virtual IReadOnlyList`1<IColumn> get_Columns();
    public abstract virtual bool get_IsUnique();
    [NullableContextAttribute("2")]
public abstract virtual IReadOnlyList`1<bool> get_IsDescending();
    [NullableContextAttribute("2")]
public abstract virtual string get_Filter();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
    [CompilerGeneratedAttribute]
private string <ToDebugString>b__14_0(int i);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Metadata.ITableMapping {
    [NullableAttribute("1")]
public ITable Table { get; }
    [NullableAttribute("1")]
public IEnumerable`1<IColumnMapping> ColumnMappings { get; }
    public IStoredProcedureMapping InsertStoredProcedureMapping { get; }
    public IStoredProcedureMapping DeleteStoredProcedureMapping { get; }
    public IStoredProcedureMapping UpdateStoredProcedureMapping { get; }
    [NullableContextAttribute("1")]
public abstract virtual ITable get_Table();
    [NullableContextAttribute("1")]
public abstract virtual IEnumerable`1<IColumnMapping> get_ColumnMappings();
    public abstract virtual IStoredProcedureMapping get_InsertStoredProcedureMapping();
    public abstract virtual IStoredProcedureMapping get_DeleteStoredProcedureMapping();
    public abstract virtual IStoredProcedureMapping get_UpdateStoredProcedureMapping();
    [NullableContextAttribute("1")]
public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase {
    public IEntityType EntityType { get; }
    public ITableBase Table { get; }
    public IEnumerable`1<IColumnMappingBase> ColumnMappings { get; }
    public Nullable`1<bool> IsSharedTablePrincipal { get; }
    public Nullable`1<bool> IsSplitEntityTypePrincipal { get; }
    public bool IncludesDerivedTypes { get; }
    public abstract virtual IEntityType get_EntityType();
    public abstract virtual ITableBase get_Table();
    public abstract virtual IEnumerable`1<IColumnMappingBase> get_ColumnMappings();
    public abstract virtual Nullable`1<bool> get_IsSharedTablePrincipal();
    public abstract virtual Nullable`1<bool> get_IsSplitEntityTypePrincipal();
    public abstract virtual bool get_IncludesDerivedTypes();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint {
    public string Name { get; }
    public IEnumerable`1<IKey> MappedKeys { get; }
    public ITable Table { get; }
    public IReadOnlyList`1<IColumn> Columns { get; }
    public abstract virtual string get_Name();
    public abstract virtual IEnumerable`1<IKey> get_MappedKeys();
    public abstract virtual ITable get_Table();
    public abstract virtual IReadOnlyList`1<IColumn> get_Columns();
    public virtual bool GetIsPrimaryKey();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IView {
    public IEnumerable`1<IViewMapping> EntityTypeMappings { get; }
    public IEnumerable`1<IViewColumn> Columns { get; }
    [NullableAttribute("2")]
public string ViewDefinitionSql { get; }
    public abstract virtual IEnumerable`1<IViewMapping> get_EntityTypeMappings();
    public abstract virtual IEnumerable`1<IViewColumn> get_Columns();
    public abstract virtual IViewColumn FindColumn(string name);
    public abstract virtual IViewColumn FindColumn(IProperty property);
    [NullableContextAttribute("2")]
public abstract virtual string get_ViewDefinitionSql();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IViewColumn {
    public IView View { get; }
    public IReadOnlyList`1<IViewColumnMapping> PropertyMappings { get; }
    public abstract virtual IView get_View();
    public abstract virtual IReadOnlyList`1<IViewColumnMapping> get_PropertyMappings();
    public virtual IViewColumnMapping FindColumnMapping(IReadOnlyEntityType entityType);
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IViewColumnMapping {
    public IViewColumn Column { get; }
    public IViewMapping ViewMapping { get; }
    public abstract virtual IViewColumn get_Column();
    public abstract virtual IViewMapping get_ViewMapping();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IViewMapping {
    public IView View { get; }
    public IEnumerable`1<IViewColumnMapping> ColumnMappings { get; }
    public abstract virtual IView get_View();
    public abstract virtual IEnumerable`1<IViewColumnMapping> get_ColumnMappings();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames : object {
    public static string Prefix;
    public static string ColumnName;
    public static string ColumnOrder;
    public static string ColumnType;
    public static string DefaultValueSql;
    public static string ComputedColumnSql;
    public static string IsStored;
    public static string DefaultValue;
    public static string TableName;
    public static string Schema;
    public static string ViewName;
    public static string ViewSchema;
    public static string FunctionName;
    public static string DeleteStoredProcedure;
    public static string InsertStoredProcedure;
    public static string UpdateStoredProcedure;
    public static string SqlQuery;
    public static string Comment;
    public static string Collation;
    public static string DefaultSchema;
    public static string Name;
    [ObsoleteAttribute("All sequences are stored in a single annotation now")]
public static string SequencePrefix;
    public static string Sequences;
    public static string CheckConstraints;
    public static string Filter;
    public static string DbFunctions;
    public static string MaxIdentifierLength;
    public static string IsFixedLength;
    public static string ViewDefinitionSql;
    public static string IsTableExcludedFromMigrations;
    public static string MappingStrategy;
    public static string TpcMappingStrategy;
    public static string TphMappingStrategy;
    public static string TptMappingStrategy;
    public static string RelationalModel;
    public static string DefaultMappings;
    public static string DefaultColumnMappings;
    public static string TableMappings;
    public static string TableColumnMappings;
    public static string ViewMappings;
    public static string ViewColumnMappings;
    public static string FunctionMappings;
    public static string FunctionColumnMappings;
    public static string InsertStoredProcedureMappings;
    public static string InsertStoredProcedureResultColumnMappings;
    public static string InsertStoredProcedureParameterMappings;
    public static string DeleteStoredProcedureMappings;
    public static string DeleteStoredProcedureParameterMappings;
    public static string UpdateStoredProcedureMappings;
    public static string UpdateStoredProcedureResultColumnMappings;
    public static string UpdateStoredProcedureParameterMappings;
    public static string SqlQueryMappings;
    public static string SqlQueryColumnMappings;
    public static string ForeignKeyMappings;
    public static string TableIndexMappings;
    public static string UniqueConstraintMappings;
    public static string MappingFragments;
    public static string RelationalOverrides;
    public static string ModelDependencies;
    public static string FieldValueGetter;
    public static string ContainerColumnName;
    public static string ContainerColumnTypeMapping;
    public static string JsonPropertyName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProvider : object {
    [CompilerGeneratedAttribute]
private RelationalAnnotationProviderDependencies <Dependencies>k__BackingField;
    protected RelationalAnnotationProviderDependencies Dependencies { get; }
    public RelationalAnnotationProvider(RelationalAnnotationProviderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalAnnotationProviderDependencies get_Dependencies();
    public virtual IEnumerable`1<IAnnotation> For(IRelationalModel model, bool designTime);
    public virtual IEnumerable`1<IAnnotation> For(ITable table, bool designTime);
    public virtual IEnumerable`1<IAnnotation> For(IColumn column, bool designTime);
    public virtual IEnumerable`1<IAnnotation> For(IView view, bool designTime);
    public virtual IEnumerable`1<IAnnotation> For(IViewColumn column, bool designTime);
    public virtual IEnumerable`1<IAnnotation> For(ISqlQuery sqlQuery, bool designTime);
    public virtual IEnumerable`1<IAnnotation> For(ISqlQueryColumn column, bool designTime);
    public virtual IEnumerable`1<IAnnotation> For(IStoreFunction function, bool designTime);
    public virtual IEnumerable`1<IAnnotation> For(IFunctionColumn column, bool designTime);
    public virtual IEnumerable`1<IAnnotation> For(IStoreStoredProcedure storedProcedure, bool designTime);
    public virtual IEnumerable`1<IAnnotation> For(IStoreStoredProcedureParameter parameter, bool designTime);
    public virtual IEnumerable`1<IAnnotation> For(IStoreStoredProcedureResultColumn column, bool designTime);
    public virtual IEnumerable`1<IAnnotation> For(IForeignKeyConstraint foreignKey, bool designTime);
    public virtual IEnumerable`1<IAnnotation> For(ITableIndex index, bool designTime);
    public virtual IEnumerable`1<IAnnotation> For(IUniqueConstraint constraint, bool designTime);
    public virtual IEnumerable`1<IAnnotation> For(ISequence sequence, bool designTime);
    public virtual IEnumerable`1<IAnnotation> For(ICheckConstraint checkConstraint, bool designTime);
    public virtual IEnumerable`1<IAnnotation> For(ITrigger trigger, bool designTime);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProviderDependencies : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private RelationalAnnotationProviderDependencies(RelationalAnnotationProviderDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalAnnotationProviderDependencies left, RelationalAnnotationProviderDependencies right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(RelationalAnnotationProviderDependencies left, RelationalAnnotationProviderDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalAnnotationProviderDependencies other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public RelationalAnnotationProviderDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.RuntimeDbFunction : AnnotatableBase {
    private List`1<RuntimeDbFunctionParameter> _parameters;
    private MethodInfo _methodInfo;
    private Type _returnType;
    private bool _isScalar;
    private bool _isAggregate;
    private bool _isNullable;
    private bool _isBuiltIn;
    private string _storeName;
    private string _schema;
    private string _storeType;
    private Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> _translation;
    private RelationalTypeMapping _typeMapping;
    private IStoreFunction _storeFunction;
    [CompilerGeneratedAttribute]
private RuntimeModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModelName>k__BackingField;
    public RuntimeModel Model { get; }
    public string ModelName { get; }
    [NullableAttribute("2")]
public RelationalTypeMapping TypeMapping { get; public set; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IReadOnlyModel Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.Model { get; }
    private IModel Microsoft.EntityFrameworkCore.Metadata.IDbFunction.Model { get; }
    private IReadOnlyList`1<IReadOnlyDbFunctionParameter> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.Parameters { get; }
    private IReadOnlyList`1<IDbFunctionParameter> Microsoft.EntityFrameworkCore.Metadata.IDbFunction.Parameters { get; }
    [NullableAttribute("2")]
private MethodInfo Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.MethodInfo { get; }
    private Type Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.ReturnType { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.IsScalar { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.IsAggregate { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.IsBuiltIn { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.IsNullable { get; }
    private IStoreFunction Microsoft.EntityFrameworkCore.Metadata.IDbFunction.StoreFunction { get; }
    private IStoreFunction Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeDbFunction.StoreFunction { get; private set; }
    private string Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.Name { get; }
    [NullableAttribute("2")]
private string Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.Schema { get; }
    [NullableAttribute("2")]
private string Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.StoreType { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.Translation { get; }
    [NullableAttribute("2")]
private RelationalTypeMapping Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.TypeMapping { get; }
    public RuntimeDbFunction(string modelName, RuntimeModel model, Type returnType, string storeName, string schema, string storeType, MethodInfo methodInfo, bool scalar, bool aggregate, bool nullable, bool builtIn, RelationalTypeMapping typeMapping, Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> translation);
    [CompilerGeneratedAttribute]
public virtual RuntimeModel get_Model();
    [CompilerGeneratedAttribute]
public virtual string get_ModelName();
    [NullableContextAttribute("2")]
public virtual RelationalTypeMapping get_TypeMapping();
    [NullableContextAttribute("2")]
public virtual void set_TypeMapping(RelationalTypeMapping value);
    public virtual RuntimeDbFunctionParameter AddParameter(string name, Type clrType, bool propagatesNullability, string storeType, RelationalTypeMapping typeMapping);
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyModel Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IModel Microsoft.EntityFrameworkCore.Metadata.IDbFunction.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IReadOnlyDbFunctionParameter> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.get_Parameters();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IDbFunctionParameter> Microsoft.EntityFrameworkCore.Metadata.IDbFunction.get_Parameters();
    [DebuggerStepThroughAttribute]
private sealed virtual override MethodInfo Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.get_MethodInfo();
    [DebuggerStepThroughAttribute]
private sealed virtual override Type Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.get_ReturnType();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.get_IsScalar();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.get_IsAggregate();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.get_IsBuiltIn();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.get_IsNullable();
    [DebuggerStepThroughAttribute]
private sealed virtual override IStoreFunction Microsoft.EntityFrameworkCore.Metadata.IDbFunction.get_StoreFunction();
    private sealed virtual override IStoreFunction Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeDbFunction.get_StoreFunction();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeDbFunction.set_StoreFunction(IStoreFunction value);
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.get_Name();
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.get_Schema();
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.get_StoreType();
    [DebuggerStepThroughAttribute]
private sealed virtual override Func`2<IReadOnlyList`1<SqlExpression>, SqlExpression> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.get_Translation();
    [DebuggerStepThroughAttribute]
private sealed virtual override RelationalTypeMapping Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.get_TypeMapping();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__26_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__26_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.RuntimeDbFunctionParameter : AnnotatableBase {
    private string _name;
    private Type _clrType;
    private bool _propagatesNullability;
    private string _storeType;
    private IStoreFunctionParameter _storeFunctionParameter;
    private RelationalTypeMapping _typeMapping;
    [CompilerGeneratedAttribute]
private RuntimeDbFunction <Function>k__BackingField;
    public string Name { get; }
    public RuntimeDbFunction Function { get; }
    [NullableAttribute("2")]
public RelationalTypeMapping TypeMapping { get; public set; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IReadOnlyDbFunction Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunctionParameter.Function { get; }
    private IDbFunction Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.Function { get; }
    private IStoreFunctionParameter Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.StoreFunctionParameter { get; }
    private IStoreFunctionParameter Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeDbFunctionParameter.StoreFunctionParameter { get; private set; }
    private Type Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunctionParameter.ClrType { get; }
    [NullableAttribute("2")]
private string Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunctionParameter.StoreType { get; }
    private string Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.StoreType { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunctionParameter.PropagatesNullability { get; }
    [NullableAttribute("2")]
private RelationalTypeMapping Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunctionParameter.TypeMapping { get; }
    [EntityFrameworkInternalAttribute]
public RuntimeDbFunctionParameter(RuntimeDbFunction function, string name, Type clrType, bool propagatesNullability, string storeType, RelationalTypeMapping typeMapping);
    [DebuggerStepThroughAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual RuntimeDbFunction get_Function();
    [NullableContextAttribute("2")]
public virtual RelationalTypeMapping get_TypeMapping();
    [NullableContextAttribute("2")]
public virtual void set_TypeMapping(RelationalTypeMapping value);
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyDbFunction Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunctionParameter.get_Function();
    [DebuggerStepThroughAttribute]
private sealed virtual override IDbFunction Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.get_Function();
    [DebuggerStepThroughAttribute]
private sealed virtual override IStoreFunctionParameter Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.get_StoreFunctionParameter();
    private sealed virtual override IStoreFunctionParameter Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeDbFunctionParameter.get_StoreFunctionParameter();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeDbFunctionParameter.set_StoreFunctionParameter(IStoreFunctionParameter value);
    [DebuggerStepThroughAttribute]
private sealed virtual override Type Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunctionParameter.get_ClrType();
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunctionParameter.get_StoreType();
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.get_StoreType();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunctionParameter.get_PropagatesNullability();
    [DebuggerStepThroughAttribute]
private sealed virtual override RelationalTypeMapping Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunctionParameter.get_TypeMapping();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__17_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__17_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityTypeMappingFragment : AnnotatableBase {
    [CompilerGeneratedAttribute]
private RuntimeEntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private StoreObjectIdentifier <StoreObject>k__BackingField;
    public RuntimeEntityType EntityType { get; }
    public StoreObjectIdentifier StoreObject { get; }
    public Nullable`1<bool> IsTableExcludedFromMigrations { get; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment.EntityType { get; }
    private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityTypeMappingFragment.EntityType { get; }
    public RuntimeEntityTypeMappingFragment(RuntimeEntityType entityType, StoreObjectIdentifier& storeObject, Nullable`1<bool> isTableExcludedFromMigrations);
    [CompilerGeneratedAttribute]
public virtual RuntimeEntityType get_EntityType();
    [CompilerGeneratedAttribute]
public virtual StoreObjectIdentifier get_StoreObject();
    public virtual Nullable`1<bool> get_IsTableExcludedFromMigrations();
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment.get_EntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityTypeMappingFragment.get_EntityType();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__11_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__11_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.RuntimeRelationalPropertyOverrides : AnnotatableBase {
    [CompilerGeneratedAttribute]
private RuntimeProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private StoreObjectIdentifier <StoreObject>k__BackingField;
    public RuntimeProperty Property { get; }
    public StoreObjectIdentifier StoreObject { get; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IProperty Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides.Property { get; }
    private IReadOnlyProperty Microsoft.EntityFrameworkCore.Metadata.IReadOnlyRelationalPropertyOverrides.Property { get; }
    [NullableAttribute("2")]
private string Microsoft.EntityFrameworkCore.Metadata.IReadOnlyRelationalPropertyOverrides.ColumnName { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyRelationalPropertyOverrides.IsColumnNameOverridden { get; }
    public RuntimeRelationalPropertyOverrides(RuntimeProperty property, StoreObjectIdentifier& storeObject, bool columnNameOverridden, string columnName);
    [CompilerGeneratedAttribute]
public virtual RuntimeProperty get_Property();
    [CompilerGeneratedAttribute]
public virtual StoreObjectIdentifier get_StoreObject();
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IProperty Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides.get_Property();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyProperty Microsoft.EntityFrameworkCore.Metadata.IReadOnlyRelationalPropertyOverrides.get_Property();
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IReadOnlyRelationalPropertyOverrides.get_ColumnName();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyRelationalPropertyOverrides.get_IsColumnNameOverridden();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__9_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__9_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.RuntimeSequence : AnnotatableBase {
    private string _schema;
    private Type _type;
    private long _startValue;
    private int _incrementBy;
    private Nullable`1<long> _minValue;
    private Nullable`1<long> _maxValue;
    private bool _isCyclic;
    private bool _modelSchemaIsNull;
    [CompilerGeneratedAttribute]
private RuntimeModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public RuntimeModel Model { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public string ModelSchema { get; }
    [NullableAttribute("2")]
public string Schema { get; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IReadOnlyModel Microsoft.EntityFrameworkCore.Metadata.IReadOnlySequence.Model { get; }
    private IModel Microsoft.EntityFrameworkCore.Metadata.ISequence.Model { get; }
    private long Microsoft.EntityFrameworkCore.Metadata.IReadOnlySequence.StartValue { get; }
    private int Microsoft.EntityFrameworkCore.Metadata.IReadOnlySequence.IncrementBy { get; }
    private Nullable`1<long> Microsoft.EntityFrameworkCore.Metadata.IReadOnlySequence.MinValue { get; }
    private Nullable`1<long> Microsoft.EntityFrameworkCore.Metadata.IReadOnlySequence.MaxValue { get; }
    private Type Microsoft.EntityFrameworkCore.Metadata.IReadOnlySequence.Type { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlySequence.IsCyclic { get; }
    public RuntimeSequence(string name, RuntimeModel model, Type type, string schema, long startValue, int incrementBy, bool cyclic, Nullable`1<long> minValue, Nullable`1<long> maxValue, bool modelSchemaIsNull);
    [CompilerGeneratedAttribute]
public virtual RuntimeModel get_Model();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual string get_ModelSchema();
    [NullableContextAttribute("2")]
public virtual string get_Schema();
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyModel Microsoft.EntityFrameworkCore.Metadata.IReadOnlySequence.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IModel Microsoft.EntityFrameworkCore.Metadata.ISequence.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override long Microsoft.EntityFrameworkCore.Metadata.IReadOnlySequence.get_StartValue();
    [DebuggerStepThroughAttribute]
private sealed virtual override int Microsoft.EntityFrameworkCore.Metadata.IReadOnlySequence.get_IncrementBy();
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<long> Microsoft.EntityFrameworkCore.Metadata.IReadOnlySequence.get_MinValue();
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<long> Microsoft.EntityFrameworkCore.Metadata.IReadOnlySequence.get_MaxValue();
    [DebuggerStepThroughAttribute]
private sealed virtual override Type Microsoft.EntityFrameworkCore.Metadata.IReadOnlySequence.get_Type();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlySequence.get_IsCyclic();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__21_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__21_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.RuntimeStoredProcedure : AnnotatableBase {
    private List`1<RuntimeStoredProcedureParameter> _parameters;
    private List`1<RuntimeStoredProcedureResultColumn> _resultColumns;
    private string _schema;
    private string _name;
    private bool _isRowsAffectedReturned;
    private IStoreStoredProcedure _storeStoredProcedure;
    [CompilerGeneratedAttribute]
private RuntimeEntityType <EntityType>k__BackingField;
    public RuntimeEntityType EntityType { get; public set; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.EntityType { get; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.EntityType { get; }
    [NullableAttribute("2")]
private string Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.Name { get; }
    private string Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.Name { get; }
    [NullableAttribute("2")]
private string Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.Schema { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.IsRowsAffectedReturned { get; }
    private IReadOnlyList`1<IReadOnlyStoredProcedureParameter> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.Parameters { get; }
    private IReadOnlyList`1<IStoredProcedureParameter> Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.Parameters { get; }
    private IReadOnlyList`1<IReadOnlyStoredProcedureResultColumn> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.ResultColumns { get; }
    private IReadOnlyList`1<IStoredProcedureResultColumn> Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.ResultColumns { get; }
    private IStoreStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.StoreStoredProcedure { get; }
    private IStoreStoredProcedure Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeStoredProcedure.StoreStoredProcedure { get; private set; }
    public RuntimeStoredProcedure(RuntimeEntityType entityType, string name, string schema, bool rowsAffectedReturned);
    [CompilerGeneratedAttribute]
public virtual RuntimeEntityType get_EntityType();
    [CompilerGeneratedAttribute]
public virtual void set_EntityType(RuntimeEntityType value);
    public virtual RuntimeStoredProcedureParameter AddParameter(string name, ParameterDirection direction, bool forRowsAffected, string propertyName, Nullable`1<bool> forOriginalValue);
    public virtual RuntimeStoredProcedureResultColumn AddResultColumn(string name, bool forRowsAffected, string propertyName);
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.get_EntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.get_EntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.get_Name();
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.get_Name();
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.get_Schema();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.get_IsRowsAffectedReturned();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IReadOnlyStoredProcedureParameter> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.get_Parameters();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IStoredProcedureParameter> Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.get_Parameters();
    private sealed virtual override IReadOnlyStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.FindParameter(string propertyName);
    [DebuggerStepThroughAttribute]
private sealed virtual override IStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.FindParameter(string propertyName);
    private sealed virtual override IReadOnlyStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.FindOriginalValueParameter(string propertyName);
    private sealed virtual override IStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.FindOriginalValueParameter(string propertyName);
    private sealed virtual override IReadOnlyStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.FindRowsAffectedParameter();
    private sealed virtual override IStoredProcedureParameter Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.FindRowsAffectedParameter();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IReadOnlyStoredProcedureResultColumn> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.get_ResultColumns();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IStoredProcedureResultColumn> Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.get_ResultColumns();
    private sealed virtual override IReadOnlyStoredProcedureResultColumn Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.FindResultColumn(string propertyName);
    private sealed virtual override IStoredProcedureResultColumn Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.FindResultColumn(string propertyName);
    private sealed virtual override IReadOnlyStoredProcedureResultColumn Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure.FindRowsAffectedResultColumn();
    private sealed virtual override IStoredProcedureResultColumn Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.FindRowsAffectedResultColumn();
    [DebuggerStepThroughAttribute]
private sealed virtual override IStoreStoredProcedure Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure.get_StoreStoredProcedure();
    private sealed virtual override IStoreStoredProcedure Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeStoredProcedure.get_StoreStoredProcedure();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeStoredProcedure.set_StoreStoredProcedure(IStoreStoredProcedure value);
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__15_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__15_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.StoreObjectDictionary`1 : object {
    private Dictionary`2<StoreObjectIdentifier, T> _dictionary;
    [NullableContextAttribute("2")]
public virtual T Find(StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject);
    public virtual IEnumerable`1<T> GetValues();
    public virtual void Add(StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, T value);
    [NullableContextAttribute("2")]
public virtual T Remove(StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier : ValueType {
    [CompilerGeneratedAttribute]
private StoreObjectType <StoreObjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    public StoreObjectType StoreObjectType { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public string Schema { get; }
    private StoreObjectIdentifier(StoreObjectType storeObjectType, string name, string schema);
    public static Nullable`1<StoreObjectIdentifier> Create(IReadOnlyEntityType entityType, StoreObjectType type);
    public static StoreObjectIdentifier Table(string name, string schema);
    public static StoreObjectIdentifier View(string name, string schema);
    public static StoreObjectIdentifier SqlQuery(IReadOnlyEntityType entityType);
    public static StoreObjectIdentifier SqlQuery(string name);
    public static StoreObjectIdentifier DbFunction(string modelName);
    public static StoreObjectIdentifier InsertStoredProcedure(string name, string schema);
    public static StoreObjectIdentifier DeleteStoredProcedure(string name, string schema);
    public static StoreObjectIdentifier UpdateStoredProcedure(string name, string schema);
    [CompilerGeneratedAttribute]
public StoreObjectType get_StoreObjectType();
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Schema();
    public sealed virtual int CompareTo(StoreObjectIdentifier other);
    public string DisplayName();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(StoreObjectIdentifier other);
    public virtual int GetHashCode();
    public static bool op_Equality(StoreObjectIdentifier left, StoreObjectIdentifier right);
    public static bool op_Inequality(StoreObjectIdentifier left, StoreObjectIdentifier right);
}
public enum Microsoft.EntityFrameworkCore.Metadata.StoreObjectType : Enum {
    public int value__;
    public static StoreObjectType Table;
    public static StoreObjectType View;
    public static StoreObjectType SqlQuery;
    public static StoreObjectType Function;
    public static StoreObjectType InsertStoredProcedure;
    public static StoreObjectType DeleteStoredProcedure;
    public static StoreObjectType UpdateStoredProcedure;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Migrations.HistoryRepository : object {
    public static string DefaultTableName;
    private IModel _model;
    private string _migrationIdColumnName;
    private string _productVersionColumnName;
    [CompilerGeneratedAttribute]
private HistoryRepositoryDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableSchema>k__BackingField;
    protected HistoryRepositoryDependencies Dependencies { get; }
    protected ISqlGenerationHelper SqlGenerationHelper { get; }
    protected string TableName { get; }
    [NullableAttribute("2")]
protected string TableSchema { get; }
    protected string MigrationIdColumnName { get; }
    protected string ProductVersionColumnName { get; }
    protected string ExistsSql { get; }
    protected string GetAppliedMigrationsSql { get; }
    protected HistoryRepository(HistoryRepositoryDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual HistoryRepositoryDependencies get_Dependencies();
    protected virtual ISqlGenerationHelper get_SqlGenerationHelper();
    [CompilerGeneratedAttribute]
protected virtual string get_TableName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected virtual string get_TableSchema();
    protected virtual string get_MigrationIdColumnName();
    private IModel EnsureModel();
    protected virtual string get_ProductVersionColumnName();
    protected abstract virtual string get_ExistsSql();
    public virtual bool Exists();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.HistoryRepository/<ExistsAsync>d__24")]
public virtual Task`1<bool> ExistsAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
protected abstract virtual bool InterpretExistsResult(object value);
    public abstract virtual string GetCreateIfNotExistsScript();
    public virtual string GetCreateScript();
    protected virtual void ConfigureTable(EntityTypeBuilder`1<HistoryRow> history);
    public virtual IReadOnlyList`1<HistoryRow> GetAppliedMigrations();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.HistoryRepository/<GetAppliedMigrationsAsync>d__30")]
public virtual Task`1<IReadOnlyList`1<HistoryRow>> GetAppliedMigrationsAsync(CancellationToken cancellationToken);
    protected virtual string get_GetAppliedMigrationsSql();
    public virtual string GetInsertScript(HistoryRow row);
    public virtual string GetDeleteScript(string migrationId);
    public abstract virtual string GetBeginIfNotExistsScript(string migrationId);
    public abstract virtual string GetBeginIfExistsScript(string migrationId);
    public abstract virtual string GetEndIfScript();
    [CompilerGeneratedAttribute]
private void <EnsureModel>b__18_0(EntityTypeBuilder`1<HistoryRow> x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies : object {
    [CompilerGeneratedAttribute]
private IRelationalDatabaseCreator <DatabaseCreator>k__BackingField;
    [CompilerGeneratedAttribute]
private IRawSqlCommandBuilder <RawSqlCommandBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbContextOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationsModelDiffer <ModelDiffer>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationsSqlGenerator <MigrationsSqlGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlGenerationHelper <SqlGenerationHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IConventionSetBuilder <ConventionSetBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelDependencies <ModelDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <TypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IModelRuntimeInitializer <ModelRuntimeInitializer>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalCommandDiagnosticsLogger <CommandLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IRelationalDatabaseCreator DatabaseCreator { get; public set; }
    public IRawSqlCommandBuilder RawSqlCommandBuilder { get; public set; }
    public IRelationalConnection Connection { get; public set; }
    public IDbContextOptions Options { get; public set; }
    public IMigrationsModelDiffer ModelDiffer { get; public set; }
    public IMigrationsSqlGenerator MigrationsSqlGenerator { get; public set; }
    public ISqlGenerationHelper SqlGenerationHelper { get; public set; }
    public IConventionSetBuilder ConventionSetBuilder { get; public set; }
    public ModelDependencies ModelDependencies { get; public set; }
    public IRelationalTypeMappingSource TypeMappingSource { get; public set; }
    public ICurrentDbContext CurrentContext { get; public set; }
    public IModelRuntimeInitializer ModelRuntimeInitializer { get; public set; }
    public IRelationalCommandDiagnosticsLogger CommandLogger { get; public set; }
    [EntityFrameworkInternalAttribute]
public HistoryRepositoryDependencies(IRelationalDatabaseCreator databaseCreator, IRawSqlCommandBuilder rawSqlCommandBuilder, IRelationalConnection connection, IDbContextOptions options, IMigrationsModelDiffer modelDiffer, IMigrationsSqlGenerator migrationsSqlGenerator, ISqlGenerationHelper sqlGenerationHelper, IConventionSetBuilder conventionSetBuilder, ModelDependencies modelDependencies, IRelationalTypeMappingSource typeMappingSource, ICurrentDbContext currentContext, IModelRuntimeInitializer modelRuntimeInitializer, IRelationalCommandDiagnosticsLogger commandLogger);
    [CompilerGeneratedAttribute]
private HistoryRepositoryDependencies(HistoryRepositoryDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IRelationalDatabaseCreator get_DatabaseCreator();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DatabaseCreator(IRelationalDatabaseCreator value);
    [CompilerGeneratedAttribute]
public IRawSqlCommandBuilder get_RawSqlCommandBuilder();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RawSqlCommandBuilder(IRawSqlCommandBuilder value);
    [CompilerGeneratedAttribute]
public IRelationalConnection get_Connection();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Connection(IRelationalConnection value);
    [CompilerGeneratedAttribute]
public IDbContextOptions get_Options();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Options(IDbContextOptions value);
    [CompilerGeneratedAttribute]
public IMigrationsModelDiffer get_ModelDiffer();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModelDiffer(IMigrationsModelDiffer value);
    [CompilerGeneratedAttribute]
public IMigrationsSqlGenerator get_MigrationsSqlGenerator();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MigrationsSqlGenerator(IMigrationsSqlGenerator value);
    [CompilerGeneratedAttribute]
public ISqlGenerationHelper get_SqlGenerationHelper();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SqlGenerationHelper(ISqlGenerationHelper value);
    [CompilerGeneratedAttribute]
public IConventionSetBuilder get_ConventionSetBuilder();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConventionSetBuilder(IConventionSetBuilder value);
    [CompilerGeneratedAttribute]
public ModelDependencies get_ModelDependencies();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModelDependencies(ModelDependencies value);
    [CompilerGeneratedAttribute]
public IRelationalTypeMappingSource get_TypeMappingSource();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeMappingSource(IRelationalTypeMappingSource value);
    [CompilerGeneratedAttribute]
public ICurrentDbContext get_CurrentContext();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CurrentContext(ICurrentDbContext value);
    [CompilerGeneratedAttribute]
public IModelRuntimeInitializer get_ModelRuntimeInitializer();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModelRuntimeInitializer(IModelRuntimeInitializer value);
    [CompilerGeneratedAttribute]
public IRelationalCommandDiagnosticsLogger get_CommandLogger();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CommandLogger(IRelationalCommandDiagnosticsLogger value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(HistoryRepositoryDependencies left, HistoryRepositoryDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(HistoryRepositoryDependencies left, HistoryRepositoryDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(HistoryRepositoryDependencies other);
    [CompilerGeneratedAttribute]
public HistoryRepositoryDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.HistoryRow : object {
    [CompilerGeneratedAttribute]
private string <MigrationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductVersion>k__BackingField;
    public string MigrationId { get; }
    public string ProductVersion { get; }
    public HistoryRow(string migrationId, string productVersion);
    [CompilerGeneratedAttribute]
public virtual string get_MigrationId();
    [CompilerGeneratedAttribute]
public virtual string get_ProductVersion();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository {
    public abstract virtual bool Exists();
    public abstract virtual Task`1<bool> ExistsAsync(CancellationToken cancellationToken);
    public abstract virtual IReadOnlyList`1<HistoryRow> GetAppliedMigrations();
    public abstract virtual Task`1<IReadOnlyList`1<HistoryRow>> GetAppliedMigrationsAsync(CancellationToken cancellationToken);
    public abstract virtual string GetCreateScript();
    public abstract virtual string GetCreateIfNotExistsScript();
    public abstract virtual string GetInsertScript(HistoryRow row);
    public abstract virtual string GetDeleteScript(string migrationId);
    public abstract virtual string GetBeginIfNotExistsScript(string migrationId);
    public abstract virtual string GetBeginIfExistsScript(string migrationId);
    public abstract virtual string GetEndIfScript();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor {
    public abstract virtual void ExecuteNonQuery(IEnumerable`1<MigrationCommand> migrationCommands, IRelationalConnection connection);
    public abstract virtual Task ExecuteNonQueryAsync(IEnumerable`1<MigrationCommand> migrationCommands, IRelationalConnection connection, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Migrations.IMigrationsAnnotationProvider {
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(IRelationalModel model);
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(ITable table);
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(IColumn column);
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(IView view);
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(IViewColumn column);
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(IUniqueConstraint constraint);
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(ITableIndex index);
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(IForeignKeyConstraint foreignKey);
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(ISequence sequence);
    public abstract virtual IEnumerable`1<IAnnotation> ForRemove(ICheckConstraint checkConstraint);
    public virtual IEnumerable`1<IAnnotation> ForRename(ITable table);
    public virtual IEnumerable`1<IAnnotation> ForRename(IColumn column);
    public virtual IEnumerable`1<IAnnotation> ForRename(ITableIndex index);
    public virtual IEnumerable`1<IAnnotation> ForRename(ISequence sequence);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly {
    public IReadOnlyDictionary`2<string, TypeInfo> Migrations { get; }
    [NullableAttribute("2")]
public ModelSnapshot ModelSnapshot { get; }
    public Assembly Assembly { get; }
    public abstract virtual IReadOnlyDictionary`2<string, TypeInfo> get_Migrations();
    [NullableContextAttribute("2")]
public abstract virtual ModelSnapshot get_ModelSnapshot();
    public abstract virtual Assembly get_Assembly();
    public abstract virtual string FindMigrationId(string nameOrId);
    public abstract virtual Migration CreateMigration(TypeInfo migrationClass, string activeProvider);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Migrations.IMigrationsIdGenerator {
    public abstract virtual string GenerateId(string name);
    public abstract virtual string GetName(string id);
    public abstract virtual bool IsValidId(string value);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer {
    public abstract virtual bool HasDifferences(IRelationalModel source, IRelationalModel target);
    public abstract virtual IReadOnlyList`1<MigrationOperation> GetDifferences(IRelationalModel source, IRelationalModel target);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator {
    public abstract virtual IReadOnlyList`1<MigrationCommand> Generate(IReadOnlyList`1<MigrationOperation> operations, IModel model, MigrationsSqlGenerationOptions options);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Migrations.IMigrator {
    [RequiresUnreferencedCodeAttribute("Migration generation currently isn't compatible with trimming")]
public abstract virtual void Migrate(string targetMigration);
    [NullableContextAttribute("1")]
[RequiresUnreferencedCodeAttribute("Migration generation currently isn't compatible with trimming")]
public abstract virtual Task MigrateAsync(string targetMigration, CancellationToken cancellationToken);
    [RequiresUnreferencedCodeAttribute("Migration generation currently isn't compatible with trimming")]
public abstract virtual string GenerateScript(string fromMigration, string toMigration, MigrationsSqlGenerationOptions options);
}
public class Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationCommandExecutor : object {
    [NullableContextAttribute("1")]
public virtual void ExecuteNonQuery(IEnumerable`1<MigrationCommand> migrationCommands, IRelationalConnection connection);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationCommandExecutor/<ExecuteNonQueryAsync>d__1")]
public virtual Task ExecuteNonQueryAsync(IEnumerable`1<MigrationCommand> migrationCommands, IRelationalConnection connection, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string GetId(Migration migration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsAssembly : object {
    private IMigrationsIdGenerator _idGenerator;
    private IDiagnosticsLogger`1<Migrations> _logger;
    private IReadOnlyDictionary`2<string, TypeInfo> _migrations;
    private ModelSnapshot _modelSnapshot;
    private Type _contextType;
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    public IReadOnlyDictionary`2<string, TypeInfo> Migrations { get; }
    [NullableAttribute("2")]
public ModelSnapshot ModelSnapshot { get; }
    public Assembly Assembly { get; }
    public MigrationsAssembly(ICurrentDbContext currentContext, IDbContextOptions options, IMigrationsIdGenerator idGenerator, IDiagnosticsLogger`1<Migrations> logger);
    public virtual IReadOnlyDictionary`2<string, TypeInfo> get_Migrations();
    [NullableContextAttribute("2")]
public virtual ModelSnapshot get_ModelSnapshot();
    [CompilerGeneratedAttribute]
public virtual Assembly get_Assembly();
    public virtual string FindMigrationId(string nameOrId);
    public virtual Migration CreateMigration(TypeInfo migrationClass, string activeProvider);
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, TypeInfo> <get_Migrations>g__Create|7_0();
    [CompilerGeneratedAttribute]
private bool <get_Migrations>b__7_1(TypeInfo t);
    [CompilerGeneratedAttribute]
private bool <get_ModelSnapshot>b__9_0(TypeInfo t);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsIdGenerator : object {
    private static string Format;
    private DateTime _lastTimestamp;
    private object _lock;
    public virtual string GetName(string id);
    public virtual bool IsValidId(string value);
    public virtual string GenerateId(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer : object {
    private static bool QuirkEnabled27504;
    private static bool UseOldBehavior30321;
    private static Type[] DropOperationTypes;
    private static Type[] AlterOperationTypes;
    private static Type[] RenameOperationTypes;
    private static Type[] ColumnOperationTypes;
    private static Type[] ConstraintOperationTypes;
    private Dictionary`2<ITable, IRowIdentityMap> _sourceIdentityMaps;
    private Dictionary`2<ITable, IRowIdentityMap> _targetIdentityMaps;
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <TypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationsAnnotationProvider <MigrationsAnnotationProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IRowIdentityMapFactory <RowIdentityMapFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandBatchPreparerDependencies <CommandBatchPreparerDependencies>k__BackingField;
    protected IRelationalTypeMappingSource TypeMappingSource { get; }
    protected IMigrationsAnnotationProvider MigrationsAnnotationProvider { get; }
    protected IRowIdentityMapFactory RowIdentityMapFactory { get; }
    protected CommandBatchPreparerDependencies CommandBatchPreparerDependencies { get; }
    public MigrationsModelDiffer(IRelationalTypeMappingSource typeMappingSource, IMigrationsAnnotationProvider migrationsAnnotationProvider, IRowIdentityMapFactory rowIdentityMapFactory, CommandBatchPreparerDependencies commandBatchPreparerDependencies);
    private static MigrationsModelDiffer();
    [CompilerGeneratedAttribute]
protected virtual IRelationalTypeMappingSource get_TypeMappingSource();
    [CompilerGeneratedAttribute]
protected virtual IMigrationsAnnotationProvider get_MigrationsAnnotationProvider();
    [CompilerGeneratedAttribute]
protected virtual IRowIdentityMapFactory get_RowIdentityMapFactory();
    [CompilerGeneratedAttribute]
protected virtual CommandBatchPreparerDependencies get_CommandBatchPreparerDependencies();
    [NullableContextAttribute("2")]
public virtual bool HasDifferences(IRelationalModel source, IRelationalModel target);
    [NullableContextAttribute("2")]
public virtual IReadOnlyList`1<MigrationOperation> GetDifferences(IRelationalModel source, IRelationalModel target);
    protected virtual IReadOnlyList`1<MigrationOperation> Sort(IEnumerable`1<MigrationOperation> operations, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IRelationalModel source, IRelationalModel target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<DiffAnnotations>d__26")]
private IEnumerable`1<MigrationOperation> DiffAnnotations(IRelationalModel source, IRelationalModel target);
    protected virtual IEnumerable`1<MigrationOperation> Add(IRelationalModel target, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Remove(IRelationalModel source, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IEnumerable`1<string> source, IEnumerable`1<string> target, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(string source, string target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Add>d__31")]
protected virtual IEnumerable`1<MigrationOperation> Add(string target, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Remove(string source, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IEnumerable`1<ITable> source, IEnumerable`1<ITable> target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Diff>d__34")]
protected virtual IEnumerable`1<MigrationOperation> Diff(ITable source, ITable target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Add>d__35")]
protected virtual IEnumerable`1<MigrationOperation> Add(ITable target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Remove>d__36")]
protected virtual IEnumerable`1<MigrationOperation> Remove(ITable source, DiffContext diffContext);
    private static IEnumerable`1<IColumn> GetSortedColumns(ITable table);
    private static IEnumerable`1<IProperty> GetSortedProperties(IEntityType entityType, ITable table);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IEnumerable`1<IColumn> source, IEnumerable`1<IColumn> target, DiffContext diffContext);
    private static bool ColumnStructureEquals(IColumn source, IColumn target);
    private static bool EntityTypePathEquals(IEntityType source, IEntityType target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Diff>d__43")]
protected virtual IEnumerable`1<MigrationOperation> Diff(IColumn source, IColumn target, DiffContext diffContext);
    private void InitializeColumnHelper(ColumnOperation columnOperation, IColumn column, bool inline);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Add>d__45")]
protected virtual IEnumerable`1<MigrationOperation> Add(IColumn target, DiffContext diffContext, bool inline);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Remove>d__46")]
protected virtual IEnumerable`1<MigrationOperation> Remove(IColumn source, DiffContext diffContext);
    private void Initialize(ColumnOperation columnOperation, IColumn column, RelationalTypeMapping typeMapping, bool isNullable, IEnumerable`1<IAnnotation> migrationsAnnotations, bool inline);
    private void InitializeJsonColumn(ColumnOperation columnOperation, JsonColumn jsonColumn, bool isNullable, IEnumerable`1<IAnnotation> migrationsAnnotations, bool inline);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IEnumerable`1<IUniqueConstraint> source, IEnumerable`1<IUniqueConstraint> target, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IUniqueConstraint source, IUniqueConstraint target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Add>d__51")]
protected virtual IEnumerable`1<MigrationOperation> Add(IUniqueConstraint target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Remove>d__52")]
protected virtual IEnumerable`1<MigrationOperation> Remove(IUniqueConstraint source, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IEnumerable`1<IForeignKeyConstraint> source, IEnumerable`1<IForeignKeyConstraint> target, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IForeignKeyConstraint source, IForeignKeyConstraint target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Add>d__55")]
protected virtual IEnumerable`1<MigrationOperation> Add(IForeignKeyConstraint target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Remove>d__56")]
protected virtual IEnumerable`1<MigrationOperation> Remove(IForeignKeyConstraint source, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IEnumerable`1<ITableIndex> source, IEnumerable`1<ITableIndex> target, DiffContext diffContext);
    private bool IndexStructureEquals(ITableIndex source, ITableIndex target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Diff>d__59")]
protected virtual IEnumerable`1<MigrationOperation> Diff(ITableIndex source, ITableIndex target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Add>d__60")]
protected virtual IEnumerable`1<MigrationOperation> Add(ITableIndex target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Remove>d__61")]
protected virtual IEnumerable`1<MigrationOperation> Remove(ITableIndex source, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IEnumerable`1<ICheckConstraint> source, IEnumerable`1<ICheckConstraint> target, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(ICheckConstraint source, ICheckConstraint target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Add>d__64")]
protected virtual IEnumerable`1<MigrationOperation> Add(ICheckConstraint target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Remove>d__65")]
protected virtual IEnumerable`1<MigrationOperation> Remove(ICheckConstraint source, DiffContext diffContext);
    protected virtual IEnumerable`1<MigrationOperation> Diff(IEnumerable`1<ISequence> source, IEnumerable`1<ISequence> target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Diff>d__67")]
protected virtual IEnumerable`1<MigrationOperation> Diff(ISequence source, ISequence target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Add>d__68")]
protected virtual IEnumerable`1<MigrationOperation> Add(ISequence target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<Remove>d__69")]
protected virtual IEnumerable`1<MigrationOperation> Remove(ISequence source, DiffContext diffContext);
    private static SequenceOperation Initialize(SequenceOperation sequenceOperation, ISequence sequence, IEnumerable`1<IAnnotation> migrationsAnnotations);
    [NullableContextAttribute("2")]
protected virtual void TrackData(IRelationalModel source, IRelationalModel target, DiffContext diffContext);
    private void AddSeedData(IEntityType entityType, Dictionary`2<ITable, IRowIdentityMap> identityMaps, EntityState initialState);
    [NullableContextAttribute("2")]
protected virtual void DiffData(IRelationalModel source, IRelationalModel target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<GetDataOperations>d__74")]
protected virtual IEnumerable`1<MigrationOperation> GetDataOperations(IRelationalModel source, IRelationalModel target, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<GetDataOperations>d__75")]
private IEnumerable`1<MigrationOperation> GetDataOperations(bool forSource, DiffContext diffContext);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer/<DiffCollection>d__76`1")]
protected virtual IEnumerable`1<MigrationOperation> DiffCollection(IEnumerable`1<T> sources, IEnumerable`1<T> targets, DiffContext diffContext, Func`4<T, T, DiffContext, IEnumerable`1<MigrationOperation>> diff, Func`3<T, DiffContext, IEnumerable`1<MigrationOperation>> add, Func`3<T, DiffContext, IEnumerable`1<MigrationOperation>> remove, Func`4[] predicates);
    protected virtual bool HasDifferences(IEnumerable`1<IAnnotation> source, IEnumerable`1<IAnnotation> target);
    protected virtual IEnumerable`1<string> GetSchemas(IRelationalModel model);
    protected virtual object GetDefaultValue(Type type);
    private static ValueConverter GetValueConverter(IProperty property, RelationalTypeMapping typeMapping);
    private static IEntityType GetMainType(ITable table);
    private static Object[0...,0...] ToMultidimensionalArray(IReadOnlyList`1<object> values);
    private static Object[0...,0...] AddToMultidimensionalArray(IReadOnlyList`1<object> values, Object[0...,0...] array);
    private static string BuildValuesString(Object[] values);
    [CompilerGeneratedAttribute]
private IEnumerable`1<MigrationOperation> <Diff>b__40_0(IColumn t, DiffContext c);
    [CompilerGeneratedAttribute]
private bool <Diff>b__49_0(IUniqueConstraint s, IUniqueConstraint t, DiffContext c);
    [CompilerGeneratedAttribute]
private bool <Diff>b__53_0(IForeignKeyConstraint s, IForeignKeyConstraint t, DiffContext context);
    [CompilerGeneratedAttribute]
private bool <Diff>b__57_0(ITableIndex s, ITableIndex t, DiffContext c);
    [CompilerGeneratedAttribute]
private bool <Diff>b__57_1(ITableIndex s, ITableIndex t, DiffContext c);
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<object, bool> <AddSeedData>g__GetClrValue|72_0(IProperty property, object seed);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator : object {
    private IMigrationsAssembly _migrationsAssembly;
    private IHistoryRepository _historyRepository;
    private IRelationalDatabaseCreator _databaseCreator;
    private IMigrationsSqlGenerator _migrationsSqlGenerator;
    private IRawSqlCommandBuilder _rawSqlCommandBuilder;
    private IMigrationCommandExecutor _migrationCommandExecutor;
    private IRelationalConnection _connection;
    private ISqlGenerationHelper _sqlGenerationHelper;
    private ICurrentDbContext _currentContext;
    private IModelRuntimeInitializer _modelRuntimeInitializer;
    private IDiagnosticsLogger`1<Migrations> _logger;
    private IRelationalCommandDiagnosticsLogger _commandLogger;
    private string _activeProvider;
    public Migrator(IMigrationsAssembly migrationsAssembly, IHistoryRepository historyRepository, IDatabaseCreator databaseCreator, IMigrationsSqlGenerator migrationsSqlGenerator, IRawSqlCommandBuilder rawSqlCommandBuilder, IMigrationCommandExecutor migrationCommandExecutor, IRelationalConnection connection, ISqlGenerationHelper sqlGenerationHelper, ICurrentDbContext currentContext, IModelRuntimeInitializer modelRuntimeInitializer, IDiagnosticsLogger`1<Migrations> logger, IRelationalCommandDiagnosticsLogger commandLogger, IDatabaseProvider databaseProvider);
    [NullableContextAttribute("2")]
public virtual void Migrate(string targetMigration);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator/<MigrateAsync>d__15")]
public virtual Task MigrateAsync(string targetMigration, CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator/<GetMigrationCommandLists>d__16")]
private IEnumerable`1<Func`1<IReadOnlyList`1<MigrationCommand>>> GetMigrationCommandLists(IReadOnlyList`1<HistoryRow> appliedMigrationEntries, string targetMigration);
    protected virtual void PopulateMigrations(IEnumerable`1<string> appliedMigrationEntries, string targetMigration, IReadOnlyList`1& migrationsToApply, IReadOnlyList`1& migrationsToRevert, Migration& actualTargetMigration);
    [NullableContextAttribute("2")]
public virtual string GenerateScript(string fromMigration, string toMigration, MigrationsSqlGenerationOptions options);
    protected virtual IReadOnlyList`1<MigrationCommand> GenerateUpSql(Migration migration, MigrationsSqlGenerationOptions options);
    protected virtual IReadOnlyList`1<MigrationCommand> GenerateDownSql(Migration migration, Migration previousMigration, MigrationsSqlGenerationOptions options);
    private IModel FinalizeModel(IModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Migrations.Migration : object {
    public static string InitialDatabase;
    private IModel _targetModel;
    private List`1<MigrationOperation> _upOperations;
    private List`1<MigrationOperation> _downOperations;
    [CompilerGeneratedAttribute]
private string <ActiveProvider>k__BackingField;
    public IModel TargetModel { get; }
    public IReadOnlyList`1<MigrationOperation> UpOperations { get; }
    public IReadOnlyList`1<MigrationOperation> DownOperations { get; }
    [NullableAttribute("2")]
public string ActiveProvider { get; public set; }
    public virtual IModel get_TargetModel();
    public virtual IReadOnlyList`1<MigrationOperation> get_UpOperations();
    public virtual IReadOnlyList`1<MigrationOperation> get_DownOperations();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_ActiveProvider();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_ActiveProvider(string value);
    protected virtual void BuildTargetModel(ModelBuilder modelBuilder);
    protected abstract virtual void Up(MigrationBuilder migrationBuilder);
    protected virtual void Down(MigrationBuilder migrationBuilder);
    private List`1<MigrationOperation> BuildOperations(Action`1<MigrationBuilder> buildAction);
    [CompilerGeneratedAttribute]
private IModel <get_TargetModel>g__Create|5_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Microsoft.EntityFrameworkCore.Migrations.MigrationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; }
    public MigrationAttribute(string id);
    [CompilerGeneratedAttribute]
public string get_Id();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder : object {
    [CompilerGeneratedAttribute]
private string <ActiveProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MigrationOperation> <Operations>k__BackingField;
    [NullableAttribute("2")]
public string ActiveProvider { get; }
    public List`1<MigrationOperation> Operations { get; }
    [NullableContextAttribute("2")]
public MigrationBuilder(string activeProvider);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_ActiveProvider();
    [CompilerGeneratedAttribute]
public virtual List`1<MigrationOperation> get_Operations();
    [NullableContextAttribute("2")]
public virtual OperationBuilder`1<AddColumnOperation> AddColumn(string name, string table, string type, Nullable`1<bool> unicode, Nullable`1<int> maxLength, bool rowVersion, string schema, bool nullable, object defaultValue, string defaultValueSql, string computedColumnSql, Nullable`1<bool> fixedLength, string comment, string collation, Nullable`1<int> precision, Nullable`1<int> scale, Nullable`1<bool> stored);
    public virtual OperationBuilder`1<AddForeignKeyOperation> AddForeignKey(string name, string table, string column, string principalTable, string schema, string principalSchema, string principalColumn, ReferentialAction onUpdate, ReferentialAction onDelete);
    public virtual OperationBuilder`1<AddForeignKeyOperation> AddForeignKey(string name, string table, String[] columns, string principalTable, string schema, string principalSchema, String[] principalColumns, ReferentialAction onUpdate, ReferentialAction onDelete);
    public virtual OperationBuilder`1<AddPrimaryKeyOperation> AddPrimaryKey(string name, string table, string column, string schema);
    public virtual OperationBuilder`1<AddPrimaryKeyOperation> AddPrimaryKey(string name, string table, String[] columns, string schema);
    public virtual OperationBuilder`1<AddUniqueConstraintOperation> AddUniqueConstraint(string name, string table, string column, string schema);
    public virtual OperationBuilder`1<AddUniqueConstraintOperation> AddUniqueConstraint(string name, string table, String[] columns, string schema);
    [NullableContextAttribute("2")]
public virtual AlterOperationBuilder`1<AlterColumnOperation> AlterColumn(string name, string table, string type, Nullable`1<bool> unicode, Nullable`1<int> maxLength, bool rowVersion, string schema, bool nullable, object defaultValue, string defaultValueSql, string computedColumnSql, Type oldClrType, string oldType, Nullable`1<bool> oldUnicode, Nullable`1<int> oldMaxLength, bool oldRowVersion, bool oldNullable, object oldDefaultValue, string oldDefaultValueSql, string oldComputedColumnSql, Nullable`1<bool> fixedLength, Nullable`1<bool> oldFixedLength, string comment, string oldComment, string collation, string oldCollation, Nullable`1<int> precision, Nullable`1<int> oldPrecision, Nullable`1<int> scale, Nullable`1<int> oldScale, Nullable`1<bool> stored, Nullable`1<bool> oldStored);
    [NullableContextAttribute("2")]
public virtual AlterOperationBuilder`1<AlterDatabaseOperation> AlterDatabase(string collation, string oldCollation);
    public virtual AlterOperationBuilder`1<AlterSequenceOperation> AlterSequence(string name, string schema, int incrementBy, Nullable`1<long> minValue, Nullable`1<long> maxValue, bool cyclic, int oldIncrementBy, Nullable`1<long> oldMinValue, Nullable`1<long> oldMaxValue, bool oldCyclic);
    [NullableContextAttribute("2")]
public virtual AlterOperationBuilder`1<AlterTableOperation> AlterTable(string name, string schema, string comment, string oldComment);
    public virtual OperationBuilder`1<CreateIndexOperation> CreateIndex(string name, string table, string column, string schema, bool unique, string filter, Boolean[] descending);
    public virtual OperationBuilder`1<CreateIndexOperation> CreateIndex(string name, string table, String[] columns, string schema, bool unique, string filter, Boolean[] descending);
    public virtual OperationBuilder`1<EnsureSchemaOperation> EnsureSchema(string name);
    public virtual OperationBuilder`1<CreateSequenceOperation> CreateSequence(string name, string schema, long startValue, int incrementBy, Nullable`1<long> minValue, Nullable`1<long> maxValue, bool cyclic);
    public virtual OperationBuilder`1<CreateSequenceOperation> CreateSequence(string name, string schema, long startValue, int incrementBy, Nullable`1<long> minValue, Nullable`1<long> maxValue, bool cyclic);
    [EditorBrowsableAttribute("1")]
public virtual OperationBuilder`1<AddCheckConstraintOperation> CreateCheckConstraint(string name, string table, string sql, string schema);
    public virtual OperationBuilder`1<AddCheckConstraintOperation> AddCheckConstraint(string name, string table, string sql, string schema);
    public virtual CreateTableBuilder`1<TColumns> CreateTable(string name, Func`2<ColumnsBuilder, TColumns> columns, string schema, Action`1<CreateTableBuilder`1<TColumns>> constraints, string comment);
    public virtual OperationBuilder`1<DropColumnOperation> DropColumn(string name, string table, string schema);
    public virtual OperationBuilder`1<DropForeignKeyOperation> DropForeignKey(string name, string table, string schema);
    public virtual OperationBuilder`1<DropIndexOperation> DropIndex(string name, string table, string schema);
    public virtual OperationBuilder`1<DropPrimaryKeyOperation> DropPrimaryKey(string name, string table, string schema);
    public virtual OperationBuilder`1<DropSchemaOperation> DropSchema(string name);
    public virtual OperationBuilder`1<DropSequenceOperation> DropSequence(string name, string schema);
    public virtual OperationBuilder`1<DropCheckConstraintOperation> DropCheckConstraint(string name, string table, string schema);
    public virtual OperationBuilder`1<DropTableOperation> DropTable(string name, string schema);
    public virtual OperationBuilder`1<DropUniqueConstraintOperation> DropUniqueConstraint(string name, string table, string schema);
    public virtual OperationBuilder`1<RenameColumnOperation> RenameColumn(string name, string table, string newName, string schema);
    public virtual OperationBuilder`1<RenameIndexOperation> RenameIndex(string name, string newName, string table, string schema);
    [NullableContextAttribute("2")]
public virtual OperationBuilder`1<RenameSequenceOperation> RenameSequence(string name, string schema, string newName, string newSchema);
    [NullableContextAttribute("2")]
public virtual OperationBuilder`1<RenameTableOperation> RenameTable(string name, string schema, string newName, string newSchema);
    public virtual OperationBuilder`1<RestartSequenceOperation> RestartSequence(string name, long startValue, string schema);
    public virtual OperationBuilder`1<SqlOperation> Sql(string sql, bool suppressTransaction);
    public virtual OperationBuilder`1<InsertDataOperation> InsertData(string table, string column, object value, string schema);
    public virtual OperationBuilder`1<InsertDataOperation> InsertData(string table, string column, string columnType, object value, string schema);
    public virtual OperationBuilder`1<InsertDataOperation> InsertData(string table, String[] columns, Object[] values, string schema);
    public virtual OperationBuilder`1<InsertDataOperation> InsertData(string table, String[] columns, String[] columnTypes, Object[] values, string schema);
    public virtual OperationBuilder`1<InsertDataOperation> InsertData(string table, string column, Object[] values, string schema);
    public virtual OperationBuilder`1<InsertDataOperation> InsertData(string table, string column, string columnType, Object[] values, string schema);
    public virtual OperationBuilder`1<InsertDataOperation> InsertData(string table, String[] columns, Object[0...,0...] values, string schema);
    public virtual OperationBuilder`1<InsertDataOperation> InsertData(string table, String[] columns, String[] columnTypes, Object[0...,0...] values, string schema);
    private OperationBuilder`1<InsertDataOperation> InsertDataInternal(string table, String[] columns, String[] columnTypes, Object[0...,0...] values, string schema);
    public virtual OperationBuilder`1<DeleteDataOperation> DeleteData(string table, string keyColumn, object keyValue, string schema);
    public virtual OperationBuilder`1<DeleteDataOperation> DeleteData(string table, string keyColumn, string keyColumnType, object keyValue, string schema);
    public virtual OperationBuilder`1<DeleteDataOperation> DeleteData(string table, String[] keyColumns, Object[] keyValues, string schema);
    public virtual OperationBuilder`1<DeleteDataOperation> DeleteData(string table, String[] keyColumns, String[] keyColumnTypes, Object[] keyValues, string schema);
    public virtual OperationBuilder`1<DeleteDataOperation> DeleteData(string table, string keyColumn, Object[] keyValues, string schema);
    public virtual OperationBuilder`1<DeleteDataOperation> DeleteData(string table, string keyColumn, string keyColumnType, Object[] keyValues, string schema);
    public virtual OperationBuilder`1<DeleteDataOperation> DeleteData(string table, String[] keyColumns, Object[0...,0...] keyValues, string schema);
    public virtual OperationBuilder`1<DeleteDataOperation> DeleteData(string table, String[] keyColumns, String[] keyColumnTypes, Object[0...,0...] keyValues, string schema);
    private OperationBuilder`1<DeleteDataOperation> DeleteDataInternal(string table, String[] keyColumns, String[] keyColumnTypes, Object[0...,0...] keyValues, string schema);
    public virtual OperationBuilder`1<UpdateDataOperation> UpdateData(string table, string keyColumn, object keyValue, string column, object value, string schema);
    public virtual OperationBuilder`1<UpdateDataOperation> UpdateData(string table, string keyColumn, object keyValue, String[] columns, Object[] values, string schema);
    public virtual OperationBuilder`1<UpdateDataOperation> UpdateData(string table, String[] keyColumns, Object[] keyValues, string column, object value, string schema);
    public virtual OperationBuilder`1<UpdateDataOperation> UpdateData(string table, String[] keyColumns, Object[] keyValues, String[] columns, Object[] values, string schema);
    public virtual OperationBuilder`1<UpdateDataOperation> UpdateData(string table, String[] keyColumns, String[] keyColumnTypes, Object[] keyValues, String[] columns, String[] columnTypes, Object[] values, string schema);
    public virtual OperationBuilder`1<UpdateDataOperation> UpdateData(string table, string keyColumn, Object[] keyValues, string column, Object[] values, string schema);
    public virtual OperationBuilder`1<UpdateDataOperation> UpdateData(string table, string keyColumn, Object[] keyValues, String[] columns, Object[0...,0...] values, string schema);
    public virtual OperationBuilder`1<UpdateDataOperation> UpdateData(string table, String[] keyColumns, Object[0...,0...] keyValues, string column, Object[] values, string schema);
    public virtual OperationBuilder`1<UpdateDataOperation> UpdateData(string table, String[] keyColumns, Object[0...,0...] keyValues, String[] columns, Object[0...,0...] values, string schema);
    public virtual OperationBuilder`1<UpdateDataOperation> UpdateData(string table, String[] keyColumns, String[] keyColumnTypes, Object[0...,0...] keyValues, String[] columns, String[] columnTypes, Object[0...,0...] values, string schema);
    private OperationBuilder`1<UpdateDataOperation> UpdateDataInternal(string table, String[] keyColumns, String[] keyColumnTypes, Object[0...,0...] keyValues, String[] columns, String[] columnTypes, Object[0...,0...] values, string schema);
    private static Object[0...,0...] ToMultidimensionalArray(Object[] values, bool firstDimension);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.MigrationCommand : object {
    private IRelationalCommand _relationalCommand;
    private DbContext _context;
    [CompilerGeneratedAttribute]
private bool <TransactionSuppressed>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalCommandDiagnosticsLogger <CommandLogger>k__BackingField;
    public bool TransactionSuppressed { get; }
    public string CommandText { get; }
    public IRelationalCommandDiagnosticsLogger CommandLogger { get; }
    public MigrationCommand(IRelationalCommand relationalCommand, DbContext context, IRelationalCommandDiagnosticsLogger logger, bool transactionSuppressed);
    [CompilerGeneratedAttribute]
public virtual bool get_TransactionSuppressed();
    public virtual string get_CommandText();
    [CompilerGeneratedAttribute]
public virtual IRelationalCommandDiagnosticsLogger get_CommandLogger();
    public virtual int ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues);
    public virtual Task`1<int> ExecuteNonQueryAsync(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder : object {
    private List`1<MigrationCommand> _commands;
    private IRelationalCommandBuilder _commandBuilder;
    [CompilerGeneratedAttribute]
private MigrationsSqlGeneratorDependencies <Dependencies>k__BackingField;
    protected MigrationsSqlGeneratorDependencies Dependencies { get; }
    public MigrationCommandListBuilder(MigrationsSqlGeneratorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual MigrationsSqlGeneratorDependencies get_Dependencies();
    public virtual IReadOnlyList`1<MigrationCommand> GetCommandList();
    public virtual MigrationCommandListBuilder EndCommand(bool suppressTransaction);
    public virtual MigrationCommandListBuilder Append(string o);
    public virtual MigrationCommandListBuilder AppendLine();
    public virtual MigrationCommandListBuilder AppendLine(string value);
    public virtual MigrationCommandListBuilder AppendLines(string value);
    public virtual IDisposable Indent();
    public virtual MigrationCommandListBuilder IncrementIndent();
    public virtual MigrationCommandListBuilder DecrementIndent();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.MigrationsAnnotationProvider : object {
    [CompilerGeneratedAttribute]
private MigrationsAnnotationProviderDependencies <Dependencies>k__BackingField;
    protected MigrationsAnnotationProviderDependencies Dependencies { get; }
    public MigrationsAnnotationProvider(MigrationsAnnotationProviderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual MigrationsAnnotationProviderDependencies get_Dependencies();
    public virtual IEnumerable`1<IAnnotation> ForRemove(IRelationalModel model);
    public virtual IEnumerable`1<IAnnotation> ForRemove(ITable table);
    public virtual IEnumerable`1<IAnnotation> ForRemove(IColumn column);
    public virtual IEnumerable`1<IAnnotation> ForRemove(IView view);
    public virtual IEnumerable`1<IAnnotation> ForRemove(IViewColumn column);
    public virtual IEnumerable`1<IAnnotation> ForRemove(IUniqueConstraint constraint);
    public virtual IEnumerable`1<IAnnotation> ForRemove(ITableIndex index);
    public virtual IEnumerable`1<IAnnotation> ForRemove(IForeignKeyConstraint foreignKey);
    public virtual IEnumerable`1<IAnnotation> ForRemove(ISequence sequence);
    public virtual IEnumerable`1<IAnnotation> ForRemove(ICheckConstraint checkConstraint);
    public virtual IEnumerable`1<IAnnotation> ForRename(ITable table);
    public virtual IEnumerable`1<IAnnotation> ForRename(IColumn column);
    public virtual IEnumerable`1<IAnnotation> ForRename(ITableIndex index);
    public virtual IEnumerable`1<IAnnotation> ForRename(ISequence sequence);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EntityFrameworkInternalAttribute]
public class Microsoft.EntityFrameworkCore.Migrations.MigrationsAnnotationProviderDependencies : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private MigrationsAnnotationProviderDependencies(MigrationsAnnotationProviderDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(MigrationsAnnotationProviderDependencies left, MigrationsAnnotationProviderDependencies right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(MigrationsAnnotationProviderDependencies left, MigrationsAnnotationProviderDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(MigrationsAnnotationProviderDependencies other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public MigrationsAnnotationProviderDependencies <Clone>$();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Migrations.MigrationsAssemblyExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string GetMigrationId(IMigrationsAssembly assembly, string nameOrId);
}
[FlagsAttribute]
public enum Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerationOptions : Enum {
    public int value__;
    public static MigrationsSqlGenerationOptions Default;
    public static MigrationsSqlGenerationOptions Script;
    public static MigrationsSqlGenerationOptions Idempotent;
    public static MigrationsSqlGenerationOptions NoTransactions;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator : object {
    private static IReadOnlyDictionary`2<Type, Action`4<MigrationsSqlGenerator, MigrationOperation, IModel, MigrationCommandListBuilder>> GenerateActions;
    [CompilerGeneratedAttribute]
private MigrationsSqlGeneratorDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SensitiveLoggingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IComparer`1<string> <VersionComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private MigrationsSqlGenerationOptions <Options>k__BackingField;
    protected MigrationsSqlGeneratorDependencies Dependencies { get; }
    private bool SensitiveLoggingEnabled { get; }
    protected IUpdateSqlGenerator SqlGenerator { get; }
    protected IComparer`1<string> VersionComparer { get; }
    protected MigrationsSqlGenerationOptions Options { get; protected set; }
    public MigrationsSqlGenerator(MigrationsSqlGeneratorDependencies dependencies);
    private static MigrationsSqlGenerator();
    [CompilerGeneratedAttribute]
protected virtual MigrationsSqlGeneratorDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
private bool get_SensitiveLoggingEnabled();
    protected virtual IUpdateSqlGenerator get_SqlGenerator();
    [CompilerGeneratedAttribute]
protected virtual IComparer`1<string> get_VersionComparer();
    [CompilerGeneratedAttribute]
protected virtual MigrationsSqlGenerationOptions get_Options();
    [CompilerGeneratedAttribute]
protected virtual void set_Options(MigrationsSqlGenerationOptions value);
    public virtual IReadOnlyList`1<MigrationCommand> Generate(IReadOnlyList`1<MigrationOperation> operations, IModel model, MigrationsSqlGenerationOptions options);
    protected virtual void Generate(MigrationOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AddColumnOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(AddForeignKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(AddPrimaryKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(AddUniqueConstraintOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AddCheckConstraintOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AlterColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AlterDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameIndexOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AlterSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AlterTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(CreateIndexOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(EnsureSchemaOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(CreateSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropColumnOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropForeignKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropIndexOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropPrimaryKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropSchemaOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropTableOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropUniqueConstraintOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropCheckConstraintOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RestartSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(SqlOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(InsertDataOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator/<GenerateModificationCommands>d__48")]
protected virtual IEnumerable`1<IReadOnlyModificationCommand> GenerateModificationCommands(InsertDataOperation operation, IModel model);
    protected virtual void Generate(DeleteDataOperation operation, IModel model, MigrationCommandListBuilder builder);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator/<GenerateModificationCommands>d__50")]
protected virtual IEnumerable`1<IReadOnlyModificationCommand> GenerateModificationCommands(DeleteDataOperation operation, IModel model);
    protected virtual void Generate(UpdateDataOperation operation, IModel model, MigrationCommandListBuilder builder);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator/<GenerateModificationCommands>d__52")]
protected virtual IEnumerable`1<IReadOnlyModificationCommand> GenerateModificationCommands(UpdateDataOperation operation, IModel model);
    private static string FormatTable(string table, string schema);
    private static IColumnMapping[] GetPropertyMappings(String[] names, string tableName, string schema, IModel model);
    protected virtual void SequenceOptions(AlterSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void SequenceOptions(CreateSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void SequenceOptions(string schema, string name, SequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void CreateTableColumns(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ColumnDefinition(AddColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ColumnDefinition(string schema, string table, string name, ColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ComputedColumnDefinition(string schema, string table, string name, ColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual string GetColumnType(string schema, string tableName, string name, ColumnOperation operation, IModel model);
    [NullableContextAttribute("2")]
protected virtual void DefaultValue(object defaultValue, string defaultValueSql, string columnType, MigrationCommandListBuilder builder);
    protected virtual void CreateTableConstraints(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void CreateTableForeignKeys(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ForeignKeyConstraint(AddForeignKeyOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void CreateTablePrimaryKeyConstraint(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void PrimaryKeyConstraint(AddPrimaryKeyOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void CreateTableUniqueConstraints(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void UniqueConstraint(AddUniqueConstraintOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void CreateTableCheckConstraints(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void CheckConstraint(AddCheckConstraintOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void IndexTraits(MigrationOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void GenerateIndexColumnList(CreateIndexOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void IndexOptions(CreateIndexOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ForeignKeyAction(ReferentialAction referentialAction, MigrationCommandListBuilder builder);
    protected virtual void EndStatement(MigrationCommandListBuilder builder, bool suppressTransaction);
    protected virtual string ColumnList(String[] columns);
    [NullableContextAttribute("2")]
protected virtual bool IsOldColumnSupported(IModel model);
    [NullableContextAttribute("2")]
protected virtual bool HasLegacyRenameOperations(IModel model);
    [NullableContextAttribute("2")]
protected virtual bool TryGetVersion(IModel model, String& version);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGeneratorDependencies : object {
    [CompilerGeneratedAttribute]
private IRelationalCommandBuilderFactory <CommandBuilderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IUpdateSqlGenerator <UpdateSqlGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlGenerationHelper <SqlGenerationHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <TypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IModificationCommandFactory <ModificationCommandFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ILoggingOptions <LoggingOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalCommandDiagnosticsLogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Migrations> <MigrationsLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IRelationalCommandBuilderFactory CommandBuilderFactory { get; public set; }
    public IUpdateSqlGenerator UpdateSqlGenerator { get; public set; }
    public ISqlGenerationHelper SqlGenerationHelper { get; public set; }
    public IRelationalTypeMappingSource TypeMappingSource { get; public set; }
    public ICurrentDbContext CurrentContext { get; public set; }
    public IModificationCommandFactory ModificationCommandFactory { get; public set; }
    public ILoggingOptions LoggingOptions { get; public set; }
    public IRelationalCommandDiagnosticsLogger Logger { get; public set; }
    public IDiagnosticsLogger`1<Migrations> MigrationsLogger { get; public set; }
    [EntityFrameworkInternalAttribute]
public MigrationsSqlGeneratorDependencies(IRelationalCommandBuilderFactory commandBuilderFactory, IUpdateSqlGenerator updateSqlGenerator, ISqlGenerationHelper sqlGenerationHelper, IRelationalTypeMappingSource typeMappingSource, ICurrentDbContext currentContext, IModificationCommandFactory modificationCommandFactory, ILoggingOptions loggingOptions, IRelationalCommandDiagnosticsLogger logger, IDiagnosticsLogger`1<Migrations> migrationsLogger);
    [CompilerGeneratedAttribute]
private MigrationsSqlGeneratorDependencies(MigrationsSqlGeneratorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IRelationalCommandBuilderFactory get_CommandBuilderFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CommandBuilderFactory(IRelationalCommandBuilderFactory value);
    [CompilerGeneratedAttribute]
public IUpdateSqlGenerator get_UpdateSqlGenerator();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UpdateSqlGenerator(IUpdateSqlGenerator value);
    [CompilerGeneratedAttribute]
public ISqlGenerationHelper get_SqlGenerationHelper();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SqlGenerationHelper(ISqlGenerationHelper value);
    [CompilerGeneratedAttribute]
public IRelationalTypeMappingSource get_TypeMappingSource();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeMappingSource(IRelationalTypeMappingSource value);
    [CompilerGeneratedAttribute]
public ICurrentDbContext get_CurrentContext();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CurrentContext(ICurrentDbContext value);
    [CompilerGeneratedAttribute]
public IModificationCommandFactory get_ModificationCommandFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModificationCommandFactory(IModificationCommandFactory value);
    [CompilerGeneratedAttribute]
public ILoggingOptions get_LoggingOptions();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LoggingOptions(ILoggingOptions value);
    [CompilerGeneratedAttribute]
public IRelationalCommandDiagnosticsLogger get_Logger();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Logger(IRelationalCommandDiagnosticsLogger value);
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Migrations> get_MigrationsLogger();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MigrationsLogger(IDiagnosticsLogger`1<Migrations> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(MigrationsSqlGeneratorDependencies left, MigrationsSqlGeneratorDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(MigrationsSqlGeneratorDependencies left, MigrationsSqlGeneratorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(MigrationsSqlGeneratorDependencies other);
    [CompilerGeneratedAttribute]
public MigrationsSqlGeneratorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("ALTER TABLE {Table} ADD CONSTRAINT {Name} CHECK")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AddCheckConstraintOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    public string Name { get; public set; }
    public string Table { get; public set; }
    [NullableAttribute("2")]
public string Schema { get; public set; }
    public string Sql { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Sql();
    [CompilerGeneratedAttribute]
public virtual void set_Sql(string value);
    public static AddCheckConstraintOperation CreateFrom(ICheckConstraint checkConstraint);
}
[DebuggerDisplayAttribute("ALTER TABLE {Table} ADD {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation : ColumnOperation {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("ALTER TABLE {Table} ADD CONSTRAINT {Name} FOREIGN KEY")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrincipalSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrincipalTable>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PrincipalColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferentialAction <OnUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferentialAction <OnDelete>k__BackingField;
    public string Name { get; public set; }
    [NullableAttribute("2")]
public string Schema { get; public set; }
    public string Table { get; public set; }
    public String[] Columns { get; public set; }
    [NullableAttribute("2")]
public string PrincipalSchema { get; public set; }
    public string PrincipalTable { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] PrincipalColumns { get; public set; }
    public ReferentialAction OnUpdate { get; public set; }
    public ReferentialAction OnDelete { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [CompilerGeneratedAttribute]
public virtual String[] get_Columns();
    [CompilerGeneratedAttribute]
public virtual void set_Columns(String[] value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_PrincipalSchema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_PrincipalSchema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PrincipalTable();
    [CompilerGeneratedAttribute]
public virtual void set_PrincipalTable(string value);
    [CompilerGeneratedAttribute]
public virtual String[] get_PrincipalColumns();
    [CompilerGeneratedAttribute]
public virtual void set_PrincipalColumns(String[] value);
    [CompilerGeneratedAttribute]
public virtual ReferentialAction get_OnUpdate();
    [CompilerGeneratedAttribute]
public virtual void set_OnUpdate(ReferentialAction value);
    [CompilerGeneratedAttribute]
public virtual ReferentialAction get_OnDelete();
    [CompilerGeneratedAttribute]
public virtual void set_OnDelete(ReferentialAction value);
    public static AddForeignKeyOperation CreateFrom(IForeignKeyConstraint foreignKey);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("ALTER TABLE {Table} ADD CONSTRAINT {Name} PRIMARY KEY")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AddPrimaryKeyOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Columns>k__BackingField;
    [NullableAttribute("2")]
public string Schema { get; public set; }
    public string Table { get; public set; }
    public string Name { get; public set; }
    public String[] Columns { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual String[] get_Columns();
    [CompilerGeneratedAttribute]
public virtual void set_Columns(String[] value);
    public static AddPrimaryKeyOperation CreateFrom(IPrimaryKeyConstraint primaryKey);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("ALTER TABLE {Table} ADD CONSTRAINT {Name} UNIQUE")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AddUniqueConstraintOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Columns>k__BackingField;
    [NullableAttribute("2")]
public string Schema { get; public set; }
    public string Table { get; public set; }
    public string Name { get; public set; }
    public String[] Columns { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual String[] get_Columns();
    [CompilerGeneratedAttribute]
public virtual void set_Columns(String[] value);
    public static AddUniqueConstraintOperation CreateFrom(IUniqueConstraint uniqueConstraint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("ALTER TABLE {Table} ALTER COLUMN {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AlterColumnOperation : ColumnOperation {
    [CompilerGeneratedAttribute]
private ColumnOperation <OldColumn>k__BackingField;
    public ColumnOperation OldColumn { get; public set; }
    private IMutableAnnotatable Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.OldAnnotations { get; }
    [CompilerGeneratedAttribute]
public virtual ColumnOperation get_OldColumn();
    [CompilerGeneratedAttribute]
public virtual void set_OldColumn(ColumnOperation value);
    private sealed virtual override IMutableAnnotatable Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.get_OldAnnotations();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("ALTER DATABASE {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AlterDatabaseOperation : DatabaseOperation {
    [CompilerGeneratedAttribute]
private DatabaseOperation <OldDatabase>k__BackingField;
    public DatabaseOperation OldDatabase { get; }
    private IMutableAnnotatable Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.OldAnnotations { get; }
    [CompilerGeneratedAttribute]
public virtual DatabaseOperation get_OldDatabase();
    private sealed virtual override IMutableAnnotatable Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.get_OldAnnotations();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("ALTER SEQUENCE {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AlterSequenceOperation : SequenceOperation {
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SequenceOperation <OldSequence>k__BackingField;
    [NullableAttribute("2")]
public string Schema { get; public set; }
    public string Name { get; public set; }
    public SequenceOperation OldSequence { get; public set; }
    private IMutableAnnotatable Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.OldAnnotations { get; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual SequenceOperation get_OldSequence();
    [CompilerGeneratedAttribute]
public virtual void set_OldSequence(SequenceOperation value);
    private sealed virtual override IMutableAnnotatable Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.get_OldAnnotations();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("ALTER TABLE {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.AlterTableOperation : TableOperation {
    [CompilerGeneratedAttribute]
private TableOperation <OldTable>k__BackingField;
    public TableOperation OldTable { get; public set; }
    private IMutableAnnotatable Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.OldAnnotations { get; }
    [CompilerGeneratedAttribute]
public virtual TableOperation get_OldTable();
    [CompilerGeneratedAttribute]
public virtual void set_OldTable(TableOperation value);
    private sealed virtual override IMutableAnnotatable Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.get_OldAnnotations();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.AlterOperationBuilder`1 : OperationBuilder`1<TOperation> {
    public AlterOperationBuilder`1(TOperation operation);
    public virtual AlterOperationBuilder`1<TOperation> Annotation(string name, object value);
    public virtual AlterOperationBuilder`1<TOperation> OldAnnotation(string name, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder : object {
    private CreateTableOperation _createTableOperation;
    public ColumnsBuilder(CreateTableOperation createTableOperation);
    [NullableContextAttribute("2")]
public virtual OperationBuilder`1<AddColumnOperation> Column(string type, Nullable`1<bool> unicode, Nullable`1<int> maxLength, bool rowVersion, string name, bool nullable, object defaultValue, string defaultValueSql, string computedColumnSql, Nullable`1<bool> fixedLength, string comment, string collation, Nullable`1<int> precision, Nullable`1<int> scale, Nullable`1<bool> stored);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder`1 : OperationBuilder`1<CreateTableOperation> {
    private IReadOnlyDictionary`2<PropertyInfo, AddColumnOperation> _columnMap;
    public CreateTableBuilder`1(CreateTableOperation operation, IReadOnlyDictionary`2<PropertyInfo, AddColumnOperation> columnMap);
    public virtual OperationBuilder`1<AddForeignKeyOperation> ForeignKey(string name, Expression`1<Func`2<TColumns, object>> column, string principalTable, string principalColumn, string principalSchema, ReferentialAction onUpdate, ReferentialAction onDelete);
    public virtual OperationBuilder`1<AddForeignKeyOperation> ForeignKey(string name, Expression`1<Func`2<TColumns, object>> columns, string principalTable, String[] principalColumns, string principalSchema, ReferentialAction onUpdate, ReferentialAction onDelete);
    public virtual OperationBuilder`1<AddPrimaryKeyOperation> PrimaryKey(string name, Expression`1<Func`2<TColumns, object>> columns);
    public virtual OperationBuilder`1<AddUniqueConstraintOperation> UniqueConstraint(string name, Expression`1<Func`2<TColumns, object>> columns);
    public virtual OperationBuilder`1<AddCheckConstraintOperation> CheckConstraint(string name, string sql);
    public virtual CreateTableBuilder`1<TColumns> Annotation(string name, object value);
    private String[] Map(LambdaExpression columns);
    [CompilerGeneratedAttribute]
private string <Map>b__8_0(PropertyInfo c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder`1 : object {
    [CompilerGeneratedAttribute]
private TOperation <Operation>k__BackingField;
    protected TOperation Operation { get; }
    private TOperation Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<TOperation>.Instance { get; }
    public OperationBuilder`1(TOperation operation);
    [CompilerGeneratedAttribute]
protected virtual TOperation get_Operation();
    private sealed virtual override TOperation Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<TOperation>.get_Instance();
    public virtual OperationBuilder`1<TOperation> Annotation(string name, object value);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsUnicode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsFixedLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRowVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValueSql>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ComputedColumnSql>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsStored>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Collation>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public string Schema { get; public set; }
    [NullableAttribute("1")]
public string Table { get; public set; }
    [NullableAttribute("1")]
public Type ClrType { get; public set; }
    public string ColumnType { get; public set; }
    public Nullable`1<bool> IsUnicode { get; public set; }
    public Nullable`1<bool> IsFixedLength { get; public set; }
    public Nullable`1<int> MaxLength { get; public set; }
    public Nullable`1<int> Precision { get; public set; }
    public Nullable`1<int> Scale { get; public set; }
    public bool IsRowVersion { get; public set; }
    public bool IsNullable { get; public set; }
    public object DefaultValue { get; public set; }
    public string DefaultValueSql { get; public set; }
    public string ComputedColumnSql { get; public set; }
    public Nullable`1<bool> IsStored { get; public set; }
    public string Comment { get; public set; }
    public string Collation { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string get_Name();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string get_Table();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual Type get_ClrType();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual void set_ClrType(Type value);
    [CompilerGeneratedAttribute]
public virtual string get_ColumnType();
    [CompilerGeneratedAttribute]
public virtual void set_ColumnType(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsUnicode();
    [CompilerGeneratedAttribute]
public virtual void set_IsUnicode(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsFixedLength();
    [CompilerGeneratedAttribute]
public virtual void set_IsFixedLength(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_MaxLength();
    [CompilerGeneratedAttribute]
public virtual void set_MaxLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_Precision();
    [CompilerGeneratedAttribute]
public virtual void set_Precision(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_Scale();
    [CompilerGeneratedAttribute]
public virtual void set_Scale(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsRowVersion();
    [CompilerGeneratedAttribute]
public virtual void set_IsRowVersion(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public virtual object get_DefaultValue();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultValue(object value);
    [CompilerGeneratedAttribute]
public virtual string get_DefaultValueSql();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultValueSql(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ComputedColumnSql();
    [CompilerGeneratedAttribute]
public virtual void set_ComputedColumnSql(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsStored();
    [CompilerGeneratedAttribute]
public virtual void set_IsStored(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual string get_Comment();
    [CompilerGeneratedAttribute]
public virtual void set_Comment(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Collation();
    [CompilerGeneratedAttribute]
public virtual void set_Collation(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("CREATE INDEX {Name} ON {Table}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation : MigrationOperation {
    private String[] _columns;
    private Boolean[] _isDescending;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUnique>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    public string Name { get; public set; }
    [NullableAttribute("2")]
public string Schema { get; public set; }
    public string Table { get; public set; }
    public String[] Columns { get; public set; }
    public bool IsUnique { get; public set; }
    [NullableAttribute("2")]
public Boolean[] IsDescending { get; public set; }
    [NullableAttribute("2")]
public string Filter { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    public virtual String[] get_Columns();
    public virtual void set_Columns(String[] value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsUnique();
    [CompilerGeneratedAttribute]
public virtual void set_IsUnique(bool value);
    [NullableContextAttribute("2")]
public virtual Boolean[] get_IsDescending();
    [NullableContextAttribute("2")]
public virtual void set_IsDescending(Boolean[] value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Filter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Filter(string value);
    public static CreateIndexOperation CreateFrom(ITableIndex index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("CREATE SEQUENCE {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.CreateSequenceOperation : SequenceOperation {
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StartValue>k__BackingField;
    [NullableAttribute("2")]
public string Schema { get; public set; }
    public string Name { get; public set; }
    public Type ClrType { get; public set; }
    public long StartValue { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
public virtual void set_ClrType(Type value);
    [CompilerGeneratedAttribute]
public virtual long get_StartValue();
    [CompilerGeneratedAttribute]
public virtual void set_StartValue(long value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("CREATE TABLE {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation : TableOperation {
    [CompilerGeneratedAttribute]
private AddPrimaryKeyOperation <PrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AddColumnOperation> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AddForeignKeyOperation> <ForeignKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AddUniqueConstraintOperation> <UniqueConstraints>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AddCheckConstraintOperation> <CheckConstraints>k__BackingField;
    [NullableAttribute("2")]
public AddPrimaryKeyOperation PrimaryKey { get; public set; }
    public List`1<AddColumnOperation> Columns { get; }
    public List`1<AddForeignKeyOperation> ForeignKeys { get; }
    public List`1<AddUniqueConstraintOperation> UniqueConstraints { get; }
    public List`1<AddCheckConstraintOperation> CheckConstraints { get; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual AddPrimaryKeyOperation get_PrimaryKey();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_PrimaryKey(AddPrimaryKeyOperation value);
    [CompilerGeneratedAttribute]
public virtual List`1<AddColumnOperation> get_Columns();
    [CompilerGeneratedAttribute]
public virtual List`1<AddForeignKeyOperation> get_ForeignKeys();
    [CompilerGeneratedAttribute]
public virtual List`1<AddUniqueConstraintOperation> get_UniqueConstraints();
    [CompilerGeneratedAttribute]
public virtual List`1<AddCheckConstraintOperation> get_CheckConstraints();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Migrations.Operations.DatabaseOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Collation>k__BackingField;
    public string Collation { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Collation();
    [CompilerGeneratedAttribute]
public virtual void set_Collation(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("DELETE FROM {Table}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DeleteDataOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <KeyColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <KeyColumnTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[0...,0...] <KeyValues>k__BackingField;
    public string Table { get; public set; }
    [NullableAttribute("2")]
public string Schema { get; public set; }
    public String[] KeyColumns { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] KeyColumnTypes { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[0...,0...] KeyValues { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual String[] get_KeyColumns();
    [CompilerGeneratedAttribute]
public virtual void set_KeyColumns(String[] value);
    [CompilerGeneratedAttribute]
public virtual String[] get_KeyColumnTypes();
    [CompilerGeneratedAttribute]
public virtual void set_KeyColumnTypes(String[] value);
    [CompilerGeneratedAttribute]
public virtual Object[0...,0...] get_KeyValues();
    [CompilerGeneratedAttribute]
public virtual void set_KeyValues(Object[0...,0...] value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("ALTER TABLE {Table} DROP CONSTRAINT {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropCheckConstraintOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Name { get; public set; }
    [NullableAttribute("2")]
public string Schema { get; public set; }
    public string Table { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("ALTER TABLE {Table} DROP COLUMN {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropColumnOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Name { get; public set; }
    [NullableAttribute("2")]
public string Schema { get; public set; }
    public string Table { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("ALTER TABLE {Table} DROP CONSTRAINT {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropForeignKeyOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Name { get; public set; }
    [NullableAttribute("2")]
public string Schema { get; public set; }
    public string Table { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("DROP INDEX {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropIndexOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Table { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string get_Name();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("ALTER TABLE {Table} DROP CONSTRAINT {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropPrimaryKeyOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Name { get; public set; }
    [NullableAttribute("2")]
public string Schema { get; public set; }
    public string Table { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("DROP SCHEMA {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropSchemaOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("DROP SEQUENCE {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropSequenceOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    public string Name { get; public set; }
    [NullableAttribute("2")]
public string Schema { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("DROP TABLE {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropTableOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    public string Name { get; public set; }
    [NullableAttribute("2")]
public string Schema { get; public set; }
    private string Microsoft.EntityFrameworkCore.Migrations.Operations.ITableMigrationOperation.Table { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    private sealed virtual override string Microsoft.EntityFrameworkCore.Migrations.Operations.ITableMigrationOperation.get_Table();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("ALTER TABLE {Table} DROP CONSTRAINT {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.DropUniqueConstraintOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Name { get; public set; }
    [NullableAttribute("2")]
public string Schema { get; public set; }
    public string Table { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("CREATE SCHEMA {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.EnsureSchemaOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation {
    public IMutableAnnotatable OldAnnotations { get; }
    public abstract virtual IMutableAnnotatable get_OldAnnotations();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("INSERT INTO {Table}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ColumnTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[0...,0...] <Values>k__BackingField;
    public string Table { get; public set; }
    [NullableAttribute("2")]
public string Schema { get; public set; }
    public String[] Columns { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] ColumnTypes { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[0...,0...] Values { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual String[] get_Columns();
    [CompilerGeneratedAttribute]
public virtual void set_Columns(String[] value);
    [CompilerGeneratedAttribute]
public virtual String[] get_ColumnTypes();
    [CompilerGeneratedAttribute]
public virtual void set_ColumnTypes(String[] value);
    [CompilerGeneratedAttribute]
public virtual Object[0...,0...] get_Values();
    [CompilerGeneratedAttribute]
public virtual void set_Values(Object[0...,0...] value);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Migrations.Operations.ITableMigrationOperation {
    [NullableAttribute("2")]
public string Schema { get; }
    public string Table { get; }
    [NullableContextAttribute("2")]
public abstract virtual string get_Schema();
    public abstract virtual string get_Table();
}
public abstract class Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation : Annotatable {
    [CompilerGeneratedAttribute]
private bool <IsDestructiveChange>k__BackingField;
    public bool IsDestructiveChange { get; public set; }
    [CompilerGeneratedAttribute]
public virtual bool get_IsDestructiveChange();
    [CompilerGeneratedAttribute]
public virtual void set_IsDestructiveChange(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("ALTER TABLE {Table} RENAME COLUMN {Name} TO {NewName}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.RenameColumnOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    public string Name { get; public set; }
    [NullableAttribute("2")]
public string Schema { get; public set; }
    public string Table { get; public set; }
    public string NewName { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
    [CompilerGeneratedAttribute]
public virtual void set_NewName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("ALTER INDEX {Name} RENAME TO {NewName}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.RenameIndexOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Name { get; public set; }
    public string NewName { get; public set; }
    [NullableAttribute("2")]
public string Schema { get; public set; }
    [NullableAttribute("2")]
public string Table { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
    [CompilerGeneratedAttribute]
public virtual void set_NewName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Table();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Table(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("ALTER SEQUENCE {Name} RENAME TO {NewName}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.RenameSequenceOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewSchema>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public string Schema { get; public set; }
    public string NewName { get; public set; }
    public string NewSchema { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string get_Name();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
    [CompilerGeneratedAttribute]
public virtual void set_NewName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NewSchema();
    [CompilerGeneratedAttribute]
public virtual void set_NewSchema(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("ALTER TABLE {Name} RENAME TO {NewName}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.RenameTableOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    public string Schema { get; public set; }
    [NullableAttribute("1")]
public string Name { get; public set; }
    public string NewSchema { get; public set; }
    public string NewName { get; public set; }
    [NullableAttribute("1")]
private string Microsoft.EntityFrameworkCore.Migrations.Operations.ITableMigrationOperation.Table { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string get_Name();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NewSchema();
    [CompilerGeneratedAttribute]
public virtual void set_NewSchema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
    [CompilerGeneratedAttribute]
public virtual void set_NewName(string value);
    private sealed virtual override string Microsoft.EntityFrameworkCore.Migrations.Operations.ITableMigrationOperation.get_Table();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("ALTER SEQUENCE {Name} RESTART")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.RestartSequenceOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StartValue>k__BackingField;
    public string Name { get; public set; }
    [NullableAttribute("2")]
public string Schema { get; public set; }
    public long StartValue { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual long get_StartValue();
    [CompilerGeneratedAttribute]
public virtual void set_StartValue(long value);
}
public abstract class Microsoft.EntityFrameworkCore.Migrations.Operations.SequenceOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private int <IncrementBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCyclic>k__BackingField;
    public int IncrementBy { get; public set; }
    public Nullable`1<long> MaxValue { get; public set; }
    public Nullable`1<long> MinValue { get; public set; }
    public bool IsCyclic { get; public set; }
    [CompilerGeneratedAttribute]
public virtual int get_IncrementBy();
    [CompilerGeneratedAttribute]
public virtual void set_IncrementBy(int value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_MaxValue();
    [CompilerGeneratedAttribute]
public virtual void set_MaxValue(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_MinValue();
    [CompilerGeneratedAttribute]
public virtual void set_MinValue(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsCyclic();
    [CompilerGeneratedAttribute]
public virtual void set_IsCyclic(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Sql}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.SqlOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressTransaction>k__BackingField;
    public string Sql { get; public set; }
    public bool SuppressTransaction { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Sql();
    [CompilerGeneratedAttribute]
public virtual void set_Sql(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_SuppressTransaction();
    [CompilerGeneratedAttribute]
public virtual void set_SuppressTransaction(bool value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Migrations.Operations.TableOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Comment { get; public set; }
    [NullableAttribute("1")]
private string Microsoft.EntityFrameworkCore.Migrations.Operations.ITableMigrationOperation.Table { get; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string get_Name();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Comment();
    [CompilerGeneratedAttribute]
public virtual void set_Comment(string value);
    private sealed virtual override string Microsoft.EntityFrameworkCore.Migrations.Operations.ITableMigrationOperation.get_Table();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("UPDATE {Table}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <KeyColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <KeyColumnTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[0...,0...] <KeyValues>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ColumnTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[0...,0...] <Values>k__BackingField;
    public string Table { get; public set; }
    [NullableAttribute("2")]
public string Schema { get; public set; }
    public String[] KeyColumns { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] KeyColumnTypes { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[0...,0...] KeyValues { get; public set; }
    public String[] Columns { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] ColumnTypes { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[0...,0...] Values { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [CompilerGeneratedAttribute]
public virtual String[] get_KeyColumns();
    [CompilerGeneratedAttribute]
public virtual void set_KeyColumns(String[] value);
    [CompilerGeneratedAttribute]
public virtual String[] get_KeyColumnTypes();
    [CompilerGeneratedAttribute]
public virtual void set_KeyColumnTypes(String[] value);
    [CompilerGeneratedAttribute]
public virtual Object[0...,0...] get_KeyValues();
    [CompilerGeneratedAttribute]
public virtual void set_KeyValues(Object[0...,0...] value);
    [CompilerGeneratedAttribute]
public virtual String[] get_Columns();
    [CompilerGeneratedAttribute]
public virtual void set_Columns(String[] value);
    [CompilerGeneratedAttribute]
public virtual String[] get_ColumnTypes();
    [CompilerGeneratedAttribute]
public virtual void set_ColumnTypes(String[] value);
    [CompilerGeneratedAttribute]
public virtual Object[0...,0...] get_Values();
    [CompilerGeneratedAttribute]
public virtual void set_Values(Object[0...,0...] value);
}
public enum Microsoft.EntityFrameworkCore.Migrations.ReferentialAction : Enum {
    public int value__;
    public static ReferentialAction NoAction;
    public static ReferentialAction Restrict;
    public static ReferentialAction Cascade;
    public static ReferentialAction SetNull;
    public static ReferentialAction SetDefault;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.CollectionResultExpression : Expression {
    [CompilerGeneratedAttribute]
private ProjectionBindingExpression <ProjectionBindingExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private INavigationBase <Navigation>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ElementType>k__BackingField;
    public ProjectionBindingExpression ProjectionBindingExpression { get; }
    [NullableAttribute("2")]
public INavigationBase Navigation { get; }
    public Type ElementType { get; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public CollectionResultExpression(ProjectionBindingExpression projectionBindingExpression, INavigationBase navigation, Type elementType);
    [CompilerGeneratedAttribute]
public virtual ProjectionBindingExpression get_ProjectionBindingExpression();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual INavigationBase get_Navigation();
    [CompilerGeneratedAttribute]
public virtual Type get_ElementType();
    public virtual Type get_Type();
    public virtual ExpressionType get_NodeType();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual CollectionResultExpression Update(ProjectionBindingExpression projectionBindingExpression);
    public virtual void Print(ExpressionPrinter expressionPrinter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression : Expression {
    private IReadOnlyDictionary`2<IProperty, ColumnExpression> _propertyExpressionMap;
    private Dictionary`2<INavigation, EntityShaperExpression> _ownedNavigationMap;
    [CompilerGeneratedAttribute]
private IEntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <DiscriminatorExpression>k__BackingField;
    public IEntityType EntityType { get; }
    [NullableAttribute("2")]
public SqlExpression DiscriminatorExpression { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public EntityProjectionExpression(IEntityType entityType, IReadOnlyDictionary`2<IProperty, ColumnExpression> propertyExpressionMap, SqlExpression discriminatorExpression);
    private EntityProjectionExpression(IEntityType entityType, IReadOnlyDictionary`2<IProperty, ColumnExpression> propertyExpressionMap, Dictionary`2<INavigation, EntityShaperExpression> ownedNavigationMap, SqlExpression discriminatorExpression);
    [CompilerGeneratedAttribute]
public virtual IEntityType get_EntityType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual SqlExpression get_DiscriminatorExpression();
    public sealed virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual EntityProjectionExpression MakeNullable();
    public virtual EntityProjectionExpression UpdateEntityType(IEntityType derivedType);
    public virtual ColumnExpression BindProperty(IProperty property);
    public virtual void AddNavigationBinding(INavigation navigation, EntityShaperExpression entityShaper);
    public virtual EntityShaperExpression BindNavigation(INavigation navigation);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.EnumerableExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <Selector>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDistinct>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<OrderingExpression> <Orderings>k__BackingField;
    public Expression Selector { get; }
    public bool IsDistinct { get; }
    [NullableAttribute("2")]
public SqlExpression Predicate { get; }
    public IReadOnlyList`1<OrderingExpression> Orderings { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public EnumerableExpression(Expression selector);
    private EnumerableExpression(Expression selector, bool distinct, SqlExpression predicate, IReadOnlyList`1<OrderingExpression> orderings);
    [CompilerGeneratedAttribute]
public virtual Expression get_Selector();
    [CompilerGeneratedAttribute]
public virtual bool get_IsDistinct();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual SqlExpression get_Predicate();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<OrderingExpression> get_Orderings();
    public virtual EnumerableExpression ApplySelector(Expression expression);
    public virtual EnumerableExpression ApplyDistinct();
    public virtual EnumerableExpression ApplyPredicate(SqlExpression sqlExpression);
    public virtual EnumerableExpression ApplyOrdering(OrderingExpression orderingExpression);
    public virtual EnumerableExpression AppendOrdering(OrderingExpression orderingExpression);
    private static void AppendOrdering(List`1<OrderingExpression> orderings, OrderingExpression orderingExpression);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    public virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(EnumerableExpression enumerableExpression);
    public virtual int GetHashCode();
}
public static class Microsoft.EntityFrameworkCore.Query.ExpressionExtensions : object {
    [NullableContextAttribute("1")]
public static RelationalTypeMapping InferTypeMapping(SqlExpression[] expressions);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.IAggregateMethodCallTranslator {
    public abstract virtual SqlExpression Translate(MethodInfo method, EnumerableExpression source, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.IAggregateMethodCallTranslatorPlugin {
    public IEnumerable`1<IAggregateMethodCallTranslator> Translators { get; }
    public abstract virtual IEnumerable`1<IAggregateMethodCallTranslator> get_Translators();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.IAggregateMethodCallTranslatorProvider {
    public abstract virtual SqlExpression Translate(IModel model, MethodInfo method, EnumerableExpression source, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.IMemberTranslator {
    public abstract virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.IMemberTranslatorPlugin {
    public IEnumerable`1<IMemberTranslator> Translators { get; }
    public abstract virtual IEnumerable`1<IMemberTranslator> get_Translators();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.IMemberTranslatorProvider {
    public abstract virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.IMethodCallTranslator {
    public abstract virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.IMethodCallTranslatorPlugin {
    public IEnumerable`1<IMethodCallTranslator> Translators { get; }
    public abstract virtual IEnumerable`1<IMethodCallTranslator> get_Translators();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.IMethodCallTranslatorProvider {
    public abstract virtual SqlExpression Translate(IModel model, SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader : DbDataReader {
    private bool _detailedErrorsEnabled;
    private DbDataReader _underlyingReader;
    private List`1<BufferedDataRecord> _bufferedDataRecords;
    private BufferedDataRecord _currentResultSet;
    private int _currentResultSetNumber;
    private int _recordsAffected;
    private bool _disposed;
    private bool _isClosed;
    public int RecordsAffected { get; }
    public object Item { get; }
    public object Item { get; }
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public BufferedDataReader(DbDataReader reader, bool detailedErrorsEnabled);
    public virtual int get_RecordsAffected();
    public virtual object get_Item(string name);
    public virtual object get_Item(int ordinal);
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    [ConditionalAttribute("DEBUG")]
private void AssertReaderIsOpen();
    [ConditionalAttribute("DEBUG")]
private void AssertReaderIsOpenWithData();
    [ConditionalAttribute("DEBUG")]
private void AssertFieldIsReady(int ordinal);
    public virtual BufferedDataReader Initialize(IReadOnlyList`1<ReaderColumn> columns);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader/<InitializeAsync>d__27")]
public virtual Task`1<BufferedDataReader> InitializeAsync(IReadOnlyList`1<ReaderColumn> columns, CancellationToken cancellationToken);
    public static bool IsSupportedValueType(Type type);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    [NullableContextAttribute("2")]
public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    [NullableContextAttribute("2")]
public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual T GetFieldValue(int ordinal);
    public virtual Task`1<T> GetFieldValueAsync(int ordinal, CancellationToken cancellationToken);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual string GetDataTypeName(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual bool IsDBNull(int ordinal);
    public virtual Task`1<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken);
    public virtual IEnumerator GetEnumerator();
    public virtual DataTable GetSchemaTable();
    public virtual bool NextResult();
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    public virtual bool Read();
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.ByteArraySequenceEqualTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public ByteArraySequenceEqualTranslator(ISqlExpressionFactory sqlExpressionFactory);
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.CollateTranslator : object {
    private static MethodInfo MethodInfo;
    private static CollateTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.ComparisonTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public ComparisonTranslator(ISqlExpressionFactory sqlExpressionFactory);
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.ContainsTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public ContainsTranslator(ISqlExpressionFactory sqlExpressionFactory);
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
    private static bool ValidateValues(SqlExpression values);
    private static SqlExpression RemoveObjectConvert(SqlExpression expression);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.EnumHasFlagTranslator : object {
    private static MethodInfo MethodInfo;
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public EnumHasFlagTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static EnumHasFlagTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.EqualsTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public EqualsTranslator(ISqlExpressionFactory sqlExpressionFactory);
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.FromSqlParameterExpandingExpressionVisitor : ExpressionVisitor {
    private IDictionary`2<FromSqlExpression, Expression> _visitedFromSqlExpressions;
    private ISqlExpressionFactory _sqlExpressionFactory;
    private IRelationalTypeMappingSource _typeMappingSource;
    private IParameterNameGeneratorFactory _parameterNameGeneratorFactory;
    private IReadOnlyDictionary`2<string, object> _parametersValues;
    private ParameterNameGenerator _parameterNameGenerator;
    private bool _canCache;
    [CompilerGeneratedAttribute]
private RelationalParameterBasedSqlProcessorDependencies <Dependencies>k__BackingField;
    protected RelationalParameterBasedSqlProcessorDependencies Dependencies { get; }
    public FromSqlParameterExpandingExpressionVisitor(RelationalParameterBasedSqlProcessorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalParameterBasedSqlProcessorDependencies get_Dependencies();
    public virtual Expression Expand(Expression queryExpression, IReadOnlyDictionary`2<string, object> parameterValues, Boolean& canCache);
    [NullableContextAttribute("2")]
public virtual Expression Visit(Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.FromSqlQueryingEnumerable`1 : object {
    private RelationalQueryContext _relationalQueryContext;
    private RelationalCommandCache _relationalCommandCache;
    private IReadOnlyList`1<ReaderColumn> _readerColumns;
    private IReadOnlyList`1<string> _columnNames;
    private Func`4<QueryContext, DbDataReader, Int32[], T> _shaper;
    private Type _contextType;
    private IDiagnosticsLogger`1<Query> _queryLogger;
    private bool _standAloneStateManager;
    private bool _detailedErrorsEnabled;
    private bool _threadSafetyChecksEnabled;
    public FromSqlQueryingEnumerable`1(RelationalQueryContext relationalQueryContext, RelationalCommandCache relationalCommandCache, IReadOnlyList`1<ReaderColumn> readerColumns, IReadOnlyList`1<string> columnNames, Func`4<QueryContext, DbDataReader, Int32[], T> shaper, Type contextType, bool standAloneStateManager, bool detailedErrorsEnabled, bool threadSafetyChecksEnabled);
    public virtual IAsyncEnumerator`1<T> GetAsyncEnumerator(CancellationToken cancellationToken);
    public virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual DbCommand CreateDbCommand();
    public virtual string ToQueryString();
    public static Int32[] BuildIndexMap(IReadOnlyList`1<string> columnNames, DbDataReader dataReader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.FromSqlQueryRootExpression : EntityQueryRootExpression {
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Argument>k__BackingField;
    public string Sql { get; }
    public Expression Argument { get; }
    public FromSqlQueryRootExpression(IAsyncQueryProvider queryProvider, IEntityType entityType, string sql, Expression argument);
    public FromSqlQueryRootExpression(IEntityType entityType, string sql, Expression argument);
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public Expression get_Argument();
    public virtual Expression DetachQueryProvider();
    public virtual EntityQueryRootExpression UpdateEntityType(IEntityType entityType);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(FromSqlQueryRootExpression queryRootExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.Internal.GetValueOrDefaultTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public GetValueOrDefaultTranslator(ISqlExpressionFactory sqlExpressionFactory);
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.GroupBySingleQueryingEnumerable`2 : object {
    private RelationalQueryContext _relationalQueryContext;
    private RelationalCommandCache _relationalCommandCache;
    private IReadOnlyList`1<ReaderColumn> _readerColumns;
    private Func`3<QueryContext, DbDataReader, TKey> _keySelector;
    private Func`3<QueryContext, DbDataReader, Object[]> _keyIdentifier;
    private IReadOnlyList`1<ValueComparer> _keyIdentifierValueComparers;
    private Func`5<QueryContext, DbDataReader, ResultContext, SingleQueryResultCoordinator, TElement> _elementSelector;
    private Type _contextType;
    private IDiagnosticsLogger`1<Query> _queryLogger;
    private bool _standAloneStateManager;
    private bool _detailedErrorsEnabled;
    private bool _threadSafetyChecksEnabled;
    public GroupBySingleQueryingEnumerable`2(RelationalQueryContext relationalQueryContext, RelationalCommandCache relationalCommandCache, IReadOnlyList`1<ReaderColumn> readerColumns, Func`3<QueryContext, DbDataReader, TKey> keySelector, Func`3<QueryContext, DbDataReader, Object[]> keyIdentifier, IReadOnlyList`1<ValueComparer> keyIdentifierValueComparers, Func`5<QueryContext, DbDataReader, ResultContext, SingleQueryResultCoordinator, TElement> elementSelector, Type contextType, bool standAloneStateManager, bool detailedErrorsEnabled, bool threadSafetyChecksEnabled);
    public virtual IAsyncEnumerator`1<IGrouping`2<TKey, TElement>> GetAsyncEnumerator(CancellationToken cancellationToken);
    public virtual IEnumerator`1<IGrouping`2<TKey, TElement>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual DbCommand CreateDbCommand();
    public virtual string ToQueryString();
    private static bool CompareIdentifiers(IReadOnlyList`1<ValueComparer> valueComparers, Object[] left, Object[] right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.GroupBySplitQueryingEnumerable`2 : object {
    private RelationalQueryContext _relationalQueryContext;
    private RelationalCommandCache _relationalCommandCache;
    private IReadOnlyList`1<ReaderColumn> _readerColumns;
    private Func`3<QueryContext, DbDataReader, TKey> _keySelector;
    private Func`3<QueryContext, DbDataReader, Object[]> _keyIdentifier;
    private IReadOnlyList`1<ValueComparer> _keyIdentifierValueComparers;
    private Func`5<QueryContext, DbDataReader, ResultContext, SplitQueryResultCoordinator, TElement> _elementSelector;
    private Action`3<QueryContext, IExecutionStrategy, SplitQueryResultCoordinator> _relatedDataLoaders;
    private Func`4<QueryContext, IExecutionStrategy, SplitQueryResultCoordinator, Task> _relatedDataLoadersAsync;
    private Type _contextType;
    private IDiagnosticsLogger`1<Query> _queryLogger;
    private bool _standAloneStateManager;
    private bool _detailedErrorsEnabled;
    private bool _threadSafetyChecksEnabled;
    public GroupBySplitQueryingEnumerable`2(RelationalQueryContext relationalQueryContext, RelationalCommandCache relationalCommandCache, IReadOnlyList`1<ReaderColumn> readerColumns, Func`3<QueryContext, DbDataReader, TKey> keySelector, Func`3<QueryContext, DbDataReader, Object[]> keyIdentifier, IReadOnlyList`1<ValueComparer> keyIdentifierValueComparers, Func`5<QueryContext, DbDataReader, ResultContext, SplitQueryResultCoordinator, TElement> elementSelector, Action`3<QueryContext, IExecutionStrategy, SplitQueryResultCoordinator> relatedDataLoaders, Func`4<QueryContext, IExecutionStrategy, SplitQueryResultCoordinator, Task> relatedDataLoadersAsync, Type contextType, bool standAloneStateManager, bool detailedErrorsEnabled, bool threadSafetyChecksEnabled);
    public virtual IAsyncEnumerator`1<IGrouping`2<TKey, TElement>> GetAsyncEnumerator(CancellationToken cancellationToken);
    public virtual IEnumerator`1<IGrouping`2<TKey, TElement>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual DbCommand CreateDbCommand();
    public virtual string ToQueryString();
    private static bool CompareIdentifiers(IReadOnlyList`1<ValueComparer> valueComparers, Object[] left, Object[] right);
}
public interface Microsoft.EntityFrameworkCore.Query.Internal.IRelationalQueryingEnumerable {
    [NullableContextAttribute("1")]
public abstract virtual DbCommand CreateDbCommand();
}
public class Microsoft.EntityFrameworkCore.Query.Internal.LikeTranslator : object {
    private static MethodInfo MethodInfo;
    private static MethodInfo MethodInfoWithEscape;
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public LikeTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static LikeTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.NullableMemberTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public NullableMemberTranslator(ISqlExpressionFactory sqlExpressionFactory);
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.QueryableAggregateMethodTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public QueryableAggregateMethodTranslator(ISqlExpressionFactory sqlExpressionFactory);
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(MethodInfo method, EnumerableExpression source, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
    private SqlExpression CombineTerms(EnumerableExpression enumerableExpression, SqlExpression sqlExpression);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.QueryExpressionReplacingExpressionVisitor : ExpressionVisitor {
    private Expression _oldQuery;
    private Expression _newQuery;
    [NullableContextAttribute("1")]
public QueryExpressionReplacingExpressionVisitor(Expression oldQuery, Expression newQuery);
    [NullableContextAttribute("2")]
public virtual Expression Visit(Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.QuerySqlGeneratorFactory : object {
    [CompilerGeneratedAttribute]
private QuerySqlGeneratorDependencies <Dependencies>k__BackingField;
    protected QuerySqlGeneratorDependencies Dependencies { get; }
    public QuerySqlGeneratorFactory(QuerySqlGeneratorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual QuerySqlGeneratorDependencies get_Dependencies();
    public virtual QuerySqlGenerator Create();
}
public class Microsoft.EntityFrameworkCore.Query.Internal.RandomTranslator : object {
    private static MethodInfo MethodInfo;
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public RandomTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static RandomTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache : object {
    private static ConcurrentDictionary`2<object, object> Locks;
    private IMemoryCache _memoryCache;
    private IQuerySqlGeneratorFactory _querySqlGeneratorFactory;
    private Expression _queryExpression;
    private RelationalParameterBasedSqlProcessor _relationalParameterBasedSqlProcessor;
    [NullableContextAttribute("1")]
public RelationalCommandCache(IMemoryCache memoryCache, IQuerySqlGeneratorFactory querySqlGeneratorFactory, IRelationalParameterBasedSqlProcessorFactory relationalParameterBasedSqlProcessorFactory, Expression queryExpression, bool useRelationalNulls);
    private static RelationalCommandCache();
    [NullableContextAttribute("1")]
public virtual IRelationalCommandTemplate GetRelationalCommandTemplate(IReadOnlyDictionary`2<string, object> parameters);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(ExpressionPrinter expressionPrinter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.RelationalParameterBasedSqlProcessorFactory : object {
    [CompilerGeneratedAttribute]
private RelationalParameterBasedSqlProcessorDependencies <Dependencies>k__BackingField;
    protected RelationalParameterBasedSqlProcessorDependencies Dependencies { get; }
    public RelationalParameterBasedSqlProcessorFactory(RelationalParameterBasedSqlProcessorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalParameterBasedSqlProcessorDependencies get_Dependencies();
    public virtual RelationalParameterBasedSqlProcessor Create(bool useRelationalNulls);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor : ExpressionVisitor {
    private static MethodInfo GetParameterValueMethodInfo;
    private RelationalQueryableMethodTranslatingExpressionVisitor _queryableMethodTranslatingExpressionVisitor;
    private RelationalSqlTranslatingExpressionVisitor _sqlTranslator;
    private IncludeFindingExpressionVisitor _includeFindingExpressionVisitor;
    private SelectExpression _selectExpression;
    private bool _indexBasedBinding;
    private Dictionary`2<EntityProjectionExpression, ProjectionBindingExpression> _entityProjectionCache;
    private Dictionary`2<JsonQueryExpression, ProjectionBindingExpression> _jsonQueryCache;
    private List`1<Expression> _clientProjections;
    private Dictionary`2<ProjectionMember, Expression> _projectionMapping;
    private Stack`1<ProjectionMember> _projectionMembers;
    public RelationalProjectionBindingExpressionVisitor(RelationalQueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor, RelationalSqlTranslatingExpressionVisitor sqlTranslatingExpressionVisitor);
    private static RelationalProjectionBindingExpressionVisitor();
    public virtual Expression Translate(SelectExpression selectExpression, Expression expression);
    [NullableContextAttribute("2")]
public virtual Expression Visit(Expression expression);
    protected virtual Expression VisitBinary(BinaryExpression binaryExpression);
    protected virtual Expression VisitConditional(ConditionalExpression conditionalExpression);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected virtual ElementInit VisitElementInit(ElementInit elementInit);
    protected virtual Expression VisitMember(MemberExpression memberExpression);
    protected virtual MemberAssignment VisitMemberAssignment(MemberAssignment memberAssignment);
    protected virtual Expression VisitMemberInit(MemberInitExpression memberInitExpression);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    protected virtual Expression VisitNew(NewExpression newExpression);
    protected virtual Expression VisitNewArray(NewArrayExpression newArrayExpression);
    protected virtual Expression VisitUnary(UnaryExpression unaryExpression);
    [DebuggerStepThroughAttribute]
private static Expression MatchTypes(Expression expression, Type targetType);
    private ProjectionBindingExpression AddClientProjection(Expression expression, Type type);
    private static T GetParameterValue(QueryContext queryContext, string parameterName);
    [CompilerGeneratedAttribute]
private Expression <VisitElementInit>b__17_0(Expression e);
    [CompilerGeneratedAttribute]
private Expression <VisitNewArray>b__23_0(Expression e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryableMethodTranslatingExpressionVisitorFactory : object {
    [CompilerGeneratedAttribute]
private QueryableMethodTranslatingExpressionVisitorDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalQueryableMethodTranslatingExpressionVisitorDependencies <RelationalDependencies>k__BackingField;
    protected QueryableMethodTranslatingExpressionVisitorDependencies Dependencies { get; }
    protected RelationalQueryableMethodTranslatingExpressionVisitorDependencies RelationalDependencies { get; }
    public RelationalQueryableMethodTranslatingExpressionVisitorFactory(QueryableMethodTranslatingExpressionVisitorDependencies dependencies, RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual QueryableMethodTranslatingExpressionVisitorDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalQueryableMethodTranslatingExpressionVisitorDependencies get_RelationalDependencies();
    public virtual QueryableMethodTranslatingExpressionVisitor Create(QueryCompilationContext queryCompilationContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryCompilationContextFactory : object {
    [CompilerGeneratedAttribute]
private QueryCompilationContextDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalQueryCompilationContextDependencies <RelationalDependencies>k__BackingField;
    protected QueryCompilationContextDependencies Dependencies { get; }
    protected RelationalQueryCompilationContextDependencies RelationalDependencies { get; }
    public RelationalQueryCompilationContextFactory(QueryCompilationContextDependencies dependencies, RelationalQueryCompilationContextDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual QueryCompilationContextDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalQueryCompilationContextDependencies get_RelationalDependencies();
    public virtual QueryCompilationContext Create(bool async);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryContextFactory : object {
    [CompilerGeneratedAttribute]
private QueryContextDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalQueryContextDependencies <RelationalDependencies>k__BackingField;
    protected QueryContextDependencies Dependencies { get; }
    protected RelationalQueryContextDependencies RelationalDependencies { get; }
    public RelationalQueryContextFactory(QueryContextDependencies dependencies, RelationalQueryContextDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual QueryContextDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalQueryContextDependencies get_RelationalDependencies();
    public virtual QueryContext Create();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryMetadataExtractingExpressionVisitor : ExpressionVisitor {
    private RelationalQueryCompilationContext _relationalQueryCompilationContext;
    public RelationalQueryMetadataExtractingExpressionVisitor(RelationalQueryCompilationContext relationalQueryCompilationContext);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryStringFactory : object {
    [NullableContextAttribute("1")]
public virtual string Create(DbCommand command);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryTranslationPostprocessorFactory : object {
    [CompilerGeneratedAttribute]
private QueryTranslationPostprocessorDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalQueryTranslationPostprocessorDependencies <RelationalDependencies>k__BackingField;
    protected QueryTranslationPostprocessorDependencies Dependencies { get; }
    protected RelationalQueryTranslationPostprocessorDependencies RelationalDependencies { get; }
    public RelationalQueryTranslationPostprocessorFactory(QueryTranslationPostprocessorDependencies dependencies, RelationalQueryTranslationPostprocessorDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual QueryTranslationPostprocessorDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalQueryTranslationPostprocessorDependencies get_RelationalDependencies();
    public virtual QueryTranslationPostprocessor Create(QueryCompilationContext queryCompilationContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryTranslationPreprocessorFactory : object {
    [CompilerGeneratedAttribute]
private QueryTranslationPreprocessorDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalQueryTranslationPreprocessorDependencies <RelationalDependencies>k__BackingField;
    protected QueryTranslationPreprocessorDependencies Dependencies { get; }
    protected RelationalQueryTranslationPreprocessorDependencies RelationalDependencies { get; }
    public RelationalQueryTranslationPreprocessorFactory(QueryTranslationPreprocessorDependencies dependencies, RelationalQueryTranslationPreprocessorDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual QueryTranslationPreprocessorDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalQueryTranslationPreprocessorDependencies get_RelationalDependencies();
    public virtual QueryTranslationPreprocessor Create(QueryCompilationContext queryCompilationContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.RelationalShapedQueryCompilingExpressionVisitorFactory : object {
    [CompilerGeneratedAttribute]
private ShapedQueryCompilingExpressionVisitorDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalShapedQueryCompilingExpressionVisitorDependencies <RelationalDependencies>k__BackingField;
    protected ShapedQueryCompilingExpressionVisitorDependencies Dependencies { get; }
    protected RelationalShapedQueryCompilingExpressionVisitorDependencies RelationalDependencies { get; }
    public RelationalShapedQueryCompilingExpressionVisitorFactory(ShapedQueryCompilingExpressionVisitorDependencies dependencies, RelationalShapedQueryCompilingExpressionVisitorDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ShapedQueryCompilingExpressionVisitorDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalShapedQueryCompilingExpressionVisitorDependencies get_RelationalDependencies();
    public virtual ShapedQueryCompilingExpressionVisitor Create(QueryCompilationContext queryCompilationContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.RelationalValueConverterCompensatingExpressionVisitor : ExpressionVisitor {
    private ISqlExpressionFactory _sqlExpressionFactory;
    public RelationalValueConverterCompensatingExpressionVisitor(ISqlExpressionFactory sqlExpressionFactory);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    private Expression VisitShapedQueryExpression(ShapedQueryExpression shapedQueryExpression);
    private Expression VisitCase(CaseExpression caseExpression);
    private Expression VisitSelect(SelectExpression selectExpression);
    private Expression VisitInnerJoin(InnerJoinExpression innerJoinExpression);
    private Expression VisitLeftJoin(LeftJoinExpression leftJoinExpression);
    private SqlExpression TryCompensateForBoolWithValueConverter(SqlExpression sqlExpression);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.ResultContext : object {
    [CompilerGeneratedAttribute]
private Object[] <Values>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Values { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Object[] get_Values();
    [CompilerGeneratedAttribute]
public virtual void set_Values(Object[] value);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.SelectExpressionProjectionApplyingExpressionVisitor : ExpressionVisitor {
    private QuerySplittingBehavior _querySplittingBehavior;
    public SelectExpressionProjectionApplyingExpressionVisitor(Nullable`1<QuerySplittingBehavior> querySplittingBehavior);
    [NullableContextAttribute("1")]
protected virtual Expression VisitExtension(Expression extensionExpression);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.SelectExpressionPruningExpressionVisitor : ExpressionVisitor {
    [NullableContextAttribute("2")]
public virtual Expression Visit(Expression expression);
    [CompilerGeneratedAttribute]
private ColumnValueSetter <Visit>b__0_0(ColumnValueSetter e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext : object {
    [CompilerGeneratedAttribute]
private ResultContext <ResultContext>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Collection>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <ParentIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <OuterIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <SelfIdentifier>k__BackingField;
    public ResultContext ResultContext { get; }
    [NullableAttribute("2")]
public object Parent { get; }
    [NullableAttribute("2")]
public object Collection { get; }
    public Object[] ParentIdentifier { get; }
    public Object[] OuterIdentifier { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] SelfIdentifier { get; private set; }
    public SingleQueryCollectionContext(object parent, object collection, Object[] parentIdentifier, Object[] outerIdentifier);
    [CompilerGeneratedAttribute]
public ResultContext get_ResultContext();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Parent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Collection();
    [CompilerGeneratedAttribute]
public Object[] get_ParentIdentifier();
    [CompilerGeneratedAttribute]
public Object[] get_OuterIdentifier();
    [CompilerGeneratedAttribute]
public Object[] get_SelfIdentifier();
    [CompilerGeneratedAttribute]
private void set_SelfIdentifier(Object[] value);
    public void UpdateSelfIdentifier(Object[] selfIdentifier);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1 : object {
    private RelationalQueryContext _relationalQueryContext;
    private RelationalCommandCache _relationalCommandCache;
    private IReadOnlyList`1<ReaderColumn> _readerColumns;
    private Func`5<QueryContext, DbDataReader, ResultContext, SingleQueryResultCoordinator, T> _shaper;
    private Type _contextType;
    private IDiagnosticsLogger`1<Query> _queryLogger;
    private bool _standAloneStateManager;
    private bool _detailedErrorsEnabled;
    private bool _threadSafetyChecksEnabled;
    public SingleQueryingEnumerable`1(RelationalQueryContext relationalQueryContext, RelationalCommandCache relationalCommandCache, IReadOnlyList`1<ReaderColumn> readerColumns, Func`5<QueryContext, DbDataReader, ResultContext, SingleQueryResultCoordinator, T> shaper, Type contextType, bool standAloneStateManager, bool detailedErrorsEnabled, bool threadSafetyChecksEnabled);
    public virtual IAsyncEnumerator`1<T> GetAsyncEnumerator(CancellationToken cancellationToken);
    public virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual DbCommand CreateDbCommand();
    public virtual string ToQueryString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator : object {
    [CompilerGeneratedAttribute]
private ResultContext <ResultContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResultReady>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasNext>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SingleQueryCollectionContext> <Collections>k__BackingField;
    public ResultContext ResultContext { get; }
    public bool ResultReady { get; public set; }
    public Nullable`1<bool> HasNext { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<SingleQueryCollectionContext> Collections { get; }
    [CompilerGeneratedAttribute]
public ResultContext get_ResultContext();
    [CompilerGeneratedAttribute]
public bool get_ResultReady();
    [CompilerGeneratedAttribute]
public void set_ResultReady(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HasNext();
    [CompilerGeneratedAttribute]
public void set_HasNext(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IList`1<SingleQueryCollectionContext> get_Collections();
    public void SetSingleQueryCollectionContext(int collectionId, SingleQueryCollectionContext singleQueryCollectionContext);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryCollectionContext : object {
    [CompilerGeneratedAttribute]
private ResultContext <ResultContext>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Collection>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <ParentIdentifier>k__BackingField;
    [NullableAttribute("1")]
public ResultContext ResultContext { get; }
    public object Parent { get; }
    public object Collection { get; }
    [NullableAttribute("1")]
public Object[] ParentIdentifier { get; }
    public SplitQueryCollectionContext(object parent, object collection, Object[] parentIdentifier);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public ResultContext get_ResultContext();
    [CompilerGeneratedAttribute]
public object get_Parent();
    [CompilerGeneratedAttribute]
public object get_Collection();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Object[] get_ParentIdentifier();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryDataReaderContext : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasNext>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalDataReader <DataReader>k__BackingField;
    public Nullable`1<bool> HasNext { get; public set; }
    public RelationalDataReader DataReader { get; }
    public SplitQueryDataReaderContext(RelationalDataReader dataReader);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HasNext();
    [CompilerGeneratedAttribute]
public void set_HasNext(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public RelationalDataReader get_DataReader();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryingEnumerable`1 : object {
    private RelationalQueryContext _relationalQueryContext;
    private RelationalCommandCache _relationalCommandCache;
    private IReadOnlyList`1<ReaderColumn> _readerColumns;
    private Func`5<QueryContext, DbDataReader, ResultContext, SplitQueryResultCoordinator, T> _shaper;
    private Action`3<QueryContext, IExecutionStrategy, SplitQueryResultCoordinator> _relatedDataLoaders;
    private Func`4<QueryContext, IExecutionStrategy, SplitQueryResultCoordinator, Task> _relatedDataLoadersAsync;
    private Type _contextType;
    private IDiagnosticsLogger`1<Query> _queryLogger;
    private bool _standAloneStateManager;
    private bool _detailedErrorsEnabled;
    private bool _threadSafetyChecksEnabled;
    public SplitQueryingEnumerable`1(RelationalQueryContext relationalQueryContext, RelationalCommandCache relationalCommandCache, IReadOnlyList`1<ReaderColumn> readerColumns, Func`5<QueryContext, DbDataReader, ResultContext, SplitQueryResultCoordinator, T> shaper, Action`3<QueryContext, IExecutionStrategy, SplitQueryResultCoordinator> relatedDataLoaders, Func`4<QueryContext, IExecutionStrategy, SplitQueryResultCoordinator, Task> relatedDataLoadersAsync, Type contextType, bool standAloneStateManager, bool detailedErrorsEnabled, bool threadSafetyChecksEnabled);
    public virtual IAsyncEnumerator`1<T> GetAsyncEnumerator(CancellationToken cancellationToken);
    public virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual DbCommand CreateDbCommand();
    public virtual string ToQueryString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator : object {
    [CompilerGeneratedAttribute]
private ResultContext <ResultContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasNext>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SplitQueryCollectionContext> <Collections>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SplitQueryDataReaderContext> <DataReaders>k__BackingField;
    public ResultContext ResultContext { get; }
    public Nullable`1<bool> HasNext { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<SplitQueryCollectionContext> Collections { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<SplitQueryDataReaderContext> DataReaders { get; }
    [CompilerGeneratedAttribute]
public ResultContext get_ResultContext();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HasNext();
    [CompilerGeneratedAttribute]
public void set_HasNext(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IList`1<SplitQueryCollectionContext> get_Collections();
    [CompilerGeneratedAttribute]
public IList`1<SplitQueryDataReaderContext> get_DataReaders();
    public void SetDataReader(int collectionId, RelationalDataReader relationalDataReader);
    public void SetSplitQueryCollectionContext(int collectionId, SplitQueryCollectionContext splitQueryCollectionContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.SqlExpressionSimplifyingExpressionVisitor : ExpressionVisitor {
    private ISqlExpressionFactory _sqlExpressionFactory;
    private bool _useRelationalNulls;
    public SqlExpressionSimplifyingExpressionVisitor(ISqlExpressionFactory sqlExpressionFactory, bool useRelationalNulls);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    private static bool IsCompareTo(CaseExpression caseExpression);
    private SqlExpression OptimizeCompareTo(SqlBinaryExpression sqlBinaryExpression, int intValue, CaseExpression caseExpression);
    private Expression SimplifySqlBinary(SqlBinaryExpression sqlBinaryExpression);
    private static List`1<object> ConstructCollection(object left, object right);
    private static List`1<object> AddToCollection(IEnumerable collection, object newElement);
    private static List`1<object> UnionCollections(IEnumerable first, IEnumerable second);
    private static List`1<object> IntersectCollections(IEnumerable first, IEnumerable second);
    private static List`1<object> BuildListFromEnumerable(IEnumerable collection);
    private static bool TryGetInExpressionCandidateInfo(SqlExpression sqlExpression, ValueTuple`4& candidateInfo);
    [CompilerGeneratedAttribute]
internal static bool <VisitExtension>g__IsCoalesce|3_0(SqlExpression sqlExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.SqlQueryRootExpression : QueryRootExpression {
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Argument>k__BackingField;
    public string Sql { get; }
    public Expression Argument { get; }
    public SqlQueryRootExpression(IAsyncQueryProvider queryProvider, Type elementType, string sql, Expression argument);
    public SqlQueryRootExpression(Type elementType, string sql, Expression argument);
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public Expression get_Argument();
    public virtual Expression DetachQueryProvider();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(SqlQueryRootExpression sqlQueryRootExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Query.Internal.StringMethodTranslator : object {
    private static MethodInfo IsNullOrEmptyMethodInfo;
    private static MethodInfo ConcatMethodInfoTwoArgs;
    private static MethodInfo ConcatMethodInfoThreeArgs;
    private static MethodInfo ConcatMethodInfoFourArgs;
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public StringMethodTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static StringMethodTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.TableValuedFunctionQueryRootExpression : EntityQueryRootExpression {
    [CompilerGeneratedAttribute]
private IStoreFunction <Function>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Expression> <Arguments>k__BackingField;
    public IStoreFunction Function { get; }
    public IReadOnlyCollection`1<Expression> Arguments { get; }
    public TableValuedFunctionQueryRootExpression(IEntityType entityType, IStoreFunction function, IReadOnlyCollection`1<Expression> arguments);
    [CompilerGeneratedAttribute]
public IStoreFunction get_Function();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<Expression> get_Arguments();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual EntityQueryRootExpression UpdateEntityType(IEntityType entityType);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(TableValuedFunctionQueryRootExpression queryRootExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.TableValuedFunctionToQueryRootConvertingExpressionVisitor : ExpressionVisitor {
    private IModel _model;
    public TableValuedFunctionToQueryRootConvertingExpressionVisitor(IModel model);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    private static Expression CreateTableValuedFunctionQueryRootExpression(IStoreFunction function, IReadOnlyCollection`1<Expression> arguments);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.IQuerySqlGeneratorFactory {
    public abstract virtual QuerySqlGenerator Create();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.IRelationalParameterBasedSqlProcessorFactory {
    public abstract virtual RelationalParameterBasedSqlProcessor Create(bool useRelationalNulls);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.IRelationalQueryStringFactory {
    public abstract virtual string Create(DbCommand command);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.IRelationalSqlTranslatingExpressionVisitorFactory {
    public abstract virtual RelationalSqlTranslatingExpressionVisitor Create(QueryCompilationContext queryCompilationContext, QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory {
    [NullableContextAttribute("2")]
public abstract virtual SqlExpression ApplyTypeMapping(SqlExpression sqlExpression, RelationalTypeMapping typeMapping);
    [NullableContextAttribute("2")]
public abstract virtual SqlExpression ApplyDefaultTypeMapping(SqlExpression sqlExpression);
    public abstract virtual SqlUnaryExpression MakeUnary(ExpressionType operatorType, SqlExpression operand, Type type, RelationalTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression MakeBinary(ExpressionType operatorType, SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression Equal(SqlExpression left, SqlExpression right);
    public abstract virtual SqlBinaryExpression NotEqual(SqlExpression left, SqlExpression right);
    public abstract virtual SqlBinaryExpression GreaterThan(SqlExpression left, SqlExpression right);
    public abstract virtual SqlBinaryExpression GreaterThanOrEqual(SqlExpression left, SqlExpression right);
    public abstract virtual SqlBinaryExpression LessThan(SqlExpression left, SqlExpression right);
    public abstract virtual SqlBinaryExpression LessThanOrEqual(SqlExpression left, SqlExpression right);
    public abstract virtual SqlBinaryExpression AndAlso(SqlExpression left, SqlExpression right);
    public abstract virtual SqlBinaryExpression OrElse(SqlExpression left, SqlExpression right);
    public abstract virtual SqlBinaryExpression Add(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression Subtract(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression Multiply(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression Divide(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression Modulo(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression And(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression Or(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public abstract virtual SqlFunctionExpression Coalesce(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public abstract virtual SqlUnaryExpression IsNull(SqlExpression operand);
    public abstract virtual SqlUnaryExpression IsNotNull(SqlExpression operand);
    public abstract virtual SqlUnaryExpression Convert(SqlExpression operand, Type type, RelationalTypeMapping typeMapping);
    public abstract virtual SqlUnaryExpression Not(SqlExpression operand);
    public abstract virtual SqlUnaryExpression Negate(SqlExpression operand);
    public abstract virtual CaseExpression Case(SqlExpression operand, IReadOnlyList`1<CaseWhenClause> whenClauses, SqlExpression elseResult);
    public abstract virtual CaseExpression Case(IReadOnlyList`1<CaseWhenClause> whenClauses, SqlExpression elseResult);
    public abstract virtual SqlFunctionExpression Function(string name, IEnumerable`1<SqlExpression> arguments, bool nullable, IEnumerable`1<bool> argumentsPropagateNullability, Type returnType, RelationalTypeMapping typeMapping);
    public abstract virtual SqlFunctionExpression Function(string schema, string name, IEnumerable`1<SqlExpression> arguments, bool nullable, IEnumerable`1<bool> argumentsPropagateNullability, Type returnType, RelationalTypeMapping typeMapping);
    public abstract virtual SqlFunctionExpression Function(SqlExpression instance, string name, IEnumerable`1<SqlExpression> arguments, bool nullable, bool instancePropagatesNullability, IEnumerable`1<bool> argumentsPropagateNullability, Type returnType, RelationalTypeMapping typeMapping);
    public abstract virtual SqlFunctionExpression NiladicFunction(string name, bool nullable, Type returnType, RelationalTypeMapping typeMapping);
    public abstract virtual SqlFunctionExpression NiladicFunction(string schema, string name, bool nullable, Type returnType, RelationalTypeMapping typeMapping);
    public abstract virtual SqlFunctionExpression NiladicFunction(SqlExpression instance, string name, bool nullable, bool instancePropagatesNullability, Type returnType, RelationalTypeMapping typeMapping);
    public abstract virtual ExistsExpression Exists(SelectExpression subquery, bool negated);
    public abstract virtual InExpression In(SqlExpression item, SqlExpression values, bool negated);
    public abstract virtual InExpression In(SqlExpression item, SelectExpression subquery, bool negated);
    public abstract virtual LikeExpression Like(SqlExpression match, SqlExpression pattern, SqlExpression escapeChar);
    [NullableContextAttribute("2")]
public abstract virtual SqlConstantExpression Constant(object value, RelationalTypeMapping typeMapping);
    public abstract virtual SqlConstantExpression Constant(object value, Type type, RelationalTypeMapping typeMapping);
    public abstract virtual SqlFragmentExpression Fragment(string sql);
    public abstract virtual SelectExpression Select(SqlExpression projection);
    public abstract virtual SelectExpression Select(IEntityType entityType);
    public abstract virtual SelectExpression Select(IEntityType entityType, TableExpressionBase tableExpressionBase);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.JsonQueryExpression : Expression {
    private IReadOnlyDictionary`2<IProperty, ColumnExpression> _keyPropertyMap;
    [CompilerGeneratedAttribute]
private IEntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnExpression <JsonColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PathSegment> <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public IEntityType EntityType { get; }
    public ColumnExpression JsonColumn { get; }
    public bool IsCollection { get; }
    public IReadOnlyList`1<PathSegment> Path { get; }
    public bool IsNullable { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public JsonQueryExpression(IEntityType entityType, ColumnExpression jsonColumn, IReadOnlyDictionary`2<IProperty, ColumnExpression> keyPropertyMap, Type type, bool collection);
    private JsonQueryExpression(IEntityType entityType, ColumnExpression jsonColumn, IReadOnlyDictionary`2<IProperty, ColumnExpression> keyPropertyMap, IReadOnlyList`1<PathSegment> path, Type type, bool collection, bool nullable);
    [CompilerGeneratedAttribute]
public virtual IEntityType get_EntityType();
    [CompilerGeneratedAttribute]
public virtual ColumnExpression get_JsonColumn();
    [CompilerGeneratedAttribute]
public virtual bool get_IsCollection();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<PathSegment> get_Path();
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    public virtual ExpressionType get_NodeType();
    [CompilerGeneratedAttribute]
public virtual Type get_Type();
    public virtual SqlExpression BindProperty(IProperty property);
    public virtual JsonQueryExpression BindNavigation(INavigation navigation);
    public virtual JsonQueryExpression MakeNullable();
    public virtual void Print(ExpressionPrinter expressionPrinter);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual JsonQueryExpression Update(ColumnExpression jsonColumn, IReadOnlyDictionary`2<IProperty, ColumnExpression> keyPropertyMap);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(JsonQueryExpression jsonQueryExpression);
    private bool KeyPropertyMapEquals(IReadOnlyDictionary`2<IProperty, ColumnExpression> other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.NonQueryExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandSource <CommandSource>k__BackingField;
    public Expression Expression { get; }
    public CommandSource CommandSource { get; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public NonQueryExpression(Expression expression, CommandSource commandSource);
    public NonQueryExpression(DeleteExpression deleteExpression);
    public NonQueryExpression(UpdateExpression updateExpression);
    [CompilerGeneratedAttribute]
public virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public virtual CommandSource get_CommandSource();
    public virtual Type get_Type();
    public sealed virtual ExpressionType get_NodeType();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual NonQueryExpression Update(Expression expression);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(NonQueryExpression nonQueryExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.PathSegment : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public string Key { get; }
    public PathSegment(string key);
    [CompilerGeneratedAttribute]
public virtual string get_Key();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(PathSegment pathSegment);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator : SqlExpressionVisitor {
    private static Dictionary`2<ExpressionType, string> OperatorMap;
    private IRelationalCommandBuilderFactory _relationalCommandBuilderFactory;
    private ISqlGenerationHelper _sqlGenerationHelper;
    private IRelationalCommandBuilder _relationalCommandBuilder;
    private Dictionary`2<string, int> _repeatedParameterCounts;
    private static bool QuirkEnabled29646;
    [CompilerGeneratedAttribute]
private QuerySqlGeneratorDependencies <Dependencies>k__BackingField;
    protected QuerySqlGeneratorDependencies Dependencies { get; }
    protected string AliasSeparator { get; }
    protected IRelationalCommandBuilder Sql { get; }
    public QuerySqlGenerator(QuerySqlGeneratorDependencies dependencies);
    private static QuerySqlGenerator();
    [CompilerGeneratedAttribute]
protected virtual QuerySqlGeneratorDependencies get_Dependencies();
    public virtual IRelationalCommand GetCommand(Expression queryExpression);
    protected virtual void GenerateRootCommand(Expression queryExpression);
    protected virtual string get_AliasSeparator();
    protected virtual IRelationalCommandBuilder get_Sql();
    [ObsoleteAttribute("Use the method which takes tags instead.")]
protected virtual void GenerateTagsHeaderComment(SelectExpression selectExpression);
    protected virtual void GenerateTagsHeaderComment(ISet`1<string> tags);
    protected virtual Expression VisitSqlFragment(SqlFragmentExpression sqlFragmentExpression);
    private static bool IsNonComposedSetOperation(SelectExpression selectExpression);
    protected virtual Expression VisitDelete(DeleteExpression deleteExpression);
    protected virtual Expression VisitSelect(SelectExpression selectExpression);
    protected virtual void GeneratePseudoFromClause();
    protected virtual void GenerateEmptyProjection(SelectExpression selectExpression);
    protected virtual Expression VisitProjection(ProjectionExpression projectionExpression);
    protected virtual Expression VisitSqlFunction(SqlFunctionExpression sqlFunctionExpression);
    protected virtual Expression VisitTableValuedFunction(TableValuedFunctionExpression tableValuedFunctionExpression);
    protected virtual Expression VisitColumn(ColumnExpression columnExpression);
    protected virtual Expression VisitTable(TableExpression tableExpression);
    private void GenerateFromSql(FromSqlExpression fromSqlExpression);
    protected virtual Expression VisitFromSql(FromSqlExpression fromSqlExpression);
    protected virtual void CheckComposableSql(string sql);
    [NullableContextAttribute("0")]
protected virtual void CheckComposableSqlTrimmed(ReadOnlySpan`1<char> sql);
    protected virtual Expression VisitSqlBinary(SqlBinaryExpression sqlBinaryExpression);
    protected virtual Expression VisitSqlConstant(SqlConstantExpression sqlConstantExpression);
    protected virtual Expression VisitSqlParameter(SqlParameterExpression sqlParameterExpression);
    protected virtual Expression VisitOrdering(OrderingExpression orderingExpression);
    protected virtual Expression VisitLike(LikeExpression likeExpression);
    protected virtual Expression VisitCollate(CollateExpression collateExpression);
    protected virtual Expression VisitDistinct(DistinctExpression distinctExpression);
    protected virtual Expression VisitCase(CaseExpression caseExpression);
    protected virtual Expression VisitSqlUnary(SqlUnaryExpression sqlUnaryExpression);
    protected virtual Expression VisitExists(ExistsExpression existsExpression);
    protected virtual Expression VisitIn(InExpression inExpression);
    protected virtual Expression VisitAtTimeZone(AtTimeZoneExpression atTimeZoneExpression);
    protected virtual string GetOperator(SqlBinaryExpression binaryExpression);
    protected virtual bool RequiresParentheses(SqlExpression outerExpression, SqlExpression innerExpression);
    protected virtual void GenerateTop(SelectExpression selectExpression);
    protected virtual void GenerateOrderings(SelectExpression selectExpression);
    protected virtual void GenerateLimitOffset(SelectExpression selectExpression);
    private void GenerateList(IReadOnlyList`1<T> items, Action`1<T> generationAction, Action`1<IRelationalCommandBuilder> joinAction);
    protected virtual Expression VisitCrossJoin(CrossJoinExpression crossJoinExpression);
    protected virtual Expression VisitCrossApply(CrossApplyExpression crossApplyExpression);
    protected virtual Expression VisitOuterApply(OuterApplyExpression outerApplyExpression);
    protected virtual Expression VisitInnerJoin(InnerJoinExpression innerJoinExpression);
    protected virtual Expression VisitLeftJoin(LeftJoinExpression leftJoinExpression);
    protected virtual Expression VisitScalarSubquery(ScalarSubqueryExpression scalarSubqueryExpression);
    protected virtual Expression VisitRowNumber(RowNumberExpression rowNumberExpression);
    protected virtual void GenerateSetOperation(SetOperationBase setOperation);
    protected virtual void GenerateSetOperationOperand(SetOperationBase setOperation, SelectExpression operand);
    private void GenerateSetOperationHelper(SetOperationBase setOperation);
    protected virtual Expression VisitExcept(ExceptExpression exceptExpression);
    protected virtual Expression VisitIntersect(IntersectExpression intersectExpression);
    protected virtual Expression VisitUnion(UnionExpression unionExpression);
    protected virtual Expression VisitUpdate(UpdateExpression updateExpression);
    protected virtual Expression VisitJsonScalar(JsonScalarExpression jsonScalarExpression);
    [CompilerGeneratedAttribute]
private void <VisitSelect>b__21_0(ProjectionExpression e);
    [CompilerGeneratedAttribute]
private void <VisitSelect>b__21_1(TableExpressionBase e);
    [CompilerGeneratedAttribute]
private void <VisitSelect>b__21_3(SqlExpression e);
    [CompilerGeneratedAttribute]
private void <VisitSqlFunction>b__25_0(SqlExpression e);
    [CompilerGeneratedAttribute]
private void <VisitTableValuedFunction>b__26_0(SqlExpression e);
    [CompilerGeneratedAttribute]
private void <VisitIn>b__43_1(SqlConstantExpression e);
    [CompilerGeneratedAttribute]
private void <GenerateOrderings>b__48_1(OrderingExpression e);
    [CompilerGeneratedAttribute]
private void <VisitRowNumber>b__57_0(SqlExpression e);
    [CompilerGeneratedAttribute]
private void <VisitRowNumber>b__57_1(OrderingExpression e);
    [CompilerGeneratedAttribute]
internal static string <GenerateSetOperation>g__GetSetOperation|58_0(SetOperationBase operation);
    [CompilerGeneratedAttribute]
internal static void <VisitUpdate>g__LiftPredicate|64_0(TableExpressionBase joinTable, <>c__DisplayClass64_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies : object {
    [CompilerGeneratedAttribute]
private IRelationalCommandBuilderFactory <RelationalCommandBuilderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlGenerationHelper <SqlGenerationHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IRelationalCommandBuilderFactory RelationalCommandBuilderFactory { get; public set; }
    public ISqlGenerationHelper SqlGenerationHelper { get; public set; }
    [EntityFrameworkInternalAttribute]
public QuerySqlGeneratorDependencies(IRelationalCommandBuilderFactory relationalCommandBuilderFactory, ISqlGenerationHelper sqlGenerationHelper);
    [CompilerGeneratedAttribute]
private QuerySqlGeneratorDependencies(QuerySqlGeneratorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IRelationalCommandBuilderFactory get_RelationalCommandBuilderFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RelationalCommandBuilderFactory(IRelationalCommandBuilderFactory value);
    [CompilerGeneratedAttribute]
public ISqlGenerationHelper get_SqlGenerationHelper();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SqlGenerationHelper(ISqlGenerationHelper value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(QuerySqlGeneratorDependencies left, QuerySqlGeneratorDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(QuerySqlGeneratorDependencies left, QuerySqlGeneratorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(QuerySqlGeneratorDependencies other);
    [CompilerGeneratedAttribute]
public QuerySqlGeneratorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalAggregateMethodCallTranslatorProvider : object {
    private List`1<IAggregateMethodCallTranslator> _plugins;
    private List`1<IAggregateMethodCallTranslator> _translators;
    private ISqlExpressionFactory _sqlExpressionFactory;
    [CompilerGeneratedAttribute]
private RelationalAggregateMethodCallTranslatorProviderDependencies <Dependencies>k__BackingField;
    protected RelationalAggregateMethodCallTranslatorProviderDependencies Dependencies { get; }
    public RelationalAggregateMethodCallTranslatorProvider(RelationalAggregateMethodCallTranslatorProviderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalAggregateMethodCallTranslatorProviderDependencies get_Dependencies();
    public virtual SqlExpression Translate(IModel model, MethodInfo method, EnumerableExpression source, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
    protected virtual void AddTranslators(IEnumerable`1<IAggregateMethodCallTranslator> translators);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalAggregateMethodCallTranslatorProviderDependencies : object {
    [CompilerGeneratedAttribute]
private ISqlExpressionFactory <SqlExpressionFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IAggregateMethodCallTranslatorPlugin> <Plugins>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <RelationalTypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public ISqlExpressionFactory SqlExpressionFactory { get; public set; }
    public IEnumerable`1<IAggregateMethodCallTranslatorPlugin> Plugins { get; public set; }
    public IRelationalTypeMappingSource RelationalTypeMappingSource { get; public set; }
    [EntityFrameworkInternalAttribute]
public RelationalAggregateMethodCallTranslatorProviderDependencies(ISqlExpressionFactory sqlExpressionFactory, IEnumerable`1<IAggregateMethodCallTranslatorPlugin> plugins, IRelationalTypeMappingSource typeMappingSource);
    [CompilerGeneratedAttribute]
private RelationalAggregateMethodCallTranslatorProviderDependencies(RelationalAggregateMethodCallTranslatorProviderDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ISqlExpressionFactory get_SqlExpressionFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SqlExpressionFactory(ISqlExpressionFactory value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IAggregateMethodCallTranslatorPlugin> get_Plugins();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Plugins(IEnumerable`1<IAggregateMethodCallTranslatorPlugin> value);
    [CompilerGeneratedAttribute]
public IRelationalTypeMappingSource get_RelationalTypeMappingSource();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RelationalTypeMappingSource(IRelationalTypeMappingSource value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalAggregateMethodCallTranslatorProviderDependencies left, RelationalAggregateMethodCallTranslatorProviderDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RelationalAggregateMethodCallTranslatorProviderDependencies left, RelationalAggregateMethodCallTranslatorProviderDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalAggregateMethodCallTranslatorProviderDependencies other);
    [CompilerGeneratedAttribute]
public RelationalAggregateMethodCallTranslatorProviderDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <ParentIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <OuterIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <SelfIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ValueComparer> <ParentIdentifierValueComparers>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ValueComparer> <OuterIdentifierValueComparers>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ValueComparer> <SelfIdentifierValueComparers>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <InnerShaper>k__BackingField;
    [CompilerGeneratedAttribute]
private INavigationBase <Navigation>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ElementType>k__BackingField;
    public Expression ParentIdentifier { get; }
    public Expression OuterIdentifier { get; }
    public Expression SelfIdentifier { get; }
    public IReadOnlyList`1<ValueComparer> ParentIdentifierValueComparers { get; }
    public IReadOnlyList`1<ValueComparer> OuterIdentifierValueComparers { get; }
    public IReadOnlyList`1<ValueComparer> SelfIdentifierValueComparers { get; }
    public Expression InnerShaper { get; }
    [NullableAttribute("2")]
public INavigationBase Navigation { get; }
    public Type ElementType { get; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public RelationalCollectionShaperExpression(Expression parentIdentifier, Expression outerIdentifier, Expression selfIdentifier, IReadOnlyList`1<ValueComparer> parentIdentifierValueComparers, IReadOnlyList`1<ValueComparer> outerIdentifierValueComparers, IReadOnlyList`1<ValueComparer> selfIdentifierValueComparers, Expression innerShaper, INavigationBase navigation, Type elementType);
    [CompilerGeneratedAttribute]
public virtual Expression get_ParentIdentifier();
    [CompilerGeneratedAttribute]
public virtual Expression get_OuterIdentifier();
    [CompilerGeneratedAttribute]
public virtual Expression get_SelfIdentifier();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<ValueComparer> get_ParentIdentifierValueComparers();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<ValueComparer> get_OuterIdentifierValueComparers();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<ValueComparer> get_SelfIdentifierValueComparers();
    [CompilerGeneratedAttribute]
public virtual Expression get_InnerShaper();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual INavigationBase get_Navigation();
    [CompilerGeneratedAttribute]
public virtual Type get_ElementType();
    public virtual Type get_Type();
    public sealed virtual ExpressionType get_NodeType();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual RelationalCollectionShaperExpression Update(Expression parentIdentifier, Expression outerIdentifier, Expression selfIdentifier, Expression innerShaper);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(ExpressionPrinter expressionPrinter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGenerator : CompiledQueryCacheKeyGenerator {
    [CompilerGeneratedAttribute]
private RelationalCompiledQueryCacheKeyGeneratorDependencies <RelationalDependencies>k__BackingField;
    protected RelationalCompiledQueryCacheKeyGeneratorDependencies RelationalDependencies { get; }
    public RelationalCompiledQueryCacheKeyGenerator(CompiledQueryCacheKeyGeneratorDependencies dependencies, RelationalCompiledQueryCacheKeyGeneratorDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalCompiledQueryCacheKeyGeneratorDependencies get_RelationalDependencies();
    public virtual object GenerateCacheKey(Expression query, bool async);
    protected RelationalCompiledQueryCacheKey GenerateCacheKeyCore(Expression query, bool async);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGeneratorDependencies : object {
    [CompilerGeneratedAttribute]
private IDbContextOptions <ContextOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IDbContextOptions ContextOptions { get; public set; }
    [EntityFrameworkInternalAttribute]
public RelationalCompiledQueryCacheKeyGeneratorDependencies(IDbContextOptions contextOptions);
    [CompilerGeneratedAttribute]
private RelationalCompiledQueryCacheKeyGeneratorDependencies(RelationalCompiledQueryCacheKeyGeneratorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IDbContextOptions get_ContextOptions();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ContextOptions(IDbContextOptions value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalCompiledQueryCacheKeyGeneratorDependencies left, RelationalCompiledQueryCacheKeyGeneratorDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RelationalCompiledQueryCacheKeyGeneratorDependencies left, RelationalCompiledQueryCacheKeyGeneratorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalCompiledQueryCacheKeyGeneratorDependencies other);
    [CompilerGeneratedAttribute]
public RelationalCompiledQueryCacheKeyGeneratorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalEntityShaperExpression : EntityShaperExpression {
    public RelationalEntityShaperExpression(IEntityType entityType, Expression valueBufferExpression, bool nullable);
    protected RelationalEntityShaperExpression(IEntityType entityType, Expression valueBufferExpression, bool nullable, LambdaExpression materializationCondition);
    protected virtual LambdaExpression GenerateMaterializationCondition(IEntityType entityType, bool nullable);
    public virtual EntityShaperExpression WithEntityType(IEntityType entityType);
    public virtual EntityShaperExpression MakeNullable(bool nullable);
    public virtual EntityShaperExpression Update(Expression valueBufferExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalEvaluatableExpressionFilter : EvaluatableExpressionFilter {
    [CompilerGeneratedAttribute]
private RelationalEvaluatableExpressionFilterDependencies <RelationalDependencies>k__BackingField;
    protected RelationalEvaluatableExpressionFilterDependencies RelationalDependencies { get; }
    public RelationalEvaluatableExpressionFilter(EvaluatableExpressionFilterDependencies dependencies, RelationalEvaluatableExpressionFilterDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalEvaluatableExpressionFilterDependencies get_RelationalDependencies();
    public virtual bool IsEvaluatableExpression(Expression expression, IModel model);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalEvaluatableExpressionFilterDependencies : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private RelationalEvaluatableExpressionFilterDependencies(RelationalEvaluatableExpressionFilterDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalEvaluatableExpressionFilterDependencies left, RelationalEvaluatableExpressionFilterDependencies right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(RelationalEvaluatableExpressionFilterDependencies left, RelationalEvaluatableExpressionFilterDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalEvaluatableExpressionFilterDependencies other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public RelationalEvaluatableExpressionFilterDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalGroupByResultExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <KeyIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ValueComparer> <KeyIdentifierValueComparers>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <KeyShaper>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <ElementShaper>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Expression KeyIdentifier { get; }
    public IReadOnlyList`1<ValueComparer> KeyIdentifierValueComparers { get; }
    public Expression KeyShaper { get; }
    public Expression ElementShaper { get; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public RelationalGroupByResultExpression(Expression keyIdentifier, IReadOnlyList`1<ValueComparer> keyIdentifierValueComparers, Expression keyShaper, Expression elementShaper);
    [CompilerGeneratedAttribute]
public virtual Expression get_KeyIdentifier();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<ValueComparer> get_KeyIdentifierValueComparers();
    [CompilerGeneratedAttribute]
public virtual Expression get_KeyShaper();
    [CompilerGeneratedAttribute]
public virtual Expression get_ElementShaper();
    [CompilerGeneratedAttribute]
public virtual Type get_Type();
    public sealed virtual ExpressionType get_NodeType();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual RelationalGroupByResultExpression Update(Expression keyIdentifier, Expression keyShaper, Expression elementShaper);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(ExpressionPrinter expressionPrinter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalGroupByShaperExpression : GroupByShaperExpression {
    [CompilerGeneratedAttribute]
private Expression <ElementSelector>k__BackingField;
    public Expression ElementSelector { get; }
    public RelationalGroupByShaperExpression(Expression keySelector, Expression elementSelector, ShapedQueryExpression groupingEnumerable);
    [CompilerGeneratedAttribute]
public virtual Expression get_ElementSelector();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual void Print(ExpressionPrinter expressionPrinter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalMemberTranslatorProvider : object {
    private List`1<IMemberTranslator> _plugins;
    private List`1<IMemberTranslator> _translators;
    [CompilerGeneratedAttribute]
private RelationalMemberTranslatorProviderDependencies <Dependencies>k__BackingField;
    protected RelationalMemberTranslatorProviderDependencies Dependencies { get; }
    public RelationalMemberTranslatorProvider(RelationalMemberTranslatorProviderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalMemberTranslatorProviderDependencies get_Dependencies();
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
    protected virtual void AddTranslators(IEnumerable`1<IMemberTranslator> translators);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalMemberTranslatorProviderDependencies : object {
    [CompilerGeneratedAttribute]
private ISqlExpressionFactory <SqlExpressionFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IMemberTranslatorPlugin> <Plugins>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public ISqlExpressionFactory SqlExpressionFactory { get; public set; }
    public IEnumerable`1<IMemberTranslatorPlugin> Plugins { get; public set; }
    [EntityFrameworkInternalAttribute]
public RelationalMemberTranslatorProviderDependencies(ISqlExpressionFactory sqlExpressionFactory, IEnumerable`1<IMemberTranslatorPlugin> plugins);
    [CompilerGeneratedAttribute]
private RelationalMemberTranslatorProviderDependencies(RelationalMemberTranslatorProviderDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ISqlExpressionFactory get_SqlExpressionFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SqlExpressionFactory(ISqlExpressionFactory value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IMemberTranslatorPlugin> get_Plugins();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Plugins(IEnumerable`1<IMemberTranslatorPlugin> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalMemberTranslatorProviderDependencies left, RelationalMemberTranslatorProviderDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RelationalMemberTranslatorProviderDependencies left, RelationalMemberTranslatorProviderDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalMemberTranslatorProviderDependencies other);
    [CompilerGeneratedAttribute]
public RelationalMemberTranslatorProviderDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalMethodCallTranslatorProvider : object {
    private List`1<IMethodCallTranslator> _plugins;
    private List`1<IMethodCallTranslator> _translators;
    private ISqlExpressionFactory _sqlExpressionFactory;
    [CompilerGeneratedAttribute]
private RelationalMethodCallTranslatorProviderDependencies <Dependencies>k__BackingField;
    protected RelationalMethodCallTranslatorProviderDependencies Dependencies { get; }
    public RelationalMethodCallTranslatorProvider(RelationalMethodCallTranslatorProviderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalMethodCallTranslatorProviderDependencies get_Dependencies();
    public virtual SqlExpression Translate(IModel model, SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
    protected virtual void AddTranslators(IEnumerable`1<IMethodCallTranslator> translators);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalMethodCallTranslatorProviderDependencies : object {
    [CompilerGeneratedAttribute]
private ISqlExpressionFactory <SqlExpressionFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IMethodCallTranslatorPlugin> <Plugins>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <RelationalTypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public ISqlExpressionFactory SqlExpressionFactory { get; public set; }
    public IEnumerable`1<IMethodCallTranslatorPlugin> Plugins { get; public set; }
    public IRelationalTypeMappingSource RelationalTypeMappingSource { get; public set; }
    [EntityFrameworkInternalAttribute]
public RelationalMethodCallTranslatorProviderDependencies(ISqlExpressionFactory sqlExpressionFactory, IEnumerable`1<IMethodCallTranslatorPlugin> plugins, IRelationalTypeMappingSource typeMappingSource);
    [CompilerGeneratedAttribute]
private RelationalMethodCallTranslatorProviderDependencies(RelationalMethodCallTranslatorProviderDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ISqlExpressionFactory get_SqlExpressionFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SqlExpressionFactory(ISqlExpressionFactory value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IMethodCallTranslatorPlugin> get_Plugins();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Plugins(IEnumerable`1<IMethodCallTranslatorPlugin> value);
    [CompilerGeneratedAttribute]
public IRelationalTypeMappingSource get_RelationalTypeMappingSource();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RelationalTypeMappingSource(IRelationalTypeMappingSource value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalMethodCallTranslatorProviderDependencies left, RelationalMethodCallTranslatorProviderDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RelationalMethodCallTranslatorProviderDependencies left, RelationalMethodCallTranslatorProviderDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalMethodCallTranslatorProviderDependencies other);
    [CompilerGeneratedAttribute]
public RelationalMethodCallTranslatorProviderDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessor : object {
    [CompilerGeneratedAttribute]
private RelationalParameterBasedSqlProcessorDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseRelationalNulls>k__BackingField;
    protected RelationalParameterBasedSqlProcessorDependencies Dependencies { get; }
    protected bool UseRelationalNulls { get; }
    public RelationalParameterBasedSqlProcessor(RelationalParameterBasedSqlProcessorDependencies dependencies, bool useRelationalNulls);
    [CompilerGeneratedAttribute]
protected virtual RelationalParameterBasedSqlProcessorDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual bool get_UseRelationalNulls();
    public virtual Expression Optimize(Expression queryExpression, IReadOnlyDictionary`2<string, object> parametersValues, Boolean& canCache);
    protected virtual Expression ProcessSqlNullability(Expression queryExpression, IReadOnlyDictionary`2<string, object> parametersValues, Boolean& canCache);
    protected virtual Expression ExpandFromSqlParameter(Expression queryExpression, IReadOnlyDictionary`2<string, object> parametersValues, Boolean& canCache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies : object {
    [CompilerGeneratedAttribute]
private ISqlExpressionFactory <SqlExpressionFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <TypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IParameterNameGeneratorFactory <ParameterNameGeneratorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public ISqlExpressionFactory SqlExpressionFactory { get; public set; }
    public IRelationalTypeMappingSource TypeMappingSource { get; public set; }
    public IParameterNameGeneratorFactory ParameterNameGeneratorFactory { get; public set; }
    [EntityFrameworkInternalAttribute]
public RelationalParameterBasedSqlProcessorDependencies(ISqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource, IParameterNameGeneratorFactory parameterNameGeneratorFactory);
    [CompilerGeneratedAttribute]
private RelationalParameterBasedSqlProcessorDependencies(RelationalParameterBasedSqlProcessorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ISqlExpressionFactory get_SqlExpressionFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SqlExpressionFactory(ISqlExpressionFactory value);
    [CompilerGeneratedAttribute]
public IRelationalTypeMappingSource get_TypeMappingSource();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeMappingSource(IRelationalTypeMappingSource value);
    [CompilerGeneratedAttribute]
public IParameterNameGeneratorFactory get_ParameterNameGeneratorFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ParameterNameGeneratorFactory(IParameterNameGeneratorFactory value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalParameterBasedSqlProcessorDependencies left, RelationalParameterBasedSqlProcessorDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RelationalParameterBasedSqlProcessorDependencies left, RelationalParameterBasedSqlProcessorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalParameterBasedSqlProcessorDependencies other);
    [CompilerGeneratedAttribute]
public RelationalParameterBasedSqlProcessorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor : QueryableMethodTranslatingExpressionVisitor {
    private RelationalSqlTranslatingExpressionVisitor _sqlTranslator;
    private SharedTypeEntityExpandingExpressionVisitor _sharedTypeEntityExpandingExpressionVisitor;
    private RelationalProjectionBindingExpressionVisitor _projectionBindingExpressionVisitor;
    private QueryCompilationContext _queryCompilationContext;
    private ISqlExpressionFactory _sqlExpressionFactory;
    private bool _subquery;
    private static bool QuirkEnabled28727;
    private static bool QuirkEnabled30528;
    private static bool QuirkEnabled30572;
    private static bool QuirkEnabled31078;
    [CompilerGeneratedAttribute]
private RelationalQueryableMethodTranslatingExpressionVisitorDependencies <RelationalDependencies>k__BackingField;
    protected RelationalQueryableMethodTranslatingExpressionVisitorDependencies RelationalDependencies { get; }
    public RelationalQueryableMethodTranslatingExpressionVisitor(QueryableMethodTranslatingExpressionVisitorDependencies dependencies, RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies, QueryCompilationContext queryCompilationContext);
    protected RelationalQueryableMethodTranslatingExpressionVisitor(RelationalQueryableMethodTranslatingExpressionVisitor parentVisitor);
    private static RelationalQueryableMethodTranslatingExpressionVisitor();
    [CompilerGeneratedAttribute]
protected virtual RelationalQueryableMethodTranslatingExpressionVisitorDependencies get_RelationalDependencies();
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    protected virtual QueryableMethodTranslatingExpressionVisitor CreateSubqueryVisitor();
    protected virtual ShapedQueryExpression CreateShapedQueryExpression(IEntityType entityType);
    private static ShapedQueryExpression CreateShapedQueryExpression(IEntityType entityType, SelectExpression selectExpression);
    protected virtual ShapedQueryExpression TranslateAll(ShapedQueryExpression source, LambdaExpression predicate);
    [NullableContextAttribute("2")]
protected virtual ShapedQueryExpression TranslateAny(ShapedQueryExpression source, LambdaExpression predicate);
    protected virtual ShapedQueryExpression TranslateAverage(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    protected virtual ShapedQueryExpression TranslateCast(ShapedQueryExpression source, Type resultType);
    protected virtual ShapedQueryExpression TranslateConcat(ShapedQueryExpression source1, ShapedQueryExpression source2);
    protected virtual ShapedQueryExpression TranslateContains(ShapedQueryExpression source, Expression item);
    [NullableContextAttribute("2")]
protected virtual ShapedQueryExpression TranslateCount(ShapedQueryExpression source, LambdaExpression predicate);
    [NullableContextAttribute("2")]
protected virtual ShapedQueryExpression TranslateDefaultIfEmpty(ShapedQueryExpression source, Expression defaultValue);
    protected virtual ShapedQueryExpression TranslateDistinct(ShapedQueryExpression source);
    protected virtual ShapedQueryExpression TranslateElementAtOrDefault(ShapedQueryExpression source, Expression index, bool returnDefault);
    protected virtual ShapedQueryExpression TranslateExcept(ShapedQueryExpression source1, ShapedQueryExpression source2);
    protected virtual ShapedQueryExpression TranslateFirstOrDefault(ShapedQueryExpression source, LambdaExpression predicate, Type returnType, bool returnDefault);
    [NullableContextAttribute("2")]
protected virtual ShapedQueryExpression TranslateGroupBy(ShapedQueryExpression source, LambdaExpression keySelector, LambdaExpression elementSelector, LambdaExpression resultSelector);
    private Expression TranslateGroupingKey(Expression expression);
    protected virtual ShapedQueryExpression TranslateGroupJoin(ShapedQueryExpression outer, ShapedQueryExpression inner, LambdaExpression outerKeySelector, LambdaExpression innerKeySelector, LambdaExpression resultSelector);
    protected virtual ShapedQueryExpression TranslateIntersect(ShapedQueryExpression source1, ShapedQueryExpression source2);
    protected virtual ShapedQueryExpression TranslateJoin(ShapedQueryExpression outer, ShapedQueryExpression inner, LambdaExpression outerKeySelector, LambdaExpression innerKeySelector, LambdaExpression resultSelector);
    protected virtual ShapedQueryExpression TranslateLeftJoin(ShapedQueryExpression outer, ShapedQueryExpression inner, LambdaExpression outerKeySelector, LambdaExpression innerKeySelector, LambdaExpression resultSelector);
    private SqlExpression CreateJoinPredicate(ShapedQueryExpression outer, LambdaExpression outerKeySelector, ShapedQueryExpression inner, LambdaExpression innerKeySelector);
    private SqlExpression CreateJoinPredicate(Expression outerKey, Expression innerKey);
    protected virtual ShapedQueryExpression TranslateLastOrDefault(ShapedQueryExpression source, LambdaExpression predicate, Type returnType, bool returnDefault);
    [NullableContextAttribute("2")]
protected virtual ShapedQueryExpression TranslateLongCount(ShapedQueryExpression source, LambdaExpression predicate);
    protected virtual ShapedQueryExpression TranslateMax(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    protected virtual ShapedQueryExpression TranslateMin(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    protected virtual ShapedQueryExpression TranslateOfType(ShapedQueryExpression source, Type resultType);
    protected virtual ShapedQueryExpression TranslateOrderBy(ShapedQueryExpression source, LambdaExpression keySelector, bool ascending);
    protected virtual ShapedQueryExpression TranslateReverse(ShapedQueryExpression source);
    protected virtual ShapedQueryExpression TranslateSelect(ShapedQueryExpression source, LambdaExpression selector);
    protected virtual ShapedQueryExpression TranslateSelectMany(ShapedQueryExpression source, LambdaExpression collectionSelector, LambdaExpression resultSelector);
    protected virtual ShapedQueryExpression TranslateSelectMany(ShapedQueryExpression source, LambdaExpression selector);
    protected virtual ShapedQueryExpression TranslateSingleOrDefault(ShapedQueryExpression source, LambdaExpression predicate, Type returnType, bool returnDefault);
    protected virtual ShapedQueryExpression TranslateSkip(ShapedQueryExpression source, Expression count);
    protected virtual ShapedQueryExpression TranslateSkipWhile(ShapedQueryExpression source, LambdaExpression predicate);
    protected virtual ShapedQueryExpression TranslateSum(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    protected virtual ShapedQueryExpression TranslateTake(ShapedQueryExpression source, Expression count);
    protected virtual ShapedQueryExpression TranslateTakeWhile(ShapedQueryExpression source, LambdaExpression predicate);
    protected virtual ShapedQueryExpression TranslateThenBy(ShapedQueryExpression source, LambdaExpression keySelector, bool ascending);
    protected virtual ShapedQueryExpression TranslateUnion(ShapedQueryExpression source1, ShapedQueryExpression source2);
    protected virtual ShapedQueryExpression TranslateWhere(ShapedQueryExpression source, LambdaExpression predicate);
    protected virtual NonQueryExpression TranslateExecuteDelete(ShapedQueryExpression source);
    protected virtual NonQueryExpression TranslateExecuteUpdate(ShapedQueryExpression source, LambdaExpression setPropertyCalls);
    protected virtual bool IsValidSelectExpressionForExecuteDelete(SelectExpression selectExpression, EntityShaperExpression entityShaperExpression, TableExpression& tableExpression);
    protected virtual bool IsValidSelectExpressionForExecuteUpdate(SelectExpression selectExpression, EntityShaperExpression entityShaperExpression, TableExpression& tableExpression);
    protected virtual SqlExpression TranslateExpression(Expression expression);
    protected virtual SqlExpression TranslateLambdaExpression(ShapedQueryExpression shapedQueryExpression, LambdaExpression lambdaExpression);
    private Expression RemapLambdaBody(ShapedQueryExpression shapedQueryExpression, LambdaExpression lambdaExpression);
    private Expression ExpandSharedTypeEntities(SelectExpression selectExpression, Expression lambdaBody);
    private static Expression PruneIncludes(IncludeExpression includeExpression);
    private ShapedQueryExpression TranslateTwoParameterSelector(ShapedQueryExpression source, LambdaExpression resultSelector);
    private static Expression AccessField(Type transparentIdentifierType, Expression targetExpression, string fieldName);
    private static void HandleGroupByForAggregate(SelectExpression selectExpression, bool eraseProjection);
    private static Expression MatchShaperNullabilityForSetOperation(Expression shaper1, Expression shaper2, bool makeNullable);
    private ShapedQueryExpression TranslateAggregateWithPredicate(ShapedQueryExpression source, LambdaExpression predicate, MethodInfo predicateLessMethodInfo);
    private ShapedQueryExpression TranslateAggregateWithSelector(ShapedQueryExpression source, LambdaExpression selectorLambda, Func`2<Type, MethodInfo> methodGenerator, bool throwWhenEmpty, Type resultType);
    [CompilerGeneratedAttribute]
internal static bool <TranslateExecuteDelete>g__AreOtherNonOwnedEntityTypesInTheTable|60_0(IEntityType rootType, ITableBase table);
    [CompilerGeneratedAttribute]
internal static Expression <TranslateExecuteDelete>g__PruneOwnedIncludes|60_1(IncludeExpression includeExpression);
    [CompilerGeneratedAttribute]
internal static NonQueryExpression <TranslateExecuteUpdate>g__TranslateSetPropertyExpressions|61_0(RelationalQueryableMethodTranslatingExpressionVisitor visitor, ShapedQueryExpression source, SelectExpression selectExpression, TableExpression tableExpression, List`1<ValueTuple`2<LambdaExpression, Expression>> propertyValueLambdaExpressions, List`1<Expression> leftExpressions);
    [CompilerGeneratedAttribute]
private void <TranslateExecuteUpdate>g__PopulateSetPropertyCalls|61_1(Expression expression, List`1<ValueTuple`2<LambdaExpression, Expression>> list, ParameterExpression parameter);
    [CompilerGeneratedAttribute]
internal static bool <TranslateExecuteUpdate>g__TryProcessPropertyAccess|61_2(IModel model, Expression& expression, EntityShaperExpression& entityShaperExpression);
    [CompilerGeneratedAttribute]
internal static Expression <TranslateExecuteUpdate>g__Unwrap|61_5(Expression expression);
    [CompilerGeneratedAttribute]
internal static bool <TranslateExecuteUpdate>g__IsValidPropertyAccess|61_3(IModel model, Expression expression, EntityShaperExpression& entityShaperExpression);
    [CompilerGeneratedAttribute]
internal static Expression <TranslateExecuteUpdate>g__GetEntitySource|61_4(IModel model, Expression propertyAccessExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies : object {
    [CompilerGeneratedAttribute]
private IRelationalSqlTranslatingExpressionVisitorFactory <RelationalSqlTranslatingExpressionVisitorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlExpressionFactory <SqlExpressionFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <TypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IRelationalSqlTranslatingExpressionVisitorFactory RelationalSqlTranslatingExpressionVisitorFactory { get; public set; }
    public ISqlExpressionFactory SqlExpressionFactory { get; public set; }
    public IRelationalTypeMappingSource TypeMappingSource { get; public set; }
    public IModel Model { get; public set; }
    [EntityFrameworkInternalAttribute]
public RelationalQueryableMethodTranslatingExpressionVisitorDependencies(IRelationalSqlTranslatingExpressionVisitorFactory relationalSqlTranslatingExpressionVisitorFactory, ISqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource, IModel model);
    [CompilerGeneratedAttribute]
private RelationalQueryableMethodTranslatingExpressionVisitorDependencies(RelationalQueryableMethodTranslatingExpressionVisitorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IRelationalSqlTranslatingExpressionVisitorFactory get_RelationalSqlTranslatingExpressionVisitorFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RelationalSqlTranslatingExpressionVisitorFactory(IRelationalSqlTranslatingExpressionVisitorFactory value);
    [CompilerGeneratedAttribute]
public ISqlExpressionFactory get_SqlExpressionFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SqlExpressionFactory(ISqlExpressionFactory value);
    [CompilerGeneratedAttribute]
public IRelationalTypeMappingSource get_TypeMappingSource();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeMappingSource(IRelationalTypeMappingSource value);
    [CompilerGeneratedAttribute]
public IModel get_Model();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Model(IModel value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalQueryableMethodTranslatingExpressionVisitorDependencies left, RelationalQueryableMethodTranslatingExpressionVisitorDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RelationalQueryableMethodTranslatingExpressionVisitorDependencies left, RelationalQueryableMethodTranslatingExpressionVisitorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalQueryableMethodTranslatingExpressionVisitorDependencies other);
    [CompilerGeneratedAttribute]
public RelationalQueryableMethodTranslatingExpressionVisitorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext : QueryCompilationContext {
    [CompilerGeneratedAttribute]
private RelationalQueryCompilationContextDependencies <RelationalDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<QuerySplittingBehavior> <QuerySplittingBehavior>k__BackingField;
    protected RelationalQueryCompilationContextDependencies RelationalDependencies { get; }
    public Nullable`1<QuerySplittingBehavior> QuerySplittingBehavior { get; internal set; }
    public RelationalQueryCompilationContext(QueryCompilationContextDependencies dependencies, RelationalQueryCompilationContextDependencies relationalDependencies, bool async);
    [CompilerGeneratedAttribute]
protected virtual RelationalQueryCompilationContextDependencies get_RelationalDependencies();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<QuerySplittingBehavior> get_QuerySplittingBehavior();
    [CompilerGeneratedAttribute]
internal virtual void set_QuerySplittingBehavior(Nullable`1<QuerySplittingBehavior> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContextDependencies : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private RelationalQueryCompilationContextDependencies(RelationalQueryCompilationContextDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalQueryCompilationContextDependencies left, RelationalQueryCompilationContextDependencies right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(RelationalQueryCompilationContextDependencies left, RelationalQueryCompilationContextDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalQueryCompilationContextDependencies other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public RelationalQueryCompilationContextDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalQueryContext : QueryContext {
    [CompilerGeneratedAttribute]
private RelationalQueryContextDependencies <RelationalDependencies>k__BackingField;
    protected RelationalQueryContextDependencies RelationalDependencies { get; }
    public IRelationalQueryStringFactory RelationalQueryStringFactory { get; }
    public IRelationalConnection Connection { get; }
    public IRelationalCommandDiagnosticsLogger CommandLogger { get; }
    public RelationalQueryContext(QueryContextDependencies dependencies, RelationalQueryContextDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalQueryContextDependencies get_RelationalDependencies();
    public virtual IRelationalQueryStringFactory get_RelationalQueryStringFactory();
    public virtual IRelationalConnection get_Connection();
    public virtual IRelationalCommandDiagnosticsLogger get_CommandLogger();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalQueryContextDependencies : object {
    [CompilerGeneratedAttribute]
private IRelationalConnection <RelationalConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalQueryStringFactory <RelationalQueryStringFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IRelationalConnection RelationalConnection { get; public set; }
    public IRelationalQueryStringFactory RelationalQueryStringFactory { get; public set; }
    [EntityFrameworkInternalAttribute]
public RelationalQueryContextDependencies(IRelationalConnection relationalConnection, IRelationalQueryStringFactory relationalQueryStringFactory);
    [CompilerGeneratedAttribute]
private RelationalQueryContextDependencies(RelationalQueryContextDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IRelationalConnection get_RelationalConnection();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RelationalConnection(IRelationalConnection value);
    [CompilerGeneratedAttribute]
public IRelationalQueryStringFactory get_RelationalQueryStringFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RelationalQueryStringFactory(IRelationalQueryStringFactory value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalQueryContextDependencies left, RelationalQueryContextDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RelationalQueryContextDependencies left, RelationalQueryContextDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalQueryContextDependencies other);
    [CompilerGeneratedAttribute]
public RelationalQueryContextDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessor : QueryTranslationPostprocessor {
    private bool _useRelationalNulls;
    [CompilerGeneratedAttribute]
private RelationalQueryTranslationPostprocessorDependencies <RelationalDependencies>k__BackingField;
    protected RelationalQueryTranslationPostprocessorDependencies RelationalDependencies { get; }
    public RelationalQueryTranslationPostprocessor(QueryTranslationPostprocessorDependencies dependencies, RelationalQueryTranslationPostprocessorDependencies relationalDependencies, QueryCompilationContext queryCompilationContext);
    [CompilerGeneratedAttribute]
protected virtual RelationalQueryTranslationPostprocessorDependencies get_RelationalDependencies();
    public virtual Expression Process(Expression query);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessorDependencies : object {
    [CompilerGeneratedAttribute]
private ISqlExpressionFactory <SqlExpressionFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public ISqlExpressionFactory SqlExpressionFactory { get; public set; }
    [EntityFrameworkInternalAttribute]
public RelationalQueryTranslationPostprocessorDependencies(ISqlExpressionFactory sqlExpressionFactory);
    [CompilerGeneratedAttribute]
private RelationalQueryTranslationPostprocessorDependencies(RelationalQueryTranslationPostprocessorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ISqlExpressionFactory get_SqlExpressionFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SqlExpressionFactory(ISqlExpressionFactory value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalQueryTranslationPostprocessorDependencies left, RelationalQueryTranslationPostprocessorDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RelationalQueryTranslationPostprocessorDependencies left, RelationalQueryTranslationPostprocessorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalQueryTranslationPostprocessorDependencies other);
    [CompilerGeneratedAttribute]
public RelationalQueryTranslationPostprocessorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPreprocessor : QueryTranslationPreprocessor {
    private RelationalQueryCompilationContext _relationalQueryCompilationContext;
    [CompilerGeneratedAttribute]
private RelationalQueryTranslationPreprocessorDependencies <RelationalDependencies>k__BackingField;
    protected RelationalQueryTranslationPreprocessorDependencies RelationalDependencies { get; }
    public RelationalQueryTranslationPreprocessor(QueryTranslationPreprocessorDependencies dependencies, RelationalQueryTranslationPreprocessorDependencies relationalDependencies, QueryCompilationContext queryCompilationContext);
    [CompilerGeneratedAttribute]
protected virtual RelationalQueryTranslationPreprocessorDependencies get_RelationalDependencies();
    public virtual Expression NormalizeQueryableMethod(Expression expression);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPreprocessorDependencies : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private RelationalQueryTranslationPreprocessorDependencies(RelationalQueryTranslationPreprocessorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalQueryTranslationPreprocessorDependencies left, RelationalQueryTranslationPreprocessorDependencies right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(RelationalQueryTranslationPreprocessorDependencies left, RelationalQueryTranslationPreprocessorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalQueryTranslationPreprocessorDependencies other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public RelationalQueryTranslationPreprocessorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor : ShapedQueryCompilingExpressionVisitor {
    private Type _contextType;
    private ISet`1<string> _tags;
    private bool _threadSafetyChecksEnabled;
    private bool _detailedErrorsEnabled;
    private bool _useRelationalNulls;
    [CompilerGeneratedAttribute]
private RelationalShapedQueryCompilingExpressionVisitorDependencies <RelationalDependencies>k__BackingField;
    private static MethodInfo NonQueryMethodInfo;
    private static MethodInfo NonQueryAsyncMethodInfo;
    protected RelationalShapedQueryCompilingExpressionVisitorDependencies RelationalDependencies { get; }
    public RelationalShapedQueryCompilingExpressionVisitor(ShapedQueryCompilingExpressionVisitorDependencies dependencies, RelationalShapedQueryCompilingExpressionVisitorDependencies relationalDependencies, QueryCompilationContext queryCompilationContext);
    private static RelationalShapedQueryCompilingExpressionVisitor();
    [CompilerGeneratedAttribute]
protected virtual RelationalShapedQueryCompilingExpressionVisitorDependencies get_RelationalDependencies();
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected virtual Expression VisitNonQuery(NonQueryExpression nonQueryExpression);
    private static int NonQueryResult(RelationalQueryContext relationalQueryContext, RelationalCommandCache relationalCommandCache, Type contextType, CommandSource commandSource, bool threadSafetyChecksEnabled);
    private static Task`1<int> NonQueryResultAsync(RelationalQueryContext relationalQueryContext, RelationalCommandCache relationalCommandCache, Type contextType, CommandSource commandSource, bool threadSafetyChecksEnabled);
    protected virtual Expression VisitShapedQuery(ShapedQueryExpression shapedQueryExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitorDependencies : object {
    [CompilerGeneratedAttribute]
private IQuerySqlGeneratorFactory <QuerySqlGeneratorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalParameterBasedSqlProcessorFactory <RelationalParameterBasedSqlProcessorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IQuerySqlGeneratorFactory QuerySqlGeneratorFactory { get; public set; }
    public IRelationalParameterBasedSqlProcessorFactory RelationalParameterBasedSqlProcessorFactory { get; public set; }
    [EntityFrameworkInternalAttribute]
public RelationalShapedQueryCompilingExpressionVisitorDependencies(IQuerySqlGeneratorFactory querySqlGeneratorFactory, IRelationalParameterBasedSqlProcessorFactory relationalParameterBasedSqlProcessorFactory);
    [CompilerGeneratedAttribute]
private RelationalShapedQueryCompilingExpressionVisitorDependencies(RelationalShapedQueryCompilingExpressionVisitorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IQuerySqlGeneratorFactory get_QuerySqlGeneratorFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_QuerySqlGeneratorFactory(IQuerySqlGeneratorFactory value);
    [CompilerGeneratedAttribute]
public IRelationalParameterBasedSqlProcessorFactory get_RelationalParameterBasedSqlProcessorFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RelationalParameterBasedSqlProcessorFactory(IRelationalParameterBasedSqlProcessorFactory value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalShapedQueryCompilingExpressionVisitorDependencies left, RelationalShapedQueryCompilingExpressionVisitorDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RelationalShapedQueryCompilingExpressionVisitorDependencies left, RelationalShapedQueryCompilingExpressionVisitorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalShapedQueryCompilingExpressionVisitorDependencies other);
    [CompilerGeneratedAttribute]
public RelationalShapedQueryCompilingExpressionVisitorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalSplitCollectionShaperExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <ParentIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <ChildIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ValueComparer> <IdentifierValueComparers>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectExpression <SelectExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <InnerShaper>k__BackingField;
    [CompilerGeneratedAttribute]
private INavigationBase <Navigation>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ElementType>k__BackingField;
    public Expression ParentIdentifier { get; }
    public Expression ChildIdentifier { get; }
    public IReadOnlyList`1<ValueComparer> IdentifierValueComparers { get; }
    public SelectExpression SelectExpression { get; }
    public Expression InnerShaper { get; }
    [NullableAttribute("2")]
public INavigationBase Navigation { get; }
    public Type ElementType { get; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public RelationalSplitCollectionShaperExpression(Expression parentIdentifier, Expression childIdentifier, IReadOnlyList`1<ValueComparer> identifierValueComparers, SelectExpression selectExpression, Expression innerShaper, INavigationBase navigation, Type elementType);
    [CompilerGeneratedAttribute]
public virtual Expression get_ParentIdentifier();
    [CompilerGeneratedAttribute]
public virtual Expression get_ChildIdentifier();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<ValueComparer> get_IdentifierValueComparers();
    [CompilerGeneratedAttribute]
public virtual SelectExpression get_SelectExpression();
    [CompilerGeneratedAttribute]
public virtual Expression get_InnerShaper();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual INavigationBase get_Navigation();
    [CompilerGeneratedAttribute]
public virtual Type get_ElementType();
    public virtual Type get_Type();
    public sealed virtual ExpressionType get_NodeType();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual RelationalSplitCollectionShaperExpression Update(Expression parentIdentifier, Expression childIdentifier, SelectExpression selectExpression, Expression innerShaper);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(ExpressionPrinter expressionPrinter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor : ExpressionVisitor {
    private static bool UseOldBehavior30996;
    private static string RuntimeParameterPrefix;
    private static List`1<MethodInfo> SingleResultMethodInfos;
    private static List`1<MethodInfo> PredicateAggregateMethodInfos;
    private static MethodInfo ParameterValueExtractorMethod;
    private static MethodInfo ParameterListValueExtractorMethod;
    private static MethodInfo StringEqualsWithStringComparison;
    private static MethodInfo StringEqualsWithStringComparisonStatic;
    private static MethodInfo GetTypeMethodInfo;
    private QueryCompilationContext _queryCompilationContext;
    private IModel _model;
    private ISqlExpressionFactory _sqlExpressionFactory;
    private QueryableMethodTranslatingExpressionVisitor _queryableMethodTranslatingExpressionVisitor;
    private SqlTypeMappingVerifyingExpressionVisitor _sqlTypeMappingVerifyingExpressionVisitor;
    private bool _throwForNotTranslatedEfProperty;
    [CompilerGeneratedAttribute]
private string <TranslationErrorDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalSqlTranslatingExpressionVisitorDependencies <Dependencies>k__BackingField;
    [NullableAttribute("2")]
public string TranslationErrorDetails { get; private set; }
    protected RelationalSqlTranslatingExpressionVisitorDependencies Dependencies { get; }
    public RelationalSqlTranslatingExpressionVisitor(RelationalSqlTranslatingExpressionVisitorDependencies dependencies, QueryCompilationContext queryCompilationContext, QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor);
    private static RelationalSqlTranslatingExpressionVisitor();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_TranslationErrorDetails();
    [CompilerGeneratedAttribute]
private void set_TranslationErrorDetails(string value);
    protected virtual void AddTranslationErrorDetails(string details);
    [CompilerGeneratedAttribute]
protected virtual RelationalSqlTranslatingExpressionVisitorDependencies get_Dependencies();
    public virtual SqlExpression Translate(Expression expression);
    private SqlExpression TranslateInternal(Expression expression);
    [ObsoleteAttribute("Use IAggregateMethodCallTranslatorProvider to add translation for aggregate methods")]
public virtual SqlExpression TranslateAverage(SqlExpression sqlExpression);
    [ObsoleteAttribute("Use IAggregateMethodCallTranslatorProvider to add translation for aggregate methods")]
public virtual SqlExpression TranslateCount(SqlExpression sqlExpression);
    [ObsoleteAttribute("Use IAggregateMethodCallTranslatorProvider to add translation for aggregate methods")]
public virtual SqlExpression TranslateLongCount(SqlExpression sqlExpression);
    [ObsoleteAttribute("Use IAggregateMethodCallTranslatorProvider to add translation for aggregate methods")]
public virtual SqlExpression TranslateMax(SqlExpression sqlExpression);
    [ObsoleteAttribute("Use IAggregateMethodCallTranslatorProvider to add translation for aggregate methods")]
public virtual SqlExpression TranslateMin(SqlExpression sqlExpression);
    [ObsoleteAttribute("Use IAggregateMethodCallTranslatorProvider to add translation for aggregate methods")]
public virtual SqlExpression TranslateSum(SqlExpression sqlExpression);
    protected virtual Expression VisitBinary(BinaryExpression binaryExpression);
    protected virtual Expression VisitConditional(ConditionalExpression conditionalExpression);
    protected virtual Expression VisitConstant(ConstantExpression constantExpression);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected virtual Expression VisitInvocation(InvocationExpression invocationExpression);
    protected virtual Expression VisitLambda(Expression`1<T> lambdaExpression);
    protected virtual Expression VisitListInit(ListInitExpression listInitExpression);
    protected virtual Expression VisitMember(MemberExpression memberExpression);
    protected virtual Expression VisitMemberInit(MemberInitExpression memberInitExpression);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    protected virtual Expression VisitNew(NewExpression newExpression);
    protected virtual Expression VisitNewArray(NewArrayExpression newArrayExpression);
    protected virtual Expression VisitParameter(ParameterExpression parameterExpression);
    protected virtual Expression VisitTypeBinary(TypeBinaryExpression typeBinaryExpression);
    protected virtual Expression VisitUnary(UnaryExpression unaryExpression);
    private SqlExpression TryBindMember(Expression source, MemberIdentity member);
    private SqlExpression BindProperty(EntityReferenceExpression entityReferenceExpression, IProperty property);
    private bool TryTranslateAggregateMethodCall(MethodCallExpression methodCallExpression, SqlExpression& translation);
    private bool TryTranslateAsEnumerableExpression(Expression expression, EnumerableExpression& enumerableExpression);
    private SqlExpression TranslateAggregateMethod(EnumerableExpression enumerableExpression, MethodInfo method, List`1<SqlExpression> scalarArguments);
    private static Expression RemapLambda(EnumerableExpression enumerableExpression, LambdaExpression lambdaExpression);
    private static EnumerableExpression ProcessSelector(EnumerableExpression enumerableExpression, LambdaExpression lambdaExpression);
    private EnumerableExpression ProcessOrderByThenBy(EnumerableExpression enumerableExpression, LambdaExpression lambdaExpression, bool thenBy, bool ascending);
    private EnumerableExpression ProcessPredicate(EnumerableExpression enumerableExpression, LambdaExpression lambdaExpression);
    private static Expression TryRemoveImplicitConvert(Expression expression);
    private static Expression RemoveObjectConvert(Expression expression);
    private static Expression ConvertObjectArrayEqualityComparison(Expression left, Expression right);
    private static Expression GetConstantOrNotTranslated(Expression expression);
    private bool TryRewriteContainsEntity(Expression source, Expression item, Expression& result);
    private bool TryRewriteEntityEquality(ExpressionType nodeType, Expression left, Expression right, bool equalsMethod, Expression& result);
    private Expression CreatePropertyAccessExpression(Expression target, IProperty property);
    private static T ParameterValueExtractor(QueryContext context, string baseParameterName, IProperty property);
    private static List`1<TProperty> ParameterListValueExtractor(QueryContext context, string baseParameterName, IProperty property);
    private static bool CanEvaluate(Expression expression);
    private static bool IsNullSqlConstantExpression(Expression expression);
    [DebuggerStepThroughAttribute]
private static bool TranslationFailed(Expression original, Expression translation, SqlExpression& castTranslation);
    [CompilerGeneratedAttribute]
internal static Expression <VisitBinary>g__RemoveConvert|32_4(Expression e);
    [CompilerGeneratedAttribute]
private Expression <VisitBinary>g__ProcessGetType|32_0(EntityReferenceExpression entityReferenceExpression, Type comparisonType, bool match);
    [CompilerGeneratedAttribute]
private SqlExpression <VisitBinary>b__32_10(SqlExpression a, SqlExpression b);
    [CompilerGeneratedAttribute]
private bool <VisitBinary>g__IsGetTypeMethodCall|32_1(Expression expression, EntityReferenceExpression& entityReferenceExpression);
    [CompilerGeneratedAttribute]
internal static bool <VisitBinary>g__IsTypeConstant|32_2(Expression expression, Type& type);
    [CompilerGeneratedAttribute]
internal static bool <VisitBinary>g__TryUnwrapConvertToObject|32_3(Expression expression, Expression& operand);
    [CompilerGeneratedAttribute]
internal static bool <VisitTypeBinary>g__HasSiblings|45_0(IEntityType entityType);
    [CompilerGeneratedAttribute]
private SqlExpression <BindProperty>b__48_3(ColumnExpression c);
    [CompilerGeneratedAttribute]
private SqlExpression <BindProperty>b__48_4(SqlExpression a, SqlExpression b);
    [CompilerGeneratedAttribute]
private SqlExpression <BindProperty>b__48_7(ColumnExpression c);
    [CompilerGeneratedAttribute]
private SqlExpression <BindProperty>b__48_8(SqlExpression a, SqlExpression b);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorDependencies : object {
    [CompilerGeneratedAttribute]
private ISqlExpressionFactory <SqlExpressionFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <TypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IMemberTranslatorProvider <MemberTranslatorProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethodCallTranslatorProvider <MethodCallTranslatorProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IAggregateMethodCallTranslatorProvider <AggregateMethodCallTranslatorProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public ISqlExpressionFactory SqlExpressionFactory { get; public set; }
    public IModel Model { get; public set; }
    public IRelationalTypeMappingSource TypeMappingSource { get; public set; }
    public IMemberTranslatorProvider MemberTranslatorProvider { get; public set; }
    public IMethodCallTranslatorProvider MethodCallTranslatorProvider { get; public set; }
    public IAggregateMethodCallTranslatorProvider AggregateMethodCallTranslatorProvider { get; }
    [EntityFrameworkInternalAttribute]
public RelationalSqlTranslatingExpressionVisitorDependencies(ISqlExpressionFactory sqlExpressionFactory, IModel model, IRelationalTypeMappingSource typeMappingSource, IMemberTranslatorProvider memberTranslatorProvider, IMethodCallTranslatorProvider methodCallTranslatorProvider, IAggregateMethodCallTranslatorProvider aggregateMethodCallTranslatorProvider);
    [CompilerGeneratedAttribute]
private RelationalSqlTranslatingExpressionVisitorDependencies(RelationalSqlTranslatingExpressionVisitorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ISqlExpressionFactory get_SqlExpressionFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SqlExpressionFactory(ISqlExpressionFactory value);
    [CompilerGeneratedAttribute]
public IModel get_Model();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Model(IModel value);
    [CompilerGeneratedAttribute]
public IRelationalTypeMappingSource get_TypeMappingSource();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeMappingSource(IRelationalTypeMappingSource value);
    [CompilerGeneratedAttribute]
public IMemberTranslatorProvider get_MemberTranslatorProvider();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MemberTranslatorProvider(IMemberTranslatorProvider value);
    [CompilerGeneratedAttribute]
public IMethodCallTranslatorProvider get_MethodCallTranslatorProvider();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MethodCallTranslatorProvider(IMethodCallTranslatorProvider value);
    [CompilerGeneratedAttribute]
public IAggregateMethodCallTranslatorProvider get_AggregateMethodCallTranslatorProvider();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalSqlTranslatingExpressionVisitorDependencies left, RelationalSqlTranslatingExpressionVisitorDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RelationalSqlTranslatingExpressionVisitorDependencies left, RelationalSqlTranslatingExpressionVisitorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalSqlTranslatingExpressionVisitorDependencies other);
    [CompilerGeneratedAttribute]
public RelationalSqlTranslatingExpressionVisitorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorFactory : object {
    [CompilerGeneratedAttribute]
private RelationalSqlTranslatingExpressionVisitorDependencies <Dependencies>k__BackingField;
    protected RelationalSqlTranslatingExpressionVisitorDependencies Dependencies { get; }
    public RelationalSqlTranslatingExpressionVisitorFactory(RelationalSqlTranslatingExpressionVisitorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalSqlTranslatingExpressionVisitorDependencies get_Dependencies();
    public virtual RelationalSqlTranslatingExpressionVisitor Create(QueryCompilationContext queryCompilationContext, QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SetPropertyCalls`1 : object {
    [NullableContextAttribute("1")]
public SetPropertyCalls`1<TSource> SetProperty(Func`2<TSource, TProperty> propertyExpression, Func`2<TSource, TProperty> valueExpression);
    [NullableContextAttribute("1")]
public SetPropertyCalls`1<TSource> SetProperty(Func`2<TSource, TProperty> propertyExpression, TProperty valueExpression);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory : object {
    private RelationalTypeMapping _boolTypeMapping;
    [CompilerGeneratedAttribute]
private SqlExpressionFactoryDependencies <Dependencies>k__BackingField;
    protected SqlExpressionFactoryDependencies Dependencies { get; }
    public SqlExpressionFactory(SqlExpressionFactoryDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual SqlExpressionFactoryDependencies get_Dependencies();
    [NullableContextAttribute("2")]
public virtual SqlExpression ApplyDefaultTypeMapping(SqlExpression sqlExpression);
    [NullableContextAttribute("2")]
public virtual SqlExpression ApplyTypeMapping(SqlExpression sqlExpression, RelationalTypeMapping typeMapping);
    private SqlExpression ApplyTypeMappingOnAtTimeZone(AtTimeZoneExpression atTimeZoneExpression, RelationalTypeMapping typeMapping);
    private SqlExpression ApplyTypeMappingOnLike(LikeExpression likeExpression);
    private SqlExpression ApplyTypeMappingOnCase(CaseExpression caseExpression, RelationalTypeMapping typeMapping);
    private SqlExpression ApplyTypeMappingOnCollate(CollateExpression collateExpression, RelationalTypeMapping typeMapping);
    private SqlExpression ApplyTypeMappingOnDistinct(DistinctExpression distinctExpression, RelationalTypeMapping typeMapping);
    private SqlExpression ApplyTypeMappingOnSqlUnary(SqlUnaryExpression sqlUnaryExpression, RelationalTypeMapping typeMapping);
    private SqlExpression ApplyTypeMappingOnSqlBinary(SqlBinaryExpression sqlBinaryExpression, RelationalTypeMapping typeMapping);
    private SqlExpression ApplyTypeMappingOnIn(InExpression inExpression);
    public virtual SqlBinaryExpression MakeBinary(ExpressionType operatorType, SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual SqlBinaryExpression Equal(SqlExpression left, SqlExpression right);
    public virtual SqlBinaryExpression NotEqual(SqlExpression left, SqlExpression right);
    public virtual SqlBinaryExpression GreaterThan(SqlExpression left, SqlExpression right);
    public virtual SqlBinaryExpression GreaterThanOrEqual(SqlExpression left, SqlExpression right);
    public virtual SqlBinaryExpression LessThan(SqlExpression left, SqlExpression right);
    public virtual SqlBinaryExpression LessThanOrEqual(SqlExpression left, SqlExpression right);
    public virtual SqlBinaryExpression AndAlso(SqlExpression left, SqlExpression right);
    public virtual SqlBinaryExpression OrElse(SqlExpression left, SqlExpression right);
    public virtual SqlBinaryExpression Add(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual SqlBinaryExpression Subtract(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual SqlBinaryExpression Multiply(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual SqlBinaryExpression Divide(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual SqlBinaryExpression Modulo(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual SqlBinaryExpression And(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual SqlBinaryExpression Or(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual SqlFunctionExpression Coalesce(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual SqlUnaryExpression MakeUnary(ExpressionType operatorType, SqlExpression operand, Type type, RelationalTypeMapping typeMapping);
    public virtual SqlUnaryExpression IsNull(SqlExpression operand);
    public virtual SqlUnaryExpression IsNotNull(SqlExpression operand);
    public virtual SqlUnaryExpression Convert(SqlExpression operand, Type type, RelationalTypeMapping typeMapping);
    public virtual SqlUnaryExpression Not(SqlExpression operand);
    public virtual SqlUnaryExpression Negate(SqlExpression operand);
    public virtual CaseExpression Case(SqlExpression operand, IReadOnlyList`1<CaseWhenClause> whenClauses, SqlExpression elseResult);
    public virtual CaseExpression Case(IReadOnlyList`1<CaseWhenClause> whenClauses, SqlExpression elseResult);
    public virtual SqlFunctionExpression Function(string name, IEnumerable`1<SqlExpression> arguments, bool nullable, IEnumerable`1<bool> argumentsPropagateNullability, Type returnType, RelationalTypeMapping typeMapping);
    public virtual SqlFunctionExpression Function(string schema, string name, IEnumerable`1<SqlExpression> arguments, bool nullable, IEnumerable`1<bool> argumentsPropagateNullability, Type returnType, RelationalTypeMapping typeMapping);
    public virtual SqlFunctionExpression Function(SqlExpression instance, string name, IEnumerable`1<SqlExpression> arguments, bool nullable, bool instancePropagatesNullability, IEnumerable`1<bool> argumentsPropagateNullability, Type returnType, RelationalTypeMapping typeMapping);
    public virtual SqlFunctionExpression NiladicFunction(string name, bool nullable, Type returnType, RelationalTypeMapping typeMapping);
    public virtual SqlFunctionExpression NiladicFunction(string schema, string name, bool nullable, Type returnType, RelationalTypeMapping typeMapping);
    public virtual SqlFunctionExpression NiladicFunction(SqlExpression instance, string name, bool nullable, bool instancePropagatesNullability, Type returnType, RelationalTypeMapping typeMapping);
    public virtual ExistsExpression Exists(SelectExpression subquery, bool negated);
    public virtual InExpression In(SqlExpression item, SqlExpression values, bool negated);
    public virtual InExpression In(SqlExpression item, SelectExpression subquery, bool negated);
    public virtual LikeExpression Like(SqlExpression match, SqlExpression pattern, SqlExpression escapeChar);
    public virtual SqlFragmentExpression Fragment(string sql);
    [NullableContextAttribute("2")]
public virtual SqlConstantExpression Constant(object value, RelationalTypeMapping typeMapping);
    public virtual SqlConstantExpression Constant(object value, Type type, RelationalTypeMapping typeMapping);
    public virtual SelectExpression Select(SqlExpression projection);
    public virtual SelectExpression Select(IEntityType entityType);
    public virtual SelectExpression Select(IEntityType entityType, TableExpressionBase tableExpressionBase);
    private void AddConditions(SelectExpression selectExpression, IEntityType entityType);
    private static EntityProjectionExpression GetMappedEntityProjectionExpression(SelectExpression selectExpression);
    private SqlExpression IsNotNull(IProperty property, EntityProjectionExpression entityProjection);
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <Case>b__38_4(Type t);
    [CompilerGeneratedAttribute]
internal static bool <AddConditions>g__HasSiblings|56_1(IEntityType entityType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressionFactoryDependencies : object {
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <TypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IRelationalTypeMappingSource TypeMappingSource { get; public set; }
    public IModel Model { get; public set; }
    [EntityFrameworkInternalAttribute]
public SqlExpressionFactoryDependencies(IModel model, IRelationalTypeMappingSource typeMappingSource);
    [CompilerGeneratedAttribute]
private SqlExpressionFactoryDependencies(SqlExpressionFactoryDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IRelationalTypeMappingSource get_TypeMappingSource();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeMappingSource(IRelationalTypeMappingSource value);
    [CompilerGeneratedAttribute]
public IModel get_Model();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Model(IModel value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SqlExpressionFactoryDependencies left, SqlExpressionFactoryDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SqlExpressionFactoryDependencies left, SqlExpressionFactoryDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(SqlExpressionFactoryDependencies other);
    [CompilerGeneratedAttribute]
public SqlExpressionFactoryDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.AtTimeZoneExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private SqlExpression <Operand>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <TimeZone>k__BackingField;
    public SqlExpression Operand { get; }
    public SqlExpression TimeZone { get; }
    public AtTimeZoneExpression(SqlExpression operand, SqlExpression timeZone, Type type, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Operand();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_TimeZone();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual AtTimeZoneExpression Update(SqlExpression operand, SqlExpression timeZone);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(AtTimeZoneExpression atTimeZoneExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression : SqlExpression {
    private List`1<CaseWhenClause> _whenClauses;
    [CompilerGeneratedAttribute]
private SqlExpression <Operand>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <ElseResult>k__BackingField;
    [NullableAttribute("2")]
public SqlExpression Operand { get; }
    public IReadOnlyList`1<CaseWhenClause> WhenClauses { get; }
    [NullableAttribute("2")]
public SqlExpression ElseResult { get; }
    public CaseExpression(SqlExpression operand, IReadOnlyList`1<CaseWhenClause> whenClauses, SqlExpression elseResult);
    public CaseExpression(IReadOnlyList`1<CaseWhenClause> whenClauses, SqlExpression elseResult);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual SqlExpression get_Operand();
    public virtual IReadOnlyList`1<CaseWhenClause> get_WhenClauses();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual SqlExpression get_ElseResult();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual CaseExpression Update(SqlExpression operand, IReadOnlyList`1<CaseWhenClause> whenClauses, SqlExpression elseResult);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(CaseExpression caseExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause : object {
    [CompilerGeneratedAttribute]
private SqlExpression <Test>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Result>k__BackingField;
    public SqlExpression Test { get; }
    public SqlExpression Result { get; }
    public CaseWhenClause(SqlExpression test, SqlExpression result);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Test();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Result();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(CaseWhenClause caseWhenClause);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private SqlExpression <Operand>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Collation>k__BackingField;
    public SqlExpression Operand { get; }
    public string Collation { get; }
    public CollateExpression(SqlExpression operand, string collation);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Operand();
    [CompilerGeneratedAttribute]
public virtual string get_Collation();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual CollateExpression Update(SqlExpression operand);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(CollateExpression collateExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerDisplay(),nq}")]
public abstract class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression : SqlExpression {
    public string Name { get; }
    public TableExpressionBase Table { get; }
    public string TableAlias { get; }
    public bool IsNullable { get; }
    protected ColumnExpression(Type type, RelationalTypeMapping typeMapping);
    public abstract virtual string get_Name();
    public abstract virtual TableExpressionBase get_Table();
    public abstract virtual string get_TableAlias();
    public abstract virtual bool get_IsNullable();
    public abstract virtual ColumnExpression MakeNullable();
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    private string DebuggerDisplay();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnValueSetter : object {
    [CompilerGeneratedAttribute]
private ColumnExpression <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Value>k__BackingField;
    public ColumnExpression Column { get; }
    public SqlExpression Value { get; }
    public ColumnValueSetter(ColumnExpression column, SqlExpression value);
    [CompilerGeneratedAttribute]
public virtual ColumnExpression get_Column();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Value();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(ColumnValueSetter columnValueSetter);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossApplyExpression : JoinExpressionBase {
    public CrossApplyExpression(TableExpressionBase table);
    private CrossApplyExpression(TableExpressionBase table, IEnumerable`1<IAnnotation> annotations);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual CrossApplyExpression Update(TableExpressionBase table);
    protected virtual TableExpressionBase CreateWithAnnotations(IEnumerable`1<IAnnotation> annotations);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(CrossApplyExpression crossApplyExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossJoinExpression : JoinExpressionBase {
    public CrossJoinExpression(TableExpressionBase table);
    private CrossJoinExpression(TableExpressionBase table, IEnumerable`1<IAnnotation> annotations);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual CrossJoinExpression Update(TableExpressionBase table);
    protected virtual TableExpressionBase CreateWithAnnotations(IEnumerable`1<IAnnotation> annotations);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(CrossJoinExpression crossJoinExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.DeleteExpression : Expression {
    [CompilerGeneratedAttribute]
private ISet`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private TableExpression <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectExpression <SelectExpression>k__BackingField;
    public ISet`1<string> Tags { get; }
    public TableExpression Table { get; }
    public SelectExpression SelectExpression { get; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public DeleteExpression(TableExpression table, SelectExpression selectExpression);
    private DeleteExpression(TableExpression table, SelectExpression selectExpression, ISet`1<string> tags);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public TableExpression get_Table();
    [CompilerGeneratedAttribute]
public SelectExpression get_SelectExpression();
    public DeleteExpression ApplyTags(ISet`1<string> tags);
    public virtual Type get_Type();
    public virtual ExpressionType get_NodeType();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public DeleteExpression Update(SelectExpression selectExpression);
    public sealed virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(DeleteExpression deleteExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private SqlExpression <Operand>k__BackingField;
    public SqlExpression Operand { get; }
    public DistinctExpression(SqlExpression operand);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Operand();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual DistinctExpression Update(SqlExpression operand);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(DistinctExpression distinctExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExceptExpression : SetOperationBase {
    public ExceptExpression(string alias, SelectExpression source1, SelectExpression source2, bool distinct);
    private ExceptExpression(string alias, SelectExpression source1, SelectExpression source2, bool distinct, IEnumerable`1<IAnnotation> annotations);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual ExceptExpression Update(SelectExpression source1, SelectExpression source2);
    protected virtual TableExpressionBase CreateWithAnnotations(IEnumerable`1<IAnnotation> annotations);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(ExceptExpression exceptExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private SelectExpression <Subquery>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNegated>k__BackingField;
    public SelectExpression Subquery { get; }
    public bool IsNegated { get; }
    public ExistsExpression(SelectExpression subquery, bool negated, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual SelectExpression get_Subquery();
    [CompilerGeneratedAttribute]
public virtual bool get_IsNegated();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual ExistsExpression Update(SelectExpression subquery);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(ExistsExpression existsExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression : TableExpressionBase {
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private ITableBase <Table>k__BackingField;
    [NullableAttribute("2")]
public string Alias { get; internal set; }
    public string Sql { get; }
    public Expression Arguments { get; }
    [NullableAttribute("2")]
public ITableBase Table { get; }
    public FromSqlExpression(ITableBase defaultTableBase, string sql, Expression arguments);
    public FromSqlExpression(string alias, string sql, Expression arguments);
    private FromSqlExpression(string alias, ITableBase tableBase, string sql, Expression arguments, IEnumerable`1<IAnnotation> annotations);
    [NullableContextAttribute("2")]
public virtual string get_Alias();
    [NullableContextAttribute("2")]
internal virtual void set_Alias(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Sql();
    [CompilerGeneratedAttribute]
public virtual Expression get_Arguments();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual ITableBase get_Table();
    public virtual FromSqlExpression Update(Expression arguments);
    protected virtual TableExpressionBase CreateWithAnnotations(IEnumerable`1<IAnnotation> annotations);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual TableExpressionBase Clone();
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(FromSqlExpression fromSqlExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.SqlExpressions.IClonableTableExpressionBase {
    public abstract virtual TableExpressionBase Clone();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private SqlExpression <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNegated>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectExpression <Subquery>k__BackingField;
    public SqlExpression Item { get; }
    public bool IsNegated { get; }
    [NullableAttribute("2")]
public SqlExpression Values { get; }
    [NullableAttribute("2")]
public SelectExpression Subquery { get; }
    public InExpression(SqlExpression item, SelectExpression subquery, bool negated, RelationalTypeMapping typeMapping);
    public InExpression(SqlExpression item, SqlExpression values, bool negated, RelationalTypeMapping typeMapping);
    private InExpression(SqlExpression item, SqlExpression values, SelectExpression subquery, bool negated, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Item();
    [CompilerGeneratedAttribute]
public virtual bool get_IsNegated();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual SqlExpression get_Values();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual SelectExpression get_Subquery();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual InExpression Negate();
    public virtual InExpression Update(SqlExpression item, SqlExpression values, SelectExpression subquery);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(InExpression inExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.InnerJoinExpression : PredicateJoinExpressionBase {
    public InnerJoinExpression(TableExpressionBase table, SqlExpression joinPredicate);
    private InnerJoinExpression(TableExpressionBase table, SqlExpression joinPredicate, IEnumerable`1<IAnnotation> annotations);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual InnerJoinExpression Update(TableExpressionBase table, SqlExpression joinPredicate);
    protected virtual TableExpressionBase CreateWithAnnotations(IEnumerable`1<IAnnotation> annotations);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(InnerJoinExpression innerJoinExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.IntersectExpression : SetOperationBase {
    public IntersectExpression(string alias, SelectExpression source1, SelectExpression source2, bool distinct);
    private IntersectExpression(string alias, SelectExpression source1, SelectExpression source2, bool distinct, IEnumerable`1<IAnnotation> annotations);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual IntersectExpression Update(SelectExpression source1, SelectExpression source2);
    protected virtual TableExpressionBase CreateWithAnnotations(IEnumerable`1<IAnnotation> annotations);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(IntersectExpression intersectExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.SqlExpressions.ITableBasedExpression {
    public ITableBase Table { get; }
    public abstract virtual ITableBase get_Table();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Query.SqlExpressions.JoinExpressionBase : TableExpressionBase {
    [CompilerGeneratedAttribute]
private TableExpressionBase <Table>k__BackingField;
    public TableExpressionBase Table { get; }
    protected JoinExpressionBase(TableExpressionBase table);
    protected JoinExpressionBase(TableExpressionBase table, IEnumerable`1<IAnnotation> annotations);
    [CompilerGeneratedAttribute]
public virtual TableExpressionBase get_Table();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(JoinExpressionBase joinExpressionBase);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.JsonScalarExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private ColumnExpression <JsonColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PathSegment> <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    public ColumnExpression JsonColumn { get; }
    public IReadOnlyList`1<PathSegment> Path { get; }
    public bool IsNullable { get; }
    public JsonScalarExpression(ColumnExpression jsonColumn, IProperty property, IReadOnlyList`1<PathSegment> path, bool nullable);
    internal JsonScalarExpression(ColumnExpression jsonColumn, IReadOnlyList`1<PathSegment> path, Type type, RelationalTypeMapping typeMapping, bool nullable);
    [CompilerGeneratedAttribute]
public virtual ColumnExpression get_JsonColumn();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<PathSegment> get_Path();
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual JsonScalarExpression Update(ColumnExpression jsonColumn);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.LeftJoinExpression : PredicateJoinExpressionBase {
    public LeftJoinExpression(TableExpressionBase table, SqlExpression joinPredicate);
    private LeftJoinExpression(TableExpressionBase table, SqlExpression joinPredicate, IEnumerable`1<IAnnotation> annotations);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual LeftJoinExpression Update(TableExpressionBase table, SqlExpression joinPredicate);
    protected virtual TableExpressionBase CreateWithAnnotations(IEnumerable`1<IAnnotation> annotations);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(LeftJoinExpression leftJoinExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private SqlExpression <Match>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <EscapeChar>k__BackingField;
    public SqlExpression Match { get; }
    public SqlExpression Pattern { get; }
    [NullableAttribute("2")]
public SqlExpression EscapeChar { get; }
    public LikeExpression(SqlExpression match, SqlExpression pattern, SqlExpression escapeChar, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Match();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Pattern();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual SqlExpression get_EscapeChar();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual LikeExpression Update(SqlExpression match, SqlExpression pattern, SqlExpression escapeChar);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(LikeExpression likeExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression : Expression {
    [CompilerGeneratedAttribute]
private SqlExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAscending>k__BackingField;
    public SqlExpression Expression { get; }
    public bool IsAscending { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public OrderingExpression(SqlExpression expression, bool ascending);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Expression();
    [CompilerGeneratedAttribute]
public virtual bool get_IsAscending();
    public sealed virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual OrderingExpression Update(SqlExpression expression);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(OrderingExpression orderingExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.OuterApplyExpression : JoinExpressionBase {
    public OuterApplyExpression(TableExpressionBase table);
    private OuterApplyExpression(TableExpressionBase table, IEnumerable`1<IAnnotation> annotations);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual OuterApplyExpression Update(TableExpressionBase table);
    protected virtual TableExpressionBase CreateWithAnnotations(IEnumerable`1<IAnnotation> annotations);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(OuterApplyExpression outerApplyExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Query.SqlExpressions.PredicateJoinExpressionBase : JoinExpressionBase {
    [CompilerGeneratedAttribute]
private SqlExpression <JoinPredicate>k__BackingField;
    public SqlExpression JoinPredicate { get; }
    protected PredicateJoinExpressionBase(TableExpressionBase table, SqlExpression joinPredicate);
    protected PredicateJoinExpressionBase(TableExpressionBase table, SqlExpression joinPredicate, IEnumerable`1<IAnnotation> annotations);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_JoinPredicate();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(PredicateJoinExpressionBase predicateJoinExpressionBase);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression : Expression {
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Expression>k__BackingField;
    public string Alias { get; }
    public SqlExpression Expression { get; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    internal ProjectionExpression(SqlExpression expression, string alias);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public SqlExpression get_Expression();
    public virtual Type get_Type();
    public virtual ExpressionType get_NodeType();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public ProjectionExpression Update(SqlExpression expression);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(ProjectionExpression projectionExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<SqlExpression> <Partitions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<OrderingExpression> <Orderings>k__BackingField;
    public IReadOnlyList`1<SqlExpression> Partitions { get; }
    public IReadOnlyList`1<OrderingExpression> Orderings { get; }
    public RowNumberExpression(IReadOnlyList`1<SqlExpression> partitions, IReadOnlyList`1<OrderingExpression> orderings, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<SqlExpression> get_Partitions();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<OrderingExpression> get_Orderings();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual RowNumberExpression Update(IReadOnlyList`1<SqlExpression> partitions, IReadOnlyList`1<OrderingExpression> orderings);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(RowNumberExpression rowNumberExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private SelectExpression <Subquery>k__BackingField;
    public SelectExpression Subquery { get; }
    public ScalarSubqueryExpression(SelectExpression subquery);
    private static SelectExpression Verify(SelectExpression selectExpression);
    [CompilerGeneratedAttribute]
public virtual SelectExpression get_Subquery();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual ScalarSubqueryExpression Update(SelectExpression subquery);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(ScalarSubqueryExpression scalarSubqueryExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression : TableExpressionBase {
    private static string DiscriminatorColumnAlias;
    private static string SqlQuerySingleColumnAlias;
    private static bool UseOldBehavior30273;
    private static bool UseOldBehavior31107;
    private static IdentifierComparer IdentifierComparerInstance;
    private static Dictionary`2<ExpressionType, ExpressionType> MirroredOperationMap;
    private List`1<ProjectionExpression> _projection;
    private List`1<TableExpressionBase> _tables;
    private List`1<TableReferenceExpression> _tableReferences;
    private List`1<SqlExpression> _groupBy;
    private List`1<OrderingExpression> _orderings;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<ColumnExpression, ValueComparer>> _identifier;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<ColumnExpression, ValueComparer>> _childIdentifiers;
    private List`1<int> _removableJoinTables;
    private Dictionary`2<TpcTablesExpression, ValueTuple`2<ColumnExpression, List`1<string>>> _tpcDiscriminatorValues;
    private bool _mutable;
    private HashSet`1<string> _usedAliases;
    private Dictionary`2<ProjectionMember, Expression> _projectionMapping;
    private List`1<Expression> _clientProjections;
    private List`1<string> _aliasForClientProjections;
    private CloningExpressionVisitor _cloningExpressionVisitor;
    private SortedDictionary`2<string, IAnnotation> _annotations;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<ColumnExpression, ValueComparer>> _preGroupByIdentifier;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDistinct>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Having>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Limit>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Offset>k__BackingField;
    public ISet`1<string> Tags { get; private set; }
    public bool IsDistinct { get; private set; }
    public IReadOnlyList`1<ProjectionExpression> Projection { get; }
    public IReadOnlyList`1<TableExpressionBase> Tables { get; }
    [NullableAttribute("2")]
public SqlExpression Predicate { get; private set; }
    public IReadOnlyList`1<SqlExpression> GroupBy { get; }
    [NullableAttribute("2")]
public SqlExpression Having { get; private set; }
    public IReadOnlyList`1<OrderingExpression> Orderings { get; }
    [NullableAttribute("2")]
public SqlExpression Limit { get; private set; }
    [NullableAttribute("2")]
public SqlExpression Offset { get; private set; }
    private SelectExpression(string alias, List`1<ProjectionExpression> projections, List`1<TableExpressionBase> tables, List`1<TableReferenceExpression> tableReferences, List`1<SqlExpression> groupBy, List`1<OrderingExpression> orderings, IEnumerable`1<IAnnotation> annotations);
    private SelectExpression(string alias);
    [NullableContextAttribute("2")]
internal SelectExpression(SqlExpression projection);
    internal SelectExpression(Type type, RelationalTypeMapping typeMapping, FromSqlExpression fromSqlExpression);
    internal SelectExpression(IEntityType entityType, ISqlExpressionFactory sqlExpressionFactory);
    internal SelectExpression(IEntityType entityType, TableExpressionBase tableExpressionBase);
    private static SelectExpression();
    private void AddJsonNavigationBindings(IEntityType entityType, EntityProjectionExpression entityProjection, Dictionary`2<IProperty, ColumnExpression> propertyExpressions, TableReferenceExpression tableReferenceExpression);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_Tags();
    [CompilerGeneratedAttribute]
private void set_Tags(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_IsDistinct();
    [CompilerGeneratedAttribute]
private void set_IsDistinct(bool value);
    public IReadOnlyList`1<ProjectionExpression> get_Projection();
    public IReadOnlyList`1<TableExpressionBase> get_Tables();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SqlExpression get_Predicate();
    [CompilerGeneratedAttribute]
private void set_Predicate(SqlExpression value);
    public IReadOnlyList`1<SqlExpression> get_GroupBy();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SqlExpression get_Having();
    [CompilerGeneratedAttribute]
private void set_Having(SqlExpression value);
    public IReadOnlyList`1<OrderingExpression> get_Orderings();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SqlExpression get_Limit();
    [CompilerGeneratedAttribute]
private void set_Limit(SqlExpression value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SqlExpression get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(SqlExpression value);
    public void ApplyTags(ISet`1<string> tags);
    public void ApplyDistinct();
    public void ApplyProjection();
    public Expression ApplyProjection(Expression shaperExpression, ResultCardinality resultCardinality, QuerySplittingBehavior querySplittingBehavior);
    public void ReplaceProjection(IReadOnlyDictionary`2<ProjectionMember, Expression> projectionMapping);
    public void ReplaceProjection(IReadOnlyList`1<Expression> clientProjections);
    public Expression GetProjection(ProjectionBindingExpression projectionBindingExpression);
    public int AddToProjection(SqlExpression sqlExpression);
    private int AddToProjection(SqlExpression sqlExpression, string alias, bool assignUniqueTableAlias);
    public void ApplyPredicate(SqlExpression sqlExpression);
    public void ApplyGrouping(Expression keySelector);
    public RelationalGroupByShaperExpression ApplyGrouping(Expression keySelector, Expression shaperExpression, ISqlExpressionFactory sqlExpressionFactory);
    private static void PopulateGroupByTerms(Expression keySelector, List`1<SqlExpression> groupByTerms, List`1<string> groupByAliases, string name);
    public void ApplyOrdering(OrderingExpression orderingExpression);
    public void AppendOrdering(OrderingExpression orderingExpression);
    private void AppendOrderingInternal(OrderingExpression orderingExpression);
    public void ReverseOrderings();
    public void ClearOrdering();
    public void ApplyLimit(SqlExpression sqlExpression);
    public void ApplyOffset(SqlExpression sqlExpression);
    public void ApplyExcept(SelectExpression source2, bool distinct);
    public void ApplyIntersect(SelectExpression source2, bool distinct);
    public void ApplyUnion(SelectExpression source2, bool distinct);
    private void ApplySetOperation(SetOperationType setOperationType, SelectExpression select2, bool distinct);
    public void ApplyDefaultIfEmpty(ISqlExpressionFactory sqlExpressionFactory);
    [EntityFrameworkInternalAttribute]
public EntityShaperExpression GenerateOwnedReferenceEntityProjectionExpression(EntityProjectionExpression principalEntityProjection, INavigation navigation, ISqlExpressionFactory sqlExpressionFactory);
    private Expression AddJoin(JoinType joinType, SelectExpression innerSelectExpression, Expression outerShaper, Expression innerShaper, SqlExpression joinPredicate);
    private void AddJoin(JoinType joinType, SelectExpression& innerSelectExpression, Boolean& innerPushdownOccurred, SqlExpression joinPredicate);
    public void AddInnerJoin(SelectExpression innerSelectExpression, SqlExpression joinPredicate);
    public void AddLeftJoin(SelectExpression innerSelectExpression, SqlExpression joinPredicate);
    public void AddCrossJoin(SelectExpression innerSelectExpression);
    public void AddCrossApply(SelectExpression innerSelectExpression);
    public void AddOuterApply(SelectExpression innerSelectExpression);
    public Expression AddInnerJoin(ShapedQueryExpression innerSource, SqlExpression joinPredicate, Expression outerShaper);
    public Expression AddLeftJoin(ShapedQueryExpression innerSource, SqlExpression joinPredicate, Expression outerShaper);
    public Expression AddCrossJoin(ShapedQueryExpression innerSource, Expression outerShaper);
    public Expression AddCrossApply(ShapedQueryExpression innerSource, Expression outerShaper);
    public Expression AddOuterApply(ShapedQueryExpression innerSource, Expression outerShaper);
    public void PushdownIntoSubquery();
    private SqlRemappingVisitor PushdownIntoSubqueryInternal();
    public bool IsNonComposedFromSql();
    public void PrepareForAggregate();
    [EntityFrameworkInternalAttribute]
public SelectExpression Clone();
    [EntityFrameworkInternalAttribute]
public SelectExpression Prune();
    private SelectExpression Prune(IReadOnlyCollection`1<string> referencedColumns);
    private Dictionary`2<ProjectionMember, int> ConvertProjectionMappingToClientProjections(Dictionary`2<ProjectionMember, Expression> projectionMapping, bool makeNullable);
    private static SqlExpression MakeNullable(SqlExpression expression, bool nullable);
    private static Expression MakeNullable(Expression expression, bool nullable);
    private static string GetAliasFromTableExpressionBase(TableExpressionBase tableExpressionBase);
    private static TableExpressionBase UnwrapJoinExpression(TableExpressionBase tableExpressionBase);
    private static IEnumerable`1<IProperty> GetAllPropertiesInHierarchy(IEntityType entityType);
    private static IEnumerable`1<INavigation> GetAllNavigationsInHierarchy(IEntityType entityType);
    private static ConcreteColumnExpression CreateColumnExpression(IProperty property, ITableBase table, TableReferenceExpression tableExpression, bool nullable);
    private static ConcreteColumnExpression CreateColumnExpression(IProperty property, IColumnBase columnBase, TableReferenceExpression tableExpression, bool nullable);
    private ConcreteColumnExpression GenerateOuterColumn(TableReferenceExpression tableReferenceExpression, SqlExpression projection, string alias, bool assignUniqueTableAlias);
    private bool ContainsTableReference(ColumnExpression column);
    private void AddTable(TableExpressionBase tableExpressionBase, TableReferenceExpression tableReferenceExpression);
    [EntityFrameworkInternalAttribute]
public SqlExpression AssignUniqueAliases(SqlExpression expression);
    private static string GenerateUniqueAlias(HashSet`1<string> usedAliases, string currentAlias);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public SelectExpression Update(IReadOnlyList`1<ProjectionExpression> projections, IReadOnlyList`1<TableExpressionBase> tables, SqlExpression predicate, IReadOnlyList`1<SqlExpression> groupBy, SqlExpression having, IReadOnlyList`1<OrderingExpression> orderings, SqlExpression limit, SqlExpression offset);
    protected virtual TableExpressionBase CreateWithAnnotations(IEnumerable`1<IAnnotation> annotations);
    public virtual TableExpressionBase AddAnnotation(string name, object value);
    public virtual IAnnotation FindAnnotation(string name);
    public virtual IEnumerable`1<IAnnotation> GetAnnotations();
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(SelectExpression selectExpression);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
internal static ITableBase <.ctor>g__GetTableBaseFiltered|27_1(IEntityType entityType, List`1<ITableBase> existingTables);
    [CompilerGeneratedAttribute]
private void <ApplyProjection>g__AddEntityProjection|64_0(EntityProjectionExpression entityProjectionExpression);
    [CompilerGeneratedAttribute]
private Expression <ApplyProjection>g__AddGroupByKeySelectorToProjection|65_8(SelectExpression selectExpression, List`1<Expression> clientProjectionList, Dictionary`2<SqlExpression, Expression> projectionBindingMap, Expression keySelector);
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<Expression, IReadOnlyList`1<ValueComparer>> <ApplyProjection>g__GetIdentifierAccessor|65_9(SelectExpression selectExpression, List`1<Expression> clientProjectionList, Dictionary`2<SqlExpression, Expression> projectionBindingMap, IEnumerable`1<ValueTuple`2<ColumnExpression, ValueComparer>> identifyingProjection);
    [CompilerGeneratedAttribute]
internal static void <ApplyProjection>g__UpdateLimit|65_5(SelectExpression selectExpression);
    [CompilerGeneratedAttribute]
internal static Expression <ApplyProjection>g__RemoveConvert|65_14(Expression expression);
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<Expression, IReadOnlyList`1<ValueComparer>> <ApplyProjection>g__GetIdentifierAccessor|65_16(SelectExpression selectExpression, List`1<Expression> clientProjectionList, IEnumerable`1<ValueTuple`2<ColumnExpression, ValueComparer>> identifyingProjection);
    [CompilerGeneratedAttribute]
internal static void <ApplyProjection>g__GetOrderingsFromInnerTable|65_6(TableExpressionBase tableExpressionBase, TableReferenceExpression tableReferenceExpression, List`1<OrderingExpression> orderings);
    [CompilerGeneratedAttribute]
private Expression <ApplyProjection>g__CopyProjectionToOuter|65_7(SelectExpression innerSelectExpression, Expression innerShaperExpression, <>c__DisplayClass65_0& );
    [CompilerGeneratedAttribute]
internal static Dictionary`2<JsonQueryExpression, JsonScalarExpression> <ApplyProjection>g__BuildJsonProjectionDeduplicationMap|65_0(IEnumerable`1<JsonQueryExpression> projections);
    [CompilerGeneratedAttribute]
private ConstantExpression <ApplyProjection>g__AddEntityProjection|65_1(EntityProjectionExpression entityProjectionExpression);
    [CompilerGeneratedAttribute]
private ConstantExpression <ApplyProjection>g__AddJsonProjection|65_2(JsonQueryExpression jsonQueryExpression, JsonScalarExpression jsonScalarToAdd);
    [CompilerGeneratedAttribute]
internal static IReadOnlyList`1<IProperty> <ApplyProjection>g__GetMappedKeyProperties|65_3(IKey key);
    [CompilerGeneratedAttribute]
internal static bool <ApplyProjection>g__JsonEntityContainedIn|65_4(JsonScalarExpression sourceExpression, JsonQueryExpression targetExpression);
    [CompilerGeneratedAttribute]
private bool <ApplyGrouping>b__72_1(ValueTuple`2<ColumnExpression, ValueComparer> e);
    [CompilerGeneratedAttribute]
private void <ApplySetOperation>g__HandleEntityProjection|86_4(ProjectionMember projectionMember, SelectExpression select1, EntityProjectionExpression projection1, SelectExpression select2, EntityProjectionExpression projection2, <>c__DisplayClass86_0& );
    [CompilerGeneratedAttribute]
private string <ApplySetOperation>g__GenerateUniqueColumnAlias|86_5(string baseAlias, <>c__DisplayClass86_0& );
    [CompilerGeneratedAttribute]
internal static bool <ApplySetOperation>g__IsNullableProjection|86_6(ProjectionExpression projectionExpression);
    [CompilerGeneratedAttribute]
internal static IReadOnlyDictionary`2<IProperty, ColumnExpression> <GenerateOwnedReferenceEntityProjectionExpression>g__GetPropertyExpressions|88_0(ISqlExpressionFactory sqlExpressionFactory, INavigation navigation, SelectExpression selectExpression, ColumnExpression identifyingColumn);
    [CompilerGeneratedAttribute]
internal static TableExpressionBase <GenerateOwnedReferenceEntityProjectionExpression>g__FindRootTableExpressionForColumn|88_1(TableExpressionBase table, string columnName);
    [CompilerGeneratedAttribute]
internal static void <AddJoin>g__GetPartitions|91_1(SelectExpression selectExpression, SqlExpression sqlExpression, List`1<SqlExpression> partitions);
    [CompilerGeneratedAttribute]
internal static SqlExpression <AddJoin>g__TryExtractJoinKey|91_2(SelectExpression outer, SelectExpression inner, bool allowNonEquality);
    [CompilerGeneratedAttribute]
internal static SqlExpression <AddJoin>g__TryExtractJoinKey|91_4(SelectExpression outer, SelectExpression inner, SqlExpression predicate, List`1<SqlExpression> outerColumnExpressions, bool allowNonEquality, SqlExpression& updatedPredicate);
    [CompilerGeneratedAttribute]
internal static SqlBinaryExpression <AddJoin>g__ValidateKeyComparison|91_5(SelectExpression outer, SelectExpression inner, SqlBinaryExpression sqlBinaryExpression, List`1<SqlExpression> outerColumnExpressions, bool allowNonEquality);
    [CompilerGeneratedAttribute]
internal static bool <AddJoin>g__IsContainedSql|91_6(SelectExpression selectExpression, SqlExpression sqlExpression);
    [CompilerGeneratedAttribute]
internal static bool <AddJoin>g__IsContainedCondition|91_7(SelectExpression selectExpression, SqlExpression condition);
    [CompilerGeneratedAttribute]
internal static void <AddJoin>g__PopulateInnerKeyColumns|91_8(IEnumerable`1<TableExpressionBase> tables, SqlExpression joinPredicate, List`1<ColumnExpression> resultColumns);
    [CompilerGeneratedAttribute]
internal static List`1<ColumnExpression> <AddJoin>g__ExtractColumnsFromProjectionMapping|91_9(IDictionary`2<ProjectionMember, Expression> projectionMapping);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static SqlExpression <AddJoin>g__CombineNonNullExpressions|91_10(SqlExpression left, SqlExpression right);
    [CompilerGeneratedAttribute]
internal static SqlExpression <AddJoin>g__RemoveRedundantNullChecks|91_11(SqlExpression predicate, List`1<SqlExpression> outerColumnExpressions);
    [CompilerGeneratedAttribute]
internal static EntityProjectionExpression <PushdownIntoSubqueryInternal>g__LiftEntityProjectionFromSubquery|103_0(EntityProjectionExpression entityProjection, <>c__DisplayClass103_0& );
    [CompilerGeneratedAttribute]
internal static JsonQueryExpression <PushdownIntoSubqueryInternal>g__LiftJsonQueryFromSubquery|103_1(JsonQueryExpression jsonQueryExpression, <>c__DisplayClass103_0& );
    [CompilerGeneratedAttribute]
internal static List`1<T> <VisitChildren>g__VisitList|123_0(List`1<T> list, bool inPlace, Boolean& changed, <>c__DisplayClass123_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase : TableExpressionBase {
    [CompilerGeneratedAttribute]
private bool <IsDistinct>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectExpression <Source1>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectExpression <Source2>k__BackingField;
    [NullableAttribute("2")]
public string Alias { get; internal set; }
    public bool IsDistinct { get; }
    public SelectExpression Source1 { get; }
    public SelectExpression Source2 { get; }
    protected SetOperationBase(string alias, SelectExpression source1, SelectExpression source2, bool distinct);
    protected SetOperationBase(string alias, SelectExpression source1, SelectExpression source2, bool distinct, IEnumerable`1<IAnnotation> annotations);
    [NullableContextAttribute("2")]
public virtual string get_Alias();
    [NullableContextAttribute("2")]
internal virtual void set_Alias(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsDistinct();
    [CompilerGeneratedAttribute]
public virtual SelectExpression get_Source1();
    [CompilerGeneratedAttribute]
public virtual SelectExpression get_Source2();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(SetOperationBase setOperationBase);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression : SqlExpression {
    private static ISet`1<ExpressionType> AllowedOperators;
    [CompilerGeneratedAttribute]
private ExpressionType <OperatorType>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Right>k__BackingField;
    public ExpressionType OperatorType { get; }
    public SqlExpression Left { get; }
    public SqlExpression Right { get; }
    public SqlBinaryExpression(ExpressionType operatorType, SqlExpression left, SqlExpression right, Type type, RelationalTypeMapping typeMapping);
    private static SqlBinaryExpression();
    internal static bool IsValidOperator(ExpressionType operatorType);
    [CompilerGeneratedAttribute]
public virtual ExpressionType get_OperatorType();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Left();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Right();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual SqlBinaryExpression Update(SqlExpression left, SqlExpression right);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(SqlBinaryExpression sqlBinaryExpression);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
internal static bool <Print>g__RequiresBrackets|14_0(SqlExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression : SqlExpression {
    private ConstantExpression _constantExpression;
    [NullableAttribute("2")]
public object Value { get; }
    public SqlConstantExpression(ConstantExpression constantExpression, RelationalTypeMapping typeMapping);
    [NullableContextAttribute("2")]
public virtual object get_Value();
    public virtual SqlExpression ApplyTypeMapping(RelationalTypeMapping typeMapping);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    private void Print(object value, ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(SqlConstantExpression sqlConstantExpression);
    private static bool ValueEquals(object value1, object value2);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression : Expression {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <TypeMapping>k__BackingField;
    public Type Type { get; }
    [NullableAttribute("2")]
public RelationalTypeMapping TypeMapping { get; }
    public ExpressionType NodeType { get; }
    protected SqlExpression(Type type, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual Type get_Type();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual RelationalTypeMapping get_TypeMapping();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public sealed virtual ExpressionType get_NodeType();
    protected abstract virtual void Print(ExpressionPrinter expressionPrinter);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(SqlExpression sqlExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    public string Sql { get; }
    public SqlFragmentExpression(string sql);
    [CompilerGeneratedAttribute]
public virtual string get_Sql();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(SqlFragmentExpression sqlFragmentExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNiladic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBuiltIn>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<SqlExpression> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <InstancePropagatesNullability>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<bool> <ArgumentsPropagateNullability>k__BackingField;
    public string Name { get; }
    [NullableAttribute("2")]
public string Schema { get; }
    [MemberNotNullWhenAttribute("False", "Mono.Cecil.CustomAttributeArgument[]")]
public bool IsNiladic { get; }
    public bool IsBuiltIn { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<SqlExpression> Arguments { get; }
    [NullableAttribute("2")]
public SqlExpression Instance { get; }
    public bool IsNullable { get; }
    public Nullable`1<bool> InstancePropagatesNullability { get; }
    [NullableAttribute("2")]
public IReadOnlyList`1<bool> ArgumentsPropagateNullability { get; }
    public SqlFunctionExpression(string functionName, bool nullable, Type type, RelationalTypeMapping typeMapping);
    public SqlFunctionExpression(string schema, string functionName, bool nullable, Type type, RelationalTypeMapping typeMapping);
    public SqlFunctionExpression(SqlExpression instance, string functionName, bool nullable, bool instancePropagatesNullability, Type type, RelationalTypeMapping typeMapping);
    private SqlFunctionExpression(SqlExpression instance, string schema, string name, bool nullable, Nullable`1<bool> instancePropagatesNullability, bool builtIn, Type type, RelationalTypeMapping typeMapping);
    public SqlFunctionExpression(string functionName, IEnumerable`1<SqlExpression> arguments, bool nullable, IEnumerable`1<bool> argumentsPropagateNullability, Type type, RelationalTypeMapping typeMapping);
    public SqlFunctionExpression(string schema, string functionName, IEnumerable`1<SqlExpression> arguments, bool nullable, IEnumerable`1<bool> argumentsPropagateNullability, Type type, RelationalTypeMapping typeMapping);
    public SqlFunctionExpression(SqlExpression instance, string functionName, IEnumerable`1<SqlExpression> arguments, bool nullable, bool instancePropagatesNullability, IEnumerable`1<bool> argumentsPropagateNullability, Type type, RelationalTypeMapping typeMapping);
    private SqlFunctionExpression(SqlExpression instance, string schema, string name, IEnumerable`1<SqlExpression> arguments, bool nullable, Nullable`1<bool> instancePropagatesNullability, IEnumerable`1<bool> argumentsPropagateNullability, bool builtIn, Type type, RelationalTypeMapping typeMapping);
    private SqlFunctionExpression(SqlExpression instance, string schema, string name, bool niladic, IEnumerable`1<SqlExpression> arguments, bool nullable, Nullable`1<bool> instancePropagatesNullability, IEnumerable`1<bool> argumentsPropagateNullability, bool builtIn, Type type, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    [CompilerGeneratedAttribute]
[MemberNotNullWhenAttribute("False", "Mono.Cecil.CustomAttributeArgument[]")]
public virtual bool get_IsNiladic();
    [CompilerGeneratedAttribute]
public virtual bool get_IsBuiltIn();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<SqlExpression> get_Arguments();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual SqlExpression get_Instance();
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_InstancePropagatesNullability();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<bool> get_ArgumentsPropagateNullability();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual SqlFunctionExpression ApplyTypeMapping(RelationalTypeMapping typeMapping);
    public virtual SqlFunctionExpression Update(SqlExpression instance, IReadOnlyList`1<SqlExpression> arguments);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(SqlFunctionExpression sqlFunctionExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression : SqlExpression {
    private ParameterExpression _parameterExpression;
    private string _name;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    public string Name { get; }
    public bool IsNullable { get; }
    internal SqlParameterExpression(ParameterExpression parameterExpression, RelationalTypeMapping typeMapping);
    public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_IsNullable();
    public SqlExpression ApplyTypeMapping(RelationalTypeMapping typeMapping);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(SqlParameterExpression sqlParameterExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression : SqlExpression {
    private static ISet`1<ExpressionType> AllowedOperators;
    [CompilerGeneratedAttribute]
private ExpressionType <OperatorType>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Operand>k__BackingField;
    public ExpressionType OperatorType { get; }
    public SqlExpression Operand { get; }
    public SqlUnaryExpression(ExpressionType operatorType, SqlExpression operand, Type type, RelationalTypeMapping typeMapping);
    private static SqlUnaryExpression();
    internal static bool IsValidOperator(ExpressionType operatorType);
    [CompilerGeneratedAttribute]
public virtual ExpressionType get_OperatorType();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Operand();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual SqlUnaryExpression Update(SqlExpression operand);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(SqlUnaryExpression sqlUnaryExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression : TableExpressionBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private ITableBase <Table>k__BackingField;
    [NullableAttribute("2")]
public string Alias { get; internal set; }
    public string Name { get; }
    [NullableAttribute("2")]
public string Schema { get; }
    public ITableBase Table { get; }
    private ITableBase Microsoft.EntityFrameworkCore.Query.SqlExpressions.ITableBasedExpression.Table { get; }
    internal TableExpression(ITableBase table);
    private TableExpression(ITableBase table, IEnumerable`1<IAnnotation> annotations);
    [NullableContextAttribute("2")]
public virtual string get_Alias();
    [NullableContextAttribute("2")]
internal virtual void set_Alias(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public ITableBase get_Table();
    protected virtual TableExpressionBase CreateWithAnnotations(IEnumerable`1<IAnnotation> annotations);
    private sealed virtual override ITableBase Microsoft.EntityFrameworkCore.Query.SqlExpressions.ITableBasedExpression.get_Table();
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    public sealed virtual TableExpressionBase Clone();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase : Expression {
    private IReadOnlyDictionary`2<string, IAnnotation> _annotations;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [NullableAttribute("2")]
public string Alias { get; internal set; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    [NullableContextAttribute("2")]
protected TableExpressionBase(string alias);
    [NullableContextAttribute("2")]
protected TableExpressionBase(string alias, IEnumerable`1<IAnnotation> annotations);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Alias();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal virtual void set_Alias(string value);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual Type get_Type();
    public sealed virtual ExpressionType get_NodeType();
    protected abstract virtual void Print(ExpressionPrinter expressionPrinter);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(ExpressionPrinter expressionPrinter);
    protected virtual void PrintAnnotations(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(TableExpressionBase tableExpressionBase);
    public virtual int GetHashCode();
    public virtual TableExpressionBase AddAnnotation(string name, object value);
    protected abstract virtual TableExpressionBase CreateWithAnnotations(IEnumerable`1<IAnnotation> annotations);
    public virtual IAnnotation FindAnnotation(string name);
    public virtual IEnumerable`1<IAnnotation> GetAnnotations();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression : TableExpressionBase {
    [CompilerGeneratedAttribute]
private IStoreFunction <StoreFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<SqlExpression> <Arguments>k__BackingField;
    [NullableAttribute("2")]
public string Alias { get; internal set; }
    public IStoreFunction StoreFunction { get; }
    public IReadOnlyList`1<SqlExpression> Arguments { get; }
    private ITableBase Microsoft.EntityFrameworkCore.Query.SqlExpressions.ITableBasedExpression.Table { get; }
    public TableValuedFunctionExpression(IStoreFunction storeFunction, IReadOnlyList`1<SqlExpression> arguments);
    private TableValuedFunctionExpression(string alias, IStoreFunction storeFunction, IReadOnlyList`1<SqlExpression> arguments, IEnumerable`1<IAnnotation> annotations);
    [NullableContextAttribute("2")]
public virtual string get_Alias();
    [NullableContextAttribute("2")]
internal virtual void set_Alias(string value);
    [CompilerGeneratedAttribute]
public virtual IStoreFunction get_StoreFunction();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<SqlExpression> get_Arguments();
    private sealed virtual override ITableBase Microsoft.EntityFrameworkCore.Query.SqlExpressions.ITableBasedExpression.get_Table();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual TableValuedFunctionExpression Update(IReadOnlyList`1<SqlExpression> arguments);
    protected virtual TableExpressionBase CreateWithAnnotations(IEnumerable`1<IAnnotation> annotations);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(TableValuedFunctionExpression tableValuedFunctionExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.UnionExpression : SetOperationBase {
    public UnionExpression(string alias, SelectExpression source1, SelectExpression source2, bool distinct);
    private UnionExpression(string alias, SelectExpression source1, SelectExpression source2, bool distinct, IEnumerable`1<IAnnotation> annotations);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual UnionExpression Update(SelectExpression source1, SelectExpression source2);
    protected virtual TableExpressionBase CreateWithAnnotations(IEnumerable`1<IAnnotation> annotations);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(UnionExpression unionExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlExpressions.UpdateExpression : Expression {
    [CompilerGeneratedAttribute]
private ISet`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private TableExpression <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectExpression <SelectExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ColumnValueSetter> <ColumnValueSetters>k__BackingField;
    public ISet`1<string> Tags { get; }
    public TableExpression Table { get; }
    public SelectExpression SelectExpression { get; }
    public IReadOnlyList`1<ColumnValueSetter> ColumnValueSetters { get; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public UpdateExpression(TableExpression table, SelectExpression selectExpression, IReadOnlyList`1<ColumnValueSetter> columnValueSetters);
    private UpdateExpression(TableExpression table, SelectExpression selectExpression, IReadOnlyList`1<ColumnValueSetter> columnValueSetters, ISet`1<string> tags);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public TableExpression get_Table();
    [CompilerGeneratedAttribute]
public SelectExpression get_SelectExpression();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ColumnValueSetter> get_ColumnValueSetters();
    public UpdateExpression ApplyTags(ISet`1<string> tags);
    public virtual Type get_Type();
    public virtual ExpressionType get_NodeType();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public UpdateExpression Update(SelectExpression selectExpression, IReadOnlyList`1<ColumnValueSetter> columnValueSetters);
    public sealed virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(UpdateExpression updateExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor : ExpressionVisitor {
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected abstract virtual Expression VisitAtTimeZone(AtTimeZoneExpression atTimeZoneExpression);
    protected abstract virtual Expression VisitCase(CaseExpression caseExpression);
    protected abstract virtual Expression VisitCollate(CollateExpression collateExpression);
    protected abstract virtual Expression VisitColumn(ColumnExpression columnExpression);
    protected abstract virtual Expression VisitCrossApply(CrossApplyExpression crossApplyExpression);
    protected abstract virtual Expression VisitCrossJoin(CrossJoinExpression crossJoinExpression);
    protected abstract virtual Expression VisitDelete(DeleteExpression deleteExpression);
    protected abstract virtual Expression VisitDistinct(DistinctExpression distinctExpression);
    protected abstract virtual Expression VisitExcept(ExceptExpression exceptExpression);
    protected abstract virtual Expression VisitExists(ExistsExpression existsExpression);
    protected abstract virtual Expression VisitFromSql(FromSqlExpression fromSqlExpression);
    protected abstract virtual Expression VisitIn(InExpression inExpression);
    protected abstract virtual Expression VisitIntersect(IntersectExpression intersectExpression);
    protected abstract virtual Expression VisitLike(LikeExpression likeExpression);
    protected abstract virtual Expression VisitInnerJoin(InnerJoinExpression innerJoinExpression);
    protected abstract virtual Expression VisitLeftJoin(LeftJoinExpression leftJoinExpression);
    protected abstract virtual Expression VisitOrdering(OrderingExpression orderingExpression);
    protected abstract virtual Expression VisitOuterApply(OuterApplyExpression outerApplyExpression);
    protected abstract virtual Expression VisitProjection(ProjectionExpression projectionExpression);
    protected abstract virtual Expression VisitTableValuedFunction(TableValuedFunctionExpression tableValuedFunctionExpression);
    protected abstract virtual Expression VisitRowNumber(RowNumberExpression rowNumberExpression);
    protected abstract virtual Expression VisitScalarSubquery(ScalarSubqueryExpression scalarSubqueryExpression);
    protected abstract virtual Expression VisitSelect(SelectExpression selectExpression);
    protected abstract virtual Expression VisitSqlBinary(SqlBinaryExpression sqlBinaryExpression);
    protected abstract virtual Expression VisitSqlConstant(SqlConstantExpression sqlConstantExpression);
    protected abstract virtual Expression VisitSqlFragment(SqlFragmentExpression sqlFragmentExpression);
    protected abstract virtual Expression VisitSqlFunction(SqlFunctionExpression sqlFunctionExpression);
    protected abstract virtual Expression VisitSqlParameter(SqlParameterExpression sqlParameterExpression);
    protected abstract virtual Expression VisitSqlUnary(SqlUnaryExpression sqlUnaryExpression);
    protected abstract virtual Expression VisitTable(TableExpression tableExpression);
    protected abstract virtual Expression VisitUnion(UnionExpression unionExpression);
    protected abstract virtual Expression VisitUpdate(UpdateExpression updateExpression);
    protected abstract virtual Expression VisitJsonScalar(JsonScalarExpression jsonScalarExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor : object {
    private List`1<ColumnExpression> _nonNullableColumns;
    private List`1<ColumnExpression> _nullValueColumns;
    private ISqlExpressionFactory _sqlExpressionFactory;
    private bool _canCache;
    [CompilerGeneratedAttribute]
private RelationalParameterBasedSqlProcessorDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseRelationalNulls>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <ParameterValues>k__BackingField;
    protected RelationalParameterBasedSqlProcessorDependencies Dependencies { get; }
    protected bool UseRelationalNulls { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected IReadOnlyDictionary`2<string, object> ParameterValues { get; private set; }
    public SqlNullabilityProcessor(RelationalParameterBasedSqlProcessorDependencies dependencies, bool useRelationalNulls);
    [CompilerGeneratedAttribute]
protected virtual RelationalParameterBasedSqlProcessorDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual bool get_UseRelationalNulls();
    [CompilerGeneratedAttribute]
protected virtual IReadOnlyDictionary`2<string, object> get_ParameterValues();
    [CompilerGeneratedAttribute]
private void set_ParameterValues(IReadOnlyDictionary`2<string, object> value);
    public virtual Expression Process(Expression queryExpression, IReadOnlyDictionary`2<string, object> parameterValues, Boolean& canCache);
    private UpdateExpression VisitUpdate(UpdateExpression updateExpression);
    protected virtual void DoNotCache();
    protected virtual void AddNonNullableColumn(ColumnExpression columnExpression);
    protected virtual TableExpressionBase Visit(TableExpressionBase tableExpressionBase);
    protected virtual SelectExpression Visit(SelectExpression selectExpression);
    [NullableContextAttribute("2")]
protected virtual SqlExpression Visit(SqlExpression sqlExpression, Boolean& nullable);
    [NullableContextAttribute("2")]
protected virtual SqlExpression Visit(SqlExpression sqlExpression, bool allowOptimizedExpansion, Boolean& nullable);
    private SqlExpression Visit(SqlExpression sqlExpression, bool allowOptimizedExpansion, bool preserveColumnNullabilityInformation, Boolean& nullable);
    protected virtual SqlExpression VisitCustomSqlExpression(SqlExpression sqlExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitAtTimeZone(AtTimeZoneExpression atTimeZoneExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitCase(CaseExpression caseExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitCollate(CollateExpression collateExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitColumn(ColumnExpression columnExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitDistinct(DistinctExpression distinctExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitExists(ExistsExpression existsExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitIn(InExpression inExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitLike(LikeExpression likeExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitRowNumber(RowNumberExpression rowNumberExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitScalarSubquery(ScalarSubqueryExpression scalarSubqueryExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitSqlBinary(SqlBinaryExpression sqlBinaryExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitSqlConstant(SqlConstantExpression sqlConstantExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitSqlFragment(SqlFragmentExpression sqlFragmentExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitSqlFunction(SqlFunctionExpression sqlFunctionExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitSqlParameter(SqlParameterExpression sqlParameterExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitSqlUnary(SqlUnaryExpression sqlUnaryExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitJsonScalar(JsonScalarExpression jsonScalarExpression, bool allowOptimizedExpansion, Boolean& nullable);
    private static Nullable`1<bool> TryGetBoolConstantValue(SqlExpression expression);
    private void RestoreNonNullableColumnsList(int counter);
    private void RestoreNullValueColumnsList(int counter);
    private SqlExpression ProcessJoinPredicate(SqlExpression predicate);
    private SqlExpression OptimizeComparison(SqlBinaryExpression sqlBinaryExpression, SqlExpression left, SqlExpression right, bool leftNullable, bool rightNullable, Boolean& nullable);
    private SqlExpression RewriteNullSemantics(SqlBinaryExpression sqlBinaryExpression, SqlExpression left, SqlExpression right, bool leftNullable, bool rightNullable, bool optimize, Boolean& nullable);
    private SqlExpression SimplifyLogicalSqlBinaryExpression(SqlBinaryExpression sqlBinaryExpression);
    private SqlExpression OptimizeNonNullableNotExpression(SqlUnaryExpression sqlUnaryExpression);
    private SqlExpression ProcessNullNotNull(SqlUnaryExpression sqlUnaryExpression, bool operandNullable);
    private static bool IsLogicalNot(SqlUnaryExpression sqlUnaryExpression);
    private SqlExpression ExpandNullableEqualNullable(SqlExpression left, SqlExpression right, SqlExpression leftIsNull, SqlExpression leftIsNotNull, SqlExpression rightIsNull, SqlExpression rightIsNotNull);
    private SqlExpression ExpandNegatedNullableEqualNullable(SqlExpression left, SqlExpression right, SqlExpression leftIsNull, SqlExpression leftIsNotNull, SqlExpression rightIsNull, SqlExpression rightIsNotNull);
    private SqlExpression ExpandNullableEqualNonNullable(SqlExpression left, SqlExpression right, SqlExpression leftIsNotNull);
    private SqlExpression ExpandNegatedNullableEqualNonNullable(SqlExpression left, SqlExpression right, SqlExpression leftIsNotNull);
    private SqlExpression ExpandNullableNotEqualNullable(SqlExpression left, SqlExpression right, SqlExpression leftIsNull, SqlExpression leftIsNotNull, SqlExpression rightIsNull, SqlExpression rightIsNotNull);
    private SqlExpression ExpandNegatedNullableNotEqualNullable(SqlExpression left, SqlExpression right, SqlExpression leftIsNull, SqlExpression leftIsNotNull, SqlExpression rightIsNull, SqlExpression rightIsNotNull);
    private SqlExpression ExpandNullableNotEqualNonNullable(SqlExpression left, SqlExpression right, SqlExpression leftIsNull);
    private SqlExpression ExpandNegatedNullableNotEqualNonNullable(SqlExpression left, SqlExpression right, SqlExpression leftIsNull);
    [CompilerGeneratedAttribute]
private ValueTuple`3<SqlConstantExpression, List`1<object>, bool> <VisitIn>g__ProcessInExpressionValues|31_0(SqlExpression valuesExpression, bool extractNullValues);
    [CompilerGeneratedAttribute]
private SqlExpression <VisitIn>g__SimplifyInExpression|31_1(InExpression inExpression, SqlConstantExpression inValuesExpression, List`1<object> inValuesList);
    [CompilerGeneratedAttribute]
private SqlExpression <VisitSqlBinary>g__AddNullConcatenationProtection|35_0(SqlExpression argument, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
internal static bool <OptimizeNonNullableNotExpression>g__TryNegate|49_0(ExpressionType expressionType, ExpressionType& result);
}
public enum Microsoft.EntityFrameworkCore.QuerySplittingBehavior : Enum {
    public int value__;
    public static QuerySplittingBehavior SingleQuery;
    public static QuerySplittingBehavior SplitQuery;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions : object {
    [ExtensionAttribute]
public static void Migrate(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetMigrations(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetAppliedMigrations(DatabaseFacade databaseFacade);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions/<GetAppliedMigrationsAsync>d__3")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<string>> GetAppliedMigrationsAsync(DatabaseFacade databaseFacade, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetPendingMigrations(DatabaseFacade databaseFacade);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions/<GetPendingMigrationsAsync>d__5")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<string>> GetPendingMigrationsAsync(DatabaseFacade databaseFacade, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task MigrateAsync(DatabaseFacade databaseFacade, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static int ExecuteSqlRaw(DatabaseFacade databaseFacade, string sql, Object[] parameters);
    [ExtensionAttribute]
public static int ExecuteSqlInterpolated(DatabaseFacade databaseFacade, FormattableString sql);
    [ExtensionAttribute]
public static int ExecuteSql(DatabaseFacade databaseFacade, FormattableString sql);
    [ExtensionAttribute]
public static int ExecuteSqlRaw(DatabaseFacade databaseFacade, string sql, IEnumerable`1<object> parameters);
    [ExtensionAttribute]
[StringFormatMethodAttribute("sql")]
public static IQueryable`1<TResult> SqlQueryRaw(DatabaseFacade databaseFacade, string sql, Object[] parameters);
    [ExtensionAttribute]
public static IQueryable`1<TResult> SqlQuery(DatabaseFacade databaseFacade, FormattableString sql);
    [ExtensionAttribute]
public static Task`1<int> ExecuteSqlInterpolatedAsync(DatabaseFacade databaseFacade, FormattableString sql, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ExecuteSqlAsync(DatabaseFacade databaseFacade, FormattableString sql, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ExecuteSqlRawAsync(DatabaseFacade databaseFacade, string sql, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ExecuteSqlRawAsync(DatabaseFacade databaseFacade, string sql, Object[] parameters);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions/<ExecuteSqlRawAsync>d__17")]
[ExtensionAttribute]
public static Task`1<int> ExecuteSqlRawAsync(DatabaseFacade databaseFacade, string sql, IEnumerable`1<object> parameters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static DbConnection GetDbConnection(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
public static void SetDbConnection(DatabaseFacade databaseFacade, DbConnection connection);
    [ExtensionAttribute]
public static string GetConnectionString(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
public static void SetConnectionString(DatabaseFacade databaseFacade, string connectionString);
    [ExtensionAttribute]
public static void OpenConnection(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
public static Task OpenConnectionAsync(DatabaseFacade databaseFacade, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void CloseConnection(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
public static Task CloseConnectionAsync(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
public static IDbContextTransaction BeginTransaction(DatabaseFacade databaseFacade, IsolationLevel isolationLevel);
    [ExtensionAttribute]
public static Task`1<IDbContextTransaction> BeginTransactionAsync(DatabaseFacade databaseFacade, IsolationLevel isolationLevel, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IDbContextTransaction UseTransaction(DatabaseFacade databaseFacade, DbTransaction transaction);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IDbContextTransaction UseTransaction(DatabaseFacade databaseFacade, DbTransaction transaction, Guid transactionId);
    [ExtensionAttribute]
public static Task`1<IDbContextTransaction> UseTransactionAsync(DatabaseFacade databaseFacade, DbTransaction transaction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IDbContextTransaction> UseTransactionAsync(DatabaseFacade databaseFacade, DbTransaction transaction, Guid transactionId, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SetCommandTimeout(DatabaseFacade databaseFacade, Nullable`1<int> timeout);
    [ExtensionAttribute]
public static void SetCommandTimeout(DatabaseFacade databaseFacade, TimeSpan timeout);
    [ExtensionAttribute]
public static Nullable`1<int> GetCommandTimeout(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
public static string GenerateCreateScript(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
public static bool IsRelational(DatabaseFacade databaseFacade);
    private static IRelationalDatabaseFacadeDependencies GetFacadeDependencies(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
private static TService GetRelationalService(IInfrastructure`1<IServiceProvider> databaseFacade);
    [ExtensionAttribute]
private static IDbContextTransactionManager GetTransactionManager(DatabaseFacade databaseFacade);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalDbFunctionsExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static TProperty Collate(DbFunctions _, TProperty operand, string collation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions : object {
    [ExtensionAttribute]
public static EntityTypeBuilder UseTpcMappingStrategy(EntityTypeBuilder entityTypeBuilder);
    [ExtensionAttribute]
public static EntityTypeBuilder UseTphMappingStrategy(EntityTypeBuilder entityTypeBuilder);
    [ExtensionAttribute]
public static EntityTypeBuilder UseTptMappingStrategy(EntityTypeBuilder entityTypeBuilder);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> UseTpcMappingStrategy(EntityTypeBuilder`1<TEntity> entityTypeBuilder);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> UseTphMappingStrategy(EntityTypeBuilder`1<TEntity> entityTypeBuilder);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> UseTptMappingStrategy(EntityTypeBuilder`1<TEntity> entityTypeBuilder);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionEntityTypeBuilder UseMappingStrategy(IConventionEntityTypeBuilder entityTypeBuilder, string strategy, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetMappingStrategy(IConventionEntityTypeBuilder entityTypeBuilder, string strategy, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionEntityTypeBuilder ExcludeTableFromMigrations(IConventionEntityTypeBuilder entityTypeBuilder, Nullable`1<bool> excludedFromMigrations, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanExcludeTableFromMigrations(IConventionEntityTypeBuilder entityTypeBuilder, Nullable`1<bool> excludedFromMigrations, bool fromDataAnnotation);
    [ExtensionAttribute]
public static EntityTypeBuilder ToSqlQuery(EntityTypeBuilder entityTypeBuilder, string query);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> ToSqlQuery(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string query);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionEntityTypeBuilder ToSqlQuery(IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetSqlQuery(IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static EntityTypeBuilder ToFunction(EntityTypeBuilder entityTypeBuilder, string name);
    [ExtensionAttribute]
public static EntityTypeBuilder ToFunction(EntityTypeBuilder entityTypeBuilder, MethodInfo function);
    [ExtensionAttribute]
public static EntityTypeBuilder ToFunction(EntityTypeBuilder entityTypeBuilder, string name, Action`1<TableValuedFunctionBuilder> configureFunction);
    [ExtensionAttribute]
public static EntityTypeBuilder ToFunction(EntityTypeBuilder entityTypeBuilder, MethodInfo function, Action`1<TableValuedFunctionBuilder> configureFunction);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> ToFunction(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> ToFunction(EntityTypeBuilder`1<TEntity> entityTypeBuilder, MethodInfo function);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> ToFunction(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, Action`1<TableValuedFunctionBuilder`1<TEntity>> configureFunction);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> ToFunction(EntityTypeBuilder`1<TEntity> entityTypeBuilder, MethodInfo function, Action`1<TableValuedFunctionBuilder`1<TEntity>> configureFunction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder ToFunction(OwnedNavigationBuilder ownedNavigationBuilder, string name);
    [ExtensionAttribute]
public static OwnedNavigationBuilder ToFunction(OwnedNavigationBuilder ownedNavigationBuilder, MethodInfo function);
    [ExtensionAttribute]
public static OwnedNavigationBuilder ToFunction(OwnedNavigationBuilder ownedNavigationBuilder, string name, Action`1<OwnedNavigationTableValuedFunctionBuilder> configureFunction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder ToFunction(OwnedNavigationBuilder ownedNavigationBuilder, MethodInfo function, Action`1<OwnedNavigationTableValuedFunctionBuilder> configureFunction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ToFunction(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, string name);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ToFunction(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, MethodInfo function);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ToFunction(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, string name, Action`1<OwnedNavigationTableValuedFunctionBuilder`2<TOwnerEntity, TDependentEntity>> configureFunction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ToFunction(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, MethodInfo function, Action`1<OwnedNavigationTableValuedFunctionBuilder`2<TOwnerEntity, TDependentEntity>> configureFunction);
    private static IMutableDbFunction ToFunction(string name, IMutableEntityType entityType);
    private static IMutableDbFunction ToFunction(MethodInfo method, IMutableEntityType entityType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionEntityTypeBuilder ToFunction(IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionEntityTypeBuilder ToFunction(IConventionEntityTypeBuilder entityTypeBuilder, MethodInfo function, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetFunction(IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetFunction(IConventionEntityTypeBuilder entityTypeBuilder, MethodInfo function, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Configure this using ToTable(t => t.HasCheckConstraint()) instead.")]
public static EntityTypeBuilder HasCheckConstraint(EntityTypeBuilder entityTypeBuilder, string name, string sql);
    [ExtensionAttribute]
[ObsoleteAttribute("Configure this using ToTable(t => t.HasCheckConstraint()) instead.")]
public static EntityTypeBuilder HasCheckConstraint(EntityTypeBuilder entityTypeBuilder, string name, string sql, Action`1<CheckConstraintBuilder> buildAction);
    [ExtensionAttribute]
[ObsoleteAttribute("Configure this using ToTable(t => t.HasCheckConstraint()) instead.")]
public static EntityTypeBuilder`1<TEntity> HasCheckConstraint(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, string sql);
    [ExtensionAttribute]
[ObsoleteAttribute("Configure this using ToTable(t => t.HasCheckConstraint()) instead.")]
public static EntityTypeBuilder`1<TEntity> HasCheckConstraint(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, string sql, Action`1<CheckConstraintBuilder> buildAction);
    [ExtensionAttribute]
[ObsoleteAttribute("Configure this using ToTable(t => t.HasCheckConstraint()) instead.")]
public static OwnedNavigationBuilder HasCheckConstraint(OwnedNavigationBuilder ownedNavigationBuilder, string name, string sql);
    [ExtensionAttribute]
[ObsoleteAttribute("Configure this using ToTable(t => t.HasCheckConstraint()) instead.")]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> HasCheckConstraint(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, string name, string sql);
    [ExtensionAttribute]
[ObsoleteAttribute("Configure this using ToTable(t => t.HasCheckConstraint()) instead.")]
public static OwnedNavigationBuilder HasCheckConstraint(OwnedNavigationBuilder ownedNavigationBuilder, string name, string sql, Action`1<CheckConstraintBuilder> buildAction);
    [ExtensionAttribute]
[ObsoleteAttribute("Configure this using ToTable(t => t.HasCheckConstraint()) instead.")]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> HasCheckConstraint(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, string name, string sql, Action`1<CheckConstraintBuilder> buildAction);
    [ExtensionAttribute]
public static IConventionCheckConstraintBuilder HasCheckConstraint(IConventionEntityTypeBuilder entityTypeBuilder, string name, string sql, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanHaveCheckConstraint(IConventionEntityTypeBuilder entityTypeBuilder, string name, string sql, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Configure this using ToTable(t => t.HasComment()) instead.")]
public static EntityTypeBuilder HasComment(EntityTypeBuilder entityTypeBuilder, string comment);
    [ExtensionAttribute]
[ObsoleteAttribute("Configure this using ToTable(t => t.HasComment()) instead.")]
public static EntityTypeBuilder`1<TEntity> HasComment(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string comment);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionEntityTypeBuilder HasComment(IConventionEntityTypeBuilder entityTypeBuilder, string comment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetComment(IConventionEntityTypeBuilder entityTypeBuilder, string comment, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionEntityTypeBuilder HasJsonPropertyName(IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetJsonPropertyName(IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static EntityTypeBuilder ToTable(EntityTypeBuilder entityTypeBuilder, string name);
    [ExtensionAttribute]
public static EntityTypeBuilder ToTable(EntityTypeBuilder entityTypeBuilder, Action`1<TableBuilder> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder ToTable(EntityTypeBuilder entityTypeBuilder, string name, Action`1<TableBuilder> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> ToTable(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> ToTable(EntityTypeBuilder`1<TEntity> entityTypeBuilder, Action`1<TableBuilder`1<TEntity>> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> ToTable(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, Action`1<TableBuilder`1<TEntity>> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder ToTable(EntityTypeBuilder entityTypeBuilder, string name, string schema);
    [ExtensionAttribute]
public static EntityTypeBuilder ToTable(EntityTypeBuilder entityTypeBuilder, string name, string schema, Action`1<TableBuilder> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> ToTable(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, string schema);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> ToTable(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, string schema, Action`1<TableBuilder`1<TEntity>> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder ToTable(OwnedNavigationBuilder ownedNavigationBuilder, string name);
    [ExtensionAttribute]
public static OwnedNavigationBuilder ToTable(OwnedNavigationBuilder ownedNavigationBuilder, Action`1<OwnedNavigationTableBuilder> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ToTable(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, Action`1<OwnedNavigationTableBuilder`2<TOwnerEntity, TDependentEntity>> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ToTable(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, string name);
    [ExtensionAttribute]
public static OwnedNavigationBuilder ToTable(OwnedNavigationBuilder ownedNavigationBuilder, string name, Action`1<OwnedNavigationTableBuilder> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ToTable(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, string name, Action`1<OwnedNavigationTableBuilder`2<TOwnerEntity, TDependentEntity>> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder ToTable(OwnedNavigationBuilder ownedNavigationBuilder, string name, string schema);
    [ExtensionAttribute]
public static OwnedNavigationBuilder ToTable(OwnedNavigationBuilder ownedNavigationBuilder, string name, string schema, Action`1<OwnedNavigationTableBuilder> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ToTable(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, string name, string schema);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ToTable(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, string name, string schema, Action`1<OwnedNavigationTableBuilder`2<TOwnerEntity, TDependentEntity>> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder SplitToTable(EntityTypeBuilder entityTypeBuilder, string name, Action`1<SplitTableBuilder> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> SplitToTable(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, Action`1<SplitTableBuilder`1<TEntity>> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder SplitToTable(EntityTypeBuilder entityTypeBuilder, string name, string schema, Action`1<SplitTableBuilder> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> SplitToTable(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, string schema, Action`1<SplitTableBuilder`1<TEntity>> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder SplitToTable(OwnedNavigationBuilder ownedNavigationBuilder, string name, Action`1<OwnedNavigationSplitTableBuilder> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> SplitToTable(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, string name, Action`1<OwnedNavigationSplitTableBuilder`2<TOwnerEntity, TDependentEntity>> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder SplitToTable(OwnedNavigationBuilder ownedNavigationBuilder, string name, string schema, Action`1<OwnedNavigationSplitTableBuilder> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> SplitToTable(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, string name, string schema, Action`1<OwnedNavigationSplitTableBuilder`2<TOwnerEntity, TDependentEntity>> buildAction);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionEntityTypeBuilder ToTable(IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionEntityTypeBuilder ToTable(IConventionEntityTypeBuilder entityTypeBuilder, string name, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetTable(IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionEntityTypeBuilder ToSchema(IConventionEntityTypeBuilder entityTypeBuilder, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetSchema(IConventionEntityTypeBuilder entityTypeBuilder, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static EntityTypeBuilder ToView(EntityTypeBuilder entityTypeBuilder, string name);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> ToView(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name);
    [ExtensionAttribute]
public static EntityTypeBuilder ToView(EntityTypeBuilder entityTypeBuilder, string name, string schema);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> ToView(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, string schema);
    [ExtensionAttribute]
public static EntityTypeBuilder ToView(EntityTypeBuilder entityTypeBuilder, string name, Action`1<ViewBuilder> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> ToView(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, Action`1<ViewBuilder`1<TEntity>> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder ToView(EntityTypeBuilder entityTypeBuilder, string name, string schema, Action`1<ViewBuilder> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> ToView(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, string schema, Action`1<ViewBuilder`1<TEntity>> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder ToView(OwnedNavigationBuilder ownedNavigationBuilder, string name);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ToView(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, string name);
    [ExtensionAttribute]
public static OwnedNavigationBuilder ToView(OwnedNavigationBuilder ownedNavigationBuilder, string name, string schema);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ToView(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, string name, string schema);
    [ExtensionAttribute]
public static OwnedNavigationBuilder ToView(OwnedNavigationBuilder ownedNavigationBuilder, string name, Action`1<OwnedNavigationViewBuilder> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ToView(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, string name, Action`1<OwnedNavigationViewBuilder`2<TOwnerEntity, TDependentEntity>> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder ToView(OwnedNavigationBuilder ownedNavigationBuilder, string name, string schema, Action`1<OwnedNavigationViewBuilder> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ToView(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, string name, string schema, Action`1<OwnedNavigationViewBuilder`2<TOwnerEntity, TDependentEntity>> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder SplitToView(EntityTypeBuilder entityTypeBuilder, string name, Action`1<SplitViewBuilder> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> SplitToView(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, Action`1<SplitViewBuilder`1<TEntity>> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder SplitToView(EntityTypeBuilder entityTypeBuilder, string name, string schema, Action`1<SplitViewBuilder> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> SplitToView(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, string schema, Action`1<SplitViewBuilder`1<TEntity>> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder SplitToView(OwnedNavigationBuilder ownedNavigationBuilder, string name, Action`1<OwnedNavigationSplitViewBuilder> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> SplitToView(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, string name, Action`1<OwnedNavigationSplitViewBuilder`2<TOwnerEntity, TDependentEntity>> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder SplitToView(OwnedNavigationBuilder ownedNavigationBuilder, string name, string schema, Action`1<OwnedNavigationSplitViewBuilder> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> SplitToView(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, string name, string schema, Action`1<OwnedNavigationSplitViewBuilder`2<TOwnerEntity, TDependentEntity>> buildAction);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionEntityTypeBuilder ToView(IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionEntityTypeBuilder ToView(IConventionEntityTypeBuilder entityTypeBuilder, string name, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetView(IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionEntityTypeBuilder ToViewSchema(IConventionEntityTypeBuilder entityTypeBuilder, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetViewSchema(IConventionEntityTypeBuilder entityTypeBuilder, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static EntityTypeBuilder UpdateUsingStoredProcedure(EntityTypeBuilder entityTypeBuilder, Action`1<StoredProcedureBuilder> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder UpdateUsingStoredProcedure(EntityTypeBuilder entityTypeBuilder, string name, Action`1<StoredProcedureBuilder> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder UpdateUsingStoredProcedure(EntityTypeBuilder entityTypeBuilder, string name, string schema, Action`1<StoredProcedureBuilder> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> UpdateUsingStoredProcedure(EntityTypeBuilder`1<TEntity> entityTypeBuilder, Action`1<StoredProcedureBuilder`1<TEntity>> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> UpdateUsingStoredProcedure(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, Action`1<StoredProcedureBuilder`1<TEntity>> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> UpdateUsingStoredProcedure(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, string schema, Action`1<StoredProcedureBuilder`1<TEntity>> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder UpdateUsingStoredProcedure(OwnedNavigationBuilder ownedNavigationBuilder, Action`1<OwnedNavigationStoredProcedureBuilder> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder UpdateUsingStoredProcedure(OwnedNavigationBuilder ownedNavigationBuilder, string name, Action`1<OwnedNavigationStoredProcedureBuilder> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder UpdateUsingStoredProcedure(OwnedNavigationBuilder ownedNavigationBuilder, string name, string schema, Action`1<OwnedNavigationStoredProcedureBuilder> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> UpdateUsingStoredProcedure(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, Action`1<OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity>> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> UpdateUsingStoredProcedure(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, string name, Action`1<OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity>> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> UpdateUsingStoredProcedure(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, string name, string schema, Action`1<OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity>> buildAction);
    [ExtensionAttribute]
public static IConventionStoredProcedureBuilder UpdateUsingStoredProcedure(IConventionEntityTypeBuilder entityTypeBuilder, bool fromDataAnnotation);
    [ExtensionAttribute]
public static EntityTypeBuilder DeleteUsingStoredProcedure(EntityTypeBuilder entityTypeBuilder, Action`1<StoredProcedureBuilder> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder DeleteUsingStoredProcedure(EntityTypeBuilder entityTypeBuilder, string name, Action`1<StoredProcedureBuilder> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder DeleteUsingStoredProcedure(EntityTypeBuilder entityTypeBuilder, string name, string schema, Action`1<StoredProcedureBuilder> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> DeleteUsingStoredProcedure(EntityTypeBuilder`1<TEntity> entityTypeBuilder, Action`1<StoredProcedureBuilder`1<TEntity>> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> DeleteUsingStoredProcedure(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, Action`1<StoredProcedureBuilder`1<TEntity>> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> DeleteUsingStoredProcedure(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, string schema, Action`1<StoredProcedureBuilder`1<TEntity>> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder DeleteUsingStoredProcedure(OwnedNavigationBuilder ownedNavigationBuilder, Action`1<OwnedNavigationStoredProcedureBuilder> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder DeleteUsingStoredProcedure(OwnedNavigationBuilder ownedNavigationBuilder, string name, Action`1<OwnedNavigationStoredProcedureBuilder> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder DeleteUsingStoredProcedure(OwnedNavigationBuilder ownedNavigationBuilder, string name, string schema, Action`1<OwnedNavigationStoredProcedureBuilder> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> DeleteUsingStoredProcedure(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, Action`1<OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity>> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> DeleteUsingStoredProcedure(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, string name, Action`1<OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity>> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> DeleteUsingStoredProcedure(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, string name, string schema, Action`1<OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity>> buildAction);
    [ExtensionAttribute]
public static IConventionStoredProcedureBuilder DeleteUsingStoredProcedure(IConventionEntityTypeBuilder entityTypeBuilder, bool fromDataAnnotation);
    [ExtensionAttribute]
public static EntityTypeBuilder InsertUsingStoredProcedure(EntityTypeBuilder entityTypeBuilder, Action`1<StoredProcedureBuilder> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder InsertUsingStoredProcedure(EntityTypeBuilder entityTypeBuilder, string name, Action`1<StoredProcedureBuilder> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder InsertUsingStoredProcedure(EntityTypeBuilder entityTypeBuilder, string name, string schema, Action`1<StoredProcedureBuilder> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> InsertUsingStoredProcedure(EntityTypeBuilder`1<TEntity> entityTypeBuilder, Action`1<StoredProcedureBuilder`1<TEntity>> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> InsertUsingStoredProcedure(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, Action`1<StoredProcedureBuilder`1<TEntity>> buildAction);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> InsertUsingStoredProcedure(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, string schema, Action`1<StoredProcedureBuilder`1<TEntity>> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder InsertUsingStoredProcedure(OwnedNavigationBuilder ownedNavigationBuilder, Action`1<OwnedNavigationStoredProcedureBuilder> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder InsertUsingStoredProcedure(OwnedNavigationBuilder ownedNavigationBuilder, string name, Action`1<OwnedNavigationStoredProcedureBuilder> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder InsertUsingStoredProcedure(OwnedNavigationBuilder ownedNavigationBuilder, string name, string schema, Action`1<OwnedNavigationStoredProcedureBuilder> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> InsertUsingStoredProcedure(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, Action`1<OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity>> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> InsertUsingStoredProcedure(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, string name, Action`1<OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity>> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> InsertUsingStoredProcedure(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, string name, string schema, Action`1<OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity>> buildAction);
    [ExtensionAttribute]
public static IConventionStoredProcedureBuilder InsertUsingStoredProcedure(IConventionEntityTypeBuilder entityTypeBuilder, bool fromDataAnnotation);
    private static EntityTypeBuilder UseStoredProcedure(EntityTypeBuilder entityTypeBuilder, string name, string schema, StoreObjectType sprocType, Action`1<StoredProcedureBuilder> buildAction);
    private static EntityTypeBuilder`1<TEntity> UseStoredProcedure(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name, string schema, StoreObjectType sprocType, Action`1<StoredProcedureBuilder`1<TEntity>> buildAction);
    private static OwnedNavigationBuilder UseStoredProcedure(OwnedNavigationBuilder ownedNavigationBuilder, string name, string schema, StoreObjectType sprocType, Action`1<OwnedNavigationStoredProcedureBuilder> buildAction);
    private static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> UseStoredProcedure(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ownedNavigationBuilder, string name, string schema, StoreObjectType sprocType, Action`1<OwnedNavigationStoredProcedureBuilder`2<TOwnerEntity, TDependentEntity>> buildAction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions : object {
    private static bool QuirkEnabled29899;
    public static string DefaultQueryNameBase;
    private static RelationalEntityTypeExtensions();
    [ExtensionAttribute]
public static string GetTableName(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static string GetDefaultTableName(IReadOnlyEntityType entityType, bool truncate);
    [ExtensionAttribute]
public static void SetTableName(IMutableEntityType entityType, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetTableName(IConventionEntityType entityType, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetTableNameConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static string GetSchema(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static string GetDefaultSchema(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetSchema(IMutableEntityType entityType, string value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetSchema(IConventionEntityType entityType, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetSchemaConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static string GetSchemaQualifiedTableName(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static string GetSchemaQualifiedViewName(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<ITableMappingBase> GetDefaultMappings(IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<ITableMapping> GetTableMappings(IEntityType entityType);
    [ExtensionAttribute]
public static string GetViewName(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static string GetDefaultViewName(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetViewName(IMutableEntityType entityType, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetViewName(IConventionEntityType entityType, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetViewNameConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static string GetViewSchema(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static string GetDefaultViewSchema(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetViewSchema(IMutableEntityType entityType, string value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetViewSchema(IConventionEntityType entityType, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetViewSchemaConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IViewMapping> GetViewMappings(IEntityType entityType);
    [ExtensionAttribute]
public static string GetDefaultSqlQueryName(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static string GetSqlQuery(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetSqlQuery(IMutableEntityType entityType, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetSqlQuery(IConventionEntityType entityType, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetSqlQueryConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<ISqlQueryMapping> GetSqlQueryMappings(IEntityType entityType);
    [ExtensionAttribute]
public static string GetFunctionName(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetFunctionName(IMutableEntityType entityType, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetFunctionName(IConventionEntityType entityType, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetFunctionNameConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IFunctionMapping> GetFunctionMappings(IEntityType entityType);
    [ExtensionAttribute]
public static IReadOnlyStoredProcedure GetDeleteStoredProcedure(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static IMutableStoredProcedure GetDeleteStoredProcedure(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IConventionStoredProcedure GetDeleteStoredProcedure(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IStoredProcedure GetDeleteStoredProcedure(IEntityType entityType);
    [ExtensionAttribute]
public static IMutableStoredProcedure SetDeleteStoredProcedure(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IConventionStoredProcedure SetDeleteStoredProcedure(IConventionEntityType entityType, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IMutableStoredProcedure RemoveDeleteStoredProcedure(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IConventionStoredProcedure RemoveDeleteStoredProcedure(IConventionEntityType entityType);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetDeleteStoredProcedureConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IReadOnlyStoredProcedure GetInsertStoredProcedure(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static IMutableStoredProcedure GetInsertStoredProcedure(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IConventionStoredProcedure GetInsertStoredProcedure(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IStoredProcedure GetInsertStoredProcedure(IEntityType entityType);
    [ExtensionAttribute]
public static IMutableStoredProcedure SetInsertStoredProcedure(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IConventionStoredProcedure SetInsertStoredProcedure(IConventionEntityType entityType, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IMutableStoredProcedure RemoveInsertStoredProcedure(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IConventionStoredProcedure RemoveInsertStoredProcedure(IConventionEntityType entityType);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetInsertStoredProcedureConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IReadOnlyStoredProcedure GetUpdateStoredProcedure(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static IMutableStoredProcedure GetUpdateStoredProcedure(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IConventionStoredProcedure GetUpdateStoredProcedure(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IStoredProcedure GetUpdateStoredProcedure(IEntityType entityType);
    [ExtensionAttribute]
public static IMutableStoredProcedure SetUpdateStoredProcedure(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IConventionStoredProcedure SetUpdateStoredProcedure(IConventionEntityType entityType, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IMutableStoredProcedure RemoveUpdateStoredProcedure(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IConventionStoredProcedure RemoveUpdateStoredProcedure(IConventionEntityType entityType);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetUpdateStoredProcedureConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IStoredProcedureMapping> GetInsertStoredProcedureMappings(IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IStoredProcedureMapping> GetDeleteStoredProcedureMappings(IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IStoredProcedureMapping> GetUpdateStoredProcedureMappings(IEntityType entityType);
    [ExtensionAttribute]
public static IReadOnlyCheckConstraint FindCheckConstraint(IReadOnlyEntityType entityType, string name);
    [ExtensionAttribute]
public static IMutableCheckConstraint FindCheckConstraint(IMutableEntityType entityType, string name);
    [ExtensionAttribute]
public static IConventionCheckConstraint FindCheckConstraint(IConventionEntityType entityType, string name);
    [ExtensionAttribute]
public static ICheckConstraint FindCheckConstraint(IEntityType entityType, string name);
    [ExtensionAttribute]
public static IMutableCheckConstraint AddCheckConstraint(IMutableEntityType entityType, string name, string sql);
    [ExtensionAttribute]
public static IConventionCheckConstraint AddCheckConstraint(IConventionEntityType entityType, string name, string sql, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IMutableCheckConstraint RemoveCheckConstraint(IMutableEntityType entityType, string name);
    [ExtensionAttribute]
public static IConventionCheckConstraint RemoveCheckConstraint(IConventionEntityType entityType, string name);
    [ExtensionAttribute]
public static IEnumerable`1<IReadOnlyCheckConstraint> GetCheckConstraints(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableCheckConstraint> GetCheckConstraints(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionCheckConstraint> GetCheckConstraints(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<ICheckConstraint> GetCheckConstraints(IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IReadOnlyCheckConstraint> GetDeclaredCheckConstraints(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableCheckConstraint> GetDeclaredCheckConstraints(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionCheckConstraint> GetDeclaredCheckConstraints(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<ICheckConstraint> GetDeclaredCheckConstraints(IEntityType entityType);
    [ExtensionAttribute]
public static string GetComment(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetComment(IMutableEntityType entityType, string comment);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetComment(IConventionEntityType entityType, string comment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetCommentConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IReadOnlyEntityTypeMappingFragment> GetMappingFragments(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableEntityTypeMappingFragment> GetMappingFragments(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionEntityTypeMappingFragment> GetMappingFragments(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IEntityTypeMappingFragment> GetMappingFragments(IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IReadOnlyEntityTypeMappingFragment> GetMappingFragments(IReadOnlyEntityType entityType, StoreObjectType storeObjectType);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableEntityTypeMappingFragment> GetMappingFragments(IMutableEntityType entityType, StoreObjectType storeObjectType);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionEntityTypeMappingFragment> GetMappingFragments(IConventionEntityType entityType, StoreObjectType storeObjectType);
    [ExtensionAttribute]
public static IEnumerable`1<IEntityTypeMappingFragment> GetMappingFragments(IEntityType entityType, StoreObjectType storeObjectType);
    [ExtensionAttribute]
public static IReadOnlyEntityTypeMappingFragment FindMappingFragment(IReadOnlyEntityType entityType, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IMutableEntityTypeMappingFragment FindMappingFragment(IMutableEntityType entityType, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IConventionEntityTypeMappingFragment FindMappingFragment(IConventionEntityType entityType, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IEntityTypeMappingFragment FindMappingFragment(IEntityType entityType, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IMutableEntityTypeMappingFragment GetOrCreateMappingFragment(IMutableEntityType entityType, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IConventionEntityTypeMappingFragment GetOrCreateMappingFragment(IConventionEntityType entityType, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IMutableEntityTypeMappingFragment RemoveMappingFragment(IMutableEntityType entityType, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IConventionEntityTypeMappingFragment RemoveMappingFragment(IConventionEntityType entityType, StoreObjectIdentifier& storeObject);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions/<FindRowInternalForeignKeys>d__104")]
[ExtensionAttribute]
public static IEnumerable`1<IReadOnlyForeignKey> FindRowInternalForeignKeys(IReadOnlyEntityType entityType, StoreObjectIdentifier storeObject);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableForeignKey> FindRowInternalForeignKeys(IMutableEntityType entityType, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionForeignKey> FindRowInternalForeignKeys(IConventionEntityType entityType, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IEnumerable`1<IForeignKey> FindRowInternalForeignKeys(IEntityType entityType, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static bool IsTableExcludedFromMigrations(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static bool IsTableExcludedFromMigrations(IReadOnlyEntityType entityType, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetIsTableExcludedFromMigrations(IMutableEntityType entityType, Nullable`1<bool> excluded);
    [ExtensionAttribute]
public static Nullable`1<bool> SetIsTableExcludedFromMigrations(IConventionEntityType entityType, Nullable`1<bool> excluded, bool fromDataAnnotation);
    [ExtensionAttribute]
public static void SetIsTableExcludedFromMigrations(IMutableEntityType entityType, Nullable`1<bool> excluded, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<bool> SetIsTableExcludedFromMigrations(IConventionEntityType entityType, Nullable`1<bool> excluded, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIsTableExcludedFromMigrationsConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIsTableExcludedFromMigrationsConfigurationSource(IConventionEntityType entityType, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static string GetMappingStrategy(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetMappingStrategy(IMutableEntityType entityType, string strategy);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetMappingStrategy(IConventionEntityType entityType, string strategy, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetMappingStrategyConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static bool IsMappedToJson(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetContainerColumnName(IMutableEntityType entityType, string columnName);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetContainerColumnName(IConventionEntityType entityType, string columnName, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetContainerColumnNameConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static string GetContainerColumnName(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetContainerColumnTypeMapping(IMutableEntityType entityType, RelationalTypeMapping typeMapping);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static RelationalTypeMapping SetContainerColumnTypeMapping(IConventionEntityType entityType, RelationalTypeMapping typeMapping, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetContainerColumnTypeMappingConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static RelationalTypeMapping GetContainerColumnTypeMapping(IReadOnlyEntityType entityType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetJsonPropertyName(IConventionEntityType entityType, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static string GetJsonPropertyName(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetJsonPropertyName(IMutableEntityType entityType, string name);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetJsonPropertyNameConfigurationSource(IConventionEntityType entityType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalForeignKeyBuilderExtensions : object {
    [ExtensionAttribute]
public static ReferenceCollectionBuilder HasConstraintName(ReferenceCollectionBuilder referenceCollectionBuilder, string name);
    [ExtensionAttribute]
public static ReferenceCollectionBuilder`2<TEntity, TRelatedEntity> HasConstraintName(ReferenceCollectionBuilder`2<TEntity, TRelatedEntity> referenceCollectionBuilder, string name);
    [ExtensionAttribute]
public static ReferenceReferenceBuilder HasConstraintName(ReferenceReferenceBuilder referenceReferenceBuilder, string name);
    [ExtensionAttribute]
public static ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> HasConstraintName(ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> referenceReferenceBuilder, string name);
    [ExtensionAttribute]
public static OwnershipBuilder HasConstraintName(OwnershipBuilder ownershipBuilder, string name);
    [ExtensionAttribute]
public static OwnershipBuilder`2<TEntity, TDependentEntity> HasConstraintName(OwnershipBuilder`2<TEntity, TDependentEntity> ownershipBuilder, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionForeignKeyBuilder HasConstraintName(IConventionForeignKeyBuilder relationship, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetConstraintName(IConventionForeignKeyBuilder relationship, string name, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalForeignKeyExtensions : object {
    [ExtensionAttribute]
public static string GetConstraintName(IReadOnlyForeignKey foreignKey);
    [ExtensionAttribute]
public static string GetConstraintName(IReadOnlyForeignKey foreignKey, StoreObjectIdentifier& storeObject, StoreObjectIdentifier& principalStoreObject);
    [ExtensionAttribute]
public static string GetDefaultName(IReadOnlyForeignKey foreignKey);
    [ExtensionAttribute]
public static string GetDefaultName(IReadOnlyForeignKey foreignKey, StoreObjectIdentifier& storeObject, StoreObjectIdentifier& principalStoreObject);
    [ExtensionAttribute]
public static void SetConstraintName(IMutableForeignKey foreignKey, string value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetConstraintName(IConventionForeignKey foreignKey, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetConstraintNameConfigurationSource(IConventionForeignKey foreignKey);
    [ExtensionAttribute]
public static IEnumerable`1<IForeignKeyConstraint> GetMappedConstraints(IForeignKey foreignKey);
    [ExtensionAttribute]
public static IReadOnlyForeignKey FindSharedObjectRootForeignKey(IReadOnlyForeignKey foreignKey, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static bool IsRowInternal(IReadOnlyForeignKey foreignKey, StoreObjectIdentifier storeObject);
    [ExtensionAttribute]
public static IMutableForeignKey FindSharedObjectRootForeignKey(IMutableForeignKey foreignKey, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IConventionForeignKey FindSharedObjectRootForeignKey(IConventionForeignKey foreignKey, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IForeignKey FindSharedObjectRootForeignKey(IForeignKey foreignKey, StoreObjectIdentifier& storeObject);
    [CompilerGeneratedAttribute]
internal static bool <IsRowInternal>g__IsMapped|9_0(IReadOnlyForeignKey foreignKey, StoreObjectIdentifier storeObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions : object {
    [ExtensionAttribute]
public static IndexBuilder HasDatabaseName(IndexBuilder indexBuilder, string name);
    [ExtensionAttribute]
[ObsoleteAttribute("Use HasDatabaseName() instead.")]
public static IndexBuilder HasName(IndexBuilder indexBuilder, string name);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> HasDatabaseName(IndexBuilder`1<TEntity> indexBuilder, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionIndexBuilder HasDatabaseName(IConventionIndexBuilder indexBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetDatabaseName(IConventionIndexBuilder indexBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IndexBuilder HasFilter(IndexBuilder indexBuilder, string sql);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> HasFilter(IndexBuilder`1<TEntity> indexBuilder, string sql);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionIndexBuilder HasFilter(IConventionIndexBuilder indexBuilder, string sql, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetFilter(IConventionIndexBuilder indexBuilder, string sql, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalIndexExtensions : object {
    [ExtensionAttribute]
public static string GetDatabaseName(IReadOnlyIndex index);
    [ExtensionAttribute]
public static string GetDatabaseName(IReadOnlyIndex index, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static string GetDefaultDatabaseName(IReadOnlyIndex index);
    [ExtensionAttribute]
public static string GetDefaultDatabaseName(IReadOnlyIndex index, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetDatabaseName(IMutableIndex index, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetDatabaseName(IConventionIndex index, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetDatabaseNameConfigurationSource(IConventionIndex index);
    [ExtensionAttribute]
public static string GetFilter(IReadOnlyIndex index);
    [ExtensionAttribute]
public static string GetFilter(IReadOnlyIndex index, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetFilter(IMutableIndex index, string value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetFilter(IConventionIndex index, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetFilterConfigurationSource(IConventionIndex index);
    [ExtensionAttribute]
public static IEnumerable`1<ITableIndex> GetMappedTableIndexes(IIndex index);
    [ExtensionAttribute]
public static IReadOnlyIndex FindSharedObjectRootIndex(IReadOnlyIndex index, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IMutableIndex FindSharedObjectRootIndex(IMutableIndex index, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IConventionIndex FindSharedObjectRootIndex(IConventionIndex index, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IIndex FindSharedObjectRootIndex(IIndex index, StoreObjectIdentifier& storeObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalKeyBuilderExtensions : object {
    [ExtensionAttribute]
public static KeyBuilder HasName(KeyBuilder keyBuilder, string name);
    [ExtensionAttribute]
public static KeyBuilder`1<TEntity> HasName(KeyBuilder`1<TEntity> keyBuilder, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionKeyBuilder HasName(IConventionKeyBuilder keyBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetName(IConventionKeyBuilder keyBuilder, string name, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalKeyExtensions : object {
    [ExtensionAttribute]
public static string GetName(IReadOnlyKey key);
    [ExtensionAttribute]
public static string GetName(IReadOnlyKey key, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static string GetDefaultName(IReadOnlyKey key);
    [ExtensionAttribute]
public static string GetDefaultName(IReadOnlyKey key, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetName(IMutableKey key, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetName(IConventionKey key, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetNameConfigurationSource(IConventionKey key);
    [ExtensionAttribute]
public static IEnumerable`1<IUniqueConstraint> GetMappedConstraints(IKey key);
    [ExtensionAttribute]
public static IReadOnlyKey FindSharedObjectRootKey(IReadOnlyKey key, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IMutableKey FindSharedObjectRootKey(IMutableKey key, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IConventionKey FindSharedObjectRootKey(IConventionKey key, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IKey FindSharedObjectRootKey(IKey key, StoreObjectIdentifier& storeObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions : object {
    [ExtensionAttribute]
public static SequenceBuilder HasSequence(ModelBuilder modelBuilder, string name, string schema);
    [ExtensionAttribute]
public static ModelBuilder HasSequence(ModelBuilder modelBuilder, string name, Action`1<SequenceBuilder> builderAction);
    [ExtensionAttribute]
public static ModelBuilder HasSequence(ModelBuilder modelBuilder, string name, string schema, Action`1<SequenceBuilder> builderAction);
    [ExtensionAttribute]
public static SequenceBuilder HasSequence(ModelBuilder modelBuilder, Type type, string name, string schema);
    [ExtensionAttribute]
public static ModelBuilder HasSequence(ModelBuilder modelBuilder, Type type, string name, Action`1<SequenceBuilder> builderAction);
    [ExtensionAttribute]
public static ModelBuilder HasSequence(ModelBuilder modelBuilder, Type type, string name, string schema, Action`1<SequenceBuilder> builderAction);
    [ExtensionAttribute]
public static SequenceBuilder HasSequence(ModelBuilder modelBuilder, string name, string schema);
    [ExtensionAttribute]
public static ModelBuilder HasSequence(ModelBuilder modelBuilder, string name, Action`1<SequenceBuilder> builderAction);
    [ExtensionAttribute]
public static ModelBuilder HasSequence(ModelBuilder modelBuilder, string name, string schema, Action`1<SequenceBuilder> builderAction);
    [ExtensionAttribute]
public static IConventionSequenceBuilder HasSequence(IConventionModelBuilder modelBuilder, string name, string schema, bool fromDataAnnotation);
    private static Sequence HasSequence(IMutableModel model, string name, string schema, ConfigurationSource configurationSource);
    [ExtensionAttribute]
public static DbFunctionBuilder HasDbFunction(ModelBuilder modelBuilder, MethodInfo methodInfo);
    [ExtensionAttribute]
public static DbFunctionBuilder HasDbFunction(ModelBuilder modelBuilder, Expression`1<Func`1<TResult>> expression);
    [ExtensionAttribute]
public static ModelBuilder HasDbFunction(ModelBuilder modelBuilder, MethodInfo methodInfo, Action`1<DbFunctionBuilder> builderAction);
    [ExtensionAttribute]
public static IConventionDbFunctionBuilder HasDbFunction(IConventionModelBuilder modelBuilder, MethodInfo methodInfo, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionDbFunctionBuilder HasDbFunction(IConventionModelBuilder modelBuilder, string name, Type returnType, bool fromDataAnnotation);
    [ExtensionAttribute]
public static ModelBuilder HasDefaultSchema(ModelBuilder modelBuilder, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionModelBuilder HasDefaultSchema(IConventionModelBuilder modelBuilder, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetDefaultSchema(IConventionModelBuilder modelBuilder, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionModelBuilder HasMaxIdentifierLength(IConventionModelBuilder modelBuilder, Nullable`1<int> length, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetMaxIdentifierLength(IConventionModelBuilder modelBuilder, Nullable`1<int> length, bool fromDataAnnotation);
    [ExtensionAttribute]
public static ModelBuilder UseCollation(ModelBuilder modelBuilder, string collation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionModelBuilder UseCollation(IConventionModelBuilder modelBuilder, string collation, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetCollation(IConventionModelBuilder modelBuilder, string collation, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalModelExtensions : object {
    [ExtensionAttribute]
public static string GetDefaultSchema(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetDefaultSchema(IMutableModel model, string value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetDefaultSchema(IConventionModel model, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetDefaultSchemaConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static IRelationalModel GetRelationalModel(IModel model);
    [ExtensionAttribute]
public static int GetMaxIdentifierLength(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetMaxIdentifierLength(IMutableModel model, Nullable`1<int> length);
    [ExtensionAttribute]
public static Nullable`1<int> SetMaxIdentifierLength(IConventionModel model, Nullable`1<int> length, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetMaxIdentifierLengthConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static IReadOnlySequence FindSequence(IReadOnlyModel model, string name, string schema);
    [ExtensionAttribute]
public static IMutableSequence FindSequence(IMutableModel model, string name, string schema);
    [ExtensionAttribute]
public static IConventionSequence FindSequence(IConventionModel model, string name, string schema);
    [ExtensionAttribute]
public static ISequence FindSequence(IModel model, string name, string schema);
    [ExtensionAttribute]
public static IMutableSequence AddSequence(IMutableModel model, string name, string schema);
    [ExtensionAttribute]
public static IConventionSequence AddSequence(IConventionModel model, string name, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IMutableSequence RemoveSequence(IMutableModel model, string name, string schema);
    [ExtensionAttribute]
public static IConventionSequence RemoveSequence(IConventionModel model, string name, string schema);
    [ExtensionAttribute]
public static IEnumerable`1<ISequence> GetSequences(IModel model);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableSequence> GetSequences(IMutableModel model);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionSequence> GetSequences(IConventionModel model);
    [ExtensionAttribute]
public static IEnumerable`1<IReadOnlySequence> GetSequences(IReadOnlyModel model);
    [ExtensionAttribute]
public static IReadOnlyDbFunction FindDbFunction(IReadOnlyModel model, MethodInfo method);
    [ExtensionAttribute]
public static IMutableDbFunction FindDbFunction(IMutableModel model, MethodInfo method);
    [ExtensionAttribute]
public static IConventionDbFunction FindDbFunction(IConventionModel model, MethodInfo method);
    [ExtensionAttribute]
public static IDbFunction FindDbFunction(IModel model, MethodInfo method);
    [ExtensionAttribute]
public static IReadOnlyDbFunction FindDbFunction(IReadOnlyModel model, string name);
    [ExtensionAttribute]
public static IMutableDbFunction FindDbFunction(IMutableModel model, string name);
    [ExtensionAttribute]
public static IConventionDbFunction FindDbFunction(IConventionModel model, string name);
    [ExtensionAttribute]
public static IDbFunction FindDbFunction(IModel model, string name);
    [ExtensionAttribute]
public static IMutableDbFunction AddDbFunction(IMutableModel model, MethodInfo methodInfo);
    [ExtensionAttribute]
public static IConventionDbFunction AddDbFunction(IConventionModel model, MethodInfo methodInfo, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IMutableDbFunction AddDbFunction(IMutableModel model, string name, Type returnType);
    [ExtensionAttribute]
public static IConventionDbFunction AddDbFunction(IConventionModel model, string name, Type returnType, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IMutableDbFunction RemoveDbFunction(IMutableModel model, MethodInfo method);
    [ExtensionAttribute]
public static IConventionDbFunction RemoveDbFunction(IConventionModel model, MethodInfo method);
    [ExtensionAttribute]
public static IMutableDbFunction RemoveDbFunction(IMutableModel model, string name);
    [ExtensionAttribute]
public static IConventionDbFunction RemoveDbFunction(IConventionModel model, string name);
    [ExtensionAttribute]
public static IEnumerable`1<IReadOnlyDbFunction> GetDbFunctions(IReadOnlyModel model);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableDbFunction> GetDbFunctions(IMutableModel model);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionDbFunction> GetDbFunctions(IConventionModel model);
    [ExtensionAttribute]
public static IEnumerable`1<IDbFunction> GetDbFunctions(IModel model);
    [ExtensionAttribute]
public static string GetCollation(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetCollation(IMutableModel model, string value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetCollation(IConventionModel model, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetCollationConfigurationSource(IConventionModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalOwnedNavigationBuilderExtensions : object {
    [ExtensionAttribute]
public static OwnedNavigationBuilder ToJson(OwnedNavigationBuilder builder);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ToJson(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> builder);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ToJson(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> builder, string jsonColumnName);
    [ExtensionAttribute]
public static OwnedNavigationBuilder ToJson(OwnedNavigationBuilder builder, string jsonColumnName);
    [ExtensionAttribute]
public static OwnedNavigationBuilder HasJsonPropertyName(OwnedNavigationBuilder navigationBuilder, string name);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TSource, TTarget> HasJsonPropertyName(OwnedNavigationBuilder`2<TSource, TTarget> navigationBuilder, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalPropertiesConfigurationBuilderExtensions : object {
    [ExtensionAttribute]
public static PropertiesConfigurationBuilder HaveColumnType(PropertiesConfigurationBuilder propertyBuilder, string typeName);
    [ExtensionAttribute]
public static PropertiesConfigurationBuilder`1<TProperty> HaveColumnType(PropertiesConfigurationBuilder`1<TProperty> propertyBuilder, string typeName);
    [ExtensionAttribute]
public static PropertiesConfigurationBuilder AreFixedLength(PropertiesConfigurationBuilder propertyBuilder, bool fixedLength);
    [ExtensionAttribute]
public static PropertiesConfigurationBuilder`1<TProperty> AreFixedLength(PropertiesConfigurationBuilder`1<TProperty> propertyBuilder, bool fixedLength);
    [ExtensionAttribute]
public static PropertiesConfigurationBuilder UseCollation(PropertiesConfigurationBuilder propertyBuilder, string collation);
    [ExtensionAttribute]
public static PropertiesConfigurationBuilder`1<TProperty> UseCollation(PropertiesConfigurationBuilder`1<TProperty> propertyBuilder, string collation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions : object {
    [ExtensionAttribute]
public static PropertyBuilder HasColumnName(PropertyBuilder propertyBuilder, string name);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasColumnName(PropertyBuilder`1<TProperty> propertyBuilder, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionPropertyBuilder HasColumnName(IConventionPropertyBuilder propertyBuilder, string name, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionPropertyBuilder HasColumnName(IConventionPropertyBuilder propertyBuilder, string name, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetColumnName(IConventionPropertyBuilder propertyBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetColumnName(IConventionPropertyBuilder propertyBuilder, string name, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder HasColumnOrder(PropertyBuilder propertyBuilder, Nullable`1<int> order);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasColumnOrder(PropertyBuilder`1<TProperty> propertyBuilder, Nullable`1<int> order);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasColumnOrder(IConventionPropertyBuilder propertyBuilder, Nullable`1<int> order, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetColumnOrder(IConventionPropertyBuilder propertyBuilder, Nullable`1<int> order, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder HasColumnType(PropertyBuilder propertyBuilder, string typeName);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasColumnType(PropertyBuilder`1<TProperty> propertyBuilder, string typeName);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionPropertyBuilder HasColumnType(IConventionPropertyBuilder propertyBuilder, string typeName, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetColumnType(IConventionPropertyBuilder propertyBuilder, string typeName, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder IsFixedLength(PropertyBuilder propertyBuilder, bool fixedLength);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> IsFixedLength(PropertyBuilder`1<TProperty> propertyBuilder, bool fixedLength);
    [ExtensionAttribute]
public static IConventionPropertyBuilder IsFixedLength(IConventionPropertyBuilder propertyBuilder, Nullable`1<bool> fixedLength, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIsFixedLength(IConventionPropertyBuilder propertyBuilder, Nullable`1<bool> fixedLength, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder HasDefaultValueSql(PropertyBuilder propertyBuilder);
    [ExtensionAttribute]
public static PropertyBuilder HasDefaultValueSql(PropertyBuilder propertyBuilder, string sql);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasDefaultValueSql(PropertyBuilder`1<TProperty> propertyBuilder);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasDefaultValueSql(PropertyBuilder`1<TProperty> propertyBuilder, string sql);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionPropertyBuilder HasDefaultValueSql(IConventionPropertyBuilder propertyBuilder, string sql, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetDefaultValueSql(IConventionPropertyBuilder propertyBuilder, string sql, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder HasComputedColumnSql(PropertyBuilder propertyBuilder);
    [ExtensionAttribute]
public static PropertyBuilder HasComputedColumnSql(PropertyBuilder propertyBuilder, string sql);
    [ExtensionAttribute]
public static PropertyBuilder HasComputedColumnSql(PropertyBuilder propertyBuilder, string sql, Nullable`1<bool> stored);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasComputedColumnSql(PropertyBuilder`1<TProperty> propertyBuilder);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasComputedColumnSql(PropertyBuilder`1<TProperty> propertyBuilder, string sql);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasComputedColumnSql(PropertyBuilder`1<TProperty> propertyBuilder, string sql, Nullable`1<bool> stored);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionPropertyBuilder HasComputedColumnSql(IConventionPropertyBuilder propertyBuilder, string sql, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionPropertyBuilder IsStoredComputedColumn(IConventionPropertyBuilder propertyBuilder, Nullable`1<bool> stored, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetComputedColumnSql(IConventionPropertyBuilder propertyBuilder, string sql, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIsStoredComputedColumn(IConventionPropertyBuilder propertyBuilder, Nullable`1<bool> stored, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder HasDefaultValue(PropertyBuilder propertyBuilder);
    [ExtensionAttribute]
public static PropertyBuilder HasDefaultValue(PropertyBuilder propertyBuilder, object value);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasDefaultValue(PropertyBuilder`1<TProperty> propertyBuilder);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasDefaultValue(PropertyBuilder`1<TProperty> propertyBuilder, object value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionPropertyBuilder HasDefaultValue(IConventionPropertyBuilder propertyBuilder, object value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetDefaultValue(IConventionPropertyBuilder propertyBuilder, object value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder HasComment(PropertyBuilder propertyBuilder, string comment);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasComment(PropertyBuilder`1<TProperty> propertyBuilder, string comment);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionPropertyBuilder HasComment(IConventionPropertyBuilder propertyBuilder, string comment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetComment(IConventionPropertyBuilder propertyBuilder, string comment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder UseCollation(PropertyBuilder propertyBuilder, string collation);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> UseCollation(PropertyBuilder`1<TProperty> propertyBuilder, string collation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionPropertyBuilder UseCollation(IConventionPropertyBuilder propertyBuilder, string collation, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetCollation(IConventionPropertyBuilder propertyBuilder, string collation, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder HasJsonPropertyName(PropertyBuilder propertyBuilder, string name);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasJsonPropertyName(PropertyBuilder`1<TProperty> propertyBuilder, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionPropertyBuilder HasJsonPropertyName(IConventionPropertyBuilder propertyBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetJsonPropertyName(IConventionPropertyBuilder propertyBuilder, string name, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalPropertyExtensions : object {
    private static MethodInfo GetFieldValueMethod;
    private static MethodInfo IsDbNullMethod;
    private static MethodInfo ThrowReadValueExceptionMethod;
    private static RelationalPropertyExtensions();
    [ExtensionAttribute]
[ObsoleteAttribute("Use GetColumnName")]
public static string GetColumnBaseName(IReadOnlyProperty property);
    [ExtensionAttribute]
public static string GetColumnName(IReadOnlyProperty property);
    [ExtensionAttribute]
public static string GetColumnName(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
[ObsoleteAttribute("Use GetDefaultColumnName")]
public static string GetDefaultColumnBaseName(IReadOnlyProperty property);
    [ExtensionAttribute]
public static string GetDefaultColumnName(IReadOnlyProperty property);
    [ExtensionAttribute]
public static string GetDefaultColumnName(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetColumnName(IMutableProperty property, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetColumnName(IConventionProperty property, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static void SetColumnName(IMutableProperty property, string name, StoreObjectIdentifier& storeObject);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetColumnName(IConventionProperty property, string name, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetColumnNameConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetColumnNameConfigurationSource(IConventionProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<int> GetColumnOrder(IReadOnlyProperty property);
    [ExtensionAttribute]
public static Nullable`1<int> GetColumnOrder(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetColumnOrder(IMutableProperty property, Nullable`1<int> order);
    [ExtensionAttribute]
public static Nullable`1<int> SetColumnOrder(IConventionProperty property, Nullable`1<int> order, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetColumnOrderConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static string GetColumnType(IReadOnlyProperty property);
    [ExtensionAttribute]
public static string GetColumnType(IProperty property);
    [ExtensionAttribute]
public static string GetColumnType(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static string GetColumnType(IProperty property, StoreObjectIdentifier& storeObject);
    private static string GetDefaultColumnType(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetColumnType(IMutableProperty property, string value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetColumnType(IConventionProperty property, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetColumnTypeConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IColumnMappingBase> GetDefaultColumnMappings(IProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IColumnMapping> GetTableColumnMappings(IProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IViewColumnMapping> GetViewColumnMappings(IProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<ISqlQueryColumnMapping> GetSqlQueryColumnMappings(IProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IFunctionColumnMapping> GetFunctionColumnMappings(IProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IStoredProcedureResultColumnMapping> GetInsertStoredProcedureResultColumnMappings(IProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IStoredProcedureParameterMapping> GetInsertStoredProcedureParameterMappings(IProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IStoredProcedureParameterMapping> GetDeleteStoredProcedureParameterMappings(IProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IStoredProcedureResultColumnMapping> GetUpdateStoredProcedureResultColumnMappings(IProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IStoredProcedureParameterMapping> GetUpdateStoredProcedureParameterMappings(IProperty property);
    [ExtensionAttribute]
public static IColumnBase FindColumn(IProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static string GetDefaultValueSql(IReadOnlyProperty property);
    [ExtensionAttribute]
public static string GetDefaultValueSql(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetDefaultValueSql(IMutableProperty property, string value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetDefaultValueSql(IConventionProperty property, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetDefaultValueSqlConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static string GetComputedColumnSql(IReadOnlyProperty property);
    [ExtensionAttribute]
public static string GetComputedColumnSql(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetComputedColumnSql(IMutableProperty property, string value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetComputedColumnSql(IConventionProperty property, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetComputedColumnSqlConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static Nullable`1<bool> GetIsStored(IReadOnlyProperty property);
    [ExtensionAttribute]
public static Nullable`1<bool> GetIsStored(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetIsStored(IMutableProperty property, Nullable`1<bool> value);
    [ExtensionAttribute]
public static Nullable`1<bool> SetIsStored(IConventionProperty property, Nullable`1<bool> value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIsStoredConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static object GetDefaultValue(IReadOnlyProperty property);
    [ExtensionAttribute]
public static bool TryGetDefaultValue(IReadOnlyProperty property, Object& defaultValue);
    [ExtensionAttribute]
public static object GetDefaultValue(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static bool TryGetDefaultValue(IReadOnlyProperty property, StoreObjectIdentifier& storeObject, Object& defaultValue);
    [ExtensionAttribute]
public static void SetDefaultValue(IMutableProperty property, object value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static object SetDefaultValue(IConventionProperty property, object value, bool fromDataAnnotation);
    private static object ConvertDefaultValue(IReadOnlyProperty property, object value);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetDefaultValueConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static Nullable`1<int> GetMaxLength(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<int> GetPrecision(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<int> GetScale(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<bool> IsUnicode(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<bool> IsFixedLength(IReadOnlyProperty property);
    [ExtensionAttribute]
public static Nullable`1<bool> IsFixedLength(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetIsFixedLength(IMutableProperty property, Nullable`1<bool> fixedLength);
    [ExtensionAttribute]
public static Nullable`1<bool> SetIsFixedLength(IConventionProperty property, Nullable`1<bool> fixedLength, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIsFixedLengthConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static bool IsColumnNullable(IReadOnlyProperty property);
    [ExtensionAttribute]
public static bool IsColumnNullable(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    private static bool IsOptionalSharingDependent(IReadOnlyEntityType entityType, StoreObjectIdentifier& storeObject, int recursionDepth);
    [ExtensionAttribute]
public static string GetComment(IReadOnlyProperty property);
    [ExtensionAttribute]
public static string GetComment(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetComment(IMutableProperty property, string comment);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetComment(IConventionProperty property, string comment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetCommentConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static string GetCollation(IReadOnlyProperty property);
    [ExtensionAttribute]
public static string GetCollation(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetCollation(IMutableProperty property, string collation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetCollation(IConventionProperty property, string collation, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetCollationConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static RelationalTypeMapping GetRelationalTypeMapping(IReadOnlyProperty property);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static RelationalTypeMapping FindRelationalTypeMapping(IReadOnlyProperty property);
    [ExtensionAttribute]
public static RelationalTypeMapping FindRelationalTypeMapping(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IReadOnlyProperty FindSharedStoreObjectRootProperty(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IMutableProperty FindSharedStoreObjectRootProperty(IMutableProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IConventionProperty FindSharedStoreObjectRootProperty(IConventionProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IProperty FindSharedStoreObjectRootProperty(IProperty property, StoreObjectIdentifier& storeObject);
    private static IReadOnlyProperty FindSharedObjectRootProperty(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    private static IReadOnlyProperty FindSharedObjectRootPrimaryKeyProperty(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    private static IReadOnlyProperty FindSharedObjectRootConcurrencyTokenProperty(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IEnumerable`1<IReadOnlyRelationalPropertyOverrides> GetOverrides(IReadOnlyProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableRelationalPropertyOverrides> GetOverrides(IMutableProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionRelationalPropertyOverrides> GetOverrides(IConventionProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IRelationalPropertyOverrides> GetOverrides(IProperty property);
    [ExtensionAttribute]
public static IReadOnlyRelationalPropertyOverrides FindOverrides(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IMutableRelationalPropertyOverrides FindOverrides(IMutableProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IConventionRelationalPropertyOverrides FindOverrides(IConventionProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IRelationalPropertyOverrides FindOverrides(IProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IMutableRelationalPropertyOverrides GetOrCreateOverrides(IMutableProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IConventionRelationalPropertyOverrides GetOrCreateOverrides(IConventionProperty property, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IMutableRelationalPropertyOverrides RemoveOverrides(IMutableProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static IConventionRelationalPropertyOverrides RemoveOverrides(IConventionProperty property, StoreObjectIdentifier& storeObject);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.RelationalPropertyExtensions/<GetMappedStoreObjects>d__106")]
[ExtensionAttribute]
public static IEnumerable`1<StoreObjectIdentifier> GetMappedStoreObjects(IReadOnlyProperty property, StoreObjectType storeObjectType);
    [ExtensionAttribute]
public static object GetReaderFieldValue(IProperty property, RelationalDataReader relationalReader, int ordinal, bool detailedErrorsEnabled);
    private static Func`3<DbDataReader, int, object> CreateFieldValueGetter(IProperty property, bool detailedErrorsEnabled);
    private static TValue ThrowReadValueException(Exception exception, object value, IPropertyBase property);
    [ExtensionAttribute]
public static string GetJsonPropertyName(IReadOnlyProperty property);
    [ExtensionAttribute]
public static void SetJsonPropertyName(IMutableProperty property, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetJsonPropertyName(IConventionProperty property, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetJsonPropertyNameConfigurationSource(IConventionProperty property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalQueryableExtensions : object {
    internal static MethodInfo AsSingleQueryMethodInfo;
    internal static MethodInfo AsSplitQueryMethodInfo;
    internal static MethodInfo ExecuteDeleteMethodInfo;
    internal static MethodInfo ExecuteUpdateMethodInfo;
    private static RelationalQueryableExtensions();
    [ExtensionAttribute]
public static DbCommand CreateDbCommand(IQueryable source);
    [ExtensionAttribute]
[StringFormatMethodAttribute("sql")]
public static IQueryable`1<TEntity> FromSqlRaw(DbSet`1<TEntity> source, string sql, Object[] parameters);
    [ExtensionAttribute]
public static IQueryable`1<TEntity> FromSqlInterpolated(DbSet`1<TEntity> source, FormattableString sql);
    [ExtensionAttribute]
public static IQueryable`1<TEntity> FromSql(DbSet`1<TEntity> source, FormattableString sql);
    private static FromSqlQueryRootExpression GenerateFromSqlQueryRoot(IQueryable source, string sql, Object[] arguments, string memberName);
    [ExtensionAttribute]
public static IQueryable`1<TEntity> AsSingleQuery(IQueryable`1<TEntity> source);
    [ExtensionAttribute]
public static IQueryable`1<TEntity> AsSplitQuery(IQueryable`1<TEntity> source);
    [ExtensionAttribute]
public static int ExecuteDelete(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static Task`1<int> ExecuteDeleteAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static int ExecuteUpdate(IQueryable`1<TSource> source, Expression`1<Func`2<SetPropertyCalls`1<TSource>, SetPropertyCalls`1<TSource>>> setPropertyCalls);
    [ExtensionAttribute]
public static Task`1<int> ExecuteUpdateAsync(IQueryable`1<TSource> source, Expression`1<Func`2<SetPropertyCalls`1<TSource>, SetPropertyCalls`1<TSource>>> setPropertyCalls, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalTriggerBuilderExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionTriggerBuilder HasDatabaseName(IConventionTriggerBuilder triggerBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetDatabaseName(IConventionTriggerBuilder triggerBuilder, string name, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionTriggerBuilder HasTableName(IConventionTriggerBuilder triggerBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetTableName(IConventionTriggerBuilder triggerBuilder, string name, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionTriggerBuilder HasTableSchema(IConventionTriggerBuilder triggerBuilder, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetTableSchema(IConventionTriggerBuilder triggerBuilder, string schema, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalTriggerExtensions : object {
    [ExtensionAttribute]
public static string GetDatabaseName(IReadOnlyTrigger trigger);
    [ExtensionAttribute]
public static string GetDefaultDatabaseName(IReadOnlyTrigger trigger);
    [ExtensionAttribute]
public static string GetDatabaseName(IReadOnlyTrigger trigger, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static string GetDefaultDatabaseName(IReadOnlyTrigger trigger, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetDatabaseName(IMutableTrigger trigger, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetDatabaseName(IConventionTrigger trigger, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetDatabaseNameConfigurationSource(IConventionTrigger trigger);
    [ExtensionAttribute]
public static string GetTableName(IReadOnlyTrigger trigger);
    [ExtensionAttribute]
public static void SetTableName(IMutableTrigger trigger, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetTableName(IConventionTrigger trigger, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetTableNameConfigurationSource(IConventionTrigger trigger);
    [ExtensionAttribute]
public static string GetTableSchema(IReadOnlyTrigger trigger);
    [ExtensionAttribute]
public static void SetTableSchema(IMutableTrigger trigger, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetTableSchema(IConventionTrigger trigger, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetTableSchemaConfigurationSource(IConventionTrigger trigger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.RelationalTypeMappingConfigurationBuilderExtensions : object {
    [ExtensionAttribute]
public static TypeMappingConfigurationBuilder HasColumnType(TypeMappingConfigurationBuilder scalarBuilder, string typeName);
    [ExtensionAttribute]
public static TypeMappingConfigurationBuilder`1<TScalar> HasColumnType(TypeMappingConfigurationBuilder`1<TScalar> scalarBuilder, string typeName);
    [ExtensionAttribute]
public static TypeMappingConfigurationBuilder IsFixedLength(TypeMappingConfigurationBuilder scalarBuilder, bool fixedLength);
    [ExtensionAttribute]
public static TypeMappingConfigurationBuilder`1<TScalar> IsFixedLength(TypeMappingConfigurationBuilder`1<TScalar> scalarBuilder, bool fixedLength);
}
public abstract class Microsoft.EntityFrameworkCore.Scaffolding.DatabaseModelFactory : object {
    [NullableContextAttribute("1")]
public abstract virtual DatabaseModel Create(string connectionString, DatabaseModelFactoryOptions options);
    [NullableContextAttribute("1")]
public abstract virtual DatabaseModel Create(DbConnection connection, DatabaseModelFactoryOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.DatabaseModelFactoryOptions : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Tables>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Schemas>k__BackingField;
    public IEnumerable`1<string> Tables { get; }
    public IEnumerable`1<string> Schemas { get; }
    public DatabaseModelFactoryOptions(IEnumerable`1<string> tables, IEnumerable`1<string> schemas);
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<string> get_Tables();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<string> get_Schemas();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Scaffolding.IDatabaseModelFactory {
    public abstract virtual DatabaseModel Create(string connectionString, DatabaseModelFactoryOptions options);
    public abstract virtual DatabaseModel Create(DbConnection connection, DatabaseModelFactoryOptions options);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Scaffolding.IProviderCodeGeneratorPlugin {
    public abstract virtual MethodCallCodeFragment GenerateProviderOptions();
    public abstract virtual MethodCallCodeFragment GenerateContextOptions();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Scaffolding.IProviderConfigurationCodeGenerator {
    [NullableContextAttribute("2")]
public abstract virtual MethodCallCodeFragment GenerateProviderOptions();
    public abstract virtual MethodCallCodeFragment GenerateUseProvider(string connectionString, MethodCallCodeFragment providerOptions);
    [NullableContextAttribute("2")]
public abstract virtual MethodCallCodeFragment GenerateContextOptions();
    public virtual MethodCallCodeFragment GenerateUseProvider(string connectionString);
    internal MethodCallCodeFragment GenerateUseProviderInternal(string connectionString);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn : Annotatable {
    [CompilerGeneratedAttribute]
private DatabaseTable <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StoreType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValueSql>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ComputedColumnSql>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsStored>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Collation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ValueGenerated> <ValueGenerated>k__BackingField;
    [NullableAttribute("1")]
public DatabaseTable Table { get; public set; }
    [NullableAttribute("1")]
public string Name { get; public set; }
    public bool IsNullable { get; public set; }
    public string StoreType { get; public set; }
    public string DefaultValueSql { get; public set; }
    public string ComputedColumnSql { get; public set; }
    public Nullable`1<bool> IsStored { get; public set; }
    public string Comment { get; public set; }
    public string Collation { get; public set; }
    public Nullable`1<ValueGenerated> ValueGenerated { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual DatabaseTable get_Table();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual void set_Table(DatabaseTable value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string get_Name();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_StoreType();
    [CompilerGeneratedAttribute]
public virtual void set_StoreType(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DefaultValueSql();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultValueSql(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ComputedColumnSql();
    [CompilerGeneratedAttribute]
public virtual void set_ComputedColumnSql(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsStored();
    [CompilerGeneratedAttribute]
public virtual void set_IsStored(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual string get_Comment();
    [CompilerGeneratedAttribute]
public virtual void set_Comment(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Collation();
    [CompilerGeneratedAttribute]
public virtual void set_Collation(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<ValueGenerated> get_ValueGenerated();
    [CompilerGeneratedAttribute]
public virtual void set_ValueGenerated(Nullable`1<ValueGenerated> value);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseForeignKey : Annotatable {
    [CompilerGeneratedAttribute]
private DatabaseTable <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private DatabaseTable <PrincipalTable>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DatabaseColumn> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DatabaseColumn> <PrincipalColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReferentialAction> <OnDelete>k__BackingField;
    public DatabaseTable Table { get; public set; }
    public DatabaseTable PrincipalTable { get; public set; }
    public IList`1<DatabaseColumn> Columns { get; }
    public IList`1<DatabaseColumn> PrincipalColumns { get; }
    [NullableAttribute("2")]
public string Name { get; public set; }
    public Nullable`1<ReferentialAction> OnDelete { get; public set; }
    [CompilerGeneratedAttribute]
public virtual DatabaseTable get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(DatabaseTable value);
    [CompilerGeneratedAttribute]
public virtual DatabaseTable get_PrincipalTable();
    [CompilerGeneratedAttribute]
public virtual void set_PrincipalTable(DatabaseTable value);
    [CompilerGeneratedAttribute]
public virtual IList`1<DatabaseColumn> get_Columns();
    [CompilerGeneratedAttribute]
public virtual IList`1<DatabaseColumn> get_PrincipalColumns();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<ReferentialAction> get_OnDelete();
    [CompilerGeneratedAttribute]
public virtual void set_OnDelete(Nullable`1<ReferentialAction> value);
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseIndex : Annotatable {
    [CompilerGeneratedAttribute]
private DatabaseTable <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DatabaseColumn> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUnique>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<bool> <IsDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    public DatabaseTable Table { get; public set; }
    public string Name { get; public set; }
    [NullableAttribute("1")]
public IList`1<DatabaseColumn> Columns { get; }
    public bool IsUnique { get; public set; }
    [NullableAttribute("1")]
public IList`1<bool> IsDescending { get; public set; }
    public string Filter { get; public set; }
    [CompilerGeneratedAttribute]
public virtual DatabaseTable get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(DatabaseTable value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual IList`1<DatabaseColumn> get_Columns();
    [CompilerGeneratedAttribute]
public virtual bool get_IsUnique();
    [CompilerGeneratedAttribute]
public virtual void set_IsUnique(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual IList`1<bool> get_IsDescending();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual void set_IsDescending(IList`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual string get_Filter();
    [CompilerGeneratedAttribute]
public virtual void set_Filter(string value);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel : Annotatable {
    [CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Collation>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DatabaseTable> <Tables>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DatabaseSequence> <Sequences>k__BackingField;
    public string DatabaseName { get; public set; }
    public string DefaultSchema { get; public set; }
    public string Collation { get; public set; }
    [NullableAttribute("1")]
public IList`1<DatabaseTable> Tables { get; }
    [NullableAttribute("1")]
public IList`1<DatabaseSequence> Sequences { get; }
    [CompilerGeneratedAttribute]
public virtual string get_DatabaseName();
    [CompilerGeneratedAttribute]
public virtual void set_DatabaseName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DefaultSchema();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultSchema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Collation();
    [CompilerGeneratedAttribute]
public virtual void set_Collation(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual IList`1<DatabaseTable> get_Tables();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual IList`1<DatabaseSequence> get_Sequences();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabasePrimaryKey : Annotatable {
    [CompilerGeneratedAttribute]
private DatabaseTable <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DatabaseColumn> <Columns>k__BackingField;
    public DatabaseTable Table { get; public set; }
    public string Name { get; public set; }
    [NullableAttribute("1")]
public IList`1<DatabaseColumn> Columns { get; }
    [CompilerGeneratedAttribute]
public virtual DatabaseTable get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(DatabaseTable value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual IList`1<DatabaseColumn> get_Columns();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseSequence : Annotatable {
    [CompilerGeneratedAttribute]
private DatabaseModel <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StoreType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <StartValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <IncrementBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsCyclic>k__BackingField;
    public DatabaseModel Database { get; public set; }
    public string Name { get; public set; }
    [NullableAttribute("2")]
public string Schema { get; public set; }
    [NullableAttribute("2")]
public string StoreType { get; public set; }
    public Nullable`1<long> StartValue { get; public set; }
    public Nullable`1<int> IncrementBy { get; public set; }
    public Nullable`1<long> MinValue { get; public set; }
    public Nullable`1<long> MaxValue { get; public set; }
    public Nullable`1<bool> IsCyclic { get; public set; }
    [CompilerGeneratedAttribute]
public virtual DatabaseModel get_Database();
    [CompilerGeneratedAttribute]
public virtual void set_Database(DatabaseModel value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_StoreType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_StoreType(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_StartValue();
    [CompilerGeneratedAttribute]
public virtual void set_StartValue(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_IncrementBy();
    [CompilerGeneratedAttribute]
public virtual void set_IncrementBy(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_MinValue();
    [CompilerGeneratedAttribute]
public virtual void set_MinValue(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_MaxValue();
    [CompilerGeneratedAttribute]
public virtual void set_MaxValue(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsCyclic();
    [CompilerGeneratedAttribute]
public virtual void set_IsCyclic(Nullable`1<bool> value);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable : Annotatable {
    [CompilerGeneratedAttribute]
private DatabaseModel <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private DatabasePrimaryKey <PrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DatabaseColumn> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DatabaseUniqueConstraint> <UniqueConstraints>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DatabaseIndex> <Indexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DatabaseForeignKey> <ForeignKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DatabaseTrigger> <Triggers>k__BackingField;
    [NullableAttribute("2")]
public DatabaseModel Database { get; public set; }
    public string Name { get; public set; }
    [NullableAttribute("2")]
public string Schema { get; public set; }
    [NullableAttribute("2")]
public string Comment { get; public set; }
    [NullableAttribute("2")]
public DatabasePrimaryKey PrimaryKey { get; public set; }
    public IList`1<DatabaseColumn> Columns { get; }
    public IList`1<DatabaseUniqueConstraint> UniqueConstraints { get; }
    public IList`1<DatabaseIndex> Indexes { get; }
    public IList`1<DatabaseForeignKey> ForeignKeys { get; }
    public IList`1<DatabaseTrigger> Triggers { get; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual DatabaseModel get_Database();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Database(DatabaseModel value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Schema(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Comment();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Comment(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual DatabasePrimaryKey get_PrimaryKey();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_PrimaryKey(DatabasePrimaryKey value);
    [CompilerGeneratedAttribute]
public virtual IList`1<DatabaseColumn> get_Columns();
    [CompilerGeneratedAttribute]
public virtual IList`1<DatabaseUniqueConstraint> get_UniqueConstraints();
    [CompilerGeneratedAttribute]
public virtual IList`1<DatabaseIndex> get_Indexes();
    [CompilerGeneratedAttribute]
public virtual IList`1<DatabaseForeignKey> get_ForeignKeys();
    [CompilerGeneratedAttribute]
public virtual IList`1<DatabaseTrigger> get_Triggers();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTrigger : Annotatable {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseUniqueConstraint : Annotatable {
    [CompilerGeneratedAttribute]
private DatabaseTable <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DatabaseColumn> <Columns>k__BackingField;
    public DatabaseTable Table { get; public set; }
    [NullableAttribute("2")]
public string Name { get; public set; }
    public IList`1<DatabaseColumn> Columns { get; }
    [CompilerGeneratedAttribute]
public virtual DatabaseTable get_Table();
    [CompilerGeneratedAttribute]
public virtual void set_Table(DatabaseTable value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual IList`1<DatabaseColumn> get_Columns();
    public virtual string ToString();
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseView : DatabaseTable {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGenerator : object {
    [CompilerGeneratedAttribute]
private ProviderCodeGeneratorDependencies <Dependencies>k__BackingField;
    protected ProviderCodeGeneratorDependencies Dependencies { get; }
    protected ProviderCodeGenerator(ProviderCodeGeneratorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderCodeGeneratorDependencies get_Dependencies();
    [NullableContextAttribute("2")]
public virtual MethodCallCodeFragment GenerateProviderOptions();
    public abstract virtual MethodCallCodeFragment GenerateUseProvider(string connectionString, MethodCallCodeFragment providerOptions);
    [NullableContextAttribute("2")]
public virtual MethodCallCodeFragment GenerateContextOptions();
    public virtual MethodCallCodeFragment GenerateUseProvider(string connectionString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGeneratorDependencies : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IProviderCodeGeneratorPlugin> <Plugins>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IEnumerable`1<IProviderCodeGeneratorPlugin> Plugins { get; public set; }
    [EntityFrameworkInternalAttribute]
public ProviderCodeGeneratorDependencies(IEnumerable`1<IProviderCodeGeneratorPlugin> plugins);
    [CompilerGeneratedAttribute]
private ProviderCodeGeneratorDependencies(ProviderCodeGeneratorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IProviderCodeGeneratorPlugin> get_Plugins();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Plugins(IEnumerable`1<IProviderCodeGeneratorPlugin> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ProviderCodeGeneratorDependencies left, ProviderCodeGeneratorDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ProviderCodeGeneratorDependencies left, ProviderCodeGeneratorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ProviderCodeGeneratorDependencies other);
    [CompilerGeneratedAttribute]
public ProviderCodeGeneratorDependencies <Clone>$();
}
public class Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGeneratorPlugin : object {
    [NullableContextAttribute("2")]
public virtual MethodCallCodeFragment GenerateContextOptions();
    [NullableContextAttribute("2")]
public virtual MethodCallCodeFragment GenerateProviderOptions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.BoolTypeMapping : RelationalTypeMapping {
    public BoolTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected BoolTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.ByteArrayTypeMapping : RelationalTypeMapping {
    public ByteArrayTypeMapping(string storeType, Nullable`1<DbType> dbType, Nullable`1<int> size);
    protected ByteArrayTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.ByteTypeMapping : RelationalTypeMapping {
    public ByteTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected ByteTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.CharTypeMapping : RelationalTypeMapping {
    public CharTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected CharTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.DateOnlyTypeMapping : RelationalTypeMapping {
    private static string DateOnlyFormatConst;
    protected string SqlLiteralFormatString { get; }
    public DateOnlyTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected DateOnlyTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string get_SqlLiteralFormatString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.DateTimeOffsetTypeMapping : RelationalTypeMapping {
    private static string DateTimeOffsetFormatConst;
    protected string SqlLiteralFormatString { get; }
    public DateTimeOffsetTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected DateTimeOffsetTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string get_SqlLiteralFormatString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.DateTimeTypeMapping : RelationalTypeMapping {
    private static string DateTimeFormatConst;
    protected string SqlLiteralFormatString { get; }
    public DateTimeTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected DateTimeTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string get_SqlLiteralFormatString();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Storage.DbContextTransactionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static DbTransaction GetDbTransaction(IDbContextTransaction dbContextTransaction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.DecimalTypeMapping : RelationalTypeMapping {
    private static string DecimalFormatConst;
    protected string SqlLiteralFormatString { get; }
    public DecimalTypeMapping(string storeType, Nullable`1<DbType> dbType, Nullable`1<int> precision, Nullable`1<int> scale);
    protected DecimalTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string get_SqlLiteralFormatString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.DoubleTypeMapping : RelationalTypeMapping {
    public DoubleTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected DoubleTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.FloatTypeMapping : RelationalTypeMapping {
    public FloatTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected FloatTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.GuidTypeMapping : RelationalTypeMapping {
    protected string SqlLiteralFormatString { get; }
    public GuidTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected GuidTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string get_SqlLiteralFormatString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.Internal.CompositeRelationalParameter : RelationalParameterBase {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IRelationalParameter> <RelationalParameters>k__BackingField;
    public IReadOnlyList`1<IRelationalParameter> RelationalParameters { get; }
    public CompositeRelationalParameter(string invariantName, IReadOnlyList`1<IRelationalParameter> relationalParameters);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<IRelationalParameter> get_RelationalParameters();
    public virtual void AddDbParameter(DbCommand command, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Storage.Internal.DbParameterCollectionExtensions : object {
    [ExtensionAttribute]
public static string FormatParameters(DbParameterCollection parameters, bool logParameterValues);
    [ExtensionAttribute]
public static string FormatParameter(DbParameter parameter, bool logParameterValues);
    public static string FormatParameter(string name, object value, bool hasValue, ParameterDirection direction, DbType dbType, bool nullable, int size, byte precision, byte scale);
    private static void FormatParameterValue(StringBuilder builder, object parameterValue);
    private static bool ShouldShowDbType(bool hasValue, DbType dbType, Type type);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.Internal.INamedConnectionStringResolver {
    public abstract virtual string ResolveConnectionString(string connectionString);
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.NamedConnectionStringResolver : NamedConnectionStringResolverBase {
    private IDbContextOptions _options;
    [NullableAttribute("2")]
protected IServiceProvider ApplicationServiceProvider { get; }
    [NullableContextAttribute("1")]
public NamedConnectionStringResolver(IDbContextOptions options);
    [NullableContextAttribute("2")]
protected virtual IServiceProvider get_ApplicationServiceProvider();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Storage.Internal.NamedConnectionStringResolverBase : object {
    private static string DefaultSection;
    protected IServiceProvider ApplicationServiceProvider { get; }
    protected abstract virtual IServiceProvider get_ApplicationServiceProvider();
    [NullableContextAttribute("1")]
public virtual string ResolveConnectionString(string connectionString);
    private static string TryGetConnectionName(string connectionString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.Internal.RawRelationalParameter : RelationalParameterBase {
    private DbParameter _parameter;
    public RawRelationalParameter(string invariantName, DbParameter parameter);
    public virtual void AddDbParameter(DbCommand command, IReadOnlyDictionary`2<string, object> parameterValues);
    public virtual void AddDbParameter(DbCommand command, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.Internal.RawSqlCommandBuilder : object {
    private IRelationalCommandBuilderFactory _relationalCommandBuilderFactory;
    private ISqlGenerationHelper _sqlGenerationHelper;
    private IParameterNameGeneratorFactory _parameterNameGeneratorFactory;
    private IRelationalTypeMappingSource _typeMappingSource;
    public RawSqlCommandBuilder(IRelationalCommandBuilderFactory relationalCommandBuilderFactory, ISqlGenerationHelper sqlGenerationHelper, IParameterNameGeneratorFactory parameterNameGeneratorFactory, IRelationalTypeMappingSource typeMappingSource);
    public virtual IRelationalCommand Build(string sql);
    public virtual RawSqlCommand Build(string sql, IEnumerable`1<object> parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.Internal.RelationalDatabaseFacadeDependencies : object {
    [CompilerGeneratedAttribute]
private IDbContextTransactionManager <TransactionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IDatabaseCreator <DatabaseCreator>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecutionStrategy <ExecutionStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecutionStrategyFactory <ExecutionStrategyFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDatabaseProvider> <DatabaseProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalCommandDiagnosticsLogger <CommandLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private IConcurrencyDetector <ConcurrencyDetector>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalConnection <RelationalConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private IRawSqlCommandBuilder <RawSqlCommandBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private ICoreSingletonOptions <CoreOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsyncQueryProvider <QueryProvider>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public IDbContextTransactionManager TransactionManager { get; public set; }
    public IDatabaseCreator DatabaseCreator { get; public set; }
    public IExecutionStrategy ExecutionStrategy { get; public set; }
    public IExecutionStrategyFactory ExecutionStrategyFactory { get; public set; }
    public IEnumerable`1<IDatabaseProvider> DatabaseProviders { get; public set; }
    public IRelationalCommandDiagnosticsLogger CommandLogger { get; public set; }
    private IDiagnosticsLogger`1<Command> Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependencies.CommandLogger { get; }
    public IConcurrencyDetector ConcurrencyDetector { get; public set; }
    public IRelationalConnection RelationalConnection { get; public set; }
    public IRawSqlCommandBuilder RawSqlCommandBuilder { get; public set; }
    public ICoreSingletonOptions CoreOptions { get; public set; }
    public IAsyncQueryProvider QueryProvider { get; public set; }
    public RelationalDatabaseFacadeDependencies(IDbContextTransactionManager transactionManager, IDatabaseCreator databaseCreator, IExecutionStrategy executionStrategy, IExecutionStrategyFactory executionStrategyFactory, IEnumerable`1<IDatabaseProvider> databaseProviders, IRelationalCommandDiagnosticsLogger commandLogger, IConcurrencyDetector concurrencyDetector, IRelationalConnection relationalConnection, IRawSqlCommandBuilder rawSqlCommandBuilder, ICoreSingletonOptions coreOptions, IAsyncQueryProvider queryProvider);
    [CompilerGeneratedAttribute]
protected RelationalDatabaseFacadeDependencies(RelationalDatabaseFacadeDependencies original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual IDbContextTransactionManager get_TransactionManager();
    [CompilerGeneratedAttribute]
public virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TransactionManager(IDbContextTransactionManager value);
    [CompilerGeneratedAttribute]
public virtual IDatabaseCreator get_DatabaseCreator();
    [CompilerGeneratedAttribute]
public virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DatabaseCreator(IDatabaseCreator value);
    [CompilerGeneratedAttribute]
public virtual IExecutionStrategy get_ExecutionStrategy();
    [CompilerGeneratedAttribute]
public virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ExecutionStrategy(IExecutionStrategy value);
    [CompilerGeneratedAttribute]
public virtual IExecutionStrategyFactory get_ExecutionStrategyFactory();
    [CompilerGeneratedAttribute]
public virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ExecutionStrategyFactory(IExecutionStrategyFactory value);
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<IDatabaseProvider> get_DatabaseProviders();
    [CompilerGeneratedAttribute]
public virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DatabaseProviders(IEnumerable`1<IDatabaseProvider> value);
    [CompilerGeneratedAttribute]
public virtual IRelationalCommandDiagnosticsLogger get_CommandLogger();
    [CompilerGeneratedAttribute]
public virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CommandLogger(IRelationalCommandDiagnosticsLogger value);
    private sealed virtual override IDiagnosticsLogger`1<Command> Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependencies.get_CommandLogger();
    [CompilerGeneratedAttribute]
public virtual IConcurrencyDetector get_ConcurrencyDetector();
    [CompilerGeneratedAttribute]
public virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConcurrencyDetector(IConcurrencyDetector value);
    [CompilerGeneratedAttribute]
public virtual IRelationalConnection get_RelationalConnection();
    [CompilerGeneratedAttribute]
public virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RelationalConnection(IRelationalConnection value);
    [CompilerGeneratedAttribute]
public virtual IRawSqlCommandBuilder get_RawSqlCommandBuilder();
    [CompilerGeneratedAttribute]
public virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RawSqlCommandBuilder(IRawSqlCommandBuilder value);
    [CompilerGeneratedAttribute]
public virtual ICoreSingletonOptions get_CoreOptions();
    [CompilerGeneratedAttribute]
public virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CoreOptions(ICoreSingletonOptions value);
    [CompilerGeneratedAttribute]
public virtual IAsyncQueryProvider get_QueryProvider();
    [CompilerGeneratedAttribute]
public virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_QueryProvider(IAsyncQueryProvider value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalDatabaseFacadeDependencies left, RelationalDatabaseFacadeDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RelationalDatabaseFacadeDependencies left, RelationalDatabaseFacadeDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(RelationalDatabaseFacadeDependencies other);
    [CompilerGeneratedAttribute]
public virtual RelationalDatabaseFacadeDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Storage.Internal.RelationalParameterBase : object {
    [CompilerGeneratedAttribute]
private string <InvariantName>k__BackingField;
    public string InvariantName { get; }
    protected RelationalParameterBase(string invariantName);
    [CompilerGeneratedAttribute]
public virtual string get_InvariantName();
    public abstract virtual void AddDbParameter(DbCommand command, object value);
    public virtual void AddDbParameter(DbCommand command, IReadOnlyDictionary`2<string, object> parameterValues);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.Internal.TypeMappedRelationalParameter : RelationalParameterBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <RelationalTypeMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsNullable>k__BackingField;
    public string Name { get; }
    public ParameterDirection Direction { get; }
    internal RelationalTypeMapping RelationalTypeMapping { get; }
    internal Nullable`1<bool> IsNullable { get; }
    public TypeMappedRelationalParameter(string invariantName, string name, RelationalTypeMapping relationalTypeMapping, Nullable`1<bool> nullable, ParameterDirection direction);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual ParameterDirection get_Direction();
    [CompilerGeneratedAttribute]
internal RelationalTypeMapping get_RelationalTypeMapping();
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_IsNullable();
    public virtual void AddDbParameter(DbCommand command, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.IntTypeMapping : RelationalTypeMapping {
    public IntTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected IntTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory {
    public abstract virtual ParameterNameGenerator Create();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder {
    public abstract virtual IRelationalCommand Build(string sql);
    public abstract virtual RawSqlCommand Build(string sql, IEnumerable`1<object> parameters);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalCommand {
    public abstract virtual int ExecuteNonQuery(RelationalCommandParameterObject parameterObject);
    public abstract virtual Task`1<int> ExecuteNonQueryAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public abstract virtual object ExecuteScalar(RelationalCommandParameterObject parameterObject);
    public abstract virtual Task`1<object> ExecuteScalarAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken);
    public abstract virtual RelationalDataReader ExecuteReader(RelationalCommandParameterObject parameterObject);
    public abstract virtual Task`1<RelationalDataReader> ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken);
    public abstract virtual void PopulateFrom(IRelationalCommandTemplate commandTemplate);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder {
    public IReadOnlyList`1<IRelationalParameter> Parameters { get; }
    [ObsoleteAttribute("Code trying to add parameter should add type mapped parameter using TypeMappingSource directly.")]
public IRelationalTypeMappingSource TypeMappingSource { get; }
    public int CommandTextLength { get; }
    public abstract virtual IReadOnlyList`1<IRelationalParameter> get_Parameters();
    public abstract virtual IRelationalCommandBuilder AddParameter(IRelationalParameter parameter);
    public abstract virtual IRelationalCommandBuilder RemoveParameterAt(int index);
    public abstract virtual IRelationalTypeMappingSource get_TypeMappingSource();
    public abstract virtual IRelationalCommand Build();
    public abstract virtual IRelationalCommandBuilder Append(string value);
    public abstract virtual IRelationalCommandBuilder AppendLine();
    public abstract virtual IRelationalCommandBuilder IncrementIndent();
    public abstract virtual IRelationalCommandBuilder DecrementIndent();
    public abstract virtual int get_CommandTextLength();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory {
    public abstract virtual IRelationalCommandBuilder Create();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalCommandTemplate {
    public string CommandText { get; }
    public IReadOnlyList`1<IRelationalParameter> Parameters { get; }
    public abstract virtual string get_CommandText();
    public abstract virtual IReadOnlyList`1<IRelationalParameter> get_Parameters();
    public abstract virtual DbCommand CreateDbCommand(RelationalCommandParameterObject parameterObject, Guid commandId, DbCommandMethod commandMethod);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalConnection {
    [NullableAttribute("2")]
public string ConnectionString { get; public set; }
    public DbConnection DbConnection { get; public set; }
    public DbContext Context { get; }
    public Guid ConnectionId { get; }
    public Nullable`1<int> CommandTimeout { get; public set; }
    [NullableAttribute("2")]
public IDbContextTransaction CurrentTransaction { get; }
    [NullableContextAttribute("2")]
public abstract virtual string get_ConnectionString();
    [NullableContextAttribute("2")]
public abstract virtual void set_ConnectionString(string value);
    public abstract virtual DbConnection get_DbConnection();
    public abstract virtual void set_DbConnection(DbConnection value);
    public abstract virtual DbContext get_Context();
    public abstract virtual Guid get_ConnectionId();
    public abstract virtual Nullable`1<int> get_CommandTimeout();
    public abstract virtual void set_CommandTimeout(Nullable`1<int> value);
    public abstract virtual bool Open(bool errorsExpected);
    public abstract virtual Task`1<bool> OpenAsync(CancellationToken cancellationToken, bool errorsExpected);
    public abstract virtual bool Close();
    public abstract virtual Task`1<bool> CloseAsync();
    public abstract virtual IRelationalCommand RentCommand();
    public abstract virtual void ReturnCommand(IRelationalCommand command);
    [NullableContextAttribute("2")]
public abstract virtual IDbContextTransaction get_CurrentTransaction();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator {
    public abstract virtual bool Exists();
    public abstract virtual Task`1<bool> ExistsAsync(CancellationToken cancellationToken);
    public abstract virtual bool HasTables();
    public abstract virtual Task`1<bool> HasTablesAsync(CancellationToken cancellationToken);
    public abstract virtual void Create();
    public abstract virtual Task CreateAsync(CancellationToken cancellationToken);
    public abstract virtual void Delete();
    public abstract virtual Task DeleteAsync(CancellationToken cancellationToken);
    public abstract virtual void CreateTables();
    public abstract virtual Task CreateTablesAsync(CancellationToken cancellationToken);
    public abstract virtual string GenerateCreateScript();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseFacadeDependencies {
    public IRelationalConnection RelationalConnection { get; }
    public IRawSqlCommandBuilder RawSqlCommandBuilder { get; }
    public IRelationalCommandDiagnosticsLogger CommandLogger { get; }
    public abstract virtual IRelationalConnection get_RelationalConnection();
    public abstract virtual IRawSqlCommandBuilder get_RawSqlCommandBuilder();
    public abstract virtual IRelationalCommandDiagnosticsLogger get_CommandLogger();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalParameter {
    public string InvariantName { get; }
    public abstract virtual string get_InvariantName();
    public abstract virtual void AddDbParameter(DbCommand command, object value);
    public abstract virtual void AddDbParameter(DbCommand command, IReadOnlyDictionary`2<string, object> parameterValues);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionFactory {
    public abstract virtual RelationalTransaction Create(IRelationalConnection connection, DbTransaction transaction, Guid transactionId, IDiagnosticsLogger`1<Transaction> logger, bool transactionOwned);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager {
    [NullableContextAttribute("1")]
public abstract virtual IDbContextTransaction BeginTransaction(IsolationLevel isolationLevel);
    [NullableContextAttribute("1")]
public abstract virtual Task`1<IDbContextTransaction> BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken);
    public abstract virtual IDbContextTransaction UseTransaction(DbTransaction transaction);
    public abstract virtual IDbContextTransaction UseTransaction(DbTransaction transaction, Guid transactionId);
    public abstract virtual Task`1<IDbContextTransaction> UseTransactionAsync(DbTransaction transaction, CancellationToken cancellationToken);
    public abstract virtual Task`1<IDbContextTransaction> UseTransactionAsync(DbTransaction transaction, Guid transactionId, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource {
    public abstract virtual RelationalTypeMapping FindMapping(IProperty property);
    public abstract virtual RelationalTypeMapping FindMapping(MemberInfo member);
    public abstract virtual RelationalTypeMapping FindMapping(Type type);
    public abstract virtual RelationalTypeMapping FindMapping(Type type, IModel model);
    public abstract virtual RelationalTypeMapping FindMapping(string storeTypeName);
    [NullableContextAttribute("2")]
public abstract virtual RelationalTypeMapping FindMapping(Type type, string storeTypeName, bool keyOrIndex, Nullable`1<bool> unicode, Nullable`1<int> size, Nullable`1<bool> rowVersion, Nullable`1<bool> fixedLength, Nullable`1<int> precision, Nullable`1<int> scale);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSourcePlugin {
    public abstract virtual RelationalTypeMapping FindMapping(RelationalTypeMappingInfo& modreq(System.Runtime.InteropServices.InAttribute) mappingInfo);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper {
    public string StatementTerminator { get; }
    public string BatchTerminator { get; }
    public string StartTransactionStatement { get; }
    public string CommitTransactionStatement { get; }
    public string SingleLineCommentToken { get; }
    public abstract virtual string get_StatementTerminator();
    public abstract virtual string get_BatchTerminator();
    public abstract virtual string get_StartTransactionStatement();
    public abstract virtual string get_CommitTransactionStatement();
    public abstract virtual string get_SingleLineCommentToken();
    public abstract virtual string GenerateParameterName(string name);
    public abstract virtual void GenerateParameterName(StringBuilder builder, string name);
    public abstract virtual string GenerateParameterNamePlaceholder(string name);
    public abstract virtual void GenerateParameterNamePlaceholder(StringBuilder builder, string name);
    public abstract virtual string DelimitIdentifier(string identifier);
    public abstract virtual void DelimitIdentifier(StringBuilder builder, string identifier);
    public abstract virtual string DelimitIdentifier(string name, string schema);
    public abstract virtual void DelimitIdentifier(StringBuilder builder, string name, string schema);
    public abstract virtual string GenerateComment(string text);
    public abstract virtual string GenerateCreateSavepointStatement(string name);
    public abstract virtual string GenerateRollbackToSavepointStatement(string name);
    public abstract virtual string GenerateReleaseSavepointStatement(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Storage.JsonTypeMapping : RelationalTypeMapping {
    protected JsonTypeMapping(string storeType, Type clrType, Nullable`1<DbType> dbType);
    protected JsonTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.LongTypeMapping : RelationalTypeMapping {
    public LongTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected LongTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
public class Microsoft.EntityFrameworkCore.Storage.ParameterNameGenerator : object {
    private int _count;
    [NullableContextAttribute("1")]
public virtual string GenerateNext();
    public virtual void Reset();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.ParameterNameGeneratorDependencies : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private ParameterNameGeneratorDependencies(ParameterNameGeneratorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ParameterNameGeneratorDependencies left, ParameterNameGeneratorDependencies right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ParameterNameGeneratorDependencies left, ParameterNameGeneratorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ParameterNameGeneratorDependencies other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public ParameterNameGeneratorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.ParameterNameGeneratorFactory : object {
    [CompilerGeneratedAttribute]
private ParameterNameGeneratorDependencies <Dependencies>k__BackingField;
    protected ParameterNameGeneratorDependencies Dependencies { get; }
    public ParameterNameGeneratorFactory(ParameterNameGeneratorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ParameterNameGeneratorDependencies get_Dependencies();
    public virtual ParameterNameGenerator Create();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.RawSqlCommand : object {
    [CompilerGeneratedAttribute]
private IRelationalCommand <RelationalCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <ParameterValues>k__BackingField;
    public IRelationalCommand RelationalCommand { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> ParameterValues { get; }
    public RawSqlCommand(IRelationalCommand relationalCommand, IReadOnlyDictionary`2<string, object> parameterValues);
    [CompilerGeneratedAttribute]
public virtual IRelationalCommand get_RelationalCommand();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyDictionary`2<string, object> get_ParameterValues();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Storage.ReaderColumn : object {
    private static ConcurrentDictionary`2<Type, ConstructorInfo> Constructors;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IPropertyBase <Property>k__BackingField;
    [NullableAttribute("1")]
public Type Type { get; }
    public bool IsNullable { get; }
    public string Name { get; }
    public IPropertyBase Property { get; }
    protected ReaderColumn(Type type, bool nullable, string name, IPropertyBase property);
    private static ReaderColumn();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual Type get_Type();
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual IPropertyBase get_Property();
    [NullableContextAttribute("1")]
public static ReaderColumn Create(Type type, bool nullable, string columnName, IPropertyBase property, object readFunc);
    private static ConstructorInfo GetConstructor(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.ReaderColumn`1 : ReaderColumn {
    [CompilerGeneratedAttribute]
private Func`3<DbDataReader, Int32[], T> <GetFieldValue>k__BackingField;
    public Func`3<DbDataReader, Int32[], T> GetFieldValue { get; }
    [NullableContextAttribute("2")]
public ReaderColumn`1(bool nullable, string name, IPropertyBase property, Func`3<DbDataReader, Int32[], T> getFieldValue);
    [CompilerGeneratedAttribute]
public virtual Func`3<DbDataReader, Int32[], T> get_GetFieldValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.RelationalCommand : object {
    private RelationalDataReader _relationalReader;
    private Stopwatch _stopwatch;
    [CompilerGeneratedAttribute]
private RelationalCommandBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandText>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IRelationalParameter> <Parameters>k__BackingField;
    protected RelationalCommandBuilderDependencies Dependencies { get; }
    public string CommandText { get; private set; }
    public IReadOnlyList`1<IRelationalParameter> Parameters { get; private set; }
    public RelationalCommand(RelationalCommandBuilderDependencies dependencies, string commandText, IReadOnlyList`1<IRelationalParameter> parameters);
    [CompilerGeneratedAttribute]
protected virtual RelationalCommandBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
public virtual string get_CommandText();
    [CompilerGeneratedAttribute]
private void set_CommandText(string value);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<IRelationalParameter> get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(IReadOnlyList`1<IRelationalParameter> value);
    public virtual int ExecuteNonQuery(RelationalCommandParameterObject parameterObject);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalCommand/<ExecuteNonQueryAsync>d__15")]
public virtual Task`1<int> ExecuteNonQueryAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual object ExecuteScalar(RelationalCommandParameterObject parameterObject);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalCommand/<ExecuteScalarAsync>d__17")]
public virtual Task`1<object> ExecuteScalarAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken);
    public virtual RelationalDataReader ExecuteReader(RelationalCommandParameterObject parameterObject);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalCommand/<ExecuteReaderAsync>d__19")]
public virtual Task`1<RelationalDataReader> ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken);
    public virtual DbCommand CreateDbCommand(RelationalCommandParameterObject parameterObject, Guid commandId, DbCommandMethod commandMethod);
    private static void CleanupCommand(DbCommand command, IRelationalConnection connection);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalCommand/<CleanupCommandAsync>d__22")]
private static Task CleanupCommandAsync(DbCommand command, IRelationalConnection connection);
    protected virtual RelationalDataReader CreateRelationalDataReader();
    public virtual void PopulateFrom(IRelationalCommandTemplate commandTemplate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilder : object {
    private List`1<IRelationalParameter> _parameters;
    private IndentedStringBuilder _commandTextBuilder;
    [CompilerGeneratedAttribute]
private RelationalCommandBuilderDependencies <Dependencies>k__BackingField;
    protected RelationalCommandBuilderDependencies Dependencies { get; }
    [ObsoleteAttribute("Code trying to add parameter should add type mapped parameter using TypeMappingSource directly.")]
public IRelationalTypeMappingSource TypeMappingSource { get; }
    public IReadOnlyList`1<IRelationalParameter> Parameters { get; }
    public int CommandTextLength { get; }
    public RelationalCommandBuilder(RelationalCommandBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalCommandBuilderDependencies get_Dependencies();
    public virtual IRelationalTypeMappingSource get_TypeMappingSource();
    public virtual IRelationalCommand Build();
    public virtual string ToString();
    public virtual IReadOnlyList`1<IRelationalParameter> get_Parameters();
    public virtual IRelationalCommandBuilder AddParameter(IRelationalParameter parameter);
    public virtual IRelationalCommandBuilder RemoveParameterAt(int index);
    public virtual IRelationalCommandBuilder Append(string value);
    public virtual IRelationalCommandBuilder AppendLine();
    public virtual IRelationalCommandBuilder IncrementIndent();
    public virtual IRelationalCommandBuilder DecrementIndent();
    public virtual int get_CommandTextLength();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderDependencies : object {
    [CompilerGeneratedAttribute]
private IExceptionDetector <ExceptionDetector>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <TypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IExceptionDetector ExceptionDetector { get; public set; }
    [ObsoleteAttribute("RelationalCommandBuilder doesn't need TypeMappingSource. Derived class should inject the service if needed.")]
public IRelationalTypeMappingSource TypeMappingSource { get; public set; }
    [EntityFrameworkInternalAttribute]
public RelationalCommandBuilderDependencies(IRelationalTypeMappingSource typeMappingSource, IExceptionDetector exceptionDetector);
    [CompilerGeneratedAttribute]
private RelationalCommandBuilderDependencies(RelationalCommandBuilderDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IExceptionDetector get_ExceptionDetector();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ExceptionDetector(IExceptionDetector value);
    [CompilerGeneratedAttribute]
public IRelationalTypeMappingSource get_TypeMappingSource();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeMappingSource(IRelationalTypeMappingSource value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalCommandBuilderDependencies left, RelationalCommandBuilderDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RelationalCommandBuilderDependencies left, RelationalCommandBuilderDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalCommandBuilderDependencies other);
    [CompilerGeneratedAttribute]
public RelationalCommandBuilderDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions : object {
    [ExtensionAttribute]
public static IRelationalCommandBuilder AppendLine(IRelationalCommandBuilder commandBuilder, string value);
    [ExtensionAttribute]
public static IRelationalCommandBuilder AppendLines(IRelationalCommandBuilder commandBuilder, string value, bool skipFinalNewline);
    [ExtensionAttribute]
public static IDisposable Indent(IRelationalCommandBuilder commandBuilder);
    [ExtensionAttribute]
[ObsoleteAttribute("Use overload which takes TypeMapping argument.")]
public static IRelationalCommandBuilder AddParameter(IRelationalCommandBuilder commandBuilder, string invariantName, string name);
    [ExtensionAttribute]
public static IRelationalCommandBuilder AddParameter(IRelationalCommandBuilder commandBuilder, string invariantName, string name, RelationalTypeMapping relationalTypeMapping, Nullable`1<bool> nullable, ParameterDirection direction);
    [ExtensionAttribute]
public static IRelationalCommandBuilder AddCompositeParameter(IRelationalCommandBuilder commandBuilder, string invariantName, IReadOnlyList`1<IRelationalParameter> subParameters);
    [ExtensionAttribute]
public static IRelationalCommandBuilder AddRawParameter(IRelationalCommandBuilder commandBuilder, string invariantName, DbParameter dbParameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderFactory : object {
    [CompilerGeneratedAttribute]
private RelationalCommandBuilderDependencies <Dependencies>k__BackingField;
    protected RelationalCommandBuilderDependencies Dependencies { get; }
    public RelationalCommandBuilderFactory(RelationalCommandBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalCommandBuilderDependencies get_Dependencies();
    public virtual IRelationalCommandBuilder Create();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject : ValueType {
    [CompilerGeneratedAttribute]
private IRelationalConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <ParameterValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ReaderColumn> <ReaderColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalCommandDiagnosticsLogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DetailedErrorsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandSource <CommandSource>k__BackingField;
    [NullableAttribute("1")]
public IRelationalConnection Connection { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> ParameterValues { get; }
    public IReadOnlyList`1<ReaderColumn> ReaderColumns { get; }
    public DbContext Context { get; }
    public IRelationalCommandDiagnosticsLogger Logger { get; }
    public bool DetailedErrorsEnabled { get; }
    public CommandSource CommandSource { get; }
    public RelationalCommandParameterObject(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, IReadOnlyList`1<ReaderColumn> readerColumns, DbContext context, IRelationalCommandDiagnosticsLogger logger);
    public RelationalCommandParameterObject(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, IReadOnlyList`1<ReaderColumn> readerColumns, DbContext context, IRelationalCommandDiagnosticsLogger logger, CommandSource commandSource);
    public RelationalCommandParameterObject(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, IReadOnlyList`1<ReaderColumn> readerColumns, DbContext context, IRelationalCommandDiagnosticsLogger logger, bool detailedErrorsEnabled);
    public RelationalCommandParameterObject(IRelationalConnection connection, IReadOnlyDictionary`2<string, object> parameterValues, IReadOnlyList`1<ReaderColumn> readerColumns, DbContext context, IRelationalCommandDiagnosticsLogger logger, bool detailedErrorsEnabled, CommandSource commandSource);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IRelationalConnection get_Connection();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_ParameterValues();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ReaderColumn> get_ReaderColumns();
    [CompilerGeneratedAttribute]
public DbContext get_Context();
    [CompilerGeneratedAttribute]
public IRelationalCommandDiagnosticsLogger get_Logger();
    [CompilerGeneratedAttribute]
public bool get_DetailedErrorsEnabled();
    [CompilerGeneratedAttribute]
public CommandSource get_CommandSource();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Storage.RelationalConnection : object {
    private string _connectionString;
    private bool _connectionOwned;
    private int _openedCount;
    private bool _openedInternally;
    private Nullable`1<int> _commandTimeout;
    private Nullable`1<int> _defaultCommandTimeout;
    private ConcurrentStack`1<Transaction> _ambientTransactions;
    private DbConnection _connection;
    private IRelationalCommandBuilder _relationalCommandBuilder;
    private IRelationalCommand _cachedRelationalCommand;
    private Stopwatch _stopwatch;
    [CompilerGeneratedAttribute]
private Guid <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConnectionDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbContextTransaction <CurrentTransaction>k__BackingField;
    private Transaction _enlistedTransaction;
    public Guid ConnectionId { get; }
    public DbContext Context { get; }
    protected RelationalConnectionDependencies Dependencies { get; }
    [NullableAttribute("2")]
public string ConnectionString { get; public set; }
    public DbConnection DbConnection { get; public set; }
    [NullableAttribute("2")]
public Transaction CurrentAmbientTransaction { get; }
    [NullableAttribute("2")]
public IDbContextTransaction CurrentTransaction { get; protected set; }
    [NullableAttribute("2")]
public Transaction EnlistedTransaction { get; protected set; }
    protected bool SupportsAmbientTransactions { get; }
    public Nullable`1<int> CommandTimeout { get; public set; }
    protected RelationalConnection(RelationalConnectionDependencies dependencies);
    [CompilerGeneratedAttribute]
public virtual Guid get_ConnectionId();
    [CompilerGeneratedAttribute]
public virtual DbContext get_Context();
    [CompilerGeneratedAttribute]
protected virtual RelationalConnectionDependencies get_Dependencies();
    protected abstract virtual DbConnection CreateDbConnection();
    [NullableContextAttribute("2")]
public virtual string get_ConnectionString();
    [NullableContextAttribute("2")]
public virtual void set_ConnectionString(string value);
    protected virtual string GetValidatedConnectionString();
    public virtual DbConnection get_DbConnection();
    public virtual void set_DbConnection(DbConnection value);
    [NullableContextAttribute("2")]
public virtual Transaction get_CurrentAmbientTransaction();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual IDbContextTransaction get_CurrentTransaction();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected virtual void set_CurrentTransaction(IDbContextTransaction value);
    [NullableContextAttribute("2")]
public virtual Transaction get_EnlistedTransaction();
    [NullableContextAttribute("2")]
protected virtual void set_EnlistedTransaction(Transaction value);
    [NullableContextAttribute("2")]
public virtual void EnlistTransaction(Transaction transaction);
    [NullableContextAttribute("2")]
protected virtual void ConnectionEnlistTransaction(Transaction transaction);
    protected virtual bool get_SupportsAmbientTransactions();
    public virtual Nullable`1<int> get_CommandTimeout();
    public virtual void set_CommandTimeout(Nullable`1<int> value);
    public virtual IRelationalCommand RentCommand();
    public virtual void ReturnCommand(IRelationalCommand command);
    public virtual IDbContextTransaction BeginTransaction();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalConnection/<BeginTransactionAsync>d__48")]
public virtual Task`1<IDbContextTransaction> BeginTransactionAsync(CancellationToken cancellationToken);
    public virtual IDbContextTransaction BeginTransaction(IsolationLevel isolationLevel);
    protected virtual DbTransaction ConnectionBeginTransaction(IsolationLevel isolationLevel);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalConnection/<BeginTransactionAsync>d__51")]
public virtual Task`1<IDbContextTransaction> BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken);
    protected virtual ValueTask`1<DbTransaction> ConnectionBeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken);
    private void EnsureNoTransactions();
    private void EnsureNoAmbientOrEnlistedTransactions();
    private IDbContextTransaction CreateRelationalTransaction(DbTransaction transaction, Guid transactionId, bool transactionOwned);
    [NullableContextAttribute("2")]
public virtual IDbContextTransaction UseTransaction(DbTransaction transaction);
    [NullableContextAttribute("2")]
public virtual IDbContextTransaction UseTransaction(DbTransaction transaction, Guid transactionId);
    [NullableContextAttribute("2")]
public virtual Task`1<IDbContextTransaction> UseTransactionAsync(DbTransaction transaction, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalConnection/<UseTransactionAsync>d__59")]
public virtual Task`1<IDbContextTransaction> UseTransactionAsync(DbTransaction transaction, Guid transactionId, CancellationToken cancellationToken);
    private bool ShouldUseTransaction(DbTransaction transaction);
    public virtual void CommitTransaction();
    public virtual Task CommitTransactionAsync(CancellationToken cancellationToken);
    public virtual void RollbackTransaction();
    public virtual Task RollbackTransactionAsync(CancellationToken cancellationToken);
    public virtual bool Open(bool errorsExpected);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalConnection/<OpenAsync>d__66")]
public virtual Task`1<bool> OpenAsync(CancellationToken cancellationToken, bool errorsExpected);
    private void ClearTransactions(bool clearAmbient);
    private void OpenInternal(bool errorsExpected);
    protected virtual void OpenDbConnection(bool errorsExpected);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalConnection/<OpenInternalAsync>d__70")]
private Task OpenInternalAsync(bool errorsExpected, CancellationToken cancellationToken);
    protected virtual Task OpenDbConnectionAsync(bool errorsExpected, CancellationToken cancellationToken);
    private void HandleAmbientTransactions();
    private void HandleTransactionCompleted(object sender, TransactionEventArgs e);
    public virtual bool Close();
    protected virtual void CloseDbConnection();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalConnection/<CloseAsync>d__76")]
public virtual Task`1<bool> CloseAsync();
    protected virtual Task CloseDbConnectionAsync();
    private bool ShouldClose();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetState();
    private sealed virtual override Task Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetStateAsync(CancellationToken cancellationToken);
    public virtual void Dispose();
    public virtual ValueTask DisposeAsync();
    protected virtual void ResetState(bool disposeDbConnection);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalConnection/<ResetStateAsync>d__85")]
protected virtual ValueTask ResetStateAsync(bool disposeDbConnection);
    protected virtual void DisposeDbConnection();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalConnection/<DisposeDbConnectionAsync>d__87")]
protected virtual ValueTask DisposeDbConnectionAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.RelationalConnectionDependencies : object {
    [CompilerGeneratedAttribute]
private IDbContextOptions <ContextOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Transaction> <TransactionLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalConnectionDiagnosticsLogger <ConnectionLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedConnectionStringResolver <ConnectionStringResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalTransactionFactory <RelationalTransactionFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalCommandBuilderFactory <RelationalCommandBuilderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IDbContextOptions ContextOptions { get; public set; }
    public IDiagnosticsLogger`1<Transaction> TransactionLogger { get; public set; }
    public IRelationalConnectionDiagnosticsLogger ConnectionLogger { get; public set; }
    [EntityFrameworkInternalAttribute]
public INamedConnectionStringResolver ConnectionStringResolver { get; public set; }
    public IRelationalTransactionFactory RelationalTransactionFactory { get; public set; }
    public ICurrentDbContext CurrentContext { get; public set; }
    public IRelationalCommandBuilderFactory RelationalCommandBuilderFactory { get; public set; }
    [EntityFrameworkInternalAttribute]
public RelationalConnectionDependencies(IDbContextOptions contextOptions, IDiagnosticsLogger`1<Transaction> transactionLogger, IRelationalConnectionDiagnosticsLogger connectionLogger, INamedConnectionStringResolver connectionStringResolver, IRelationalTransactionFactory relationalTransactionFactory, ICurrentDbContext currentContext, IRelationalCommandBuilderFactory relationalCommandBuilderFactory);
    [CompilerGeneratedAttribute]
private RelationalConnectionDependencies(RelationalConnectionDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IDbContextOptions get_ContextOptions();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ContextOptions(IDbContextOptions value);
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Transaction> get_TransactionLogger();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TransactionLogger(IDiagnosticsLogger`1<Transaction> value);
    [CompilerGeneratedAttribute]
public IRelationalConnectionDiagnosticsLogger get_ConnectionLogger();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConnectionLogger(IRelationalConnectionDiagnosticsLogger value);
    [CompilerGeneratedAttribute]
public INamedConnectionStringResolver get_ConnectionStringResolver();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConnectionStringResolver(INamedConnectionStringResolver value);
    [CompilerGeneratedAttribute]
public IRelationalTransactionFactory get_RelationalTransactionFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RelationalTransactionFactory(IRelationalTransactionFactory value);
    [CompilerGeneratedAttribute]
public ICurrentDbContext get_CurrentContext();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CurrentContext(ICurrentDbContext value);
    [CompilerGeneratedAttribute]
public IRelationalCommandBuilderFactory get_RelationalCommandBuilderFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RelationalCommandBuilderFactory(IRelationalCommandBuilderFactory value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalConnectionDependencies left, RelationalConnectionDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RelationalConnectionDependencies left, RelationalConnectionDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalConnectionDependencies other);
    [CompilerGeneratedAttribute]
public RelationalConnectionDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.RelationalDatabase : Database {
    private IUpdateAdapter _updateAdapter;
    [CompilerGeneratedAttribute]
private RelationalDatabaseDependencies <RelationalDependencies>k__BackingField;
    private IUpdateAdapter UpdateAdapter { get; }
    protected RelationalDatabaseDependencies RelationalDependencies { get; }
    public RelationalDatabase(DatabaseDependencies dependencies, RelationalDatabaseDependencies relationalDependencies);
    private IUpdateAdapter get_UpdateAdapter();
    [CompilerGeneratedAttribute]
protected virtual RelationalDatabaseDependencies get_RelationalDependencies();
    public virtual int SaveChanges(IList`1<IUpdateEntry> entries);
    public virtual Task`1<int> SaveChangesAsync(IList`1<IUpdateEntry> entries, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator : object {
    [CompilerGeneratedAttribute]
private RelationalDatabaseCreatorDependencies <Dependencies>k__BackingField;
    protected RelationalDatabaseCreatorDependencies Dependencies { get; }
    protected RelationalDatabaseCreator(RelationalDatabaseCreatorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalDatabaseCreatorDependencies get_Dependencies();
    public abstract virtual bool Exists();
    public virtual Task`1<bool> ExistsAsync(CancellationToken cancellationToken);
    public abstract virtual void Create();
    public virtual Task CreateAsync(CancellationToken cancellationToken);
    public abstract virtual void Delete();
    public virtual Task DeleteAsync(CancellationToken cancellationToken);
    public virtual void CreateTables();
    public virtual Task CreateTablesAsync(CancellationToken cancellationToken);
    protected virtual IReadOnlyList`1<MigrationCommand> GetCreateTablesCommands(MigrationsSqlGenerationOptions options);
    public abstract virtual bool HasTables();
    public virtual Task`1<bool> HasTablesAsync(CancellationToken cancellationToken);
    public virtual bool EnsureDeleted();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator/<EnsureDeletedAsync>d__16")]
public virtual Task`1<bool> EnsureDeletedAsync(CancellationToken cancellationToken);
    public virtual bool EnsureCreated();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator/<EnsureCreatedAsync>d__18")]
public virtual Task`1<bool> EnsureCreatedAsync(CancellationToken cancellationToken);
    public virtual string GenerateCreateScript();
    public virtual bool CanConnect();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator/<CanConnectAsync>d__21")]
public virtual Task`1<bool> CanConnectAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies : object {
    [CompilerGeneratedAttribute]
private IMigrationsModelDiffer <ModelDiffer>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationsSqlGenerator <MigrationsSqlGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationCommandExecutor <MigrationCommandExecutor>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlGenerationHelper <SqlGenerationHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecutionStrategy <ExecutionStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalCommandDiagnosticsLogger <CommandLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IMigrationsModelDiffer ModelDiffer { get; public set; }
    public IMigrationsSqlGenerator MigrationsSqlGenerator { get; public set; }
    public IRelationalConnection Connection { get; public set; }
    public IMigrationCommandExecutor MigrationCommandExecutor { get; public set; }
    public ISqlGenerationHelper SqlGenerationHelper { get; public set; }
    public IExecutionStrategy ExecutionStrategy { get; }
    public IRelationalCommandDiagnosticsLogger CommandLogger { get; public set; }
    public ICurrentDbContext CurrentContext { get; public set; }
    [EntityFrameworkInternalAttribute]
public RelationalDatabaseCreatorDependencies(IRelationalConnection connection, IMigrationsModelDiffer modelDiffer, IMigrationsSqlGenerator migrationsSqlGenerator, IMigrationCommandExecutor migrationCommandExecutor, ISqlGenerationHelper sqlGenerationHelper, IExecutionStrategy executionStrategy, ICurrentDbContext currentContext, IRelationalCommandDiagnosticsLogger commandLogger);
    [CompilerGeneratedAttribute]
private RelationalDatabaseCreatorDependencies(RelationalDatabaseCreatorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IMigrationsModelDiffer get_ModelDiffer();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModelDiffer(IMigrationsModelDiffer value);
    [CompilerGeneratedAttribute]
public IMigrationsSqlGenerator get_MigrationsSqlGenerator();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MigrationsSqlGenerator(IMigrationsSqlGenerator value);
    [CompilerGeneratedAttribute]
public IRelationalConnection get_Connection();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Connection(IRelationalConnection value);
    [CompilerGeneratedAttribute]
public IMigrationCommandExecutor get_MigrationCommandExecutor();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MigrationCommandExecutor(IMigrationCommandExecutor value);
    [CompilerGeneratedAttribute]
public ISqlGenerationHelper get_SqlGenerationHelper();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SqlGenerationHelper(ISqlGenerationHelper value);
    [CompilerGeneratedAttribute]
public IExecutionStrategy get_ExecutionStrategy();
    [CompilerGeneratedAttribute]
public IRelationalCommandDiagnosticsLogger get_CommandLogger();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CommandLogger(IRelationalCommandDiagnosticsLogger value);
    [CompilerGeneratedAttribute]
public ICurrentDbContext get_CurrentContext();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CurrentContext(ICurrentDbContext value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalDatabaseCreatorDependencies left, RelationalDatabaseCreatorDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RelationalDatabaseCreatorDependencies left, RelationalDatabaseCreatorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalDatabaseCreatorDependencies other);
    [CompilerGeneratedAttribute]
public RelationalDatabaseCreatorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseDependencies : object {
    [CompilerGeneratedAttribute]
private ICommandBatchPreparer <BatchPreparer>k__BackingField;
    [CompilerGeneratedAttribute]
private IBatchExecutor <BatchExecutor>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public ICommandBatchPreparer BatchPreparer { get; public set; }
    public IBatchExecutor BatchExecutor { get; public set; }
    public IRelationalConnection Connection { get; public set; }
    [EntityFrameworkInternalAttribute]
public RelationalDatabaseDependencies(ICommandBatchPreparer batchPreparer, IBatchExecutor batchExecutor, IRelationalConnection connection);
    [CompilerGeneratedAttribute]
private RelationalDatabaseDependencies(RelationalDatabaseDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ICommandBatchPreparer get_BatchPreparer();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BatchPreparer(ICommandBatchPreparer value);
    [CompilerGeneratedAttribute]
public IBatchExecutor get_BatchExecutor();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BatchExecutor(IBatchExecutor value);
    [CompilerGeneratedAttribute]
public IRelationalConnection get_Connection();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Connection(IRelationalConnection value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalDatabaseDependencies left, RelationalDatabaseDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RelationalDatabaseDependencies left, RelationalDatabaseDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalDatabaseDependencies other);
    [CompilerGeneratedAttribute]
public RelationalDatabaseDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.RelationalDataReader : object {
    private IRelationalConnection _relationalConnection;
    private DbCommand _command;
    private DbDataReader _reader;
    private Guid _commandId;
    private IRelationalCommandDiagnosticsLogger _logger;
    private DateTimeOffset _startTime;
    private Stopwatch _stopwatch;
    private int _readCount;
    private bool _closed;
    private bool _disposed;
    public IRelationalConnection RelationalConnection { get; }
    public DbDataReader DbDataReader { get; }
    public DbCommand DbCommand { get; }
    public Guid CommandId { get; }
    public virtual void Initialize(IRelationalConnection relationalConnection, DbCommand command, DbDataReader reader, Guid commandId, IRelationalCommandDiagnosticsLogger logger);
    public virtual IRelationalConnection get_RelationalConnection();
    public virtual DbDataReader get_DbDataReader();
    public virtual DbCommand get_DbCommand();
    public virtual Guid get_CommandId();
    public virtual bool Read();
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    public virtual void Close();
    public virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalDataReader/<CloseAsync>d__23")]
public virtual ValueTask CloseAsync();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalDataReader/<DisposeAsync>d__24")]
public virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions : object {
    [ExtensionAttribute]
public static void ExecuteInTransaction(IExecutionStrategy strategy, Action operation, Func`1<bool> verifySucceeded, IsolationLevel isolationLevel);
    [ExtensionAttribute]
public static Task ExecuteInTransactionAsync(IExecutionStrategy strategy, Func`1<Task> operation, Func`1<Task`1<bool>> verifySucceeded, IsolationLevel isolationLevel);
    [ExtensionAttribute]
public static Task ExecuteInTransactionAsync(IExecutionStrategy strategy, Func`2<CancellationToken, Task> operation, Func`2<CancellationToken, Task`1<bool>> verifySucceeded, IsolationLevel isolationLevel, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TResult ExecuteInTransaction(IExecutionStrategy strategy, Func`1<TResult> operation, Func`1<bool> verifySucceeded, IsolationLevel isolationLevel);
    [ExtensionAttribute]
public static Task`1<TResult> ExecuteInTransactionAsync(IExecutionStrategy strategy, Func`2<CancellationToken, Task`1<TResult>> operation, Func`2<CancellationToken, Task`1<bool>> verifySucceeded, IsolationLevel isolationLevel, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void ExecuteInTransaction(IExecutionStrategy strategy, TState state, Action`1<TState> operation, Func`2<TState, bool> verifySucceeded, IsolationLevel isolationLevel);
    [ExtensionAttribute]
public static Task ExecuteInTransactionAsync(IExecutionStrategy strategy, TState state, Func`3<TState, CancellationToken, Task> operation, Func`3<TState, CancellationToken, Task`1<bool>> verifySucceeded, IsolationLevel isolationLevel, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TResult ExecuteInTransaction(IExecutionStrategy strategy, TState state, Func`2<TState, TResult> operation, Func`2<TState, bool> verifySucceeded, IsolationLevel isolationLevel);
    [ExtensionAttribute]
public static Task`1<TResult> ExecuteInTransactionAsync(IExecutionStrategy strategy, TState state, Func`3<TState, CancellationToken, Task`1<TResult>> operation, Func`3<TState, CancellationToken, Task`1<bool>> verifySucceeded, IsolationLevel isolationLevel, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyFactory : object {
    private Func`2<ExecutionStrategyDependencies, IExecutionStrategy> _createExecutionStrategy;
    [CompilerGeneratedAttribute]
private ExecutionStrategyDependencies <Dependencies>k__BackingField;
    protected ExecutionStrategyDependencies Dependencies { get; }
    public RelationalExecutionStrategyFactory(ExecutionStrategyDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ExecutionStrategyDependencies get_Dependencies();
    protected virtual IExecutionStrategy CreateDefaultStrategy(ExecutionStrategyDependencies dependencies);
    public virtual IExecutionStrategy Create();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Storage.RelationalGeometryTypeMapping`2 : RelationalTypeMapping {
    [CompilerGeneratedAttribute]
private ValueConverter`2<TGeometry, TProvider> <SpatialConverter>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected ValueConverter`2<TGeometry, TProvider> SpatialConverter { get; }
    protected Type WKTReaderType { get; }
    protected RelationalGeometryTypeMapping`2(ValueConverter`2<TGeometry, TProvider> converter, string storeType);
    protected RelationalGeometryTypeMapping`2(RelationalTypeMappingParameters parameters, ValueConverter`2<TGeometry, TProvider> converter);
    private static ValueComparer CreateProviderValueComparer(Type providerType);
    private static RelationalTypeMappingParameters CreateRelationalTypeMappingParameters(string storeType);
    [CompilerGeneratedAttribute]
protected virtual ValueConverter`2<TGeometry, TProvider> get_SpatialConverter();
    public virtual DbParameter CreateParameter(DbCommand command, string name, object value, Nullable`1<bool> nullable, ParameterDirection direction);
    public virtual Expression CustomizeDataReaderExpression(Expression expression);
    public virtual Expression GenerateCodeLiteral(object value);
    private string CreateWktWithSrid(object value);
    protected abstract virtual Type get_WKTReaderType();
    protected abstract virtual string AsText(object value);
    protected abstract virtual int GetSrid(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelper : object {
    [CompilerGeneratedAttribute]
private RelationalSqlGenerationHelperDependencies <Dependencies>k__BackingField;
    protected RelationalSqlGenerationHelperDependencies Dependencies { get; }
    public string StatementTerminator { get; }
    public string BatchTerminator { get; }
    public string StartTransactionStatement { get; }
    public string CommitTransactionStatement { get; }
    public string SingleLineCommentToken { get; }
    public RelationalSqlGenerationHelper(RelationalSqlGenerationHelperDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalSqlGenerationHelperDependencies get_Dependencies();
    public virtual string get_StatementTerminator();
    public virtual string get_BatchTerminator();
    public virtual string get_StartTransactionStatement();
    public virtual string get_CommitTransactionStatement();
    public virtual string get_SingleLineCommentToken();
    public virtual string GenerateParameterName(string name);
    public virtual void GenerateParameterName(StringBuilder builder, string name);
    public virtual string GenerateParameterNamePlaceholder(string name);
    public virtual void GenerateParameterNamePlaceholder(StringBuilder builder, string name);
    public virtual string EscapeIdentifier(string identifier);
    public virtual void EscapeIdentifier(StringBuilder builder, string identifier);
    public virtual string DelimitIdentifier(string identifier);
    public virtual void DelimitIdentifier(StringBuilder builder, string identifier);
    public virtual string DelimitIdentifier(string name, string schema);
    public virtual void DelimitIdentifier(StringBuilder builder, string name, string schema);
    public virtual string GenerateComment(string text);
    public virtual string GenerateCreateSavepointStatement(string name);
    public virtual string GenerateRollbackToSavepointStatement(string name);
    public virtual string GenerateReleaseSavepointStatement(string name);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelperDependencies : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private RelationalSqlGenerationHelperDependencies(RelationalSqlGenerationHelperDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalSqlGenerationHelperDependencies left, RelationalSqlGenerationHelperDependencies right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(RelationalSqlGenerationHelperDependencies left, RelationalSqlGenerationHelperDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalSqlGenerationHelperDependencies other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public RelationalSqlGenerationHelperDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.RelationalTransaction : object {
    private DbTransaction _dbTransaction;
    private bool _transactionOwned;
    private ISqlGenerationHelper _sqlGenerationHelper;
    private bool _connectionClosed;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private IRelationalConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Transaction> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <TransactionId>k__BackingField;
    protected IRelationalConnection Connection { get; }
    protected IDiagnosticsLogger`1<Transaction> Logger { get; }
    public Guid TransactionId { get; }
    public bool SupportsSavepoints { get; }
    private DbTransaction Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.Data.Common.DbTransaction>.Instance { get; }
    public RelationalTransaction(IRelationalConnection connection, DbTransaction transaction, Guid transactionId, IDiagnosticsLogger`1<Transaction> logger, bool transactionOwned, ISqlGenerationHelper sqlGenerationHelper);
    [CompilerGeneratedAttribute]
protected virtual IRelationalConnection get_Connection();
    [CompilerGeneratedAttribute]
protected virtual IDiagnosticsLogger`1<Transaction> get_Logger();
    [CompilerGeneratedAttribute]
public virtual Guid get_TransactionId();
    public virtual void Commit();
    public virtual void Rollback();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalTransaction/<CommitAsync>d__17")]
public virtual Task CommitAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalTransaction/<RollbackAsync>d__18")]
public virtual Task RollbackAsync(CancellationToken cancellationToken);
    public virtual void CreateSavepoint(string name);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalTransaction/<CreateSavepointAsync>d__20")]
public virtual Task CreateSavepointAsync(string name, CancellationToken cancellationToken);
    public virtual void RollbackToSavepoint(string name);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalTransaction/<RollbackToSavepointAsync>d__22")]
public virtual Task RollbackToSavepointAsync(string name, CancellationToken cancellationToken);
    public virtual void ReleaseSavepoint(string name);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalTransaction/<ReleaseSavepointAsync>d__24")]
public virtual Task ReleaseSavepointAsync(string name, CancellationToken cancellationToken);
    public virtual bool get_SupportsSavepoints();
    public virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalTransaction/<DisposeAsync>d__28")]
public virtual ValueTask DisposeAsync();
    protected virtual void ClearTransaction();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.RelationalTransaction/<ClearTransactionAsync>d__30")]
protected virtual Task ClearTransactionAsync(CancellationToken cancellationToken);
    private sealed virtual override DbTransaction Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.Data.Common.DbTransaction>.get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.RelationalTransactionFactory : object {
    [CompilerGeneratedAttribute]
private RelationalTransactionFactoryDependencies <Dependencies>k__BackingField;
    protected RelationalTransactionFactoryDependencies Dependencies { get; }
    public RelationalTransactionFactory(RelationalTransactionFactoryDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalTransactionFactoryDependencies get_Dependencies();
    public virtual RelationalTransaction Create(IRelationalConnection connection, DbTransaction transaction, Guid transactionId, IDiagnosticsLogger`1<Transaction> logger, bool transactionOwned);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.RelationalTransactionFactoryDependencies : object {
    [CompilerGeneratedAttribute]
private ISqlGenerationHelper <SqlGenerationHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public ISqlGenerationHelper SqlGenerationHelper { get; public set; }
    [EntityFrameworkInternalAttribute]
public RelationalTransactionFactoryDependencies(ISqlGenerationHelper sqlGenerationHelper);
    [CompilerGeneratedAttribute]
private RelationalTransactionFactoryDependencies(RelationalTransactionFactoryDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ISqlGenerationHelper get_SqlGenerationHelper();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SqlGenerationHelper(ISqlGenerationHelper value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalTransactionFactoryDependencies left, RelationalTransactionFactoryDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RelationalTransactionFactoryDependencies left, RelationalTransactionFactoryDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalTransactionFactoryDependencies other);
    [CompilerGeneratedAttribute]
public RelationalTransactionFactoryDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping : CoreTypeMapping {
    private static MethodInfo GetFieldValueMethod;
    private static ConcurrentDictionary`2<Type, MethodInfo> GetXMethods;
    public static RelationalTypeMapping NullMapping;
    [CompilerGeneratedAttribute]
private RelationalTypeMappingParameters <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StoreType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StoreTypeNameBase>k__BackingField;
    protected RelationalTypeMappingParameters Parameters { get; }
    public StoreTypePostfix StoreTypePostfix { get; }
    public string StoreType { get; }
    public string StoreTypeNameBase { get; }
    public Nullable`1<DbType> DbType { get; }
    public bool IsUnicode { get; }
    public Nullable`1<int> Size { get; }
    public Nullable`1<int> Precision { get; }
    public Nullable`1<int> Scale { get; }
    public bool IsFixedLength { get; }
    protected string SqlLiteralFormatString { get; }
    protected RelationalTypeMapping(RelationalTypeMappingParameters parameters);
    protected RelationalTypeMapping(string storeType, Type clrType, Nullable`1<DbType> dbType, bool unicode, Nullable`1<int> size, bool fixedLength, Nullable`1<int> precision, Nullable`1<int> scale);
    private static RelationalTypeMapping();
    private static MethodInfo GetDataReaderMethod(string name);
    [CompilerGeneratedAttribute]
protected virtual RelationalTypeMappingParameters get_Parameters();
    public virtual StoreTypePostfix get_StoreTypePostfix();
    [CompilerGeneratedAttribute]
public virtual string get_StoreType();
    [CompilerGeneratedAttribute]
public virtual string get_StoreTypeNameBase();
    public virtual Nullable`1<DbType> get_DbType();
    public virtual bool get_IsUnicode();
    public virtual Nullable`1<int> get_Size();
    public virtual Nullable`1<int> get_Precision();
    public virtual Nullable`1<int> get_Scale();
    public virtual bool get_IsFixedLength();
    protected virtual string get_SqlLiteralFormatString();
    protected abstract virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    public virtual RelationalTypeMapping Clone(string storeType, Nullable`1<int> size);
    public virtual RelationalTypeMapping Clone(Nullable`1<int> precision, Nullable`1<int> scale);
    public virtual CoreTypeMapping Clone(ValueConverter converter);
    public virtual RelationalTypeMapping Clone(RelationalTypeMappingInfo& modreq(System.Runtime.InteropServices.InAttribute) mappingInfo);
    protected virtual string ProcessStoreType(RelationalTypeMappingParameters parameters, string storeType, string storeTypeNameBase);
    public virtual DbParameter CreateParameter(DbCommand command, string name, object value, Nullable`1<bool> nullable, ParameterDirection direction);
    private object NormalizeEnumValue(object value);
    protected virtual void ConfigureParameter(DbParameter parameter);
    public virtual string GenerateSqlLiteral(object value);
    public virtual string GenerateProviderValueSqlLiteral(object value);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    public virtual MethodInfo GetDataReaderMethod();
    public static MethodInfo GetDataReaderMethod(Type type);
    public virtual Expression CustomizeDataReaderExpression(Expression expression);
    [CompilerGeneratedAttribute]
internal static string <.ctor>g__GetBaseName|6_0(string storeType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo : ValueType {
    private TypeMappingInfo _coreTypeMappingInfo;
    [CompilerGeneratedAttribute]
private string <StoreTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StoreTypeNameBase>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsFixedLength>k__BackingField;
    public string StoreTypeName { get; public set; }
    public string StoreTypeNameBase { get; public set; }
    public Nullable`1<int> Size { get; public set; }
    public Nullable`1<int> Precision { get; public set; }
    public Nullable`1<int> Scale { get; public set; }
    public Nullable`1<bool> IsFixedLength { get; public set; }
    public bool IsKeyOrIndex { get; public set; }
    public Nullable`1<bool> IsUnicode { get; public set; }
    public Nullable`1<bool> IsRowVersion { get; public set; }
    public Type ClrType { get; public set; }
    [NullableContextAttribute("1")]
public RelationalTypeMappingInfo(IProperty property);
    public RelationalTypeMappingInfo(IReadOnlyList`1<IProperty> principals, string storeTypeName, string storeTypeNameBase, Nullable`1<bool> fallbackUnicode, Nullable`1<bool> fixedLength, Nullable`1<int> fallbackSize, Nullable`1<int> fallbackPrecision, Nullable`1<int> fallbackScale);
    [NullableContextAttribute("1")]
public RelationalTypeMappingInfo(string storeTypeName, string storeTypeNameBase, Nullable`1<bool> unicode, Nullable`1<int> size, Nullable`1<int> precision, Nullable`1<int> scale);
    public RelationalTypeMappingInfo(MemberInfo member, string storeTypeName, string storeTypeNameBase, Nullable`1<bool> unicode, Nullable`1<int> size, Nullable`1<int> precision, Nullable`1<int> scale);
    public RelationalTypeMappingInfo(RelationalTypeMappingInfo& source, ValueConverterInfo& converter);
    public RelationalTypeMappingInfo(Type type, string storeTypeName, string storeTypeNameBase, bool keyOrIndex, Nullable`1<bool> unicode, Nullable`1<int> size, Nullable`1<bool> rowVersion, Nullable`1<bool> fixedLength, Nullable`1<int> precision, Nullable`1<int> scale);
    [CompilerGeneratedAttribute]
public string get_StoreTypeName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_StoreTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_StoreTypeNameBase();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_StoreTypeNameBase(string value);
    public Nullable`1<int> get_Size();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Size(Nullable`1<int> value);
    public Nullable`1<int> get_Precision();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Precision(Nullable`1<int> value);
    public Nullable`1<int> get_Scale();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Scale(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsFixedLength();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsFixedLength(Nullable`1<bool> value);
    public bool get_IsKeyOrIndex();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsKeyOrIndex(bool value);
    public Nullable`1<bool> get_IsUnicode();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsUnicode(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsRowVersion();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsRowVersion(Nullable`1<bool> value);
    public Type get_ClrType();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ClrType(Type value);
    public RelationalTypeMappingInfo WithConverter(ValueConverterInfo& converterInfo);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalTypeMappingInfo left, RelationalTypeMappingInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(RelationalTypeMappingInfo left, RelationalTypeMappingInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalTypeMappingInfo other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource : TypeMappingSourceBase {
    private ConcurrentDictionary`2<ValueTuple`3<RelationalTypeMappingInfo, Type, ValueConverter>, RelationalTypeMapping> _explicitMappings;
    [CompilerGeneratedAttribute]
private RelationalTypeMappingSourceDependencies <RelationalDependencies>k__BackingField;
    protected RelationalTypeMappingSourceDependencies RelationalDependencies { get; }
    protected RelationalTypeMappingSource(TypeMappingSourceDependencies dependencies, RelationalTypeMappingSourceDependencies relationalDependencies);
    [NullableContextAttribute("2")]
protected virtual RelationalTypeMapping FindMapping(RelationalTypeMappingInfo& modreq(System.Runtime.InteropServices.InAttribute) mappingInfo);
    [CompilerGeneratedAttribute]
protected virtual RelationalTypeMappingSourceDependencies get_RelationalDependencies();
    protected virtual CoreTypeMapping FindMapping(TypeMappingInfo& modreq(System.Runtime.InteropServices.InAttribute) mappingInfo);
    private RelationalTypeMapping FindMappingWithConversion(RelationalTypeMappingInfo& mappingInfo, IReadOnlyList`1<IProperty> principals);
    private RelationalTypeMapping FindMappingWithConversion(RelationalTypeMappingInfo mappingInfo, Type providerClrType, ValueConverter customConverter);
    public virtual CoreTypeMapping FindMapping(IProperty property);
    [PreserveBaseOverridesAttribute]
public virtual override RelationalTypeMapping FindMapping(Type type);
    [PreserveBaseOverridesAttribute]
public virtual override RelationalTypeMapping FindMapping(Type type, IModel model);
    [PreserveBaseOverridesAttribute]
public virtual override RelationalTypeMapping FindMapping(MemberInfo member);
    public virtual RelationalTypeMapping FindMapping(string storeTypeName);
    [NullableContextAttribute("2")]
public virtual RelationalTypeMapping FindMapping(Type type, string storeTypeName, bool keyOrIndex, Nullable`1<bool> unicode, Nullable`1<int> size, Nullable`1<bool> rowVersion, Nullable`1<bool> fixedLength, Nullable`1<int> precision, Nullable`1<int> scale);
    private sealed virtual override RelationalTypeMapping Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(IProperty property);
    [NullableContextAttribute("2")]
protected virtual string ParseStoreTypeName(string storeTypeName, Nullable`1& unicode, Nullable`1& size, Nullable`1& precision, Nullable`1& scale);
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <FindMappingWithConversion>b__8_0(ValueTuple`3<RelationalTypeMappingInfo, Type, ValueConverter> k);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceDependencies : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IRelationalTypeMappingSourcePlugin> <Plugins>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IEnumerable`1<IRelationalTypeMappingSourcePlugin> Plugins { get; public set; }
    [EntityFrameworkInternalAttribute]
public RelationalTypeMappingSourceDependencies(IEnumerable`1<IRelationalTypeMappingSourcePlugin> plugins);
    [CompilerGeneratedAttribute]
private RelationalTypeMappingSourceDependencies(RelationalTypeMappingSourceDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IRelationalTypeMappingSourcePlugin> get_Plugins();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Plugins(IEnumerable`1<IRelationalTypeMappingSourcePlugin> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RelationalTypeMappingSourceDependencies left, RelationalTypeMappingSourceDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RelationalTypeMappingSourceDependencies left, RelationalTypeMappingSourceDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RelationalTypeMappingSourceDependencies other);
    [CompilerGeneratedAttribute]
public RelationalTypeMappingSourceDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceExtensions : object {
    [ExtensionAttribute]
public static RelationalTypeMapping GetMappingForValue(IRelationalTypeMappingSource typeMappingSource, object value);
    [ExtensionAttribute]
public static RelationalTypeMapping GetMappingForValue(IRelationalTypeMappingSource typeMappingSource, object value, IModel model);
    [ExtensionAttribute]
public static RelationalTypeMapping GetMapping(IRelationalTypeMappingSource typeMappingSource, IProperty property);
    [ExtensionAttribute]
public static RelationalTypeMapping GetMapping(IRelationalTypeMappingSource typeMappingSource, Type clrType);
    [ExtensionAttribute]
public static RelationalTypeMapping GetMapping(IRelationalTypeMappingSource typeMappingSource, Type clrType, IModel model);
    [ExtensionAttribute]
public static RelationalTypeMapping GetMapping(IRelationalTypeMappingSource typeMappingSource, string typeName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.SByteTypeMapping : RelationalTypeMapping {
    public SByteTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected SByteTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.ShortTypeMapping : RelationalTypeMapping {
    public ShortTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected ShortTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
public enum Microsoft.EntityFrameworkCore.Storage.StoreTypePostfix : Enum {
    public int value__;
    public static StoreTypePostfix None;
    public static StoreTypePostfix Size;
    public static StoreTypePostfix Precision;
    public static StoreTypePostfix PrecisionAndScale;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.StringTypeMapping : RelationalTypeMapping {
    public StringTypeMapping(string storeType, Nullable`1<DbType> dbType, bool unicode, Nullable`1<int> size);
    protected StringTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string EscapeSqlLiteral(string literal);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.TimeOnlyTypeMapping : RelationalTypeMapping {
    public TimeOnlyTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected TimeOnlyTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.TimeSpanTypeMapping : RelationalTypeMapping {
    protected string SqlLiteralFormatString { get; }
    public TimeSpanTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected TimeSpanTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string get_SqlLiteralFormatString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo : object {
    [CompilerGeneratedAttribute]
private Type <ProviderClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ModelClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <Mapping>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsNullable>k__BackingField;
    public Type ProviderClrType { get; }
    public Type ModelClrType { get; }
    public RelationalTypeMapping Mapping { get; }
    [NullableAttribute("2")]
public IProperty Property { get; }
    public Nullable`1<bool> IsNullable { get; }
    public TypeMaterializationInfo(Type modelClrType, IProperty property, RelationalTypeMapping mapping, Nullable`1<bool> nullable);
    [CompilerGeneratedAttribute]
public virtual Type get_ProviderClrType();
    [CompilerGeneratedAttribute]
public virtual Type get_ModelClrType();
    [CompilerGeneratedAttribute]
public virtual RelationalTypeMapping get_Mapping();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual IProperty get_Property();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsNullable();
    protected virtual bool Equals(TypeMaterializationInfo other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.UIntTypeMapping : RelationalTypeMapping {
    public UIntTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected UIntTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.ULongTypeMapping : RelationalTypeMapping {
    public ULongTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected ULongTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.UShortTypeMapping : RelationalTypeMapping {
    public UShortTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected UShortTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.RelationalConverterMappingHints : ConverterMappingHints {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsFixedLength>k__BackingField;
    public Nullable`1<bool> IsFixedLength { get; }
    public RelationalConverterMappingHints(Nullable`1<int> size, Nullable`1<int> precision, Nullable`1<int> scale, Nullable`1<bool> unicode, Nullable`1<bool> fixedLength, Func`3<IProperty, IEntityType, ValueGenerator> valueGeneratorFactory);
    [NullableContextAttribute("1")]
public virtual ConverterMappingHints With(ConverterMappingHints hints);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsFixedLength();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch : ReaderModificationCommandBatch {
    private static bool QuirkEnabled29643;
    protected AffectedCountModificationCommandBatch(ModificationCommandBatchFactoryDependencies dependencies, Nullable`1<int> maxBatchSize);
    private static AffectedCountModificationCommandBatch();
    protected virtual void Consume(RelationalDataReader reader);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch/<ConsumeAsync>d__3")]
protected virtual Task ConsumeAsync(RelationalDataReader reader, CancellationToken cancellationToken);
    protected virtual int ConsumeResultSet(int startCommandIndex, RelationalDataReader reader);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch/<ConsumeResultSetAsync>d__5")]
protected virtual Task`1<int> ConsumeResultSetAsync(int startCommandIndex, RelationalDataReader reader, CancellationToken cancellationToken);
    protected virtual int ConsumeResultSetWithRowsAffectedOnly(int commandIndex, RelationalDataReader reader);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch/<ConsumeResultSetWithRowsAffectedOnlyAsync>d__7")]
protected virtual Task`1<int> ConsumeResultSetWithRowsAffectedOnlyAsync(int commandIndex, RelationalDataReader reader, CancellationToken cancellationToken);
    private static int ParameterCount(IReadOnlyModificationCommand command);
    private IReadOnlyList`1<IUpdateEntry> AggregateEntries(int endIndex, int commandCount);
    protected virtual void ThrowAggregateUpdateConcurrencyException(RelationalDataReader reader, int commandIndex, int expectedRowsAffected, int rowsAffected);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch/<ThrowAggregateUpdateConcurrencyExceptionAsync>d__11")]
protected virtual Task ThrowAggregateUpdateConcurrencyExceptionAsync(RelationalDataReader reader, int commandIndex, int expectedRowsAffected, int rowsAffected, CancellationToken cancellationToken);
    private static RelationalConcurrencyExceptionEventData CreateConcurrencyExceptionEventData(DbContext context, RelationalDataReader reader, DbUpdateConcurrencyException exception, IReadOnlyList`1<IUpdateEntry> entries, EventDefinition`1<Exception> definition);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Update.ColumnModification : object {
    private string _parameterName;
    private string _originalParameterName;
    private Func`1<string> _generateParameterName;
    private object _originalValue;
    private object _value;
    private bool _sensitiveLoggingEnabled;
    private List`1<IColumnModification> _sharedColumnModifications;
    [CompilerGeneratedAttribute]
private IUpdateEntry <Entry>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private IColumnBase <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <TypeMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRead>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWrite>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCondition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JsonPath>k__BackingField;
    public IUpdateEntry Entry { get; }
    public IProperty Property { get; }
    public IColumnBase Column { get; }
    public RelationalTypeMapping TypeMapping { get; }
    public Nullable`1<bool> IsNullable { get; }
    public bool IsRead { get; public set; }
    public bool IsWrite { get; public set; }
    public bool IsCondition { get; public set; }
    public bool IsKey { get; public set; }
    public bool UseOriginalValueParameter { get; }
    public bool UseCurrentValueParameter { get; }
    public bool UseOriginalValue { get; }
    public bool UseCurrentValue { get; }
    public bool UseParameter { get; }
    public string ParameterName { get; }
    public string OriginalParameterName { get; }
    [NullableAttribute("1")]
public string ColumnName { get; }
    public string ColumnType { get; }
    public object OriginalValue { get; public set; }
    public object Value { get; public set; }
    public string JsonPath { get; }
    public ColumnModification(ColumnModificationParameters& columnModificationParameters);
    [CompilerGeneratedAttribute]
public virtual IUpdateEntry get_Entry();
    [CompilerGeneratedAttribute]
public virtual IProperty get_Property();
    [CompilerGeneratedAttribute]
public virtual IColumnBase get_Column();
    [CompilerGeneratedAttribute]
public virtual RelationalTypeMapping get_TypeMapping();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual bool get_IsRead();
    [CompilerGeneratedAttribute]
public virtual void set_IsRead(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsWrite();
    [CompilerGeneratedAttribute]
public virtual void set_IsWrite(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsCondition();
    [CompilerGeneratedAttribute]
public virtual void set_IsCondition(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsKey();
    [CompilerGeneratedAttribute]
public virtual void set_IsKey(bool value);
    public virtual bool get_UseOriginalValueParameter();
    public virtual bool get_UseCurrentValueParameter();
    public virtual bool get_UseOriginalValue();
    public virtual bool get_UseCurrentValue();
    [CompilerGeneratedAttribute]
public virtual bool get_UseParameter();
    public virtual string get_ParameterName();
    public virtual string get_OriginalParameterName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string get_ColumnName();
    [CompilerGeneratedAttribute]
public virtual string get_ColumnType();
    public virtual object get_OriginalValue();
    public virtual void set_OriginalValue(object value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    [CompilerGeneratedAttribute]
public virtual string get_JsonPath();
    [NullableContextAttribute("1")]
public virtual void AddSharedColumnModification(IColumnModification modification);
    public virtual void ResetParameterNames();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Update.ColumnModificationParameters : ValueType {
    [CompilerGeneratedAttribute]
private Func`1<string> <GenerateParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OriginalValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SensitiveLoggingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IUpdateEntry <Entry>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <TypeMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRead>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWrite>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCondition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IColumnBase <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JsonPath>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<string> GenerateParameterName { get; public set; }
    public object OriginalValue { get; public set; }
    public object Value { get; public set; }
    public bool SensitiveLoggingEnabled { get; public set; }
    public IUpdateEntry Entry { get; public set; }
    public IProperty Property { get; public set; }
    public RelationalTypeMapping TypeMapping { get; public set; }
    public Nullable`1<bool> IsNullable { get; public set; }
    public bool IsRead { get; public set; }
    public bool IsWrite { get; public set; }
    public bool IsCondition { get; public set; }
    public bool IsKey { get; public set; }
    public IColumnBase Column { get; public set; }
    [NullableAttribute("1")]
public string ColumnName { get; public set; }
    public string ColumnType { get; public set; }
    public string JsonPath { get; public set; }
    public ColumnModificationParameters(string columnName, object originalValue, object value, IProperty property, string columnType, RelationalTypeMapping typeMapping, bool read, bool write, bool key, bool condition, bool sensitiveLoggingEnabled, Nullable`1<bool> isNullable);
    public ColumnModificationParameters(IColumn column, object originalValue, object value, IProperty property, RelationalTypeMapping typeMapping, bool read, bool write, bool key, bool condition, bool sensitiveLoggingEnabled, Nullable`1<bool> isNullable);
    [NullableContextAttribute("1")]
public ColumnModificationParameters(IUpdateEntry entry, IProperty property, IColumnBase column, Func`1<string> generateParameterName, RelationalTypeMapping typeMapping, bool valueIsRead, bool valueIsWrite, bool columnIsKey, bool columnIsCondition, bool sensitiveLoggingEnabled);
    public ColumnModificationParameters(string columnName, object value, IProperty property, string columnType, RelationalTypeMapping typeMapping, string jsonPath, bool read, bool write, bool key, bool condition, bool sensitiveLoggingEnabled, Nullable`1<bool> isNullable);
    [CompilerGeneratedAttribute]
public Func`1<string> get_GenerateParameterName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_GenerateParameterName(Func`1<string> value);
    [CompilerGeneratedAttribute]
public object get_OriginalValue();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OriginalValue(object value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Value(object value);
    [CompilerGeneratedAttribute]
public bool get_SensitiveLoggingEnabled();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SensitiveLoggingEnabled(bool value);
    [CompilerGeneratedAttribute]
public IUpdateEntry get_Entry();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Entry(IUpdateEntry value);
    [CompilerGeneratedAttribute]
public IProperty get_Property();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Property(IProperty value);
    [CompilerGeneratedAttribute]
public RelationalTypeMapping get_TypeMapping();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeMapping(RelationalTypeMapping value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsNullable();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsNullable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_IsRead();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsRead(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsWrite();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsWrite(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCondition();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsCondition(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsKey();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsKey(bool value);
    [CompilerGeneratedAttribute]
public IColumnBase get_Column();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Column(IColumnBase value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_ColumnName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnType();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ColumnType(string value);
    [CompilerGeneratedAttribute]
public string get_JsonPath();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_JsonPath(string value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ColumnModificationParameters left, ColumnModificationParameters right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ColumnModificationParameters left, ColumnModificationParameters right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ColumnModificationParameters other);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Update.IBatchExecutor {
    public abstract virtual int Execute(IEnumerable`1<ModificationCommandBatch> commandBatches, IRelationalConnection connection);
    public abstract virtual Task`1<int> ExecuteAsync(IEnumerable`1<ModificationCommandBatch> commandBatches, IRelationalConnection connection, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Update.IColumnModification {
    public IUpdateEntry Entry { get; }
    public IProperty Property { get; }
    public IColumnBase Column { get; }
    public RelationalTypeMapping TypeMapping { get; }
    public Nullable`1<bool> IsNullable { get; }
    public bool IsRead { get; public set; }
    public bool IsWrite { get; public set; }
    public bool IsCondition { get; public set; }
    public bool IsKey { get; public set; }
    [MemberNotNullWhenAttribute("True", "OriginalParameterName")]
public bool UseOriginalValueParameter { get; }
    [MemberNotNullWhenAttribute("True", "ParameterName")]
public bool UseCurrentValueParameter { get; }
    public bool UseOriginalValue { get; }
    public bool UseCurrentValue { get; }
    public bool UseParameter { get; }
    public string ParameterName { get; }
    public string OriginalParameterName { get; }
    [NullableAttribute("1")]
public string ColumnName { get; }
    public string ColumnType { get; }
    public object OriginalValue { get; public set; }
    public object Value { get; public set; }
    public string JsonPath { get; }
    public abstract virtual IUpdateEntry get_Entry();
    public abstract virtual IProperty get_Property();
    public abstract virtual IColumnBase get_Column();
    public abstract virtual RelationalTypeMapping get_TypeMapping();
    public abstract virtual Nullable`1<bool> get_IsNullable();
    public abstract virtual bool get_IsRead();
    public abstract virtual void set_IsRead(bool value);
    public abstract virtual bool get_IsWrite();
    public abstract virtual void set_IsWrite(bool value);
    public abstract virtual bool get_IsCondition();
    public abstract virtual void set_IsCondition(bool value);
    public abstract virtual bool get_IsKey();
    public abstract virtual void set_IsKey(bool value);
    [MemberNotNullWhenAttribute("True", "OriginalParameterName")]
public abstract virtual bool get_UseOriginalValueParameter();
    [MemberNotNullWhenAttribute("True", "ParameterName")]
public abstract virtual bool get_UseCurrentValueParameter();
    public abstract virtual bool get_UseOriginalValue();
    public abstract virtual bool get_UseCurrentValue();
    public abstract virtual bool get_UseParameter();
    public abstract virtual string get_ParameterName();
    public abstract virtual string get_OriginalParameterName();
    [NullableContextAttribute("1")]
public abstract virtual string get_ColumnName();
    public abstract virtual string get_ColumnType();
    public abstract virtual object get_OriginalValue();
    public abstract virtual void set_OriginalValue(object value);
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public abstract virtual string get_JsonPath();
    [NullableContextAttribute("1")]
public abstract virtual void AddSharedColumnModification(IColumnModification modification);
    public abstract virtual void ResetParameterNames();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Update.ICommandBatchPreparer {
    public abstract virtual IEnumerable`1<ModificationCommandBatch> BatchCommands(IList`1<IUpdateEntry> entries, IUpdateAdapter updateAdapter);
    public abstract virtual IEnumerable`1<ModificationCommandBatch> CreateCommandBatches(IEnumerable`1<IReadOnlyModificationCommand> commandSet, bool moreCommandSets);
}
public interface Microsoft.EntityFrameworkCore.Update.IModificationCommand {
    [NullableContextAttribute("1")]
public abstract virtual void AddEntry(IUpdateEntry entry, bool mainEntry);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Update.IModificationCommandBatchFactory {
    public abstract virtual ModificationCommandBatch Create();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Update.IModificationCommandFactory {
    public abstract virtual IModificationCommand CreateModificationCommand(ModificationCommandParameters& modreq(System.Runtime.InteropServices.InAttribute) modificationCommandParameters);
    public abstract virtual INonTrackedModificationCommand CreateNonTrackedModificationCommand(NonTrackedModificationCommandParameters& modreq(System.Runtime.InteropServices.InAttribute) modificationCommandParameters);
}
public interface Microsoft.EntityFrameworkCore.Update.INonTrackedModificationCommand {
    public EntityState EntityState { get; public set; }
    public abstract virtual EntityState get_EntityState();
    public abstract virtual void set_EntityState(EntityState value);
    [NullableContextAttribute("1")]
public abstract virtual IColumnModification AddColumnModification(ColumnModificationParameters& modreq(System.Runtime.InteropServices.InAttribute) columnModificationParameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor : object {
    private static string SavepointName;
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Update> <UpdateLogger>k__BackingField;
    public ICurrentDbContext CurrentContext { get; }
    protected IDiagnosticsLogger`1<Update> UpdateLogger { get; }
    public BatchExecutor(ICurrentDbContext currentContext, IDiagnosticsLogger`1<Update> updateLogger);
    [CompilerGeneratedAttribute]
public virtual ICurrentDbContext get_CurrentContext();
    [CompilerGeneratedAttribute]
protected virtual IDiagnosticsLogger`1<Update> get_UpdateLogger();
    public virtual int Execute(IEnumerable`1<ModificationCommandBatch> commandBatches, IRelationalConnection connection);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor/<ExecuteAsync>d__9")]
public virtual Task`1<int> ExecuteAsync(IEnumerable`1<ModificationCommandBatch> commandBatches, IRelationalConnection connection, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Update.Internal.ColumnAccessors : object {
    [CompilerGeneratedAttribute]
private Delegate <CurrentValueGetter>k__BackingField;
    [CompilerGeneratedAttribute]
private Delegate <OriginalValueGetter>k__BackingField;
    public Delegate CurrentValueGetter { get; }
    public Delegate OriginalValueGetter { get; }
    public ColumnAccessors(Delegate currentValueGetter, Delegate originalValueGetter);
    [CompilerGeneratedAttribute]
public Delegate get_CurrentValueGetter();
    [CompilerGeneratedAttribute]
public Delegate get_OriginalValueGetter();
}
public static class Microsoft.EntityFrameworkCore.Update.Internal.ColumnAccessorsFactory : object {
    private static bool QuirkEnabled29985;
    private static MethodInfo GenericCreate;
    private static ColumnAccessorsFactory();
    [NullableContextAttribute("1")]
public static ColumnAccessors Create(IColumn column);
    [UsedImplicitlyAttribute]
private static ColumnAccessors CreateGeneric(IColumn column);
    private static Func`2<IReadOnlyModificationCommand, ValueTuple`2<TColumn, bool>> CreateCurrentValueGetter(IColumn column);
    private static Func`2<IReadOnlyModificationCommand, ValueTuple`2<TColumn, bool>> CreateOriginalValueGetter(IColumn column);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer : object {
    private static bool QuirkEnabled29647;
    private static bool QuirkEnabled30601;
    private int _minBatchSize;
    private bool _sensitiveLoggingEnabled;
    private bool _detailedErrorsEnabled;
    private Multigraph`2<IReadOnlyModificationCommand, CommandDependency> _modificationCommandGraph;
    [CompilerGeneratedAttribute]
private CommandBatchPreparerDependencies <Dependencies>k__BackingField;
    protected CommandBatchPreparerDependencies Dependencies { get; }
    public CommandBatchPreparer(CommandBatchPreparerDependencies dependencies);
    private static CommandBatchPreparer();
    [CompilerGeneratedAttribute]
protected virtual CommandBatchPreparerDependencies get_Dependencies();
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer/<BatchCommands>d__10")]
public virtual IEnumerable`1<ModificationCommandBatch> BatchCommands(IList`1<IUpdateEntry> entries, IUpdateAdapter updateAdapter);
    public virtual IEnumerable`1<ModificationCommandBatch> CreateCommandBatches(IEnumerable`1<IReadOnlyModificationCommand> commandSet, bool moreCommandSets);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer/<CreateCommandBatches>d__12")]
private IEnumerable`1<ModificationCommandBatch> CreateCommandBatches(IEnumerable`1<IReadOnlyModificationCommand> commandSet, bool moreCommandSets, bool assertColumnModification, ParameterNameGenerator parameterNameGenerator);
    protected virtual IEnumerable`1<IReadOnlyModificationCommand> CreateModificationCommands(IList`1<IUpdateEntry> entries, IUpdateAdapter updateAdapter, Func`1<string> generateParameterName);
    private static void AddUnchangedSharingEntries(IEnumerable`1<SharedTableEntryMap`1<IModificationCommand>> sharedTablesCommands, IList`1<IUpdateEntry> entries);
    public virtual IReadOnlyList`1<List`1<IReadOnlyModificationCommand>> TopologicalSort(IEnumerable`1<IReadOnlyModificationCommand> commands);
    private string FormatCycle(IReadOnlyList`1<Tuple`3<IReadOnlyModificationCommand, IReadOnlyModificationCommand, IEnumerable`1<CommandDependency>>> data);
    private void Format(IReadOnlyModificationCommand command, StringBuilder builder);
    private void Format(IForeignKey foreignKey, IReadOnlyModificationCommand source, IReadOnlyModificationCommand target, StringBuilder builder);
    private void Format(IForeignKeyConstraint foreignKey, IReadOnlyModificationCommand source, IReadOnlyModificationCommand target, StringBuilder builder);
    private void Format(IKey key, IReadOnlyModificationCommand source, IReadOnlyModificationCommand target, StringBuilder builder);
    private void Format(IUniqueConstraint constraint, IReadOnlyModificationCommand source, IReadOnlyModificationCommand target, StringBuilder builder);
    private void Format(ITableIndex index, IReadOnlyModificationCommand source, IReadOnlyModificationCommand target, StringBuilder builder);
    private void FormatValues(Object[] values, IReadOnlyList`1<IColumn> columns, IReadOnlyModificationCommand dependentCommand, StringBuilder builder);
    private void AddForeignKeyEdges();
    private static bool HasTempKey(IUpdateEntry entry, IKey key);
    private static bool CanCreateDependency(IForeignKey foreignKey, IReadOnlyModificationCommand command, bool principal);
    private static bool CanCreateDependency(IKey key, IReadOnlyModificationCommand command);
    private static bool IsModified(IReadOnlyList`1<IProperty> properties, IUpdateEntry entry);
    private static bool IsModified(IReadOnlyList`1<IColumn> columns, IReadOnlyModificationCommand command);
    private void AddMatchingPredecessorEdge(Dictionary`2<T, List`1<IReadOnlyModificationCommand>> predecessorsMap, T keyValue, IReadOnlyModificationCommand command, IForeignKey foreignKey, bool checkStoreGenerated);
    private void AddMatchingPredecessorEdge(Dictionary`2<T, List`1<IReadOnlyModificationCommand>> predecessorsMap, T keyValue, IReadOnlyModificationCommand command, IForeignKeyConstraint foreignKey, bool checkStoreGenerated);
    private void AddMatchingPredecessorEdge(Dictionary`2<T, List`1<IReadOnlyModificationCommand>> predecessorsMap, T keyValue, IReadOnlyModificationCommand command, CommandDependency edge);
    private void AddUniqueValueEdges();
    private void AddSameTableEdges();
    [CompilerGeneratedAttribute]
private ModificationCommandBatch <CreateCommandBatches>g__StartNewBatch|12_2(ParameterNameGenerator parameterNameGenerator, IReadOnlyModificationCommand modificationCommand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparerDependencies : object {
    [CompilerGeneratedAttribute]
private IModificationCommandBatchFactory <ModificationCommandBatchFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IParameterNameGeneratorFactory <ParameterNameGeneratorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IComparer`1<IReadOnlyModificationCommand> <ModificationCommandComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private IModificationCommandFactory <ModificationCommandFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ILoggingOptions <LoggingOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Update> <UpdateLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbContextOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IModificationCommandBatchFactory ModificationCommandBatchFactory { get; public set; }
    public IParameterNameGeneratorFactory ParameterNameGeneratorFactory { get; public set; }
    public IComparer`1<IReadOnlyModificationCommand> ModificationCommandComparer { get; public set; }
    public IModificationCommandFactory ModificationCommandFactory { get; public set; }
    public ILoggingOptions LoggingOptions { get; public set; }
    public IDiagnosticsLogger`1<Update> UpdateLogger { get; public set; }
    public IDbContextOptions Options { get; public set; }
    [EntityFrameworkInternalAttribute]
public CommandBatchPreparerDependencies(IModificationCommandBatchFactory modificationCommandBatchFactory, IParameterNameGeneratorFactory parameterNameGeneratorFactory, IComparer`1<IReadOnlyModificationCommand> modificationCommandComparer, IModificationCommandFactory modificationCommandFactory, ILoggingOptions loggingOptions, IDiagnosticsLogger`1<Update> updateLogger, IDbContextOptions options);
    [CompilerGeneratedAttribute]
private CommandBatchPreparerDependencies(CommandBatchPreparerDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IModificationCommandBatchFactory get_ModificationCommandBatchFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModificationCommandBatchFactory(IModificationCommandBatchFactory value);
    [CompilerGeneratedAttribute]
public IParameterNameGeneratorFactory get_ParameterNameGeneratorFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ParameterNameGeneratorFactory(IParameterNameGeneratorFactory value);
    [CompilerGeneratedAttribute]
public IComparer`1<IReadOnlyModificationCommand> get_ModificationCommandComparer();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModificationCommandComparer(IComparer`1<IReadOnlyModificationCommand> value);
    [CompilerGeneratedAttribute]
public IModificationCommandFactory get_ModificationCommandFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModificationCommandFactory(IModificationCommandFactory value);
    [CompilerGeneratedAttribute]
public ILoggingOptions get_LoggingOptions();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LoggingOptions(ILoggingOptions value);
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Update> get_UpdateLogger();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UpdateLogger(IDiagnosticsLogger`1<Update> value);
    [CompilerGeneratedAttribute]
public IDbContextOptions get_Options();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Options(IDbContextOptions value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CommandBatchPreparerDependencies left, CommandBatchPreparerDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CommandBatchPreparerDependencies left, CommandBatchPreparerDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(CommandBatchPreparerDependencies other);
    [CompilerGeneratedAttribute]
public CommandBatchPreparerDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Update.Internal.CompositeRowForeignKeyValueFactory : CompositeRowValueFactory {
    private IForeignKeyConstraint _foreignKey;
    private IRowKeyValueFactory`1<Object[]> _principalKeyValueFactory;
    private List`1<ValueConverter> _valueConverters;
    public CompositeRowForeignKeyValueFactory(IForeignKeyConstraint foreignKey, IValueConverterSelector valueConverterSelector);
    public virtual object CreatePrincipalEquatableKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
    public virtual object CreateDependentEquatableKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
    public virtual Object[] CreatePrincipalKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
    public virtual Object[] CreateDependentKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Update.Internal.CompositeRowIndexValueFactory : CompositeRowValueFactory {
    private ITableIndex _index;
    public CompositeRowIndexValueFactory(ITableIndex index);
    [NullableContextAttribute("2")]
public virtual bool TryCreateIndexValue(Object[] keyValues, Object[]& key, Boolean& hasNullValue);
    [NullableContextAttribute("2")]
public virtual bool TryCreateIndexValue(IDictionary`2<string, object> keyValues, Object[]& key, Boolean& hasNullValue);
    public virtual bool TryCreateIndexValue(IReadOnlyModificationCommand command, bool fromOriginalValues, Object[]& keyValue, Boolean& hasNullValue);
    public virtual ValueTuple`2<object, bool> CreateEquatableIndexValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
    public virtual ValueTuple`2<Object[], bool> CreateIndexValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Update.Internal.CompositeRowKeyValueFactory : CompositeRowValueFactory {
    private IUniqueConstraint _constraint;
    public CompositeRowKeyValueFactory(IUniqueConstraint key);
    public virtual Object[] CreateKeyValue(Object[] keyValues);
    public virtual Object[] CreateKeyValue(IDictionary`2<string, object> keyValues);
    public virtual Object[] CreateKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
    private IColumn FindNullColumnInKeyValues(Object[] keyValues);
    public virtual object CreateEquatableKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
    private sealed virtual override Object[] Microsoft.EntityFrameworkCore.Update.Internal.IRowKeyValueFactory.CreateKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Update.Internal.CompositeRowValueFactory : object {
    [CompilerGeneratedAttribute]
private List`1<ValueConverter> <ValueConverters>k__BackingField;
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<Object[]> <EqualityComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IColumn> <Columns>k__BackingField;
    protected List`1<ValueConverter> ValueConverters { get; protected set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEqualityComparer`1<Object[]> EqualityComparer { get; protected set; }
    [NullableAttribute("1")]
protected IReadOnlyList`1<IColumn> Columns { get; }
    [NullableContextAttribute("1")]
protected CompositeRowValueFactory(IReadOnlyList`1<IColumn> columns);
    [CompilerGeneratedAttribute]
protected virtual List`1<ValueConverter> get_ValueConverters();
    [CompilerGeneratedAttribute]
protected virtual void set_ValueConverters(List`1<ValueConverter> value);
    [CompilerGeneratedAttribute]
public virtual IEqualityComparer`1<Object[]> get_EqualityComparer();
    [CompilerGeneratedAttribute]
protected virtual void set_EqualityComparer(IEqualityComparer`1<Object[]> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual IReadOnlyList`1<IColumn> get_Columns();
    public virtual bool TryCreateDependentKeyValue(Object[] keyValues, Object[]& key);
    protected virtual bool TryCreateDependentKeyValue(Object[] keyValues, Object[]& key, Boolean& hasNullValue);
    public virtual bool TryCreateDependentKeyValue(IDictionary`2<string, object> keyValues, Object[]& key);
    protected virtual bool TryCreateDependentKeyValue(IDictionary`2<string, object> keyValues, Object[]& key, Boolean& hasNullValue);
    [NullableContextAttribute("1")]
public virtual bool TryCreateDependentKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues, Object[]& key);
    [NullableContextAttribute("1")]
protected virtual bool TryCreateDependentKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues, Object[]& key, Boolean& hasNullValue);
    [NullableContextAttribute("1")]
protected static IEqualityComparer`1<Object[]> CreateEqualityComparer(IReadOnlyList`1<IColumn> columns, List`1<ValueConverter> valueConverters);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Update.Internal.IRowForeignKeyValueFactory {
    public abstract virtual Object[] CreatePrincipalKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
    public abstract virtual Object[] CreateDependentKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
    public abstract virtual object CreatePrincipalEquatableKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
    public abstract virtual object CreateDependentEquatableKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Update.Internal.IRowForeignKeyValueFactory`1 {
    public IEqualityComparer`1<TKey> EqualityComparer { get; }
    [NullableContextAttribute("2")]
public abstract virtual bool TryCreateDependentKeyValue(Object[] keyValues, TKey& key);
    [NullableContextAttribute("2")]
public abstract virtual bool TryCreateDependentKeyValue(IDictionary`2<string, object> keyValues, TKey& key);
    public abstract virtual bool TryCreateDependentKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues, TKey& key);
    public abstract virtual IEqualityComparer`1<TKey> get_EqualityComparer();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Update.Internal.IRowForeignKeyValueFactoryFactory {
    public abstract virtual IRowForeignKeyValueFactory Create(IForeignKeyConstraint foreignKey);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Update.Internal.IRowIdentityMap {
    public IEnumerable`1<INonTrackedModificationCommand> Rows { get; }
    public abstract virtual IEnumerable`1<INonTrackedModificationCommand> get_Rows();
    [NullableContextAttribute("2")]
public abstract virtual INonTrackedModificationCommand FindCommand(Object[] keyValues);
    public abstract virtual void Add(Object[] keyValues, INonTrackedModificationCommand command);
    public abstract virtual void Remove(INonTrackedModificationCommand command);
    public abstract virtual void Clear();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Update.Internal.IRowIdentityMapFactory {
    public abstract virtual IRowIdentityMap Create(IUniqueConstraint key);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Update.Internal.IRowIndexValueFactory {
    public abstract virtual ValueTuple`2<Object[], bool> CreateIndexValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
    public abstract virtual ValueTuple`2<object, bool> CreateEquatableIndexValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Update.Internal.IRowIndexValueFactory`1 {
    public IEqualityComparer`1<TKey> EqualityComparer { get; }
    [NullableContextAttribute("2")]
public abstract virtual bool TryCreateIndexValue(Object[] keyValues, TKey& key, Boolean& hasNullValue);
    [NullableContextAttribute("2")]
public abstract virtual bool TryCreateIndexValue(IDictionary`2<string, object> keyValues, TKey& key, Boolean& hasNullValue);
    public abstract virtual bool TryCreateIndexValue(IReadOnlyModificationCommand command, bool fromOriginalValues, TKey& key, Boolean& hasNullValue);
    public abstract virtual IEqualityComparer`1<TKey> get_EqualityComparer();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Update.Internal.IRowIndexValueFactoryFactory {
    public abstract virtual IRowIndexValueFactory Create(ITableIndex index);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Update.Internal.IRowKeyValueFactory {
    public abstract virtual Object[] CreateKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
    public abstract virtual object CreateEquatableKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Update.Internal.IRowKeyValueFactory`1 {
    public IEqualityComparer`1<TKey> EqualityComparer { get; }
    public abstract virtual TKey CreateKeyValue(Object[] keyValues);
    public abstract virtual TKey CreateKeyValue(IDictionary`2<string, object> keyValues);
    public abstract virtual TKey CreateKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
    public abstract virtual IEqualityComparer`1<TKey> get_EqualityComparer();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Update.Internal.IRowKeyValueFactoryFactory {
    public abstract virtual IRowKeyValueFactory Create(IUniqueConstraint key);
}
public class Microsoft.EntityFrameworkCore.Update.Internal.ModificationCommandComparer : object {
    [NullableContextAttribute("2")]
public virtual int Compare(IReadOnlyModificationCommand x, IReadOnlyModificationCommand y);
}
public class Microsoft.EntityFrameworkCore.Update.Internal.ModificationCommandFactory : object {
    [NullableContextAttribute("1")]
public virtual IModificationCommand CreateModificationCommand(ModificationCommandParameters& modreq(System.Runtime.InteropServices.InAttribute) modificationCommandParameters);
    [NullableContextAttribute("1")]
public virtual INonTrackedModificationCommand CreateNonTrackedModificationCommand(NonTrackedModificationCommandParameters& modreq(System.Runtime.InteropServices.InAttribute) modificationCommandParameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Update.Internal.RowForeignKeyValueFactory`2 : object {
    private IForeignKeyConstraint _foreignKey;
    private ValueConverter _valueConverter;
    private IRowKeyValueFactory`1<TKey> _principalKeyValueFactory;
    [CompilerGeneratedAttribute]
private IColumn <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnAccessors <ColumnAccessors>k__BackingField;
    public IEqualityComparer`1<TKey> EqualityComparer { get; }
    public IColumn Column { get; }
    public ColumnAccessors ColumnAccessors { get; }
    protected RowForeignKeyValueFactory`2(IForeignKeyConstraint foreignKey, IColumn column, ColumnAccessors columnAccessors, IValueConverterSelector valueConverterSelector);
    private Func`2<IReadOnlyModificationCommand, ValueTuple`2<TKey, bool>> ConvertAccessor(Func`2<IReadOnlyModificationCommand, ValueTuple`2<TForeignKey, bool>> columnAccessor);
    public abstract virtual IEqualityComparer`1<TKey> get_EqualityComparer();
    [CompilerGeneratedAttribute]
public virtual IColumn get_Column();
    [CompilerGeneratedAttribute]
public virtual ColumnAccessors get_ColumnAccessors();
    public virtual object CreatePrincipalEquatableKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
    public virtual object CreateDependentEquatableKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
    [NullableContextAttribute("2")]
public abstract virtual bool TryCreateDependentKeyValue(Object[] keyValues, TKey& key);
    [NullableContextAttribute("2")]
public abstract virtual bool TryCreateDependentKeyValue(IDictionary`2<string, object> keyPropertyValues, TKey& key);
    public abstract virtual bool TryCreateDependentKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues, TKey& key);
    protected virtual IEqualityComparer`1<TKey> CreateKeyEqualityComparer(IColumn column);
    public virtual Object[] CreatePrincipalKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
    public virtual Object[] CreateDependentKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
}
public class Microsoft.EntityFrameworkCore.Update.Internal.RowForeignKeyValueFactoryFactory : object {
    private static bool QuirkEnabled29985;
    private IValueConverterSelector _valueConverterSelector;
    private static MethodInfo CreateMethod;
    [NullableContextAttribute("1")]
public RowForeignKeyValueFactoryFactory(IValueConverterSelector valueConverterSelector);
    private static RowForeignKeyValueFactoryFactory();
    [NullableContextAttribute("1")]
public virtual IRowForeignKeyValueFactory Create(IForeignKeyConstraint foreignKey);
    [UsedImplicitlyAttribute]
private static IRowForeignKeyValueFactory CreateSimple(IForeignKeyConstraint foreignKey, IValueConverterSelector valueConverterSelector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Update.Internal.RowIdentityMap`1 : object {
    private IUniqueConstraint _key;
    private Dictionary`2<TKey, INonTrackedModificationCommand> _identityMap;
    private IRowKeyValueFactory`1<TKey> _principalKeyValueFactory;
    public IEnumerable`1<INonTrackedModificationCommand> Rows { get; }
    public RowIdentityMap`1(IUniqueConstraint key);
    public virtual IEnumerable`1<INonTrackedModificationCommand> get_Rows();
    [NullableContextAttribute("2")]
public virtual INonTrackedModificationCommand FindCommand(Object[] keyValues);
    public virtual void Add(Object[] keyValues, INonTrackedModificationCommand command);
    protected virtual void Add(TKey key, INonTrackedModificationCommand command);
    public virtual void Remove(INonTrackedModificationCommand command);
    private void Remove(TKey key, INonTrackedModificationCommand command);
    public virtual void Clear();
}
public class Microsoft.EntityFrameworkCore.Update.Internal.RowIdentityMapFactory : object {
    private static MethodInfo _createMethod;
    private static RowIdentityMapFactory();
    [NullableContextAttribute("1")]
public virtual IRowIdentityMap Create(IUniqueConstraint key);
    [UsedImplicitlyAttribute]
private static IRowIdentityMap CreateRowIdentityMap(IUniqueConstraint key);
}
public class Microsoft.EntityFrameworkCore.Update.Internal.RowIndexValueFactoryFactory : object {
    private static MethodInfo _createMethod;
    private static RowIndexValueFactoryFactory();
    [NullableContextAttribute("1")]
public virtual IRowIndexValueFactory Create(ITableIndex index);
    [UsedImplicitlyAttribute]
private static IRowIndexValueFactory`1<TKey> CreateSimple(ITableIndex index);
}
public class Microsoft.EntityFrameworkCore.Update.Internal.RowKeyValueFactoryFactory : object {
    private static MethodInfo _createMethod;
    private static RowKeyValueFactoryFactory();
    [NullableContextAttribute("1")]
public virtual IRowKeyValueFactory Create(IUniqueConstraint key);
    [UsedImplicitlyAttribute]
private static IRowKeyValueFactory`1<TKey> CreateSimpleFactory(IUniqueConstraint key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Update.Internal.SharedTableEntryMap`1 : object {
    private ITable _table;
    private IUpdateAdapter _updateAdapter;
    private IComparer`1<IUpdateEntry> _comparer;
    private Dictionary`2<IUpdateEntry, TValue> _entryValueMap;
    public IEnumerable`1<TValue> Values { get; }
    public SharedTableEntryMap`1(ITable table, IUpdateAdapter updateAdapter);
    public virtual IEnumerable`1<TValue> get_Values();
    public virtual TValue GetOrAddValue(IUpdateEntry entry, SharedTableEntryValueFactory`1<TValue> createElement);
    public virtual bool IsMainEntry(IUpdateEntry entry);
    private IUpdateEntry GetMainEntry(IUpdateEntry entry);
    public virtual IReadOnlyList`1<IUpdateEntry> GetAllEntries(IUpdateEntry entry);
    private void AddAllDependentsInclusive(IUpdateEntry entry, List`1<IUpdateEntry> entries);
}
public class Microsoft.EntityFrameworkCore.Update.Internal.SharedTableEntryMapFactory`1 : MulticastDelegate {
    public SharedTableEntryMapFactory`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual SharedTableEntryMap`1<TValue> Invoke(SharedTableEntryValueFactory`1<TValue> valueFactory);
    public virtual IAsyncResult BeginInvoke(SharedTableEntryValueFactory`1<TValue> valueFactory, AsyncCallback callback, object object);
    public virtual SharedTableEntryMap`1<TValue> EndInvoke(IAsyncResult result);
}
public class Microsoft.EntityFrameworkCore.Update.Internal.SharedTableEntryValueFactory`1 : MulticastDelegate {
    public SharedTableEntryValueFactory`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual TValue Invoke(ITable table, IComparer`1<IUpdateEntry> comparer);
    public virtual IAsyncResult BeginInvoke(ITable table, IComparer`1<IUpdateEntry> comparer, AsyncCallback callback, object object);
    public virtual TValue EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Update.Internal.SimpleFullyNullableRowForeignKeyValueFactory`2 : RowForeignKeyValueFactory`2<TKey, TForeignKey> {
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<TKey> <EqualityComparer>k__BackingField;
    public IEqualityComparer`1<TKey> EqualityComparer { get; }
    public SimpleFullyNullableRowForeignKeyValueFactory`2(IForeignKeyConstraint foreignKey, IColumn column, ColumnAccessors columnAccessors, IValueConverterSelector valueConverterSelector);
    [CompilerGeneratedAttribute]
public virtual IEqualityComparer`1<TKey> get_EqualityComparer();
    [NullableContextAttribute("2")]
public virtual bool TryCreateDependentKeyValue(Object[] keyValues, TKey& key);
    [NullableContextAttribute("2")]
public virtual bool TryCreateDependentKeyValue(IDictionary`2<string, object> keyPropertyValues, TKey& key);
    public virtual bool TryCreateDependentKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues, TKey& key);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Update.Internal.SimpleNonNullableRowForeignKeyValueFactory`2 : RowForeignKeyValueFactory`2<TKey, TForeignKey> {
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<TKey> <EqualityComparer>k__BackingField;
    public IEqualityComparer`1<TKey> EqualityComparer { get; }
    public SimpleNonNullableRowForeignKeyValueFactory`2(IForeignKeyConstraint foreignKey, IColumn column, ColumnAccessors columnAccessors, IValueConverterSelector valueConverterSelector);
    [CompilerGeneratedAttribute]
public virtual IEqualityComparer`1<TKey> get_EqualityComparer();
    [NullableContextAttribute("2")]
public virtual bool TryCreateDependentKeyValue(Object[] keyValues, TKey& key);
    [NullableContextAttribute("2")]
public virtual bool TryCreateDependentKeyValue(IDictionary`2<string, object> keyPropertyValues, TKey& key);
    public virtual bool TryCreateDependentKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues, TKey& key);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Update.Internal.SimpleNullablePrincipalRowForeignKeyValueFactory`3 : RowForeignKeyValueFactory`2<TKey, TForeignKey> {
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<TKey> <EqualityComparer>k__BackingField;
    [NullableAttribute("1")]
public IEqualityComparer`1<TKey> EqualityComparer { get; }
    [NullableContextAttribute("1")]
public SimpleNullablePrincipalRowForeignKeyValueFactory`3(IForeignKeyConstraint foreignKey, IColumn column, ColumnAccessors columnAccessors, IValueConverterSelector valueConverterSelector);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual IEqualityComparer`1<TKey> get_EqualityComparer();
    public virtual bool TryCreateDependentKeyValue(Object[] keyValues, TKey& key);
    public virtual bool TryCreateDependentKeyValue(IDictionary`2<string, object> keyPropertyValues, TKey& key);
    [NullableContextAttribute("1")]
public virtual bool TryCreateDependentKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues, TKey& key);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Update.Internal.SimpleNullableRowForeignKeyValueFactory`2 : RowForeignKeyValueFactory`2<TKey, TForeignKey> {
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<TKey> <EqualityComparer>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEqualityComparer`1<TKey> EqualityComparer { get; }
    [NullableContextAttribute("1")]
public SimpleNullableRowForeignKeyValueFactory`2(IForeignKeyConstraint foreignKey, IColumn column, ColumnAccessors columnAccessors, IValueConverterSelector valueConverterSelector);
    [CompilerGeneratedAttribute]
public virtual IEqualityComparer`1<TKey> get_EqualityComparer();
    public virtual bool TryCreateDependentKeyValue(Object[] keyValues, TKey& key);
    public virtual bool TryCreateDependentKeyValue(IDictionary`2<string, object> keyPropertyValues, TKey& key);
    public virtual bool TryCreateDependentKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues, TKey& key);
    private static bool HandleNullableValue(Nullable`1<TKey> value, TKey& key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Update.Internal.SimpleRowIndexValueFactory`1 : object {
    private IColumn _column;
    private ITableIndex _index;
    private ColumnAccessors _columnAccessors;
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<TKey> <EqualityComparer>k__BackingField;
    public IEqualityComparer`1<TKey> EqualityComparer { get; }
    public SimpleRowIndexValueFactory`1(ITableIndex index);
    [CompilerGeneratedAttribute]
public virtual IEqualityComparer`1<TKey> get_EqualityComparer();
    [NullableContextAttribute("2")]
public virtual bool TryCreateIndexValue(Object[] keyValues, TKey& key, Boolean& hasNullValue);
    [NullableContextAttribute("2")]
public virtual bool TryCreateIndexValue(IDictionary`2<string, object> keyValues, TKey& key, Boolean& hasNullValue);
    public virtual bool TryCreateIndexValue(IReadOnlyModificationCommand command, bool fromOriginalValues, TKey& key, Boolean& hasNullValue);
    public virtual ValueTuple`2<object, bool> CreateEquatableIndexValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
    public virtual ValueTuple`2<Object[], bool> CreateIndexValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Update.Internal.SimpleRowKeyValueFactory`1 : object {
    private static bool QuirkEnabled29985;
    private IUniqueConstraint _constraint;
    private IColumn _column;
    private ColumnAccessors _columnAccessors;
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<TKey> <EqualityComparer>k__BackingField;
    public IEqualityComparer`1<TKey> EqualityComparer { get; }
    public SimpleRowKeyValueFactory`1(IUniqueConstraint constraint);
    private static SimpleRowKeyValueFactory`1();
    [CompilerGeneratedAttribute]
public virtual IEqualityComparer`1<TKey> get_EqualityComparer();
    public virtual TKey CreateKeyValue(Object[] keyValues);
    public virtual TKey CreateKeyValue(IDictionary`2<string, object> keyValues);
    public virtual TKey CreateKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
    public virtual object CreateEquatableKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
    private sealed virtual override Object[] Microsoft.EntityFrameworkCore.Update.Internal.IRowKeyValueFactory.CreateKeyValue(IReadOnlyModificationCommand command, bool fromOriginalValues);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand {
    [NullableAttribute("2")]
public ITable Table { get; }
    [NullableAttribute("2")]
public IStoreStoredProcedure StoreStoredProcedure { get; }
    public string TableName { get; }
    [NullableAttribute("2")]
public string Schema { get; }
    public IReadOnlyList`1<IColumnModification> ColumnModifications { get; }
    public IReadOnlyList`1<IUpdateEntry> Entries { get; }
    public EntityState EntityState { get; }
    [NullableAttribute("2")]
public IColumnBase RowsAffectedColumn { get; }
    [NullableContextAttribute("2")]
public abstract virtual ITable get_Table();
    [NullableContextAttribute("2")]
public abstract virtual IStoreStoredProcedure get_StoreStoredProcedure();
    public abstract virtual string get_TableName();
    [NullableContextAttribute("2")]
public abstract virtual string get_Schema();
    public abstract virtual IReadOnlyList`1<IColumnModification> get_ColumnModifications();
    public abstract virtual IReadOnlyList`1<IUpdateEntry> get_Entries();
    public abstract virtual EntityState get_EntityState();
    [NullableContextAttribute("2")]
public abstract virtual IColumnBase get_RowsAffectedColumn();
    public abstract virtual void PropagateResults(RelationalDataReader relationalReader);
    public abstract virtual void PropagateOutputParameters(DbParameterCollection parameterCollection, int baseParameterIndex);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Update.IUpdateSqlGenerator {
    public abstract virtual string GenerateNextSequenceValueOperation(string name, string schema);
    public abstract virtual void AppendNextSequenceValueOperation(StringBuilder commandStringBuilder, string name, string schema);
    public abstract virtual string GenerateObtainNextSequenceValueOperation(string name, string schema);
    public abstract virtual void AppendObtainNextSequenceValueOperation(StringBuilder commandStringBuilder, string name, string schema);
    public abstract virtual void AppendBatchHeader(StringBuilder commandStringBuilder);
    public abstract virtual void PrependEnsureAutocommit(StringBuilder commandStringBuilder);
    public abstract virtual ResultSetMapping AppendDeleteOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    public virtual ResultSetMapping AppendDeleteOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition);
    public abstract virtual ResultSetMapping AppendInsertOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    public virtual ResultSetMapping AppendInsertOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition);
    public abstract virtual ResultSetMapping AppendUpdateOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    public virtual ResultSetMapping AppendUpdateOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition);
    public abstract virtual ResultSetMapping AppendStoredProcedureCall(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Update.ModificationCommand : object {
    private static bool QuirkEnabled29789;
    private Func`1<string> _generateParameterName;
    private bool _sensitiveLoggingEnabled;
    private bool _detailedErrorsEnabled;
    private IComparer`1<IUpdateEntry> _comparer;
    private List`1<IUpdateEntry> _entries;
    private List`1<IColumnModification> _columnModifications;
    private bool _mainEntryAdded;
    private EntityState _entityState;
    private IDiagnosticsLogger`1<Update> _logger;
    [CompilerGeneratedAttribute]
private ITable <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private IStoreStoredProcedure <StoreStoredProcedure>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private IColumnBase <RowsAffectedColumn>k__BackingField;
    [NullableAttribute("2")]
public ITable Table { get; }
    [NullableAttribute("2")]
public IStoreStoredProcedure StoreStoredProcedure { get; }
    public string TableName { get; }
    [NullableAttribute("2")]
public string Schema { get; }
    public IReadOnlyList`1<IUpdateEntry> Entries { get; }
    public EntityState EntityState { get; public set; }
    [NullableAttribute("2")]
public IColumnBase RowsAffectedColumn { get; private set; }
    public IReadOnlyList`1<IColumnModification> ColumnModifications { get; }
    public ModificationCommand(ModificationCommandParameters& modificationCommandParameters);
    public ModificationCommand(NonTrackedModificationCommandParameters& modificationCommandParameters);
    private static ModificationCommand();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual ITable get_Table();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual IStoreStoredProcedure get_StoreStoredProcedure();
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Schema();
    public virtual IReadOnlyList`1<IUpdateEntry> get_Entries();
    public virtual EntityState get_EntityState();
    public virtual void set_EntityState(EntityState value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual IColumnBase get_RowsAffectedColumn();
    [CompilerGeneratedAttribute]
private void set_RowsAffectedColumn(IColumnBase value);
    public virtual IReadOnlyList`1<IColumnModification> get_ColumnModifications();
    [ConditionalAttribute("DEBUG")]
[EntityFrameworkInternalAttribute]
public virtual void AssertColumnsNotInitialized();
    public virtual void AddEntry(IUpdateEntry entry, bool mainEntry);
    private void ValidateState(IUpdateEntry mainEntry, IUpdateEntry entry);
    public virtual IColumnModification AddColumnModification(ColumnModificationParameters& modreq(System.Runtime.InteropServices.InAttribute) columnModificationParameters);
    protected virtual IColumnModification CreateColumnModification(ColumnModificationParameters& modreq(System.Runtime.InteropServices.InAttribute) columnModificationParameters);
    private List`1<IColumnModification> GenerateColumnModifications();
    private JsonNode CreateJson(object navigationValue, IUpdateEntry parentEntry, IEntityType entityType, Nullable`1<int> ordinal, bool isCollection);
    private ITableMapping GetTableMapping(IEntityType entityType);
    private IStoredProcedureMapping GetStoredProcedureMapping(IEntityType entityType, EntityState entityState);
    private static void InitializeSharedColumns(IUpdateEntry entry, ITableMapping tableMapping, bool updating, Dictionary`2<string, ColumnValuePropagator> columnMap);
    public virtual void PropagateResults(RelationalDataReader relationalReader);
    public virtual void PropagateOutputParameters(DbParameterCollection parameterCollection, int baseParameterIndex);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool <AddEntry>b__36_0(ITableMapping m);
    [CompilerGeneratedAttribute]
private void <GenerateColumnModifications>g__HandleColumnModification|42_5(IColumnMappingBase columnMapping, <>c__DisplayClass42_0& , <>c__DisplayClass42_1& , <>c__DisplayClass42_2& );
    [CompilerGeneratedAttribute]
internal static JsonPartialUpdateInfo <GenerateColumnModifications>g__FindJsonPartialUpdateInfo|42_0(IUpdateEntry entry, List`1<IUpdateEntry> processedEntries);
    [CompilerGeneratedAttribute]
internal static JsonPartialUpdateInfo <GenerateColumnModifications>g__FindCommonJsonPartialUpdateInfo|42_1(JsonPartialUpdateInfo first, JsonPartialUpdateInfo second);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Update.ModificationCommandBatch : object {
    public IReadOnlyList`1<IReadOnlyModificationCommand> ModificationCommands { get; }
    public bool RequiresTransaction { get; }
    public bool AreMoreBatchesExpected { get; }
    public abstract virtual IReadOnlyList`1<IReadOnlyModificationCommand> get_ModificationCommands();
    public abstract virtual bool TryAddCommand(IReadOnlyModificationCommand modificationCommand);
    public abstract virtual void Complete(bool moreBatchesExpected);
    public abstract virtual bool get_RequiresTransaction();
    public abstract virtual bool get_AreMoreBatchesExpected();
    public abstract virtual void Execute(IRelationalConnection connection);
    public abstract virtual Task ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Update.ModificationCommandBatchFactoryDependencies : object {
    [CompilerGeneratedAttribute]
private IRelationalCommandDiagnosticsLogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Update> <UpdateLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalCommandBuilderFactory <CommandBuilderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlGenerationHelper <SqlGenerationHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IUpdateSqlGenerator <UpdateSqlGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IRelationalCommandDiagnosticsLogger Logger { get; public set; }
    public IDiagnosticsLogger`1<Update> UpdateLogger { get; }
    public IRelationalCommandBuilderFactory CommandBuilderFactory { get; public set; }
    public ISqlGenerationHelper SqlGenerationHelper { get; public set; }
    public IUpdateSqlGenerator UpdateSqlGenerator { get; public set; }
    public ICurrentDbContext CurrentContext { get; public set; }
    [EntityFrameworkInternalAttribute]
public ModificationCommandBatchFactoryDependencies(IRelationalCommandBuilderFactory commandBuilderFactory, ISqlGenerationHelper sqlGenerationHelper, IUpdateSqlGenerator updateSqlGenerator, ICurrentDbContext currentContext, IRelationalCommandDiagnosticsLogger logger, IDiagnosticsLogger`1<Update> updateLogger);
    [CompilerGeneratedAttribute]
private ModificationCommandBatchFactoryDependencies(ModificationCommandBatchFactoryDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IRelationalCommandDiagnosticsLogger get_Logger();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Logger(IRelationalCommandDiagnosticsLogger value);
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Update> get_UpdateLogger();
    [CompilerGeneratedAttribute]
public IRelationalCommandBuilderFactory get_CommandBuilderFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CommandBuilderFactory(IRelationalCommandBuilderFactory value);
    [CompilerGeneratedAttribute]
public ISqlGenerationHelper get_SqlGenerationHelper();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SqlGenerationHelper(ISqlGenerationHelper value);
    [CompilerGeneratedAttribute]
public IUpdateSqlGenerator get_UpdateSqlGenerator();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UpdateSqlGenerator(IUpdateSqlGenerator value);
    [CompilerGeneratedAttribute]
public ICurrentDbContext get_CurrentContext();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CurrentContext(ICurrentDbContext value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ModificationCommandBatchFactoryDependencies left, ModificationCommandBatchFactoryDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ModificationCommandBatchFactoryDependencies left, ModificationCommandBatchFactoryDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ModificationCommandBatchFactoryDependencies other);
    [CompilerGeneratedAttribute]
public ModificationCommandBatchFactoryDependencies <Clone>$();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Update.ModificationCommandParameters : ValueType {
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private ITable <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private IStoreStoredProcedure <StoreStoredProcedure>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<string> <GenerateParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SensitiveLoggingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DetailedErrorsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IComparer`1<IUpdateEntry> <Comparer>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Update> <Logger>k__BackingField;
    [NullableAttribute("1")]
public string TableName { get; public set; }
    public string Schema { get; public set; }
    public ITable Table { get; public set; }
    public IStoreStoredProcedure StoreStoredProcedure { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<string> GenerateParameterName { get; public set; }
    public bool SensitiveLoggingEnabled { get; public set; }
    public bool DetailedErrorsEnabled { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IComparer`1<IUpdateEntry> Comparer { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDiagnosticsLogger`1<Update> Logger { get; public set; }
    [NullableContextAttribute("1")]
public ModificationCommandParameters(ITable table, IStoreStoredProcedure storeStoredProcedure, bool sensitiveLoggingEnabled, bool detailedErrorsEnabled, IComparer`1<IUpdateEntry> comparer, Func`1<string> generateParameterName, IDiagnosticsLogger`1<Update> logger);
    [NullableContextAttribute("1")]
public ModificationCommandParameters(ITable table, bool sensitiveLoggingEnabled, bool detailedErrorsEnabled, IComparer`1<IUpdateEntry> comparer, Func`1<string> generateParameterName, IDiagnosticsLogger`1<Update> logger);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_TableName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Schema(string value);
    [CompilerGeneratedAttribute]
public ITable get_Table();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Table(ITable value);
    [CompilerGeneratedAttribute]
public IStoreStoredProcedure get_StoreStoredProcedure();
    [CompilerGeneratedAttribute]
public Func`1<string> get_GenerateParameterName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_GenerateParameterName(Func`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_SensitiveLoggingEnabled();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SensitiveLoggingEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_DetailedErrorsEnabled();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DetailedErrorsEnabled(bool value);
    [CompilerGeneratedAttribute]
public IComparer`1<IUpdateEntry> get_Comparer();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Comparer(IComparer`1<IUpdateEntry> value);
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Update> get_Logger();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Logger(IDiagnosticsLogger`1<Update> value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ModificationCommandParameters left, ModificationCommandParameters right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ModificationCommandParameters left, ModificationCommandParameters right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ModificationCommandParameters other);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Update.NonTrackedModificationCommandParameters : ValueType {
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private ITable <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SensitiveLoggingEnabled>k__BackingField;
    [NullableAttribute("1")]
public string TableName { get; public set; }
    public string Schema { get; public set; }
    public ITable Table { get; public set; }
    public bool SensitiveLoggingEnabled { get; public set; }
    [NullableContextAttribute("1")]
public NonTrackedModificationCommandParameters(string tableName, string schemaName, bool sensitiveLoggingEnabled);
    [NullableContextAttribute("1")]
public NonTrackedModificationCommandParameters(ITable table, bool sensitiveLoggingEnabled);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_TableName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Schema(string value);
    [CompilerGeneratedAttribute]
public ITable get_Table();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Table(ITable value);
    [CompilerGeneratedAttribute]
public bool get_SensitiveLoggingEnabled();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SensitiveLoggingEnabled(bool value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(NonTrackedModificationCommandParameters left, NonTrackedModificationCommandParameters right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(NonTrackedModificationCommandParameters left, NonTrackedModificationCommandParameters right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(NonTrackedModificationCommandParameters other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch : ModificationCommandBatch {
    private List`1<IReadOnlyModificationCommand> _modificationCommands;
    private int _batchHeaderLength;
    private bool _requiresTransaction;
    private bool _areMoreBatchesExpected;
    private int _sqlBuilderPosition;
    private int _commandResultSetCount;
    private int _pendingParameters;
    [CompilerGeneratedAttribute]
private ModificationCommandBatchFactoryDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private IUpdateSqlGenerator <UpdateSqlGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalCommandBuilder <RelationalCommandBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxBatchSize>k__BackingField;
    [CompilerGeneratedAttribute]
private StringBuilder <SqlBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <ParameterValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ResultSetMapping> <ResultSetMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private RawSqlCommand <StoreCommand>k__BackingField;
    protected ModificationCommandBatchFactoryDependencies Dependencies { get; }
    protected IUpdateSqlGenerator UpdateSqlGenerator { get; }
    protected IRelationalCommandBuilder RelationalCommandBuilder { get; }
    protected int MaxBatchSize { get; }
    protected StringBuilder SqlBuilder { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected Dictionary`2<string, object> ParameterValues { get; }
    public IReadOnlyList`1<IReadOnlyModificationCommand> ModificationCommands { get; }
    protected IList`1<ResultSetMapping> ResultSetMappings { get; }
    [NullableAttribute("2")]
protected RawSqlCommand StoreCommand { get; protected set; }
    protected bool IsCommandTextEmpty { get; }
    public bool RequiresTransaction { get; }
    public bool AreMoreBatchesExpected { get; }
    protected ReaderModificationCommandBatch(ModificationCommandBatchFactoryDependencies dependencies, Nullable`1<int> maxBatchSize);
    [CompilerGeneratedAttribute]
protected virtual ModificationCommandBatchFactoryDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual IUpdateSqlGenerator get_UpdateSqlGenerator();
    [CompilerGeneratedAttribute]
protected virtual IRelationalCommandBuilder get_RelationalCommandBuilder();
    [CompilerGeneratedAttribute]
protected virtual int get_MaxBatchSize();
    [CompilerGeneratedAttribute]
protected virtual StringBuilder get_SqlBuilder();
    [CompilerGeneratedAttribute]
protected virtual Dictionary`2<string, object> get_ParameterValues();
    public virtual IReadOnlyList`1<IReadOnlyModificationCommand> get_ModificationCommands();
    [CompilerGeneratedAttribute]
protected virtual IList`1<ResultSetMapping> get_ResultSetMappings();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected virtual RawSqlCommand get_StoreCommand();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected virtual void set_StoreCommand(RawSqlCommand value);
    public virtual bool TryAddCommand(IReadOnlyModificationCommand modificationCommand);
    protected virtual void RollbackLastCommand(IReadOnlyModificationCommand modificationCommand);
    protected virtual bool get_IsCommandTextEmpty();
    public virtual bool get_RequiresTransaction();
    public virtual bool get_AreMoreBatchesExpected();
    protected virtual void SetRequiresTransaction(bool requiresTransaction);
    protected virtual bool IsValid();
    protected virtual void AddCommand(IReadOnlyModificationCommand modificationCommand);
    public virtual void Complete(bool moreBatchesExpected);
    protected virtual void AddParameters(IReadOnlyModificationCommand modificationCommand);
    protected virtual void AddParameter(IColumnModification columnModification);
    public virtual void Execute(IRelationalConnection connection);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch/<ExecuteAsync>d__50")]
public virtual Task ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken);
    protected abstract virtual void Consume(RelationalDataReader reader);
    protected abstract virtual Task ConsumeAsync(RelationalDataReader reader, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <AddParameter>g__AddParameterCore|48_0(string name, object value, <>c__DisplayClass48_0& );
}
[FlagsAttribute]
public enum Microsoft.EntityFrameworkCore.Update.ResultSetMapping : Enum {
    public int value__;
    public static ResultSetMapping NoResults;
    public static ResultSetMapping HasResultRow;
    public static ResultSetMapping NotLastInResultSet;
    public static ResultSetMapping LastInResultSet;
    public static ResultSetMapping ResultSetWithRowsAffectedOnly;
    public static ResultSetMapping IsPositionalResultMappingEnabled;
    public static ResultSetMapping HasOutputParameters;
}
public class Microsoft.EntityFrameworkCore.Update.SingularModificationCommandBatch : AffectedCountModificationCommandBatch {
    [NullableContextAttribute("1")]
public SingularModificationCommandBatch(ModificationCommandBatchFactoryDependencies dependencies);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Update.UpdateAndSelectSqlGenerator : UpdateSqlGenerator {
    protected UpdateAndSelectSqlGenerator(UpdateSqlGeneratorDependencies dependencies);
    public virtual ResultSetMapping AppendInsertOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    protected virtual ResultSetMapping AppendInsertAndSelectOperations(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    public virtual ResultSetMapping AppendUpdateOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    protected virtual ResultSetMapping AppendUpdateAndSelectOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    public virtual ResultSetMapping AppendDeleteOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    protected virtual ResultSetMapping AppendDeleteAndSelectOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    protected virtual ResultSetMapping AppendSelectAffectedCommand(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<IColumnModification> readOperations, IReadOnlyList`1<IColumnModification> conditionOperations, int commandPosition);
    protected virtual void AppendSelectCommandHeader(StringBuilder commandStringBuilder, IReadOnlyList`1<IColumnModification> operations);
    protected virtual void AppendFromClause(StringBuilder commandStringBuilder, string name, string schema);
    protected virtual void AppendWhereAffectedClause(StringBuilder commandStringBuilder, IReadOnlyList`1<IColumnModification> operations);
    protected virtual bool IsIdentityOperation(IColumnModification modification);
    protected abstract virtual void AppendRowsAffectedWhereCondition(StringBuilder commandStringBuilder, int expectedRowsAffected);
    protected abstract virtual void AppendIdentityWhereCondition(StringBuilder commandStringBuilder, IColumnModification columnModification);
    protected abstract virtual ResultSetMapping AppendSelectAffectedCountCommand(StringBuilder commandStringBuilder, string name, string schema, int commandPosition);
    [CompilerGeneratedAttribute]
private bool <AppendWhereAffectedClause>b__10_0(StringBuilder sb, IColumnModification v);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator : object {
    [CompilerGeneratedAttribute]
private UpdateSqlGeneratorDependencies <Dependencies>k__BackingField;
    protected UpdateSqlGeneratorDependencies Dependencies { get; }
    protected ISqlGenerationHelper SqlGenerationHelper { get; }
    protected UpdateSqlGenerator(UpdateSqlGeneratorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual UpdateSqlGeneratorDependencies get_Dependencies();
    protected virtual ISqlGenerationHelper get_SqlGenerationHelper();
    public virtual ResultSetMapping AppendInsertOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    public virtual ResultSetMapping AppendInsertOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition);
    public virtual ResultSetMapping AppendInsertReturningOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    public virtual ResultSetMapping AppendUpdateOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    public virtual ResultSetMapping AppendUpdateOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition);
    protected virtual ResultSetMapping AppendUpdateReturningOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    public virtual ResultSetMapping AppendDeleteOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    public virtual ResultSetMapping AppendDeleteOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition);
    protected virtual ResultSetMapping AppendDeleteReturningOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    protected virtual void AppendInsertCommand(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<IColumnModification> writeOperations, IReadOnlyList`1<IColumnModification> readOperations);
    protected virtual void AppendUpdateCommand(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<IColumnModification> writeOperations, IReadOnlyList`1<IColumnModification> readOperations, IReadOnlyList`1<IColumnModification> conditionOperations, bool appendReturningOneClause);
    protected virtual void AppendDeleteCommand(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<IColumnModification> readOperations, IReadOnlyList`1<IColumnModification> conditionOperations, bool appendReturningOneClause);
    protected virtual void AppendInsertCommandHeader(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<IColumnModification> operations);
    protected virtual void AppendDeleteCommandHeader(StringBuilder commandStringBuilder, string name, string schema);
    protected virtual void AppendUpdateCommandHeader(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<IColumnModification> operations);
    protected virtual void AppendUpdateColumnValue(ISqlGenerationHelper updateSqlGeneratorHelper, IColumnModification columnModification, StringBuilder stringBuilder, string name, string schema);
    public virtual ResultSetMapping AppendStoredProcedureCall(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    protected virtual void AppendValuesHeader(StringBuilder commandStringBuilder, IReadOnlyList`1<IColumnModification> operations);
    protected virtual void AppendValues(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<IColumnModification> operations);
    protected virtual void AppendReturningClause(StringBuilder commandStringBuilder, IReadOnlyList`1<IColumnModification> operations, string additionalValues);
    protected virtual void AppendWhereClause(StringBuilder commandStringBuilder, IReadOnlyList`1<IColumnModification> operations);
    protected virtual void AppendWhereCondition(StringBuilder commandStringBuilder, IColumnModification columnModification, bool useOriginalValue);
    public virtual void AppendBatchHeader(StringBuilder commandStringBuilder);
    public virtual void PrependEnsureAutocommit(StringBuilder commandStringBuilder);
    public virtual string GenerateNextSequenceValueOperation(string name, string schema);
    public virtual void AppendNextSequenceValueOperation(StringBuilder commandStringBuilder, string name, string schema);
    public virtual string GenerateObtainNextSequenceValueOperation(string name, string schema);
    public virtual void AppendObtainNextSequenceValueOperation(StringBuilder commandStringBuilder, string name, string schema);
    protected static void AppendSqlLiteral(StringBuilder commandStringBuilder, IColumnModification modification, string tableName, string schema);
    [CompilerGeneratedAttribute]
private void <AppendUpdateCommandHeader>b__20_0(StringBuilder sb, IColumnModification o, ValueTuple`3<UpdateSqlGenerator, string, string> p);
    [CompilerGeneratedAttribute]
private void <AppendWhereClause>b__26_0(StringBuilder sb, IColumnModification v);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Update.UpdateSqlGeneratorDependencies : object {
    [CompilerGeneratedAttribute]
private ISqlGenerationHelper <SqlGenerationHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationalTypeMappingSource <TypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public ISqlGenerationHelper SqlGenerationHelper { get; public set; }
    public IRelationalTypeMappingSource TypeMappingSource { get; public set; }
    [EntityFrameworkInternalAttribute]
public UpdateSqlGeneratorDependencies(ISqlGenerationHelper sqlGenerationHelper, IRelationalTypeMappingSource typeMappingSource);
    [CompilerGeneratedAttribute]
private UpdateSqlGeneratorDependencies(UpdateSqlGeneratorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ISqlGenerationHelper get_SqlGenerationHelper();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SqlGenerationHelper(ISqlGenerationHelper value);
    [CompilerGeneratedAttribute]
public IRelationalTypeMappingSource get_TypeMappingSource();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeMappingSource(IRelationalTypeMappingSource value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(UpdateSqlGeneratorDependencies left, UpdateSqlGeneratorDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(UpdateSqlGeneratorDependencies left, UpdateSqlGeneratorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(UpdateSqlGeneratorDependencies other);
    [CompilerGeneratedAttribute]
public UpdateSqlGeneratorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.Check : object {
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static IReadOnlyList`1<T> NotEmpty(IReadOnlyList`1<T> value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static string NotEmpty(string value, string parameterName);
    [NullableContextAttribute("2")]
public static string NullButNotEmpty(string value, string parameterName);
    public static IReadOnlyList`1<T> HasNoNulls(IReadOnlyList`1<T> value, string parameterName);
    public static IReadOnlyList`1<string> HasNoEmptyElements(IReadOnlyList`1<string> value, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void DebugAssert(bool condition, string message);
    [ConditionalAttribute("DEBUG")]
[DoesNotReturnAttribute]
public static void DebugFail(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.DictionaryExtensions : object {
    [ExtensionAttribute]
public static TValue GetOrAddNew(IDictionary`2<TKey, TValue> source, TKey key);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TValue Find(IReadOnlyDictionary`2<TKey, TValue> source, TKey key);
    [ExtensionAttribute]
public static bool TryGetAndRemove(IDictionary`2<TKey, TValue> source, TKey key, TReturn& value);
    [ExtensionAttribute]
public static void Remove(IDictionary`2<TKey, TValue> source, Func`3<TKey, TValue, bool> predicate);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void Remove(IDictionary`2<TKey, TValue> source, Func`4<TKey, TValue, TState, bool> predicate, TState state);
}
[ExtensionAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.DisposableExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ValueTask DisposeAsyncIfAvailable(IDisposable disposable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.EnumerableExtensions : object {
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByOrdinal(IEnumerable`1<TSource> source, Func`2<TSource, string> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<T> Distinct(IEnumerable`1<T> source, Func`3<T, T, bool> comparer);
    [ExtensionAttribute]
public static string Join(IEnumerable`1<object> source, string separator);
    [ExtensionAttribute]
public static bool StructuralSequenceEqual(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static bool StartsWith(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> source, T item);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> source, T item, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static T FirstOr(IEnumerable`1<T> source, T alternate);
    [ExtensionAttribute]
public static T FirstOr(IEnumerable`1<T> source, Func`2<T, bool> predicate, T alternate);
    [ExtensionAttribute]
public static bool Any(IEnumerable source);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Utilities.EnumerableExtensions/<ToListAsync>d__11`1")]
[ExtensionAttribute]
public static Task`1<List`1<TSource>> ToListAsync(IAsyncEnumerable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static List`1<TSource> ToList(IEnumerable source);
    [ExtensionAttribute]
public static string Format(IEnumerable`1<string> strings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.EntityFrameworkCore.Utilities.Graph`1 : object {
    public IEnumerable`1<TVertex> Vertices { get; }
    public abstract virtual IEnumerable`1<TVertex> get_Vertices();
    public abstract virtual void Clear();
    public abstract virtual IEnumerable`1<TVertex> GetOutgoingNeighbors(TVertex from);
    public abstract virtual IEnumerable`1<TVertex> GetIncomingNeighbors(TVertex to);
    public ISet`1<TVertex> GetUnreachableVertices(IReadOnlyList`1<TVertex> roots);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Microsoft.EntityFrameworkCore.Utilities.Multigraph`2 : Graph`1<TVertex> {
    private IComparer`1<TVertex> _secondarySortComparer;
    private HashSet`1<TVertex> _vertices;
    private Dictionary`2<TVertex, Dictionary`2<TVertex, object>> _successorMap;
    private Dictionary`2<TVertex, Dictionary`2<TVertex, object>> _predecessorMap;
    public IEnumerable`1<TVertex> Vertices { get; }
    public Multigraph`2(IComparer`1<TVertex> secondarySortComparer);
    public Multigraph`2(Comparison`1<TVertex> secondarySortComparer);
    public IEnumerable`1<TEdge> GetEdges(TVertex from, TVertex to);
    public void AddVertex(TVertex vertex);
    public void AddVertices(IEnumerable`1<TVertex> vertices);
    public void AddEdge(TVertex from, TVertex to, TEdge payload, bool requiresBatchingBoundary);
    public virtual void Clear();
    public IReadOnlyList`1<TVertex> TopologicalSort();
    public IReadOnlyList`1<TVertex> TopologicalSort(Func`4<TVertex, TVertex, IEnumerable`1<TEdge>, bool> tryBreakEdge);
    public IReadOnlyList`1<TVertex> TopologicalSort(Func`2<IEnumerable`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle);
    public IReadOnlyList`1<TVertex> TopologicalSort(Func`4<TVertex, TVertex, IEnumerable`1<TEdge>, bool> tryBreakEdge, Func`2<IReadOnlyList`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle, Func`2<string, string> formatException);
    protected virtual string ToString(TVertex vertex);
    public IReadOnlyList`1<List`1<TVertex>> BatchingTopologicalSort();
    public IReadOnlyList`1<List`1<TVertex>> BatchingTopologicalSort(Func`4<TVertex, TVertex, IEnumerable`1<TEdge>, bool> tryBreakEdge, Func`2<IReadOnlyList`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle, Func`2<string, string> formatException);
    private IReadOnlyList`1<List`1<TVertex>> TopologicalSortCore(bool withBatching, Func`4<TVertex, TVertex, IEnumerable`1<TEdge>, bool> tryBreakEdge, Func`2<IReadOnlyList`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle, Func`2<string, string> formatException);
    private void ThrowCycle(List`1<TVertex> cycle, Func`2<IReadOnlyList`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle, Func`2<string, string> formatException);
    public virtual IEnumerable`1<TVertex> get_Vertices();
    public virtual IEnumerable`1<TVertex> GetOutgoingNeighbors(TVertex from);
    public virtual IEnumerable`1<TVertex> GetIncomingNeighbors(TVertex to);
    [CompilerGeneratedAttribute]
private string <ThrowCycle>b__20_0(TVertex e);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryBinaryValueGenerator : ValueGenerator`1<Byte[]> {
    public bool GeneratesTemporaryValues { get; }
    public virtual bool get_GeneratesTemporaryValues();
    public virtual Byte[] Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryDateTimeOffsetValueGenerator : ValueGenerator`1<DateTimeOffset> {
    private long _current;
    public bool GeneratesTemporaryValues { get; }
    [NullableContextAttribute("1")]
public virtual DateTimeOffset Next(EntityEntry entry);
    public virtual bool get_GeneratesTemporaryValues();
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryDateTimeValueGenerator : ValueGenerator`1<DateTime> {
    private long _current;
    public bool GeneratesTemporaryValues { get; }
    [NullableContextAttribute("1")]
public virtual DateTime Next(EntityEntry entry);
    public virtual bool get_GeneratesTemporaryValues();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryStringValueGenerator : ValueGenerator`1<string> {
    public bool GeneratesTemporaryValues { get; }
    public virtual bool get_GeneratesTemporaryValues();
    public virtual string Next(EntityEntry entry);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ValueGeneration.RelationalValueGeneratorSelector : ValueGeneratorSelector {
    private TemporaryNumberValueGeneratorFactory _numberFactory;
    public RelationalValueGeneratorSelector(ValueGeneratorSelectorDependencies dependencies);
    protected virtual ValueGenerator FindForType(IProperty property, IEntityType entityType, Type clrType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Linq.Expressions.ExpressionExtensions : object {
    [ExtensionAttribute]
public static bool IsNullConstantExpression(Expression expression);
    [ExtensionAttribute]
public static LambdaExpression UnwrapLambdaFromQuote(Expression expression);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Expression UnwrapTypeConversion(Expression expression, Type& convertedType);
    private static Expression RemoveConvert(Expression expression);
    [ExtensionAttribute]
public static T GetConstantValue(Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Reflection.EntityFrameworkMemberInfoExtensions : object {
    [ExtensionAttribute]
public static Type GetMemberType(MemberInfo memberInfo);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsSameAs(MemberInfo propertyInfo, MemberInfo otherPropertyInfo);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsOverriddenBy(MemberInfo propertyInfo, MemberInfo otherPropertyInfo);
    [ExtensionAttribute]
public static string GetSimpleMemberName(MemberInfo member);
    [ExtensionAttribute]
public static bool IsReallyVirtual(MethodInfo method);
}
[ExtensionAttribute]
internal static class System.Reflection.MethodInfoExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsContainsMethod(MethodInfo method);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Reflection.PropertyInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsStatic(PropertyInfo property);
    [ExtensionAttribute]
public static bool IsCandidateProperty(PropertyInfo propertyInfo, bool needsWrite, bool publicOnly);
    [ExtensionAttribute]
public static bool IsIndexerProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static PropertyInfo FindGetterProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static PropertyInfo FindSetterProperty(PropertyInfo propertyInfo);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.SharedTypeExtensions : object {
    private static Dictionary`2<Type, string> BuiltInTypeNames;
    private static Dictionary`2<Type, object> CommonTypeDictionary;
    private static MethodInfo GenerateDefaultValueConstantMethod;
    private static SharedTypeExtensions();
    [ExtensionAttribute]
public static Type UnwrapNullableType(Type type);
    [ExtensionAttribute]
public static bool IsNullableValueType(Type type);
    [ExtensionAttribute]
public static bool IsNullableType(Type type);
    [ExtensionAttribute]
public static bool IsValidEntityType(Type type);
    [ExtensionAttribute]
public static bool IsPropertyBagType(Type type);
    [ExtensionAttribute]
public static Type MakeNullable(Type type, bool nullable);
    [ExtensionAttribute]
public static bool IsNumeric(Type type);
    [ExtensionAttribute]
public static bool IsInteger(Type type);
    [ExtensionAttribute]
public static bool IsSignedInteger(Type type);
    [ExtensionAttribute]
public static bool IsAnonymousType(Type type);
    [ExtensionAttribute]
public static PropertyInfo GetAnyProperty(Type type, string name);
    [ExtensionAttribute]
public static bool IsInstantiable(Type type);
    [ExtensionAttribute]
public static Type UnwrapEnumType(Type type);
    [ExtensionAttribute]
public static Type GetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetElementType(Type type, Type interfaceOrBaseType);
    [ExtensionAttribute]
public static bool IsCompatibleWith(Type propertyType, Type fieldType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetGenericTypeImplementations>d__18")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetGenericTypeImplementations(Type type, Type interfaceOrBaseType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetBaseTypes>d__19")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetBaseTypes(Type type);
    [ExtensionAttribute]
public static List`1<Type> GetBaseTypesAndInterfacesInclusive(Type type);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetTypesInHierarchy>d__21")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetTypesInHierarchy(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetDeclaredInterfaces(Type type);
    [ExtensionAttribute]
public static ConstructorInfo GetDeclaredConstructor(Type type, Type[] types);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetPropertiesInHierarchy>d__24")]
[ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetPropertiesInHierarchy(Type type, string name);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetMembersInHierarchy>d__25")]
[ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type, string name);
    [ExtensionAttribute]
public static object GetDefaultValue(Type type);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("Gets all types from the given assembly - unsafe for trimming")]
public static IEnumerable`1<TypeInfo> GetConstructibleTypes(Assembly assembly);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("Gets all types from the given assembly - unsafe for trimming")]
public static IEnumerable`1<TypeInfo> GetLoadableDefinedTypes(Assembly assembly);
    [ExtensionAttribute]
public static string DisplayName(Type type, bool fullName, bool compilable);
    private static void ProcessType(StringBuilder builder, Type type, bool fullName, bool compilable);
    private static void ProcessArrayType(StringBuilder builder, Type type, bool fullName, bool compilable);
    private static void ProcessGenericType(StringBuilder builder, Type type, Type[] genericArguments, int length, bool fullName, bool compilable);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetNamespaces>d__35")]
[ExtensionAttribute]
public static IEnumerable`1<string> GetNamespaces(Type type);
    [ExtensionAttribute]
public static ConstantExpression GetDefaultValueConstant(Type type);
    private static ConstantExpression GenerateDefaultValueConstant();
    [CompilerGeneratedAttribute]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2070")]
internal static IEnumerable`1<Type> <GetDeclaredInterfaces>g__GetInterfacesSuppressed|22_0(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Text.StringBuilderExtensions : object {
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<string> values, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, string separator, String[] values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, Action`2<StringBuilder, T> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, Func`3<StringBuilder, T, bool> joinFunc, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam param, Action`3<StringBuilder, T, TParam> joinAction, string separator);
    [ExtensionAttribute]
public static void AppendBytes(StringBuilder builder, Byte[] bytes);
}
