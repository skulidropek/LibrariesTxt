[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.CanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    public string Contract { get; private set; }
    public bool ForceFullStates { get; private set; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
private void set_Contract(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
    [CompilerGeneratedAttribute]
private void set_ForceFullStates(bool value);
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("4320")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    [NotNullAttribute]
public string FormatParameterName { get; private set; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
    [CompilerGeneratedAttribute]
private void set_FormatParameterName(string value);
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; private set; }
    public ImplicitUseTargetFlags TargetFlags { get; private set; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
private void set_UseKindFlags(ImplicitUseKindFlags value);
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
    [CompilerGeneratedAttribute]
private void set_TargetFlags(ImplicitUseTargetFlags value);
}
public enum Microsoft.EntityFrameworkCore.Infrastructure.SqliteDesignEventId : Enum {
    public int value__;
    public static SqliteDesignEventId IndexMissingColumnNameWarning;
    public static SqliteDesignEventId ForeignKeyReferencesMissingColumn;
    public static SqliteDesignEventId SchemasNotSupportedWarning;
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Internal.SqliteDesignLoggerExtensions : object {
    [ExtensionAttribute]
public static void LogWarning(ILogger logger, SqliteDesignEventId eventId, Func`1<string> formatter);
    [ExtensionAttribute]
public static void LogDebug(ILogger logger, SqliteDesignEventId eventId, Func`1<string> formatter);
}
public static class Microsoft.EntityFrameworkCore.Internal.SqliteDesignStrings : object {
    private static ResourceManager _resourceManager;
    public static string UsingSchemaSelectionsWarning { get; }
    private static SqliteDesignStrings();
    public static string ColumnNameEmptyOnIndex(object indexName, object tableName);
    public static string FoundColumn(object tableName, object columnName, object dataType, object ordinal, object isNotNullable, object primaryKeyOrdinal, object defaultValue);
    public static string FoundForeignKeyColumn(object tableName, object id, object principalTableName, object columnName, object principalColumnName, object deleteAction, object ordinal);
    public static string FoundIndex(object indexName, object tableName, object isUnique);
    public static string FoundIndexColumn(object indexName, object tableName, object columnName, object ordinal);
    public static string FoundTable(object name);
    public static string PrincipalColumnNotFound(object id, object tableName, object principalColumnName, object principalTableName);
    public static string PrincipalTableNotFound(object id, object tableName, object principalTableName);
    public static string TableNotInSelectionSet(object tableName);
    public static string get_UsingSchemaSelectionsWarning();
    private static string GetString(string name, String[] formatterNames);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.SqliteDatabaseModelFactory : object {
    [CompilerGeneratedAttribute]
private IInterceptingLogger`1<Scaffolding> <Logger>k__BackingField;
    private DbConnection _connection;
    private TableSelectionSet _tableSelectionSet;
    private DatabaseModel _databaseModel;
    private Dictionary`2<string, TableModel> _tables;
    private Dictionary`2<string, ColumnModel> _tableColumns;
    public IInterceptingLogger`1<Scaffolding> Logger { get; }
    public SqliteDatabaseModelFactory(IInterceptingLogger`1<Scaffolding> logger);
    [CompilerGeneratedAttribute]
public virtual IInterceptingLogger`1<Scaffolding> get_Logger();
    private static string ColumnKey(TableModel table, string columnName);
    private void ResetState();
    public virtual DatabaseModel Create(string connectionString, TableSelectionSet tableSelectionSet);
    public virtual DatabaseModel Create(DbConnection connection, TableSelectionSet tableSelectionSet);
    private void GetTables();
    private void GetColumns();
    private void GetIndexes();
    private void GetForeignKeys();
    private static Nullable`1<ReferentialAction> ConvertToReferentialAction(string onDeleteAction);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.SqliteDesignTimeServices : object {
    public virtual void ConfigureDesignTimeServices(IServiceCollection serviceCollection);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.SqliteScaffoldingModelFactory : RelationalScaffoldingModelFactory {
    public SqliteScaffoldingModelFactory(IInterceptingLogger`1<Scaffolding> logger, IRelationalTypeMapper typeMapper, IDatabaseModelFactory databaseModelFactory, CandidateNamingService candidateNamingService, IPluralizer pluralizer);
    public virtual IModel Create(string connectionString, TableSelectionSet tableSelectionSet);
}
[ExtensionAttribute]
internal static class Microsoft.EntityFrameworkCore.Scaffolding.Internal.SqliteTableSelectionSetExtensions : object {
    [ExtensionAttribute]
public static bool Allows(TableSelectionSet tableSet, string tableName);
}
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.Check : object {
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName, string propertyName);
    [ContractAnnotationAttribute("value:null => halt")]
public static IReadOnlyList`1<T> NotEmpty(IReadOnlyList`1<T> value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static string NotEmpty(string value, string parameterName);
    public static string NullButNotEmpty(string value, string parameterName);
    public static IReadOnlyList`1<T> HasNoNulls(IReadOnlyList`1<T> value, string parameterName);
    public static Type ValidEntityType(Type value, string parameterName);
}
[ExtensionAttribute]
internal static class System.Reflection.MemberInfoExtensions : object {
    [ExtensionAttribute]
public static Type GetMemberType(MemberInfo memberInfo);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Reflection.PropertyInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsStatic(PropertyInfo property);
    [ExtensionAttribute]
public static bool IsCandidateProperty(PropertyInfo propertyInfo, bool needsWrite);
    [ExtensionAttribute]
public static Type FindCandidateNavigationPropertyType(PropertyInfo propertyInfo, Func`2<Type, bool> isPrimitiveProperty);
    [ExtensionAttribute]
public static bool IsSameAs(PropertyInfo propertyInfo, PropertyInfo otherPropertyInfo);
    [ExtensionAttribute]
public static PropertyInfo FindGetterProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static PropertyInfo FindSetterProperty(PropertyInfo propertyInfo);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.SharedTypeExtensions : object {
    private static Dictionary`2<Type, object> _commonTypeDictionary;
    private static SharedTypeExtensions();
    [ExtensionAttribute]
public static Type UnwrapNullableType(Type type);
    [ExtensionAttribute]
public static bool IsNullableType(Type type);
    [ExtensionAttribute]
public static Type MakeNullable(Type type);
    [ExtensionAttribute]
public static bool IsInteger(Type type);
    [ExtensionAttribute]
public static PropertyInfo GetAnyProperty(Type type, string name);
    [ExtensionAttribute]
private static bool IsNonIntegerPrimitive(Type type);
    [ExtensionAttribute]
public static bool IsPrimitive(Type type);
    [ExtensionAttribute]
public static bool IsInstantiable(Type type);
    private static bool IsInstantiable(TypeInfo type);
    [ExtensionAttribute]
public static bool IsGrouping(Type type);
    private static bool IsGrouping(TypeInfo type);
    [ExtensionAttribute]
public static Type UnwrapEnumType(Type type);
    [ExtensionAttribute]
public static Type GetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetElementType(Type type, Type interfaceOrBaseType);
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetGenericTypeImplementations(Type type, Type interfaceOrBaseType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetBaseTypes>d__16")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetBaseTypes(Type type);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetTypesInHierarchy>d__17")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetTypesInHierarchy(Type type);
    [ExtensionAttribute]
public static ConstructorInfo GetDeclaredConstructor(Type type, Type[] types);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetPropertiesInHierarchy>d__19")]
[ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetPropertiesInHierarchy(Type type, string name);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetMembersInHierarchy>d__20")]
[ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type, string name);
    [ExtensionAttribute]
public static object GetDefaultValue(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<TypeInfo> GetConstructableTypes(Assembly assembly);
    [ExtensionAttribute]
public static IEnumerable`1<TypeInfo> GetLoadableDefinedTypes(Assembly assembly);
}
[ExtensionAttribute]
internal static class System.Text.StringBuilderExtensions : object {
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<string> values, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, string separator, String[] values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, Action`2<StringBuilder, T> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam param, Action`3<StringBuilder, T, TParam> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam1 param1, TParam2 param2, Action`4<StringBuilder, T, TParam1, TParam2> joinAction, string separator);
}
