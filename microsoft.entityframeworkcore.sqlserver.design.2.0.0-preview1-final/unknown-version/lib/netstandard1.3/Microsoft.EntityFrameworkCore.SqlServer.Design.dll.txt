[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.CanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    public string Contract { get; private set; }
    public bool ForceFullStates { get; private set; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
private void set_Contract(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
    [CompilerGeneratedAttribute]
private void set_ForceFullStates(bool value);
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("4320")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    [NotNullAttribute]
public string FormatParameterName { get; private set; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
    [CompilerGeneratedAttribute]
private void set_FormatParameterName(string value);
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; private set; }
    public ImplicitUseTargetFlags TargetFlags { get; private set; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
private void set_UseKindFlags(ImplicitUseKindFlags value);
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
    [CompilerGeneratedAttribute]
private void set_TargetFlags(ImplicitUseTargetFlags value);
}
public enum Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDesignEventId : Enum {
    public int value__;
    public static SqlServerDesignEventId FoundDefaultSchema;
    public static SqlServerDesignEventId FoundTypeAlias;
    public static SqlServerDesignEventId ColumnMustBeNamedWarning;
    public static SqlServerDesignEventId IndexMustBeNamedWarning;
    public static SqlServerDesignEventId IndexTableMissingWarning;
    public static SqlServerDesignEventId IndexColumnMustBeNamedWarning;
    public static SqlServerDesignEventId ForeignKeyMustBeNamedWarning;
    public static SqlServerDesignEventId ForeignKeyColumnSkipped;
    public static SqlServerDesignEventId ColumnNameEmptyOnForeignKey;
    public static SqlServerDesignEventId DataTypeDoesNotAllowSqlServerIdentityStrategyWarning;
    public static SqlServerDesignEventId CannotInterpretDefaultValueWarning;
    public static SqlServerDesignEventId CannotInterpretComputedValueWarning;
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Internal.SqlServerDesignLoggerExtensions : object {
    [ExtensionAttribute]
public static void LogWarning(ILogger logger, SqlServerDesignEventId eventId, Func`1<string> formatter);
    [ExtensionAttribute]
public static void LogDebug(ILogger logger, SqlServerDesignEventId eventId, Func`1<string> formatter);
}
public static class Microsoft.EntityFrameworkCore.Internal.SqlServerDesignStrings : object {
    private static ResourceManager _resourceManager;
    private static SqlServerDesignStrings();
    public static string ColumnNameEmptyOnForeignKey(object schemaName, object tableName, object fkName);
    public static string ColumnNameEmptyOnIndex(object schemaName, object tableName, object indexName);
    public static string ColumnNameEmptyOnTable(object schemaName, object tableName);
    public static string ColumnNotInSelectionSet(object columnName, object schema, object tableName);
    public static string DataTypeDoesNotAllowSqlServerIdentityStrategy(object columnId, object sqlServerDataType);
    public static string ForeignKeyColumnNotInSelectionSet(object columnName, object fkName, object schema, object tableName);
    public static string ForeignKeyNameEmpty(object schemaName, object tableName);
    public static string FoundColumn(object schema, object tableName, object columnName, object dataType, object dataTypeSchema, object ordinal, object isNullable, object primaryKeyOrdinal, object defaultValue, object computedValue, object precision, object scale, object maxLength, object isIdentity, object isComputed);
    public static string FoundDefaultSchema(object defaultSchema);
    public static string FoundForeignKeyColumn(object schema, object tableName, object fkName, object principalTableSchema, object principalTableName, object columnName, object principalColumnName, object updateAction, object deleteAction, object ordinal);
    public static string FoundIndexColumn(object schema, object tableName, object indexName, object isUnique, object typeDesc, object columnName, object ordinal);
    public static string FoundSequence(object schema, object name, object dataType, object isCyclic, object increment, object start, object min, object max);
    public static string FoundTable(object schema, object name);
    public static string FoundTypeAlias(object schema, object alias, object dataType);
    public static string IndexColumnNotInSelectionSet(object columnName, object indexName, object schema, object tableName);
    public static string IndexNameEmpty(object schemaName, object tableName);
    public static string PrincipalTableNotInSelectionSet(object fkName, object schema, object tableName, object principalTableSchema, object principalTableName);
    public static string SequenceNameEmpty(object schemaName);
    public static string TableNotInSelectionSet(object schema, object tableName);
    public static string UnableToConvertDefaultValue(object columnId, object defaultValue, object propertyType, object propertyName, object entityTypeName);
    public static string UnableToFindColumnForForeignKey(object fkName, object columnName, object schemaName, object tableName);
    public static string UnableToFindColumnForIndex(object indexName, object columnName, object schemaName, object tableName);
    public static string UnableToFindTableForColumn(object columnName, object schemaName, object tablename);
    public static string UnableToFindTableForIndex(object indexName, object schemaName, object tableName);
    private static string GetString(string name, String[] formatterNames);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Scaffolding.Internal.SqlDataReaderExtension : object {
    [ExtensionAttribute]
public static T GetValueOrDefault(SqlDataReader reader, string name);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.SqlServerDatabaseModelFactory : object {
    private DbConnection _connection;
    private Version _serverVersion;
    private TableSelectionSet _tableSelectionSet;
    private DatabaseModel _databaseModel;
    private Dictionary`2<string, TableModel> _tables;
    private Dictionary`2<string, ColumnModel> _tableColumns;
    private static ISet`1<string> _dateTimePrecisionTypes;
    private static int DefaultDateTimePrecision;
    private static Dictionary`2<string, Int64[]> _defaultSequenceMinMax;
    [CompilerGeneratedAttribute]
private IInterceptingLogger`1<Scaffolding> <Logger>k__BackingField;
    public IInterceptingLogger`1<Scaffolding> Logger { get; }
    private bool SupportsSequences { get; }
    private string MemoryOptimizedTableColumn { get; }
    private string TemporalTableWhereClause { get; }
    public SqlServerDatabaseModelFactory(IInterceptingLogger`1<Scaffolding> logger);
    private static SqlServerDatabaseModelFactory();
    public static string SchemaQualifiedKey(string name, string schema);
    private static string TableKey(TableModel table);
    private static string ColumnKey(TableModel table, string columnName);
    [CompilerGeneratedAttribute]
public virtual IInterceptingLogger`1<Scaffolding> get_Logger();
    private void ResetState();
    public virtual DatabaseModel Create(string connectionString, TableSelectionSet tableSelectionSet);
    public virtual DatabaseModel Create(DbConnection connection, TableSelectionSet tableSelectionSet);
    private bool get_SupportsSequences();
    private string get_MemoryOptimizedTableColumn();
    private string get_TemporalTableWhereClause();
    private void GetDefaultSchema();
    private void GetTypeAliases();
    private void GetSequences();
    private void GetTables();
    private void GetColumns();
    private void GetIndexes();
    private void GetForeignKeys();
    private ColumnModel FindColumnForForeignKey(string columnName, TableModel table, string fkName);
    private static Nullable`1<ReferentialAction> ConvertToReferentialAction(string onDeleteAction);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.SqlServerDesignTimeServices : object {
    public virtual void ConfigureDesignTimeServices(IServiceCollection serviceCollection);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.SqlServerScaffoldingModelFactory : RelationalScaffoldingModelFactory {
    private static int DefaultTimeTimePrecision;
    private static ISet`1<string> _stringAndByteArrayTypesForbiddingMaxLength;
    private static ISet`1<string> _dataTypesAllowingMaxLengthMax;
    public SqlServerScaffoldingModelFactory(IInterceptingLogger`1<Scaffolding> logger, IRelationalTypeMapper typeMapper, IDatabaseModelFactory databaseModelFactory, CandidateNamingService candidateNamingService, IPluralizer pluralizer);
    private static SqlServerScaffoldingModelFactory();
    public virtual IModel Create(string connectionString, TableSelectionSet tableSelectionSet);
    protected virtual PropertyBuilder VisitColumn(EntityTypeBuilder builder, ColumnModel column);
    protected virtual RelationalTypeMapping GetTypeMapping(ColumnModel column);
    protected virtual KeyBuilder VisitPrimaryKey(EntityTypeBuilder builder, TableModel table);
    protected virtual IndexBuilder VisitIndex(EntityTypeBuilder builder, IndexModel index);
    private void VisitTypeMapping(PropertyBuilder propertyBuilder, ColumnModel column);
    private static bool HasTypeAlias(ColumnModel column);
    private Tuple`2<string, Nullable`1<int>> MaxLengthQualifiedDataType(string unqualifiedTypeName, Nullable`1<int> maxLength);
    private void VisitDefaultValue(PropertyBuilder propertyBuilder, ColumnModel column);
    private void VisitComputedValue(PropertyBuilder propertyBuilder, ColumnModel column);
}
[ExtensionAttribute]
internal static class Microsoft.EntityFrameworkCore.Scaffolding.Internal.SqlServerTableSelectionSetExtensions : object {
    private static List`1<string> _schemaPatterns;
    private static List`1<string> _tablePatterns;
    private static SqlServerTableSelectionSetExtensions();
    [ExtensionAttribute]
public static bool Allows(TableSelectionSet tableSelectionSet, string schemaName, string tableName);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerColumnModelAnnotations : object {
    private ColumnModel _column;
    public Nullable`1<int> DateTimePrecision { get; public set; }
    public bool IsIdentity { get; public set; }
    public string DataTypeSchemaName { get; public set; }
    public SqlServerColumnModelAnnotations(ColumnModel column);
    public virtual Nullable`1<int> get_DateTimePrecision();
    public virtual void set_DateTimePrecision(Nullable`1<int> value);
    public virtual bool get_IsIdentity();
    public virtual void set_IsIdentity(bool value);
    public virtual string get_DataTypeSchemaName();
    public virtual void set_DataTypeSchemaName(string value);
}
public static class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerDatabaseModelAnnotationNames : object {
    public static string Prefix;
    public static string TypeAliases;
    public static string IsIdentity;
    public static string IsClustered;
    public static string DateTimePrecision;
    public static string DataTypeSchemaName;
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerDatabaseModelAnnotations : object {
    private DatabaseModel _databaseModel;
    public Dictionary`2<string, string> TypeAliases { get; public set; }
    public SqlServerDatabaseModelAnnotations(DatabaseModel databaseModel);
    public virtual Dictionary`2<string, string> get_TypeAliases();
    public virtual void set_TypeAliases(Dictionary`2<string, string> value);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerDatabaseModelExtensions : object {
    [ExtensionAttribute]
public static SqlServerColumnModelAnnotations SqlServer(ColumnModel column);
    [ExtensionAttribute]
public static SqlServerIndexModelAnnotations SqlServer(IndexModel index);
    [ExtensionAttribute]
public static SqlServerDatabaseModelAnnotations SqlServer(DatabaseModel databaseModel);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.Internal.SqlServerIndexModelAnnotations : object {
    private IndexModel _index;
    public bool IsClustered { get; public set; }
    public SqlServerIndexModelAnnotations(IndexModel index);
    public virtual bool get_IsClustered();
    public virtual void set_IsClustered(bool value);
}
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.Check : object {
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName, string propertyName);
    [ContractAnnotationAttribute("value:null => halt")]
public static IReadOnlyList`1<T> NotEmpty(IReadOnlyList`1<T> value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static string NotEmpty(string value, string parameterName);
    public static string NullButNotEmpty(string value, string parameterName);
    public static IReadOnlyList`1<T> HasNoNulls(IReadOnlyList`1<T> value, string parameterName);
    public static Type ValidEntityType(Type value, string parameterName);
}
[ExtensionAttribute]
internal static class System.Reflection.MemberInfoExtensions : object {
    [ExtensionAttribute]
public static Type GetMemberType(MemberInfo memberInfo);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Reflection.PropertyInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsStatic(PropertyInfo property);
    [ExtensionAttribute]
public static bool IsCandidateProperty(PropertyInfo propertyInfo, bool needsWrite);
    [ExtensionAttribute]
public static Type FindCandidateNavigationPropertyType(PropertyInfo propertyInfo, Func`2<Type, bool> isPrimitiveProperty);
    [ExtensionAttribute]
public static bool IsSameAs(PropertyInfo propertyInfo, PropertyInfo otherPropertyInfo);
    [ExtensionAttribute]
public static PropertyInfo FindGetterProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static PropertyInfo FindSetterProperty(PropertyInfo propertyInfo);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.SharedTypeExtensions : object {
    private static Dictionary`2<Type, object> _commonTypeDictionary;
    private static SharedTypeExtensions();
    [ExtensionAttribute]
public static Type UnwrapNullableType(Type type);
    [ExtensionAttribute]
public static bool IsNullableType(Type type);
    [ExtensionAttribute]
public static Type MakeNullable(Type type);
    [ExtensionAttribute]
public static bool IsInteger(Type type);
    [ExtensionAttribute]
public static PropertyInfo GetAnyProperty(Type type, string name);
    [ExtensionAttribute]
private static bool IsNonIntegerPrimitive(Type type);
    [ExtensionAttribute]
public static bool IsPrimitive(Type type);
    [ExtensionAttribute]
public static bool IsInstantiable(Type type);
    private static bool IsInstantiable(TypeInfo type);
    [ExtensionAttribute]
public static bool IsGrouping(Type type);
    private static bool IsGrouping(TypeInfo type);
    [ExtensionAttribute]
public static Type UnwrapEnumType(Type type);
    [ExtensionAttribute]
public static Type GetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetElementType(Type type, Type interfaceOrBaseType);
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetGenericTypeImplementations(Type type, Type interfaceOrBaseType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetBaseTypes>d__16")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetBaseTypes(Type type);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetTypesInHierarchy>d__17")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetTypesInHierarchy(Type type);
    [ExtensionAttribute]
public static ConstructorInfo GetDeclaredConstructor(Type type, Type[] types);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetPropertiesInHierarchy>d__19")]
[ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetPropertiesInHierarchy(Type type, string name);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetMembersInHierarchy>d__20")]
[ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type, string name);
    [ExtensionAttribute]
public static object GetDefaultValue(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<TypeInfo> GetConstructableTypes(Assembly assembly);
    [ExtensionAttribute]
public static IEnumerable`1<TypeInfo> GetLoadableDefinedTypes(Assembly assembly);
}
[ExtensionAttribute]
internal static class System.Text.StringBuilderExtensions : object {
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<string> values, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, string separator, String[] values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, Action`2<StringBuilder, T> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam param, Action`3<StringBuilder, T, TParam> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam1 param1, TParam2 param2, Action`4<StringBuilder, T, TParam1, TParam2> joinAction, string separator);
}
