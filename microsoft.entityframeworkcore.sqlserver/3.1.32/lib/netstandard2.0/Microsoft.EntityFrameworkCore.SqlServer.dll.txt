[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.CanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    public string Contract { get; }
    public bool ForceFullStates { get; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("4320")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    [NotNullAttribute]
public string FormatParameterName { get; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; }
    public ImplicitUseTargetFlags TargetFlags { get; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public static class Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId : object {
    private static string _validationPrefix;
    public static EventId DecimalTypeDefaultWarning;
    public static EventId ByteIdentityColumnWarning;
    private static string _scaffoldingPrefix;
    public static EventId ColumnFound;
    public static EventId DefaultSchemaFound;
    public static EventId TypeAliasFound;
    public static EventId MissingSchemaWarning;
    public static EventId MissingTableWarning;
    public static EventId ForeignKeyReferencesMissingPrincipalTableWarning;
    public static EventId TableFound;
    public static EventId SequenceFound;
    public static EventId PrimaryKeyFound;
    public static EventId UniqueConstraintFound;
    public static EventId IndexFound;
    public static EventId ForeignKeyFound;
    public static EventId ForeignKeyPrincipalColumnMissingWarning;
    public static EventId ReflexiveConstraintIgnored;
    private static SqlServerEventId();
    private static EventId MakeValidationId(Id id);
    private static EventId MakeScaffoldingId(Id id);
}
internal static class Microsoft.EntityFrameworkCore.EnumerableMethods : object {
    [CompilerGeneratedAttribute]
private static MethodInfo <All>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AsEnumerable>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Cast>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Concat>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Contains>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <CountWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <CountWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <DefaultIfEmptyWithoutArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <DefaultIfEmptyWithArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Distinct>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ElementAt>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ElementAtOrDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Except>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeySelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyElementSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyElementResultSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyResultSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupJoin>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Intersect>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Join>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LongCountWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LongCountWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MaxWithoutSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MaxWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MinWithoutSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MinWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OfType>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OrderByDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Reverse>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Select>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectWithOrdinal>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectManyWithoutCollectionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectManyWithCollectionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SequenceEqual>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SkipWhile>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Take>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <TakeWhile>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ThenBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ThenByDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ToArray>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ToList>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Union>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <SumWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <SumWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <AverageWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <AverageWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MaxWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MaxWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MinWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MinWithSelectorMethods>k__BackingField;
    public static MethodInfo All { get; }
    public static MethodInfo AnyWithoutPredicate { get; }
    public static MethodInfo AnyWithPredicate { get; }
    public static MethodInfo AsEnumerable { get; }
    public static MethodInfo Cast { get; }
    public static MethodInfo Concat { get; }
    public static MethodInfo Contains { get; }
    public static MethodInfo CountWithoutPredicate { get; }
    public static MethodInfo CountWithPredicate { get; }
    public static MethodInfo DefaultIfEmptyWithoutArgument { get; }
    public static MethodInfo DefaultIfEmptyWithArgument { get; }
    public static MethodInfo Distinct { get; }
    public static MethodInfo ElementAt { get; }
    public static MethodInfo ElementAtOrDefault { get; }
    public static MethodInfo Except { get; }
    public static MethodInfo FirstWithoutPredicate { get; }
    public static MethodInfo FirstWithPredicate { get; }
    public static MethodInfo FirstOrDefaultWithoutPredicate { get; }
    public static MethodInfo FirstOrDefaultWithPredicate { get; }
    public static MethodInfo GroupByWithKeySelector { get; }
    public static MethodInfo GroupByWithKeyElementSelector { get; }
    public static MethodInfo GroupByWithKeyElementResultSelector { get; }
    public static MethodInfo GroupByWithKeyResultSelector { get; }
    public static MethodInfo GroupJoin { get; }
    public static MethodInfo Intersect { get; }
    public static MethodInfo Join { get; }
    public static MethodInfo LastWithoutPredicate { get; }
    public static MethodInfo LastWithPredicate { get; }
    public static MethodInfo LastOrDefaultWithoutPredicate { get; }
    public static MethodInfo LastOrDefaultWithPredicate { get; }
    public static MethodInfo LongCountWithoutPredicate { get; }
    public static MethodInfo LongCountWithPredicate { get; }
    public static MethodInfo MaxWithoutSelector { get; }
    public static MethodInfo MaxWithSelector { get; }
    public static MethodInfo MinWithoutSelector { get; }
    public static MethodInfo MinWithSelector { get; }
    public static MethodInfo OfType { get; }
    public static MethodInfo OrderBy { get; }
    public static MethodInfo OrderByDescending { get; }
    public static MethodInfo Reverse { get; }
    public static MethodInfo Select { get; }
    public static MethodInfo SelectWithOrdinal { get; }
    public static MethodInfo SelectManyWithoutCollectionSelector { get; }
    public static MethodInfo SelectManyWithCollectionSelector { get; }
    public static MethodInfo SequenceEqual { get; }
    public static MethodInfo SingleWithoutPredicate { get; }
    public static MethodInfo SingleWithPredicate { get; }
    public static MethodInfo SingleOrDefaultWithoutPredicate { get; }
    public static MethodInfo SingleOrDefaultWithPredicate { get; }
    public static MethodInfo Skip { get; }
    public static MethodInfo SkipWhile { get; }
    public static MethodInfo Take { get; }
    public static MethodInfo TakeWhile { get; }
    public static MethodInfo ThenBy { get; }
    public static MethodInfo ThenByDescending { get; }
    public static MethodInfo ToArray { get; }
    public static MethodInfo ToList { get; }
    public static MethodInfo Union { get; }
    public static MethodInfo Where { get; }
    private static Dictionary`2<Type, MethodInfo> SumWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> SumWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> AverageWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> AverageWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MaxWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MaxWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MinWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MinWithSelectorMethods { get; }
    private static EnumerableMethods();
    [CompilerGeneratedAttribute]
public static MethodInfo get_All();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AsEnumerable();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Cast();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Concat();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Contains();
    [CompilerGeneratedAttribute]
public static MethodInfo get_CountWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_CountWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_DefaultIfEmptyWithoutArgument();
    [CompilerGeneratedAttribute]
public static MethodInfo get_DefaultIfEmptyWithArgument();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Distinct();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ElementAt();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ElementAtOrDefault();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Except();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeySelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyElementSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyElementResultSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyResultSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupJoin();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Intersect();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Join();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LongCountWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LongCountWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MaxWithoutSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MaxWithSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MinWithoutSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MinWithSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OfType();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OrderBy();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OrderByDescending();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Reverse();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Select();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectWithOrdinal();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectManyWithoutCollectionSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectManyWithCollectionSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SequenceEqual();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Skip();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SkipWhile();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Take();
    [CompilerGeneratedAttribute]
public static MethodInfo get_TakeWhile();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ThenBy();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ThenByDescending();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ToArray();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ToList();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Union();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Where();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_SumWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_SumWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_AverageWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_AverageWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MaxWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MaxWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MinWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MinWithSelectorMethods();
    public static bool IsSumWithoutSelector(MethodInfo methodInfo);
    public static bool IsSumWithSelector(MethodInfo methodInfo);
    public static bool IsAverageWithoutSelector(MethodInfo methodInfo);
    public static bool IsAverageWithSelector(MethodInfo methodInfo);
    public static MethodInfo GetSumWithoutSelector(Type type);
    public static MethodInfo GetSumWithSelector(Type type);
    public static MethodInfo GetAverageWithoutSelector(Type type);
    public static MethodInfo GetAverageWithSelector(Type type);
    public static MethodInfo GetMaxWithoutSelector(Type type);
    public static MethodInfo GetMaxWithSelector(Type type);
    public static MethodInfo GetMinWithoutSelector(Type type);
    public static MethodInfo GetMinWithSelector(Type type);
    [CompilerGeneratedAttribute]
internal static MethodInfo <.cctor>g__GetMethod|213_62(string name, int genericParameterCount, Func`2<Type[], Type[]> parameterGenerator, <>c__DisplayClass213_0& );
}
public class Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder : RelationalDbContextOptionsBuilder`2<SqlServerDbContextOptionsBuilder, SqlServerOptionsExtension> {
    public SqlServerDbContextOptionsBuilder(DbContextOptionsBuilder optionsBuilder);
    [ObsoleteAttribute("Row-number paging is no longer supported. See https://aka.ms/AA6h122 for more information.")]
public virtual SqlServerDbContextOptionsBuilder UseRowNumberForPaging(bool useRowNumberForPaging);
    public virtual SqlServerDbContextOptionsBuilder EnableRetryOnFailure();
    public virtual SqlServerDbContextOptionsBuilder EnableRetryOnFailure(int maxRetryCount);
    public virtual SqlServerDbContextOptionsBuilder EnableRetryOnFailure(int maxRetryCount, TimeSpan maxRetryDelay, ICollection`1<int> errorNumbersToAdd);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerConventionSetBuilder : RelationalConventionSetBuilder {
    private ISqlGenerationHelper _sqlGenerationHelper;
    public SqlServerConventionSetBuilder(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies, ISqlGenerationHelper sqlGenerationHelper);
    public virtual ConventionSet CreateConventionSet();
    public static ConventionSet Build();
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerIndexConvention : object {
    private ISqlGenerationHelper _sqlGenerationHelper;
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public SqlServerIndexConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies, ISqlGenerationHelper sqlGenerationHelper);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    public virtual void ProcessIndexAdded(IConventionIndexBuilder indexBuilder, IConventionContext`1<IConventionIndexBuilder> context);
    public virtual void ProcessIndexUniquenessChanged(IConventionIndexBuilder indexBuilder, IConventionContext`1<IConventionIndexBuilder> context);
    public virtual void ProcessPropertyNullabilityChanged(IConventionPropertyBuilder propertyBuilder, IConventionContext`1<IConventionPropertyBuilder> context);
    public virtual void ProcessIndexAnnotationChanged(IConventionIndexBuilder indexBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    public virtual void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    private IConventionIndexBuilder SetIndexFilter(IConventionIndexBuilder indexBuilder, bool columnNameChanged);
    private string CreateIndexFilter(IIndex index);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerMemoryOptimizedTablesConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public SqlServerMemoryOptimizedTablesConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessEntityTypeAnnotationChanged(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    public virtual void ProcessKeyAdded(IConventionKeyBuilder keyBuilder, IConventionContext`1<IConventionKeyBuilder> context);
    public virtual void ProcessIndexAdded(IConventionIndexBuilder indexBuilder, IConventionContext`1<IConventionIndexBuilder> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerStoreGenerationConvention : StoreGenerationConvention {
    public SqlServerStoreGenerationConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    public virtual void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    protected virtual void Validate(IConventionProperty property);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerValueGenerationConvention : RelationalValueGenerationConvention {
    public SqlServerValueGenerationConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    public virtual void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    protected virtual Nullable`1<ValueGenerated> GetValueGenerated(IConventionProperty property);
    public static Nullable`1<ValueGenerated> GetValueGenerated(IProperty property);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerValueGenerationStrategyConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public SqlServerValueGenerationStrategyConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessModelInitialized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    public virtual void ProcessModelFinalized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
public enum Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy : Enum {
    public int value__;
    public static SqlServerValueGenerationStrategy None;
    public static SqlServerValueGenerationStrategy SequenceHiLo;
    public static SqlServerValueGenerationStrategy IdentityColumn;
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.SqlServerCreateDatabaseOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public string Name { get; public set; }
    public string FileName { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_FileName();
    [CompilerGeneratedAttribute]
public virtual void set_FileName(string value);
}
public class Microsoft.EntityFrameworkCore.Migrations.Operations.SqlServerDropDatabaseOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationBuilderExtensions : object {
    [ExtensionAttribute]
public static bool IsSqlServer(MigrationBuilder migrationBuilder);
}
public class Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator : MigrationsSqlGenerator {
    private IMigrationsAnnotationProvider _migrationsAnnotations;
    private IReadOnlyList`1<MigrationOperation> _operations;
    private int _variableCounter;
    public SqlServerMigrationsSqlGenerator(MigrationsSqlGeneratorDependencies dependencies, IMigrationsAnnotationProvider migrationsAnnotations);
    public virtual IReadOnlyList`1<MigrationCommand> Generate(IReadOnlyList`1<MigrationOperation> operations, IModel model);
    protected virtual void Generate(MigrationOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AddColumnOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(AddForeignKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(AddPrimaryKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(AlterColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameIndexOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RestartSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(RenameTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropTableOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(CreateIndexOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropPrimaryKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(EnsureSchemaOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(CreateSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(SqlServerCreateDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder);
    private static string ExpandFileName(string fileName);
    protected virtual void Generate(SqlServerDropDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AlterDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AlterTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropForeignKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropIndexOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropColumnOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(RenameColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(SqlOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(InsertDataOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    private void GenerateIdentityInsert(MigrationCommandListBuilder builder, InsertDataOperation operation, bool on);
    protected virtual void SequenceOptions(string schema, string name, SequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ColumnDefinition(string schema, string table, string name, ColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ComputedColumnDefinition(string schema, string table, string name, ColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Rename(string name, string newName, MigrationCommandListBuilder builder);
    protected virtual void Rename(string name, string newName, string type, MigrationCommandListBuilder builder);
    protected virtual void Transfer(string newSchema, string schema, string name, MigrationCommandListBuilder builder);
    protected virtual void IndexTraits(MigrationOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void IndexOptions(CreateIndexOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ForeignKeyAction(ReferentialAction referentialAction, MigrationCommandListBuilder builder);
    protected virtual void DropDefaultConstraint(string schema, string tableName, string columnName, MigrationCommandListBuilder builder);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator/<GetIndexesToRebuild>d__42")]
protected virtual IEnumerable`1<IIndex> GetIndexesToRebuild(IProperty property, MigrationOperation currentOperation);
    protected virtual void DropIndexes(IEnumerable`1<IIndex> indexes, MigrationCommandListBuilder builder);
    protected virtual void CreateIndexes(IEnumerable`1<IIndex> indexes, MigrationCommandListBuilder builder);
    protected virtual void AddDescription(MigrationCommandListBuilder builder, string description, string schema, string table, string column, bool omitSchemaVariable);
    protected virtual void DropDescription(MigrationCommandListBuilder builder, string schema, string table, string column, bool omitSchemaVariable);
    protected virtual bool UseLegacyIndexFilters(IModel model);
    private string IntegerConstant(long value);
    private bool IsMemoryOptimized(Annotatable annotatable, IModel model, string schema, string tableName);
    private static bool IsMemoryOptimized(Annotatable annotatable);
    private static bool IsIdentity(ColumnOperation operation);
    [CompilerGeneratedAttribute]
internal static string <AddDescription>g__Literal|45_0(string s, <>c__DisplayClass45_0& );
    [CompilerGeneratedAttribute]
internal static string <DropDescription>g__Literal|46_0(string s, <>c__DisplayClass46_0& );
}
public class Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerAnnotationCodeGenerator : AnnotationCodeGenerator {
    public SqlServerAnnotationCodeGenerator(AnnotationCodeGeneratorDependencies dependencies);
    public virtual bool IsHandledByConvention(IModel model, IAnnotation annotation);
    public virtual MethodCallCodeFragment GenerateFluentApi(IKey key, IAnnotation annotation);
    public virtual MethodCallCodeFragment GenerateFluentApi(IIndex index, IAnnotation annotation);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerDesignTimeServices : object {
    public virtual void ConfigureDesignTimeServices(IServiceCollection serviceCollection);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions : RelationalLoggingDefinitions {
    public EventDefinitionBase LogDefaultDecimalTypeColumn;
    public EventDefinitionBase LogByteIdentityColumn;
    public EventDefinitionBase LogFoundDefaultSchema;
    public EventDefinitionBase LogFoundTypeAlias;
    public EventDefinitionBase LogFoundColumn;
    public EventDefinitionBase LogFoundForeignKey;
    public EventDefinitionBase LogPrincipalTableNotInSelectionSet;
    public EventDefinitionBase LogMissingSchema;
    public EventDefinitionBase LogMissingTable;
    public EventDefinitionBase LogFoundSequence;
    public EventDefinitionBase LogFoundTable;
    public EventDefinitionBase LogFoundIndex;
    public EventDefinitionBase LogFoundPrimaryKey;
    public EventDefinitionBase LogFoundUniqueConstraint;
    public EventDefinitionBase LogPrincipalColumnNotFound;
    public EventDefinitionBase LogReflexiveConstraintIgnored;
}
public interface Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.ISqlServerOptions {
    public bool RowNumberPagingEnabled { get; }
    public abstract virtual bool get_RowNumberPagingEnabled();
}
public class Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension : RelationalOptionsExtension {
    private DbContextOptionsExtensionInfo _info;
    private Nullable`1<bool> _rowNumberPaging;
    public DbContextOptionsExtensionInfo Info { get; }
    public Nullable`1<bool> RowNumberPaging { get; }
    protected SqlServerOptionsExtension(SqlServerOptionsExtension copyFrom);
    public virtual DbContextOptionsExtensionInfo get_Info();
    protected virtual RelationalOptionsExtension Clone();
    public virtual Nullable`1<bool> get_RowNumberPaging();
    public virtual SqlServerOptionsExtension WithRowNumberPaging(bool rowNumberPaging);
    public virtual void ApplyServices(IServiceCollection services);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerLoggerExtensions : object {
    [ExtensionAttribute]
public static void DecimalTypeDefaultWarning(IDiagnosticsLogger`1<Validation> diagnostics, IProperty property);
    private static string DecimalTypeDefaultWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ByteIdentityColumnWarning(IDiagnosticsLogger`1<Validation> diagnostics, IProperty property);
    private static string ByteIdentityColumnWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ColumnFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string tableName, string columnName, int ordinal, string dataTypeName, int maxLength, int precision, int scale, bool nullable, bool identity, string defaultValue, string computedValue);
    [ExtensionAttribute]
public static void ForeignKeyFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string foreignKeyName, string tableName, string principalTableName, string onDeleteAction);
    [ExtensionAttribute]
public static void DefaultSchemaFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string schemaName);
    [ExtensionAttribute]
public static void TypeAliasFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string typeAliasName, string systemTypeName);
    [ExtensionAttribute]
public static void PrimaryKeyFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string primaryKeyName, string tableName);
    [ExtensionAttribute]
public static void UniqueConstraintFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string uniqueConstraintName, string tableName);
    [ExtensionAttribute]
public static void IndexFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string indexName, string tableName, bool unique);
    [ExtensionAttribute]
public static void ForeignKeyReferencesMissingPrincipalTableWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string foreignKeyName, string tableName, string principalTableName);
    [ExtensionAttribute]
public static void ForeignKeyPrincipalColumnMissingWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string foreignKeyName, string tableName, string principalColumnName, string principalTableName);
    [ExtensionAttribute]
public static void MissingSchemaWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string schemaName);
    [ExtensionAttribute]
public static void MissingTableWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string tableName);
    [ExtensionAttribute]
public static void SequenceFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string sequenceName, string sequenceTypeName, bool cyclic, int increment, long start, long min, long max);
    [ExtensionAttribute]
public static void TableFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string tableName);
    [ExtensionAttribute]
public static void ReflexiveConstraintIgnored(IDiagnosticsLogger`1<Scaffolding> diagnostics, string foreignKeyName, string tableName);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerModelValidator : RelationalModelValidator {
    public SqlServerModelValidator(ModelValidatorDependencies dependencies, RelationalModelValidatorDependencies relationalDependencies);
    public virtual void Validate(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateDefaultDecimalMapping(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateByteIdentityMapping(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateNonKeyValueGeneration(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateIndexIncludeProperties(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateSharedTableCompatibility(IReadOnlyList`1<IEntityType> mappedTypes, string tableName, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateSharedColumnsCompatibility(IReadOnlyList`1<IEntityType> mappedTypes, string tableName, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateSharedKeysCompatibility(IReadOnlyList`1<IEntityType> mappedTypes, string tableName, IDiagnosticsLogger`1<Validation> logger);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerOptions : object {
    [CompilerGeneratedAttribute]
private bool <RowNumberPagingEnabled>k__BackingField;
    public bool RowNumberPagingEnabled { get; private set; }
    public virtual void Initialize(IDbContextOptions options);
    public virtual void Validate(IDbContextOptions options);
    [CompilerGeneratedAttribute]
public virtual bool get_RowNumberPagingEnabled();
    [CompilerGeneratedAttribute]
private void set_RowNumberPagingEnabled(bool value);
}
public static class Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources : object {
    private static ResourceManager _resourceManager;
    private static SqlServerResources();
    public static EventDefinition`2<string, string> LogDefaultDecimalTypeColumn(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogByteIdentityColumn(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogFoundDefaultSchema(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogFoundTypeAlias(IDiagnosticsLogger logger);
    public static FallbackEventDefinition LogFoundColumn(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, string, string> LogFoundForeignKey(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogPrincipalTableNotInSelectionSet(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogMissingSchema(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogMissingTable(IDiagnosticsLogger logger);
    public static FallbackEventDefinition LogFoundSequence(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogFoundTable(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, bool> LogFoundIndex(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogFoundPrimaryKey(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogFoundUniqueConstraint(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, string, string> LogPrincipalColumnNotFound(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogReflexiveConstraintIgnored(IDiagnosticsLogger logger);
}
public static class Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings : object {
    private static ResourceManager _resourceManager;
    public static string IndexTableRequired { get; }
    public static string AlterMemoryOptimizedTable { get; }
    public static string AlterIdentityColumn { get; }
    public static string TransientExceptionDetected { get; }
    public static string NoInitialCatalog { get; }
    public static string InvalidColumnNameForFreeText { get; }
    private static SqlServerStrings();
    public static string IdentityBadType(object property, object entityType, object propertyType);
    public static string UnqualifiedDataType(object dataType);
    public static string UnqualifiedDataTypeOnProperty(object dataType, object property);
    public static string SequenceBadType(object property, object entityType, object propertyType);
    public static string get_IndexTableRequired();
    public static string get_AlterMemoryOptimizedTable();
    public static string get_AlterIdentityColumn();
    public static string get_TransientExceptionDetected();
    public static string NonKeyValueGeneration(object property, object entityType);
    public static string MultipleIdentityColumns(object properties, object table);
    public static string IncompatibleTableMemoryOptimizedMismatch(object table, object entityType, object otherEntityType, object memoryOptimizedEntityType, object nonMemoryOptimizedEntityType);
    public static string get_NoInitialCatalog();
    public static string DuplicateColumnNameValueGenerationStrategyMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table);
    public static string InvalidTableToIncludeInScaffolding(object table);
    public static string get_InvalidColumnNameForFreeText();
    public static string IncludePropertyDuplicated(object entityType, object property);
    public static string IncludePropertyInIndex(object entityType, object property);
    public static string IncludePropertyNotFound(object entityType, object property);
    public static string DuplicateKeyMismatchedClustering(object key1, object entityType1, object key2, object entityType2, object table, object keyName);
    public static string FunctionOnClient(object methodName);
    private static string GetString(string name, String[] formatterNames);
}
public static class Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames : object {
    public static string Prefix;
    public static string Clustered;
    public static string Include;
    public static string CreatedOnline;
    public static string ValueGenerationStrategy;
    public static string HiLoSequenceName;
    public static string HiLoSequenceSchema;
    public static string MemoryOptimized;
    public static string Identity;
    public static string IdentitySeed;
    public static string IdentityIncrement;
    public static string EditionOptions;
    public static string MaxDatabaseSize;
    public static string ServiceTierSql;
    public static string PerformanceLevelSql;
}
public class Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerHistoryRepository : HistoryRepository {
    protected string ExistsSql { get; }
    public SqlServerHistoryRepository(HistoryRepositoryDependencies dependencies);
    protected virtual string get_ExistsSql();
    protected virtual bool InterpretExistsResult(object value);
    public virtual string GetCreateIfNotExistsScript();
    public virtual string GetBeginIfNotExistsScript(string migrationId);
    public virtual string GetBeginIfExistsScript(string migrationId);
    public virtual string GetEndIfScript();
}
public class Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerMigrationsAnnotationProvider : MigrationsAnnotationProvider {
    public SqlServerMigrationsAnnotationProvider(MigrationsAnnotationProviderDependencies dependencies);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerMigrationsAnnotationProvider/<For>d__1")]
public virtual IEnumerable`1<IAnnotation> For(IModel model);
    public virtual IEnumerable`1<IAnnotation> For(IEntityType entityType);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerMigrationsAnnotationProvider/<For>d__3")]
public virtual IEnumerable`1<IAnnotation> For(IKey key);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerMigrationsAnnotationProvider/<For>d__4")]
public virtual IEnumerable`1<IAnnotation> For(IIndex index);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerMigrationsAnnotationProvider/<For>d__5")]
public virtual IEnumerable`1<IAnnotation> For(IProperty property);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerMigrationsAnnotationProvider/<ForRemove>d__6")]
public virtual IEnumerable`1<IAnnotation> ForRemove(IModel model);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerMigrationsAnnotationProvider/<ForRemove>d__7")]
public virtual IEnumerable`1<IAnnotation> ForRemove(IEntityType entityType);
    private static bool IsMemoryOptimized(IEntityType entityType);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor : SqlExpressionVisitor {
    private bool _isSearchCondition;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public SearchConditionConvertingExpressionVisitor(ISqlExpressionFactory sqlExpressionFactory);
    private Expression ApplyConversion(SqlExpression sqlExpression, bool condition);
    private Expression ConvertToSearchCondition(SqlExpression sqlExpression, bool condition);
    private Expression ConvertToValue(SqlExpression sqlExpression, bool condition);
    private SqlExpression BuildCompareToExpression(SqlExpression sqlExpression);
    protected virtual Expression VisitCase(CaseExpression caseExpression);
    protected virtual Expression VisitColumn(ColumnExpression columnExpression);
    protected virtual Expression VisitExists(ExistsExpression existsExpression);
    protected virtual Expression VisitFromSql(FromSqlExpression fromSqlExpression);
    protected virtual Expression VisitIn(InExpression inExpression);
    protected virtual Expression VisitLike(LikeExpression likeExpression);
    protected virtual Expression VisitSelect(SelectExpression selectExpression);
    protected virtual Expression VisitSqlBinary(SqlBinaryExpression sqlBinaryExpression);
    protected virtual Expression VisitSqlUnary(SqlUnaryExpression sqlUnaryExpression);
    protected virtual Expression VisitSqlConstant(SqlConstantExpression sqlConstantExpression);
    protected virtual Expression VisitSqlFragment(SqlFragmentExpression sqlFragmentExpression);
    protected virtual Expression VisitSqlFunction(SqlFunctionExpression sqlFunctionExpression);
    protected virtual Expression VisitSqlParameter(SqlParameterExpression sqlParameterExpression);
    protected virtual Expression VisitTable(TableExpression tableExpression);
    protected virtual Expression VisitProjection(ProjectionExpression projectionExpression);
    protected virtual Expression VisitOrdering(OrderingExpression orderingExpression);
    protected virtual Expression VisitCrossJoin(CrossJoinExpression crossJoinExpression);
    protected virtual Expression VisitCrossApply(CrossApplyExpression crossApplyExpression);
    protected virtual Expression VisitOuterApply(OuterApplyExpression outerApplyExpression);
    protected virtual Expression VisitInnerJoin(InnerJoinExpression innerJoinExpression);
    protected virtual Expression VisitLeftJoin(LeftJoinExpression leftJoinExpression);
    protected virtual Expression VisitSubSelect(ScalarSubqueryExpression scalarSubqueryExpression);
    protected virtual Expression VisitRowNumber(RowNumberExpression rowNumberExpression);
    protected virtual Expression VisitExcept(ExceptExpression exceptExpression);
    protected virtual Expression VisitIntersect(IntersectExpression intersectExpression);
    protected virtual Expression VisitUnion(UnionExpression unionExpression);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerCompiledQueryCacheKeyGenerator : RelationalCompiledQueryCacheKeyGenerator {
    public SqlServerCompiledQueryCacheKeyGenerator(CompiledQueryCacheKeyGeneratorDependencies dependencies, RelationalCompiledQueryCacheKeyGeneratorDependencies relationalDependencies);
    public virtual object GenerateCacheKey(Expression query, bool async);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerConvertTranslator : object {
    private static Dictionary`2<string, string> _typeMapping;
    private static List`1<Type> _supportedTypes;
    private static IEnumerable`1<MethodInfo> _supportedMethods;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public SqlServerConvertTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static SqlServerConvertTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDateDiffFunctionsTranslator : object {
    private Dictionary`2<MethodInfo, string> _methodInfoDateDiffMapping;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public SqlServerDateDiffFunctionsTranslator(ISqlExpressionFactory sqlExpressionFactory);
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDateTimeMemberTranslator : object {
    private static Dictionary`2<string, string> _datePartMapping;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public SqlServerDateTimeMemberTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static SqlServerDateTimeMemberTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDateTimeMethodTranslator : object {
    private Dictionary`2<MethodInfo, string> _methodInfoDatePartMapping;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public SqlServerDateTimeMethodTranslator(ISqlExpressionFactory sqlExpressionFactory);
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerFullTextSearchFunctionsTranslator : object {
    private static string FreeTextFunctionName;
    private static string ContainsFunctionName;
    private static MethodInfo _freeTextMethodInfo;
    private static MethodInfo _freeTextMethodInfoWithLanguage;
    private static MethodInfo _containsMethodInfo;
    private static MethodInfo _containsMethodInfoWithLanguage;
    private static IDictionary`2<MethodInfo, string> _functionMapping;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public SqlServerFullTextSearchFunctionsTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static SqlServerFullTextSearchFunctionsTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerIsDateFunctionTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    private static MethodInfo _methodInfo;
    public SqlServerIsDateFunctionTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static SqlServerIsDateFunctionTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerMathTranslator : object {
    private static Dictionary`2<MethodInfo, string> _supportedMethodTranslations;
    private static IEnumerable`1<MethodInfo> _truncateMethodInfos;
    private static IEnumerable`1<MethodInfo> _roundMethodInfos;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public SqlServerMathTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static SqlServerMathTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerMemberTranslatorProvider : RelationalMemberTranslatorProvider {
    public SqlServerMemberTranslatorProvider(RelationalMemberTranslatorProviderDependencies dependencies);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerMethodCallTranslatorProvider : RelationalMethodCallTranslatorProvider {
    public SqlServerMethodCallTranslatorProvider(RelationalMethodCallTranslatorProviderDependencies dependencies);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerNewGuidTranslator : object {
    private static MethodInfo _methodInfo;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public SqlServerNewGuidTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static SqlServerNewGuidTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerObjectToStringTranslator : object {
    private static int DefaultLength;
    private static Dictionary`2<Type, string> _typeMapping;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public SqlServerObjectToStringTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static SqlServerObjectToStringTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGenerator : QuerySqlGenerator {
    public SqlServerQuerySqlGenerator(QuerySqlGeneratorDependencies dependencies);
    protected virtual void GenerateTop(SelectExpression selectExpression);
    protected virtual void GenerateLimitOffset(SelectExpression selectExpression);
    protected virtual Expression VisitSqlFunction(SqlFunctionExpression sqlFunctionExpression);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGeneratorFactory : object {
    private QuerySqlGeneratorDependencies _dependencies;
    public SqlServerQuerySqlGeneratorFactory(QuerySqlGeneratorDependencies dependencies);
    public virtual QuerySqlGenerator Create();
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryTranslationPostprocessor : RelationalQueryTranslationPostprocessor {
    public SqlServerQueryTranslationPostprocessor(QueryTranslationPostprocessorDependencies dependencies, RelationalQueryTranslationPostprocessorDependencies relationalDependencies, QueryCompilationContext queryCompilationContext);
    public virtual Expression Process(Expression query);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryTranslationPostprocessorFactory : object {
    private QueryTranslationPostprocessorDependencies _dependencies;
    private RelationalQueryTranslationPostprocessorDependencies _relationalDependencies;
    public SqlServerQueryTranslationPostprocessorFactory(QueryTranslationPostprocessorDependencies dependencies, RelationalQueryTranslationPostprocessorDependencies relationalDependencies);
    public virtual QueryTranslationPostprocessor Create(QueryCompilationContext queryCompilationContext);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTranslatingExpressionVisitor : RelationalSqlTranslatingExpressionVisitor {
    private static HashSet`1<string> _dateTimeDataTypes;
    private static HashSet`1<ExpressionType> _arithmeticOperatorTypes;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public SqlServerSqlTranslatingExpressionVisitor(RelationalSqlTranslatingExpressionVisitorDependencies dependencies, IModel model, QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor);
    private static SqlServerSqlTranslatingExpressionVisitor();
    protected virtual Expression VisitBinary(BinaryExpression binaryExpression);
    public virtual SqlExpression TranslateLongCount(Expression expression);
    private static string GetProviderType(SqlExpression expression);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTranslatingExpressionVisitorFactory : object {
    private RelationalSqlTranslatingExpressionVisitorDependencies _dependencies;
    public SqlServerSqlTranslatingExpressionVisitorFactory(RelationalSqlTranslatingExpressionVisitorDependencies dependencies);
    public virtual RelationalSqlTranslatingExpressionVisitor Create(IModel model, QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerStringMemberTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    public SqlServerStringMemberTranslator(ISqlExpressionFactory sqlExpressionFactory);
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerStringMethodTranslator : object {
    private static MethodInfo _indexOfMethodInfo;
    private static MethodInfo _replaceMethodInfo;
    private static MethodInfo _toLowerMethodInfo;
    private static MethodInfo _toUpperMethodInfo;
    private static MethodInfo _substringMethodInfo;
    private static MethodInfo _isNullOrWhiteSpaceMethodInfo;
    private static MethodInfo _trimStartMethodInfoWithoutArgs;
    private static MethodInfo _trimEndMethodInfoWithoutArgs;
    private static MethodInfo _trimMethodInfoWithoutArgs;
    private static MethodInfo _trimStartMethodInfoWithCharArrayArg;
    private static MethodInfo _trimEndMethodInfoWithCharArrayArg;
    private static MethodInfo _trimMethodInfoWithCharArrayArg;
    private static MethodInfo _startsWithMethodInfo;
    private static MethodInfo _containsMethodInfo;
    private static MethodInfo _endsWithMethodInfo;
    private ISqlExpressionFactory _sqlExpressionFactory;
    private static char LikeEscapeChar;
    public SqlServerStringMethodTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static SqlServerStringMethodTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
    private SqlExpression TranslateStartsEndsWith(SqlExpression instance, SqlExpression pattern, bool startsWith);
    private bool IsLikeWildChar(char c);
    private string EscapeLikePattern(string pattern);
    [CompilerGeneratedAttribute]
private bool <TranslateStartsEndsWith>b__19_0(char c);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlDataReaderExtension : object {
    [ExtensionAttribute]
public static T GetValueOrDefault(DbDataReader reader, string name);
    [ExtensionAttribute]
public static T GetValueOrDefault(DbDataRecord record, string name);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlServerCodeGenerator : ProviderCodeGenerator {
    public SqlServerCodeGenerator(ProviderCodeGeneratorDependencies dependencies);
    public virtual MethodCallCodeFragment GenerateUseProvider(string connectionString, MethodCallCodeFragment providerOptions);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlServerDatabaseModelFactory : DatabaseModelFactory {
    private IDiagnosticsLogger`1<Scaffolding> _logger;
    private static ISet`1<string> _dateTimePrecisionTypes;
    private static ISet`1<string> _maxLengthRequiredTypes;
    private static string NamePartRegex;
    private static Regex _partExtractor;
    private static Dictionary`2<string, Int64[]> _defaultSequenceMinMax;
    public SqlServerDatabaseModelFactory(IDiagnosticsLogger`1<Scaffolding> logger);
    private static SqlServerDatabaseModelFactory();
    public virtual DatabaseModel Create(string connectionString, DatabaseModelFactoryOptions options);
    public virtual DatabaseModel Create(DbConnection connection, DatabaseModelFactoryOptions options);
    private string GetDefaultSchema(DbConnection connection);
    private static Func`2<string, string> GenerateSchemaFilter(IReadOnlyList`1<string> schemas);
    private static ValueTuple`2<string, string> Parse(string table);
    private static Func`3<string, string, string> GenerateTableFilter(IReadOnlyList`1<ValueTuple`2<string, string>> tables, Func`2<string, string> schemaFilter);
    private static string EscapeLiteral(string s);
    private IReadOnlyDictionary`2<string, ValueTuple`2<string, string>> GetTypeAliases(DbConnection connection);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlServerDatabaseModelFactory/<GetSequences>d__15")]
private IEnumerable`1<DatabaseSequence> GetSequences(DbConnection connection, Func`2<string, string> schemaFilter, IReadOnlyDictionary`2<string, ValueTuple`2<string, string>> typeAliases);
    private IEnumerable`1<DatabaseTable> GetTables(DbConnection connection, Func`3<string, string, string> tableFilter, IReadOnlyDictionary`2<string, ValueTuple`2<string, string>> typeAliases);
    private void GetColumns(DbConnection connection, IReadOnlyList`1<DatabaseTable> tables, string tableFilter, string viewFilter, IReadOnlyDictionary`2<string, ValueTuple`2<string, string>> typeAliases);
    private static string FilterClrDefaults(string dataTypeName, bool nullable, string defaultValue);
    private static string GetStoreType(string dataTypeName, int maxLength, int precision, int scale);
    private void GetIndexes(DbConnection connection, IReadOnlyList`1<DatabaseTable> tables, string tableFilter);
    private void GetForeignKeys(DbConnection connection, IReadOnlyList`1<DatabaseTable> tables, string tableFilter);
    private bool SupportsTemporalTable(DbConnection connection);
    private bool SupportsMemoryOptimizedTable(DbConnection connection);
    private bool SupportsSequences(DbConnection connection);
    private int EngineEdition(DbConnection connection);
    private byte CompatibilityLevel(DbConnection connection);
    private static string DisplayName(string schema, string name);
    private static Nullable`1<ReferentialAction> ConvertToReferentialAction(string onDeleteAction);
}
public interface Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.ISqlServerConnection {
    public abstract virtual ISqlServerConnection CreateMasterConnection();
}
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerBoolTypeMapping : BoolTypeMapping {
    public SqlServerBoolTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected SqlServerBoolTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerByteArrayTypeMapping : ByteArrayTypeMapping {
    private static int MaxSize;
    private Nullable`1<SqlDbType> _sqlDbType;
    public SqlServerByteArrayTypeMapping(string storeType, Nullable`1<int> size, bool fixedLength, ValueComparer comparer, Nullable`1<SqlDbType> sqlDbType, Nullable`1<StoreTypePostfix> storeTypePostfix);
    protected SqlServerByteArrayTypeMapping(RelationalTypeMappingParameters parameters, Nullable`1<SqlDbType> sqlDbType);
    private static int CalculateSize(Nullable`1<int> size);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual void ConfigureParameter(DbParameter parameter);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerByteTypeMapping : ByteTypeMapping {
    public SqlServerByteTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected SqlServerByteTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerConnection : RelationalConnection {
    private Nullable`1<bool> _multipleActiveResultSetsEnabled;
    private static int DefaultMasterConnectionCommandTimeout;
    public bool IsMultipleActiveResultSetsEnabled { get; }
    protected bool SupportsAmbientTransactions { get; }
    public SqlServerConnection(RelationalConnectionDependencies dependencies);
    protected virtual DbConnection CreateDbConnection();
    public virtual ISqlServerConnection CreateMasterConnection();
    public virtual bool get_IsMultipleActiveResultSetsEnabled();
    protected virtual bool get_SupportsAmbientTransactions();
    [CompilerGeneratedAttribute]
private void <CreateMasterConnection>b__4_0(SqlServerDbContextOptionsBuilder b);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator : RelationalDatabaseCreator {
    private ISqlServerConnection _connection;
    private IRawSqlCommandBuilder _rawSqlCommandBuilder;
    [CompilerGeneratedAttribute]
private TimeSpan <RetryDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RetryTimeout>k__BackingField;
    public TimeSpan RetryDelay { get; public set; }
    public TimeSpan RetryTimeout { get; public set; }
    public SqlServerDatabaseCreator(RelationalDatabaseCreatorDependencies dependencies, ISqlServerConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder);
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_RetryDelay();
    [CompilerGeneratedAttribute]
public virtual void set_RetryDelay(TimeSpan value);
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_RetryTimeout();
    [CompilerGeneratedAttribute]
public virtual void set_RetryTimeout(TimeSpan value);
    public virtual void Create();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator/<CreateAsync>d__12")]
public virtual Task CreateAsync(CancellationToken cancellationToken);
    public virtual bool HasTables();
    public virtual Task`1<bool> HasTablesAsync(CancellationToken cancellationToken);
    private IRelationalCommand CreateHasTablesCommand();
    private IReadOnlyList`1<MigrationCommand> CreateCreateOperations();
    public virtual bool Exists();
    private bool Exists(bool retryOnNotExists);
    public virtual Task`1<bool> ExistsAsync(CancellationToken cancellationToken);
    private Task`1<bool> ExistsAsync(bool retryOnNotExists, CancellationToken cancellationToken);
    private static bool IsDoesNotExist(SqlException exception);
    private bool RetryOnExistsFailure(SqlException exception);
    public virtual void Delete();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator/<DeleteAsync>d__24")]
public virtual Task DeleteAsync(CancellationToken cancellationToken);
    private IReadOnlyList`1<MigrationCommand> CreateDropCommands();
    private static void ClearAllPools();
    private void ClearPool();
    [CompilerGeneratedAttribute]
private bool <HasTables>b__13_0(ISqlServerConnection connection);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator/<<HasTablesAsync>b__14_0>d")]
[CompilerGeneratedAttribute]
private Task`1<bool> <HasTablesAsync>b__14_0(ISqlServerConnection connection, CancellationToken ct);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateTimeOffsetTypeMapping : DateTimeOffsetTypeMapping {
    private static string DateTimeOffsetFormatConst;
    protected string SqlLiteralFormatString { get; }
    public SqlServerDateTimeOffsetTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected SqlServerDateTimeOffsetTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string get_SqlLiteralFormatString();
    protected virtual void ConfigureParameter(DbParameter parameter);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateTimeTypeMapping : DateTimeTypeMapping {
    private static string DateFormatConst;
    private static string SmallDateTimeFormatConst;
    private static string DateTimeFormatConst;
    private String[] _dateTime2Formats;
    protected string SqlLiteralFormatString { get; }
    public SqlServerDateTimeTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected SqlServerDateTimeTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual void ConfigureParameter(DbParameter parameter);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string get_SqlLiteralFormatString();
}
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDecimalTypeMapping : DecimalTypeMapping {
    public SqlServerDecimalTypeMapping(string storeType, Nullable`1<DbType> dbType, Nullable`1<int> precision, Nullable`1<int> scale, StoreTypePostfix storeTypePostfix);
    protected SqlServerDecimalTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual void ConfigureParameter(DbParameter parameter);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDoubleTypeMapping : DoubleTypeMapping {
    public SqlServerDoubleTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected SqlServerDoubleTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    protected virtual void ConfigureParameter(DbParameter parameter);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy : object {
    [CompilerGeneratedAttribute]
private ExecutionStrategyDependencies <Dependencies>k__BackingField;
    private ExecutionStrategyDependencies Dependencies { get; }
    public bool RetriesOnFailure { get; }
    public SqlServerExecutionStrategy(ExecutionStrategyDependencies dependencies);
    [CompilerGeneratedAttribute]
private ExecutionStrategyDependencies get_Dependencies();
    public virtual bool get_RetriesOnFailure();
    public virtual TResult Execute(TState state, Func`3<DbContext, TState, TResult> operation, Func`3<DbContext, TState, ExecutionResult`1<TResult>> verifySucceeded);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy/<ExecuteAsync>d__7`2")]
public virtual Task`1<TResult> ExecuteAsync(TState state, Func`4<DbContext, TState, CancellationToken, Task`1<TResult>> operation, Func`4<DbContext, TState, CancellationToken, Task`1<ExecutionResult`1<TResult>>> verifySucceeded, CancellationToken cancellationToken);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategyFactory : RelationalExecutionStrategyFactory {
    public SqlServerExecutionStrategyFactory(ExecutionStrategyDependencies dependencies);
    protected virtual IExecutionStrategy CreateDefaultStrategy(ExecutionStrategyDependencies dependencies);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerFloatTypeMapping : FloatTypeMapping {
    public SqlServerFloatTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected SqlServerFloatTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    protected virtual void ConfigureParameter(DbParameter parameter);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerLongTypeMapping : LongTypeMapping {
    public SqlServerLongTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected SqlServerLongTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerShortTypeMapping : ShortTypeMapping {
    public SqlServerShortTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected SqlServerShortTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerSqlGenerationHelper : RelationalSqlGenerationHelper {
    public string BatchTerminator { get; }
    public SqlServerSqlGenerationHelper(RelationalSqlGenerationHelperDependencies dependencies);
    public virtual string get_BatchTerminator();
    public virtual string EscapeIdentifier(string identifier);
    public virtual void EscapeIdentifier(StringBuilder builder, string identifier);
    public virtual string DelimitIdentifier(string identifier);
    public virtual void DelimitIdentifier(StringBuilder builder, string identifier);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerSqlVariantTypeMapping : RelationalTypeMapping {
    public SqlServerSqlVariantTypeMapping(string storeType);
    protected SqlServerSqlVariantTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerStringTypeMapping : StringTypeMapping {
    private static int UnicodeMax;
    private static int AnsiMax;
    private Nullable`1<SqlDbType> _sqlDbType;
    private int _maxSpecificSize;
    public SqlServerStringTypeMapping(string storeType, bool unicode, Nullable`1<int> size, bool fixedLength, Nullable`1<SqlDbType> sqlDbType, Nullable`1<StoreTypePostfix> storeTypePostfix);
    protected SqlServerStringTypeMapping(RelationalTypeMappingParameters parameters, Nullable`1<SqlDbType> sqlDbType);
    private static string GetStoreName(bool unicode, bool fixedLength);
    private static Nullable`1<DbType> GetDbType(bool unicode, bool fixedLength);
    private static int CalculateSize(bool unicode, Nullable`1<int> size);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual void ConfigureParameter(DbParameter parameter);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTimeSpanTypeMapping : TimeSpanTypeMapping {
    public SqlServerTimeSpanTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected SqlServerTimeSpanTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual void ConfigureParameter(DbParameter parameter);
}
public static class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTransientExceptionDetector : object {
    public static bool ShouldRetryOn(Exception ex);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTypeMappingSource : RelationalTypeMappingSource {
    private RelationalTypeMapping _sqlVariant;
    private FloatTypeMapping _real;
    private ByteTypeMapping _byte;
    private ShortTypeMapping _short;
    private LongTypeMapping _long;
    private SqlServerByteArrayTypeMapping _rowversion;
    private IntTypeMapping _int;
    private BoolTypeMapping _bool;
    private SqlServerStringTypeMapping _fixedLengthUnicodeString;
    private SqlServerStringTypeMapping _textUnicodeString;
    private SqlServerStringTypeMapping _variableLengthUnicodeString;
    private SqlServerStringTypeMapping _variableLengthMaxUnicodeString;
    private SqlServerStringTypeMapping _fixedLengthAnsiString;
    private SqlServerStringTypeMapping _textAnsiString;
    private SqlServerStringTypeMapping _variableLengthAnsiString;
    private SqlServerStringTypeMapping _variableLengthMaxAnsiString;
    private SqlServerByteArrayTypeMapping _variableLengthBinary;
    private SqlServerByteArrayTypeMapping _imageBinary;
    private SqlServerByteArrayTypeMapping _variableLengthMaxBinary;
    private SqlServerByteArrayTypeMapping _fixedLengthBinary;
    private SqlServerDateTimeTypeMapping _date;
    private SqlServerDateTimeTypeMapping _datetime;
    private SqlServerDateTimeTypeMapping _datetime2;
    private DoubleTypeMapping _double;
    private SqlServerDateTimeOffsetTypeMapping _datetimeoffset;
    private GuidTypeMapping _uniqueidentifier;
    private DecimalTypeMapping _decimal;
    private DecimalTypeMapping _money;
    private TimeSpanTypeMapping _time;
    private SqlServerStringTypeMapping _xml;
    private Dictionary`2<Type, RelationalTypeMapping> _clrTypeMappings;
    private Dictionary`2<string, RelationalTypeMapping> _storeTypeMappings;
    private HashSet`1<string> _disallowedMappings;
    private IReadOnlyDictionary`2<string, Func`2<Type, RelationalTypeMapping>> _namedClrMappings;
    public SqlServerTypeMappingSource(TypeMappingSourceDependencies dependencies, RelationalTypeMappingSourceDependencies relationalDependencies);
    protected virtual void ValidateMapping(CoreTypeMapping mapping, IProperty property);
    protected virtual RelationalTypeMapping FindMapping(RelationalTypeMappingInfo& modreq(System.Runtime.InteropServices.InAttribute) mappingInfo);
    private RelationalTypeMapping FindRawMapping(RelationalTypeMappingInfo mappingInfo);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerUdtTypeMapping : RelationalTypeMapping {
    private static Action`2<DbParameter, string> _udtTypeNameSetter;
    [CompilerGeneratedAttribute]
private string <UdtTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, Expression> <LiteralGenerator>k__BackingField;
    public string UdtTypeName { get; }
    public Func`2<object, Expression> LiteralGenerator { get; }
    public SqlServerUdtTypeMapping(Type clrType, string storeType, Func`2<object, Expression> literalGenerator, StoreTypePostfix storeTypePostfix, string udtTypeName, ValueConverter converter, ValueComparer comparer, ValueComparer keyComparer, Nullable`1<DbType> dbType, bool unicode, Nullable`1<int> size, bool fixedLength, Nullable`1<int> precision, Nullable`1<int> scale);
    protected SqlServerUdtTypeMapping(RelationalTypeMappingParameters parameters, Func`2<object, Expression> literalGenerator, string udtTypeName);
    [CompilerGeneratedAttribute]
public virtual string get_UdtTypeName();
    [CompilerGeneratedAttribute]
public virtual Func`2<object, Expression> get_LiteralGenerator();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual void ConfigureParameter(DbParameter parameter);
    private void SetUdtTypeName(DbParameter parameter);
    public virtual Expression GenerateCodeLiteral(object value);
    private static Action`2<DbParameter, string> CreateUdtTypeNameAccessor(Type paramType);
    public static SqlServerUdtTypeMapping CreateSqlHierarchyIdMapping(Type udtType);
    public static SqlServerUdtTypeMapping CreateSqlSpatialMapping(Type udtType, string storeName);
}
public interface Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.ISqlServerUpdateSqlGenerator {
    public abstract virtual ResultSetMapping AppendBulkInsertOperation(StringBuilder commandStringBuilder, IReadOnlyList`1<ModificationCommand> modificationCommands, int commandPosition);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch : AffectedCountModificationCommandBatch {
    private static int DefaultNetworkPacketSizeBytes;
    private static int MaxScriptLength;
    private static int MaxParameterCount;
    private static int MaxRowCount;
    private int _parameterCount;
    private int _maxBatchSize;
    private List`1<ModificationCommand> _bulkInsertCommands;
    private int _commandsLeftToLengthCheck;
    protected ISqlServerUpdateSqlGenerator UpdateSqlGenerator { get; }
    public SqlServerModificationCommandBatch(ModificationCommandBatchFactoryDependencies dependencies, Nullable`1<int> maxBatchSize);
    protected virtual ISqlServerUpdateSqlGenerator get_UpdateSqlGenerator();
    protected virtual bool CanAddCommand(ModificationCommand modificationCommand);
    protected virtual bool IsCommandTextValid();
    protected virtual int GetParameterCount();
    private static int CountParameters(ModificationCommand modificationCommand);
    protected virtual void ResetCommandText();
    protected virtual string GetCommandText();
    private string GetBulkInsertCommandText(int lastIndex);
    protected virtual void UpdateCachedCommandText(int commandPosition);
    private static bool CanBeInsertedInSameStatement(ModificationCommand firstCommand, ModificationCommand secondCommand);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatchFactory : object {
    private ModificationCommandBatchFactoryDependencies _dependencies;
    private IDbContextOptions _options;
    public SqlServerModificationCommandBatchFactory(ModificationCommandBatchFactoryDependencies dependencies, IDbContextOptions options);
    public virtual ModificationCommandBatch Create();
}
public class Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerUpdateSqlGenerator : UpdateSqlGenerator {
    private static string InsertedTableBaseName;
    private static string ToInsertTableAlias;
    private static string PositionColumnName;
    private static string PositionColumnDeclaration;
    private static string FullPositionColumnName;
    public SqlServerUpdateSqlGenerator(UpdateSqlGeneratorDependencies dependencies);
    public virtual ResultSetMapping AppendBulkInsertOperation(StringBuilder commandStringBuilder, IReadOnlyList`1<ModificationCommand> modificationCommands, int commandPosition);
    private ResultSetMapping AppendBulkInsertWithoutServerValues(StringBuilder commandStringBuilder, IReadOnlyList`1<ModificationCommand> modificationCommands, List`1<ColumnModification> writeOperations);
    private ResultSetMapping AppendBulkInsertWithServerValues(StringBuilder commandStringBuilder, IReadOnlyList`1<ModificationCommand> modificationCommands, int commandPosition, List`1<ColumnModification> writeOperations, List`1<ColumnModification> keyOperations, List`1<ColumnModification> readOperations);
    private ResultSetMapping AppendBulkInsertWithServerValuesOnly(StringBuilder commandStringBuilder, IReadOnlyList`1<ModificationCommand> modificationCommands, int commandPosition, List`1<ColumnModification> nonIdentityOperations, List`1<ColumnModification> keyOperations, List`1<ColumnModification> readOperations);
    private void AppendMergeCommandHeader(StringBuilder commandStringBuilder, string name, string schema, string toInsertTableAlias, IReadOnlyList`1<ModificationCommand> modificationCommands, IReadOnlyList`1<ColumnModification> writeOperations, string additionalColumns);
    private void AppendValues(StringBuilder commandStringBuilder, IReadOnlyList`1<ColumnModification> operations, string additionalLiteral);
    private void AppendDeclareTable(StringBuilder commandStringBuilder, string name, int index, IReadOnlyList`1<ColumnModification> operations, string additionalColumns);
    private string GetTypeNameForCopy(IProperty property);
    private void AppendOutputClause(StringBuilder commandStringBuilder, IReadOnlyList`1<ColumnModification> operations, string tableName, int tableIndex, string additionalColumns);
    private ResultSetMapping AppendInsertOperationWithServerKeys(StringBuilder commandStringBuilder, ModificationCommand command, IReadOnlyList`1<ColumnModification> keyOperations, IReadOnlyList`1<ColumnModification> readOperations, int commandPosition);
    private ResultSetMapping AppendSelectCommand(StringBuilder commandStringBuilder, IReadOnlyList`1<ColumnModification> readOperations, IReadOnlyList`1<ColumnModification> keyOperations, string insertedTableName, int insertedTableIndex, string tableName, string schema, string orderColumn);
    protected virtual ResultSetMapping AppendSelectAffectedCountCommand(StringBuilder commandStringBuilder, string name, string schema, int commandPosition);
    public virtual void AppendBatchHeader(StringBuilder commandStringBuilder);
    protected virtual void AppendIdentityWhereCondition(StringBuilder commandStringBuilder, ColumnModification columnModification);
    protected virtual void AppendRowsAffectedWhereCondition(StringBuilder commandStringBuilder, int expectedRowsAffected);
    [CompilerGeneratedAttribute]
private void <AppendSelectCommand>b__16_1(StringBuilder sb, ColumnModification c);
}
public interface Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.ISqlServerSequenceValueGeneratorFactory {
    public abstract virtual ValueGenerator Create(IProperty property, SqlServerSequenceValueGeneratorState generatorState, ISqlServerConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder, IDiagnosticsLogger`1<Command> commandLogger);
}
public interface Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.ISqlServerValueGeneratorCache {
    public abstract virtual SqlServerSequenceValueGeneratorState GetOrAddSequenceState(IProperty property, IRelationalConnection connection);
}
public class Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerSequenceHiLoValueGenerator`1 : HiLoValueGenerator`1<TValue> {
    private IRawSqlCommandBuilder _rawSqlCommandBuilder;
    private ISqlServerUpdateSqlGenerator _sqlGenerator;
    private ISqlServerConnection _connection;
    private ISequence _sequence;
    private IDiagnosticsLogger`1<Command> _commandLogger;
    public bool GeneratesTemporaryValues { get; }
    public SqlServerSequenceHiLoValueGenerator`1(IRawSqlCommandBuilder rawSqlCommandBuilder, ISqlServerUpdateSqlGenerator sqlGenerator, SqlServerSequenceValueGeneratorState generatorState, ISqlServerConnection connection, IDiagnosticsLogger`1<Command> commandLogger);
    protected virtual long GetNewLowValue();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerSequenceHiLoValueGenerator`1/<GetNewLowValueAsync>d__7")]
protected virtual Task`1<long> GetNewLowValueAsync(CancellationToken cancellationToken);
    public virtual bool get_GeneratesTemporaryValues();
}
public class Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerSequenceValueGeneratorFactory : object {
    private ISqlServerUpdateSqlGenerator _sqlGenerator;
    public SqlServerSequenceValueGeneratorFactory(ISqlServerUpdateSqlGenerator sqlGenerator);
    public virtual ValueGenerator Create(IProperty property, SqlServerSequenceValueGeneratorState generatorState, ISqlServerConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder, IDiagnosticsLogger`1<Command> commandLogger);
}
public class Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerSequenceValueGeneratorState : HiLoValueGeneratorState {
    [CompilerGeneratedAttribute]
private ISequence <Sequence>k__BackingField;
    public ISequence Sequence { get; }
    public SqlServerSequenceValueGeneratorState(ISequence sequence);
    [CompilerGeneratedAttribute]
public virtual ISequence get_Sequence();
}
public class Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerValueGeneratorCache : ValueGeneratorCache {
    private ConcurrentDictionary`2<string, SqlServerSequenceValueGeneratorState> _sequenceGeneratorCache;
    public SqlServerValueGeneratorCache(ValueGeneratorCacheDependencies dependencies);
    public virtual SqlServerSequenceValueGeneratorState GetOrAddSequenceState(IProperty property, IRelationalConnection connection);
    private static string GetSequenceName(ISequence sequence, IRelationalConnection connection);
}
public class Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerValueGeneratorSelector : RelationalValueGeneratorSelector {
    private ISqlServerSequenceValueGeneratorFactory _sequenceFactory;
    private ISqlServerConnection _connection;
    private IRawSqlCommandBuilder _rawSqlCommandBuilder;
    private IDiagnosticsLogger`1<Command> _commandLogger;
    public ISqlServerValueGeneratorCache Cache { get; }
    public SqlServerValueGeneratorSelector(ValueGeneratorSelectorDependencies dependencies, ISqlServerSequenceValueGeneratorFactory sequenceFactory, ISqlServerConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder, IDiagnosticsLogger`1<Command> commandLogger);
    public virtual ISqlServerValueGeneratorCache get_Cache();
    public virtual ValueGenerator Select(IProperty property, IEntityType entityType);
    public virtual ValueGenerator Create(IProperty property, IEntityType entityType);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerDatabaseFacadeExtensions : object {
    [ExtensionAttribute]
public static bool IsSqlServer(DatabaseFacade database);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions : object {
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseSqlServer(DbContextOptionsBuilder optionsBuilder, string connectionString, Action`1<SqlServerDbContextOptionsBuilder> sqlServerOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseSqlServer(DbContextOptionsBuilder optionsBuilder, DbConnection connection, Action`1<SqlServerDbContextOptionsBuilder> sqlServerOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseSqlServer(DbContextOptionsBuilder`1<TContext> optionsBuilder, string connectionString, Action`1<SqlServerDbContextOptionsBuilder> sqlServerOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseSqlServer(DbContextOptionsBuilder`1<TContext> optionsBuilder, DbConnection connection, Action`1<SqlServerDbContextOptionsBuilder> sqlServerOptionsAction);
    private static SqlServerOptionsExtension GetOrCreateExtension(DbContextOptionsBuilder optionsBuilder);
    private static void ConfigureWarnings(DbContextOptionsBuilder optionsBuilder);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions : object {
    [ExtensionAttribute]
public static bool FreeText(DbFunctions _, string propertyReference, string freeText, int languageTerm);
    [ExtensionAttribute]
public static bool FreeText(DbFunctions _, string propertyReference, string freeText);
    private static bool FreeTextCore(string propertyName, string freeText, Nullable`1<int> languageTerm);
    [ExtensionAttribute]
public static bool Contains(DbFunctions _, string propertyReference, string searchCondition, int languageTerm);
    [ExtensionAttribute]
public static bool Contains(DbFunctions _, string propertyReference, string searchCondition);
    private static bool ContainsCore(string propertyName, string searchCondition, Nullable`1<int> languageTerm);
    [ExtensionAttribute]
public static int DateDiffYear(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffYear(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffYear(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffYear(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffMonth(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMonth(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffMonth(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMonth(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffDay(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffDay(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffDay(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffDay(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffHour(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffHour(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffHour(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffHour(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffHour(DbFunctions _, TimeSpan startTimeSpan, TimeSpan endTimeSpan);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffHour(DbFunctions _, Nullable`1<TimeSpan> startTimeSpan, Nullable`1<TimeSpan> endTimeSpan);
    [ExtensionAttribute]
public static int DateDiffMinute(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMinute(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffMinute(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMinute(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffMinute(DbFunctions _, TimeSpan startTimeSpan, TimeSpan endTimeSpan);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMinute(DbFunctions _, Nullable`1<TimeSpan> startTimeSpan, Nullable`1<TimeSpan> endTimeSpan);
    [ExtensionAttribute]
public static int DateDiffSecond(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffSecond(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffSecond(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffSecond(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffSecond(DbFunctions _, TimeSpan startTimeSpan, TimeSpan endTimeSpan);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffSecond(DbFunctions _, Nullable`1<TimeSpan> startTimeSpan, Nullable`1<TimeSpan> endTimeSpan);
    [ExtensionAttribute]
public static int DateDiffMillisecond(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMillisecond(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffMillisecond(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMillisecond(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffMillisecond(DbFunctions _, TimeSpan startTimeSpan, TimeSpan endTimeSpan);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMillisecond(DbFunctions _, Nullable`1<TimeSpan> startTimeSpan, Nullable`1<TimeSpan> endTimeSpan);
    [ExtensionAttribute]
public static int DateDiffMicrosecond(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMicrosecond(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffMicrosecond(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMicrosecond(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffMicrosecond(DbFunctions _, TimeSpan startTimeSpan, TimeSpan endTimeSpan);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMicrosecond(DbFunctions _, Nullable`1<TimeSpan> startTimeSpan, Nullable`1<TimeSpan> endTimeSpan);
    [ExtensionAttribute]
public static int DateDiffNanosecond(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffNanosecond(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffNanosecond(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffNanosecond(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffNanosecond(DbFunctions _, TimeSpan startTimeSpan, TimeSpan endTimeSpan);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffNanosecond(DbFunctions _, Nullable`1<TimeSpan> startTimeSpan, Nullable`1<TimeSpan> endTimeSpan);
    [ExtensionAttribute]
public static bool IsDate(DbFunctions _, string expression);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions : object {
    [ExtensionAttribute]
public static EntityTypeBuilder IsMemoryOptimized(EntityTypeBuilder entityTypeBuilder, bool memoryOptimized);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> IsMemoryOptimized(EntityTypeBuilder`1<TEntity> entityTypeBuilder, bool memoryOptimized);
    [ExtensionAttribute]
public static OwnedNavigationBuilder IsMemoryOptimized(OwnedNavigationBuilder collectionOwnershipBuilder, bool memoryOptimized);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TEntity, TRelatedEntity> IsMemoryOptimized(OwnedNavigationBuilder`2<TEntity, TRelatedEntity> collectionOwnershipBuilder, bool memoryOptimized);
    [ExtensionAttribute]
public static IConventionEntityTypeBuilder IsMemoryOptimized(IConventionEntityTypeBuilder entityTypeBuilder, Nullable`1<bool> memoryOptimized, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIsMemoryOptimized(IConventionEntityTypeBuilder entityTypeBuilder, Nullable`1<bool> memoryOptimized, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IsMemoryOptimized")]
public static EntityTypeBuilder ForSqlServerIsMemoryOptimized(EntityTypeBuilder entityTypeBuilder, bool memoryOptimized);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IsMemoryOptimized")]
public static EntityTypeBuilder`1<TEntity> ForSqlServerIsMemoryOptimized(EntityTypeBuilder`1<TEntity> entityTypeBuilder, bool memoryOptimized);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IsMemoryOptimized")]
public static OwnedNavigationBuilder ForSqlServerIsMemoryOptimized(OwnedNavigationBuilder collectionOwnershipBuilder, bool memoryOptimized);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IsMemoryOptimized")]
public static OwnedNavigationBuilder`2<TEntity, TRelatedEntity> ForSqlServerIsMemoryOptimized(OwnedNavigationBuilder`2<TEntity, TRelatedEntity> collectionOwnershipBuilder, bool memoryOptimized);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IsMemoryOptimized")]
public static IConventionEntityTypeBuilder ForSqlServerIsMemoryOptimized(IConventionEntityTypeBuilder entityTypeBuilder, Nullable`1<bool> memoryOptimized, bool fromDataAnnotation);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions : object {
    [ExtensionAttribute]
public static bool IsMemoryOptimized(IEntityType entityType);
    [ExtensionAttribute]
public static void SetIsMemoryOptimized(IMutableEntityType entityType, bool memoryOptimized);
    [ExtensionAttribute]
public static void SetIsMemoryOptimized(IConventionEntityType entityType, Nullable`1<bool> memoryOptimized, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIsMemoryOptimizedConfigurationSource(IConventionEntityType entityType);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions : object {
    [ExtensionAttribute]
public static IndexBuilder IsClustered(IndexBuilder indexBuilder, bool clustered);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> IsClustered(IndexBuilder`1<TEntity> indexBuilder, bool clustered);
    [ExtensionAttribute]
public static IConventionIndexBuilder IsClustered(IConventionIndexBuilder indexBuilder, Nullable`1<bool> clustered, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIsClustered(IConventionIndexBuilder indexBuilder, Nullable`1<bool> clustered, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IndexBuilder IncludeProperties(IndexBuilder indexBuilder, String[] propertyNames);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> IncludeProperties(IndexBuilder`1<TEntity> indexBuilder, Expression`1<Func`2<TEntity, object>> includeExpression);
    [ExtensionAttribute]
public static IConventionIndexBuilder IncludeProperties(IConventionIndexBuilder indexBuilder, IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIncludeProperties(IConventionIndexBuilder indexBuilder, IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IndexBuilder IsCreatedOnline(IndexBuilder indexBuilder, bool createdOnline);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> IsCreatedOnline(IndexBuilder`1<TEntity> indexBuilder, bool createdOnline);
    [ExtensionAttribute]
public static IConventionIndexBuilder IsCreatedOnline(IConventionIndexBuilder indexBuilder, Nullable`1<bool> createdOnline, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIsCreatedOnline(IConventionIndexBuilder indexBuilder, Nullable`1<bool> createdOnline, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IsClustered")]
public static IndexBuilder ForSqlServerIsClustered(IndexBuilder indexBuilder, bool clustered);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IsClustered")]
public static IndexBuilder`1<TEntity> ForSqlServerIsClustered(IndexBuilder`1<TEntity> indexBuilder, bool clustered);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IsClustered")]
public static IConventionIndexBuilder ForSqlServerIsClustered(IConventionIndexBuilder indexBuilder, Nullable`1<bool> clustered, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IncludeProperties")]
public static IndexBuilder ForSqlServerInclude(IndexBuilder indexBuilder, String[] propertyNames);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IncludeProperties")]
public static IndexBuilder`1<TEntity> ForSqlServerInclude(IndexBuilder`1<TEntity> indexBuilder, Expression`1<Func`2<TEntity, object>> includeExpression);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IncludeProperties")]
public static IConventionIndexBuilder ForSqlServerInclude(IConventionIndexBuilder indexBuilder, IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IsCreatedOnline")]
public static IndexBuilder ForSqlServerIsCreatedOnline(IndexBuilder indexBuilder, bool createdOnline);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IsCreatedOnline")]
public static IndexBuilder`1<TEntity> ForSqlServerIsCreatedOnline(IndexBuilder`1<TEntity> indexBuilder, bool createdOnline);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IsCreatedOnline")]
public static IConventionIndexBuilder ForSqlServerIsCreatedOnline(IConventionIndexBuilder indexBuilder, Nullable`1<bool> createdOnline, bool fromDataAnnotation);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerIndexExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<bool> IsClustered(IIndex index);
    [ExtensionAttribute]
public static void SetIsClustered(IMutableIndex index, Nullable`1<bool> value);
    [ExtensionAttribute]
public static void SetIsClustered(IConventionIndex index, Nullable`1<bool> value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIsClusteredConfigurationSource(IConventionIndex property);
    [ExtensionAttribute]
public static IReadOnlyList`1<string> GetIncludeProperties(IIndex index);
    [ExtensionAttribute]
public static void SetIncludeProperties(IMutableIndex index, IReadOnlyList`1<string> properties);
    [ExtensionAttribute]
public static void SetIncludeProperties(IConventionIndex index, IReadOnlyList`1<string> properties, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIncludePropertiesConfigurationSource(IConventionIndex index);
    [ExtensionAttribute]
public static Nullable`1<bool> IsCreatedOnline(IIndex index);
    [ExtensionAttribute]
public static void SetIsCreatedOnline(IMutableIndex index, Nullable`1<bool> createdOnline);
    [ExtensionAttribute]
public static void SetIsCreatedOnline(IConventionIndex index, Nullable`1<bool> createdOnline, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIsCreatedOnlineConfigurationSource(IConventionIndex index);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerKeyBuilderExtensions : object {
    [ExtensionAttribute]
public static KeyBuilder IsClustered(KeyBuilder keyBuilder, bool clustered);
    [ExtensionAttribute]
public static IConventionKeyBuilder IsClustered(IConventionKeyBuilder keyBuilder, Nullable`1<bool> clustered, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIsClustered(IConventionKeyBuilder keyBuilder, Nullable`1<bool> clustered, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IsClustered")]
public static KeyBuilder ForSqlServerIsClustered(KeyBuilder keyBuilder, bool clustered);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IsClustered")]
public static IConventionKeyBuilder ForSqlServerIsClustered(IConventionKeyBuilder keyBuilder, Nullable`1<bool> clustered, bool fromDataAnnotation);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerKeyExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<bool> IsClustered(IKey key);
    private static Nullable`1<bool> GetDefaultIsClustered(IKey key);
    [ExtensionAttribute]
public static void SetIsClustered(IMutableKey key, Nullable`1<bool> clustered);
    [ExtensionAttribute]
public static void SetIsClustered(IConventionKey key, Nullable`1<bool> clustered, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIsClusteredConfigurationSource(IConventionKey key);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions : object {
    [ExtensionAttribute]
public static ModelBuilder UseHiLo(ModelBuilder modelBuilder, string name, string schema);
    [ExtensionAttribute]
public static IConventionSequenceBuilder HasHiLoSequence(IConventionModelBuilder modelBuilder, string name, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetHiLoSequence(IConventionModelBuilder modelBuilder, string name, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static ModelBuilder UseIdentityColumns(ModelBuilder modelBuilder, int seed, int increment);
    [ExtensionAttribute]
public static IConventionModelBuilder HasIdentityColumnSeed(IConventionModelBuilder modelBuilder, Nullable`1<int> seed, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIdentityColumnSeed(IConventionModelBuilder modelBuilder, Nullable`1<int> seed, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionModelBuilder HasIdentityColumnIncrement(IConventionModelBuilder modelBuilder, Nullable`1<int> increment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIdentityColumnIncrement(IConventionModelBuilder modelBuilder, Nullable`1<int> increment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionModelBuilder HasValueGenerationStrategy(IConventionModelBuilder modelBuilder, Nullable`1<SqlServerValueGenerationStrategy> valueGenerationStrategy, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetValueGenerationStrategy(IConventionModelBuilder modelBuilder, Nullable`1<SqlServerValueGenerationStrategy> valueGenerationStrategy, bool fromDataAnnotation);
    [ExtensionAttribute]
public static ModelBuilder HasDatabaseMaxSize(ModelBuilder modelBuilder, string maxSize);
    [ExtensionAttribute]
public static IConventionModelBuilder HasDatabaseMaxSize(IConventionModelBuilder modelBuilder, string maxSize, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetDatabaseMaxSize(IConventionModelBuilder modelBuilder, string maxSize, bool fromDataAnnotation);
    [ExtensionAttribute]
public static ModelBuilder HasServiceTier(ModelBuilder modelBuilder, string serviceTier);
    [ExtensionAttribute]
public static ModelBuilder HasServiceTierSql(ModelBuilder modelBuilder, string serviceTier);
    [ExtensionAttribute]
public static IConventionModelBuilder HasServiceTierSql(IConventionModelBuilder modelBuilder, string serviceTier, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetServiceTierSql(IConventionModelBuilder modelBuilder, string serviceTier, bool fromDataAnnotation);
    [ExtensionAttribute]
public static ModelBuilder HasPerformanceLevel(ModelBuilder modelBuilder, string performanceLevel);
    [ExtensionAttribute]
public static ModelBuilder HasPerformanceLevelSql(ModelBuilder modelBuilder, string performanceLevel);
    [ExtensionAttribute]
public static IConventionModelBuilder HasPerformanceLevelSql(IConventionModelBuilder modelBuilder, string performanceLevel, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetPerformanceLevelSql(IConventionModelBuilder modelBuilder, string performanceLevel, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use UseHiLo")]
public static ModelBuilder ForSqlServerUseSequenceHiLo(ModelBuilder modelBuilder, string name, string schema);
    [ExtensionAttribute]
[ObsoleteAttribute("Use HasHiLoSequence")]
public static IConventionSequenceBuilder ForSqlServerHasHiLoSequence(IConventionModelBuilder modelBuilder, string name, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use UseIdentityColumns")]
public static ModelBuilder ForSqlServerUseIdentityColumns(ModelBuilder modelBuilder, int seed, int increment);
    [ExtensionAttribute]
[ObsoleteAttribute("Use HasIdentityColumnSeed")]
public static IConventionModelBuilder ForSqlServerHasIdentitySeed(IConventionModelBuilder modelBuilder, Nullable`1<int> seed, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use HasIdentityColumnIncrement")]
public static IConventionModelBuilder ForSqlServerHasIdentityIncrement(IConventionModelBuilder modelBuilder, Nullable`1<int> increment, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use HasValueGenerationStrategy")]
public static IConventionModelBuilder ForSqlServerHasValueGenerationStrategy(IConventionModelBuilder modelBuilder, Nullable`1<SqlServerValueGenerationStrategy> valueGenerationStrategy, bool fromDataAnnotation);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerModelExtensions : object {
    public static string DefaultHiLoSequenceName;
    [ExtensionAttribute]
public static string GetHiLoSequenceName(IModel model);
    [ExtensionAttribute]
public static void SetHiLoSequenceName(IMutableModel model, string name);
    [ExtensionAttribute]
public static void SetHiLoSequenceName(IConventionModel model, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetHiLoSequenceNameConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static string GetHiLoSequenceSchema(IModel model);
    [ExtensionAttribute]
public static void SetHiLoSequenceSchema(IMutableModel model, string value);
    [ExtensionAttribute]
public static void SetHiLoSequenceSchema(IConventionModel model, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetHiLoSequenceSchemaConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static int GetIdentitySeed(IModel model);
    [ExtensionAttribute]
public static void SetIdentitySeed(IMutableModel model, Nullable`1<int> seed);
    [ExtensionAttribute]
public static void SetIdentitySeed(IConventionModel model, Nullable`1<int> seed, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentitySeedConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static int GetIdentityIncrement(IModel model);
    [ExtensionAttribute]
public static void SetIdentityIncrement(IMutableModel model, Nullable`1<int> increment);
    [ExtensionAttribute]
public static void SetIdentityIncrement(IConventionModel model, Nullable`1<int> increment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentityIncrementConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static Nullable`1<SqlServerValueGenerationStrategy> GetValueGenerationStrategy(IModel model);
    [ExtensionAttribute]
public static void SetValueGenerationStrategy(IMutableModel model, Nullable`1<SqlServerValueGenerationStrategy> value);
    [ExtensionAttribute]
public static void SetValueGenerationStrategy(IConventionModel model, Nullable`1<SqlServerValueGenerationStrategy> value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetValueGenerationStrategyConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static string GetDatabaseMaxSize(IModel model);
    [ExtensionAttribute]
public static void SetDatabaseMaxSize(IMutableModel model, string value);
    [ExtensionAttribute]
public static void SetDatabaseMaxSize(IConventionModel model, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetDatabaseMaxSizeConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static string GetServiceTierSql(IModel model);
    [ExtensionAttribute]
public static void SetServiceTierSql(IMutableModel model, string value);
    [ExtensionAttribute]
public static void SetServiceTierSql(IConventionModel model, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetServiceTierSqlConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static string GetPerformanceLevelSql(IModel model);
    [ExtensionAttribute]
public static void SetPerformanceLevelSql(IMutableModel model, string value);
    [ExtensionAttribute]
public static void SetPerformanceLevelSql(IConventionModel model, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetPerformanceLevelSqlConfigurationSource(IConventionModel model);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions : object {
    [ExtensionAttribute]
public static PropertyBuilder UseHiLo(PropertyBuilder propertyBuilder, string name, string schema);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> UseHiLo(PropertyBuilder`1<TProperty> propertyBuilder, string name, string schema);
    [ExtensionAttribute]
public static IConventionSequenceBuilder HasHiLoSequence(IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetHiLoSequence(IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder UseIdentityColumn(PropertyBuilder propertyBuilder, int seed, int increment);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> UseIdentityColumn(PropertyBuilder`1<TProperty> propertyBuilder, int seed, int increment);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasIdentityColumnSeed(IConventionPropertyBuilder propertyBuilder, Nullable`1<int> seed, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIdentityColumnSeed(IConventionPropertyBuilder propertyBuilder, Nullable`1<int> seed, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasIdentityColumnIncrement(IConventionPropertyBuilder propertyBuilder, Nullable`1<int> increment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIdentityColumnIncrement(IConventionPropertyBuilder propertyBuilder, Nullable`1<int> increment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasValueGenerationStrategy(IConventionPropertyBuilder propertyBuilder, Nullable`1<SqlServerValueGenerationStrategy> valueGenerationStrategy, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetValueGenerationStrategy(IConventionPropertyBuilder propertyBuilder, Nullable`1<SqlServerValueGenerationStrategy> valueGenerationStrategy, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use UseHiLo")]
public static PropertyBuilder ForSqlServerUseSequenceHiLo(PropertyBuilder propertyBuilder, string name, string schema);
    [ExtensionAttribute]
[ObsoleteAttribute("Use UseHiLo")]
public static PropertyBuilder`1<TProperty> ForSqlServerUseSequenceHiLo(PropertyBuilder`1<TProperty> propertyBuilder, string name, string schema);
    [ExtensionAttribute]
[ObsoleteAttribute("Use HasHiLoSequence")]
public static IConventionSequenceBuilder ForSqlServerHasHiLoSequence(IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use UseIdentityColumn")]
public static PropertyBuilder UseSqlServerIdentityColumn(PropertyBuilder propertyBuilder, int seed, int increment);
    [ExtensionAttribute]
[ObsoleteAttribute("Use UseIdentityColumn")]
public static PropertyBuilder`1<TProperty> UseSqlServerIdentityColumn(PropertyBuilder`1<TProperty> propertyBuilder, int seed, int increment);
    [ExtensionAttribute]
[ObsoleteAttribute("Use HasIdentityColumnSeed")]
public static IConventionPropertyBuilder ForSqlServerHasIdentitySeed(IConventionPropertyBuilder propertyBuilder, Nullable`1<int> seed, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use HasIdentityColumnIncrement")]
public static IConventionPropertyBuilder ForSqlServerHasIdentityIncrement(IConventionPropertyBuilder propertyBuilder, Nullable`1<int> increment, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use HasValueGenerationStrategy")]
public static IConventionPropertyBuilder ForSqlServerHasValueGenerationStrategy(IConventionPropertyBuilder propertyBuilder, Nullable`1<SqlServerValueGenerationStrategy> valueGenerationStrategy, bool fromDataAnnotation);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions : object {
    [ExtensionAttribute]
public static string GetHiLoSequenceName(IProperty property);
    [ExtensionAttribute]
public static void SetHiLoSequenceName(IMutableProperty property, string name);
    [ExtensionAttribute]
public static void SetHiLoSequenceName(IConventionProperty property, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetHiLoSequenceNameConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static string GetHiLoSequenceSchema(IProperty property);
    [ExtensionAttribute]
public static void SetHiLoSequenceSchema(IMutableProperty property, string schema);
    [ExtensionAttribute]
public static void SetHiLoSequenceSchema(IConventionProperty property, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetHiLoSequenceSchemaConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static ISequence FindHiLoSequence(IProperty property);
    [ExtensionAttribute]
public static Nullable`1<int> GetIdentitySeed(IProperty property);
    [ExtensionAttribute]
public static void SetIdentitySeed(IMutableProperty property, Nullable`1<int> seed);
    [ExtensionAttribute]
public static void SetIdentitySeed(IConventionProperty property, Nullable`1<int> seed, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentitySeedConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static Nullable`1<int> GetIdentityIncrement(IProperty property);
    [ExtensionAttribute]
public static void SetIdentityIncrement(IMutableProperty property, Nullable`1<int> increment);
    [ExtensionAttribute]
public static void SetIdentityIncrement(IConventionProperty property, Nullable`1<int> increment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentityIncrementConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static SqlServerValueGenerationStrategy GetValueGenerationStrategy(IProperty property);
    [ExtensionAttribute]
public static void SetValueGenerationStrategy(IMutableProperty property, Nullable`1<SqlServerValueGenerationStrategy> value);
    [ExtensionAttribute]
public static void SetValueGenerationStrategy(IConventionProperty property, Nullable`1<SqlServerValueGenerationStrategy> value, bool fromDataAnnotation);
    private static void CheckValueGenerationStrategy(IProperty property, Nullable`1<SqlServerValueGenerationStrategy> value);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetValueGenerationStrategyConfigurationSource(IConventionProperty property);
    public static bool IsCompatibleWithValueGeneration(IProperty property);
}
public class Microsoft.EntityFrameworkCore.SqlServerRetryingExecutionStrategy : ExecutionStrategy {
    private ICollection`1<int> _additionalErrorNumbers;
    public SqlServerRetryingExecutionStrategy(DbContext context);
    public SqlServerRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies);
    public SqlServerRetryingExecutionStrategy(DbContext context, int maxRetryCount);
    public SqlServerRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies, int maxRetryCount);
    public SqlServerRetryingExecutionStrategy(DbContext context, int maxRetryCount, TimeSpan maxRetryDelay, ICollection`1<int> errorNumbersToAdd);
    public SqlServerRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies, int maxRetryCount, TimeSpan maxRetryDelay, ICollection`1<int> errorNumbersToAdd);
    protected virtual bool ShouldRetryOn(Exception exception);
    protected virtual Nullable`1<TimeSpan> GetNextDelay(Exception lastException);
    private static bool IsMemoryOptimizedError(Exception exception);
}
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.Check : object {
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static IReadOnlyList`1<T> NotEmpty(IReadOnlyList`1<T> value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static string NotEmpty(string value, string parameterName);
    public static string NullButNotEmpty(string value, string parameterName);
    public static IReadOnlyList`1<T> HasNoNulls(IReadOnlyList`1<T> value, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void DebugAssert(bool condition, string message);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.DictionaryExtensions : object {
    [ExtensionAttribute]
public static TValue GetOrAddNew(IDictionary`2<TKey, TValue> source, TKey key);
    [ExtensionAttribute]
public static TValue Find(IReadOnlyDictionary`2<TKey, TValue> source, TKey key);
}
[ExtensionAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.DisposableExtensions : object {
    [ExtensionAttribute]
public static ValueTask DisposeAsyncIfAvailable(IDisposable disposable);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.SqlServerServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddEntityFrameworkSqlServer(IServiceCollection serviceCollection);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Collections.Generic.EnumerableExtensions : object {
    [ExtensionAttribute]
public static string Join(IEnumerable`1<object> source, string separator);
    [ExtensionAttribute]
public static IEnumerable`1<T> Distinct(IEnumerable`1<T> source, Func`3<T, T, bool> comparer);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Linq.Expressions.ExpressionExtensions : object {
    [ExtensionAttribute]
public static LambdaExpression UnwrapLambdaFromQuote(Expression expression);
    [ExtensionAttribute]
public static Expression UnwrapTypeConversion(Expression expression, Type& convertedType);
}
[ExtensionAttribute]
internal static class System.Reflection.MemberInfoExtensions : object {
    [ExtensionAttribute]
public static Type GetMemberType(MemberInfo memberInfo);
    [ExtensionAttribute]
public static bool IsSameAs(MemberInfo propertyInfo, MemberInfo otherPropertyInfo);
    [ExtensionAttribute]
public static string GetSimpleMemberName(MemberInfo member);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Reflection.PropertyInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsStatic(PropertyInfo property);
    [ExtensionAttribute]
public static bool IsCandidateProperty(PropertyInfo propertyInfo, bool needsWrite, bool publicOnly);
    [ExtensionAttribute]
public static bool IsEFIndexerProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static PropertyInfo FindGetterProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static PropertyInfo FindSetterProperty(PropertyInfo propertyInfo);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.SharedTypeExtensions : object {
    private static Dictionary`2<Type, object> _commonTypeDictionary;
    private static SharedTypeExtensions();
    [ExtensionAttribute]
public static Type UnwrapNullableType(Type type);
    [ExtensionAttribute]
public static bool IsNullableValueType(Type type);
    [ExtensionAttribute]
public static bool IsNullableType(Type type);
    [ExtensionAttribute]
public static bool IsValidEntityType(Type type);
    [ExtensionAttribute]
public static Type MakeNullable(Type type, bool nullable);
    [ExtensionAttribute]
public static bool IsNumeric(Type type);
    [ExtensionAttribute]
public static bool IsInteger(Type type);
    [ExtensionAttribute]
public static bool IsSignedInteger(Type type);
    [ExtensionAttribute]
public static bool IsAnonymousType(Type type);
    [ExtensionAttribute]
public static bool IsTupleType(Type type);
    [ExtensionAttribute]
public static PropertyInfo GetAnyProperty(Type type, string name);
    [ExtensionAttribute]
public static bool IsInstantiable(Type type);
    private static bool IsInstantiable(TypeInfo type);
    [ExtensionAttribute]
public static Type UnwrapEnumType(Type type);
    [ExtensionAttribute]
public static Type GetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetElementType(Type type, Type interfaceOrBaseType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetGenericTypeImplementations>d__17")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetGenericTypeImplementations(Type type, Type interfaceOrBaseType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetBaseTypes>d__18")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetBaseTypes(Type type);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetTypesInHierarchy>d__19")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetTypesInHierarchy(Type type);
    [ExtensionAttribute]
public static ConstructorInfo GetDeclaredConstructor(Type type, Type[] types);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetPropertiesInHierarchy>d__21")]
[ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetPropertiesInHierarchy(Type type, string name);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetMembersInHierarchy>d__22")]
[ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type, string name);
    [ExtensionAttribute]
public static object GetDefaultValue(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<TypeInfo> GetConstructibleTypes(Assembly assembly);
    [ExtensionAttribute]
public static IEnumerable`1<TypeInfo> GetLoadableDefinedTypes(Assembly assembly);
}
[ExtensionAttribute]
internal static class System.Text.StringBuilderExtensions : object {
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<string> values, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, string separator, String[] values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, Action`2<StringBuilder, T> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam param, Action`3<StringBuilder, T, TParam> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam1 param1, TParam2 param2, Action`4<StringBuilder, T, TParam1, TParam2> joinAction, string separator);
}
