[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    public string Contract { get; }
    public bool ForceFullStates { get; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[AttributeUsageAttribute("4320")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    public string FormatParameterName { get; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; }
    public ImplicitUseTargetFlags TargetFlags { get; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
}
public enum Microsoft.EntityFrameworkCore.DataCompressionType : Enum {
    public int value__;
    public static DataCompressionType None;
    public static DataCompressionType Row;
    public static DataCompressionType Page;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.ConflictingValueGenerationStrategiesEventData : EventData {
    [CompilerGeneratedAttribute]
private SqlServerValueGenerationStrategy <SqlServerValueGenerationStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OtherValueGenerationStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyProperty <Property>k__BackingField;
    public SqlServerValueGenerationStrategy SqlServerValueGenerationStrategy { get; }
    public string OtherValueGenerationStrategy { get; }
    public IReadOnlyProperty Property { get; }
    public ConflictingValueGenerationStrategiesEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, SqlServerValueGenerationStrategy sqlServerValueGenerationStrategy, string otherValueGenerationStrategy, IReadOnlyProperty property);
    [CompilerGeneratedAttribute]
public virtual SqlServerValueGenerationStrategy get_SqlServerValueGenerationStrategy();
    [CompilerGeneratedAttribute]
public virtual string get_OtherValueGenerationStrategy();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyProperty get_Property();
}
public static class Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId : object {
    private static string ValidationPrefix;
    public static EventId DecimalTypeKeyWarning;
    public static EventId DecimalTypeDefaultWarning;
    public static EventId ByteIdentityColumnWarning;
    public static EventId ConflictingValueGenerationStrategiesWarning;
    private static string TransactionPrefix;
    public static EventId SavepointsDisabledBecauseOfMARS;
    private static string ScaffoldingPrefix;
    public static EventId ColumnFound;
    public static EventId DefaultSchemaFound;
    public static EventId TypeAliasFound;
    public static EventId MissingSchemaWarning;
    public static EventId MissingTableWarning;
    public static EventId ForeignKeyReferencesMissingPrincipalTableWarning;
    public static EventId ForeignKeyReferencesUnknownPrincipalTableWarning;
    public static EventId TableFound;
    public static EventId SequenceFound;
    public static EventId PrimaryKeyFound;
    public static EventId UniqueConstraintFound;
    public static EventId IndexFound;
    public static EventId ForeignKeyFound;
    public static EventId ForeignKeyPrincipalColumnMissingWarning;
    public static EventId ReflexiveConstraintIgnored;
    public static EventId DuplicateForeignKeyConstraintIgnored;
    public static EventId ColumnWithoutTypeWarning;
    public static EventId MissingViewDefinitionRightsWarning;
    private static SqlServerEventId();
    private static EventId MakeValidationId(Id id);
    private static EventId MakeTransactionId(Id id);
    private static EventId MakeScaffoldingId(Id id);
}
internal static class Microsoft.EntityFrameworkCore.EnumerableMethods : object {
    [CompilerGeneratedAttribute]
private static MethodInfo <AggregateWithSeedSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <All>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AsEnumerable>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Cast>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Concat>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Contains>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <CountWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <CountWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <DefaultIfEmptyWithoutArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <DefaultIfEmptyWithArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Distinct>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ElementAt>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ElementAtOrDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Except>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeySelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyElementSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyElementResultSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyResultSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupJoin>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Intersect>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Join>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <JoinWithComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LongCountWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LongCountWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MaxWithoutSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MaxWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MinWithoutSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MinWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OfType>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OrderByDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Reverse>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Select>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectWithOrdinal>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectManyWithoutCollectionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectManyWithCollectionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SequenceEqual>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SkipWhile>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Take>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <TakeWhile>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ThenBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ThenByDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ToArray>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ToList>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Union>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ZipWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <SumWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <AverageWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MaxWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MaxWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MinWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MinWithSelectorMethods>k__BackingField;
    public static MethodInfo AggregateWithSeedSelector { get; }
    public static MethodInfo All { get; }
    public static MethodInfo AnyWithoutPredicate { get; }
    public static MethodInfo AnyWithPredicate { get; }
    public static MethodInfo AsEnumerable { get; }
    public static MethodInfo Cast { get; }
    public static MethodInfo Concat { get; }
    public static MethodInfo Contains { get; }
    public static MethodInfo CountWithoutPredicate { get; }
    public static MethodInfo CountWithPredicate { get; }
    public static MethodInfo DefaultIfEmptyWithoutArgument { get; }
    public static MethodInfo DefaultIfEmptyWithArgument { get; }
    public static MethodInfo Distinct { get; }
    public static MethodInfo ElementAt { get; }
    public static MethodInfo ElementAtOrDefault { get; }
    public static MethodInfo Except { get; }
    public static MethodInfo FirstWithoutPredicate { get; }
    public static MethodInfo FirstWithPredicate { get; }
    public static MethodInfo FirstOrDefaultWithoutPredicate { get; }
    public static MethodInfo FirstOrDefaultWithPredicate { get; }
    public static MethodInfo GroupByWithKeySelector { get; }
    public static MethodInfo GroupByWithKeyElementSelector { get; }
    public static MethodInfo GroupByWithKeyElementResultSelector { get; }
    public static MethodInfo GroupByWithKeyResultSelector { get; }
    public static MethodInfo GroupJoin { get; }
    public static MethodInfo Intersect { get; }
    public static MethodInfo Join { get; }
    public static MethodInfo JoinWithComparer { get; }
    public static MethodInfo LastWithoutPredicate { get; }
    public static MethodInfo LastWithPredicate { get; }
    public static MethodInfo LastOrDefaultWithoutPredicate { get; }
    public static MethodInfo LastOrDefaultWithPredicate { get; }
    public static MethodInfo LongCountWithoutPredicate { get; }
    public static MethodInfo LongCountWithPredicate { get; }
    public static MethodInfo MaxWithoutSelector { get; }
    public static MethodInfo MaxWithSelector { get; }
    public static MethodInfo MinWithoutSelector { get; }
    public static MethodInfo MinWithSelector { get; }
    public static MethodInfo OfType { get; }
    public static MethodInfo OrderBy { get; }
    public static MethodInfo OrderByDescending { get; }
    public static MethodInfo Reverse { get; }
    public static MethodInfo Select { get; }
    public static MethodInfo SelectWithOrdinal { get; }
    public static MethodInfo SelectManyWithoutCollectionSelector { get; }
    public static MethodInfo SelectManyWithCollectionSelector { get; }
    public static MethodInfo SequenceEqual { get; }
    public static MethodInfo SingleWithoutPredicate { get; }
    public static MethodInfo SingleWithPredicate { get; }
    public static MethodInfo SingleOrDefaultWithoutPredicate { get; }
    public static MethodInfo SingleOrDefaultWithPredicate { get; }
    public static MethodInfo Skip { get; }
    public static MethodInfo SkipWhile { get; }
    public static MethodInfo Take { get; }
    public static MethodInfo TakeWhile { get; }
    public static MethodInfo ThenBy { get; }
    public static MethodInfo ThenByDescending { get; }
    public static MethodInfo ToArray { get; }
    public static MethodInfo ToList { get; }
    public static MethodInfo Union { get; }
    public static MethodInfo Where { get; }
    public static MethodInfo ZipWithSelector { get; }
    private static Dictionary`2<Type, MethodInfo> SumWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> AverageWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MaxWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MaxWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MinWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MinWithSelectorMethods { get; }
    private static EnumerableMethods();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AggregateWithSeedSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_All();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AsEnumerable();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Cast();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Concat();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Contains();
    [CompilerGeneratedAttribute]
public static MethodInfo get_CountWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_CountWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_DefaultIfEmptyWithoutArgument();
    [CompilerGeneratedAttribute]
public static MethodInfo get_DefaultIfEmptyWithArgument();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Distinct();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ElementAt();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ElementAtOrDefault();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Except();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeySelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyElementSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyElementResultSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyResultSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupJoin();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Intersect();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Join();
    [CompilerGeneratedAttribute]
public static MethodInfo get_JoinWithComparer();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LongCountWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LongCountWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MaxWithoutSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MaxWithSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MinWithoutSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MinWithSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OfType();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OrderBy();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OrderByDescending();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Reverse();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Select();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectWithOrdinal();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectManyWithoutCollectionSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectManyWithCollectionSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SequenceEqual();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Skip();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SkipWhile();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Take();
    [CompilerGeneratedAttribute]
public static MethodInfo get_TakeWhile();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ThenBy();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ThenByDescending();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ToArray();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ToList();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Union();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Where();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ZipWithSelector();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_SumWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_AverageWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MaxWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MaxWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MinWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MinWithSelectorMethods();
    public static MethodInfo GetSumWithSelector(Type type);
    public static MethodInfo GetAverageWithSelector(Type type);
    public static MethodInfo GetMaxWithoutSelector(Type type);
    public static MethodInfo GetMaxWithSelector(Type type);
    public static MethodInfo GetMinWithoutSelector(Type type);
    public static MethodInfo GetMinWithSelector(Type type);
    [CompilerGeneratedAttribute]
internal static MethodInfo <.cctor>g__GetMethod|210_65(string name, int genericParameterCount, Func`2<Type[], Type[]> parameterGenerator, <>c__DisplayClass210_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder : RelationalDbContextOptionsBuilder`2<SqlServerDbContextOptionsBuilder, SqlServerOptionsExtension> {
    public SqlServerDbContextOptionsBuilder(DbContextOptionsBuilder optionsBuilder);
    public virtual SqlServerDbContextOptionsBuilder EnableRetryOnFailure();
    public virtual SqlServerDbContextOptionsBuilder EnableRetryOnFailure(int maxRetryCount);
    public virtual SqlServerDbContextOptionsBuilder EnableRetryOnFailure(ICollection`1<int> errorNumbersToAdd);
    public virtual SqlServerDbContextOptionsBuilder EnableRetryOnFailure(int maxRetryCount, TimeSpan maxRetryDelay, IEnumerable`1<int> errorNumbersToAdd);
    public virtual SqlServerDbContextOptionsBuilder UseCompatibilityLevel(int compatibilityLevel);
    public virtual SqlServerDbContextOptionsBuilder UseAzureSqlDefaults(bool enable);
}
internal static class Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer : object {
    public static TValue EnsureInitialized(TValue& target, TParam param, Func`2<TParam, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TParam1 param1, TParam2 param2, Func`3<TParam1, TParam2, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TParam1 param1, TParam2 param2, TParam3 param3, Func`4<TParam1, TParam2, TParam3, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, Boolean& initialized, TParam param, Func`2<TParam, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TValue value);
    public static TValue EnsureInitialized(TValue& target, TParam param, Action`1<TParam> valueFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalPeriodPropertyBuilder : object {
    private PropertyBuilder _propertyBuilder;
    [EntityFrameworkInternalAttribute]
public OwnedNavigationTemporalPeriodPropertyBuilder(PropertyBuilder propertyBuilder);
    public virtual OwnedNavigationTemporalPeriodPropertyBuilder HasColumnName(string name);
    public virtual OwnedNavigationTemporalPeriodPropertyBuilder HasPrecision(int precision);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalTableBuilder : object {
    private OwnedNavigationBuilder _referenceOwnershipBuilder;
    [EntityFrameworkInternalAttribute]
public OwnedNavigationTemporalTableBuilder(OwnedNavigationBuilder referenceOwnershipBuilder);
    public virtual OwnedNavigationTemporalTableBuilder UseHistoryTable(string name);
    public virtual OwnedNavigationTemporalTableBuilder UseHistoryTable(string name, string schema);
    public virtual OwnedNavigationTemporalPeriodPropertyBuilder HasPeriodStart(string propertyName);
    public virtual OwnedNavigationTemporalPeriodPropertyBuilder HasPeriodEnd(string propertyName);
    private IMutableProperty ConfigurePeriodProperty(string propertyName);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalTableBuilder`2 : OwnedNavigationTemporalTableBuilder {
    [EntityFrameworkInternalAttribute]
public OwnedNavigationTemporalTableBuilder`2(OwnedNavigationBuilder referenceOwnershipBuilder);
    public virtual OwnedNavigationTemporalTableBuilder`2<TOwnerEntity, TDependentEntity> UseHistoryTable(string name);
    public virtual OwnedNavigationTemporalTableBuilder`2<TOwnerEntity, TDependentEntity> UseHistoryTable(string name, string schema);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalPeriodPropertyBuilder : object {
    private PropertyBuilder _propertyBuilder;
    private PropertyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public TemporalPeriodPropertyBuilder(PropertyBuilder propertyBuilder);
    public virtual TemporalPeriodPropertyBuilder HasColumnName(string name);
    public virtual TemporalPeriodPropertyBuilder HasPrecision(int precision);
    private sealed virtual override PropertyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder>.get_Instance();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder : object {
    private EntityTypeBuilder _entityTypeBuilder;
    [EntityFrameworkInternalAttribute]
public TemporalTableBuilder(EntityTypeBuilder entityTypeBuilder);
    public virtual TemporalTableBuilder UseHistoryTable(string name);
    public virtual TemporalTableBuilder UseHistoryTable(string name, string schema);
    public virtual TemporalPeriodPropertyBuilder HasPeriodStart(string propertyName);
    public virtual TemporalPeriodPropertyBuilder HasPeriodEnd(string propertyName);
    private IMutableProperty ConfigurePeriodProperty(string propertyName);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder`1 : TemporalTableBuilder {
    [EntityFrameworkInternalAttribute]
public TemporalTableBuilder`1(EntityTypeBuilder entityTypeBuilder);
    public virtual TemporalTableBuilder`1<TEntity> UseHistoryTable(string name);
    public virtual TemporalTableBuilder`1<TEntity> UseHistoryTable(string name, string schema);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerConventionSetBuilder : RelationalConventionSetBuilder {
    private ISqlGenerationHelper _sqlGenerationHelper;
    public SqlServerConventionSetBuilder(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies, ISqlGenerationHelper sqlGenerationHelper);
    public virtual ConventionSet CreateConventionSet();
    public static ConventionSet Build();
    public static ModelBuilder CreateModelBuilder();
    private static IServiceScope CreateServiceScope();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerDbFunctionConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public SqlServerDbFunctionConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerIndexConvention : object {
    private ISqlGenerationHelper _sqlGenerationHelper;
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public SqlServerIndexConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies, ISqlGenerationHelper sqlGenerationHelper);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    public virtual void ProcessIndexAdded(IConventionIndexBuilder indexBuilder, IConventionContext`1<IConventionIndexBuilder> context);
    public virtual void ProcessIndexUniquenessChanged(IConventionIndexBuilder indexBuilder, IConventionContext`1<Nullable`1<bool>> context);
    public virtual void ProcessPropertyNullabilityChanged(IConventionPropertyBuilder propertyBuilder, IConventionContext`1<Nullable`1<bool>> context);
    public virtual void ProcessIndexAnnotationChanged(IConventionIndexBuilder indexBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    public virtual void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    private void SetIndexFilter(IConventionIndexBuilder indexBuilder, bool columnNameChanged);
    private string CreateIndexFilter(List`1<string> nullableColumns);
    private static List`1<string> GetNullableColumns(IReadOnlyIndex index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerMemoryOptimizedTablesConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public SqlServerMemoryOptimizedTablesConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessEntityTypeAnnotationChanged(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    public virtual void ProcessKeyAdded(IConventionKeyBuilder keyBuilder, IConventionContext`1<IConventionKeyBuilder> context);
    public virtual void ProcessIndexAdded(IConventionIndexBuilder indexBuilder, IConventionContext`1<IConventionIndexBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerOnDeleteConvention : CascadeDeleteConvention {
    private static bool UseOldBehavior32732;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public SqlServerOnDeleteConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    private static SqlServerOnDeleteConvention();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessSkipNavigationForeignKeyChanged(IConventionSkipNavigationBuilder skipNavigationBuilder, IConventionForeignKey foreignKey, IConventionForeignKey oldForeignKey, IConventionContext`1<IConventionForeignKey> context);
    protected virtual DeleteBehavior GetTargetDeleteBehavior(IConventionForeignKey foreignKey);
    private Nullable`1<DeleteBehavior> ProcessSkipNavigations(IEnumerable`1<IConventionSkipNavigation> skipNavigations);
    public virtual void ProcessEntityTypeAnnotationChanged(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    [CompilerGeneratedAttribute]
internal static DeleteBehavior <ProcessSkipNavigations>g__DefaultDeleteBehavior|7_1(IConventionSkipNavigation conventionSkipNavigation);
    [CompilerGeneratedAttribute]
internal static bool <ProcessSkipNavigations>g__IsMappedToSameTable|7_2(IConventionEntityType entityType1, IConventionEntityType entityType2);
    [CompilerGeneratedAttribute]
internal static bool <ProcessSkipNavigations>g__IsFirstSkipNavigation|7_3(IConventionSkipNavigation navigation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerOutputClauseConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public SqlServerOutputClauseConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessTriggerAdded(IConventionTriggerBuilder triggerBuilder, IConventionContext`1<IConventionTriggerBuilder> context);
    public virtual void ProcessTriggerRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionTrigger trigger, IConventionContext`1<IConventionTrigger> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerRuntimeModelConvention : RelationalRuntimeModelConvention {
    public SqlServerRuntimeModelConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    protected virtual void ProcessModelAnnotations(Dictionary`2<string, object> annotations, IModel model, RuntimeModel runtimeModel, bool runtime);
    protected virtual void ProcessPropertyAnnotations(Dictionary`2<string, object> annotations, IProperty property, RuntimeProperty runtimeProperty, bool runtime);
    protected virtual void ProcessPropertyOverridesAnnotations(Dictionary`2<string, object> annotations, IRelationalPropertyOverrides propertyOverrides, RuntimeRelationalPropertyOverrides runtimePropertyOverrides, bool runtime);
    protected virtual void ProcessIndexAnnotations(Dictionary`2<string, object> annotations, IIndex index, RuntimeIndex runtimeIndex, bool runtime);
    protected virtual void ProcessKeyAnnotations(Dictionary`2<string, object> annotations, IKey key, RuntimeKey runtimeKey, bool runtime);
    protected virtual void ProcessEntityTypeAnnotations(Dictionary`2<string, object> annotations, IEntityType entityType, RuntimeEntityType runtimeEntityType, bool runtime);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerSharedTableConvention : SharedTableConvention {
    protected bool IndexesUniqueAcrossTables { get; }
    public SqlServerSharedTableConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    protected virtual bool get_IndexesUniqueAcrossTables();
    protected virtual bool AreCompatible(IReadOnlyKey key, IReadOnlyKey duplicateKey, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject);
    protected virtual bool AreCompatible(IReadOnlyIndex index, IReadOnlyIndex duplicateIndex, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerStoreGenerationConvention : StoreGenerationConvention {
    public SqlServerStoreGenerationConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    public virtual void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    protected virtual void Validate(IConventionProperty property, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerTemporalConvention : object {
    private static string DefaultPeriodStartName;
    private static string DefaultPeriodEndName;
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public SqlServerTemporalConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessEntityTypeAnnotationChanged(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    public virtual void ProcessSkipNavigationForeignKeyChanged(IConventionSkipNavigationBuilder skipNavigationBuilder, IConventionForeignKey foreignKey, IConventionForeignKey oldForeignKey, IConventionContext`1<IConventionForeignKey> context);
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerValueGenerationConvention : RelationalValueGenerationConvention {
    public SqlServerValueGenerationConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    public virtual void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    public virtual void ProcessEntityTypeAnnotationChanged(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    protected virtual Nullable`1<ValueGenerated> GetValueGenerated(IConventionProperty property);
    public static Nullable`1<ValueGenerated> GetValueGenerated(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    private static Nullable`1<ValueGenerated> GetValueGenerated(IReadOnlyProperty property, StoreObjectIdentifier& storeObject, ITypeMappingSource typeMappingSource);
    private static Nullable`1<ValueGenerated> GetTemporalValueGenerated(IReadOnlyProperty property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerValueGenerationStrategyConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public SqlServerValueGenerationStrategyConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessModelInitialized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    [CompilerGeneratedAttribute]
private bool <ProcessModelFinalizing>g__IsStrategyNoneNeeded|8_0(IReadOnlyProperty property, StoreObjectIdentifier storeObject);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerIndexExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool AreCompatibleForSqlServer(IReadOnlyIndex index, IReadOnlyIndex duplicateIndex, StoreObjectIdentifier& storeObject, bool shouldThrow);
    private static string FormatInclude(IReadOnlyIndex index, StoreObjectIdentifier storeObject);
    [CompilerGeneratedAttribute]
internal static bool <AreCompatibleForSqlServer>g__SameColumnNames|0_0(IReadOnlyIndex index, IReadOnlyIndex duplicateIndex, StoreObjectIdentifier storeObject);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerKeyExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool AreCompatibleForSqlServer(IReadOnlyKey key, IReadOnlyKey duplicateKey, StoreObjectIdentifier& storeObject, bool shouldThrow);
}
public enum Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy : Enum {
    public int value__;
    public static SqlServerValueGenerationStrategy None;
    public static SqlServerValueGenerationStrategy SequenceHiLo;
    public static SqlServerValueGenerationStrategy IdentityColumn;
    public static SqlServerValueGenerationStrategy Sequence;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("CREATE DATABASE {Name}")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.SqlServerCreateDatabaseOperation : DatabaseOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public string Name { get; public set; }
    [NullableAttribute("2")]
public string FileName { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_FileName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_FileName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.Operations.SqlServerDropDatabaseOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsSqlServer(MigrationBuilder migrationBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator : MigrationsSqlGenerator {
    private static bool UseOldBehavior32457;
    private static bool UseOldBehavior32730;
    private IReadOnlyList`1<MigrationOperation> _operations;
    private int _variableCounter;
    private ICommandBatchPreparer _commandBatchPreparer;
    public SqlServerMigrationsSqlGenerator(MigrationsSqlGeneratorDependencies dependencies, ICommandBatchPreparer commandBatchPreparer);
    private static SqlServerMigrationsSqlGenerator();
    public virtual IReadOnlyList`1<MigrationCommand> Generate(IReadOnlyList`1<MigrationOperation> operations, IModel model, MigrationsSqlGenerationOptions options);
    protected virtual void Generate(MigrationOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AddCheckConstraintOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AddColumnOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(AddForeignKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(AddPrimaryKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(AlterColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameIndexOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RestartSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(RenameTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropTableOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(CreateIndexOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropPrimaryKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(EnsureSchemaOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(CreateSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(SqlServerCreateDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder);
    private static string ExpandFileName(string fileName);
    protected virtual void Generate(SqlServerDropDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AlterDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AlterTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropForeignKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropIndexOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropColumnOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(RenameColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(SqlOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(InsertDataOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    private void GenerateIdentityInsert(MigrationCommandListBuilder builder, InsertDataOperation operation, bool on, IModel model);
    protected virtual void Generate(DeleteDataOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(UpdateDataOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void SequenceOptions(string schema, string name, SequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ColumnDefinition(string schema, string table, string name, ColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ComputedColumnDefinition(string schema, string table, string name, ColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Rename(string name, string newName, MigrationCommandListBuilder builder);
    protected virtual void Rename(string name, string newName, string type, MigrationCommandListBuilder builder);
    protected virtual void Transfer(string newSchema, string schema, string name, MigrationCommandListBuilder builder);
    protected virtual void IndexTraits(MigrationOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void IndexOptions(CreateIndexOperation operation, IModel model, MigrationCommandListBuilder builder);
    private static void IndexWithOptions(CreateIndexOperation operation, MigrationCommandListBuilder builder);
    protected virtual void ForeignKeyAction(ReferentialAction referentialAction, MigrationCommandListBuilder builder);
    protected virtual void DropDefaultConstraint(string schema, string tableName, string columnName, MigrationCommandListBuilder builder);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator/<GetIndexesToRebuild>d__48")]
protected virtual IEnumerable`1<ITableIndex> GetIndexesToRebuild(IColumn column, MigrationOperation currentOperation);
    protected virtual void DropIndexes(IEnumerable`1<ITableIndex> indexes, MigrationCommandListBuilder builder);
    protected virtual void CreateIndexes(IEnumerable`1<ITableIndex> indexes, MigrationCommandListBuilder builder);
    protected virtual void AddDescription(MigrationCommandListBuilder builder, string description, string schema, string table, string column, bool omitVariableDeclarations);
    protected virtual void DropDescription(MigrationCommandListBuilder builder, string schema, string table, string column, bool omitVariableDeclarations);
    protected virtual bool UseLegacyIndexFilters(CreateIndexOperation operation, IModel model);
    private static string IntegerConstant(long value);
    private static bool IsMemoryOptimized(Annotatable annotatable, IModel model, string schema, string tableName);
    private static bool IsMemoryOptimized(Annotatable annotatable);
    private static bool IsIdentity(ColumnOperation operation);
    private void GenerateExecWhenIdempotent(MigrationCommandListBuilder builder, Action`1<MigrationCommandListBuilder> generate);
    private static bool HasDifferences(IEnumerable`1<IAnnotation> source, IEnumerable`1<IAnnotation> target);
    private IReadOnlyList`1<MigrationOperation> RewriteOperations(IReadOnlyList`1<MigrationOperation> migrationOperations, IModel model, MigrationsSqlGenerationOptions options);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(AddCheckConstraintOperation operation, IModel model, MigrationCommandListBuilder builder);
    [CompilerGeneratedAttribute]
private void <Generate>g__AppendBatch|32_0(string batch, <>c__DisplayClass32_0& );
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__1(DeleteDataOperation operation, IModel model, MigrationCommandListBuilder builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__2(UpdateDataOperation operation, IModel model, MigrationCommandListBuilder builder);
    [CompilerGeneratedAttribute]
internal static string <AddDescription>g__Literal|51_0(string s);
    [CompilerGeneratedAttribute]
internal static string <AddDescription>g__SqlLiteral|51_1(string value);
    [CompilerGeneratedAttribute]
internal static void <AddDescription>g__AddConcatOperatorIfNeeded|51_2(<>c__DisplayClass51_0& );
    [CompilerGeneratedAttribute]
internal static string <DropDescription>g__Literal|52_0(string s, <>c__DisplayClass52_0& );
    [CompilerGeneratedAttribute]
private void <RewriteOperations>g__DisableVersioning|60_0(string table, string schema, string historyTableName, string historyTableSchema, bool suppressTransaction, <>c__DisplayClass60_0& );
    [CompilerGeneratedAttribute]
private void <RewriteOperations>g__EnableVersioning|60_1(string table, string schema, string historyTableName, string historyTableSchema, bool suppressTransaction, <>c__DisplayClass60_0& );
    [CompilerGeneratedAttribute]
private void <RewriteOperations>g__DisablePeriod|60_2(string table, string schema, string periodStartColumnName, string periodEndColumnName, bool suppressTransaction, <>c__DisplayClass60_0& );
    [CompilerGeneratedAttribute]
private void <RewriteOperations>g__EnablePeriod|60_3(string table, string schema, string periodStartColumnName, string periodEndColumnName, bool suppressTransaction, <>c__DisplayClass60_0& );
    [CompilerGeneratedAttribute]
internal static bool <RewriteOperations>g__CanSkipAlterColumnOperation|60_4(ColumnOperation first, ColumnOperation second);
    [CompilerGeneratedAttribute]
internal static bool <RewriteOperations>g__ColumnPropertiesAreTheSame|60_5(ColumnOperation first, ColumnOperation second);
    [CompilerGeneratedAttribute]
internal static bool <RewriteOperations>g__ColumnOperationsOnlyDifferByTemporalTableAnnotation|60_6(ColumnOperation first, ColumnOperation second);
    [CompilerGeneratedAttribute]
internal static TOperation <RewriteOperations>g__CopyColumnOperation|60_7(ColumnOperation source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerAnnotationCodeGenerator : AnnotationCodeGenerator {
    private static MethodInfo ModelUseIdentityColumnsMethodInfo;
    private static MethodInfo ModelUseHiLoMethodInfo;
    private static MethodInfo ModelUseKeySequencesMethodInfo;
    private static MethodInfo ModelHasDatabaseMaxSizeMethodInfo;
    private static MethodInfo ModelHasServiceTierSqlMethodInfo;
    private static MethodInfo ModelHasPerformanceLevelSqlMethodInfo;
    private static MethodInfo ModelHasAnnotationMethodInfo;
    private static MethodInfo EntityTypeToTableMethodInfo;
    private static MethodInfo EntityTypeIsMemoryOptimizedMethodInfo;
    private static MethodInfo PropertyIsSparseMethodInfo;
    private static MethodInfo PropertyUseIdentityColumnsMethodInfo;
    private static MethodInfo PropertyUseHiLoMethodInfo;
    private static MethodInfo PropertyUseSequenceMethodInfo;
    private static MethodInfo IndexIsClusteredMethodInfo;
    private static MethodInfo IndexIncludePropertiesMethodInfo;
    private static MethodInfo IndexHasFillFactorMethodInfo;
    private static MethodInfo IndexSortInTempDbMethodInfo;
    private static MethodInfo IndexUseDataCompressionMethodInfo;
    private static MethodInfo KeyIsClusteredMethodInfo;
    private static MethodInfo TableIsTemporalMethodInfo;
    private static MethodInfo TemporalTableUseHistoryTableMethodInfo1;
    private static MethodInfo TemporalTableUseHistoryTableMethodInfo2;
    private static MethodInfo TemporalTableHasPeriodStartMethodInfo;
    private static MethodInfo TemporalTableHasPeriodEndMethodInfo;
    private static MethodInfo TemporalPropertyHasColumnNameMethodInfo;
    public SqlServerAnnotationCodeGenerator(AnnotationCodeGeneratorDependencies dependencies);
    private static SqlServerAnnotationCodeGenerator();
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IModel model, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IProperty property, IDictionary`2<string, IAnnotation> annotations);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IEntityType entityType, IDictionary`2<string, IAnnotation> annotations);
    protected virtual bool IsHandledByConvention(IModel model, IAnnotation annotation);
    protected virtual bool IsHandledByConvention(IProperty property, IAnnotation annotation);
    protected virtual MethodCallCodeFragment GenerateFluentApi(IKey key, IAnnotation annotation);
    protected virtual MethodCallCodeFragment GenerateFluentApi(IIndex index, IAnnotation annotation);
    private static MethodCallCodeFragment GenerateValueGenerationStrategy(IDictionary`2<string, IAnnotation> annotations, IModel model, bool onModel);
    private static T GetAndRemove(IDictionary`2<string, IAnnotation> annotations, string annotationName);
    private static void GenerateSimpleFluentApiCall(IDictionary`2<string, IAnnotation> annotations, string annotationName, MethodInfo methodInfo, List`1<MethodCallCodeFragment> methodCallCodeFragments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerCSharpRuntimeAnnotationCodeGenerator : RelationalCSharpRuntimeAnnotationCodeGenerator {
    public SqlServerCSharpRuntimeAnnotationCodeGenerator(CSharpRuntimeAnnotationCodeGeneratorDependencies dependencies, RelationalCSharpRuntimeAnnotationCodeGeneratorDependencies relationalDependencies);
    public virtual void Generate(IModel model, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IRelationalModel model, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IProperty property, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IColumn column, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IIndex index, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(ITableIndex index, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IKey key, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IUniqueConstraint uniqueConstraint, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IEntityType entityType, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(ITable table, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IRelationalPropertyOverrides overrides, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerDesignTimeServices : object {
    [NullableContextAttribute("1")]
public virtual void ConfigureDesignTimeServices(IServiceCollection serviceCollection);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions : RelationalLoggingDefinitions {
    public EventDefinitionBase LogDecimalTypeKey;
    public EventDefinitionBase LogDefaultDecimalTypeColumn;
    public EventDefinitionBase LogByteIdentityColumn;
    public EventDefinitionBase LogColumnWithoutType;
    public EventDefinitionBase LogFoundDefaultSchema;
    public EventDefinitionBase LogFoundTypeAlias;
    public EventDefinitionBase LogFoundColumn;
    public EventDefinitionBase LogFoundForeignKey;
    public EventDefinitionBase LogPrincipalTableNotInSelectionSet;
    public EventDefinitionBase LogMissingSchema;
    public EventDefinitionBase LogMissingTable;
    public EventDefinitionBase LogFoundSequence;
    public EventDefinitionBase LogFoundTable;
    public EventDefinitionBase LogFoundIndex;
    public EventDefinitionBase LogFoundPrimaryKey;
    public EventDefinitionBase LogFoundUniqueConstraint;
    public EventDefinitionBase LogPrincipalColumnNotFound;
    public EventDefinitionBase LogReflexiveConstraintIgnored;
    public EventDefinitionBase LogDuplicateForeignKeyConstraintIgnored;
    public EventDefinitionBase LogPrincipalTableInformationNotFound;
    public EventDefinitionBase LogSavepointsDisabledBecauseOfMARS;
    public EventDefinitionBase LogConflictingValueGenerationStrategies;
    public EventDefinitionBase LogMissingViewDefinitionRights;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions : object {
    [ExtensionAttribute]
public static void DecimalTypeKeyWarning(IDiagnosticsLogger`1<Validation> diagnostics, IProperty property);
    private static string DecimalTypeKeyWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void DecimalTypeDefaultWarning(IDiagnosticsLogger`1<Validation> diagnostics, IProperty property);
    private static string DecimalTypeDefaultWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ByteIdentityColumnWarning(IDiagnosticsLogger`1<Validation> diagnostics, IProperty property);
    private static string ByteIdentityColumnWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ConflictingValueGenerationStrategiesWarning(IDiagnosticsLogger`1<Validation> diagnostics, SqlServerValueGenerationStrategy sqlServerValueGenerationStrategy, string otherValueGenerationStrategy, IReadOnlyProperty property);
    private static string ConflictingValueGenerationStrategiesWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ColumnFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string tableName, string columnName, int ordinal, string dataTypeName, int maxLength, int precision, int scale, bool nullable, bool identity, string defaultValue, string computedValue, Nullable`1<bool> stored);
    [ExtensionAttribute]
public static void ForeignKeyFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string foreignKeyName, string tableName, string principalTableName, string onDeleteAction);
    [ExtensionAttribute]
public static void DefaultSchemaFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string schemaName);
    [ExtensionAttribute]
public static void TypeAliasFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string typeAliasName, string systemTypeName);
    [ExtensionAttribute]
public static void PrimaryKeyFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string primaryKeyName, string tableName);
    [ExtensionAttribute]
public static void UniqueConstraintFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string uniqueConstraintName, string tableName);
    [ExtensionAttribute]
public static void IndexFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string indexName, string tableName, bool unique);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void ForeignKeyReferencesUnknownPrincipalTableWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string foreignKeyName, string tableName);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void ForeignKeyReferencesMissingPrincipalTableWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string foreignKeyName, string tableName, string principalTableName);
    [ExtensionAttribute]
public static void ForeignKeyPrincipalColumnMissingWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string foreignKeyName, string tableName, string principalColumnName, string principalTableName);
    [ExtensionAttribute]
public static void MissingSchemaWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string schemaName);
    [ExtensionAttribute]
public static void MissingTableWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string tableName);
    [ExtensionAttribute]
public static void ColumnWithoutTypeWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string tableName, string columnName);
    [ExtensionAttribute]
public static void SequenceFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string sequenceName, string sequenceTypeName, bool cyclic, int increment, long start, long min, long max);
    [ExtensionAttribute]
public static void TableFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string tableName);
    [ExtensionAttribute]
public static void ReflexiveConstraintIgnored(IDiagnosticsLogger`1<Scaffolding> diagnostics, string foreignKeyName, string tableName);
    [ExtensionAttribute]
public static void DuplicateForeignKeyConstraintIgnored(IDiagnosticsLogger`1<Scaffolding> diagnostics, string foreignKeyName, string tableName, string duplicateForeignKeyName);
    [ExtensionAttribute]
public static void SavepointsDisabledBecauseOfMARS(IDiagnosticsLogger`1<Transaction> diagnostics);
    [ExtensionAttribute]
public static void MissingViewDefinitionRightsWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics);
}
public interface Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.ISqlServerSingletonOptions {
    public int CompatibilityLevel { get; }
    public Nullable`1<int> CompatibilityLevelWithoutDefault { get; }
    public abstract virtual int get_CompatibilityLevel();
    public abstract virtual Nullable`1<int> get_CompatibilityLevelWithoutDefault();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerModelValidator : RelationalModelValidator {
    public SqlServerModelValidator(ModelValidatorDependencies dependencies, RelationalModelValidatorDependencies relationalDependencies);
    public virtual void Validate(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateDecimalColumns(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateByteIdentityMapping(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateValueGeneration(IEntityType entityType, IKey key, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateIndexIncludeProperties(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateTemporalTables(IModel model, IDiagnosticsLogger`1<Validation> logger);
    private static void ValidateTemporalPeriodProperty(IEntityType temporalEntityType, bool periodStart);
    protected virtual void ValidateSharedTableCompatibility(IReadOnlyList`1<IEntityType> mappedTypes, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateSharedColumnsCompatibility(IReadOnlyList`1<IEntityType> mappedTypes, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateCompatible(IProperty property, IProperty duplicateProperty, string columnName, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateCompatible(IKey key, IKey duplicateKey, string keyName, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateCompatible(IIndex index, IIndex duplicateIndex, string indexName, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IDiagnosticsLogger`1<Validation> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension : RelationalOptionsExtension {
    private DbContextOptionsExtensionInfo _info;
    private Nullable`1<int> _compatibilityLevel;
    private Nullable`1<bool> _azureSql;
    public static int DefaultCompatibilityLevel;
    public DbContextOptionsExtensionInfo Info { get; }
    public int CompatibilityLevel { get; }
    public Nullable`1<int> CompatibilityLevelWithoutDefault { get; }
    public bool IsAzureSql { get; }
    protected SqlServerOptionsExtension(SqlServerOptionsExtension copyFrom);
    private static SqlServerOptionsExtension();
    public virtual DbContextOptionsExtensionInfo get_Info();
    protected virtual RelationalOptionsExtension Clone();
    public virtual int get_CompatibilityLevel();
    public virtual Nullable`1<int> get_CompatibilityLevelWithoutDefault();
    public virtual SqlServerOptionsExtension WithCompatibilityLevel(Nullable`1<int> compatibilityLevel);
    public virtual bool get_IsAzureSql();
    public virtual SqlServerOptionsExtension WithAzureSql(bool enable);
    public virtual IDbContextOptionsExtension ApplyDefaults(IDbContextOptions options);
    public virtual void ApplyServices(IServiceCollection services);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerSingletonOptions : object {
    [CompilerGeneratedAttribute]
private int <CompatibilityLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CompatibilityLevelWithoutDefault>k__BackingField;
    public int CompatibilityLevel { get; private set; }
    public Nullable`1<int> CompatibilityLevelWithoutDefault { get; private set; }
    [CompilerGeneratedAttribute]
public virtual int get_CompatibilityLevel();
    [CompilerGeneratedAttribute]
private void set_CompatibilityLevel(int value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_CompatibilityLevelWithoutDefault();
    [CompilerGeneratedAttribute]
private void set_CompatibilityLevelWithoutDefault(Nullable`1<int> value);
    [NullableContextAttribute("1")]
public virtual void Initialize(IDbContextOptions options);
    [NullableContextAttribute("1")]
public virtual void Validate(IDbContextOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources : object {
    private static ResourceManager _resourceManager;
    private static SqlServerResources();
    public static EventDefinition`2<string, string> LogByteIdentityColumn(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogColumnWithoutType(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, string, string> LogConflictingValueGenerationStrategies(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogDecimalTypeKey(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogDefaultDecimalTypeColumn(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogDuplicateForeignKeyConstraintIgnored(IDiagnosticsLogger logger);
    public static FallbackEventDefinition LogFoundColumn(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogFoundDefaultSchema(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, string, string> LogFoundForeignKey(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, bool> LogFoundIndex(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogFoundPrimaryKey(IDiagnosticsLogger logger);
    public static FallbackEventDefinition LogFoundSequence(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogFoundTable(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogFoundTypeAlias(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogFoundUniqueConstraint(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogMissingSchema(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogMissingTable(IDiagnosticsLogger logger);
    public static EventDefinition LogMissingViewDefinitionRights(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, string, string> LogPrincipalColumnNotFound(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogPrincipalTableInformationNotFound(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogPrincipalTableNotInSelectionSet(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogReflexiveConstraintIgnored(IDiagnosticsLogger logger);
    public static EventDefinition LogSavepointsDisabledBecauseOfMARS(IDiagnosticsLogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings : object {
    private static ResourceManager _resourceManager;
    public static string AlterIdentityColumn { get; }
    public static string AlterMemoryOptimizedTable { get; }
    public static string IndexTableRequired { get; }
    public static string InvalidColumnNameForFreeText { get; }
    public static string NoInitialCatalog { get; }
    public static string NoSavepointRelease { get; }
    public static string QueryingOrderedBinaryJsonCollectionsNotSupported { get; }
    public static string SaveChangesFailedBecauseOfComputedColumnWithFunction { get; }
    public static string SaveChangesFailedBecauseOfTriggers { get; }
    public static string SplitQueryOffsetWithoutOrderBy { get; }
    public static string TransientExceptionDetected { get; }
    private static SqlServerStrings();
    public static string get_AlterIdentityColumn();
    public static string get_AlterMemoryOptimizedTable();
    public static string CannotProduceUnterminatedSQLWithComments(object operation);
    public static string CompatibilityLevelTooLowForScalarCollections(object compatibilityLevel);
    [NullableContextAttribute("2")]
public static string DuplicateColumnIdentityIncrementMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table);
    [NullableContextAttribute("2")]
public static string DuplicateColumnIdentitySeedMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table);
    [NullableContextAttribute("2")]
public static string DuplicateColumnNameValueGenerationStrategyMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table);
    [NullableContextAttribute("2")]
public static string DuplicateColumnSequenceMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table);
    [NullableContextAttribute("2")]
public static string DuplicateColumnSparsenessMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table);
    [NullableContextAttribute("2")]
public static string DuplicateIndexClusteredMismatch(object index1, object entityType1, object index2, object entityType2, object table, object indexName);
    [NullableContextAttribute("2")]
public static string DuplicateIndexDataCompressionMismatch(object index1, object entityType1, object index2, object entityType2, object table, object indexName);
    [NullableContextAttribute("2")]
public static string DuplicateIndexFillFactorMismatch(object index1, object entityType1, object index2, object entityType2, object table, object indexName);
    [NullableContextAttribute("2")]
public static string DuplicateIndexIncludedMismatch(object index1, object entityType1, object index2, object entityType2, object table, object indexName, object includedColumns1, object includedColumns2);
    [NullableContextAttribute("2")]
public static string DuplicateIndexOnlineMismatch(object index1, object entityType1, object index2, object entityType2, object table, object indexName);
    [NullableContextAttribute("2")]
public static string DuplicateIndexSortInTempDbMismatch(object index1, object entityType1, object index2, object entityType2, object table, object indexName);
    [NullableContextAttribute("2")]
public static string DuplicateKeyMismatchedClustering(object key1, object entityType1, object key2, object entityType2, object table, object keyName);
    [NullableContextAttribute("2")]
public static string IdentityBadType(object property, object entityType, object propertyType);
    [NullableContextAttribute("2")]
public static string IncludePropertyDuplicated(object entityType, object property, object index);
    [NullableContextAttribute("2")]
public static string IncludePropertyInIndex(object entityType, object property, object index);
    [NullableContextAttribute("2")]
public static string IncludePropertyNotFound(object property, object index, object entityType);
    [NullableContextAttribute("2")]
public static string IncompatibleSqlOutputClauseMismatch(object table, object entityType, object otherEntityType, object entityTypeWithSqlOutputClause, object entityTypeWithoutSqlOutputClause);
    [NullableContextAttribute("2")]
public static string IncompatibleTableMemoryOptimizedMismatch(object table, object entityType, object otherEntityType, object memoryOptimizedEntityType, object nonMemoryOptimizedEntityType);
    public static string get_IndexTableRequired();
    public static string get_InvalidColumnNameForFreeText();
    public static string InvalidTableToIncludeInScaffolding(object table);
    public static string JsonValuePathExpressionsNotSupported(object compatibilityLevel);
    [NullableContextAttribute("2")]
public static string MultipleIdentityColumns(object properties, object table);
    public static string get_NoInitialCatalog();
    public static string get_NoSavepointRelease();
    public static string get_QueryingOrderedBinaryJsonCollectionsNotSupported();
    public static string get_SaveChangesFailedBecauseOfComputedColumnWithFunction();
    public static string get_SaveChangesFailedBecauseOfTriggers();
    [NullableContextAttribute("2")]
public static string SequenceBadType(object property, object entityType, object propertyType);
    public static string get_SplitQueryOffsetWithoutOrderBy();
    public static string TemporalAllEntitiesMappedToSameTableMustBeTemporal(object entityType);
    [NullableContextAttribute("2")]
public static string TemporalExpectedPeriodPropertyNotFound(object entityType, object propertyName);
    public static string TemporalMustDefinePeriodProperties(object entityType);
    public static string TemporalNavigationExpansionBetweenTemporalAndNonTemporal(object entityType);
    public static string TemporalNavigationExpansionOnlySupportedForAsOf(object operationName);
    [NullableContextAttribute("2")]
public static string TemporalNotSupportedForTableSplittingWithInconsistentPeriodMapping(object periodType, object entityType, object periodProperty, object periodColumn, object expectedColumnName);
    public static string TemporalOnlyOnRoot(object entityType);
    public static string TemporalOnlySupportedForTPH(object entityType);
    [NullableContextAttribute("2")]
public static string TemporalPeriodPropertyCantHaveDefaultValue(object entityType, object propertyName);
    [NullableContextAttribute("2")]
public static string TemporalPeriodPropertyMustBeInShadowState(object entityType, object propertyName);
    [NullableContextAttribute("2")]
public static string TemporalPeriodPropertyMustBeMappedToDatetime2(object entityType, object propertyName, object columnType);
    [NullableContextAttribute("2")]
public static string TemporalPeriodPropertyMustBeNonNullableDateTime(object entityType, object propertyName, object dateTimeType);
    [NullableContextAttribute("2")]
public static string TemporalPropertyMappedToPeriodColumnMustBeValueGeneratedOnAddOrUpdate(object entityType, object propertyName, object valueGeneratedValue);
    public static string TemporalSetOperationOnMismatchedSources(object entityType);
    public static string get_TransientExceptionDetected();
    private static string GetString(string name, String[] formatterNames);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames : object {
    public static string Prefix;
    public static string Clustered;
    public static string CreatedOnline;
    public static string EditionOptions;
    public static string FillFactor;
    public static string SortInTempDb;
    public static string DataCompression;
    public static string HiLoSequenceName;
    public static string HiLoSequenceSchema;
    public static string SequenceNameSuffix;
    public static string SequenceName;
    public static string SequenceSchema;
    public static string Identity;
    public static string IdentityIncrement;
    public static string IdentitySeed;
    public static string Include;
    public static string MaxDatabaseSize;
    public static string MemoryOptimized;
    public static string PerformanceLevelSql;
    public static string ServiceTierSql;
    public static string Sparse;
    public static string IsTemporal;
    public static string TemporalHistoryTableName;
    public static string TemporalHistoryTableSchema;
    public static string TemporalPeriodStartPropertyName;
    public static string TemporalPeriodStartColumnName;
    public static string TemporalPeriodEndPropertyName;
    public static string TemporalPeriodEndColumnName;
    public static string TemporalOperationType;
    public static string TemporalAsOfPointInTime;
    public static string TemporalRangeOperationFrom;
    public static string TemporalRangeOperationTo;
    public static string ValueGenerationStrategy;
    public static string UseSqlOutputClause;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationProvider : RelationalAnnotationProvider {
    public SqlServerAnnotationProvider(RelationalAnnotationProviderDependencies dependencies);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationProvider/<For>d__1")]
public virtual IEnumerable`1<IAnnotation> For(IRelationalModel model, bool designTime);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationProvider/<For>d__2")]
public virtual IEnumerable`1<IAnnotation> For(ITable table, bool designTime);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationProvider/<For>d__3")]
public virtual IEnumerable`1<IAnnotation> For(IUniqueConstraint constraint, bool designTime);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationProvider/<For>d__4")]
public virtual IEnumerable`1<IAnnotation> For(ITableIndex index, bool designTime);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationProvider/<For>d__5")]
public virtual IEnumerable`1<IAnnotation> For(IColumn column, bool designTime);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerHistoryRepository : HistoryRepository {
    protected string ExistsSql { get; }
    public SqlServerHistoryRepository(HistoryRepositoryDependencies dependencies);
    protected virtual string get_ExistsSql();
    [NullableContextAttribute("2")]
protected virtual bool InterpretExistsResult(object value);
    public virtual string GetCreateIfNotExistsScript();
    public virtual string GetBeginIfNotExistsScript(string migrationId);
    public virtual string GetBeginIfExistsScript(string migrationId);
    public virtual string GetEndIfScript();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerMigrationsAnnotationProvider : MigrationsAnnotationProvider {
    public SqlServerMigrationsAnnotationProvider(MigrationsAnnotationProviderDependencies dependencies);
    public virtual IEnumerable`1<IAnnotation> ForRemove(IRelationalModel model);
    public virtual IEnumerable`1<IAnnotation> ForRemove(ITable table);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerMigrationsAnnotationProvider/<ForRemove>d__3")]
public virtual IEnumerable`1<IAnnotation> ForRemove(IUniqueConstraint constraint);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerMigrationsAnnotationProvider/<ForRemove>d__4")]
public virtual IEnumerable`1<IAnnotation> ForRemove(IColumn column);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerMigrationsAnnotationProvider/<ForRename>d__5")]
public virtual IEnumerable`1<IAnnotation> ForRename(ITable table);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerMigrationsAnnotationProvider/<ForRename>d__6")]
public virtual IEnumerable`1<IAnnotation> ForRename(IColumn column);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor : SqlExpressionVisitor {
    private bool _isSearchCondition;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public SearchConditionConvertingExpressionVisitor(ISqlExpressionFactory sqlExpressionFactory);
    private SqlExpression ApplyConversion(SqlExpression sqlExpression, bool condition);
    private SqlExpression ConvertToSearchCondition(SqlExpression sqlExpression, bool condition);
    private SqlExpression ConvertToValue(SqlExpression sqlExpression, bool condition);
    private SqlExpression BuildCompareToExpression(SqlExpression sqlExpression);
    private SqlExpression SimplifyNegatedBinary(SqlExpression sqlExpression);
    protected virtual Expression VisitCase(CaseExpression caseExpression);
    protected virtual Expression VisitCollate(CollateExpression collateExpression);
    protected virtual Expression VisitColumn(ColumnExpression columnExpression);
    protected virtual Expression VisitDelete(DeleteExpression deleteExpression);
    protected virtual Expression VisitDistinct(DistinctExpression distinctExpression);
    protected virtual Expression VisitExists(ExistsExpression existsExpression);
    protected virtual Expression VisitFromSql(FromSqlExpression fromSqlExpression);
    protected virtual Expression VisitIn(InExpression inExpression);
    protected virtual Expression VisitLike(LikeExpression likeExpression);
    protected virtual Expression VisitSelect(SelectExpression selectExpression);
    protected virtual Expression VisitAtTimeZone(AtTimeZoneExpression atTimeZoneExpression);
    protected virtual Expression VisitSqlBinary(SqlBinaryExpression sqlBinaryExpression);
    protected virtual Expression VisitSqlUnary(SqlUnaryExpression sqlUnaryExpression);
    protected virtual Expression VisitSqlConstant(SqlConstantExpression sqlConstantExpression);
    protected virtual Expression VisitSqlFragment(SqlFragmentExpression sqlFragmentExpression);
    protected virtual Expression VisitSqlFunction(SqlFunctionExpression sqlFunctionExpression);
    protected virtual Expression VisitTableValuedFunction(TableValuedFunctionExpression tableValuedFunctionExpression);
    protected virtual Expression VisitSqlParameter(SqlParameterExpression sqlParameterExpression);
    protected virtual Expression VisitTable(TableExpression tableExpression);
    protected virtual Expression VisitProjection(ProjectionExpression projectionExpression);
    protected virtual Expression VisitOrdering(OrderingExpression orderingExpression);
    protected virtual Expression VisitCrossJoin(CrossJoinExpression crossJoinExpression);
    protected virtual Expression VisitCrossApply(CrossApplyExpression crossApplyExpression);
    protected virtual Expression VisitOuterApply(OuterApplyExpression outerApplyExpression);
    protected virtual Expression VisitInnerJoin(InnerJoinExpression innerJoinExpression);
    protected virtual Expression VisitLeftJoin(LeftJoinExpression leftJoinExpression);
    protected virtual Expression VisitScalarSubquery(ScalarSubqueryExpression scalarSubqueryExpression);
    protected virtual Expression VisitRowNumber(RowNumberExpression rowNumberExpression);
    protected virtual Expression VisitRowValue(RowValueExpression rowValueExpression);
    protected virtual Expression VisitExcept(ExceptExpression exceptExpression);
    protected virtual Expression VisitIntersect(IntersectExpression intersectExpression);
    protected virtual Expression VisitUnion(UnionExpression unionExpression);
    protected virtual Expression VisitUpdate(UpdateExpression updateExpression);
    protected virtual Expression VisitJsonScalar(JsonScalarExpression jsonScalarExpression);
    protected virtual Expression VisitValues(ValuesExpression valuesExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SkipTakeCollapsingExpressionVisitor : ExpressionVisitor {
    private ISqlExpressionFactory _sqlExpressionFactory;
    private IReadOnlyDictionary`2<string, object> _parameterValues;
    private bool _canCache;
    public SkipTakeCollapsingExpressionVisitor(ISqlExpressionFactory sqlExpressionFactory);
    public virtual Expression Process(Expression queryExpression, IReadOnlyDictionary`2<string, object> parametersValues, Boolean& canCache);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    [CompilerGeneratedAttribute]
private bool <VisitExtension>g__IsZero|5_0(SqlExpression sqlExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateFunctionExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<SqlExpression> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<OrderingExpression> <Orderings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<bool> <ArgumentsPropagateNullability>k__BackingField;
    public string Name { get; }
    public IReadOnlyList`1<SqlExpression> Arguments { get; }
    public IReadOnlyList`1<OrderingExpression> Orderings { get; }
    public bool IsNullable { get; }
    public IReadOnlyList`1<bool> ArgumentsPropagateNullability { get; }
    public SqlServerAggregateFunctionExpression(string name, IReadOnlyList`1<SqlExpression> arguments, IReadOnlyList`1<OrderingExpression> orderings, bool nullable, IEnumerable`1<bool> argumentsPropagateNullability, Type type, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<SqlExpression> get_Arguments();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<OrderingExpression> get_Orderings();
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<bool> get_ArgumentsPropagateNullability();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual SqlServerAggregateFunctionExpression ApplyTypeMapping(RelationalTypeMapping typeMapping);
    public virtual SqlServerAggregateFunctionExpression Update(IReadOnlyList`1<SqlExpression> arguments, IReadOnlyList`1<OrderingExpression> orderings);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(SqlServerAggregateFunctionExpression other);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateMethodCallTranslatorProvider : RelationalAggregateMethodCallTranslatorProvider {
    [NullableContextAttribute("1")]
public SqlServerAggregateMethodCallTranslatorProvider(RelationalAggregateMethodCallTranslatorProviderDependencies dependencies);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerByteArrayMethodTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public SqlServerByteArrayMethodTranslator(ISqlExpressionFactory sqlExpressionFactory);
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerCompiledQueryCacheKeyGenerator : RelationalCompiledQueryCacheKeyGenerator {
    private ISqlServerConnection _sqlServerConnection;
    public SqlServerCompiledQueryCacheKeyGenerator(CompiledQueryCacheKeyGeneratorDependencies dependencies, RelationalCompiledQueryCacheKeyGeneratorDependencies relationalDependencies, ISqlServerConnection sqlServerConnection);
    public virtual object GenerateCacheKey(Expression query, bool async);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerConvertTranslator : object {
    private static Dictionary`2<string, string> TypeMapping;
    private static List`1<Type> SupportedTypes;
    private static MethodInfo[] SupportedMethods;
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public SqlServerConvertTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static SqlServerConvertTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDataLengthFunctionTranslator : object {
    private static List`1<string> LongReturningTypes;
    private static HashSet`1<MethodInfo> MethodInfoDataLengthMapping;
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public SqlServerDataLengthFunctionTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static SqlServerDataLengthFunctionTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDateDiffFunctionsTranslator : object {
    private Dictionary`2<MethodInfo, string> _methodInfoDateDiffMapping;
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public SqlServerDateDiffFunctionsTranslator(ISqlExpressionFactory sqlExpressionFactory);
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDateOnlyMemberTranslator : object {
    private static Dictionary`2<string, string> DatePartMapping;
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public SqlServerDateOnlyMemberTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static SqlServerDateOnlyMemberTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDateOnlyMethodTranslator : object {
    private Dictionary`2<MethodInfo, string> _methodInfoDatePartMapping;
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public SqlServerDateOnlyMethodTranslator(ISqlExpressionFactory sqlExpressionFactory);
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDateTimeMemberTranslator : object {
    private static Dictionary`2<string, string> DatePartMapping;
    private ISqlExpressionFactory _sqlExpressionFactory;
    private IRelationalTypeMappingSource _typeMappingSource;
    [NullableContextAttribute("1")]
public SqlServerDateTimeMemberTranslator(ISqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource);
    private static SqlServerDateTimeMemberTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDateTimeMethodTranslator : object {
    private Dictionary`2<MethodInfo, string> _methodInfoDatePartMapping;
    private static Dictionary`2<MethodInfo, string> _methodInfoDateDiffMapping;
    private static MethodInfo AtTimeZoneDateTimeOffsetMethodInfo;
    private static MethodInfo AtTimeZoneDateTimeMethodInfo;
    private ISqlExpressionFactory _sqlExpressionFactory;
    private IRelationalTypeMappingSource _typeMappingSource;
    [NullableContextAttribute("1")]
public SqlServerDateTimeMethodTranslator(ISqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource);
    private static SqlServerDateTimeMethodTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerEvaluatableExpressionFilter : RelationalEvaluatableExpressionFilter {
    public SqlServerEvaluatableExpressionFilter(EvaluatableExpressionFilterDependencies dependencies, RelationalEvaluatableExpressionFilterDependencies relationalDependencies);
    public virtual bool IsEvaluatableExpression(Expression expression, IModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerExpression : object {
    public static SqlFunctionExpression AggregateFunction(ISqlExpressionFactory sqlExpressionFactory, string name, IEnumerable`1<SqlExpression> arguments, EnumerableExpression enumerableExpression, int enumerableArgumentIndex, bool nullable, IEnumerable`1<bool> argumentsPropagateNullability, Type returnType, RelationalTypeMapping typeMapping);
    public static SqlExpression AggregateFunctionWithOrdering(ISqlExpressionFactory sqlExpressionFactory, string name, IEnumerable`1<SqlExpression> arguments, EnumerableExpression enumerableExpression, int enumerableArgumentIndex, bool nullable, IEnumerable`1<bool> argumentsPropagateNullability, Type returnType, RelationalTypeMapping typeMapping);
    private static IReadOnlyList`1<SqlExpression> ProcessAggregateFunctionArguments(ISqlExpressionFactory sqlExpressionFactory, IEnumerable`1<SqlExpression> arguments, EnumerableExpression enumerableExpression, int enumerableArgumentIndex);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerFromPartsFunctionTranslator : object {
    private static MethodInfo DateFromPartsMethodInfo;
    private static MethodInfo DateTimeFromPartsMethodInfo;
    private static MethodInfo DateTime2FromPartsMethodInfo;
    private static MethodInfo DateTimeOffsetFromPartsMethodInfo;
    private static MethodInfo SmallDateTimeFromPartsMethodInfo;
    private static MethodInfo TimeFromPartsMethodInfo;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static IDictionary`2<MethodInfo, ValueTuple`2<string, string>> MethodFunctionMapping;
    private ISqlExpressionFactory _sqlExpressionFactory;
    private IRelationalTypeMappingSource _typeMappingSource;
    [NullableContextAttribute("1")]
public SqlServerFromPartsFunctionTranslator(ISqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource);
    private static SqlServerFromPartsFunctionTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerFullTextSearchFunctionsTranslator : object {
    private static string FreeTextFunctionName;
    private static string ContainsFunctionName;
    private static MethodInfo FreeTextMethodInfo;
    private static MethodInfo FreeTextMethodInfoWithLanguage;
    private static MethodInfo ContainsMethodInfo;
    private static MethodInfo ContainsMethodInfoWithLanguage;
    private static IDictionary`2<MethodInfo, string> FunctionMapping;
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public SqlServerFullTextSearchFunctionsTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static SqlServerFullTextSearchFunctionsTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerIsDateFunctionTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    private static MethodInfo MethodInfo;
    [NullableContextAttribute("1")]
public SqlServerIsDateFunctionTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static SqlServerIsDateFunctionTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerIsNumericFunctionTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    private static MethodInfo MethodInfo;
    [NullableContextAttribute("1")]
public SqlServerIsNumericFunctionTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static SqlServerIsNumericFunctionTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerJsonPostprocessor : ExpressionVisitor {
    private IRelationalTypeMappingSource _typeMappingSource;
    private ISqlExpressionFactory _sqlExpressionFactory;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<ValueTuple`2<SqlServerOpenJsonExpression, string>, ValueTuple`2<SelectExpression, ColumnInfo>> _columnsToRewrite;
    private RelationalTypeMapping _nvarcharMaxTypeMapping;
    public SqlServerJsonPostprocessor(IRelationalTypeMappingSource typeMappingSource, ISqlExpressionFactory sqlExpressionFactory);
    public virtual Expression Process(Expression expression);
    [NullableContextAttribute("2")]
public virtual Expression Visit(Expression expression);
    [CompilerGeneratedAttribute]
internal static bool <Visit>g__IsKeyColumn|6_0(SqlExpression sqlExpression, TableExpressionBase table);
    [CompilerGeneratedAttribute]
private SqlExpression <Visit>g__RewriteOpenJsonColumn|6_1(ColumnExpression columnExpression, SelectExpression selectExpression, ColumnInfo columnInfo);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerLongCountMethodTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public SqlServerLongCountMethodTranslator(ISqlExpressionFactory sqlExpressionFactory);
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(MethodInfo method, EnumerableExpression source, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerMathTranslator : object {
    private static Dictionary`2<MethodInfo, string> SupportedMethodTranslations;
    private static IEnumerable`1<MethodInfo> TruncateMethodInfos;
    private static IEnumerable`1<MethodInfo> RoundMethodInfos;
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public SqlServerMathTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static SqlServerMathTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerMemberTranslatorProvider : RelationalMemberTranslatorProvider {
    [NullableContextAttribute("1")]
public SqlServerMemberTranslatorProvider(RelationalMemberTranslatorProviderDependencies dependencies, IRelationalTypeMappingSource typeMappingSource);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerMethodCallTranslatorProvider : RelationalMethodCallTranslatorProvider {
    [NullableContextAttribute("1")]
public SqlServerMethodCallTranslatorProvider(RelationalMethodCallTranslatorProviderDependencies dependencies);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerNavigationExpansionExtensibilityHelper : NavigationExpansionExtensibilityHelper {
    public SqlServerNavigationExpansionExtensibilityHelper(NavigationExpansionExtensibilityHelperDependencies dependencies);
    public virtual EntityQueryRootExpression CreateQueryRoot(IEntityType entityType, EntityQueryRootExpression source);
    public virtual void ValidateQueryRootCreation(IEntityType entityType, EntityQueryRootExpression source);
    private bool OwnedEntityMappedToSameTableAsOwner(IEntityType entityType);
    [NullableContextAttribute("2")]
public virtual bool AreQueryRootsCompatible(EntityQueryRootExpression first, EntityQueryRootExpression second);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerNewGuidTranslator : object {
    private static MethodInfo MethodInfo;
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public SqlServerNewGuidTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static SqlServerNewGuidTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerObjectToStringTranslator : object {
    private static int DefaultLength;
    private static Dictionary`2<Type, string> TypeMapping;
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public SqlServerObjectToStringTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static SqlServerObjectToStringTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerOpenJsonExpression : TableValuedFunctionExpression {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PathSegment> <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ColumnInfo> <ColumnInfos>k__BackingField;
    public SqlExpression JsonExpression { get; }
    [NullableAttribute("2")]
public IReadOnlyList`1<PathSegment> Path { get; }
    [NullableAttribute("2")]
public IReadOnlyList`1<ColumnInfo> ColumnInfos { get; }
    public SqlServerOpenJsonExpression(string alias, SqlExpression jsonExpression, IReadOnlyList`1<PathSegment> path, IReadOnlyList`1<ColumnInfo> columnInfos);
    public virtual SqlExpression get_JsonExpression();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<PathSegment> get_Path();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<ColumnInfo> get_ColumnInfos();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual SqlServerOpenJsonExpression Update(SqlExpression jsonExpression, IReadOnlyList`1<PathSegment> path, IReadOnlyList`1<ColumnInfo> columnInfos);
    public virtual TableExpressionBase Clone();
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(SqlServerOpenJsonExpression other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerParameterBasedSqlProcessor : RelationalParameterBasedSqlProcessor {
    public SqlServerParameterBasedSqlProcessor(RelationalParameterBasedSqlProcessorDependencies dependencies, bool useRelationalNulls);
    public virtual Expression Optimize(Expression queryExpression, IReadOnlyDictionary`2<string, object> parametersValues, Boolean& canCache);
    protected virtual Expression ProcessSqlNullability(Expression selectExpression, IReadOnlyDictionary`2<string, object> parametersValues, Boolean& canCache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerParameterBasedSqlProcessorFactory : object {
    [CompilerGeneratedAttribute]
private RelationalParameterBasedSqlProcessorDependencies <Dependencies>k__BackingField;
    protected RelationalParameterBasedSqlProcessorDependencies Dependencies { get; }
    public SqlServerParameterBasedSqlProcessorFactory(RelationalParameterBasedSqlProcessorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalParameterBasedSqlProcessorDependencies get_Dependencies();
    public virtual RelationalParameterBasedSqlProcessor Create(bool useRelationalNulls);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor : RelationalQueryableMethodTranslatingExpressionVisitor {
    private SqlServerQueryCompilationContext _queryCompilationContext;
    private IRelationalTypeMappingSource _typeMappingSource;
    private ISqlExpressionFactory _sqlExpressionFactory;
    private int _sqlServerCompatibilityLevel;
    private RelationalTypeMapping _nvarcharMaxTypeMapping;
    private static bool UseOldBehavior32374;
    public SqlServerQueryableMethodTranslatingExpressionVisitor(QueryableMethodTranslatingExpressionVisitorDependencies dependencies, RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies, SqlServerQueryCompilationContext queryCompilationContext, ISqlServerSingletonOptions sqlServerSingletonOptions);
    protected SqlServerQueryableMethodTranslatingExpressionVisitor(SqlServerQueryableMethodTranslatingExpressionVisitor parentVisitor);
    private static SqlServerQueryableMethodTranslatingExpressionVisitor();
    protected virtual QueryableMethodTranslatingExpressionVisitor CreateSubqueryVisitor();
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected virtual ShapedQueryExpression TranslateAverage(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    protected virtual ShapedQueryExpression TranslateSum(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    [NullableContextAttribute("2")]
protected virtual ShapedQueryExpression TranslateCount(ShapedQueryExpression source, LambdaExpression predicate);
    [NullableContextAttribute("2")]
protected virtual ShapedQueryExpression TranslateLongCount(ShapedQueryExpression source, LambdaExpression predicate);
    protected virtual ShapedQueryExpression TranslateMax(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    protected virtual ShapedQueryExpression TranslateMin(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    protected virtual ShapedQueryExpression TranslatePrimitiveCollection(SqlExpression sqlExpression, IProperty property, string tableAlias);
    protected virtual ShapedQueryExpression TransformJsonQueryToTable(JsonQueryExpression jsonQueryExpression);
    protected virtual ShapedQueryExpression TranslateContains(ShapedQueryExpression source, Expression item);
    protected virtual ShapedQueryExpression TranslateElementAtOrDefault(ShapedQueryExpression source, Expression index, bool returnDefault);
    protected virtual bool IsNaturallyOrdered(SelectExpression selectExpression);
    protected virtual bool IsValidSelectExpressionForExecuteDelete(SelectExpression selectExpression, StructuralTypeShaperExpression shaper, TableExpression& tableExpression);
    protected virtual bool IsValidSelectExpressionForExecuteUpdate(SelectExpression selectExpression, TableExpressionBase table, TableExpression& tableExpression);
    private bool TryGetProjection(ShapedQueryExpression shapedQueryExpression, SqlExpression& projection);
    protected virtual Expression ApplyInferredTypeMappings(Expression expression, IReadOnlyDictionary`2<ValueTuple`2<TableExpressionBase, string>, RelationalTypeMapping> inferredTypeMappings);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<IProperty> <TransformJsonQueryToTable>g__GetAllPropertiesInHierarchy|17_1(IEntityType entityType);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<INavigation> <TransformJsonQueryToTable>g__GetAllNavigationsInHierarchy|17_2(IEntityType entityType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitorFactory : object {
    private ISqlServerSingletonOptions _sqlServerSingletonOptions;
    [CompilerGeneratedAttribute]
private QueryableMethodTranslatingExpressionVisitorDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalQueryableMethodTranslatingExpressionVisitorDependencies <RelationalDependencies>k__BackingField;
    protected QueryableMethodTranslatingExpressionVisitorDependencies Dependencies { get; }
    protected RelationalQueryableMethodTranslatingExpressionVisitorDependencies RelationalDependencies { get; }
    public SqlServerQueryableMethodTranslatingExpressionVisitorFactory(QueryableMethodTranslatingExpressionVisitorDependencies dependencies, RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies, ISqlServerSingletonOptions sqlServerSingletonOptions);
    [CompilerGeneratedAttribute]
protected virtual QueryableMethodTranslatingExpressionVisitorDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalQueryableMethodTranslatingExpressionVisitorDependencies get_RelationalDependencies();
    public virtual QueryableMethodTranslatingExpressionVisitor Create(QueryCompilationContext queryCompilationContext);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryCompilationContext : RelationalQueryCompilationContext {
    private bool _multipleActiveResultSetsEnabled;
    [CompilerGeneratedAttribute]
private bool <InAggregateFunction>k__BackingField;
    public bool IsBuffering { get; }
    public bool InAggregateFunction { get; public set; }
    [NullableContextAttribute("1")]
public SqlServerQueryCompilationContext(QueryCompilationContextDependencies dependencies, RelationalQueryCompilationContextDependencies relationalDependencies, bool async, bool multipleActiveResultSetsEnabled);
    public virtual bool get_IsBuffering();
    [CompilerGeneratedAttribute]
public virtual bool get_InAggregateFunction();
    [CompilerGeneratedAttribute]
public virtual void set_InAggregateFunction(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryCompilationContextFactory : object {
    private ISqlServerConnection _sqlServerConnection;
    [CompilerGeneratedAttribute]
private QueryCompilationContextDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalQueryCompilationContextDependencies <RelationalDependencies>k__BackingField;
    protected QueryCompilationContextDependencies Dependencies { get; }
    protected RelationalQueryCompilationContextDependencies RelationalDependencies { get; }
    public SqlServerQueryCompilationContextFactory(QueryCompilationContextDependencies dependencies, RelationalQueryCompilationContextDependencies relationalDependencies, ISqlServerConnection sqlServerConnection);
    [CompilerGeneratedAttribute]
protected virtual QueryCompilationContextDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalQueryCompilationContextDependencies get_RelationalDependencies();
    public virtual QueryCompilationContext Create(bool async);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGenerator : QuerySqlGenerator {
    private IRelationalTypeMappingSource _typeMappingSource;
    private ISqlGenerationHelper _sqlGenerationHelper;
    private int _sqlServerCompatibilityLevel;
    private static bool UseOldBehavior32375;
    public SqlServerQuerySqlGenerator(QuerySqlGeneratorDependencies dependencies, IRelationalTypeMappingSource typeMappingSource, ISqlServerSingletonOptions sqlServerSingletonOptions);
    private static SqlServerQuerySqlGenerator();
    protected virtual bool TryGenerateWithoutWrappingSelect(SelectExpression selectExpression);
    protected virtual Expression VisitDelete(DeleteExpression deleteExpression);
    protected virtual void GenerateEmptyProjection(SelectExpression selectExpression);
    protected virtual Expression VisitUpdate(UpdateExpression updateExpression);
    protected virtual Expression VisitValues(ValuesExpression valuesExpression);
    protected virtual void GenerateValues(ValuesExpression valuesExpression);
    protected virtual void GenerateTop(SelectExpression selectExpression);
    protected virtual void GenerateOrderings(SelectExpression selectExpression);
    protected virtual void GenerateLimitOffset(SelectExpression selectExpression);
    protected virtual Expression VisitSqlServerAggregateFunction(SqlServerAggregateFunctionExpression aggregateFunctionExpression);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected virtual Expression VisitJsonScalar(JsonScalarExpression jsonScalarExpression);
    private void GenerateJsonPath(IReadOnlyList`1<PathSegment> path);
    protected virtual Expression VisitOpenJsonExpression(SqlServerOpenJsonExpression openJsonExpression);
    [NullableContextAttribute("0")]
protected virtual void CheckComposableSqlTrimmed(ReadOnlySpan`1<char> sql);
    protected virtual bool TryGetOperatorInfo(SqlExpression expression, Int32& precedence, Boolean& isAssociative);
    private void GenerateList(IReadOnlyList`1<T> items, Action`1<T> generationAction, Action`1<IRelationalCommandBuilder> joinAction);
    [CompilerGeneratedAttribute]
private void <VisitDelete>b__6_0(TableExpressionBase e);
    [CompilerGeneratedAttribute]
private void <VisitUpdate>b__8_0(TableExpressionBase e);
    [CompilerGeneratedAttribute]
private void <VisitSqlServerAggregateFunction>b__14_0(SqlExpression e);
    [CompilerGeneratedAttribute]
private void <VisitSqlServerAggregateFunction>b__14_1(OrderingExpression e);
    [CompilerGeneratedAttribute]
private void <VisitOpenJsonExpression>g__GenerateColumnInfo|18_0(ColumnInfo columnInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGeneratorFactory : object {
    private IRelationalTypeMappingSource _typeMappingSource;
    private ISqlServerSingletonOptions _sqlServerSingletonOptions;
    [CompilerGeneratedAttribute]
private QuerySqlGeneratorDependencies <Dependencies>k__BackingField;
    protected QuerySqlGeneratorDependencies Dependencies { get; }
    public SqlServerQuerySqlGeneratorFactory(QuerySqlGeneratorDependencies dependencies, IRelationalTypeMappingSource typeMappingSource, ISqlServerSingletonOptions sqlServerSingletonOptions);
    [CompilerGeneratedAttribute]
protected virtual QuerySqlGeneratorDependencies get_Dependencies();
    public virtual QuerySqlGenerator Create();
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryStringFactory : object {
    private IRelationalTypeMappingSource _typeMapper;
    [NullableContextAttribute("1")]
public SqlServerQueryStringFactory(IRelationalTypeMappingSource typeMapper);
    [NullableContextAttribute("1")]
public virtual string Create(DbCommand command);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryTranslationPostprocessor : RelationalQueryTranslationPostprocessor {
    private SqlServerJsonPostprocessor _jsonPostprocessor;
    private SkipWithoutOrderByInSplitQueryVerifier _skipWithoutOrderByInSplitQueryVerifier;
    public SqlServerQueryTranslationPostprocessor(QueryTranslationPostprocessorDependencies dependencies, RelationalQueryTranslationPostprocessorDependencies relationalDependencies, QueryCompilationContext queryCompilationContext, IRelationalTypeMappingSource typeMappingSource);
    public virtual Expression Process(Expression query);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryTranslationPostprocessorFactory : object {
    private IRelationalTypeMappingSource _typeMappingSource;
    [CompilerGeneratedAttribute]
private QueryTranslationPostprocessorDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalQueryTranslationPostprocessorDependencies <RelationalDependencies>k__BackingField;
    protected QueryTranslationPostprocessorDependencies Dependencies { get; }
    protected RelationalQueryTranslationPostprocessorDependencies RelationalDependencies { get; }
    public SqlServerQueryTranslationPostprocessorFactory(QueryTranslationPostprocessorDependencies dependencies, RelationalQueryTranslationPostprocessorDependencies relationalDependencies, IRelationalTypeMappingSource typeMappingSource);
    [CompilerGeneratedAttribute]
protected virtual QueryTranslationPostprocessorDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalQueryTranslationPostprocessorDependencies get_RelationalDependencies();
    public virtual QueryTranslationPostprocessor Create(QueryCompilationContext queryCompilationContext);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlExpressionFactory : SqlExpressionFactory {
    private IRelationalTypeMappingSource _typeMappingSource;
    [NullableContextAttribute("1")]
public SqlServerSqlExpressionFactory(SqlExpressionFactoryDependencies dependencies);
    [NullableContextAttribute("2")]
public virtual SqlExpression ApplyTypeMapping(SqlExpression sqlExpression, RelationalTypeMapping typeMapping);
    private SqlExpression ApplyTypeMappingOnAtTimeZone(AtTimeZoneExpression atTimeZoneExpression, RelationalTypeMapping typeMapping);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlNullabilityProcessor : SqlNullabilityProcessor {
    protected bool PreferExistsToInWithCoalesce { get; }
    public SqlServerSqlNullabilityProcessor(RelationalParameterBasedSqlProcessorDependencies dependencies, bool useRelationalNulls);
    protected virtual SqlExpression VisitCustomSqlExpression(SqlExpression sqlExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitSqlServerAggregateFunction(SqlServerAggregateFunctionExpression aggregateFunctionExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual bool get_PreferExistsToInWithCoalesce();
    protected virtual bool IsCollectionTable(TableExpressionBase table, Expression& collection);
    protected virtual TableExpressionBase UpdateParameterCollection(TableExpressionBase table, SqlParameterExpression newCollectionParameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTranslatingExpressionVisitor : RelationalSqlTranslatingExpressionVisitor {
    private SqlServerQueryCompilationContext _queryCompilationContext;
    private ISqlExpressionFactory _sqlExpressionFactory;
    private static bool UseOldBehavior32432;
    private static HashSet`1<string> DateTimeDataTypes;
    private static HashSet`1<Type> DateTimeClrTypes;
    private static HashSet`1<ExpressionType> ArithmeticOperatorTypes;
    private static MethodInfo StringStartsWithMethodInfo;
    private static MethodInfo StringEndsWithMethodInfo;
    private static MethodInfo StringContainsMethodInfo;
    private static MethodInfo EscapeLikePatternParameterMethod;
    private static char LikeEscapeChar;
    private static string LikeEscapeString;
    public SqlServerSqlTranslatingExpressionVisitor(RelationalSqlTranslatingExpressionVisitorDependencies dependencies, SqlServerQueryCompilationContext queryCompilationContext, QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor);
    private static SqlServerSqlTranslatingExpressionVisitor();
    protected virtual Expression VisitBinary(BinaryExpression binaryExpression);
    protected virtual Expression VisitUnary(UnaryExpression unaryExpression);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    private static string ConstructLikePatternParameter(QueryContext queryContext, string baseParameterName, StartsEndsWithContains methodType);
    private static bool IsLikeWildChar(char c);
    private static string EscapeLikePattern(string pattern);
    protected virtual bool TryTranslateAggregateMethodCall(MethodCallExpression methodCallExpression, SqlExpression& translation);
    private Expression TranslateByteArrayElementAccess(Expression array, Expression index, Type resultType);
    private static string GetProviderType(SqlExpression expression);
    [CompilerGeneratedAttribute]
private bool <VisitMethodCall>g__TryTranslateStartsEndsWithContains|15_0(Expression instance, Expression pattern, StartsEndsWithContains methodType, SqlExpression& translation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTranslatingExpressionVisitorFactory : object {
    [CompilerGeneratedAttribute]
private RelationalSqlTranslatingExpressionVisitorDependencies <Dependencies>k__BackingField;
    protected RelationalSqlTranslatingExpressionVisitorDependencies Dependencies { get; }
    public SqlServerSqlTranslatingExpressionVisitorFactory(RelationalSqlTranslatingExpressionVisitorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalSqlTranslatingExpressionVisitorDependencies get_Dependencies();
    public virtual RelationalSqlTranslatingExpressionVisitor Create(QueryCompilationContext queryCompilationContext, QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerStatisticsAggregateMethodTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    private RelationalTypeMapping _doubleTypeMapping;
    [NullableContextAttribute("1")]
public SqlServerStatisticsAggregateMethodTranslator(ISqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource);
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(MethodInfo method, EnumerableExpression source, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerStringAggregateMethodTranslator : object {
    private static MethodInfo StringConcatMethod;
    private static MethodInfo StringJoinMethod;
    private ISqlExpressionFactory _sqlExpressionFactory;
    private IRelationalTypeMappingSource _typeMappingSource;
    [NullableContextAttribute("1")]
public SqlServerStringAggregateMethodTranslator(ISqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource);
    private static SqlServerStringAggregateMethodTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(MethodInfo method, EnumerableExpression source, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerStringMemberTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public SqlServerStringMemberTranslator(ISqlExpressionFactory sqlExpressionFactory);
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerStringMethodTranslator : object {
    private static MethodInfo IndexOfMethodInfo;
    private static MethodInfo IndexOfMethodInfoWithStartingPosition;
    private static MethodInfo ReplaceMethodInfo;
    private static MethodInfo ToLowerMethodInfo;
    private static MethodInfo ToUpperMethodInfo;
    private static MethodInfo SubstringMethodInfoWithOneArg;
    private static MethodInfo SubstringMethodInfoWithTwoArgs;
    private static MethodInfo IsNullOrEmptyMethodInfo;
    private static MethodInfo IsNullOrWhiteSpaceMethodInfo;
    private static MethodInfo TrimStartMethodInfoWithoutArgs;
    private static MethodInfo TrimEndMethodInfoWithoutArgs;
    private static MethodInfo TrimMethodInfoWithoutArgs;
    private static MethodInfo TrimStartMethodInfoWithCharArrayArg;
    private static MethodInfo TrimEndMethodInfoWithCharArrayArg;
    private static MethodInfo TrimMethodInfoWithCharArrayArg;
    private static MethodInfo FirstOrDefaultMethodInfoWithoutArgs;
    private static MethodInfo LastOrDefaultMethodInfoWithoutArgs;
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public SqlServerStringMethodTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static SqlServerStringMethodTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
    private SqlExpression TranslateIndexOf(SqlExpression instance, MethodInfo method, SqlExpression searchExpression, SqlExpression startIndex);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerTimeOnlyMemberTranslator : object {
    private static Dictionary`2<string, string> DatePartMappings;
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public SqlServerTimeOnlyMemberTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static SqlServerTimeOnlyMemberTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerTimeOnlyMethodTranslator : object {
    private static MethodInfo AddHoursMethod;
    private static MethodInfo AddMinutesMethod;
    private static MethodInfo IsBetweenMethod;
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public SqlServerTimeOnlyMethodTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static SqlServerTimeOnlyMethodTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerTimeSpanMemberTranslator : object {
    private static Dictionary`2<string, string> DatePartMappings;
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public SqlServerTimeSpanMemberTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static SqlServerTimeSpanMemberTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalAllQueryRootExpression : TemporalQueryRootExpression {
    public TemporalAllQueryRootExpression(IEntityType entityType);
    public TemporalAllQueryRootExpression(IAsyncQueryProvider queryProvider, IEntityType entityType);
    public virtual Expression DetachQueryProvider();
    public virtual EntityQueryRootExpression UpdateEntityType(IEntityType entityType);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(TemporalAllQueryRootExpression queryRootExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalAsOfQueryRootExpression : TemporalQueryRootExpression {
    [CompilerGeneratedAttribute]
private DateTime <PointInTime>k__BackingField;
    public DateTime PointInTime { get; }
    public TemporalAsOfQueryRootExpression(IEntityType entityType, DateTime pointInTime);
    public TemporalAsOfQueryRootExpression(IAsyncQueryProvider queryProvider, IEntityType entityType, DateTime pointInTime);
    [CompilerGeneratedAttribute]
public virtual DateTime get_PointInTime();
    public virtual Expression DetachQueryProvider();
    public virtual EntityQueryRootExpression UpdateEntityType(IEntityType entityType);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(TemporalAsOfQueryRootExpression queryRootExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalBetweenQueryRootExpression : TemporalRangeQueryRootExpression {
    public TemporalBetweenQueryRootExpression(IEntityType entityType, DateTime from, DateTime to);
    public TemporalBetweenQueryRootExpression(IAsyncQueryProvider queryProvider, IEntityType entityType, DateTime from, DateTime to);
    public virtual Expression DetachQueryProvider();
    public virtual EntityQueryRootExpression UpdateEntityType(IEntityType entityType);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(TemporalBetweenQueryRootExpression queryRootExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalContainedInQueryRootExpression : TemporalRangeQueryRootExpression {
    public TemporalContainedInQueryRootExpression(IEntityType entityType, DateTime from, DateTime to);
    public TemporalContainedInQueryRootExpression(IAsyncQueryProvider queryProvider, IEntityType entityType, DateTime from, DateTime to);
    public virtual Expression DetachQueryProvider();
    public virtual EntityQueryRootExpression UpdateEntityType(IEntityType entityType);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(TemporalContainedInQueryRootExpression queryRootExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalFromToQueryRootExpression : TemporalRangeQueryRootExpression {
    public TemporalFromToQueryRootExpression(IEntityType entityType, DateTime from, DateTime to);
    public TemporalFromToQueryRootExpression(IAsyncQueryProvider queryProvider, IEntityType entityType, DateTime from, DateTime to);
    public virtual Expression DetachQueryProvider();
    public virtual EntityQueryRootExpression UpdateEntityType(IEntityType entityType);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(TemporalFromToQueryRootExpression queryRootExpression);
    public virtual int GetHashCode();
}
public enum Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalOperationType : Enum {
    public int value__;
    public static TemporalOperationType All;
    public static TemporalOperationType AsOf;
    public static TemporalOperationType Between;
    public static TemporalOperationType ContainedIn;
    public static TemporalOperationType FromTo;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalQueryRootExpression : EntityQueryRootExpression {
    protected TemporalQueryRootExpression(IEntityType entityType);
    protected TemporalQueryRootExpression(IAsyncQueryProvider asyncQueryProvider, IEntityType entityType);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalRangeQueryRootExpression : TemporalQueryRootExpression {
    [CompilerGeneratedAttribute]
private DateTime <From>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <To>k__BackingField;
    public DateTime From { get; }
    public DateTime To { get; }
    protected TemporalRangeQueryRootExpression(IEntityType entityType, DateTime from, DateTime to);
    protected TemporalRangeQueryRootExpression(IAsyncQueryProvider queryProvider, IEntityType entityType, DateTime from, DateTime to);
    [CompilerGeneratedAttribute]
public virtual DateTime get_From();
    [CompilerGeneratedAttribute]
public virtual DateTime get_To();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(TemporalRangeQueryRootExpression queryRootExpression);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
internal static class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TypeNameBuilder : object {
    [ExtensionAttribute]
private static StringBuilder AppendSize(StringBuilder builder, DbParameter parameter);
    [ExtensionAttribute]
private static StringBuilder AppendSizeOrMax(StringBuilder builder, DbParameter parameter);
    [ExtensionAttribute]
private static StringBuilder AppendPrecision(StringBuilder builder, DbParameter parameter);
    [ExtensionAttribute]
private static StringBuilder AppendScale(StringBuilder builder, DbParameter parameter);
    [ExtensionAttribute]
private static StringBuilder AppendPrecisionAndScale(StringBuilder builder, DbParameter parameter);
    public static string CreateTypeName(DbParameter parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlDataReaderExtension : object {
    [ExtensionAttribute]
public static T GetValueOrDefault(DbDataReader reader, string name);
    [ExtensionAttribute]
public static T GetValueOrDefault(DbDataRecord record, string name);
    [ExtensionAttribute]
public static T GetFieldValue(DbDataRecord record, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlServerCodeGenerator : ProviderCodeGenerator {
    private static MethodInfo UseSqlServerMethodInfo;
    public SqlServerCodeGenerator(ProviderCodeGeneratorDependencies dependencies);
    private static SqlServerCodeGenerator();
    public virtual MethodCallCodeFragment GenerateUseProvider(string connectionString, MethodCallCodeFragment providerOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlServerDatabaseModelFactory : DatabaseModelFactory {
    private IDiagnosticsLogger`1<Scaffolding> _logger;
    private IRelationalTypeMappingSource _typeMappingSource;
    private static ISet`1<string> DateTimePrecisionTypes;
    private static ISet`1<string> MaxLengthRequiredTypes;
    private static string NamePartRegex;
    private static Regex PartExtractor;
    private static Dictionary`2<string, Int64[]> DefaultSequenceMinMax;
    private Nullable`1<byte> _compatibilityLevel;
    private Nullable`1<EngineEdition> _engineEdition;
    public SqlServerDatabaseModelFactory(IDiagnosticsLogger`1<Scaffolding> logger, IRelationalTypeMappingSource typeMappingSource);
    private static SqlServerDatabaseModelFactory();
    public virtual DatabaseModel Create(string connectionString, DatabaseModelFactoryOptions options);
    public virtual DatabaseModel Create(DbConnection connection, DatabaseModelFactoryOptions options);
    private void CheckViewDefinitionRights(DbConnection connection);
    private string GetDefaultSchema(DbConnection connection);
    private static Func`2<string, string> GenerateSchemaFilter(IReadOnlyList`1<string> schemas);
    private static ValueTuple`2<string, string> Parse(string table);
    private static Func`3<string, string, string> GenerateTableFilter(IReadOnlyList`1<ValueTuple`2<string, string>> tables, Func`2<string, string> schemaFilter);
    private static string EscapeLiteral(string s);
    private IReadOnlyDictionary`2<string, ValueTuple`2<string, string>> GetTypeAliases(DbConnection connection);
    private void GetSequences(DbConnection connection, DatabaseModel databaseModel, Func`2<string, string> schemaFilter, IReadOnlyDictionary`2<string, ValueTuple`2<string, string>> typeAliases);
    private void GetTables(DbConnection connection, DatabaseModel databaseModel, Func`3<string, string, string> tableFilter, IReadOnlyDictionary`2<string, ValueTuple`2<string, string>> typeAliases, string databaseCollation);
    private void GetColumns(DbConnection connection, IReadOnlyList`1<DatabaseTable> tables, string tableFilter, string viewFilter, IReadOnlyDictionary`2<string, ValueTuple`2<string, string>> typeAliases, string databaseCollation);
    private object TryParseClrDefault(string dataTypeName, string defaultValueSql);
    private static string GetStoreType(string dataTypeName, int maxLength, int precision, int scale);
    private void GetIndexes(DbConnection connection, IReadOnlyList`1<DatabaseTable> tables, string tableFilter);
    private void GetForeignKeys(DbConnection connection, IReadOnlyList`1<DatabaseTable> tables, string tableFilter);
    private void GetTriggers(DbConnection connection, IReadOnlyList`1<DatabaseTable> tables, string tableFilter);
    private bool SupportsTemporalTable();
    private bool SupportsMemoryOptimizedTable();
    private bool SupportsSequences();
    private bool SupportsIndexes();
    private bool SupportsViews();
    private bool SupportsTriggers();
    private bool IsFullFeaturedEngineEdition();
    private static string DisplayName(string schema, string name);
    private static Nullable`1<ReferentialAction> ConvertToReferentialAction(string onDeleteAction);
    [CompilerGeneratedAttribute]
internal static EngineEdition <Create>g__GetEngineEdition|12_0(DbConnection connection);
    [CompilerGeneratedAttribute]
internal static byte <Create>g__GetCompatibilityLevel|12_1(DbConnection connection);
    [CompilerGeneratedAttribute]
internal static string <Create>g__GetServerCollation|12_2(DbConnection connection);
    [CompilerGeneratedAttribute]
internal static string <Create>g__GetDatabaseCollation|12_3(DbConnection connection);
    [CompilerGeneratedAttribute]
internal static void <TryParseClrDefault>g__Unwrap|23_0(<>c__DisplayClass23_0& );
}
public interface Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.ISqlServerConnection {
    public bool IsMultipleActiveResultSetsEnabled { get; }
    [NullableContextAttribute("1")]
public abstract virtual ISqlServerConnection CreateMasterConnection();
    public abstract virtual bool get_IsMultipleActiveResultSetsEnabled();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerBoolTypeMapping : BoolTypeMapping {
    [CompilerGeneratedAttribute]
private static SqlServerBoolTypeMapping <Default>k__BackingField;
    public static SqlServerBoolTypeMapping Default { get; }
    public SqlServerBoolTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected SqlServerBoolTypeMapping(RelationalTypeMappingParameters parameters);
    private static SqlServerBoolTypeMapping();
    [CompilerGeneratedAttribute]
public static SqlServerBoolTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerByteArrayTypeMapping : ByteArrayTypeMapping {
    private static int MaxSize;
    private Nullable`1<SqlDbType> _sqlDbType;
    [CompilerGeneratedAttribute]
private static SqlServerByteArrayTypeMapping <Default>k__BackingField;
    public static SqlServerByteArrayTypeMapping Default { get; }
    [NullableContextAttribute("2")]
public SqlServerByteArrayTypeMapping(string storeType, Nullable`1<int> size, bool fixedLength, ValueComparer comparer, Nullable`1<SqlDbType> sqlDbType, Nullable`1<StoreTypePostfix> storeTypePostfix);
    protected SqlServerByteArrayTypeMapping(RelationalTypeMappingParameters parameters, Nullable`1<SqlDbType> sqlDbType);
    private static SqlServerByteArrayTypeMapping();
    [CompilerGeneratedAttribute]
public static SqlServerByteArrayTypeMapping get_Default();
    private static int CalculateSize(Nullable`1<int> size);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual void ConfigureParameter(DbParameter parameter);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerByteTypeMapping : ByteTypeMapping {
    [CompilerGeneratedAttribute]
private static SqlServerByteTypeMapping <Default>k__BackingField;
    public static SqlServerByteTypeMapping Default { get; }
    public SqlServerByteTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected SqlServerByteTypeMapping(RelationalTypeMappingParameters parameters);
    private static SqlServerByteTypeMapping();
    [CompilerGeneratedAttribute]
public static SqlServerByteTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerConnection : RelationalConnection {
    private static int DefaultMasterConnectionCommandTimeout;
    private static ConcurrentDictionary`2<string, bool> MultipleActiveResultSetsEnabledMap;
    public bool IsMultipleActiveResultSetsEnabled { get; }
    protected bool SupportsAmbientTransactions { get; }
    [NullableContextAttribute("1")]
public SqlServerConnection(RelationalConnectionDependencies dependencies);
    private static SqlServerConnection();
    protected virtual void OpenDbConnection(bool errorsExpected);
    [NullableContextAttribute("1")]
protected virtual DbConnection CreateDbConnection();
    [NullableContextAttribute("1")]
public virtual ISqlServerConnection CreateMasterConnection();
    public virtual bool get_IsMultipleActiveResultSetsEnabled();
    protected virtual bool get_SupportsAmbientTransactions();
    [CompilerGeneratedAttribute]
private void <CreateMasterConnection>b__5_0(SqlServerDbContextOptionsBuilder b);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator : RelationalDatabaseCreator {
    private ISqlServerConnection _connection;
    private IRawSqlCommandBuilder _rawSqlCommandBuilder;
    [CompilerGeneratedAttribute]
private TimeSpan <RetryDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RetryTimeout>k__BackingField;
    public TimeSpan RetryDelay { get; public set; }
    public TimeSpan RetryTimeout { get; public set; }
    public SqlServerDatabaseCreator(RelationalDatabaseCreatorDependencies dependencies, ISqlServerConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder);
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_RetryDelay();
    [CompilerGeneratedAttribute]
public virtual void set_RetryDelay(TimeSpan value);
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_RetryTimeout();
    [CompilerGeneratedAttribute]
public virtual void set_RetryTimeout(TimeSpan value);
    public virtual void Create();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator/<CreateAsync>d__12")]
public virtual Task CreateAsync(CancellationToken cancellationToken);
    public virtual bool HasTables();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator/<HasTablesAsync>d__14")]
public virtual Task`1<bool> HasTablesAsync(CancellationToken cancellationToken);
    private IRelationalCommand CreateHasTablesCommand();
    private IReadOnlyList`1<MigrationCommand> CreateCreateOperations();
    public virtual bool Exists();
    private bool Exists(bool retryOnNotExists);
    public virtual Task`1<bool> ExistsAsync(CancellationToken cancellationToken);
    private Task`1<bool> ExistsAsync(bool retryOnNotExists, CancellationToken cancellationToken);
    private static bool IsDoesNotExist(SqlException exception);
    private bool RetryOnExistsFailure(SqlException exception);
    public virtual void Delete();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator/<DeleteAsync>d__24")]
public virtual Task DeleteAsync(CancellationToken cancellationToken);
    private IReadOnlyList`1<MigrationCommand> CreateDropCommands();
    private static void ClearAllPools();
    private void ClearPool();
    [CompilerGeneratedAttribute]
private bool <HasTables>b__13_0(ISqlServerConnection connection);
    [CompilerGeneratedAttribute]
private Task`1<object> <HasTablesAsync>b__14_0(ISqlServerConnection connection, CancellationToken ct);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateOnlyTypeMapping : DateOnlyTypeMapping {
    [CompilerGeneratedAttribute]
private static SqlServerDateOnlyTypeMapping <Default>k__BackingField;
    public static SqlServerDateOnlyTypeMapping Default { get; }
    protected string SqlLiteralFormatString { get; }
    internal SqlServerDateOnlyTypeMapping(string storeType);
    protected SqlServerDateOnlyTypeMapping(RelationalTypeMappingParameters parameters);
    private static SqlServerDateOnlyTypeMapping();
    [CompilerGeneratedAttribute]
public static SqlServerDateOnlyTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual void ConfigureParameter(DbParameter parameter);
    protected virtual string get_SqlLiteralFormatString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateTimeOffsetTypeMapping : DateTimeOffsetTypeMapping {
    private String[] _dateTimeOffsetFormats;
    [CompilerGeneratedAttribute]
private static SqlServerDateTimeOffsetTypeMapping <Default>k__BackingField;
    public static SqlServerDateTimeOffsetTypeMapping Default { get; }
    protected string SqlLiteralFormatString { get; }
    public SqlServerDateTimeOffsetTypeMapping(string storeType, Nullable`1<DbType> dbType, StoreTypePostfix storeTypePostfix);
    protected SqlServerDateTimeOffsetTypeMapping(RelationalTypeMappingParameters parameters);
    private static SqlServerDateTimeOffsetTypeMapping();
    [CompilerGeneratedAttribute]
public static SqlServerDateTimeOffsetTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string get_SqlLiteralFormatString();
    protected virtual void ConfigureParameter(DbParameter parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateTimeTypeMapping : DateTimeTypeMapping {
    private static string DateFormatConst;
    private static string SmallDateTimeFormatConst;
    private static string DateTimeFormatConst;
    private Nullable`1<SqlDbType> _sqlDbType;
    private String[] _dateTime2Formats;
    [CompilerGeneratedAttribute]
private static SqlServerDateTimeTypeMapping <Default>k__BackingField;
    public static SqlServerDateTimeTypeMapping Default { get; }
    public Nullable`1<SqlDbType> SqlType { get; }
    protected string SqlLiteralFormatString { get; }
    public SqlServerDateTimeTypeMapping(string storeType, Nullable`1<DbType> dbType, Nullable`1<SqlDbType> sqlDbType, StoreTypePostfix storeTypePostfix);
    protected SqlServerDateTimeTypeMapping(RelationalTypeMappingParameters parameters, Nullable`1<SqlDbType> sqlDbType);
    private static SqlServerDateTimeTypeMapping();
    [CompilerGeneratedAttribute]
public static SqlServerDateTimeTypeMapping get_Default();
    public virtual Nullable`1<SqlDbType> get_SqlType();
    protected virtual void ConfigureParameter(DbParameter parameter);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string get_SqlLiteralFormatString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDecimalTypeMapping : DecimalTypeMapping {
    private Nullable`1<SqlDbType> _sqlDbType;
    [CompilerGeneratedAttribute]
private static SqlServerDecimalTypeMapping <Default>k__BackingField;
    public static SqlServerDecimalTypeMapping Default { get; }
    public Nullable`1<SqlDbType> SqlType { get; }
    public SqlServerDecimalTypeMapping(string storeType, Nullable`1<DbType> dbType, Nullable`1<int> precision, Nullable`1<int> scale, Nullable`1<SqlDbType> sqlDbType, StoreTypePostfix storeTypePostfix);
    protected SqlServerDecimalTypeMapping(RelationalTypeMappingParameters parameters, Nullable`1<SqlDbType> sqlDbType);
    private static SqlServerDecimalTypeMapping();
    [CompilerGeneratedAttribute]
public static SqlServerDecimalTypeMapping get_Default();
    public virtual Nullable`1<SqlDbType> get_SqlType();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual void ConfigureParameter(DbParameter parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDoubleTypeMapping : DoubleTypeMapping {
    [CompilerGeneratedAttribute]
private static SqlServerDoubleTypeMapping <Default>k__BackingField;
    private static MethodInfo GetFloatMethod;
    public static SqlServerDoubleTypeMapping Default { get; }
    public SqlServerDoubleTypeMapping(string storeType, Nullable`1<DbType> dbType, StoreTypePostfix storeTypePostfix);
    protected SqlServerDoubleTypeMapping(RelationalTypeMappingParameters parameters);
    private static SqlServerDoubleTypeMapping();
    [CompilerGeneratedAttribute]
public static SqlServerDoubleTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    public virtual MethodInfo GetDataReaderMethod();
    public virtual Expression CustomizeDataReaderExpression(Expression expression);
    protected virtual void ConfigureParameter(DbParameter parameter);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExceptionDetector : object {
    [NullableContextAttribute("1")]
public virtual bool IsCancellation(Exception exception, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy : object {
    [CompilerGeneratedAttribute]
private ExecutionStrategyDependencies <Dependencies>k__BackingField;
    protected ExecutionStrategyDependencies Dependencies { get; }
    public bool RetriesOnFailure { get; }
    public SqlServerExecutionStrategy(ExecutionStrategyDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ExecutionStrategyDependencies get_Dependencies();
    public virtual bool get_RetriesOnFailure();
    public virtual TResult Execute(TState state, Func`3<DbContext, TState, TResult> operation, Func`3<DbContext, TState, ExecutionResult`1<TResult>> verifySucceeded);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy/<ExecuteAsync>d__7`2")]
public virtual Task`1<TResult> ExecuteAsync(TState state, Func`4<DbContext, TState, CancellationToken, Task`1<TResult>> operation, Func`4<DbContext, TState, CancellationToken, Task`1<ExecutionResult`1<TResult>>> verifySucceeded, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategyFactory : RelationalExecutionStrategyFactory {
    public SqlServerExecutionStrategyFactory(ExecutionStrategyDependencies dependencies);
    protected virtual IExecutionStrategy CreateDefaultStrategy(ExecutionStrategyDependencies dependencies);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerFloatTypeMapping : FloatTypeMapping {
    [CompilerGeneratedAttribute]
private static SqlServerFloatTypeMapping <Default>k__BackingField;
    public static SqlServerFloatTypeMapping Default { get; }
    public SqlServerFloatTypeMapping(string storeType, Nullable`1<DbType> dbType, StoreTypePostfix storeTypePostfix);
    protected SqlServerFloatTypeMapping(RelationalTypeMappingParameters parameters);
    private static SqlServerFloatTypeMapping();
    [CompilerGeneratedAttribute]
public static SqlServerFloatTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    protected virtual void ConfigureParameter(DbParameter parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerJsonTypeMapping : JsonTypeMapping {
    private static MethodInfo GetStringMethod;
    private static PropertyInfo UTF8Property;
    private static MethodInfo EncodingGetBytesMethod;
    private static ConstructorInfo MemoryStreamConstructor;
    [CompilerGeneratedAttribute]
private static SqlServerJsonTypeMapping <Default>k__BackingField;
    public static SqlServerJsonTypeMapping Default { get; }
    public SqlServerJsonTypeMapping(string storeType);
    protected SqlServerJsonTypeMapping(RelationalTypeMappingParameters parameters);
    private static SqlServerJsonTypeMapping();
    [CompilerGeneratedAttribute]
public static SqlServerJsonTypeMapping get_Default();
    public virtual MethodInfo GetDataReaderMethod();
    public virtual Expression CustomizeDataReaderExpression(Expression expression);
    protected virtual string EscapeSqlLiteral(string literal);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerLongTypeMapping : LongTypeMapping {
    [CompilerGeneratedAttribute]
private static SqlServerLongTypeMapping <Default>k__BackingField;
    public static SqlServerLongTypeMapping Default { get; }
    [NullableContextAttribute("2")]
public SqlServerLongTypeMapping(string storeType, ValueConverter converter, ValueComparer comparer, ValueComparer providerValueComparer, Nullable`1<DbType> dbType);
    protected SqlServerLongTypeMapping(RelationalTypeMappingParameters parameters);
    private static SqlServerLongTypeMapping();
    [CompilerGeneratedAttribute]
public static SqlServerLongTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerShortTypeMapping : ShortTypeMapping {
    [CompilerGeneratedAttribute]
private static SqlServerShortTypeMapping <Default>k__BackingField;
    public static SqlServerShortTypeMapping Default { get; }
    public SqlServerShortTypeMapping(string storeType, Nullable`1<DbType> dbType);
    protected SqlServerShortTypeMapping(RelationalTypeMappingParameters parameters);
    private static SqlServerShortTypeMapping();
    [CompilerGeneratedAttribute]
public static SqlServerShortTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerSqlGenerationHelper : RelationalSqlGenerationHelper {
    public string BatchTerminator { get; }
    public string StartTransactionStatement { get; }
    public SqlServerSqlGenerationHelper(RelationalSqlGenerationHelperDependencies dependencies);
    public virtual string get_BatchTerminator();
    public virtual string get_StartTransactionStatement();
    public virtual string EscapeIdentifier(string identifier);
    public virtual void EscapeIdentifier(StringBuilder builder, string identifier);
    public virtual string DelimitIdentifier(string identifier);
    public virtual void DelimitIdentifier(StringBuilder builder, string identifier);
    public virtual string GenerateCreateSavepointStatement(string name);
    public virtual string GenerateRollbackToSavepointStatement(string name);
    public virtual string GenerateReleaseSavepointStatement(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerSqlVariantTypeMapping : RelationalTypeMapping {
    [CompilerGeneratedAttribute]
private static SqlServerSqlVariantTypeMapping <Default>k__BackingField;
    public static SqlServerSqlVariantTypeMapping Default { get; }
    public SqlServerSqlVariantTypeMapping(string storeType);
    protected SqlServerSqlVariantTypeMapping(RelationalTypeMappingParameters parameters);
    private static SqlServerSqlVariantTypeMapping();
    [CompilerGeneratedAttribute]
public static SqlServerSqlVariantTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerStringTypeMapping : StringTypeMapping {
    private static int UnicodeMax;
    private static int AnsiMax;
    private static CaseInsensitiveValueComparer CaseInsensitiveValueComparer;
    private bool _isUtf16;
    private Nullable`1<SqlDbType> _sqlDbType;
    private int _maxSpecificSize;
    private int _maxSize;
    [CompilerGeneratedAttribute]
private static SqlServerStringTypeMapping <Default>k__BackingField;
    public static SqlServerStringTypeMapping Default { get; }
    [NullableContextAttribute("2")]
public SqlServerStringTypeMapping(string storeType, bool unicode, Nullable`1<int> size, bool fixedLength, Nullable`1<SqlDbType> sqlDbType, Nullable`1<StoreTypePostfix> storeTypePostfix, bool useKeyComparison);
    protected SqlServerStringTypeMapping(RelationalTypeMappingParameters parameters, Nullable`1<SqlDbType> sqlDbType);
    private static SqlServerStringTypeMapping();
    [CompilerGeneratedAttribute]
public static SqlServerStringTypeMapping get_Default();
    private static string GetDefaultStoreName(bool unicode, bool fixedLength);
    private static Nullable`1<DbType> GetDbType(bool unicode, bool fixedLength);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual void ConfigureParameter(DbParameter parameter);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    [CompilerGeneratedAttribute]
private void <GenerateNonNullSqlLiteral>g__AddConcatOperatorIfNeeded|16_0(<>c__DisplayClass16_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTimeOnlyTypeMapping : TimeOnlyTypeMapping {
    private String[] _timeFormats;
    [CompilerGeneratedAttribute]
private static SqlServerTimeOnlyTypeMapping <Default>k__BackingField;
    public static SqlServerTimeOnlyTypeMapping Default { get; }
    protected string SqlLiteralFormatString { get; }
    internal SqlServerTimeOnlyTypeMapping(string storeType, StoreTypePostfix storeTypePostfix);
    protected SqlServerTimeOnlyTypeMapping(RelationalTypeMappingParameters parameters);
    private static SqlServerTimeOnlyTypeMapping();
    [CompilerGeneratedAttribute]
public static SqlServerTimeOnlyTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual void ConfigureParameter(DbParameter parameter);
    protected virtual string get_SqlLiteralFormatString();
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTimeSpanTypeMapping : TimeSpanTypeMapping {
    private String[] _timeFormats;
    [CompilerGeneratedAttribute]
private static SqlServerTimeSpanTypeMapping <Default>k__BackingField;
    public static SqlServerTimeSpanTypeMapping Default { get; }
    protected string SqlLiteralFormatString { get; }
    public SqlServerTimeSpanTypeMapping(string storeType, Nullable`1<DbType> dbType, StoreTypePostfix storeTypePostfix);
    protected SqlServerTimeSpanTypeMapping(RelationalTypeMappingParameters parameters);
    private static SqlServerTimeSpanTypeMapping();
    [CompilerGeneratedAttribute]
public static SqlServerTimeSpanTypeMapping get_Default();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual void ConfigureParameter(DbParameter parameter);
    protected virtual string get_SqlLiteralFormatString();
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTransaction : RelationalTransaction {
    public bool SupportsSavepoints { get; }
    public SqlServerTransaction(IRelationalConnection connection, DbTransaction transaction, Guid transactionId, IDiagnosticsLogger`1<Transaction> logger, bool transactionOwned, ISqlGenerationHelper sqlGenerationHelper);
    public virtual bool get_SupportsSavepoints();
    public virtual void ReleaseSavepoint(string name);
    public virtual Task ReleaseSavepointAsync(string name, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTransactionFactory : object {
    [CompilerGeneratedAttribute]
private RelationalTransactionFactoryDependencies <Dependencies>k__BackingField;
    protected RelationalTransactionFactoryDependencies Dependencies { get; }
    public SqlServerTransactionFactory(RelationalTransactionFactoryDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual RelationalTransactionFactoryDependencies get_Dependencies();
    public virtual RelationalTransaction Create(IRelationalConnection connection, DbTransaction transaction, Guid transactionId, IDiagnosticsLogger`1<Transaction> logger, bool transactionOwned);
}
public static class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTransientExceptionDetector : object {
    [NullableContextAttribute("2")]
public static bool ShouldRetryOn(Exception ex);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTypeMappingSource : RelationalTypeMappingSource {
    private static bool UseOldBehavior32898;
    private static SqlServerFloatTypeMapping RealAlias;
    private static SqlServerByteArrayTypeMapping Rowversion;
    private static SqlServerLongTypeMapping LongRowversion;
    private static SqlServerLongTypeMapping UlongRowversion;
    private static SqlServerStringTypeMapping FixedLengthUnicodeString;
    private static SqlServerStringTypeMapping TextUnicodeString;
    private static SqlServerStringTypeMapping VariableLengthUnicodeString;
    private static SqlServerStringTypeMapping VariableLengthMaxUnicodeString;
    private static SqlServerStringTypeMapping FixedLengthAnsiString;
    private static SqlServerStringTypeMapping TextAnsiString;
    private static SqlServerStringTypeMapping VariableLengthMaxAnsiString;
    private static SqlServerByteArrayTypeMapping ImageBinary;
    private static SqlServerByteArrayTypeMapping VariableLengthMaxBinary;
    private static SqlServerByteArrayTypeMapping FixedLengthBinary;
    private static SqlServerDateTimeTypeMapping DateAsDateTime;
    private static SqlServerDateTimeTypeMapping SmallDatetime;
    private static SqlServerDateTimeTypeMapping Datetime;
    private static SqlServerDateTimeTypeMapping Datetime2Alias;
    private static DoubleTypeMapping DoubleAlias;
    private static SqlServerDateTimeOffsetTypeMapping DatetimeoffsetAlias;
    private static SqlServerDecimalTypeMapping Decimal;
    private static SqlServerDecimalTypeMapping DecimalAlias;
    private static SqlServerDecimalTypeMapping Money;
    private static SqlServerDecimalTypeMapping SmallMoney;
    private static SqlServerTimeOnlyTypeMapping TimeAlias;
    private static GuidTypeMapping Uniqueidentifier;
    private static SqlServerStringTypeMapping Xml;
    private static Dictionary`2<Type, RelationalTypeMapping> _clrTypeMappings;
    private static Dictionary`2<Type, RelationalTypeMapping> _clrNoFacetTypeMappings;
    private static Dictionary`2<string, RelationalTypeMapping[]> _storeTypeMappings;
    private static List`1<string> NameBasesUsingPrecision;
    private static SqlServerTypeMappingSource();
    [NullableContextAttribute("1")]
public SqlServerTypeMappingSource(TypeMappingSourceDependencies dependencies, RelationalTypeMappingSourceDependencies relationalDependencies);
    protected virtual RelationalTypeMapping FindMapping(RelationalTypeMappingInfo& modreq(System.Runtime.InteropServices.InAttribute) mappingInfo);
    private RelationalTypeMapping FindRawMapping(RelationalTypeMappingInfo mappingInfo);
    protected virtual string ParseStoreTypeName(string storeTypeName, Nullable`1& unicode, Nullable`1& size, Nullable`1& precision, Nullable`1& scale);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerUdtTypeMapping : RelationalTypeMapping {
    private static Action`2<DbParameter, string> _udtTypeNameSetter;
    [CompilerGeneratedAttribute]
private string <UdtTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, Expression> <LiteralGenerator>k__BackingField;
    public string UdtTypeName { get; }
    public Func`2<object, Expression> LiteralGenerator { get; }
    [NullableContextAttribute("2")]
public SqlServerUdtTypeMapping(Type clrType, string storeType, Func`2<object, Expression> literalGenerator, StoreTypePostfix storeTypePostfix, string udtTypeName, ValueConverter converter, ValueComparer comparer, ValueComparer keyComparer, Nullable`1<DbType> dbType, bool unicode, Nullable`1<int> size, bool fixedLength, Nullable`1<int> precision, Nullable`1<int> scale);
    protected SqlServerUdtTypeMapping(RelationalTypeMappingParameters parameters, Func`2<object, Expression> literalGenerator, string udtTypeName);
    [CompilerGeneratedAttribute]
public virtual string get_UdtTypeName();
    [CompilerGeneratedAttribute]
public virtual Func`2<object, Expression> get_LiteralGenerator();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual void ConfigureParameter(DbParameter parameter);
    private void SetUdtTypeName(DbParameter parameter);
    public virtual Expression GenerateCodeLiteral(object value);
    private static Action`2<DbParameter, string> CreateUdtTypeNameAccessor(Type paramType);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.ISqlServerUpdateSqlGenerator {
    public abstract virtual ResultSetMapping AppendBulkInsertOperation(StringBuilder commandStringBuilder, IReadOnlyList`1<IReadOnlyModificationCommand> modificationCommands, int commandPosition, Boolean& requiresTransaction);
    public virtual ResultSetMapping AppendBulkInsertOperation(StringBuilder commandStringBuilder, IReadOnlyList`1<IReadOnlyModificationCommand> modificationCommands, int commandPosition);
}
public class Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommand : ModificationCommand {
    public SqlServerModificationCommand(ModificationCommandParameters& modificationCommandParameters);
    public SqlServerModificationCommand(NonTrackedModificationCommandParameters& modificationCommandParameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch : AffectedCountModificationCommandBatch {
    private static int DefaultNetworkPacketSizeBytes;
    private static int MaxScriptLength;
    private static int MaxParameterCount;
    private List`1<IReadOnlyModificationCommand> _pendingBulkInsertCommands;
    protected ISqlServerUpdateSqlGenerator UpdateSqlGenerator { get; }
    public SqlServerModificationCommandBatch(ModificationCommandBatchFactoryDependencies dependencies, int maxBatchSize);
    protected virtual ISqlServerUpdateSqlGenerator get_UpdateSqlGenerator();
    protected virtual void RollbackLastCommand(IReadOnlyModificationCommand modificationCommand);
    protected virtual bool IsValid();
    private void ApplyPendingBulkInsertCommands();
    public virtual bool TryAddCommand(IReadOnlyModificationCommand modificationCommand);
    protected virtual void AddCommand(IReadOnlyModificationCommand modificationCommand);
    private static bool CanBeInsertedInSameStatement(IReadOnlyModificationCommand firstCommand, IReadOnlyModificationCommand secondCommand);
    public virtual void Complete(bool moreBatchesExpected);
    public virtual void Execute(IRelationalConnection connection);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch/<ExecuteAsync>d__15")]
public virtual Task ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(IRelationalConnection connection, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatchFactory : object {
    private static int DefaultMaxBatchSize;
    private static int MaxMaxBatchSize;
    private int _maxBatchSize;
    [CompilerGeneratedAttribute]
private ModificationCommandBatchFactoryDependencies <Dependencies>k__BackingField;
    protected ModificationCommandBatchFactoryDependencies Dependencies { get; }
    public SqlServerModificationCommandBatchFactory(ModificationCommandBatchFactoryDependencies dependencies, IDbContextOptions options);
    [CompilerGeneratedAttribute]
protected virtual ModificationCommandBatchFactoryDependencies get_Dependencies();
    public virtual ModificationCommandBatch Create();
}
public class Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandFactory : object {
    [NullableContextAttribute("1")]
public virtual IModificationCommand CreateModificationCommand(ModificationCommandParameters& modreq(System.Runtime.InteropServices.InAttribute) modificationCommandParameters);
    [NullableContextAttribute("1")]
public virtual INonTrackedModificationCommand CreateNonTrackedModificationCommand(NonTrackedModificationCommandParameters& modreq(System.Runtime.InteropServices.InAttribute) modificationCommandParameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerUpdateSqlGenerator : UpdateAndSelectSqlGenerator {
    private static string InsertedTableBaseName;
    private static string ToInsertTableAlias;
    private static string PositionColumnName;
    private static string PositionColumnDeclaration;
    private static string FullPositionColumnName;
    protected int MergeIntoMinimumThreshold { get; }
    public SqlServerUpdateSqlGenerator(UpdateSqlGeneratorDependencies dependencies);
    protected virtual int get_MergeIntoMinimumThreshold();
    public virtual ResultSetMapping AppendInsertOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    protected virtual void AppendInsertCommand(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<IColumnModification> writeOperations, IReadOnlyList`1<IColumnModification> readOperations);
    public virtual ResultSetMapping AppendUpdateOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    protected virtual void AppendUpdateCommand(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<IColumnModification> writeOperations, IReadOnlyList`1<IColumnModification> readOperations, IReadOnlyList`1<IColumnModification> conditionOperations, bool appendReturningOneClause);
    protected virtual void AppendUpdateColumnValue(ISqlGenerationHelper updateSqlGeneratorHelper, IColumnModification columnModification, StringBuilder stringBuilder, string name, string schema);
    public virtual ResultSetMapping AppendDeleteOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    protected virtual void AppendDeleteCommand(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<IColumnModification> readOperations, IReadOnlyList`1<IColumnModification> conditionOperations, bool appendReturningOneClause);
    public virtual ResultSetMapping AppendBulkInsertOperation(StringBuilder commandStringBuilder, IReadOnlyList`1<IReadOnlyModificationCommand> modificationCommands, int commandPosition, Boolean& requiresTransaction);
    private ResultSetMapping AppendInsertMultipleRows(StringBuilder commandStringBuilder, IReadOnlyList`1<IReadOnlyModificationCommand> modificationCommands, List`1<IColumnModification> writeOperations, Boolean& requiresTransaction);
    private ResultSetMapping AppendMergeWithOutput(StringBuilder commandStringBuilder, IReadOnlyList`1<IReadOnlyModificationCommand> modificationCommands, List`1<IColumnModification> writeOperations, List`1<IColumnModification> readOperations, Boolean& requiresTransaction);
    private ResultSetMapping AppendMergeWithOutputInto(StringBuilder commandStringBuilder, IReadOnlyList`1<IReadOnlyModificationCommand> modificationCommands, int commandPosition, List`1<IColumnModification> writeOperations, List`1<IColumnModification> keyOperations, List`1<IColumnModification> readOperations, Boolean& requiresTransaction);
    private ResultSetMapping AppendInsertMultipleDefaultRows(StringBuilder commandStringBuilder, IReadOnlyList`1<IReadOnlyModificationCommand> modificationCommands, List`1<IColumnModification> writeableOperations, Boolean& requiresTransaction);
    private ResultSetMapping AppendInsertMultipleDefaultRowsWithOutputInto(StringBuilder commandStringBuilder, IReadOnlyList`1<IReadOnlyModificationCommand> modificationCommands, int commandPosition, List`1<IColumnModification> writableOperations, List`1<IColumnModification> keyOperations, List`1<IColumnModification> readOperations, Boolean& requiresTransaction);
    private void AppendMergeCommandHeader(StringBuilder commandStringBuilder, string name, string schema, string toInsertTableAlias, IReadOnlyList`1<IReadOnlyModificationCommand> modificationCommands, IReadOnlyList`1<IColumnModification> writeOperations, string additionalColumns);
    public virtual ResultSetMapping AppendStoredProcedureCall(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    private void AppendValues(StringBuilder commandStringBuilder, IReadOnlyList`1<IColumnModification> operations, string additionalLiteral);
    private void AppendDeclareTable(StringBuilder commandStringBuilder, string name, int index, IReadOnlyList`1<IColumnModification> operations, string additionalColumns);
    private static string GetTypeNameForCopy(IProperty property);
    protected virtual void AppendReturningClause(StringBuilder commandStringBuilder, IReadOnlyList`1<IColumnModification> operations, string additionalValues);
    private void AppendOutputClause(StringBuilder commandStringBuilder, IReadOnlyList`1<IColumnModification> operations, string additionalReadValues);
    private void AppendOutputIntoClause(StringBuilder commandStringBuilder, IReadOnlyList`1<IColumnModification> operations, string tableName, int tableIndex, string additionalColumns);
    private ResultSetMapping AppendInsertSingleRowWithOutputInto(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, IReadOnlyList`1<IColumnModification> keyOperations, IReadOnlyList`1<IColumnModification> readOperations, int commandPosition, Boolean& requiresTransaction);
    private ResultSetMapping AppendSelectCommand(StringBuilder commandStringBuilder, IReadOnlyList`1<IColumnModification> readOperations, IReadOnlyList`1<IColumnModification> keyOperations, string insertedTableName, int insertedTableIndex, string tableName, string schema, string orderColumn);
    protected virtual ResultSetMapping AppendSelectAffectedCountCommand(StringBuilder commandStringBuilder, string name, string schema, int commandPosition);
    public virtual void AppendBatchHeader(StringBuilder commandStringBuilder);
    public virtual void PrependEnsureAutocommit(StringBuilder commandStringBuilder);
    protected virtual void AppendIdentityWhereCondition(StringBuilder commandStringBuilder, IColumnModification columnModification);
    protected virtual void AppendRowsAffectedWhereCondition(StringBuilder commandStringBuilder, int expectedRowsAffected);
    private static bool CanUseOutputClause(IReadOnlyModificationCommand command);
    [CompilerGeneratedAttribute]
private void <AppendSelectCommand>b__30_2(StringBuilder sb, IColumnModification c);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.ISqlServerSequenceValueGeneratorFactory {
    public abstract virtual ValueGenerator TryCreate(IProperty property, Type clrType, SqlServerSequenceValueGeneratorState generatorState, ISqlServerConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder, IRelationalCommandDiagnosticsLogger commandLogger);
}
public interface Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.ISqlServerValueGeneratorCache {
    [NullableContextAttribute("1")]
public abstract virtual SqlServerSequenceValueGeneratorState GetOrAddSequenceState(IProperty property, IRelationalConnection connection);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerSequenceHiLoValueGenerator`1 : HiLoValueGenerator`1<TValue> {
    private IRawSqlCommandBuilder _rawSqlCommandBuilder;
    private ISqlServerUpdateSqlGenerator _sqlGenerator;
    private ISqlServerConnection _connection;
    private ISequence _sequence;
    private IRelationalCommandDiagnosticsLogger _commandLogger;
    public bool GeneratesTemporaryValues { get; }
    public SqlServerSequenceHiLoValueGenerator`1(IRawSqlCommandBuilder rawSqlCommandBuilder, ISqlServerUpdateSqlGenerator sqlGenerator, SqlServerSequenceValueGeneratorState generatorState, ISqlServerConnection connection, IRelationalCommandDiagnosticsLogger commandLogger);
    protected virtual long GetNewLowValue();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerSequenceHiLoValueGenerator`1/<GetNewLowValueAsync>d__7")]
protected virtual Task`1<long> GetNewLowValueAsync(CancellationToken cancellationToken);
    public virtual bool get_GeneratesTemporaryValues();
}
public class Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerSequenceValueGeneratorFactory : object {
    private ISqlServerUpdateSqlGenerator _sqlGenerator;
    [NullableContextAttribute("1")]
public SqlServerSequenceValueGeneratorFactory(ISqlServerUpdateSqlGenerator sqlGenerator);
    [NullableContextAttribute("1")]
public virtual ValueGenerator TryCreate(IProperty property, Type type, SqlServerSequenceValueGeneratorState generatorState, ISqlServerConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder, IRelationalCommandDiagnosticsLogger commandLogger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerSequenceValueGeneratorState : HiLoValueGeneratorState {
    [CompilerGeneratedAttribute]
private ISequence <Sequence>k__BackingField;
    public ISequence Sequence { get; }
    public SqlServerSequenceValueGeneratorState(ISequence sequence);
    [CompilerGeneratedAttribute]
public virtual ISequence get_Sequence();
}
public class Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerValueGeneratorCache : ValueGeneratorCache {
    private ConcurrentDictionary`2<string, SqlServerSequenceValueGeneratorState> _sequenceGeneratorCache;
    [NullableContextAttribute("1")]
public SqlServerValueGeneratorCache(ValueGeneratorCacheDependencies dependencies);
    [NullableContextAttribute("1")]
public virtual SqlServerSequenceValueGeneratorState GetOrAddSequenceState(IProperty property, IRelationalConnection connection);
    private static string GetSequenceName(ISequence sequence, IRelationalConnection connection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerValueGeneratorSelector : RelationalValueGeneratorSelector {
    private ISqlServerSequenceValueGeneratorFactory _sequenceFactory;
    private ISqlServerConnection _connection;
    private IRawSqlCommandBuilder _rawSqlCommandBuilder;
    private IRelationalCommandDiagnosticsLogger _commandLogger;
    public ISqlServerValueGeneratorCache Cache { get; }
    public SqlServerValueGeneratorSelector(ValueGeneratorSelectorDependencies dependencies, ISqlServerSequenceValueGeneratorFactory sequenceFactory, ISqlServerConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder, IRelationalCommandDiagnosticsLogger commandLogger);
    public virtual ISqlServerValueGeneratorCache get_Cache();
    public virtual ValueGenerator Select(IProperty property, ITypeBase typeBase);
    protected virtual ValueGenerator FindForType(IProperty property, ITypeBase typeBase, Type clrType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerComplexTypePrimitiveCollectionBuilderExtensions : object {
    [ExtensionAttribute]
public static ComplexTypePrimitiveCollectionBuilder IsSparse(ComplexTypePrimitiveCollectionBuilder primitiveCollectionBuilder, bool sparse);
    [ExtensionAttribute]
public static ComplexTypePrimitiveCollectionBuilder`1<TProperty> IsSparse(ComplexTypePrimitiveCollectionBuilder`1<TProperty> primitiveCollectionBuilder, bool sparse);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions : object {
    [ExtensionAttribute]
public static ComplexTypePropertyBuilder UseHiLo(ComplexTypePropertyBuilder propertyBuilder, string name, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ComplexTypePropertyBuilder`1<TProperty> UseHiLo(ComplexTypePropertyBuilder`1<TProperty> propertyBuilder, string name, string schema);
    [ExtensionAttribute]
public static ComplexTypePropertyBuilder UseSequence(ComplexTypePropertyBuilder propertyBuilder, string name, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ComplexTypePropertyBuilder`1<TProperty> UseSequence(ComplexTypePropertyBuilder`1<TProperty> propertyBuilder, string name, string schema);
    [ExtensionAttribute]
public static ComplexTypePropertyBuilder UseIdentityColumn(ComplexTypePropertyBuilder propertyBuilder, long seed, int increment);
    [ExtensionAttribute]
public static ComplexTypePropertyBuilder UseIdentityColumn(ComplexTypePropertyBuilder propertyBuilder, int seed, int increment);
    [ExtensionAttribute]
public static ComplexTypePropertyBuilder`1<TProperty> UseIdentityColumn(ComplexTypePropertyBuilder`1<TProperty> propertyBuilder, long seed, int increment);
    [ExtensionAttribute]
public static ComplexTypePropertyBuilder`1<TProperty> UseIdentityColumn(ComplexTypePropertyBuilder`1<TProperty> propertyBuilder, int seed, int increment);
    [ExtensionAttribute]
public static ComplexTypePropertyBuilder IsSparse(ComplexTypePropertyBuilder propertyBuilder, bool sparse);
    [ExtensionAttribute]
public static ComplexTypePropertyBuilder`1<TProperty> IsSparse(ComplexTypePropertyBuilder`1<TProperty> propertyBuilder, bool sparse);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerDatabaseFacadeExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsSqlServer(DatabaseFacade database);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions : object {
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseSqlServer(DbContextOptionsBuilder optionsBuilder, Action`1<SqlServerDbContextOptionsBuilder> sqlServerOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseSqlServer(DbContextOptionsBuilder optionsBuilder, string connectionString, Action`1<SqlServerDbContextOptionsBuilder> sqlServerOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseSqlServer(DbContextOptionsBuilder optionsBuilder, DbConnection connection, Action`1<SqlServerDbContextOptionsBuilder> sqlServerOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseSqlServer(DbContextOptionsBuilder optionsBuilder, DbConnection connection, bool contextOwnsConnection, Action`1<SqlServerDbContextOptionsBuilder> sqlServerOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseSqlServer(DbContextOptionsBuilder`1<TContext> optionsBuilder, Action`1<SqlServerDbContextOptionsBuilder> sqlServerOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseSqlServer(DbContextOptionsBuilder`1<TContext> optionsBuilder, string connectionString, Action`1<SqlServerDbContextOptionsBuilder> sqlServerOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseSqlServer(DbContextOptionsBuilder`1<TContext> optionsBuilder, DbConnection connection, Action`1<SqlServerDbContextOptionsBuilder> sqlServerOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseSqlServer(DbContextOptionsBuilder`1<TContext> optionsBuilder, DbConnection connection, bool contextOwnsConnection, Action`1<SqlServerDbContextOptionsBuilder> sqlServerOptionsAction);
    private static SqlServerOptionsExtension GetOrCreateExtension(DbContextOptionsBuilder optionsBuilder);
    private static DbContextOptionsBuilder ApplyConfiguration(DbContextOptionsBuilder optionsBuilder, Action`1<SqlServerDbContextOptionsBuilder> sqlServerOptionsAction);
    private static void ConfigureWarnings(DbContextOptionsBuilder optionsBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions : object {
    [ExtensionAttribute]
public static bool FreeText(DbFunctions _, object propertyReference, string freeText, int languageTerm);
    [ExtensionAttribute]
public static bool FreeText(DbFunctions _, object propertyReference, string freeText);
    [ExtensionAttribute]
public static bool Contains(DbFunctions _, object propertyReference, string searchCondition, int languageTerm);
    [ExtensionAttribute]
public static bool Contains(DbFunctions _, object propertyReference, string searchCondition);
    [ExtensionAttribute]
public static int DateDiffYear(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffYear(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffYear(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffYear(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffYear(DbFunctions _, DateOnly startDate, DateOnly endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffYear(DbFunctions _, Nullable`1<DateOnly> startDate, Nullable`1<DateOnly> endDate);
    [ExtensionAttribute]
public static int DateDiffMonth(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMonth(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffMonth(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMonth(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffMonth(DbFunctions _, DateOnly startDate, DateOnly endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMonth(DbFunctions _, Nullable`1<DateOnly> startDate, Nullable`1<DateOnly> endDate);
    [ExtensionAttribute]
public static int DateDiffDay(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffDay(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffDay(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffDay(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffDay(DbFunctions _, DateOnly startDate, DateOnly endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffDay(DbFunctions _, Nullable`1<DateOnly> startDate, Nullable`1<DateOnly> endDate);
    [ExtensionAttribute]
public static int DateDiffHour(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffHour(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffHour(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffHour(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffHour(DbFunctions _, TimeSpan startTimeSpan, TimeSpan endTimeSpan);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffHour(DbFunctions _, Nullable`1<TimeSpan> startTimeSpan, Nullable`1<TimeSpan> endTimeSpan);
    [ExtensionAttribute]
public static int DateDiffHour(DbFunctions _, TimeOnly startTime, TimeOnly endTime);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffHour(DbFunctions _, Nullable`1<TimeOnly> startTime, Nullable`1<TimeOnly> endTime);
    [ExtensionAttribute]
public static int DateDiffHour(DbFunctions _, DateOnly startDate, DateOnly endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffHour(DbFunctions _, Nullable`1<DateOnly> startDate, Nullable`1<DateOnly> endDate);
    [ExtensionAttribute]
public static int DateDiffMinute(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMinute(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffMinute(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMinute(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffMinute(DbFunctions _, TimeSpan startTimeSpan, TimeSpan endTimeSpan);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMinute(DbFunctions _, Nullable`1<TimeSpan> startTimeSpan, Nullable`1<TimeSpan> endTimeSpan);
    [ExtensionAttribute]
public static int DateDiffMinute(DbFunctions _, TimeOnly startTime, TimeOnly endTime);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMinute(DbFunctions _, Nullable`1<TimeOnly> startTime, Nullable`1<TimeOnly> endTime);
    [ExtensionAttribute]
public static int DateDiffMinute(DbFunctions _, DateOnly startDate, DateOnly endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMinute(DbFunctions _, Nullable`1<DateOnly> startDate, Nullable`1<DateOnly> endDate);
    [ExtensionAttribute]
public static int DateDiffSecond(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffSecond(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffSecond(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffSecond(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffSecond(DbFunctions _, TimeSpan startTimeSpan, TimeSpan endTimeSpan);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffSecond(DbFunctions _, Nullable`1<TimeSpan> startTimeSpan, Nullable`1<TimeSpan> endTimeSpan);
    [ExtensionAttribute]
public static int DateDiffSecond(DbFunctions _, TimeOnly startTime, TimeOnly endTime);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffSecond(DbFunctions _, Nullable`1<TimeOnly> startTime, Nullable`1<TimeOnly> endTime);
    [ExtensionAttribute]
public static int DateDiffSecond(DbFunctions _, DateOnly startDate, DateOnly endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffSecond(DbFunctions _, Nullable`1<DateOnly> startDate, Nullable`1<DateOnly> endDate);
    [ExtensionAttribute]
public static int DateDiffMillisecond(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMillisecond(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffMillisecond(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMillisecond(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffMillisecond(DbFunctions _, TimeSpan startTimeSpan, TimeSpan endTimeSpan);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMillisecond(DbFunctions _, Nullable`1<TimeSpan> startTimeSpan, Nullable`1<TimeSpan> endTimeSpan);
    [ExtensionAttribute]
public static int DateDiffMillisecond(DbFunctions _, TimeOnly startTime, TimeOnly endTime);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMillisecond(DbFunctions _, Nullable`1<TimeOnly> startTime, Nullable`1<TimeOnly> endTime);
    [ExtensionAttribute]
public static int DateDiffMillisecond(DbFunctions _, DateOnly startDate, DateOnly endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMillisecond(DbFunctions _, Nullable`1<DateOnly> startDate, Nullable`1<DateOnly> endDate);
    [ExtensionAttribute]
public static int DateDiffMicrosecond(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMicrosecond(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffMicrosecond(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMicrosecond(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffMicrosecond(DbFunctions _, TimeSpan startTimeSpan, TimeSpan endTimeSpan);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMicrosecond(DbFunctions _, Nullable`1<TimeSpan> startTimeSpan, Nullable`1<TimeSpan> endTimeSpan);
    [ExtensionAttribute]
public static int DateDiffMicrosecond(DbFunctions _, TimeOnly startTime, TimeOnly endTime);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMicrosecond(DbFunctions _, Nullable`1<TimeOnly> startTime, Nullable`1<TimeOnly> endTime);
    [ExtensionAttribute]
public static int DateDiffMicrosecond(DbFunctions _, DateOnly startDate, DateOnly endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMicrosecond(DbFunctions _, Nullable`1<DateOnly> startDate, Nullable`1<DateOnly> endDate);
    [ExtensionAttribute]
public static int DateDiffNanosecond(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffNanosecond(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffNanosecond(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffNanosecond(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffNanosecond(DbFunctions _, TimeSpan startTimeSpan, TimeSpan endTimeSpan);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffNanosecond(DbFunctions _, Nullable`1<TimeSpan> startTimeSpan, Nullable`1<TimeSpan> endTimeSpan);
    [ExtensionAttribute]
public static int DateDiffNanosecond(DbFunctions _, TimeOnly startTime, TimeOnly endTime);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffNanosecond(DbFunctions _, Nullable`1<TimeOnly> startTime, Nullable`1<TimeOnly> endTime);
    [ExtensionAttribute]
public static int DateDiffNanosecond(DbFunctions _, DateOnly startDate, DateOnly endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffNanosecond(DbFunctions _, Nullable`1<DateOnly> startDate, Nullable`1<DateOnly> endDate);
    [ExtensionAttribute]
public static int DateDiffWeek(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffWeek(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffWeek(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffWeek(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffWeek(DbFunctions _, DateOnly startDate, DateOnly endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffWeek(DbFunctions _, Nullable`1<DateOnly> startDate, Nullable`1<DateOnly> endDate);
    [ExtensionAttribute]
public static bool IsDate(DbFunctions _, string expression);
    [ExtensionAttribute]
public static DateTime DateTimeFromParts(DbFunctions _, int year, int month, int day, int hour, int minute, int second, int millisecond);
    [ExtensionAttribute]
public static DateTime DateFromParts(DbFunctions _, int year, int month, int day);
    [ExtensionAttribute]
public static DateTime DateTime2FromParts(DbFunctions _, int year, int month, int day, int hour, int minute, int second, int fractions, int precision);
    [ExtensionAttribute]
public static DateTimeOffset DateTimeOffsetFromParts(DbFunctions _, int year, int month, int day, int hour, int minute, int second, int fractions, int hourOffset, int minuteOffset, int precision);
    [ExtensionAttribute]
public static DateTime SmallDateTimeFromParts(DbFunctions _, int year, int month, int day, int hour, int minute);
    [ExtensionAttribute]
public static TimeSpan TimeFromParts(DbFunctions _, int hour, int minute, int second, int fractions, int precision);
    [ExtensionAttribute]
public static Nullable`1<int> DataLength(DbFunctions _, string arg);
    [ExtensionAttribute]
public static Nullable`1<int> DataLength(DbFunctions _, Nullable`1<bool> arg);
    [ExtensionAttribute]
public static Nullable`1<int> DataLength(DbFunctions _, Nullable`1<double> arg);
    [ExtensionAttribute]
public static Nullable`1<int> DataLength(DbFunctions _, Nullable`1<decimal> arg);
    [ExtensionAttribute]
public static Nullable`1<int> DataLength(DbFunctions _, Nullable`1<DateTime> arg);
    [ExtensionAttribute]
public static Nullable`1<int> DataLength(DbFunctions _, Nullable`1<TimeSpan> arg);
    [ExtensionAttribute]
public static Nullable`1<int> DataLength(DbFunctions _, Nullable`1<DateTimeOffset> arg);
    [ExtensionAttribute]
public static Nullable`1<int> DataLength(DbFunctions _, Byte[] arg);
    [ExtensionAttribute]
public static Nullable`1<int> DataLength(DbFunctions _, Nullable`1<Guid> arg);
    [ExtensionAttribute]
public static bool IsNumeric(DbFunctions _, string expression);
    [ExtensionAttribute]
public static DateTimeOffset AtTimeZone(DbFunctions _, DateTime dateTime, string timeZone);
    [ExtensionAttribute]
public static DateTimeOffset AtTimeZone(DbFunctions _, DateTimeOffset dateTimeOffset, string timeZone);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(DbFunctions _, IEnumerable`1<byte> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(DbFunctions _, IEnumerable`1<short> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(DbFunctions _, IEnumerable`1<int> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(DbFunctions _, IEnumerable`1<long> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(DbFunctions _, IEnumerable`1<float> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(DbFunctions _, IEnumerable`1<double> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(DbFunctions _, IEnumerable`1<decimal> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(DbFunctions _, IEnumerable`1<byte> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(DbFunctions _, IEnumerable`1<short> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(DbFunctions _, IEnumerable`1<int> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(DbFunctions _, IEnumerable`1<long> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(DbFunctions _, IEnumerable`1<float> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(DbFunctions _, IEnumerable`1<double> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(DbFunctions _, IEnumerable`1<decimal> values);
    [ExtensionAttribute]
public static Nullable`1<double> VarianceSample(DbFunctions _, IEnumerable`1<byte> values);
    [ExtensionAttribute]
public static Nullable`1<double> VarianceSample(DbFunctions _, IEnumerable`1<short> values);
    [ExtensionAttribute]
public static Nullable`1<double> VarianceSample(DbFunctions _, IEnumerable`1<int> values);
    [ExtensionAttribute]
public static Nullable`1<double> VarianceSample(DbFunctions _, IEnumerable`1<long> values);
    [ExtensionAttribute]
public static Nullable`1<double> VarianceSample(DbFunctions _, IEnumerable`1<float> values);
    [ExtensionAttribute]
public static Nullable`1<double> VarianceSample(DbFunctions _, IEnumerable`1<double> values);
    [ExtensionAttribute]
public static Nullable`1<double> VarianceSample(DbFunctions _, IEnumerable`1<decimal> values);
    [ExtensionAttribute]
public static Nullable`1<double> VariancePopulation(DbFunctions _, IEnumerable`1<byte> values);
    [ExtensionAttribute]
public static Nullable`1<double> VariancePopulation(DbFunctions _, IEnumerable`1<short> values);
    [ExtensionAttribute]
public static Nullable`1<double> VariancePopulation(DbFunctions _, IEnumerable`1<int> values);
    [ExtensionAttribute]
public static Nullable`1<double> VariancePopulation(DbFunctions _, IEnumerable`1<long> values);
    [ExtensionAttribute]
public static Nullable`1<double> VariancePopulation(DbFunctions _, IEnumerable`1<float> values);
    [ExtensionAttribute]
public static Nullable`1<double> VariancePopulation(DbFunctions _, IEnumerable`1<double> values);
    [ExtensionAttribute]
public static Nullable`1<double> VariancePopulation(DbFunctions _, IEnumerable`1<decimal> values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerDbSetExtensions : object {
    [ExtensionAttribute]
public static IQueryable`1<TEntity> TemporalAsOf(DbSet`1<TEntity> source, DateTime utcPointInTime);
    [ExtensionAttribute]
public static IQueryable`1<TEntity> TemporalFromTo(DbSet`1<TEntity> source, DateTime utcFrom, DateTime utcTo);
    [ExtensionAttribute]
public static IQueryable`1<TEntity> TemporalBetween(DbSet`1<TEntity> source, DateTime utcFrom, DateTime utcTo);
    [ExtensionAttribute]
public static IQueryable`1<TEntity> TemporalContainedIn(DbSet`1<TEntity> source, DateTime utcFrom, DateTime utcTo);
    [ExtensionAttribute]
public static IQueryable`1<TEntity> TemporalAll(DbSet`1<TEntity> source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Configure this using ToTable(t => t.IsMemoryOptimized()) instead.")]
public static EntityTypeBuilder IsMemoryOptimized(EntityTypeBuilder entityTypeBuilder, bool memoryOptimized);
    [ExtensionAttribute]
[ObsoleteAttribute("Configure this using ToTable(t => t.IsMemoryOptimized()) instead.")]
public static EntityTypeBuilder`1<TEntity> IsMemoryOptimized(EntityTypeBuilder`1<TEntity> entityTypeBuilder, bool memoryOptimized);
    [ExtensionAttribute]
[ObsoleteAttribute("Configure this using ToTable(t => t.IsMemoryOptimized()) instead.")]
public static OwnedNavigationBuilder IsMemoryOptimized(OwnedNavigationBuilder collectionOwnershipBuilder, bool memoryOptimized);
    [ExtensionAttribute]
[ObsoleteAttribute("Configure this using ToTable(t => t.IsMemoryOptimized()) instead.")]
public static OwnedNavigationBuilder`2<TEntity, TRelatedEntity> IsMemoryOptimized(OwnedNavigationBuilder`2<TEntity, TRelatedEntity> collectionOwnershipBuilder, bool memoryOptimized);
    [ExtensionAttribute]
public static IConventionEntityTypeBuilder IsMemoryOptimized(IConventionEntityTypeBuilder entityTypeBuilder, Nullable`1<bool> memoryOptimized, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIsMemoryOptimized(IConventionEntityTypeBuilder entityTypeBuilder, Nullable`1<bool> memoryOptimized, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionEntityTypeBuilder IsTemporal(IConventionEntityTypeBuilder entityTypeBuilder, bool temporal, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIsTemporal(IConventionEntityTypeBuilder entityTypeBuilder, bool temporal, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionEntityTypeBuilder UseHistoryTableName(IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetHistoryTableName(IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionEntityTypeBuilder UseHistoryTableSchema(IConventionEntityTypeBuilder entityTypeBuilder, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetHistoryTableSchema(IConventionEntityTypeBuilder entityTypeBuilder, string schema, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionEntityTypeBuilder HasPeriodStart(IConventionEntityTypeBuilder entityTypeBuilder, string propertyName, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetPeriodStart(IConventionEntityTypeBuilder entityTypeBuilder, string propertyName, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionEntityTypeBuilder HasPeriodEnd(IConventionEntityTypeBuilder entityTypeBuilder, string propertyName, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetPeriodEnd(IConventionEntityTypeBuilder entityTypeBuilder, string propertyName, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions : object {
    private static string DefaultHistoryTableNameSuffix;
    [ExtensionAttribute]
public static bool IsMemoryOptimized(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetIsMemoryOptimized(IMutableEntityType entityType, bool memoryOptimized);
    [ExtensionAttribute]
public static Nullable`1<bool> SetIsMemoryOptimized(IConventionEntityType entityType, Nullable`1<bool> memoryOptimized, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIsMemoryOptimizedConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static bool IsTemporal(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetIsTemporal(IMutableEntityType entityType, bool temporal);
    [ExtensionAttribute]
public static Nullable`1<bool> SetIsTemporal(IConventionEntityType entityType, Nullable`1<bool> temporal, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIsTemporalConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static string GetPeriodStartPropertyName(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetPeriodStartPropertyName(IMutableEntityType entityType, string periodStartPropertyName);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetPeriodStartPropertyName(IConventionEntityType entityType, string periodStartPropertyName, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetPeriodStartPropertyNameConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static string GetPeriodEndPropertyName(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetPeriodEndPropertyName(IMutableEntityType entityType, string periodEndPropertyName);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetPeriodEndPropertyName(IConventionEntityType entityType, string periodEndPropertyName, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetPeriodEndPropertyNameConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static string GetHistoryTableName(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetHistoryTableName(IMutableEntityType entityType, string historyTableName);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetHistoryTableName(IConventionEntityType entityType, string historyTableName, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetHistoryTableNameConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static string GetHistoryTableSchema(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetHistoryTableSchema(IMutableEntityType entityType, string historyTableSchema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetHistoryTableSchema(IConventionEntityType entityType, string historyTableSchema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetHistoryTableSchemaConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static bool IsSqlOutputClauseUsed(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void UseSqlOutputClause(IMutableEntityType entityType, Nullable`1<bool> useSqlOutputClause);
    [ExtensionAttribute]
public static Nullable`1<bool> UseSqlOutputClause(IConventionEntityType entityType, Nullable`1<bool> useSqlOutputClause, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetUseSqlOutputClauseConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static bool IsSqlOutputClauseUsed(IReadOnlyEntityType entityType, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void UseSqlOutputClause(IMutableEntityType entityType, Nullable`1<bool> useSqlOutputClause, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<bool> UseSqlOutputClause(IConventionEntityType entityType, Nullable`1<bool> useSqlOutputClause, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerEntityTypeMappingFragmentExtensions : object {
    [ExtensionAttribute]
public static bool IsSqlOutputClauseUsed(IReadOnlyEntityTypeMappingFragment fragment);
    [ExtensionAttribute]
public static void UseSqlOutputClause(IMutableEntityTypeMappingFragment fragment, Nullable`1<bool> useSqlOutputClause);
    [ExtensionAttribute]
public static Nullable`1<bool> UseSqlOutputClause(IConventionEntityTypeMappingFragment fragment, Nullable`1<bool> useSqlOutputClause, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetUseSqlOutputClauseConfigurationSource(IConventionEntityTypeMappingFragment fragment);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions : object {
    [ExtensionAttribute]
public static IndexBuilder IsClustered(IndexBuilder indexBuilder, bool clustered);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> IsClustered(IndexBuilder`1<TEntity> indexBuilder, bool clustered);
    [ExtensionAttribute]
public static IConventionIndexBuilder IsClustered(IConventionIndexBuilder indexBuilder, Nullable`1<bool> clustered, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIsClustered(IConventionIndexBuilder indexBuilder, Nullable`1<bool> clustered, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IndexBuilder IncludeProperties(IndexBuilder indexBuilder, String[] propertyNames);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> IncludeProperties(IndexBuilder`1<TEntity> indexBuilder, String[] propertyNames);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> IncludeProperties(IndexBuilder`1<TEntity> indexBuilder, Expression`1<Func`2<TEntity, object>> includeExpression);
    [ExtensionAttribute]
public static IConventionIndexBuilder IncludeProperties(IConventionIndexBuilder indexBuilder, IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIncludeProperties(IConventionIndexBuilder indexBuilder, IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IndexBuilder IsCreatedOnline(IndexBuilder indexBuilder, bool createdOnline);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> IsCreatedOnline(IndexBuilder`1<TEntity> indexBuilder, bool createdOnline);
    [ExtensionAttribute]
public static IConventionIndexBuilder IsCreatedOnline(IConventionIndexBuilder indexBuilder, Nullable`1<bool> createdOnline, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIsCreatedOnline(IConventionIndexBuilder indexBuilder, Nullable`1<bool> createdOnline, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IndexBuilder HasFillFactor(IndexBuilder indexBuilder, int fillFactor);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> HasFillFactor(IndexBuilder`1<TEntity> indexBuilder, int fillFactor);
    [ExtensionAttribute]
public static IConventionIndexBuilder HasFillFactor(IConventionIndexBuilder indexBuilder, Nullable`1<int> fillFactor, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetFillFactor(IConventionIndexBuilder indexBuilder, Nullable`1<int> fillFactor, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IndexBuilder SortInTempDb(IndexBuilder indexBuilder, bool sortInTempDb);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> SortInTempDb(IndexBuilder`1<TEntity> indexBuilder, bool sortInTempDb);
    [ExtensionAttribute]
public static IConventionIndexBuilder SortInTempDb(IConventionIndexBuilder indexBuilder, Nullable`1<bool> sortInTempDb, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetSortInTempDb(IConventionIndexBuilder indexBuilder, Nullable`1<bool> sortInTempDb, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IndexBuilder UseDataCompression(IndexBuilder indexBuilder, DataCompressionType dataCompressionType);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> UseDataCompression(IndexBuilder`1<TEntity> indexBuilder, DataCompressionType dataCompressionType);
    [ExtensionAttribute]
public static IConventionIndexBuilder UseDataCompression(IConventionIndexBuilder indexBuilder, Nullable`1<DataCompressionType> dataCompressionType, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetDataCompression(IConventionIndexBuilder indexBuilder, Nullable`1<DataCompressionType> dataCompressionType, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerIndexExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<bool> IsClustered(IReadOnlyIndex index);
    [ExtensionAttribute]
public static Nullable`1<bool> IsClustered(IReadOnlyIndex index, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetIsClustered(IMutableIndex index, Nullable`1<bool> value);
    [ExtensionAttribute]
public static Nullable`1<bool> SetIsClustered(IConventionIndex index, Nullable`1<bool> value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIsClusteredConfigurationSource(IConventionIndex property);
    [ExtensionAttribute]
public static IReadOnlyList`1<string> GetIncludeProperties(IReadOnlyIndex index);
    [ExtensionAttribute]
public static IReadOnlyList`1<string> GetIncludeProperties(IReadOnlyIndex index, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetIncludeProperties(IMutableIndex index, IReadOnlyList`1<string> properties);
    [ExtensionAttribute]
public static IReadOnlyList`1<string> SetIncludeProperties(IConventionIndex index, IReadOnlyList`1<string> properties, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIncludePropertiesConfigurationSource(IConventionIndex index);
    [ExtensionAttribute]
public static Nullable`1<bool> IsCreatedOnline(IReadOnlyIndex index);
    [ExtensionAttribute]
public static Nullable`1<bool> IsCreatedOnline(IReadOnlyIndex index, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetIsCreatedOnline(IMutableIndex index, Nullable`1<bool> createdOnline);
    [ExtensionAttribute]
public static Nullable`1<bool> SetIsCreatedOnline(IConventionIndex index, Nullable`1<bool> createdOnline, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIsCreatedOnlineConfigurationSource(IConventionIndex index);
    [ExtensionAttribute]
public static Nullable`1<int> GetFillFactor(IReadOnlyIndex index);
    [ExtensionAttribute]
public static Nullable`1<int> GetFillFactor(IReadOnlyIndex index, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetFillFactor(IMutableIndex index, Nullable`1<int> fillFactor);
    [ExtensionAttribute]
public static Nullable`1<int> SetFillFactor(IConventionIndex index, Nullable`1<int> fillFactor, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetFillFactorConfigurationSource(IConventionIndex index);
    [ExtensionAttribute]
public static Nullable`1<bool> GetSortInTempDb(IReadOnlyIndex index);
    [ExtensionAttribute]
public static Nullable`1<bool> GetSortInTempDb(IReadOnlyIndex index, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetSortInTempDb(IMutableIndex index, Nullable`1<bool> sortInTempDb);
    [ExtensionAttribute]
public static Nullable`1<bool> SetSortInTempDb(IConventionIndex index, Nullable`1<bool> sortInTempDb, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetSortInTempDbConfigurationSource(IConventionIndex index);
    [ExtensionAttribute]
public static Nullable`1<DataCompressionType> GetDataCompression(IReadOnlyIndex index);
    [ExtensionAttribute]
public static Nullable`1<DataCompressionType> GetDataCompression(IReadOnlyIndex index, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetDataCompression(IMutableIndex index, Nullable`1<DataCompressionType> dataCompression);
    [ExtensionAttribute]
public static Nullable`1<DataCompressionType> SetDataCompression(IConventionIndex index, Nullable`1<DataCompressionType> dataCompression, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetDataCompressionConfigurationSource(IConventionIndex index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerKeyBuilderExtensions : object {
    [ExtensionAttribute]
public static KeyBuilder IsClustered(KeyBuilder keyBuilder, bool clustered);
    [ExtensionAttribute]
public static KeyBuilder`1<TEntity> IsClustered(KeyBuilder`1<TEntity> keyBuilder, bool clustered);
    [ExtensionAttribute]
public static IConventionKeyBuilder IsClustered(IConventionKeyBuilder keyBuilder, Nullable`1<bool> clustered, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIsClustered(IConventionKeyBuilder keyBuilder, Nullable`1<bool> clustered, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerKeyExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<bool> IsClustered(IReadOnlyKey key);
    [ExtensionAttribute]
public static Nullable`1<bool> IsClustered(IReadOnlyKey key, StoreObjectIdentifier& storeObject);
    private static Nullable`1<bool> GetDefaultIsClustered(IReadOnlyKey key, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetIsClustered(IMutableKey key, Nullable`1<bool> clustered);
    [ExtensionAttribute]
public static Nullable`1<bool> SetIsClustered(IConventionKey key, Nullable`1<bool> clustered, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIsClusteredConfigurationSource(IConventionKey key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions : object {
    [ExtensionAttribute]
public static ModelBuilder UseHiLo(ModelBuilder modelBuilder, string name, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionSequenceBuilder HasHiLoSequence(IConventionModelBuilder modelBuilder, string name, string schema, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool CanSetHiLoSequence(IConventionModelBuilder modelBuilder, string name, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static ModelBuilder UseKeySequences(ModelBuilder modelBuilder, string nameSuffix, string schema);
    [ExtensionAttribute]
public static ModelBuilder UseIdentityColumns(ModelBuilder modelBuilder, long seed, int increment);
    [ExtensionAttribute]
public static ModelBuilder UseIdentityColumns(ModelBuilder modelBuilder, int seed, int increment);
    [ExtensionAttribute]
public static IConventionModelBuilder HasIdentityColumnSeed(IConventionModelBuilder modelBuilder, Nullable`1<long> seed, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIdentityColumnSeed(IConventionModelBuilder modelBuilder, Nullable`1<long> seed, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionModelBuilder HasIdentityColumnIncrement(IConventionModelBuilder modelBuilder, Nullable`1<int> increment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIdentityColumnIncrement(IConventionModelBuilder modelBuilder, Nullable`1<int> increment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionModelBuilder HasValueGenerationStrategy(IConventionModelBuilder modelBuilder, Nullable`1<SqlServerValueGenerationStrategy> valueGenerationStrategy, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetValueGenerationStrategy(IConventionModelBuilder modelBuilder, Nullable`1<SqlServerValueGenerationStrategy> valueGenerationStrategy, bool fromDataAnnotation);
    [ExtensionAttribute]
public static ModelBuilder HasDatabaseMaxSize(ModelBuilder modelBuilder, string maxSize);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionModelBuilder HasDatabaseMaxSize(IConventionModelBuilder modelBuilder, string maxSize, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetDatabaseMaxSize(IConventionModelBuilder modelBuilder, string maxSize, bool fromDataAnnotation);
    [ExtensionAttribute]
public static ModelBuilder HasServiceTier(ModelBuilder modelBuilder, string serviceTier);
    [ExtensionAttribute]
public static ModelBuilder HasServiceTierSql(ModelBuilder modelBuilder, string serviceTier);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionModelBuilder HasServiceTierSql(IConventionModelBuilder modelBuilder, string serviceTier, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetServiceTierSql(IConventionModelBuilder modelBuilder, string serviceTier, bool fromDataAnnotation);
    [ExtensionAttribute]
public static ModelBuilder HasPerformanceLevel(ModelBuilder modelBuilder, string performanceLevel);
    [ExtensionAttribute]
public static ModelBuilder HasPerformanceLevelSql(ModelBuilder modelBuilder, string performanceLevel);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionModelBuilder HasPerformanceLevelSql(IConventionModelBuilder modelBuilder, string performanceLevel, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetPerformanceLevelSql(IConventionModelBuilder modelBuilder, string performanceLevel, bool fromDataAnnotation);
    [CompilerGeneratedAttribute]
internal static void <HasValueGenerationStrategy>g__RemoveKeySequenceAnnotations|10_0(<>c__DisplayClass10_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerModelExtensions : object {
    public static string DefaultHiLoSequenceName;
    public static string DefaultSequenceNameSuffix;
    [ExtensionAttribute]
public static string GetHiLoSequenceName(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetHiLoSequenceName(IMutableModel model, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetHiLoSequenceName(IConventionModel model, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetHiLoSequenceNameConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static string GetHiLoSequenceSchema(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetHiLoSequenceSchema(IMutableModel model, string value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetHiLoSequenceSchema(IConventionModel model, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetHiLoSequenceSchemaConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static string GetSequenceNameSuffix(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetSequenceNameSuffix(IMutableModel model, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetSequenceNameSuffix(IConventionModel model, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetSequenceNameSuffixConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static string GetSequenceSchema(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetSequenceSchema(IMutableModel model, string value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetSequenceSchema(IConventionModel model, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetSequenceSchemaConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static long GetIdentitySeed(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetIdentitySeed(IMutableModel model, Nullable`1<long> seed);
    [ExtensionAttribute]
public static Nullable`1<long> SetIdentitySeed(IConventionModel model, Nullable`1<long> seed, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentitySeedConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static int GetIdentityIncrement(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetIdentityIncrement(IMutableModel model, Nullable`1<int> increment);
    [ExtensionAttribute]
public static Nullable`1<int> SetIdentityIncrement(IConventionModel model, Nullable`1<int> increment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentityIncrementConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static Nullable`1<SqlServerValueGenerationStrategy> GetValueGenerationStrategy(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetValueGenerationStrategy(IMutableModel model, Nullable`1<SqlServerValueGenerationStrategy> value);
    [ExtensionAttribute]
public static Nullable`1<SqlServerValueGenerationStrategy> SetValueGenerationStrategy(IConventionModel model, Nullable`1<SqlServerValueGenerationStrategy> value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetValueGenerationStrategyConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static string GetDatabaseMaxSize(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetDatabaseMaxSize(IMutableModel model, string value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetDatabaseMaxSize(IConventionModel model, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetDatabaseMaxSizeConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static string GetServiceTierSql(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetServiceTierSql(IMutableModel model, string value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetServiceTierSql(IConventionModel model, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetServiceTierSqlConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static string GetPerformanceLevelSql(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetPerformanceLevelSql(IMutableModel model, string value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetPerformanceLevelSql(IConventionModel model, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetPerformanceLevelSqlConfigurationSource(IConventionModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerPrimitiveCollectionBuilderExtensions : object {
    [ExtensionAttribute]
public static PrimitiveCollectionBuilder IsSparse(PrimitiveCollectionBuilder primitiveCollectionBuilder, bool sparse);
    [ExtensionAttribute]
public static PrimitiveCollectionBuilder`1<TProperty> IsSparse(PrimitiveCollectionBuilder`1<TProperty> primitiveCollectionBuilder, bool sparse);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions : object {
    [ExtensionAttribute]
public static PropertyBuilder UseHiLo(PropertyBuilder propertyBuilder, string name, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static PropertyBuilder`1<TProperty> UseHiLo(PropertyBuilder`1<TProperty> propertyBuilder, string name, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionSequenceBuilder HasHiLoSequence(IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool CanSetHiLoSequence(IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder UseSequence(PropertyBuilder propertyBuilder, string name, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static PropertyBuilder`1<TProperty> UseSequence(PropertyBuilder`1<TProperty> propertyBuilder, string name, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionSequenceBuilder HasSequence(IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool CanSetSequence(IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder UseIdentityColumn(PropertyBuilder propertyBuilder, long seed, int increment);
    [ExtensionAttribute]
public static PropertyBuilder UseIdentityColumn(PropertyBuilder propertyBuilder, int seed, int increment);
    [ExtensionAttribute]
public static ColumnBuilder UseIdentityColumn(ColumnBuilder columnBuilder, long seed, int increment);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> UseIdentityColumn(PropertyBuilder`1<TProperty> propertyBuilder, long seed, int increment);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> UseIdentityColumn(PropertyBuilder`1<TProperty> propertyBuilder, int seed, int increment);
    [ExtensionAttribute]
public static ColumnBuilder`1<TProperty> UseIdentityColumn(ColumnBuilder`1<TProperty> columnBuilder, long seed, int increment);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasIdentityColumnSeed(IConventionPropertyBuilder propertyBuilder, Nullable`1<long> seed, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasIdentityColumnSeed(IConventionPropertyBuilder propertyBuilder, Nullable`1<long> seed, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIdentityColumnSeed(IConventionPropertyBuilder propertyBuilder, Nullable`1<long> seed, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIdentityColumnSeed(IConventionPropertyBuilder propertyBuilder, Nullable`1<long> seed, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasIdentityColumnIncrement(IConventionPropertyBuilder propertyBuilder, Nullable`1<int> increment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasIdentityColumnIncrement(IConventionPropertyBuilder propertyBuilder, Nullable`1<int> increment, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIdentityColumnIncrement(IConventionPropertyBuilder propertyBuilder, Nullable`1<int> increment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIdentityColumnIncrement(IConventionPropertyBuilder propertyBuilder, Nullable`1<int> increment, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasValueGenerationStrategy(IConventionPropertyBuilder propertyBuilder, Nullable`1<SqlServerValueGenerationStrategy> valueGenerationStrategy, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasValueGenerationStrategy(IConventionPropertyBuilder propertyBuilder, Nullable`1<SqlServerValueGenerationStrategy> valueGenerationStrategy, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetValueGenerationStrategy(IConventionPropertyBuilder propertyBuilder, Nullable`1<SqlServerValueGenerationStrategy> valueGenerationStrategy, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetValueGenerationStrategy(IConventionPropertyBuilder propertyBuilder, Nullable`1<SqlServerValueGenerationStrategy> valueGenerationStrategy, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder IsSparse(PropertyBuilder propertyBuilder, bool sparse);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> IsSparse(PropertyBuilder`1<TProperty> propertyBuilder, bool sparse);
    [ExtensionAttribute]
public static IConventionPropertyBuilder IsSparse(IConventionPropertyBuilder propertyBuilder, Nullable`1<bool> sparse, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIsSparse(IConventionPropertyBuilder property, Nullable`1<bool> sparse, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions : object {
    [ExtensionAttribute]
public static string GetHiLoSequenceName(IReadOnlyProperty property);
    [ExtensionAttribute]
public static string GetHiLoSequenceName(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetHiLoSequenceName(IMutableProperty property, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetHiLoSequenceName(IConventionProperty property, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetHiLoSequenceNameConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static string GetHiLoSequenceSchema(IReadOnlyProperty property);
    [ExtensionAttribute]
public static string GetHiLoSequenceSchema(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetHiLoSequenceSchema(IMutableProperty property, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetHiLoSequenceSchema(IConventionProperty property, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetHiLoSequenceSchemaConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static IReadOnlySequence FindHiLoSequence(IReadOnlyProperty property);
    [ExtensionAttribute]
public static IReadOnlySequence FindHiLoSequence(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static ISequence FindHiLoSequence(IProperty property);
    [ExtensionAttribute]
public static ISequence FindHiLoSequence(IProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static string GetSequenceName(IReadOnlyProperty property);
    [ExtensionAttribute]
public static string GetSequenceName(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetSequenceName(IMutableProperty property, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetSequenceName(IConventionProperty property, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetSequenceNameConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static string GetSequenceSchema(IReadOnlyProperty property);
    [ExtensionAttribute]
public static string GetSequenceSchema(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetSequenceSchema(IMutableProperty property, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetSequenceSchema(IConventionProperty property, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetSequenceSchemaConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static IReadOnlySequence FindSequence(IReadOnlyProperty property);
    [ExtensionAttribute]
public static IReadOnlySequence FindSequence(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static ISequence FindSequence(IProperty property);
    [ExtensionAttribute]
public static ISequence FindSequence(IProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<long> GetIdentitySeed(IReadOnlyProperty property);
    [ExtensionAttribute]
public static Nullable`1<long> GetIdentitySeed(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<long> GetIdentitySeed(IReadOnlyRelationalPropertyOverrides overrides);
    [ExtensionAttribute]
public static void SetIdentitySeed(IMutableProperty property, Nullable`1<long> seed);
    [ExtensionAttribute]
public static Nullable`1<long> SetIdentitySeed(IConventionProperty property, Nullable`1<long> seed, bool fromDataAnnotation);
    [ExtensionAttribute]
public static void SetIdentitySeed(IMutableProperty property, Nullable`1<long> seed, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<long> SetIdentitySeed(IConventionProperty property, Nullable`1<long> seed, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static void SetIdentitySeed(IMutableRelationalPropertyOverrides overrides, Nullable`1<long> seed);
    [ExtensionAttribute]
public static Nullable`1<long> SetIdentitySeed(IConventionRelationalPropertyOverrides overrides, Nullable`1<long> seed, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentitySeedConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentitySeedConfigurationSource(IConventionProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentitySeedConfigurationSource(IConventionRelationalPropertyOverrides overrides);
    [ExtensionAttribute]
public static Nullable`1<int> GetIdentityIncrement(IReadOnlyProperty property);
    [ExtensionAttribute]
public static Nullable`1<int> GetIdentityIncrement(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<int> GetIdentityIncrement(IReadOnlyRelationalPropertyOverrides overrides);
    [ExtensionAttribute]
public static void SetIdentityIncrement(IMutableProperty property, Nullable`1<int> increment);
    [ExtensionAttribute]
public static Nullable`1<int> SetIdentityIncrement(IConventionProperty property, Nullable`1<int> increment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static void SetIdentityIncrement(IMutableProperty property, Nullable`1<int> increment, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<int> SetIdentityIncrement(IConventionProperty property, Nullable`1<int> increment, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static void SetIdentityIncrement(IMutableRelationalPropertyOverrides overrides, Nullable`1<int> increment);
    [ExtensionAttribute]
public static Nullable`1<int> SetIdentityIncrement(IConventionRelationalPropertyOverrides overrides, Nullable`1<int> increment, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentityIncrementConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentityIncrementConfigurationSource(IConventionProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentityIncrementConfigurationSource(IConventionRelationalPropertyOverrides overrides);
    [ExtensionAttribute]
public static SqlServerValueGenerationStrategy GetValueGenerationStrategy(IReadOnlyProperty property);
    [ExtensionAttribute]
public static SqlServerValueGenerationStrategy GetValueGenerationStrategy(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
internal static SqlServerValueGenerationStrategy GetValueGenerationStrategy(IReadOnlyProperty property, StoreObjectIdentifier& storeObject, ITypeMappingSource typeMappingSource);
    [ExtensionAttribute]
public static Nullable`1<SqlServerValueGenerationStrategy> GetValueGenerationStrategy(IReadOnlyRelationalPropertyOverrides overrides);
    private static SqlServerValueGenerationStrategy GetDefaultValueGenerationStrategy(IReadOnlyProperty property);
    private static SqlServerValueGenerationStrategy GetDefaultValueGenerationStrategy(IReadOnlyProperty property, StoreObjectIdentifier& storeObject, ITypeMappingSource typeMappingSource);
    [ExtensionAttribute]
public static void SetValueGenerationStrategy(IMutableProperty property, Nullable`1<SqlServerValueGenerationStrategy> value);
    [ExtensionAttribute]
public static Nullable`1<SqlServerValueGenerationStrategy> SetValueGenerationStrategy(IConventionProperty property, Nullable`1<SqlServerValueGenerationStrategy> value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static void SetValueGenerationStrategy(IMutableProperty property, Nullable`1<SqlServerValueGenerationStrategy> value, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<SqlServerValueGenerationStrategy> SetValueGenerationStrategy(IConventionProperty property, Nullable`1<SqlServerValueGenerationStrategy> value, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static void SetValueGenerationStrategy(IMutableRelationalPropertyOverrides overrides, Nullable`1<SqlServerValueGenerationStrategy> value);
    [ExtensionAttribute]
public static Nullable`1<SqlServerValueGenerationStrategy> SetValueGenerationStrategy(IConventionRelationalPropertyOverrides overrides, Nullable`1<SqlServerValueGenerationStrategy> value, bool fromDataAnnotation);
    private static Nullable`1<SqlServerValueGenerationStrategy> CheckValueGenerationStrategy(IReadOnlyProperty property, Nullable`1<SqlServerValueGenerationStrategy> value);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetValueGenerationStrategyConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetValueGenerationStrategyConfigurationSource(IConventionProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetValueGenerationStrategyConfigurationSource(IConventionRelationalPropertyOverrides overrides);
    public static bool IsCompatibleWithValueGeneration(IReadOnlyProperty property);
    private static bool IsCompatibleWithValueGeneration(IReadOnlyProperty property, StoreObjectIdentifier& storeObject, ITypeMappingSource typeMappingSource);
    [ExtensionAttribute]
public static Nullable`1<bool> IsSparse(IReadOnlyProperty property);
    [ExtensionAttribute]
public static Nullable`1<bool> IsSparse(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetIsSparse(IMutableProperty property, Nullable`1<bool> sparse);
    [ExtensionAttribute]
public static Nullable`1<bool> SetIsSparse(IConventionProperty property, Nullable`1<bool> sparse, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIsSparseConfigurationSource(IConventionProperty property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SqlServerRetryingExecutionStrategy : ExecutionStrategy {
    private HashSet`1<int> _additionalErrorNumbers;
    protected static TimeSpan DefaultMinDelayThrottling;
    [NullableAttribute("2")]
public IEnumerable`1<int> AdditionalErrorNumbers { get; }
    public SqlServerRetryingExecutionStrategy(DbContext context);
    public SqlServerRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies);
    public SqlServerRetryingExecutionStrategy(DbContext context, int maxRetryCount);
    public SqlServerRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies, int maxRetryCount);
    public SqlServerRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies, IEnumerable`1<int> errorNumbersToAdd);
    public SqlServerRetryingExecutionStrategy(DbContext context, int maxRetryCount, TimeSpan maxRetryDelay, IEnumerable`1<int> errorNumbersToAdd);
    public SqlServerRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies, int maxRetryCount, TimeSpan maxRetryDelay, IEnumerable`1<int> errorNumbersToAdd);
    private static SqlServerRetryingExecutionStrategy();
    [NullableContextAttribute("2")]
public virtual IEnumerable`1<int> get_AdditionalErrorNumbers();
    protected virtual bool ShouldRetryOn(Exception exception);
    protected virtual Nullable`1<TimeSpan> GetNextDelay(Exception lastException);
    private static bool IsMemoryOptimizedError(Exception exception);
    private static bool IsThrottlingError(Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerTableBuilderExtensions : object {
    [ExtensionAttribute]
public static TemporalTableBuilder IsTemporal(TableBuilder tableBuilder, bool temporal);
    [ExtensionAttribute]
public static TableBuilder IsTemporal(TableBuilder tableBuilder, Action`1<TemporalTableBuilder> buildAction);
    [ExtensionAttribute]
public static TemporalTableBuilder`1<TEntity> IsTemporal(TableBuilder`1<TEntity> tableBuilder, bool temporal);
    [ExtensionAttribute]
public static TableBuilder`1<TEntity> IsTemporal(TableBuilder`1<TEntity> tableBuilder, Action`1<TemporalTableBuilder`1<TEntity>> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationTemporalTableBuilder IsTemporal(OwnedNavigationTableBuilder tableBuilder, bool temporal);
    [ExtensionAttribute]
public static OwnedNavigationTableBuilder IsTemporal(OwnedNavigationTableBuilder tableBuilder, Action`1<OwnedNavigationTemporalTableBuilder> buildAction);
    [ExtensionAttribute]
public static OwnedNavigationTemporalTableBuilder`2<TOwnerEntity, TDependentEntity> IsTemporal(OwnedNavigationTableBuilder`2<TOwnerEntity, TDependentEntity> tableBuilder, bool temporal);
    [ExtensionAttribute]
public static OwnedNavigationTableBuilder`2<TOwnerEntity, TDependentEntity> IsTemporal(OwnedNavigationTableBuilder`2<TOwnerEntity, TDependentEntity> tableBuilder, Action`1<OwnedNavigationTemporalTableBuilder`2<TOwnerEntity, TDependentEntity>> buildAction);
    [ExtensionAttribute]
public static TableBuilder IsMemoryOptimized(TableBuilder tableBuilder, bool memoryOptimized);
    [ExtensionAttribute]
public static TableBuilder`1<TEntity> IsMemoryOptimized(TableBuilder`1<TEntity> tableBuilder, bool memoryOptimized);
    [ExtensionAttribute]
public static OwnedNavigationTableBuilder IsMemoryOptimized(OwnedNavigationTableBuilder tableBuilder, bool memoryOptimized);
    [ExtensionAttribute]
public static OwnedNavigationTableBuilder`2<TOwnerEntity, TDependentEntity> IsMemoryOptimized(OwnedNavigationTableBuilder`2<TOwnerEntity, TDependentEntity> tableBuilder, bool memoryOptimized);
    [ExtensionAttribute]
public static TableBuilder UseSqlOutputClause(TableBuilder tableBuilder, bool useSqlOutputClause);
    [ExtensionAttribute]
public static TableBuilder`1<TEntity> UseSqlOutputClause(TableBuilder`1<TEntity> tableBuilder, bool useSqlOutputClause);
    [ExtensionAttribute]
public static SplitTableBuilder UseSqlOutputClause(SplitTableBuilder tableBuilder, bool useSqlOutputClause);
    [ExtensionAttribute]
public static SplitTableBuilder`1<TEntity> UseSqlOutputClause(SplitTableBuilder`1<TEntity> tableBuilder, bool useSqlOutputClause);
    [ExtensionAttribute]
public static OwnedNavigationTableBuilder UseSqlOutputClause(OwnedNavigationTableBuilder tableBuilder, bool useSqlOutputClause);
    [ExtensionAttribute]
public static OwnedNavigationTableBuilder`2<TOwnerEntity, TDependentEntity> UseSqlOutputClause(OwnedNavigationTableBuilder`2<TOwnerEntity, TDependentEntity> tableBuilder, bool useSqlOutputClause);
    private static void UseSqlOutputClause(IMutableEntityType entityType, string tableName, string tableSchema, bool useSqlOutputClause);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.SqlServerTableExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsSqlOutputClauseUsed(ITable table);
}
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.Check : object {
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static IReadOnlyList`1<T> NotEmpty(IReadOnlyList`1<T> value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static string NotEmpty(string value, string parameterName);
    public static string NullButNotEmpty(string value, string parameterName);
    public static IReadOnlyList`1<T> HasNoNulls(IReadOnlyList`1<T> value, string parameterName);
    public static IReadOnlyList`1<string> HasNoEmptyElements(IReadOnlyList`1<string> value, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void DebugAssert(bool condition, string message);
    [ConditionalAttribute("DEBUG")]
[DoesNotReturnAttribute]
public static void DebugFail(string message);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.DictionaryExtensions : object {
    [ExtensionAttribute]
public static TValue GetOrAddNew(IDictionary`2<TKey, TValue> source, TKey key);
    [ExtensionAttribute]
public static TValue Find(IReadOnlyDictionary`2<TKey, TValue> source, TKey key);
    [ExtensionAttribute]
public static bool TryGetAndRemove(IDictionary`2<TKey, TValue> source, TKey key, TReturn& value);
    [ExtensionAttribute]
public static void Remove(IDictionary`2<TKey, TValue> source, Func`3<TKey, TValue, bool> predicate);
    [ExtensionAttribute]
public static void Remove(IDictionary`2<TKey, TValue> source, Func`4<TKey, TValue, TState, bool> predicate, TState state);
}
[ExtensionAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.DisposableExtensions : object {
    [ExtensionAttribute]
public static ValueTask DisposeAsyncIfAvailable(IDisposable disposable);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.EnumerableExtensions : object {
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByOrdinal(IEnumerable`1<TSource> source, Func`2<TSource, string> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<T> Distinct(IEnumerable`1<T> source, Func`3<T, T, bool> comparer);
    [ExtensionAttribute]
public static string Join(IEnumerable`1<object> source, string separator);
    [ExtensionAttribute]
public static bool StructuralSequenceEqual(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static bool StartsWith(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> source, T item);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> source, T item, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static T FirstOr(IEnumerable`1<T> source, T alternate);
    [ExtensionAttribute]
public static T FirstOr(IEnumerable`1<T> source, Func`2<T, bool> predicate, T alternate);
    [ExtensionAttribute]
public static bool Any(IEnumerable source);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Utilities.EnumerableExtensions/<ToListAsync>d__11`1")]
[ExtensionAttribute]
public static Task`1<List`1<TSource>> ToListAsync(IAsyncEnumerable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static List`1<TSource> ToList(IEnumerable source);
    [ExtensionAttribute]
public static string Format(IEnumerable`1<string> strings);
}
internal abstract class Microsoft.EntityFrameworkCore.Utilities.Graph`1 : object {
    public IEnumerable`1<TVertex> Vertices { get; }
    public abstract virtual IEnumerable`1<TVertex> get_Vertices();
    public abstract virtual void Clear();
    public abstract virtual IEnumerable`1<TVertex> GetOutgoingNeighbors(TVertex from);
    public abstract virtual IEnumerable`1<TVertex> GetIncomingNeighbors(TVertex to);
    public ISet`1<TVertex> GetUnreachableVertices(IReadOnlyList`1<TVertex> roots);
}
internal static class Microsoft.EntityFrameworkCore.Utilities.HashHelpers : object {
    internal static Int32[] SizeOneIntArray;
    public static int HashCollisionThreshold;
    public static int MaxPrimeArrayLength;
    public static int HashPrime;
    public static Int32[] primes;
    private static HashHelpers();
    internal static int PowerOf2(int v);
    public static bool IsPrime(int candidate);
    public static int GetPrime(int min);
    public static int ExpandPrime(int oldSize);
}
internal class Microsoft.EntityFrameworkCore.Utilities.Multigraph`2 : Graph`1<TVertex> {
    private IComparer`1<TVertex> _secondarySortComparer;
    private HashSet`1<TVertex> _vertices;
    private Dictionary`2<TVertex, Dictionary`2<TVertex, object>> _successorMap;
    private Dictionary`2<TVertex, Dictionary`2<TVertex, object>> _predecessorMap;
    public IEnumerable`1<TVertex> Vertices { get; }
    public Multigraph`2(IComparer`1<TVertex> secondarySortComparer);
    public Multigraph`2(Comparison`1<TVertex> secondarySortComparer);
    public IEnumerable`1<TEdge> GetEdges(TVertex from, TVertex to);
    public void AddVertex(TVertex vertex);
    public void AddVertices(IEnumerable`1<TVertex> vertices);
    public void AddEdge(TVertex from, TVertex to, TEdge payload, bool requiresBatchingBoundary);
    public virtual void Clear();
    public IReadOnlyList`1<TVertex> TopologicalSort();
    public IReadOnlyList`1<TVertex> TopologicalSort(Func`4<TVertex, TVertex, IEnumerable`1<TEdge>, bool> tryBreakEdge);
    public IReadOnlyList`1<TVertex> TopologicalSort(Func`2<IEnumerable`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle);
    public IReadOnlyList`1<TVertex> TopologicalSort(Func`4<TVertex, TVertex, IEnumerable`1<TEdge>, bool> tryBreakEdge, Func`2<IReadOnlyList`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle, Func`2<string, string> formatException);
    protected virtual string ToString(TVertex vertex);
    public IReadOnlyList`1<List`1<TVertex>> BatchingTopologicalSort();
    public IReadOnlyList`1<List`1<TVertex>> BatchingTopologicalSort(Func`4<TVertex, TVertex, IEnumerable`1<TEdge>, bool> canBreakEdges, Func`2<IReadOnlyList`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle, Func`2<string, string> formatException);
    private IReadOnlyList`1<List`1<TVertex>> TopologicalSortCore(bool withBatching, Func`4<TVertex, TVertex, IEnumerable`1<TEdge>, bool> canBreakEdges, Func`2<IReadOnlyList`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle, Func`2<string, string> formatException);
    private void ThrowCycle(List`1<TVertex> cycle, Func`2<IReadOnlyList`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle, Func`2<string, string> formatException);
    public virtual IEnumerable`1<TVertex> get_Vertices();
    public virtual IEnumerable`1<TVertex> GetOutgoingNeighbors(TVertex from);
    public virtual IEnumerable`1<TVertex> GetIncomingNeighbors(TVertex to);
    [CompilerGeneratedAttribute]
private string <ThrowCycle>b__20_0(TVertex e);
}
[IsReadOnlyAttribute]
internal class Microsoft.EntityFrameworkCore.Utilities.SharedStopwatch : ValueType {
    private static Stopwatch Stopwatch;
    private TimeSpan _started;
    public TimeSpan Elapsed { get; }
    private SharedStopwatch(TimeSpan started);
    private static SharedStopwatch();
    public TimeSpan get_Elapsed();
    public static SharedStopwatch StartNew();
    private static SharedStopwatch StartNewCore();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.SqlServerServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddSqlServer(IServiceCollection serviceCollection, string connectionString, Action`1<SqlServerDbContextOptionsBuilder> sqlServerOptionsAction, Action`1<DbContextOptionsBuilder> optionsAction);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static IServiceCollection AddEntityFrameworkSqlServer(IServiceCollection serviceCollection);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Collections.Generic.EnumerableExtensions : object {
    [ExtensionAttribute]
public static string Join(IEnumerable`1<object> source, string separator);
    [ExtensionAttribute]
public static IEnumerable`1<T> Distinct(IEnumerable`1<T> source, Func`3<T, T, bool> comparer);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Linq.Expressions.ExpressionExtensions : object {
    [ExtensionAttribute]
public static bool IsNullConstantExpression(Expression expression);
    [ExtensionAttribute]
public static LambdaExpression UnwrapLambdaFromQuote(Expression expression);
    [ExtensionAttribute]
public static Expression UnwrapTypeConversion(Expression expression, Type& convertedType);
    private static Expression RemoveConvert(Expression expression);
    [ExtensionAttribute]
public static T GetConstantValue(Expression expression);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Linq.Expressions.ExpressionVisitorExtensions : object {
    [ExtensionAttribute]
public static IReadOnlyList`1<Expression> Visit(ExpressionVisitor visitor, IReadOnlyList`1<Expression> nodes);
    [ExtensionAttribute]
public static IReadOnlyList`1<T> VisitAndConvert(ExpressionVisitor visitor, IReadOnlyList`1<T> nodes, string callerName);
    [ExtensionAttribute]
public static IReadOnlyList`1<T> Visit(ExpressionVisitor visitor, IReadOnlyList`1<T> nodes, Func`2<T, T> elementVisitor);
}
[ExtensionAttribute]
internal static class System.Reflection.EntityFrameworkMemberInfoExtensions : object {
    [ExtensionAttribute]
public static Type GetMemberType(MemberInfo memberInfo);
    [ExtensionAttribute]
public static bool IsSameAs(MemberInfo propertyInfo, MemberInfo otherPropertyInfo);
    [ExtensionAttribute]
public static bool IsOverriddenBy(MemberInfo propertyInfo, MemberInfo otherPropertyInfo);
    [ExtensionAttribute]
public static string GetSimpleMemberName(MemberInfo member);
    [ExtensionAttribute]
public static bool IsReallyVirtual(MethodInfo method);
}
[ExtensionAttribute]
internal static class System.Reflection.MethodInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsContainsMethod(MethodInfo method);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Reflection.PropertyInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsStatic(PropertyInfo property);
    [ExtensionAttribute]
public static bool IsCandidateProperty(MemberInfo memberInfo, bool needsWrite, bool publicOnly);
    [ExtensionAttribute]
public static bool IsIndexerProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static PropertyInfo FindGetterProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static PropertyInfo FindSetterProperty(PropertyInfo propertyInfo);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.SharedTypeExtensions : object {
    private static Dictionary`2<Type, string> BuiltInTypeNames;
    private static Dictionary`2<Type, object> CommonTypeDictionary;
    private static MethodInfo GenerateDefaultValueConstantMethod;
    private static SharedTypeExtensions();
    [ExtensionAttribute]
public static Type UnwrapNullableType(Type type);
    [ExtensionAttribute]
public static bool IsNullableValueType(Type type);
    [ExtensionAttribute]
public static bool IsNullableType(Type type);
    [ExtensionAttribute]
public static bool IsValidEntityType(Type type);
    [ExtensionAttribute]
public static bool IsValidComplexType(Type type);
    [ExtensionAttribute]
public static bool IsScalarType(Type type);
    [ExtensionAttribute]
public static bool IsPropertyBagType(Type type);
    [ExtensionAttribute]
public static Type MakeNullable(Type type, bool nullable);
    [ExtensionAttribute]
public static bool IsNumeric(Type type);
    [ExtensionAttribute]
public static bool IsInteger(Type type);
    [ExtensionAttribute]
public static bool IsSignedInteger(Type type);
    [ExtensionAttribute]
public static bool IsAnonymousType(Type type);
    [ExtensionAttribute]
public static PropertyInfo GetAnyProperty(Type type, string name);
    [ExtensionAttribute]
public static bool IsInstantiable(Type type);
    [ExtensionAttribute]
public static Type UnwrapEnumType(Type type);
    [ExtensionAttribute]
public static Type GetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetElementType(Type type, Type interfaceOrBaseType);
    [ExtensionAttribute]
public static bool IsCompatibleWith(Type propertyType, Type fieldType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetGenericTypeImplementations>d__20")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetGenericTypeImplementations(Type type, Type interfaceOrBaseType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetBaseTypes>d__21")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetBaseTypes(Type type);
    [ExtensionAttribute]
public static List`1<Type> GetBaseTypesAndInterfacesInclusive(Type type);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetTypesInHierarchy>d__23")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetTypesInHierarchy(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetDeclaredInterfaces(Type type);
    [ExtensionAttribute]
public static ConstructorInfo GetDeclaredConstructor(Type type, Type[] types);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetPropertiesInHierarchy>d__26")]
[ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetPropertiesInHierarchy(Type type, string name);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetMembersInHierarchy>d__27")]
[ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type, string name);
    [ExtensionAttribute]
public static object GetDefaultValue(Type type);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("Gets all types from the given assembly - unsafe for trimming")]
public static IEnumerable`1<TypeInfo> GetConstructibleTypes(Assembly assembly);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("Gets all types from the given assembly - unsafe for trimming")]
public static IEnumerable`1<TypeInfo> GetLoadableDefinedTypes(Assembly assembly);
    [ExtensionAttribute]
public static string DisplayName(Type type, bool fullName, bool compilable);
    private static void ProcessType(StringBuilder builder, Type type, bool fullName, bool compilable);
    private static void ProcessArrayType(StringBuilder builder, Type type, bool fullName, bool compilable);
    private static void ProcessGenericType(StringBuilder builder, Type type, Type[] genericArguments, int length, bool fullName, bool compilable);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetNamespaces>d__37")]
[ExtensionAttribute]
public static IEnumerable`1<string> GetNamespaces(Type type);
    [ExtensionAttribute]
public static ConstantExpression GetDefaultValueConstant(Type type);
    private static ConstantExpression GenerateDefaultValueConstant();
    [CompilerGeneratedAttribute]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2070")]
internal static IEnumerable`1<Type> <GetDeclaredInterfaces>g__GetInterfacesSuppressed|24_0(Type type);
}
[ExtensionAttribute]
internal static class System.Text.StringBuilderExtensions : object {
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<string> values, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, string separator, String[] values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, Action`2<StringBuilder, T> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, Func`3<StringBuilder, T, bool> joinFunc, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam param, Action`3<StringBuilder, T, TParam> joinAction, string separator);
    [ExtensionAttribute]
public static void AppendBytes(StringBuilder builder, Byte[] bytes);
}
